File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -766,7 +766,7 @@ protected Account[] getAccountsByTypeForPackage(String type, String packageName)
    *     response.
    */
   public void setAuthenticationErrorOnNextResponse(boolean authenticationErrorOnNextResponse) {
-    this.authenticationErrorOnNextResponse = authenticationErrorOnNextResponse;
+    ShadowAccountManager.authenticationErrorOnNextResponse = authenticationErrorOnNextResponse;
   }
 
   /**
@@ -775,7 +775,7 @@ public void setAuthenticationErrorOnNextResponse(boolean authenticationErrorOnNe
    * @param removeAccountIntent the intent to surface as {@link AccountManager#KEY_INTENT}.
    */
   public void setRemoveAccountIntent(Intent removeAccountIntent) {
-    this.removeAccountIntent = removeAccountIntent;
+    ShadowAccountManager.removeAccountIntent = removeAccountIntent;
   }
 
   public Map<OnAccountsUpdateListener, Set<String>> getListeners() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -412,7 +412,7 @@ public void setRequestPinAppWidgetSupported(boolean supported) {
   }
 
   public void setValidWidgetProviderComponentName(boolean validWidgetProviderComponentName) {
-    this.validWidgetProviderComponentName = validWidgetProviderComponentName;
+    ShadowAppWidgetManager.validWidgetProviderComponentName = validWidgetProviderComponentName;
   }
 
   private static class WidgetInfo {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAutofillManager.java
Patch:
@@ -56,22 +56,22 @@ protected boolean isEnabled() {
    * AutofillManager#getAutofillServiceComponentName()}.
    */
   public void setAutofillServiceComponentName(@Nullable ComponentName componentName) {
-    this.autofillServiceComponentName = componentName;
+    autofillServiceComponentName = componentName;
   }
 
   /**
    * Overrides the autofill supported state for the current device and current user. See {@link
    * AutofillManager#isAutofillSupported()}.
    */
   public void setAutofillSupported(boolean supported) {
-    this.autofillSupported = supported;
+    autofillSupported = supported;
   }
 
   /**
    * Overrides the autofill enabled state for the current user. See {@link
    * AutofillManager#isEnabled()}.
    */
   public void setEnabled(boolean enabled) {
-    this.enabled = enabled;
+    ShadowAutofillManager.enabled = enabled;
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBatteryManager.java
Patch:
@@ -63,6 +63,6 @@ public void setChargeTimeRemaining(long chargeTimeRemaining) {
     Preconditions.checkArgument(
         chargeTimeRemaining == -1 || chargeTimeRemaining >= 0,
         "chargeTimeRemaining must be -1 or non-negative.");
-    this.chargeTimeRemaining = chargeTimeRemaining;
+    ShadowBatteryManager.chargeTimeRemaining = chargeTimeRemaining;
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCarrierConfigManager.java
Patch:
@@ -95,7 +95,7 @@ public PersistableBundle getConfigForSubId(int subId, @Nonnull String... keys) {
   }
 
   public void setReadPhoneStatePermission(boolean readPhoneStatePermission) {
-    this.readPhoneStatePermission = readPhoneStatePermission;
+    ShadowCarrierConfigManager.readPhoneStatePermission = readPhoneStatePermission;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowClipboardManager.java
Patch:
@@ -70,7 +70,7 @@ protected void setPrimaryClip(ClipData clip) {
       }
     }
 
-    this.clip = clip;
+    ShadowClipboardManager.clip = clip;
 
     for (OnPrimaryClipChangedListener listener : listeners) {
       listener.onPrimaryClipChanged();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -339,7 +339,7 @@ protected String getCaptivePortalServerUrl() {
    * @param captivePortalServerUrl the url of captive portal.
    */
   public void setCaptivePortalServerUrl(String captivePortalServerUrl) {
-    this.captivePortalServerUrl = captivePortalServerUrl;
+    ShadowConnectivityManager.captivePortalServerUrl = captivePortalServerUrl;
   }
 
   @HiddenApi

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowEuiccManager.java
Patch:
@@ -52,6 +52,6 @@ protected String getEid() {
 
   /** Set the value to be returned by {@link EuiccManager#getEid}. */
   public void setEid(String eid) {
-    this.eid = eid;
+    ShadowEuiccManager.eid = eid;
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowFileIntegrityManager.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowFileIntegrityManager {
 
   /** Sets the value of {@link #isApkVeritySupported}. */
   public void setIsApkVeritySupported(boolean isApkVeritySupported) {
-    this.isApkVeritySupported = isApkVeritySupported;
+    ShadowFileIntegrityManager.isApkVeritySupported = isApkVeritySupported;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLauncherApps.java
Patch:
@@ -379,9 +379,9 @@ protected void registerCallback(LauncherApps.Callback callback, Handler handler)
 
   @Implementation
   protected void unregisterCallback(LauncherApps.Callback callback) {
-    int index = Iterables.indexOf(this.callbacks, pair -> pair.first == callback);
+    int index = Iterables.indexOf(callbacks, pair -> pair.first == callback);
     if (index != -1) {
-      this.callbacks.remove(index);
+      callbacks.remove(index);
     }
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNotificationManager.java
Patch:
@@ -127,7 +127,7 @@ protected int getImportance() {
   }
 
   public void setImportance(int importance) {
-    this.importance = importance;
+    ShadowNotificationManager.importance = importance;
   }
 
   @Implementation(minSdk = M)
@@ -465,7 +465,7 @@ protected void setNotificationDelegate(String delegate) {
    * the default behavior.
    */
   public void setEnforceMaxNotificationLimit(boolean enforceMaxNotificationLimit) {
-    this.enforceMaxNotificationLimit = enforceMaxNotificationLimit;
+    ShadowNotificationManager.enforceMaxNotificationLimit = enforceMaxNotificationLimit;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRestrictionsManager.java
Patch:
@@ -21,7 +21,7 @@ public static void reset() {
    * RestrictionsManager#getApplicationRestrictions()}.
    */
   public void setApplicationRestrictions(Bundle applicationRestrictions) {
-    this.applicationRestrictions = applicationRestrictions;
+    ShadowRestrictionsManager.applicationRestrictions = applicationRestrictions;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSensorManager.java
Patch:
@@ -122,12 +122,12 @@ protected boolean registerListener(
   }
 
   public void setForceListenersToFail(boolean forceListenersToFail) {
-    this.forceListenersToFail.set(forceListenersToFail);
+    ShadowSensorManager.forceListenersToFail.set(forceListenersToFail);
   }
 
   @Implementation
   protected boolean registerListener(SensorEventListener listener, Sensor sensor, int rate) {
-    if (this.forceListenersToFail.get()) {
+    if (forceListenersToFail.get()) {
       return false;
     }
     listeners.put(listener, sensor);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowShortcutManager.java
Patch:
@@ -151,7 +151,7 @@ public void setManifestShortcuts(List<ShortcutInfo> manifestShortcuts) {
     for (ShortcutInfo shortcutInfo : manifestShortcuts) {
       shortcutInfo.addFlags(ShortcutInfo.FLAG_MANIFEST);
     }
-    this.manifestShortcuts = manifestShortcuts;
+    ShadowShortcutManager.manifestShortcuts = manifestShortcuts;
   }
 
   @Implementation
@@ -183,7 +183,7 @@ protected boolean isRequestPinShortcutSupported() {
   }
 
   public void setIsRequestPinShortcutSupported(boolean isRequestPinShortcutSupported) {
-    this.isRequestPinShortcutSupported = isRequestPinShortcutSupported;
+    ShadowShortcutManager.isRequestPinShortcutSupported = isRequestPinShortcutSupported;
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSubscriptionManager.java
Patch:
@@ -514,7 +514,7 @@ protected static int getSubscriptionId(int slotIndex) {
    * compatibility.
    */
   public void setReadPhoneStatePermission(boolean readPhoneStatePermission) {
-    this.readPhoneStatePermission = readPhoneStatePermission;
+    ShadowSubscriptionManager.readPhoneStatePermission = readPhoneStatePermission;
   }
 
   private void checkReadPhoneStatePermission() {
@@ -529,7 +529,7 @@ private void checkReadPhoneStatePermission() {
    * compatibility.
    */
   public void setReadPhoneNumbersPermission(boolean readPhoneNumbersPermission) {
-    this.readPhoneNumbersPermission = readPhoneNumbersPermission;
+    ShadowSubscriptionManager.readPhoneNumbersPermission = readPhoneNumbersPermission;
   }
 
   private void checkReadPhoneNumbersPermission() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimeManager.java
Patch:
@@ -46,7 +46,7 @@ public void setCapabilityState(String capability, @CapabilityState int value) {
         throw new IllegalArgumentException("Unrecognized capability=" + capability);
     }
 
-    this.timeZoneCapabilities = builder.build();
+    timeZoneCapabilities = builder.build();
   }
 
   @Implementation
@@ -102,7 +102,7 @@ protected TimeZoneCapabilitiesAndConfig getTimeZoneCapabilitiesAndConfig()
   @Implementation
   @SystemApi
   protected boolean updateTimeZoneConfiguration(TimeZoneConfiguration configuration) {
-    this.timeZoneConfiguration = configuration;
+    timeZoneConfiguration = configuration;
     return true;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbManager.java
Patch:
@@ -174,7 +174,7 @@ protected UsbAccessory[] getAccessoryList() {
 
   /** Sets the currently attached Usb accessory returned in #getAccessoryList. */
   public void setAttachedUsbAccessory(UsbAccessory usbAccessory) {
-    this.attachedUsbAccessory = usbAccessory;
+    attachedUsbAccessory = usbAccessory;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualDeviceManager.java
Patch:
@@ -58,7 +58,7 @@ public class ShadowVirtualDeviceManager {
   @Implementation
   protected void __constructor__(IVirtualDeviceManager service, Context context) {
     this.context = context;
-    this.service = service;
+    ShadowVirtualDeviceManager.service = service;
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWallpaperManager.java
Patch:
@@ -91,7 +91,7 @@ protected int setResource(int resid, int which) {
    */
   @Implementation
   protected boolean hasResourceWallpaper(int resid) {
-    return resid == this.lockScreenId || resid == this.homeScreenId;
+    return resid == lockScreenId || resid == homeScreenId;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWearableSensingManager.java
Patch:
@@ -51,11 +51,11 @@ protected void provideData(
   }
 
   public void setProvideDataStreamResult(@StatusCode Integer provideDataStreamResult) {
-    this.provideDataStreamResult = provideDataStreamResult;
+    ShadowWearableSensingManager.provideDataStreamResult = provideDataStreamResult;
   }
 
   public void setProvideDataResult(@StatusCode Integer provideDataResult) {
-    this.provideDataResult = provideDataResult;
+    ShadowWearableSensingManager.provideDataResult = provideDataResult;
   }
 
   public ParcelFileDescriptor getLastParcelFileDescriptor() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiP2pManager.java
Patch:
@@ -44,8 +44,8 @@ protected void setWifiP2pChannels(
       Channel c, int listeningChannel, int operatingChannel, ActionListener al) {
     Preconditions.checkNotNull(c);
     Preconditions.checkNotNull(al);
-    this.listeningChannel = listeningChannel;
-    this.operatingChannel = operatingChannel;
+    ShadowWifiP2pManager.listeningChannel = listeningChannel;
+    ShadowWifiP2pManager.operatingChannel = operatingChannel;
   }
 
   @Implementation
@@ -91,7 +91,7 @@ protected void removeGroup(Channel c, ActionListener al) {
   }
 
   public void setNextActionFailure(int nextActionFailure) {
-    this.nextActionFailure = nextActionFailure;
+    ShadowWifiP2pManager.nextActionFailure = nextActionFailure;
   }
 
   public void setGroupInfo(Channel channel, WifiP2pGroup wifiP2pGroup) {

File: shadows/framework/src/main/java/org/robolectric/android/util/concurrent/PausedExecutorService.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Executor service that queues any posted tasks.
  *
- * <p>Users must explicitly call {@link runAll()} to execute all pending tasks.
+ * <p>Users must explicitly call {@link #runAll()} to execute all pending tasks.
  *
  * <p>Intended to be a replacement for {@link RoboExecutorService} when using {@link
  * LooperMode.Mode#PAUSED}. Unlike {@link RoboExecutorService}, will execute tasks on a background

File: shadows/framework/src/main/java/org/robolectric/shadows/LauncherAppsDelegate.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import android.content.pm.ILauncherApps;
 import android.os.UserHandle;
 import android.os.UserManager;
 import java.util.List;

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeAndroidInput.java
Patch:
@@ -332,7 +332,7 @@ public class NativeAndroidInput {
    * relation to the maximum detectable size for the device. The value is normalized to a range from
    * 0 (smallest detectable size) to 1 (largest detectable size); although it is not a linear scale.
    * This value is of limited use. To obtain calibrated size information; see {@link
-   * AMOTION_EVENT_AXIS_TOUCH_MAJOR} or {@link AMOTION_EVENT_AXIS_TOOL_MAJOR}.
+   * #AMOTION_EVENT_AXIS_TOUCH_MAJOR} or {@link #AMOTION_EVENT_AXIS_TOOL_MAJOR}.
    */
   static final int AMOTION_EVENT_AXIS_SIZE = 3;
 
@@ -400,7 +400,7 @@ public class NativeAndroidInput {
    * a stylus; the orientation indicates the direction in which the stylus is pointing in relation
    * to the vertical axis of the current orientation of the screen. The range is from -PI radians to
    * PI radians; where 0 is pointing up; -PI/2 radians is pointing left; -PI or PI radians is
-   * pointing down; and PI/2 radians is pointing right. See also {@link AMOTION_EVENT_AXIS_TILT}.
+   * pointing down; and PI/2 radians is pointing right. See also {@link #AMOTION_EVENT_AXIS_TILT}.
    */
   static final int AMOTION_EVENT_AXIS_ORIENTATION = 8;
 
@@ -568,7 +568,7 @@ public class NativeAndroidInput {
   /**
    * Axis constant: The movement of y position of a motion event.
    *
-   * <p>Same as {@link RELATIVE_X}; but for y position.
+   * <p>Same as {@link #AMOTION_EVENT_AXIS_RELATIVE_X}; but for y position.
    */
   static final int AMOTION_EVENT_AXIS_RELATIVE_Y = 28;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ServiceStateBuilder.java
Patch:
@@ -78,7 +78,7 @@ public ServiceStateBuilder setDataRoamingFromRegistration(boolean value) {
 
   /**
    * Use this method to control return value of {@link ServiceState#isUsingCarrierAggregation()} (up
-   * to P). On APIs > P, use {@link ServiceStateBuilder#setNetworkRegistrationInfoList()}.
+   * to P). On APIs > P, use {@link #setNetworkRegistrationInfoList(List)}.
    */
   public ServiceStateBuilder setIsUsingCarrierAggregation(boolean value) {
     assertIsAtLeast(P);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -368,8 +368,8 @@ protected void invalidateAuthToken(final String accountType, final String authTo
   /**
    * Returns a bundle that contains the account session bundle under {@link
    * AccountManager#KEY_ACCOUNT_SESSION_BUNDLE} to later be passed on to {@link
-   * AccountManager#finishSession(Bundle,Activity,AccountManagerCallback<Bundle>,Handler)}. The
-   * session bundle simply propagates the given {@code accountType} so as not to be empty and is not
+   * AccountManager#finishSession(Bundle, Activity, AccountManagerCallback, Handler)}. The session
+   * bundle simply propagates the given {@code accountType} so as not to be empty and is not
    * encrypted as it would be in the real implementation. If an activity isn't provided, resulting
    * bundle will only have a dummy {@link Intent} under {@link AccountManager#KEY_INTENT}.
    *

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -400,8 +400,8 @@ protected boolean isFinishing() {
   }
 
   /**
-   * Constructs a new Window (a {@link com.android.internal.policy.impl.PhoneWindow}) if no window
-   * has previously been set.
+   * Constructs a new Window (a {@link com.android.internal.policy.PhoneWindow}) if no window has
+   * previously been set.
    *
    * @return the window associated with this Activity
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -233,9 +233,9 @@ public void setAppTasks(List<ActivityManager.AppTask> appTasks) {
   }
 
   /**
-   * Sets the values to be returned by {@link #getRecentTasks()}.
+   * Sets the values to be returned by {@link #getRecentTasks(int, int)}.
    *
-   * @see #getRecentTasks()
+   * @see #getRecentTasks(int, int)
    * @param recentTasks List of recent tasks.
    */
   public void setRecentTasks(List<ActivityManager.RecentTaskInfo> recentTasks) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -248,7 +248,7 @@ public interface _ActivityThread_ {
     @Accessor("mInitialApplication")
     void setInitialApplication(Application application);
 
-    /** internal use only. Tests should use {@link ActivityThread.getApplication} */
+    /** internal use only. Tests should use {@link ActivityThread#getApplication()} */
     @Accessor("mInitialApplication")
     Application getInitialApplication();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -259,7 +259,7 @@ protected boolean bindAppWidgetIdIfAllowed(
     }
   }
 
-  /** Returns true if {@link setSupportedToRequestPinAppWidget} is called with {@code true} */
+  /** Returns true if {@link #setRequestPinAppWidgetSupported} is called with {@code true} */
   @Implementation(minSdk = O)
   protected boolean isRequestPinAppWidgetSupported() {
     return requestPinAppWidgetSupported;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -48,7 +48,7 @@ public class ShadowApplication extends ShadowContextWrapper {
   private ListPopupWindow latestListPopupWindow;
 
   /**
-   * @deprecated Use {@code shadowOf({@link ApplicationProvider#getApplicationContext()})} instead.
+   * @deprecated Use {@code shadowOf(ApplicationProvider#getApplicationContext())} instead.
    */
   @Deprecated
   public static ShadowApplication getInstance() {
@@ -197,7 +197,8 @@ public void clearRegisteredReceivers() {
   }
 
   /**
-   * @deprecated Please use {@link Context#getSystemService(Context.APPWIDGET_SERVICE)} intstead.
+   * @deprecated Please use {@link Context#getSystemService(String)} with {@link
+   *     Context#APPWIDGET_SERVICE} instead.
    */
   @Deprecated
   public AppWidgetManager getAppWidgetManager() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.AsyncTaskLoader;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 
 /**
  * The shadow API for {@link AsyncTaskLoader}.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioEffect.java
Patch:
@@ -171,8 +171,8 @@ public void setInitialized(boolean initialized) {
   /**
    * Sets the error code to override setter methods in this class.
    *
-   * <p>When the error code is set to anything other than {@link SUCCESS} setters in the AudioEffect
-   * will early-out and return that error code.
+   * <p>When the error code is set to anything other than {@link AudioEffect#SUCCESS} setters in the
+   * AudioEffect will early-out and return that error code.
    */
   public void setErrorCode(int errorCode) {
     this.errorCode = errorCode;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAutofillManager.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
 
-/** Robolectric implementation of {@link android.os.AutofillManager}. */
+/** Robolectric implementation of {@link AutofillManager}. */
 @Implements(value = AutofillManager.class, minSdk = O)
 public class ShadowAutofillManager {
   @Nullable private static ComponentName autofillServiceComponentName = null;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBiometricManager.java
Patch:
@@ -97,8 +97,8 @@ private int canAuthenticateInternal(int userId, int authenticators) {
 
   /**
    * Sets the value {@code true} to allow {@link #canAuthenticate()} return {@link
-   * BIOMETRIC_SUCCESS} If sets the value to {@code false}, result will depend on {@link
-   * BiometricManager#hasBiometrics(Context context)}
+   * BiometricManager#BIOMETRIC_SUCCESS} If sets the value to {@code false}, result will depend on
+   * {@link BiometricManager#hasBiometrics(Context)}
    *
    * @param flag to set can authenticate or not
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -9,6 +9,7 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.BitmapFactory.Options;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.net.Uri;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -49,7 +49,7 @@ public class ShadowBluetoothDevice {
   /**
    * Interceptor interface for {@link BluetoothGatt} objects. Tests that require configuration of
    * their ShadowBluetoothGatt's may inject an interceptor, which will be called with the newly
-   * constructed BluetoothGatt before {@link ShadowBluetoothGatt#connectGatt} returns.
+   * constructed BluetoothGatt before {@link ShadowBluetoothDevice#connectGatt} returns.
    */
   public static interface BluetoothGattConnectionInterceptor {
     public void onNewGattConnection(BluetoothGatt gatt);
@@ -502,7 +502,7 @@ protected boolean isInSilenceMode() {
   }
 
   /**
-   * Allows tests to intercept the {@link BluetoothDevice.connectGatt} method and set state on both
+   * Allows tests to intercept the {@link BluetoothDevice#connectGatt} method and set state on both
    * BluetoothDevice and BluetoothGatt objects. This is useful for e2e testing situations where the
    * fine-grained execution of Bluetooth connection logic is onerous.
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothGatt.java
Patch:
@@ -177,7 +177,7 @@ protected boolean requestConnectionPriority(int priority) {
 
   /**
    * Overrides {@link BluetoothGatt#requestMtu} to always fail before {@link
-   * ShadowBlueoothGatt.setGattCallback} is called, and always succeed after.
+   * ShadowBluetoothGatt#setGattCallback} is called, and always succeed after.
    */
   @Implementation(minSdk = O)
   protected boolean requestMtu(int mtu) {
@@ -225,7 +225,7 @@ protected List<BluetoothGattService> getServices() {
   }
 
   /**
-   * Overrides {@link BluetoothGatt#getService} to return a service with given UUID.
+   * Overrides {@link BluetoothGatt#getService(UUID)} to return a service with given UUID.
    *
    * @return a service with given UUID that have been discovered through {@link
    *     ShadowBluetoothGatt#discoverServices}.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothGattServer.java
Patch:
@@ -5,6 +5,7 @@
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
 import android.bluetooth.BluetoothGatt;
+import android.bluetooth.BluetoothGattCallback;
 import android.bluetooth.BluetoothGattCharacteristic;
 import android.bluetooth.BluetoothGattServer;
 import android.bluetooth.BluetoothGattServerCallback;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothManager.java
Patch:
@@ -133,7 +133,7 @@ protected BluetoothGattServer openGattServer(
   }
 
   /**
-   * Overrides behavior of {@link openGattServer} and returns {@link ShadowBluetoothGattServer}
+   * Overrides behavior of {@link #openGattServer} and returns {@link ShadowBluetoothGattServer}
    * after creating and using a nullProxy for {@link IBluetoothGatt}.
    */
   @Implementation(minSdk = S)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCarrierConfigManager.java
Patch:
@@ -100,7 +100,7 @@ public void setReadPhoneStatePermission(boolean readPhoneStatePermission) {
 
   /**
    * Sets that the {@code config} PersistableBundle for a particular {@code subId}; controls the
-   * return value of {@link CarrierConfigManager#getConfigForSubId()}.
+   * return value of {@link CarrierConfigManager#getConfigForSubId(int, String...)}.
    */
   public void setConfigForSubId(int subId, PersistableBundle config) {
     bundles.put(subId, config);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowColorDisplayManager.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.util.reflector.ForType;
 import org.robolectric.util.reflector.WithType;
 
-/** Shadow for {@link ColorDisplayManager}. */
+/** Shadow for {@link android.hardware.display.ColorDisplayManager}. */
 @Implements(
     className = "android.hardware.display.ColorDisplayManager",
     isInAndroidSdk = false,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCompatibility.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.util.reflector.ForType;
 import org.robolectric.util.reflector.Static;
 
-/** Shadow for {@link Compatability}. */
+/** Shadow for {@link Compatibility}. */
 @Implements(value = Compatibility.class, isInAndroidSdk = false, minSdk = R)
 public class ShadowCompatibility {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -107,8 +107,8 @@ public Intent peekNextStartedService() {
   }
 
   /**
-   * Returns all {@code Intent} started by {@link #startService(android.content.Intent)} without
-   * consuming them.
+   * Returns all {@code Intent} started by {@link Context#startService(Intent)} without consuming
+   * them.
    *
    * @return the list of {@code Intent}
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -1650,7 +1650,7 @@ public int getUserProvisioningStateForUser(int userId) {
     return userProvisioningStatesMap.getOrDefault(userId, DevicePolicyManager.STATE_USER_UNMANAGED);
   }
 
-  /** Return a stub value set by {@link #setDevicePolicyState(DevicePolicyState policyState)} */
+  /** Return a stub value set by {@link #setDevicePolicyState(DevicePolicyState)} */
   @Implementation(minSdk = U.SDK_INT)
   protected @ClassName("android.app.admin.DevicePolicyState") Object getDevicePolicyState() {
     return devicePolicyState;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java
Patch:
@@ -352,7 +352,7 @@ protected void setSaturationLevel(float level) {
   }
 
   /**
-   * Returns the current display saturation level; {@link android.os.Build.VERSION_CODES.P} only.
+   * Returns the current display saturation level; {@link android.os.Build.VERSION_CODES#P} only.
    */
   float getSaturationLevel() {
     return saturationLevel;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDropBoxManager.java
Patch:
@@ -31,7 +31,7 @@ public ShadowDropBoxManager() {
    * DropBoxManager.Entry#getText} can be used.
    *
    * @param tag can be any arbitrary string
-   * @param timestamp a unique timestamp for the entry, relative to {@link
+   * @param wallTimestamp a unique timestamp for the entry, relative to {@link
    *     System#currentTimeMillis()}
    * @param data must not be null
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -298,7 +298,7 @@ public static File addExternalDir(String path) {
   /**
    * Sets the {@link #getExternalStorageState(File)} for given directory.
    *
-   * @param externalStorageState Value to return from {@link #getExternalStorageState(File)}.
+   * @param state Value to return from {@link #getExternalStorageState(File)}.
    */
   public static void setExternalStorageState(File directory, String state) {
     storageState.put(directory.toPath(), state);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowImsMmTelManager.java
Patch:
@@ -12,6 +12,7 @@
 import android.telephony.ims.ImsException;
 import android.telephony.ims.ImsMmTelManager;
 import android.telephony.ims.ImsMmTelManager.CapabilityCallback;
+import android.telephony.ims.ImsMmTelManager.RegistrationCallback;
 import android.telephony.ims.ImsReasonInfo;
 import android.telephony.ims.ImsRegistrationAttributes;
 import android.telephony.ims.RegistrationManager;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInCallService.java
Patch:
@@ -19,6 +19,7 @@
 import android.telecom.ParcelableCall;
 import android.telecom.Phone;
 import com.android.internal.os.SomeArgs;
+import com.android.internal.telecom.IInCallAdapter;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowIsoDep.java
Patch:
@@ -16,8 +16,8 @@
  * but most hardware implementations will have a lower limit. If extended length apdus are not
  * supported, the theoretical max transceive length is 0x105 but, again, may be lower in practice.
  *
- * <p>Dictate the Apdu response returned in {@link transceive} via {@link #setTransceiveResponse} or
- * {@link #setNextTransceiveResponse}. The former will be returned with every call to transceive
+ * <p>Dictate the Apdu response returned in {@link #transceive} via {@link #setTransceiveResponse}
+ * or {@link #setNextTransceiveResponse}. The former will be returned with every call to transceive
  * while the later will be returned only once. If neither is set, transceive will throw an
  * IOException.
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAsyncTask.java
Patch:
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.RealObject;
 import org.robolectric.util.reflector.ForType;
 
-/** A {@link AsyncTask} shadow for {@link LooperMode.Mode.LEGACY}. */
+/** A {@link AsyncTask} shadow for {@link LooperMode.Mode#LEGACY}. */
 @Implements(
     value = AsyncTask.class,
     shadowPicker = ShadowAsyncTask.Picker.class,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAsyncTaskLoader.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.RealObject;
 
-/** The shadow {@link AsyncTaskLoader} for {@link LooperMode.Mode.LEGACY}. */
+/** The shadow {@link AsyncTaskLoader} for {@link LooperMode.Mode#LEGACY}. */
 @Implements(
     value = AsyncTaskLoader.class,
     shadowPicker = ShadowAsyncTaskLoader.Picker.class,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyChoreographer.java
Patch:
@@ -14,9 +14,9 @@
 import org.robolectric.util.SoftThreadLocal;
 
 /**
- * The {@link Choreographer} shadow for {@link LooperMode.Mode.PAUSED}.
+ * The {@link Choreographer} shadow for {@link LooperMode.Mode#PAUSED}.
  *
- * <p>In {@link LooperMode.Mode.PAUSED} mode, Robolectric maintains its own concept of the current
+ * <p>In {@link LooperMode.Mode#PAUSED} mode, Robolectric maintains its own concept of the current
  * time from the Choreographer's point of view, aimed at making animations work correctly. Time
  * starts out at 0 and advances by {@code frameInterval} every time {@link
  * Choreographer#getFrameTimeNanos()} is called.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyCursorWindow.java
Patch:
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-/** Legacy shadow for {@link CursowWindow}. */
+/** Legacy shadow for {@link CursorWindow}. */
 @Implements(value = CursorWindow.class, isInAndroidSdk = false)
 public class ShadowLegacyCursorWindow extends ShadowCursorWindow {
   private static final WindowData WINDOW_DATA = new WindowData();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyLooper.java
Patch:
@@ -26,7 +26,7 @@
 import org.robolectric.util.Scheduler;
 
 /**
- * The shadow Looper implementation for {@link LooperMode.Mode.LEGACY}.
+ * The shadow Looper implementation for {@link LooperMode.Mode#LEGACY}.
  *
  * <p>Robolectric enqueues posted {@link Runnable}s to be run (on this thread) later. {@code
  * Runnable}s that are scheduled to run immediately can be triggered by calling {@link #idle()}.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessage.java
Patch:
@@ -15,9 +15,9 @@
 import org.robolectric.util.reflector.ForType;
 
 /**
- * The shadow {@link Message} for {@link LooperMode.Mode.LEGACY}.
+ * The shadow {@link Message} for {@link LooperMode.Mode#LEGACY}.
  *
- * <p>In {@link LooperMode.Mode.LEGACY}, each Message is associated with a Runnable posted to the
+ * <p>In {@link LooperMode.Mode#LEGACY}, each Message is associated with a Runnable posted to the
  * {@link Scheduler}.
  *
  * @see ShadowLooper

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessageQueue.java
Patch:
@@ -23,9 +23,9 @@
 import org.robolectric.util.reflector.ForType;
 
 /**
- * The shadow {@link MessageQueue} for {@link LooperMode.Mode.LEGACY}.
+ * The shadow {@link MessageQueue} for {@link LooperMode.Mode#LEGACY}.
  *
- * <p>In {@link LooperMode.Mode.LEGACY} Robolectric puts {@link android.os.Message}s into the
+ * <p>In {@link LooperMode.Mode#LEGACY} Robolectric puts {@link android.os.Message}s into the
  * scheduler queue instead of sending them to be handled on a separate thread. {@link
  * android.os.Message}s that are scheduled to be dispatched can be triggered by calling {@link
  * ShadowLooper#idleMainLooper}.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacySystemClock.java
Patch:
@@ -9,10 +9,11 @@
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.Resetter;
 
 /**
- * A shadow SystemClock for {@link LooperMode.Mode.LEGACY}
+ * A shadow SystemClock for {@link LooperMode.Mode#LEGACY}
  *
  * <p>In LEGACY LooperMode, Robolectric's concept of current time is base on the current time of the
  * UI Scheduler for consistency with previous implementations. This is not ideal, since both

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -1309,8 +1309,8 @@ public void sendGnssAntennaInfo(List<GnssAntennaInfo> antennaInfos) {
   }
 
   /**
-   * A convenience function equivalent to invoking {@link #simulateLocation(String, Location)} with
-   * the provider of the given location.
+   * A convenience function equivalent to invoking {@link #simulateLocation(Location)} with the
+   * provider of the given location.
    */
   public void simulateLocation(Location location) {
     simulateLocation(location.getProvider(), location);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaExtractor.java
Patch:
@@ -38,7 +38,7 @@
  *       last call to {@link #readSampleData(ByteBuffer, int)}).
  *   <li>{@link MediaExtractor#getSampleTime()} and {@link MediaExtractor#getSampleSize()} are
  *       unimplemented.
- *   <li>{@link MediaExtractor#seekTo()} is unimplemented.
+ *   <li>{@link MediaExtractor#seekTo(long, int)} is unimplemented.
  * </ul>
  */
 @Implements(MediaExtractor.class)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessage.java
Patch:
@@ -40,14 +40,14 @@ public Picker() {
    *
    * @param r the {@link Runnable} instance that is scheduled to trigger this message.
    *     <p>#if ($api >= 21) * @see #recycleUnchecked() #else * @see #recycle() #end
-   *     <p>Only supported in {@link LooperMode.Mode.LEGACY}.
+   *     <p>Only supported in {@link LooperMode.Mode#LEGACY}.
    */
   public abstract void setScheduledRunnable(Runnable r);
 
   /**
    * Convenience method to provide getter access to the private field {@code Message.next}.
    *
-   * <p>Only supported in {@link LooperMode.Mode.LEGACY}
+   * <p>Only supported in {@link LooperMode.Mode#LEGACY}
    *
    * @return The next message in the current message chain.
    * @see #setNext(Message)
@@ -57,7 +57,7 @@ public Picker() {
   /**
    * Convenience method to provide setter access to the private field {@code Message.next}.
    *
-   * <p>Only supported in {@link LooperMode.Mode.LEGACY}
+   * <p>Only supported in {@link LooperMode.Mode#LEGACY}
    *
    * @param next the new next message for the current message.
    * @see #getNext()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeColorSpaceRgb.java
Patch:
@@ -43,7 +43,7 @@ public Picker() {
     }
   }
 
-  /** Shadow for {@link ColorSpace$Rgb$Native} that contains native functions. */
+  /** Shadow for {@link ColorSpace.Rgb.Native} that contains native functions. */
   @Implements(
       className = "android.graphics.ColorSpace$Rgb$Native",
       isInAndroidSdk = false,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeMatrix.java
Patch:
@@ -267,7 +267,7 @@ public String getDescription() {
     throw new UnsupportedOperationException("Legacy ShadowMatrix APIs are not supported");
   }
 
-  /** Shadow for {@link Matrix$ExtraNatives} that contains native functions. */
+  /** Shadow for {@link Matrix.ExtraNatives} that contains native functions. */
   @Implements(
       className = "android.graphics.Matrix$ExtraNatives",
       isInAndroidSdk = false,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeRecordingCanvasOP.java
Patch:
@@ -9,8 +9,8 @@
 import org.robolectric.shadows.ShadowNativeRecordingCanvasOP.Picker;
 
 /**
- * Shadow for android.view.RecordingCanvas. This class was renamed to {@link BaseRecordingCanvas} in
- * Q.
+ * Shadow for android.view.RecordingCanvas. This class was renamed to {@link
+ * android.graphics.BaseRecordingCanvas} in Q.
  */
 @Implements(
     className = "android.view.RecordingCanvas",

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageBackwardCompatibility.java
Patch:
@@ -9,8 +9,8 @@
 import org.robolectric.annotation.Implements;
 
 /**
- * Shadow of {@link PackageBackwardCompatibility} to handle a scenario that can come up when
- * multiple Android versions end up on the classpath.
+ * Shadow of {@link android.content.pm.PackageBackwardCompatibility} to handle a scenario that can
+ * come up when multiple Android versions end up on the classpath.
  */
 @Implements(
     className = "android.content.pm.PackageBackwardCompatibility",

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -522,7 +522,7 @@ static class UnreliableBehaviorError extends AssertionError {
    *
    * <ul>
    *   <li>Continuing to read past the end returns zeros/nulls.
-   *   <li>{@link setDataCapacity} never decreases buffer size.
+   *   <li>{@link Parcel#setDataCapacity} never decreases buffer size.
    *   <li>It is possible to partially or completely overwrite byte ranges in the buffer.
    *   <li>Zero bytes can be exchanged between primitive data types and empty array/string.
    * </ul>

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedAsyncTask.java
Patch:
@@ -7,14 +7,15 @@
 import java.util.concurrent.Executor;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 import org.robolectric.util.reflector.Direct;
 import org.robolectric.util.reflector.ForType;
 
 /**
- * A {@link AsyncTask} shadow for {@link LooperMode.Mode.PAUSED}
+ * A {@link AsyncTask} shadow for {@link LooperMode.Mode#PAUSED}
  *
  * <p>This is beta API, and will likely be renamed/removed in a future Robolectric release.
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedAsyncTaskLoader.java
Patch:
@@ -11,9 +11,9 @@
 import org.robolectric.util.reflector.ForType;
 
 /**
- * The shadow {@link AsyncTaskLoader} for {@link LooperMode.Mode.PAUSED}.
+ * The shadow {@link AsyncTaskLoader} for {@link LooperMode.Mode#PAUSED}.
  *
- * <p>In {@link LooperMode.Mode.PAUSED} mode, Robolectric just uses the real AsyncTaskLoader for
+ * <p>In {@link LooperMode.Mode#PAUSED} mode, Robolectric just uses the real AsyncTaskLoader for
  * now.
  */
 @Implements(

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedChoreographer.java
Patch:
@@ -28,9 +28,9 @@
 import org.robolectric.versioning.AndroidVersions.U;
 
 /**
- * A {@link Choreographer} shadow for {@link LooperMode.Mode.PAUSED}.
+ * A {@link Choreographer} shadow for {@link LooperMode.Mode#PAUSED}.
  *
- * <p>This shadow is largely a no-op. In {@link LooperMode.Mode.PAUSED} mode, the shadowing is done
+ * <p>This shadow is largely a no-op. In {@link LooperMode.Mode#PAUSED} mode, the shadowing is done
  * at a lower level via {@link ShadowDisplayEventReceiver}.
  *
  * <p>This class should not be referenced directly - use {@link ShadowChoreographer} instead.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedLooper.java
Patch:
@@ -43,8 +43,7 @@
 import org.robolectric.util.reflector.Static;
 
 /**
- * The shadow Looper for {@link LooperMode.Mode.PAUSED and @link
- * LooperMode.Mode.INSTRUMENTATION_TEST}.
+ * The shadow Looper for {@link LooperMode.Mode#PAUSED and {@link LooperMode.Mode#INSTRUMENTATION_TEST}.
  *
  * <p>This shadow differs from the legacy {@link ShadowLegacyLooper} in the following ways:\ - Has
  * no connection to {@link org.robolectric.util.Scheduler}. Its APIs are standalone - The main

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedMessage.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.RealObject;
 
 /**
- * The shadow {@link Message} for {@link LooperMode.Mode.PAUSED}.
+ * The shadow {@link Message} for {@link LooperMode.Mode#PAUSED}.
  *
  * <p>This class should not be referenced directly. Use {@link ShadowMessage} instead.
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedMessageQueue.java
Patch:
@@ -30,7 +30,7 @@
 import org.robolectric.versioning.AndroidVersions.V;
 
 /**
- * The shadow {@link} MessageQueue} for {@link LooperMode.Mode.PAUSED}
+ * The shadow {@link} MessageQueue} for {@link LooperMode.Mode#PAUSED}
  *
  * <p>This class should not be referenced directly. Use {@link ShadowMessageQueue} instead.
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedSystemClock.java
Patch:
@@ -12,6 +12,7 @@
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.Resetter;
 
 /**
@@ -20,7 +21,7 @@
  * <p>In this variant, System times (both elapsed realtime and uptime) are controlled by this class.
  * The current times are fixed in place. You can manually advance both by calling {@link
  * SystemClock#setCurrentTimeMillis(long)} or just advance elapsed realtime only by calling {@link
- * deepSleep(long)}.
+ * #deepSleep(long)}.
  *
  * <p>{@link SystemClock#uptimeMillis()} and {@link SystemClock#currentThreadTimeMillis()} are
  * identical.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPowerManager.java
Patch:
@@ -190,7 +190,7 @@ public void setIsDeviceLightIdleMode(boolean lightDeviceIdleMode) {
 
   /**
    * Returns how location features should behave when battery saver is on. When battery saver is
-   * off, this will always return {@link #LOCATION_MODE_NO_CHANGE}.
+   * off, this will always return {@link PowerManager#LOCATION_MODE_NO_CHANGE}.
    */
   @Implementation(minSdk = P)
   @PowerManager.LocationPowerSaveMode

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
Patch:
@@ -89,7 +89,7 @@ public static void setDefaultSyncMode(String value) {
    * order to improve SQLite performance. The Android default is <code>PERSIST</code> in SDKs <= 25
    * and <code>TRUNCATE</code> in SDKs > 25.
    *
-   * <p>Similarly to {@link setDefaultSyncMode}, if your test expects SQLite rollback journal to be
+   * <p>Similarly to {@link #setDefaultSyncMode}, if your test expects SQLite rollback journal to be
    * synced to disk, use <code>PERSIST</code> or <code>TRUNCATE</code>.
    */
   public static void setDefaultJournalMode(String value) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStatsManager.java
Patch:
@@ -27,7 +27,7 @@ public static void reset() {
     configDataMap.clear();
   }
 
-  /** Adds metrics data that the shadow should return from {@link StatsManager#getReports()}. */
+  /** Adds metrics data that the shadow should return from {@link StatsManager#getReports(long)}. */
   public static void addReportData(long configKey, byte[] data) {
     reportDataMap.put(configKey, data);
   }
@@ -42,7 +42,7 @@ public static void setStatsMetadata(byte[] metadata) {
 
   /**
    * Retrieves the statsd configurations stored in the shadow as a result of {@link
-   * StatsManager#addConfig()} and {@link StatsManager#removeConfig()}.
+   * StatsManager#addConfig(long, byte[])} and {@link StatsManager#removeConfig(long)}.
    */
   public static byte[] getConfigData(long configKey) {
     return configDataMap.getOrDefault(configKey, new byte[] {});

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStorageManager.java
Patch:
@@ -44,15 +44,15 @@ public StorageVolume[] getVolumeList() {
   /**
    * Adds a {@link StorageVolume} to the list returned by {@link #getStorageVolumes()}.
    *
-   * @param StorageVolume to add to list
+   * @param storageVolume to add to list
    */
   public void addStorageVolume(StorageVolume storageVolume) {
     Preconditions.checkNotNull(storageVolume);
     storageVolumeList.add(storageVolume);
   }
 
   /**
-   * Returns the storage volumes configured via {@link #addStorageVolume()}.
+   * Returns the storage volumes configured via {@link #addStorageVolume(StorageVolume)}.
    *
    * @return StorageVolume list
    */
@@ -70,7 +70,7 @@ public void resetStorageVolumeList() {
    * Checks whether File belongs to any {@link StorageVolume} in the list returned by {@link
    * #getStorageVolumes()}.
    *
-   * @param File to check
+   * @param file to check
    * @return StorageVolume for the file
    */
   @Implementation(minSdk = N)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSuspendDialogInfo.java
Patch:
@@ -67,8 +67,8 @@ public int getNeutralButtonTextResId() {
   /**
    * Returns the action expected to happen on neutral button tap.
    *
-   * @return {@link SuspendDialogInfo.BUTTON_ACTION_MORE_DETAILS} or {@link
-   *     SuspendDialogInfo.BUTTON_ACTION_UNSUSPEND}
+   * @return {@link SuspendDialogInfo#BUTTON_ACTION_MORE_DETAILS} or {@link
+   *     SuspendDialogInfo#BUTTON_ACTION_UNSUSPEND}
    */
   @Implementation(minSdk = R)
   public int getNeutralButtonAction() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -812,7 +812,7 @@ public static class CallRecord {
     protected boolean isRinging = true;
 
     /**
-     * @deprecated Use {@link extras} instead.
+     * @deprecated Use {@link #extras} instead.
      */
     @Deprecated public final Bundle bundle;
 
@@ -826,7 +826,7 @@ public CallRecord(PhoneAccountHandle phoneAccount, Bundle extras) {
   }
 
   /**
-   * When set to false methods requiring {@link android.Manifest.permission.READ_PHONE_STATE}
+   * When set to false methods requiring {@link android.Manifest.permission#READ_PHONE_STATE}
    * permission will throw a {@link SecurityException}. By default it's set to true for backwards
    * compatibility.
    */
@@ -841,7 +841,7 @@ private void checkReadPhoneStatePermission() {
   }
 
   /**
-   * When set to false methods requiring {@link android.Manifest.permission.CALL_PHONE} permission
+   * When set to false methods requiring {@link android.Manifest.permission#CALL_PHONE} permission
    * will throw a {@link SecurityException}. By default it's set to true for backwards
    * compatibility.
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTrace.java
Patch:
@@ -168,7 +168,7 @@ public static ImmutableList<Counter> getCounters() {
    * Do not use this method unless absolutely necessary. Prefer fixing the tests instead.
    *
    * <p>Sets whether to crash on incorrect usage (e.g., calling {@link #endSection()} before {@link
-   * beginSection(String)}. Default value - {@code true}.
+   * #beginSection(String)}. Default value - {@code true}.
    */
   public static void doNotUseSetCrashOnIncorrectUsage(boolean crashOnIncorrectUsage) {
     ShadowTrace.crashOnIncorrectUsage = crashOnIncorrectUsage;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsageStatsManager.java
Patch:
@@ -114,7 +114,7 @@ public static AppUsageObserver build(
 
   /**
    * Usage session observer registered via {@link
-   * UsageStatsManager#registerUsageSessionObserver(int, String[], long, TimeUnit, long, TimeUnit,
+   * UsageStatsManager#registerUsageSessionObserver(int, String[], Duration, Duration,
    * PendingIntent, PendingIntent)}.
    */
   @AutoValue
@@ -386,7 +386,7 @@ public void addUsageStats(int intervalType, UsageStats stats) {
   /**
    * Returns the current standby bucket of the specified app that is set by {@code
    * setAppStandbyBucket}. If the standby bucket value has never been set, return {@link
-   * UsageStatsManager.STANDBY_BUCKET_ACTIVE}.
+   * UsageStatsManager#STANDBY_BUCKET_ACTIVE}.
    */
   @Implementation(minSdk = Build.VERSION_CODES.P)
   @HiddenApi
@@ -584,7 +584,7 @@ public void triggerRegisteredAppUsageLimitObserver(int observerId, Duration time
   /**
    * Returns the current app's standby bucket that is set by {@code setCurrentAppStandbyBucket}. If
    * the standby bucket value has never been set, return {@link
-   * UsageStatsManager.STANDBY_BUCKET_ACTIVE}.
+   * UsageStatsManager#STANDBY_BUCKET_ACTIVE}.
    */
   @Implementation(minSdk = Build.VERSION_CODES.P)
   @StandbyBuckets

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUserManager.java
Patch:
@@ -814,7 +814,7 @@ protected boolean isRestrictedProfile() {
    * Sets this process running under a restricted profile; controls the return value of {@link
    * UserManager#isRestrictedProfile()}.
    *
-   * @deprecated use {@link ShadowUserManager#addUser()} instead
+   * @deprecated use {@link ShadowUserManager#addUser(int, String, int)} instead
    */
   @Deprecated
   public void setIsRestrictedProfile(boolean isRestrictedProfile) {
@@ -1032,7 +1032,7 @@ protected UserInfo getUserInfo(int userHandle) {
 
   /**
    * Sets whether switching users is allowed or not; controls the return value of {@link
-   * UserManager#canSwitchUser()}
+   * UserManager#canSwitchUsers()}
    *
    * @deprecated use {@link #setUserSwitchability} instead
    */
@@ -1123,7 +1123,7 @@ protected static boolean supportsMultipleUsers() {
 
   /**
    * Sets whether multiple users are supported; controls the return value of {@link
-   * UserManager#supportsMultipleUser}.
+   * UserManager#supportsMultipleUsers()}.
    */
   public void setSupportsMultipleUsers(boolean isMultiUserSupported) {
     userManagerState.isMultiUserSupported = isMultiUserSupported;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVibrator.java
Patch:
@@ -4,6 +4,7 @@
 import static android.os.Build.VERSION_CODES.S;
 
 import android.media.AudioAttributes;
+import android.os.VibrationEffect;
 import android.os.Vibrator;
 import android.os.vibrator.PrimitiveSegment;
 import android.util.SparseArray;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVisualizer.java
Patch:
@@ -131,7 +131,7 @@ public void setState(int newState) {
   /**
    * Sets the error code to override setter methods in this class.
    *
-   * <p>When the error code is set to anything other than {@link Visualizer.SUCCESS} setters in the
+   * <p>When the error code is set to anything other than {@link Visualizer#SUCCESS} setters in the
    * Visualizer will early-out and return that error code.
    */
   public void setErrorCode(int errorCode) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWallpaperManager.java
Patch:
@@ -265,7 +265,7 @@ public List<WallpaperCommandRecord> getWallpaperCommandRecords() {
 
   /**
    * Throws {@link SecurityException} if the caller doesn't have {@link
-   * permission.SET_WALLPAPER_COMPONENT}.
+   * permission#SET_WALLPAPER_COMPONENT}.
    */
   private static void enforceWallpaperComponentPermission() {
     // Robolectric doesn't stimulate IPC calls. When this code is executed, it will still be running

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiManager.java
Patch:
@@ -527,7 +527,7 @@ public void setChangeWifiStatePermission(boolean changeWifiStatePermission) {
   }
 
   /**
-   * Prevents a networkId from being updated using the {@link updateNetwork(WifiConfiguration)}
+   * Prevents a networkId from being updated using the {@link #updateNetwork(WifiConfiguration)}
    * method. This is to simulate the case where a separate application creates a network, and the
    * Android security model prevents your application from updating it.
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindowManagerGlobal.java
Patch:
@@ -143,7 +143,7 @@ public static void clearLastDragClipData() {
    * ShadowWindowManagerGlobal#startPredictiveBackGesture}. One or more drag progress events can be
    * dispatched by calling {@link #moveBy}. The gesture must be ended by either calling {@link
    * #cancel()} or {@link #close()}, if {@link #cancel()} is called a subsequent call to {@link
-   * close()} will do nothing to allow using the gesture in a try with resources statement:
+   * #close()} will do nothing to allow using the gesture in a try with resources statement:
    *
    * <pre>
    * try (PredictiveBackGesture backGesture =

File: shadows/framework/src/main/java/org/robolectric/shadows/StreamConfigurationMapBuilder.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import android.graphics.ImageFormat;
+import android.graphics.PixelFormat;
 import android.hardware.camera2.params.StreamConfiguration;
 import android.hardware.camera2.params.StreamConfigurationMap;
 import android.os.Build.VERSION_CODES;
@@ -61,7 +63,7 @@ public StreamConfigurationMapBuilder addInputSize(int format, Size inputSize) {
   /**
    * Adds an output size to be returned by {@link StreamConfigurationMap#getOutputSizes}.
    *
-   * <p>Calling this method is equivalent to calling {@link addOutputSize(int, Size)} with format
+   * <p>Calling this method is equivalent to calling {@link #addOutputSize(int, Size)} with format
    * {@link ImageFormat#PRIVATE}.
    */
   public StreamConfigurationMapBuilder addOutputSize(Size outputSize) {

File: shadows/framework/src/main/java/org/robolectric/shadows/UiccCardInfoBuilder.java
Patch:
@@ -58,7 +58,7 @@ public UiccCardInfoBuilder setIccId(String iccId) {
   }
 
   /**
-   * @deprecated Use {@link setPhysicalSlotIndex} for Android T+ instead.
+   * @deprecated Use {@link #setPhysicalSlotIndex} for Android T+ instead.
    */
   @CanIgnoreReturnValue
   @Deprecated

File: shadows/framework/src/main/java/org/robolectric/android/ConfigurationV25.java
Patch:
@@ -63,7 +63,7 @@ private static String localesToResourceQualifier(List<Locale> locs) {
 
   public static String resourceQualifierString(
       Configuration config, DisplayMetrics displayMetrics) {
-    ArrayList<String> parts = new ArrayList<String>();
+    ArrayList<String> parts = new ArrayList<>();
 
     if (config.mcc != 0) {
       parts.add("mcc" + config.mcc);

File: shadows/framework/src/main/java/org/robolectric/android/util/concurrent/PausedExecutorService.java
Patch:
@@ -174,6 +174,6 @@ protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
 
   @Override
   protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
-    return new DeferredTask<T>(callable, realService);
+    return new DeferredTask<>(callable, realService);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/android/util/concurrent/RoboExecutorService.java
Patch:
@@ -89,12 +89,12 @@ public boolean awaitTermination(long l, TimeUnit timeUnit) throws InterruptedExc
 
   @Override
   public <T> Future<T> submit(Callable<T> tCallable) {
-    return schedule(new AdvancingFutureTask<T>(scheduler, tCallable));
+    return schedule(new AdvancingFutureTask<>(scheduler, tCallable));
   }
 
   @Override
   public <T> Future<T> submit(Runnable runnable, T t) {
-    return schedule(new AdvancingFutureTask<T>(scheduler, runnable, t));
+    return schedule(new AdvancingFutureTask<>(scheduler, runnable, t));
   }
 
   @Override

File: shadows/framework/src/main/java/org/robolectric/shadows/EmergencyNumberBuilder.java
Patch:
@@ -19,7 +19,7 @@ public class EmergencyNumberBuilder {
   private final String number;
   private final String countryIso;
   private final String mnc;
-  private final List<String> emergencyUrns = new ArrayList<String>();
+  private final List<String> emergencyUrns = new ArrayList<>();
   private int emergencyServiceCategories = EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED;
   private int emergencyNumberSources = EmergencyNumber.EMERGENCY_NUMBER_SOURCE_DEFAULT;
   private int emergencyCallRouting = EmergencyNumber.EMERGENCY_CALL_ROUTING_UNKNOWN;

File: shadows/framework/src/main/java/org/robolectric/shadows/HealthStatsBuilder.java
Patch:
@@ -72,7 +72,7 @@ public HealthStatsBuilder addMeasurement(int key, long value) {
    */
   @CanIgnoreReturnValue
   public HealthStatsBuilder addStats(int key, ArrayMap<String, HealthStats> value) {
-    statsMap.put(key, new ArrayMap<String, HealthStats>(value));
+    statsMap.put(key, new ArrayMap<>(value));
     return this;
   }
 
@@ -82,7 +82,7 @@ public HealthStatsBuilder addStats(int key, ArrayMap<String, HealthStats> value)
    */
   @CanIgnoreReturnValue
   public HealthStatsBuilder addTimers(int key, ArrayMap<String, TimerStat> value) {
-    timersMap.put(key, new ArrayMap<String, TimerStat>(value));
+    timersMap.put(key, new ArrayMap<>(value));
     return this;
   }
 
@@ -92,7 +92,7 @@ public HealthStatsBuilder addTimers(int key, ArrayMap<String, TimerStat> value)
    */
   @CanIgnoreReturnValue
   public HealthStatsBuilder addMeasurements(int key, ArrayMap<String, Long> value) {
-    measurementsMap.put(key, new ArrayMap<String, Long>(value));
+    measurementsMap.put(key, new ArrayMap<>(value));
     return this;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/PolicyStateBuilder.java
Patch:
@@ -13,8 +13,7 @@
 
 /** Builder for {@link PolicyState} */
 public class PolicyStateBuilder {
-  private final Map<EnforcingAdmin, PolicyValue<?>> policiesSetByAdmins =
-      new LinkedHashMap<EnforcingAdmin, PolicyValue<?>>();
+  private final Map<EnforcingAdmin, PolicyValue<?>> policiesSetByAdmins = new LinkedHashMap<>();
   private PolicyValue<?> currentResolvedPolicy;
 
   private PolicyStateBuilder() {}

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -309,7 +309,7 @@ protected void setUserData(Account account, String key, String value) {
     }
 
     if (!userData.containsKey(account)) {
-      userData.put(account, new HashMap<String, String>());
+      userData.put(account, new HashMap<>());
     }
 
     Map<String, String> userDataMap = userData.get(account);
@@ -608,7 +608,7 @@ public void addAuthenticator(String type) {
     addAuthenticator(AuthenticatorDescription.newKey(type));
   }
 
-  private final Map<Account, String> previousNames = new HashMap<Account, String>();
+  private final Map<Account, String> previousNames = new HashMap<>();
 
   /**
    * Sets the previous name for an account, which will be returned by {@link

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -1720,7 +1720,7 @@ protected void updatePermissionFlags(
       @PackageManager.PermissionFlags int flagValues,
       UserHandle user) {
     if (!permissionFlags.containsKey(packageName)) {
-      permissionFlags.put(packageName, new HashMap<String, Integer>());
+      permissionFlags.put(packageName, new HashMap<>());
     }
 
     int existingFlags =

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -1356,8 +1356,8 @@ private synchronized CppAssetManager assetManagerForJavaObject() {
 
   static ParcelFileDescriptor returnParcelFileDescriptor(Asset a, long[] outOffsets)
       throws FileNotFoundException {
-    final Ref<Long> startOffset = new Ref<Long>(-1L);
-    final Ref<Long> length = new Ref<Long>(-1L);
+    final Ref<Long> startOffset = new Ref<>(-1L);
+    final Ref<Long> length = new Ref<>(-1L);
     ;
     FileDescriptor fd = a.openFileDescriptor(startOffset, length);
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothAdapter.java
Patch:
@@ -89,9 +89,9 @@ public class ShadowBluetoothAdapter {
   private static boolean isBluetoothSupported = true;
 
   private static final Map<String, BluetoothDevice> deviceCache = new HashMap<>();
-  private Set<BluetoothDevice> bondedDevices = new HashSet<BluetoothDevice>();
+  private Set<BluetoothDevice> bondedDevices = new HashSet<>();
   private List<BluetoothDevice> mostRecentlyConnectedDevices = new ArrayList<>();
-  private final Set<LeScanCallback> leScanCallbacks = new HashSet<LeScanCallback>();
+  private final Set<LeScanCallback> leScanCallbacks = new HashSet<>();
   private boolean isDiscovering;
   private String address;
   private int state;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowClipboardManager.java
Patch:
@@ -25,7 +25,7 @@
 @Implements(ClipboardManager.class)
 public class ShadowClipboardManager {
   private static final Collection<OnPrimaryClipChangedListener> listeners =
-      new CopyOnWriteArrayList<OnPrimaryClipChangedListener>();
+      new CopyOnWriteArrayList<>();
   private static ClipData clip;
   @RealObject private ClipboardManager realClipboardManager;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowKeyguardManager.java
Patch:
@@ -19,8 +19,8 @@
 public class ShadowKeyguardManager {
   // These have to be static because on Android L and below, a new instance of KeyguardManager is
   // created each time it is requested.
-  private static final Set<Integer> deviceLockedForUsers = new HashSet<Integer>();
-  private static final Set<Integer> deviceSecureForUsers = new HashSet<Integer>();
+  private static final Set<Integer> deviceLockedForUsers = new HashSet<>();
+  private static final Set<Integer> deviceSecureForUsers = new HashSet<>();
   private static boolean inRestrictedInputMode;
   private static boolean isKeyguardLocked;
   private static boolean isDeviceLocked;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyCursorWindow.java
Patch:
@@ -178,7 +178,7 @@ private static class Data {
 
     public Data(String name, int cursorWindowSize) {
       this.name = name;
-      this.rows = new ArrayList<Row>();
+      this.rows = new ArrayList<>();
     }
 
     public Value value(int rowN, int colN) {
@@ -255,7 +255,7 @@ private static class Row {
     private final List<Value> values;
 
     public Row(int length) {
-      values = new ArrayList<Value>(length);
+      values = new ArrayList<>(length);
       for (int i = 0; i < length; i++) {
         values.add(new Value(null, Cursor.FIELD_TYPE_NULL));
       }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyLooper.java
Patch:
@@ -44,7 +44,7 @@ public class ShadowLegacyLooper extends ShadowLooper {
   // Note that the main looper is handled differently and is not put in this hash, because we need
   // to be able to "switch" the thread that the main looper is associated with.
   private static final Map<Thread, Looper> loopingLoopers =
-      Collections.synchronizedMap(new WeakHashMap<Thread, Looper>());
+      Collections.synchronizedMap(new WeakHashMap<>());
 
   private static Looper mainLooper;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyPath.java
Patch:
@@ -113,7 +113,7 @@ protected float[] approximate(float acceptableError) {
 
     float[] segment = new float[6];
     float totalLength = 0;
-    ArrayList<Point2D.Float> points = new ArrayList<Point2D.Float>();
+    ArrayList<Point2D.Float> points = new ArrayList<>();
     Point2D.Float previousPoint = null;
     while (!iterator.isDone()) {
       int type = iterator.currentSegment(segment);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -36,10 +36,10 @@ public class ShadowLog {
   private static final int EXTRA_LOG_LENGTH = "l/: \n".length();
 
   private static final Map<String, Queue<LogItem>> logsByTag =
-      Collections.synchronizedMap(new HashMap<String, Queue<LogItem>>());
+      Collections.synchronizedMap(new HashMap<>());
   private static final Queue<LogItem> logs = new ConcurrentLinkedQueue<>();
   private static final Map<String, Integer> tagToLevel =
-      Collections.synchronizedMap(new HashMap<String, Integer>());
+      Collections.synchronizedMap(new HashMap<>());
 
   /**
    * Whether calling {@link Log#wtf} will throw {@link TerribleFailure}. This is analogous to

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaExtractor.java
Patch:
@@ -69,7 +69,7 @@ public static void addTrack(DataSource dataSource, MediaFormat format, byte[] sa
     TrackInfo trackInfo = new TrackInfo();
     trackInfo.format = format;
     trackInfo.sampleData = sampleData;
-    tracksMap.putIfAbsent(dataSource, new ArrayList<TrackInfo>());
+    tracksMap.putIfAbsent(dataSource, new ArrayList<>());
     List<TrackInfo> tracks = tracksMap.get(dataSource);
     tracks.add(trackInfo);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaMetadataRetriever.java
Patch:
@@ -97,7 +97,7 @@ public static void addException(DataSource ds, RuntimeException e) {
 
   public static void addMetadata(DataSource ds, int keyCode, String value) {
     if (!metadata.containsKey(ds)) {
-      metadata.put(ds, new HashMap<Integer, String>());
+      metadata.put(ds, new HashMap<>());
     }
     metadata.get(ds).put(keyCode, value);
   }
@@ -119,15 +119,15 @@ public static void addMetadata(String path, int keyCode, String value) {
 
   public static void addFrame(DataSource ds, long time, Bitmap bitmap) {
     if (!frames.containsKey(ds)) {
-      frames.put(ds, new HashMap<Long, Bitmap>());
+      frames.put(ds, new HashMap<>());
     }
     frames.get(ds).put(time, bitmap);
   }
 
   public static void addScaledFrame(
       DataSource ds, long time, int dstWidth, int dstHeight, Bitmap bitmap) {
     if (!scaledFrames.containsKey(ds)) {
-      scaledFrames.put(ds, new HashMap<String, Bitmap>());
+      scaledFrames.put(ds, new HashMap<>());
     }
     scaledFrames.get(ds).put(getScaledFrameKey(time, dstWidth, dstHeight), bitmap);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPathParser.java
Patch:
@@ -34,7 +34,7 @@ public static PathDataNode[] createNodesFromPathData(String pathData) {
     int start = 0;
     int end = 1;
 
-    ArrayList<PathDataNode> list = new ArrayList<PathDataNode>();
+    ArrayList<PathDataNode> list = new ArrayList<>();
     while (end < pathData.length()) {
       end = nextStart(pathData, end);
       String s = pathData.substring(start, end).trim();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedLooper.java
Patch:
@@ -65,7 +65,7 @@ public final class ShadowPausedLooper extends ShadowLooper {
 
   // Keep reference to all created Loopers so they can be torn down after test
   private static final Set<Looper> loopingLoopers =
-      Collections.synchronizedSet(Collections.newSetFromMap(new WeakHashMap<Looper, Boolean>()));
+      Collections.synchronizedSet(Collections.newSetFromMap(new WeakHashMap<>()));
 
   private static boolean ignoreUncaughtExceptions = false;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedMessageQueue.java
Patch:
@@ -42,7 +42,7 @@ public class ShadowPausedMessageQueue extends ShadowMessageQueue {
 
   // just use this class as the native object
   private static final NativeObjRegistry<ShadowPausedMessageQueue> nativeQueueRegistry =
-      new NativeObjRegistry<ShadowPausedMessageQueue>(ShadowPausedMessageQueue.class);
+      new NativeObjRegistry<>(ShadowPausedMessageQueue.class);
   private boolean isPolling = false;
   private ShadowPausedSystemClock.Listener clockListener;
   private Exception uncaughtException = null;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPowerManager.java
Patch:
@@ -87,7 +87,7 @@ public class ShadowPowerManager {
   private static boolean lowPowerStandbyEnabled = false;
   private static boolean lowPowerStandbySupported = false;
   private static boolean exemptFromLowPowerStandby = false;
-  private static final Set<String> allowedFeatures = new HashSet<String>();
+  private static final Set<String> allowedFeatures = new HashSet<>();
 
   @Implementation
   protected PowerManager.WakeLock newWakeLock(int flags, String tag) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowProcess.java
Patch:
@@ -28,7 +28,7 @@ public class ShadowProcess {
   private static final int THREAD_PRIORITY_LOWEST = 19;
 
   @GuardedBy("threadPrioritiesLock")
-  private static final Map<Integer, Integer> threadPriorities = new HashMap<Integer, Integer>();
+  private static final Map<Integer, Integer> threadPriorities = new HashMap<>();
 
   @GuardedBy("killedProcessesLock")
   private static final Set<Integer> killedProcesses = new HashSet<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextToSpeech.java
Patch:
@@ -195,7 +195,7 @@ protected int setLanguage(Locale locale) {
               Voice.QUALITY_NORMAL,
               Voice.LATENCY_NORMAL,
               /* requiresNetworkConnection= */ false,
-              new HashSet<String>()));
+              new HashSet<>()));
     }
 
     return languageAvailability;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualRefBasePtr.java
Patch:
@@ -11,7 +11,7 @@ public class ShadowVirtualRefBasePtr {
       new NativeObjRegistry<>(RefHolder.class);
 
   protected static synchronized <T> long put(T object) {
-    return NATIVE_REGISTRY.register(new RefHolder<T>(object));
+    return NATIVE_REGISTRY.register(new RefHolder<>(object));
   }
 
   protected static synchronized <T> T get(long nativePtr, Class<T> clazz) {

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithMenuTest.java
Patch:
@@ -11,12 +11,9 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
-import org.robolectric.annotation.TextLayoutMode.Mode;
 
 /** Test Espresso on Robolectric interoperability for menus. */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(Mode.REALISTIC)
 public class EspressoWithMenuTest {
 
   @Test

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithSwitchCompatTest.java
Patch:
@@ -10,12 +10,10 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
 
 /** Tests Espresso on Activities with {@link androidx.appcompat.widget.SwitchCompat}. */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(TextLayoutMode.Mode.REALISTIC)
 public class EspressoWithSwitchCompatTest {
   @Test
   public void switchCompatTest() {

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithToolbarMenuTest.java
Patch:
@@ -11,13 +11,10 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
-import org.robolectric.annotation.TextLayoutMode.Mode;
 import org.robolectric.shadows.ShadowViewConfiguration;
 
 /** Test Espresso on Robolectric interoperability for toolbar menus. */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(Mode.REALISTIC)
 public class EspressoWithToolbarMenuTest {
   @Test
   public void appCompatToolbarMenuClick() {

File: annotations/src/main/java/org/robolectric/annotation/LooperMode.java
Patch:
@@ -91,7 +91,7 @@ enum Mode {
      *   <li>{@link android.os.Looper} use the real {@link android.os.MessageQueue} to store their
      *       queue of pending tasks
      *   <li>There is only a single clock value, managed via {@link
-     *       org.robolectric.shadows.ShadowSystemClock}. This can be explictly incremented via
+     *       org.robolectric.shadows.ShadowSystemClock}. This can be explicitly incremented via
      *       {@link android.os.SystemClock#setCurrentTimeMillis(long)}, or {@link
      *       org.robolectric.shadows.ShadowLooper#idleFor(Duration)}.
      * </ul>

File: annotations/src/main/java/org/robolectric/annotation/TextLayoutMode.java
Patch:
@@ -38,7 +38,7 @@ enum Mode {
     /**
      * The new, more accurate layout mechanism.
      *
-     * @deprecated REALTISTIC is the default mode and does not need to be stated explicity.
+     * @deprecated REALISTIC is the default mode and does not need to be stated explicitly.
      */
     @Deprecated
     REALISTIC,

File: integration_tests/ctesque/src/sharedTest/java/android/database/SQLiteDatabaseTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() throws Exception {
   }
 
   /**
-   * If running on Robolectric, this test only works in RobolectriSQLite native mode. Attempt to
+   * If running on Robolectric, this test only works in RobolectricSQLite native mode. Attempt to
    * figure this out
    */
   private boolean isNativeSqliteMode() throws IllegalAccessException, NoSuchFieldException {

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -2138,7 +2138,7 @@ private boolean isLocaleBetterThan(ResTable_config o, ResTable_config requested)
       //
       // The exception is that we consider no-language resources a better match
       // for US English and similar locales than locales that are a descendant
-      // of Internatinal English (en-001), since no-language resources are
+      // of International English (en-001), since no-language resources are
       // where the US English resource have traditionally lived for most apps.
       if (areIdentical(requested.language, kEnglish)) {
         if (areIdentical(requested.country, kUnitedStates)) {

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -1102,7 +1102,7 @@ public int[] getSpecFlags() {
    * <p>If the flag FLAG_SPARSE is set in `flags`, then this struct is followed by an array of
    * ResTable_sparseTypeEntry defining only the entries that have values for this type. Each entry
    * is sorted by their entry ID such that a binary search can be performed over the entries. The ID
-   * and offset are encoded in a uint32_t. See ResTabe_sparseTypeEntry.
+   * and offset are encoded in a uint32_t. See ResTable_sparseTypeEntry.
    *
    * <p>There may be multiple of these chunks for a particular resource type, supply different
    * configuration variations for the resource values of that type.
@@ -1283,7 +1283,7 @@ static class ResTable_entry extends WithOffset {
     // If set, this resource has been declared public, so libraries
     // are allowed to reference it.
     public static final int FLAG_PUBLIC = 0x0002;
-    // If set, this is a weak resource and may be overriden by strong
+    // If set, this is a weak resource and may be overridden by strong
     // resources of the same name/type. This is only useful during
     // linking with other resource tables.
     public static final int FLAG_WEAK = 0x0004;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -101,12 +101,12 @@ public void requestAudioFocus_shouldReturnTheSpecifiedValue() {
   public void requestAudioFocus2_shouldRecordArgumentsOfMostRecentCall() {
     assertThat(shadowOf(audioManager).getLastAudioFocusRequest()).isNull();
 
-    AudioAttributes atts =
+    AudioAttributes attrs =
         new AudioAttributes.Builder().setLegacyStreamType(AudioManager.STREAM_MUSIC).build();
     android.media.AudioFocusRequest request =
         new android.media.AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)
             .setOnAudioFocusChangeListener(listener)
-            .setAudioAttributes(atts)
+            .setAudioAttributes(attrs)
             .build();
 
     audioManager.requestAudioFocus(request);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDevicePolicyManagerTest.java
Patch:
@@ -2012,7 +2012,7 @@ public void getProfileOwnerNameAsUser() {
   }
 
   @Test
-  public void setPersistentPreferrecActivity_exists() {
+  public void setPersistentPreferredActivity_exists() {
     ComponentName randomActivity = new ComponentName("random.package", "Activity");
     shadowOf(devicePolicyManager).setDeviceOwner(testComponent);
 

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -530,7 +530,7 @@ public ActivityController<T> configurationChange(
             _component_ = _recreatedActivity_;
 
             // TODO: Because robolectric is currently not creating unique context objects per
-            //  activity and that the app copmat framework uses weak maps to cache resources per
+            //  activity and that the app compat framework uses weak maps to cache resources per
             //  context the caches end up with stale objects between activity creations (which would
             //  typically be flushed by an onConfigurationChanged when running in real android). To
             //  workaround this we can invoke a gc after running the configuration change and

File: shadows/framework/src/main/java/org/robolectric/shadows/MediaCodecInfoBuilder.java
Patch:
@@ -72,7 +72,7 @@ public MediaCodecInfoBuilder setIsVendor(boolean isVendor) {
   }
 
   /**
-   * Sets whether the codec is softwrare only or not.
+   * Sets whether the codec is software only or not.
    *
    * @param isSoftwareOnly a boolean to indicate whether the codec is software only {@code true} or
    *     not {@code false}. Default value is {@code false}.
@@ -315,7 +315,7 @@ public CodecCapabilities build() {
         Preconditions.checkArgument(
             colorFormats == null || colorFormats.length == 0,
             "colorFormats should not be set for audio codec");
-        caps.colorFormats = new int[0]; // To prevet crash in CodecCapabilities.dup().
+        caps.colorFormats = new int[0]; // To prevent crash in CodecCapabilities.dup().
       }
 
       capsReflector.setMime(mime);

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeInput.java
Patch:
@@ -51,7 +51,7 @@ public class NativeInput {
   /*
    * Maximum number of pointers supported per motion event.
    * Smallest number of pointers is 1.
-   * (We want at least 10 but some touch controllers obstensibly configured for 10 pointers
+   * (We want at least 10 but some touch controllers ostensibly configured for 10 pointers
    * will occasionally emit 11.  There is not much harm making this ant bigger.)
    */
   private static final int MAX_POINTERS = 16;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -375,7 +375,7 @@ public String toString() {
 
   /**
    * @deprecated Do not depend on this method to override services as it will be removed in a future
-   *     update. The preferered method is use the shadow of the corresponding service.
+   *     update. The preferred method is use the shadow of the corresponding service.
    */
   @Deprecated
   public void setSystemService(String key, Object service) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothGatt.java
Patch:
@@ -385,8 +385,8 @@ public BluetoothConnectionManager getBluetoothConnectionManager() {
   }
 
   /**
-   * Simulate a successful Gatt Client Conection with {@link BluetoothConnectionManager}. Performs a
-   * {@link BluetoothGattCallback#onConnectionStateChange} if available.
+   * Simulate a successful Gatt Client Connection with {@link BluetoothConnectionManager}. Performs
+   * a {@link BluetoothGattCallback#onConnectionStateChange} if available.
    *
    * @param remoteAddress address of Gatt client
    */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -1313,7 +1313,7 @@ public String getLastSetPassword() {
    */
   public boolean activateResetToken(ComponentName admin) {
     if (!passwordResetTokens.containsKey(admin)) {
-      throw new IllegalArgumentException("No token set for comopnent: " + admin);
+      throw new IllegalArgumentException("No token set for component: " + admin);
     }
     return componentsWithActivatedTokens.add(admin);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyResourcesManager.java
Patch:
@@ -28,7 +28,7 @@ public class ShadowDevicePolicyResourcesManager {
 
   /**
    * Override string returned by the resource identified by {@code stringId}. Reset the override by
-   * providing null as the {@code vaNlue}.
+   * providing null as the {@code value}.
    */
   public void setString(@Nonnull String stringId, String value) {
     stringMappings.put(stringId, value);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplay.java
Patch:
@@ -254,7 +254,7 @@ public void setState(int state) {
    * Set HDR capabilities to the display sourced with displayId. see {@link HdrCapabilities} for
    * supportedHdrTypes.
    *
-   * @throws UnsupportedOperationException if the method is called below Android vesrsion N.
+   * @throws UnsupportedOperationException if the method is called below Android version N.
    */
   public void setDisplayHdrCapabilities(
       int displayId,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -317,7 +317,7 @@ void assertNoBroadcastListenersOfActionRegistered(ContextWrapper context, String
     }
   }
 
-  /** Returns the BroadcaseReceivers wrappers, matching intent's action and permissions. */
+  /** Returns the BroadcastReceivers wrappers, matching intent's action and permissions. */
   private List<Wrapper> getAppropriateWrappers(
       Context context,
       @Nullable UserHandle userHandle,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaCodec.java
Patch:
@@ -407,7 +407,7 @@ private void makeOutputBufferAvailable(int index, BufferInfo info) {
     outputBuffersPendingDequeue.add(index);
 
     if (isAsync) {
-      // Dequeue the buffer to signal its availablility to the client.
+      // Dequeue the buffer to signal its availability to the client.
       outputBuffersPendingDequeue.remove(Integer.valueOf(index));
       // Signal output buffer availability.
       postFakeNativeEvent(EVENT_CALLBACK, CB_OUTPUT_AVAILABLE, index, outputBufferInfos[index]);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -896,7 +896,7 @@ public Object deleteModule(String packageName) {
    * <p>In order to create PackageInfo objects in a valid state please use {@link
    * androidx.test.core.content.pm.PackageInfoBuilder}.
    *
-   * <p>This method automatically simulates instalation of a package in the system, so it adds a
+   * <p>This method automatically simulates installation of a package in the system, so it adds a
    * flag {@link ApplicationInfo#FLAG_INSTALLED} to the application info and makes sure it exits. It
    * will update applicationInfo in package components as well.
    *

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStatFs.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.annotation.Resetter;
 
 /**
- * Robolectic doesn't provide actual filesystem stats; rather, it provides the ability to specify
+ * Robolectric doesn't provide actual filesystem stats; rather, it provides the ability to specify
  * stats values in advance.
  *
  * @see #registerStats(File, int, int, int)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -113,7 +113,7 @@ private static void setDefaults(Properties buildProperties) {
     buildProperties.setProperty("ro.hardware", "robolectric");
     buildProperties.setProperty("ro.build.characteristics", "robolectric");
 
-    // for backwards-compatiblity reasons, set CPUS to unknown/ARM
+    // for backwards-compatibility reasons, set CPUS to unknown/ARM
     buildProperties.setProperty("ro.product.cpu.abi", "unknown");
     buildProperties.setProperty("ro.product.cpu.abi2", "unknown");
     buildProperties.setProperty("ro.product.cpu.abilist", "armeabi-v7a");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimeManager.java
Patch:
@@ -32,8 +32,8 @@ public class ShadowTimeManager {
   private static TimeZoneConfiguration timeZoneConfiguration;
 
   /**
-   * Capabilites are predefined and not controlled by user, so they can't be changed via TimeManager
-   * API.
+   * Capabilities are predefined and not controlled by user, so they can't be changed via
+   * TimeManager API.
    */
   public void setCapabilityState(String capability, @CapabilityState int value) {
     TimeZoneCapabilities.Builder builder = new TimeZoneCapabilities.Builder(timeZoneCapabilities);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbDeviceConnection.java
Patch:
@@ -53,7 +53,7 @@ protected boolean releaseInterface(UsbInterface intf) {
   }
 
   /**
-   * No-op on Robolectrict. The real implementation would return false on Robolectric and make it
+   * No-op on Robolectric. The real implementation would return false on Robolectric and make it
    * impossible to test callers that expect a successful result. Always returns {@code true}.
    */
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVideoView.java
Patch:
@@ -9,7 +9,7 @@
 @Implements(VideoView.class)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowVideoView extends ShadowSurfaceView {
-  private MediaPlayer.OnCompletionListener completionListner;
+  private MediaPlayer.OnCompletionListener completionListener;
   private MediaPlayer.OnErrorListener errorListener;
   private MediaPlayer.OnPreparedListener preparedListener;
 
@@ -39,7 +39,7 @@ protected void setOnErrorListener(MediaPlayer.OnErrorListener l) {
 
   @Implementation
   protected void setOnCompletionListener(MediaPlayer.OnCompletionListener l) {
-    completionListner = l;
+    completionListener = l;
   }
 
   @Implementation
@@ -127,7 +127,7 @@ public MediaPlayer.OnErrorListener getOnErrorListener() {
    * @return On completion listener.
    */
   public MediaPlayer.OnCompletionListener getOnCompletionListener() {
-    return completionListner;
+    return completionListener;
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindowManagerGlobal.java
Patch:
@@ -183,7 +183,7 @@ public void moveBy(float dx, float dy) {
             .onBackInvokedCallbackInfo
             .getCallback()
             .onBackProgressed(
-                BackMotionEvents.newBackMotionEvent(edge, touchX, touchY, caclulateProgress()));
+                BackMotionEvents.newBackMotionEvent(edge, touchX, touchY, calculateProgress()));
         ShadowLooper.idleMainLooper();
       } catch (RemoteException e) {
         throw new RuntimeException(e);
@@ -232,7 +232,7 @@ public void close() {
       }
     }
 
-    private float caclulateProgress() {
+    private float calculateProgress() {
       // The real implementation anchors the progress on the start x and resets it each time the
       // threshold is lost, it also calculates a linear and non linear progress area. This
       // implementation is much simpler.

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -398,7 +398,7 @@ private static <T extends Service> T instantiateService(Class<T> serviceClass, I
           Service instance =
               factory.instantiateService(
                   loadedApk.getClassLoader(), serviceClass.getName(), intent);
-          if (instance != null && serviceClass.isAssignableFrom(instance.getClass())) {
+          if (serviceClass.isAssignableFrom(instance.getClass())) {
             return (T) instance;
           }
         } catch (ReflectiveOperationException e) {
@@ -418,7 +418,7 @@ private static <T extends ContentProvider> T instantiateContentProvider(Class<T>
         try {
           ContentProvider instance =
               factory.instantiateProvider(loadedApk.getClassLoader(), providerClass.getName());
-          if (instance != null && providerClass.isAssignableFrom(instance.getClass())) {
+          if (providerClass.isAssignableFrom(instance.getClass())) {
             return (T) instance;
           }
         } catch (ReflectiveOperationException e) {
@@ -439,7 +439,7 @@ private static <T extends Activity> T instantiateActivity(Class<T> activityClass
           Activity instance =
               factory.instantiateActivity(
                   loadedApk.getClassLoader(), activityClass.getName(), intent);
-          if (instance != null && activityClass.isAssignableFrom(instance.getClass())) {
+          if (activityClass.isAssignableFrom(instance.getClass())) {
             return (T) instance;
           }
         } catch (ReflectiveOperationException e) {

File: robolectric/src/main/java/org/robolectric/internal/MavenManifestFactory.java
Patch:
@@ -119,7 +119,7 @@ private static List<ManifestIdentifier> findLibraries(Path resDirectory) throws
         if (Files.isDirectory(libraryDir)) {
           // Ignore directories without any files
           Path[] libraryBaseDirFiles = Fs.listFiles(libraryDir);
-          if (libraryBaseDirFiles != null && libraryBaseDirFiles.length > 0) {
+          if (libraryBaseDirFiles.length > 0) {
             List<ManifestIdentifier> libraries =
                 findLibraries(libraryDir.resolve(Config.DEFAULT_RES_FOLDER));
             libraryBaseDirs.add(

File: robolectric/src/main/java/org/robolectric/junit/rules/ExpectedLogMessagesRule.java
Patch:
@@ -328,7 +328,7 @@ public boolean equals(Object o) {
 
       ExpectedLogItem log = (ExpectedLogItem) o;
       return type == log.type
-          && !(tag != null ? !tag.equals(log.tag) : log.tag != null)
+          && Objects.equals(tag, log.tag)
           && Objects.equals(msgMatcher, log.msgMatcher)
           && Objects.equals(throwableMatcher, log.throwableMatcher);
     }
@@ -410,7 +410,7 @@ public void describeTo(org.hamcrest.Description description) {
     // This matches legacy behaviour to allow ExpectedLogItem to de-duplicate regex expectations.
     @Override
     public boolean equals(Object other) {
-      return other instanceof MsgRegex ? isEqual(pattern, ((MsgRegex) other).pattern) : false;
+      return other instanceof MsgRegex && isEqual(pattern, ((MsgRegex) other).pattern);
     }
 
     @Override

File: robolectric/src/main/java/org/robolectric/plugins/PackagePropertiesLoader.java
Patch:
@@ -40,8 +40,7 @@ private Properties getConfig(@Nonnull String packageName, String propFileName) {
     return cache.computeIfAbsent(
         propsFile,
         s -> {
-          final String resourceName = propsFile;
-          try (InputStream resourceAsStream = getResourceAsStream(resourceName)) {
+          try (InputStream resourceAsStream = getResourceAsStream(propsFile)) {
             if (resourceAsStream == null) {
               return null;
             }

File: robolectric/src/test/java/org/robolectric/BootstrapWrapper.java
Patch:
@@ -12,7 +12,6 @@
 /** Wrapper for testing use of AndroidTestEnvironment. */
 public class BootstrapWrapper extends AndroidTestEnvironment implements BootstrapWrapperI {
   public AndroidTestEnvironment wrappedTestEnvironment;
-  public boolean legacyResources;
   public String tmpDirName;
   public Configuration config;
   public AndroidManifest appManifest;

File: robolectric/src/test/java/org/robolectric/ReflectorObjectTest.java
Patch:
@@ -25,12 +25,11 @@ public class ReflectorObjectTest {
 
   static final String TEST_STRING = "A test string.";
 
-  private SomeClass someClass;
   private ShadowClass shadowClass;
 
   @Before
   public void setUp() throws Exception {
-    someClass = new SomeClass();
+    SomeClass someClass = new SomeClass();
     shadowClass = Shadow.extract(someClass);
   }
 

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -28,8 +28,6 @@ public static class StateHolder {
     public static List<String> transcript;
   }
 
-  private String priorResourcesMode;
-
   @Before
   public void setUp() throws Exception {
     StateHolder.transcript = new ArrayList<>();

File: robolectric/src/test/java/org/robolectric/android/controller/ActivityControllerTest.java
Patch:
@@ -449,7 +449,6 @@ public void onTopActivityResumedNotCalledWithSetupPreQ() {
   public void close_transitionsActivityStateToDestroyed() {
     Robolectric.buildActivity(MyActivity.class).close();
     assertThat(transcript).isEmpty();
-    transcript.clear();
 
     Robolectric.buildActivity(MyActivity.class).create().close();
     assertThat(transcript)

File: robolectric/src/test/java/org/robolectric/android/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -21,17 +21,16 @@
 public class RoboExecutorServiceTest {
   private List<String> transcript;
   private RoboExecutorService executorService;
-  private Scheduler backgroundScheduler;
   private Runnable runnable;
 
   @Before
   public void setUp() throws Exception {
     transcript = new ArrayList<>();
     executorService = new RoboExecutorService();
 
-    backgroundScheduler = Robolectric.getBackgroundThreadScheduler();
-
+    Scheduler backgroundScheduler = Robolectric.getBackgroundThreadScheduler();
     backgroundScheduler.pause();
+
     runnable = () -> transcript.add("background event ran");
   }
 

File: robolectric/src/test/java/org/robolectric/plugins/config/SingleValueConfigurerTest.java
Patch:
@@ -15,11 +15,11 @@ public final class SingleValueConfigurerTest {
 
   public enum Value {
     ON,
-    OFF;
+    OFF,
   }
 
   public @interface ValueConfig {
-    public Value value() default Value.ON;
+    Value value() default Value.ON;
   }
 
   public static class ValueConfigReader extends SingleValueConfigurer<ValueConfig, Value> {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -785,7 +785,7 @@ public void testShouldThrowSQLiteExceptionIfOpeningNonexistentDatabase() {
   }
 
   @Test
-  public void testCreateAndDropTable() throws Exception {
+  public void testCreateAndDropTable() {
     SQLiteDatabase db = openOrCreateDatabase("db1");
     db.execSQL("CREATE TABLE foo(id INTEGER PRIMARY KEY AUTOINCREMENT, data TEXT);");
     Cursor c = db.query("FOO", null, null, null, null, null, null);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothLeScannerTest.java
Patch:
@@ -17,7 +17,6 @@
 import android.os.ParcelUuid;
 import androidx.test.core.app.ApplicationProvider;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.UUID;
@@ -237,7 +236,8 @@ public void startScan_withScanResult_andFilter() {
     shadowBluetoothLeScanner.addScanResult(scanResultTwo);
 
     ScanFilter filter = new ScanFilter.Builder().setDeviceAddress(addressOne).build();
-    bluetoothLeScanner.startScan(Arrays.asList(filter), /* settings= */ null, scanCallback);
+    bluetoothLeScanner.startScan(
+        Collections.singletonList(filter), /* settings= */ null, scanCallback);
 
     assertThat(scanCallback.scanResults).containsExactly(scanResultOne);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowColorDisplayManagerTest.java
Patch:
@@ -27,7 +27,7 @@ public class ShadowColorDisplayManagerTest {
   private static final String PACKAGE_NAME = "test_package_name";
 
   // Must be optional to avoid ClassNotFoundException
-  Optional<ColorDisplayManager> instance;
+  private Optional<ColorDisplayManager> instance;
 
   @Before
   public void setUp() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCompanionDeviceManagerTest.java
Patch:
@@ -167,7 +167,7 @@ public void testAddAssociation_byAssociationInfo() {
             .setNotifyOnDeviceNearby(false)
             .setApprovedMs(0)
             .setLastTimeConnectedMs(0);
-    Object associatedDeviceValue = null;
+    Object associatedDeviceValue;
     if (ReflectionHelpers.hasField(AssociationInfo.class, "mAssociatedDevice")) {
       try {
         Class<?> associatedDeviceClazz = Class.forName("android.companion.AssociatedDevice");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -714,7 +714,6 @@ public void notifyChangeWithFlags_shouldTrackNotifiedUris() {
     assertThat(uri.flags).isEqualTo(ContentResolver.NOTIFY_UPDATE);
   }
 
-  @SuppressWarnings("serial")
   @Test
   public void applyBatchForRegisteredProvider()
       throws RemoteException, OperationApplicationException {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextHubClientTest.java
Patch:
@@ -101,8 +101,6 @@ private Object createContextHubClient() {
     ContextHubManager contextHubManager = context.getSystemService(ContextHubManager.class);
     ContextHubInfo contextHubInfo = contextHubManager.getContextHubs().get(0);
     ContextHubClientCallback contextHubClientCallback = new ContextHubClientCallback();
-    ContextHubClient contextHubClient =
-        contextHubManager.createClient(contextHubInfo, contextHubClientCallback);
-    return contextHubClient;
+    return contextHubManager.createClient(contextHubInfo, contextHubClientCallback);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -346,11 +346,10 @@ private ListAdapterBuilder prepareListAdapter() {
     return new ListAdapterBuilder();
   }
 
-  private ListAdapter prepareWithListAdapter() {
+  private void prepareWithListAdapter() {
     ListAdapter adapter = new ListAdapter("a", "b", "c");
     listView.setAdapter(adapter);
     shadowOf(listView).populateItems();
-    return adapter;
   }
 
   private ShadowListView prepareListWithThreeItems() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocaleManagerTest.java
Patch:
@@ -24,13 +24,12 @@ public final class ShadowLocaleManagerTest {
   private static final String DEFAULT_PACKAGE_NAME = "my.app";
   private static final LocaleList DEFAULT_LOCALES = LocaleList.forLanguageTags("en-XC,ar-XB");
 
-  private Context context;
   private LocaleManager localeManager;
   private ShadowLocaleManager shadowLocaleManager;
 
   @Before
   public void setUp() {
-    context = ApplicationProvider.getApplicationContext();
+    Context context = ApplicationProvider.getApplicationContext();
     localeManager = context.getSystemService(LocaleManager.class);
     shadowLocaleManager = Shadow.extract(localeManager);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLogTest.java
Patch:
@@ -200,7 +200,7 @@ public void shouldLogToProvidedStream() {
       ShadowLog.stream = new PrintStream(bos);
       Log.d("tag", "msg");
       assertThat(new String(bos.toByteArray(), UTF_8))
-          .isEqualTo("D/tag: msg" + System.getProperty("line.separator"));
+          .isEqualTo("D/tag: msg" + System.lineSeparator());
 
       Log.w("tag", new RuntimeException());
       assertTrue(new String(bos.toByteArray(), UTF_8).contains("RuntimeException"));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java
Patch:
@@ -41,14 +41,13 @@ public final class ShadowMediaControllerTest {
 
   private MediaController mediaController;
   private ShadowMediaController shadowMediaController;
-  private final String testPackageName = "FOO";
 
   @Before
   public void setUp() {
     Context context = ApplicationProvider.getApplicationContext();
     ISessionController binder = mock(ISessionController.class);
 
-    MediaSession.Token token = null;
+    MediaSession.Token token;
     if (RuntimeEnvironment.getApiLevel() <= Q) {
       token =
           ReflectionHelpers.callConstructor(
@@ -66,6 +65,7 @@ public void setUp() {
 
   @Test
   public void setPackageName() {
+    String testPackageName = "FOO";
     shadowMediaController.setPackageName(testPackageName);
     assertEquals(testPackageName, mediaController.getPackageName());
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -497,7 +497,7 @@ public void testStaticDup_afterWrite() throws Exception {
 
   @Test
   public void testClose_afterDup_doesNotCloseOriginalFd() throws Exception {
-    ParcelFileDescriptor pfd = null;
+    ParcelFileDescriptor pfd;
     File tempFile = File.createTempFile("testFile", ".txt");
     String content = "abc123";
     Files.asCharSink(tempFile, UTF_8).write(content);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -3,7 +3,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import android.app.Application;
+import android.content.Context;
 import android.widget.RadioGroup;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -16,12 +16,11 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowRadioGroupTest {
   private static final int BUTTON_ID = 3245;
-  private Application context;
   private RadioGroup radioGroup;
 
   @Before
   public void setUp() throws Exception {
-    context = ApplicationProvider.getApplicationContext();
+    Context context = ApplicationProvider.getApplicationContext();
     radioGroup = new RadioGroup(context);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSoftKeyboardControllerTest.java
Patch:
@@ -21,12 +21,11 @@
 @Config(minSdk = N)
 public final class ShadowSoftKeyboardControllerTest {
 
-  private MyService myService;
   private SoftKeyboardController softKeyboardController;
 
   @Before
   public void setUp() {
-    myService = Robolectric.setupService(MyService.class);
+    MyService myService = Robolectric.setupService(MyService.class);
     softKeyboardController = myService.getSoftKeyboardController();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java
Patch:
@@ -115,7 +115,7 @@ public void isUserKeyUnlocked() {
   public void getStorageVolumeFromAnUserContext() {
     File file1 = new File(internalStorage);
     shadowOf(storageManager).addStorageVolume(buildAndGetStorageVolume(file1, "internal"));
-    Context userContext = getApplication();
+    Context userContext;
 
     try {
       userContext =

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSystemHealthManagerTest.java
Patch:
@@ -35,16 +35,15 @@ public final class ShadowSystemHealthManagerTest {
       HealthStatsBuilder.newBuilder().setDataType("other_uid_2_stats").build();
 
   private SystemHealthManager systemHealthManager;
-  private ShadowSystemHealthManager shadowSystemHealthManager;
 
   @Before
   public void setUp() {
     systemHealthManager =
         (SystemHealthManager)
             ApplicationProvider.getApplicationContext()
                 .getSystemService(Context.SYSTEM_HEALTH_SERVICE);
-    shadowSystemHealthManager = Shadow.extract(systemHealthManager);
 
+    ShadowSystemHealthManager shadowSystemHealthManager = Shadow.extract(systemHealthManager);
     shadowSystemHealthManager.addHealthStats(MY_UID_HEALTH_STATS);
     shadowSystemHealthManager.addHealthStatsForUid(OTHER_UID_1, OTHER_UID_1_HEALTH_STATS);
     shadowSystemHealthManager.addHealthStatsForUid(OTHER_UID_2, OTHER_UID_2_HEALTH_STATS);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUsageStatsManagerTest.java
Patch:
@@ -198,7 +198,7 @@ public void testQueryEvents_appendEventData_simulateTimeChange_shouldAddOffsetTo
 
   @Test
   @Config(minSdk = Build.VERSION_CODES.P)
-  public void testGetAppStandbyBucket_withPackageName() throws Exception {
+  public void testGetAppStandbyBucket_withPackageName() {
     assertThat(shadowOf(usageStatsManager).getAppStandbyBuckets()).isEmpty();
 
     shadowOf(usageStatsManager).setAppStandbyBucket("app1", UsageStatsManager.STANDBY_BUCKET_RARE);
@@ -214,7 +214,7 @@ public void testGetAppStandbyBucket_withPackageName() throws Exception {
 
   @Test
   @Config(minSdk = Build.VERSION_CODES.P)
-  public void testSetAppStandbyBuckets() throws Exception {
+  public void testSetAppStandbyBuckets() {
     assertThat(shadowOf(usageStatsManager).getAppStandbyBuckets()).isEmpty();
     assertThat(shadowOf(usageStatsManager).getAppStandbyBucket("app1"))
         .isEqualTo(UsageStatsManager.STANDBY_BUCKET_ACTIVE);
@@ -230,7 +230,7 @@ public void testSetAppStandbyBuckets() throws Exception {
 
   @Test
   @Config(minSdk = Build.VERSION_CODES.P)
-  public void testGetAppStandbyBucket_currentApp() throws Exception {
+  public void testGetAppStandbyBucket_currentApp() {
     shadowOf(usageStatsManager).setCurrentAppStandbyBucket(UsageStatsManager.STANDBY_BUCKET_RARE);
     assertThat(shadowOf(usageStatsManager).getAppStandbyBucket())
         .isEqualTo(UsageStatsManager.STANDBY_BUCKET_RARE);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -4,7 +4,6 @@
 import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.robolectric.Shadows.shadowOf;
 
 import android.app.Application;
 import android.view.ViewConfiguration;
@@ -98,8 +97,7 @@ public void methodsShouldReturnScaledAndroidConstantsDependingOnPixelDensity() {
   public void testHasPermanentMenuKey() {
     assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
 
-    ShadowViewConfiguration shadowViewConfiguration = shadowOf(viewConfiguration);
-    shadowViewConfiguration.setHasPermanentMenuKey(false);
+    ShadowViewConfiguration.setHasPermanentMenuKey(false);
     assertThat(viewConfiguration.hasPermanentMenuKey()).isFalse();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -71,7 +71,7 @@ public void setUp() throws Exception {
     child3.addView(child3a);
     child3.addView(child3b);
 
-    defaultLineSeparator = System.getProperty("line.separator");
+    defaultLineSeparator = System.lineSeparator();
     System.setProperty("line.separator", "\n");
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -111,11 +111,11 @@ public void hasResourceWallpaper_wallpaperResourceNotSet_returnsFalse() {
 
   @Test
   public void hasResourceWallpaper_wallpaperResourceSet_returnsTrue() throws IOException {
-    int resid = 5;
-    manager.setResource(resid);
+    int resId = 5;
+    manager.setResource(resId);
 
     assertThat(manager.hasResourceWallpaper(1)).isFalse();
-    assertThat(manager.hasResourceWallpaper(resid)).isTrue();
+    assertThat(manager.hasResourceWallpaper(resId)).isTrue();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiManagerTest.java
Patch:
@@ -491,7 +491,6 @@ public void shouldThrowRuntimeExceptionIfMulticastLockisUnderlocked() {
       fail("Expected exception");
     } catch (RuntimeException expected) {
     }
-    ;
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiScannerTest.java
Patch:
@@ -105,7 +105,7 @@ public void getSingleScanResults_returnsResults() {
   }
 
   private static ImmutableList<ScanResult> createFakeScanResults() {
-    ScanResult scanResult = null;
+    ScanResult scanResult;
 
     if (Build.VERSION.SDK_INT >= VERSION_CODES.R) {
       // informationElements added in R

File: robolectric/src/main/java/org/robolectric/android/AttributeSetBuilder.java
Patch:
@@ -8,7 +8,7 @@
  * Builder of {@link AttributeSet}s.
  *
  * @deprecated use Xml.asAttributeSet instead. Not supported in {@link
- *     org.robolectric.annotation.ResourcesMode.Mode.NATIVE}
+ *     org.robolectric.annotation.ResourcesMode.Mode#NATIVE}
  */
 @Deprecated
 public interface AttributeSetBuilder extends Robolectric.AttributeSetBuilder {

File: robolectric/src/main/java/org/robolectric/android/internal/RoboMonitoringInstrumentation.java
Patch:
@@ -157,7 +157,7 @@ public void callApplicationOnCreate(Application app) {
   /**
    * Executes a runnable on the main thread, blocking until it is complete.
    *
-   * <p>When in INSTUMENTATION_TEST Looper mode, the runnable is posted to the main handler and the
+   * <p>When in INSTRUMENTATION_TEST Looper mode, the runnable is posted to the main handler and the
    * caller's thread blocks until that runnable has finished. When a Throwable is thrown in the
    * runnable, the exception is propagated back to the caller's thread. If it is an unchecked
    * throwable, it will be rethrown as is. If it is a checked exception, it will be rethrown as a

File: robolectric/src/main/java/org/robolectric/android/internal/RobolectricThreadChecker.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.shadows.ShadowLooper;
 
 /**
- * Performs thread checking when in INSTRUMENTAION_TEST Looper Mode where the test thread is
+ * Performs thread checking when in INSTRUMENTATION_TEST Looper Mode where the test thread is
  * distinct from the main thread. No-op for other modes because everything is executed on the main
  * thread (except for manually created worker threads).
  */

File: robolectric/src/main/java/org/robolectric/junit/rules/ExpectedLogMessagesRule.java
Patch:
@@ -159,8 +159,7 @@ public void evaluate() throws Throwable {
    * will fail.
    *
    * <p>This will also match any log statement which contains a throwable as well. For verifying the
-   * throwable, please see {@link #expectLogMessageWithThrowable(int, String, Matcher<String>,
-   * Matcher<Throwable>)}.
+   * throwable, please see {@link #expectLogMessageWithThrowable(int, String, Matcher, Matcher)}}.
    *
    * <p>Do not use this to suppress failures. Use this to test that expected error cases in your
    * code cause log messages to be printed.
@@ -187,7 +186,7 @@ public void expectLogMessage(int level, String tag, String message) {
 
   /**
    * Adds an expected log statement using a regular expression. If this log is not printed during
-   * test execution, the test case will fail. When possible, log output should be made determinstic
+   * test execution, the test case will fail. When possible, log output should be made deterministic
    * and {@link #expectLogMessage(int, String, String)} used instead.
    *
    * <p>This will also match any log statement which contain a throwable as well. For verifying the

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -29,8 +29,8 @@ public void validCompareResult() {
   public void canSustainConcurrentModification() {
     final IntentComparator intentComparator = new IntentComparator();
 
-    Intent intent1 = new Intent("actionstring0");
-    Intent intent2 = new Intent("actionstring1");
+    Intent intent1 = new Intent("actionString0");
+    Intent intent2 = new Intent("actionString1");
     assertThat(intentComparator.compare(intent1, intent2)).isEqualTo(-1);
   }
 }

File: robolectric/src/test/java/org/robolectric/android/util/concurrent/BackgroundExecutorTest.java
Patch:
@@ -26,7 +26,7 @@ public void forRunnable_doesNotRunOnMainLooper() {
   }
 
   @Test
-  public void forRunnable_exceptionsPropogated() {
+  public void forRunnable_exceptionsPropagated() {
     try {
       runInBackground(
           (Runnable)
@@ -53,7 +53,7 @@ public void forCallable_doesNotRunOnMainLooper() {
   }
 
   @Test
-  public void forCallable_runtimeExceptionsPropogated() {
+  public void forCallable_runtimeExceptionsPropagated() {
     try {
       runInBackground(
           (Callable<?>)

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowMapTest.java
Patch:
@@ -73,7 +73,7 @@ public void shouldNotReturnMismatchedClassesJustBecauseTheSimpleNameMatches() {
   }
 
   @Test
-  public void getInvalidatedClasses_disjoin() {
+  public void getInvalidatedClasses_disjoint() {
     ShadowMap current =
         baseShadowMap.newBuilder().addShadowClass(A1, A2, true, false, false).build();
     ShadowMap previous =

File: robolectric/src/test/java/org/robolectric/res/ResourceTableTest.java
Patch:
@@ -26,7 +26,7 @@ public void getPackageName_shouldReturnPackageNameOfItsResources() {
   }
 
   @Test
-  public void getPackageIdentifier_shouldReturnPackageIdentiferOfItsResources() {
+  public void getPackageIdentifier_shouldReturnPackageIdentifierOfItsResources() {
     resourceTable.addResource(0x02999999, "type", "name");
 
     assertThat(resourceTable.getPackageIdentifier()).isEqualTo(0x02);

File: robolectric/src/test/java/org/robolectric/shadows/AssociationInfoBuilderTest.java
Patch:
@@ -25,7 +25,7 @@ public final class AssociationInfoBuilderTest {
   private static final long APPROVED_MS = 1234L;
   private static final boolean REVOKED = true;
   private static final long LAST_TIME_CONNECTED_MS = 5678L;
-  private static final int SYSTEM_DATA_SYNC_FALGS = 7;
+  private static final int SYSTEM_DATA_SYNC_FLAGS = 7;
 
   @Test
   @Config(minSdk = VERSION_CODES.TIRAMISU)
@@ -54,7 +54,7 @@ public void obtain() {
             .setApprovedMs(APPROVED_MS)
             .setRevoked(REVOKED)
             .setLastTimeConnectedMs(LAST_TIME_CONNECTED_MS)
-            .setSystemDataSyncFlags(SYSTEM_DATA_SYNC_FALGS)
+            .setSystemDataSyncFlags(SYSTEM_DATA_SYNC_FLAGS)
             .build();
 
     assertThat(info.getId()).isEqualTo(ID);
@@ -74,7 +74,7 @@ public void obtain() {
       assertThat(associatedDevice).isEqualTo(associatedDeviceValue);
       int systemDataSyncFlags =
           ReflectionHelpers.callInstanceMethod(info, "getSystemDataSyncFlags");
-      assertThat(systemDataSyncFlags).isEqualTo(SYSTEM_DATA_SYNC_FALGS);
+      assertThat(systemDataSyncFlags).isEqualTo(SYSTEM_DATA_SYNC_FLAGS);
     }
 
     if (ReflectionHelpers.hasField(AssociationInfo.class, "mTag")) {

File: robolectric/src/test/java/org/robolectric/shadows/CompatibilityTest.java
Patch:
@@ -40,7 +40,7 @@ public void isChangeEnabled_logging() {
   }
 
   @Test
-  public void edgeToEdgeEncorcement_minSdk() {
+  public void edgeToEdgeEnforcement_minSdk() {
     assertThat(ShadowCompatibility.isEnabled(ENFORCE_EDGE_TO_EDGE, U.SDK_INT)).isFalse();
     assertThat(ShadowCompatibility.isEnabled(ENFORCE_EDGE_TO_EDGE, V.SDK_INT)).isTrue();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ServiceStateBuilderTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
-/** Test for {@link ShadowServiceState}. */
+/** Test for {@link ServiceState}. */
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = P)
 public class ServiceStateBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityServiceTest.java
Patch:
@@ -225,13 +225,13 @@ public void shouldReturnPopulatedWindowData() {
 
   @Test
   @Config(minSdk = R)
-  public void getWindowsforDefaultDisplay_returnEmptyList() {
+  public void getWindowsForDefaultDisplay_returnEmptyList() {
     assertThat(service.getWindowsOnAllDisplays().get(Display.DEFAULT_DISPLAY)).isEmpty();
   }
 
   @Test
   @Config(minSdk = R)
-  public void getWindowsforNonDefaultDisplay_returnNullList() {
+  public void getWindowsForNonDefaultDisplay_returnNullList() {
     assertThat(service.getWindowsOnAllDisplays().get(Display.DEFAULT_DISPLAY + 1)).isNull();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -408,7 +408,7 @@ public void removeAccount_notifiesListenersIfSuccessful() {
   }
 
   @Test
-  public void removeAccount_doesNotNotifyIfUnuccessful() {
+  public void removeAccount_doesNotNotifyIfUnsuccessful() {
     Account account = new Account("name", "type");
 
     TestOnAccountsUpdateListener listener = new TestOnAccountsUpdateListener();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -323,7 +323,7 @@ public void getHistoricalProcessExitReasons_noRecord_emptyListReturned() {
 
   @Config(minSdk = R)
   @Test
-  public void getHistoricalProcessExitReasons_recordsRetunredInCorrectOrder() {
+  public void getHistoricalProcessExitReasons_recordsReturnedInCorrectOrder() {
     addApplicationExitInfo(/* pid= */ 1);
     addApplicationExitInfo(/* pid= */ 2);
     addApplicationExitInfo(/* pid= */ 3);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppOpsManagerTest.java
Patch:
@@ -137,7 +137,7 @@ public void noModeSet_atLeastO_noteProxyOpNoThrow_shouldReturnModeAllowed() {
 
   @Test
   @Config(sdk = VERSION_CODES.Q)
-  public void noModeSet_q_noteProxyOpNoThrow_withproxiedUid_shouldReturnModeAllowed() {
+  public void noModeSet_q_noteProxyOpNoThrow_withProxiedUid_shouldReturnModeAllowed() {
     int result = appOps.noteProxyOpNoThrow(OPSTR_GPS, PACKAGE_NAME1, Binder.getCallingUid());
     assertThat(result).isEqualTo(MODE_ALLOWED);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -331,7 +331,7 @@ public void updateAppWidget_landscapeAndPortrait_canReapplySameView() {
   }
 
   @Test
-  public void updateAppWidget_landscapeAndPortrait_doesntReapplyDifferntViews() {
+  public void updateAppWidget_landscapeAndPortrait_doesntReapplyDifferentViews() {
     ComponentName provider = new ComponentName(context, SpanishTestAppWidgetProvider.class);
     appWidgetManager.bindAppWidgetIdIfAllowed(789, provider);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -1642,7 +1642,7 @@ public void onCommunicationDeviceChangedListener_severalListener_allGetCalls() t
   @Test
   @Config(minSdk = S)
   public void
-      onCommunicationDeviceChangedListener_oneOfSeveralListenerRemoved_onlyRegisterdGetCalls()
+      onCommunicationDeviceChangedListener_oneOfSeveralListenerRemoved_onlyRegisteredGetCalls()
           throws Exception {
     AudioManager.OnCommunicationDeviceChangedListener mockListener1 =
         mock(AudioManager.OnCommunicationDeviceChangedListener.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBiometricManagerTest.java
Patch:
@@ -83,7 +83,7 @@ public void testCanAuthenticate_serviceNotConnected_noHardware_biometricHwUnavai
   @Test
   @Config(minSdk = R)
   public void
-      testCanAuthenticateBiometricWeak_serviceConnected_noWeakButHaveStrongEntrolled_canAuthenticate() {
+      testCanAuthenticateBiometricWeak_serviceConnected_noWeakButHaveStrongEnrolled_canAuthenticate() {
     ShadowBiometricManager shadowBiometricManager = Shadow.extract(biometricManager);
     shadowBiometricManager.setCanAuthenticate(true);
     shadowBiometricManager.setAuthenticatorType(BiometricManager.Authenticators.BIOMETRIC_STRONG);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -772,7 +772,7 @@ public void addIncomingRfcommConnection_socketRetrieved_canCommunicate() throws
   @Config(minSdk = TIRAMISU)
   @Test
   @SuppressWarnings("JdkImmutableCollections")
-  public void getResgisteredUuids_returnsRegisteredServers() {
+  public void getRegisteredUuids_returnsRegisteredServers() {
     PendingIntent rfcommServerIntent = createTestPendingIntent(testIntent);
 
     Set<UUID> serverUuids = Set.of(UUID1, UUID2, UUID3, UUID4, UUID5);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothGattServerTest.java
Patch:
@@ -387,7 +387,7 @@ public void test_isConnectionCancelled_afterCancelConnection_whileConnected() {
   }
 
   @Test
-  public void test_isConnectionCancelled_afterCancelConnection_aftereNotifyConnection() {
+  public void test_isConnectionCancelled_afterCancelConnection_afterNotifyConnection() {
     shadowOf(server).setGattServerCallback(callback);
     shadowOf(server).notifyConnection(device);
     server.cancelConnection(device);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothGattTest.java
Patch:
@@ -195,12 +195,12 @@ public void isNotConnected_afterConnectAndDisconnectWithoutCallback() {
   }
 
   @Test
-  public void isNotClosedbeforeClose() {
+  public void isNotClosedBeforeClose() {
     assertThat(shadowOf(bluetoothGatt).isClosed()).isFalse();
   }
 
   @Test
-  public void isClosedafterClose() {
+  public void isClosedAfterClose() {
     bluetoothGatt.close();
     assertThat(shadowOf(bluetoothGatt).isClosed()).isTrue();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothHeadsetTest.java
Patch:
@@ -188,7 +188,7 @@ public void isAudioConnected_isFalseAfterStopVoiceRecognition() {
   }
 
   @Test
-  public void startVoiceRecogntion_shouldEmitBroadcast() {
+  public void startVoiceRecognition_shouldEmitBroadcast() {
     shadowOf(bluetoothHeadset).addConnectedDevice(device1);
     IntentFilter intentFilter = new IntentFilter(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
     List<Integer> extraStateList = new ArrayList<>();
@@ -210,7 +210,7 @@ public void onReceive(Context context, Intent intent) {
   }
 
   @Test
-  public void startVoiceRecogniton_returnsFalseIfAlreadyStarted() {
+  public void startVoiceRecognition_returnsFalseIfAlreadyStarted() {
     shadowOf(bluetoothHeadset).addConnectedDevice(device1);
     shadowOf(bluetoothHeadset).addConnectedDevice(device2);
 
@@ -220,7 +220,7 @@ public void startVoiceRecogniton_returnsFalseIfAlreadyStarted() {
   }
 
   @Test
-  public void startVoiceRecogntion_stopsAlreadyStartedRecognition() {
+  public void startVoiceRecognition_stopsAlreadyStartedRecognition() {
     shadowOf(bluetoothHeadset).addConnectedDevice(device1);
     shadowOf(bluetoothHeadset).addConnectedDevice(device2);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBugreportManagerTest.java
Patch:
@@ -70,7 +70,7 @@ public void requestBugreport_resetDoesNotCrash() {
     shadowBugreportManager.requestBugreport(
         new BugreportParams(BugreportParams.BUGREPORT_MODE_INTERACTIVE), title, description);
 
-    // executeOnFInished() will call resetParams(), which should not crash from referencing any null
+    // executeOnFinished() will call resetParams(), which should not crash from referencing any null
     // values.
     shadowBugreportManager.executeOnFinished();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCaptureResultTest.java
Patch:
@@ -28,7 +28,7 @@ public void testSetExistingKey() {
   }
 
   @Test
-  public void testGetUnrecongizedKey() {
+  public void testGetUnrecognizedKey() {
     assertThat(captureResult.get(timestampKey)).isNull();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -36,7 +36,7 @@ public void setPaused_isPaused_doesntRun() {
   }
 
   @Test
-  public void setPaused_isPaused_doesntRunWhenClockAdancedLessThanFrameDelay() {
+  public void setPaused_isPaused_doesntRunWhenClockAdvancedLessThanFrameDelay() {
     ShadowChoreographer.setPaused(true);
     ShadowChoreographer.setFrameDelay(Duration.ofMillis(15));
     AtomicBoolean didRun = new AtomicBoolean();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCookieManagerTest.java
Patch:
@@ -169,7 +169,7 @@ public void shouldSetTwoCookies() {
   }
 
   @Test
-  public void shouldSetCookieWithInvalidExpiesValue() {
+  public void shouldSetCookieWithInvalidExpiresValue() {
     cookieManager.setCookie(httpUrl, "name=value; Expires=3234asdfasdf10:18:14 GMT");
     assertThat(cookieManager.getCookie(url)).isEqualTo("name=value");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -43,7 +43,7 @@ public void onFinish() {
           }
 
           @Override
-          public void onTick(long millisUnitilFinished) {
+          public void onTick(long millisUntilFinished) {
             message = MESSAGE_TICK;
           }
         };

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDevicePolicyManagerTest.java
Patch:
@@ -954,7 +954,7 @@ public void getDelegatedScopes_notOwner_returnScopesForSelf() {
   }
 
   @Test
-  public void getAccountTypesWithManagementDisabledShouldReturnNothingWhenNoAccountIsDislabed() {
+  public void getAccountTypesWithManagementDisabledShouldReturnNothingWhenNoAccountIsDisabled() {
     // GIVEN no account type has ever been disabled
 
     // WHEN get disabled account types using

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java
Patch:
@@ -346,7 +346,7 @@ public void setSaturationLevel_setToValueGreaterThanOneViaShadow_shouldThrow() {
 
   @Test
   @Config(minSdk = P)
-  public void setSaturationLevel_setToNegativevalueViaShadow_shouldThrow() {
+  public void setSaturationLevel_setToNegativeValueViaShadow_shouldThrow() {
     try {
       shadowOf(instance).setSaturationLevel(-0.1f);
       fail("Expected IllegalArgumentException thrown");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -64,7 +64,7 @@ public void hideSoftInputFromWindow_shouldNotifyResult_hidden() {
   }
 
   @Test
-  public void hideSoftInputFromWindow_shouldNotifiyResult_alreadyHidden() {
+  public void hideSoftInputFromWindow_shouldNotifyResult_alreadyHidden() {
     CapturingResultReceiver resultReceiver =
         new CapturingResultReceiver(new Handler(Looper.getMainLooper()));
     manager.hideSoftInputFromWindow(null, 0, resultReceiver);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -191,7 +191,7 @@ public void clickItemContainingText_shouldPerformItemClickOnList_arrayAdapter()
   @Test(expected = IllegalArgumentException.class)
   public void clickItemContainingText_shouldThrowExceptionIfNotFound() {
     ShadowListView shadowListView = prepareListWithThreeItems();
-    shadowListView.clickFirstItemContainingText("Non-existant item");
+    shadowListView.clickFirstItemContainingText("Non-existent item");
   }
 
   @Test(expected = UnsupportedOperationException.class)
@@ -228,7 +228,7 @@ public void getPositionForView_shouldReturnInvalidPositionForViewThatIsNotFound(
   }
 
   @Test
-  public void shouldRecordLatestCallToSmoothScrollToPostion() {
+  public void shouldRecordLatestCallToSmoothScrollToPosition() {
     listView.smoothScrollToPosition(10);
     assertThat(shadowOf(listView).getSmoothScrolledPosition()).isEqualTo(10);
   }
@@ -255,7 +255,7 @@ public void givenChoiceModeIsNone_whenGettingCheckedItemPosition_thenReturnInval
   }
 
   @Test
-  public void givenNoItemsChecked_whenGettingCheckedItemOisition_thenReturnInvalidPosition() {
+  public void givenNoItemsChecked_whenGettingCheckedItemPosition_thenReturnInvalidPosition() {
     prepareListAdapter().withChoiceMode(ListView.CHOICE_MODE_SINGLE);
 
     assertThat(listView.getCheckedItemPosition()).isEqualTo(ListView.INVALID_POSITION);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperResetterTest.java
Patch:
@@ -325,7 +325,7 @@ public void anotherPostToChoreographerTest() {
     }
   }
 
-  /** Tests for potentially race conditions where Looper is quit asynchrounously at end of test */
+  /** Tests for potentially race conditions where Looper is quit asynchronously at end of test */
   @Test
   public void choreographerQuitPost() throws InitializationError {
     Runner runner = new RobolectricTestRunner(ChoreographerResetQuitTest.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaActionSoundTest.java
Patch:
@@ -82,7 +82,7 @@ public void mustPlayShutterSound_defaultFalse() {
 
   @Test
   @Config(minSdk = VERSION_CODES.TIRAMISU)
-  public void mustPlayShutterSound_overrident_correctValue() {
+  public void mustPlayShutterSound_overridden_correctValue() {
     ShadowMediaActionSound.setMustPlayShutterSound(true);
 
     assertThat(MediaActionSound.mustPlayShutterSound()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaCodecTest.java
Patch:
@@ -154,8 +154,8 @@ public void dequeueAllInputBuffersThenReleaseOutputBuffer_allowsDequeueInputBuff
 
     codec.releaseOutputBuffer(bufferIndex, /* render= */ false);
     // We should be able to dequeue the corresponding input buffer.
-    int dequeuedInputbufferIndex = codec.dequeueInputBuffer(/* timeoutUs= */ 0);
-    assertThat(dequeuedInputbufferIndex).isEqualTo(bufferIndex);
+    int dequeuedInputBufferIndex = codec.dequeueInputBuffer(/* timeoutUs= */ 0);
+    assertThat(dequeuedInputBufferIndex).isEqualTo(bufferIndex);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -1135,7 +1135,7 @@ public void testSeekWhileSeekingWhilePlaying() {
   }
 
   @Test
-  public void testSimulatenousEventsAllRun() {
+  public void testSimultaneousEventsAllRun() {
     // Simultaneous events should all run even if
     // one of them stops playback.
     MediaEvent e1 = (mp, smp) -> smp.doStop();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -40,7 +40,7 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void setNdefPushMesageCallback_shouldUseCallback() {
+  public void setNdefPushMessageCallback_shouldUseCallback() {
     final NfcAdapter.CreateNdefMessageCallback callback =
         mock(NfcAdapter.CreateNdefMessageCallback.class);
     final Activity activity = Robolectric.setupActivity(Activity.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -145,7 +145,7 @@ public void shouldBeSessionCallbacksWhenRegistered() {
   }
 
   @Test(expected = SecurityException.class)
-  public void packageInstallerOpenSession_nonExistantSessionThrowsException() throws Exception {
+  public void packageInstallerOpenSession_nonExistentSessionThrowsException() throws Exception {
     packageInstaller.openSession(-99);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -3389,7 +3389,7 @@ private static PackageInfo newPackageInfo(String packageName, Signature... signa
   @Test
   public void getPermissionInfo_notFound() {
     try {
-      packageManager.getPermissionInfo("non_existant_permission", 0);
+      packageManager.getPermissionInfo("non_existent_permission", 0);
       fail("should have thrown NameNotFoundException");
     } catch (NameNotFoundException e) {
       // expected

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedAsyncTaskTest.java
Patch:
@@ -33,7 +33,7 @@ public void setUp() throws Exception {
     transcript = new ArrayList<>();
   }
 
-  /** Test uses AsyncTask without overridding executor. */
+  /** Test uses AsyncTask without overriding executor. */
   @Test
   public void testNormalFlow() throws Exception {
     AsyncTask<String, String, String> asyncTask = new RecordingAsyncTask();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResultReceiverTest.java
Patch:
@@ -12,7 +12,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowResultReceiverTest {
   @Test
-  public void callingSend_shouldCallOverridenOnReceiveResultWithTheSameArguments() {
+  public void callingSend_shouldCallOverriddenOnReceiveResultWithTheSameArguments() {
     TestResultReceiver testResultReceiver = new TestResultReceiver(null);
     Bundle bundle = new Bundle();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSoundTriggerManagerTest.java
Patch:
@@ -56,7 +56,7 @@ public void getModuleProperties_nonNullProperties() {
     assertThat(moduleProperties.getVersion()).isEqualTo(1234);
   }
 
-  // Construct a dummuy {@code SoundTrigger.ModuleProperties}. Return Object because {@code
+  // Construct a dummy {@code SoundTrigger.ModuleProperties}. Return Object because {@code
   // SoundTrigger.ModuleProperties} is not exist in public Android SDK.
   private Object getModuleProperties(String supportedModelArch, int version) {
     return new SoundTrigger.ModuleProperties(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSpeechRecognizerTest.java
Patch:
@@ -148,7 +148,7 @@ public void startListeningWithCustomComponent() {
     speechRecognizer =
         SpeechRecognizer.createSpeechRecognizer(
             ApplicationProvider.getApplicationContext(),
-            new ComponentName("org.robolectrc", "FakeComponent"));
+            new ComponentName("org.robolectric", "FakeComponent"));
     speechRecognizer.setRecognitionListener(listener);
     speechRecognizer.startListening(new Intent());
     shadowOf(getMainLooper()).idle();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStorageStatsManagerTest.java
Patch:
@@ -75,7 +75,7 @@ public void getFreeBytes_registeredNewUuid_returnSetupValue() throws Exception {
 
   @Test
   public void getFreeBytes_afterRemoveStorageDevice_throwsException() {
-    // Arange
+    // Arrange
     shadowOf(storageStatsManager).removeStorageDevice(StorageManager.UUID_DEFAULT);
 
     // Act & Assert
@@ -124,7 +124,7 @@ public void getTotalBytes_registeredNewUuid_returnSetupValue() throws Exception
 
   @Test
   public void getTotalBytes_afterRemoveStorageDevice_throwsException() {
-    // Arange
+    // Arrange
     shadowOf(storageStatsManager).removeStorageDevice(StorageManager.UUID_DEFAULT);
 
     // Act & Assert

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceTest.java
Patch:
@@ -150,7 +150,7 @@ public void unlockCanvasAndPost_triggersFrameUpdateInSurfaceTexture_hardwareCanv
    */
   @Config(minSdk = Q)
   @Test
-  public void copyFrom_surfaceControl_lockHardwareCavnvas() {
+  public void copyFrom_surfaceControl_lockHardwareCanvas() {
     SurfaceSession session = new SurfaceSession();
     SurfaceControl surfaceControl =
         new SurfaceControl.Builder(session).setBufferSize(100, 100).setName("").build();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -99,7 +99,7 @@ public void registerAndUnRegister() {
 
   @Test
   @Config(minSdk = UPSIDE_DOWN_CAKE)
-  public void registerWithTransactionalCapabilites_addsSelfManagedCapability() {
+  public void registerWithTransactionalCapabilities_addsSelfManagedCapability() {
     PhoneAccountHandle handle = createHandle("id");
     PhoneAccount phoneAccount =
         PhoneAccount.builder(handle, "main_account")

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -369,7 +369,7 @@ public void append_whenSelectionReachesToEnd_shouldExtendSelectionToTheEnd() {
 
   @Test
   public void
-      testSetCompountDrawablesWithIntrinsicBounds_int_shouldCreateDrawablesWithResourceIds() {
+      testSetCompoundDrawablesWithIntrinsicBounds_int_shouldCreateDrawablesWithResourceIds() {
     textView.setCompoundDrawablesWithIntrinsicBounds(
         R.drawable.an_image,
         R.drawable.an_other_image,
@@ -389,7 +389,7 @@ public void append_whenSelectionReachesToEnd_shouldExtendSelectionToTheEnd() {
   }
 
   @Test
-  public void testSetCompountDrawablesWithIntrinsicBounds_int_shouldNotCreateDrawablesForZero() {
+  public void testSetCompoundDrawablesWithIntrinsicBounds_int_shouldNotCreateDrawablesForZero() {
     textView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
 
     assertNull(textView.getCompoundDrawables()[0]);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -162,7 +162,7 @@ public void shouldNotFindViewWithTagReturnNull() {
   }
 
   @Test
-  public void shouldfindViewWithTagFromCorrectViewGroup() {
+  public void shouldFindViewWithTagFromCorrectViewGroup() {
     root.removeAllViews();
     child1.setTag("tag1");
     child2.setTag("tag2");

File: shadows/playservices/src/main/java/org/robolectric/shadows/gms/ShadowGoogleAuthUtil.java
Patch:
@@ -207,7 +207,7 @@ public String getTokenWithNotification(
         String authority,
         Bundle syncBundle)
         throws IOException, UserRecoverableNotifiedException, GoogleAuthException {
-      if (authority == null || authority.length() == 0) {
+      if (authority == null || authority.isEmpty()) {
         throw new IllegalArgumentException("Authority cannot be empty.");
       }
       return "token";

File: shadows/playservices/src/main/java/org/robolectric/shadows/gms/common/ShadowGoogleApiAvailability.java
Patch:
@@ -14,7 +14,6 @@
 public class ShadowGoogleApiAvailability {
   private int availabilityCode = ConnectionResult.SERVICE_MISSING;
   private boolean isUserResolvableError = false;
-  private String openSourceSoftwareLicenseInfo = "";
   private Dialog errorDialog;
 
   @Implementation
@@ -42,7 +41,7 @@ public void setIsUserResolvableError(final boolean isUserResolvableError) {
 
   @Implementation
   public String getOpenSourceSoftwareLicenseInfo(Context context) {
-    return openSourceSoftwareLicenseInfo;
+    return "";
   }
 
   @Implementation

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/FakeHttp.java
Patch:
@@ -36,7 +36,7 @@ public static void addPendingHttpResponse(
           "FakeHttp.getFakeHttpLayer().addPendingHttpResponse(statusCode, responseBody,"
               + " contentType)",
       imports = "org.robolectric.shadows.httpclient.FakeHttp")
-  public static final void addPendingHttpResponseWithContentType(
+  public static void addPendingHttpResponseWithContentType(
       int statusCode, String responseBody, Header contentType) {
     getFakeHttpLayer().addPendingHttpResponse(statusCode, responseBody, contentType);
   }

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/HttpEntityStub.java
Patch:
@@ -55,7 +55,7 @@ public void consumeContent() throws IOException {
     throw new UnsupportedOperationException();
   }
 
-  public static interface ResponseRule {
+  public interface ResponseRule {
     boolean matches(HttpRequest request);
 
     HttpResponse getResponse() throws HttpException, IOException;

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/HttpRedirect.java
Patch:
@@ -40,7 +40,7 @@
  */
 class HttpRedirect extends HttpRequestBase {
 
-  private String method;
+  private final String method;
 
   public HttpRedirect(final String method, final URI uri) {
     super();

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/HttpResponseGenerator.java
Patch:
@@ -4,5 +4,5 @@
 import org.apache.http.HttpResponse;
 
 public interface HttpResponseGenerator {
-  public HttpResponse getResponse(HttpRequest request);
+  HttpResponse getResponse(HttpRequest request);
 }

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/RequestMatcher.java
Patch:
@@ -3,5 +3,5 @@
 import org.apache.http.HttpRequest;
 
 public interface RequestMatcher {
-  public boolean matches(HttpRequest request);
+  boolean matches(HttpRequest request);
 }

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/AndroidHttpClientTest.java
Patch:
@@ -19,13 +19,13 @@
 public class AndroidHttpClientTest {
 
   @Test
-  public void testNewInstance() throws Exception {
+  public void testNewInstance() {
     AndroidHttpClient client = AndroidHttpClient.newInstance("foo");
     assertThat(client).isNotNull();
   }
 
   @Test
-  public void testNewInstanceWithContext() throws Exception {
+  public void testNewInstanceWithContext() {
     AndroidHttpClient client =
         AndroidHttpClient.newInstance("foo", RuntimeEnvironment.getApplication());
     assertThat(client).isNotNull();

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/ParamsParserTest.java
Patch:
@@ -36,22 +36,22 @@ public void parseParams_shouldParsePutEntitiesIntoParams() throws Exception {
   }
 
   @Test
-  public void parseParams_shouldDoNothingForEmptyEntity() throws Exception {
+  public void parseParams_shouldDoNothingForEmptyEntity() {
     HttpPut put = new HttpPut("example.com");
     Map<String, String> params = ParamsParser.parseParams(put);
     assertThat(params).isEmpty();
   }
 
   @Test
-  public void parseParams_shouldParseParamsFromGetRequests() throws Exception {
+  public void parseParams_shouldParseParamsFromGetRequests() {
     HttpGet httpGet = new HttpGet("http://example.com/path?foo=bar");
     Map<String, String> parsed = ParamsParser.parseParams(httpGet);
     assertThat(parsed.size()).isEqualTo(1);
     assertThat(parsed.get("foo")).isEqualTo("bar");
   }
 
   @Test
-  public void parseParams_returnsNullForUnsupportedOperations() throws Exception {
+  public void parseParams_returnsNullForUnsupportedOperations() {
     HttpDelete httpDelete = new HttpDelete("http://example.com/deleteme");
     assertThat(ParamsParser.parseParams(httpDelete)).isEmpty();
   }

File: utils/reflector/src/main/java/org/robolectric/util/reflector/Reflector.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.util.reflector;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.nio.file.Files;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -120,7 +120,7 @@ private static <T> Class<? extends T> createReflectorClass(
     if (DEBUG) {
       File file = new File("/tmp", reflectorClassName + ".class");
       System.out.println("Generated reflector: " + file.getAbsolutePath());
-      try (OutputStream out = new FileOutputStream(file)) {
+      try (OutputStream out = Files.newOutputStream(file.toPath())) {
         out.write(bytecode);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -146,7 +146,7 @@ private static <T> Class<?> defineViaNewClassLoader(
     ClassLoader classLoader =
         new ClassLoader(iClass.getClassLoader()) {
           @Override
-          protected Class<?> findClass(String name) throws ClassNotFoundException {
+          protected Class<?> findClass(String name) {
             return defineClass(name, bytecode, 0, bytecode.length);
           }
         };

File: utils/reflector/src/main/java/org/robolectric/util/reflector/UnsafeAccess.java
Patch:
@@ -49,7 +49,6 @@ private static class DangerPre11 implements Danger {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public <T> Class<?> defineClass(Class<T> iClass, String reflectorClassName, byte[] bytecode) {
       // use reflection to call since this method does not exist on JDK11
       try {

File: utils/src/main/java/org/robolectric/util/Join.java
Patch:
@@ -4,12 +4,12 @@
 
 /** Utility class used to join strings together with a delimiter. */
 public class Join {
-  public static String join(String delimiter, Collection collection) {
+  public static String join(String delimiter, Collection<?> collection) {
     String del = "";
     StringBuilder sb = new StringBuilder();
     for (Object obj : collection) {
       String asString = obj == null ? null : obj.toString();
-      if (obj != null && asString.length() > 0) {
+      if (obj != null && !asString.isEmpty()) {
         sb.append(del).append(obj);
         del = delimiter;
       }
@@ -22,7 +22,7 @@ public static String join(String delimiter, Object... collection) {
     StringBuilder sb = new StringBuilder();
     for (Object obj : collection) {
       String asString = obj == null ? null : obj.toString();
-      if (asString != null && asString.length() > 0) {
+      if (asString != null && !asString.isEmpty()) {
         sb.append(del).append(asString);
         del = delimiter;
       }

File: utils/src/main/java/org/robolectric/util/PerfStatsCollector.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Objects;
 import org.robolectric.pluginapi.perf.Metadata;
 import org.robolectric.pluginapi.perf.Metric;
 import org.robolectric.pluginapi.perf.PerfStatsReporter;
@@ -169,7 +170,7 @@ public boolean equals(Object o) {
       if (success != metricKey.success) {
         return false;
       }
-      return name != null ? name.equals(metricKey.name) : metricKey.name == null;
+      return Objects.equals(name, metricKey.name);
     }
 
     @Override

File: utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.Iterator;
 import java.util.PriorityQueue;
 import java.util.concurrent.TimeUnit;
+import javax.annotation.Nonnull;
 
 /**
  * Class that manages a queue of Runnables that are scheduled to run now (or at some time in the
@@ -397,7 +398,7 @@ private ScheduledRunnable(Runnable runnable, long scheduledTime, long timeDisamb
     }
 
     @Override
-    public int compareTo(ScheduledRunnable runnable) {
+    public int compareTo(@Nonnull ScheduledRunnable runnable) {
       int timeCompare = Long.compare(scheduledTime, runnable.scheduledTime);
       if (timeCompare == 0) {
         return Long.compare(timeDisambiguator, runnable.timeDisambiguator);

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassHandler.java
Patch:
@@ -18,7 +18,7 @@ public interface ClassHandler {
    *
    * @param clazz the class being loaded
    */
-  void classInitializing(Class clazz);
+  void classInitializing(Class<?> clazz);
 
   /**
    * Called by Robolectric to determine how to create and initialize a shadow object when a new

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassInstrumentor.java
Patch:
@@ -275,7 +275,7 @@ private boolean isJacocoInstrumented(MethodNode ctor) {
 
   /**
    * Adds a call $$robo$init, which instantiates a shadow object if required. This is to support
-   * custom shadows for Jacoco-instrumented classes (except cnstructor shadows).
+   * custom shadows for Jacoco-instrumented classes (except constructor shadows).
    */
   protected void addCallToRoboInit(MutableClass mutableClass, MethodNode ctor) {
     AbstractInsnNode returnNode =
@@ -618,7 +618,7 @@ private MethodNode redirectorMethod(
 
   protected String[] exceptionArray(MethodNode method) {
     List<String> exceptions = method.exceptions;
-    return exceptions.toArray(new String[exceptions.size()]);
+    return exceptions.toArray(new String[0]);
   }
 
   /** Filters methods that might need special treatment because of various reasons */

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -68,7 +68,7 @@ protected InstrumentationConfiguration(
       Collection<String> instrumentedPackages,
       Collection<String> instrumentedClasses,
       Collection<String> classesToNotAcquire,
-      Collection<String> packagesToNotAquire,
+      Collection<String> packagesToNotAcquire,
       Collection<String> classesToNotInstrument,
       Collection<String> packagesToNotInstrument,
       String classesToNotInstrumentRegex) {
@@ -77,7 +77,7 @@ protected InstrumentationConfiguration(
     this.instrumentedPackages = ImmutableList.copyOf(instrumentedPackages);
     this.instrumentedClasses = ImmutableSet.copyOf(instrumentedClasses);
     this.classesToNotAcquire = ImmutableSet.copyOf(classesToNotAcquire);
-    this.packagesToNotAcquire = ImmutableSet.copyOf(packagesToNotAquire);
+    this.packagesToNotAcquire = ImmutableSet.copyOf(packagesToNotAcquire);
     this.classesToNotInstrument = ImmutableSet.copyOf(classesToNotInstrument);
     this.packagesToNotInstrument = ImmutableSet.copyOf(packagesToNotInstrument);
     this.classesToNotInstrumentRegex = classesToNotInstrumentRegex;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InvokeDynamicSupport.java
Patch:
@@ -133,8 +133,7 @@ public static CallSite bootstrapStatic(
 
   @SuppressWarnings("UnusedDeclaration")
   public static CallSite bootstrapIntrinsic(
-      MethodHandles.Lookup caller, String name, MethodType type, String callee)
-      throws IllegalAccessException {
+      MethodHandles.Lookup caller, String name, MethodType type, String callee) {
     return PerfStatsCollector.getInstance()
         .measure(
             "invokedynamic bootstrap intrinsic",

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RoboType.java
Patch:
@@ -12,13 +12,13 @@ enum RoboType {
   DOUBLE(Double.TYPE),
   OBJECT(null);
 
-  RoboType(Class type) {
+  RoboType(Class<?> type) {
     this.type = type;
   }
 
-  private final Class type;
+  private final Class<?> type;
 
-  public static Class findPrimitiveClass(String name) {
+  public static Class<?> findPrimitiveClass(String name) {
     for (RoboType type : RoboType.values()) {
       if (type.type != null && type.type.getName().equals(name)) {
         return type.type;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricInternals.java
Patch:
@@ -17,7 +17,7 @@ public class RobolectricInternals {
   private static ClassLoader classLoader;
 
   @SuppressWarnings("UnusedDeclaration")
-  public static void classInitializing(Class clazz) throws Exception {
+  public static void classInitializing(Class<?> clazz) {
     classHandler.classInitializing(clazz);
   }
 
@@ -36,8 +36,8 @@ public static Throwable cleanStackTrace(Throwable exception) {
     return classHandler.stripStackTrace(exception);
   }
 
-  public static Object intercept(String signature, Object instance, Object[] params, Class theClass)
-      throws Throwable {
+  public static Object intercept(
+      String signature, Object instance, Object[] params, Class<?> theClass) throws Throwable {
     try {
       return classHandler.intercept(signature, instance, params, theClass);
     } catch (java.lang.LinkageError e) {

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowInvalidator.java
Patch:
@@ -12,7 +12,7 @@ public class ShadowInvalidator {
     SwitchPoint.invalidateAll(new SwitchPoint[] {DUMMY});
   }
 
-  private Map<String, SwitchPoint> switchPoints;
+  private final Map<String, SwitchPoint> switchPoints;
 
   public ShadowInvalidator() {
     this.switchPoints = new HashMap<>();

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowMap.java
Patch:
@@ -205,9 +205,7 @@ public boolean equals(Object o) {
 
     ShadowMap shadowMap = (ShadowMap) o;
 
-    if (!overriddenShadows.equals(shadowMap.overriddenShadows)) return false;
-
-    return true;
+    return overriddenShadows.equals(shadowMap.overriddenShadows);
   }
 
   @Override

File: sandbox/src/main/java/org/robolectric/util/JavaVersion.java
Patch:
@@ -9,7 +9,7 @@ public class JavaVersion implements Comparable<JavaVersion> {
 
   public JavaVersion(String version) {
     versions = new ArrayList<>();
-    Scanner s = new Scanner(version).useDelimiter("[^\\d]+");
+    Scanner s = new Scanner(version).useDelimiter("\\D+");
     while (s.hasNext()) {
       versions.add(s.nextInt());
     }

File: sandbox/src/test/java/org/robolectric/ClassicSuperHandlingTest.java
Patch:
@@ -13,13 +13,13 @@
 public class ClassicSuperHandlingTest {
   @Test
   @SandboxConfig(shadows = {ChildShadow.class, ParentShadow.class, GrandparentShadow.class})
-  public void uninstrumentedSubclassesShouldBeAbleToCallSuperWithoutLooping() throws Exception {
+  public void uninstrumentedSubclassesShouldBeAbleToCallSuperWithoutLooping() {
     assertEquals("4-3s-2s-1s-boof", new BabiesHavingBabies().method("boof"));
   }
 
   @Test
   @SandboxConfig(shadows = {ChildShadow.class, ParentShadow.class, GrandparentShadow.class})
-  public void shadowInvocationWhenAllAreShadowed() throws Exception {
+  public void shadowInvocationWhenAllAreShadowed() {
     assertEquals("3s-2s-1s-boof", new Child().method("boof"));
     assertEquals("2s-1s-boof", new Parent().method("boof"));
     assertEquals("1s-boof", new Grandparent().method("boof"));

File: sandbox/src/test/java/org/robolectric/RealApisTest.java
Patch:
@@ -14,8 +14,7 @@
 public class RealApisTest {
   @Test
   @SandboxConfig(shadows = {ShimmeryShadowPony.class})
-  public void whenShadowHandlerIsInRealityBasedMode_shouldNotCallRealForUnshadowedMethod()
-      throws Exception {
+  public void whenShadowHandlerIsInRealityBasedMode_shouldNotCallRealForUnshadowedMethod() {
     assertEquals("Off I saunter to the salon!", new Pony().saunter("the salon"));
   }
 
@@ -24,7 +23,7 @@ public static class ShimmeryShadowPony extends Pony.ShadowPony {}
 
   @Test
   @SandboxConfig(shadows = {ShadowOfClassWithSomeConstructors.class})
-  public void shouldCallOriginalConstructorBodySomehow() throws Exception {
+  public void shouldCallOriginalConstructorBodySomehow() {
     ClassWithSomeConstructors o = new ClassWithSomeConstructors("my name");
     assertEquals("my name", o.name);
   }

File: sandbox/src/test/java/org/robolectric/RobolectricInternalsTest.java
Patch:
@@ -172,7 +172,7 @@ protected void __constructor__(String param1, Byte param2, Long param3) {
 
   @Instrument
   static class Outer {
-    public String outerParam = null;
+    public String outerParam;
 
     public Outer(String param) {
       this.outerParam = param;

File: sandbox/src/test/java/org/robolectric/StaticInitializerTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
@@ -16,7 +17,7 @@
 @RunWith(SandboxTestRunner.class)
 public class StaticInitializerTest {
   @Test
-  public void whenClassIsUnshadowed_shouldPerformStaticInitialization() throws Exception {
+  public void whenClassIsUnshadowed_shouldPerformStaticInitialization() {
     assertEquals("Floyd", ClassWithStaticInitializerA.name);
   }
 
@@ -48,7 +49,7 @@ public static class ShadowClassWithoutStaticInitializerOverride {}
   public void whenClassHasShadowWithOverrideMethod_shouldDeferStaticInitialization()
       throws Exception {
     assertFalse(ShadowClassWithStaticInitializerOverride.initialized);
-    assertEquals(null, ClassWithStaticInitializerC.name);
+    assertNull(ClassWithStaticInitializerC.name);
     assertTrue(ShadowClassWithStaticInitializerOverride.initialized);
 
     RobolectricInternals.performStaticInitialization(ClassWithStaticInitializerC.class);

File: resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -78,6 +78,6 @@ public boolean isExported() {
   }
 
   public boolean isEnabled() {
-    return attributes.containsKey(ENABLED) ? Boolean.parseBoolean(attributes.get(ENABLED)) : true;
+    return !attributes.containsKey(ENABLED) || Boolean.parseBoolean(attributes.get(ENABLED));
   }
 }

File: resources/src/main/java/org/robolectric/manifest/ContentProviderData.java
Patch:
@@ -46,6 +46,6 @@ public boolean getGrantUriPermissions() {
   }
 
   public boolean isEnabled() {
-    return attributes.containsKey(ENABLED) ? Boolean.parseBoolean(attributes.get(ENABLED)) : true;
+    return !attributes.containsKey(ENABLED) || Boolean.parseBoolean(attributes.get(ENABLED));
   }
 }

File: resources/src/main/java/org/robolectric/manifest/MetaData.java
Patch:
@@ -126,7 +126,7 @@ private Object parseValue(String value) {
    */
   public static int getColor(String value) {
     if (value != null) {
-      if (value.startsWith("#") == false) {
+      if (!value.startsWith("#")) {
         throw new NumberFormatException(String.format("Color value '%s' must start with #", value));
       }
 

File: resources/src/main/java/org/robolectric/manifest/ServiceData.java
Patch:
@@ -71,6 +71,6 @@ public boolean isExported() {
   }
 
   public boolean isEnabled() {
-    return attributes.containsKey(ENABLED) ? Boolean.parseBoolean(attributes.get(ENABLED)) : true;
+    return !attributes.containsKey(ENABLED) || Boolean.parseBoolean(attributes.get(ENABLED));
   }
 }

File: resources/src/main/java/org/robolectric/res/Qualifiers.java
Patch:
@@ -108,7 +108,7 @@ public static int getSmallestScreenWidth(String qualifiers) {
   public static String addSmallestScreenWidth(String qualifiers, int smallestScreenWidth) {
     int qualifiersSmallestScreenWidth = Qualifiers.getSmallestScreenWidth(qualifiers);
     if (qualifiersSmallestScreenWidth == -1) {
-      if (qualifiers.length() > 0) {
+      if (!qualifiers.isEmpty()) {
         qualifiers += "-";
       }
       qualifiers += "sw" + smallestScreenWidth + "dp";
@@ -138,7 +138,7 @@ public static int getScreenWidth(String qualifiers) {
   public static String addScreenWidth(String qualifiers, int screenWidth) {
     int qualifiersScreenWidth = Qualifiers.getScreenWidth(qualifiers);
     if (qualifiersScreenWidth == -1) {
-      if (qualifiers.length() > 0) {
+      if (!qualifiers.isEmpty()) {
         qualifiers += "-";
       }
       qualifiers += "w" + screenWidth + "dp";

File: resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -134,9 +134,7 @@ public boolean equals(Object o) {
 
     if (!packageName.equals(resName.packageName)) return false;
     if (!type.equals(resName.type)) return false;
-    if (!name.equals(resName.name)) return false;
-
-    return true;
+    return name.equals(resName.name);
   }
 
   @Override

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution.java
Patch:
@@ -105,7 +105,7 @@ public static boolean ResolveAttrs(
         defStyleRes != 0 ? res.getBagLocked(defStyleRes, defStyleStart, defStyleTypeSetFlags) : -1;
     defStyleTypeSetFlags.set(defStyleTypeSetFlags.get() | defStyleBagTypeSetFlags.get());
     //    const ResTable::bag_entry* const defStyleEnd = defStyleStart + (bagOff >= 0 ? bagOff : 0);
-    final int defStyleEnd = (bagOff >= 0 ? bagOff : 0);
+    final int defStyleEnd = Math.max(bagOff, 0);
     BagAttributeFinder defStyleAttrFinder =
         new BagAttributeFinder(defStyleStart.get(), defStyleEnd);
 

File: resources/src/main/java/org/robolectric/res/android/Idmap.java
Patch:
@@ -12,6 +12,7 @@
 import static org.robolectric.res.android.Util.logError;
 
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import org.robolectric.res.android.ResourceTypes.IdmapEntry_header;
 import org.robolectric.res.android.ResourceTypes.Idmap_header;
@@ -181,6 +182,7 @@ LoadedIdmap Load(StringPiece idmap_data) {
         if ((data_size - SIZEOF_CPTR) / SIZEOF_INT < dtohs(entry_header.entry_count)) {
           logError(
               String.format(
+                  Locale.getDefault(),
                   "Idmap too small for the number of entries (%d)",
                   (int) dtohs(entry_header.entry_count)));
           return emptyBraces();

File: resources/src/main/java/org/robolectric/res/android/LocaleData.java
Patch:
@@ -215,7 +215,6 @@ static void localeDataComputeScript(byte[] out, final byte[] language, final byt
       // We don't know anything about the locale
       //      memset(out, '\0', SCRIPT_LENGTH);
       Arrays.fill(out, (byte) 0);
-      return;
     } else {
       // We found the locale.
       //      memcpy(out, SCRIPT_CODES[lookup_result.second], SCRIPT_LENGTH);

File: resources/src/main/java/org/robolectric/res/android/ResourceUtils.java
Patch:
@@ -83,11 +83,11 @@ static boolean ExtractResourceName(
     int end = start + str.length();
     int current = start;
     while (current != end) {
-      if (out_type.get().length() == 0 && str.charAt(current) == '/') {
+      if (out_type.get().isEmpty() && str.charAt(current) == '/') {
         has_type_separator = true;
         out_type.set(str.substring(start, current));
         start = current + 1;
-      } else if (out_package.get().length() == 0 && str.charAt(current) == ':') {
+      } else if (out_package.get().isEmpty() && str.charAt(current) == ':') {
         has_package_separator = true;
         out_package.set(str.substring(start, current));
         start = current + 1;

File: resources/src/main/java/org/robolectric/res/android/String8.java
Patch:
@@ -382,7 +382,7 @@ String8 getBasePath() {
   }
 
   public String8 appendPath(String name) {
-    if (name.length() == 0) {
+    if (name.isEmpty()) {
       // nothing to do
       return this;
     }
@@ -431,7 +431,7 @@ public boolean equals(Object o) {
     String8 string8 = (String8) o;
 
     return mString != null
-        ? mString.toString().equals(string8.mString.toString())
+        ? mString.toString().contentEquals(string8.mString)
         : string8.mString == null;
   }
 

File: resources/src/test/java/org/robolectric/res/android/ZipFileROTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.res.android;
 
 import static com.google.common.truth.Truth.assertThat;
+import static java.nio.file.Files.newOutputStream;
 
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Files;
@@ -61,7 +62,7 @@ public void createEntryFileMap_yieldsCorrectOffset() throws Exception {
   public void open_emptyZip() throws Exception {
     // ensure ZipFileRO cam handle an empty zip file with no central directory
     File blob = File.createTempFile("prefix", "zip");
-    try (ZipOutputStream zip = new ZipOutputStream(new FileOutputStream(blob))) {}
+    try (ZipOutputStream zip = new ZipOutputStream(newOutputStream(blob.toPath()))) {}
 
     ZipFileRO zipFile = ZipFileRO.open(blob.toString());
     assertThat(zipFile).isNotNull();

File: resources/src/main/java/org/robolectric/res/ResourceIdGenerator.java
Patch:
@@ -49,7 +49,7 @@ public int generate(String type, String name) {
       typeTracker = new TypeTracker(getNextFreeTypeIdentifier());
       typeInfo.put(type, typeTracker);
     }
-    return ResourceIds.makeIdentifer(
+    return ResourceIds.makeIdentifier(
         packageIdentifier, typeTracker.getTypeIdentifier(), typeTracker.getFreeIdentifier());
   }
 

File: resources/src/main/java/org/robolectric/res/ResourceIds.java
Patch:
@@ -20,7 +20,7 @@ public static int getEntryIdentifier(int resId) {
     return resId & 0x0000FFFF;
   }
 
-  public static int makeIdentifer(int packageIdentifier, int typeIdentifier, int entryIdenifier) {
-    return packageIdentifier << 24 | typeIdentifier << 16 | entryIdenifier;
+  public static int makeIdentifier(int packageIdentifier, int typeIdentifier, int entryIdentifier) {
+    return packageIdentifier << 24 | typeIdentifier << 16 | entryIdentifier;
   }
 }

File: resources/src/test/java/org/robolectric/res/ResourceIdsTest.java
Patch:
@@ -35,7 +35,7 @@ public void testGetEntryIdentifier() {
 
   @Test
   public void testMakeIdentifier() {
-    assertThat(ResourceIds.makeIdentifer(0x01, 0x01, 0x9876)).isEqualTo(0x01019876);
-    assertThat(ResourceIds.makeIdentifer(0x7F, 0x78, 0x1234)).isEqualTo(0x7F781234);
+    assertThat(ResourceIds.makeIdentifier(0x01, 0x01, 0x9876)).isEqualTo(0x01019876);
+    assertThat(ResourceIds.makeIdentifier(0x7F, 0x78, 0x1234)).isEqualTo(0x7F781234);
   }
 }

File: resources/src/main/java/org/robolectric/manifest/ActivityData.java
Patch:
@@ -72,7 +72,7 @@ public boolean isAlwaysRetainTaskState() {
     return getBooleanAttr(withXMLNS(ALWAYS_RETAIN_TASK_STATE), false);
   }
 
-  public boolean isClearTaskOnLaungh() {
+  public boolean isClearTaskOnLaunch() {
     return getBooleanAttr(withXMLNS(CLEAR_TASK_ON_LAUNCH), false);
   }
 

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -156,7 +156,7 @@ public String getRClassName() {
     return rClassName;
   }
 
-  public Class getRClass() {
+  public Class<?> getRClass() {
     try {
       String rClassName = getRClassName();
       return Class.forName(rClassName);
@@ -665,7 +665,7 @@ public String getProcessName() {
   public Map<String, Object> getApplicationMetaData() {
     parseAndroidManifest();
     if (applicationMetaData == null) {
-      applicationMetaData = new MetaData(Collections.<Node>emptyList());
+      applicationMetaData = new MetaData(Collections.emptyList());
     }
     return applicationMetaData.getValueMap();
   }

File: resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -56,7 +56,7 @@ public PackageResourceTable newResourceTable(String packageName, ResourcePath...
   }
 
   private void addRClassValues(PackageResourceTable resourceTable, Class<?> rClass) {
-    for (Class innerClass : rClass.getClasses()) {
+    for (Class<?> innerClass : rClass.getClasses()) {
       String resourceType = innerClass.getSimpleName();
       if (!resourceType.equals("styleable")) {
         for (Field field : innerClass.getDeclaredFields()) {
@@ -88,7 +88,7 @@ private void addRClassValues(PackageResourceTable resourceTable, Class<?> rClass
    * field.
    */
   private void addMissingStyleableAttributes(PackageResourceTable resourceTable, Class<?> rClass) {
-    for (Class innerClass : rClass.getClasses()) {
+    for (Class<?> innerClass : rClass.getClasses()) {
       if (innerClass.getSimpleName().equals("styleable")) {
         String styleableName = null; // Current styleable name
         int[] styleableArray = null; // Current styleable value array or references

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -1030,7 +1030,7 @@ public AssetDir openDir(final String dirName) {
        *
        * We start with Zip archives, then do loose files.
        */
-      pMergedInfo = new Ref<>(new SortedVector<AssetDir.FileInfo>());
+      pMergedInfo = new Ref<>(new SortedVector<>());
 
       int i = mAssetPaths.size();
       while (i > 0) {

File: resources/src/main/java/org/robolectric/res/android/LocaleData.java
Patch:
@@ -154,7 +154,7 @@ static int localeDataCompareRegions(
     }
 
     int[] request_ancestors = new int[MAX_PARENT_DEPTH + 1];
-    final Ref<Long> left_right_indexRef = new Ref<Long>(null);
+    final Ref<Long> left_right_indexRef = new Ref<>(null);
     // Find the parents of the request, but stop as soon as we saw left or right
     final int[] left_and_right = {left, right};
     final int ancestor_count =

File: resources/src/test/java/org/robolectric/manifest/ActivityDataTest.java
Patch:
@@ -15,8 +15,7 @@ public class ActivityDataTest {
   public void test_non_android_namespace() {
     HashMap<String, String> attrs = new HashMap<>();
     attrs.put("testns:name", ".test.TestActivity");
-    ActivityData activityData =
-        new ActivityData("testns", attrs, new ArrayList<IntentFilterData>());
+    ActivityData activityData = new ActivityData("testns", attrs, new ArrayList<>());
 
     assertThat(activityData.getName()).isEqualTo(".test.TestActivity");
     assertThat(activityData.getAllAttributes().get("android:name")).isNull();
@@ -26,7 +25,7 @@ public void test_non_android_namespace() {
   public void test_config_changes() {
     HashMap<String, String> attrs = new HashMap<>();
     attrs.put("android:configChanges", "mcc|screenLayout|orientation");
-    ActivityData activityData = new ActivityData(attrs, new ArrayList<IntentFilterData>());
+    ActivityData activityData = new ActivityData(attrs, new ArrayList<>());
 
     assertThat(activityData.getConfigChanges()).isEqualTo("mcc|screenLayout|orientation");
   }

File: resources/src/test/java/org/robolectric/manifest/MetaDataTest.java
Patch:
@@ -15,7 +15,6 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.res.ResourceTable;
 import org.w3c.dom.Element;
-import org.w3c.dom.Node;
 
 /** Tests for {@link MetaData} */
 @RunWith(JUnit4.class)
@@ -38,7 +37,7 @@ public void tearDown() throws Exception {
   public void testNonExistentResource_throwsResourceNotFoundException() {
     Element metaDataElement = createMetaDataNode("aName", "@xml/non_existent_resource");
 
-    MetaData metaData = new MetaData(ImmutableList.<Node>of(metaDataElement));
+    MetaData metaData = new MetaData(ImmutableList.of(metaDataElement));
 
     assertThrows(RoboNotFoundException.class, () -> metaData.init(resourceProvider, "a.package"));
   }

File: resources/src/main/java/org/robolectric/res/Qualifiers.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.res.android.ResTable_config;
 
 /**
- * Android qualifers as defined by
+ * Android qualifiers as defined by
  * https://developer.android.com/guide/topics/resources/providing-resources.html
  */
 @SuppressWarnings("NewApi")

File: resources/src/main/java/org/robolectric/res/ResourceRemapper.java
Patch:
@@ -27,9 +27,9 @@ class ResourceRemapper {
 
   /**
    * @param primaryRClass - An R class (usually the applications) that can be assumed to have a
-   *     complete set of IDs. If this is provided then use the values from this class for
-   *     re-writting all values in follow up calls to {@link #remapRClass(Class)}. If it is not
-   *     provided the ResourceRemapper will generate its own unique non-conflicting IDs.
+   *     complete set of IDs. If this is provided then use the values from this class for re-writing
+   *     all values in follow up calls to {@link #remapRClass(Class)}. If it is not provided the
+   *     ResourceRemapper will generate its own unique non-conflicting IDs.
    */
   ResourceRemapper(Class<?> primaryRClass) {
     if (primaryRClass != null) {

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -324,7 +324,7 @@ public boolean addAssetPath(
   //        // delete idmap;
   //
   //        if (overlayPath != packagePath) {
-  //          ALOGW("idmap file %s inconcistent: expected path %s does not match actual path %s\n",
+  //          ALOGW("idmap file %s inconsistent: expected path %s does not match actual path %s\n",
   //              idmapPath.string(), packagePath.string(), overlayPath.string());
   //          return false;
   //        }

File: resources/src/main/java/org/robolectric/res/android/ZipFileRO.java
Patch:
@@ -249,7 +249,7 @@ int getEntryFileName(org.robolectric.res.android.ZipFileRO.ZipEntryRO entry, Ref
    * Create a new FileMap object that spans the data in "entry".
    */
   /*FileMap*/ ZipFileRO(org.robolectric.res.android.ZipFileRO.ZipEntryRO entry) {
-    throw new UnsupportedOperationException("Implememnt me");
+    throw new UnsupportedOperationException("Implement me");
 
     //    final ZipEntryRO *zipEntry = reinterpret_cast<ZipEntryRO*>(entry);
     //    final ZipEntry& ze = zipEntry.entry;
@@ -302,7 +302,7 @@ FileMap createEntryFileMap(ZipEntryRO entry) {
    */
   boolean uncompressEntry(
       org.robolectric.res.android.ZipFileRO.ZipEntryRO entry, Object buffer, int size) {
-    throw new UnsupportedOperationException("Implememnt me");
+    throw new UnsupportedOperationException("Implement me");
     //    ZipEntryRO *zipEntry = reinterpret_cast<ZipEntryRO*>(entry);
     //    final int error = ExtractToMemory(mHandle, &(zipEntry.entry),
     //    (uint8_t*) buffer, size);
@@ -320,7 +320,7 @@ boolean uncompressEntry(
    * This doesn't verify the data's CRC, but probably should.
    */
   boolean uncompressEntry(org.robolectric.res.android.ZipFileRO.ZipEntryRO entry, int fd) {
-    throw new UnsupportedOperationException("Implememnt me");
+    throw new UnsupportedOperationException("Implement me");
     //    ZipEntryRO *zipEntry = reinterpret_cast<ZipEntryRO*>(entry);
     //    final int error = ExtractEntryToFile(mHandle, &(zipEntry.entry), fd);
     //    if (error) {

File: resources/src/test/java/org/robolectric/manifest/MetaDataTest.java
Patch:
@@ -35,8 +35,8 @@ public void tearDown() throws Exception {
   }
 
   @Test
-  public void testNonExistantResource_throwsResourceNotFoundException() {
-    Element metaDataElement = createMetaDataNode("aName", "@xml/non_existant_resource");
+  public void testNonExistentResource_throwsResourceNotFoundException() {
+    Element metaDataElement = createMetaDataNode("aName", "@xml/non_existent_resource");
 
     MetaData metaData = new MetaData(ImmutableList.<Node>of(metaDataElement));
 

File: processor/src/main/java/org/robolectric/annotation/processing/validator/RealObjectValidator.java
Patch:
@@ -8,7 +8,7 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVisitor;
-import javax.lang.model.util.SimpleTypeVisitor6;
+import javax.lang.model.util.SimpleTypeVisitor8;
 import javax.tools.Diagnostic.Kind;
 import org.robolectric.annotation.processing.RobolectricModel;
 
@@ -33,7 +33,7 @@ public static String join(List<?> params) {
   }
 
   TypeVisitor<Void, VariableElement> typeVisitor =
-      new SimpleTypeVisitor6<Void, VariableElement>() {
+      new SimpleTypeVisitor8<Void, VariableElement>() {
         @Override
         public Void visitDeclared(DeclaredType t, VariableElement v) {
           List<? extends TypeMirror> typeParams = t.getTypeArguments();

File: processor/src/main/java/org/robolectric/annotation/processing/validator/Validator.java
Patch:
@@ -11,7 +11,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.util.AbstractElementVisitor6;
+import javax.lang.model.util.AbstractElementVisitor8;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
@@ -28,7 +28,7 @@ public abstract class Validator implements ElementVisitor<Void, Element> {
   protected final Helpers helpers;
   // This is the easiest way to do it because visit() is final in AbstractEV6
   final ElementVisitor<Void, Element> visitorAdapter =
-      new AbstractElementVisitor6<Void, Element>() {
+      new AbstractElementVisitor8<Void, Element>() {
 
         @Override
         public Void visitPackage(PackageElement e, Element p) {

File: pluginapi/src/main/java/org/robolectric/pluginapi/perf/Metric.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.pluginapi.perf;
 
+import java.util.Objects;
+
 /** Metric for perf stats collection. */
 public class Metric {
   private final String name;
@@ -76,7 +78,7 @@ public boolean equals(Object o) {
     if (success != metric.success) {
       return false;
     }
-    return name != null ? name.equals(metric.name) : metric.name == null;
+    return Objects.equals(name, metric.name);
   }
 
   @Override

File: pluginapi/src/test/java/org/robolectric/internal/dependency/DependencyJarTest.java
Patch:
@@ -9,7 +9,7 @@
 @RunWith(JUnit4.class)
 public class DependencyJarTest {
   @Test
-  public void testGetShortName() throws Exception {
+  public void testGetShortName() {
     assertThat(new DependencyJar("com.group", "artifact", "1.3", null).getShortName())
         .isEqualTo("com.group:artifact:1.3");
     assertThat(new DependencyJar("com.group", "artifact", "1.3", "dll").getShortName())

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/MavenDependencyResolver.java
Patch:
@@ -39,7 +39,6 @@
  */
 public class MavenDependencyResolver implements DependencyResolver {
 
-  private final ExecutorService executorService;
   private final MavenArtifactFetcher mavenArtifactFetcher;
   private final File localRepositoryDir;
 
@@ -60,7 +59,6 @@ public MavenDependencyResolver(
       String repositoryPassword,
       String proxyHost,
       int proxyPort) {
-    this.executorService = createExecutorService();
     this.localRepositoryDir = getLocalRepositoryDir();
     this.mavenArtifactFetcher =
         createMavenFetcher(
@@ -70,7 +68,7 @@ public MavenDependencyResolver(
             proxyHost,
             proxyPort,
             localRepositoryDir,
-            this.executorService);
+            createExecutorService());
   }
 
   @Override

File: preinstrumented/src/test/java/org/robolectric/preinstrumented/JarInstrumentorTest.java
Patch:
@@ -18,13 +18,13 @@ public class JarInstrumentorTest {
   private JarInstrumentor spyDummyInstrumentor;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     JarInstrumentor dummyInstrumentor =
         new JarInstrumentor() {
           @Override
           protected void instrumentJar(File sourceJarFile, File destJarFile) {
             // No-op. We only want to test the command line processing. Stub the actual
-            // instrumention.
+            // instrumentation.
           }
 
           @Override

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ServiceLoaderGenerator.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
+import java.nio.charset.StandardCharsets;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -29,7 +30,8 @@ public void generate() {
     try {
       FileObject file =
           filer.createResource(StandardLocation.CLASS_OUTPUT, "", "META-INF/services/" + fileName);
-      PrintWriter pw = new PrintWriter(new OutputStreamWriter(file.openOutputStream(), "UTF-8"));
+      PrintWriter pw =
+          new PrintWriter(new OutputStreamWriter(file.openOutputStream(), StandardCharsets.UTF_8));
       pw.print(shadowPackage + '.' + GEN_CLASS + '\n');
       pw.close();
     } catch (IOException e) {

File: processor/src/test/java/org/robolectric/annotation/processing/RobolectricProcessorTest.java
Patch:
@@ -49,7 +49,7 @@ public void unannotatedSource_shouldCompile() {
                 forSourceString("HelloWorld", "final class HelloWorld {}")))
         .processedWith(new RobolectricProcessor(DEFAULT_OPTS))
         .compilesWithoutError();
-    // .and().generatesNoSources(); Should add this assertion onces
+    // .and().generatesNoSources(); Should add this assertion once
     // it becomes available in compile-testing
   }
 

File: processor/src/test/java/org/robolectric/annotation/processing/generator/ShadowProviderGeneratorTest.java
Patch:
@@ -26,7 +26,7 @@ public class ShadowProviderGeneratorTest {
   private StringWriter writer;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     model = mock(RobolectricModel.class);
     generator =
         new ShadowProviderGenerator(
@@ -35,7 +35,7 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void resettersAreOnlyCalledIfSdkMatches() throws Exception {
+  public void resettersAreOnlyCalledIfSdkMatches() {
     when(model.getVisibleShadowTypes()).thenReturn(Collections.emptyList());
 
     List<ResetterInfo> resetterInfos = new ArrayList<>();

File: integration_tests/androidx_test/src/main/java/org/robolectric/integrationtests/axt/ActivityWithAppCompatMenu.java
Patch:
@@ -4,6 +4,7 @@
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import org.robolectric.integration.axt.R;
 
@@ -26,7 +27,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
   }
 
   @Override
-  public boolean onOptionsItemSelected(MenuItem item) {
+  public boolean onOptionsItemSelected(@NonNull MenuItem item) {
     menuClicked = true;
     return true;
   }

File: integration_tests/androidx_test/src/main/java/org/robolectric/integrationtests/axt/ActivityWithPlatformMenu.java
Patch:
@@ -5,6 +5,7 @@
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
+import androidx.annotation.NonNull;
 import org.robolectric.integration.axt.R;
 
 /** {@link EspressoWithMenuTest} fixture activity that uses Android platform menu's */
@@ -26,7 +27,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
   }
 
   @Override
-  public boolean onOptionsItemSelected(MenuItem item) {
+  public boolean onOptionsItemSelected(@NonNull MenuItem item) {
     menuClicked = true;
     return true;
   }

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/ActivityTestRuleTest.java
Patch:
@@ -47,6 +47,9 @@ protected void afterActivityFinished() {
         }
       };
 
+  /**
+   * @noinspection NewClassNamingConvention
+   */
   public static class TranscriptActivity extends Activity {
     Bundle receivedBundle;
 

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithPausedLooperTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() {
   public void launchActivity() {}
 
   @Test
-  public void onIdle_doesnt_block() {
+  public void onIdle_does_not_block() {
     Espresso.onIdle();
   }
 

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithSwitchCompatTest.java
Patch:
@@ -19,7 +19,7 @@
 public class EspressoWithSwitchCompatTest {
   @Test
   public void switchCompatTest() {
-    try (ActivityScenario<ActivityWithSwitchCompat> scenario =
+    try (ActivityScenario<ActivityWithSwitchCompat> ignored =
         ActivityScenario.launch(ActivityWithSwitchCompat.class)) {
       onView(withId(R.id.switch_compat_2)).check(matches(isCompletelyDisplayed())).perform(click());
     }

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/drawable/GradientDrawableTest.java
Patch:
@@ -73,6 +73,7 @@ public void setup() {
     mResources = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources();
   }
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void testConstructor() {
     int[] color = new int[] {1, 2, 3};

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererObserverTest.java
Patch:
@@ -18,6 +18,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNativeHardwareRendererObserverTest {
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void test_hardwareRenderer() {
     OnFrameMetricsAvailableListener listener = i -> {};

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererTest.java
Patch:
@@ -33,6 +33,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNativeHardwareRendererTest {
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void test_hardwareRenderer() {
     new HardwareRenderer();

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeMaskFilterTest.java
Patch:
@@ -11,6 +11,7 @@
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = O)
 public class ShadowNativeMaskFilterTest {
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void testConstructor() {
     new MaskFilter();

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePathEffectTest.java
Patch:
@@ -12,6 +12,7 @@
 @Config(minSdk = O)
 public class ShadowNativePathEffectTest {
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void testConstructor() {
     new PathEffect();

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeRuntimeShaderTest.java
Patch:
@@ -68,6 +68,7 @@ public void testConstructor() {
   }
 
   /** {@link #SKSL} does not compile on V and above. */
+  @SuppressWarnings("CheckReturnValue")
   @Config(minSdk = TIRAMISU, maxSdk = U.SDK_INT)
   @Test
   public void testConstructorT() {

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeShaderTest.java
Patch:
@@ -20,6 +20,7 @@
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = O)
 public class ShadowNativeShaderTest {
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void testConstructor() {
     new Shader();

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/drawable/GradientDrawableTest.java
Patch:
@@ -77,9 +77,9 @@ public void setup() {
   public void testConstructor() {
     int[] color = new int[] {1, 2, 3};
 
-    var unused = new GradientDrawable();
-    unused = new GradientDrawable(GradientDrawable.Orientation.BL_TR, color);
-    unused = new GradientDrawable(null, null);
+    new GradientDrawable();
+    new GradientDrawable(GradientDrawable.Orientation.BL_TR, color);
+    new GradientDrawable(null, null);
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererObserverTest.java
Patch:
@@ -22,7 +22,7 @@ public class ShadowNativeHardwareRendererObserverTest {
   public void test_hardwareRenderer() {
     OnFrameMetricsAvailableListener listener = i -> {};
     if (RuntimeEnvironment.getApiLevel() >= S) {
-      var unused = new HardwareRendererObserver(listener, new long[0], new Handler(), false);
+      new HardwareRendererObserver(listener, new long[0], new Handler(), false);
     } else {
       ReflectionHelpers.callConstructor(
           HardwareRendererObserver.class,

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererTest.java
Patch:
@@ -35,7 +35,7 @@ public class ShadowNativeHardwareRendererTest {
 
   @Test
   public void test_hardwareRenderer() {
-    var unused = new HardwareRenderer();
+    new HardwareRenderer();
   }
 
   @Config(maxSdk = R)

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeMaskFilterTest.java
Patch:
@@ -13,6 +13,6 @@
 public class ShadowNativeMaskFilterTest {
   @Test
   public void testConstructor() {
-    var unused = new MaskFilter();
+    new MaskFilter();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePathEffectTest.java
Patch:
@@ -14,6 +14,6 @@ public class ShadowNativePathEffectTest {
 
   @Test
   public void testConstructor() {
-    var unused = new PathEffect();
+    new PathEffect();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeRuntimeShaderTest.java
Patch:
@@ -71,7 +71,7 @@ public void testConstructor() {
   @Config(minSdk = TIRAMISU, maxSdk = U.SDK_INT)
   @Test
   public void testConstructorT() {
-    var unused = new RuntimeShader(SKSL);
+    new RuntimeShader(SKSL);
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeShaderTest.java
Patch:
@@ -22,7 +22,7 @@
 public class ShadowNativeShaderTest {
   @Test
   public void testConstructor() {
-    var unused = new Shader();
+    new Shader();
   }
 
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/drawable/GradientDrawableTest.java
Patch:
@@ -77,9 +77,9 @@ public void setup() {
   public void testConstructor() {
     int[] color = new int[] {1, 2, 3};
 
-    new GradientDrawable();
-    new GradientDrawable(GradientDrawable.Orientation.BL_TR, color);
-    new GradientDrawable(null, null);
+    var unused = new GradientDrawable();
+    unused = new GradientDrawable(GradientDrawable.Orientation.BL_TR, color);
+    unused = new GradientDrawable(null, null);
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererObserverTest.java
Patch:
@@ -22,7 +22,7 @@ public class ShadowNativeHardwareRendererObserverTest {
   public void test_hardwareRenderer() {
     OnFrameMetricsAvailableListener listener = i -> {};
     if (RuntimeEnvironment.getApiLevel() >= S) {
-      new HardwareRendererObserver(listener, new long[0], new Handler(), false);
+      var unused = new HardwareRendererObserver(listener, new long[0], new Handler(), false);
     } else {
       ReflectionHelpers.callConstructor(
           HardwareRendererObserver.class,

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererTest.java
Patch:
@@ -35,7 +35,7 @@ public class ShadowNativeHardwareRendererTest {
 
   @Test
   public void test_hardwareRenderer() {
-    new HardwareRenderer();
+    var unused = new HardwareRenderer();
   }
 
   @Config(maxSdk = R)

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeMaskFilterTest.java
Patch:
@@ -13,6 +13,6 @@
 public class ShadowNativeMaskFilterTest {
   @Test
   public void testConstructor() {
-    new MaskFilter();
+    var unused = new MaskFilter();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePathEffectTest.java
Patch:
@@ -14,6 +14,6 @@ public class ShadowNativePathEffectTest {
 
   @Test
   public void testConstructor() {
-    new PathEffect();
+    var unused = new PathEffect();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeRuntimeShaderTest.java
Patch:
@@ -71,7 +71,7 @@ public void testConstructor() {
   @Config(minSdk = TIRAMISU, maxSdk = U.SDK_INT)
   @Test
   public void testConstructorT() {
-    new RuntimeShader(SKSL);
+    var unused = new RuntimeShader(SKSL);
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeShaderTest.java
Patch:
@@ -22,7 +22,7 @@
 public class ShadowNativeShaderTest {
   @Test
   public void testConstructor() {
-    new Shader();
+    var unused = new Shader();
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -127,7 +127,7 @@ public void run(RunNotifier notifier) {
         Logger.warn(
             "Adding a non-robolectric maintained RunListener"
                 + " (via Plugins/ServiceLoader) can lead to instability, use at your own risk.\n"
-                + "Listener is question : "
+                + "Listener in question : "
                 + listener.getClass().getName());
       }
       notifier.addListener(listener);

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLoader.java
Patch:
@@ -266,7 +266,7 @@ private static String nativeLibraryPath() {
     return String.format("native/%s/%s/%s", osName(), arch(), libraryName());
   }
 
-  private static String libraryName() {
+  protected static String libraryName() {
     if (isAndroidVOrGreater()) {
       // For V and above, hwui's android_graphics_HardwareRenderer.cpp has shared library symbol
       // lookup logic that assumes that Windows library name is "libandroid_runtime.dll".

File: annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -111,7 +111,7 @@ Class<? extends Application> application() default
   /**
    * Qualifiers specifying device configuration for this test, such as "fr-normal-port-hdpi".
    *
-   * <p>If the string is prefixed with '+', the qualifiers that follow are overlayed on any more
+   * <p>If the string is prefixed with '+', the qualifiers that follow are overlaid on any more
    * broadly-scoped qualifiers.
    *
    * @see <a href="http://robolectric.org/device-configuration">Device Configuration</a> for

File: integration_tests/androidx_test/src/sharedTest/java/org/robolectric/integrationtests/axt/EspressoScrollingTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.integration.axt.R;
 
-/** Test file for Espresso with scrolling logics. */
+/** Test file for Espresso with scrolling logic. */
 @RunWith(AndroidJUnit4.class)
 public class EspressoScrollingTest {
   @Rule

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -1079,7 +1079,7 @@ public void getAccountsByTypeForPackage() {
   @Config(minSdk = LOLLIPOP_MR1)
   public void removeAccountExplicitly() {
     assertThat(
-            am.removeAccountExplicitly(new Account("non_existant_account@gmail.com", "gmail.com")))
+            am.removeAccountExplicitly(new Account("non_existent_account@gmail.com", "gmail.com")))
         .isFalse();
     assertThat(am.removeAccountExplicitly(null)).isFalse();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -71,8 +71,8 @@ public class ShadowContextImpl {
 
   /**
    * Returns the handle to a system-level service by name. If the service is not available in
-   * Roboletric, or it is set to unavailable in {@link ShadowServiceManager#setServiceAvailability},
-   * {@code null} will be returned.
+   * Robolectric, or it is set to unavailable in {@link
+   * ShadowServiceManager#setServiceAvailability}, {@code null} will be returned.
    */
   @Implementation
   @Nullable

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaController.java
Patch:
@@ -111,7 +111,7 @@ protected int getRatingType() {
   }
 
   /**
-   * Saves the sessionActivty to control the return value of {@link
+   * Saves the sessionActivity to control the return value of {@link
    * MediaController#getSessionActivity()}.
    */
   public void setSessionActivity(PendingIntent sessionActivity) {

File: integration_tests/libphonenumber/src/test/java/org/robolectric/integrationtests/libphonenumber/ClassloadingTest.java
Patch:
@@ -15,7 +15,7 @@ public class ClassloadingTest {
 
   /** <a href="https://github.com/robolectric/robolectric/issues/2773">Issue</a> */
   @Test
-  public void getResourceAsStream() throws Exception {
+  public void getResourceAsStream() {
     Phonenumber.PhoneNumber phoneNumber = new Phonenumber.PhoneNumber();
     phoneNumber.setCountryCode(7);
     phoneNumber.setNationalNumber(4956360636L);

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integrationtests/mockito/experimental/MockitoMockFinalsTest.java
Patch:
@@ -36,7 +36,7 @@ public void canMockUserId() {
   }
 
   static final class User {
-    final int getId() {
+    int getId() {
       return -1;
     }
   }

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integrationtests/mockito/experimental/MockitoMockJavaFrameworkTest.java
Patch:
@@ -15,7 +15,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class MockitoMockJavaFrameworkTest {
   @Test
-  public void file_getAbsolutePath_isMockable() throws Exception {
+  public void file_getAbsolutePath_isMockable() {
     File file = mock(File.class);
     doReturn("absolute/path").when(file).getAbsolutePath();
     assertThat(file.getAbsolutePath()).isEqualTo("absolute/path");

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/HardwareAcceleratedActivityRenderTest.java
Patch:
@@ -26,7 +26,7 @@
 @Config(minSdk = Q)
 public class HardwareAcceleratedActivityRenderTest {
   @Test
-  public void hardwareAcceleratedActivity_setup() throws Exception {
+  public void hardwareAcceleratedActivity_setup() {
     // Setting up an Activity is a smoke test that exercises much of the HardwareRenderer /
     // RenderNode / RecordingCanvas native code.
     Robolectric.setupActivity(HardwareAcceleratedActivity.class);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeAllocationRegistryTest.java
Patch:
@@ -25,7 +25,7 @@ public final class ShadowNativeAllocationRegistryTest {
   // TODO(hoisie): choose a different free function to test in V and above.
   @Config(maxSdk = U.SDK_INT)
   @Test
-  public void applyFreeFunction_matrix() throws Exception {
+  public void applyFreeFunction_matrix() {
     WeakReference<Matrix> weakMatrix = new WeakReference<>(newMatrix());
     // Invokes 'applyFreeFunction' when the matrix is GC'd.
     GcFinalization.awaitClear(weakMatrix);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeAnimatedImageDrawableTest.java
Patch:
@@ -28,7 +28,7 @@ public void setup() {
   }
 
   @Test
-  public void testInflate() throws Exception {
+  public void testInflate() {
     AnimatedImageDrawable aid = (AnimatedImageDrawable) resources.getDrawable(R.drawable.animated);
     assertThat(aid).isNotNull();
   }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeBlendModeColorFilterTest.java
Patch:
@@ -19,8 +19,6 @@
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = Q) // Added in API 29
 public class ShadowNativeBlendModeColorFilterTest {
-  private static final int TOLERANCE = 5;
-
   private static final int TEST_WIDTH = 90;
   private static final int TEST_HEIGHT = 90;
   private static final int LEFT_X = TEST_WIDTH / 4;

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeColorSpaceTest.java
Patch:
@@ -881,7 +881,7 @@ public void testCctToXyz() {
     }
   }
 
-  private static float[] identityMatrix =
+  private static final float[] identityMatrix =
       new float[] {
         1.0f, 0.0f, 0.0f,
         0.0f, 1.0f, 0.0f,

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeHardwareRendererTest.java
Patch:
@@ -35,7 +35,7 @@ public class ShadowNativeHardwareRendererTest {
 
   @Test
   public void test_hardwareRenderer() {
-    HardwareRenderer unused = new HardwareRenderer();
+    new HardwareRenderer();
   }
 
   @Config(maxSdk = R)
@@ -50,7 +50,7 @@ public void setWideGamut_doesNotCrash() {
   public void choreographer_firstCalled() {
     // In some SDK levels, the Choreographer constructor ends up calling
     // HardwareRenderer.nHackySetRTAnimationsEnabled. Ensure that RNG is loaded if this happens.
-    var unused = Choreographer.getInstance();
+    Choreographer.getInstance();
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeMaskFilterTest.java
Patch:
@@ -13,6 +13,6 @@
 public class ShadowNativeMaskFilterTest {
   @Test
   public void testConstructor() {
-    var unused = new MaskFilter();
+    new MaskFilter();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePathEffectTest.java
Patch:
@@ -14,6 +14,6 @@ public class ShadowNativePathEffectTest {
 
   @Test
   public void testConstructor() {
-    var unused = new PathEffect();
+    new PathEffect();
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePathIteratorTest.java
Patch:
@@ -383,7 +383,7 @@ public void testPointsArrayOffset() {
       PathIterator iterator = mPath.getPathIterator();
       assertEquals(PathIterator.VERB_MOVE, iterator.next(pointsArray, offset));
       assertEquals(PathIterator.VERB_LINE, iterator.next(pointsArray, offset));
-      assertEquals(0f, pointsArray[offset + 0], 0f);
+      assertEquals(0f, pointsArray[offset], 0f);
       assertEquals(0f, pointsArray[offset + 1], 0f);
       assertEquals(100f, pointsArray[offset + 2], 0f);
       assertEquals(200f, pointsArray[offset + 3], 0f);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativePictureTest.java
Patch:
@@ -78,7 +78,7 @@ private void verifyBalance(Picture picture) {
 
     assertEquals(beforeSaveCount, canvas.getSaveCount());
 
-    assertTrue(beforeMatrix.equals(canvas.getMatrix()));
+    assertEquals(beforeMatrix, canvas.getMatrix());
 
     Rect afterClip = new Rect();
 

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeRenderNodeTest.java
Patch:
@@ -254,7 +254,7 @@ public void testCameraDistanceSetGet() {
 
   @Test
   @Config(minSdk = O, maxSdk = P)
-  public void testIsValid() throws Exception {
+  public void testIsValid() {
     Object renderNode = reflector(RenderNodeOpReflector.class).create("name", null);
     RenderNodeOpReflector renderNodeOpReflector =
         reflector(RenderNodeOpReflector.class, renderNode);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeShaderTest.java
Patch:
@@ -22,7 +22,7 @@
 public class ShadowNativeShaderTest {
   @Test
   public void testConstructor() {
-    var unused = new Shader();
+    new Shader();
   }
 
   @Test

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeThreadedRendererTest.java
Patch:
@@ -15,7 +15,6 @@
 public class ShadowNativeThreadedRendererTest {
   @Test
   public void testInitialization() {
-    ThreadedRenderer unused =
-        ThreadedRenderer.create(ApplicationProvider.getApplicationContext(), false, "Name");
+    ThreadedRenderer.create(ApplicationProvider.getApplicationContext(), false, "Name");
   }
 }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/ShadowNativeTypefaceTest.java
Patch:
@@ -183,19 +183,19 @@ public void testCreateFromFileByFileReference() throws IOException {
   }
 
   @Test
-  public void testCreateFromFileWithInvalidPath() throws IOException {
+  public void testCreateFromFileWithInvalidPath() {
     File file = new File("/invalid/path");
     assertThrows(RuntimeException.class, () -> Typeface.createFromFile(file));
   }
 
   @Test
-  public void testCreateFromFileByFileNameNull() throws IOException {
+  public void testCreateFromFileByFileNameNull() {
     // input abnormal params.
     assertThrows(NullPointerException.class, () -> Typeface.createFromFile((String) null));
   }
 
   @Test
-  public void testCreateFromFileByInvalidFileName() throws IOException {
+  public void testCreateFromFileByInvalidFileName() {
     // input abnormal params.
     assertThrows(RuntimeException.class, () -> Typeface.createFromFile("/invalid/path"));
   }

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapcomparers/MSSIMComparer.java
Patch:
@@ -34,7 +34,7 @@ public class MSSIMComparer extends BitmapComparer {
   public static final double CONSTANT_C2 = Math.pow(CONSTANT_L * CONSTANT_K2, 2);
   public static final int WINDOW_SIZE = 10;
 
-  private double threshold;
+  private final double threshold;
 
   public MSSIMComparer(double threshold) {
     this.threshold = threshold;

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapverifiers/ColorCountVerifier.java
Patch:
@@ -19,9 +19,9 @@
 import org.robolectric.shadows.testing.util.CompareUtils;
 
 public class ColorCountVerifier extends BitmapVerifier {
-  private int color;
-  private int count;
-  private int threshold;
+  private final int color;
+  private final int count;
+  private final int threshold;
 
   public ColorCountVerifier(int color, int count, int threshold) {
     this.color = color;

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapverifiers/ColorVerifier.java
Patch:
@@ -19,7 +19,7 @@
 
 /** Checks to see if a bitmap is entirely a single color */
 public class ColorVerifier extends PerPixelBitmapVerifier {
-  @ColorInt private int color;
+  @ColorInt private final int color;
 
   public ColorVerifier(@ColorInt int color) {
     this(color, DEFAULT_THRESHOLD);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapverifiers/PerPixelBitmapVerifier.java
Patch:
@@ -23,14 +23,14 @@
 
 /** This class looks at every pixel in a given bitmap and verifies that it is correct. */
 public abstract class PerPixelBitmapVerifier extends BitmapVerifier {
-  private static final String TAG = "PerPixelBitmapVerifer";
+  private static final String TAG = "PerPixelBitmapVerifier";
   public static final int DEFAULT_THRESHOLD = 48;
 
   // total color difference tolerated without the pixel failing
-  private int colorTolerance;
+  private final int colorTolerance;
 
   // portion of bitmap allowed to fail pixel check
-  private float spatialTolerance;
+  private final float spatialTolerance;
 
   public PerPixelBitmapVerifier() {
     this(DEFAULT_THRESHOLD, 0);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapverifiers/RectVerifier.java
Patch:
@@ -19,9 +19,9 @@
 
 /** Tests to see if there is rectangle of a certain color, with a background given */
 public class RectVerifier extends PerPixelBitmapVerifier {
-  private int outerColor;
-  private int innerColor;
-  private Rect innerRect;
+  private final int outerColor;
+  private final int innerColor;
+  private final Rect innerRect;
 
   public RectVerifier(int outerColor, int innerColor, Rect innerRect) {
     this(outerColor, innerColor, innerRect, DEFAULT_THRESHOLD);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/shadows/testing/bitmapverifiers/RegionVerifier.java
Patch:
@@ -36,7 +36,7 @@ private static class SubRegionVerifiers {
     }
   }
 
-  private List<SubRegionVerifiers> regionVerifiers = new ArrayList<>();
+  private final List<SubRegionVerifiers> regionVerifiers = new ArrayList<>();
 
   @Override
   public boolean verify(int[] bitmap, int offset, int stride, int width, int height) {
@@ -47,9 +47,9 @@ public boolean verify(int[] bitmap, int offset, int stride, int width, int heigh
         Rect area = subRegionVerifier.region.getBounds();
         isVerified &= verifySubRect(bitmap, offset, stride, subRegionVerifier.verifier, area);
       } else {
-        RegionIterator iter = new RegionIterator(subRegionVerifier.region);
+        RegionIterator iterator = new RegionIterator(subRegionVerifier.region);
         Rect area = new Rect();
-        while (iter.next(area)) {
+        while (iterator.next(area)) {
           isVerified &= verifySubRect(bitmap, offset, stride, subRegionVerifier.verifier, area);
         }
       }

File: robolectric/src/main/java/org/robolectric/android/internal/RoboMonitoringInstrumentation.java
Patch:
@@ -427,7 +427,7 @@ private void updateConfiguration(
     for (ActivityController<?> controller : controllers) {
       if (createdActivities.contains(controller)) {
         Activity activity = controller.get();
-        if (Boolean.getBoolean("robolectric.configurationChangeFix")) {
+        if (System.getProperty("robolectric.configurationChangeFix", "true").equals("true")) {
           controller.configurationChange(newConfig, newMetrics);
         } else {
           controller.configurationChange(newConfig, newMetrics, changedConfig);

File: shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -232,7 +232,7 @@ private static void updateConfiguration(
       Configuration configuration, DisplayMetrics displayMetrics) {
     // Update the resources last so that listeners will have a consistent environment.
     if (ResourcesManager.getInstance().getConfiguration() != null) {
-      if (Boolean.getBoolean("robolectric.configurationChangeFix")) {
+      if (System.getProperty("robolectric.configurationChangeFix", "true").equals("true")) {
         if (getApiLevel() <= Q) {
           reflector(ResourcesManagerReflector.class, ResourcesManager.getInstance())
               .applyConfigurationToResourcesLocked(configuration, null);

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -404,7 +404,7 @@ public ActivityController<T> configurationChange(
       Configuration newConfiguration, DisplayMetrics newMetrics) {
     ActivityReflector activityReflector = reflector(ActivityReflector.class, component);
     Configuration currentConfig =
-        Boolean.getBoolean("robolectric.configurationChangeFix")
+        System.getProperty("robolectric.configurationChangeFix", "true").equals("true")
             ? activityReflector.getCurrentConfig()
             : component.getResources().getConfiguration();
     return configurationChange(newConfiguration, newMetrics, currentConfig.diff(newConfiguration));

File: resources/src/main/java/org/robolectric/res/Plural.java
Patch:
@@ -17,9 +17,6 @@ public class Plural {
     } else if ("two".equals(quantity)) {
       num = 2;
       usedInEnglish = false;
-    } else if ("other".equals(quantity)) {
-      num = -1;
-      usedInEnglish = true;
     } else {
       num = -1;
       usedInEnglish = true;

File: resources/src/main/java/org/robolectric/res/android/ResTableTheme.java
Patch:
@@ -286,6 +286,7 @@ public int applyStyle(int resID, boolean force) {
 
   private void dumpToLog() {}
 
+  @SuppressWarnings("DuplicateBranches") // The 'else' clause contains TODOs to remove duplication
   public int setTo(ResTableTheme other) {
     styles.clear();
     styles.addAll(other.styles);

File: integration_tests/room/src/test/java/org/robolectric/integrationtests/room/UserDatabaseTest.java
Patch:
@@ -12,7 +12,7 @@
 public final class UserDatabaseTest {
 
   /**
-   * There was an issue using Room with {@link SQLiteMode.Mode.LEGACY}. The {@link
+   * There was an issue using Room with {@link SQLiteMode.Mode#LEGACY}. The {@link
    * android.database.sqlite.SQLiteException} exceptions were wrapped in a way that was not
    * compatible with Room.
    */

File: integration_tests/security-providers/src/test/java/org/robolectric/integrationtests/securityproviders/SecurityProvidersTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.integrationtests.securityproviders;
 
+import java.net.URI;
 import java.net.URL;
 import java.security.Provider;
 import java.security.Security;
@@ -22,7 +23,7 @@ public class SecurityProvidersTest {
 
   @Test
   public void jsseProvider_isFunctioning() throws Exception {
-    URL url = new URL("https://www.google.com");
+    URL url = new URI("https://www.google.com").toURL();
     url.openConnection().getInputStream();
   }
 
@@ -33,6 +34,6 @@ public void conscryptProvider_isSupported() throws Exception {
     }
     OkHttpClient client = new OkHttpClient.Builder().build();
     Request request = new Request.Builder().url("https://www.google.com").build();
-    client.newCall(request).execute();
+    client.newCall(request).execute().close();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboMenuItem.java
Patch:
@@ -34,7 +34,7 @@ public class RoboMenuItem implements MenuItem {
   @Nullable private View actionView;
   @Nullable private OnActionExpandListener actionExpandListener;
   private int order;
-  private Context context;
+  @Nonnull private final Context context;
   private char numericChar;
   private char alphaChar;
   @Nullable private ActionProvider actionProvider;
@@ -43,11 +43,12 @@ public RoboMenuItem() {
     this(RuntimeEnvironment.getApplication());
   }
 
-  public RoboMenuItem(Context context) {
+  public RoboMenuItem(@Nonnull Context context) {
     this.context = context;
   }
 
   public RoboMenuItem(int itemId) {
+    this();
     this.itemId = itemId;
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextUtilsTest.java
Patch:
@@ -87,8 +87,8 @@ public void testEllipsize() {
         .isEqualTo("");
     assertThat(TextUtils.ellipsize("apples", p, -1, TextUtils.TruncateAt.END).toString())
         .isEqualTo("");
-    assertThat(TextUtils.ellipsize("apples", p, 4, TextUtils.TruncateAt.END).toString())
-        .isEqualTo("app…");
+    assertThat(TextUtils.ellipsize("apples", p, 3, TextUtils.TruncateAt.END).toString())
+        .isEqualTo("app");
     assertThat(TextUtils.ellipsize("apples", p, 100, TextUtils.TruncateAt.END).toString())
         .isEqualTo("apples");
     assertThat(TextUtils.ellipsize("", p, 100, TextUtils.TruncateAt.END).toString()).isEqualTo("");

File: shadows/framework/src/main/java/org/robolectric/shadows/HardwareRenderingScreenshot.java
Patch:
@@ -42,8 +42,7 @@ private HardwareRenderingScreenshot() {}
 
   /**
    * Indicates whether {@link #takeScreenshot(View, Bitmap)} can run, by validating the API level,
-   * the presence of the {@link #USE_HARDWARE_RENDERER_NATIVE_ENV} property, and the {@link
-   * GraphicsMode}.
+   * the value of the {@link #PIXEL_COPY_RENDER_MODE} property, and the {@link GraphicsMode}.
    */
   static boolean canTakeScreenshot(View view) {
     return RuntimeEnvironment.getApiLevel() >= P

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/ColorSpaceRgbNatives.java
Patch:
@@ -17,7 +17,7 @@
 package org.robolectric.nativeruntime;
 
 /**
- * Native methods for BitmapFactory JNI registration.
+ * Native methods for ColorSpace JNI registration.
  *
  * <p>Native method signatures are derived from
  * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r1:frameworks/base/graphics/java/android/graphics/ColorSpace.java

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLoader.java
Patch:
@@ -114,7 +114,7 @@ public class DefaultNativeRuntimeLoader implements NativeRuntimeLoader {
           });
 
   /**
-   * {@link #DEFERRED_STATIC_INITIALIZERS} that invoke their own native methods in static
+   * {@code DEFERRED_STATIC_INITIALIZERS} that invoke their own native methods in static
    * initializers. Unlike libcore, registering JNI on the JVM causes static initialization to be
    * performed on the class. Because of this, static initializers cannot invoke the native methods
    * of the class under registration. Executing these static initializers must be deferred until
@@ -209,7 +209,7 @@ private void maybeCopyIcuData(TempDirectory tempDirectory) throws IOException {
    * graphics.
    */
   private void maybeCopyFonts(TempDirectory tempDirectory) throws IOException {
-    URI fontsUri = null;
+    URI fontsUri;
     try {
       fontsUri = Resources.getResource("fonts/").toURI();
     } catch (IllegalArgumentException | URISyntaxException e) {

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/HardwareRendererNatives.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.FileDescriptor;
 
 /**
- * Native methods for {@link HardwareRenderer} JNI registration.
+ * Native methods for {@link android.graphics.HardwareRenderer} JNI registration.
  *
  * <p>Native method signatures are derived from
  * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r1:frameworks/base/graphics/java/android/graphics/HardwareRenderer.java

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/HardwareRendererObserverNatives.java
Patch:
@@ -17,7 +17,7 @@
 package org.robolectric.nativeruntime;
 
 /**
- * Native methods for {@link ImageDecoder} JNI registration.
+ * Native methods for {@link android.graphics.HardwareRendererObserver} JNI registration.
  *
  * <p>Native method signatures are derived from
  * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r1:frameworks/base/graphics/java/android/graphics/HardwareRendererObserver.java

File: nativeruntime/src/test/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLoaderTest.java
Patch:
@@ -25,7 +25,8 @@ public void setUp() {
   }
 
   @Test
-  public void concurrentLoad() throws Exception {
+  public void concurrentLoad() {
+    //noinspection resource
     executor.execute(() -> SQLiteDatabase.create(null));
     CursorWindow cursorWindow = new CursorWindow("sdfsdf");
     cursorWindow.close();

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -234,7 +234,6 @@ public ActivityController<T> visible() {
     // root can be null if activity does not have content attached, or if looper is paused.
     // this is unusual but leave the check here for legacy compatibility
     if (root != null) {
-      callDispatchResized(root);
       shadowMainLooper.idleIfPaused();
     }
     return this;

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -457,7 +457,7 @@ protected Class<?>[] getExtraShadows(FrameworkMethod method) {
     List<Class<?>> shadowClasses = new ArrayList<>();
     addShadows(shadowClasses, getTestClass().getJavaClass().getAnnotation(SandboxConfig.class));
     addShadows(shadowClasses, method.getAnnotation(SandboxConfig.class));
-    return shadowClasses.toArray(new Class[shadowClasses.size()]);
+    return shadowClasses.toArray(new Class[0]);
   }
 
   private void addShadows(List<Class<?>> shadowClasses, SandboxConfig annotation) {

File: robolectric/src/main/java/org/robolectric/RobolectricTestParameterInjector.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.stream.IntStream;
+import javax.annotation.Nonnull;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.Statement;
@@ -52,6 +53,7 @@ protected void validateTestMethods(List<Throwable> errors) {
   }
 
   @Override
+  @Nonnull
   protected InstrumentationConfiguration createClassLoaderConfig(FrameworkMethod method) {
     return new InstrumentationConfiguration.Builder(super.createClassLoaderConfig(method))
         .doNotAcquireClass(DelegateTestRunner.class)

File: robolectric/src/test/java/org/robolectric/SingleSdkRobolectricTestRunner.java
Patch:
@@ -34,6 +34,7 @@ public SingleSdkRobolectricTestRunner(Class<?> testClass, Injector injector)
   }
 
   @Override
+  @Nonnull
   protected AndroidSandbox getSandbox(FrameworkMethod method) {
     AndroidSandbox sandbox = super.getSandbox(method);
     latestSandbox = sandbox;

File: robolectric/src/test/java/org/robolectric/android/ShadowingTest.java
Patch:
@@ -1,14 +1,14 @@
 package org.robolectric.android;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 
 import android.util.Log;
 import android.view.View;
 import android.widget.Toast;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.common.testing.EqualsTester;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -34,6 +34,6 @@ public void shouldDelegateToObjectHashCodeIfShadowHasNone() throws Exception {
   @Test
   public void shouldDelegateToObjectEqualsIfShadowHasNone() throws Exception {
     View view = new View(ApplicationProvider.getApplicationContext());
-    assertEquals(view, view);
+    new EqualsTester().addEqualityGroup(view).testEquals();
   }
 }

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -76,7 +76,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(Sv2.SDK_INT, new DefaultSdk(Sv2.SDK_INT, "12.1", "8229987", "REL", 9));
     knownSdks.put(T.SDK_INT, new DefaultSdk(T.SDK_INT, "13", "9030017", "Tiramisu", 9));
     knownSdks.put(U.SDK_INT, new DefaultSdk(U.SDK_INT, "14", "10818077", "REL", 17));
-    knownSdks.put(V.SDK_INT, new DefaultSdk(V.SDK_INT, "15", "12543294", "REL", 17));
+    knownSdks.put(V.SDK_INT, new DefaultSdk(V.SDK_INT, "15", "12650502", "REL", 17));
   }
 
   @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -306,7 +306,8 @@ public void getSourceNodeId_notZero() {
   @Test
   public void testConstructor() {
     AccessibilityNodeInfo node = AccessibilityNodeInfo.obtain();
-    assertThat(node.getWindowId()).isEqualTo(AccessibilityWindowInfo.UNDEFINED_WINDOW_ID);
+    assertThat(node.getWindowId())
+        .isEqualTo(RuntimeEnvironment.getApiLevel() >= O ? -1 : Integer.MAX_VALUE);
     if (RuntimeEnvironment.getApiLevel() >= O) {
       // This constant does not exists pre-O.
       assertThat(node.getSourceNodeId()).isEqualTo(AccessibilityNodeInfo.UNDEFINED_NODE_ID);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -512,10 +512,10 @@ protected AccessibilityWindowInfo getWindow() {
   /** Returns the id of the window from which the info comes. */
   @Implementation
   protected int getWindowId() {
-    if (useRealAni()) {
+    if (useRealAni() || accessibilityWindowInfo == null) {
       return accessibilityNodeInfoReflector.getWindowId();
     }
-    return (accessibilityWindowInfo == null) ? -1 : accessibilityWindowInfo.getId();
+    return accessibilityWindowInfo.getId();
   }
 
   public void setAccessibilityWindowInfo(AccessibilityWindowInfo info) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -249,7 +249,7 @@ void send(
             (Activity) null,
             intentToSend,
             requestCode,
-            (Bundle) null);
+            options);
       }
     } else if (isBroadcast()) {
       for (Intent intentToSend : intentsToSend) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextUtilsTest.java
Patch:
@@ -87,8 +87,8 @@ public void testEllipsize() {
         .isEqualTo("");
     assertThat(TextUtils.ellipsize("apples", p, -1, TextUtils.TruncateAt.END).toString())
         .isEqualTo("");
-    assertThat(TextUtils.ellipsize("apples", p, 3, TextUtils.TruncateAt.END).toString())
-        .isEqualTo("app");
+    assertThat(TextUtils.ellipsize("apples", p, 4, TextUtils.TruncateAt.END).toString())
+        .isEqualTo("app…");
     assertThat(TextUtils.ellipsize("apples", p, 100, TextUtils.TruncateAt.END).toString())
         .isEqualTo("apples");
     assertThat(TextUtils.ellipsize("", p, 100, TextUtils.TruncateAt.END).toString()).isEqualTo("");

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithMenuTest.java
Patch:
@@ -5,21 +5,18 @@
 import static androidx.test.espresso.action.ViewActions.click;
 import static androidx.test.espresso.matcher.ViewMatchers.withText;
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.annotation.TextLayoutMode.Mode;
 
 /** Test Espresso on Robolectric interoperability for menus. */
 @RunWith(AndroidJUnit4.class)
 @TextLayoutMode(Mode.REALISTIC)
-@LooperMode(PAUSED)
 public class EspressoWithMenuTest {
 
   @Test

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithToolbarMenuTest.java
Patch:
@@ -5,22 +5,19 @@
 import static androidx.test.espresso.action.ViewActions.click;
 import static androidx.test.espresso.matcher.ViewMatchers.withText;
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.annotation.TextLayoutMode.Mode;
 import org.robolectric.shadows.ShadowViewConfiguration;
 
 /** Test Espresso on Robolectric interoperability for toolbar menus. */
 @RunWith(AndroidJUnit4.class)
 @TextLayoutMode(Mode.REALISTIC)
-@LooperMode(PAUSED)
 public class EspressoWithToolbarMenuTest {
   @Test
   public void appCompatToolbarMenuClick() {

File: integration_tests/ctesque/src/sharedTest/java/android/app/InstrumentationTest.java
Patch:
@@ -3,7 +3,6 @@
 import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.os.Handler;
 import android.os.Looper;
@@ -12,14 +11,12 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /**
  * Tests to verify android.app.Instrumentation APIs behave consistently between Robolectric and
  * device.
  */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public final class InstrumentationTest {
 
   /**

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextWrapperTest.java
Patch:
@@ -11,7 +11,6 @@
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
 import android.app.Activity;
@@ -242,7 +241,6 @@ public void sendBroadcast_shouldSendIntentUsingHandlerIfOneIsProvided_legacy() {
   }
 
   @Test
-  @LooperMode(PAUSED)
   public void sendBroadcast_shouldSendIntentUsingHandlerIfOneIsProvided()
       throws InterruptedException {
     HandlerThread handlerThread = new HandlerThread("test");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationManagerTest.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.app.Activity;
 import android.app.AutomaticZenRule;
@@ -36,10 +35,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.LooperMode;
 
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public class ShadowNotificationManagerTest {
   private NotificationManager notificationManager;
   private Notification notification1 = new Notification();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedAsyncTaskTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
 import android.os.AsyncTask;
@@ -22,12 +21,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.android.util.concurrent.PausedExecutorService;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.util.Join;
 
 /** Unit tests for {@link ShadowPausedAsyncTask}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public class ShadowPausedAsyncTaskTest {
   private List<String> transcript;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedMessageQueueTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.os.Handler;
 import android.os.Looper;
@@ -15,13 +14,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public class ShadowPausedMessageQueueTest {
   private MessageQueue queue;
   private ShadowPausedMessageQueue shadowQueue;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedSystemClockTest.java
Patch:
@@ -6,7 +6,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.os.SystemClock;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -20,11 +19,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.internal.bytecode.RobolectricInternals;
 
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public class ShadowPausedSystemClockTest {
 
   @Test

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.robolectric.versioning.AndroidVersions.Sv2;
 import org.robolectric.versioning.AndroidVersions.T;
 import org.robolectric.versioning.AndroidVersions.U;
+import org.robolectric.versioning.AndroidVersions.V;
 
 /**
  * Robolectric's default {@link SdkProvider}.
@@ -75,6 +76,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(Sv2.SDK_INT, new DefaultSdk(Sv2.SDK_INT, "12.1", "8229987", "REL", 9));
     knownSdks.put(T.SDK_INT, new DefaultSdk(T.SDK_INT, "13", "9030017", "Tiramisu", 9));
     knownSdks.put(U.SDK_INT, new DefaultSdk(U.SDK_INT, "14", "10818077", "REL", 17));
+    knownSdks.put(V.SDK_INT, new DefaultSdk(V.SDK_INT, "15", "12543294", "REL", 17));
   }
 
   @Override

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/PathIteratorNatives.java
Patch:
@@ -14,6 +14,8 @@ public final class PathIteratorNatives {
 
   public static native int nNext(long nativeIterator, long pointsAddress);
 
+  public static native int nNextHost(long nativeIterator, float[] pointsArray);
+
   public static native int nPeek(long nativeIterator);
 
   private PathIteratorNatives() {}

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/Helpers.java
Patch:
@@ -29,7 +29,7 @@ public static TypePredicate isCastableTo(String type) {
   public static boolean isInShadowClass(TreePath path, VisitorState state) {
     Tree leaf = path.getLeaf();
     JCClassDecl classDecl =
-        JCClassDecl.class.isInstance(leaf)
+        leaf instanceof JCClassDecl
             ? (JCClassDecl) leaf
             : findEnclosingNode(state.getPath(), JCClassDecl.class);
 

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -59,7 +59,7 @@ public final class RobolectricShadow extends BugChecker implements ClassTreeMatc
   private static final Matcher<MethodTree> implementationMethodMatcher =
       hasAnnotation(Implementation.class);
 
-  private boolean doScanJavadoc = false;
+  private final boolean doScanJavadoc = false;
 
   @Override
   public Description matchClass(ClassTree classTree, VisitorState state) {

File: errorprone/src/test/java/xxx/XShadowDrawable.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.drawable.Drawable;
 import org.robolectric.annotation.Implements;
 
-/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}. */
+/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricShadow}. */
 @Implements(Drawable.class)
 public class XShadowDrawable {
   public int getCreatedFromResId() {

File: errorprone/src/test/java/xxx/XShadowLinearLayout.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.LinearLayout;
 import org.robolectric.annotation.Implements;
 
-/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}. */
+/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricShadow}. */
 @Implements(LinearLayout.class)
 public class XShadowLinearLayout extends XShadowViewGroup {
   public int getGravity() {

File: errorprone/src/test/java/xxx/XShadowViewGroup.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}. */
+/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricShadow}. */
 @Implements(ViewGroup.class)
 public class XShadowViewGroup {
   @Implementation

File: errorprone/src/test/java/xxx/XShadows.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Fake {@link org.robolectric.internal.ShadowProvider} for testing {@link
- * org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}.
+ * org.robolectric.errorprone.bugpatterns.RobolectricShadow}.
  */
 public class XShadows implements org.robolectric.internal.ShadowProvider {
   public static XShadowAlertDialog shadowOf(AlertDialog actual) {

File: annotations/src/main/java/org/robolectric/annotation/experimental/LazyApplication.java
Patch:
@@ -9,10 +9,10 @@
  * A {@link org.robolectric.pluginapi.config.Configurer} annotation that dictates whether or not
  * Robolectric should lazily instantiate the Application under test.
  *
- * <p>In particular, any test with {@link LazyLoad.ON} that does not need the Application will not
+ * <p>In particular, any test with {@link LazyLoad#ON} that does not need the Application will not
  * load it (and recoup the associated cost)
  *
- * <p>NOTE: This feature is currently still experimental, so any users of {@link LazyLoad.ON} do so
+ * <p>NOTE: This feature is currently still experimental, so any users of {@link LazyLoad#ON} do so
  * at their own risk
  */
 @Retention(RetentionPolicy.RUNTIME)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -239,8 +239,8 @@ protected NetworkInfo getActiveNetworkInfo() {
    */
   @Implementation(minSdk = M)
   protected Network getActiveNetwork() {
-    if (defaultNetworkActive) {
-      return netIdToNetwork.get(getActiveNetworkInfo().getType());
+    if (defaultNetworkActive && activeNetworkInfo != null) {
+      return netIdToNetwork.get(activeNetworkInfo.getType());
     }
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityManager.java
Patch:
@@ -63,7 +63,9 @@ public static void reset() {
     sentAccessibilityEvents.clear();
     enabled = false;
     installedAccessibilityServiceList.clear();
-    enabledAccessibilityServiceList.clear();
+    // enabledAccessibilityServiceList may be null, so set it to a new list.
+    // TODO(hoisie): change this to clear when null enabledAccessibilityServiceList is not allowed.
+    enabledAccessibilityServiceList = new ArrayList<>();
     accessibilityServiceList.clear();
     onAccessibilityStateChangeListeners.clear();
     touchExplorationEnabled = false;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -696,7 +696,7 @@ public void getProfiles_addedProfile_containsProfile() {
     shadowOf(userManager)
         .addProfile(TEST_USER_HANDLE, PROFILE_USER_HANDLE, PROFILE_USER_NAME, PROFILE_USER_FLAGS);
 
-    // getProfiles(userId) include user itself and asssociated profiles.
+    // getProfiles(userId) include user itself and associated profiles.
     assertThat(userManager.getProfiles(TEST_USER_HANDLE).get(0).id).isEqualTo(TEST_USER_HANDLE);
     assertThat(userManager.getProfiles(TEST_USER_HANDLE).get(1).id).isEqualTo(PROFILE_USER_HANDLE);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConnectivityManagerTest.java
Patch:
@@ -832,7 +832,6 @@ public void setDefaultNetworkActive_isActiveFalse_triggersOnLostInCallbacks() {
   @Test
   public void defaults_afterReset() {
     ShadowConnectivityManager.reset();
-    connectivityManager.getAllNetworkInfo();
     assertThat(connectivityManager.getAllNetworkInfo()).hasLength(2);
     assertThat(connectivityManager.getAllNetworks()).hasLength(2);
     assertThat(connectivityManager.isDefaultNetworkActive()).isTrue();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNotificationManager.java
Patch:
@@ -60,7 +60,7 @@ public class ShadowNotificationManager {
   private static Policy notificationPolicy;
   private static Policy consolidatedNotificationPolicy;
   private static String notificationDelegate;
-  private static int importance;
+  private static int importance = NotificationManager.IMPORTANCE_NONE;
 
   @Resetter
   public static void reset() {
@@ -78,7 +78,7 @@ public static void reset() {
     notificationPolicy = null;
     notificationDelegate = null;
     consolidatedNotificationPolicy = null;
-    importance = NotificationManager.IMPORTANCE_DEFAULT;
+    importance = NotificationManager.IMPORTANCE_NONE;
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppOpsManager.java
Patch:
@@ -76,7 +76,7 @@ public class ShadowAppOpsManager {
 
   @RealObject private AppOpsManager realObject;
 
-  private static boolean staticallyInitialized = false;
+  private static boolean staticallyInitialized;
 
   // Recorded operations, keyed by (uid, packageName)
   private static final Multimap<Key, Integer> storedOps = HashMultimap.create();
@@ -695,7 +695,6 @@ public static void reset() {
     if (RuntimeEnvironment.getApiLevel() >= R && staticallyInitialized) {
       ReflectionHelpers.setStaticField(AppOpsManager.class, "sOnOpNotedCallback", null);
     }
-    staticallyInitialized = false;
     storedOps.clear();
     appModeMap.clear();
     longRunningOp.clear();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowChoreographer.java
Patch:
@@ -10,7 +10,6 @@
 import android.os.Looper;
 import android.view.Choreographer;
 import android.view.Choreographer.FrameCallback;
-import android.view.Choreographer.FrameData;
 import android.view.DisplayEventReceiver;
 import java.time.Duration;
 import org.robolectric.RuntimeEnvironment;
@@ -256,7 +255,7 @@ void doFrame(
     void __constructor__(Looper looper, int vsyncSource);
 
     @Accessor("mFrameData")
-    FrameData getFrameData();
+    /*android.view.Choreographer$FrameData*/ Object getFrameData();
 
     @Accessor("mLastFrameIntervalNanos")
     void setLastFrameIntervalNanos(long val);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -53,7 +53,7 @@ public void setPaused_isPaused_runsWhenClockAdvanced() {
     ShadowChoreographer.setPaused(true);
     ShadowChoreographer.setFrameDelay(Duration.ofMillis(15));
     long startTime = ShadowSystem.nanoTime();
-    AtomicLong frameTimeNanos = new AtomicLong();
+    AtomicLong frameTimeNanos = new AtomicLong(-1);
 
     Choreographer.getInstance().postFrameCallback(frameTimeNanos::set);
     ShadowSystemClock.advanceBy(Duration.ofMillis(15));

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedLooper.java
Patch:
@@ -303,11 +303,11 @@ public static synchronized void resetLoopers() {
     }
 
     createMainThreadAndLooperIfNotAlive();
+    ShadowPausedChoreographer.resetChoreographers();
     for (Looper looper : getLoopers()) {
       ShadowPausedLooper shadowPausedLooper = Shadow.extract(looper);
       shadowPausedLooper.resetLooperToInitialState();
     }
-    ShadowPausedChoreographer.clearLoopers();
   }
 
   private static final Object instrumentationTestMainThreadLock = new Object();
@@ -392,7 +392,6 @@ synchronized void resetLooperToInitialState() {
           && !(realLooper == Looper.getMainLooper() && looperMode != Mode.INSTRUMENTATION_TEST)) {
         unPause();
       }
-      ShadowPausedChoreographer.reset(realLooper);
     }
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -385,8 +385,8 @@ public void setBackgroundRestricted(boolean isBackgroundRestricted) {
    * {@code packageName} is ignored.
    */
   @Implementation(minSdk = R)
-  protected @ClassName("java.util.List<android.app.ApplicationExitInfo>") Object
-      getHistoricalProcessExitReasons(String packageName, int pid, int maxNum) {
+  protected List</*android.app.ApplicationExitInfo*/ ?> getHistoricalProcessExitReasons(
+      String packageName, int pid, int maxNum) {
     return appExitInfoList.stream()
         .filter(
             appExitInfo ->

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -470,8 +470,8 @@ protected void unregisterAudioPlaybackCallback(AudioManager.AudioPlaybackCallbac
    */
   @Implementation(minSdk = R)
   @NonNull
-  protected @ClassName("java.util.List<android.media.AudioDeviceAttributes>") List<Object>
-      getDevicesForAttributes(@NonNull AudioAttributes attributes) {
+  protected List</*android.media.AudioDeviceAttributes*/ ?> getDevicesForAttributes(
+      @NonNull AudioAttributes attributes) {
     ImmutableList<Object> devices = devicesForAttributes.get(attributes);
     return devices == null ? defaultDevicesForAttributes : devices;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothAdapter.java
Patch:
@@ -48,7 +48,6 @@
 import java.util.concurrent.ConcurrentMap;
 import javax.annotation.Nullable;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.ClassName;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
@@ -414,7 +413,7 @@ protected int getDiscoverableTimeout() {
 
   /** Return value changed from {@code int} to {@link Duration} starting in T. */
   @Implementation(minSdk = TIRAMISU, methodName = "getDiscoverableTimeout")
-  protected @ClassName("java.time.Duration") Object getDiscoverableTimeoutT() {
+  protected Duration getDiscoverableTimeoutT() {
     return discoverableTimeout;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyTypeface.java
Patch:
@@ -133,7 +133,7 @@ protected static Typeface createFromResources(
       @ClassName("android.content.res.FontResourcesParser$FamilyResourceEntry") Object entry,
       AssetManager mgr,
       String path) {
-    return createUnderlyingTypeface((String) path, Typeface.NORMAL);
+    return createUnderlyingTypeface(path, Typeface.NORMAL);
   }
 
   @Implementation
@@ -194,7 +194,7 @@ protected static Typeface createFromFamiliesWithDefault(
       String fallbackName,
       int weight,
       int italic) {
-    return createUnderlyingTypeface((String) fallbackName, Typeface.NORMAL);
+    return createUnderlyingTypeface(fallbackName, Typeface.NORMAL);
   }
 
   @Implementation(minSdk = P, maxSdk = P)
@@ -214,7 +214,7 @@ protected static void init() {}
   @Implementation(minSdk = Q, maxSdk = R)
   protected static void initSystemDefaultTypefaces(
       Map<String, Typeface> systemFontMap,
-      @ClassName("java.util.Map<String, android.graphics.FontFamily[]>") Object fallbacks,
+      Map<String, /*android.graphics.FontFamily[]*/ ?> fallbacks,
       @ClassName("android.text.FontConfig$Alias[]") Object aliases) {}
 
   @Resetter

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPixelCopy.java
Patch:
@@ -118,7 +118,7 @@ protected static void request(
   protected static void request(
       @ClassName("android.view.PixelCopy$Request") Object requestObject,
       Executor callbackExecutor,
-      @ClassName("java.util.function.Consumer<android.view.PixelCopy$Result>") Object listener) {
+      Consumer</*android.view.PixelCopy$Result*/ ?> listener) {
     PixelCopy.Request request = (PixelCopy.Request) requestObject;
     RequestReflector requestReflector = reflector(RequestReflector.class, request);
     OnPixelCopyFinishedListener legacyListener =

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -648,8 +648,8 @@ public void setUiccCardsInfo(/*List<UiccCardInfo>*/ Object uiccCardsInfo) {
   /** Returns the UICC cards information set by {@link #setUiccCardsInfo}. */
   @Implementation(minSdk = Q)
   @HiddenApi
-  protected @ClassName("java.util.List<android.telephony.UiccCardInfo>") Object getUiccCardsInfo() {
-    return uiccCardsInfo;
+  protected List</*android.telephony.UiccCardInfo*/ ?> getUiccCardsInfo() {
+    return (List<?>) uiccCardsInfo;
   }
 
   /** Clears {@code slotIndex} to state mapping and resets to default state. */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsageStatsManager.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.NavigableMap;
 import java.util.concurrent.TimeUnit;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.ClassName;
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -589,8 +588,8 @@ public void setUsageSource(@UsageSource int usageSource) {
 
   @SuppressWarnings("unchecked")
   @Implementation(minSdk = TIRAMISU)
-  protected @ClassName("java.util.List<android.app.usage.BroadcastResponseStats>") Object
-      queryBroadcastResponseStats(@Nullable String packageName, long id) {
+  protected List</*android.app.usage.BroadcastResponseStats*/ ?> queryBroadcastResponseStats(
+      @Nullable String packageName, long id) {
     List<BroadcastResponseStats> result = new ArrayList<>();
     for (Map.Entry<String, Map<Long, Object /*BroadcastResponseStats*/>> entry :
         appBroadcastStats.entrySet()) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbManager.java
Patch:
@@ -207,7 +207,7 @@ public void removeUsbDevice(UsbDevice usbDevice) {
 
   @Implementation(minSdk = Q, methodName = "getPorts")
   @HiddenApi
-  protected @ClassName("java.util.List<android.hardware.usb.UsbPort>") Object getPortsFromQ() {
+  protected List</*android.hardware.usb.UsbPort*/ ?> getPortsFromQ() {
     return new ArrayList<>(usbPortStatuses.keySet());
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiManager.java
Patch:
@@ -870,7 +870,7 @@ public void networksFoundFromPnoScan(List<ScanResult> scanResults) {
 
   @Implementation(minSdk = TIRAMISU)
   protected void setExternalPnoScanRequest(
-      @ClassName("java.util.List") Object ssids,
+      List</*android.net.wifi.WifiSsid*/ ?> ssids,
       int[] frequencies,
       Executor executor,
       @ClassName("android.net.wifi.WifiManager$PnoScanResultsCallback") Object callback) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -53,7 +53,7 @@ public void shouldRecordSoftInputVisibility() {
   }
 
   @Test
-  public void hideSoftInputFromWindow_shouldNotifiyResult_hidden() {
+  public void hideSoftInputFromWindow_shouldNotifyResult_hidden() {
     manager.showSoftInput(null, 0);
 
     CapturingResultReceiver resultReceiver =

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -741,7 +741,7 @@ private void testStates(
     // to play it safe but reasonable, by looking at whether the PREPARED or
     // INITIALIZED are allowed (ie, the two states that PREPARING
     // sites between). Only if both these states are allowed is
-    // PREPARING allowed too, if either PREPARED or INITALIZED is
+    // PREPARING allowed too, if either PREPARED or INITIALIZED is
     // disallowed then so is PREPARING.
     if (invalid.contains(PREPARED) || invalid.contains(INITIALIZED)) {
       invalid.add(PREPARING);
@@ -908,7 +908,7 @@ public void testSeekBeforeStart() {
       mediaPlayer.seekTo(-1);
       shadowMediaPlayer.invokeSeekCompleteListener();
 
-      assertWithMessage("Current postion while " + state)
+      assertWithMessage("Current position while " + state)
           .that(mediaPlayer.getCurrentPosition())
           .isEqualTo(0);
       assertWithMessage("Final state " + state).that(shadowMediaPlayer.getState()).isEqualTo(state);
@@ -926,7 +926,7 @@ public void testSeekPastEnd() {
       mediaPlayer.seekTo(1001);
       shadowMediaPlayer.invokeSeekCompleteListener();
 
-      assertWithMessage("Current postion while " + state)
+      assertWithMessage("Current position while " + state)
           .that(mediaPlayer.getCurrentPosition())
           .isEqualTo(1000);
       assertWithMessage("Final state " + state).that(shadowMediaPlayer.getState()).isEqualTo(state);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -590,12 +590,12 @@ public void wallpaperManager_activityContextEnabled_retrievesSameWallpaper() {
     Activity activity = null;
     try {
       activity = Robolectric.setupActivity(Activity.class);
-      WallpaperManager applicaionWallpaperManager =
+      WallpaperManager applicationWallpaperManager =
           (WallpaperManager) application.getSystemService(Context.WALLPAPER_SERVICE);
       WallpaperManager activityWallpaperManager =
           (WallpaperManager) activity.getSystemService(Context.WALLPAPER_SERVICE);
 
-      assertThat(applicaionWallpaperManager).isNotSameInstanceAs(activityWallpaperManager);
+      assertThat(applicationWallpaperManager).isNotSameInstanceAs(activityWallpaperManager);
 
       // Adjusted for WallpaperManager, as direct comparison methods are not available
       WallpaperInfo applicationWallpaper = manager.getWallpaperInfo();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -552,7 +552,7 @@ interface ActivityManagerReflector {
   }
 
   /**
-   * Helper class mimicing the package-private UidObserver class inside {@link ActivityManager}.
+   * Helper class mimicking the package-private UidObserver class inside {@link ActivityManager}.
    *
    * <p>This class is responsible for maintaining the cutpoint of the corresponding {@link
    * ActivityManager.OnUidImportanceListener} and invoking the listener only when the importance of

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppOpsManager.java
Patch:
@@ -88,7 +88,7 @@ public class ShadowAppOpsManager {
 
   private static final Map<OnOpChangedListener, Set<Key>> appOpListeners = new ArrayMap<>();
 
-  // op | (usage << 8) => ModeAndExcpetion
+  // op | (usage << 8) => ModeAndException
   private static final Map<Integer, ModeAndException> audioRestrictions = new HashMap<>();
 
   private Context context;
@@ -672,7 +672,7 @@ static Key create(Integer uid, String packageName, Integer opCode) {
     }
   }
 
-  /** Class holding usage mode and excpetion packages. */
+  /** Class holding usage mode and exception packages. */
   public static class ModeAndException {
     public final int mode;
     public final List<String> exceptionPackages;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -360,12 +360,12 @@ protected void setParameters(String keyValuePairs) {
         continue;
       }
 
-      String[] splittedPair = pair.split("=", 0);
-      if (splittedPair.length != 2) {
+      String[] splitPair = pair.split("=", 0);
+      if (splitPair.length != 2) {
         throw new IllegalArgumentException(
             "keyValuePairs: each pair should be in the format of key=value;");
       }
-      parameters.put(splittedPair[0], splittedPair[1]);
+      parameters.put(splitPair[0], splitPair[1]);
     }
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -259,7 +259,7 @@ protected boolean cancelBondProcess() {
   /**
    * Overrides behavior of {@link BluetoothDevice#getBondState} to return pre-set result.
    *
-   * @returns Value set by calling {@link ShadowBluetoothDevice#setBondState}. If setBondState has
+   * @return Value set by calling {@link ShadowBluetoothDevice#setBondState}. If setBondState has
    *     not previously been called, will return {@link BluetoothDevice#BOND_NONE} to indicate the
    *     device is not bonded.
    */
@@ -352,7 +352,7 @@ public void setFetchUuidsWithSdpResult(boolean fetchUuidsWithSdpResult) {
    * Overrides behavior of {@link BluetoothDevice#fetchUuidsWithSdp}. This method updates the
    * counter which counts the number of invocations of this method.
    *
-   * @returns Value set by calling {@link ShadowBluetoothDevice#setFetchUuidsWithSdpResult}. If not
+   * @return Value set by calling {@link ShadowBluetoothDevice#setFetchUuidsWithSdpResult}. If not
    *     previously set, will return false by default.
    */
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNetworkCapabilities.java
Patch:
@@ -23,7 +23,7 @@
 import org.robolectric.util.reflector.Direct;
 import org.robolectric.util.reflector.ForType;
 
-/** Robolectic provides overrides for fetching and updating transport. */
+/** Robolectric provides overrides for fetching and updating transport. */
 @Implements(value = NetworkCapabilities.class)
 public class ShadowNetworkCapabilities {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedAsyncTask.java
Patch:
@@ -52,7 +52,7 @@ private ClassParameter[] buildClassParams(Params... params) {
   /**
    * Globally override the executor used for all AsyncTask#execute* calls.
    *
-   * <p>This can be useful if you want to use a more determinstic executor for tests, like {@link
+   * <p>This can be useful if you want to use a more deterministic executor for tests, like {@link
    * org.robolectric.android.util.concurrent.PausedExecutorService} or {@link
    * org.robolectric.android.util.concurrent.InlineExecutorService}.
    *

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiManager.java
Patch:
@@ -869,7 +869,7 @@ public void networksFoundFromPnoScan(List<ScanResult> scanResults) {
   }
 
   @Implementation(minSdk = TIRAMISU)
-  public void setExternalPnoScanRequest(
+  protected void setExternalPnoScanRequest(
       @ClassName("java.util.List") Object ssids,
       int[] frequencies,
       Executor executor,

File: integration_tests/ctesque/src/androidTest/java/android/app/VirtualDeviceManagerTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.testapp.TestActivity;
 
 @RunWith(AndroidJUnit4.class)
-@SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)
+@SdkSuppress(minSdkVersion = Build.VERSION_CODES.UPSIDE_DOWN_CAKE)
 public class VirtualDeviceManagerTest {
 
   @Test

File: integration_tests/ctesque/src/androidTest/java/android/app/WifiP2pManagerTest.java
Patch:
@@ -37,7 +37,7 @@ public void wifiP2pManager_applicationInstance_isSameOrDifferentAsActivityInstan
             WifiP2pManager activityWifiP2pManager =
                 (WifiP2pManager) activity.getSystemService(Context.WIFI_P2P_SERVICE);
 
-            if (Build.VERSION.SDK_INT >= 31) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
               assertThat(applicationWifiP2pManager).isNotSameInstanceAs(activityWifiP2pManager);
             } else {
               assertThat(applicationWifiP2pManager).isSameInstanceAs(activityWifiP2pManager);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -772,9 +772,9 @@ protected void unbindService(final ServiceConnection serviceConnection) {
             Logger.warn(
                 "Configured to call onServiceDisconnected when unbindService is called. This is"
                     + " not accurate Android behavior. Please update your tests and call"
-                    + " ShadowActivity#setUnbindCallsOnServiceDisconnected(false). This will"
-                    + " become default behavior in the future, which may break your tests if you"
-                    + " are expecting this inaccurate behavior.");
+                    + " ShadowApplication#setUnbindServiceCallsOnServiceDisconnected(false). This"
+                    + " will become default behavior in the future, which may break your tests if"
+                    + " you are expecting this inaccurate behavior.");
             serviceConnection.onServiceDisconnected(
                 serviceConnectionDataWrapper.componentNameForBindService);
           }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -111,6 +111,9 @@ protected int createSession(@NonNull PackageInstaller.SessionParams params) thro
     sessionInfo.appPackageName = params.appPackageName;
     sessionInfo.appLabel = params.appLabel;
     sessionInfo.appIcon = params.appIcon;
+    if (VERSION.SDK_INT >= P) {
+      sessionInfo.installerPackageName = params.installerPackageName;
+    }
 
     sessionInfos.put(sessionInfo.getSessionId(), sessionInfo);
 

File: shadows/framework/src/main/java/org/robolectric/shadows/HardwareRenderingScreenshot.java
Patch:
@@ -47,7 +47,7 @@ private HardwareRenderingScreenshot() {}
    */
   static boolean canTakeScreenshot(View view) {
     return RuntimeEnvironment.getApiLevel() >= P
-        && "hardware".equalsIgnoreCase(System.getProperty(PIXEL_COPY_RENDER_MODE, ""))
+        && "hardware".equalsIgnoreCase(System.getProperty(PIXEL_COPY_RENDER_MODE, "hardware"))
         && ShadowView.useRealGraphics()
         && view.canHaveDisplayList();
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProvider.java
Patch:
@@ -11,15 +11,15 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow for {@link ContentProvider}. */
-@Implements(value = ContentProvider.class, looseSignatures = true)
+@Implements(value = ContentProvider.class)
 public class ShadowContentProvider {
   @RealObject private ContentProvider realContentProvider;
 
   private String callingPackage;
 
   @Implementation(minSdk = Q, maxSdk = Q)
-  public Object setCallingPackage(Object callingPackage) {
-    this.callingPackage = (String) callingPackage;
+  public String setCallingPackage(String callingPackage) {
+    this.callingPackage = callingPackage;
     return callingPackage;
   }
 

File: robolectric/src/test/java/org/robolectric/android/internal/AndroidTestEnvironmentTest.java
Patch:
@@ -386,7 +386,7 @@ public void testResetterFails_reportsFailureAndContinues() {
             telpArray);
     RuntimeException e =
         assertThrows(RuntimeException.class, () -> androidTestEnvironment.resetState());
-    assertThat(e.getSuppressed()[0]).hasMessageThat().contains("Reset failed");
+    assertThat(e).hasMessageThat().contains("Reset failed");
     assertThat(workingShadowProvider.wasReset).isTrue();
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -61,6 +61,7 @@
 import javax.annotation.Nullable;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
+import org.robolectric.annotation.ClassName;
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -78,7 +79,7 @@
 import org.robolectric.util.reflector.WithType;
 
 @SuppressWarnings("NewApi")
-@Implements(value = Activity.class, looseSignatures = true)
+@Implements(value = Activity.class)
 public class ShadowActivity extends ShadowContextThemeWrapper {
 
   @RealObject protected Activity realActivity;
@@ -417,7 +418,7 @@ protected Window getWindow() {
    * @return fake SplashScreen
    */
   @Implementation(minSdk = S)
-  protected synchronized Object getSplashScreen() {
+  protected synchronized @ClassName("android.window.SplashScreen") Object getSplashScreen() {
     if (splashScreen == null) {
       splashScreen = new RoboSplashScreen();
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSharedPreferencesTest.java
Patch:
@@ -146,6 +146,7 @@ public void putString_shouldRemovePairIfValueIsNull() {
     editor.commit();
 
     assertThat(sharedPreferences.getString("deleteMe", null)).isNull();
+    assertThat(sharedPreferences.contains("deleteMe")).isFalse();
   }
 
   @Test
@@ -156,6 +157,7 @@ public void putStringSet_shouldRemovePairIfValueIsNull() {
     editor.commit();
 
     assertThat(sharedPreferences.getStringSet("deleteMe", null)).isNull();
+    assertThat(sharedPreferences.contains("deleteMe")).isFalse();
   }
 
   @Test

File: buildSrc/src/main/groovy/org/robolectric/gradle/agp/ExtractAarTransform.java
Patch:
@@ -50,7 +50,7 @@ public abstract class ExtractAarTransform implements TransformAction<GenericTran
 
   @Override
   public void transform(@NotNull TransformOutputs outputs) {
-    // TODO(b/162813654) record transform execution span
+    // TODO: record transform execution span
     File inputFile = getAarFile().get().getAsFile();
     String inputFileNameWithoutExtension = Files.getNameWithoutExtension(inputFile.getName());
     File outputDir = outputs.dir(inputFileNameWithoutExtension);
@@ -66,7 +66,7 @@ class AarExtractor {
 
   // Note:
   //  - A jar doesn't need a manifest entry, but if we ever want to create a manifest entry, be
-  //    sure to set a fixed timestamp for it so that the jar is deterministic (see b/315336689).
+  //    sure to set a fixed timestamp for it so that the jar is deterministic
   //  - This empty jar takes up only ~22 bytes, so we don't need to GC it at the end of the build.
   private static final byte[] emptyJar;
 
@@ -103,7 +103,7 @@ private String choosePathInOutput(@NotNull String entryName) {
     } else if (entryName.startsWith(LIBS_PREFIX)) {
       // In case we have libs/classes.jar we are going to rename them, due an issue in
       // Gradle.
-      // TODO: stop doing this once this is fixed in gradle. b/65298222
+      // TODO: stop doing this once this is fixed in gradle.
       String pathWithinLibs = entryName.substring(LIBS_PREFIX_LENGTH);
 
       if (pathWithinLibs.equals(SdkConstants.FN_CLASSES_JAR)) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaPlayer.java
Patch:
@@ -1074,7 +1074,7 @@ protected int getAudioSessionId() {
    */
   @Implementation
   protected int getCurrentPosition() {
-    checkStateError("getCurrentPosition()", attachableStates);
+    checkStateError("getCurrentPosition()", nonErrorStates);
     return getCurrentPositionRaw();
   }
 

File: integration_tests/androidx/src/test/java/org/robolectric/integrationtests/androidx/BuildCompatTest.java
Patch:
@@ -8,10 +8,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility test for {@link BuildCompat} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class BuildCompatTest {
 

File: integration_tests/ctesque/src/androidTest/java/android/app/ActivityInstrTest.java
Patch:
@@ -9,12 +9,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.ActivityWithAnotherTheme;
 import org.robolectric.testapp.ActivityWithoutTheme;
 import org.robolectric.testapp.R;
 
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class ActivityInstrTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/animation/AnimationTest.java
Patch:
@@ -11,11 +11,9 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.ActivityWithoutTheme;
 
 /** Compatibility test for animation-related logic. */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class AnimationTest {
 
@@ -62,7 +60,6 @@ public void onAnimationRepeat(Animator a) {}
   }
 
   /** Private class with a public member. */
-  @DoNotInstrument
   @SuppressWarnings("unused")
   private static class PropertyBag {
     public float x;

File: integration_tests/ctesque/src/sharedTest/java/android/app/ActivityTest.java
Patch:
@@ -10,13 +10,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.AbstractTestActivity;
 import org.robolectric.testapp.ActivityWithAnotherTheme;
 import org.robolectric.testapp.ActivityWithoutTheme;
 import org.robolectric.testapp.R;
 
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class ActivityTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/app/InstrumentationTest.java
Patch:
@@ -13,13 +13,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.LooperMode;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * Tests to verify android.app.Instrumentation APIs behave consistently between Robolectric and
  * device.
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 @LooperMode(PAUSED)
 public final class InstrumentationTest {

File: integration_tests/ctesque/src/sharedTest/java/android/content/pm/PackageManagerTest.java
Patch:
@@ -26,11 +26,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.TestService;
 
 /** Compatibility test for {@link PackageManager} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class PackageManagerTest {
   private Context context;

File: integration_tests/ctesque/src/sharedTest/java/android/content/res/AssetManagerTest.java
Patch:
@@ -16,12 +16,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * Compatibility test for {@link AssetManager}
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class AssetManagerTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/content/res/ResourcesTest.java
Patch:
@@ -52,15 +52,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.R;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 
 /**
  * Compatibility test for {@link Resources}
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class ResourcesTest {
   private Resources resources;

File: integration_tests/ctesque/src/sharedTest/java/android/content/res/ThemeTest.java
Patch:
@@ -13,13 +13,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.R;
 
 /**
  * Compatibility test for {@link Resources.Theme}
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class ThemeTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/database/SQLiteDatabaseTest.java
Patch:
@@ -26,10 +26,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility test for {@link android.database.sqlite.SQLiteDatabase} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class SQLiteDatabaseTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/BitmapFactoryTest.java
Patch:
@@ -17,11 +17,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.R;
 
 /** Compatibility test for {@link BitmapFactory} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class BitmapFactoryTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/BitmapTest.java
Patch:
@@ -29,11 +29,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.testapp.R;
 
 /** Compatibility test for {@link Bitmap} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class BitmapTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/CanvasTest.java
Patch:
@@ -5,10 +5,8 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility tests for {@link Canvas} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class CanvasTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/ColorTest.java
Patch:
@@ -5,10 +5,8 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility tests for {@link Color} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class ColorTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/MatrixTest.java
Patch:
@@ -7,10 +7,8 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility test for {@link Matrix} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class MatrixTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/PathTest.java
Patch:
@@ -5,10 +5,8 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility test for {@link Path} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class PathTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/os/LooperTest.java
Patch:
@@ -9,10 +9,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.LooperMode.Mode;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Tests to verify INSTRUMENTATION_TEST mode Looper behaves like a looping Looper. */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class LooperTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/text/format/DateFormatTest.java
Patch:
@@ -14,11 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Tests that Robolectric's android.text.format.DateFormat support is consistent with device. */
 @RunWith(AndroidJUnit4.class)
-@DoNotInstrument
 @Config(qualifiers = "+en-rUS")
 public class DateFormatTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/text/format/LineBreakerTest.java
Patch:
@@ -12,10 +12,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Tests that Robolectric's android.graphics.text.LineBreaker support is consistent with device. */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class LineBreakerTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/text/format/StaticLayoutTest.java
Patch:
@@ -8,10 +8,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Tests that Robolectric's android.text.StaticLayout support is consistent with device. */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class StaticLayoutTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/text/format/TimeTest.java
Patch:
@@ -14,9 +14,7 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class TimeTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/util/RationalTest.java
Patch:
@@ -37,15 +37,13 @@
 import java.lang.reflect.Field;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * CTS tests for {@link Rational}.
  *
  * <p>Copied from <a
  * href="https://cs.android.com/android/platform/superproject/main/+/main:cts/tests/tests/util/src/android/util/cts/RationalTest.java">RationalTest</a>
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class RationalTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/view/KeyCharacterMapTest.java
Patch:
@@ -8,14 +8,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * Test {@link android.view.KeyCharacterMap}.
  *
  * <p>Inspired from Android cts/tests/tests/view/src/android/view/cts/KeyCharacterMap.java
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class KeyCharacterMapTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/view/KeyEventTest.java
Patch:
@@ -8,14 +8,12 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * Test {@link KeyEventTest}.
  *
  * <p>Inspired from Android cts/tests/tests/view/src/android/view/cts/KeyEventTest.java
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class KeyEventTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/view/MotionEventTest.java
Patch:
@@ -26,14 +26,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * Test {@link android.view.MotionEvent}.
  *
  * <p>Baselined from Android cts/tests/tests/view/src/android/view/cts/MotionEventTest.java
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class MotionEventTest {
   private MotionEvent motionEvent1;

File: integration_tests/ctesque/src/sharedTest/java/android/view/ViewConfigurationTest.java
Patch:
@@ -14,10 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Tests that {@link android.view.ViewConfiguration} behavior is consistent with real Android. */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public final class ViewConfigurationTest {
 

File: integration_tests/ctesque/src/sharedTest/java/android/view/accessibility/AccessibilityEventTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * CTS for {@link AccessibilityEvent}.
@@ -38,7 +37,6 @@
  *
  * <p>But this test class migrates assertions from junit to Google Truth.
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class AccessibilityEventTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/view/accessibility/AccessibilityNodeInfoTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /**
  * CTS for {@link AccessibilityNodeInfo}.
@@ -35,7 +34,6 @@
  *
  * <p>But this test class migrates assertions from junit to Google Truth.
  */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class AccessibilityNodeInfoTest {
   @Test

File: integration_tests/ctesque/src/sharedTest/java/android/webkit/CookieManagerTest.java
Patch:
@@ -6,10 +6,8 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
 /** Compatibility test for {@link CookieManager} */
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class CookieManagerTest {
 

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.internal.DoNotInstrument;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 import org.robolectric.internal.bytecode.Sandbox;
 
@@ -132,7 +131,6 @@ protected InstrumentationConfiguration createClassLoaderConfig(FrameworkMethod m
     }
   }
 
-  @DoNotInstrument
   public static class MyTestLifecycle extends DefaultTestLifecycle {
 
     @Override public void beforeTest(Method method) {

File: robolectric/src/test/java/org/robolectric/fakes/RoboWebSettingsTest.java
Patch:
@@ -6,9 +6,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.internal.DoNotInstrument;
 
-@DoNotInstrument
 @RunWith(AndroidJUnit4.class)
 public class RoboWebSettingsTest {
   private final RoboWebSettings webSettings = new RoboWebSettings();

File: buildSrc/src/main/groovy/org/robolectric/gradle/AarDepsPlugin.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.gradle.api.artifacts.type.ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE;
 
-import com.android.build.gradle.internal.dependency.ExtractAarTransform;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -18,6 +17,7 @@
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.tasks.compile.JavaCompile;
 import org.jetbrains.annotations.NotNull;
+import org.robolectric.gradle.agp.ExtractAarTransform;
 
 /** Resolve aar dependencies into jars for non-Android projects. */
 public class AarDepsPlugin implements Plugin<Project> {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -855,6 +855,7 @@ public void onServiceDisconnected(int profile) {}
   @Config(minSdk = U.SDK_INT)
   @Test
   public void getProfileProxy_adapterDisabled_serviceListenerNotInvoked() {
+    bluetoothAdapter.disable();
     shadowOf((Application) getApplicationContext()).grantPermissions(permission.BLUETOOTH);
     BluetoothProfile.ServiceListener listener =
         Mockito.mock(BluetoothProfile.ServiceListener.class);

File: robolectric/src/test/java/org/robolectric/shadows/AssociationInfoBuilderTest.java
Patch:
@@ -66,7 +66,8 @@ public void obtain() {
     assertThat(info.isSelfManaged()).isEqualTo(SELF_MANAGED);
     assertThat(info.isNotifyOnDeviceNearby()).isEqualTo(NOTIFY_ON_DEVICE_NEARBY);
     assertThat(info.getTimeApprovedMs()).isEqualTo(APPROVED_MS);
-    assertThat(info.getLastTimeConnectedMs()).isEqualTo(LAST_TIME_CONNECTED_MS);
+    assertThat((long) ReflectionHelpers.callInstanceMethod(info, "getLastTimeConnectedMs"))
+        .isEqualTo(LAST_TIME_CONNECTED_MS);
 
     if (ReflectionHelpers.hasField(AssociationInfo.class, "mAssociatedDevice")) {
       Object associatedDevice = ReflectionHelpers.callInstanceMethod(info, "getAssociatedDevice");

File: shadows/framework/src/main/java/org/robolectric/shadows/SystemFeatureListInitializer.java
Patch:
@@ -13,6 +13,8 @@ public static ImmutableMap<String, Boolean> getSystemFeatures() {
     int apiLevel = RuntimeEnvironment.getApiLevel();
     Map<String, Boolean> features = new HashMap<>();
 
+    features.put(PackageManager.FEATURE_TOUCHSCREEN, true);
+
     if (apiLevel >= VERSION_CODES.N_MR1) {
       features.put(PackageManager.FEATURE_WIFI, true);
     }

File: processor/src/main/java/org/robolectric/annotation/processing/validator/SdkStore.java
Patch:
@@ -271,7 +271,7 @@ public String verifyMethod(
 
       MethodExtraInfo sdkMethod = classInfo.findMethod(methodElement, looseSignatures);
       if (sdkMethod == null && !suppressWarnings(methodElement, null)) {
-        return "No such method in " + className;
+        return "No method " + methodElement + " in " + className;
       }
       if (sdkMethod != null) {
         MethodExtraInfo implMethod = new MethodExtraInfo(methodElement);

File: processor/src/test/java/org/robolectric/annotation/processing/validator/InDevelopmentValidatorTest.java
Patch:
@@ -65,7 +65,7 @@ public void implementationWithoutInDevelopmentFailsToCompiles() {
     assertAbout(singleClass(props, getClassRootDir(Dummy.class), unreleased.getSdkInt()))
         .that(testClass)
         .failsToCompile()
-        .withErrorContaining("No such method in com.example.objects.Dummy for SDK 35")
+        .withErrorContaining("No method doSomething() in com.example.objects.Dummy for SDK 35")
         .onLine(11);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessageQueue.java
Patch:
@@ -46,8 +46,7 @@ public class ShadowLegacyMessageQueue extends ShadowMessageQueue {
   // rather than automatic.
   @HiddenApi
   @Implementation
-  @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
-  public static Number nativeInit() {
+  public static long nativeInit() {
     return 1;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeCursorWindow.java
Patch:
@@ -16,7 +16,7 @@
 public class ShadowNativeCursorWindow extends ShadowCursorWindow {
 
   @Implementation(maxSdk = U.SDK_INT)
-  protected static Number nativeCreate(String name, int cursorWindowSize) {
+  protected static long nativeCreate(String name, int cursorWindowSize) {
     DefaultNativeRuntimeLoader.injectAndLoad();
     return CursorWindowNatives.nativeCreate(name, cursorWindowSize);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeSQLiteConnection.java
Patch:
@@ -23,7 +23,7 @@
     callNativeMethodsByDefault = true)
 public class ShadowNativeSQLiteConnection extends ShadowSQLiteConnection {
   @Implementation(maxSdk = O)
-  protected static Number nativeOpen(
+  protected static long nativeOpen(
       String path, int openFlags, String label, boolean enableTrace, boolean enableProfile) {
     return nativeOpen(path, openFlags, label, enableTrace, enableProfile, 0, 0);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -269,8 +269,8 @@ protected void writeByteArray(byte[] b, int offset, int len) {
       realObject.writeInt(-1);
       return;
     }
-    Number nativePtr = ReflectionHelpers.getField(realObject, "mNativePtr");
-    nativeWriteByteArray(nativePtr.longValue(), b, offset, len);
+    long nativePtr = ReflectionHelpers.getField(realObject, "mNativePtr");
+    nativeWriteByteArray(nativePtr, b, offset, len);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStringBlock.java
Patch:
@@ -18,7 +18,7 @@ public class ShadowStringBlock {
   Object realObject;
 
   @Implementation
-  protected static Number nativeCreate(byte[] data, int offset, int size) {
+  protected static long nativeCreate(byte[] data, int offset, int size) {
     throw new UnsupportedOperationException();
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSurfaceControl.java
Patch:
@@ -43,7 +43,7 @@ protected void finalize() throws Throwable {
   }
 
   @Implementation(maxSdk = N_MR1)
-  protected static Number nativeCreate(
+  protected static long nativeCreate(
       SurfaceSession session, String name, int w, int h, int format, int flags) {
     // Return a non-zero value otherwise constructing a SurfaceControl fails with
     // OutOfResourcesException.

File: processor/src/main/java/org/robolectric/annotation/processing/validator/ImplementsValidator.java
Patch:
@@ -202,7 +202,7 @@ private void validateShadow(
       for (SdkStore.Sdk sdk : sdkStore.sdksMatching(classMinSdk, classMaxSdk)) {
         SdkStore.ClassInfo classInfo = sdk.getClassInfo(shadowedClassName);
         if (classInfo == null) {
-          if (!sdk.suppressWarnings(shadowClassElem, "robolectric.typeNotFound")) {
+          if (!sdk.suppressWarnings(shadowClassElem, "robolectric.internal.IgnoreMissingClass")) {
             problems.add("Shadowed type is not found: " + shadowedClassName, sdk.sdkInt);
           }
         } else {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeSystemFonts.java
Patch:
@@ -125,7 +125,7 @@ FontConfig.Alias[] buildSystemFallback(
   /** Shadow picker for {@link SystemFonts}. */
   public static final class Picker extends GraphicsShadowPicker<Object> {
     public Picker() {
-      super(null, ShadowNativeSystemFonts.class);
+      super(ShadowSystemFonts.class, ShadowNativeSystemFonts.class);
     }
   }
 }

File: processor/src/main/java/org/robolectric/annotation/processing/generator/Generator.java
Patch:
@@ -1,8 +1,6 @@
 package org.robolectric.annotation.processing.generator;
 
-/**
- * Base class for code generators.
- */
+/** Base class for code generators. */
 public abstract class Generator {
   protected static final String GEN_CLASS = "Shadows";
 

File: processor/src/test/java/com/example/objects/AnyObject.java
Patch:
@@ -1,4 +1,3 @@
 package com.example.objects;
 
-public class AnyObject {
-}
+public class AnyObject {}

File: processor/src/test/java/com/example/objects/Dummy.java
Patch:
@@ -1,4 +1,3 @@
 package com.example.objects;
 
-public class Dummy {
-}
+public class Dummy {}

File: processor/src/test/java/com/example/objects/OuterDummy.java
Patch:
@@ -2,6 +2,5 @@
 
 public class OuterDummy {
   @SuppressWarnings("ClassCanBeStatic")
-  public class InnerDummy {
-  }
+  public class InnerDummy {}
 }

File: processor/src/test/java/com/example/objects/ParameterizedDummy.java
Patch:
@@ -1,5 +1,3 @@
 package com.example.objects;
 
-public class ParameterizedDummy<T, N extends Number> {
-
-}
+public class ParameterizedDummy<T, N extends Number> {}

File: processor/src/test/java/com/example/objects/Private.java
Patch:
@@ -1,4 +1,3 @@
 package com.example.objects;
 
-class Private {
-}
+class Private {}

File: processor/src/test/java/com/example/objects2/Dummy.java
Patch:
@@ -1,5 +1,3 @@
 package com.example.objects2;
 
-public class Dummy {
-
-}
+public class Dummy {}

File: processor/src/test/java/com/example/objects2/OuterDummy.java
Patch:
@@ -3,7 +3,5 @@
 public class OuterDummy {
 
   @SuppressWarnings("ClassCanBeStatic")
-  public class InnerDummy {
-    
-  }
+  public class InnerDummy {}
 }

File: processor/src/test/java/org/robolectric/annotation/UnrecognizedAnnotation.java
Patch:
@@ -3,5 +3,4 @@
 @java.lang.annotation.Documented
 @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
-public @interface UnrecognizedAnnotation {
-}
+public @interface UnrecognizedAnnotation {}

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -10,8 +10,6 @@
 import javax.annotation.Generated;
 import org.robolectric.annotation.processing.shadows.ShadowDummy;
 import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2;
-import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerPackage;
-import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerProtected;
 import org.robolectric.annotation.processing.shadows.ShadowPrivate;
 import org.robolectric.internal.ShadowProvider;
 import org.robolectric.shadow.api.Shadow;
@@ -28,9 +26,9 @@ public class Shadows implements ShadowProvider {
     SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowDummy"));
     SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.OuterDummy2", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2"));
     SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.OuterDummy2.InnerPackage", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPackage"));
+    SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.OuterDummy2.InnerPrivate", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPrivate"));
     SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.OuterDummy2.InnerProtected", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerProtected"));
     SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.Private", "org.robolectric.annotation.processing.shadows.ShadowPrivate"));
-    SHADOWS.add(new AbstractMap.SimpleImmutableEntry<>("com.example.objects.OuterDummy2.InnerPrivate", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPrivate"));
   }
 
   public static ShadowDummy shadowOf(Dummy actual) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlwaysOnHotwordDetector.java
Patch:
@@ -166,6 +166,7 @@ private void setEnrollmentFields(
       className = "android.service.voice.AlwaysOnHotwordDetector$RefreshAvailabiltyTask",
       maxSdk = TIRAMISU,
       isInAndroidSdk = false)
+  @SuppressWarnings("robolectric.mismatchedTypes")
   public static class ShadowRefreshAvailabilityTask<Params, Progress, Result>
       extends ShadowPausedAsyncTask<Params, Progress, Result> {
 
@@ -174,7 +175,7 @@ protected int internalGetInitialAvailability() {
       return STATE_KEYPHRASE_ENROLLED;
     }
 
-    @Implementation
+    @Implementation(maxSdk = Q)
     protected boolean internalGetIsEnrolled(int keyphraseId, Locale locale) {
       return true;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -667,7 +667,7 @@ protected static void applyStyle(long themeToken, int defStyleAttr, int defStyle
 
   @HiddenApi
   @Implementation(maxSdk = N_MR1)
-  protected static void applyStyle(
+  protected static boolean applyStyle(
       long themeToken,
       int defStyleAttr,
       int defStyleRes,
@@ -681,6 +681,7 @@ protected static void applyStyle(
         : Registries.NATIVE_RES_XML_PARSERS.getNativeObject(xmlParserToken);
     AttributeResolution.ApplyStyle(theme, xmlParser, defStyleAttr, defStyleRes,
         attrs, attrs.length, outValues, outIndices);
+    return true;
   }
 
   @Implementation @HiddenApi

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCallScreeningService.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow for {@link android.telecom.CallScreeningService}. */
-@Implements(CallScreeningService.class)
+@Implements(value = CallScreeningService.class, minSdk = N)
 public final class ShadowCallScreeningService {
   /** Contains the parameters used to call {@link CallScreeningService#respondToCall}. */
   public static final class RespondToCallInput {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraManager.java
Patch:
@@ -393,7 +393,7 @@ private interface ReflectorCameraManager {
   /** Shadow class for internal class CameraManager$CameraManagerGlobal */
   @Implements(
       className = "android.hardware.camera2.CameraManager$CameraManagerGlobal",
-      minSdk = VERSION_CODES.LOLLIPOP)
+      minSdk = VERSION_CODES.LOLLIPOP_MR1)
   public static class ShadowCameraManagerGlobal {
 
     /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCompatibility.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.R;
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.compat.Compatibility;
@@ -16,7 +17,7 @@
 import org.robolectric.util.reflector.Static;
 
 /** Shadow for {@link Compatability}. */
-@Implements(value = Compatibility.class, isInAndroidSdk = false)
+@Implements(value = Compatibility.class, isInAndroidSdk = false, minSdk = R)
 public class ShadowCompatibility {
 
   private static final long CALL_ACTIVITY_RESULT_BEFORE_RESUME = 78294732L;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowHardwareBuffer.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.res.android.NativeObjRegistry;
 
 /** Shadow of android.hardware.HardwareBuffer. */
-@Implements(HardwareBuffer.class)
+@Implements(value = HardwareBuffer.class, minSdk = O)
 public class ShadowHardwareBuffer {
   private static final long INVALID_BUFFER_ID = 0;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeBlendModeColorFilter.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.Q;
 
 import android.graphics.BlendModeColorFilter;
@@ -14,7 +13,7 @@
 /** Shadow for {@link BlendModeColorFilter} that is backed by native code */
 @Implements(
     value = BlendModeColorFilter.class,
-    minSdk = O,
+    minSdk = Q,
     shadowPicker = Picker.class,
     callNativeMethodsByDefault = true)
 public class ShadowNativeBlendModeColorFilter {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeFont.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.P;
 import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
@@ -34,7 +33,7 @@
 /** Shadow for {@link Font} that is backed by native code */
 @Implements(
     value = Font.class,
-    minSdk = P,
+    minSdk = Q,
     shadowPicker = Picker.class,
     isInAndroidSdk = false,
     callNativeMethodsByDefault = true)
@@ -118,7 +117,7 @@ protected static long[] nGetAvailableFontSet() {
   /** Shadow for {@link Font.Builder} that is backed by native code */
   @Implements(
       value = Font.Builder.class,
-      minSdk = P,
+      minSdk = Q,
       shadowPicker = ShadowNativeFontBuilder.Picker.class,
       isInAndroidSdk = false,
       callNativeMethodsByDefault = true)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeRenderEffect.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.S;
 
 import android.graphics.RenderEffect;
@@ -14,7 +13,7 @@
 /** Shadow for {@link RenderEffect} that is backed by native code */
 @Implements(
     value = RenderEffect.class,
-    minSdk = O,
+    minSdk = S,
     shadowPicker = Picker.class,
     callNativeMethodsByDefault = true)
 public class ShadowNativeRenderEffect {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeRuntimeShader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
 import static android.os.Build.VERSION_CODES.S_V2;
@@ -20,7 +19,7 @@
 /** Shadow for {@link RuntimeShader} that is backed by native code */
 @Implements(
     value = RuntimeShader.class,
-    minSdk = O,
+    minSdk = R,
     shadowPicker = Picker.class,
     callNativeMethodsByDefault = true)
 public class ShadowNativeRuntimeShader {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeThreadedRenderer.java
Patch:
@@ -16,7 +16,7 @@
 public class ShadowNativeThreadedRenderer {
 
   // ThreadedRenderer specific functions. These do not exist in HardwareRenderer
-  @Implementation
+  @Implementation(maxSdk = O)
   protected static boolean nSupportsOpenGL() {
     return false;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java
Patch:
@@ -231,7 +231,7 @@ public void releaseVirtualDisplay(IVirtualDisplayCallback token) {
     }
 
     // @Override
-    void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn) {
+    public void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn) {
       Integer id = virtualDisplayIds.get(token);
       DisplayInfo displayInfo = displayInfos.get(id);
       displayInfo.state = isOn ? Display.STATE_ON : Display.STATE_OFF;

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -32,15 +32,15 @@ public void setUp() throws Exception {
   public void testDefaultQualifiers() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
         .isEqualTo(
-            "en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
+            "en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav");
   }
 
   @Test
   @Config(qualifiers = "en", sdk = 26)
   public void testDefaultQualifiers_withoutRegion() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
         .isEqualTo(
-            "en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
+            "en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav");
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/HardwareRenderingScreenshot.java
Patch:
@@ -42,10 +42,11 @@ private HardwareRenderingScreenshot() {}
    * the presence of the {@link #USE_HARDWARE_RENDERER_NATIVE_ENV} property, and the {@link
    * GraphicsMode}.
    */
-  static boolean canTakeScreenshot() {
+  static boolean canTakeScreenshot(View view) {
     return VERSION.SDK_INT >= VERSION_CODES.S
         && "hardware".equalsIgnoreCase(System.getProperty(PIXEL_COPY_RENDER_MODE, ""))
-        && ShadowView.useRealGraphics();
+        && ShadowView.useRealGraphics()
+        && view.canHaveDisplayList();
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPixelCopy.java
Patch:
@@ -168,7 +168,7 @@ private static void takeScreenshot(View view, Bitmap screenshot, @Nullable Rect
 
     Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
 
-    if (HardwareRenderingScreenshot.canTakeScreenshot()) {
+    if (HardwareRenderingScreenshot.canTakeScreenshot(view)) {
       PerfStatsCollector.getInstance()
           .measure(
               "ShadowPixelCopy-Hardware",

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUiAutomation.java
Patch:
@@ -131,7 +131,7 @@ protected Bitmap takeScreenshot() throws Exception {
                 Bitmap window =
                     Bitmap.createBitmap(
                         rootView.getWidth(), rootView.getHeight(), Bitmap.Config.ARGB_8888);
-                if (HardwareRenderingScreenshot.canTakeScreenshot()) {
+                if (HardwareRenderingScreenshot.canTakeScreenshot(rootView)) {
                   HardwareRenderingScreenshot.takeScreenshot(rootView, window);
                 } else {
                   Canvas windowCanvas = new Canvas(window);

File: resources/src/main/java/org/robolectric/res/android/DataType.java
Patch:
@@ -70,6 +70,8 @@ public static DataType fromCode(int code) {
   }
 
   public static DataType fromCode(byte code) {
-    return Preconditions.checkNotNull(FROM_BYTE.get(code), "Unknown resource type: %s", code);
+    DataType type = FROM_BYTE.get(code);
+    Preconditions.checkArgument(type != null, "Unknown resource type: %s", code);
+    return type;
   }
 }

File: junit/src/main/java/org/robolectric/internal/TimeLimitedStatement.java
Patch:
@@ -5,10 +5,10 @@
 import org.junit.runners.model.TestTimedOutException;
 
 /**
- * Similar to JUnit's {@link org.junit.internal.runners.statements.FailOnTimeout}, but runs the
- * test on the current thread (with a timer on a new thread) rather than the other way around.
+ * Similar to JUnit's {@link org.junit.internal.runners.statements.FailOnTimeout}, but runs the test
+ * on the current thread (with a timer on a new thread) rather than the other way around.
  */
-class TimeLimitedStatement extends Statement {
+public class TimeLimitedStatement extends Statement {
 
   private final long timeout;
   private final Statement delegate;

File: integration_tests/sdkcompat/src/test/java/org/robolectric/integrationtests/sdkcompat/JavaClassResolveCompatibilityTest.java
Patch:
@@ -6,6 +6,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
 
 /**
  * Test class for Java's class resolve compatibility test. We must keep it with Java instead of
@@ -21,8 +23,6 @@ public void sdkIs29() {
   @Test
   public void shadowOf() {
     // https://github.com/robolectric/robolectric/issues/7095
-    // Enable this assertion when resolving all shadowOf compatibility problem
-    // assertThat(Shadows.shadowOf((Application) ApplicationProvider.getApplicationContext()))
-    //     .isNotNull();
+    assertThat(Shadows.shadowOf(RuntimeEnvironment.getApplication())).isNotNull();
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVpnManagerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.Shadows.shadowOf;
 
 import android.content.Intent;
 import android.net.Ikev2VpnProfile;
@@ -15,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadow.api.Shadow;
 
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = VERSION_CODES.R)
@@ -25,7 +25,7 @@ public class ShadowVpnManagerTest {
   @Before
   public void setUp() throws Exception {
     vpnManager = ApplicationProvider.getApplicationContext().getSystemService(VpnManager.class);
-    shadowVpnManager = shadowOf(vpnManager);
+    shadowVpnManager = Shadow.extract(vpnManager);
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativePositionedGlyphs.java
Patch:
@@ -15,6 +15,7 @@
     value = PositionedGlyphs.class,
     minSdk = S.SDK_INT,
     shadowPicker = Picker.class,
+    isInAndroidSdk = false,
     callNativeMethodsByDefault = true)
 public class ShadowNativePositionedGlyphs {
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeRenderEffect.java
Patch:
@@ -16,6 +16,7 @@
     value = RenderEffect.class,
     minSdk = O,
     shadowPicker = Picker.class,
+    isInAndroidSdk = false,
     callNativeMethodsByDefault = true)
 public class ShadowNativeRenderEffect {
   static {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeRuntimeShader.java
Patch:
@@ -22,6 +22,7 @@
     value = RuntimeShader.class,
     minSdk = O,
     shadowPicker = Picker.class,
+    isInAndroidSdk = false,
     callNativeMethodsByDefault = true)
 public class ShadowNativeRuntimeShader {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeTextRunShaper.java
Patch:
@@ -14,6 +14,7 @@
     value = TextRunShaper.class,
     minSdk = S.SDK_INT,
     shadowPicker = Picker.class,
+    isInAndroidSdk = false,
     callNativeMethodsByDefault = true)
 public class ShadowNativeTextRunShaper {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTranslationManager.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 
 /** Shadow for {@link TranslationManager}. */
-@Implements(value = TranslationManager.class, minSdk = VERSION_CODES.S)
+@Implements(value = TranslationManager.class, minSdk = VERSION_CODES.S, isInAndroidSdk = false)
 public class ShadowTranslationManager {
   private final Table<Integer, Integer, ImmutableSet<TranslationCapability>>
       onDeviceTranslationCapabilities = HashBasedTable.create();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVpnManager.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 
 /** Shadow for {@link VpnManager}. */
-@Implements(value = VpnManager.class, minSdk = VERSION_CODES.R)
+@Implements(value = VpnManager.class, minSdk = VERSION_CODES.R, isInAndroidSdk = false)
 public class ShadowVpnManager {
 
   private VpnProfileState vpnProfileState;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeBaseRecordingCanvas.java
Patch:
@@ -21,6 +21,7 @@
     value = BaseRecordingCanvas.class,
     minSdk = Q,
     shadowPicker = Picker.class,
+    callNativeMethodsByDefault = true,
     isInAndroidSdk = false)
 public class ShadowNativeBaseRecordingCanvas extends ShadowNativeCanvas {
 

File: integration_tests/ctesque/src/sharedTest/java/android/util/RationalTest.java
Patch:
@@ -29,7 +29,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-import android.os.Build;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -41,11 +40,9 @@
 import java.lang.reflect.Field;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.annotation.internal.DoNotInstrument;
 
 @DoNotInstrument
-@Config(minSdk = Build.VERSION_CODES.LOLLIPOP)
 @RunWith(AndroidJUnit4.class)
 public class RationalTest {
 

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -614,12 +614,12 @@ public String getAppComponentFactory() {
    * <p>Note that if {@link #targetSdkVersion} isn't set, this value changes the behavior of some
    * Android code (notably {@link android.content.SharedPreferences}) to emulate old bugs.
    *
-   * @return the minimum SDK version, or KitKat (19) by default
+   * @return the minimum SDK version, or Lollipop (21) by default
    */
   @Override
   public int getMinSdkVersion() {
     parseAndroidManifest();
-    return minSdkVersion == null ? 19 : minSdkVersion;
+    return minSdkVersion == null ? 21 : minSdkVersion;
   }
 
   /**
@@ -629,7 +629,7 @@ public int getMinSdkVersion() {
    * <p>Note that this value changes the behavior of some Android code (notably {@link
    * android.content.SharedPreferences}) to emulate old bugs.
    *
-   * @return the target SDK version, or KitKat (19) by default
+   * @return the target SDK version, or Lollipop (21) by default
    */
   @Override
   public int getTargetSdkVersion() {

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -8,7 +8,6 @@
 import android.app.Activity;
 import android.content.res.Configuration;
 import android.content.res.Resources;
-import android.os.Build.VERSION_CODES;
 import android.view.View;
 import android.widget.TextView;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -97,7 +96,8 @@ public void inflateLayout_overridesTo_sw720dp() throws Exception {
     assertThat(resources.getConfiguration().smallestScreenWidthDp).isEqualTo(720);
   }
 
-  @Test @Config(qualifiers = "b+sr+Latn", minSdk = VERSION_CODES.LOLLIPOP)
+  @Test
+  @Config(qualifiers = "b+sr+Latn")
   public void supportsBcp47() throws Exception {
     assertThat(resources.getString(R.string.hello)).isEqualTo("Zdravo");
   }

File: robolectric/src/test/java/org/robolectric/android/ResourceTableFactoryIntegrationTest.java
Patch:
@@ -4,16 +4,13 @@
 import static com.google.common.truth.TruthJUnit.assume;
 import static org.robolectric.shadows.ShadowAssetManager.useLegacy;
 
-import android.os.Build;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 import org.robolectric.res.ResName;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = Build.VERSION_CODES.LOLLIPOP)
 public class ResourceTableFactoryIntegrationTest {
   @Test
   public void shouldIncludeStyleableAttributesThatDoNotHaveACorrespondingEntryInAttrClass() throws Exception {

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -231,15 +231,15 @@ public void shouldReadTargetSdkVersionFromAndroidManifestOrDefaultToMin() throws
     assertThat(newConfigWith("minsdk7.xml", "android:minSdkVersion=\"7\"").getTargetSdkVersion())
         .isEqualTo(7);
     assertThat(newConfigWith("noattributes.xml", "").getTargetSdkVersion())
-        .isEqualTo(VERSION_CODES.KITKAT);
+        .isEqualTo(VERSION_CODES.LOLLIPOP);
   }
 
   @Test
-  public void shouldReadMinSdkVersionFromAndroidManifestOrDefaultToKitKat() throws Exception {
+  public void shouldReadMinSdkVersionFromAndroidManifestOrDefaultToLollipop() throws Exception {
     assertThat(newConfigWith("minsdk17.xml", "android:minSdkVersion=\"17\"").getMinSdkVersion())
         .isEqualTo(17);
     assertThat(newConfigWith("noattributes.xml", "").getMinSdkVersion())
-        .isEqualTo(VERSION_CODES.KITKAT);
+        .isEqualTo(VERSION_CODES.LOLLIPOP);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/StyleResourceLoaderTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.TruthJUnit.assume;
 import static org.robolectric.util.TestUtil.sdkResources;
@@ -19,7 +19,7 @@ public class StyleResourceLoaderTest {
   @Before
   public void setUp() throws Exception {
     assume().that(RuntimeEnvironment.useLegacyResources()).isTrue();
-    ResourcePath resourcePath = sdkResources(JELLY_BEAN);
+    ResourcePath resourcePath = sdkResources(LOLLIPOP);
     resourceTable = new ResourceTableFactory().newResourceTable("android", resourcePath);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/PlaybackInfoBuilderTest.java
Patch:
@@ -4,15 +4,12 @@
 
 import android.media.AudioAttributes;
 import android.media.session.MediaController.PlaybackInfo;
-import android.os.Build.VERSION_CODES;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 /** Test for {@link PlaybackInfoBuilder} */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = VERSION_CODES.LOLLIPOP)
 public class PlaybackInfoBuilderTest {
   @Test
   public void build_playbackInfo() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -257,7 +257,6 @@ public void setExact_alarmListener() {
     verify(onFire).onAlarm();
   }
 
-  @Config(minSdk = VERSION_CODES.LOLLIPOP)
   @Test
   public void setAlarmClock_pendingIntent() {
     AlarmClockInfo alarmClockInfo =
@@ -534,7 +533,6 @@ public void canScheduleExactAlarms() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.LOLLIPOP)
   public void getNextAlarmClockInfo() {
     AlarmClockInfo alarmClockInfo1 =
         new AlarmClockInfo(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppOpsManagerTest.java
Patch:
@@ -467,7 +467,6 @@ public void checkOp_ignoreModeSet_returnIgnored() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.LOLLIPOP)
   public void setRestrictions() {
     appOps.setRestriction(
         OP_VIBRATE, AudioAttributes.USAGE_NOTIFICATION, MODE_ERRORED, new String[] {PACKAGE_NAME1});

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupDataInputTest.java
Patch:
@@ -6,19 +6,16 @@
 
 import android.app.backup.BackupDataInput;
 import android.app.backup.BackupDataInputStream;
-import android.os.Build.VERSION_CODES;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.util.reflector.Constructor;
 import org.robolectric.util.reflector.ForType;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = VERSION_CODES.LOLLIPOP)
 public final class ShadowBackupDataInputTest {
 
   private static final String TEST_KEY_1 = "key_1";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupDataOutputTest.java
Patch:
@@ -6,17 +6,14 @@
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.app.backup.BackupDataOutput;
-import android.os.Build.VERSION_CODES;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.io.IOException;
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.util.reflector.ForType;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = VERSION_CODES.LOLLIPOP)
 public final class ShadowBackupDataOutputTest {
 
   private static final String TEST_PREFIX = "prefix";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCallTest.java
Patch:
@@ -14,7 +14,6 @@
 
 /** Test of ShadowCall. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = VERSION_CODES.LOLLIPOP)
 public final class ShadowCallTest {
   Call call;
   ShadowCall shadowCall;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayTest.java
Patch:
@@ -90,7 +90,7 @@ public void changedStateShouldApplyToOtherInstancesOfSameDisplay() {
   }
 
   @Test
-  public void stateChangeShouldApplyToOtherInstancesOfSameDisplay_postKitKatFields() {
+  public void stateChangeShouldApplyToOtherInstancesOfSameDisplay() {
     shadow.setState(Display.STATE_DOZE_SUSPEND);
 
     display = DisplayManagerGlobal.getInstance().getRealDisplay(Display.DEFAULT_DISPLAY);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedMessageQueueTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() {
-    if (shadowQueue != null) {
+    if (queue != null) {
       shadowQueue.quit();
     }
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -238,8 +238,7 @@ private SQLiteDatabase createDatabase(String filename) {
   private SQLiteConnection getSQLiteConnection() {
     ptr =
         ShadowLegacySQLiteConnection.nativeOpen(
-                databasePath.getPath(), 0, "test connection", false, false)
-            .longValue();
+            databasePath.getPath(), 0, "test connection", false, false);
     connections =
         ReflectionHelpers.getStaticField(ShadowLegacySQLiteConnection.class, "CONNECTIONS");
     return connections.getConnection(ptr);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityWindowInfo.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.Q;
@@ -25,7 +24,7 @@
  * Shadow of {@link android.view.accessibility.AccessibilityWindowInfo} that allows a test to set
  * properties that are locked in the original class.
  */
-@Implements(value = AccessibilityWindowInfo.class, minSdk = LOLLIPOP)
+@Implements(value = AccessibilityWindowInfo.class)
 public class ShadowAccessibilityWindowInfo {
 
   private static final Map<StrictEqualityWindowWrapper, StackTraceElement[]> obtainedInstances =

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlwaysOnHotwordDetector.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
@@ -40,7 +39,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow implementation of {@link android.service.voice.AlwaysOnHotwordDetector}. */
-@Implements(value = AlwaysOnHotwordDetector.class, minSdk = LOLLIPOP, isInAndroidSdk = false)
+@Implements(value = AlwaysOnHotwordDetector.class, isInAndroidSdk = false)
 public class ShadowAlwaysOnHotwordDetector {
 
   @RealObject private AlwaysOnHotwordDetector realObject;
@@ -165,7 +164,6 @@ private void setEnrollmentFields(
   /** Shadow for AsyncTask kicked off in the constructor of AlwaysOnHotwordDetector. */
   @Implements(
       className = "android.service.voice.AlwaysOnHotwordDetector$RefreshAvailabiltyTask",
-      minSdk = LOLLIPOP,
       maxSdk = TIRAMISU,
       isInAndroidSdk = false)
   public static class ShadowRefreshAvailabilityTask<Params, Progress, Result>

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppTask.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.app.ActivityManager.AppTask;
 import android.app.ActivityManager.RecentTaskInfo;
@@ -12,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-@Implements(value = AppTask.class, minSdk = LOLLIPOP)
+@Implements(value = AppTask.class)
 public class ShadowAppTask {
   private boolean isFinished;
   private RecentTaskInfo recentTaskInfo;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioRecord.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.media.AudioRecord.ERROR_BAD_VALUE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 
@@ -23,7 +22,7 @@
  * <p>It is also possible to provide the underlying data by implementing {@link AudioRecordSource}
  * and setting this via {@link #setSourceProvider(AudioRecordSourceProvider)}.
  */
-@Implements(value = AudioRecord.class, minSdk = LOLLIPOP)
+@Implements(value = AudioRecord.class)
 public final class ShadowAudioRecord {
 
   @RealObject AudioRecord audioRecord;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBackupDataInput.java
Patch:
@@ -4,7 +4,6 @@
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.app.backup.BackupDataInput;
-import android.os.Build.VERSION_CODES;
 import com.google.common.collect.ImmutableList;
 import java.io.FileDescriptor;
 import java.util.ArrayList;
@@ -15,7 +14,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow for BackupDataInput. */
-@Implements(value = BackupDataInput.class, minSdk = VERSION_CODES.LOLLIPOP, looseSignatures = true)
+@Implements(value = BackupDataInput.class, looseSignatures = true)
 public class ShadowBackupDataInput {
 
   private List<BackupDataEntity> entities = new ArrayList<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBackupDataOutput.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.annotation.Nullable;
 import android.app.backup.BackupDataOutput;
-import android.os.Build.VERSION_CODES;
 import com.google.common.collect.ImmutableList;
 import java.io.FileDescriptor;
 import java.util.ArrayList;
@@ -15,7 +14,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow for BackupDataOutput. */
-@Implements(value = BackupDataOutput.class, minSdk = VERSION_CODES.LOLLIPOP)
+@Implements(value = BackupDataOutput.class)
 public class ShadowBackupDataOutput {
 
   protected static final String KEY_PREFIX_JOINER = ":";

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothAdapter.java
Patch:
@@ -116,7 +116,7 @@ public static void reset() {
     setIsBluetoothSupported(true);
     BluetoothAdapterReflector bluetoothReflector = reflector(BluetoothAdapterReflector.class);
     int apiLevel = RuntimeEnvironment.getApiLevel();
-    if (apiLevel >= VERSION_CODES.LOLLIPOP && apiLevel <= VERSION_CODES.R) {
+    if (apiLevel <= VERSION_CODES.R) {
       bluetoothReflector.setSBluetoothLeAdvertiser(null);
       bluetoothReflector.setSBluetoothLeScanner(null);
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothLeScanner.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static java.util.Collections.unmodifiableList;
@@ -26,7 +25,7 @@
 import org.robolectric.annotation.Implements;
 
 /** Adds Robolectric support for BLE scanning. */
-@Implements(value = BluetoothLeScanner.class, minSdk = LOLLIPOP)
+@Implements(value = BluetoothLeScanner.class)
 public class ShadowBluetoothLeScanner {
   private List<ScanParams> activeScanParams = new ArrayList<>();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCall.java
Patch:
@@ -23,7 +23,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Robolectric test for {@link android.telecom.Call}. */
-@Implements(value = Call.class, minSdk = VERSION_CODES.LOLLIPOP)
+@Implements(value = Call.class)
 public class ShadowCall {
   @RealObject Call realObject;
   private boolean hasSentRttRequest;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraCaptureSessionImpl.java
Patch:
@@ -16,7 +16,6 @@
 /** Shadow class for {@link CameraCaptureSessionImpl} */
 @Implements(
     value = CameraCaptureSessionImpl.class,
-    minSdk = VERSION_CODES.LOLLIPOP,
     isInAndroidSdk = false)
 public class ShadowCameraCaptureSessionImpl {
   @RealObject private CameraCaptureSessionImpl realObject;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraCharacteristics.java
Patch:
@@ -3,15 +3,14 @@
 import android.annotation.Nullable;
 import android.hardware.camera2.CameraCharacteristics;
 import android.hardware.camera2.CameraCharacteristics.Key;
-import android.os.Build.VERSION_CODES;
 import com.google.common.base.Preconditions;
 import java.util.HashMap;
 import java.util.Map;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-@Implements(value = CameraCharacteristics.class, minSdk = VERSION_CODES.LOLLIPOP)
+@Implements(value = CameraCharacteristics.class)
 public class ShadowCameraCharacteristics {
 
   private final Map<Key<?>, Object> charactersKeyToValue = new HashMap<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -1061,7 +1061,6 @@ private Handler getMainHandler(Context context) {
   /** Reflector interface for {@link Instrumentation}'s internals. */
   @ForType(Instrumentation.class)
   public interface _Instrumentation_ {
-    // > JELLY_BEAN_MR1:
     void init(
         ActivityThread thread,
         Context instrContext,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyCursorWindow.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.robolectric.RuntimeEnvironment.castNativePtr;
 
 import android.database.Cursor;
 import android.database.CursorWindow;
@@ -24,8 +23,8 @@ public class ShadowLegacyCursorWindow extends ShadowCursorWindow {
   private static final WindowData WINDOW_DATA = new WindowData();
 
   @Implementation
-  protected static Number nativeCreate(String name, int cursorWindowSize) {
-    return castNativePtr(WINDOW_DATA.create(name, cursorWindowSize));
+  protected static long nativeCreate(String name, int cursorWindowSize) {
+    return WINDOW_DATA.create(name, cursorWindowSize);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -905,7 +905,7 @@ protected void requestFlush(String provider, PendingIntent pendingIntent, int re
   /**
    * Returns the list of {@link LocationRequest} currently registered under the given provider.
    * Clients compiled against the public Android SDK should only use this method on S+, clients
-   * compiled against the system Android SDK may only use this method on Kitkat+.
+   * compiled against the system Android SDK can use this method on any supported SDK.
    *
    * <p>Prior to Android S {@link LocationRequest} equality is not well defined, so prefer using
    * {@link #getLegacyLocationRequests(String)} instead if equality is required for testing.
@@ -1785,8 +1785,8 @@ public int hashCode() {
   }
 
   /**
-   * LocationRequest doesn't exist prior to Kitkat, and is not public prior to S, so a new class is
-   * required to represent it prior to those platforms.
+   * LocationRequest is not public prior to S, so a new class is required to represent it prior to
+   * those platforms.
    */
   public static final class RoboLocationRequest {
     @Nullable private final Object locationRequest;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -9,7 +9,6 @@
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
 import static android.os.Build.VERSION_CODES.TIRAMISU;
-import static org.robolectric.RuntimeEnvironment.castNativePtr;
 
 import android.os.BadParcelableException;
 import android.os.IBinder;
@@ -422,8 +421,8 @@ protected static IBinder nativeReadStrongBinder(long nativePtr) {
 
   @Implementation
   @HiddenApi
-  public static Number nativeCreate() {
-    return castNativePtr(NATIVE_BYTE_BUFFER_REGISTRY.register(new ByteBuffer()));
+  public static long nativeCreate() {
+    return NATIVE_BYTE_BUFFER_REGISTRY.register(new ByteBuffer());
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRegion.java
Patch:
@@ -3,7 +3,6 @@
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.graphics.Region;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -36,8 +35,8 @@ public boolean equals(Object obj) {
 
   @HiddenApi
   @Implementation
-  protected static Number nativeConstructor() {
-    return RuntimeEnvironment.castNativePtr(nextId++);
+  protected static long nativeConstructor() {
+    return nextId++;
   }
 
   @ForType(Region.class)

File: integration_tests/ctesque/src/sharedTest/java/android/graphics/BitmapTest.java
Patch:
@@ -1,6 +1,5 @@
 package android.graphics;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.P;
@@ -654,8 +653,6 @@ public void setColorSpace() {
     assertThat(bitmap.getColorSpace()).isEqualTo(ColorSpace.get(ColorSpace.Named.ADOBE_RGB));
   }
 
-  @SdkSuppress(minSdkVersion = LOLLIPOP)
-  @Config(minSdk = LOLLIPOP)
   @Test
   public void bitmapDrawable_mutate() {
     BitmapDrawable drawable1 = (BitmapDrawable) resources.getDrawable(R.drawable.an_image);

File: integration_tests/dependency-on-stubs/src/test/java/org/robolectric/LoadWeirdClassesTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.content.pm.PackageInfo;
@@ -17,7 +16,7 @@
 public class LoadWeirdClassesTest {
 
   @Test
-  @Config(sdk = KITKAT)
+  @Config(sdk = Config.OLDEST_SDK)
   public void shouldLoadDisplay() {
     ReflectionHelpers.callInstanceMethod(
         Display.class, ShadowDisplay.getDefaultDisplay(), "getDisplayAdjustments");

File: nativeruntime/src/test/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLazyLoadTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.nativeruntime;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.app.Application;
@@ -13,7 +12,7 @@
 import org.robolectric.versioning.AndroidVersions.U;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(minSdk = KITKAT, maxSdk = U.SDK_INT)
+@Config(minSdk = Config.OLDEST_SDK, maxSdk = U.SDK_INT)
 public final class DefaultNativeRuntimeLazyLoadTest {
 
   /**

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -17,7 +17,6 @@
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkProvider;
 import org.robolectric.util.Util;
-import org.robolectric.versioning.AndroidVersions.K;
 import org.robolectric.versioning.AndroidVersions.L;
 import org.robolectric.versioning.AndroidVersions.LMR1;
 import org.robolectric.versioning.AndroidVersions.M;
@@ -62,7 +61,6 @@ public DefaultSdkProvider(DependencyResolver dependencyResolver) {
   }
 
   protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
-    knownSdks.put(K.SDK_INT, new DefaultSdk(K.SDK_INT, "4.4_r1", "r2", "REL", 8));
     knownSdks.put(L.SDK_INT, new DefaultSdk(L.SDK_INT, "5.0.2_r3", "r0", "REL", 8));
     knownSdks.put(LMR1.SDK_INT, new DefaultSdk(LMR1.SDK_INT, "5.1.1_r9", "r2", "REL", 8));
     knownSdks.put(M.SDK_INT, new DefaultSdk(M.SDK_INT, "6.0.1_r3", "r1", "REL", 8));

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -317,7 +317,7 @@ public void testWithLatest() {
   public static class TestMethodWithSdkAndMinMax {
     @Config(sdk = M, minSdk = M, maxSdk = N)
     @Test
-    public void testWithKitKatAndLollipop() {
+    public void testWithSdkRange() {
       assertThat(Build.VERSION.SDK_INT).isIn(Range.closed(M, N));
     }
   }

File: robolectric/src/test/java/org/robolectric/shadows/MediaCodecInfoBuilderTest.java
Patch:
@@ -4,7 +4,6 @@
 import static android.media.MediaFormat.MIMETYPE_AUDIO_OPUS;
 import static android.media.MediaFormat.MIMETYPE_VIDEO_AVC;
 import static android.media.MediaFormat.MIMETYPE_VIDEO_VP9;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
@@ -23,7 +22,6 @@
 
 /** Tests for {@link MediaCodecInfoBuilder}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class MediaCodecInfoBuilderTest {
 
   private static final String AAC_ENCODER_NAME = "test.encoder.aac";
@@ -365,7 +363,6 @@ public void buildWithoutSettingNameThrowsException() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void mediaCodecInfo_preQ() {
     if (RuntimeEnvironment.getApiLevel() <= M) {
       MediaCodecList.getCodecCount();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.P;
@@ -107,7 +106,6 @@ public void shouldNotHaveInfiniteLoopWithDifferentLoopedChildren() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldRecordFlagsProperly() {
     node = AccessibilityNodeInfo.obtain();
     node.setClickable(false);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -10,10 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowAccessibilityWindowInfoTest {
   private ShadowAccessibilityWindowInfo shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.truth.Truth.assertThat;
@@ -829,7 +828,6 @@ public void addAccount_withNoAuthenticatorForType_throwsExceptionInGetResult() t
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void addPreviousAccount() {
     Account account = new Account("name_a", "type_a");
     shadowOf(am).setPreviousAccountName(account, "old_name");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -4,7 +4,6 @@
 import static android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE;
 import static android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_GONE;
 import static android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.P;
@@ -93,7 +92,6 @@ public void getRunningTasks_shouldReturnTaskList() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void getAppTasks_shouldReturnAppTaskList() {
     final AppTask task1 = ShadowAppTask.newInstance();
     final AppTask task2 = ShadowAppTask.newInstance();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
@@ -520,7 +519,6 @@ public void shouldCallFinishOnFinishAffinity() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldCallFinishOnFinishAndRemoveTask() {
     Activity activity = new Activity();
     activity.finishAndRemoveTask();
@@ -1312,7 +1310,6 @@ public void getCallingPackage_returnsValueSetInActivity() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void lockTask() {
     Activity activity = Robolectric.setupActivity(Activity.class);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -29,7 +28,6 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.android.CustomView;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowAlertDialogTest {
@@ -136,7 +134,6 @@ public void shouldSetView() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldSetView_withLayoutId() {
     AlertDialog.Builder builder = new AlertDialog.Builder(getApplication());
     builder.setView(R.layout.custom_layout);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppTaskTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -12,10 +11,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowAppTaskTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
@@ -140,7 +139,6 @@ public void shouldProvideServicesIntroducedInKitKat() throws Exception {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldProvideServicesIntroducedInLollipop() throws Exception {
     assertThat(context.getSystemService(Context.MEDIA_SESSION_SERVICE))
         .isInstanceOf(MediaSessionManager.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
@@ -1233,7 +1232,6 @@ public void isAnyAudioPolicyRegistered_afterPolicyRegisteredAndUnregistered_retu
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void generateAudioSessionId_returnsPositiveValues() {
     int audioSessionId = audioManager.generateAudioSessionId();
     int audioSessionId2 = audioManager.generateAudioSessionId();
@@ -1243,7 +1241,6 @@ public void generateAudioSessionId_returnsPositiveValues() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void generateAudioSessionId_returnsDistinctValues() {
     int audioSessionId = audioManager.generateAudioSessionId();
     int audioSessionId2 = audioManager.generateAudioSessionId();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioRecordTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.media.AudioPort.ROLE_SOURCE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
 import static java.lang.Math.min;
@@ -27,7 +26,6 @@
 
 /** Tests for {@link ShadowAudioRecord}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowAudioRecordTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioTrackTest.java
Patch:
@@ -3,7 +3,6 @@
 import static android.media.AudioTrack.ERROR_BAD_VALUE;
 import static android.media.AudioTrack.WRITE_BLOCKING;
 import static android.media.AudioTrack.WRITE_NON_BLOCKING;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.Q;
@@ -34,7 +33,6 @@
 
 /** Tests for {@link ShadowAudioTrack}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowAudioTrackTest implements ShadowAudioTrack.OnAudioDataWrittenListener {
 
   private static final int SAMPLE_RATE_IN_HZ = 44100;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBatteryManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.P;
 import static com.google.common.truth.Truth.assertThat;
@@ -17,7 +16,6 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowBatteryManagerTest {
   private BatteryManager batteryManager;
   private ShadowBatteryManager shadowBatteryManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothDeviceTest.java
Patch:
@@ -614,7 +614,6 @@ public void setSilenceMode_shouldBeSaved() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.KITKAT_WATCH)
   public void setDeviceConnected_isConnected() {
     shadowOf(application).grantPermissions(BLUETOOTH_CONNECT);
     BluetoothDevice device = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(MOCK_MAC_ADDRESS);
@@ -625,7 +624,6 @@ public void setDeviceConnected_isConnected() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.KITKAT_WATCH)
   public void setDeviceNotConnected_isNotConnected() {
     shadowOf(application).grantPermissions(BLUETOOTH_CONNECT);
     BluetoothDevice device = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(MOCK_MAC_ADDRESS);
@@ -636,7 +634,6 @@ public void setDeviceNotConnected_isNotConnected() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.KITKAT_WATCH)
   public void notSetDeviceNotConnected_isNotConnectedByDefault() {
     shadowOf(application).grantPermissions(BLUETOOTH_CONNECT);
     BluetoothDevice device = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(MOCK_MAC_ADDRESS);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothLeScannerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.truth.Truth.assertThat;
@@ -31,7 +30,6 @@
 
 /** Unit tests for {@link ShadowBluetoothLeScanner}. */
 @RunWith(RobolectricTestRunner.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowBluetoothLeScannerTest {
   private BluetoothAdapter adapter;
   private BluetoothLeScanner bluetoothLeScanner;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDebugTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
@@ -46,7 +45,6 @@ public void startStopTracingShouldWriteFile() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void startStopTracingSamplingShouldWriteFile() {
     Debug.startMethodTracingSampling(TRACE_FILENAME, 100, 100);
     Debug.stopMethodTracing();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.Q;
@@ -91,7 +90,6 @@ public void changedStateShouldApplyToOtherInstancesOfSameDisplay() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void stateChangeShouldApplyToOtherInstancesOfSameDisplay_postKitKatFields() {
     shadow.setState(Display.STATE_DOZE_SUSPEND);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.S;
@@ -22,7 +21,6 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowJobSchedulerTest {
 
   private JobScheduler jobScheduler;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobServiceTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -16,7 +15,6 @@
 
 /** Robolectric test for {@link ShadowJobService}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowJobServiceTest {
   private JobService jobService;
   @Mock private JobParameters params;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocaleDataTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.R;
@@ -154,7 +153,6 @@ public void shouldSupportLocaleEn_US_since_m() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldSupportLocaleEn_US_since_lollipop() {
     LocaleData localeData = LocaleData.get(Locale.US);
     LocaleDataReflector localeDataReflector = reflector(LocaleDataReflector.class, localeData);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMatrixTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.graphics.Matrix;
@@ -9,7 +8,6 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(AndroidJUnit4.class)
@@ -111,7 +109,6 @@ public void testIsIdentity() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void testIsAffine() {
     final Matrix matrix = new Matrix();
     assertThat(matrix.isAffine()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaCodecTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.Arrays.copyOfRange;
 import static java.util.Collections.max;
@@ -33,13 +32,11 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.verification.VerificationMode;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowMediaCodec.CodecConfig;
 import org.robolectric.shadows.ShadowMediaCodec.CodecConfig.Codec;
 
 /** Tests for {@link ShadowMediaCodec}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public final class ShadowMediaCodecTest {
   private static final String AUDIO_MIME = "audio/fake";
   private static final String AUDIO_DECODER_NAME = "audio-fake.decoder";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkCapabilitiesTest.java
Patch:
@@ -6,7 +6,6 @@
 import static android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED;
 import static android.net.NetworkCapabilities.TRANSPORT_CELLULAR;
 import static android.net.NetworkCapabilities.TRANSPORT_WIFI;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
@@ -26,7 +25,6 @@
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowNetworkCapabilitiesTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
@@ -16,7 +15,6 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowNetworkTest {
   @Test
   public void getNetId_shouldReturnConstructorNetId() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOutlineTest.java
Patch:
@@ -1,16 +1,13 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.graphics.Outline;
 import android.graphics.Path;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowOutlineTest {
 
     @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.S;
 import static android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE;
@@ -36,7 +35,6 @@
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowPackageInstallerTest {
 
   private PackageInstaller packageInstaller;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPorterDuffColorFilterTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.truth.Truth.assertThat;
 
@@ -13,7 +12,6 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowPorterDuffColorFilterTest {
   @Test
   public void constructor_shouldWork() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRankingTest.java
Patch:
@@ -16,7 +16,6 @@
 
 /** Test for {@link ShadowRanking}. */
 @RunWith(RobolectricTestRunner.class)
-@Config(minSdk = VERSION_CODES.KITKAT_WATCH)
 public class ShadowRankingTest {
   private Ranking ranking;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRenderNodeAnimatorTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
@@ -15,10 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowRenderNodeAnimatorTest {
   private Activity activity;
   private View view;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRenderNodeTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.util.ReflectionHelpers.callInstanceMethod;
@@ -16,15 +15,13 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
 /**
  * Android-Q only test for {@code RenderNode}'s shadow for both pre-Q & Q (where the latter's {@code
  * RenderNode} was moved to a public API to open access to it.
  */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public final class ShadowRenderNodeTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRestrictionsManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -14,10 +13,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public final class ShadowRestrictionsManagerTest {
 
   private RestrictionsManager restrictionsManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.google.common.truth.TruthJUnit.assume;
@@ -27,13 +26,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.robolectric.annotation.SQLiteMode;
 import org.robolectric.shadows.util.SQLiteLibraryLoader;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 @SQLiteMode(LEGACY) // This test relies on legacy SQLite behavior in Robolectric.
 public class ShadowSQLiteConnectionTest {
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSettingsTest.java
Patch:
@@ -3,14 +3,14 @@
 import static android.location.LocationManager.GPS_PROVIDER;
 import static android.location.LocationManager.NETWORK_PROVIDER;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static android.provider.Settings.Secure.LOCATION_MODE;
 import static android.provider.Settings.Secure.LOCATION_MODE_BATTERY_SAVING;
 import static android.provider.Settings.Secure.LOCATION_MODE_HIGH_ACCURACY;
 import static android.provider.Settings.Secure.LOCATION_MODE_OFF;
 import static android.provider.Settings.Secure.LOCATION_MODE_SENSORS_ONLY;
 import static com.google.common.truth.Truth.assertThat;
+import static org.robolectric.annotation.Config.OLDEST_SDK;
 import static org.robolectric.shadows.ShadowLooper.idleMainLooper;
 
 import android.animation.ValueAnimator;
@@ -172,7 +172,7 @@ public void testSetInstallNonMarketApps_settingsGlobal_false() {
         .isEqualTo(0);
   }
 
-  @Config(minSdk = LOLLIPOP, maxSdk = O) // TODO(christianw) fix location mode
+  @Config(minSdk = OLDEST_SDK, maxSdk = O) // TODO(christianw) fix location mode
   @Test
   public void locationProviders_affectsLocationMode() {
     // Verify default values
@@ -200,7 +200,7 @@ public void locationProviders_affectsLocationMode() {
     assertThat(Secure.getInt(contentResolver, LOCATION_MODE, -1)).isEqualTo(LOCATION_MODE_OFF);
   }
 
-  @Config(minSdk = LOLLIPOP, maxSdk = O) // TODO(christianw) fix location mode
+  @Config(minSdk = OLDEST_SDK, maxSdk = O) // TODO(christianw) fix location mode
   @Test
   public void locationMode_affectsLocationProviders() {
     // Verify the default value

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSoundPoolTest.java
Patch:
@@ -14,14 +14,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSoundPool.Playback;
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowSoundPoolTest {
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldCreateSoundPool_Lollipop() {
     SoundPool soundPool = new SoundPool.Builder().build();
     assertThat(soundPool).isNotNull();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceTextureTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.graphics.Rect;
@@ -13,15 +12,13 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 /** Tests for {@link ShadowSurfaceTexture}. */
 @RunWith(AndroidJUnit4.class)
 public class ShadowSurfaceTextureTest {
   private final SurfaceTexture surfaceTexture = new SurfaceTexture(0);
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void surfaceUnlockAndPost_callsBackListener() throws Exception {
     final AtomicBoolean frameCallback = new AtomicBoolean(false);
     CountDownLatch latch = new CountDownLatch(1);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
@@ -45,7 +44,6 @@
 import org.robolectric.shadows.testing.TestConnectionService;
 
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowTelecomManagerTest {
 
   @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -1,12 +1,12 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O_MR1;
 import static android.os.Build.VERSION_CODES.P;
 import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.Shadows.shadowOf;
+import static org.robolectric.annotation.Config.OLDEST_SDK;
 
 import android.graphics.Typeface;
 import android.graphics.fonts.Font;
@@ -146,7 +146,7 @@ public void hashCode_robotoAndDroid_shouldNotBeEqual() {
 
   /** Check that there is no spurious error message about /system/etc/fonts.xml */
   @Test
-  @Config(minSdk = LOLLIPOP, maxSdk = O_MR1)
+  @Config(minSdk = OLDEST_SDK, maxSdk = O_MR1)
   public void init_shouldNotComplainAboutSystemFonts() {
     ShadowLog.clear();
     ReflectionHelpers.callStaticMethod(Typeface.class, "init");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUsageStatsManagerTest.java
Patch:
@@ -3,7 +3,6 @@
 import static android.app.usage.UsageStatsManager.INTERVAL_DAILY;
 import static android.app.usage.UsageStatsManager.INTERVAL_WEEKLY;
 import static android.content.Context.USAGE_STATS_SERVICE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Build.VERSION_CODES.TIRAMISU;
 import static com.google.common.truth.Truth.assertThat;
@@ -38,7 +37,6 @@
 
 /** Test for {@link ShadowUsageStatsManager}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = LOLLIPOP)
 public class ShadowUsageStatsManagerTest {
 
   private static final String TEST_PACKAGE_NAME1 = "com.company1.pkg1";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUsbRequestTest.java
Patch:
@@ -63,7 +63,6 @@ public void tearDown() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void initialize() {
     UsbDeviceConnection usbDeviceConnection = usbManager.openDevice(usbDevice);
     UsbInterface usbInterface = selectInterface(usbDevice);
@@ -73,7 +72,6 @@ public void initialize() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void queue() {
     UsbDeviceConnection usbDeviceConnection = usbManager.openDevice(usbDevice);
     UsbInterface usbInterface = selectInterface(usbDevice);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.content.Context.WIFI_SERVICE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.RuntimeEnvironment.getApplication;
 import static org.robolectric.Shadows.shadowOf;
@@ -14,7 +13,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowWifiInfoTest {
@@ -95,7 +93,6 @@ public void shouldReturnLinkSpeed() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void shouldReturnFrequency() {
     WifiInfo wifiInfo = wifiManager.getConnectionInfo();
     assertThat(wifiInfo.getFrequency()).isEqualTo(-1);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiManagerTest.java
Patch:
@@ -627,7 +627,6 @@ public void connect_setsConnectionInfo() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
   public void is5GhzBandSupportedAndConfigurable() {
     assertThat(wifiManager.is5GHzBandSupported()).isFalse();
     shadowOf(wifiManager).setIs5GHzBandSupported(true);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -429,7 +429,7 @@ protected void setSource(View root, int virtualDescendantId) {
     this.view = root;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected AccessibilityWindowInfo getWindow() {
     return accessibilityWindowInfo;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityService.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
@@ -75,7 +74,7 @@ public final void setSystemActions(
    * the values provided to {@link #setWindows(List<AccessibilityWindowInfo>)}. Returns an empty
    * list if not set.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected List<AccessibilityWindowInfo> getWindows() {
     List<AccessibilityWindowInfo> windowInfos = windows.get(Display.DEFAULT_DISPLAY);
     if (windowInfos != null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_GONE;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.P;
@@ -112,7 +111,7 @@ protected List<ActivityManager.RunningTaskInfo> getRunningTasks(int maxNum) {
    * @see #setAppTasks(List)
    * @return List of current AppTask.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected List<ActivityManager.AppTask> getAppTasks() {
     return appTasks;
   }
@@ -294,7 +293,7 @@ protected int getLockTaskModeState() {
     return lockTaskModeState;
   }
 
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected boolean isInLockTaskMode() {
     return getLockTaskModeState() != ActivityManager.LOCK_TASK_MODE_NONE;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlarmManager.java
Patch:
@@ -204,7 +204,7 @@ protected void setExact(
   }
 
   @RequiresApi(VERSION_CODES.LOLLIPOP)
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected void setAlarmClock(AlarmClockInfo info, PendingIntent operation) {
     setImpl(RTC_WAKEUP, info.getTriggerTime(), WINDOW_EXACT, 0L, operation, null, info, true);
   }
@@ -356,7 +356,7 @@ protected boolean canScheduleExactAlarms() {
   }
 
   @RequiresApi(VERSION_CODES.LOLLIPOP)
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   @Nullable
   protected AlarmClockInfo getNextAlarmClock() {
     synchronized (scheduledAlarms) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlertController.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.view.LayoutInflater;
@@ -64,7 +63,7 @@ public void setView(View view) {
     reflector(AlertControllerReflector.class, realAlertController).setView(view);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   public void setView(int resourceId) {
     setView(LayoutInflater.from(RuntimeEnvironment.getApplication()).inflate(resourceId, null));
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppOpsManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.P;
 import static android.os.Build.VERSION_CODES.Q;
@@ -492,7 +491,7 @@ protected void checkPackage(int uid, String packageName) {
    *
    * <p>This method is public for testing, as the original method is {@code @hide}.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   @HiddenApi
   public void setRestriction(
       int code, @AttributeUsage int usage, int mode, String[] exceptionPackages) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
@@ -977,7 +976,7 @@ public void removeOutputDeviceWithDirectProfiles(AudioDeviceInfo outputDevice) {
    * returning positive distinct values, or {@link AudioManager#ERROR} if all possible values have
    * already been returned.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected int generateAudioSessionId() {
     if (audioSessionIdCounter < 0) {
       return AudioManager.ERROR;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -4,7 +4,6 @@
 import static android.media.AudioTrack.ERROR_DEAD_OBJECT;
 import static android.media.AudioTrack.WRITE_BLOCKING;
 import static android.media.AudioTrack.WRITE_NON_BLOCKING;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.P;
@@ -358,7 +357,7 @@ protected PlaybackParams getPlaybackParams() {
    * properly created). Do not block even if {@link AudioTrack} in offload mode is in STOPPING play
    * state. This method returns immediately even with {@link AudioTrack#WRITE_BLOCKING}
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected int write(@NonNull ByteBuffer audioData, int sizeInBytes, @WriteMode int writeMode) {
     int encoding = audioTrack.getAudioFormat();
     // Assume that offload support does not change during the lifetime of the instance.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBackupManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 
 import android.app.backup.BackupManager;
@@ -75,14 +74,14 @@ public int getDataChangedCount() {
     return serviceState.dataChangedCount.getOrDefault(context.getPackageName(), 0);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   @HiddenApi // SystemApi
   protected void setBackupEnabled(boolean isEnabled) {
     enforceBackupPermission("setBackupEnabled");
     serviceState.backupEnabled = isEnabled;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   @HiddenApi // SystemApi
   protected boolean isBackupEnabled() {
     enforceBackupPermission("isBackupEnabled");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBatteryManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.P;
 
@@ -27,7 +26,7 @@ public void setIsCharging(boolean charging) {
     isCharging = charging;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected int getIntProperty(int id) {
     return intProperties.containsKey(id) ? intProperties.get(id) : Integer.MIN_VALUE;
   }
@@ -36,7 +35,7 @@ public void setIntProperty(int id, int value) {
     intProperties.put(id, value);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected long getLongProperty(int id) {
     return longProperties.containsKey(id) ? longProperties.get(id) : Long.MIN_VALUE;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothAdapter.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.bluetooth.BluetoothAdapter.STATE_ON;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.Q;
@@ -447,7 +446,7 @@ protected int setDiscoverableTimeout(Duration timeout) {
     return BluetoothStatusCodes.SUCCESS;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean isMultipleAdvertisementSupported() {
     return isMultipleAdvertisementSupported;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -2,7 +2,6 @@
 
 import static android.bluetooth.BluetoothDevice.BOND_NONE;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.O_MR1;
@@ -436,7 +435,7 @@ public boolean setSilenceMode(boolean isInSilenceMode) {
     return true;
   }
 
-  @Implementation(minSdk = KITKAT_WATCH)
+  @Implementation
   protected boolean isConnected() {
     return isConnected;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraManager.java
Patch:
@@ -205,14 +205,14 @@ protected CameraDevice openCameraDeviceUserAsync(
     return deviceImpl;
   }
 
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected void registerAvailabilityCallback(
       CameraManager.AvailabilityCallback callback, Handler handler) {
     Preconditions.checkNotNull(callback);
     registeredCallbacks.add(callback);
   }
 
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected void unregisterAvailabilityCallback(CameraManager.AvailabilityCallback callback) {
     Preconditions.checkNotNull(callback);
     registeredCallbacks.remove(callback);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraMetadataNative.java
Patch:
@@ -14,12 +14,12 @@
     maxSdk = Q,
     isInAndroidSdk = false)
 public class ShadowCameraMetadataNative {
-  @Implementation(minSdk = LOLLIPOP, maxSdk = Q)
+  @Implementation(maxSdk = Q)
   protected long nativeAllocate() {
     return 1L;
   }
 
-  @Implementation(minSdk = LOLLIPOP, maxSdk = Q)
+  @Implementation(maxSdk = Q)
   protected long nativeAllocateCopy(CameraMetadataNative other) {
     return 1L;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
@@ -364,7 +363,7 @@ protected boolean bindService(Intent intent, final ServiceConnection serviceConn
   }
 
   /** Binds to a service but ignores the given UserHandle. */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean bindServiceAsUser(
       Intent intent, final ServiceConnection serviceConnection, int i, UserHandle userHandle) {
     return bindService(intent, serviceConnection, i);
@@ -389,7 +388,7 @@ protected void validateServiceIntent(Intent service) {
    * Behaves as {@link android.app.ContextImpl#startActivity(Intent, Bundle)}. The user parameter is
    * ignored.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected void startActivityAsUser(Intent intent, Bundle options, UserHandle user) {
     // TODO: Remove this once {@link com.android.server.wmActivityTaskManagerService} is
     // properly shadowed.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDebug.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 
@@ -57,8 +56,9 @@ protected static void startMethodTracing(String tracePath, int bufferSize) {
     internalStartTracing(fixTracePath(tracePath));
   }
 
-  @Implementation(minSdk = LOLLIPOP)
-  protected static void startMethodTracingSampling(String tracePath, int bufferSize, int intervalUs) {
+  @Implementation
+  protected static void startMethodTracingSampling(
+      String tracePath, int bufferSize, int intervalUs) {
     internalStartTracing(fixTracePath(tracePath));
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInCallAdapter.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.robolectric.util.reflector.Reflector.reflector;
 
-import android.os.Build.VERSION_CODES;
 import android.telecom.CallAudioState;
 import android.telecom.InCallAdapter;
 import org.robolectric.annotation.Implementation;
@@ -20,7 +19,7 @@ public class ShadowInCallAdapter {
 
   private int audioRoute = CallAudioState.ROUTE_EARPIECE;
 
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected void setAudioRoute(int route) {
     audioRoute = route;
     if (isInternalInCallAdapterSet()) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMatrix.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.graphics.Matrix;
 import android.graphics.Matrix.ScaleToFit;
@@ -74,7 +73,7 @@ protected boolean isIdentity() {
     return simpleMatrix.equals(SimpleMatrix.IDENTITY);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean isAffine() {
     return simpleMatrix.isAffine();
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaRecorder.java
Patch:
@@ -3,7 +3,6 @@
 import android.graphics.SurfaceTexture;
 import android.hardware.Camera;
 import android.media.MediaRecorder;
-import android.os.Build.VERSION_CODES;
 import android.view.Surface;
 import com.google.common.base.Preconditions;
 import org.robolectric.annotation.Implementation;
@@ -190,7 +189,7 @@ protected void release() {
     }
   }
 
-  @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
+  @Implementation
   protected Surface getSurface() {
     Preconditions.checkState(
         getVideoSource() == MediaRecorder.VideoSource.SURFACE,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeBitmapFactory.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.P;
 import static android.os.Build.VERSION_CODES.Q;
@@ -101,7 +100,7 @@ protected static Bitmap nativeDecodeAsset(
         nativeAsset, padding, opts, inBitmapHandle, colorSpaceHandle);
   }
 
-  @Implementation(minSdk = LOLLIPOP, maxSdk = P)
+  @Implementation(maxSdk = P)
   protected static Bitmap nativeDecodeAsset(long nativeAsset, Rect padding, Options opts) {
     return nativeDecodeAsset(nativeAsset, padding, opts, nativeInBitmap(opts), 0);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeMatrix.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
 
@@ -32,7 +31,7 @@ protected static void __staticInitializer__() {
     // deferred
   }
 
-  @Implementation(minSdk = LOLLIPOP, maxSdk = N_MR1)
+  @Implementation(maxSdk = N_MR1)
   protected static long native_create(long nSrcOrZero) {
     return nCreate(nSrcOrZero);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedMessage.java
Patch:
@@ -32,7 +32,7 @@ Message internalGetNext() {
 
   // TODO: Reconsider this being exposed as a public method
   @Override
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   public void recycleUnchecked() {
     if (RuntimeEnvironment.getApiLevel() >= LOLLIPOP) {
       reflector(MessageReflector.class, realMessage).recycleUnchecked();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRanking.java
Patch:
@@ -3,7 +3,6 @@
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.app.NotificationChannel;
-import android.os.Build.VERSION_CODES;
 import android.service.notification.NotificationListenerService.Ranking;
 import java.util.ArrayList;
 import org.robolectric.annotation.Implements;
@@ -12,7 +11,7 @@
 import org.robolectric.util.reflector.ForType;
 
 /** Shadow for {@link android.service.notification.NotificationListenerService.Ranking}. */
-@Implements(value = Ranking.class, minSdk = VERSION_CODES.KITKAT_WATCH)
+@Implements(value = Ranking.class)
 public class ShadowRanking {
   @RealObject private Ranking realObject;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRenderNodeAnimator.java
Patch:
@@ -19,7 +19,8 @@
 import org.robolectric.util.reflector.ForType;
 import org.robolectric.util.reflector.Static;
 
-@Implements(value = RenderNodeAnimator.class, isInAndroidSdk = false, minSdk = LOLLIPOP, maxSdk = Q)
+/** Shadow for {@link RenderNodeAnimator}. */
+@Implements(value = RenderNodeAnimator.class, isInAndroidSdk = false, maxSdk = Q)
 public class ShadowRenderNodeAnimator {
   private static final int STATE_FINISHED = 3;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.P;
 import static android.os.Build.VERSION_CODES.Q;
@@ -240,7 +239,7 @@ protected static boolean putInt(ContentResolver cr, String name, int value) {
       return true;
     }
 
-    @Implementation(minSdk = LOLLIPOP)
+    @Implementation
     protected static boolean putIntForUser(
         ContentResolver cr, String name, int value, int userHandle) {
       putInt(cr, name, value);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSmsManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
@@ -317,7 +316,7 @@ public long getMessageId() {
   protected SendMultimediaMessageParams lastSentMultimediaMessageParams;
   protected DownloadMultimediaMessageParams lastDownloadedMultimediaMessageParams;
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected void sendMultimediaMessage(
       Context context,
       Uri contentUri,
@@ -349,7 +348,7 @@ protected void sendMultimediaMessage(
             contentUri, locationUrl, configOverrides, sentIntent, messageId);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected void downloadMultimediaMessage(
       Context context,
       String locationUrl,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStaticLayout.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O_MR1;
@@ -37,7 +36,7 @@ public static void reset() {
   }
 
   @HiddenApi
-  @Implementation(minSdk = LOLLIPOP, maxSdk = LOLLIPOP_MR1)
+  @Implementation(maxSdk = LOLLIPOP_MR1)
   public static int[] nLineBreakOpportunities(
       String locale, char[] text, int length, int[] recycle) {
     return new int[] {-1};

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
@@ -436,7 +435,7 @@ public void setNetworkOperatorNameForPhone(
     setNetworkOperatorName(networkOperatorName);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected String getImei() {
     checkReadPhoneStatePermission();
     return imei;
@@ -1199,7 +1198,7 @@ protected List<String> getCarrierPackageNamesForIntentAndPhone(Intent intent, in
     return carrierPackageNames.get(phoneId);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   @HiddenApi
   protected List<String> getCarrierPackageNamesForIntent(Intent intent) {
     return carrierPackageNames.get(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbDeviceConnection.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 
 import android.hardware.usb.UsbDeviceConnection;
@@ -57,7 +56,7 @@ protected boolean releaseInterface(UsbInterface intf) {
    * No-op on Robolectrict. The real implementation would return false on Robolectric and make it
    * impossible to test callers that expect a successful result. Always returns {@code true}.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean setInterface(UsbInterface intf) {
     return true;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVMRuntime.java
Patch:
@@ -25,7 +25,7 @@ public class ShadowVMRuntime {
 
   @Nullable private static String currentInstructionSet = null;
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   public Object newUnpaddedArray(Class<?> klass, int size) {
     return Array.newInstance(klass, size);
   }
@@ -57,7 +57,7 @@ Object getObjectForAddress(long address) {
   /**
    * Returns whether the VM is running in 64-bit mode. Available in Android L+. Defaults to true.
    */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean is64Bit() {
     return ShadowVMRuntime.is64Bit;
   }
@@ -69,7 +69,7 @@ public static void setIs64Bit(boolean is64Bit) {
   }
 
   /** Returns the instruction set of the current runtime. */
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected static String getCurrentInstructionSet() {
     return currentInstructionSet;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualRefBasePtr.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import com.android.internal.util.VirtualRefBasePtr;
 import org.robolectric.annotation.Implementation;
@@ -20,15 +19,15 @@ protected static synchronized <T> T get(long nativePtr, Class<T> clazz) {
     return clazz.cast(NATIVE_REGISTRY.getNativeObject(nativePtr).nativeThing);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected static synchronized void nIncStrong(long ptr) {
     if (ptr == 0) {
       return;
     }
     NATIVE_REGISTRY.getNativeObject(ptr).incr();
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected static synchronized void nDecStrong(long ptr) {
     if (ptr == 0) {
       return;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.net.wifi.SupplicantState;
@@ -69,7 +68,7 @@ public void setLinkSpeed(int linkSpeed) {
     reflector(WifiInfoReflector.class, realObject).setLinkSpeed(linkSpeed);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   public void setFrequency(int frequency) {
     reflector(WifiInfoReflector.class, realObject).setFrequency(frequency);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
@@ -162,7 +161,7 @@ protected WifiInfo getConnectionInfo() {
     return wifiInfo;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected boolean is5GHzBandSupported() {
     return is5GHzBandSupported;
   }
@@ -264,7 +263,7 @@ protected List<WifiConfiguration> getConfiguredNetworks() {
     return wifiConfigurations;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation
   protected List<WifiConfiguration> getPrivilegedConfiguredNetworks() {
     return getConfiguredNetworks();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -46,7 +46,7 @@ public void methodsShouldReturnAndroidConstants() {
     assertEquals(16, ViewConfiguration.getTouchSlop());
     assertEquals(16, ViewConfiguration.getWindowTouchSlop());
     assertEquals(50, ViewConfiguration.getMinimumFlingVelocity());
-    assertEquals(4000, ViewConfiguration.getMaximumFlingVelocity());
+    assertEquals(8000, ViewConfiguration.getMaximumFlingVelocity());
     assertEquals(480 * 800 * 4, ViewConfiguration.getMaximumDrawingCacheSize());
     assertEquals(3000, ViewConfiguration.getZoomControlsTimeout());
     assertEquals(500, ViewConfiguration.getGlobalActionKeyTimeout());
@@ -62,7 +62,7 @@ public void methodsShouldReturnAndroidConstants() {
     assertEquals(100, viewConfiguration.getScaledDoubleTapSlop());
     assertEquals(16, viewConfiguration.getScaledWindowTouchSlop());
     assertEquals(50, viewConfiguration.getScaledMinimumFlingVelocity());
-    assertEquals(4000, viewConfiguration.getScaledMaximumFlingVelocity());
+    assertEquals(8000, viewConfiguration.getScaledMaximumFlingVelocity());
     // The min value of getScaledMaximumDrawingCacheSize is 480 * 800 * 4.
     assertEquals(480 * 800 * 4, viewConfiguration.getScaledMaximumDrawingCacheSize());
     assertThat(viewConfiguration.isFadingMarqueeEnabled()).isFalse();
@@ -87,7 +87,7 @@ public void methodsShouldReturnScaledAndroidConstantsDependingOnPixelDensity() {
     assertEquals(150, viewConfiguration.getScaledDoubleTapSlop());
     assertEquals(24, viewConfiguration.getScaledWindowTouchSlop());
     assertEquals(75, viewConfiguration.getScaledMinimumFlingVelocity());
-    assertEquals(6000, viewConfiguration.getScaledMaximumFlingVelocity());
+    assertEquals(12000, viewConfiguration.getScaledMaximumFlingVelocity());
     assertThat(viewConfiguration.getScaledOverflingDistance()).isEqualTo(9);
     if (RuntimeEnvironment.getApiLevel() >= Q) {
       assertThat(viewConfiguration.getScaledMinimumScalingSpan()).isEqualTo(255);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -127,6 +127,7 @@ public void getScaledMinimumScalingSpan_largeScreen() {
   @Test
   public void getScaledMinimumScalingSpan_usePreviousBug() {
     System.setProperty("robolectric.useRealMinScalingSpan", "false");
+    ShadowViewConfiguration.reset(); // clear the static cache
     try {
       ViewConfiguration viewConfiguration = ViewConfiguration.get(context);
       assertThat(viewConfiguration.getScaledMinimumScalingSpan()).isEqualTo(0);

File: resources/src/main/java/org/robolectric/res/android/AssetDir.java
Patch:
@@ -20,6 +20,9 @@ public class AssetDir {
  * Vector-style access.
  */
   public int getFileCount() {
+    if (mFileInfo == null) {
+      return 0;
+    }
     return mFileInfo.size();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationManagerTest.java
Patch:
@@ -1224,9 +1224,9 @@ public void testRequestFlush_pendingIntent_canceled() {
   @Test
   public void testSimulateLocation_FastestInterval() {
     Location loc1 = createLocation(MY_PROVIDER);
-    loc1.setTime(1);
+    loc1.setElapsedRealtimeNanos(1000000);
     Location loc2 = createLocation(MY_PROVIDER);
-    loc2.setTime(10);
+    loc2.setElapsedRealtimeNanos(10000000);
 
     TestLocationListener myListener = new TestLocationListener();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -1968,7 +1968,9 @@ public boolean invokeOnLocations(Location... locations) {
       ArrayList<Location> deliverableLocations = new ArrayList<>(locations.length);
       for (Location location : locations) {
         if (lastDeliveredLocation != null) {
-          if (location.getTime() - lastDeliveredLocation.getTime()
+          if (NANOSECONDS.toMillis(
+                  location.getElapsedRealtimeNanos()
+                      - lastDeliveredLocation.getElapsedRealtimeNanos())
               < request.getMinUpdateIntervalMillis()) {
             Log.w(TAG, "location rejected for simulated delivery - too fast");
             continue;

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -46,7 +46,7 @@ public class DefaultSdkProvider implements SdkProvider {
 
   private static final int RUNNING_JAVA_VERSION = Util.getJavaVersion();
 
-  private static final int PREINSTRUMENTED_VERSION = 5;
+  private static final int PREINSTRUMENTED_VERSION = 6;
 
   private final DependencyResolver dependencyResolver;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCompanionDeviceManager.java
Patch:
@@ -282,7 +282,8 @@ private RoboAssociationInfo createShadowAssociationInfo(AssociationInfo info) {
         info.isNotifyOnDeviceNearby(),
         revoked,
         info.getTimeApprovedMs(),
-        info.getLastTimeConnectedMs(),
+        // return value of getLastTimeConnectedMs changed from a long to a Long
+        (long) ReflectionHelpers.callInstanceMethod(info, "getLastTimeConnectedMs"),
         systemDataSyncFlags);
   }
 
@@ -344,7 +345,7 @@ public static Builder builder() {
           .setRevoked(false)
           .setAssociatedDevice(null)
           .setTimeApprovedMs(0)
-          .setLastTimeConnectedMs(0)
+          .setLastTimeConnectedMs(0L)
           .setSystemDataSyncFlags(DEFAULT_SYSTEMDATASYNCFLAGS);
     }
 

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -614,7 +614,7 @@ public String getAppComponentFactory() {
    * <p>Note that if {@link #targetSdkVersion} isn't set, this value changes the behavior of some
    * Android code (notably {@link android.content.SharedPreferences}) to emulate old bugs.
    *
-   * @return the minimum SDK version, or Jelly Bean (16) by default
+   * @return the minimum SDK version, or KitKat (19) by default
    */
   @Override
   public int getMinSdkVersion() {
@@ -629,7 +629,7 @@ public int getMinSdkVersion() {
    * <p>Note that this value changes the behavior of some Android code (notably {@link
    * android.content.SharedPreferences}) to emulate old bugs.
    *
-   * @return the minimum SDK version, or Jelly Bean (16) by default
+   * @return the target SDK version, or KitKat (19) by default
    */
   @Override
   public int getTargetSdkVersion() {

File: shadows/framework/src/main/java/org/robolectric/shadows/AssociationInfoBuilder.java
Patch:
@@ -25,6 +25,7 @@ public class AssociationInfoBuilder {
   // We have two different constructors for AssociationInfo across
   // T branches. aosp has the constructor that takes a new "revoked" parameter.
   private boolean revoked;
+  private boolean pending;
   private long lastTimeConnectedMs;
   private int systemDataSyncFlags;
 
@@ -93,7 +94,7 @@ public AssociationInfoBuilder setRevoked(boolean revoked) {
     this.revoked = revoked;
     return this;
   }
-
+  
   public AssociationInfoBuilder setLastTimeConnectedMs(long lastTimeConnectedMs) {
     this.lastTimeConnectedMs = lastTimeConnectedMs;
     return this;
@@ -192,6 +193,7 @@ public AssociationInfo build() {
             ClassParameter.from(boolean.class, selfManaged),
             ClassParameter.from(boolean.class, notifyOnDeviceNearby),
             ClassParameter.from(boolean.class, revoked),
+            ClassParameter.from(boolean.class, pending),
             ClassParameter.from(long.class, approvedMs),
             ClassParameter.from(long.class, lastTimeConnectedMs),
             ClassParameter.from(int.class, systemDataSyncFlags));

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -1091,6 +1091,7 @@ public static boolean useRealGraphics() {
    * set.
    */
   static boolean useRealScrolling() {
-    return useRealGraphics() || Boolean.getBoolean("robolectric.useRealScrolling");
+    return useRealGraphics()
+        || Boolean.parseBoolean(System.getProperty("robolectric.useRealScrolling", "true"));
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinux.java
Patch:
@@ -83,7 +83,8 @@ protected FileDescriptor open(String path, int flags, int mode) throws ErrnoExce
   @Implementation(minSdk = R)
   protected FileDescriptor memfd_create(String name, int flags) throws ErrnoException {
     try {
-      File tempFile = File.createTempFile(name, /* suffix= */ null);
+      File tempFile = File.createTempFile(name, /* suffix= */ "robo_memfd");
+      tempFile.deleteOnExit();
       RandomAccessFile randomAccessFile = new RandomAccessFile(tempFile, /* mode= */ "rw");
       return randomAccessFile.getFD();
     } catch (IOException e) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayTest.java
Patch:
@@ -42,6 +42,7 @@ public void setUp() throws Exception {
   public void shouldProvideDisplayMetrics() {
     shadow.setDensity(1.5f);
     shadow.setDensityDpi(DisplayMetrics.DENSITY_HIGH);
+    shadow.setScaledDensity(1.6f);
     shadow.setWidth(1024);
     shadow.setHeight(600);
     shadow.setRealWidth(1400);
@@ -56,6 +57,7 @@ public void shouldProvideDisplayMetrics() {
 
     assertEquals(1.5f, metrics.density, 0.05);
     assertEquals(DisplayMetrics.DENSITY_HIGH, metrics.densityDpi);
+    assertEquals(1.6f, metrics.scaledDensity, 0.05);
     assertEquals(1024, metrics.widthPixels);
     assertEquals(600, metrics.heightPixels);
     assertEquals(183.0f, metrics.xdpi, 0.05);
@@ -67,6 +69,7 @@ public void shouldProvideDisplayMetrics() {
 
     assertEquals(1.5f, metrics.density, 0.05);
     assertEquals(DisplayMetrics.DENSITY_HIGH, metrics.densityDpi);
+    assertEquals(1.6f, metrics.scaledDensity, 0.05);
     assertEquals(1400, metrics.widthPixels);
     assertEquals(900, metrics.heightPixels);
     assertEquals(183.0f, metrics.xdpi, 0.05);

File: robolectric/src/main/java/org/robolectric/internal/BuckManifestFactory.java
Patch:
@@ -20,7 +20,8 @@
 public class BuckManifestFactory implements ManifestFactory {
 
   private static final String BUCK_ROBOLECTRIC_RES_DIRECTORIES = "buck.robolectric_res_directories";
-  private static final String BUCK_ROBOLECTRIC_ASSETS_DIRECTORIES = "buck.robolectric_assets_directories";
+  private static final String BUCK_ROBOLECTRIC_ASSETS_DIRECTORIES =
+      "buck.robolectric_assets_directories";
   private static final String BUCK_ROBOLECTRIC_MANIFEST = "buck.robolectric_manifest";
 
   @Override
@@ -83,6 +84,6 @@ private List<Path> getDirectoriesFromProperty(String property) {
     for (String dir : dirs) {
       files.add(Fs.fromUrl(dir));
     }
-    return files;
+    return Collections.unmodifiableList(files);
   }
 }

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -1431,8 +1431,8 @@ void mergeInfoLocked(Ref<SortedVector<AssetDir.FileInfo>> pMergedInfoRef,
         pNewSorted.add(pMergedInfo.itemAt(mergeIdx));
         mergeIdx++;
       } else {
-              /* "cont" is lower, add that one */
-        assert (pContents.itemAt(contIdx).isLessThan(pMergedInfo.itemAt(mergeIdx)));
+        /* "cont" is lower, add that one */
+        assert pContents.itemAt(contIdx).isLessThan(pMergedInfo.itemAt(mergeIdx));
         pNewSorted.add(pContents.itemAt(contIdx));
         contIdx++;
       }

File: resources/src/main/java/org/robolectric/res/android/LocaleData.java
Patch:
@@ -103,7 +103,7 @@ static boolean isRepresentative(int language_and_region, final String script) {
             (((long) script.charAt(1) & 0xff) << 16) |
             (((long) script.charAt(2) & 0xff) << 8) |
             ((long) script.charAt(3) & 0xff));
-    return (REPRESENTATIVE_LOCALES.contains(packed_locale));
+    return REPRESENTATIVE_LOCALES.contains(packed_locale);
   }
 
   private static final int US_SPANISH = 0x65735553; // es-US

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -1210,11 +1210,11 @@ public boolean isBetterThan(
     if (isTruthy(requested)) {
       if (isTruthy(imsi()) || isTruthy(o.imsi())) {
         if ((mcc != o.mcc) && isTruthy(requested.mcc)) {
-          return (isTruthy(mcc));
+          return isTruthy(mcc);
         }
 
         if ((mnc != o.mnc) && isTruthy(requested.mnc)) {
-          return (isTruthy(mnc));
+          return isTruthy(mnc);
         }
       }
 

File: resources/src/main/java/org/robolectric/res/android/ZipFileRO.java
Patch:
@@ -145,7 +145,7 @@ boolean getEntryInfo(org.robolectric.res.android.ZipFileRO.ZipEntryRO entry, Ref
       final Ref<Long> pUncompLen, Ref<Long> pCompLen, Ref<Long> pOffset,
       final Ref<Long> pModWhen, Ref<Long> pCrc32)
   {
-    final ZipEntryRO zipEntry = /*reinterpret_cast<ZipEntryRO*>*/(entry);
+    final ZipEntryRO zipEntry = /*reinterpret_cast<ZipEntryRO*>*/ entry;
     final ZipEntry ze = zipEntry.entry;
 
     if (pMethod != null) {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -41,7 +41,6 @@
  */
 @AutoService(BugChecker.class)
 @BugPattern(
-    name = "DeprecatedMethods",
     summary = "Prefer supported APIs.",
     severity = WARNING,
     documentSuppression = false,

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -49,7 +49,6 @@
  * @author christianw@google.com (Christian Williams)
  */
 @BugPattern(
-    name = "RobolectricShadow",
     summary = "Robolectric @Implementation methods should be protected.",
     severity = SUGGESTION,
     documentSuppression = false,

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -4,7 +4,6 @@
 import static com.google.errorprone.matchers.Description.NO_MATCH;
 import static com.google.errorprone.matchers.Matchers.instanceMethod;
 import static com.google.errorprone.matchers.Matchers.staticMethod;
-import static com.google.errorprone.util.ASTHelpers.hasAnnotation;
 import static org.robolectric.errorprone.bugpatterns.Helpers.isCastableTo;
 import static org.robolectric.errorprone.bugpatterns.Helpers.isInShadowClass;
 
@@ -19,6 +18,7 @@
 import com.google.errorprone.fixes.SuggestedFix;
 import com.google.errorprone.matchers.Description;
 import com.google.errorprone.matchers.method.MethodMatchers.MethodNameMatcher;
+import com.google.errorprone.util.ASTHelpers;
 import com.sun.source.tree.ClassTree;
 import com.sun.source.tree.ImportTree;
 import com.sun.source.tree.MethodInvocationTree;
@@ -127,7 +127,8 @@ public Description matchClass(ClassTree tree, VisitorState state) {
       @Override
       public Void visitClass(ClassTree classTree, VisitorState visitorState) {
         boolean priorInShadowClass = inShadowClass;
-        inShadowClass = hasAnnotation(classTree, Implements.class, visitorState);
+        inShadowClass =
+            ASTHelpers.hasAnnotation(classTree, Implements.class.getName(), visitorState);
         try {
           return super.visitClass(classTree, visitorState);
         } finally {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/Helpers.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.errorprone.bugpatterns;
 
 import static com.google.errorprone.util.ASTHelpers.findEnclosingNode;
-import static com.google.errorprone.util.ASTHelpers.hasAnnotation;
 
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.predicates.TypePredicate;
@@ -14,7 +13,7 @@
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
 import org.robolectric.annotation.Implements;
 
-/** Matchers for {@link ShadowUsageCheck}. */
+/** Matchers for {@link DeprecatedMethodsCheck}. */
 public class Helpers {
 
   /** Match sub-types or implementations of the given type. */
@@ -33,7 +32,7 @@ public static boolean isInShadowClass(TreePath path, VisitorState state) {
         ? (JCClassDecl) leaf
         : findEnclosingNode(state.getPath(), JCClassDecl.class);
 
-    return hasAnnotation(classDecl, Implements.class, state);
+    return ASTHelpers.hasAnnotation(classDecl, Implements.class.getName(), state);
   }
 
   /** Matches implementations of the given interface. */

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/ImageReaderNatives.java
Patch:
@@ -63,6 +63,8 @@ public synchronized native void nativeInit(
   public synchronized native void nativeDiscardFreeBuffers(); // Q+
 
   /**
+   * Setup image in native level.
+   *
    * @return A return code {@code ACQUIRE_*}
    * @see #ACQUIRE_SUCCESS
    * @see #ACQUIRE_NO_BUFS

File: integration_tests/androidx_test/src/main/java/org/robolectric/integrationtests/axt/ActivityWithAppCompatMenu.java
Patch:
@@ -1,10 +1,10 @@
 package org.robolectric.integrationtests.axt;
 
 import android.os.Bundle;
-import androidx.appcompat.app.AppCompatActivity;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
+import androidx.appcompat.app.AppCompatActivity;
 import org.robolectric.integration.axt.R;
 
 /** {@link EspressoWithMenuTest} fixture activity that uses appcompat menu's */

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/ActivityScenarioTest.java
Patch:
@@ -11,9 +11,9 @@
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.os.Looper;
-import androidx.fragment.app.Fragment;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.R;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
 import androidx.lifecycle.Lifecycle.State;
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.core.app.ApplicationProvider;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java
Patch:
@@ -493,7 +493,6 @@ public void setNaturallyPortrait_setLandscapeWhenLandscape_isNotRotated() {
   }
 
   @Test
-  @Config(minSdk = JELLY_BEAN_MR1)
   public void configureDefaultDisplay_calledTwice_showsReasonableException() {
     IllegalStateException e =
         Assert.assertThrows(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelephonyManagerTest.java
Patch:
@@ -50,6 +50,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+import android.os.Build;
 import android.os.PersistableBundle;
 import android.telecom.PhoneAccountHandle;
 import android.telephony.CellInfo;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowDecorator.java
Patch:
@@ -22,7 +22,7 @@ public void decorate(MutableClass mutableClass) {
     mutableClass.addField(
         0,
         new FieldNode(
-            Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,
+            Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_TRANSIENT,
             ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME,
             OBJECT_DESC,
             OBJECT_DESC,

File: sandbox/src/test/java/org/robolectric/internal/bytecode/SandboxClassLoaderTest.java
Patch:
@@ -147,6 +147,7 @@ public void shouldPerformClassLoadAndInstrumentLoadForInstrumentedClasses() thro
     Field roboDataField = exampleClass.getField(ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME);
     assertNotNull(roboDataField);
     assertThat(Modifier.isPublic(roboDataField.getModifiers())).isTrue();
+    assertThat(Modifier.isTransient(roboDataField.getModifiers())).isTrue();
 
     // Java 9 doesn't allow updates to final fields from outside <init> or <clinit>:
     // https://bugs.openjdk.java.net/browse/JDK-8157181

File: annotations/src/main/java/org/robolectric/annotation/Implements.java
Patch:
@@ -71,7 +71,7 @@
    * If set to true, Robolectric will invoke the native method variant instead of the no-op variant.
    * This requires the native method to be bound, or an {@link UnsatisfiedLinkError} will occur.
    *
-   * <p>{@link Implements#callNativeMethodsByDefault()} has precedence over {@link *
+   * <p>{@link Implements#callNativeMethodsByDefault()} has precedence over {@link
    * Implements#callThroughByDefault()} For instance, if both {@link
    * Implements#callNativeMethodsByDefault()} and {@link Implements#callThroughByDefault()} are
    * true, the native method variant will be preferred over the no-op native variant.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothGatt.java
Patch:
@@ -257,7 +257,7 @@ protected BluetoothGattService getService(UUID uuid) {
   @Implementation(minSdk = O)
   protected boolean setCharacteristicNotification(
       BluetoothGattCharacteristic characteristic, boolean enable) {
-    return characteristicNotificationEnableSet.contains(characteristic) == enable;
+    return characteristicNotificationEnableSet.contains(characteristic);
   }
 
   @Implementation(minSdk = O)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeSurface.java
Patch:
@@ -60,7 +60,7 @@ protected static long nativeGetFromBlastBufferQueue(
         surfaceObject, blastBufferQueueNativeObject);
   }
 
-  @Implementation(maxSdk = U.SDK_INT)
+  @Implementation
   protected static long nativeLockCanvas(long nativeObject, Canvas canvas, Rect dirty)
       throws OutOfResourcesException {
     // Do not call the nativeLockCanvas method. It is not implemented, and calling it can

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -20,7 +20,7 @@
 @Implements(value = Bitmap.class, shadowPicker = Picker.class, looseSignatures = true)
 public abstract class ShadowBitmap {
 
-  @RealObject Bitmap realBitmap;
+  @RealObject protected Bitmap realBitmap;
 
   /**
    * Returns a textual representation of the appearance of the object.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyBitmap.java
Patch:
@@ -39,7 +39,6 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.RealObject;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.versioning.AndroidVersions.U;
@@ -55,7 +54,6 @@ public class ShadowLegacyBitmap extends ShadowBitmap {
   InputStream createdFromStream;
   FileDescriptor createdFromFileDescriptor;
   byte[] createdFromBytes;
-  @RealObject private Bitmap realBitmap;
   private Bitmap createdFromBitmap;
   private Bitmap scaledFromBitmap;
   private int createdFromX = -1;

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/BitmapNatives.java
Patch:
@@ -130,5 +130,7 @@ public static native Bitmap nativeWrapHardwareBufferBitmap(
 
   public static native boolean nativeIsBackedByAshmem(long nativePtr);
 
+  public static native void nativeCopyColorSpaceP(long srcBitmap, long dstBitmap);
+
   private BitmapNatives() {}
 }

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLoader.java
Patch:
@@ -75,8 +75,7 @@ public synchronized void ensureLoaded() {
               "loadNativeRuntime",
               () -> {
                 extractDirectory = new TempDirectory("nativeruntime");
-                System.setProperty(
-                    "robolectric.nativeruntime.languageTag", Locale.getDefault().toLanguageTag());
+                System.setProperty("icu.locale.default", Locale.getDefault().toLanguageTag());
                 if (Build.VERSION.SDK_INT >= O) {
                   maybeCopyFonts(extractDirectory);
                 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeBitmap.java
Patch:
@@ -443,7 +443,7 @@ protected static Bitmap nativeCreateFromParcel(Parcel p) {
 
   @Implementation(minSdk = O, maxSdk = P)
   protected static void nativeCopyColorSpace(long srcBitmap, long dstBitmap) {
-    // TODO(hoisie): This probably needs an implementation
+    BitmapNatives.nativeCopyColorSpaceP(srcBitmap, dstBitmap);
   }
 
   @Override

File: integration_tests/nativegraphics/src/test/java/org/robolectric/integrationtests/nativegraphics/ShadowNativeBitmapTest.java
Patch:
@@ -1581,6 +1581,7 @@ public void testSameAs_opaque() {
     assertFalse(bitmap2.sameAs(bitmap1));
   }
 
+  @org.robolectric.annotation.Config(maxSdk = U.SDK_INT) // TODO(hoisie): fix in V and above
   @Test
   public void testSameAs_hardware() {
     Bitmap bitmap1 = BitmapFactory.decodeResource(res, R.drawable.robot, HARDWARE_OPTIONS);

File: integration_tests/nativegraphics/src/test/java/org/robolectric/integrationtests/nativegraphics/ShadowNativePaintTest.java
Patch:
@@ -48,6 +48,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.reflector.ForType;
+import org.robolectric.versioning.AndroidVersions.U;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(minSdk = O)
@@ -1989,6 +1990,7 @@ public void testGetOffsetForAdvance_graphemeCluster() {
     }
   }
 
+  @Config(maxSdk = U.SDK_INT) // TODO(hoisie): fix in V and above
   @Test
   public void testElegantText() {
     final Paint p = new Paint();

File: integration_tests/nativegraphics/src/test/java/org/robolectric/integrationtests/nativegraphics/ShadowNativeRuntimeShaderTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
+import org.robolectric.versioning.AndroidVersions.U;
 
 @Config(minSdk = S)
 @RunWith(AndroidJUnit4.class)
@@ -68,7 +69,8 @@ public void testConstructor() {
             ClassParameter.from(boolean.class, false));
   }
 
-  @Config(minSdk = TIRAMISU)
+  /** {@link #SKSL} does not compile on V and above. */
+  @Config(minSdk = TIRAMISU, maxSdk = U.SDK_INT)
   @Test
   public void testConstructorT() {
     var unused = new RuntimeShader(SKSL);

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -46,7 +46,7 @@ public class DefaultSdkProvider implements SdkProvider {
 
   private static final int RUNNING_JAVA_VERSION = Util.getJavaVersion();
 
-  private static final int PREINSTRUMENTED_VERSION = 4;
+  private static final int PREINSTRUMENTED_VERSION = 5;
 
   private final DependencyResolver dependencyResolver;
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassHandler.java
Patch:
@@ -69,7 +69,7 @@ public interface ClassHandler {
    * @see ShadowInvalidator for invalidating the returned {@link MethodHandle}
    */
   MethodHandle findShadowMethodHandle(
-      Class<?> theClass, String name, MethodType methodType, boolean isStatic)
+      Class<?> theClass, String name, MethodType methodType, boolean isStatic, boolean isNative)
       throws IllegalAccessException;
 
   /**

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricInternals.java
Patch:
@@ -31,9 +31,9 @@ public static MethodHandle getShadowCreator(Class<?> caller) {
   }
 
   public static MethodHandle findShadowMethodHandle(
-      Class<?> theClass, String name, MethodType methodType, boolean isStatic)
+      Class<?> theClass, String name, MethodType methodType, boolean isStatic, boolean isNative)
       throws IllegalAccessException {
-    return classHandler.findShadowMethodHandle(theClass, name, methodType, isStatic);
+    return classHandler.findShadowMethodHandle(theClass, name, methodType, isStatic, isNative);
   }
 
   @SuppressWarnings("UnusedDeclaration")

File: sandbox/src/test/java/org/robolectric/internal/bytecode/SandboxClassLoaderTest.java
Patch:
@@ -625,7 +625,7 @@ private Object invoke(InvocationProfile invocationProfile, Object instance, Obje
 
     @Override
     public MethodHandle findShadowMethodHandle(
-        Class<?> theClass, String name, MethodType type, boolean isStatic)
+        Class<?> theClass, String name, MethodType type, boolean isStatic, boolean isNative)
         throws IllegalAccessException {
       String signature = getSignature(theClass, name, type, isStatic);
       InvocationProfile invocationProfile =

File: shadowapi/src/main/java/org/robolectric/internal/IShadow.java
Patch:
@@ -41,5 +41,7 @@ <R> R invokeConstructor(
 
   String directMethodName(String className, String methodName);
 
+  String directNativeMethodName(String className, String methodName);
+
   void directInitialize(Class<?> clazz);
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -768,7 +768,6 @@ public void applyBatchForUnregisteredProvider()
         new ContentProviderResult[] {
           new ContentProviderResult(1), new ContentProviderResult(1),
         };
-    shadowContentResolver.setContentProviderResult(contentProviderResults);
     Uri uri = Uri.parse("content://org.robolectric");
     ArrayList<ContentProviderOperation> operations = new ArrayList<>();
     operations.add(
@@ -789,7 +788,7 @@ public void applyBatchForUnregisteredProvider()
 
     resultOperations = shadowContentResolver.getContentProviderOperations(AUTHORITY);
     assertThat(resultOperations).isEqualTo(operations);
-    assertThat(result).isEqualTo(contentProviderResults);
+    assertThat(result).isNotNull();
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUiAutomation.java
Patch:
@@ -28,7 +28,6 @@
 import android.os.Build;
 import android.os.IBinder;
 import android.provider.Settings;
-import android.util.Log;
 import android.view.Display;
 import android.view.InputEvent;
 import android.view.KeyEvent;
@@ -144,7 +143,6 @@ protected Bitmap takeScreenshot() throws Exception {
                     Bitmap.createBitmap(
                         rootView.getWidth(), rootView.getHeight(), Bitmap.Config.ARGB_8888);
                 if (HardwareRenderingScreenshot.canTakeScreenshot()) {
-                  Log.d("@@", "@@ USE NEW takeScreenshot"); // RM DEBUG
                   HardwareRenderingScreenshot.takeScreenshot(rootView, window);
                 } else {
                   Canvas windowCanvas = new Canvas(window);

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowMap.java
Patch:
@@ -69,7 +69,7 @@ private ShadowMap(
   }
 
   public boolean hasShadowPicker(MutableClass mutableClass) {
-    return shadowPickers.containsKey(mutableClass.getName().replace('$', '.'));
+    return shadowPickers.containsKey(mutableClass.getName());
   }
 
   public ShadowInfo getShadowInfo(Class<?> clazz, ShadowMatcher shadowMatcher) {

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -621,7 +621,7 @@ public String getAppComponentFactory() {
   @Override
   public int getMinSdkVersion() {
     parseAndroidManifest();
-    return minSdkVersion == null ? 16 : minSdkVersion;
+    return minSdkVersion == null ? 19 : minSdkVersion;
   }
 
   /**

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -231,15 +231,15 @@ public void shouldReadTargetSdkVersionFromAndroidManifestOrDefaultToMin() throws
     assertThat(newConfigWith("minsdk7.xml", "android:minSdkVersion=\"7\"").getTargetSdkVersion())
         .isEqualTo(7);
     assertThat(newConfigWith("noattributes.xml", "").getTargetSdkVersion())
-        .isEqualTo(VERSION_CODES.JELLY_BEAN);
+        .isEqualTo(VERSION_CODES.KITKAT);
   }
 
   @Test
-  public void shouldReadMinSdkVersionFromAndroidManifestOrDefaultToJellyBean() throws Exception {
+  public void shouldReadMinSdkVersionFromAndroidManifestOrDefaultToKitKat() throws Exception {
     assertThat(newConfigWith("minsdk17.xml", "android:minSdkVersion=\"17\"").getMinSdkVersion())
         .isEqualTo(17);
     assertThat(newConfigWith("noattributes.xml", "").getMinSdkVersion())
-        .isEqualTo(VERSION_CODES.JELLY_BEAN);
+        .isEqualTo(VERSION_CODES.KITKAT);
   }
 
   /**

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -278,8 +278,8 @@ public void testAllowTwoNewIncomingCalls() {
   @Test
   public void testAllowNewIncomingCallUsingCustomConnectionService() {
     shadowOf(telecomService).setCallRequestMode(CallRequestMode.ALLOW_ALL);
-    TestConnectionService connectionService = ServiceController.of(
-        new TestConnectionService(), null).create().get();
+    TestConnectionService connectionService =
+        ServiceController.of(new TestConnectionService(), null).create().get();
     shadowOf(telecomService).setConnectionService(connectionService);
 
     PhoneAccountHandle phoneAccount = createHandle("id");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -596,9 +596,9 @@ public UnknownCallRecord getOnlyUnknownCall() {
 
   /**
    * Set connection service.
-   * <p>
-   * This method can be used in case, when you already created connection service
-   * and would like to use it in telecom manager instead of creating new one.
+   *
+   * <p>This method can be used in case, when you already created connection service and would like
+   * to use it in telecom manager instead of creating new one.
    *
    * @param service existing connection service
    */

File: robolectric/src/test/java/org/robolectric/plugins/CustomConfigurerTest.java
Patch:
@@ -112,7 +112,7 @@ private List<String> runAndGetFailures(Class<TestWithConfig> testClass)
     HierarchicalConfigurationStrategy configurationStrategy =
         new HierarchicalConfigurationStrategy(
             new ConfigConfigurer(new PackagePropertiesLoader()),
-            new LooperModeConfigurer(new Properties()),
+            new LooperModeConfigurer(new Properties(), new PackagePropertiesLoader()),
             new SomeConfigConfigurer());
 
     SingleSdkRobolectricTestRunner testRunner = new SingleSdkRobolectricTestRunner(

File: robolectric/src/test/java/org/robolectric/plugins/GraphicsModeConfigurerTest.java
Patch:
@@ -15,7 +15,8 @@ public class GraphicsModeConfigurerTest {
   @Test
   public void defaultConfig() {
     Properties systemProperties = new Properties();
-    GraphicsModeConfigurer configurer = new GraphicsModeConfigurer(systemProperties);
+    GraphicsModeConfigurer configurer =
+        new GraphicsModeConfigurer(systemProperties, new PackagePropertiesLoader());
     assertThat(configurer.defaultConfig()).isSameInstanceAs(Mode.LEGACY);
   }
 }

File: robolectric/src/test/java/org/robolectric/plugins/LazyApplicationConfigurerTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.robolectric.annotation.experimental.LazyApplication.LazyLoad.OFF;
 import static org.robolectric.annotation.experimental.LazyApplication.LazyLoad.ON;
 
+import java.util.Properties;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -12,7 +13,8 @@
 @RunWith(JUnit4.class)
 public class LazyApplicationConfigurerTest {
 
-  private LazyApplicationConfigurer configurer = new LazyApplicationConfigurer();
+  private LazyApplicationConfigurer configurer =
+      new LazyApplicationConfigurer(new Properties(), new PackagePropertiesLoader());
 
   @Test
   public void merge_explicitChildConfigOverridesParent() {

File: robolectric/src/test/java/org/robolectric/plugins/LooperModeConfigurerTest.java
Patch:
@@ -17,7 +17,8 @@ public class LooperModeConfigurerTest {
   @Test
   public void defaultConfig() {
     Properties systemProperties = new Properties();
-    LooperModeConfigurer configurer = new LooperModeConfigurer(systemProperties);
+    LooperModeConfigurer configurer =
+        new LooperModeConfigurer(systemProperties, new PackagePropertiesLoader());
     assertThat(configurer.defaultConfig()).isSameInstanceAs(LooperMode.Mode.PAUSED);
 
     systemProperties.setProperty("robolectric.looperMode", "LEGACY");

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -67,7 +67,6 @@ public void setUp() {
     delegateSdkPicker = new DefaultSdkPicker(sdkCollection, null);
 
     priorResourcesMode = System.getProperty("robolectric.resourcesMode");
-    System.setProperty("robolectric.resourcesMode", "legacy");
 
     priorAlwaysInclude = System.getProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
     System.clearProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
@@ -77,7 +76,6 @@ public void setUp() {
   public void tearDown() throws Exception {
     TestUtil.resetSystemProperty(
         "robolectric.alwaysIncludeVariantMarkersInTestName", priorAlwaysInclude);
-    TestUtil.resetSystemProperty("robolectric.resourcesMode", priorResourcesMode);
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.robolectric.versioning.AndroidVersions.S;
 import org.robolectric.versioning.AndroidVersions.Sv2;
 import org.robolectric.versioning.AndroidVersions.T;
+import org.robolectric.versioning.AndroidVersions.U;
 
 /**
  * Robolectric's default {@link SdkProvider}.
@@ -75,6 +76,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(S.SDK_INT, new DefaultSdk(S.SDK_INT, "12", "7732740", "REL", 9));
     knownSdks.put(Sv2.SDK_INT, new DefaultSdk(Sv2.SDK_INT, "12.1", "8229987", "REL", 9));
     knownSdks.put(T.SDK_INT, new DefaultSdk(T.SDK_INT, "13", "9030017", "Tiramisu", 9));
+    knownSdks.put(U.SDK_INT, new DefaultSdk(U.SDK_INT, "14", "10818077", "REL", 17));
   }
 
   @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVirtualDeviceManagerTest.java
Patch:
@@ -133,8 +133,7 @@ public void testGetSensorCallbacks() {
                 .build());
 
     ShadowVirtualDevice shadowDevice = Shadow.extract(virtualDevice);
-    ShadowVirtualDeviceParams shadowParams = Shadow.extract(shadowDevice.getParams());
-    VirtualSensorCallback retrievedCallback = shadowParams.getVirtualSensorCallback();
+    VirtualSensorCallback retrievedCallback = shadowDevice.getVirtualSensorCallback();
 
     retrievedCallback.onConfigurationChanged(
         virtualDevice.getVirtualSensorList().get(0), true, Duration.ZERO, Duration.ZERO);

File: integration_tests/memoryleaks/src/test/java/org/robolectric/integrationtests/memoryleaks/BaseMemoryLeaksTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.integrationtests.memoryleaks;
 
+import static android.os.Build.VERSION_CODES.N;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.app.Activity;
@@ -145,7 +146,7 @@ public void typedArrayData() {
   }
 
   @Test
-  @Config(sdk = 29)
+  @Config(minSdk = N)
   public void themeObjectInNativeObjectRegistry() {
     final AtomicLong themeId = new AtomicLong(0);
     assertNotLeaking(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVoiceInteractionSessionTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.Q;
-import static android.os.Build.VERSION_CODES.R;
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
@@ -17,10 +16,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
+import org.robolectric.versioning.AndroidVersions;
 
 /** Tests for {@link ShadowVoiceInteractionSession}. */
 @RunWith(AndroidJUnit4.class)
-@Config(sdk = {Q, R, 34})
+@Config(minSdk = Q)
 public class ShadowVoiceInteractionSessionTest {
 
   private VoiceInteractionSession session;
@@ -49,7 +49,7 @@ public void isWindowShowing_afterShow_returnsTrue() {
   }
 
   @Test
-  @Config(minSdk = 34)
+  @Config(minSdk = AndroidVersions.U.SDK_INT)
   public void isWindowShowing_afterShowSdk34_returnsTrue() {
     shadowSession.create();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -1194,7 +1194,8 @@ public static Instrumentation getInstrumentation() {
    * @param runnable a runnable to be executed
    */
   public static void runOnMainSyncNoIdle(Runnable runnable) {
-    if (ShadowLooper.looperMode() == LooperMode.Mode.INSTRUMENTATION_TEST) {
+    if (ShadowLooper.looperMode() == LooperMode.Mode.INSTRUMENTATION_TEST
+        && Looper.myLooper() != Looper.getMainLooper()) {
       checkNotNull(getInstrumentation()).runOnMainSync(runnable);
     } else {
       runnable.run();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -235,6 +235,7 @@ public static void reset() {
     logsByTag.clear();
     tagToLevel.clear();
     wtfIsFatal = false;
+    timeSupplier = null;
   }
 
   @SuppressWarnings("CatchAndPrintStackTrace")

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCompanionDeviceManager.java
Patch:
@@ -135,7 +135,8 @@ protected void associate(String packageName, MacAddress macAddress, byte[] certi
   protected void startObservingDevicePresence(String deviceAddress) {
     lastObservingDevicePresenceDeviceAddress = deviceAddress;
     for (RoboAssociationInfo association : associations) {
-      if (Ascii.equalsIgnoreCase(deviceAddress, association.deviceMacAddress())) {
+      if (association.deviceMacAddress() != null
+          && Ascii.equalsIgnoreCase(deviceAddress, association.deviceMacAddress())) {
         return;
       }
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/PreciseDataConnectionStateBuilder.java
Patch:
@@ -36,7 +36,7 @@ public PreciseDataConnectionStateBuilder setNetworkType(int networkType) {
   }
 
   public PreciseDataConnectionStateBuilder setTransportType(int transportType) {
-    this.transportType = networkType;
+    this.transportType = transportType;
     return this;
   }
 

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -257,8 +257,8 @@ public void shouldReportPerfStats() throws Exception {
     RobolectricTestRunner runner =
         new SingleSdkRobolectricTestRunner(
             TestWithTwoMethods.class,
-            RobolectricTestRunner.defaultInjector()
-                .bind(PerfStatsReporter[].class, new PerfStatsReporter[]{reporter})
+            SingleSdkRobolectricTestRunner.defaultInjector()
+                .bind(PerfStatsReporter[].class, new PerfStatsReporter[] {reporter})
                 .build());
 
     runner.run(notifier);
@@ -275,7 +275,7 @@ public void failedTest_shouldStillReportPerfStats() throws Exception {
     RobolectricTestRunner runner =
         new SingleSdkRobolectricTestRunner(
             TestThatFails.class,
-            RobolectricTestRunner.defaultInjector()
+            SingleSdkRobolectricTestRunner.defaultInjector()
                 .bind(PerfStatsReporter[].class, new PerfStatsReporter[] {reporter})
                 .build());
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -353,6 +353,9 @@ protected interface ViewRootImplReflector {
     @Accessor("mSurface")
     Surface getSurface();
 
+    @Accessor("mWindowAttributes")
+    WindowManager.LayoutParams getWindowAttributes();
+
     // <= JELLY_BEAN
     void dispatchResized(
         int w,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImsMmTelManagerTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadow.api.Shadow;
 
 /** Tests for {@link ShadowImsMmTelManager} */
 @RunWith(RobolectricTestRunner.class)
@@ -33,7 +34,7 @@ public class ShadowImsMmTelManagerTest {
 
   @Before
   public void setup() {
-    shadowImsMmTelManager = new ShadowImsMmTelManager();
+    shadowImsMmTelManager = Shadow.extract(ImsMmTelManager.createForSubscriptionId(5));
   }
 
   @Test
@@ -498,7 +499,6 @@ public void createForSubscriptionId_multipleValidSubscriptionIds_sharesInstances
 
   @Test
   public void getSubscriptionId() {
-    shadowImsMmTelManager.__constructor__(5);
     assertThat(shadowImsMmTelManager.getSubscriptionId()).isEqualTo(5);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -609,7 +609,8 @@ public void startRfcommServer_mutablePendingIntent_throwsIllegalArgumentExceptio
                 PendingIntent.getBroadcast(
                     getApplicationContext(),
                     /* requestCode= */ 0,
-                    new Intent("com.dummy.action.DUMMY_ACTION"),
+                    new Intent("com.dummy.action.DUMMY_ACTION")
+                        .setPackage(getApplicationContext().getPackageName()),
                     /* flags= */ PendingIntent.FLAG_MUTABLE)));
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeFontsFontFamily.java
Patch:
@@ -63,7 +63,7 @@ protected static long nBuild(
       return FontFamilyBuilderNatives.nBuild(builderPtr, langTags, variant, isCustomFallback);
     }
 
-    @Implementation(minSdk = ShadowBuild.UPSIDE_DOWN_CAKE)
+    @Implementation(minSdk = ShadowBuild.UPSIDE_DOWN_CAKE, maxSdk = ShadowBuild.UPSIDE_DOWN_CAKE)
     protected static long nBuild(
         long builderPtr,
         String langTags,

File: shadows/versioning/src/main/java/org/robolectric/versioning/AndroidVersions.java
Patch:
@@ -446,7 +446,7 @@ public static final class V extends AndroidRelease {
 
     public static final String SHORT_CODE = "V";
 
-    public static final String VERSION = "15.0";
+    public static final String VERSION = "15";
   }
 
   /** The current release this process is running on. */

File: shadows/versioning/src/main/java/org/robolectric/versioning/AndroidVersions.java
Patch:
@@ -738,6 +738,9 @@ private static List<String> getActiveCodeNamesIfAny(Class<?> targetClass) {
     try {
       Field activeCodeFields = targetClass.getDeclaredField("ACTIVE_CODENAMES");
       String[] activeCodeNames = (String[]) activeCodeFields.get(null);
+      if (activeCodeNames == null) {
+        return new ArrayList<>();
+      }
       return asList(activeCodeNames);
     } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException ex) {
       return new ArrayList<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/AudioDeviceInfoBuilder.java
Patch:
@@ -30,8 +30,7 @@ public static AudioDeviceInfoBuilder newBuilder() {
    * Sets the device type.
    *
    * @param type The device type. The possible values are the constants defined as <a
-   *     href=https://cs.android.com/android/platform/superproject/+/master:frameworks/base/media/java/android/media/AudioDeviceInfo.java?q=AudioDeviceType>
-   *     {@code AudioDeviceInfo.AudioDeviceType}</a>
+   *     href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/media/java/android/media/AudioDeviceInfo.java?q=AudioDeviceType">AudioDeviceInfo.AudioDeviceType</a>
    */
   public AudioDeviceInfoBuilder setType(int type) {
     this.type = type;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -207,7 +207,7 @@ public void setTasks(List<ActivityManager.RunningTaskInfo> tasks) {
    * Sets the values to be returned by {@link #getAppTasks()}.
    *
    * @see #getAppTasks()
-   * @param tasks List of app tasks.
+   * @param appTasks List of app tasks.
    */
   public void setAppTasks(List<ActivityManager.AppTask> appTasks) {
     this.appTasks.clear();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBiometricManager.java
Patch:
@@ -110,7 +110,7 @@ public void setCanAuthenticate(boolean flag) {
    *
    * @param type to set the authenticatorType
    * @see <a
-   *     href="https://developer.android.com/reference/android/hardware/biometrics/BiometricManager#canAuthenticate(int)"
+   *     href="https://developer.android.com/reference/android/hardware/biometrics/BiometricManager#canAuthenticate(int)">BiometricManager#canAuthenticate(int)</a>
    */
   public void setAuthenticatorType(int type) {
     authenticatorType = type;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessage.java
Patch:
@@ -24,7 +24,8 @@
  * <p>In {@link LooperMode.Mode.LEGACY}, each Message is associated with a Runnable posted to the
  * {@link Scheduler}.
  *
- * @see ShadowLooper, ShadowLegacyMessageQueue
+ * @see ShadowLooper
+ * @see ShadowLegacyMessageQueue
  */
 @Implements(value = Message.class, isInAndroidSdk = false)
 public class ShadowLegacyMessage extends ShadowMessage {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextUtils.java
Patch:
@@ -6,9 +6,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-/**
- * Implement {@lint TextUtils#ellipsize} by truncating the text.
- */
+/** Implement {@link TextUtils#ellipsize} by truncating the text. */
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(TextUtils.class)
 public class ShadowTextUtils {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMatrix.java
Patch:
@@ -426,7 +426,7 @@ private static SimpleMatrix newIdentityMatrix() {
     }
 
     private SimpleMatrix(float[] values) {
-      if (values.length != 9) {
+      if (values.length < 9) {
         throw new ArrayIndexOutOfBoundsException();
       }
       mValues = Arrays.copyOf(values, 9);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -52,7 +52,7 @@ protected String getExtensionFromMimeType(String mimeType) {
     return null;
   }
 
-  public void addExtensionMimeTypMapping(String extension, String mimeType) {
+  public void addExtensionMimeTypeMapping(String extension, String mimeType) {
     extensionToMimeTypeMap.put(extension, mimeType);
     mimeTypeToExtensionMap.put(mimeType, extension);
   }

File: robolectric/src/test/java/org/robolectric/interceptors/AndroidInterceptorsTest.java
Patch:
@@ -27,8 +27,7 @@ public void allMethodRefs() throws Exception {
             new MethodRef("java.util.Locale", "adjustLanguageCode"),
             new MethodRef("java.io.FileDescriptor", "release$"),
             new MethodRef("java.io.FileDescriptor", "getInt$"),
-            new MethodRef("java.io.FileDescriptor", "setInt$"),
-            new MethodRef("javax.crypto.Cipher", "getCurrentSpi"));
+            new MethodRef("java.io.FileDescriptor", "setInt$"));
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/interceptors/AndroidInterceptorsTest.java
Patch:
@@ -27,7 +27,8 @@ public void allMethodRefs() throws Exception {
             new MethodRef("java.util.Locale", "adjustLanguageCode"),
             new MethodRef("java.io.FileDescriptor", "release$"),
             new MethodRef("java.io.FileDescriptor", "getInt$"),
-            new MethodRef("java.io.FileDescriptor", "setInt$"));
+            new MethodRef("java.io.FileDescriptor", "setInt$"),
+            new MethodRef("javax.crypto.Cipher", "getCurrentSpi"));
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -691,7 +691,9 @@ private static boolean isMutable(int flags) {
   public static void reset() {
     synchronized (lock) {
       createdIntents.clear();
+      parceledPendingIntents.clear();
     }
+
   }
 
   @ForType(PendingIntent.class)

File: integration_tests/ctesque/src/sharedTest/java/android/content/res/ResourcesTest.java
Patch:
@@ -5,7 +5,6 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.Q;
-import static android.os.Build.VERSION_CODES.TIRAMISU;
 import static android.util.TypedValue.COMPLEX_UNIT_DIP;
 import static android.util.TypedValue.COMPLEX_UNIT_IN;
 import static android.util.TypedValue.COMPLEX_UNIT_MM;
@@ -506,8 +505,7 @@ public void getIdentifier_nonExistantResource() {
 
   @Test
   @SdkSuppress(minSdkVersion = LOLLIPOP)
-  // TODO: fix on android U
-  @Config(minSdk = LOLLIPOP, maxSdk = TIRAMISU)
+  @Config(minSdk = LOLLIPOP)
   public void getIdentifier_material() {
     int id = Resources.getSystem().getIdentifier("btn_check_material_anim", "drawable", "android");
     assertThat(id).isGreaterThan(0);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVibratorTest.java
Patch:
@@ -16,7 +16,6 @@
 import android.media.AudioAttributes;
 import android.os.VibrationEffect;
 import android.os.Vibrator;
-import android.os.vibrator.PrimitiveSegment;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.ImmutableList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemVibrator.java
Patch:
@@ -25,6 +25,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
+/** Shadow for {@link SystemVibrator}. */
 @Implements(value = SystemVibrator.class, isInAndroidSdk = false, looseSignatures = true)
 public class ShadowSystemVibrator extends ShadowVibrator {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -569,7 +569,7 @@ public ValueCallback<String> getLastEvaluatedJavascriptCallback() {
    *
    * @param canGoBack Value to return from {@code android.webkit.WebView#canGoBack()}
    * @deprecated Do not depend on this method as it will be removed in a future update. The
-   *     preferered method is to populate a fake web history to use for going back.
+   *     preferred method is to populate a fake web history to use for going back.
    */
   @Deprecated
   public void setCanGoBack(boolean canGoBack) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayEventReceiver.java
Patch:
@@ -99,6 +99,7 @@ protected static long nativeInit(
   @Implementation(minSdk = CUR_DEVELOPMENT)
   protected static long nativeInit(
       WeakReference<DisplayEventReceiver> receiver,
+      WeakReference<Object> vsyncEventData,
       MessageQueue msgQueue,
       int vsyncSource,
       int eventRegistration,

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -769,7 +769,7 @@ private ApkAssetsCookie FindEntry(int resid, short density_override,
     out_entry_.type_flags = type_flags;
     out_entry_.type_string_ref = new StringPoolRef(best_package.GetTypeStringPool(), best_type.id - 1);
     out_entry_.entry_string_ref =
-        new StringPoolRef(best_package.GetKeyStringPool(), best_entry.key.index);
+        new StringPoolRef(best_package.GetKeyStringPool(), best_entry.getKeyIndex());
     out_entry_.dynamic_ref_table = package_group.dynamic_ref_table;
     out_entry.set(out_entry_);
     return best_cookie;

File: resources/src/main/java/org/robolectric/res/android/LoadedArsc.java
Patch:
@@ -737,7 +737,8 @@ static LoadedPackage Load(Chunk chunk,
             // for (auto entryIter = entryBegin; entryIter != entry_end; ++entryIter) {
             for (ResTable_lib_entry entryIter = entryBegin;
                 entryIter.myOffset() != entryBegin.myOffset() + dtohl(lib.count);
-                entryIter = new ResTable_lib_entry(entryIter.myBuf(), entryIter.myOffset() + ResTable_lib_entry.SIZEOF)) {
+                entryIter = new ResTable_lib_entry(
+                    entryIter.myBuf(), entryIter.myOffset() + ResTable_lib_entry.SIZEOF)) {
               String package_name =
                   Util.ReadUtf16StringFromDevice(entryIter.packageName,
                       entryIter.packageName.length);

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -350,7 +350,7 @@ void BuildDynamicRefTable() {
         // that compile against the framework.
         for (ConfiguredPackage pkg : iter.packages_) {
           for (Map.Entry<Integer, Integer> entry :
-              pkg.loaded_package_.GetAliasResourceIdMap().entrySet()) {
+              pkg.loaded_package_.getAliasResourceIdMap().entrySet()) {
             iter2.dynamic_ref_table.addAlias(entry.getKey(), entry.getValue());
           }
         }

File: resources/src/main/java/org/robolectric/res/android/DynamicRefTable.java
Patch:
@@ -102,11 +102,11 @@ int lookupResourceId(Ref<Integer> resId) {
     int res = resId.get();
     int packageId = Res_GETPACKAGE(res) + 1;
 
-    Integer alias_id = mAliasId.get(res);
-    if (alias_id != null) {
+    Integer aliasId = mAliasId.get(res);
+    if (aliasId != null) {
       // Rewrite the resource id to its alias resource id. Since the alias resource id is a
       // compile-time id, it still needs to be resolved further.
-      res = alias_id;
+      res = aliasId;
     }
 
     if (packageId == SYS_PACKAGE_ID || (packageId == APP_PACKAGE_ID && !mAppAsLib)) {

File: shadows/framework/src/main/java/org/robolectric/shadows/_Activity_.java
Patch:
@@ -322,6 +322,8 @@ default void callAttach(
 
   void performRestart(boolean start, String reason);
 
+  void performRestart(boolean start);
+
   void performRestoreInstanceState(Bundle savedInstanceState);
 
   void performResume();

File: integration_tests/androidx_test/src/main/java/org/robolectric/integrationtests/axt/EspressoActivity.java
Patch:
@@ -27,6 +27,5 @@ public void onCreate(Bundle savedInstanceState) {
 
     button = findViewById(R.id.button);
     button.setOnClickListener(view -> buttonClicked = true);
-    button.setOnLongClickListener(v -> true);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/SystemFeatureListInitializer.java
Patch:
@@ -24,6 +24,7 @@ public static ImmutableMap<String, Boolean> getSystemFeatures() {
 
     if (apiLevel >= VERSION_CODES.P) {
       features.put(PackageManager.FEATURE_WIFI_DIRECT, true);
+      features.put(PackageManager.FEATURE_WIFI_RTT, true);
     }
 
     return ImmutableMap.copyOf(features);

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -195,7 +195,7 @@ public void setUpApplicationState(
 
     RuntimeEnvironment.setAndroidFrameworkJarPath(sdkJarPath);
     Bootstrap.setDisplayConfiguration(androidConfiguration, displayMetrics);
-    RuntimeEnvironment.setActivityThread(ReflectionHelpers.newInstance(ActivityThread.class));
+    RuntimeEnvironment.setActivityThread(ReflectionHelpers.callConstructor(ActivityThread.class));
     ReflectionHelpers.setStaticField(
         ActivityThread.class, "sMainThreadHandler", new Handler(Looper.myLooper()));
 
@@ -315,7 +315,7 @@ private Application installAndCreateApplication(
       } catch (ClassNotFoundException e) {
         throw new RuntimeException(e);
       }
-      final Object appBindData = ReflectionHelpers.newInstance(appBindDataClass);
+      final Object appBindData = ReflectionHelpers.callConstructor(appBindDataClass);
       final _AppBindData_ _appBindData_ = reflector(_AppBindData_.class, appBindData);
       _appBindData_.setProcessName(parsedPackage.packageName);
       _appBindData_.setAppInfo(applicationInfo);

File: sandbox/src/test/java/org/robolectric/internal/bytecode/SandboxClassLoaderTest.java
Patch:
@@ -103,7 +103,7 @@ public void forClassesWithNoDefaultConstructor_shouldCreateOneButItShouldNotCall
   public void shouldDelegateToHandlerForConstructors() throws Exception {
     Class<?> clazz = loadClass(AClassWithNoDefaultConstructor.class);
     Constructor<?> ctor = clazz.getDeclaredConstructor(String.class);
-    assertTrue(Modifier.isPublic(ctor.getModifiers()));
+    assertThat(Modifier.isPublic(ctor.getModifiers())).isFalse();
     ctor.setAccessible(true);
     Object instance = ctor.newInstance("new one");
     assertThat(transcript)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCamera.java
Patch:
@@ -17,7 +17,6 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.ReflectionHelpers;
 
 @Implements(Camera.class)
 public class ShadowCamera {
@@ -300,7 +299,7 @@ public void initSupportedPreviewSizes() {
 
     /** Add custom preview sizes to supportedPreviewSizes. */
     public void addSupportedPreviewSize(int width, int height) {
-      Camera.Size newSize = ReflectionHelpers.newInstance(Camera.class).new Size(width, height);
+      Camera.Size newSize = newInstanceOf(Camera.class).new Size(width, height);
       supportedPreviewSizes.add(newSize);
     }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -385,16 +385,16 @@ protected LocationProvider getProvider(String name) {
         if (locationProviderConstructor == null) {
           if (RuntimeEnvironment.getApiLevel() >= VERSION_CODES.S) {
             locationProviderConstructor =
-                LocationProvider.class.getConstructor(
+                LocationProvider.class.getDeclaredConstructor(
                     String.class, android.location.provider.ProviderProperties.class);
           } else {
             locationProviderConstructor =
-                LocationProvider.class.getConstructor(
+                LocationProvider.class.getDeclaredConstructor(
                     String.class,
                     Class.forName("com.android.internal.location.ProviderProperties"));
           }
-          locationProviderConstructor.setAccessible(true);
         }
+        locationProviderConstructor.setAccessible(true);
 
         if (RuntimeEnvironment.getApiLevel() >= VERSION_CODES.S) {
           return locationProviderConstructor.newInstance(name, properties.getProviderProperties());

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -44,7 +44,7 @@
 import org.robolectric.annotation.Implements;
 
 /**
- * Ensure Robolectric shadow's method marked with {@code @Implemenetation} is protected
+ * Ensure Robolectric shadow's method marked with {@code @Implementation} is protected
  *
  * @author christianw@google.com (Christian Williams)
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowScrollView.java
Patch:
@@ -16,7 +16,7 @@ public class ShadowScrollView extends ShadowViewGroup {
 
   @Implementation
   protected void smoothScrollTo(int x, int y) {
-    if (useRealGraphics()) {
+    if (useRealScrolling()) {
       reflector(ScrollViewReflector.class, realScrollView).smoothScrollTo(x, y);
     } else {
       scrollTo(x, y);
@@ -25,7 +25,7 @@ protected void smoothScrollTo(int x, int y) {
 
   @Implementation
   protected void smoothScrollBy(int x, int y) {
-    if (useRealGraphics()) {
+    if (useRealScrolling()) {
       reflector(ScrollViewReflector.class, realScrollView).smoothScrollBy(x, y);
     } else {
       scrollBy(x, y);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSpeechRecognizer.java
Patch:
@@ -45,7 +45,7 @@ public class ShadowSpeechRecognizer {
 
   /**
    * Returns the latest SpeechRecognizer. This method can only be called after {@link
-   * SpeechRecognizer#createSpeechRecognizer()} is called.
+   * SpeechRecognizer#createSpeechRecognizer(Context)} is called.
    */
   public static SpeechRecognizer getLatestSpeechRecognizer() {
     return latestSpeechRecognizer;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassInstrumentor.java
Patch:
@@ -49,7 +49,7 @@ public class ClassInstrumentor {
   private static final Handle BOOTSTRAP_STATIC;
   private static final Handle BOOTSTRAP_INTRINSIC;
   private static final String ROBO_INIT_METHOD_NAME = "$$robo$init";
-  static final Type OBJECT_TYPE = Type.getType(Object.class);
+  protected static final Type OBJECT_TYPE = Type.getType(Object.class);
   private static final ShadowImpl SHADOW_IMPL = new ShadowImpl();
   final Decorator decorator;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -162,7 +162,7 @@ public void typeface_customFallbackBuilder_afterReset() throws IOException {
     // This invokes the Typeface static initializer, which creates some default typefaces.
     Typeface.create("roboto", Typeface.BOLD);
     // Call the resetter to clear the FONTS map in Typeface
-    ShadowTypeface.reset();
+    ShadowLegacyTypeface.reset();
     Typeface typeface =
         new Typeface.CustomFallbackBuilder(family).setStyle(font.getStyle()).build();
     assertThat(typeface).isNotNull();

File: sandbox/src/main/java/org/robolectric/config/AndroidConfigurer.java
Patch:
@@ -60,6 +60,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
         .doNotAcquirePackage("jdk.internal.")
         .doNotAcquirePackage("org.junit")
         .doNotAcquirePackage("org.hamcrest")
+        .doNotAcquirePackage("org.objectweb.asm")
         .doNotAcquirePackage("org.robolectric.annotation.")
         .doNotAcquirePackage("org.robolectric.internal.")
         .doNotAcquirePackage("org.robolectric.pluginapi.")
@@ -98,8 +99,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
     }
 
     // Instrumenting these classes causes a weird failure.
-    builder.doNotInstrumentClass("android.R")
-        .doNotInstrumentClass("android.R$styleable");
+    builder.doNotInstrumentClass("android.R").doNotInstrumentClass("android.R$styleable");
 
     builder
         .addInstrumentedPackage("dalvik.")

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -202,7 +202,7 @@ protected static void init() {}
 
   @HiddenApi
   @Implementation(minSdk = Q, maxSdk = R)
-  public static void initSystemDefaultTypefaces(
+  protected static void initSystemDefaultTypefaces(
       Object systemFontMap, Object fallbacks, Object aliases) {}
 
   @Resetter

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/ActivityScenarioTest.java
Patch:
@@ -94,8 +94,8 @@ public void onWindowFocusChanged(boolean hasFocus) {
   public static class LifecycleOwnerActivity extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle bundle) {
-      super.onCreate(bundle);
       setTheme(R.style.Theme_AppCompat);
+      super.onCreate(bundle);
     }
   }
 

File: resources/src/main/java/org/robolectric/res/android/DynamicRefTable.java
Patch:
@@ -179,4 +179,4 @@ public Map<String, Byte> entries() {
   final byte[]                         mLookupTable = new byte[256];
   final Map<String, Byte> mEntries = new HashMap<>();
   boolean                            mAppAsLib;
-};
+}

File: resources/src/main/java/org/robolectric/res/android/ResStringPoolRef.java
Patch:
@@ -12,4 +12,4 @@ class ResStringPoolRef {
     ResStringPoolRef(int index) {
         this.index = index;
     }
-};
+}

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -573,6 +573,7 @@ private Instrumentation createInstrumentation() {
   }
 
   /** Create a file system safe directory path name for the current test. */
+  @SuppressWarnings("DoNotCall")
   private String createTestDataDirRootPath(Method method) {
     return method.getClass().getSimpleName()
         + "_"

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager10.java
Patch:
@@ -1948,4 +1948,4 @@ interface AssetManagerReflector {
     void releaseTheme(long ptr);
   }
 }
-; // namespace android
+// namespace android

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager9.java
Patch:
@@ -1927,4 +1927,4 @@ interface AssetManagerReflector {
     void createSystemAssetsInZygoteLocked();
   }
 }
-; // namespace android
+// namespace android

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyChoreographer.java
Patch:
@@ -34,6 +34,7 @@ public class ShadowLegacyChoreographer extends ShadowChoreographer {
   private static volatile int postCallbackDelayMillis = 0;
   private static volatile int postFrameCallbackDelayMillis = 0;
 
+  @SuppressWarnings("ReturnValueIgnored")
   private static SoftThreadLocal<Choreographer> makeThreadLocal() {
     return new SoftThreadLocal<Choreographer>() {
       @Override

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/CursorWindowNatives.java
Patch:
@@ -25,9 +25,9 @@
  * https://cs.android.com/android/platform/superproject/+/android-11.0.0_r1:frameworks/base/core/java/android/database/CursorWindow.java
  */
 public final class CursorWindowNatives {
-  static {
-    DefaultNativeRuntimeLoader.injectAndLoad();
-  }
+  // static {
+  //   DefaultNativeRuntimeLoader.injectAndLoad();
+  // }
 
   private CursorWindowNatives() {}
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeCursorWindow.java
Patch:
@@ -10,12 +10,15 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.nativeruntime.CursorWindowNatives;
+import org.robolectric.nativeruntime.DefaultNativeRuntimeLoader;
 
 /** Shadow for {@link CursorWindow} that is backed by native code */
 @Implements(value = CursorWindow.class, isInAndroidSdk = false)
 public class ShadowNativeCursorWindow extends ShadowCursorWindow {
+
   @Implementation
   protected static Number nativeCreate(String name, int cursorWindowSize) {
+    DefaultNativeRuntimeLoader.injectAndLoad();
     long result = CursorWindowNatives.nativeCreate(name, cursorWindowSize);
     if (RuntimeEnvironment.getApiLevel() < LOLLIPOP) {
       return PreLPointers.register(result);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeSQLiteConnection.java
Patch:
@@ -13,16 +13,17 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.nativeruntime.DefaultNativeRuntimeLoader;
 import org.robolectric.nativeruntime.SQLiteConnectionNatives;
 import org.robolectric.util.PerfStatsCollector;
 
 /** Shadow for {@link SQLiteConnection} that is backed by native code */
 @Implements(className = "android.database.sqlite.SQLiteConnection", isInAndroidSdk = false)
 public class ShadowNativeSQLiteConnection extends ShadowSQLiteConnection {
-
   @Implementation(maxSdk = O)
   protected static Number nativeOpen(
       String path, int openFlags, String label, boolean enableTrace, boolean enableProfile) {
+    DefaultNativeRuntimeLoader.injectAndLoad();
     return PerfStatsCollector.getInstance()
         .measure(
             "androidsqlite",

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -498,8 +498,6 @@ Context createActivityContext(
         int displayId,
         Configuration overrideConfiguration);
 
-    IBinder getActivityToken();
-
     void setOuterContext(Context context);
 
     @Direct

File: shadows/framework/src/main/java/org/robolectric/shadows/_Activity_.java
Patch:
@@ -9,7 +9,6 @@
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
-import android.os.Binder;
 import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
@@ -177,10 +176,10 @@ default void callAttach(
       Application application,
       Intent intent,
       ActivityInfo activityInfo,
+      IBinder token,
       CharSequence activityTitle,
       @WithType("android.app.Activity$NonConfigurationInstances")
           Object lastNonConfigurationInstances) {
-    Binder token = new Binder();
     int apiLevel = RuntimeEnvironment.getApiLevel();
     if (apiLevel <= Build.VERSION_CODES.KITKAT) {
       attach(

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -509,6 +509,7 @@ public ActivityController<T> configurationChange(
             //  destroying the old activity which will flush the object references from the weak
             //  maps (the side effect otherwise is flaky tests that behave differently based on when
             //  garbage collection last happened to run).
+            //  This should be removed when robolectric.createActivityContexts is enabled.
             System.gc();
 
             // TODO: Pass nonConfigurationInstance here instead of setting

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution.java
Patch:
@@ -66,7 +66,7 @@ public static boolean ResolveAttrs(ResTableTheme theme, int defStyleAttr,
                                      int srcValuesLength, int[] attrs,
                                      int attrsLength, int[] outValues, int[] outIndices) {
     if (kDebugStyles) {
-      ALOGI("APPLY STYLE: theme=0x%p defStyleAttr=0x%x defStyleRes=0x%x", theme,
+      ALOGI("APPLY STYLE: theme=0x%s defStyleAttr=0x%x defStyleRes=0x%x", theme,
           defStyleAttr, defStyleRes);
     }
 

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution10.java
Patch:
@@ -94,7 +94,7 @@ public static boolean ResolveAttrs(Theme theme, int def_style_attr,
             int src_values_length, int[] attrs,
             int attrs_length, int[] out_values, int[] out_indices) {
         if (kDebugStyles) {
-            ALOGI("APPLY STYLE: theme=0x%p defStyleAttr=0x%x defStyleRes=0x%x", theme,
+            ALOGI("APPLY STYLE: theme=0x%s defStyleAttr=0x%x defStyleRes=0x%x", theme,
                     def_style_attr, def_style_res);
         }
 

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution9.java
Patch:
@@ -91,7 +91,7 @@ public static boolean ResolveAttrs(Theme theme, int def_style_attr,
                                      int src_values_length, int[] attrs,
                                      int attrs_length, int[] out_values, int[] out_indices) {
     if (kDebugStyles) {
-      ALOGI("APPLY STYLE: theme=0x%p defStyleAttr=0x%x defStyleRes=0x%x", theme,
+      ALOGI("APPLY STYLE: theme=0x%s defStyleAttr=0x%x defStyleRes=0x%x", theme,
           def_style_attr, def_style_res);
     }
 

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -117,7 +117,7 @@ public int setTo(ByteBuffer buf, int offset, int size, boolean copyData) {
 
     // The chunk must be at least the size of the string pool header.
     if (size < ResStringPool_header.SIZEOF) {
-      ALOGW("Bad string block: data size %zu is too small to be a string block", size);
+      ALOGW("Bad string block: data size %d is too small to be a string block", size);
       return (mError=BAD_TYPE);
     }
 

File: resources/src/main/java/org/robolectric/res/android/ResTable.java
Patch:
@@ -251,7 +251,7 @@ int addInternal(byte[] data, int dataSize, final Object idmapData, int idmapData
     final boolean notDeviceEndian = htods((short) 0xf0) != 0xf0;
 
     if (kDebugLoadTableNoisy) {
-      ALOGV("Adding resources to ResTable: data=%s, size=0x%x, cookie=%d, copy=%d " +
+      ALOGV("Adding resources to ResTable: data=%s, size=0x%x, cookie=%d, copy=%b " +
           "idmap=%s\n", data, dataSize, cookie, copyData, idmapData);
     }
 

File: resources/src/main/java/org/robolectric/res/android/ResXMLParser.java
Patch:
@@ -414,7 +414,7 @@ public int indexOfAttribute(final String ns, int nsLen,
           final String curNs = getAttributeNamespace8(i, curNsLen);
           final String curAttr = getAttributeName8(i, curAttrLen);
           if (kDebugStringPoolNoisy) {
-            ALOGI("  curNs=%s (0x%x), curAttr=%s (0x%x)", curNs, curNsLen, curAttr, curAttrLen);
+            ALOGI("  curNs=%s (0x%x), curAttr=%s (0x%x)", curNs, curNsLen.get(), curAttr, curAttrLen.get());
           }
           if (curAttr != null && curNsLen.get() == nsLen && curAttrLen.get() == attrLen
               && memcmp(attr8.string(), curAttr, attrLen) == 0) {
@@ -449,8 +449,8 @@ && memcmp(attr8.string(), curAttr, attrLen) == 0) {
                 final String curAttr = getAttributeName(i, curAttrLen);
           if (kDebugStringPoolNoisy) {
             ALOGI("  curNs=%s (0x%x), curAttr=%s (0x%x)",
-                curNs /*String8(curNs, curNsLen).string()*/, curNsLen,
-                curAttr /*String8(curAttr, curAttrLen).string()*/, curAttrLen);
+                curNs /*String8(curNs, curNsLen).string()*/, curNsLen.get(),
+                curAttr /*String8(curAttr, curAttrLen).string()*/, curAttrLen.get());
           }
           if (curAttr != null && curNsLen.get() == nsLen && curAttrLen.get() == attrLen
               && (memcmp(attr, curAttr, attrLen*SIZEOF_CHAR/*sizeof(char16_t)*/) == 0)) {

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -16,6 +16,7 @@
 import static android.os.Build.VERSION_CODES.R;
 import static android.os.Build.VERSION_CODES.S;
 import static android.os.Build.VERSION_CODES.S_V2;
+import static android.os.Build.VERSION_CODES.TIRAMISU;
 
 import com.google.auto.service.AutoService;
 import com.google.common.base.Preconditions;
@@ -80,6 +81,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(R, new DefaultSdk(R, "11", "6757853", "REL", 9));
     knownSdks.put(S, new DefaultSdk(S, "12", "7732740", "REL", 9));
     knownSdks.put(S_V2, new DefaultSdk(S_V2, "12.1", "8229987", "REL", 9));
+    knownSdks.put(TIRAMISU, new DefaultSdk(TIRAMISU, "13", "9030017", "Tiramisu", 9));
   }
 
   @Override

File: utils/reflector/src/main/java/org/robolectric/util/reflector/UnsafeAccess.java
Patch:
@@ -49,7 +49,7 @@ private static class DangerPre11 implements Danger {
     }
 
     @Override
-    @SuppressWarnings({"unchecked", "RethrowReflectiveOperationExceptionAsLinkageError"})
+    @SuppressWarnings("unchecked")
     public <T> Class<?> defineClass(Class<T> iClass, String reflectorClassName, byte[] bytecode) {
       // use reflection to call since this method does not exist on JDK11
       try {
@@ -68,6 +68,7 @@ public <T> Class<?> defineClass(Class<T> iClass, String reflectorClassName, byte
     }
   }
 
+  @SuppressWarnings("RethrowReflectiveOperationExceptionAsLinkageError")
   private static class Danger11Plus implements Danger {
     private final Method privateLookupInMethod;
     private final Method defineClassMethod;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothDeviceTest.java
Patch:
@@ -297,7 +297,7 @@ public void getSetAlias() {
       Method getAliasName = android.bluetooth.BluetoothDevice.class.getMethod("getAlias");
       assertThat((String) getAliasName.invoke(device)).isEqualTo(aliasName);
     } catch (ReflectiveOperationException e) {
-      throw new AssertionError("Failure accessing getAlias via reflection", e);
+      throw new LinkageError("Failure accessing getAlias via reflection", e);
     }
   }
 
@@ -313,7 +313,7 @@ public void getAliasName() {
       Method getAliasName = android.bluetooth.BluetoothDevice.class.getMethod("getAliasName");
       assertThat((String) getAliasName.invoke(device)).isEqualTo(aliasName);
     } catch (ReflectiveOperationException e) {
-      throw new AssertionError("Failure accessing getAliasName via reflection", e);
+      throw new LinkageError("Failure accessing getAliasName via reflection", e);
     }
   }
 
@@ -481,7 +481,7 @@ public void getAliasName_aliasNull() {
       // Expect the name if alias is null.
       assertThat((String) getAliasName.invoke(device)).isEqualTo(deviceName);
     } catch (ReflectiveOperationException e) {
-      throw new AssertionError("Failure accessing getAliasName via reflection", e);
+      throw new LinkageError("Failure accessing getAliasName via reflection", e);
     }
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -1479,7 +1479,7 @@ private static AudioDeviceInfo createAudioDeviceInfo(int role) {
       idField.setAccessible(true);
       idField.setInt(handle, /* id= */ 1);
     } catch (ReflectiveOperationException e) {
-      throw new AssertionError(e);
+      throw new LinkageError(e.getMessage(), e);
     }
     return info;
   }

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InvokeDynamicSupport.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.invoke.WrongMethodTypeException;
 import org.robolectric.util.ReflectionHelpers;
 
+@SuppressWarnings("RethrowReflectiveOperationExceptionAsLinkageError")
 public class InvokeDynamicSupport {
   @SuppressWarnings("unused")
   private static Interceptors INTERCEPTORS;

File: utils/reflector/src/main/java/org/robolectric/util/reflector/UnsafeAccess.java
Patch:
@@ -24,6 +24,7 @@ static <T> Class<?> defineClass(Class<T> iClass, String reflectorClassName, byte
     return DANGER.defineClass(iClass, reflectorClassName, bytecode);
   }
 
+  @SuppressWarnings("RethrowReflectiveOperationExceptionAsLinkageError")
   private static class DangerPre11 implements Danger {
     private final Unsafe unsafe;
     private final Method defineClassMethod;
@@ -48,7 +49,7 @@ private static class DangerPre11 implements Danger {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "RethrowReflectiveOperationExceptionAsLinkageError"})
     public <T> Class<?> defineClass(Class<T> iClass, String reflectorClassName, byte[] bytecode) {
       // use reflection to call since this method does not exist on JDK11
       try {

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/DefaultNativeRuntimeLoader.java
Patch:
@@ -46,6 +46,8 @@ public void ensureLoaded() {
                 "loadNativeRuntime",
                 () -> {
                   String libraryName = System.mapLibraryName("robolectric-nativeruntime");
+                  System.setProperty(
+                      "robolectric.nativeruntime.languageTag", Locale.getDefault().toLanguageTag());
                   File tmpLibraryFile =
                       java.nio.file.Files.createTempFile("", libraryName).toFile();
                   tmpLibraryFile.deleteOnExit();

File: pluginapi/src/main/java/org/robolectric/pluginapi/Sdk.java
Patch:
@@ -118,7 +118,6 @@ public int compareTo(@Nonnull Sdk o) {
    * throw org.junit.AssumptionViolatedException to just skip execution of tests on the SDK, with a
    * warning, or throw a RuntimeException to fail the test.
    *
-   * @param testClassName
    */
   public abstract void verifySupportedSdk(String testClassName);
 }

File: resources/src/main/java/org/robolectric/res/android/Util.java
Patch:
@@ -105,7 +105,6 @@ static void logWarning(String s) {
   }
 
   static String ReadUtf16StringFromDevice(char[] src, int len/*, std::string* out*/) {
-    char[] buf = new char[5];
     int i = 0;
     StringBuilder strBuf = new StringBuilder();
     while (src[i] != '\0' && len != 0) {

File: sandbox/src/test/java/org/robolectric/testing/AClassThatCallsAMethodReturningAForgettableClass.java
Patch:
@@ -6,6 +6,7 @@
 @Instrument
 public class AClassThatCallsAMethodReturningAForgettableClass {
   public void callSomeMethod() {
+    @SuppressWarnings("unused")
     AClassToForget forgettableClass = getAForgettableClass();
   }
 

File: shadows/httpclient/src/main/java/org/robolectric/shadows/ShadowAndroidHttpClient.java
Patch:
@@ -21,7 +21,6 @@
 
 @Implements(AndroidHttpClient.class)
 public class ShadowAndroidHttpClient {
-  @RealObject private AndroidHttpClient client;
 
   private HttpClient httpClient = new DefaultHttpClient();
 

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integrationtests/mockito/experimental/MockitoMockJavaFrameworkTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.mockito.Mockito.mock;
 
 import java.io.File;
+import java.nio.charset.StandardCharsets;
 import javax.crypto.Cipher;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -23,7 +24,7 @@ public void file_getAbsolutePath_isMockable() throws Exception {
   @Test
   public void cipher_getIV_isMockable() {
     Cipher cipher = mock(Cipher.class);
-    doReturn("fake".getBytes()).when(cipher).getIV();
-    assertThat(cipher.getIV()).isEqualTo("fake".getBytes());
+    doReturn("fake".getBytes(StandardCharsets.UTF_8)).when(cipher).getIV();
+    assertThat(cipher.getIV()).isEqualTo("fake".getBytes(StandardCharsets.UTF_8));
   }
 }

File: processor/src/main/java/org/robolectric/annotation/processing/generator/JavadocJsonGenerator.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.processing.Messager;
@@ -69,7 +70,8 @@ private void writeJson(Object object, File file) {
     try {
       file.getParentFile().mkdirs();
 
-      try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
+      try (BufferedWriter writer =
+          new BufferedWriter(new FileWriter(file, StandardCharsets.UTF_8))) {
         gson.toJson(object, writer);
       }
     } catch (IOException e) {

File: utils/src/main/java/org/robolectric/util/inject/PluginFinder.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Enumeration;
@@ -139,7 +140,8 @@ <T> Iterable<Class<? extends T>> load(Class<T> pluginType) {
                   while (urls.hasMoreElements()) {
                     URL url = urls.nextElement();
                     BufferedReader reader =
-                        new BufferedReader(new InputStreamReader(url.openStream()));
+                        new BufferedReader(
+                            new InputStreamReader(url.openStream(), StandardCharsets.UTF_8));
                     while (reader.ready()) {
                       String s = reader.readLine();
                       result.add(

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -231,6 +231,7 @@ protected void configureSandbox(Sandbox sandbox, FrameworkMethod method) {
   }
 
   @Override
+  @SuppressWarnings("CatchAndPrintStackTrace")
   protected Statement methodBlock(final FrameworkMethod method) {
     return new Statement() {
       @Override
@@ -305,6 +306,7 @@ public void evaluate() throws Throwable {
     };
   }
 
+  @SuppressWarnings("CatchAndPrintStackTrace")
   private void reportPerfStats(PerfStatsCollector perfStatsCollector) {
     if (perfStatsReporters.isEmpty()) {
       return;

File: robolectric/src/main/java/org/robolectric/junit/rules/BackgroundTestRule.java
Patch:
@@ -12,6 +12,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.util.concurrent.BackgroundExecutor;
 
+@SuppressWarnings("InvalidBlockTag")
 /**
  * Let tests to run on background thread, if it has annotation {@link BackgroundTest}.
  *

File: utils/src/main/java/org/robolectric/util/SimpleFuture.java
Patch:
@@ -8,7 +8,7 @@
  * A Future represents the result of an asynchronous computation.
  *
  * @param <T> The result type returned by this Future's get method.
- * @deprecation This class can introduce deadlocks, since its lock is held while invoking run().
+ * @deprecated This class can introduce deadlocks, since its lock is held while invoking run().
  */
 @Deprecated
 public class SimpleFuture<T> {

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -1603,6 +1603,4 @@ protected void put(int position, Short value) {
       buf.putShort(position, value);
     }
   }
-
-  private static final Runnable NO_OP = () -> {};
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -799,6 +799,9 @@ public void installPackage(PackageInfo packageInfo) {
     if (appInfo.processName == null) {
       appInfo.processName = appInfo.packageName;
     }
+    if (appInfo.targetSdkVersion == 0) {
+      appInfo.targetSdkVersion = RuntimeEnvironment.getApiLevel();
+    }
     appInfo.flags |= ApplicationInfo.FLAG_INSTALLED;
     ComponentInfo[][] componentInfoArrays =
         new ComponentInfo[][] {

File: pluginapi/src/main/java/org/robolectric/pluginapi/config/ConfigurationStrategy.java
Patch:
@@ -14,7 +14,7 @@ public interface ConfigurationStrategy {
   /**
    * Determine the configuration for the given test class and method.
    *
-   * Since a method may be run on multiple test subclasses, {@param testClass} indicates which
+   * <p>Since a method may be run on multiple test subclasses, {@code testClass} indicates which
    * test case is currently being evaluated.
    *
    * @param testClass the test class being evaluated; this might be a subclass of the method's

File: processor/src/main/java/org/robolectric/annotation/processing/validator/SdkStore.java
Patch:
@@ -351,7 +351,7 @@ MethodExtraInfo findMethod(ExecutableElement methodElement, boolean looseSignatu
 
       MethodExtraInfo methodExtraInfo = methods.get(methodInfo);
       if (looseSignatures && methodExtraInfo == null) {
-        methodExtraInfo = erasedParamTypesMethods.get(methodInfo.erase());
+        methodExtraInfo = erasedParamTypesMethods.get(methodInfo);
       }
       return methodExtraInfo;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppOpsManager.java
Patch:
@@ -232,7 +232,7 @@ public int unsafeCheckOpNoThrow(String op, int uid, String packageName) {
     return checkOpNoThrow(AppOpsManager.strOpToOp(op), uid, packageName);
   }
 
-  @Implementation(minSdk = Q)
+  @Implementation(minSdk = R)
   protected int unsafeCheckOpRawNoThrow(int op, int uid, String packageName) {
     Integer mode = appModeMap.get(Key.create(uid, packageName, op));
     if (mode == null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscApkAssets9.java
Patch:
@@ -253,7 +253,7 @@ protected static ApkAssets loadFromFd(
   // static jlong NativeLoad(JNIEnv* env, jclass /*clazz*/, jstring java_path, jboolean system,
   //                         jboolean force_shared_lib, jboolean overlay) {
 
-  @Implementation
+  @Implementation(maxSdk = Q)
   protected static long nativeLoad(
       String path, boolean system, boolean forceSharedLib, boolean overlay) throws IOException {
     if (path == null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManager.java
Patch:
@@ -235,7 +235,8 @@ protected void setBrightnessConfiguration(Object config) {
 
   @Implementation(minSdk = P)
   @HiddenApi
-  protected void setBrightnessConfigurationForUser(Object config, int userId, String packageName) {
+  protected void setBrightnessConfigurationForUser(
+      Object config, Object userId, Object packageName) {
     getShadowDisplayManagerGlobal().setBrightnessConfigurationForUser(config, userId, packageName);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java
Patch:
@@ -191,9 +191,9 @@ float getSaturationLevel() {
   @Implementation(minSdk = P)
   @HiddenApi
   protected void setBrightnessConfigurationForUser(
-      Object configObject, int userId, String packageName) {
+      Object configObject, Object userId, Object packageName) {
     BrightnessConfiguration config = (BrightnessConfiguration) configObject;
-    brightnessConfiguration.put(userId, config);
+    brightnessConfiguration.put((int) userId, config);
   }
 
   @Implementation(minSdk = P)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -794,7 +794,7 @@ protected void requestLocationUpdates(
         pendingIntent);
   }
 
-  @Implementation(minSdk = VERSION_CODES.KITKAT)
+  @Implementation(minSdk = VERSION_CODES.R)
   protected void requestLocationUpdates(
       @Nullable LocationRequest request, Executor executor, LocationListener listener) {
     if (request == null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaCodec.java
Patch:
@@ -325,7 +325,7 @@ protected void releaseOutputBuffer(int index, boolean renderer) {
     releaseOutputBuffer(index);
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   protected void releaseOutputBuffer(int index, long renderTimestampNs) {
     releaseOutputBuffer(index);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -453,7 +453,6 @@ protected int getSimState() {
   }
 
   /** Sets the sim state of slot 0. */
-  @Implementation(minSdk = LOLLIPOP_MR1)
   public void setSimState(int simState) {
     setSimState(/* slotIndex= */ 0, simState);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
@@ -45,13 +46,13 @@ public class ShadowTypeface {
   private FontDesc description;
 
   @HiddenApi
-  @Implementation
+  @Implementation(maxSdk = KITKAT)
   protected void __constructor__(int fontId) {
     description = findById((long) fontId);
   }
 
   @HiddenApi
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   protected void __constructor__(long fontId) {
     description = findById(fontId);
   }

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -542,7 +542,7 @@ private void parseApplicationMetaData(Node applicationNode) {
   }
 
   private String resolveClassRef(String maybePartialClassName) {
-    return (maybePartialClassName.startsWith("."))
+    return maybePartialClassName.startsWith(".")
         ? packageName + maybePartialClassName
         : maybePartialClassName;
   }

File: resources/src/main/java/org/robolectric/res/ResourceRemapper.java
Patch:
@@ -110,7 +110,7 @@ private void remapRClass(boolean isPrimary, Class<?> rClass) {
         for (Field field : innerClass.getFields()) {
           if (field.getType().equals(int[].class)) {
             try {
-              int[] styleableArray = (int[]) (field.get(null));
+              int[] styleableArray = (int[]) field.get(null);
               for (int k = 0; k < styleableArray.length; k++) {
                 Integer value = resIds.get("attr/" + localAttributeIds.get(styleableArray[k]));
                 if (value != null) {

File: resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -95,7 +95,7 @@ private void addMissingStyleableAttributes(PackageResourceTable resourceTable, C
           if (field.getType().equals(int[].class) && Modifier.isStatic(field.getModifiers())) {
             styleableName = field.getName();
             try {
-              styleableArray = (int[]) (field.get(null));
+              styleableArray = (int[]) field.get(null);
             } catch (IllegalAccessException e) {
               throw new RuntimeException(e);
             }

File: resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -45,7 +45,7 @@ private void add(ResName attrName, AttributeResource attribute) {
     // scheme.
     if (attributeResource == null && !"android".equals(resName.packageName) && !"android".equals(packageName)) {
       attributeResource = items.get(resName.withPackageName(packageName));
-      if (attributeResource != null && (!"android".equals(attributeResource.contextPackageName))) {
+      if (attributeResource != null && !"android".equals(attributeResource.contextPackageName)) {
         attributeResource = new AttributeResource(resName, attributeResource.value, resName.packageName);
       }
     }

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -419,7 +419,7 @@ void setLocaleLocked(final String locale) {
 //          delete[] mLocale;
 //      }
 
-    mLocale = /*strdupNew*/(locale);
+    mLocale = /*strdupNew*/locale;
     updateResourceParamsLocked();
   }
 

File: resources/src/main/java/org/robolectric/res/android/DynamicRefTable.java
Patch:
@@ -109,7 +109,7 @@ int lookupResourceId(Ref<Integer> resId) {
       // Or if app resource is loaded as shared library, the resource which has
       // app package Id is local resources.
       // so we fix up those resources with the calling package ID.
-      resId.set((0xFFFFFF & (resId.get())) | (((int) mAssignedPackageId) << 24));
+      resId.set((0xFFFFFF & resId.get()) | (((int) mAssignedPackageId) << 24));
       return NO_ERROR;
     }
 

File: resources/src/main/java/org/robolectric/res/android/Idmap.java
Patch:
@@ -174,7 +174,7 @@ LoadedIdmap Load(StringPiece idmap_data) {
 
         // Make sure there is enough space for the entries declared in the header.
         if ((data_size - SIZEOF_CPTR) / SIZEOF_INT <
-            (dtohs(entry_header.entry_count))) {
+            dtohs(entry_header.entry_count)) {
           logError(String.format("Idmap too small for the number of entries (%d)",
               (int) dtohs(entry_header.entry_count)));
           return emptyBraces();

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -262,7 +262,7 @@ public int setTo(ByteBuffer buf, int offset, int size, boolean copyData) {
 //      if (((const uint8_t*)mEntryStyles-(const uint8_t*)mHeader) > (int)size) {
       if ((mEntryStyles.myOffset() - mHeader.myOffset()) > (int)size) {
         ALOGW("Bad string block: entry of %d styles extends past data size %d\n",
-            (int)(mEntryStyles.myOffset()),
+            (int)mEntryStyles.myOffset(),
         (int)size);
         return (mError=BAD_TYPE);
       }

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -37,7 +37,7 @@ static int validate_chunk(ResChunk_header chunk,
     if (headerSize >= minSize) {
       if (headerSize <= size) {
         if (((headerSize|size)&0x3) == 0) {
-          if (size <= (dataLen)) {
+          if (size <= dataLen) {
             return NO_ERROR;
           }
           ALOGW("%s data size 0x%x extends beyond resource end.",

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -3,6 +3,7 @@
 import static java.util.Arrays.asList;
 import static java.util.Arrays.stream;
 
+import com.google.common.base.Splitter;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -174,7 +175,7 @@ protected InstrumentationConfiguration createClassLoaderConfig(FrameworkMethod m
             .doNotAcquirePackage("org.junit");
 
     String customPackages = System.getProperty("org.robolectric.packagesToNotAcquire", "");
-    for (String pkg : customPackages.split(",")) {
+    for (String pkg : Splitter.on(',').split(customPackages)) {
       if (!pkg.isEmpty()) {
         builder.doNotAcquirePackage(pkg);
       }

File: integration_tests/ctesque/src/sharedTest/java/android/database/SQLiteDatabaseTest.java
Patch:
@@ -28,7 +28,7 @@ public class SQLiteDatabaseTest {
   private File databasePath;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     databasePath = ApplicationProvider.getApplicationContext().getDatabasePath("database.db");
     databasePath.getParentFile().mkdirs();
 
@@ -44,7 +44,7 @@ public void setUp() throws Exception {
   }
 
   @After
-  public void tearDown() throws Exception {
+  public void tearDown() {
     database.close();
     assertThat(databasePath.delete()).isTrue();
   }
@@ -130,7 +130,7 @@ public void shouldDeleteWithLikeEscape() {
   }
 
   @Test
-  public void query_using_execSQL_throwsException() {
+  public void shouldThrowsExceptionWhenQueryingUsingExecSQL() {
     SQLiteException e = assertThrows(SQLiteException.class, () -> database.execSQL("select 1"));
     assertThat(e)
         .hasMessageThat()

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -21,7 +21,7 @@ public class SQLiteOpenHelperTest {
   private TestOpenHelper helper;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     helper = new TestOpenHelper(ApplicationProvider.getApplicationContext(), "path", null, 1);
   }
 
@@ -149,6 +149,7 @@ private void setupTable(SQLiteDatabase db, String table) {
         "testVal INTEGER DEFAULT 0" +
         ");");
   }
+
   private void insertData(SQLiteDatabase db, String table, int[] values) {
     for (int i : values) {
       ContentValues cv = new ContentValues();
@@ -246,7 +247,7 @@ public TestOpenHelper(Context context, String name, CursorFactory factory, int v
     }
 
     @Override
-      public void onCreate(SQLiteDatabase database) {
+    public void onCreate(SQLiteDatabase database) {
         onCreateCalled = true;
       }
 

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -117,7 +117,8 @@ public static <T extends Activity> ActivityController<T> buildActivity(
    * @deprecated use {@link androidx.test.core.app.ActivityScenario}
    */
   @Deprecated
-  public static <T extends Activity> T setupActivity(Class<T> activityClass) {
+  @SuppressWarnings("InlineMeSuggester")
+  public static final <T extends Activity> T setupActivity(Class<T> activityClass) {
     return buildActivity(activityClass).setup().get();
   }
 

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -511,6 +511,7 @@ private Configuration getConfiguration(Method method) {
    *     details.
    */
   @Deprecated
+  @SuppressWarnings("InlineMeSuggester")
   protected Config buildGlobalConfig() {
     return new Config.Builder().build();
   }

File: utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -345,6 +345,7 @@ public synchronized Duration getLastScheduledTaskTime() {
    *     Use {@link #setIdleState(IdleState)} instead to explicitly set the state.
    */
   @Deprecated
+  @SuppressWarnings("InlineMeSuggester")
   public void idleConstantly(boolean shouldIdleConstantly) {
     setIdleState(shouldIdleConstantly ? CONSTANT_IDLE : UNPAUSED);
   }

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricProcessor.java
Patch:
@@ -15,7 +15,6 @@
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
-import org.robolectric.annotation.processing.RobolectricModel.Builder;
 import org.robolectric.annotation.processing.generator.Generator;
 import org.robolectric.annotation.processing.generator.JavadocJsonGenerator;
 import org.robolectric.annotation.processing.generator.ServiceLoaderGenerator;
@@ -45,7 +44,7 @@ public class RobolectricProcessor extends AbstractProcessor {
   private static final String SDKS_FILE = "org.robolectric.annotation.processing.sdks";
   private static final String PRIORITY = "org.robolectric.annotation.processing.priority";
 
-  private Builder modelBuilder;
+  private RobolectricModel.Builder modelBuilder;
   private String shadowPackage;
   private boolean shouldInstrumentPackages;
   private int priority;
@@ -81,7 +80,7 @@ public RobolectricProcessor(Map<String, String> options) {
   public synchronized void init(ProcessingEnvironment environment) {
     super.init(environment);
     processOptions(environment.getOptions());
-    modelBuilder = new Builder(environment);
+    modelBuilder = new RobolectricModel.Builder(environment);
 
     SdkStore sdkStore = new SdkStore(sdksFile);
 

File: resources/src/main/java/org/robolectric/res/android/DataType.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.primitives.UnsignedBytes;
 import java.util.Map;
 
@@ -51,7 +50,7 @@ public enum DataType {
   private static final Map<Byte, DataType> FROM_BYTE;
 
   static {
-    Builder<Byte, DataType> builder = ImmutableMap.builder();
+    ImmutableMap.Builder<Byte, DataType> builder = ImmutableMap.builder();
     for (DataType type : values()) {
       builder.put(type.code(), type);
     }

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -18,7 +18,6 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.Objects;
-import org.robolectric.res.android.ResourceString.Type;
 import org.robolectric.res.android.ResourceTypes.ResChunk_header;
 import org.robolectric.res.android.ResourceTypes.ResStringPool_header;
 import org.robolectric.res.android.ResourceTypes.ResStringPool_header.Writer;
@@ -338,7 +337,7 @@ public String stringAt(int idx) {
         if (!isUTF8) {
           final int strings = mStrings;
           final int str = strings+off*2;
-          return decodeString(buf, bufOffset + str, Type.UTF16);
+          return decodeString(buf, bufOffset + str, ResourceString.Type.UTF16);
 //          int u16len = decodeLengthUTF16(buf, bufOffset + str);
 //          if ((str+u16len*2-strings) < mStringPoolSize) {
 //            // Reject malformed (non null-terminated) strings
@@ -364,7 +363,7 @@ public String stringAt(int idx) {
         } else {
           final int strings = mStrings;
           final int u8str = strings+off;
-          return decodeString(buf, bufOffset + u8str, Type.UTF8);
+          return decodeString(buf, bufOffset + u8str, ResourceString.Type.UTF8);
 
 //                *u16len = decodeLength(&u8str);
 //          size_t u8len = decodeLength(&u8str);

File: resources/src/main/java/org/robolectric/res/android/ResTableTheme.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import org.robolectric.res.android.ResTable.PackageGroup;
 import org.robolectric.res.android.ResTable.ResourceName;
-import org.robolectric.res.android.ResTable.Type;
 import org.robolectric.res.android.ResTable.bag_entry;
 import org.robolectric.res.android.ResourceTypes.Res_value;
 
@@ -228,7 +227,7 @@ public int applyStyle(int resID, boolean force) {
         curEntries = curPI.types[t] != null ? curPI.types[t].entries: null;
         if (curEntries == null) {
           final PackageGroup grp = mTable.mPackageGroups.get(curPackageIndex);
-          final List<Type> typeList = getOrDefault(grp.types, t, Collections.emptyList());
+          final List<ResTable.Type> typeList = getOrDefault(grp.types, t, Collections.emptyList());
           int cnt = typeList.isEmpty() ? 0 : typeList.get(0).entryCount;
           curEntries = new theme_entry[cnt];
           // memset(curEntries, Res_value::TYPE_NULL, buff_size);

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -41,7 +41,6 @@
 import org.robolectric.internal.TestEnvironment;
 import org.robolectric.internal.bytecode.ClassHandler;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
-import org.robolectric.internal.bytecode.InstrumentationConfiguration.Builder;
 import org.robolectric.internal.bytecode.Interceptor;
 import org.robolectric.internal.bytecode.Sandbox;
 import org.robolectric.internal.bytecode.SandboxClassLoader;
@@ -164,7 +163,8 @@ protected InstrumentationConfiguration createClassLoaderConfig(final FrameworkMe
     Configuration configuration = ((RobolectricFrameworkMethod) method).getConfiguration();
     Config config = configuration.get(Config.class);
 
-    Builder builder = new Builder(super.createClassLoaderConfig(method));
+    InstrumentationConfiguration.Builder builder =
+        new InstrumentationConfiguration.Builder(super.createClassLoaderConfig(method));
     androidConfigurer.configure(builder, getInterceptors());
     androidConfigurer.withConfig(builder, config);
     return builder.build();

File: robolectric/src/main/java/org/robolectric/android/internal/LocalControlledLooper.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.android.internal;
 
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
-import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
 import android.view.View;
 import android.view.ViewRootImpl;
@@ -25,8 +24,9 @@ public void simulateWindowFocus(View decorView) {
       ReflectionHelpers.callInstanceMethod(
           viewRoot,
           "windowFocusChanged",
-          from(boolean.class, true), /* hasFocus */
-          from(boolean.class, ShadowWindowManagerGlobal.getInTouchMode()));
+          ReflectionHelpers.ClassParameter.from(boolean.class, true), /* hasFocus */
+          ReflectionHelpers.ClassParameter.from(
+              boolean.class, ShadowWindowManagerGlobal.getInTouchMode()));
     }
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraCharacteristicsTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 import android.hardware.camera2.CameraCharacteristics;
-import android.hardware.camera2.CameraCharacteristics.Key;
 import android.os.Build.VERSION_CODES;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
@@ -17,7 +16,8 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowCameraCharacteristicsTest {
 
-  private final Key key0 = new Key("key0", Integer.class);
+  private final CameraCharacteristics.Key key0 =
+      new CameraCharacteristics.Key("key0", Integer.class);
   private final CameraCharacteristics cameraCharacteristics =
       ShadowCameraCharacteristics.newCameraCharacteristics();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCaptureResultTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 import android.hardware.camera2.CaptureResult;
-import android.hardware.camera2.CaptureResult.Key;
 import android.os.Build.VERSION_CODES;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
@@ -17,7 +16,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowCaptureResultTest {
 
-  private final Key<Long> timestampKey = CaptureResult.SENSOR_TIMESTAMP;
+  private final CaptureResult.Key<Long> timestampKey = CaptureResult.SENSOR_TIMESTAMP;
   private final CaptureResult captureResult = ShadowCaptureResult.newCaptureResult();
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaCodecTest.java
Patch:
@@ -16,7 +16,6 @@
 
 import android.media.MediaCodec;
 import android.media.MediaCodec.BufferInfo;
-import android.media.MediaCodec.Callback;
 import android.media.MediaCodec.CodecException;
 import android.media.MediaCodecInfo.CodecProfileLevel;
 import android.media.MediaCrypto;
@@ -47,7 +46,7 @@ public final class ShadowMediaCodecTest {
   private static final String AUDIO_ENCODER_NAME = "audio-fake.encoder";
   private static final int WITHOUT_TIMEOUT = -1;
 
-  private Callback callback;
+  private MediaCodec.Callback callback;
 
   @After
   public void tearDown() throws Exception {

File: utils/src/test/java/org/robolectric/util/inject/InjectorTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import org.robolectric.util.inject.Injector.Builder;
 
 @RunWith(JUnit4.class)
 public class InjectorTest {
@@ -217,7 +216,7 @@ public void whenListRequested_itIsUnmodifiable() throws Exception {
 
   @Test public void shouldPreferPluginsOverConcreteClass() throws Exception {
     PluginFinder pluginFinder = new PluginFinder(new MyServiceFinderAdapter(pluginClasses));
-    Injector injector = new Builder(null, pluginFinder).build();
+    Injector injector = new Injector.Builder(null, pluginFinder).build();
     pluginClasses.add(SubclassOfConcreteThing.class);
     ConcreteThing instance = injector.getInstance(ConcreteThing.class);
     assertThat(instance.getClass()).isEqualTo(SubclassOfConcreteThing.class);

File: utils/src/main/java/org/robolectric/util/TempDirectory.java
Patch:
@@ -107,6 +107,7 @@ public void destroy() {
       clearDirectory(basePath);
       Files.delete(basePath);
     } catch (IOException ignored) {
+      Logger.error("Failed to destroy temp directory", ignored);
     }
   }
 

File: pluginapi/src/main/java/org/robolectric/pluginapi/perf/Metric.java
Patch:
@@ -69,7 +69,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof Metric)) {
       return false;
     }
 

File: processor/src/main/java/org/robolectric/annotation/processing/validator/SdkStore.java
Patch:
@@ -409,7 +409,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || getClass() != o.getClass()) {
+      if (!(o instanceof MethodInfo)) {
         return false;
       }
       MethodInfo that = (MethodInfo) o;
@@ -453,7 +453,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || getClass() != o.getClass()) {
+      if (!(o instanceof MethodExtraInfo)) {
         return false;
       }
       MethodExtraInfo that = (MethodExtraInfo) o;

File: resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -739,7 +739,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof AndroidManifest)) {
       return false;
     }
 

File: resources/src/main/java/org/robolectric/res/ResourcePath.java
Patch:
@@ -49,7 +49,7 @@ public String toString() {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (!(o instanceof ResourcePath)) return false;
 
     ResourcePath that = (ResourcePath) o;
 

File: resources/src/main/java/org/robolectric/res/android/String8.java
Patch:
@@ -424,7 +424,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof String8)) {
       return false;
     }
 

File: utils/src/main/java/org/robolectric/util/PerfStatsCollector.java
Patch:
@@ -170,7 +170,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || getClass() != o.getClass()) {
+      if (!(o instanceof MetricKey)) {
         return false;
       }
 

File: utils/src/main/java/org/robolectric/util/SimplePerfStatsReporter.java
Patch:
@@ -94,7 +94,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || getClass() != o.getClass()) {
+      if (!(o instanceof MetricKey)) {
         return false;
       }
 

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -21,6 +21,7 @@
 import android.view.ViewParent;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
@@ -64,9 +65,9 @@ public void idleMainLooper_executesScheduledTasks() {
     new Handler().postDelayed(() -> wasRun[0] = true, 2000);
 
     assertFalse(wasRun[0]);
-    ShadowLooper.idleMainLooper(1999);
+    ShadowLooper.idleMainLooper(1999, TimeUnit.MILLISECONDS);
     assertFalse(wasRun[0]);
-    ShadowLooper.idleMainLooper(1);
+    ShadowLooper.idleMainLooper(1, TimeUnit.MILLISECONDS);
     assertTrue(wasRun[0]);
   }
 

File: robolectric/src/test/java/org/robolectric/android/internal/LooperDelegatingSchedulerTest.java
Patch:
@@ -9,6 +9,7 @@
 import android.os.Handler;
 import android.os.SystemClock;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -59,7 +60,7 @@ public void advanceBy() {
     new Handler(getMainLooper()).postDelayed(runnable, 100);
     verify(runnable, times(0)).run();
 
-    assertThat(scheduler.advanceBy(100)).isTrue();
+    assertThat(scheduler.advanceBy(100, TimeUnit.MILLISECONDS)).isTrue();
     verify(runnable, times(1)).run();
   }
 
@@ -70,7 +71,7 @@ public void size() {
     Runnable runnable = mock(Runnable.class);
     new Handler(getMainLooper()).post(runnable);
     assertThat(scheduler.size()).isEqualTo(1);
-    assertThat(scheduler.advanceBy(0)).isTrue();
+    assertThat(scheduler.advanceBy(0, TimeUnit.MILLISECONDS)).isTrue();
     assertThat(scheduler.size()).isEqualTo(0);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacyLooperTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import org.junit.After;
@@ -135,9 +136,9 @@ public void run() {
             2000);
 
     assertWithMessage("first").that(wasRun[0]).isFalse();
-    ShadowLooper.idleMainLooper(1999);
+    ShadowLooper.idleMainLooper(1999, TimeUnit.MILLISECONDS);
     assertWithMessage("second").that(wasRun[0]).isFalse();
-    ShadowLooper.idleMainLooper(1);
+    ShadowLooper.idleMainLooper(1, TimeUnit.MILLISECONDS);
     assertWithMessage("last").that(wasRun[0]).isTrue();
   }
 

File: utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -88,7 +88,7 @@ public synchronized void setIdleState(IdleState idleState) {
     this.idleState = idleState;
     switch (idleState) {
       case UNPAUSED:
-        advanceBy(0);
+        advanceBy(0, TimeUnit.MILLISECONDS);
         break;
       case CONSTANT_IDLE:
         advanceToLastPostedRunnable();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -1051,7 +1051,7 @@ interface _AttachInfo_ {
     void setWindowId(WindowId windowId);
   }
 
-  boolean useRealGraphics() {
+  static boolean useRealGraphics() {
     return Boolean.getBoolean("robolectric.useRealGraphics");
   }
 }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -360,7 +360,7 @@ protected void finallyAfterTest(FrameworkMethod method) {
   }
 
   @Override
-  protected SandboxTestRunner.HelperTestRunner getHelperTestRunner(Class bootstrappedTestClass) {
+  protected SandboxTestRunner.HelperTestRunner getHelperTestRunner(Class<?> bootstrappedTestClass) {
     try {
       return new HelperTestRunner(bootstrappedTestClass);
     } catch (InitializationError initializationError) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -157,6 +157,7 @@ public AccessibilityNodeInfo[] newArray(int size) {
   @Implementation
   protected void __constructor__() {
     reflector(AccessibilityNodeInfoReflector.class).setCreator(ShadowAccessibilityNodeInfo.CREATOR);
+    Shadow.invokeConstructor(AccessibilityNodeInfo.class, realAccessibilityNodeInfo);
   }
 
   @Implementation

File: errorprone/src/test/java/xxx/XShadows.java
Patch:
@@ -10,6 +10,8 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.PopupMenu;
+import java.util.Collection;
+import java.util.Map;
 
 /**
  * Fake {@link org.robolectric.internal.ShadowProvider} for testing
@@ -60,7 +62,7 @@ public static XShadowViewGroup shadowOf(ViewGroup actual) {
   public void reset() {}
 
   @Override
-  public java.util.Map<String, String> getShadowMap() {
+  public Collection<Map.Entry<String, String>> getShadows() {
     return null;
   }
 

File: processor/src/test/resources/mock-source/org/robolectric/internal/ShadowProvider.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.internal;
 
+import java.util.Collection;
 import java.util.Map;
 
 public interface ShadowProvider {
@@ -8,5 +9,5 @@ public interface ShadowProvider {
 
   String[] getProvidedPackageNames();
 
-  Map<String, String> getShadowMap();
+  Collection<Map.Entry<String, String>> getShadows();
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraMetadataNative.java
Patch:
@@ -12,8 +12,7 @@
     value = CameraMetadataNative.class,
     minSdk = LOLLIPOP,
     maxSdk = Q,
-    isInAndroidSdk = false,
-    shadowPicker = ShadowCameraMetadataNativePicker.Picker.class)
+    isInAndroidSdk = false)
 public class ShadowCameraMetadataNative {
   @Implementation(minSdk = LOLLIPOP, maxSdk = Q)
   protected long nativeAllocate() {

File: shadows/framework/src/main/java/org/robolectric/shadows/RangingSessionBuilder.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import android.uwb.IUwbAdapter;
 import android.uwb.RangingSession;
 import android.uwb.SessionHandle;

File: robolectric/src/main/java/org/robolectric/android/internal/RoboMonitoringInstrumentation.java
Patch:
@@ -142,7 +142,7 @@ public ActivityResult execStartActivity(
       ShadowActivity shadowActivity = extract(target);
       postDispatchActivityResult(shadowActivity, null, requestCode, ar);
     }
-    return ar;
+    return null;
   }
 
   /** This API was added in Android API 23 (M) */
@@ -166,7 +166,7 @@ public ActivityResult execStartActivity(
       ShadowActivity shadowActivity = extract(who);
       postDispatchActivityResult(shadowActivity, target, requestCode, ar);
     }
-    return ar;
+    return null;
   }
 
   /** This API was added in Android API 17 (JELLY_BEAN_MR1) */
@@ -192,7 +192,7 @@ public ActivityResult execStartActivity(
       ShadowActivity shadowActivity = extract(target);
       postDispatchActivityResult(shadowActivity, null, requestCode, ar);
     }
-    return ar;
+    return null;
   }
 
   private void postDispatchActivityResult(

File: annotations/src/main/java/org/robolectric/shadow/api/ShadowPicker.java
Patch:
@@ -4,8 +4,8 @@
 public interface ShadowPicker<T> {
 
   /**
-   * Determines the shadow class to be used depending on the configuration of the
-   * {@link org.robolectric.internal.Environment}. Must be deterministic.
+   * Determines the shadow class to be used depending on the configuration of the {@link
+   * org.robolectric.internal.Environment}. Must be deterministic.
    *
    * @return the shadow class to be used
    */

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoIdlingResourceTest.java
Patch:
@@ -88,7 +88,7 @@ public void onIdle_cooperativeResources() {
     NamedIdleResource a = new NamedIdleResource("A", /* isIdle= */ true);
     NamedIdleResource b = new NamedIdleResource("B", /* isIdle= */ false);
     NamedIdleResource c = new NamedIdleResource("C", /* isIdle= */ false);
-    idlingRegistry.register(a, b);
+    idlingRegistry.register(a, b, c);
     executor.submit(
         () -> {
           a.setIdle(false);

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultSdkProvider implements SdkProvider {
 
   private static final int RUNNING_JAVA_VERSION = Util.getJavaVersion();
 
-  private static final int PREINSTRUMENTED_VERSION = 3;
+  private static final int PREINSTRUMENTED_VERSION = 4;
 
   private final DependencyResolver dependencyResolver;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -147,7 +147,8 @@ public class ShadowPackageManager {
   static final Map<ComponentName, Drawable> drawableList = new LinkedHashMap<>();
   static final Map<String, Drawable> applicationIcons = new HashMap<>();
   static final Map<String, Drawable> unbadgedApplicationIcons = new HashMap<>();
-  static final Map<String, Boolean> systemFeatureList = new LinkedHashMap<>();
+  static final Map<String, Boolean> systemFeatureList =
+      new LinkedHashMap<>(SystemFeatureListInitializer.getSystemFeatures());
   static final SortedMap<ComponentName, List<IntentFilter>> preferredActivities = new TreeMap<>();
   static final SortedMap<ComponentName, List<IntentFilter>> persistentPreferredActivities =
       new TreeMap<>();
@@ -1697,6 +1698,7 @@ public static void reset() {
       applicationIcons.clear();
       unbadgedApplicationIcons.clear();
       systemFeatureList.clear();
+      systemFeatureList.putAll(SystemFeatureListInitializer.getSystemFeatures());
       preferredActivities.clear();
       persistentPreferredActivities.clear();
       drawables.clear();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.KITKAT;
+import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -541,7 +542,7 @@ public void compress_shouldSucceedForNullPixelData() {
     bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
   }
 
-  @Config(sdk = Build.VERSION_CODES.O)
+  @Config(sdk = O)
   @Test
   public void getBytesPerPixel_O() {
     assertThat(ShadowBitmap.getBytesPerPixel(Bitmap.Config.RGBA_F16)).isEqualTo(8);
@@ -634,7 +635,7 @@ public void reconfigure_withArgb8888Bitmap_validDimensionsAndConfig_doesNotThrow
     original.reconfigure(100, 100, Bitmap.Config.ARGB_8888);
   }
 
-  @Config(sdk = Build.VERSION_CODES.O)
+  @Config(sdk = O)
   @Test(expected = IllegalStateException.class)
   public void reconfigure_withHardwareBitmap_validDimensionsAndConfig_throws() {
     Bitmap original = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);

File: integration_tests/mockito-kotlin/src/test/java/org/robolectric/integrationtests/mockito/kotlin/MockitoKotlinFunctionTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.mockito.Mockito;
 import org.robolectric.RobolectricTestRunner;
 
+/** Tests for mocking Kotlin classes with Mockito (in Kotlin code). */
 @RunWith(RobolectricTestRunner.class)
 public class MockitoKotlinFunctionTest {
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRangingSession.java
Patch:
@@ -31,7 +31,8 @@ void onReconfigure(
 
   static RangingSession newInstance(
       Executor executor, RangingSession.Callback callback, Adapter adapter) {
-    RangingSession rangingSession = new RangingSession(executor, callback, null, null);
+    RangingSession rangingSession =
+        RangingSessionBuilder.newBuilder().setExecutor(executor).setCallback(callback).build();
 
     ShadowRangingSession shadow = Shadow.extract(rangingSession);
     shadow.setCallback(callback, executor);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaCodec.java
Patch:
@@ -331,9 +331,9 @@ private void makeInputBufferAvailable(int index) {
     ((Buffer) inputBuffers[index]).clear();
 
     if (isAsync) {
+      inputBuffersPendingQueuing.add(index);
       // Signal input buffer availability.
       postFakeNativeEvent(EVENT_CALLBACK, CB_INPUT_AVAILABLE, index, null);
-      inputBuffersPendingQueuing.add(index);
     } else {
       inputBuffersPendingDequeue.add(index);
     }

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -34,7 +34,7 @@ public BootstrapDeferringRobolectricTestRunner(Class<?> testClass) throws Initia
 
   @Nonnull
   @Override
-  protected Class<? extends TestLifecycle> getTestLifecycleClass() {
+  protected Class<MyTestLifecycle> getTestLifecycleClass() {
     return MyTestLifecycle.class;
   }
 

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -34,7 +34,7 @@ public BootstrapDeferringRobolectricTestRunner(Class<?> testClass) throws Initia
 
   @Nonnull
   @Override
-  protected Class<? extends TestLifecycle> getTestLifecycleClass() {
+  protected Class<MyTestLifecycle> getTestLifecycleClass() {
     return MyTestLifecycle.class;
   }
 

File: robolectric/src/test/java/org/robolectric/res/ResourceTestUtil.java
Patch:
@@ -17,6 +17,7 @@ void time(String message, Runnable runnable) {
     System.out.println("elapsed " + message + ": " + (elapsed / 1000000.0) + "ms");
   }
 
+  @SuppressWarnings("rawtypes")
   static String stringify(ResourceTable resourceTable) {
     final HashMap<String, List<TypedResource>> map = new HashMap<>();
     resourceTable.receive(new ResourceTable.Visitor() {
@@ -65,7 +66,7 @@ public void visit(AttributeResource attributeResource) {
     return buf.toString();
   }
 
-  static String shortContext(TypedResource typedResource) {
+  static String shortContext(TypedResource<?> typedResource) {
     return typedResource.getXmlContext().toString().replaceAll("jar:/usr/local/google/home/.*\\.jar\\!", "jar:");
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRenderNode.java
Patch:
@@ -391,6 +391,6 @@ private static boolean isZero(float value) {
 
   // Temporarily allow disabling the matrix calculation during migration.
   private static boolean isMatrixEnabled() {
-    return Boolean.parseBoolean(System.getProperty("robolectric.rendernode.enableMatrix", "false"));
+    return Boolean.parseBoolean(System.getProperty("robolectric.rendernode.enableMatrix", "true"));
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRenderNodeQ.java
Patch:
@@ -362,6 +362,6 @@ private static boolean isZero(float value) {
 
   // Temporarily allow disabling the matrix calculation during migration.
   private static boolean isMatrixEnabled() {
-    return Boolean.parseBoolean(System.getProperty("robolectric.rendernode.enableMatrix", "false"));
+    return Boolean.parseBoolean(System.getProperty("robolectric.rendernode.enableMatrix", "true"));
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPausedMessageQueue.java
Patch:
@@ -331,7 +331,7 @@ ArrayList<IdleHandler> getIdleHandlersCopy() {
   @ForType(MessageQueue.class)
   private interface MessageQueueReflector {
 
-    void enqueueMessage(Message msg, long when);
+    boolean enqueueMessage(Message msg, long when);
 
     Message next();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVcnManager.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-/** A Shadow for android.content.rollback.RollbackManager added in Android S. */
+/** A Shadow for android.net.vcn.VcnManager added in Android S. */
 @Implements(value = VcnManager.class, minSdk = VERSION_CODES.S, isInAndroidSdk = false)
 public class ShadowVcnManager {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -141,7 +141,7 @@ public class ShadowPackageManagerTest {
   private static final String REAL_TEST_APP_ASSET_PATH = "assets/exampleapp.apk";
   private static final String REAL_TEST_APP_PACKAGE_NAME = "org.robolectric.exampleapp";
   private static final String TEST_PACKAGE3_NAME = "com.a.third.package";
-  private static final int TEST_PACKAGE_VERSOIN_CODE = 10000;
+  private static final int TEST_PACKAGE_VERSION_CODE = 10000;
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private Context context;
@@ -4027,13 +4027,13 @@ private PackageInfo generateTestPackageInfo() {
     PackageInfo packageInfo = new PackageInfo();
     packageInfo.packageName = TEST_PACKAGE_NAME;
     packageInfo.applicationInfo = appInfo;
-    packageInfo.versionCode = TEST_PACKAGE_VERSOIN_CODE;
+    packageInfo.versionCode = TEST_PACKAGE_VERSION_CODE;
     return packageInfo;
   }
 
   private void verifyTestPackageInfo(PackageInfo packageInfo) {
     assertThat(packageInfo).isNotNull();
-    assertThat(packageInfo.versionCode).isEqualTo(TEST_PACKAGE_VERSOIN_CODE);
+    assertThat(packageInfo.versionCode).isEqualTo(TEST_PACKAGE_VERSION_CODE);
     ApplicationInfo applicationInfo = packageInfo.applicationInfo;
     assertThat(applicationInfo).isInstanceOf(ApplicationInfo.class);
     assertThat(applicationInfo.packageName).isEqualTo(TEST_PACKAGE_NAME);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -498,9 +498,12 @@ public void setDataNetworkType(int dataNetworkType) {
   /**
    * Returns whatever value was set by the last call to {@link #setVoiceNetworkType}, defaulting to
    * {@link TelephonyManager#NETWORK_TYPE_UNKNOWN} if it was never called.
+   *
+   * <p>An exception will be thrown if the READ_PHONE_STATE permission has not been granted.
    */
   @Implementation(minSdk = N)
   protected int getVoiceNetworkType() {
+    checkReadPhoneStatePermission();
     return voiceNetworkType;
   }
 

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/NativeRuntimeLoader.java
Patch:
@@ -46,7 +46,8 @@ static void ensureLoaded() {
 
   private static boolean isSupported() {
     return ("mac".equals(osName()) && ("aarch64".equals(arch()) || "x86_64".equals(arch())))
-        || ("linux".equals(osName()) && "x86_64".equals(arch()));
+        || ("linux".equals(osName()) && "x86_64".equals(arch()))
+        || ("windows".equals(osName()) && "x86_64".equals(arch()));
   }
 
   private static String nativeLibraryPath() {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -483,6 +483,7 @@ private Cursor createCursor() {
 
   private void setupEmptyResult() {
     database.execSQL("DELETE FROM table_name;");
+    cursor.close();
     cursor = createCursor();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -117,6 +117,7 @@ public void testExecuteUpdateDelete() {
     Cursor dataCursor = database.rawQuery("SELECT `name` FROM `routine`", null);
     assertThat(dataCursor.moveToNext()).isTrue();
     assertThat(dataCursor.getString(0)).isEqualTo("Head Press");
+    dataCursor.close();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -43,7 +43,7 @@
 import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteCursor;
+import android.database.MatrixCursor;
 import android.media.AudioManager;
 import android.net.Uri;
 import android.os.Bundle;
@@ -72,7 +72,6 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.LooperMode.Mode;
-import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowActivity.IntentSenderRequest;
 import org.robolectric.util.TestRunnable;
 
@@ -756,7 +755,7 @@ public void startAndStopManagingCursorTracksCursors() throws Exception {
     assertThat(shadowOf(activity).getManagedCursors()).isNotNull();
     assertThat(shadowOf(activity).getManagedCursors()).isEmpty();
 
-    Cursor c = Shadow.newInstanceOf(SQLiteCursor.class);
+    Cursor c = new MatrixCursor(new String[] {"a"});
     activity.startManagingCursor(c);
 
     assertThat(shadowOf(activity).getManagedCursors()).isNotNull();
@@ -767,6 +766,7 @@ public void startAndStopManagingCursorTracksCursors() throws Exception {
 
     assertThat(shadowOf(activity).getManagedCursors()).isNotNull();
     assertThat(shadowOf(activity).getManagedCursors()).isEmpty();
+    c.close();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -912,12 +912,13 @@ public void getProvider_shouldNotReturnAnyProviderWhenManifestIsNull() {
   public void openTypedAssetFileDescriptor_shouldOpenDescriptor() throws IOException, RemoteException {
     Robolectric.setupContentProvider(MyContentProvider.class, AUTHORITY);
 
-    AssetFileDescriptor afd =
+    try (AssetFileDescriptor afd =
         contentResolver.openTypedAssetFileDescriptor(
-            Uri.parse("content://" + AUTHORITY + "/whatever"), "*/*", null);
+            Uri.parse("content://" + AUTHORITY + "/whatever"), "*/*", null)) {
 
     FileDescriptor descriptor = afd.getFileDescriptor();
     assertThat(descriptor).isNotNull();
+    }
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMuxerTest.java
Patch:
@@ -97,5 +97,6 @@ private void basicMuxingFlow(int bufInfoOffset, int bufOffset, int inputSize) th
     assertThat(outputBytes)
         .isEqualTo(Arrays.copyOfRange(inputBytes, bufInfoOffset, inputBytes.length));
     new File(tempFilePath).deleteOnExit();
+    muxer.release();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputMethodManager.java
Patch:
@@ -267,9 +267,10 @@ public static void reset() {
     _InputMethodManager_ _reflector = reflector(_InputMethodManager_.class);
     if (apiLevel <= JELLY_BEAN_MR1) {
       _reflector.setMInstance(null);
-    } else if (apiLevel <= P) {
-      _reflector.setInstance(null);
     } else {
+      _reflector.setInstance(null);
+    }
+    if (apiLevel > P) {
       _reflector.getInstanceMap().clear();
     }
   }

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -47,7 +47,7 @@ public class DefaultSdkProvider implements SdkProvider {
 
   private static final int RUNNING_JAVA_VERSION = Util.getJavaVersion();
 
-  private static final int PREINSTRUMENTED_VERSION = 2;
+  private static final int PREINSTRUMENTED_VERSION = 3;
 
   private final DependencyResolver dependencyResolver;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -277,7 +277,7 @@ private void performSuccessfulPageLoad(String url) {
                 webChromeClient.onReceivedTitle(realWebView, url);
                 webChromeClient.onProgressChanged(realWebView, 100);
               }
-              if (webViewClient != null && VERSION.SDK_INT >= 23) {
+              if (webViewClient != null) {
                 webViewClient.onPageFinished(realWebView, url);
               }
             });

File: resources/src/main/java/org/robolectric/res/android/Chunk.java
Patch:
@@ -166,7 +166,6 @@ Chunk Next() {
       return new Chunk(this_chunk);
     }
 
-    // TODO(b/111401637) remove this and have full resource file verification
     // Returns false if there was an error. For legacy purposes.
     boolean VerifyNextChunkNonFatal() {
       if (len_ < ResChunk_header.SIZEOF) {

File: resources/src/main/java/org/robolectric/res/android/FileMap.java
Patch:
@@ -239,7 +239,7 @@ static ImmutableMap<String, Long> guessDataOffsets(File zipFile, int length) {
       while (true) {
         // Instead of trusting numRecords, read until we find the
         // end-of-central-directory signature.  numRecords may wrap
-        // around with >64K entries (b/5455504).
+        // around with >64K entries.
         int sig = readInt(buffer, offset);
         if (sig == ENDSIG || sig == ENDSIG64) {
           break;

File: robolectric/src/main/java/org/robolectric/android/internal/LocalUiController.java
Patch:
@@ -57,7 +57,8 @@ public boolean injectKeyEvent(KeyEvent event) throws InjectEventSecurityExceptio
     return true;
   }
 
-  // TODO(b/80130000): implementation copied from espresso's UIControllerImpl. Refactor code into common location
+  // TODO: implementation copied from espresso's UIControllerImpl. Refactor code into common
+  // location
   @Override
   public boolean injectString(String str) throws InjectEventSecurityException {
     checkNotNull(str);
@@ -72,8 +73,7 @@ public boolean injectString(String str) throws InjectEventSecurityException {
     boolean eventInjected = false;
     KeyCharacterMap keyCharacterMap = getKeyCharacterMap();
 
-    // TODO(b/80130875): Investigate why not use (as suggested in javadoc of
-    // keyCharacterMap.getEvents):
+    // TODO: Investigate why not use (as suggested in javadoc of keyCharacterMap.getEvents):
     // http://developer.android.com/reference/android/view/KeyEvent.html#KeyEvent(long,
     // java.lang.String, int, int)
     KeyEvent[] events = keyCharacterMap.getEvents(str.toCharArray());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacyMessageQueueTest.java
Patch:
@@ -204,7 +204,7 @@ public void postAndRemoveSyncBarrierToken() {
   }
 
   @Test
-  // TODO(b/74402484): enable once workaround is removed
+  // TODO(https://github.com/robolectric/robolectric/issues/6852): enable once workaround is removed
   @Ignore
   public void removeInvalidSyncBarrierToken() {
     try {

File: sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -82,7 +82,7 @@ private static URL[] getClassPathUrls(ClassLoader classloader) {
     return parseJavaClassPath();
   }
 
-  // TODO(b/65488446): Use a public API once one is available.
+  // TODO(https://github.com/google/guava/issues/2956): Use a public API once one is available.
   private static URL[] parseJavaClassPath() {
     ImmutableList.Builder<URL> urls = ImmutableList.builder();
     for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessageQueue.java
Patch:
@@ -166,7 +166,8 @@ private static void dispatchMessage(Message msg) {
   @Implementation
   @HiddenApi
   protected void removeSyncBarrier(int token) {
-    // TODO(b/74402484): workaround scheduler corruption of message queue
+    // TODO(https://github.com/robolectric/robolectric/issues/6852): workaround scheduler corruption
+    // of message queue
     try {
       reflector(MessageQueueReflector.class, realQueue).removeSyncBarrier(token);
     } catch (IllegalStateException e) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -89,7 +89,7 @@ public Parcelable.Creator<?> readParcelableCreator(ClassLoader loader) {
       // classloader" behavior.
       ClassLoader parcelableClassLoader = (loader == null ? getClass().getClassLoader() : loader);
       // Avoid initializing the Parcelable class until we know it implements
-      // Parcelable and has the necessary CREATOR field. http://b/1171613.
+      // Parcelable and has the necessary CREATOR field.
       Class<?> parcelableClass = Class.forName(name, false /* initialize */, parcelableClassLoader);
       if (!Parcelable.class.isAssignableFrom(parcelableClass)) {
         throw new BadParcelableException(

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSQLiteOpenHelper.java
Patch:
@@ -15,6 +15,6 @@ public class ShadowSQLiteOpenHelper {
   @Implementation(minSdk = O_MR1)
   protected void setIdleConnectionTimeout(long idleConnectionTimeoutMs) {
     // Calling the real one currently results in a Robolectric deadlock. Just ignore it.
-    // See b/78464547 .
+    // See https://github.com/robolectric/robolectric/issues/6853.
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -918,7 +918,7 @@ public void setSignalStrength(SignalStrength signalStrength) {
   /**
    * Cribbed from {@link android.telephony.PhoneNumberUtils#isEmergencyNumberInternal}.
    *
-   * <p>TODO(b/122324733) need better implementation
+   * <p>TODO: need better implementation
    */
   @Implementation(minSdk = Build.VERSION_CODES.Q)
   protected boolean isEmergencyNumber(String number) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -277,7 +277,7 @@ private void performSuccessfulPageLoad(String url) {
                 webChromeClient.onReceivedTitle(realWebView, url);
                 webChromeClient.onProgressChanged(realWebView, 100);
               }
-              if (webViewClient != null && VERSION.SDK_INT >= 23) {
+              if (webViewClient != null) {
                 webViewClient.onPageFinished(realWebView, url);
               }
             });

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -7,7 +7,6 @@
 import static org.robolectric.util.reflector.Reflector.reflector;
 
 import android.app.Activity;
-import android.app.ActivityThread;
 import android.app.Application;
 import android.app.Instrumentation;
 import android.content.ComponentName;
@@ -502,8 +501,9 @@ public ActivityController<T> recreate() {
     }
   }
 
-  private static Instrumentation getInstrumentation() {
-    return ((ActivityThread) RuntimeEnvironment.getActivityThread()).getInstrumentation();
+  // Get the Instrumentation object scoped to the Activity.
+  private Instrumentation getInstrumentation() {
+    return _component_.getInstrumentation();
   }
 
   /** Accessor interface for android.app.Activity.NonConfigurationInstances's internals. */

File: shadows/framework/src/main/java/org/robolectric/shadows/_Activity_.java
Patch:
@@ -372,4 +372,7 @@ void setVoiceInteractor(
 
   @Accessor("mConfigChangeFlags")
   void setConfigChangeFlags(int value);
+
+  @Accessor("mInstrumentation")
+  Instrumentation getInstrumentation();
 }

File: resources/src/main/java/org/robolectric/res/android/Chunk.java
Patch:
@@ -166,7 +166,6 @@ Chunk Next() {
       return new Chunk(this_chunk);
     }
 
-    // TODO(b/111401637) remove this and have full resource file verification
     // Returns false if there was an error. For legacy purposes.
     boolean VerifyNextChunkNonFatal() {
       if (len_ < ResChunk_header.SIZEOF) {

File: resources/src/main/java/org/robolectric/res/android/FileMap.java
Patch:
@@ -239,7 +239,7 @@ static ImmutableMap<String, Long> guessDataOffsets(File zipFile, int length) {
       while (true) {
         // Instead of trusting numRecords, read until we find the
         // end-of-central-directory signature.  numRecords may wrap
-        // around with >64K entries (b/5455504).
+        // around with >64K entries.
         int sig = readInt(buffer, offset);
         if (sig == ENDSIG || sig == ENDSIG64) {
           break;

File: robolectric/src/main/java/org/robolectric/android/internal/LocalUiController.java
Patch:
@@ -57,7 +57,8 @@ public boolean injectKeyEvent(KeyEvent event) throws InjectEventSecurityExceptio
     return true;
   }
 
-  // TODO(b/80130000): implementation copied from espresso's UIControllerImpl. Refactor code into common location
+  // TODO: implementation copied from espresso's UIControllerImpl. Refactor code into common
+  // location
   @Override
   public boolean injectString(String str) throws InjectEventSecurityException {
     checkNotNull(str);
@@ -72,8 +73,7 @@ public boolean injectString(String str) throws InjectEventSecurityException {
     boolean eventInjected = false;
     KeyCharacterMap keyCharacterMap = getKeyCharacterMap();
 
-    // TODO(b/80130875): Investigate why not use (as suggested in javadoc of
-    // keyCharacterMap.getEvents):
+    // TODO: Investigate why not use (as suggested in javadoc of keyCharacterMap.getEvents):
     // http://developer.android.com/reference/android/view/KeyEvent.html#KeyEvent(long,
     // java.lang.String, int, int)
     KeyEvent[] events = keyCharacterMap.getEvents(str.toCharArray());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacyMessageQueueTest.java
Patch:
@@ -204,7 +204,7 @@ public void postAndRemoveSyncBarrierToken() {
   }
 
   @Test
-  // TODO(b/74402484): enable once workaround is removed
+  // TODO(https://github.com/robolectric/robolectric/issues/6852): enable once workaround is removed
   @Ignore
   public void removeInvalidSyncBarrierToken() {
     try {

File: sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -82,7 +82,7 @@ private static URL[] getClassPathUrls(ClassLoader classloader) {
     return parseJavaClassPath();
   }
 
-  // TODO(b/65488446): Use a public API once one is available.
+  // TODO(https://github.com/google/guava/issues/2956): Use a public API once one is available.
   private static URL[] parseJavaClassPath() {
     ImmutableList.Builder<URL> urls = ImmutableList.builder();
     for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyMessageQueue.java
Patch:
@@ -166,7 +166,8 @@ private static void dispatchMessage(Message msg) {
   @Implementation
   @HiddenApi
   protected void removeSyncBarrier(int token) {
-    // TODO(b/74402484): workaround scheduler corruption of message queue
+    // TODO(https://github.com/robolectric/robolectric/issues/6852): workaround scheduler corruption
+    // of message queue
     try {
       reflector(MessageQueueReflector.class, realQueue).removeSyncBarrier(token);
     } catch (IllegalStateException e) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -89,7 +89,7 @@ public Parcelable.Creator<?> readParcelableCreator(ClassLoader loader) {
       // classloader" behavior.
       ClassLoader parcelableClassLoader = (loader == null ? getClass().getClassLoader() : loader);
       // Avoid initializing the Parcelable class until we know it implements
-      // Parcelable and has the necessary CREATOR field. http://b/1171613.
+      // Parcelable and has the necessary CREATOR field.
       Class<?> parcelableClass = Class.forName(name, false /* initialize */, parcelableClassLoader);
       if (!Parcelable.class.isAssignableFrom(parcelableClass)) {
         throw new BadParcelableException(

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSQLiteOpenHelper.java
Patch:
@@ -15,6 +15,6 @@ public class ShadowSQLiteOpenHelper {
   @Implementation(minSdk = O_MR1)
   protected void setIdleConnectionTimeout(long idleConnectionTimeoutMs) {
     // Calling the real one currently results in a Robolectric deadlock. Just ignore it.
-    // See b/78464547 .
+    // See https://github.com/robolectric/robolectric/issues/6853.
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -918,7 +918,7 @@ public void setSignalStrength(SignalStrength signalStrength) {
   /**
    * Cribbed from {@link android.telephony.PhoneNumberUtils#isEmergencyNumberInternal}.
    *
-   * <p>TODO(b/122324733) need better implementation
+   * <p>TODO: need better implementation
    */
   @Implementation(minSdk = Build.VERSION_CODES.Q)
   protected boolean isEmergencyNumber(String number) {

File: robolectric/src/main/java/org/robolectric/android/internal/LocalControlledLooper.java
Patch:
@@ -8,9 +8,7 @@
 import androidx.test.internal.platform.os.ControlledLooper;
 import org.robolectric.util.ReflectionHelpers;
 
-/**
- * A Robolectric implementation for {@link ControlledLooper}.
- */
+/** A Robolectric implementation for {@link ControlledLooper}. */
 @SuppressWarnings("RestrictTo")
 public class LocalControlledLooper implements ControlledLooper {
 

File: robolectric/src/main/java/org/robolectric/android/internal/RoboMonitoringInstrumentation.java
Patch:
@@ -34,9 +34,8 @@
 import org.robolectric.shadows.ShadowActivity;
 
 /**
- * A Robolectric instrumentation that acts like a slimmed down
- * {@link androidx.test.runner.MonitoringInstrumentation} with only the parts needed for
- * Robolectric.
+ * A Robolectric instrumentation that acts like a slimmed down {@link
+ * androidx.test.runner.MonitoringInstrumentation} with only the parts needed for Robolectric.
  */
 @SuppressWarnings("RestrictTo")
 public class RoboMonitoringInstrumentation extends Instrumentation {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -404,8 +404,9 @@ protected void arcTo(
         new Arc2D.Float(
             left, top, right - left, bottom - top, -startAngle, -sweepAngle, Arc2D.OPEN);
     mPath.append(arc, true /*connect*/);
-
-    resetLastPointFromPath();
+    if (hasPoints()) {
+      resetLastPointFromPath();
+    }
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -404,8 +404,9 @@ protected void arcTo(
         new Arc2D.Float(
             left, top, right - left, bottom - top, -startAngle, -sweepAngle, Arc2D.OPEN);
     mPath.append(arc, true /*connect*/);
-
-    resetLastPointFromPath();
+    if (hasPoints()) {
+      resetLastPointFromPath();
+    }
   }
 
   @Implementation

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -35,7 +35,9 @@ public static Builder newBuilder() {
       "org.robolectric.util.FragmentTestUtil$FragmentUtilActivity"
   );
 
-  static final Set<String> RESOURCES_TO_ALWAYS_ACQUIRE = Sets.newHashSet("build.prop");
+  // Must always acquire these as they change from API level to API level
+  static final ImmutableSet<String> RESOURCES_TO_ALWAYS_ACQUIRE =
+      ImmutableSet.of("build.prop", "usr/share/zoneinfo/tzdata");
 
   private final List<String> instrumentedPackages;
   private final Set<String> instrumentedClasses;

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -32,12 +32,12 @@ public class LocalActivityInvoker implements ActivityInvoker {
 
   @Override
   public void startActivity(Intent intent, @Nullable Bundle activityOptions) {
-    startActivity(intent);
+    controller = getInstrumentation().startActivitySyncInternal(intent, activityOptions);
   }
 
   @Override
   public void startActivity(Intent intent) {
-    controller = getInstrumentation().startActivitySyncInternal(intent);
+    startActivity(intent, /* activityOptions= */ null);
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -32,12 +32,12 @@ public class LocalActivityInvoker implements ActivityInvoker {
 
   @Override
   public void startActivity(Intent intent, @Nullable Bundle activityOptions) {
-    startActivity(intent);
+    controller = getInstrumentation().startActivitySyncInternal(intent, activityOptions);
   }
 
   @Override
   public void startActivity(Intent intent) {
-    controller = getInstrumentation().startActivitySyncInternal(intent);
+    startActivity(intent, /* activityOptions= */ null);
   }
 
   @Override

File: nativeruntime/src/main/java/org/robolectric/nativeruntime/NativeRuntimeLoader.java
Patch:
@@ -21,7 +21,7 @@ public final class NativeRuntimeLoader {
     } else {
       String errorMessage =
           String.format(
-              "The Robolectric native runtime is not supported on OS/Architecture %s/%s",
+              "The Robolectric native runtime is not supported on %s (%s)",
               OS_NAME.value(), OS_ARCH.value());
       throw new AssertionError(errorMessage);
     }
@@ -45,7 +45,7 @@ static void ensureLoaded() {
   }
 
   private static boolean isSupported() {
-    return ("mac".equals(osName()) && "aarch64".equals(arch()))
+    return ("mac".equals(osName()) && ("aarch64".equals(arch()) || "x86_64".equals(arch())))
         || ("linux".equals(osName()) && "x86_64".equals(arch()));
   }
 

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/ActivityScenarioTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import androidx.fragment.app.Fragment;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.R;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
 import androidx.lifecycle.Lifecycle.State;
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.core.app.ApplicationProvider;

File: integration_tests/ctesque/src/test/java/android/content/pm/PackageManagerTest.java
Patch:
@@ -17,8 +17,8 @@
 import android.content.Intent;
 import android.content.pm.PackageManager.NameNotFoundException;
 import androidx.test.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SdkSuppress;
-import androidx.test.runner.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.After;
@@ -79,7 +79,7 @@ public void getPackageInfo() throws Exception {
             // For Robolectric, it might be either "org.robolectric.ctesque" (bazel),
             // or "org.robolectric.ctesque.test" (gradle)
             ? context.getPackageName()
-            : "org.robolectric.testapp";
+            : "org.robolectric.ctesque.test";
 
     assertThat(activities[0].name).isEqualTo("org.robolectric.testapp.TestActivity");
     assertThat(activities[0].applicationInfo.packageName).isEqualTo(expectedPackage);

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -25,6 +25,7 @@
  *
  * <p>All the methods in this class are blocking API.
  */
+@SuppressWarnings("RestrictTo")
 public class LocalActivityInvoker implements ActivityInvoker {
 
   @Nullable private ActivityController<? extends Activity> controller;

File: robolectric/src/main/java/org/robolectric/android/internal/LocalPermissionGranter.java
Patch:
@@ -9,6 +9,7 @@
 import org.robolectric.shadows.ShadowApplication;
 
 /** A {@link PermissionGranter} that runs on a local JVM with Robolectric. */
+@SuppressWarnings("RestrictTo")
 public class LocalPermissionGranter implements PermissionGranter {
 
   private String[] permissions;

File: robolectric/src/main/java/org/robolectric/android/internal/NoOpThreadChecker.java
Patch:
@@ -6,6 +6,7 @@
  * In Robolectric environment, everything is executed on the main thread except for when you
  * manually create and run your code on worker thread.
  */
+@SuppressWarnings("RestrictTo")
 public class NoOpThreadChecker implements ThreadChecker {
   @Override
   public void checkMainThread() {}

File: robolectric/src/main/java/org/robolectric/android/internal/RoboMonitoringInstrumentation.java
Patch:
@@ -37,6 +37,7 @@
  * {@link androidx.test.runner.MonitoringInstrumentation} with only the parts needed for
  * Robolectric.
  */
+@SuppressWarnings("RestrictTo")
 public class RoboMonitoringInstrumentation extends Instrumentation {
 
   private static final String TAG = "RoboInstrumentation";

File: shadows/framework/src/main/java/org/robolectric/shadows/ModuleInfoBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static androidx.test.internal.util.Checks.checkNotNull;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 import android.content.pm.ModuleInfo;
 import androidx.annotation.Nullable;

File: shadows/framework/src/main/java/org/robolectric/shadows/PackageRollbackInfoBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static androidx.test.internal.util.Checks.checkNotNull;
+import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
 import android.content.pm.VersionedPackage;

File: shadows/framework/src/main/java/org/robolectric/shadows/RollbackInfoBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static androidx.test.internal.util.Checks.checkNotNull;
+import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
 import android.content.pm.VersionedPackage;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -308,6 +308,9 @@ private ShadowLegacyAssetManager getShadowAssetManager() {
     }
 
     private Resources getResources() {
+      if (RuntimeEnvironment.getApiLevel() >= LOLLIPOP) {
+        return realTheme.getResources();
+      }
       return ReflectionHelpers.getField(realTheme, "this$0");
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/PreLPointers.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.nativeruntime.shadows;
+package org.robolectric.shadows;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeCursorWindow.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.nativeruntime.shadows;
+package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
@@ -12,8 +12,8 @@
 import org.robolectric.nativeruntime.CursorWindowNatives;
 
 /** Shadow for {@link CursorWindow} that is backed by native code */
-@Implements(CursorWindow.class)
-public class ShadowCursorWindow {
+@Implements(value = CursorWindow.class, isInAndroidSdk = false)
+public class ShadowNativeCursorWindow extends ShadowCursorWindow {
 
   @Implementation
   protected static Number nativeCreate(String name, int cursorWindowSize) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNativeSQLiteConnection.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.nativeruntime.shadows;
+package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
@@ -16,8 +16,8 @@
 import org.robolectric.util.PerfStatsCollector;
 
 /** Shadow for {@link SQLiteConnection} that is backed by native code */
-@Implements(value = SQLiteConnection.class, isInAndroidSdk = false)
-public class ShadowSQLiteConnection {
+@Implements(className = "android.database.sqlite.SQLiteConnection", isInAndroidSdk = false)
+public class ShadowNativeSQLiteConnection extends ShadowSQLiteConnection {
 
   @Implementation(maxSdk = O)
   protected static Number nativeOpen(

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -991,6 +991,7 @@ public void shouldCorrectlyReturnNullValues() {
   @Test
   public void sqliteGlobal_defaults() {
     assertThat(SQLiteGlobal.getDefaultSyncMode()).isEqualTo("OFF");
+    assertThat(SQLiteGlobal.getWALSyncMode()).isEqualTo("OFF");
     assertThat(SQLiteGlobal.getDefaultJournalMode()).isEqualTo("MEMORY");
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -106,7 +106,10 @@ private static void setDefaults(Properties buildProperties) {
     buildProperties.setProperty("ro.product.cpu.abilist32", "armeabi-v7a,armeabi");
     buildProperties.setProperty("ro.product.cpu.abilist64", "armeabi-v7a,armeabi");
 
+    // Update SQLite sync mode and journal mode defaults for faster SQLite operations due to less
+    // file I/O.
     buildProperties.setProperty("debug.sqlite.syncmode", "OFF");
+    buildProperties.setProperty("debug.sqlite.wal.syncmode", "OFF");
     buildProperties.setProperty("debug.sqlite.journalmode", "MEMORY");
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -991,6 +991,7 @@ public void shouldCorrectlyReturnNullValues() {
   @Test
   public void sqliteGlobal_defaults() {
     assertThat(SQLiteGlobal.getDefaultSyncMode()).isEqualTo("OFF");
+    assertThat(SQLiteGlobal.getWALSyncMode()).isEqualTo("OFF");
     assertThat(SQLiteGlobal.getDefaultJournalMode()).isEqualTo("MEMORY");
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -106,7 +106,10 @@ private static void setDefaults(Properties buildProperties) {
     buildProperties.setProperty("ro.product.cpu.abilist32", "armeabi-v7a,armeabi");
     buildProperties.setProperty("ro.product.cpu.abilist64", "armeabi-v7a,armeabi");
 
+    // Update SQLite sync mode and journal mode defaults for faster SQLite operations due to less
+    // file I/O.
     buildProperties.setProperty("debug.sqlite.syncmode", "OFF");
+    buildProperties.setProperty("debug.sqlite.wal.syncmode", "OFF");
     buildProperties.setProperty("debug.sqlite.journalmode", "MEMORY");
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -4,7 +4,6 @@
 import com.google.common.base.Preconditions;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Properties;
 import org.robolectric.annotation.Implementation;
@@ -77,7 +76,6 @@ private static synchronized Properties loadProperties() {
     if (buildProperties == null) {
       // load the prop from classpath
       ClassLoader cl = SystemProperties.class.getClassLoader();
-      URL urlFromCl = cl.getResource("build.prop");
       try (InputStream is = cl.getResourceAsStream("build.prop")) {
         Preconditions.checkNotNull(is, "could not find build.prop");
         buildProperties = new Properties();
@@ -107,6 +105,9 @@ private static void setDefaults(Properties buildProperties) {
     buildProperties.setProperty("ro.product.cpu.abilist", "armeabi-v7a");
     buildProperties.setProperty("ro.product.cpu.abilist32", "armeabi-v7a,armeabi");
     buildProperties.setProperty("ro.product.cpu.abilist64", "armeabi-v7a,armeabi");
+
+    buildProperties.setProperty("debug.sqlite.syncmode", "OFF");
+    buildProperties.setProperty("debug.sqlite.journalmode", "MEMORY");
   }
 
   @Resetter

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -4,7 +4,6 @@
 import com.google.common.base.Preconditions;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Properties;
 import org.robolectric.annotation.Implementation;
@@ -77,7 +76,6 @@ private static synchronized Properties loadProperties() {
     if (buildProperties == null) {
       // load the prop from classpath
       ClassLoader cl = SystemProperties.class.getClassLoader();
-      URL urlFromCl = cl.getResource("build.prop");
       try (InputStream is = cl.getResourceAsStream("build.prop")) {
         Preconditions.checkNotNull(is, "could not find build.prop");
         buildProperties = new Properties();
@@ -107,6 +105,9 @@ private static void setDefaults(Properties buildProperties) {
     buildProperties.setProperty("ro.product.cpu.abilist", "armeabi-v7a");
     buildProperties.setProperty("ro.product.cpu.abilist32", "armeabi-v7a,armeabi");
     buildProperties.setProperty("ro.product.cpu.abilist64", "armeabi-v7a,armeabi");
+
+    buildProperties.setProperty("debug.sqlite.syncmode", "OFF");
+    buildProperties.setProperty("debug.sqlite.journalmode", "MEMORY");
   }
 
   @Resetter

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -56,6 +56,7 @@
 import android.net.wifi.aware.IWifiAwareManager;
 import android.net.wifi.p2p.IWifiP2pManager;
 import android.net.wifi.rtt.IWifiRttManager;
+import android.nfc.INfcAdapter;
 import android.os.BatteryStats;
 import android.os.Binder;
 import android.os.IBatteryPropertiesRegistrar;
@@ -119,6 +120,7 @@ public class ShadowServiceManager {
     addBinderService(Context.WALLPAPER_SERVICE, IWallpaperManager.class);
     addBinderService(Context.BLUETOOTH_SERVICE, IBluetooth.class);
     addBinderService(Context.WINDOW_SERVICE, IWindowManager.class);
+    addBinderService(Context.NFC_SERVICE, INfcAdapter.class, true);
 
     if (RuntimeEnvironment.getApiLevel() >= JELLY_BEAN_MR1) {
       addBinderService(Context.USER_SERVICE, IUserManager.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiConfigurationTest.java
Patch:
@@ -118,6 +118,7 @@ public void shouldCopy_sdk23() {
     assertThat(copy.creatorUid).isEqualTo(888);
   }
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void toStringDoesntCrash() {
     WifiConfiguration wifiConfiguration = new WifiConfiguration();

File: sandbox/src/test/java/org/robolectric/internal/bytecode/SandboxClassLoaderTest.java
Patch:
@@ -413,6 +413,7 @@ public void shouldNotInstrumentFinalEqualsHashcode() throws ClassNotFoundExcepti
   }
 
   @Test
+  @SuppressWarnings("CheckReturnValue")
   public void shouldAlsoInstrumentEqualsAndHashCodeAndToStringWhenDeclared() throws Exception {
     Class<?> theClass = loadClass(AClassWithEqualsHashCodeToString.class);
     Object instance = theClass.getDeclaredConstructor().newInstance();

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/ActivityScenarioTest.java
Patch:
@@ -3,13 +3,13 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import android.app.Activity;
-import androidx.lifecycle.Lifecycle.State;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import androidx.fragment.app.Fragment;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.R;
+import androidx.lifecycle.Lifecycle.State;
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -83,8 +83,7 @@ protected InstrumentationConfiguration(
    * @return True if the class should be instrumented.
    */
   public boolean shouldInstrument(ClassDetails classDetails) {
-    return !classDetails.isInterface()
-        && !classDetails.isAnnotation()
+    return !classDetails.isAnnotation()
         && !classesToNotInstrument.contains(classDetails.getName())
         && !isInPackagesToNotInstrument(classDetails.getName())
         && !classMatchesExclusionRegex(classDetails.getName())

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -83,8 +83,7 @@ protected InstrumentationConfiguration(
    * @return True if the class should be instrumented.
    */
   public boolean shouldInstrument(ClassDetails classDetails) {
-    return !classDetails.isInterface()
-        && !classDetails.isAnnotation()
+    return !classDetails.isAnnotation()
         && !classesToNotInstrument.contains(classDetails.getName())
         && !isInPackagesToNotInstrument(classDetails.getName())
         && !classMatchesExclusionRegex(classDetails.getName())

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -27,7 +27,6 @@
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 import org.robolectric.internal.bytecode.Interceptor;
 import org.robolectric.internal.bytecode.Interceptors;
-import org.robolectric.internal.bytecode.InvokeDynamicClassInstrumentor;
 import org.robolectric.internal.bytecode.Sandbox;
 import org.robolectric.internal.bytecode.SandboxConfig;
 import org.robolectric.internal.bytecode.ShadowInfo;
@@ -49,8 +48,7 @@ public class SandboxTestRunner extends BlockJUnit4ClassRunner {
   private static final Injector DEFAULT_INJECTOR = defaultInjector().build();
 
   protected static Injector.Builder defaultInjector() {
-    return new Injector.Builder()
-        .bindDefault(ClassInstrumentor.class, InvokeDynamicClassInstrumentor.class);
+    return new Injector.Builder();
   }
 
   private final ClassInstrumentor classInstrumentor;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLauncherApps.java
Patch:
@@ -310,7 +310,7 @@ private Predicate<LauncherActivityInfo> matchesPackage(@Nullable String packageN
     return info ->
         packageName == null
             || (info.getComponentName() != null
-            && packageName.equals(info.getComponentName().getPackageName()));
+                && packageName.equals(info.getComponentName().getPackageName()));
   }
 
   @ForType(ShortcutQuery.class)

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/MavenDependencyResolver.java
Patch:
@@ -146,7 +146,7 @@ private String getLocalRepositoryFromSettings(File mavenHome) {
 
       if (nodeList.getLength() != 0) {
         Node node = nodeList.item(0);
-        return node.getTextContent();
+        return node.getTextContent().trim();
       }
     } catch (ParserConfigurationException | IOException | SAXException e) {
       Logger.error("Error reading settings.xml", e);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -1493,6 +1493,6 @@ public static void reset() {
   interface AssetManagerReflector {
 
     @Direct
-    void setApkAssets(Object apkAssetsObject, Object invalidateCachesObject);
+    void setApkAssets(ApkAssets[] apkAssetsObject, boolean invalidateCachesObject);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -1493,6 +1493,6 @@ public static void reset() {
   interface AssetManagerReflector {
 
     @Direct
-    void setApkAssets(Object apkAssetsObject, Object invalidateCachesObject);
+    void setApkAssets(ApkAssets[] apkAssetsObject, boolean invalidateCachesObject);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraDeviceImpl.java
Patch:
@@ -25,7 +25,7 @@ public class ShadowCameraDeviceImpl {
   @RealObject private CameraDeviceImpl realObject;
   private boolean closed = false;
 
-  @Implementation(maxSdk = VERSION_CODES.Q)
+  @Implementation
   protected CaptureRequest.Builder createCaptureRequest(int templateType) {
     checkIfCameraClosedOrInError();
     CameraMetadataNative templatedRequest = new CameraMetadataNative();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -126,7 +126,7 @@ protected static boolean isLoggable(String tag, int level) {
         return level >= tagToLevel.get(tag);
       }
     }
-    return stream != null || level >= Log.INFO;
+    return level >= Log.INFO;
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCameraDeviceImpl.java
Patch:
@@ -25,7 +25,7 @@ public class ShadowCameraDeviceImpl {
   @RealObject private CameraDeviceImpl realObject;
   private boolean closed = false;
 
-  @Implementation(maxSdk = VERSION_CODES.Q)
+  @Implementation
   protected CaptureRequest.Builder createCaptureRequest(int templateType) {
     checkIfCameraClosedOrInError();
     CameraMetadataNative templatedRequest = new CameraMetadataNative();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -22,6 +22,7 @@
 import android.os.Process;
 import android.os.UserHandle;
 import androidx.annotation.RequiresApi;
+import com.google.common.base.Preconditions;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Deque;
@@ -321,9 +322,8 @@ public void addApplicationExitInfo(String processName, int pid, int reason, int
   /** Adds given {@link ApplicationExitInfo}, see {@link ApplicationExitInfoBuilder} */
   @RequiresApi(api = R)
   public void addApplicationExitInfo(Object info) {
-    if (info instanceof ApplicationExitInfo) {
-      appExitInfoList.addFirst(info);
-    }
+    Preconditions.checkArgument(info instanceof ApplicationExitInfo);
+    appExitInfoList.addFirst(info);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -47,6 +47,7 @@
 import android.media.IMediaRouterService;
 import android.media.session.ISessionManager;
 import android.net.IConnectivityManager;
+import android.net.IIpSecService;
 import android.net.INetworkPolicyManager;
 import android.net.INetworkScoreService;
 import android.net.ITetheringConnector;
@@ -157,6 +158,7 @@ public class ShadowServiceManager {
       addBinderService(Context.SLICE_SERVICE, ISliceManager.class);
       addBinderService(Context.CROSS_PROFILE_APPS_SERVICE, ICrossProfileApps.class);
       addBinderService(Context.WIFI_RTT_RANGING_SERVICE, IWifiRttManager.class);
+      addBinderService(Context.IPSEC_SERVICE, IIpSecService.class);
     }
     if (RuntimeEnvironment.getApiLevel() >= Q) {
       addBinderService(Context.BIOMETRIC_SERVICE, IBiometricService.class);

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -99,6 +99,7 @@ public class AndroidTestEnvironment implements TestEnvironment {
   private PackageResourceTable systemResourceTable;
   private final ShadowProvider[] shadowProviders;
   private final TestEnvironmentLifecyclePlugin[] testEnvironmentLifecyclePlugins;
+  private final Locale initialLocale = Locale.getDefault();
 
   public AndroidTestEnvironment(
       @Named("runtimeSdk") Sdk runtimeSdk,
@@ -616,6 +617,7 @@ private boolean hasUnexecutedRunnables() {
 
   @Override
   public void resetState() {
+    Locale.setDefault(initialLocale);
     for (ShadowProvider provider : shadowProviders) {
       provider.reset();
     }

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -578,6 +578,7 @@ private void clearEnvironment() {
     InstrumentationRegistry.registerInstance(null, new Bundle());
     RuntimeEnvironment.setActivityThread(null);
     RuntimeEnvironment.application = null;
+    RuntimeEnvironment.systemContext = null;
     Bootstrap.resetDisplayConfiguration();
   }
 

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -578,6 +578,7 @@ private void clearEnvironment() {
     InstrumentationRegistry.registerInstance(null, new Bundle());
     RuntimeEnvironment.setActivityThread(null);
     RuntimeEnvironment.application = null;
+    RuntimeEnvironment.systemContext = null;
     Bootstrap.resetDisplayConfiguration();
   }
 

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -72,6 +72,8 @@ public class RobolectricTestRunner extends SandboxTestRunner {
     // This starts up the Poller SunPKCS11-Darwin thread early, outside of any Robolectric
     // classloader.
     new SecureRandom();
+    // Fixes an issue using AWT-backed graphics shadows when using X11 forwarding.
+    System.setProperty("java.awt.headless", "true");
   }
 
   protected static Injector.Builder defaultInjector() {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -72,6 +72,8 @@ public class RobolectricTestRunner extends SandboxTestRunner {
     // This starts up the Poller SunPKCS11-Darwin thread early, outside of any Robolectric
     // classloader.
     new SecureRandom();
+    // Fixes an issue using AWT-backed graphics shadows when using X11 forwarding.
+    System.setProperty("java.awt.headless", "true");
   }
 
   protected static Injector.Builder defaultInjector() {

File: sandbox/src/main/java/org/robolectric/config/AndroidConfigurer.java
Patch:
@@ -76,7 +76,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
         .doNotAcquirePackage(
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
-        .doNotAcquirePackage("io.mockk.")
+        .doNotAcquirePackage("io.mockk.proxy.")
         .doNotAcquirePackage("org.bouncycastle.")
         .doNotAcquirePackage("org.conscrypt.")
         // Fix #958: SQLite native library must be loaded once.

File: sandbox/src/main/java/org/robolectric/config/AndroidConfigurer.java
Patch:
@@ -76,7 +76,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
         .doNotAcquirePackage(
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
-        .doNotAcquirePackage("io.mockk.")
+        .doNotAcquirePackage("io.mockk.proxy.")
         .doNotAcquirePackage("org.bouncycastle.")
         .doNotAcquirePackage("org.conscrypt.")
         // Fix #958: SQLite native library must be loaded once.

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -72,6 +72,7 @@
 import org.robolectric.shadows.ShadowContextImpl._ContextImpl_;
 import org.robolectric.shadows.ShadowInstrumentation;
 import org.robolectric.shadows.ShadowInstrumentation._Instrumentation_;
+import org.robolectric.shadows.ShadowLegacyLooper;
 import org.robolectric.shadows.ShadowLoadedApk._LoadedApk_;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowLooper;
@@ -137,6 +138,7 @@ public void setUpApplicationState(
     if (ShadowLooper.looperMode() == LooperMode.Mode.LEGACY) {
       RuntimeEnvironment.setMasterScheduler(new Scheduler());
       RuntimeEnvironment.setMainThread(Thread.currentThread());
+      ShadowLegacyLooper.internalInitializeBackgroundThreadScheduler();
     }
 
     if (!loggingInitialized) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -43,7 +43,7 @@ public class ShadowBluetoothAdapterTest {
 
   @Before
   public void setUp() throws Exception {
-    bluetoothAdapter = Shadow.newInstanceOf(BluetoothAdapter.class);
+    bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -43,7 +43,7 @@ public class ShadowBluetoothAdapterTest {
 
   @Before
   public void setUp() throws Exception {
-    bluetoothAdapter = Shadow.newInstanceOf(BluetoothAdapter.class);
+    bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -256,9 +256,6 @@ private Instrumentation installAndCreateApplication(
     Bootstrap.setUpDisplay();
     activityThread.applyConfigurationToResources(androidConfiguration);
 
-    Resources systemResources = Resources.getSystem();
-    systemResources.updateConfiguration(androidConfiguration, displayMetrics);
-
     Application application = createApplication(appManifest, config, applicationInfo);
     RuntimeEnvironment.setConfiguredApplicationClass(application.getClass());
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.Locale;
 import org.robolectric.RuntimeEnvironment;
+import org.robolectric.android.Bootstrap;
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -77,6 +78,7 @@ protected static Resources getSystem() {
       DisplayMetrics metrics = new DisplayMetrics();
       Configuration config = new Configuration();
       system = new Resources(assetManager, metrics, config);
+      Bootstrap.updateConfiguration(system);
     }
     return system;
   }

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -256,9 +256,6 @@ private Instrumentation installAndCreateApplication(
     Bootstrap.setUpDisplay();
     activityThread.applyConfigurationToResources(androidConfiguration);
 
-    Resources systemResources = Resources.getSystem();
-    systemResources.updateConfiguration(androidConfiguration, displayMetrics);
-
     Application application = createApplication(appManifest, config, applicationInfo);
     RuntimeEnvironment.setConfiguredApplicationClass(application.getClass());
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.Locale;
 import org.robolectric.RuntimeEnvironment;
+import org.robolectric.android.Bootstrap;
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -77,6 +78,7 @@ protected static Resources getSystem() {
       DisplayMetrics metrics = new DisplayMetrics();
       Configuration config = new Configuration();
       system = new Resources(assetManager, metrics, config);
+      Bootstrap.updateConfiguration(system);
     }
     return system;
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacySystemClockTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.LazyLoadApplication;
-import org.robolectric.annotation.LazyLoadApplication.LazyLoad;
+import org.robolectric.annotation.LazyApplication;
+import org.robolectric.annotation.LazyApplication.LazyLoad;
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.internal.bytecode.RobolectricInternals;
 
@@ -95,7 +95,7 @@ public void currentNetworkTimeMillis_networkTimeNotAvailable_shouldThrowDateTime
   }
 
   @Test
-  @LazyLoadApplication(LazyLoad.ON)
+  @LazyApplication(LazyLoad.ON)
   public void systemClockWorksWithLazyApplication() {
     SystemClock.setCurrentTimeMillis(10000);
     assertThat(ShadowSystemClock.currentTimeMillis()).isEqualTo(10000);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacySystemClockTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.LazyLoadApplication;
-import org.robolectric.annotation.LazyLoadApplication.LazyLoad;
+import org.robolectric.annotation.LazyApplication;
+import org.robolectric.annotation.LazyApplication.LazyLoad;
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.internal.bytecode.RobolectricInternals;
 
@@ -95,7 +95,7 @@ public void currentNetworkTimeMillis_networkTimeNotAvailable_shouldThrowDateTime
   }
 
   @Test
-  @LazyLoadApplication(LazyLoad.ON)
+  @LazyApplication(LazyLoad.ON)
   public void systemClockWorksWithLazyApplication() {
     SystemClock.setCurrentTimeMillis(10000);
     assertThat(ShadowSystemClock.currentTimeMillis()).isEqualTo(10000);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapTest.java
Patch:
@@ -489,12 +489,11 @@ public void compress_shouldLessThanBeforeForWebp() {
   }
 
   @Test
-  public void compress_shouldSucceedForNullColorArray() {
+  public void compress_shouldSucceedForNullPixelData() {
     Bitmap bitmap = Shadow.newInstanceOf(Bitmap.class);
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);
     shadowBitmap.setWidth(100);
     shadowBitmap.setHeight(100);
-    assertThat(shadowBitmap.getPixelsInternal()).isNull();
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -255,14 +255,14 @@ private static void initColorArray(
         .measure(
             "initColorArray",
             () -> {
-              int[] colors = shadowBitmap.getColorsInternal();
-              if (colors.length == image.getWidth() * image.getHeight()) {
+              int[] pixels = shadowBitmap.getPixelsInternal();
+              if (pixels.length == image.getWidth() * image.getHeight()) {
                 image.getRGB(
                     0,
                     0,
                     image.getWidth(),
                     image.getHeight(),
-                    shadowBitmap.getPixelsInternal(),
+                    pixels,
                     0,
                     image.getWidth());
               }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -640,7 +640,8 @@ private AudioFocusRequest(
 
     private AudioFocusRequest(android.media.AudioFocusRequest audioFocusRequest) {
       this.listener = audioFocusRequest.getOnAudioFocusChangeListener();
-      this.streamType = this.durationHint = -1;
+      this.durationHint = audioFocusRequest.getFocusGain();
+      this.streamType = audioFocusRequest.getAudioAttributes().getVolumeControlStream();
       this.audioFocusRequest = audioFocusRequest;
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -640,7 +640,8 @@ private AudioFocusRequest(
 
     private AudioFocusRequest(android.media.AudioFocusRequest audioFocusRequest) {
       this.listener = audioFocusRequest.getOnAudioFocusChangeListener();
-      this.streamType = this.durationHint = -1;
+      this.durationHint = audioFocusRequest.getFocusGain();
+      this.streamType = audioFocusRequest.getAudioAttributes().getVolumeControlStream();
       this.audioFocusRequest = audioFocusRequest;
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -176,8 +176,8 @@ protected static Bitmap decodeStream(
             ? null
             : new Point(bufferedImage.getWidth(), bufferedImage.getHeight());
     Bitmap bitmap = create(name, outPadding, opts, imageSize);
-    ReflectionHelpers.callInstanceMethod(bitmap, "setNinePatchChunk",
-            ClassParameter.from(byte[].class, ninePatchChunk));
+    ReflectionHelpers.callInstanceMethod(
+        bitmap, "setNinePatchChunk", ClassParameter.from(byte[].class, ninePatchChunk));
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);
     shadowBitmap.createdFromStream = is;
 
@@ -229,7 +229,7 @@ public static Bitmap create(String name, BitmapFactory.Options options) {
   public static Bitmap create(final String name, final BitmapFactory.Options options, final Point widthAndHeight) {
     return create(name, null, options, widthAndHeight);
   }
-  
+
   private static void initColorArray(
       BufferedImage image, byte[] ninePatchChunk, ShadowBitmap shadowBitmap) {
     if (image == null || ninePatchChunk != null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -176,8 +176,8 @@ protected static Bitmap decodeStream(
             ? null
             : new Point(bufferedImage.getWidth(), bufferedImage.getHeight());
     Bitmap bitmap = create(name, outPadding, opts, imageSize);
-    ReflectionHelpers.callInstanceMethod(bitmap, "setNinePatchChunk",
-            ClassParameter.from(byte[].class, ninePatchChunk));
+    ReflectionHelpers.callInstanceMethod(
+        bitmap, "setNinePatchChunk", ClassParameter.from(byte[].class, ninePatchChunk));
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);
     shadowBitmap.createdFromStream = is;
 
@@ -229,7 +229,7 @@ public static Bitmap create(String name, BitmapFactory.Options options) {
   public static Bitmap create(final String name, final BitmapFactory.Options options, final Point widthAndHeight) {
     return create(name, null, options, widthAndHeight);
   }
-  
+
   private static void initColorArray(
       BufferedImage image, byte[] ninePatchChunk, ShadowBitmap shadowBitmap) {
     if (image == null || ninePatchChunk != null) {

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/CachedDependencyResolver.java
Patch:
@@ -109,6 +109,7 @@ static class FileCache implements Cache {
       this.validTime = validTime;
     }
 
+    @SuppressWarnings("BanSerializableRead")
     @Override
     public <T extends Serializable> T load(String id, Class<T> type) {
       try {

File: shadowapi/src/main/java/org/robolectric/config/ConfigurationRegistry.java
Patch:
@@ -44,6 +44,7 @@ private <T> T getInSandboxClassLoader(Class<T> someConfigClass) {
     return someConfigClass.cast(configInSandboxLoader);
   }
 
+  @SuppressWarnings("BanSerializableRead")
   private static Object reloadInSandboxClassLoader(Object configInParentLoader) {
     ByteArrayOutputStream buf = new ByteArrayOutputStream();
     try (ObjectOutputStream out = new ObjectOutputStream(buf)) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -897,6 +897,7 @@ private static boolean isAllZeroes(byte[] array, int offset, int length) {
      * @param offset starting position in bytes to start reading array at
      * @param length number of bytes to read from array
      */
+    @SuppressWarnings("BanSerializableRead")
     public static ByteBuffer fromByteArray(byte[] array, int offset, int length) {
       ByteBuffer byteBuffer = new ByteBuffer();
 

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/RobolectricShadowTest.java
Patch:
@@ -15,7 +15,7 @@ public class RobolectricShadowTest {
   @Before
   public void setUp() {
     this.testHelper =
-        BugCheckerRefactoringTestHelper.newInstance(new RobolectricShadow(), getClass());
+        BugCheckerRefactoringTestHelper.newInstance(RobolectricShadow.class, getClass());
   }
 
   @Test

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/CachedDependencyResolver.java
Patch:
@@ -109,6 +109,7 @@ static class FileCache implements Cache {
       this.validTime = validTime;
     }
 
+    @SuppressWarnings("BanSerializableRead")
     @Override
     public <T extends Serializable> T load(String id, Class<T> type) {
       try {

File: shadowapi/src/main/java/org/robolectric/config/ConfigurationRegistry.java
Patch:
@@ -44,6 +44,7 @@ private <T> T getInSandboxClassLoader(Class<T> someConfigClass) {
     return someConfigClass.cast(configInSandboxLoader);
   }
 
+  @SuppressWarnings("BanSerializableRead")
   private static Object reloadInSandboxClassLoader(Object configInParentLoader) {
     ByteArrayOutputStream buf = new ByteArrayOutputStream();
     try (ObjectOutputStream out = new ObjectOutputStream(buf)) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -897,6 +897,7 @@ private static boolean isAllZeroes(byte[] array, int offset, int length) {
      * @param offset starting position in bytes to start reading array at
      * @param length number of bytes to read from array
      */
+    @SuppressWarnings("BanSerializableRead")
     public static ByteBuffer fromByteArray(byte[] array, int offset, int length) {
       ByteBuffer byteBuffer = new ByteBuffer();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -290,6 +290,7 @@ private static Bitmap create(
     if (options != null) {
       options.outWidth = p.x;
       options.outHeight = p.y;
+      shadowBitmap.setMutable(options.inMutable);
     }
 
     if (RuntimeEnvironment.getApiLevel() >= Build.VERSION_CODES.KITKAT) {

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/RobolectricShadowTest.java
Patch:
@@ -15,7 +15,7 @@ public class RobolectricShadowTest {
   @Before
   public void setUp() {
     this.testHelper =
-        BugCheckerRefactoringTestHelper.newInstance(new RobolectricShadow(), getClass());
+        BugCheckerRefactoringTestHelper.newInstance(RobolectricShadow.class, getClass());
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ImageUtil.java
Patch:
@@ -67,12 +67,12 @@ public static RobolectricBufferedImage getImageFromStream(InputStream is) {
       ImageReader reader = readers.next();
       try {
         reader.setInput(imageStream);
-        String mimeType = reader.getFormatName();
+        String format = reader.getFormatName();
         int minIndex = reader.getMinIndex();
         BufferedImage image = reader.read(minIndex);
         RobolectricBufferedImage robolectricBufferedImage = new RobolectricBufferedImage();
         robolectricBufferedImage.bufferedImage = image;
-        robolectricBufferedImage.mimeType = mimeType;
+        robolectricBufferedImage.mimeType = ("image/" + format).toLowerCase();
         return robolectricBufferedImage;
       } finally {
         reader.dispose();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URLConnection;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -174,7 +173,7 @@ protected static Bitmap decodeStream(
     shadowBitmap.createdFromStream = is;
 
     if (image != null && opts != null) {
-      opts.outMimeType = URLConnection.guessContentTypeFromName("test." + image.mimeType);
+      opts.outMimeType = image.mimeType;
     }
     initColorArray(bufferedImage, ninePatchChunk, shadowBitmap);
     return bitmap;

File: integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java
Patch:
@@ -70,7 +70,7 @@ public void testExtractAlpha() {
     Bitmap ret = bitmap.extractAlpha();
     int source = bitmap.getPixel(10, 20);
     int result = ret.getPixel(10, 20);
-    assertThat(result).isEqualTo(Color.alpha(source));
+    assertThat(Color.alpha(result)).isEqualTo(Color.alpha(source));
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -507,7 +507,7 @@ protected void setHasAlpha(boolean hasAlpha) {
   protected Bitmap extractAlpha() {
     int[] alphaPixels = new int[colors.length];
     for (int i = 0; i < alphaPixels.length; i++) {
-      alphaPixels[i] = Color.alpha(colors[i]);
+      alphaPixels[i] = Color.argb(Color.alpha(colors[i]), 0, 0, 0);
     }
 
     return createBitmap(alphaPixels, getWidth(), getHeight(), Bitmap.Config.ALPHA_8);

File: shadows/framework/src/main/java/org/robolectric/shadows/ImageUtil.java
Patch:
@@ -110,6 +110,9 @@ private static boolean needAlphaChannel(CompressFormat compressFormat) {
   }
 
   private static int getBufferedImageType(Bitmap.Config config, boolean needAlphaChannel) {
+    if (config == null) {
+      return needAlphaChannel ? TYPE_INT_ARGB : TYPE_INT_RGB;
+    }
     switch (config) {
       case RGB_565:
         return BufferedImage.TYPE_USHORT_565_RGB;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -104,7 +104,7 @@ protected static Bitmap decodeFile(String pathName, BitmapFactory.Options option
           BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream)) {
         initColorArray(bufferedInputStream, bitmap.getNinePatchChunk(), shadowBitmap, false);
       } catch (IOException e) {
-        Logger.warn("Error getting size of bitmap file", e);
+        Logger.warn("Error initialization of color array", e);
       }
     }
     return bitmap;

File: integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java
Patch:
@@ -70,7 +70,7 @@ public void testExtractAlpha() {
     Bitmap ret = bitmap.extractAlpha();
     int source = bitmap.getPixel(10, 20);
     int result = ret.getPixel(10, 20);
-    assertThat(Color.alpha(result)).isEqualTo(Color.alpha(source));
+    assertThat(result).isEqualTo(Color.alpha(source));
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -86,6 +86,8 @@ public interface BootstrapWrapperI {
     void changeAppManifest(AndroidManifest manifest);
 
     void tearDownApplication();
+
+    void resetState();
   }
 
 }

File: robolectric/src/test/java/org/robolectric/shadows/FrameMetricsBuilderTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-/** Tests for {@link ShadowFrameMetrics}. */
+/** Tests for {@link FrameMetricsBuilder}. */
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = N)
 public class FrameMetricsBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/PhoneAccountBuilderTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-/** Test for {@link org.robolectric.shadows.ShadowPhoneAccount}. */
+/** Test for {@link PhoneAccountBuilder}. */
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = M)
 public class PhoneAccountBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -16,18 +16,17 @@
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowAbsSpinnerTest {
-  private Context context;
   private Spinner spinner;
   private ShadowAbsSpinner shadowSpinner;
   private ArrayAdapter<String> arrayAdapter;
 
   @Before
   public void setUp() throws Exception {
-    context = ApplicationProvider.getApplicationContext();
+    Context context = ApplicationProvider.getApplicationContext();
     spinner = new Spinner(context);
     shadowSpinner = shadowOf(spinner);
     String [] testItems = {"foo", "bar"};
-    arrayAdapter = new MyArrayAdapter(this.context, testItems);
+    arrayAdapter = new MyArrayAdapter(context, testItems);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -15,15 +15,14 @@
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowAccessibilityWindowInfoTest {
-  private AccessibilityWindowInfo window;
   private ShadowAccessibilityWindowInfo shadow;
 
   @Before
   public void setUp() {
     ShadowAccessibilityWindowInfo.resetObtainedInstances();
     assertThat(ShadowAccessibilityWindowInfo.areThereUnrecycledWindows(true)).isEqualTo(false);
-    window = ShadowAccessibilityWindowInfo.obtain();
-    assertThat(window == null).isEqualTo(false);
+    AccessibilityWindowInfo window = ShadowAccessibilityWindowInfo.obtain();
+    assertThat(window).isNotNull();
     shadow = shadowOf(window);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityGroupTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowActivityGroupTest {
 
   @Test
-  public void getCurrentActivity_shouldReturnTheProvidedCurrentActivity() throws Exception {
+  public void getCurrentActivity_shouldReturnTheProvidedCurrentActivity() {
   ActivityGroup activityGroup = new ActivityGroup();
   Activity activity = new Activity();
   shadowOf(activityGroup).setCurrentActivity(activity);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -162,7 +162,7 @@ public void setIsLowRamDevice() {
 
   @Test
   @Config(minSdk = M)
-  public void getLockTaskModeState() throws Exception {
+  public void getLockTaskModeState() {
     assertThat(activityManager.getLockTaskModeState())
         .isEqualTo(ActivityManager.LOCK_TASK_MODE_NONE);
 
@@ -173,7 +173,7 @@ public void getLockTaskModeState() throws Exception {
   }
 
   @Test
-  public void getMyMemoryState() throws Exception {
+  public void getMyMemoryState() {
     ActivityManager.RunningAppProcessInfo inState = new ActivityManager.RunningAppProcessInfo();
     ActivityManager.getMyMemoryState(inState);
     assertThat(inState.uid).isEqualTo(Process.myUid());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -284,7 +284,7 @@ public void cancel_removesMatchingPendingIntentsWithActions() {
   }
 
   @Test
-  public void schedule_useRequestCodeToMatchExistingPendingIntents() throws Exception {
+  public void schedule_useRequestCodeToMatchExistingPendingIntents() {
     Intent intent = new Intent("ACTION!");
     PendingIntent pI = PendingIntent.getService(context, 1, intent, 0);
     alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, 10, pI);
@@ -296,7 +296,7 @@ public void schedule_useRequestCodeToMatchExistingPendingIntents() throws Except
   }
 
   @Test
-  public void cancel_useRequestCodeToMatchExistingPendingIntents() throws Exception {
+  public void cancel_useRequestCodeToMatchExistingPendingIntents() {
     Intent intent = new Intent("ACTION!");
     PendingIntent pI = PendingIntent.getService(context, 1, intent, 0);
     alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, 10, pI);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioEffectTest.java
Patch:
@@ -20,7 +20,6 @@ public class ShadowAudioEffectTest {
   private static final UUID EFFECT_TYPE_NULL =
       UUID.fromString("ec7178ec-e5e1-4432-a3f4-4657e6795210");
 
-  @Config(maxSdk = -1)
   @Test
   public void queryEffects() {
 
@@ -140,7 +139,7 @@ public void getEnabled_audioEffectUninitialized_throwsException() {
     AudioEffect audioEffect = createAudioEffect();
     shadowOf(audioEffect).setInitialized(false);
 
-    assertThrows(IllegalStateException.class, () -> audioEffect.getEnabled());
+    assertThrows(IllegalStateException.class, audioEffect::getEnabled);
   }
 
   @Test
@@ -164,7 +163,7 @@ public void release_callGetEnabledAfterwards_throwsException() {
     AudioEffect audioEffect = createAudioEffect();
     audioEffect.release();
 
-    assertThrows(IllegalStateException.class, () -> audioEffect.getEnabled());
+    assertThrows(IllegalStateException.class, audioEffect::getEnabled);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -3,7 +3,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
-import android.app.Application;
 import android.content.Context;
 import android.widget.ArrayAdapter;
 import android.widget.AutoCompleteTextView;
@@ -20,10 +19,10 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowAutoCompleteTextViewTest {
   private final AutoCompleteAdapter adapter =
-      new AutoCompleteAdapter((Application) ApplicationProvider.getApplicationContext());
+      new AutoCompleteAdapter(ApplicationProvider.getApplicationContext());
 
   @Test
-  public void shouldInvokeFilter() throws Exception {
+  public void shouldInvokeFilter() {
     shadowMainLooper().pause();
     AutoCompleteTextView view =
         new AutoCompleteTextView(ApplicationProvider.getApplicationContext());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupManagerTest.java
Patch:
@@ -18,6 +18,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.truth.Correspondence;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Objects;
 import org.junit.Before;
 import org.junit.Test;
@@ -46,7 +47,7 @@ public void setUp() {
     backupManager = new BackupManager(ApplicationProvider.getApplicationContext());
 
     shadowOf(backupManager).addAvailableRestoreSets(123L, Arrays.asList("foo.bar", "bar.baz"));
-    shadowOf(backupManager).addAvailableRestoreSets(456L, Arrays.asList("hello.world"));
+    shadowOf(backupManager).addAvailableRestoreSets(456L, Collections.singletonList("hello.world"));
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBaseAdapterTest.java
Patch:
@@ -14,14 +14,14 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowBaseAdapterTest {
   @Test
-  public void shouldRecordNotifyDataSetChanged() throws Exception {
+  public void shouldRecordNotifyDataSetChanged() {
     BaseAdapter adapter = new TestBaseAdapter();
     adapter.notifyDataSetChanged();
     assertTrue(shadowOf(adapter).wasNotifyDataSetChangedCalled());
   }
 
   @Test
-  public void canResetNotifyDataSetChangedFlag() throws Exception {
+  public void canResetNotifyDataSetChangedFlag() {
     BaseAdapter adapter = new TestBaseAdapter();
     adapter.notifyDataSetChanged();
     shadowOf(adapter).clearWasDataSetChangedCalledFlag();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBasicTagTechnologyTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-/** Unit tests for {@link #ShadowBasicTagTechnology}. */
+/** Unit tests for {@link ShadowBasicTagTechnology}. */
 @RunWith(AndroidJUnit4.class)
 @Config(minSdk = KITKAT)
 public final class ShadowBasicTagTechnologyTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBiometricManagerTest.java
Patch:
@@ -6,7 +6,6 @@
 import android.hardware.biometrics.BiometricManager;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import java.util.Objects;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothGattTest.java
Patch:
@@ -20,14 +20,14 @@ public class ShadowBluetoothGattTest {
   private static final String MOCK_MAC_ADDRESS = "00:11:22:33:AA:BB";
 
   @Test
-  public void canCreateBluetoothGattViaNewInstance() throws Exception {
+  public void canCreateBluetoothGattViaNewInstance() {
     BluetoothDevice bluetoothDevice = ShadowBluetoothDevice.newInstance(MOCK_MAC_ADDRESS);
     BluetoothGatt bluetoothGatt = ShadowBluetoothGatt.newInstance(bluetoothDevice);
     assertThat(bluetoothGatt).isNotNull();
   }
 
   @Test
-  public void canSetAndGetGattCallback() throws Exception {
+  public void canSetAndGetGattCallback() {
     BluetoothDevice bluetoothDevice = ShadowBluetoothDevice.newInstance(MOCK_MAC_ADDRESS);
     BluetoothGatt bluetoothGatt = ShadowBluetoothGatt.newInstance(bluetoothDevice);
     BluetoothGattCallback callback = new BluetoothGattCallback() {};
@@ -38,7 +38,7 @@ public void canSetAndGetGattCallback() throws Exception {
   }
 
   @Config(minSdk = JELLY_BEAN_MR2)
-  public void connect_returnsTrue() throws Exception {
+  public void connect_returnsTrue() {
     BluetoothDevice bluetoothDevice = ShadowBluetoothDevice.newInstance(MOCK_MAC_ADDRESS);
     BluetoothGatt bluetoothGatt = ShadowBluetoothGatt.newInstance(bluetoothDevice);
     assertThat(bluetoothGatt.connect()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothLeScannerTest.java
Patch:
@@ -61,21 +61,21 @@ public void onScanFailed(int errorCode) {}
   }
 
   @Test
-  public void startScanning() throws Exception {
+  public void startScanning() {
     bluetoothLeScanner.startScan(scanFilters, scanSettings, scanCallback);
     assertThat(shadowOf(bluetoothLeScanner).getScanCallbacks()).containsExactly(scanCallback);
   }
 
   @Test
-  public void stopScanning() throws Exception {
+  public void stopScanning() {
     bluetoothLeScanner.startScan(scanFilters, scanSettings, scanCallback);
     assertThat(shadowOf(bluetoothLeScanner).getScanCallbacks()).containsExactly(scanCallback);
     bluetoothLeScanner.stopScan(scanCallback);
     assertThat(shadowOf(bluetoothLeScanner).getScanCallbacks()).isEmpty();
   }
 
   @Test
-  public void stopScanning_neverStarted() throws Exception {
+  public void stopScanning_neverStarted() {
     bluetoothLeScanner.stopScan(scanCallback);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBroadcastPendingResultTest.java
Patch:
@@ -10,7 +10,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowBroadcastPendingResultTest {
   @Test
-  public void testCreate() throws Exception {
+  public void testCreate() {
     assertThat(ShadowBroadcastPendingResult.create(1, "result", new Bundle(), true))
         .isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBugreportManagerTest.java
Patch:
@@ -34,7 +34,7 @@
 public final class ShadowBugreportManagerTest {
 
   private ShadowBugreportManager shadowBugreportManager;
-  private Context context = ApplicationProvider.getApplicationContext();
+  private final Context context = ApplicationProvider.getApplicationContext();
 
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraManagerTest.java
Patch:
@@ -154,7 +154,7 @@ public void testGetTorchModeInvalidCameraId() {
 
   @Test
   @Config(minSdk = VERSION_CODES.M)
-  public void testGetTorchModeCameraTorchModeNotSet() throws CameraAccessException {
+  public void testGetTorchModeCameraTorchModeNotSet() {
     try {
       shadowOf(cameraManager).addCamera(CAMERA_ID_0, characteristics);
       shadowOf(cameraManager).getTorchMode(CAMERA_ID_0);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraSizeTest.java
Patch:
@@ -20,20 +20,20 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void testConstructor() throws Exception {
+  public void testConstructor() {
     assertThat(cameraSize.width).isEqualTo(480);
     assertThat(cameraSize.height).isEqualTo(320);
   }
 
   @Test
-  public void testSetWidth() throws Exception {
+  public void testSetWidth() {
     assertThat(cameraSize.width).isNotEqualTo(640);
     cameraSize.width = 640;
     assertThat(cameraSize.width).isEqualTo(640);
   }
 
   @Test
-  public void testSetHeight() throws Exception {
+  public void testSetHeight() {
     assertThat(cameraSize.height).isNotEqualTo(480);
     cameraSize.height = 480;
     assertThat(cameraSize.height).isEqualTo(480);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCaptureRequestBuilderTest.java
Patch:
@@ -46,7 +46,7 @@ public void setUp() throws CameraAccessException {
 
   @Test
   @Config(sdk = VERSION_CODES.P)
-  public void testGetAndSet() throws Exception {
+  public void testGetAndSet() {
     builder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_OFF);
     builder.set(CaptureRequest.COLOR_CORRECTION_MODE, CaptureRequest.COLOR_CORRECTION_MODE_FAST);
     assertThat(builder.get(CaptureRequest.CONTROL_AF_MODE))

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -11,7 +11,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowCheckBoxTest {
   @Test
-  public void testWorks() throws Exception {
+  public void testWorks() {
     CheckBox checkBox = new CheckBox(ApplicationProvider.getApplicationContext());
     assertThat(checkBox.isChecked()).isFalse();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -38,7 +38,8 @@ public void testSetChecked() {
     assertTrue(checkedTextView.isChecked());
   }
 
-  @Test public void toggle_shouldChangeCheckedness() throws Exception {
+  @Test
+  public void toggle_shouldChangeCheckedness() {
     CheckedTextView view = new CheckedTextView(ApplicationProvider.getApplicationContext());
     assertFalse(view.isChecked());
     view.toggle();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowColorTest.java
Patch:
@@ -23,7 +23,7 @@ public void testArgb() {
   }
 
   @Test
-  public void testParseColor() throws Exception {
+  public void testParseColor() {
     assertThat(Color.parseColor("#ffffffff")).isEqualTo(-1);
     assertThat(Color.parseColor("#00000000")).isEqualTo(0);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConfigurationTest.java
Patch:
@@ -46,7 +46,8 @@ public void testConstructCopy() {
     assertThat(configuration).isEqualTo(clone);
   }
 
-  @Test public void testToString_shouldntExplode() throws Exception {
+  @Test
+  public void testToString_shouldntExplode() {
     assertThat(new Configuration().toString()).contains("mcc");
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.MockitoAnnotations.initMocks;
 import static org.robolectric.Shadows.shadowOf;
 
-import android.app.Application;
 import android.content.ContentProvider;
 import android.content.ContentProviderClient;
 import android.content.ContentProviderOperation;
@@ -39,7 +38,7 @@ public class ShadowContentProviderClientTest {
 
   @Mock ContentProvider provider;
   ContentResolver contentResolver =
-      ((Application) ApplicationProvider.getApplicationContext()).getContentResolver();
+      ApplicationProvider.getApplicationContext().getContentResolver();
 
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationBuilderTest.java
Patch:
@@ -13,13 +13,12 @@
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowContentProviderOperationBuilderTest {
-  private ContentProviderOperation.Builder builder;
 
   @Test
   public void build() throws Exception {
     Uri uri = Uri.parse("content://authority/path");
 
-    builder = ContentProviderOperation.newUpdate(uri);
+    ContentProviderOperation.Builder builder = ContentProviderOperation.newUpdate(uri);
     builder.withSelection("a=?", new String[] {"a"});
     builder.withValue("k1", "v1");
     ContentValues cv = new ContentValues();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -45,7 +45,7 @@ public void reflectionShouldWork() {
     assertThat(shadow.getContentValues().getAsString("updateKey")).isEqualTo("updateValue");
     assertThat(shadow.getSelection()).isEqualTo("a=? and b=?");
     assertThat(shadow.getSelectionArgs()).asList().containsExactly("abc");
-    assertThat(shadow.getSelectionArgsBackReferences()).isEqualTo(Collections.<Integer, Integer>singletonMap(1, 3));
+    assertThat(shadow.getSelectionArgsBackReferences()).isEqualTo(Collections.singletonMap(1, 3));
 
     // delete and expected count
     op = ContentProviderOperation.newDelete(uri)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderTest.java
Patch:
@@ -14,7 +14,8 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowContentProviderTest {
   @Config(minSdk = KITKAT)
-  @Test public void testSetCallingPackage() throws Exception {
+  @Test
+  public void testSetCallingPackage() {
     ContentProvider provider = new TestContentProvider1();
     shadowOf(provider).setCallingPackage("calling-package");
     assertThat(provider.getCallingPackage()).isEqualTo("calling-package");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -11,7 +11,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowCornerPathEffectTest {
   @Test
-  public void shouldGetRadius() throws Exception {
+  public void shouldGetRadius() {
     CornerPathEffect cornerPathEffect = new CornerPathEffect(4.0f);
     assertThat(shadowOf(cornerPathEffect).getRadius()).isEqualTo(4.0f);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDiscoverySessionTest.java
Patch:
@@ -15,7 +15,7 @@
 public class ShadowDiscoverySessionTest {
 
   @Test
-  public void canCreateDiscoverySessionViaNewInstance() throws Exception {
+  public void canCreateDiscoverySessionViaNewInstance() {
     DiscoverySession discoverySession = ShadowDiscoverySession.newInstance();
     assertThat(discoverySession).isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -31,7 +31,7 @@ public void setup() {
   }
 
   @Test
-  public void shouldRespectMaxLength() throws Exception {
+  public void shouldRespectMaxLength() {
     editText.setText("0123456678");
     assertThat(editText.getText().toString()).isEqualTo("01234");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -185,14 +185,14 @@ public void getExternalFilesDirs() throws Exception {
 
   @Test
   @Config(sdk = JELLY_BEAN_MR1)
-  public void getExternalStorageStateJB() throws Exception {
+  public void getExternalStorageStateJB() {
     ShadowEnvironment.setExternalStorageState("blah");
     assertThat(ShadowEnvironment.getExternalStorageState()).isEqualTo("blah");
   }
 
   @Test
   @Config(minSdk = KITKAT, maxSdk = LOLLIPOP)
-  public void getExternalStorageStatePreLollipopMR1() throws Exception {
+  public void getExternalStorageStatePreLollipopMR1() {
     File storageDir1 = ShadowEnvironment.addExternalDir("dir1");
     File storageDir2 = ShadowEnvironment.addExternalDir("dir2");
     ShadowEnvironment.setExternalStorageState(storageDir1, Environment.MEDIA_MOUNTED);
@@ -210,7 +210,7 @@ public void getExternalStorageStatePreLollipopMR1() throws Exception {
 
   @Test
   @Config(minSdk = LOLLIPOP_MR1)
-  public void getExternalStorageState() throws Exception {
+  public void getExternalStorageState() {
     File storageDir1 = ShadowEnvironment.addExternalDir("dir1");
     File storageDir2 = ShadowEnvironment.addExternalDir("dir2");
     ShadowEnvironment.setExternalStorageState(storageDir1, Environment.MEDIA_MOUNTED);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -18,7 +18,7 @@ public void setUp() {
   }
 
   @Test
-  public void shouldTolerateNullChildClickListener() throws Exception {
+  public void shouldTolerateNullChildClickListener() {
     expandableListView.performItemClick(null, 6, -1);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFileObserverTest.java
Patch:
@@ -24,7 +24,7 @@ public final class ShadowFileObserverTest {
   private File testDir;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     Context context = ApplicationProvider.getApplicationContext();
     File cacheDir = context.getCacheDir();
     testDir = new File(cacheDir, "test");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -27,7 +27,7 @@ public void testNotNull() {
   }
 
   @Test
-  public void onMeasure_shouldNotLayout() throws Exception {
+  public void onMeasure_shouldNotLayout() {
     assertThat(frameLayout.getHeight()).isEqualTo(0);
     assertThat(frameLayout.getWidth()).isEqualTo(0);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGradientDrawableTest.java
Patch:
@@ -11,7 +11,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowGradientDrawableTest {
   @Test
-  public void testGetLastSetColor_returnsColor() throws Exception {
+  public void testGetLastSetColor_returnsColor() {
     GradientDrawable gradientDrawable = new GradientDrawable();
     ShadowGradientDrawable shadowGradientDrawable = shadowOf(gradientDrawable);
     int color = 123;
@@ -20,7 +20,7 @@ public void testGetLastSetColor_returnsColor() throws Exception {
   }
 
   @Test
-  public void testGetStrokeWidth_returnsStrokeWidth() throws Exception {
+  public void testGetStrokeWidth_returnsStrokeWidth() {
     int strokeWidth = 123;
     GradientDrawable gradientDrawable = new GradientDrawable();
 
@@ -31,7 +31,7 @@ public void testGetStrokeWidth_returnsStrokeWidth() throws Exception {
   }
 
   @Test
-  public void testGetStrokeColor_returnsStrokeColor() throws Exception {
+  public void testGetStrokeColor_returnsStrokeColor() {
     int stokeColor = 123;
     GradientDrawable gradientDrawable = new GradientDrawable();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -31,7 +31,7 @@ public void tearDown() throws Exception {
   }
 
   @Test
-  public void shouldReturnLooper() throws Exception {
+  public void shouldReturnLooper() {
     handlerThread = new HandlerThread("test");
     handlerThread.start();
     assertNotNull(handlerThread.getLooper());
@@ -40,7 +40,7 @@ public void shouldReturnLooper() throws Exception {
   }
 
   @Test
-  public void shouldReturnNullIfThreadHasNotBeenStarted() throws Exception {
+  public void shouldReturnNullIfThreadHasNotBeenStarted() {
     handlerThread = new HandlerThread("test");
     assertNull(handlerThread.getLooper());
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -32,21 +32,21 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void shouldBeAbleToGetTextFromTextViewAfterUsingSetTextWithHtmlDotFromHtml() throws Exception {
+  public void shouldBeAbleToGetTextFromTextViewAfterUsingSetTextWithHtmlDotFromHtml() {
     TextView textView = new TextView(context);
     textView.setText(Html.fromHtml("<b>some</b> html text"));
     assertThat(textView.getText().toString()).isEqualTo("some html text");
   }
 
   @Test
-  public void shouldBeAbleToGetTextFromEditTextAfterUsingSetTextWithHtmlDotFromHtml() throws Exception {
+  public void shouldBeAbleToGetTextFromEditTextAfterUsingSetTextWithHtmlDotFromHtml() {
     EditText editText = new EditText(context);
     editText.setText(Html.fromHtml("<b>some</b> html text"));
     assertThat(editText.getText().toString()).isEqualTo("some html text");
   }
 
   @Test(expected = NullPointerException.class)
-  public void shouldThrowNullPointerExceptionWhenNullStringEncountered() throws Exception {
+  public void shouldThrowNullPointerExceptionWhenNullStringEncountered() {
     Html.fromHtml(null);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -17,7 +17,7 @@
 public class ShadowImageViewTest {
 
   @Test
-  public void getDrawableResourceId_shouldWorkWhenTheDrawableWasCreatedFromAResource() throws Exception {
+  public void getDrawableResourceId_shouldWorkWhenTheDrawableWasCreatedFromAResource() {
 
     Resources resources = ApplicationProvider.getApplicationContext().getResources();
     Bitmap bitmap = BitmapFactory.decodeResource(resources, R.drawable.an_image);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputDeviceTest.java
Patch:
@@ -13,14 +13,14 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowInputDeviceTest {
   @Test
-  public void canConstructInputDeviceWithName() throws Exception {
+  public void canConstructInputDeviceWithName() {
     InputDevice inputDevice = ShadowInputDevice.makeInputDeviceNamed("foo");
     assertThat(inputDevice.getName()).isEqualTo("foo");
   }
 
   @Test
   @Config(minSdk = KITKAT)
-  public void canChangeProductId() throws Exception {
+  public void canChangeProductId() {
     InputDevice inputDevice = ShadowInputDevice.makeInputDeviceNamed("foo");
     ShadowInputDevice shadowInputDevice = Shadow.extract(inputDevice);
     shadowInputDevice.setProductId(1337);
@@ -30,7 +30,7 @@ public void canChangeProductId() throws Exception {
 
   @Test
   @Config(minSdk = KITKAT)
-  public void canChangeVendorId() throws Exception {
+  public void canChangeVendorId() {
     InputDevice inputDevice = ShadowInputDevice.makeInputDeviceNamed("foo");
     ShadowInputDevice shadowInputDevice = Shadow.extract(inputDevice);
     shadowInputDevice.setVendorId(1337);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputEventTest.java
Patch:
@@ -12,7 +12,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowInputEventTest {
   @Test
-  public void canSetInputDeviceOnKeyEvent() throws Exception {
+  public void canSetInputDeviceOnKeyEvent() {
     InputDevice myDevice = ShadowInputDevice.makeInputDeviceNamed("myDevice");
     KeyEvent keyEvent = new KeyEvent(1, 2);
     shadowOf(keyEvent).setDevice(myDevice);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterAuthorityEntryTest.java
Patch:
@@ -10,12 +10,12 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowIntentFilterAuthorityEntryTest {
   @Test(expected = NumberFormatException.class)
-  public void constructor_shouldThrowAnExceptionIfPortIsNotAValidNumber() throws Exception {
+  public void constructor_shouldThrowAnExceptionIfPortIsNotAValidNumber() {
     new IntentFilter.AuthorityEntry("", "not a number");
   }
 
   @Test
-  public void constructor_shouldAllowNullPortAndSetToNegativeOne() throws Exception {
+  public void constructor_shouldAllowNullPortAndSetToNegativeOne() {
     IntentFilter.AuthorityEntry authorityEntry = new IntentFilter.AuthorityEntry("host", null);
     assertThat(authorityEntry.getPort()).isEqualTo(-1);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsPromptResultTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ShadowJsPromptResultTest {
 
   @Test
-  public void shouldConstruct() throws Exception {
+  public void shouldConstruct() {
     JsPromptResult result = ShadowJsPromptResult.newInstance();
     assertNotNull(result);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsResultTest.java
Patch:
@@ -14,7 +14,7 @@
 public class ShadowJsResultTest {
 
   @Test
-  public void shouldRecordCanceled() throws Exception {
+  public void shouldRecordCanceled() {
     JsResult jsResult = Shadow.newInstanceOf(JsResult.class);
 
     assertFalse(shadowOf(jsResult).wasCancelled());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLauncherAppsTest.java
Patch:
@@ -65,7 +65,7 @@ public void onPackagesUnavailable(String[] packageNames, UserHandle user, boolea
   }
 
   @Before
-  public void setup() throws Exception {
+  public void setup() {
     launcherApps =
         (LauncherApps)
             ApplicationProvider.getApplicationContext()
@@ -180,7 +180,7 @@ public void onShortcutsChanged(
   }
 
   @Test
-  public void testGetShortcuts() throws Exception {
+  public void testGetShortcuts() {
     final ShortcutInfo shortcut1 =
         new ShortcutInfo.Builder(ApplicationProvider.getApplicationContext(), "ID1").build();
     final ShortcutInfo shortcut2 =
@@ -193,7 +193,7 @@ public void testGetShortcuts() throws Exception {
   }
 
   @Test
-  public void testGetShortcutsWithFilters() throws Exception {
+  public void testGetShortcutsWithFilters() {
     String myPackage = ApplicationProvider.getApplicationContext().getPackageName();
     String otherPackage = "other";
     ComponentName c1 = new ComponentName(ApplicationProvider.getApplicationContext(), "Activity1");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutParamsTest.java
Patch:
@@ -12,14 +12,14 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowLayoutParamsTest {
   @Test
-  public void testConstructor() throws Exception {
+  public void testConstructor() {
     Gallery.LayoutParams layoutParams = new Gallery.LayoutParams(123, 456);
     assertThat(layoutParams.width).isEqualTo(123);
     assertThat(layoutParams.height).isEqualTo(456);
   }
 
   @Test
-  public void constructor_canTakeSourceLayoutParams() throws Exception {
+  public void constructor_canTakeSourceLayoutParams() {
     ViewGroup.LayoutParams sourceLayoutParams = new ViewGroup.LayoutParams(123, 456);
     ViewGroup.LayoutParams layoutParams1 = new ViewGroup.LayoutParams(sourceLayoutParams);
     FrameLayout.LayoutParams layoutParams2 = new FrameLayout.LayoutParams(sourceLayoutParams);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacyAsyncTaskTest.java
Patch:
@@ -145,7 +145,7 @@ public void shouldGetStatusForAsyncTask() throws Exception {
   }
 
   @Test
-  public void onPostExecute_doesNotSwallowExceptions() throws Exception {
+  public void onPostExecute_doesNotSwallowExceptions() {
     Robolectric.getBackgroundThreadScheduler().unPause();
     Robolectric.getForegroundThreadScheduler().unPause();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacySystemClockTest.java
Patch:
@@ -23,7 +23,7 @@
 public class ShadowLegacySystemClockTest {
 
   @Test
-  public void shouldAllowForFakingOfTime() throws Exception {
+  public void shouldAllowForFakingOfTime() {
     assertThat(SystemClock.uptimeMillis()).isNotEqualTo(1000);
     Robolectric.getForegroundThreadScheduler().advanceTo(1000);
     assertThat(SystemClock.uptimeMillis()).isEqualTo(1000);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinkMovementMethodTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ShadowLinkMovementMethodTest {
 
   @Test
-  public void getInstance_shouldReturnAnInstanceOf_LinkedMovementMethod() throws Exception {
+  public void getInstance_shouldReturnAnInstanceOf_LinkedMovementMethod() {
     assertThat(LinkMovementMethod.getInstance()).isInstanceOf(LinkMovementMethod.class);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowListPopupWindowTest {
   @Test
-  public void show_setsLastListPopupWindow() throws Exception {
+  public void show_setsLastListPopupWindow() {
     Context context = ApplicationProvider.getApplicationContext();
     ListPopupWindow popupWindow = new ListPopupWindow(context);
     assertThat(ShadowListPopupWindow.getLatestListPopupWindow()).isNull();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLruTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ShadowLruTest {
 
   @Test
-  public void shouldLru() throws Exception {
+  public void shouldLru() {
     LruCache<Integer, String> lruCache = new LruCache<>(2);
     lruCache.put(1, "one");
     lruCache.put(2, "two");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMagnificationControllerTest.java
Patch:
@@ -21,12 +21,11 @@
 @Config(minSdk = N)
 public final class ShadowMagnificationControllerTest {
 
-  private MyService myService;
   private MagnificationController magnificationController;
 
   @Before
   public void setUp() {
-    myService = Robolectric.setupService(MyService.class);
+    MyService myService = Robolectric.setupService(MyService.class);
     magnificationController = myService.getMagnificationController();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMuxerTest.java
Patch:
@@ -26,12 +26,12 @@ public final class ShadowMediaMuxerTest {
   private TempDirectory tempDirectory;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     tempDirectory = new TempDirectory();
   }
 
   @After
-  public void tearDown() throws Exception {
+  public void tearDown() {
     tempDirectory.destroy();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRouterTest.java
Patch:
@@ -25,7 +25,7 @@ public final class ShadowMediaRouterTest {
   private MediaRouter mediaRouter;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     mediaRouter =
         (MediaRouter)
             ApplicationProvider.getApplicationContext()

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaScannerConnectionTest.java
Patch:
@@ -13,7 +13,7 @@ public class ShadowMediaScannerConnectionTest {
   private static final String[] mimeTypes = {"c", "d"};
 
   @Test
-  public void scanFile_validParameters_shouldContainsSamePaths() throws Exception {
+  public void scanFile_validParameters_shouldContainsSamePaths() {
     ShadowMediaScannerConnection.scanFile(null, paths, mimeTypes, null);
 
     assertThat(ShadowMediaScannerConnection.getSavedPaths()).containsExactlyElementsIn(paths);
@@ -22,7 +22,7 @@ public void scanFile_validParameters_shouldContainsSamePaths() throws Exception
   }
 
   @Test
-  public void scanFile_nullParameters_shouldContainsSamePaths() throws Exception {
+  public void scanFile_nullParameters_shouldContainsSamePaths() {
     int pathsSize = ShadowMediaScannerConnection.getSavedPaths().size();
     int mimeTypesSize = ShadowMediaScannerConnection.getSavedMimeTypes().size();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaSessionTest.java
Patch:
@@ -13,7 +13,7 @@
 @Config(minSdk = Build.VERSION_CODES.LOLLIPOP)
 public class ShadowMediaSessionTest {
   @Test
-  public void mediaSessionCompat_creation() throws Exception {
+  public void mediaSessionCompat_creation() {
     // Should not result in an exception.
     new MediaSession(ApplicationProvider.getApplicationContext(), "test");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -22,13 +22,13 @@ public class ShadowMimeTypeMapTest {
   private static final String IMAGE_MIMETYPE = "image/jpeg";
 
   @Test
-  public void shouldResetStaticStateBetweenTests() throws Exception {
+  public void shouldResetStaticStateBetweenTests() {
     assertFalse(MimeTypeMap.getSingleton().hasExtension(VIDEO_EXTENSION));
     shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(VIDEO_EXTENSION, VIDEO_MIMETYPE);
   }
 
   @Test
-  public void shouldResetStaticStateBetweenTests_anotherTime() throws Exception {
+  public void shouldResetStaticStateBetweenTests_anotherTime() {
     assertFalse(MimeTypeMap.getSingleton().hasExtension(VIDEO_EXTENSION));
     shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(VIDEO_EXTENSION, VIDEO_MIMETYPE);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkCapabilitiesTest.java
Patch:
@@ -21,7 +21,7 @@
 public class ShadowNetworkCapabilitiesTest {
 
   @Test
-  public void hasTransport_shouldReturnAsPerAssignedTransportTypes() throws Exception {
+  public void hasTransport_shouldReturnAsPerAssignedTransportTypes() {
     NetworkCapabilities networkCapabilities = ShadowNetworkCapabilities.newInstance();
 
     // Assert default false state.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkInfoTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowNetworkInfoTest {
 
   @Test
-  public void getDetailedState_shouldReturnTheAssignedState() throws Exception {
+  public void getDetailedState_shouldReturnTheAssignedState() {
     NetworkInfo networkInfo = Shadow.newInstanceOf(NetworkInfo.class);
     shadowOf(networkInfo).setDetailedState(NetworkInfo.DetailedState.SCANNING);
     assertThat(networkInfo.getDetailedState()).isEqualTo(NetworkInfo.DetailedState.SCANNING);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkScoreManagerTest.java
Patch:
@@ -18,7 +18,7 @@ public final class ShadowNetworkScoreManagerTest {
 
   @Test
   @Config(minSdk = LOLLIPOP)
-  public void testGetActiveScorerPackage() throws Exception {
+  public void testGetActiveScorerPackage() {
     Context context = ApplicationProvider.getApplicationContext();
     NetworkScoreManager networkScoreManager =
         (NetworkScoreManager) context.getSystemService(Context.NETWORK_SCORE_SERVICE);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -133,7 +133,7 @@ public void setNdefPushMessage_setsNullMessage() {
   }
 
   @Test
-  public void setNdefPushMessage_setsNonNullMessage() throws Exception {
+  public void setNdefPushMessage_setsNonNullMessage() {
     final Activity activity = Robolectric.setupActivity(Activity.class);
     final NfcAdapter adapter = NfcAdapter.getDefaultAdapter(activity);
     final NdefMessage message =
@@ -145,7 +145,7 @@ public void setNdefPushMessage_setsNonNullMessage() throws Exception {
   }
 
   @Test
-  public void getNdefPushMessage_messageNotSet_throwsIllegalStateException() throws Exception {
+  public void getNdefPushMessage_messageNotSet_throwsIllegalStateException() {
     final Activity activity = Robolectric.setupActivity(Activity.class);
     final NfcAdapter adapter = NfcAdapter.getDefaultAdapter(activity);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationTest.java
Patch:
@@ -14,7 +14,7 @@
 public class ShadowNotificationTest {
 
   @Test
-  public void setLatestEventInfo__shouldCaptureContentIntent() throws Exception {
+  public void setLatestEventInfo__shouldCaptureContentIntent() {
     PendingIntent pendingIntent = PendingIntent.getActivity(getApplication(), 0, new Intent(), 0);
     Notification notification = new Notification();
     notification.setLatestEventInfo(getApplication(), "title", "content", pendingIntent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedAsyncTaskTest.java
Patch:
@@ -52,7 +52,7 @@ public void testNormalFlow() throws Exception {
   }
 
   @Test
-  public void testCancelBeforeBackground() throws Exception {
+  public void testCancelBeforeBackground() {
     AsyncTask<String, String, String> asyncTask = new RecordingAsyncTask();
 
     // rely on AsyncTask being processed serially on a single background thread, and block

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedSystemClockTest.java
Patch:
@@ -90,15 +90,15 @@ public void currentNetworkTimeMillis_networkTimeNotAvailable_shouldThrowDateTime
 
   @Test
   @Config(minSdk = Q)
-  public void currentGnssTimeClock_shouldReturnGnssTime() throws Exception {
+  public void currentGnssTimeClock_shouldReturnGnssTime() {
     ShadowSystemClock.setGnssTimeAvailable(true);
     SystemClock.setCurrentTimeMillis(123456L);
     assertThat(SystemClock.currentGnssTimeClock().millis()).isEqualTo(123456);
   }
 
   @Test
   @Config(minSdk = Q)
-  public void currentGnssTimeClock_shouldThrowDateTimeException() throws Exception {
+  public void currentGnssTimeClock_shouldThrowDateTimeException() {
     ShadowSystemClock.setGnssTimeAvailable(false);
     try {
       SystemClock.currentGnssTimeClock().millis();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPeerHandleTest.java
Patch:
@@ -15,7 +15,7 @@
 public class ShadowPeerHandleTest {
 
   @Test
-  public void canCreatePeerHandleViaNewInstance() throws Exception {
+  public void canCreatePeerHandleViaNewInstance() {
     PeerHandle peerHandle = ShadowPeerHandle.newInstance();
     assertThat(peerHandle).isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPhoneWindowTest.java
Patch:
@@ -25,13 +25,13 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void getTitle() throws Exception {
+  public void getTitle() {
     window.setTitle("Some title");
     assertThat(shadowOf(window).getTitle().toString()).isEqualTo("Some title");
   }
 
   @Test
-  public void getBackgroundDrawable() throws Exception {
+  public void getBackgroundDrawable() {
     Drawable drawable = activity.getResources().getDrawable(android.R.drawable.bottom_bar);
     window.setBackgroundDrawable(drawable);
     assertThat(shadowOf(window).getBackgroundDrawable()).isSameInstanceAs(drawable);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -18,7 +18,7 @@ public class ShadowRelativeLayoutTest {
 
   @Test
   @Config(minSdk = JELLY_BEAN_MR1)
-  public void getRules_shouldShowAddRuleData_sinceApiLevel17() throws Exception {
+  public void getRules_shouldShowAddRuleData_sinceApiLevel17() {
     ImageView imageView = new ImageView(ApplicationProvider.getApplicationContext());
     RelativeLayout layout = new RelativeLayout(ApplicationProvider.getApplicationContext());
     layout.addView(imageView, new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
@@ -31,7 +31,7 @@ public void getRules_shouldShowAddRuleData_sinceApiLevel17() throws Exception {
 
   @Test
   @Config(maxSdk = JELLY_BEAN)
-  public void getRules_shouldShowAddRuleData_uptoApiLevel16() throws Exception {
+  public void getRules_shouldShowAddRuleData_uptoApiLevel16() {
     ImageView imageView = new ImageView(ApplicationProvider.getApplicationContext());
     RelativeLayout layout = new RelativeLayout(ApplicationProvider.getApplicationContext());
     layout.addView(imageView, new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResultReceiverTest.java
Patch:
@@ -12,7 +12,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowResultReceiverTest {
   @Test
-  public void callingSend_shouldCallOverridenOnReceiveResultWithTheSameArguments() throws Exception {
+  public void callingSend_shouldCallOverridenOnReceiveResultWithTheSameArguments() {
     TestResultReceiver testResultReceiver = new TestResultReceiver(null);
     Bundle bundle = new Bundle();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRoleManagerTest.java
Patch:
@@ -20,7 +20,7 @@ public final class ShadowRoleManagerTest {
   private RoleManager roleManager;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     roleManager = (RoleManager) getApplication().getSystemService(Context.ROLE_SERVICE);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRollbackManagerTest.java
Patch:
@@ -23,7 +23,7 @@ public final class ShadowRollbackManagerTest {
   private ShadowRollbackManager instance;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     instance =
         extract(
             ApplicationProvider.getApplicationContext().getSystemService(RollbackManager.class));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScanResultTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowScanResultTest {
 
   @Test
-  public void shouldConstruct() throws Exception {
+  public void shouldConstruct() {
     ScanResult scanResult = ShadowScanResult.newInstance("SSID", "BSSID", "Caps", 11, 42);
     assertThat(scanResult.SSID).isEqualTo("SSID");
     assertThat(scanResult.BSSID).isEqualTo("BSSID");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollViewTest.java
Patch:
@@ -11,7 +11,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowScrollViewTest {
   @Test
-  public void shouldSmoothScrollTo() throws Exception {
+  public void shouldSmoothScrollTo() {
     ScrollView scrollView = new ScrollView(ApplicationProvider.getApplicationContext());
     scrollView.smoothScrollTo(7, 6);
 
@@ -20,7 +20,7 @@ public void shouldSmoothScrollTo() throws Exception {
   }
 
   @Test
-  public void shouldSmoothScrollBy() throws Exception {
+  public void shouldSmoothScrollBy() {
     ScrollView scrollView = new ScrollView(ApplicationProvider.getApplicationContext());
     scrollView.smoothScrollTo(7, 6);
     scrollView.smoothScrollBy(10, 20);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -46,8 +46,7 @@ public void tearDown() {
   @Test
   @Config(minSdk = Build.VERSION_CODES.O)
   public void createDirectChannel() throws Exception {
-    SensorDirectChannel channel =
-        (SensorDirectChannel) sensorManager.createDirectChannel(new MemoryFile("name", 10));
+    SensorDirectChannel channel = sensorManager.createDirectChannel(new MemoryFile("name", 10));
     assertThat(channel.isOpen()).isTrue();
 
     channel.close();
@@ -213,7 +212,7 @@ public void getSensor_shouldBeConfigurable() {
   }
 
   @Test
-  public void shouldReturnASensorList() throws Exception {
+  public void shouldReturnASensorList() {
     assertThat(sensorManager.getSensorList(0)).isNotNull();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -46,7 +46,7 @@ public void setup() {
 
   @Test
   public void shouldUnbindServiceAtShadowApplication() {
-    Application application = (Application) ApplicationProvider.getApplicationContext();
+    Application application = ApplicationProvider.getApplicationContext();
     ServiceConnection conn = Shadow.newInstanceOf(MediaScannerConnection.class);
     service.bindService(new Intent("dummy").setPackage("dummy.package"), conn, 0);
     assertThat(shadowOf(application).getUnboundServiceConnections()).isEmpty();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShapeDrawableTest.java
Patch:
@@ -12,7 +12,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowShapeDrawableTest {
   @Test
-  public void getPaint_ShouldReturnTheSamePaint() throws Exception {
+  public void getPaint_ShouldReturnTheSamePaint() {
     ShapeDrawable shapeDrawable = new ShapeDrawable();
     Paint paint = shapeDrawable.getPaint();
     assertNotNull(paint);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSigningInfoTest.java
Patch:
@@ -18,7 +18,7 @@
 @Config(minSdk = Build.VERSION_CODES.P)
 public final class ShadowSigningInfoTest {
   @Test
-  public void testParceling_preservesCurrentSignatures() throws Exception {
+  public void testParceling_preservesCurrentSignatures() {
     Signature[] signatures = { new Signature("0123"), new Signature("4657") };
     SigningInfo signingInfo = Shadow.newInstanceOf(SigningInfo.class);
     shadowOf(signingInfo).setSignatures(signatures);
@@ -32,7 +32,7 @@ public void testParceling_preservesCurrentSignatures() throws Exception {
   }
 
   @Test
-  public void testParceling_preservesPastSigningCertificates() throws Exception {
+  public void testParceling_preservesPastSigningCertificates() {
     Signature[] signatures = { new Signature("0123")};
     Signature[] pastSignatures = { new Signature("0123"), new Signature("4567") };
     SigningInfo signingInfo = Shadow.newInstanceOf(SigningInfo.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSliceManagerTest.java
Patch:
@@ -37,8 +37,8 @@ public void setUp() {
     PackageManager packageManager = RuntimeEnvironment.getApplication().getPackageManager();
     ShadowApplicationPackageManager shadowPackageManager =
         (ShadowApplicationPackageManager) shadowOf(packageManager);
-    shadowPackageManager.setPackagesForUid(PACKAGE_1_UID, new String[] {PACKAGE_NAME_1});
-    shadowPackageManager.setPackagesForUid(PACKAGE_2_UID, new String[] {PACKAGE_NAME_2});
+    shadowPackageManager.setPackagesForUid(PACKAGE_1_UID, PACKAGE_NAME_1);
+    shadowPackageManager.setPackagesForUid(PACKAGE_2_UID, PACKAGE_NAME_2);
     sliceUri1 = Uri.parse("content://a/b");
     sliceUri2 = Uri.parse("content://c/d");
     sliceManager = ApplicationProvider.getApplicationContext().getSystemService(SliceManager.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStorageStatsManagerTest.java
Patch:
@@ -134,7 +134,7 @@ public void getTotalBytes_afterRemoveStorageDevice_throwsException() {
   }
 
   @Test
-  public void queryWithoutSetup_shouldFail() throws Exception {
+  public void queryWithoutSetup_shouldFail() {
     assertThrows(
         PackageManager.NameNotFoundException.class,
         () ->
@@ -161,7 +161,7 @@ public void queryWithCorrectArguments_shouldReturnSetupValue() throws Exception
   }
 
   @Test
-  public void queryWithWrongArguments_shouldFail() throws Exception {
+  public void queryWithWrongArguments_shouldFail() {
     // Arrange
     StorageStats expected = buildStorageStats();
     UUID uuid = UUID.randomUUID();
@@ -199,7 +199,7 @@ public void queryWithWrongArguments_shouldFail() throws Exception {
   }
 
   @Test
-  public void queryAfterClearSetup_shouldFail() throws Exception {
+  public void queryAfterClearSetup_shouldFail() {
     // Arrange
     StorageStats expected = buildStorageStats();
     UUID uuid = UUID.randomUUID();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceTest.java
Patch:
@@ -15,17 +15,17 @@ public class ShadowSurfaceTest {
   private final Surface surface = new Surface(texture);
 
   @Test
-  public void getSurfaceTexture_returnsSurfaceTexture() throws Exception {
+  public void getSurfaceTexture_returnsSurfaceTexture() {
     assertThat(shadowOf(surface).getSurfaceTexture()).isEqualTo(texture);
   }
 
   @Test
-  public void release_doesNotThrow() throws Exception {
+  public void release_doesNotThrow() {
     surface.release();
   }
 
   @Test
-  public void toString_returnsNotEmptyString() throws Exception {
+  public void toString_returnsNotEmptyString() {
     assertThat(surface.toString()).isNotEmpty();
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -53,7 +53,7 @@ public void removeCallback() {
   }
 
   @Test
-  public void canCreateASurfaceView_attachedToAWindowWithActionBar() throws Exception {
+  public void canCreateASurfaceView_attachedToAWindowWithActionBar() {
     TestActivity testActivity = buildActivity(TestActivity.class).create().start().resume().visible().get();
     assertThat(testActivity).isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabActivityTest.java
Patch:
@@ -15,7 +15,7 @@
 public class ShadowTabActivityTest {
 
   @Test
-  public void tabActivityShouldNotMakeNewTabHostEveryGet() throws Exception {
+  public void tabActivityShouldNotMakeNewTabHostEveryGet() {
     TabActivity activity = Robolectric.buildActivity(TabActivity.class).create().get();
     TabHost tabHost1 = activity.getTabHost();
     TabHost tabHost2 = activity.getTabHost();
@@ -24,7 +24,7 @@ public void tabActivityShouldNotMakeNewTabHostEveryGet() throws Exception {
   }
 
   @Test
-  public void shouldGetTabWidget() throws Exception {
+  public void shouldGetTabWidget() {
     TabActivity activity = Robolectric.buildActivity(TabActivity.class).create().get();
     activity.setContentView(R.layout.tab_activity);
     assertThat(activity.getTabWidget()).isInstanceOf(TabWidget.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -395,13 +395,13 @@ public void setTtySupported() {
   }
 
   @Test
-  public void canSetAndGetIsInCall() throws Exception {
+  public void canSetAndGetIsInCall() {
     shadowOf(telecomService).setIsInCall(true);
     assertThat(telecomService.isInCall()).isTrue();
   }
 
   @Test
-  public void isInCall_setIsInCallNotCalled_shouldReturnFalse() throws Exception {
+  public void isInCall_setIsInCallNotCalled_shouldReturnFalse() {
     assertThat(telecomService.isInCall()).isFalse();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTest.java
Patch:
@@ -21,19 +21,19 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void newInstanceOf() throws Exception {
+  public void newInstanceOf() {
     assertThat(Shadow.newInstanceOf(Activity.class.getName()).getClass().getClassLoader())
         .isSameInstanceAs(myClassLoader);
   }
 
   @Test
-  public void extractor() throws Exception {
+  public void extractor() {
     Activity activity = new Activity();
     assertThat((ShadowActivity) Shadow.extract(activity)).isSameInstanceAs(shadowOf(activity));
   }
 
   @Test
-  public void otherDeprecated_extractor() throws Exception {
+  public void otherDeprecated_extractor() {
     Activity activity = new Activity();
     assertThat(Shadow.<Object>extract(activity)).isSameInstanceAs(shadowOf(activity));
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextPaintTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ShadowTextPaintTest {
 
   @Test
-  public void measureText_returnsStringLengthAsMeasurement() throws Exception {
+  public void measureText_returnsStringLengthAsMeasurement() {
     TextPaint paint = new TextPaint();
     assertThat(paint.measureText("1234")).isEqualTo(4f);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTileTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() {
   }
 
   @Test
-  public void updateTile() throws Exception {
+  public void updateTile() {
     // this test passes if updateTile() throws no Exception.
     tile.updateTile();
     shadowTile.updateTile();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowTimePickerDialogTest {
 
   @Test
-  public void returnsTheIntialHourAndMinutePassedIntoTheTimePickerDialog() throws Exception {
+  public void returnsTheIntialHourAndMinutePassedIntoTheTimePickerDialog() {
     TimePickerDialog timePickerDialog =
         new TimePickerDialog(ApplicationProvider.getApplicationContext(), 0, null, 6, 55, false);
     ShadowTimePickerDialog shadow = shadowOf(timePickerDialog);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -17,7 +17,7 @@
 public class ShadowTimeTest {
 
   @Test
-  public void shouldFormatAllFormats() throws Exception {
+  public void shouldFormatAllFormats() {
     Time t = new Time("Asia/Tokyo");
     t.set(1407496560000L);
 
@@ -70,7 +70,7 @@ public void shouldFormatAllFormats() throws Exception {
   @Test
   @Config(maxSdk = KITKAT_WATCH)
   // these fail on LOLLIPOP+; is the shadow impl of format correct for pre-LOLLIPOP?
-  public void shouldFormatAllFormats_withQuestionableResults() throws Exception {
+  public void shouldFormatAllFormats_withQuestionableResults() {
     Time t = new Time("Asia/Tokyo");
     t.set(1407496560000L);
 
@@ -83,7 +83,7 @@ public void shouldFormatAllFormats_withQuestionableResults() throws Exception {
   }
 
   @Test
-  public void shouldSetToNow() throws Exception {
+  public void shouldSetToNow() {
     Time t = new Time();
     SystemClock.setCurrentTimeMillis(1000);
     t.setToNow();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -30,7 +30,7 @@ public class ShadowTypefaceTest {
   private File fontFile;
 
   @Before
-  public void setup() throws Exception {
+  public void setup() {
     fontFile = TestUtil.resourcesBaseDir().resolve("assets/myFont.ttf").toFile();
   }
 
@@ -73,7 +73,7 @@ public void create_withFamily_customWeight_shouldCreateTypeface() {
   @Test
   @Config(minSdk = P)
   public void create_withoutFamily_customWeight_shouldCreateTypeface() {
-    Typeface typeface = Typeface.create((Typeface) null, /* weight= */ 500, /* italic= */ false);
+    Typeface typeface = Typeface.create(null, /* weight= */ 500, /* italic= */ false);
     assertThat(typeface.getStyle()).isEqualTo(500);
     assertThat(shadowOf(typeface).getFontDescription().getFamilyName()).isEqualTo(null);
     assertThat(shadowOf(typeface).getFontDescription().getStyle()).isEqualTo(500);
@@ -108,7 +108,7 @@ public void createFromAsset_shouldCreateTypeface() {
   }
 
   @Test
-  public void createFromAsset_throwsExceptionWhenFontNotFound() throws Exception {
+  public void createFromAsset_throwsExceptionWhenFontNotFound() {
     try {
       Typeface.createFromAsset(
           ApplicationProvider.getApplicationContext().getAssets(), "nonexistent.ttf");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUriTest.java
Patch:
@@ -10,7 +10,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ShadowUriTest {
   @Test
-  public void shouldParseUris() throws Exception {
+  public void shouldParseUris() {
     Uri testUri =
         Uri.parse("http://someplace.com:8080/a/path?param=value&another_param=another_value#top");
 
@@ -23,7 +23,8 @@ public void shouldParseUris() throws Exception {
     assertThat(testUri.getScheme()).isEqualTo("http");
   }
 
-  @Test public void getQueryParameter_shouldWork() throws Exception {
+  @Test
+  public void getQueryParameter_shouldWork() {
     Uri testUri =
         Uri.parse("http://someplace.com:8080/a/path?param=value&another_param=another_value#top");
     assertThat(testUri.getQueryParameter("param")).isEqualTo("value");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -200,7 +200,7 @@ public void isProfile_profileUser_returnsTrue() {
 
   @Test
   @Config(minSdk = LOLLIPOP)
-  public void enforcePermissionChecks() throws Exception {
+  public void enforcePermissionChecks() {
     shadowOf(userManager).enforcePermissionChecks(true);
 
     try {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -75,7 +75,7 @@ public void methodsShouldReturnScaledAndroidConstantsDependingOnPixelDensity() {
   }
 
   @Test
-  public void testHasPermanentMenuKey() throws Exception {
+  public void testHasPermanentMenuKey() {
     ViewConfiguration viewConfiguration = ViewConfiguration.get(context);
     assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVpnServiceTest.java
Patch:
@@ -21,7 +21,7 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void prepare() throws Exception {
+  public void prepare() {
     Intent intent = new Intent("foo");
     ShadowVpnService.setPrepareResult(intent);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebSettingsTest.java
Patch:
@@ -25,7 +25,7 @@ public void setUp() {
 
   @Test
   @Config(minSdk = JELLY_BEAN_MR2)
-  public void setDefaultUserAgent() throws Exception {
+  public void setDefaultUserAgent() {
     ShadowWebSettings.setDefaultUserAgent("Chrome/71.0.143.1");
 
     assertThat(WebSettings.getDefaultUserAgent(context)).isEqualTo("Chrome/71.0.143.1");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebStorageTest.java
Patch:
@@ -10,7 +10,7 @@
 public final class ShadowWebStorageTest {
 
   @Test
-  public void webStorageDoesNotCrash() throws Exception {
+  public void webStorageDoesNotCrash() {
     WebStorage.getInstance().deleteAllData();
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() {
   }
 
   @Test
-  public void newInstance_shouldNotCrash() throws Exception {
+  public void newInstance_shouldNotCrash() {
     assertThat(ShadowWifiInfo.newInstance()).isNotNull();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalTest.java
Patch:
@@ -14,12 +14,12 @@
 public class ShadowWindowManagerGlobalTest {
 
   @Test
-  public void getWindowSession_shouldReturnNull_toStubAndroidStartup() throws Exception {
+  public void getWindowSession_shouldReturnNull_toStubAndroidStartup() {
     assertThat(ShadowWindowManagerGlobal.getWindowSession()).isNull();
   }
 
   @Test
-  public void getWindowSession_withLooper_shouldReturnNull_toStubAndroidStartup() throws Exception {
+  public void getWindowSession_withLooper_shouldReturnNull_toStubAndroidStartup() {
     // method not available in JELLY BEAN, sorry :(
     assertThat(ShadowWindowManagerGlobal.getWindowSession(Looper.getMainLooper())).isNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalUnitTest.java
Patch:
@@ -21,13 +21,13 @@ public void shouldReset() throws Exception {
   @Config(sdk = 23)
   public static class DummyTest {
     @Test
-    public void first() throws Exception {
+    public void first() {
       assertThat(WindowManagerGlobal.getInstance().getViewRootNames()).isEmpty();
       Robolectric.setupActivity(Activity.class);
     }
 
     @Test
-    public void second() throws Exception {
+    public void second() {
       assertThat(WindowManagerGlobal.getInstance().getViewRootNames()).isEmpty();
       Robolectric.setupActivity(Activity.class);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -23,7 +23,7 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void testInnerText() throws Exception {
+  public void testInnerText() {
     LinearLayout top = new LinearLayout(context);
     top.addView(textView("blah"));
     top.addView(new View(context));
@@ -44,7 +44,7 @@ public void testInnerText() throws Exception {
   }
 
   @Test
-  public void shouldOnlyIncludeViewTextViewsText() throws Exception {
+  public void shouldOnlyIncludeViewTextViewsText() {
     LinearLayout top = new LinearLayout(context);
     top.addView(textView("blah", View.VISIBLE));
     top.addView(textView("blarg", View.GONE));
@@ -54,7 +54,7 @@ public void shouldOnlyIncludeViewTextViewsText() throws Exception {
   }
 
   @Test
-  public void shouldNotPrefixBogusSpaces() throws Exception {
+  public void shouldNotPrefixBogusSpaces() {
     LinearLayout top = new LinearLayout(context);
     top.addView(textView("blarg", View.GONE));
     top.addView(textView("arrg", View.INVISIBLE));

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -27,7 +27,7 @@ public class ViewStubTest {
   }
 
   @Test
-  public void inflate_shouldReplaceOriginalWithLayout() throws Exception {
+  public void inflate_shouldReplaceOriginalWithLayout() {
     ViewStub viewStub = new ViewStub(ctxt);
     int stubId = 12345;
     int inflatedId = 12346;
@@ -52,7 +52,7 @@ public void inflate_shouldReplaceOriginalWithLayout() throws Exception {
   }
 
   @Test
-  public void shouldApplyAttributes() throws Exception {
+  public void shouldApplyAttributes() {
     ViewStub viewStub = new ViewStub(ctxt,
         Robolectric.buildAttributeSet()
             .addAttribute(android.R.attr.inflatedId, "@+id/include_id")

File: robolectric/src/test/java/org/robolectric/shadows/XmlPullParserTest.java
Patch:
@@ -96,7 +96,7 @@ public void xmlParser() throws IOException, XmlPullParserException {
   }
 
   @Test
-  public void buildAttrSet() throws Exception {
+  public void buildAttrSet() {
     XmlResourceParser parser = (XmlResourceParser) Robolectric.buildAttributeSet()
         .addAttribute(android.R.attr.width, "1234px")
         .addAttribute(android.R.attr.height, "@android:dimen/app_icon_size")

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -6,10 +6,10 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-import android.view.View;
-import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
+import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -6,10 +6,10 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-import android.view.View;
-import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
+import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/main/java/org/robolectric/plugins/LazyLoadingConfigurer.java
Patch:
@@ -37,15 +37,15 @@ public LazyLoad getConfigFor(@Nonnull String packageName) {
     } catch (ClassNotFoundException e) {
       // ignore
     }
-    return defaultConfig();
+    return null;
   }
 
   @Override
   public LazyLoad getConfigFor(@Nonnull Class<?> testClass) {
     if (testClass.isAnnotationPresent(LazyLoadApplication.class)) {
       return testClass.getAnnotation(LazyLoadApplication.class).value();
     } else {
-      return defaultConfig();
+      return null;
     }
   }
 
@@ -54,7 +54,7 @@ public LazyLoad getConfigFor(@Nonnull Method method) {
     if (method.isAnnotationPresent(LazyLoadApplication.class)) {
       return method.getAnnotation(LazyLoadApplication.class).value();
     } else {
-      return defaultConfig();
+      return null;
     }
   }
 

File: robolectric/src/main/java/org/robolectric/plugins/LazyLoadingConfigurer.java
Patch:
@@ -37,15 +37,15 @@ public LazyLoad getConfigFor(@Nonnull String packageName) {
     } catch (ClassNotFoundException e) {
       // ignore
     }
-    return defaultConfig();
+    return null;
   }
 
   @Override
   public LazyLoad getConfigFor(@Nonnull Class<?> testClass) {
     if (testClass.isAnnotationPresent(LazyLoadApplication.class)) {
       return testClass.getAnnotation(LazyLoadApplication.class).value();
     } else {
-      return defaultConfig();
+      return null;
     }
   }
 
@@ -54,7 +54,7 @@ public LazyLoad getConfigFor(@Nonnull Method method) {
     if (method.isAnnotationPresent(LazyLoadApplication.class)) {
       return method.getAnnotation(LazyLoadApplication.class).value();
     } else {
-      return defaultConfig();
+      return null;
     }
   }
 

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -98,7 +98,7 @@ void replace(
           new AppGetLastMatcher(
               "org.robolectric.shadows.ShadowPopupMenu", "ShadowPopupMenu", "getLatestPopupMenu"));
 
-  abstract class MethodInvocationMatcher {
+  abstract static class MethodInvocationMatcher {
     abstract MethodNameMatcher matcher();
 
     abstract void replace(

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -712,7 +712,7 @@ protected void finalize() throws Throwable {
     @Override
     public boolean equals(Object o) {
       if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
+      if (!(o instanceof RobolectricFrameworkMethod)) return false;
       if (!super.equals(o)) return false;
 
       RobolectricFrameworkMethod that = (RobolectricFrameworkMethod) o;

File: robolectric/src/main/java/org/robolectric/android/AndroidSdkShadowMatcher.java
Patch:
@@ -1,13 +1,12 @@
 package org.robolectric.android;
 
+import java.lang.reflect.Method;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.sandbox.ShadowMatcher;
 import org.robolectric.util.Logger;
 import org.robolectric.util.ReflectionHelpers;
 
-import java.lang.reflect.Method;
-
 /**
  * Android-specific rules for matching shadow classes and methods by SDK level.
  */
@@ -21,6 +20,7 @@ public AndroidSdkShadowMatcher(int sdkLevel) {
     this.sdkLevel = sdkLevel;
   }
 
+  @Override
   public boolean matches(ShadowInfo shadowInfo) {
     return shadowInfo.supportsSdk(sdkLevel);
   }

File: robolectric/src/main/java/org/robolectric/internal/ManifestIdentifier.java
Patch:
@@ -95,7 +95,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof ManifestIdentifier)) {
       return false;
     }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -178,7 +178,7 @@ private boolean isInPackagesToNotInstrument(String className) {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (!(o instanceof InstrumentationConfiguration)) return false;
 
     InstrumentationConfiguration that = (InstrumentationConfiguration) o;
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/MethodRef.java
Patch:
@@ -19,7 +19,7 @@ public MethodRef(String className, String methodName) {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (!(o instanceof MethodRef)) return false;
 
     MethodRef methodRef = (MethodRef) o;
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricGeneratorAdapter.java
Patch:
@@ -39,6 +39,7 @@ public void loadNull() {
     visitInsn(Opcodes.ACONST_NULL);
   }
 
+  @Override
   public Type getReturnType() {
     return Type.getReturnType(desc);
   }

File: robolectric/src/main/java/org/robolectric/android/AndroidSdkShadowMatcher.java
Patch:
@@ -1,13 +1,12 @@
 package org.robolectric.android;
 
+import java.lang.reflect.Method;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.sandbox.ShadowMatcher;
 import org.robolectric.util.Logger;
 import org.robolectric.util.ReflectionHelpers;
 
-import java.lang.reflect.Method;
-
 /**
  * Android-specific rules for matching shadow classes and methods by SDK level.
  */
@@ -21,6 +20,7 @@ public AndroidSdkShadowMatcher(int sdkLevel) {
     this.sdkLevel = sdkLevel;
   }
 
+  @Override
   public boolean matches(ShadowInfo shadowInfo) {
     return shadowInfo.supportsSdk(sdkLevel);
   }

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricGeneratorAdapter.java
Patch:
@@ -39,6 +39,7 @@ public void loadNull() {
     visitInsn(Opcodes.ACONST_NULL);
   }
 
+  @Override
   public Type getReturnType() {
     return Type.getReturnType(desc);
   }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -712,7 +712,7 @@ protected void finalize() throws Throwable {
     @Override
     public boolean equals(Object o) {
       if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
+      if (!(o instanceof RobolectricFrameworkMethod)) return false;
       if (!super.equals(o)) return false;
 
       RobolectricFrameworkMethod that = (RobolectricFrameworkMethod) o;

File: robolectric/src/main/java/org/robolectric/internal/ManifestIdentifier.java
Patch:
@@ -95,7 +95,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof ManifestIdentifier)) {
       return false;
     }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -178,7 +178,7 @@ private boolean isInPackagesToNotInstrument(String className) {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (!(o instanceof InstrumentationConfiguration)) return false;
 
     InstrumentationConfiguration that = (InstrumentationConfiguration) o;
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/MethodRef.java
Patch:
@@ -19,7 +19,7 @@ public MethodRef(String className, String methodName) {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (!(o instanceof MethodRef)) return false;
 
     MethodRef methodRef = (MethodRef) o;
 

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -98,7 +98,7 @@ void replace(
           new AppGetLastMatcher(
               "org.robolectric.shadows.ShadowPopupMenu", "ShadowPopupMenu", "getLatestPopupMenu"));
 
-  abstract class MethodInvocationMatcher {
+  abstract static class MethodInvocationMatcher {
     abstract MethodNameMatcher matcher();
 
     abstract void replace(

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoTest.java
Patch:
@@ -11,7 +11,6 @@
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
 import static androidx.test.espresso.matcher.ViewMatchers.withText;
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.annotation.TextLayoutMode.Mode.REALISTIC;
 
 import android.view.KeyEvent;
 import android.widget.Button;
@@ -23,12 +22,11 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
 
 /** Simple tests to verify espresso APIs can be used on both Robolectric and device. */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(REALISTIC)
+
 public final class EspressoTest {
 
   @Rule

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithPausedLooperTest.java
Patch:
@@ -4,7 +4,6 @@
 import static androidx.test.espresso.assertion.ViewAssertions.matches;
 import static androidx.test.espresso.matcher.ViewMatchers.isCompletelyDisplayed;
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
-import static org.robolectric.annotation.TextLayoutMode.Mode.REALISTIC;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
 import androidx.test.core.app.ActivityScenario;
@@ -13,12 +12,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
 
 /** Verify Espresso usage with paused looper */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(REALISTIC)
+
 public final class EspressoWithPausedLooperTest {
 
   @Before

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -340,12 +340,10 @@ public CleanerInterceptor() {
     }
 
     static Object create(Object obj, Runnable action) {
-      System.out.printf("Cleaner.create(%s,%s)%n", obj, action);
       return CleanerCompat.register(obj, action);
     }
 
     static void clean(Object cleanable) {
-      System.out.printf("Cleaner.clean(%s)%n", cleanable);
       CleanerCompat.clean(cleanable);
     }
 

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoTest.java
Patch:
@@ -11,7 +11,6 @@
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
 import static androidx.test.espresso.matcher.ViewMatchers.withText;
 import static com.google.common.truth.Truth.assertThat;
-import static org.robolectric.annotation.TextLayoutMode.Mode.REALISTIC;
 
 import android.view.KeyEvent;
 import android.widget.Button;
@@ -23,12 +22,11 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
 
 /** Simple tests to verify espresso APIs can be used on both Robolectric and device. */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(REALISTIC)
+
 public final class EspressoTest {
 
   @Rule

File: integration_tests/androidx_test/src/test/java/org/robolectric/integrationtests/axt/EspressoWithPausedLooperTest.java
Patch:
@@ -4,7 +4,6 @@
 import static androidx.test.espresso.assertion.ViewAssertions.matches;
 import static androidx.test.espresso.matcher.ViewMatchers.isCompletelyDisplayed;
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
-import static org.robolectric.annotation.TextLayoutMode.Mode.REALISTIC;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;
 
 import androidx.test.core.app.ActivityScenario;
@@ -13,12 +12,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
 
 /** Verify Espresso usage with paused looper */
 @RunWith(AndroidJUnit4.class)
-@TextLayoutMode(REALISTIC)
+
 public final class EspressoWithPausedLooperTest {
 
   @Before

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -340,12 +340,10 @@ public CleanerInterceptor() {
     }
 
     static Object create(Object obj, Runnable action) {
-      System.out.printf("Cleaner.create(%s,%s)%n", obj, action);
       return CleanerCompat.register(obj, action);
     }
 
     static void clean(Object cleanable) {
-      System.out.printf("Cleaner.clean(%s)%n", cleanable);
       CleanerCompat.clean(cleanable);
     }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextToSpeech.java
Patch:
@@ -72,8 +72,8 @@ protected void __constructor__(
 
   @Implementation
   protected int initTts() {
-    // Attempt to be model real Android code, where success callbacks occur asynchronously, but
-    // error callbacks occur immediately.
+    // Attempt to model real Android code, where success callbacks occur asynchronously and error
+    // callbacks occur immediately.
     if (listener != null) {
       if (onInitStatus == TextToSpeech.SUCCESS) {
         new Handler(Looper.getMainLooper()).post(() -> listener.onInit(onInitStatus));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraDeviceImplTest.java
Patch:
@@ -229,7 +229,7 @@ public void onCaptureCompleted(
         }
         assertThat(captureResponse).isEqualTo(1);
       } catch (CameraAccessException e) {
-        fail();
+        throw new AssertionError("Got CameraAccessException when testing onConfigured", e);
       }
     }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -399,7 +399,8 @@ public void constructor_shouldSetComponentAndActionAndData() {
             Uri.parse("http://www.robolectric.org"),
             ApplicationProvider.getApplicationContext(),
             Activity.class);
-    assertThat(intent.getComponent()).isEqualTo(new ComponentName("org.robolectric", "android.app.Activity"));
+    assertThat(intent.getComponent())
+        .isEqualTo(new ComponentName("org.robolectric", "android.app.Activity"));
     assertThat(intent.getAction()).isEqualTo("roboaction");
     assertThat(intent.getData()).isEqualTo(Uri.parse("http://www.robolectric.org"));
   }
@@ -480,7 +481,7 @@ public TestSerializable(String someValue) {
     @Override
     public boolean equals(Object o) {
       if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
+      if (!(o instanceof TestSerializable)) return false;
 
       TestSerializable that = (TestSerializable) o;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraDeviceImplTest.java
Patch:
@@ -229,7 +229,7 @@ public void onCaptureCompleted(
         }
         assertThat(captureResponse).isEqualTo(1);
       } catch (CameraAccessException e) {
-        fail();
+        throw new AssertionError("Got CameraAccessException when testing onConfigured", e);
       }
     }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -399,7 +399,8 @@ public void constructor_shouldSetComponentAndActionAndData() {
             Uri.parse("http://www.robolectric.org"),
             ApplicationProvider.getApplicationContext(),
             Activity.class);
-    assertThat(intent.getComponent()).isEqualTo(new ComponentName("org.robolectric", "android.app.Activity"));
+    assertThat(intent.getComponent())
+        .isEqualTo(new ComponentName("org.robolectric", "android.app.Activity"));
     assertThat(intent.getAction()).isEqualTo("roboaction");
     assertThat(intent.getData()).isEqualTo(Uri.parse("http://www.robolectric.org"));
   }
@@ -480,7 +481,7 @@ public TestSerializable(String someValue) {
     @Override
     public boolean equals(Object o) {
       if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
+      if (!(o instanceof TestSerializable)) return false;
 
       TestSerializable that = (TestSerializable) o;
 

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -10,7 +10,6 @@
 import org.junit.runners.model.InitializationError;
 import org.robolectric.internal.AndroidSandbox.TestEnvironmentSpec;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
-import org.robolectric.internal.bytecode.InstrumentationConfiguration.Builder;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 import org.robolectric.util.inject.Injector;
@@ -42,7 +41,7 @@ protected Class<? extends TestLifecycle> getTestLifecycleClass() {
   @Nonnull
   @Override
   protected InstrumentationConfiguration createClassLoaderConfig(FrameworkMethod method) {
-    return new Builder(super.createClassLoaderConfig(method))
+    return new InstrumentationConfiguration.Builder(super.createClassLoaderConfig(method))
         .doNotAcquireClass(BootstrapDeferringRobolectricTestRunner.class)
         .doNotAcquireClass(RoboInject.class)
         .doNotAcquireClass(MyTestLifecycle.class)

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -14,6 +14,7 @@
 import android.os.Looper;
 import java.io.FileOutputStream;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.spi.FileSystemProvider;
@@ -241,7 +242,7 @@ public void equalityOfRobolectricFrameworkMethod() throws Exception {
     assertThat(rfm16).isEqualTo(rfm16b);
     assertThat(rfm16).isNotEqualTo(rfm16c);
 
-    assertThat(rfm16.hashCode()).isEqualTo((rfm16b.hashCode()));
+    assertThat(rfm16.hashCode()).isEqualTo(rfm16b.hashCode());
   }
 
   @Test
@@ -400,7 +401,7 @@ public void second() throws Exception {
         Path jarPath = tempDirectory.create("some-jar").resolve("some.jar");
         try (JarOutputStream out = new JarOutputStream(new FileOutputStream(jarPath.toFile()))) {
           out.putNextEntry(new JarEntry("README.txt"));
-          out.write("hi!".getBytes());
+          out.write("hi!".getBytes(StandardCharsets.UTF_8));
         }
 
         FileSystemProvider jarFSP = FileSystemProvider.installedProviders().stream()

File: robolectric/src/test/java/org/robolectric/android/PreferenceIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public void inflate_shouldCreateCorrectClasses() throws Exception {
     assertThat(innerScreen).isInstanceOf(PreferenceScreen.class);
     assertThat(innerScreen.getKey()).isEqualTo("screen");
     assertThat(innerScreen.getTitle().toString()).isEqualTo("Screen Test");
-    assertThat(innerScreen.getSummary()).isEqualTo("Screen summary");
+    assertThat(innerScreen.getSummary().toString()).isEqualTo("Screen summary");
     assertThat(innerScreen.getPreference(0)).isInstanceOf(Preference.class);
 
     assertThat(screen.getPreference(2)).isInstanceOf(CheckBoxPreference.class);

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuTest.java
Patch:
@@ -72,10 +72,10 @@ public void add_AddsItemsInOrder() {
     menu.add(0, 0, 0, "hello");
 
     MenuItem item = menu.getItem(0);
-    assertEquals("hell0", item.getTitle());
+    assertEquals("hell0", item.getTitle().toString());
     item = menu.getItem(1);
-    assertEquals("hello", item.getTitle());
+    assertEquals("hello", item.getTitle().toString());
     item = menu.getItem(2);
-    assertEquals("greeting", item.getTitle());
+    assertEquals("greeting", item.getTitle().toString());
   }
 }

File: robolectric/src/test/java/org/robolectric/internal/dependency/PropertiesDependencyResolverTest.java
Patch:
@@ -5,12 +5,12 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Properties;
@@ -94,7 +94,7 @@ private Path propsFile(String key, File value) throws IOException {
 
   private Path propsFile(Properties contents) throws IOException {
     File file = temporaryFolder.newFile("file.properties");
-    try (Writer out = new BufferedWriter(new FileWriter(file))) {
+    try (Writer out = Files.newBufferedWriter(file.toPath(), StandardCharsets.UTF_8)) {
       contents.store(out, "for tests");
     }
     return file.toPath();

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -55,8 +55,8 @@ public void onNothingSelected(AdapterView<?> parent) {
 
     shadowOf(adapterView).populateItems();
     assertThat(adapterView.getChildCount()).isEqualTo(2);
-    assertThat(((TextView) adapterView.getChildAt(0)).getText()).isEqualTo("Item 0");
-    assertThat(((TextView) adapterView.getChildAt(1)).getText()).isEqualTo("Item 1");
+    assertThat(((TextView) adapterView.getChildAt(0)).getText().toString()).isEqualTo("Item 0");
+    assertThat(((TextView) adapterView.getChildAt(1)).getText().toString()).isEqualTo("Item 1");
   }
 
   @Test public void testSetEmptyView_ShouldHideAdapterViewIfAdapterIsNull() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -44,6 +44,6 @@ public void testSetTitle() {
     assertThat(shadow.getTitle()).isNull();
     CharSequence title = "Title";
     shadow.setTitle(title);
-    assertThat(shadow.getTitle()).isEqualTo(title);
+    assertThat(shadow.getTitle().toString()).isEqualTo(title.toString());
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -43,7 +43,7 @@ public void createWidget_shouldInflateViewAndAssignId() throws Exception {
     int widgetId = shadowAppWidgetManager.createWidget(SpanishTestAppWidgetProvider.class, R.layout.main);
     View widgetView = shadowAppWidgetManager.getViewFor(widgetId);
 
-    assertEquals("Hola", ((TextView) widgetView.findViewById(R.id.subtitle)).getText());
+    assertEquals("Hola", ((TextView) widgetView.findViewById(R.id.subtitle)).getText().toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -58,7 +58,6 @@ public void openNonAssetShouldOpenRealAssetFromResources() throws IOException {
     InputStream inputStream = assetManager.openNonAsset(0, "res/drawable/an_image.png", 0);
 
     // expect different sizes in binary vs file resources
-    int expectedFileSize = useLegacy() ? 6559 : 5138;
     int bytes = countBytes(inputStream);
     if (bytes != 6559 && bytes != 5138) {
       fail("Expected 5138 or 6559 bytes for image but got " + bytes);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentObserverTest.java
Patch:
@@ -39,7 +39,6 @@ public void testDispatchChangeBoolean() {
     assertThat(observer.changed).isFalse();
     assertThat(observer.selfChange).isFalse();
 
-    Uri uri = Uri.parse("http://www.somewhere.com");
     observer.dispatchChange(true);
 
     assertThat(observer.changed).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationBuilderTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import android.content.ContentProvider;
 import android.content.ContentProviderOperation;
-import android.content.ContentProviderOperation.Builder;
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.net.Uri;
@@ -14,7 +13,7 @@
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowContentProviderOperationBuilderTest {
-  private Builder builder;
+  private ContentProviderOperation.Builder builder;
 
   @Test
   public void build() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDropBoxManagerTest.java
Patch:
@@ -49,7 +49,7 @@ public void dataExpected() throws Exception {
     assertThat(entry.getTag()).isEqualTo(TAG);
     assertThat(entry.getTimeMillis()).isEqualTo(1);
     assertThat(new BufferedReader(new InputStreamReader(entry.getInputStream(), UTF_8)).readLine())
-        .isEqualTo(new String(DATA));
+        .isEqualTo(new String(DATA, UTF_8));
     assertThat(entry.getText(100)).isEqualTo(new String(DATA, UTF_8));
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -54,7 +54,8 @@ public void givenInitializingWithAttributeSet_whenMaxLengthDefined_thenRestrictT
 
     editText.setText(excessiveInput);
 
-    assertThat((CharSequence) editText.getText().toString()).isEqualTo(excessiveInput.subSequence(0, maxLength));
+    assertThat(editText.getText().toString())
+        .isEqualTo(excessiveInput.subSequence(0, maxLength).toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -6,7 +6,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
 import android.os.Handler;
 import android.os.Looper;
@@ -20,6 +19,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.LooperMode;
 import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TestRunnable;
 
@@ -74,7 +74,8 @@ public void testDefaultConstructorUsesDefaultLooper() throws Exception {
   }
 
   private static Looper newLooper(boolean canQuit) {
-    return ReflectionHelpers.callConstructor(Looper.class, from(boolean.class, canQuit));
+    return ReflectionHelpers.callConstructor(
+        Looper.class, ClassParameter.from(boolean.class, canQuit));
   }
   
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRouterTest.java
Patch:
@@ -49,15 +49,16 @@ public void testAddBluetoothRoute_bluetoothRouteSelected() {
   public void testAddBluetoothRoute_checkBluetoothRouteProperties() {
     shadowOf(mediaRouter).addBluetoothRoute();
     RouteInfo bluetoothRoute = mediaRouter.getRouteAt(1);
-    assertThat(bluetoothRoute.getName()).isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
+    assertThat(bluetoothRoute.getName().toString())
+        .isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
   }
 
   @Test
   @Config(minSdk = JELLY_BEAN_MR2)
   public void testAddBluetoothRoute_checkBluetoothRouteProperties_apiJbMr2() {
     shadowOf(mediaRouter).addBluetoothRoute();
     RouteInfo bluetoothRoute = mediaRouter.getRouteAt(1);
-    assertThat(bluetoothRoute.getDescription()).isEqualTo("Bluetooth audio");
+    assertThat(bluetoothRoute.getDescription().toString()).isEqualTo("Bluetooth audio");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.animation.Animator;
 import android.animation.ObjectAnimator;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -51,7 +51,7 @@ public void start_shouldRunAnimation() {
     assertThat(listenerEvents).containsExactly("started");
     assertThat(target.getTransparency()).isEqualTo(0);
 
-    shadowMainLooper().idleFor(1, TimeUnit.SECONDS);
+    shadowMainLooper().idleFor(Duration.ofSeconds(1));
 
     assertThat(listenerEvents).containsExactly("started", "ended");
     assertThat(target.getTransparency()).isEqualTo(4);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPhoneWindowTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() throws Exception {
   @Test
   public void getTitle() throws Exception {
     window.setTitle("Some title");
-    assertThat(shadowOf(window).getTitle()).isEqualTo("Some title");
+    assertThat(shadowOf(window).getTitle().toString()).isEqualTo("Some title");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -39,8 +39,8 @@ public void fragmentIsNotNull() {
   public void preferenceAddedWithCorrectDetails() {
     Preference preference = fragment.findPreference("edit_text");
     assertThat(preference).isNotNull();
-    assertThat(preference.getTitle()).isEqualTo("EditText Test");
-    assertThat(preference.getSummary()).isEqualTo("");
+    assertThat(preference.getTitle().toString()).isEqualTo("EditText Test");
+    assertThat(preference.getSummary().toString()).isEqualTo("");
   }
 
   private static class TestPreferenceActivity extends Activity {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRestrictionsManagerTest.java
Patch:
@@ -37,7 +37,9 @@ public void getApplicationRestrictions() {
     bundle.putCharSequence("test_key", "test_value");
     shadowOf(restrictionsManager).setApplicationRestrictions(bundle);
 
-    assertThat(restrictionsManager.getApplicationRestrictions().getCharSequence("test_key")).isEqualTo("test_value");
+    assertThat(
+            restrictionsManager.getApplicationRestrictions().getCharSequence("test_key").toString())
+        .isEqualTo("test_value");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -391,7 +391,7 @@ public void testGetError() {
     assertNull(textView.getError());
     CharSequence error = "myError";
     textView.setError(error);
-    assertEquals(error, textView.getError());
+    assertEquals(error.toString(), textView.getError().toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.animation.ValueAnimator;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.Ordering;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
@@ -57,7 +57,7 @@ public void test_WhenInfiniteAnimationIsPlayed_AnimationIsOnlyPlayedOnce() throw
     animator.start();
     assertThat(animator.isRunning()).isTrue();
 
-    shadowMainLooper().idleFor(200, TimeUnit.MILLISECONDS);
+    shadowMainLooper().idleFor(Duration.ofMillis(200));
     assertThat(animator.isRunning()).isFalse();
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVibratorTest.java
Patch:
@@ -12,7 +12,7 @@
 import android.os.Vibrator;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import java.util.concurrent.TimeUnit;
+import java.time.Duration;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -55,7 +55,7 @@ public void vibrateMilliseconds() {
     assertThat(shadowOf(vibrator).isVibrating()).isTrue();
     assertThat(shadowOf(vibrator).getMilliseconds()).isEqualTo(5000L);
 
-    shadowMainLooper().idleFor(5, TimeUnit.SECONDS);
+    shadowMainLooper().idleFor(Duration.ofSeconds(5));
     assertThat(shadowOf(vibrator).isVibrating()).isFalse();
   }
 

File: robolectric/src/test/java/org/robolectric/internal/DefaultManifestFactoryTest.java
Patch:
@@ -74,7 +74,8 @@ public void identify_configNoneShouldBeIgnored() throws Exception {
     properties.put("android_merged_assets", "gradle/assets");
     properties.put("android_custom_package", "com.example.app");
     DefaultManifestFactory factory = new DefaultManifestFactory(properties);
-    ManifestIdentifier identifier = factory.identify(Config.Builder.defaults().setManifest(Config.NONE).build());
+    ManifestIdentifier identifier =
+        factory.identify(Config.Builder.defaults().setManifest(Config.NONE).build());
     AndroidManifest manifest = RobolectricTestRunner.createAndroidManifest(identifier);
 
     assertThat(manifest.getAndroidManifestFile())
@@ -92,7 +93,7 @@ public void identify_packageCanBeOverridenFromConfig() throws Exception {
     properties.put("android_merged_assets", "gradle/assets");
     DefaultManifestFactory factory = new DefaultManifestFactory(properties);
     ManifestIdentifier identifier =
-            factory.identify(Config.Builder.defaults().setPackageName("overridden.package").build());
+        factory.identify(Config.Builder.defaults().setPackageName("overridden.package").build());
     AndroidManifest manifest = RobolectricTestRunner.createAndroidManifest(identifier);
 
     assertThat(manifest.getAndroidManifestFile())

File: robolectric/src/test/java/org/robolectric/internal/dependency/PropertiesDependencyResolverTest.java
Patch:
@@ -5,13 +5,10 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.net.URL;
-import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -54,7 +54,8 @@ public void givenInitializingWithAttributeSet_whenMaxLengthDefined_thenRestrictT
 
     editText.setText(excessiveInput);
 
-    assertThat(editText.getText().toString()).isEqualTo(excessiveInput.subSequence(0, maxLength).toString());
+    assertThat(editText.getText().toString())
+        .isEqualTo(excessiveInput.subSequence(0, maxLength).toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -73,8 +73,8 @@ public void testDefaultConstructorUsesDefaultLooper() throws Exception {
   }
 
   private static Looper newLooper(boolean canQuit) {
-    return ReflectionHelpers.callConstructor(Looper.class,
-            ReflectionHelpers.ClassParameter.from(boolean.class, canQuit));
+    return ReflectionHelpers.callConstructor(
+        Looper.class, ReflectionHelpers.ClassParameter.from(boolean.class, canQuit));
   }
   
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Before;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRouterTest.java
Patch:
@@ -49,7 +49,8 @@ public void testAddBluetoothRoute_bluetoothRouteSelected() {
   public void testAddBluetoothRoute_checkBluetoothRouteProperties() {
     shadowOf(mediaRouter).addBluetoothRoute();
     RouteInfo bluetoothRoute = mediaRouter.getRouteAt(1);
-    assertThat(bluetoothRoute.getName().toString()).isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
+    assertThat(bluetoothRoute.getName().toString())
+        .isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -6,11 +6,9 @@
 import android.animation.Animator;
 import android.animation.ObjectAnimator;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPausedMessageQueueTest.java
Patch:
@@ -27,8 +27,9 @@ public class ShadowPausedMessageQueueTest {
 
   @Before
   public void setUp() throws Exception {
-    queue = ReflectionHelpers.callConstructor(MessageQueue.class,
-            ReflectionHelpers.ClassParameter.from(boolean.class, true));
+    queue =
+        ReflectionHelpers.callConstructor(
+            MessageQueue.class, ReflectionHelpers.ClassParameter.from(boolean.class, true));
     shadowQueue = Shadow.extract(queue);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRestrictionsManagerTest.java
Patch:
@@ -37,8 +37,9 @@ public void getApplicationRestrictions() {
     bundle.putCharSequence("test_key", "test_value");
     shadowOf(restrictionsManager).setApplicationRestrictions(bundle);
 
-    assertThat(restrictionsManager.getApplicationRestrictions().getCharSequence("test_key").toString())
-            .isEqualTo("test_value");
+    assertThat(
+            restrictionsManager.getApplicationRestrictions().getCharSequence("test_key").toString())
+        .isEqualTo("test_value");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShortcutManagerTest.java
Patch:
@@ -85,7 +85,7 @@ public void testDynamicShortcuts_immutableShortcutDoesntGetUpdated() throws Exce
     shortcutManager.addDynamicShortcuts(ImmutableList.of(shortcut2));
     assertThat(shortcutManager.getDynamicShortcuts()).hasSize(1);
     assertThat(shortcutManager.getDynamicShortcuts().get(0).getLongLabel().toString())
-            .isEqualTo("original");
+        .isEqualTo("original");
   }
 
   @Test
@@ -99,7 +99,7 @@ public void testShortcutWithIdenticalIdGetsUpdated() throws Exception {
     shortcutManager.addDynamicShortcuts(ImmutableList.of(shortcut2));
     assertThat(shortcutManager.getDynamicShortcuts()).hasSize(1);
     assertThat(shortcutManager.getDynamicShortcuts().get(0).getLongLabel().toString())
-            .isEqualTo("updated");
+        .isEqualTo("updated");
   }
 
   @Test
@@ -173,7 +173,7 @@ public void testUpdateShortcutsOnlyUpdatesExistingShortcuts() throws Exception {
     shortcutManager.updateShortcuts(ImmutableList.of(shortcutUpdated, shortcut2));
     assertThat(shortcutManager.getDynamicShortcuts()).containsExactly(shortcutUpdated);
     assertThat(shortcutManager.getDynamicShortcuts().get(0).getLongLabel().toString())
-            .isEqualTo("updated");
+        .isEqualTo("updated");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -6,11 +6,9 @@
 import android.animation.ValueAnimator;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.Ordering;
-
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVibratorTest.java
Patch:
@@ -12,9 +12,7 @@
 import android.os.Vibrator;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-
 import java.time.Duration;
-import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -51,7 +51,6 @@
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.junit.Before;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -14,6 +14,7 @@
 import android.os.Looper;
 import java.io.FileOutputStream;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.spi.FileSystemProvider;
@@ -400,7 +401,7 @@ public void second() throws Exception {
         Path jarPath = tempDirectory.create("some-jar").resolve("some.jar");
         try (JarOutputStream out = new JarOutputStream(new FileOutputStream(jarPath.toFile()))) {
           out.putNextEntry(new JarEntry("README.txt"));
-          out.write("hi!".getBytes());
+          out.write("hi!".getBytes(StandardCharsets.UTF_8));
         }
 
         FileSystemProvider jarFSP = FileSystemProvider.installedProviders().stream()

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDropBoxManagerTest.java
Patch:
@@ -49,7 +49,7 @@ public void dataExpected() throws Exception {
     assertThat(entry.getTag()).isEqualTo(TAG);
     assertThat(entry.getTimeMillis()).isEqualTo(1);
     assertThat(new BufferedReader(new InputStreamReader(entry.getInputStream(), UTF_8)).readLine())
-        .isEqualTo(new String(DATA));
+        .isEqualTo(new String(DATA, UTF_8));
     assertThat(entry.getText(100)).isEqualTo(new String(DATA, UTF_8));
   }
 

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -81,7 +81,7 @@ public void getQuantityString() throws Exception {
   public void inflateLayout_defaultsTo_sw320dp() throws Exception {
     View view = Robolectric.setupActivity(Activity.class).getLayoutInflater().inflate(R.layout.layout_smallest_width, null);
     TextView textView = view.findViewById(R.id.text1);
-    assertThat(textView.getText()).isEqualTo("320");
+    assertThat(textView.getText().toString()).isEqualTo("320");
 
     assertThat(resources.getConfiguration().smallestScreenWidthDp).isEqualTo(320);
   }
@@ -90,7 +90,7 @@ public void inflateLayout_defaultsTo_sw320dp() throws Exception {
   public void inflateLayout_overridesTo_sw720dp() throws Exception {
     View view = Robolectric.setupActivity(Activity.class).getLayoutInflater().inflate(R.layout.layout_smallest_width, null);
     TextView textView = view.findViewById(R.id.text1);
-    assertThat(textView.getText()).isEqualTo("720");
+    assertThat(textView.getText().toString()).isEqualTo("720");
 
     assertThat(resources.getConfiguration().smallestScreenWidthDp).isEqualTo(720);
   }

File: robolectric/src/test/java/org/robolectric/android/PreferenceIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public void inflate_shouldCreateCorrectClasses() throws Exception {
     assertThat(innerScreen).isInstanceOf(PreferenceScreen.class);
     assertThat(innerScreen.getKey()).isEqualTo("screen");
     assertThat(innerScreen.getTitle().toString()).isEqualTo("Screen Test");
-    assertThat(innerScreen.getSummary()).isEqualTo("Screen summary");
+    assertThat(innerScreen.getSummary().toString()).isEqualTo("Screen summary");
     assertThat(innerScreen.getPreference(0)).isInstanceOf(Preference.class);
 
     assertThat(screen.getPreference(2)).isInstanceOf(CheckBoxPreference.class);

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuTest.java
Patch:
@@ -72,10 +72,10 @@ public void add_AddsItemsInOrder() {
     menu.add(0, 0, 0, "hello");
 
     MenuItem item = menu.getItem(0);
-    assertEquals("hell0", item.getTitle());
+    assertEquals("hell0", item.getTitle().toString());
     item = menu.getItem(1);
-    assertEquals("hello", item.getTitle());
+    assertEquals("hello", item.getTitle().toString());
     item = menu.getItem(2);
-    assertEquals("greeting", item.getTitle());
+    assertEquals("greeting", item.getTitle().toString());
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -55,8 +55,8 @@ public void onNothingSelected(AdapterView<?> parent) {
 
     shadowOf(adapterView).populateItems();
     assertThat(adapterView.getChildCount()).isEqualTo(2);
-    assertThat(((TextView) adapterView.getChildAt(0)).getText()).isEqualTo("Item 0");
-    assertThat(((TextView) adapterView.getChildAt(1)).getText()).isEqualTo("Item 1");
+    assertThat(((TextView) adapterView.getChildAt(0)).getText().toString()).isEqualTo("Item 0");
+    assertThat(((TextView) adapterView.getChildAt(1)).getText().toString()).isEqualTo("Item 1");
   }
 
   @Test public void testSetEmptyView_ShouldHideAdapterViewIfAdapterIsNull() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ConverterTest.java
Patch:
@@ -35,7 +35,8 @@ public void fromCharSequence_asInt_shouldHandleSpacesInString() {
   @Test
   public void fromCharSequence_asCharSequence_shouldHandleSpacesInString() {
     final TypedResource<String> resource = new TypedResource<>(" Robolectric ", ResType.CHAR_SEQUENCE, xmlContext);
-    assertThat(Converter.getConverter(ResType.CHAR_SEQUENCE).asCharSequence(resource)).isEqualTo("Robolectric");
+    assertThat(Converter.getConverter(ResType.CHAR_SEQUENCE).asCharSequence(resource).toString())
+            .isEqualTo("Robolectric");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -44,6 +44,6 @@ public void testSetTitle() {
     assertThat(shadow.getTitle()).isNull();
     CharSequence title = "Title";
     shadow.setTitle(title);
-    assertThat(shadow.getTitle()).isEqualTo(title);
+    assertThat(shadow.getTitle().toString()).isEqualTo(title.toString());
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -43,7 +43,7 @@ public void createWidget_shouldInflateViewAndAssignId() throws Exception {
     int widgetId = shadowAppWidgetManager.createWidget(SpanishTestAppWidgetProvider.class, R.layout.main);
     View widgetView = shadowAppWidgetManager.getViewFor(widgetId);
 
-    assertEquals("Hola", ((TextView) widgetView.findViewById(R.id.subtitle)).getText());
+    assertEquals("Hola", ((TextView) widgetView.findViewById(R.id.subtitle)).getText().toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDownloadManagerTest.java
Patch:
@@ -39,19 +39,19 @@ public void request_shouldGetDestinationUri() throws Exception {
   @Test
   public void request_shouldGetTitle() throws Exception {
     request.setTitle("Title");
-    assertThat(shadow.getTitle()).isEqualTo("Title");
+    assertThat(shadow.getTitle().toString()).isEqualTo("Title");
   }
 
   @Test
   public void request_shouldGetDescription() throws Exception {
     request.setDescription("Description");
-    assertThat(shadow.getDescription()).isEqualTo("Description");
+    assertThat(shadow.getDescription().toString()).isEqualTo("Description");
   }
 
   @Test
   public void request_shouldGetMimeType() throws Exception {
     request.setMimeType("application/json");
-    assertThat(shadow.getMimeType()).isEqualTo("application/json");
+    assertThat(shadow.getMimeType().toString()).isEqualTo("application/json");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -54,7 +54,7 @@ public void givenInitializingWithAttributeSet_whenMaxLengthDefined_thenRestrictT
 
     editText.setText(excessiveInput);
 
-    assertThat((CharSequence) editText.getText().toString()).isEqualTo(excessiveInput.subSequence(0, maxLength));
+    assertThat(editText.getText().toString()).isEqualTo(excessiveInput.subSequence(0, maxLength).toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRouterTest.java
Patch:
@@ -49,15 +49,15 @@ public void testAddBluetoothRoute_bluetoothRouteSelected() {
   public void testAddBluetoothRoute_checkBluetoothRouteProperties() {
     shadowOf(mediaRouter).addBluetoothRoute();
     RouteInfo bluetoothRoute = mediaRouter.getRouteAt(1);
-    assertThat(bluetoothRoute.getName()).isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
+    assertThat(bluetoothRoute.getName().toString()).isEqualTo(ShadowMediaRouter.BLUETOOTH_DEVICE_NAME);
   }
 
   @Test
   @Config(minSdk = JELLY_BEAN_MR2)
   public void testAddBluetoothRoute_checkBluetoothRouteProperties_apiJbMr2() {
     shadowOf(mediaRouter).addBluetoothRoute();
     RouteInfo bluetoothRoute = mediaRouter.getRouteAt(1);
-    assertThat(bluetoothRoute.getDescription()).isEqualTo("Bluetooth audio");
+    assertThat(bluetoothRoute.getDescription().toString()).isEqualTo("Bluetooth audio");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPhoneWindowTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() throws Exception {
   @Test
   public void getTitle() throws Exception {
     window.setTitle("Some title");
-    assertThat(shadowOf(window).getTitle()).isEqualTo("Some title");
+    assertThat(shadowOf(window).getTitle().toString()).isEqualTo("Some title");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -39,8 +39,8 @@ public void fragmentIsNotNull() {
   public void preferenceAddedWithCorrectDetails() {
     Preference preference = fragment.findPreference("edit_text");
     assertThat(preference).isNotNull();
-    assertThat(preference.getTitle()).isEqualTo("EditText Test");
-    assertThat(preference.getSummary()).isEqualTo("");
+    assertThat(preference.getTitle().toString()).isEqualTo("EditText Test");
+    assertThat(preference.getSummary().toString()).isEqualTo("");
   }
 
   private static class TestPreferenceActivity extends Activity {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRestrictionsManagerTest.java
Patch:
@@ -37,7 +37,8 @@ public void getApplicationRestrictions() {
     bundle.putCharSequence("test_key", "test_value");
     shadowOf(restrictionsManager).setApplicationRestrictions(bundle);
 
-    assertThat(restrictionsManager.getApplicationRestrictions().getCharSequence("test_key")).isEqualTo("test_value");
+    assertThat(restrictionsManager.getApplicationRestrictions().getCharSequence("test_key").toString())
+            .isEqualTo("test_value");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -391,7 +391,7 @@ public void testGetError() {
     assertNull(textView.getError());
     CharSequence error = "myError";
     textView.setError(error);
-    assertEquals(error, textView.getError());
+    assertEquals(error.toString(), textView.getError().toString());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/AndroidInterceptorsTest.java
Patch:
@@ -26,7 +26,8 @@ public void allMethodRefs() throws Exception {
             new MethodRef("java.lang.System", "currentTimeMillis"),
             new MethodRef("java.lang.System", "arraycopy"),
             new MethodRef("java.lang.System", "logE"),
-            new MethodRef("java.util.Locale", "adjustLanguageCode"));
+            new MethodRef("java.util.Locale", "adjustLanguageCode"),
+            new MethodRef("java.io.FileDescriptor", "release$"));
   }
 
   @Test
@@ -40,4 +41,4 @@ public void localeAdjustCodeInterceptor() throws Exception {
   private Object adjust(String languageCode) {
     return AndroidInterceptors.LocaleAdjustLanguageCodeInterceptor.adjustLanguageCode(languageCode);
   }
-}
\ No newline at end of file
+}

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -132,6 +132,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
     // fail on any usage due to DefaultConstructorMarker being inaccessible.
     builder.doNotInstrumentPackage("androidx.compose");
     builder.doNotInstrumentPackage("androidx.ui");
+    builder.doNotInstrumentPackage("androidx.fragment");
 
     builder.doNotInstrumentPackage("androidx.test");
     builder.doNotInstrumentPackage("android.support.test");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-@Config(sdk = JELLY_BEAN_MR2)
+@Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
-// @Config(minSdk = JELLY_BEAN_MR2)
 @Config(sdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -14,7 +14,7 @@
 
 @RunWith(AndroidJUnit4.class)
 // @Config(minSdk = JELLY_BEAN_MR2)
-@Config(sdk = CUR_DEVELOPMENT)
+@Config(sdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -14,7 +14,7 @@
 
 @RunWith(AndroidJUnit4.class)
 // @Config(minSdk = JELLY_BEAN_MR2)
-@Config(sdk = CUR_DEVELOPMENT)
+@Config(sdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
 
   @Test

File: integration_tests/agp/src/test/java/org/robolectric/integrationtests/agp/TestActivityTest.java
Patch:
@@ -4,6 +4,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.integrationtests.agp.testsupport.TestActivity;
 
 /**
  * Test asserting that test-only activities can be declared in a dependency project's manifest as a

File: integration_tests/agp/testsupport/src/main/java/org/robolectric/integrationtests/agp/testsupport/TestActivity.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.integrationtests.agp;
+package org.robolectric.integrationtests.agp.testsupport;
 
 import android.app.Activity;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/MediaCodecInfoBuilder.java
Patch:
@@ -61,7 +61,7 @@ public MediaCodecInfoBuilder setIsEncoder(boolean isEncoder) {
    *     {@code true} or by the Android platform {@code false}. Default value is {@code false}.
    */
   public MediaCodecInfoBuilder setIsVendor(boolean isVendor) {
-    this.isVendor = isEncoder;
+    this.isVendor = isVendor;
     return this;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/MediaCodecInfoBuilder.java
Patch:
@@ -61,7 +61,7 @@ public MediaCodecInfoBuilder setIsEncoder(boolean isEncoder) {
    *     {@code true} or by the Android platform {@code false}. Default value is {@code false}.
    */
   public MediaCodecInfoBuilder setIsVendor(boolean isVendor) {
-    this.isVendor = isEncoder;
+    this.isVendor = isVendor;
     return this;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -142,7 +142,7 @@ public void denyPermissions(int pid, int uid, String... permissions) {
     getShadowInstrumentation().denyPermissions(pid, uid, permissions);
   }
 
-  ShadowInstrumentation getShadowInstrumentation() {
+  static ShadowInstrumentation getShadowInstrumentation() {
     ActivityThread activityThread = (ActivityThread) RuntimeEnvironment.getActivityThread();
     return Shadow.extract(activityThread.getInstrumentation());
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -142,7 +142,7 @@ public void denyPermissions(int pid, int uid, String... permissions) {
     getShadowInstrumentation().denyPermissions(pid, uid, permissions);
   }
 
-  ShadowInstrumentation getShadowInstrumentation() {
+  static ShadowInstrumentation getShadowInstrumentation() {
     ActivityThread activityThread = (ActivityThread) RuntimeEnvironment.getActivityThread();
     return Shadow.extract(activityThread.getInstrumentation());
   }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -172,7 +172,7 @@ private String wrapInShadows(
   private static Set<String> getImports(VisitorState state) {
     Set<String> imports = new HashSet<>();
     for (ImportTree importTree : state.getPath().getCompilationUnit().getImports()) {
-      imports.add(importTree.getQualifiedIdentifier().toString());
+      imports.add(state.getSourceForNode(importTree.getQualifiedIdentifier()));
     }
     return imports;
   }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -71,8 +71,8 @@ public Description matchClass(ClassTree classTree, VisitorState state) {
         if ("org.robolectric.annotation.Implements".equals(annotationClassName)) {
           for (ExpressionTree expressionTree : annotationTree.getArguments()) {
             JCAssign jcAnnotation = (JCAssign) expressionTree;
-            if ("isInAndroidSdk".equals(jcAnnotation.lhs.toString())
-                && "false".equals(jcAnnotation.rhs.toString())) {
+            if ("isInAndroidSdk".equals(state.getSourceForNode(jcAnnotation.lhs))
+                && "false".equals(state.getSourceForNode(jcAnnotation.rhs))) {
               // shadows of classes not in the public Android SDK can keep their public methods.
               inSdk = false;
             }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -172,7 +172,7 @@ private String wrapInShadows(
   private static Set<String> getImports(VisitorState state) {
     Set<String> imports = new HashSet<>();
     for (ImportTree importTree : state.getPath().getCompilationUnit().getImports()) {
-      imports.add(importTree.getQualifiedIdentifier().toString());
+      imports.add(state.getSourceForNode(importTree.getQualifiedIdentifier()));
     }
     return imports;
   }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -71,8 +71,8 @@ public Description matchClass(ClassTree classTree, VisitorState state) {
         if ("org.robolectric.annotation.Implements".equals(annotationClassName)) {
           for (ExpressionTree expressionTree : annotationTree.getArguments()) {
             JCAssign jcAnnotation = (JCAssign) expressionTree;
-            if ("isInAndroidSdk".equals(jcAnnotation.lhs.toString())
-                && "false".equals(jcAnnotation.rhs.toString())) {
+            if ("isInAndroidSdk".equals(state.getSourceForNode(jcAnnotation.lhs))
+                && "false".equals(state.getSourceForNode(jcAnnotation.rhs))) {
               // shadows of classes not in the public Android SDK can keep their public methods.
               inSdk = false;
             }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowKeyCharacterMap.java
Patch:
@@ -73,6 +73,7 @@ public class ShadowKeyCharacterMap {
     CHAR_TO_KEY_CODE.put('=', KeyEvent.KEYCODE_EQUALS);
     CHAR_TO_KEY_CODE.put('`', KeyEvent.KEYCODE_GRAVE);
     CHAR_TO_KEY_CODE.put('\\', KeyEvent.KEYCODE_BACKSLASH);
+    CHAR_TO_KEY_CODE.put('\n', KeyEvent.KEYCODE_ENTER);
 
     CHAR_TO_KEY_CODE_SHIFT_ON.put('_', KeyEvent.KEYCODE_MINUS);
     CHAR_TO_KEY_CODE_SHIFT_ON.put('{', KeyEvent.KEYCODE_LEFT_BRACKET);
@@ -140,6 +141,7 @@ public class ShadowKeyCharacterMap {
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_EQUALS, '=');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_GRAVE, '`');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_BACKSLASH, '\\');
+    KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_ENTER, '\n');
 
     KEY_CODE_TO_CHAR_SHIFT_ON.put(KeyEvent.KEYCODE_MINUS, '_');
     KEY_CODE_TO_CHAR_SHIFT_ON.put(KeyEvent.KEYCODE_LEFT_BRACKET, '{');

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integrationtests/mockito/experimental/MockitoSpyTest.java
Patch:
@@ -4,7 +4,6 @@
 import static org.mockito.Mockito.spy;
 
 import android.app.Activity;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -16,8 +15,7 @@
 @Config(sdk = 28)
 public class MockitoSpyTest {
 
-  /** Currently failing test case for https://github.com/mockito/mockito/issues/2040 */
-  @Ignore
+  /** Regression test for https://github.com/mockito/mockito/issues/2040 */
   @Test
   public void spyActivity_hasSameBaseContext() {
     Activity activity = Robolectric.setupActivity(Activity.class);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -101,12 +101,12 @@ protected static Typeface createFromAsset(AssetManager mgr, String path) {
     throw new RuntimeException("Font asset not found " + path);
   }
 
-  @Implementation(minSdk = O)
+  @Implementation(minSdk = O, maxSdk = P)
   protected static Typeface createFromResources(AssetManager mgr, String path, int cookie) {
     return createUnderlyingTypeface(path, Typeface.NORMAL);
   }
 
-  @Implementation(minSdk = O, maxSdk = O_MR1)
+  @Implementation(minSdk = O)
   protected static Typeface createFromResources(
       Object /* FamilyResourceEntry */ entry,
       Object /* AssetManager */ mgr,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindow.java
Patch:
@@ -33,7 +33,6 @@ public class ShadowWindow {
       new HashSet<>();
 
   public static Window create(Context context) throws Exception {
-    new Throwable().printStackTrace();
     String className = getApiLevel() >= M
         ? "com.android.internal.policy.PhoneWindow"
         : "com.android.internal.policy.impl.PhoneWindow";

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -101,12 +101,12 @@ protected static Typeface createFromAsset(AssetManager mgr, String path) {
     throw new RuntimeException("Font asset not found " + path);
   }
 
-  @Implementation(minSdk = O)
+  @Implementation(minSdk = O, maxSdk = P)
   protected static Typeface createFromResources(AssetManager mgr, String path, int cookie) {
     return createUnderlyingTypeface(path, Typeface.NORMAL);
   }
 
-  @Implementation(minSdk = O, maxSdk = O_MR1)
+  @Implementation(minSdk = O)
   protected static Typeface createFromResources(
       Object /* FamilyResourceEntry */ entry,
       Object /* AssetManager */ mgr,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindow.java
Patch:
@@ -33,7 +33,6 @@ public class ShadowWindow {
       new HashSet<>();
 
   public static Window create(Context context) throws Exception {
-    new Throwable().printStackTrace();
     String className = getApiLevel() >= M
         ? "com.android.internal.policy.PhoneWindow"
         : "com.android.internal.policy.impl.PhoneWindow";

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -6,11 +6,11 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 
+import android.annotation.NonNull;
 import android.media.AudioFormat;
 import android.media.AudioTrack;
 import android.media.AudioTrack.WriteMode;
 import android.util.Log;
-import androidx.annotation.NonNull;
 import java.nio.ByteBuffer;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindow.java
Patch:
@@ -12,7 +12,6 @@
 import android.view.Window;
 import android.view.Window.OnFrameMetricsAvailableListener;
 import android.widget.ProgressBar;
-import androidx.annotation.RequiresApi;
 import java.util.HashSet;
 import java.util.Set;
 import org.robolectric.annotation.Implementation;
@@ -118,7 +117,6 @@ protected void removeOnFrameMetricsAvailableListener(
    * Calls {@link Window.OnFrameMetrisAvailableListener#onFrameMetricsAvailable()} on each current
    * listener with 0 as the dropCountSinceLastInvocation.
    */
-  @RequiresApi(api = N)
   public void reportOnFrameMetricsAvailable(FrameMetrics frameMetrics) {
     reportOnFrameMetricsAvailable(frameMetrics, /* dropCountSinceLastInvocation= */ 0);
   }
@@ -130,7 +128,6 @@ public void reportOnFrameMetricsAvailable(FrameMetrics frameMetrics) {
    * @param frameMetrics the {@link FrameMetrics} instance passed to the listeners.
    * @param dropCountSinceLastInvocation the dropCountSinceLastInvocation passed to the listeners.
    */
-  @RequiresApi(api = N)
   public void reportOnFrameMetricsAvailable(
       FrameMetrics frameMetrics, int dropCountSinceLastInvocation) {
     for (OnFrameMetricsAvailableListener listener : onFrameMetricsAvailableListeners) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -6,11 +6,11 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 
+import android.annotation.NonNull;
 import android.media.AudioFormat;
 import android.media.AudioTrack;
 import android.media.AudioTrack.WriteMode;
 import android.util.Log;
-import androidx.annotation.NonNull;
 import java.nio.ByteBuffer;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindow.java
Patch:
@@ -12,7 +12,6 @@
 import android.view.Window;
 import android.view.Window.OnFrameMetricsAvailableListener;
 import android.widget.ProgressBar;
-import androidx.annotation.RequiresApi;
 import java.util.HashSet;
 import java.util.Set;
 import org.robolectric.annotation.Implementation;
@@ -118,7 +117,6 @@ protected void removeOnFrameMetricsAvailableListener(
    * Calls {@link Window.OnFrameMetrisAvailableListener#onFrameMetricsAvailable()} on each current
    * listener with 0 as the dropCountSinceLastInvocation.
    */
-  @RequiresApi(api = N)
   public void reportOnFrameMetricsAvailable(FrameMetrics frameMetrics) {
     reportOnFrameMetricsAvailable(frameMetrics, /* dropCountSinceLastInvocation= */ 0);
   }
@@ -130,7 +128,6 @@ public void reportOnFrameMetricsAvailable(FrameMetrics frameMetrics) {
    * @param frameMetrics the {@link FrameMetrics} instance passed to the listeners.
    * @param dropCountSinceLastInvocation the dropCountSinceLastInvocation passed to the listeners.
    */
-  @RequiresApi(api = N)
   public void reportOnFrameMetricsAvailable(
       FrameMetrics frameMetrics, int dropCountSinceLastInvocation) {
     for (OnFrameMetricsAvailableListener listener : onFrameMetricsAvailableListeners) {

File: integration_tests/androidx/src/test/java/androidx/core/content/res/ResourcesCompatTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import android.graphics.Typeface;
 import android.os.Build;
+import androidx.core.content.res.ResourcesCompat;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -22,9 +23,7 @@ public class ResourcesCompatTest {
   @Test
   @Config(maxSdk = Build.VERSION_CODES.Q)
   public void getFont() {
-    Typeface typeface =
-        androidx.core.content.res.ResourcesCompat.getFont(
-            getApplicationContext(), R.font.vt323_regular);
+    Typeface typeface = ResourcesCompat.getFont(getApplicationContext(), R.font.vt323_regular);
     assertThat(typeface).isNotNull();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowFontBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.Q;
 
 import android.content.res.AssetManager;
+import android.graphics.fonts.Font;
 import com.google.common.base.Preconditions;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;
@@ -13,7 +14,8 @@
 import org.robolectric.res.android.CppAssetManager2;
 import org.robolectric.res.android.Registries;
 
-@Implements(className = "android.graphics.fonts.Font.Builder", minSdk = Q, isInAndroidSdk = false)
+/** Shadow for {@link android.graphics.fonts.Font.Builder} */
+@Implements(value = Font.Builder.class, minSdk = Q)
 public class ShadowFontBuilder {
 
   // transliterated from frameworks/base/core/jni/android/graphics/fonts/Font.cpp

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowFontBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.Q;
 
 import android.content.res.AssetManager;
+import android.graphics.fonts.Font;
 import com.google.common.base.Preconditions;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;
@@ -13,7 +14,8 @@
 import org.robolectric.res.android.CppAssetManager2;
 import org.robolectric.res.android.Registries;
 
-@Implements(className = "android.graphics.fonts.Font.Builder", minSdk = Q, isInAndroidSdk = false)
+/** Shadow for {@link android.graphics.fonts.Font.Builder} */
+@Implements(value = Font.Builder.class, minSdk = Q)
 public class ShadowFontBuilder {
 
   // transliterated from frameworks/base/core/jni/android/graphics/fonts/Font.cpp

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -995,8 +995,8 @@ ResolvedBag GetBag(int resid, List<Integer> child_resids) {
       ResolvedBag new_bag = new ResolvedBag();
       ResolvedBag.Entry[] new_entry = new_bag.entries = new Entry[entry_count];
       int i = 0;
-      for (; curOffset < map_entry_end;
-          map_entry = new ResTable_map(map_entry.myBuf(), curOffset)) {
+      while (curOffset < map_entry_end) {
+        map_entry = new ResTable_map(map_entry.myBuf(), curOffset);
         final Ref<Integer> new_key = new Ref<>(dtohl(map_entry.name.ident));
         if (!is_internal_resid(new_key.get())) {
           // Attributes, arrays, etc don't have a resource id as the name. They specify

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -995,8 +995,8 @@ ResolvedBag GetBag(int resid, List<Integer> child_resids) {
       ResolvedBag new_bag = new ResolvedBag();
       ResolvedBag.Entry[] new_entry = new_bag.entries = new Entry[entry_count];
       int i = 0;
-      for (; curOffset < map_entry_end;
-          map_entry = new ResTable_map(map_entry.myBuf(), curOffset)) {
+      while (curOffset < map_entry_end) {
+        map_entry = new ResTable_map(map_entry.myBuf(), curOffset);
         final Ref<Integer> new_key = new Ref<>(dtohl(map_entry.name.ident));
         if (!is_internal_resid(new_key.get())) {
           // Attributes, arrays, etc don't have a resource id as the name. They specify

File: integration_tests/security-providers/src/test/java/org/robolectric/integrationtests/securityproviders/SecurityProvidersTest.java
Patch:
@@ -21,7 +21,7 @@ public class SecurityProvidersTest {
   private static final Provider CONSCRYPT_PROVIDER = new OpenSSLProvider();
 
   @Test
-  public void JSSE_provider_isFunctioning() throws Exception {
+  public void jsseProvider_isFunctioning() throws Exception {
     URL url = new URL("https://www.google.com");
     url.openConnection().getInputStream();
   }

File: integration_tests/security-providers/src/test/java/org/robolectric/integrationtests/securityproviders/SecurityProvidersTest.java
Patch:
@@ -21,7 +21,7 @@ public class SecurityProvidersTest {
   private static final Provider CONSCRYPT_PROVIDER = new OpenSSLProvider();
 
   @Test
-  public void JSSE_provider_isFunctioning() throws Exception {
+  public void jsseProvider_isFunctioning() throws Exception {
     URL url = new URL("https://www.google.com");
     url.openConnection().getInputStream();
   }

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -86,6 +86,8 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
         .doNotAcquirePackage("io.mockk.")
+        .doNotAcquirePackage("org.bouncycastle.")
+        .doNotAcquirePackage("org.conscrypt.")
         // Fix #958: SQLite native library must be loaded once.
         .doNotAcquirePackage("com.almworks.sqlite4java")
         .doNotAcquirePackage("org.jacoco.");

File: sandbox/src/main/java/org/robolectric/JarInstrumentor.java
Patch:
@@ -186,6 +186,8 @@ private static InstrumentationConfiguration createInstrumentationConfiguration()
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
         .doNotAcquirePackage("io.mockk.")
+        .doNotAcquirePackage("org.bouncycastle.")
+        .doNotAcquirePackage("org.conscrypt.")
         // Fix #958: SQLite native library must be loaded once.
         .doNotAcquirePackage("com.almworks.sqlite4java")
         .doNotAcquirePackage("org.jacoco.");

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -141,7 +141,7 @@ public void setUpApplicationState(Method method,
     }
 
     if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
-      Security.insertProviderAt(new BouncyCastleProvider(), 1);
+      Security.addProvider(new BouncyCastleProvider());
     }
 
     android.content.res.Configuration androidConfiguration =

File: utils/reflector/src/main/java/org/robolectric/util/reflector/ReflectorClassWriter.java
Patch:
@@ -79,8 +79,7 @@ private static org.objectweb.asm.commons.Method findMethod(
   }
 
   void write() {
-    int accessModifiers =
-        iClass.getModifiers() & (Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE);
+    int accessModifiers = iClass.getModifiers() & Modifier.PUBLIC;
     visit(
         V1_5,
         accessModifiers | ACC_SUPER | ACC_FINAL,

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/MavenRoboSettings.java
Patch:
@@ -16,8 +16,7 @@ public class MavenRoboSettings {
   static {
     mavenRepositoryId = System.getProperty("robolectric.dependency.repo.id", "mavenCentral");
     mavenRepositoryUrl =
-        System.getProperty(
-            "robolectric.dependency.repo.url", "https://repo.maven.apache.org/maven2/");
+        System.getProperty("robolectric.dependency.repo.url", "https://repo1.maven.org/maven2");
     mavenRepositoryUserName = System.getProperty("robolectric.dependency.repo.username");
     mavenRepositoryPassword = System.getProperty("robolectric.dependency.repo.password");
   }

File: plugins/maven-dependency-resolver/src/test/java/org/robolectric/MavenRoboSettingsTest.java
Patch:
@@ -45,8 +45,7 @@ public void setMavenRepositoryId() {
 
   @Test
   public void getMavenRepositoryUrl_defaultSonatype() {
-    assertEquals(
-        "https://repo.maven.apache.org/maven2/", MavenRoboSettings.getMavenRepositoryUrl());
+    assertEquals("https://repo1.maven.org/maven2", MavenRoboSettings.getMavenRepositoryUrl());
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -69,8 +69,9 @@ public class RobolectricTestRunner extends SandboxTestRunner {
   private static final Map<ManifestIdentifier, AndroidManifest> appManifestsCache = new HashMap<>();
 
   static {
-    new SecureRandom(); // this starts up the Poller SunPKCS11-Darwin thread early, outside of any
-                        // Robolectric classloader
+    // This starts up the Poller SunPKCS11-Darwin thread early, outside of any Robolectric
+    // classloader.
+    new SecureRandom();
   }
 
   protected static Injector.Builder defaultInjector() {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -69,8 +69,9 @@ public class RobolectricTestRunner extends SandboxTestRunner {
   private static final Map<ManifestIdentifier, AndroidManifest> appManifestsCache = new HashMap<>();
 
   static {
-    new SecureRandom(); // this starts up the Poller SunPKCS11-Darwin thread early, outside of any
-                        // Robolectric classloader
+    // This starts up the Poller SunPKCS11-Darwin thread early, outside of any Robolectric
+    // classloader.
+    new SecureRandom();
   }
 
   protected static Injector.Builder defaultInjector() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -194,9 +194,7 @@ public void idleFor(Duration duration) {
     idleFor(duration.toMillis(), TimeUnit.MILLISECONDS);
   }
 
-  /**
-   * Returns true if there are no pending tasks scheduled to be executed before current time.
-   */
+  /** Returns true if there are no pending tasks scheduled to be executed before current time. */
   public abstract boolean isIdle();
 
   /** Not supported for the main Looper in {@link LooperMode.Mode.PAUSED}. */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -194,9 +194,7 @@ public void idleFor(Duration duration) {
     idleFor(duration.toMillis(), TimeUnit.MILLISECONDS);
   }
 
-  /**
-   * Returns true if there are no pending tasks scheduled to be executed before current time.
-   */
+  /** Returns true if there are no pending tasks scheduled to be executed before current time. */
   public abstract boolean isIdle();
 
   /** Not supported for the main Looper in {@link LooperMode.Mode.PAUSED}. */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -195,7 +195,7 @@ public void idleFor(Duration duration) {
   }
 
   /**
-   * Returns true if the looper has any pending tasks scheduled to be executed before current time.
+   * Returns true if there are no pending tasks scheduled to be executed before current time.
    */
   public abstract boolean isIdle();
 

File: plugins/maven-dependency-resolver/src/test/java/org/robolectric/MavenRoboSettingsTest.java
Patch:
@@ -34,7 +34,7 @@ public void tearDown() {
 
   @Test
   public void getMavenRepositoryId_defaultSonatype() {
-    assertEquals("sonatype", MavenRoboSettings.getMavenRepositoryId());
+    assertEquals("mavenCentral", MavenRoboSettings.getMavenRepositoryId());
   }
 
   @Test
@@ -45,7 +45,8 @@ public void setMavenRepositoryId() {
 
   @Test
   public void getMavenRepositoryUrl_defaultSonatype() {
-    assertEquals("https://oss.sonatype.org/content/groups/public/", MavenRoboSettings.getMavenRepositoryUrl());
+    assertEquals(
+        "https://repo.maven.apache.org/maven2/", MavenRoboSettings.getMavenRepositoryUrl());
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -195,7 +195,7 @@ public void idleFor(Duration duration) {
   }
 
   /**
-   * Returns true if the looper has any pending tasks scheduled to be executed before current time.
+   * Returns true if there are no pending tasks scheduled to be executed before current time.
    */
   public abstract boolean isIdle();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextToSpeechTest.java
Patch:
@@ -198,7 +198,7 @@ public void isLanguageAvailable_twoLanguageAvailabilities_returnsRequestedAvaila
     ShadowTextToSpeech.addLanguageAvailability(
         new Locale.Builder().setLanguage("pl").setRegion("pl").build());
     ShadowTextToSpeech.addLanguageAvailability(
-        new Locale.Builder().setLanguage("jp").setRegion("pl").build());
+        new Locale.Builder().setLanguage("ja").setRegion("jp").build());
 
     assertThat(
             textToSpeech.isLanguageAvailable(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextToSpeechTest.java
Patch:
@@ -198,7 +198,7 @@ public void isLanguageAvailable_twoLanguageAvailabilities_returnsRequestedAvaila
     ShadowTextToSpeech.addLanguageAvailability(
         new Locale.Builder().setLanguage("pl").setRegion("pl").build());
     ShadowTextToSpeech.addLanguageAvailability(
-        new Locale.Builder().setLanguage("jp").setRegion("pl").build());
+        new Locale.Builder().setLanguage("ja").setRegion("jp").build());
 
     assertThat(
             textToSpeech.isLanguageAvailable(

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -85,6 +85,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
         .doNotAcquirePackage(
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
+        .doNotAcquirePackage("io.mockk.")
         // Fix #958: SQLite native library must be loaded once.
         .doNotAcquirePackage("com.almworks.sqlite4java")
         .doNotAcquirePackage("org.jacoco.");

File: sandbox/src/main/java/org/robolectric/JarInstrumentor.java
Patch:
@@ -185,6 +185,7 @@ private static InstrumentationConfiguration createInstrumentationConfiguration()
         .doNotAcquirePackage(
             "scala.") //  run with Maven Surefire (see the RoboSpecs project on github)
         .doNotAcquirePackage("kotlin.")
+        .doNotAcquirePackage("io.mockk.")
         // Fix #958: SQLite native library must be loaded once.
         .doNotAcquirePackage("com.almworks.sqlite4java")
         .doNotAcquirePackage("org.jacoco.");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLauncherApps.java
Patch:
@@ -24,12 +24,10 @@
 import android.os.UserHandle;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Executor;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLauncherApps.java
Patch:
@@ -24,12 +24,10 @@
 import android.os.UserHandle;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Executor;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -47,6 +47,7 @@
 import android.os.Binder;
 import android.os.IBatteryPropertiesRegistrar;
 import android.os.IBinder;
+import android.os.IDumpstate;
 import android.os.IInterface;
 import android.os.IPowerManager;
 import android.os.IThermalService;
@@ -222,6 +223,7 @@ public class ShadowServiceManager {
       map.put(
           Context.THERMAL_SERVICE,
           createBinder(IThermalService.class, "android.os.IThermalService"));
+      map.put(Context.BUGREPORT_SERVICE, createBinder(IDumpstate.class, "android.os.IDumpstate"));
     }
 
     SERVICES = Collections.unmodifiableMap(map);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -47,6 +47,7 @@
 import android.os.Binder;
 import android.os.IBatteryPropertiesRegistrar;
 import android.os.IBinder;
+import android.os.IDumpstate;
 import android.os.IInterface;
 import android.os.IPowerManager;
 import android.os.IThermalService;
@@ -222,6 +223,7 @@ public class ShadowServiceManager {
       map.put(
           Context.THERMAL_SERVICE,
           createBinder(IThermalService.class, "android.os.IThermalService"));
+      map.put(Context.BUGREPORT_SERVICE, createBinder(IDumpstate.class, "android.os.IDumpstate"));
     }
 
     SERVICES = Collections.unmodifiableMap(map);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -121,7 +121,9 @@ public class ShadowServiceManager {
     map.put(
         Context.NETWORK_POLICY_SERVICE,
         createBinder(ISearchManager.class, "android.net.INetworkPolicyManager"));
-    map.put(Context.INPUT_SERVICE, createBinder(IInputManager.class, "android.net.IInputManager"));
+    map.put(
+        Context.INPUT_SERVICE,
+        createBinder(IInputManager.class, "android.hardware.input.IInputManager"));
     map.put(
         Context.COUNTRY_DETECTOR,
         createBinder(ICountryDetector.class, "android.location.ICountryDetector"));

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowServiceManager.java
Patch:
@@ -121,7 +121,9 @@ public class ShadowServiceManager {
     map.put(
         Context.NETWORK_POLICY_SERVICE,
         createBinder(ISearchManager.class, "android.net.INetworkPolicyManager"));
-    map.put(Context.INPUT_SERVICE, createBinder(IInputManager.class, "android.net.IInputManager"));
+    map.put(
+        Context.INPUT_SERVICE,
+        createBinder(IInputManager.class, "android.hardware.input.IInputManager"));
     map.put(
         Context.COUNTRY_DETECTOR,
         createBinder(ICountryDetector.class, "android.location.ICountryDetector"));

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSubscriptionManager.java
Patch:
@@ -255,6 +255,7 @@ public void setAvailableSubscriptionInfos(SubscriptionInfo... infos) {
   @Implementation(minSdk = LOLLIPOP_MR1)
   protected void addOnSubscriptionsChangedListener(OnSubscriptionsChangedListener listener) {
     listeners.add(listener);
+    listener.onSubscriptionsChanged();
   }
 
   /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSubscriptionManager.java
Patch:
@@ -255,6 +255,7 @@ public void setAvailableSubscriptionInfos(SubscriptionInfo... infos) {
   @Implementation(minSdk = LOLLIPOP_MR1)
   protected void addOnSubscriptionsChangedListener(OnSubscriptionsChangedListener listener) {
     listeners.add(listener);
+    listener.onSubscriptionsChanged();
   }
 
   /**

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -96,7 +96,7 @@ public void methodsShouldReturnThis() throws Exception {
     assertThat(item).isNotNull();
     item = item.setActionProvider(null);
     assertThat(item).isNotNull();
-    item = item.setActionView(0);
+    item = item.setActionView(R.layout.custom_layout);
     assertThat(item).isNotNull();
     item = item.setActionView(null);
     assertThat(item).isNotNull();

File: robolectric/src/test/java/org/robolectric/shadows/GnssStatusBuilderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.location.GnssStatus;
@@ -15,7 +16,7 @@
 
 /** Tests for {@link GnssStatusBuilder}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = N)
+@Config(minSdk = N, maxSdk = Q)
 public class GnssStatusBuilderTest {
 
   private static final int SVID = 42;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppOpsManagerTest.java
Patch:
@@ -101,20 +101,20 @@ public void setMode_checkOpNoThrow_atLeastP() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.O_MR1)
+  @Config(minSdk = VERSION_CODES.O_MR1, maxSdk = VERSION_CODES.Q)
   public void noModeSet_atLeastO_noteProxyOpNoThrow_shouldReturnModeAllowed() {
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_ALLOWED);
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.O_MR1)
+  @Config(minSdk = VERSION_CODES.O_MR1, maxSdk = VERSION_CODES.Q)
   public void setMode_withModeDefault_atLeastO_noteProxyOpNoThrow_shouldReturnModeDefault() {
     appOps.setMode(OP_GPS, Binder.getCallingUid(), PACKAGE_NAME1, MODE_DEFAULT);
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_DEFAULT);
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.P)
+  @Config(minSdk = VERSION_CODES.P, maxSdk = VERSION_CODES.Q)
   public void setMode_noteProxyOpNoThrow_atLeastO() {
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_ALLOWED);
     appOps.setMode(OP_GPS, Binder.getCallingUid(), PACKAGE_NAME1, MODE_ERRORED);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBiometricManagerTest.java
Patch:
@@ -6,6 +6,7 @@
 import android.hardware.biometrics.BiometricManager;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.util.Objects;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,7 +22,8 @@ public class ShadowBiometricManagerTest {
   @Before
   public void setUp() {
     biometricManager =
-        ApplicationProvider.getApplicationContext().getSystemService(BiometricManager.class);
+            ApplicationProvider.getApplicationContext().getSystemService(BiometricManager.class);
+    assertThat(biometricManager).isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -139,6 +140,7 @@ public void scanMode_getAndSet_invalid() throws Exception {
     assertThat(bluetoothAdapter.setScanMode(9999)).isFalse();
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void scanMode_withDiscoverableTimeout() {
     assertThat(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothDeviceTest.java
Patch:
@@ -7,6 +7,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -267,6 +268,7 @@ public void getSetAlias() {
     }
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void getAliasName() {
     String aliasName = "alias";
@@ -282,6 +284,7 @@ public void getAliasName() {
     }
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void getAliasName_aliasNull() {
     String deviceName = "device name";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.content.ContentProviderOperation;
@@ -9,9 +10,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 
 /** Tests for {@link ShadowContentProviderOperation}. */
 @RunWith(AndroidJUnit4.class)
+@Config(maxSdk = Q)
 public class ShadowContentProviderOperationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Looper.getMainLooper;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
@@ -28,6 +29,7 @@
 
 /** Tests for {@link ShadowMediaController}. */
 @RunWith(AndroidJUnit4.class)
+@Config(maxSdk = Q)
 public final class ShadowMediaControllerTest {
 
   private MediaController mediaController;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRenderNodeAnimatorTest.java
Patch:
@@ -96,6 +96,8 @@ public void neverStartedEnded() {
 
     animator.end();
 
+    shadowMainLooper().idle();
+
     // This behavior changed between L and L MR1. In older versions, onAnimationEnd would always be
     // called without any guarantee that onAnimationStart had been called first.
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeZoneFinderTest.java
Patch:
@@ -27,7 +27,7 @@ public void lookupTimeZonesByCountry_shouldReturnExpectedTimeZones() throws Exce
   }
 
   @Test
-  @Config(minSdk = Q)
+  @Config(minSdk = Q, maxSdk = Q)
   public void lookupTimeZonesByCountry_shouldReturnExpectedTimeZones_Q() throws Exception {
     Class<?> cls = Class.forName("libcore.timezone.TimeZoneFinder");
     lookupTimeZonesByCountryAndAssert(cls);

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboMenuItem.java
Patch:
@@ -5,6 +5,7 @@
 import android.graphics.drawable.Drawable;
 import android.view.ActionProvider;
 import android.view.ContextMenu;
+import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.SubMenu;
 import android.view.View;
@@ -243,6 +244,7 @@ public MenuItem setActionView(View view) {
 
   @Override
   public MenuItem setActionView(int resId) {
+    actionView = LayoutInflater.from(context).inflate(resId, null);
     return this;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioRecord.java
Patch:
@@ -7,6 +7,7 @@
 import android.media.AudioFormat;
 import android.media.AudioRecord;
 import android.media.AudioSystem;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicReference;
 import org.robolectric.annotation.Implementation;
@@ -147,7 +148,7 @@ default int readInFloatArray(
      */
     default int readInDirectBuffer(ByteBuffer buffer, int sizeInBytes, boolean isBlocking) {
       int maxBytes = Math.min(buffer.remaining(), sizeInBytes);
-      buffer.position(buffer.position() + maxBytes);
+      ((Buffer) buffer).position(buffer.position() + maxBytes);
       return maxBytes;
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -10,6 +10,7 @@
 import android.media.AudioTrack.WriteMode;
 import androidx.annotation.NonNull;
 import android.util.Log;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -70,7 +71,7 @@ protected int write(@NonNull ByteBuffer audioData, int sizeInBytes, @WriteMode i
       Log.e(TAG, "ShadowAudioTrack.write() called with invalid size (" + sizeInBytes + ") value");
       return ERROR_BAD_VALUE;
     }
-    audioData.position(audioData.position() + sizeInBytes);
+    ((Buffer) audioData).position(audioData.position() + sizeInBytes);
     return sizeInBytes;
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: shadows/supportv4/src/main/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompat.java
Patch:
@@ -16,9 +16,9 @@
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
 import android.support.v4.media.MediaBrowserCompat.SearchCallback;
 import android.support.v4.media.MediaBrowserCompat.SubscriptionCallback;
-import android.support.v4.media.MediaBrowserServiceCompat;
 import android.support.v4.media.MediaMetadataCompat;
 import android.support.v4.media.session.MediaSessionCompat;
+import android.support.v4.media.MediaBrowserServiceCompat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioRecord.java
Patch:
@@ -7,6 +7,7 @@
 import android.media.AudioFormat;
 import android.media.AudioRecord;
 import android.media.AudioSystem;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicReference;
 import org.robolectric.annotation.Implementation;
@@ -147,7 +148,7 @@ default int readInFloatArray(
      */
     default int readInDirectBuffer(ByteBuffer buffer, int sizeInBytes, boolean isBlocking) {
       int maxBytes = Math.min(buffer.remaining(), sizeInBytes);
-      buffer.position(buffer.position() + maxBytes);
+      ((Buffer) buffer).position(buffer.position() + maxBytes);
       return maxBytes;
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -10,6 +10,7 @@
 import android.media.AudioTrack.WriteMode;
 import androidx.annotation.NonNull;
 import android.util.Log;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -70,7 +71,7 @@ protected int write(@NonNull ByteBuffer audioData, int sizeInBytes, @WriteMode i
       Log.e(TAG, "ShadowAudioTrack.write() called with invalid size (" + sizeInBytes + ") value");
       return ERROR_BAD_VALUE;
     }
-    audioData.position(audioData.position() + sizeInBytes);
+    ((Buffer) audioData).position(audioData.position() + sizeInBytes);
     return sizeInBytes;
   }
 }

File: shadows/supportv4/src/main/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompat.java
Patch:
@@ -16,9 +16,9 @@
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
 import android.support.v4.media.MediaBrowserCompat.SearchCallback;
 import android.support.v4.media.MediaBrowserCompat.SubscriptionCallback;
-import android.support.v4.media.MediaBrowserServiceCompat;
 import android.support.v4.media.MediaMetadataCompat;
 import android.support.v4.media.session.MediaSessionCompat;
+import android.support.v4.media.MediaBrowserServiceCompat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioRecord.java
Patch:
@@ -7,6 +7,7 @@
 import android.media.AudioFormat;
 import android.media.AudioRecord;
 import android.media.AudioSystem;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicReference;
 import org.robolectric.annotation.Implementation;
@@ -147,7 +148,7 @@ default int readInFloatArray(
      */
     default int readInDirectBuffer(ByteBuffer buffer, int sizeInBytes, boolean isBlocking) {
       int maxBytes = Math.min(buffer.remaining(), sizeInBytes);
-      buffer.position(buffer.position() + maxBytes);
+      ((Buffer) buffer).position(buffer.position() + maxBytes);
       return maxBytes;
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -10,6 +10,7 @@
 import android.media.AudioTrack.WriteMode;
 import androidx.annotation.NonNull;
 import android.util.Log;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -70,7 +71,7 @@ protected int write(@NonNull ByteBuffer audioData, int sizeInBytes, @WriteMode i
       Log.e(TAG, "ShadowAudioTrack.write() called with invalid size (" + sizeInBytes + ") value");
       return ERROR_BAD_VALUE;
     }
-    audioData.position(audioData.position() + sizeInBytes);
+    ((Buffer) audioData).position(audioData.position() + sizeInBytes);
     return sizeInBytes;
   }
 }

File: shadows/supportv4/src/main/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompat.java
Patch:
@@ -16,9 +16,9 @@
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
 import android.support.v4.media.MediaBrowserCompat.SearchCallback;
 import android.support.v4.media.MediaBrowserCompat.SubscriptionCallback;
-import android.support.v4.media.MediaBrowserServiceCompat;
 import android.support.v4.media.MediaMetadataCompat;
 import android.support.v4.media.session.MediaSessionCompat;
+import android.support.v4.media.MediaBrowserServiceCompat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: robolectric/src/test/java/org/robolectric/shadows/GnssStatusBuilderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.location.GnssStatus;
@@ -15,7 +16,7 @@
 
 /** Tests for {@link GnssStatusBuilder}. */
 @RunWith(AndroidJUnit4.class)
-@Config(minSdk = N)
+@Config(minSdk = N, maxSdk = Q)
 public class GnssStatusBuilderTest {
 
   private static final int SVID = 42;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppOpsManagerTest.java
Patch:
@@ -101,20 +101,20 @@ public void setMode_checkOpNoThrow_atLeastP() {
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.O_MR1)
+  @Config(minSdk = VERSION_CODES.O_MR1, maxSdk = VERSION_CODES.Q)
   public void noModeSet_atLeastO_noteProxyOpNoThrow_shouldReturnModeAllowed() {
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_ALLOWED);
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.O_MR1)
+  @Config(minSdk = VERSION_CODES.O_MR1, maxSdk = VERSION_CODES.Q)
   public void setMode_withModeDefault_atLeastO_noteProxyOpNoThrow_shouldReturnModeDefault() {
     appOps.setMode(OP_GPS, Binder.getCallingUid(), PACKAGE_NAME1, MODE_DEFAULT);
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_DEFAULT);
   }
 
   @Test
-  @Config(minSdk = VERSION_CODES.P)
+  @Config(minSdk = VERSION_CODES.P, maxSdk = VERSION_CODES.Q)
   public void setMode_noteProxyOpNoThrow_atLeastO() {
     assertThat(appOps.noteProxyOpNoThrow(OP_GPS, PACKAGE_NAME1)).isEqualTo(MODE_ALLOWED);
     appOps.setMode(OP_GPS, Binder.getCallingUid(), PACKAGE_NAME1, MODE_ERRORED);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBiometricManagerTest.java
Patch:
@@ -6,6 +6,7 @@
 import android.hardware.biometrics.BiometricManager;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.util.Objects;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,7 +22,8 @@ public class ShadowBiometricManagerTest {
   @Before
   public void setUp() {
     biometricManager =
-        ApplicationProvider.getApplicationContext().getSystemService(BiometricManager.class);
+            ApplicationProvider.getApplicationContext().getSystemService(BiometricManager.class);
+    assertThat(biometricManager).isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -139,6 +140,7 @@ public void scanMode_getAndSet_invalid() throws Exception {
     assertThat(bluetoothAdapter.setScanMode(9999)).isFalse();
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void scanMode_withDiscoverableTimeout() {
     assertThat(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothDeviceTest.java
Patch:
@@ -7,6 +7,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -267,6 +268,7 @@ public void getSetAlias() {
     }
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void getAliasName() {
     String aliasName = "alias";
@@ -282,6 +284,7 @@ public void getAliasName() {
     }
   }
 
+  @Config(maxSdk = Q)
   @Test
   public void getAliasName_aliasNull() {
     String deviceName = "device name";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.Q;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.content.ContentProviderOperation;
@@ -9,9 +10,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 
 /** Tests for {@link ShadowContentProviderOperation}. */
 @RunWith(AndroidJUnit4.class)
+@Config(maxSdk = Q)
 public class ShadowContentProviderOperationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationManagerTest.java
Patch:
@@ -4,6 +4,7 @@
 import static android.location.LocationManager.NETWORK_PROVIDER;
 import static android.location.LocationManager.PASSIVE_PROVIDER;
 import static android.os.Build.VERSION_CODES.N;
+import static android.os.Build.VERSION_CODES.Q;
 import static android.provider.Settings.Secure.LOCATION_MODE;
 import static android.provider.Settings.Secure.LOCATION_MODE_BATTERY_SAVING;
 import static android.provider.Settings.Secure.LOCATION_MODE_HIGH_ACCURACY;
@@ -903,7 +904,7 @@ public void testAddGpsStatusListener() {
   }
 
   @Test
-  @Config(minSdk = N)
+  @Config(minSdk = N, maxSdk = Q)
   @LooperMode(Mode.PAUSED)
   public void testRegisterGnssStatusCallback_withMainHandler() {
     TestGnssCallback callback = new TestGnssCallback();
@@ -925,7 +926,7 @@ public void testRegisterGnssStatusCallback_withMainHandler() {
   }
 
   @Test
-  @Config(minSdk = N)
+  @Config(minSdk = N, maxSdk = Q)
   @LooperMode(Mode.PAUSED)
   public void testRegisterGnssStatusCallback_withNonMainHandler() throws Exception {
     HandlerThread ht = new HandlerThread("BackgroundThread");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static android.os.Build.VERSION_CODES.Q;
 import static android.os.Looper.getMainLooper;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
@@ -28,6 +29,7 @@
 
 /** Tests for {@link ShadowMediaController}. */
 @RunWith(AndroidJUnit4.class)
+@Config(maxSdk = Q)
 public final class ShadowMediaControllerTest {
 
   private MediaController mediaController;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRenderNodeAnimatorTest.java
Patch:
@@ -96,6 +96,8 @@ public void neverStartedEnded() {
 
     animator.end();
 
+    shadowMainLooper().idle();
+
     // This behavior changed between L and L MR1. In older versions, onAnimationEnd would always be
     // called without any guarantee that onAnimationStart had been called first.
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeZoneFinderTest.java
Patch:
@@ -27,7 +27,7 @@ public void lookupTimeZonesByCountry_shouldReturnExpectedTimeZones() throws Exce
   }
 
   @Test
-  @Config(minSdk = Q)
+  @Config(minSdk = Q, maxSdk = Q)
   public void lookupTimeZonesByCountry_shouldReturnExpectedTimeZones_Q() throws Exception {
     Class<?> cls = Class.forName("libcore.timezone.TimeZoneFinder");
     lookupTimeZonesByCountryAndAssert(cls);

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRenderNodeAnimator.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers;
 
-@Implements(value = RenderNodeAnimator.class, isInAndroidSdk = false, minSdk = LOLLIPOP)
+@Implements(value = RenderNodeAnimator.class, isInAndroidSdk = false, minSdk = LOLLIPOP, maxSdk = Q)
 public class ShadowRenderNodeAnimator {
   private static final int STATE_FINISHED = 3;
 

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.lang.reflect.Constructor;
+import java.util.UUID;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -92,7 +93,8 @@ private static String getFileMode(int mode) {
   protected static ParcelFileDescriptor[] createPipe() throws IOException {
     File file =
         new File(
-            RuntimeEnvironment.getTempDirectory().create(PIPE_TMP_DIR).toFile(), PIPE_FILE_NAME);
+            RuntimeEnvironment.getTempDirectory().createIfNotExists(PIPE_TMP_DIR).toFile(),
+            PIPE_FILE_NAME + "-" + UUID.randomUUID());
     if (!file.createNewFile()) {
       throw new IOException("Cannot create pipe file: " + file.getAbsolutePath());
     }

File: shadows/framework/src/main/java/org/robolectric/fakes/BaseCursor.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+ *
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class BaseCursor implements Cursor {
   @Override
   public int getCount() {

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -8,7 +8,10 @@
 
 /**
  * Robolectric implementation of {@link android.database.Cursor}.
+
+ * @deprecated Use {@link android.database.MatrixCursor} instead.
  */
+@Deprecated
 public class RoboCursor extends BaseCursor {
   public Uri uri;
   public String[] projection;

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -96,7 +96,7 @@ public void methodsShouldReturnThis() throws Exception {
     assertThat(item).isNotNull();
     item = item.setActionProvider(null);
     assertThat(item).isNotNull();
-    item = item.setActionView(0);
+    item = item.setActionView(R.layout.custom_layout);
     assertThat(item).isNotNull();
     item = item.setActionView(null);
     assertThat(item).isNotNull();

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboMenuItem.java
Patch:
@@ -5,6 +5,7 @@
 import android.graphics.drawable.Drawable;
 import android.view.ActionProvider;
 import android.view.ContextMenu;
+import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.SubMenu;
 import android.view.View;
@@ -243,6 +244,7 @@ public MenuItem setActionView(View view) {
 
   @Override
   public MenuItem setActionView(int resId) {
+    actionView = LayoutInflater.from(context).inflate(resId, null);
     return this;
   }
 

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -11,7 +11,6 @@
 import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
 import com.google.errorprone.BugPattern.LinkType;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -43,7 +42,6 @@
     severity = WARNING,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
     link = "http://robolectric.org/migrating/#deprecations",
     linkType = LinkType.CUSTOM)
 public class DeprecatedMethodsCheck extends BugChecker implements ClassTreeMatcher {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -4,7 +4,6 @@
 import static com.google.errorprone.matchers.Matchers.hasAnnotation;
 
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -49,8 +48,7 @@
     summary = "Robolectric @Implementation methods should be protected.",
     severity = SUGGESTION,
     documentSuppression = false,
-    tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION)
+    tags = StandardTags.REFACTORING)
 public final class RobolectricShadow extends BugChecker implements ClassTreeMatcher {
   private static final Matcher<ClassTree> implementsClassMatcher = hasAnnotation(Implements.class);
 

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheckTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.google.errorprone.BugCheckerRefactoringTestHelper;
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import java.io.IOException;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -212,7 +211,6 @@ public void useFrameworkMethodWhenAppropriateAfterApplicationSubstitution() thro
 
   @BugPattern(
       name = "DeprecatedMethods",
-      providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
       summary = "",
       severity = WARNING)
   private static class DeprecatedMethodsCheckForTest extends DeprecatedMethodsCheck {

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -167,7 +167,7 @@ private static FileSystem getJarFs(Path jarFile) throws IOException {
     synchronized (ZIP_FILESYSTEMS) {
       FsWrapper fs = ZIP_FILESYSTEMS.get(key);
       if (fs == null) {
-        fs = new FsWrapper(FileSystems.newFileSystem(key, null), key);
+        fs = new FsWrapper(FileSystems.newFileSystem(key, (ClassLoader) null), key);
         fs.incrRefCount();
 
         ZIP_FILESYSTEMS.put(key, fs);

File: shadowapi/src/main/java/org/robolectric/shadow/api/Shadow.java
Patch:
@@ -5,7 +5,7 @@
 
 public class Shadow {
   @SuppressWarnings("unused")
-  private final static IShadow SHADOW_IMPL;
+  private static IShadow SHADOW_IMPL;
 
   static {
     try {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager10.java
Patch:
@@ -14,6 +14,8 @@
 import static org.robolectric.res.android.AttributeResolution10.ResolveAttrs;
 import static org.robolectric.res.android.AttributeResolution10.RetrieveAttributes;
 import static org.robolectric.res.android.Errors.NO_ERROR;
+import static org.robolectric.res.android.Registries.NATIVE_RES_XML_PARSERS;
+import static org.robolectric.res.android.Registries.NATIVE_RES_XML_TREES;
 import static org.robolectric.res.android.Util.ATRACE_NAME;
 import static org.robolectric.res.android.Util.CHECK;
 import static org.robolectric.res.android.Util.JNI_FALSE;
@@ -22,8 +24,6 @@
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 import static org.robolectric.shadow.api.Shadow.invokeConstructor;
 import static org.robolectric.util.reflector.Reflector.reflector;
-import static org.robolectric.res.android.Registries.NATIVE_RES_XML_PARSERS;
-import static org.robolectric.res.android.Registries.NATIVE_RES_XML_TREES;
 
 import android.annotation.AnyRes;
 import android.annotation.ArrayRes;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioRecord.java
Patch:
@@ -45,6 +45,9 @@ protected static int native_get_min_buff_size(
       case AudioFormat.ENCODING_PCM_16BIT:
         frameSize = 2;
         break;
+      case AudioFormat.ENCODING_PCM_FLOAT:
+        frameSize = 2 * channelCount;
+        break;
       default:
         return ERROR_BAD_VALUE;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -126,7 +126,8 @@ protected static Bitmap decodeStream(
         : null;
     Point imageSize = (is instanceof NamedStream) ? null : getImageSizeFromStream(is);
     Bitmap bitmap = create(name, opts, imageSize);
-    bitmap.setNinePatchChunk(ninePatchChunk);
+    ReflectionHelpers.callInstanceMethod(bitmap, "setNinePatchChunk",
+            ClassParameter.from(byte[].class, ninePatchChunk));
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);
     shadowBitmap.createdFromStream = is;
 

File: utils/src/main/java/org/robolectric/util/inject/Injector.java
Patch:
@@ -237,7 +237,9 @@ public Injector.Builder newScopeBuilder(ClassLoader classLoader) {
     Object[] params = resolveDependencies(ctor);
     try {
       return ctor.newInstance(params);
-    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+    } catch (IllegalAccessException e) {
+      throw Util.sneakyThrow(e);
+    } catch (InstantiationException | InvocationTargetException e) {
       throw Util.sneakyThrow(e.getCause());
     }
   }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -11,7 +11,6 @@
 import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
 import com.google.errorprone.BugPattern.LinkType;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -43,7 +42,6 @@
     severity = WARNING,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
     link = "http://robolectric.org/migrating/#deprecations",
     linkType = LinkType.CUSTOM)
 public class DeprecatedMethodsCheck extends BugChecker implements ClassTreeMatcher {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -4,7 +4,6 @@
 import static com.google.errorprone.matchers.Matchers.hasAnnotation;
 
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -49,8 +48,7 @@
     summary = "Robolectric @Implementation methods should be protected.",
     severity = SUGGESTION,
     documentSuppression = false,
-    tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION)
+    tags = StandardTags.REFACTORING)
 public final class RobolectricShadow extends BugChecker implements ClassTreeMatcher {
   private static final Matcher<ClassTree> implementsClassMatcher = hasAnnotation(Implements.class);
 

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheckTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.google.errorprone.BugCheckerRefactoringTestHelper;
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import java.io.IOException;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -212,7 +211,6 @@ public void useFrameworkMethodWhenAppropriateAfterApplicationSubstitution() thro
 
   @BugPattern(
       name = "DeprecatedMethods",
-      providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
       summary = "",
       severity = WARNING)
   private static class DeprecatedMethodsCheckForTest extends DeprecatedMethodsCheck {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -11,7 +11,6 @@
 import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
 import com.google.errorprone.BugPattern.LinkType;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -43,7 +42,6 @@
     severity = WARNING,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
     link = "http://robolectric.org/migrating/#deprecations",
     linkType = LinkType.CUSTOM)
 public class DeprecatedMethodsCheck extends BugChecker implements ClassTreeMatcher {

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -4,7 +4,6 @@
 import static com.google.errorprone.matchers.Matchers.hasAnnotation;
 
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.StandardTags;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -49,8 +48,7 @@
     summary = "Robolectric @Implementation methods should be protected.",
     severity = SUGGESTION,
     documentSuppression = false,
-    tags = StandardTags.REFACTORING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION)
+    tags = StandardTags.REFACTORING)
 public final class RobolectricShadow extends BugChecker implements ClassTreeMatcher {
   private static final Matcher<ClassTree> implementsClassMatcher = hasAnnotation(Implements.class);
 

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheckTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.google.errorprone.BugCheckerRefactoringTestHelper;
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import java.io.IOException;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -212,7 +211,6 @@ public void useFrameworkMethodWhenAppropriateAfterApplicationSubstitution() thro
 
   @BugPattern(
       name = "DeprecatedMethods",
-      providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
       summary = "",
       severity = WARNING)
   private static class DeprecatedMethodsCheckForTest extends DeprecatedMethodsCheck {

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -167,7 +167,7 @@ private static FileSystem getJarFs(Path jarFile) throws IOException {
     synchronized (ZIP_FILESYSTEMS) {
       FsWrapper fs = ZIP_FILESYSTEMS.get(key);
       if (fs == null) {
-        fs = new FsWrapper(FileSystems.newFileSystem(key, null), key);
+        fs = new FsWrapper(FileSystems.newFileSystem(key, (ClassLoader) null), key);
         fs.incrRefCount();
 
         ZIP_FILESYSTEMS.put(key, fs);

File: shadowapi/src/main/java/org/robolectric/shadow/api/Shadow.java
Patch:
@@ -5,7 +5,7 @@
 
 public class Shadow {
   @SuppressWarnings("unused")
-  private final static IShadow SHADOW_IMPL;
+  private static IShadow SHADOW_IMPL;
 
   static {
     try {

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -167,7 +167,7 @@ private static FileSystem getJarFs(Path jarFile) throws IOException {
     synchronized (ZIP_FILESYSTEMS) {
       FsWrapper fs = ZIP_FILESYSTEMS.get(key);
       if (fs == null) {
-        fs = new FsWrapper(FileSystems.newFileSystem(key, null), key);
+        fs = new FsWrapper(FileSystems.newFileSystem(key, (ClassLoader) null), key);
         fs.incrRefCount();
 
         ZIP_FILESYSTEMS.put(key, fs);

File: shadowapi/src/main/java/org/robolectric/shadow/api/Shadow.java
Patch:
@@ -5,7 +5,7 @@
 
 public class Shadow {
   @SuppressWarnings("unused")
-  private final static IShadow SHADOW_IMPL;
+  private static IShadow SHADOW_IMPL;
 
   static {
     try {

File: robolectric/src/main/java/org/robolectric/plugins/NoOpAccessibilityChecker.java
Patch:
@@ -14,7 +14,7 @@
 @Deprecated
 @AutoService(AccessibilityChecker.class)
 @Priority(Integer.MIN_VALUE)
-class NoOpAccessibilityChecker implements AccessibilityChecker {
+public class NoOpAccessibilityChecker implements AccessibilityChecker {
   public NoOpAccessibilityChecker() {
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -51,14 +51,12 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.android.DeviceConfig;
 import org.robolectric.android.controller.ActivityController;
-import org.robolectric.annotation.AccessibilityChecks;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.TestRunnable;
 

File: utils/src/main/java/org/robolectric/util/inject/Injector.java
Patch:
@@ -237,7 +237,9 @@ public Injector.Builder newScopeBuilder(ClassLoader classLoader) {
     Object[] params = resolveDependencies(ctor);
     try {
       return ctor.newInstance(params);
-    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+    } catch (IllegalAccessException e) {
+      throw Util.sneakyThrow(e);
+    } catch (InstantiationException | InvocationTargetException e) {
       throw Util.sneakyThrow(e.getCause());
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -126,7 +126,8 @@ protected static Bitmap decodeStream(
         : null;
     Point imageSize = (is instanceof NamedStream) ? null : getImageSizeFromStream(is);
     Bitmap bitmap = create(name, opts, imageSize);
-    bitmap.setNinePatchChunk(ninePatchChunk);
+    ReflectionHelpers.callInstanceMethod(bitmap, "setNinePatchChunk",
+            ClassParameter.from(byte[].class, ninePatchChunk));
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);
     shadowBitmap.createdFromStream = is;
 

File: shadows/framework/src/main/java/org/robolectric/android/util/concurrent/InlineExecutorService.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.android.util.concurrent;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import com.google.common.annotations.Beta;
 import com.google.common.util.concurrent.MoreExecutors;
 import java.util.Collection;

File: shadows/framework/src/main/java/org/robolectric/android/util/concurrent/PausedExecutorService.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.android.util.concurrent;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import com.google.common.annotations.Beta;
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.AbstractFuture;

File: shadows/framework/src/main/java/org/robolectric/shadows/GnssStatusBuilder.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.location.GnssStatus;
 import android.os.Build;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.google.auto.value.AutoValue;
 import java.util.ArrayList;
 import java.util.Arrays;

File: shadows/framework/src/main/java/org/robolectric/shadows/ModuleInfoBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import static androidx.test.internal.util.Checks.checkNotNull;
 
 import android.content.pm.ModuleInfo;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 /**
  * Builder for {@link ModuleInfo} as ModuleInfo has hidden constructors, this builder class has been

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -19,7 +19,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.os.Handler;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioTrack.java
Patch:
@@ -8,7 +8,7 @@
 
 import android.media.AudioTrack;
 import android.media.AudioTrack.WriteMode;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.util.Log;
 import java.nio.ByteBuffer;
 import org.robolectric.annotation.Implementation;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAutofillManager.java
Patch:
@@ -5,7 +5,7 @@
 
 import android.content.ComponentName;
 import android.service.autofill.FillEventHistory;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.autofill.AutofillManager;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowImsMmTelManager.java
Patch:
@@ -5,8 +5,8 @@
 import android.annotation.RequiresPermission;
 import android.annotation.SystemApi;
 import android.os.Build.VERSION_CODES;
-import android.support.annotation.NonNull;
-import android.support.annotation.RequiresApi;
+import androidx.annotation.NonNull;
+import androidx.annotation.RequiresApi;
 import android.telephony.SubscriptionManager;
 import android.telephony.ims.ImsException;
 import android.telephony.ims.ImsMmTelManager;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLauncherApps.java
Patch:
@@ -22,8 +22,8 @@
 import android.os.Looper;
 import android.os.Process;
 import android.os.UserHandle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import java.util.ArrayList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -28,8 +28,8 @@
 import android.os.Process;
 import android.os.UserHandle;
 import android.provider.Settings.Secure;
-import android.support.annotation.GuardedBy;
-import android.support.annotation.Nullable;
+import androidx.annotation.GuardedBy;
+import androidx.annotation.Nullable;
 import android.text.TextUtils;
 import java.lang.reflect.Constructor;
 import java.util.ArrayList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRoleManager.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.role.RoleManager;
 import android.os.Build;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.util.ArraySet;
 import com.android.internal.util.Preconditions;
 import java.util.Set;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSliceManager.java
Patch:
@@ -9,7 +9,7 @@
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.net.Uri;
 import android.os.Handler;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import com.google.common.collect.ImmutableSet;
 import java.util.ArrayList;
 import java.util.Collection;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSmsManager.java
Patch:
@@ -8,7 +8,7 @@
 import android.content.Context;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.telephony.SmsManager;
 import android.text.TextUtils;
 import java.util.ArrayList;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -11,7 +11,7 @@
 import android.content.Context;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.telecom.Connection;
 import android.telecom.ConnectionRequest;
 import android.telecom.ConnectionService;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSoundPool.java
Patch:
@@ -27,7 +27,7 @@ public class ShadowSoundPool {
   @RealObject SoundPool realObject;
 
   /** Generates sound ids when they are loaded. */
-  private final AtomicInteger soundIds = new AtomicInteger();
+  private final AtomicInteger soundIds = new AtomicInteger(1);
 
   /** Tracks mapping between sound id and the paths they refer too. */
   private final SparseArray<String> idToPaths = new SparseArray<>();

File: robolectric/src/main/java/org/robolectric/plugins/LooperModeConfigurer.java
Patch:
@@ -26,8 +26,8 @@ public Class<LooperMode.Mode> getConfigClass() {
   @Nonnull
   @Override
   public LooperMode.Mode defaultConfig() {
-    return LooperMode.Mode.valueOf(systemProperties.getProperty("robolectric.looperMode",
-        "LEGACY"));
+    return LooperMode.Mode.valueOf(
+        systemProperties.getProperty("robolectric.looperMode", "PAUSED"));
   }
 
   @Override

File: robolectric/src/test/java/org/robolectric/plugins/LooperModeConfigurerTest.java
Patch:
@@ -18,7 +18,7 @@ public class LooperModeConfigurerTest {
   public void defaultConfig() {
     Properties systemProperties = new Properties();
     LooperModeConfigurer configurer = new LooperModeConfigurer(systemProperties);
-    assertThat(configurer.defaultConfig()).isSameInstanceAs(LooperMode.Mode.LEGACY);
+    assertThat(configurer.defaultConfig()).isSameInstanceAs(LooperMode.Mode.PAUSED);
 
     systemProperties.setProperty("robolectric.looperMode", "LEGACY");
     assertThat(configurer.defaultConfig()).isSameInstanceAs(LooperMode.Mode.LEGACY);

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integration_tests/mockito_experimental/MockitoMockFinalsTest.java
Patch:
@@ -26,7 +26,7 @@ public class MockitoMockFinalsTest {
   public void testInjection() {
     Layout layout = mock(Layout.class);
     when(textView.getLayout()).thenReturn(layout);
-    assertThat(textView.getLayout()).isSameAs(layout);
+    assertThat(textView.getLayout()).isSameInstanceAs(layout);
   }
 
   @Test

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ServiceLoaderGenerator.java
Patch:
@@ -31,7 +31,7 @@ public void generate() {
     try {
       FileObject file = filer.createResource(StandardLocation.CLASS_OUTPUT, "", "META-INF/services/" + fileName);
       PrintWriter pw = new PrintWriter(new OutputStreamWriter(file.openOutputStream(), "UTF-8"));
-      pw.println(shadowPackage + '.' + GEN_CLASS);
+      pw.print(shadowPackage + '.' + GEN_CLASS + '\n');
       pw.close();
     } catch (IOException e) {
       messager.printMessage(Diagnostic.Kind.ERROR, "Failed to write service loader metadata file: " + e);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaCodecTest.java
Patch:
@@ -163,7 +163,7 @@ public void doesNotPresentInputBufferAfterReleasingOutputBufferFinished() throws
 
     codec.releaseOutputBuffer(indexCaptor.getValue(), /* render= */ false);
 
-    asyncVerify(callback, times(1)).onInputBufferAvailable(same(codec), anyInt());
+    asyncVerify(callback, times(2)).onInputBufferAvailable(same(codec), anyInt());
   }
 
   @Test

File: integration_tests/mockito-experimental/src/test/java/org/robolectric/integration_tests/mockito_experimental/MockitoMockFinalsTest.java
Patch:
@@ -26,7 +26,7 @@ public class MockitoMockFinalsTest {
   public void testInjection() {
     Layout layout = mock(Layout.class);
     when(textView.getLayout()).thenReturn(layout);
-    assertThat(textView.getLayout()).isSameAs(layout);
+    assertThat(textView.getLayout()).isSameInstanceAs(layout);
   }
 
   @Test

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ServiceLoaderGenerator.java
Patch:
@@ -31,7 +31,7 @@ public void generate() {
     try {
       FileObject file = filer.createResource(StandardLocation.CLASS_OUTPUT, "", "META-INF/services/" + fileName);
       PrintWriter pw = new PrintWriter(new OutputStreamWriter(file.openOutputStream(), "UTF-8"));
-      pw.println(shadowPackage + '.' + GEN_CLASS);
+      pw.print(shadowPackage + '.' + GEN_CLASS + '\n');
       pw.close();
     } catch (IOException e) {
       messager.printMessage(Diagnostic.Kind.ERROR, "Failed to write service loader metadata file: " + e);

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -33,7 +33,7 @@
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowProviders;
-import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.internal.bytecode.UrlResourceProvider;
 import org.robolectric.pluginapi.perf.Metadata;
 import org.robolectric.pluginapi.perf.Metric;
@@ -381,7 +381,7 @@ private void addShadows(List<Class<?>> shadowClasses, SandboxConfig annotation)
 
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, 0, interceptors);
+    return ShadowWranglerBuilder.build(shadowMap, 0, interceptors);
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -50,8 +50,9 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
     }
 
     Class<? extends Activity> activityClass;
+    String activityClassName = ai.targetActivity != null ? ai.targetActivity : ai.name;
     try {
-      activityClass = Class.forName(ai.name).asSubclass(Activity.class);
+      activityClass = Class.forName(activityClassName).asSubclass(Activity.class);
     } catch (ClassNotFoundException e) {
       throw new RuntimeException("Could not load activity " + ai.name, e);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -442,7 +442,7 @@ protected Bitmap copy(Bitmap.Config config, boolean isMutable) {
     shadowBitmap.width = getWidth();
     if (colors != null) {
       shadowBitmap.colors = new int[colors.length];
-      System.arraycopy(shadowBitmap.colors, 0, colors, 0, colors.length);
+      System.arraycopy(colors, 0, shadowBitmap.colors, 0, colors.length);
     }
     return newBitmap;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBroadcastReceiver.java
Patch:
@@ -14,7 +14,8 @@
 public class ShadowBroadcastReceiver {
   @RealObject BroadcastReceiver receiver;
 
-  private AtomicBoolean abort; // The abort state of the currently processed broadcast
+  // The abort state of the currently processed broadcast
+  private AtomicBoolean abort = new AtomicBoolean(false);
   private boolean wentAsync = false;
   private PendingResult originalPendingResult;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -40,7 +40,6 @@ public class ShadowPath {
   @RealObject private Path realObject;
 
   private List<Point> points = new ArrayList<>();
-  private Point wasMovedTo;
 
   private float mLastX = 0;
   private float mLastY = 0;
@@ -53,6 +52,8 @@ public class ShadowPath {
   protected void __constructor__(Path path) {
     ShadowPath shadowPath = extract(path);
     points = new ArrayList<>(shadowPath.getPoints());
+    mPath.append(shadowPath.mPath, /*connect=*/ false);
+    mFillType = shadowPath.getFillType();
   }
 
   Path2D getJavaShape() {
@@ -293,7 +294,7 @@ protected boolean isEmpty() {
     float[] coords = new float[6];
     mCachedIsEmpty = Boolean.TRUE;
     for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
-      int type = it.currentSegment(coords);
+      // int type = it.currentSegment(coords);
       // if (type != PathIterator.SEG_MOVETO) {
       // Once we know that the path is not empty, we do not need to check again unless
       // Path#reset is called.

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class CursorLoaderTest {
   @Test
   public void testGetters() {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowDrawerLayoutTest.java
Patch:
@@ -5,21 +5,21 @@
 
 import android.app.Activity;
 import android.support.v4.widget.DrawerLayout;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowDrawerLayoutTest {
 
   @Test
   public void canGetAndSetDrawerListener() throws Exception {
     DrawerLayout drawerLayout = new DrawerLayout(Robolectric.buildActivity(Activity.class).create().get());
     DrawerLayout.DrawerListener mockDrawerListener = mock(DrawerLayout.DrawerListener.class);
     drawerLayout.setDrawerListener(mockDrawerListener);
-    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameAs(mockDrawerListener);
+    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameInstanceAs(mockDrawerListener);
   }
 
   private ShadowDrawerLayout shadowOf(DrawerLayout drawerLayout) {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowLocalBroadcastManagerTest.java
Patch:
@@ -14,15 +14,15 @@
 import android.content.IntentFilter;
 import android.net.Uri;
 import android.support.v4.content.LocalBroadcastManager;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowLocalBroadcastManagerTest {
   private List<String> transcript = new ArrayList<>();
 

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -12,17 +12,17 @@
 import android.support.annotation.NonNull;
 import android.support.v4.media.MediaBrowserCompat;
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 /** Tests for {@link org.robolectric.shadows.support.v4.ShadowMediaBrowserCompat}. */
-@RunWith(RobolectricTestRunner.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowMediaBrowserCompatTest {
 
   private Context context = RuntimeEnvironment.application;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowSwipeRefreshLayoutTest.java
Patch:
@@ -6,12 +6,12 @@
 
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowSwipeRefreshLayoutTest {
 
   @Test
@@ -21,6 +21,6 @@ public void getOnRefreshListener_shouldReturnTheListener() {
     final SwipeRefreshLayout layout = new SwipeRefreshLayout(RuntimeEnvironment.application);
     layout.setOnRefreshListener(listener);
 
-    assertThat(shadowOf(layout).getOnRefreshListener()).isSameAs(listener);
+    assertThat(shadowOf(layout).getOnRefreshListener()).isSameInstanceAs(listener);
   }
 }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -7,15 +7,15 @@
 import static org.junit.Assert.assertTrue;
 
 import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowViewPagerTest {
 
   private ViewPager pager;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentTestUtilTest.java
Patch:
@@ -12,12 +12,12 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class SupportFragmentTestUtilTest {
 
   @Test

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -36,7 +36,7 @@ public static int getJavaVersion() {
     int dotPos = version.indexOf('.');
     int dashPos = version.indexOf('-');
     return Integer.parseInt(
-        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : 1));
+        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : version.length()));
   }
 
   public static void copy(InputStream in, OutputStream out) throws IOException {

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -57,7 +57,7 @@ public void resumeActivity(Activity activity) {
       case RESUMED:
         return;
       case PAUSED:
-        controller.stop().restart().start().resume();
+        controller.resume();
         return;
       case STOPPED:
         controller.restart().resume();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -442,7 +442,7 @@ protected Bitmap copy(Bitmap.Config config, boolean isMutable) {
     shadowBitmap.width = getWidth();
     if (colors != null) {
       shadowBitmap.colors = new int[colors.length];
-      System.arraycopy(shadowBitmap.colors, 0, colors, 0, colors.length);
+      System.arraycopy(colors, 0, shadowBitmap.colors, 0, colors.length);
     }
     return newBitmap;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaCodec.java
Patch:
@@ -248,15 +248,15 @@ protected int native_dequeueOutputBuffer(BufferInfo info, long timeoutUs) {
       }
 
       if (index == null) {
-        return -1;
+        return MediaCodec.INFO_TRY_AGAIN_LATER;
       }
 
       copyBufferInfo(outputBufferInfos[index], info);
 
       return index;
     } catch (InterruptedException e) {
       Thread.currentThread().interrupt();
-      return -1;
+      return MediaCodec.INFO_TRY_AGAIN_LATER;
     }
   }
 

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -57,7 +57,7 @@ public void resumeActivity(Activity activity) {
       case RESUMED:
         return;
       case PAUSED:
-        controller.stop().restart().start().resume();
+        controller.resume();
         return;
       case STOPPED:
         controller.restart().resume();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -442,7 +442,7 @@ protected Bitmap copy(Bitmap.Config config, boolean isMutable) {
     shadowBitmap.width = getWidth();
     if (colors != null) {
       shadowBitmap.colors = new int[colors.length];
-      System.arraycopy(shadowBitmap.colors, 0, colors, 0, colors.length);
+      System.arraycopy(colors, 0, shadowBitmap.colors, 0, colors.length);
     }
     return newBitmap;
   }

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -33,7 +33,7 @@
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowProviders;
-import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.internal.bytecode.UrlResourceProvider;
 import org.robolectric.pluginapi.perf.Metadata;
 import org.robolectric.pluginapi.perf.Metric;
@@ -381,7 +381,7 @@ private void addShadows(List<Class<?>> shadowClasses, SandboxConfig annotation)
 
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, 0, interceptors);
+    return ShadowWranglerBuilder.build(shadowMap, 0, interceptors);
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -50,8 +50,9 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
     }
 
     Class<? extends Activity> activityClass;
+    String activityClassName = ai.targetActivity != null ? ai.targetActivity : ai.name;
     try {
-      activityClass = Class.forName(ai.name).asSubclass(Activity.class);
+      activityClass = Class.forName(activityClassName).asSubclass(Activity.class);
     } catch (ClassNotFoundException e) {
       throw new RuntimeException("Could not load activity " + ai.name, e);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBroadcastReceiver.java
Patch:
@@ -14,7 +14,8 @@
 public class ShadowBroadcastReceiver {
   @RealObject BroadcastReceiver receiver;
 
-  private AtomicBoolean abort; // The abort state of the currently processed broadcast
+  // The abort state of the currently processed broadcast
+  private AtomicBoolean abort = new AtomicBoolean(false);
   private boolean wentAsync = false;
   private PendingResult originalPendingResult;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -40,7 +40,6 @@ public class ShadowPath {
   @RealObject private Path realObject;
 
   private List<Point> points = new ArrayList<>();
-  private Point wasMovedTo;
 
   private float mLastX = 0;
   private float mLastY = 0;
@@ -53,6 +52,8 @@ public class ShadowPath {
   protected void __constructor__(Path path) {
     ShadowPath shadowPath = extract(path);
     points = new ArrayList<>(shadowPath.getPoints());
+    mPath.append(shadowPath.mPath, /*connect=*/ false);
+    mFillType = shadowPath.getFillType();
   }
 
   Path2D getJavaShape() {
@@ -293,7 +294,7 @@ protected boolean isEmpty() {
     float[] coords = new float[6];
     mCachedIsEmpty = Boolean.TRUE;
     for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
-      int type = it.currentSegment(coords);
+      // int type = it.currentSegment(coords);
       // if (type != PathIterator.SEG_MOVETO) {
       // Once we know that the path is not empty, we do not need to check again unless
       // Path#reset is called.

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class CursorLoaderTest {
   @Test
   public void testGetters() {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowDrawerLayoutTest.java
Patch:
@@ -5,21 +5,21 @@
 
 import android.app.Activity;
 import android.support.v4.widget.DrawerLayout;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowDrawerLayoutTest {
 
   @Test
   public void canGetAndSetDrawerListener() throws Exception {
     DrawerLayout drawerLayout = new DrawerLayout(Robolectric.buildActivity(Activity.class).create().get());
     DrawerLayout.DrawerListener mockDrawerListener = mock(DrawerLayout.DrawerListener.class);
     drawerLayout.setDrawerListener(mockDrawerListener);
-    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameAs(mockDrawerListener);
+    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameInstanceAs(mockDrawerListener);
   }
 
   private ShadowDrawerLayout shadowOf(DrawerLayout drawerLayout) {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowLocalBroadcastManagerTest.java
Patch:
@@ -14,15 +14,15 @@
 import android.content.IntentFilter;
 import android.net.Uri;
 import android.support.v4.content.LocalBroadcastManager;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowLocalBroadcastManagerTest {
   private List<String> transcript = new ArrayList<>();
 

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -12,17 +12,17 @@
 import android.support.annotation.NonNull;
 import android.support.v4.media.MediaBrowserCompat;
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 /** Tests for {@link org.robolectric.shadows.support.v4.ShadowMediaBrowserCompat}. */
-@RunWith(RobolectricTestRunner.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowMediaBrowserCompatTest {
 
   private Context context = RuntimeEnvironment.application;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowSwipeRefreshLayoutTest.java
Patch:
@@ -6,12 +6,12 @@
 
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowSwipeRefreshLayoutTest {
 
   @Test
@@ -21,6 +21,6 @@ public void getOnRefreshListener_shouldReturnTheListener() {
     final SwipeRefreshLayout layout = new SwipeRefreshLayout(RuntimeEnvironment.application);
     layout.setOnRefreshListener(listener);
 
-    assertThat(shadowOf(layout).getOnRefreshListener()).isSameAs(listener);
+    assertThat(shadowOf(layout).getOnRefreshListener()).isSameInstanceAs(listener);
   }
 }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -7,15 +7,15 @@
 import static org.junit.Assert.assertTrue;
 
 import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowViewPagerTest {
 
   private ViewPager pager;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentTestUtilTest.java
Patch:
@@ -12,12 +12,12 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class SupportFragmentTestUtilTest {
 
   @Test

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -36,7 +36,7 @@ public static int getJavaVersion() {
     int dotPos = version.indexOf('.');
     int dashPos = version.indexOf('-');
     return Integer.parseInt(
-        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : 1));
+        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : version.length()));
   }
 
   public static void copy(InputStream in, OutputStream out) throws IOException {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBroadcastReceiver.java
Patch:
@@ -14,7 +14,8 @@
 public class ShadowBroadcastReceiver {
   @RealObject BroadcastReceiver receiver;
 
-  private AtomicBoolean abort; // The abort state of the currently processed broadcast
+  // The abort state of the currently processed broadcast
+  private AtomicBoolean abort = new AtomicBoolean(false);
   private boolean wentAsync = false;
   private PendingResult originalPendingResult;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -40,7 +40,6 @@ public class ShadowPath {
   @RealObject private Path realObject;
 
   private List<Point> points = new ArrayList<>();
-  private Point wasMovedTo;
 
   private float mLastX = 0;
   private float mLastY = 0;
@@ -53,6 +52,8 @@ public class ShadowPath {
   protected void __constructor__(Path path) {
     ShadowPath shadowPath = extract(path);
     points = new ArrayList<>(shadowPath.getPoints());
+    mPath.append(shadowPath.mPath, /*connect=*/ false);
+    mFillType = shadowPath.getFillType();
   }
 
   Path2D getJavaShape() {
@@ -293,7 +294,7 @@ protected boolean isEmpty() {
     float[] coords = new float[6];
     mCachedIsEmpty = Boolean.TRUE;
     for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
-      int type = it.currentSegment(coords);
+      // int type = it.currentSegment(coords);
       // if (type != PathIterator.SEG_MOVETO) {
       // Once we know that the path is not empty, we do not need to check again unless
       // Path#reset is called.

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class CursorLoaderTest {
   @Test
   public void testGetters() {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowDrawerLayoutTest.java
Patch:
@@ -5,21 +5,21 @@
 
 import android.app.Activity;
 import android.support.v4.widget.DrawerLayout;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowDrawerLayoutTest {
 
   @Test
   public void canGetAndSetDrawerListener() throws Exception {
     DrawerLayout drawerLayout = new DrawerLayout(Robolectric.buildActivity(Activity.class).create().get());
     DrawerLayout.DrawerListener mockDrawerListener = mock(DrawerLayout.DrawerListener.class);
     drawerLayout.setDrawerListener(mockDrawerListener);
-    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameAs(mockDrawerListener);
+    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameInstanceAs(mockDrawerListener);
   }
 
   private ShadowDrawerLayout shadowOf(DrawerLayout drawerLayout) {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowLocalBroadcastManagerTest.java
Patch:
@@ -14,15 +14,15 @@
 import android.content.IntentFilter;
 import android.net.Uri;
 import android.support.v4.content.LocalBroadcastManager;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowLocalBroadcastManagerTest {
   private List<String> transcript = new ArrayList<>();
 

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -12,17 +12,17 @@
 import android.support.annotation.NonNull;
 import android.support.v4.media.MediaBrowserCompat;
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 /** Tests for {@link org.robolectric.shadows.support.v4.ShadowMediaBrowserCompat}. */
-@RunWith(RobolectricTestRunner.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowMediaBrowserCompatTest {
 
   private Context context = RuntimeEnvironment.application;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowSwipeRefreshLayoutTest.java
Patch:
@@ -6,12 +6,12 @@
 
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowSwipeRefreshLayoutTest {
 
   @Test
@@ -21,6 +21,6 @@ public void getOnRefreshListener_shouldReturnTheListener() {
     final SwipeRefreshLayout layout = new SwipeRefreshLayout(RuntimeEnvironment.application);
     layout.setOnRefreshListener(listener);
 
-    assertThat(shadowOf(layout).getOnRefreshListener()).isSameAs(listener);
+    assertThat(shadowOf(layout).getOnRefreshListener()).isSameInstanceAs(listener);
   }
 }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -7,15 +7,15 @@
 import static org.junit.Assert.assertTrue;
 
 import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowViewPagerTest {
 
   private ViewPager pager;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentTestUtilTest.java
Patch:
@@ -12,12 +12,12 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class SupportFragmentTestUtilTest {
 
   @Test

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -36,7 +36,7 @@ public static int getJavaVersion() {
     int dotPos = version.indexOf('.');
     int dashPos = version.indexOf('-');
     return Integer.parseInt(
-        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : 1));
+        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : version.length()));
   }
 
   public static void copy(InputStream in, OutputStream out) throws IOException {

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -60,7 +60,7 @@ public void resumeActivity(Activity activity) {
         controller.stop().restart().start().resume();
         return;
       case STOPPED:
-        controller.restart().start().resume();
+        controller.restart().resume();
         return;
       default:
         throw new IllegalStateException(

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBackupManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowLooper.shadowMainLooper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBroadcastReceiver.java
Patch:
@@ -14,7 +14,8 @@
 public class ShadowBroadcastReceiver {
   @RealObject BroadcastReceiver receiver;
 
-  private AtomicBoolean abort; // The abort state of the currently processed broadcast
+  // The abort state of the currently processed broadcast
+  private AtomicBoolean abort = new AtomicBoolean(false);
   private boolean wentAsync = false;
   private PendingResult originalPendingResult;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -40,7 +40,6 @@ public class ShadowPath {
   @RealObject private Path realObject;
 
   private List<Point> points = new ArrayList<>();
-  private Point wasMovedTo;
 
   private float mLastX = 0;
   private float mLastY = 0;
@@ -53,6 +52,8 @@ public class ShadowPath {
   protected void __constructor__(Path path) {
     ShadowPath shadowPath = extract(path);
     points = new ArrayList<>(shadowPath.getPoints());
+    mPath.append(shadowPath.mPath, /*connect=*/ false);
+    mFillType = shadowPath.getFillType();
   }
 
   Path2D getJavaShape() {
@@ -293,7 +294,7 @@ protected boolean isEmpty() {
     float[] coords = new float[6];
     mCachedIsEmpty = Boolean.TRUE;
     for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
-      int type = it.currentSegment(coords);
+      // int type = it.currentSegment(coords);
       // if (type != PathIterator.SEG_MOVETO) {
       // Once we know that the path is not empty, we do not need to check again unless
       // Path#reset is called.

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class CursorLoaderTest {
   @Test
   public void testGetters() {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowDrawerLayoutTest.java
Patch:
@@ -5,21 +5,21 @@
 
 import android.app.Activity;
 import android.support.v4.widget.DrawerLayout;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowDrawerLayoutTest {
 
   @Test
   public void canGetAndSetDrawerListener() throws Exception {
     DrawerLayout drawerLayout = new DrawerLayout(Robolectric.buildActivity(Activity.class).create().get());
     DrawerLayout.DrawerListener mockDrawerListener = mock(DrawerLayout.DrawerListener.class);
     drawerLayout.setDrawerListener(mockDrawerListener);
-    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameAs(mockDrawerListener);
+    assertThat(shadowOf(drawerLayout).getDrawerListener()).isSameInstanceAs(mockDrawerListener);
   }
 
   private ShadowDrawerLayout shadowOf(DrawerLayout drawerLayout) {

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowLocalBroadcastManagerTest.java
Patch:
@@ -14,15 +14,15 @@
 import android.content.IntentFilter;
 import android.net.Uri;
 import android.support.v4.content.LocalBroadcastManager;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowLocalBroadcastManagerTest {
   private List<String> transcript = new ArrayList<>();
 

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -12,17 +12,17 @@
 import android.support.annotation.NonNull;
 import android.support.v4.media.MediaBrowserCompat;
 import android.support.v4.media.MediaBrowserCompat.MediaItem;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 /** Tests for {@link org.robolectric.shadows.support.v4.ShadowMediaBrowserCompat}. */
-@RunWith(RobolectricTestRunner.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowMediaBrowserCompatTest {
 
   private Context context = RuntimeEnvironment.application;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowSwipeRefreshLayoutTest.java
Patch:
@@ -6,12 +6,12 @@
 
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowSwipeRefreshLayoutTest {
 
   @Test
@@ -21,6 +21,6 @@ public void getOnRefreshListener_shouldReturnTheListener() {
     final SwipeRefreshLayout layout = new SwipeRefreshLayout(RuntimeEnvironment.application);
     layout.setOnRefreshListener(listener);
 
-    assertThat(shadowOf(layout).getOnRefreshListener()).isSameAs(listener);
+    assertThat(shadowOf(layout).getOnRefreshListener()).isSameInstanceAs(listener);
   }
 }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowViewPagerTest.java
Patch:
@@ -7,15 +7,15 @@
 import static org.junit.Assert.assertTrue;
 
 import android.view.View;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class ShadowViewPagerTest {
 
   private ViewPager pager;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentTestUtilTest.java
Patch:
@@ -12,12 +12,12 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.util.TestRunnerWithManifest;
 
-@RunWith(TestRunnerWithManifest.class)
+@RunWith(AndroidJUnit4.class)
 public class SupportFragmentTestUtilTest {
 
   @Test

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -36,7 +36,7 @@ public static int getJavaVersion() {
     int dotPos = version.indexOf('.');
     int dashPos = version.indexOf('-');
     return Integer.parseInt(
-        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : 1));
+        version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : version.length()));
   }
 
   public static void copy(InputStream in, OutputStream out) throws IOException {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -442,7 +442,7 @@ protected Bitmap copy(Bitmap.Config config, boolean isMutable) {
     shadowBitmap.width = getWidth();
     if (colors != null) {
       shadowBitmap.colors = new int[colors.length];
-      System.arraycopy(shadowBitmap.colors, 0, colors, 0, colors.length);
+      System.arraycopy(colors, 0, shadowBitmap.colors, 0, colors.length);
     }
     return newBitmap;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -40,7 +40,6 @@ public class ShadowPath {
   @RealObject private Path realObject;
 
   private List<Point> points = new ArrayList<>();
-  private Point wasMovedTo;
 
   private float mLastX = 0;
   private float mLastY = 0;
@@ -53,6 +52,8 @@ public class ShadowPath {
   protected void __constructor__(Path path) {
     ShadowPath shadowPath = extract(path);
     points = new ArrayList<>(shadowPath.getPoints());
+    mPath.append(shadowPath.mPath, /*connect=*/ false);
+    mFillType = shadowPath.getFillType();
   }
 
   Path2D getJavaShape() {
@@ -293,7 +294,7 @@ protected boolean isEmpty() {
     float[] coords = new float[6];
     mCachedIsEmpty = Boolean.TRUE;
     for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
-      int type = it.currentSegment(coords);
+      // int type = it.currentSegment(coords);
       // if (type != PathIterator.SEG_MOVETO) {
       // Once we know that the path is not empty, we do not need to check again unless
       // Path#reset is called.

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -541,6 +541,8 @@ protected Statement methodBlock(FrameworkMethod method) {
         public void evaluate() throws Throwable {
           try {
             baseStatement.evaluate();
+          } catch (AssumptionViolatedException e) {
+            throw e;
           } catch (Throwable t) {
             roboMethod.getTestEnvironment().checkStateAfterTestFailure(t);
             throw t;

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -50,8 +50,9 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
     }
 
     Class<? extends Activity> activityClass;
+    String activityClassName = ai.targetActivity != null ? ai.targetActivity : ai.name;
     try {
-      activityClass = Class.forName(ai.name).asSubclass(Activity.class);
+      activityClass = Class.forName(activityClassName).asSubclass(Activity.class);
     } catch (ClassNotFoundException e) {
       throw new RuntimeException("Could not load activity " + ai.name, e);
     }

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -30,10 +30,9 @@ public class LocalActivityInvoker implements ActivityInvoker {
 
   @Nullable private ActivityController<? extends Activity> controller;
 
+
   @Override
-  public void startActivity(
-      Intent intent
-      ) {
+  public void startActivity(Intent intent) {
     controller = getInstrumentation().startActivitySyncInternal(intent);
   }
 

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -541,6 +541,8 @@ protected Statement methodBlock(FrameworkMethod method) {
         public void evaluate() throws Throwable {
           try {
             baseStatement.evaluate();
+          } catch (AssumptionViolatedException e) {
+            throw e;
           } catch (Throwable t) {
             roboMethod.getTestEnvironment().checkStateAfterTestFailure(t);
             throw t;

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -50,8 +50,9 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
     }
 
     Class<? extends Activity> activityClass;
+    String activityClassName = ai.targetActivity != null ? ai.targetActivity : ai.name;
     try {
-      activityClass = Class.forName(ai.name).asSubclass(Activity.class);
+      activityClass = Class.forName(activityClassName).asSubclass(Activity.class);
     } catch (ClassNotFoundException e) {
       throw new RuntimeException("Could not load activity " + ai.name, e);
     }

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -30,10 +30,9 @@ public class LocalActivityInvoker implements ActivityInvoker {
 
   @Nullable private ActivityController<? extends Activity> controller;
 
+
   @Override
-  public void startActivity(
-      Intent intent
-      ) {
+  public void startActivity(Intent intent) {
     controller = getInstrumentation().startActivitySyncInternal(intent);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -224,7 +224,7 @@ public void idleFor(Duration duration) {
    * Returns the {@link org.robolectric.util.Scheduler} that is being used to manage the enqueued
    * tasks. This scheduler is managed by the Looper's associated queue.
    *
-   * Only supported for {@link LooperMode.Mode.PAUSED}.
+   * Only supported for {@link LooperMode.Mode.LEGACY}.
    *
    * @return the {@link org.robolectric.util.Scheduler} that is being used to manage the enqueued
    * tasks.

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -33,7 +33,7 @@
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowProviders;
-import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.internal.bytecode.UrlResourceProvider;
 import org.robolectric.pluginapi.perf.Metadata;
 import org.robolectric.pluginapi.perf.Metric;
@@ -381,7 +381,7 @@ private void addShadows(List<Class<?>> shadowClasses, SandboxConfig annotation)
 
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, 0, interceptors);
+    return ShadowWranglerBuilder.build(shadowMap, 0, interceptors);
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -45,6 +45,7 @@
 import org.robolectric.internal.bytecode.SandboxClassLoader;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
@@ -125,7 +126,8 @@ protected RobolectricTestRunner(final Class<?> testClass, Injector injector)
   @Override
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, ((AndroidSandbox) sandbox).getSdk().getApiLevel(), getInterceptors());
+    return ShadowWranglerBuilder
+        .build(shadowMap, ((AndroidSandbox) sandbox).getSdk().getApiLevel(), getInterceptors());
   }
 
   @Override

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -33,7 +33,7 @@
 import org.robolectric.internal.bytecode.ShadowInfo;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowProviders;
-import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.internal.bytecode.UrlResourceProvider;
 import org.robolectric.pluginapi.perf.Metadata;
 import org.robolectric.pluginapi.perf.Metric;
@@ -381,7 +381,7 @@ private void addShadows(List<Class<?>> shadowClasses, SandboxConfig annotation)
 
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, 0, interceptors);
+    return ShadowWranglerBuilder.build(shadowMap, 0, interceptors);
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -45,6 +45,7 @@
 import org.robolectric.internal.bytecode.SandboxClassLoader;
 import org.robolectric.internal.bytecode.ShadowMap;
 import org.robolectric.internal.bytecode.ShadowWrangler;
+import org.robolectric.internal.bytecode.ShadowWranglerBuilder;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
@@ -125,7 +126,8 @@ protected RobolectricTestRunner(final Class<?> testClass, Injector injector)
   @Override
   @Nonnull
   protected ClassHandler createClassHandler(ShadowMap shadowMap, Sandbox sandbox) {
-    return new ShadowWrangler(shadowMap, ((AndroidSandbox) sandbox).getSdk().getApiLevel(), getInterceptors());
+    return ShadowWranglerBuilder
+        .build(shadowMap, ((AndroidSandbox) sandbox).getSdk().getApiLevel(), getInterceptors());
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -57,7 +57,7 @@ public void resumeActivity(Activity activity) {
         controller.stop().restart().start().resume();
         return;
       case STOPPED:
-        controller.restart().start().resume();
+        controller.restart().resume();
         return;
       default:
         throw new IllegalStateException(

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -54,7 +54,7 @@ public void resumeActivity(Activity activity) {
       case RESUMED:
         return;
       case PAUSED:
-        controller.stop().restart().start().resume();
+        controller.resume();
         return;
       case STOPPED:
         controller.restart().start().resume();

File: resources/src/main/java/org/robolectric/res/android/CppApkAssets.java
Patch:
@@ -56,7 +56,7 @@ public class CppApkAssets {
   public CppApkAssets(ZipArchiveHandle zip_handle_, String path_) {
     this.zip_handle_ = zip_handle_;
     this.path_ = path_;
-    this.zipFileRO = ZipFileRO.open(zip_handle_.zipFile.getName());
+    this.zipFileRO = new ZipFileRO(zip_handle_, zip_handle_.zipFile.getName());
   }
 
   public String GetPath() { return path_; }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacySystemClock.java
Patch:
@@ -28,10 +28,11 @@ public class ShadowLegacySystemClock extends ShadowSystemClock {
   private static final int MILLIS_PER_NANO = 1000000;
 
   static long now() {
-    if (ShadowApplication.getInstance() == null) {
+    ShadowApplication instance = ShadowApplication.getInstance();
+    if (instance == null) {
       return 0;
     }
-    return ShadowApplication.getInstance().getForegroundThreadScheduler().getCurrentTime();
+    return instance.getForegroundThreadScheduler().getCurrentTime();
   }
 
   @Implementation

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.TreeMap;
 import javax.annotation.Priority;
 import javax.inject.Inject;
-import org.junit.AssumptionViolatedException;
 import org.robolectric.internal.dependency.DependencyJar;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.pluginapi.Sdk;
@@ -71,7 +70,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(O, new DefaultSdk(O, "8.0.0_r4", "r1", "REL", 8));
     knownSdks.put(O_MR1, new DefaultSdk(O_MR1, "8.1.0", "4611349", "REL", 8));
     knownSdks.put(P, new DefaultSdk(P, "9", "4913185-2", "REL", 8));
-    knownSdks.put(Q, new DefaultSdk(Q, "9plus", "5616371", "Q", 9));
+    knownSdks.put(Q, new DefaultSdk(Q, "10", "5803371", "REL", 9));
   }
 
   @Override
@@ -153,7 +152,7 @@ public String getUnsupportedMessage() {
     @Override
     public void verifySupportedSdk(String testClassName) {
       if (isKnown() && !isSupported()) {
-        throw new AssumptionViolatedException(
+        throw new UnsupportedOperationException(
             "Failed to create a Robolectric sandbox: " + getUnsupportedMessage());
       }
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeInput.java
Patch:
@@ -49,7 +49,7 @@ public class NativeInput {
   /*
    * Maximum number of samples supported per motion event.
    */
-  private static final int MAX_SAMPLES = 2 ^ 16; /* UINT16_MAX */
+  private static final int MAX_SAMPLES = 0xffff; /* UINT16_MAX */
   /*
    * Maximum pointer id value supported in a motion event.
    * Smallest pointer id is 0.

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.TreeMap;
 import javax.annotation.Priority;
 import javax.inject.Inject;
+import org.junit.AssumptionViolatedException;
 import org.robolectric.internal.dependency.DependencyJar;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.pluginapi.Sdk;
@@ -70,7 +71,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(O, new DefaultSdk(O, "8.0.0_r4", "r1", "REL", 8));
     knownSdks.put(O_MR1, new DefaultSdk(O_MR1, "8.1.0", "4611349", "REL", 8));
     knownSdks.put(P, new DefaultSdk(P, "9", "4913185-2", "REL", 8));
-    knownSdks.put(Q, new DefaultSdk(Q, "10", "5803371", "REL", 9));
+    knownSdks.put(Q, new DefaultSdk(Q, "9plus", "5616371", "Q", 9));
   }
 
   @Override
@@ -152,7 +153,7 @@ public String getUnsupportedMessage() {
     @Override
     public void verifySupportedSdk(String testClassName) {
       if (isKnown() && !isSupported()) {
-        throw new UnsupportedOperationException(
+        throw new AssumptionViolatedException(
             "Failed to create a Robolectric sandbox: " + getUnsupportedMessage());
       }
     }

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkProvider.java
Patch:
@@ -71,7 +71,7 @@ protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {
     knownSdks.put(O, new DefaultSdk(O, "8.0.0_r4", "r1", "REL", 8));
     knownSdks.put(O_MR1, new DefaultSdk(O_MR1, "8.1.0", "4611349", "REL", 8));
     knownSdks.put(P, new DefaultSdk(P, "9", "4913185-2", "REL", 8));
-    knownSdks.put(Q, new DefaultSdk(Q, "9plus", "5616371", "Q", 9));
+    knownSdks.put(Q, new DefaultSdk(Q, "10", "5803371", "REL", 9));
   }
 
   @Override
@@ -153,7 +153,7 @@ public String getUnsupportedMessage() {
     @Override
     public void verifySupportedSdk(String testClassName) {
       if (isKnown() && !isSupported()) {
-        throw new AssumptionViolatedException(
+        throw new UnsupportedOperationException(
             "Failed to create a Robolectric sandbox: " + getUnsupportedMessage());
       }
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -211,7 +211,7 @@ public void idleFor(Duration duration) {
   public abstract boolean setPaused(boolean shouldPause);
 
   /**
-   * Only supported for {@link LooperMode.Mode.PAUSED}.
+   * Only supported for {@link LooperMode.Mode.LEGACY}.
    */
   public abstract void resetScheduler();
 

File: processor/src/main/java/org/robolectric/annotation/processing/Helpers.java
Patch:
@@ -236,7 +236,7 @@ TypeMirror findInterface(TypeElement shadowPickerType, Class<?> interfaceClass)
         .getTypeElement(interfaceClass.getName())
         .asType();
     for (TypeMirror typeMirror : shadowPickerType.getInterfaces()) {
-      if (types.erasure(typeMirror).equals(types.erasure(shadowPickerMirror))) {
+      if (types.isSameType(types.erasure(typeMirror), types.erasure(shadowPickerMirror))) {
         return typeMirror;
       }
     }

File: resources/src/main/java/org/robolectric/res/android/CppApkAssets.java
Patch:
@@ -56,6 +56,7 @@ public class CppApkAssets {
   public CppApkAssets(ZipArchiveHandle zip_handle_, String path_) {
     this.zip_handle_ = zip_handle_;
     this.path_ = path_;
+    this.zipFileRO = ZipFileRO.open(zip_handle_.zipFile.getName());
   }
 
   public String GetPath() { return path_; }
@@ -81,6 +82,7 @@ public LoadedArsc GetLoadedArsc() {
 //       std::unique_ptr<typename std::remove_pointer<::ZipArchiveHandle>::type, ZipArchivePtrCloser>;
 
   ZipArchiveHandle zip_handle_;
+  private final ZipFileRO zipFileRO;
   private String path_;
   Asset resources_asset_;
   Asset idmap_asset_;
@@ -279,7 +281,6 @@ public Asset Open(String path, AccessMode mode) {
     CHECK(zip_handle_ != null);
 
     String name = path;
-    ZipFileRO zipFileRO = ZipFileRO.open(zip_handle_.zipFile.getName());
     ZipEntryRO entry;
     entry = zipFileRO.findEntryByName(name);
     // int result = FindEntry(zip_handle_.get(), name, &entry);

File: processor/src/test/java/org/robolectric/annotation/processing/validator/SingleClassSubject.java
Patch:
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.processing.RobolectricProcessor;
 import org.robolectric.annotation.processing.Utils;
 
-public final class SingleClassSubject extends Subject<SingleClassSubject, String> {
+public final class SingleClassSubject extends Subject {
 
   public static Subject.Factory<SingleClassSubject, String> singleClass() {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -34,7 +34,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
     });
     animator.start();
 
-    assertThat(values).isOrdered(Ordering.natural());
+    assertThat(values).isInOrder(Ordering.natural());
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -736,7 +736,7 @@ public void writeByteArray(byte[] b, int offset, int length) {
       // bytes individually because each byte would take up 4 bytes due to Parcel's alignment
       // behavior.  Instead we write the length, and if non-empty, we write the array.
       if (length != 0) {
-        writeValue(length, Arrays.copyOfRange(b, offset, length));
+        writeValue(length, Arrays.copyOfRange(b, offset, offset + length));
       }
     }
 

File: processor/src/test/java/org/robolectric/annotation/processing/validator/SingleClassSubject.java
Patch:
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.processing.RobolectricProcessor;
 import org.robolectric.annotation.processing.Utils;
 
-public final class SingleClassSubject extends Subject<SingleClassSubject, String> {
+public final class SingleClassSubject extends Subject {
 
   public static Subject.Factory<SingleClassSubject, String> singleClass() {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -34,7 +34,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
     });
     animator.start();
 
-    assertThat(values).isOrdered(Ordering.natural());
+    assertThat(values).isInOrder(Ordering.natural());
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMemoryMappedFile.java
Patch:
@@ -6,6 +6,7 @@
 import android.system.ErrnoException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import libcore.io.BufferIterator;
@@ -94,11 +95,11 @@ public RoboBufferIterator(byte[] buffer, ByteOrder order) {
         }
 
         @Override public void seek(int offset) {
-            buffer.position(offset);
+            ((Buffer) buffer).position(offset);
         }
 
         @Override public void skip(int byteCount) {
-            buffer.position(buffer.position() + byteCount);
+          ((Buffer) buffer).position(buffer.position() + byteCount);
         }
 
         @Override

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -227,7 +227,9 @@ void sendOrderedBroadcastAsUser(
       Context context) {
     List<Wrapper> receivers = getAppropriateWrappers(userHandle, intent, receiverPermission);
     sortByPriority(receivers);
-    receivers.add(new Wrapper(resultReceiver, null, context, null, scheduler));
+    if (resultReceiver != null) {
+      receivers.add(new Wrapper(resultReceiver, null, context, null, scheduler));
+    }
     postOrderedToWrappers(receivers, intent, initialCode, initialData, initialExtras, context);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -42,7 +42,7 @@ public void createConfigurationContext() {
   @Test
   @Config(minSdk = VERSION_CODES.O)
   public void startForegroundService() {
-    Intent intent = new Intent();
+    Intent intent = new Intent().setPackage("dummy.package");
     context.startForegroundService(intent);
     assertThat(ShadowApplication.getInstance().getNextStartedService()).isEqualTo(intent);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextWrapperTest.java
Patch:
@@ -634,7 +634,8 @@ private void assertSameInstanceEveryTime(String serviceName) {
 
   @Test
   public void bindServiceDelegatesToShadowApplication() {
-    contextWrapper.bindService(new Intent("foo"), new TestService(), Context.BIND_AUTO_CREATE);
+    contextWrapper.bindService(
+        new Intent("foo").setPackage("dummy.package"), new TestService(), Context.BIND_AUTO_CREATE);
     assertEquals(
         "foo",
         shadowOf((Application) ApplicationProvider.getApplicationContext())

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -48,7 +48,7 @@ public void setup() {
   public void shouldUnbindServiceAtShadowApplication() {
     Application application = (Application) ApplicationProvider.getApplicationContext();
     ServiceConnection conn = Shadow.newInstanceOf(MediaScannerConnection.class);
-    service.bindService(new Intent("dummy"), conn, 0);
+    service.bindService(new Intent("dummy").setPackage("dummy.package"), conn, 0);
     assertThat(shadowOf(application).getUnboundServiceConnections()).isEmpty();
     service.unbindService(conn);
     assertThat(shadowOf(application).getUnboundServiceConnections()).hasSize(1);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLegacyChoreographerTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaCodecTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.same;
 import static org.mockito.Mockito.times;

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -45,7 +45,7 @@
 @AutoService(BugChecker.class)
 @BugPattern(
     name = "DeprecatedMethods",
-    summary = "Robolectric shadows shouldn't be stored to variables or fields.",
+    summary = "Prefer supported APIs.",
     severity = WARNING,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -1570,7 +1570,9 @@ abstract private static class FutureWriter<T> {
     public FutureWriter(ByteBuffer buf, int size) {
       this.buf = buf;
       this.position = buf.position();
-      buf.position(position + size);
+      // Cast to Buffer because generated covariant return type that returns ByteBuffer is not
+      // available on Java 8
+      ((Buffer) buf).position(position + size);
     }
 
     abstract protected void put(int position, T value);

File: robolectric/src/test/java/org/robolectric/shadows/TestService.java
Patch:
@@ -9,7 +9,7 @@
 class TestService extends Service implements ServiceConnection {
   ComponentName name;
   IBinder service;
-  ComponentName nameUnbound;
+  ComponentName nameDisconnected;
 
   @Override
   public IBinder onBind(Intent intent) {
@@ -24,6 +24,6 @@ public void onServiceConnected(ComponentName name, IBinder service) {
 
   @Override
   public void onServiceDisconnected(ComponentName name) {
-    nameUnbound = name;
+    nameDisconnected = name;
   }
 }

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -163,8 +163,7 @@ public void setUpApplicationState(Method method,
     if (ShadowLooper.looperMode() == LooperMode.Mode.LEGACY) {
       ShadowLooper.getShadowMainLooper().resetScheduler();
     } else {
-      RuntimeEnvironment.setMasterScheduler(
-          new LooperDelegatingScheduler(Shadow.extract(Looper.getMainLooper())));
+      RuntimeEnvironment.setMasterScheduler(new LooperDelegatingScheduler(Looper.getMainLooper()));
     }
 
     installAndCreateApplication(appManifest, config, androidConfiguration, displayMetrics);

File: robolectric/src/main/java/org/robolectric/plugins/TextLayoutModeConfigurer.java
Patch:
@@ -19,8 +19,7 @@ public Class<TextLayoutMode.Mode> getConfigClass() {
   @Nonnull
   @Override
   public TextLayoutMode.Mode defaultConfig() {
-    // TODO: switch to REALISTIC
-    return TextLayoutMode.Mode.LEGACY;
+    return TextLayoutMode.Mode.REALISTIC;
   }
 
   @Override

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -863,7 +863,7 @@ public ApkAssetsCookie GetResource(int resid, boolean may_be_bag,
 
       // Create a reference since we can't represent this complex type as a Res_value.
       out_value.set(new Res_value((byte) Res_value.TYPE_REFERENCE, resid));
-      out_selected_config.set(entry.get().config);
+      out_selected_config.set(new ResTable_config(entry.get().config));
       out_flags.set(entry.get().type_flags);
       return cookie;
     }
@@ -877,7 +877,7 @@ public ApkAssetsCookie GetResource(int resid, boolean may_be_bag,
     // Convert the package ID to the runtime assigned package ID.
     entry.get().dynamic_ref_table.lookupResourceValue(out_value);
 
-    out_selected_config.set(entry.get().config);
+    out_selected_config.set(new ResTable_config(entry.get().config));
     out_flags.set(entry.get().type_flags);
     return cookie;
   }

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -65,7 +65,6 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
       controller.start()
           .postCreate(null)
           .resume()
-          .postResume()
           .visible()
           .windowFocusChanged(true);
     }

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -51,10 +51,10 @@ public void resumeActivity(Activity activity) {
       case RESUMED:
         return;
       case PAUSED:
-        controller.stop().restart().start().resume().postResume();
+        controller.stop().restart().start().resume();
         return;
       case STOPPED:
-        controller.restart().start().resume().postResume();
+        controller.restart().start().resume();
         return;
       default:
         throw new IllegalStateException(

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -164,13 +164,14 @@ public ActivityController<T> postResume() {
   public ActivityController<T> visible() {
     shadowMainLooper.runPaused(
         () -> {
-          _component_.setDecor(component.getWindow().getDecorView());
-          ReflectionHelpers.callInstanceMethod(component, "makeVisible");
           // emulate logic of ActivityThread#handleResumeActivity
           component.getWindow().getAttributes().type =
               WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
+          _component_.setDecor(component.getWindow().getDecorView());
+          ReflectionHelpers.callInstanceMethod(component, "makeVisible");
         });
 
+    shadowMainLooper.idleIfPaused();
     ViewRootImpl root = getViewRoot();
     // root can be null if activity does not have content attached, or if looper is paused.
     // this is unusual but leave the check here for legacy compatibility

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -5,10 +5,12 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.Properties;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
+import org.robolectric.util.ReflectionHelpers;
 
 @Implements(value = SystemProperties.class, isInAndroidSdk = false)
 public class ShadowSystemProperties {
@@ -109,6 +111,7 @@ private static void setDefaults(Properties buildProperties) {
 
   @Resetter
   public static synchronized void reset() {
+    ReflectionHelpers.setStaticField(SystemProperties.class, "sChangeCallbacks", new ArrayList<>());
     buildProperties = null;
   }
 }

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -74,7 +74,9 @@ public ActivityController<? extends Activity> startActivitySyncInternal(Intent i
 
   @Override
   public void runOnMainSync(Runnable runner) {
+    shadowMainLooper().idle();
     runner.run();
+    shadowMainLooper().idle();
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -162,6 +162,9 @@ public void setUpApplicationState(Method method,
     }
     if (ShadowLooper.looperMode() == LooperMode.Mode.LEGACY) {
       ShadowLooper.getShadowMainLooper().resetScheduler();
+    } else {
+      RuntimeEnvironment.setMasterScheduler(
+          new LooperDelegatingScheduler(Shadow.extract(Looper.getMainLooper())));
     }
 
     installAndCreateApplication(appManifest, config, androidConfiguration, displayMetrics);

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -84,8 +84,6 @@ public void shouldResetBackgroundSchedulerAfterTests() throws Exception {
 
   @Test
   public void idleMainLooper_executesScheduledTasks() {
-    assume().that(ShadowLooper.looperMode()).isEqualTo(LooperMode.Mode.LEGACY);
-
     final boolean[] wasRun = new boolean[]{false};
     new Handler().postDelayed(new Runnable() {
       @Override

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowImageDecoder.java
Patch:
@@ -205,7 +205,7 @@ protected static Bitmap ImageDecoder_nDecodeBitmap(long nativePtr,
 
     Bitmap bitmap = BitmapFactory.decodeStream(stream);
 
-    if (imgStream.isNinePatch()) {
+    if (imgStream.isNinePatch() && ReflectionHelpers.getField(bitmap, "mNinePatchChunk") == null) {
       ReflectionHelpers.setField(Bitmap.class, bitmap, "mNinePatchChunk", new byte[0]);
     }
     return bitmap;

File: integration_tests/androidx_test/src/main/java/org/robolectric/integration_tests/axt/ActivityWithPlatformMenu.java
Patch:
@@ -7,8 +7,8 @@
 import android.view.MenuItem;
 import org.robolectric.integration.axt.R;
 
-/** Fixture activity for {@link EspressoTest} */
-public class ActivityWithMenu extends Activity {
+/** {@link EspressoWithMenuTest} fixture activity that uses Android platform menu's */
+public class ActivityWithPlatformMenu extends Activity {
 
   boolean menuClicked;
 

File: robolectric/src/main/java/org/robolectric/android/internal/LocalControlledLooper.java
Patch:
@@ -15,8 +15,7 @@ public void drainMainThreadUntilIdle() {
     shadowMainLooper().idle();
   }
 
-  // TODO: add back Override when robolectric github depends on androidx.test-alpha04
-  // @Override
+  @Override
   public void simulateWindowFocus(View decorView) {
     ViewRootImpl viewRoot = ReflectionHelpers.callInstanceMethod(decorView, "getViewRootImpl");
     if (viewRoot != null) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -77,10 +77,10 @@ public void methodsShouldReturnScaledAndroidConstantsDependingOnPixelDensity() {
   @Test
   public void testHasPermanentMenuKey() throws Exception {
     ViewConfiguration viewConfiguration = ViewConfiguration.get(context);
-    assertThat(viewConfiguration.hasPermanentMenuKey()).isFalse();
+    assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
 
     ShadowViewConfiguration shadowViewConfiguration = shadowOf(viewConfiguration);
-    shadowViewConfiguration.setHasPermanentMenuKey(true);
-    assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
+    shadowViewConfiguration.setHasPermanentMenuKey(false);
+    assertThat(viewConfiguration.hasPermanentMenuKey()).isFalse();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public class ShadowViewConfiguration {
   private int pagingTouchSlop;
   private int doubleTapSlop;
   private int windowTouchSlop;
-  private boolean hasPermanentMenuKey = false;
+  private static boolean hasPermanentMenuKey = true;
 
   @RealObject
   private ViewConfiguration realViewConfiguration;
@@ -239,7 +239,7 @@ protected boolean hasPermanentMenuKey() {
     return hasPermanentMenuKey;
   }
 
-  public void setHasPermanentMenuKey(boolean value) {
-    this.hasPermanentMenuKey = value;
+  public static void setHasPermanentMenuKey(boolean value) {
+    hasPermanentMenuKey = value;
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -77,10 +77,10 @@ public void methodsShouldReturnScaledAndroidConstantsDependingOnPixelDensity() {
   @Test
   public void testHasPermanentMenuKey() throws Exception {
     ViewConfiguration viewConfiguration = ViewConfiguration.get(context);
-    assertThat(viewConfiguration.hasPermanentMenuKey()).isFalse();
+    assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
 
     ShadowViewConfiguration shadowViewConfiguration = shadowOf(viewConfiguration);
-    shadowViewConfiguration.setHasPermanentMenuKey(true);
-    assertThat(viewConfiguration.hasPermanentMenuKey()).isTrue();
+    shadowViewConfiguration.setHasPermanentMenuKey(false);
+    assertThat(viewConfiguration.hasPermanentMenuKey()).isFalse();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public class ShadowViewConfiguration {
   private int pagingTouchSlop;
   private int doubleTapSlop;
   private int windowTouchSlop;
-  private boolean hasPermanentMenuKey = false;
+  private static boolean hasPermanentMenuKey = true;
 
   @RealObject
   private ViewConfiguration realViewConfiguration;
@@ -239,7 +239,7 @@ protected boolean hasPermanentMenuKey() {
     return hasPermanentMenuKey;
   }
 
-  public void setHasPermanentMenuKey(boolean value) {
-    this.hasPermanentMenuKey = value;
+  public static void setHasPermanentMenuKey(boolean value) {
+    hasPermanentMenuKey = value;
   }
 }

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -160,6 +160,6 @@ public void finish(int resultCode, Bundle bundle) {
     // intentionally don't call through to super here, to circumvent all the activity
     // waiting/cleanup
     // logic that is unnecessary on Robolectric
-
+    super.restoreUncaughtExceptionHandler();
   }
 }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -30,13 +30,13 @@
 import org.robolectric.internal.AndroidSandbox;
 import org.robolectric.internal.BuckManifestFactory;
 import org.robolectric.internal.DefaultManifestFactory;
-import org.robolectric.internal.TestEnvironment;
 import org.robolectric.internal.ManifestFactory;
 import org.robolectric.internal.ManifestIdentifier;
 import org.robolectric.internal.MavenManifestFactory;
 import org.robolectric.internal.ResourcesMode;
 import org.robolectric.internal.SandboxManager;
 import org.robolectric.internal.SandboxTestRunner;
+import org.robolectric.internal.TestEnvironment;
 import org.robolectric.internal.bytecode.ClassHandler;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration.Builder;

File: robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java
Patch:
@@ -43,14 +43,14 @@
 import org.robolectric.android.fakes.RoboMonitoringInstrumentation;
 import org.robolectric.annotation.Config;
 import org.robolectric.config.ConfigurationRegistry;
-import org.robolectric.internal.TestEnvironment;
 import org.robolectric.internal.ResourcesMode;
 import org.robolectric.internal.ShadowProvider;
+import org.robolectric.internal.TestEnvironment;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.manifest.BroadcastReceiverData;
 import org.robolectric.manifest.RoboNotFoundException;
-import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.Sdk;
+import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 import org.robolectric.res.Fs;
 import org.robolectric.res.PackageResourceTable;

File: robolectric/src/main/java/org/robolectric/internal/TestEnvironment.java
Patch:
@@ -4,6 +4,9 @@
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 
+/**
+ * An environment for running tests.
+ */
 public interface TestEnvironment {
 
   void setUpApplicationState(

File: robolectric/src/test/java/org/robolectric/BootstrapWrapper.java
Patch:
@@ -7,8 +7,8 @@
 import org.robolectric.internal.ResourcesMode;
 import org.robolectric.internal.ShadowProvider;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.Sdk;
+import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 
 /** Wrapper for testing use of AndroidTestEnvironment. */

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -50,9 +50,9 @@
 import org.robolectric.internal.ResourcesMode;
 import org.robolectric.internal.ShadowProvider;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkProvider;
+import org.robolectric.pluginapi.TestEnvironmentLifecyclePlugin;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 import org.robolectric.pluginapi.perf.Metric;
 import org.robolectric.pluginapi.perf.PerfStatsReporter;

File: integration_tests/androidx_test/src/test/java/org/robolectric/integration_tests/axt/EspressoWithPausedLooperTest.java
Patch:
@@ -5,6 +5,8 @@
 import static androidx.test.espresso.matcher.ViewMatchers.isCompletelyDisplayed;
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
 import static org.robolectric.annotation.TextLayoutMode.Mode.REALISTIC;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
+
 
 import androidx.test.core.app.ActivityScenario;
 import androidx.test.espresso.Espresso;
@@ -14,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.integration.axt.R;
-import org.robolectric.shadows.ShadowLooper;
 
 /** Verify Espresso usage with paused looper */
 @RunWith(AndroidJUnit4.class)
@@ -23,7 +24,7 @@ public final class EspressoWithPausedLooperTest {
 
   @Before
   public void setUp() {
-    ShadowLooper.pauseMainLooper();
+    shadowMainLooper().pause();
     ActivityScenario.launch(EspressoActivity.class);
   }
 

File: resources/src/main/java/org/robolectric/res/android/NativeObjRegistry.java
Patch:
@@ -100,7 +100,7 @@ public synchronized long register(T o) {
    * @throws IllegalStateException if the object was never registered, or was previously
    *     unregistered.
    */
-  public synchronized void unregister(long nativeId) {
+  public synchronized T unregister(long nativeId) {
     T o = nativeObjToIdMap.remove(nativeId);
     if (debug) {
       System.out.printf("NativeObjRegistry %s: unregister %d -> %s%n", name, nativeId, o);
@@ -120,6 +120,7 @@ public synchronized void unregister(long nativeId) {
       throw new IllegalStateException(
           nativeId + " has already been removed (or was never registered)");
     }
+    return o;
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -1,15 +1,14 @@
 package org.robolectric.android.fakes;
 
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadow.api.Shadow.extract;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.os.Bundle;
 import android.os.IBinder;
-import android.os.Looper;
 import android.os.UserHandle;
 import androidx.test.runner.MonitoringInstrumentation;
 import org.robolectric.Robolectric;
@@ -35,7 +34,7 @@ public void setInTouchMode(boolean inTouch) {
 
   @Override
   public void waitForIdleSync() {
-    shadowOf(Looper.getMainLooper()).idle();
+    shadowMainLooper().idle();
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/android/internal/LocalControlledLooper.java
Patch:
@@ -1,14 +1,13 @@
 package org.robolectric.android.internal;
 
-import static org.robolectric.Shadows.shadowOf;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
-import android.os.Looper;
 import androidx.test.internal.platform.os.ControlledLooper;
 
 public class LocalControlledLooper implements ControlledLooper {
 
   @Override
   public void drainMainThreadUntilIdle() {
-    shadowOf(Looper.getMainLooper()).idle();
+    shadowMainLooper().idle();
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskLoaderTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 
 import android.content.AsyncTaskLoader;
 import androidx.test.core.app.ApplicationProvider;
@@ -18,6 +19,7 @@ public class ShadowAsyncTaskLoaderTest {
 
   @Before
   public void setUp() {
+    assume().that(ShadowRealisticLooper.useRealisticLooper()).isFalse();
     Robolectric.getForegroundThreadScheduler().pause();
     Robolectric.getBackgroundThreadScheduler().pause();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -24,6 +25,7 @@ public class ShadowAsyncTaskTest {
 
   @Before
   public void setUp() throws Exception {
+    assume().that(ShadowBaseLooper.useRealisticLooper()).isFalse();
     transcript = new ArrayList<>();
     Robolectric.getBackgroundThreadScheduler().pause();
     Robolectric.getForegroundThreadScheduler().pause();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
 import android.app.Application;
 import android.content.Context;
@@ -15,7 +16,6 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 
 @RunWith(AndroidJUnit4.class)
 public class ShadowAutoCompleteTextViewTest {
@@ -24,7 +24,7 @@ public class ShadowAutoCompleteTextViewTest {
 
   @Test
   public void shouldInvokeFilter() throws Exception {
-    Robolectric.getForegroundThreadScheduler().pause();
+    shadowMainLooper().pause();
     AutoCompleteTextView view =
         new AutoCompleteTextView(ApplicationProvider.getApplicationContext());
     view.setAdapter(adapter);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -5,6 +5,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 
 import android.app.Application;
 import android.text.format.DateUtils;
@@ -74,6 +75,7 @@ public void formatDateTime_withPastYear() {
 
   @Test
   public void isToday_shouldReturnFalseForNotToday() {
+    assume().that(ShadowBaseLooper.useRealisticLooper()).isFalse();
     long today = java.util.Calendar.getInstance().getTimeInMillis();
     ShadowSystemClock.setCurrentTimeMillis(today);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogTest.java
Patch:
@@ -8,6 +8,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
 import android.app.Application;
 import android.app.Dialog;
@@ -49,6 +50,7 @@ public void shouldCallOnDismissListener() throws Exception {
         });
 
     dialog.dismiss();
+    shadowMainLooper().idle();
 
     assertThat(transcript).containsExactly("onDismiss called!");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
@@ -37,6 +38,8 @@ public boolean handleMessage(Message msg) {
 
   @Before
   public void setUp() throws Exception {
+    assume().that(ShadowBaseLooper.useRealisticLooper()).isFalse();
+
     transcript = new ArrayList<>();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.robolectric.Shadows.shadowOf;
 
 import android.os.HandlerThread;
 import android.os.Looper;
@@ -64,11 +63,10 @@ public void shouldStopThreadIfLooperIsQuit() throws Exception {
     handlerThread = new HandlerThread("test1");
     handlerThread.start();
     Looper looper = handlerThread.getLooper();
-    assertFalse(shadowOf(looper).quit);
+
     looper.quit();
     handlerThread.join();
     assertFalse(handlerThread.isAlive());
-    assertTrue(shadowOf(looper).quit);
     handlerThread = null;
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageQueueTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 import static org.junit.Assert.fail;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
@@ -61,6 +62,8 @@ private static Looper newLooper(boolean canQuit) {
   
   @Before
   public void setUp() throws Exception {
+    assume().that(ShadowBaseLooper.useRealisticLooper()).isFalse();
+
     // Queues and loopers are closely linked; can't easily test one without the other.
     looper = newLooper();
     handler = new TestHandler(looper);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVibratorTest.java
Patch:
@@ -3,15 +3,16 @@
 import static android.os.Build.VERSION_CODES.O;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
 import android.content.Context;
 import android.os.Vibrator;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 @RunWith(AndroidJUnit4.class)
@@ -51,7 +52,7 @@ public void vibrateMilliseconds() {
     assertThat(shadowOf(vibrator).isVibrating()).isTrue();
     assertThat(shadowOf(vibrator).getMilliseconds()).isEqualTo(5000L);
 
-    Robolectric.getForegroundThreadScheduler().advanceToNextPostedRunnable();
+    shadowMainLooper().idleFor(5, TimeUnit.SECONDS);
     assertThat(shadowOf(vibrator).isVibrating()).isFalse();
   }
 

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -172,6 +172,7 @@ public ActivityController<T> visible() {
     // this is unusual but leave the check here for legacy compatibility
     if (root != null) {
       callDispatchResized(root);
+      shadowMainLooper.idleIfPaused();
     }
     return this;
   }
@@ -197,6 +198,7 @@ public ActivityController<T> windowFocusChanged(boolean hasFocus) {
     ReflectionHelpers.callInstanceMethod(root, "windowFocusChanged",
         from(boolean.class, hasFocus), /* hasFocus */
         from(boolean.class, false) /* inTouchMode */);
+    shadowMainLooper.idleIfPaused();
     return this;
   }
 

File: shadows/framework/src/main/java/org/robolectric/android/controller/ComponentController.java
Patch:
@@ -4,14 +4,14 @@
 import android.os.Looper;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
-import org.robolectric.shadows.ShadowLooper;
+import org.robolectric.shadows.ShadowBaseLooper;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 public abstract class ComponentController<C extends ComponentController<C, T>, T> {
   protected final C myself;
   protected T component;
-  protected final ShadowLooper shadowMainLooper;
+  protected final ShadowBaseLooper shadowMainLooper;
 
   protected Intent intent;
 

File: shadows/framework/src/main/java/org/robolectric/android/controller/ServiceController.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.android.controller;
 
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
 import android.app.ActivityThread;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityButtonController.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.P;
+import static org.robolectric.shadows.ShadowBaseLooper.shadowMainLooper;
 
 import android.accessibilityservice.AccessibilityButtonController;
 import org.robolectric.annotation.Implements;
@@ -16,5 +17,6 @@ public class ShadowAccessibilityButtonController {
   /** Performs click action for accessibility button. */
   public void performAccessibilityButtonClick() {
     ReflectionHelpers.callInstanceMethod(realObject, "dispatchAccessibilityButtonClicked");
+    shadowMainLooper().idleIfPaused();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAsyncTask.java
Patch:
@@ -12,8 +12,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
-@Implements(AsyncTask.class)
-public class ShadowAsyncTask<Params, Progress, Result> {
+@Implements(value = AsyncTask.class, shadowPicker = ShadowBaseAsyncTask.Picker.class)
+public class ShadowAsyncTask<Params, Progress, Result> extends ShadowBaseAsyncTask {
 
   @RealObject private AsyncTask<Params, Progress, Result> realAsyncTask;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -9,8 +9,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
-@Implements(AsyncTaskLoader.class)
-public class ShadowAsyncTaskLoader<D> {
+@Implements(value = AsyncTaskLoader.class, shadowPicker = ShadowBaseAsyncTaskLoader.Picker.class)
+public class ShadowAsyncTaskLoader<D> extends ShadowBaseAsyncTaskLoader {
   @RealObject private AsyncTaskLoader<D> realObject;
   private BackgroundWorker worker;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessage.java
Patch:
@@ -20,8 +20,8 @@
 import org.robolectric.util.reflector.ForType;
 import org.robolectric.util.reflector.Static;
 
-@Implements(Message.class)
-public class ShadowMessage {
+@Implements(value = Message.class /*, shadowPicker = ShadowBaseMessage.Picker.class */)
+public class ShadowMessage extends ShadowBaseMessage {
   @RealObject
   private Message realMessage;
   private Runnable scheduledRunnable;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTime.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
+import android.os.SystemClock;
 import android.text.format.Time;
 import android.util.TimeFormatException;
 import java.text.ParseException;
@@ -24,7 +25,7 @@ public class ShadowTime {
 
   @Implementation(maxSdk = KITKAT_WATCH)
   protected void setToNow() {
-    time.set(ShadowSystemClock.currentTimeMillis());
+    time.set(SystemClock.currentThreadTimeMillis());
   }
 
   private static final long SECOND_IN_MILLIS = 1000;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentControllerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows.support.v4;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.TruthJUnit.assume;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
@@ -13,9 +14,11 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.shadows.ShadowBaseLooper;
 import org.robolectric.util.TestRunnerWithManifest;
 
 @RunWith(TestRunnerWithManifest.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -230,15 +230,16 @@ public void dump_shouldDumpStructure() throws Exception {
 
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     shadowOf(root).dump(new PrintStream(out), 0);
-    assertEquals("<FrameLayout>\n" +
+    String expected = "<FrameLayout>\n" +
         "  <View/>\n" +
         "  <View/>\n" +
         "  <FrameLayout id=\"org.robolectric:id/snippet_text\">\n" +
         "    <View/>\n" +
         "    <View visibility=\"GONE\"/>\n" +
         "    <TextView visibility=\"INVISIBLE\" text=\"Here&#39;s some text!\"/>\n" +
         "  </FrameLayout>\n" +
-        "</FrameLayout>\n", out.toString());
+        "</FrameLayout>\n";
+    assertEquals(expected.replaceAll("\n", System.lineSeparator()), out.toString());
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -117,6 +117,7 @@ public void configure(InstrumentationConfiguration.Builder builder, Interceptors
     builder.doNotInstrumentPackage("androidx.test");
     builder.doNotInstrumentPackage("android.arch.persistence.room.migration");
     builder.doNotInstrumentPackage("android.support.test");
+    builder.doNotInstrumentClass("androidx.room.CoroutinesRoom$Companion");
 
     for (String packagePrefix : shadowProviders.getInstrumentedPackages()) {
       builder.addInstrumentedPackage(packagePrefix);

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -46,7 +46,8 @@ public Activity startActivitySync(final Intent intent) {
   public ActivityController<? extends Activity> startActivitySyncInternal(Intent intent) {
     ActivityInfo ai = intent.resolveActivityInfo(getTargetContext().getPackageManager(), 0);
     if (ai == null) {
-      throw new RuntimeException("Unable to resolve activity for " + intent);
+      throw new RuntimeException("Unable to resolve activity for " + intent
+          + " -- see https://github.com/robolectric/robolectric/pull/4736 for details");
     }
 
     Class<? extends Activity> activityClass;

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -429,9 +429,9 @@ public ActivityController<T> recreate() {
     attached = false;
     attach(lastNonConfigurationInstances);
     create(outState);
-    postCreate(outState);
     start();
     restoreInstanceState(outState);
+    postCreate(outState);
     resume();
     postResume();
     visible();

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -32,7 +32,6 @@
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
 import org.robolectric.plugins.DefaultSdkPicker;
-import org.robolectric.plugins.DefaultSdkProvider;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.util.TestUtil;
 import org.robolectric.util.inject.Injector;
@@ -353,7 +352,7 @@ public void testIgnored(Description description) throws Exception {
   }
 
   private List<Sdk> map(int... sdkInts) {
-    SdkCollection allSdks = new SdkCollection(new DefaultSdkProvider(null));
+    SdkCollection allSdks = TestUtil.getSdkCollection();
     return Arrays.stream(sdkInts).mapToObj(allSdks::getSdk).collect(Collectors.toList());
   }
 }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -52,7 +52,6 @@
 import org.robolectric.pluginapi.perf.Metric;
 import org.robolectric.pluginapi.perf.PerfStatsReporter;
 import org.robolectric.plugins.DefaultSdkPicker;
-import org.robolectric.plugins.DefaultSdkProvider;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.plugins.StubSdk;
 import org.robolectric.util.TempDirectory;
@@ -80,7 +79,7 @@ public void setUp() throws Exception {
     priorAlwaysInclude = System.getProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
     System.clearProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
 
-    sdkCollection = new SdkCollection(new DefaultSdkProvider(null));
+    sdkCollection = TestUtil.getSdkCollection();
   }
 
   @After

File: robolectric/src/test/java/org/robolectric/plugins/DefaultSdkPickerTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.robolectric.pluginapi.UsesSdk;
 import org.robolectric.pluginapi.config.ConfigurationStrategy.Configuration;
 import org.robolectric.plugins.HierarchicalConfigurationStrategy.ConfigurationImpl;
+import org.robolectric.util.TestUtil;
 
 @RunWith(JUnit4.class)
 public class DefaultSdkPickerTest {
@@ -197,7 +198,7 @@ private Configuration buildConfig(Config.Builder builder) {
   }
 
   private List<Sdk> map(int... sdkInts) {
-    SdkCollection allSdks = new SdkCollection(new DefaultSdkProvider(null));
+    SdkCollection allSdks = TestUtil.getSdkCollection();
     return Arrays.stream(sdkInts).mapToObj(allSdks::getSdk).collect(Collectors.toList());
   }
 }

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -66,15 +66,14 @@ public static String readString(InputStream is) throws IOException {
     return CharStreams.toString(new InputStreamReader(is, "UTF-8"));
   }
 
-  private static DependencyResolver getDependencyResolver() {
+  private static synchronized DependencyResolver getDependencyResolver() {
     if (dependencyResolver == null) {
       dependencyResolver = new LegacyDependencyResolver(System.getProperties());
     }
-
     return dependencyResolver;
   }
 
-  public static SdkCollection getSdkCollection() {
+  public static synchronized SdkCollection getSdkCollection() {
     if (sdkCollection == null) {
       sdkCollection = new SdkCollection(new DefaultSdkProvider(getDependencyResolver()));
     }

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -40,8 +40,8 @@ public void startActivity(Intent intent) {
       controller =
           Robolectric.buildActivity(activityClass, intent)
               .create()
-              .postCreate(null)
               .start()
+              .postCreate(null)
               .resume()
               .postResume()
               .visible()

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -38,6 +38,7 @@ public class ShadowUserManagerTest {
   private static final int TEST_USER_HANDLE = 0;
   private static final int PROFILE_USER_HANDLE = 2;
   private static final String PROFILE_USER_NAME = "profile";
+  private static final String SEED_ACCOUNT_TYPE = "seed_account_type";
   private static final int PROFILE_USER_FLAGS = 0;
 
   @Before

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUserManager.java
Patch:
@@ -13,6 +13,7 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.content.pm.UserInfo;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.IUserManager;
 import android.os.Process;
@@ -63,6 +64,7 @@ public class ShadowUserManager {
   private Map<Integer, UserState> userState = new HashMap<>();
   private Map<Integer, UserInfo> userInfoMap = new HashMap<>();
   private Map<Integer, List<UserInfo>> profiles = new HashMap<>();
+  private String seedAccountType;
 
   private Context context;
   private boolean enforcePermissions;

File: integration_tests/ctesque/src/test/java/android/content/res/ResourcesTest.java
Patch:
@@ -43,7 +43,6 @@
 import androidx.test.filters.SdkSuppress;
 import androidx.test.runner.AndroidJUnit4;
 import com.google.common.collect.Range;
-import java.io.File;
 import java.io.InputStream;
 import java.lang.reflect.Method;
 import org.junit.Before;
@@ -157,7 +156,7 @@ public void getText_withLayoutId() throws Exception {
     // but the actual platform behaviour is to return a string that equals "res/layout/layout_file.xml" so the current
     // Robolectric behaviour deviates from the platform as we append the full file path from the current working directory.
     assertThat(resources.getText(R.layout.different_screen_sizes, "value").toString())
-        .containsMatch("layout" + File.separator + "different_screen_sizes.xml$");
+        .containsMatch("layout/different_screen_sizes.xml$");
   }
 
   @Test

File: resources/src/main/java/org/robolectric/res/DirBaseNameFilter.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import java.io.File;
 import java.nio.file.Path;
 import java.util.function.Predicate;
 
@@ -22,11 +21,11 @@ public boolean test(Path file) {
 
   /**
    * It sure seems like a bug that Path#getFileName() returns "name/" for paths inside a jar, but
-   * "name" for paths on a regular filesystem.
+   * "name" for paths on a regular filesystem. It's always a normal slash, even on Windows. :-p
    */
   private String nameWithoutTrailingSeparator(Path file) {
     String fileName = file.getFileName().toString();
-    int trailingSlash = fileName.indexOf(File.separatorChar);
+    int trailingSlash = fileName.indexOf('/');
     if (trailingSlash != -1) {
       fileName = fileName.substring(0, trailingSlash);
     }

File: resources/src/main/java/org/robolectric/res/android/String8.java
Patch:
@@ -300,7 +300,7 @@ public String8 append(final String other) {
 String8 getPathLeaf() {
   final int cp;
   final String buf = mString.toString();
-  cp = buf.lastIndexOf(File.separatorChar);
+  cp = buf.lastIndexOf('/');
   if (cp == -1) {
     return new String8(this);
   } else {
@@ -386,8 +386,8 @@ public String8 appendPath(String name) {
       // nothing to do
       return this;
     }
-    if (name.charAt(0) != File.separatorChar) {
-      mString.append(File.separatorChar);
+    if (name.charAt(0) != '/') {
+      mString.append('/');
     }
     mString.append(name);
     return this;

File: robolectric/src/main/java/org/robolectric/internal/MavenManifestFactory.java
Patch:
@@ -35,7 +35,7 @@ public ManifestIdentifier identify(Config config) {
     if (resourceUrl != null && "file".equals(resourceUrl.getProtocol())) {
       // Construct a path to the manifest file relative to the current working directory.
       final Path workingDirectory = Paths.get(System.getProperty("user.dir"));
-      final Path absolutePath = Fs.fromUrl(resourceUrl.getPath());
+      final Path absolutePath = Fs.fromUrl(resourceUrl);
       manifestFile = workingDirectory.relativize(absolutePath);
     } else {
       manifestFile = getBaseDir().resolve(manifestPath);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -22,7 +22,6 @@
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.content.res.XmlResourceParser;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.ParcelFileDescriptor;
 import android.util.AttributeSet;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -52,6 +52,7 @@
 import org.robolectric.pluginapi.perf.Metric;
 import org.robolectric.pluginapi.perf.PerfStatsReporter;
 import org.robolectric.plugins.DefaultSdkPicker;
+import org.robolectric.plugins.DefaultSdkProvider;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.plugins.StubSdk;
 import org.robolectric.util.TempDirectory;
@@ -79,7 +80,7 @@ public void setUp() throws Exception {
     priorAlwaysInclude = System.getProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
     System.clearProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
 
-    sdkCollection = TestUtil.getSdkCollection();
+    sdkCollection = new SdkCollection(new DefaultSdkProvider(null));
   }
 
   @After

File: robolectric/src/main/java/org/robolectric/android/internal/LocalActivityInvoker.java
Patch:
@@ -32,6 +32,9 @@ public class LocalActivityInvoker implements ActivityInvoker {
   @Override
   public void startActivity(Intent intent) {
     ActivityInfo ai = intent.resolveActivityInfo(getTargetContext().getPackageManager(), 0);
+    if (ai == null) {
+      throw new RuntimeException("Unable to resolve activity for: " + intent);
+    }
     try {
       Class<? extends Activity> activityClass = Class.forName(ai.name).asSubclass(Activity.class);
       controller =

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -52,7 +52,6 @@
 import org.robolectric.pluginapi.perf.Metric;
 import org.robolectric.pluginapi.perf.PerfStatsReporter;
 import org.robolectric.plugins.DefaultSdkPicker;
-import org.robolectric.plugins.DefaultSdkProvider;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.plugins.StubSdk;
 import org.robolectric.util.TempDirectory;
@@ -80,7 +79,7 @@ public void setUp() throws Exception {
     priorAlwaysInclude = System.getProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
     System.clearProperty("robolectric.alwaysIncludeVariantMarkersInTestName");
 
-    sdkCollection = new SdkCollection(new DefaultSdkProvider(null));
+    sdkCollection = TestUtil.getSdkCollection();
   }
 
   @After

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -282,8 +282,7 @@ private class AppGetLastMatcher extends MethodInvocationMatcher {
     private final String shadowClassName;
     private final String shadowShortClassName;
 
-    AppGetLastMatcher(
-        String shadowClassName, String shadowShortClassName, String methodName) {
+    AppGetLastMatcher(String shadowClassName, String shadowShortClassName, String methodName) {
       this.methodName = methodName;
       this.shadowClassName = shadowClassName;
       this.shadowShortClassName = shadowShortClassName;

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.errorprone.bugpatterns;
 
-import static com.google.errorprone.BugPattern.Category.ANDROID;
 import static com.google.errorprone.BugPattern.SeverityLevel.WARNING;
 import static com.google.errorprone.matchers.Description.NO_MATCH;
 import static com.google.errorprone.matchers.Matchers.instanceMethod;
@@ -47,7 +46,6 @@
 @BugPattern(
     name = "DeprecatedMethods",
     summary = "Robolectric shadows shouldn't be stored to variables or fields.",
-    category = ANDROID,
     severity = WARNING,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/RobolectricShadow.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.errorprone.bugpatterns;
 
-import static com.google.errorprone.BugPattern.Category.ANDROID;
 import static com.google.errorprone.BugPattern.SeverityLevel.SUGGESTION;
 import static com.google.errorprone.matchers.Matchers.hasAnnotation;
 
@@ -48,7 +47,6 @@
 @BugPattern(
     name = "RobolectricShadow",
     summary = "Robolectric @Implementation methods should be protected.",
-    category = ANDROID,
     severity = SUGGESTION,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheck.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.errorprone.bugpatterns;
 
-import static com.google.errorprone.BugPattern.Category.ANDROID;
 import static com.google.errorprone.BugPattern.SeverityLevel.SUGGESTION;
 import static com.google.errorprone.matchers.Description.NO_MATCH;
 import static com.google.errorprone.matchers.Matchers.argumentCount;
@@ -85,7 +84,6 @@
 @BugPattern(
     name = "ShadowUsageCheck",
     summary = "Robolectric shadows shouldn't be stored to variables or fields.",
-    category = ANDROID,
     severity = SUGGESTION,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,

File: shadows/framework/src/main/java/org/robolectric/shadows/util/DataSource.java
Patch:
@@ -41,7 +41,7 @@ public static DataSource toDataSource(FileDescriptor fd) {
   }
 
   public static DataSource toDataSource(MediaDataSource mediaDataSource) {
-    return toDataSource(mediaDataSource.toString());
+    return toDataSource("MediaDataSource");
   }
 
   @SuppressWarnings("ObjectToString")

File: robolectric/src/test/java/org/robolectric/android/AndroidInterceptorsIntegrationTest.java
Patch:
@@ -36,7 +36,8 @@ public void systemLogE_shouldWriteToStderr() throws Throwable {
           ClassParameter.from(String.class, "world"),
           ClassParameter.from(Throwable.class, new Throwable("throw")));
       assertThat(stream.toString())
-          .isEqualTo("System.logE: hello\nSystem.logE: worldjava.lang.Throwable: throw\n");
+          .isEqualTo(String.format("System.logE: hello%n"
+              + "System.logE: worldjava.lang.Throwable: throw%n"));
     } finally {
       System.setErr(stderr);
     }

File: robolectric/src/test/java/org/robolectric/plugins/LegacyDependencyResolverTest.java
Patch:
@@ -110,7 +110,8 @@ public void whenNoPropertiesOrResourceFile() throws Exception {
     DependencyResolver resolver = new LegacyDependencyResolver(properties, mockClassLoader);
 
     URL jarUrl = resolver.getLocalArtifactUrl(DEPENDENCY_COORDS);
-    assertThat(Fs.fromUrl(jarUrl)).isEqualTo(Fs.fromUrl("file:///some/fake/file.jar"));
+    assertThat(Fs.fromUrl(jarUrl))
+        .isEqualTo(Paths.get("/some/fake/file.jar").toAbsolutePath());
   }
 
   public static class FakeMavenDependencyResolver implements DependencyResolver {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -234,6 +234,7 @@ protected int getComponentEnabledSetting(ComponentName componentName) {
   }
 
   @Implementation
+  @Override
   protected @Nullable String[] getPackagesForUid(int uid) {
     String[] packageNames = packagesForUid.get(uid);
     if (packageNames != null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocaleData.java
Patch:
@@ -97,10 +97,10 @@ private static void setEnUsLocaleData(LocaleData localeData) {
 
     if (getApiLevel() >= android.os.Build.VERSION_CODES.P) {
       // P uses a String
-      localeData.perMill = "‰";
+      localeData.perMill = "\u2030"; // '‰'
     } else {
       // Up to P was a char
-      _localeData_.setPerMill('‰');
+      _localeData_.setPerMill('\u2030'); // '‰'
     }
 
     localeData.monetarySeparator = '.';

File: robolectric/src/main/java/org/robolectric/plugins/LegacyDependencyResolver.java
Patch:
@@ -61,7 +61,8 @@ private static DependencyResolver pickOne(Properties properties, ClassLoader cla
     }
 
     String dependencyDir = properties.getProperty("robolectric.dependency.dir");
-    if (dependencyDir != null || Boolean.valueOf(properties.getProperty("robolectric.offline"))) {
+    if (dependencyDir != null
+        || Boolean.parseBoolean(properties.getProperty("robolectric.offline"))) {
       return new LocalDependencyResolver(new File(dependencyDir == null ? "." : dependencyDir));
     }
 

File: robolectric/src/test/java/org/robolectric/plugins/LegacyDependencyResolverTest.java
Patch:
@@ -11,11 +11,14 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.internal.dependency.DependencyJar;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.res.Fs;
 import org.robolectric.util.TempDirectory;
 
+@RunWith(JUnit4.class)
 public class LegacyDependencyResolverTest {
 
   private static final String VERSION = "4.3_r2-robolectric-r1";

File: utils/src/main/java/org/robolectric/util/TempDirectory.java
Patch:
@@ -9,7 +9,7 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 
-@SuppressWarnings("NewApi")
+@SuppressWarnings({"NewApi", "AndroidJdkLibsChecker"})
 public class TempDirectory {
   private final Path basePath;
 

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -6,11 +6,11 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.file.Path;
-import org.robolectric.LegacyDependencyResolver;
 import org.robolectric.R;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.plugins.DefaultSdkProvider;
+import org.robolectric.plugins.LegacyDependencyResolver;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.res.Fs;
 import org.robolectric.res.ResourcePath;

File: robolectric/src/main/java/org/robolectric/internal/SandboxFactory.java
Patch:
@@ -129,7 +129,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || getClass() != o.getClass()) {
+      if (!(o instanceof SandboxKey)) {
         return false;
       }
       SandboxKey that = (SandboxKey) o;

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -143,6 +143,7 @@ public Environment getWrapped() {
       return wrapped;
     }
 
+    @Override
     public void callSetUpApplicationState() {
       wrapped.setUpApplicationState(method, config, appManifest);
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -1495,7 +1495,7 @@ public void setShouldShowActivityChooser(boolean shouldShowActivityChooser) {
 
   /** Set value to be returned by {@link PackageManager#isSafeMode}. */
   public void setSafeMode(boolean safeMode) {
-    this.safeMode = safeMode;
+    ShadowPackageManager.safeMode = safeMode;
   }
 
   @Resetter

File: shadows/supportv4/src/main/java/org/robolectric/shadows/support/v4/SupportFragmentTestUtil.java
Patch:
@@ -10,7 +10,8 @@
 /**
  * Utilities for creating Fragments for testing.
  *
- * @deprecated Please use {@link SupportFragmentController} instead.
+ * @deprecated Android encourages developers to use androidx fragments, to test these use {@link
+ *     androidx.fragment.app.testing.FragmentScenario}.
  */
 @Deprecated
 public class SupportFragmentTestUtil {

File: annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -452,12 +452,12 @@ public Builder setAssetDir(String assetDir) {
       return this;
     }
 
-    public Builder setShadows(Class<?>[] shadows) {
+    public Builder setShadows(Class<?>... shadows) {
       this.shadows = shadows;
       return this;
     }
 
-    public Builder setInstrumentedPackages(String[] instrumentedPackages) {
+    public Builder setInstrumentedPackages(String... instrumentedPackages) {
       this.instrumentedPackages = instrumentedPackages;
       return this;
     }
@@ -467,7 +467,7 @@ public Builder setApplication(Class<? extends Application> application) {
       return this;
     }
 
-    public Builder setLibraries(String[] libraries) {
+    public Builder setLibraries(String... libraries) {
       this.libraries = libraries;
       return this;
     }

File: pluginapi/src/main/java/org/robolectric/pluginapi/SdkPicker.java
Patch:
@@ -2,10 +2,10 @@
 
 import java.util.List;
 import javax.annotation.Nonnull;
-import org.robolectric.annotation.Config;
+import org.robolectric.pluginapi.ConfigurationStrategy.Configuration;
 
 public interface SdkPicker {
 
   @Nonnull
-  List<Sdk> selectSdks(Config config, UsesSdk usesSdk);
+  List<Sdk> selectSdks(Configuration configuration, UsesSdk usesSdk);
 }

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.lang.reflect.Method;
 import org.robolectric.ApkLoader;
-import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.pluginapi.ConfigurationStrategy.Configuration;
 import org.robolectric.pluginapi.Sdk;
 
 public interface ParallelUniverseInterface {
@@ -14,7 +14,7 @@ public interface ParallelUniverseInterface {
 
   void setUpApplicationState(
       ApkLoader apkLoader, Method method,
-      Config config, AndroidManifest appManifest,
+      Configuration config, AndroidManifest appManifest,
       SdkEnvironment sdkEnvironment);
 
   Thread getMainThread();

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -9,12 +9,12 @@
 import javax.annotation.Nonnull;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
-import org.robolectric.annotation.Config;
 import org.robolectric.internal.ParallelUniverseInterface;
 import org.robolectric.internal.SdkEnvironment;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration.Builder;
 import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.pluginapi.ConfigurationStrategy.Configuration;
 import org.robolectric.pluginapi.Sdk;
 
 /**
@@ -80,7 +80,7 @@ public static class BootstrapWrapper implements ParallelUniverseInterface {
     public boolean legacyResources;
     public ApkLoader apkLoader;
     public Method method;
-    public Config config;
+    public Configuration config;
     public AndroidManifest appManifest;
     public SdkEnvironment sdkEnvironment;
 
@@ -100,7 +100,7 @@ public void setResourcesMode(boolean legacyResources) {
     }
 
     @Override
-    public void setUpApplicationState(ApkLoader apkLoader, Method method, Config config,
+    public void setUpApplicationState(ApkLoader apkLoader, Method method, Configuration config,
         AndroidManifest appManifest, SdkEnvironment sdkEnvironment) {
       this.apkLoader = apkLoader;
       this.method = method;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -130,7 +130,7 @@ public void testsWithUnsupportedSdkShouldBeIgnored() throws Exception {
   @Test
   public void supportsOldGetConfigUntil4dot3() throws Exception {
     Implementation overriddenConfig = Config.Builder.defaults().build();
-    List<FrameworkMethod> children = new RobolectricTestRunner(TestWithTwoMethods.class) {
+    List<FrameworkMethod> children = new SingleSdkRobolectricTestRunner(TestWithTwoMethods.class) {
       @Override
       public Config getConfig(Method method) {
         return overriddenConfig;

File: robolectric/src/main/java/org/robolectric/plugins/ConfigConfigurer.java
Patch:
@@ -21,14 +21,14 @@ public static Config get(Configuration testConfig) {
   }
 
   protected ConfigConfigurer(PackagePropertiesLoader packagePropertiesLoader) {
-    this(packagePropertiesLoader, () -> Config.Builder.defaults().build());
+    this(packagePropertiesLoader, () -> new Config.Builder().build());
   }
 
   public ConfigConfigurer(
       PackagePropertiesLoader packagePropertiesLoader,
       DefaultConfigProvider defaultConfigProvider) {
     this.packagePropertiesLoader = packagePropertiesLoader;
-    this.defaultConfig = defaultConfigProvider.get();
+    this.defaultConfig = Config.Builder.defaults().overlay(defaultConfigProvider.get()).build();
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/plugins/PackagePropertiesLoader.java
Patch:
@@ -24,7 +24,7 @@ public class PackagePropertiesLoader {
    */
   private final Map<String, Properties> cache = new LinkedHashMap<String, Properties>() {
     @Override
-    protected boolean removeEldestEntry(Map.Entry eldest) {
+    protected boolean removeEldestEntry(Map.Entry<String, Properties> eldest) {
       return size() > 3;
     }
   };

File: robolectric/src/main/java/org/robolectric/plugins/HierarchicalConfigurationStrategy.java
Patch:
@@ -16,7 +16,7 @@
  *
  * See [Configuring Robolectric](http://robolectric.org/configuring/).
  */
-@SuppressWarnings("NewApi")
+@SuppressWarnings({"AndroidJdkLibsChecker", "NewApi"})
 @AutoService(ConfigurationStrategy.class)
 @Priority(Integer.MIN_VALUE)
 public class HierarchicalConfigurationStrategy implements ConfigurationStrategy {

File: robolectric/src/main/java/org/robolectric/plugins/PackagePropertiesLoader.java
Patch:
@@ -15,7 +15,7 @@
  * Robolectric](http://robolectric.org/configuring/) but it may be useful for other
  * {@link org.robolectric.pluginapi.Configurer}s as well.
  */
-@SuppressWarnings("NewApi")
+@SuppressWarnings({"AndroidJdkLibsChecker", "NewApi"})
 public class PackagePropertiesLoader {
 
   /**

File: robolectric/src/test/java/org/robolectric/plugins/CustomConfigurerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.robolectric.config.ConfigurationRegistry;
 import org.robolectric.pluginapi.ConfigurationStrategy;
 import org.robolectric.pluginapi.Configurer;
+import org.robolectric.plugins.ConfigConfigurer.DefaultConfigProvider;
 
 @RunWith(JUnit4.class)
 public class CustomConfigurerTest {
@@ -110,7 +111,7 @@ private List<String> runAndGetFailures(Class<TestWithConfig> testClass)
 
     HierarchicalConfigurationStrategy configurationStrategy =
         new HierarchicalConfigurationStrategy(
-            new ConfigConfigurer(new PackagePropertiesLoader()),
+            new ConfigConfigurer(new PackagePropertiesLoader(), new DefaultConfigProvider()),
             new SomeConfigConfigurer());
 
     SingleSdkRobolectricTestRunner testRunner = new SingleSdkRobolectricTestRunner(

File: robolectric/src/test/java/org/robolectric/plugins/HierarchicalConfigurationStrategyTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.robolectric.pluginapi.ConfigurationStrategy;
 import org.robolectric.pluginapi.ConfigurationStrategy.Configuration;
 import org.robolectric.pluginapi.Configurer;
+import org.robolectric.plugins.ConfigConfigurer.DefaultConfigProvider;
 import org.robolectric.shadows.ShadowView;
 import org.robolectric.shadows.ShadowViewGroup;
 import org.robolectric.shadows.testing.TestApplication;
@@ -497,7 +498,8 @@ InputStream getResourceAsStream(String resourceName) {
       }
     };
     ConfigurationStrategy defaultConfigStrategy =
-        new HierarchicalConfigurationStrategy(new ConfigConfigurer(packagePropertiesLoader) {
+        new HierarchicalConfigurationStrategy(
+            new ConfigConfigurer(packagePropertiesLoader, new DefaultConfigProvider()) {
           @Override @Nonnull
           public Config defaultConfig() {
             return globalConfig == null ? super.defaultConfig() : globalConfig;

File: utils/src/main/java/org/robolectric/util/inject/AutoFactory.java
Patch:
@@ -6,6 +6,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/** Identifies an interface that will be used to create objects in a subinjector. */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: utils/src/main/java/org/robolectric/util/inject/Injector.java
Patch:
@@ -306,6 +306,7 @@ private boolean isSystem(Class<?> clazz) {
     return aPackage == null || aPackage.getName().startsWith("java.");
   }
 
+  /** Identifies an injection point. */
   public static class Key<T> {
 
     @Nonnull
@@ -330,8 +331,7 @@ public boolean equals(Object o) {
         return false;
       }
       Key key = (Key) o;
-      return theInterface.equals(key.theInterface) &&
-          Objects.equals(name, key.name);
+      return theInterface.equals(key.theInterface) && Objects.equals(name, key.name);
     }
 
     @Override

File: robolectric/src/test/java/org/robolectric/BootstrapDeferringRobolectricTestRunner.java
Patch:
@@ -9,7 +9,6 @@
 import javax.annotation.Nonnull;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
-import org.robolectric.annotation.Config;
 import org.robolectric.internal.ParallelUniverseInterface;
 import org.robolectric.internal.SdkEnvironment;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;

File: robolectric/src/test/java/org/robolectric/SingleSdkRobolectricTestRunner.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.List;
 import javax.annotation.Nonnull;
 import org.junit.runners.model.InitializationError;
-import org.robolectric.annotation.Config;
 import org.robolectric.pluginapi.ConfigurationStrategy.ConfigCollection;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;

File: robolectric/src/test/java/org/robolectric/plugins/CustomConfigurerTest.java
Patch:
@@ -98,7 +98,8 @@ public SomeConfig merge(@Nonnull SomeConfig parentConfig, @Nonnull SomeConfig ch
     }
   }
 
-  private List<String> runAndGetFailures(Class<TestWithConfig> testClass) throws InitializationError {
+  private List<String> runAndGetFailures(Class<TestWithConfig> testClass)
+      throws InitializationError {
     RunNotifier notifier = new RunNotifier();
     FailureListener failureListener = new FailureListener();
     notifier.addListener(failureListener);

File: robolectric/src/main/java/org/robolectric/ConfigMerger.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric;
 
-import org.robolectric.plugins.DefaultConfigurationStrategy;
+import org.robolectric.plugins.HierarchicalConfigurationStrategy;
 
-/** @deprecated use {@link DefaultConfigurationStrategy} instead. */
+/** @deprecated use {@link HierarchicalConfigurationStrategy} instead. */
 @Deprecated
-public class ConfigMerger extends DefaultConfigurationStrategy {}
+public class ConfigMerger extends HierarchicalConfigurationStrategy {}

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -52,7 +52,7 @@
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
 import org.robolectric.plugins.ConfigConfigurer;
-import org.robolectric.plugins.DefaultConfigurationStrategy;
+import org.robolectric.plugins.HierarchicalConfigurationStrategy;
 import org.robolectric.util.PerfStatsCollector;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.inject.Injector;
@@ -103,7 +103,7 @@ public Ctx(SandboxFactory sandboxFactory, ApkLoader apkLoader, SdkPicker sdkPick
       this.sandboxFactory = sandboxFactory;
       this.apkLoader = apkLoader;
       this.sdkPicker = sdkPicker;
-      this.configurationStrategy = new DefaultConfigurationStrategy(new ConfigConfigurer());
+      this.configurationStrategy = new HierarchicalConfigurationStrategy(new ConfigConfigurer());
     }
   }
 

File: robolectric/src/main/java/org/robolectric/plugins/HierarchicalConfigurationStrategy.java
Patch:
@@ -26,7 +26,7 @@
 @SuppressWarnings("NewApi")
 @AutoService(ConfigurationStrategy.class)
 @Priority(Integer.MIN_VALUE)
-public class DefaultConfigurationStrategy implements ConfigurationStrategy {
+public class HierarchicalConfigurationStrategy implements ConfigurationStrategy {
   private final Map<String, Object[]> packageConfigsCache =
       new LinkedHashMap<String, Object[]>() {
         @Override
@@ -38,7 +38,7 @@ protected boolean removeEldestEntry(Map.Entry eldest) {
   private final Configurer<?>[] configurers;
   private final Object[] defaultConfigs;
 
-  public DefaultConfigurationStrategy(Configurer<?>... configurers) {
+  public HierarchicalConfigurationStrategy(Configurer<?>... configurers) {
     this.configurers = configurers;
 
     defaultConfigs = new Object[configurers.length];

File: robolectric/src/test/java/org/robolectric/SingleSdkRobolectricTestRunner.java
Patch:
@@ -35,7 +35,7 @@ public SingleSdkPicker() {
     }
 
     SingleSdkPicker(int apiLevel) {
-      this.sdk = TestUtil.getSdkCollection().getSdk(apiLevel);
+      this.sdk = TestUtil.getSdkProvider().getSdk(apiLevel);
     }
 
     @Nonnull

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.robolectric.internal.AndroidConfigurer;
 import org.robolectric.internal.SandboxFactory;
 import org.robolectric.plugins.DefaultSdkProvider;
-import org.robolectric.plugins.SdkCollection;
 
 @RunWith(JUnit4.class)
 public class AndroidSandboxClassLoaderTest {
@@ -23,8 +22,8 @@ public class AndroidSandboxClassLoaderTest {
   @Before
   public void setUp() throws Exception {
     classLoader =
-        new SandboxFactory(new SdkCollection(new DefaultSdkProvider(null)))
-            .createClassLoader(configureBuilder().build());
+        new SandboxFactory(new DefaultSdkProvider(null))
+        .createClassLoader(configureBuilder().build());
   }
 
   @Test

File: utils/reflector/src/test/java/org/robolectric/util/reflector/ReflectorTest.java
Patch:
@@ -88,7 +88,7 @@ public void reflector_throwsCorrectExceptions() throws Exception {
     try {
       reflector.throwException(expected);
       fail("should have failed");
-    } catch (Exception thrown) {
+    } catch (Throwable thrown) {
       actual = thrown;
     }
     assertThat(actual).isSameAs(expected);

File: utils/reflector/src/test/java/org/robolectric/util/reflector/ReflectorTest.java
Patch:
@@ -88,7 +88,7 @@ public void reflector_throwsCorrectExceptions() throws Exception {
     try {
       reflector.throwException(expected);
       fail("should have failed");
-    } catch (Throwable thrown) {
+    } catch (Exception thrown) {
       actual = thrown;
     }
     assertThat(actual).isSameAs(expected);

File: pluginapi/src/main/java/org/robolectric/pluginapi/Sdk.java
Patch:
@@ -98,7 +98,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return "API Level " + apiLevel;
+    return "SDK " + apiLevel;
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkPicker.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.plugins;
 
-import androidx.annotation.VisibleForTesting;
 import com.google.auto.service.AutoService;
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.Collections;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
 import org.robolectric.plugins.DefaultSdkPicker;
+import org.robolectric.plugins.DefaultSdkProvider;
 import org.robolectric.plugins.SdkCollection;
 import org.robolectric.util.TestUtil;
 import org.robolectric.util.inject.Injector;
@@ -352,6 +353,7 @@ public void testIgnored(Description description) throws Exception {
   }
 
   private List<Sdk> map(int... sdkInts) {
-    return Arrays.stream(sdkInts).mapToObj(sdkCollection::getSdk).collect(Collectors.toList());
+    SdkCollection allSdks = new SdkCollection(new DefaultSdkProvider(null));
+    return Arrays.stream(sdkInts).mapToObj(allSdks::getSdk).collect(Collectors.toList());
   }
 }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -49,6 +49,7 @@
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkPicker;
+import org.robolectric.plugins.SdkCollection;
 import org.robolectric.util.PerfStatsCollector;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.inject.Injector;
@@ -85,6 +86,7 @@ protected static Injector defaultInjector() {
         .register(Properties.class, System.getProperties())
         .registerDefault(ApkLoader.class, ApkLoader.class)
         .registerDefault(SandboxFactory.class, SandboxFactory.class)
+        .registerDefault(SdkCollection.class, SdkCollection.class)
         .registerDefault(Ctx.class, Ctx.class);
   }
 

File: robolectric/src/main/java/org/robolectric/plugins/SdkCollection.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.SortedSet;
 import java.util.TreeMap;
 import java.util.TreeSet;
+import javax.inject.Inject;
 import org.robolectric.pluginapi.Sdk;
 import org.robolectric.pluginapi.SdkProvider;
 
@@ -15,6 +16,7 @@ public class SdkCollection {
   private final SortedMap<Integer, Sdk> knownSdks = new TreeMap<>();
   private final SortedSet<Sdk> supportedSdks;
 
+  @Inject
   public SdkCollection(SdkProvider sdkProvider) {
     Collection<Sdk> knownSdks = sdkProvider.getSdks();
     SortedSet<Sdk> supportedSdks = new TreeSet<>();

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -94,7 +94,7 @@ public void ignoredTestCanSpecifyUnsupportedSdkWithoutExploding() throws Excepti
     RobolectricTestRunner runner = new RobolectricTestRunner(TestWithOldSdk.class);
     runner.run(notifier);
     assertThat(events).containsExactly(
-        "failure: Robolectric does not support API level 11.",
+        "failure: API level 11 is not available",
         "ignored: ignoredOldSdkMethod(org.robolectric.RobolectricTestRunnerTest$TestWithOldSdk)"
     );
   }

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/MavenDependencyResolver.java
Patch:
@@ -58,6 +58,7 @@ public URL[] getLocalArtifactUrls(DependencyJar... dependencies) {
       remoteRepository.addAuthentication(authentication);
     }
     dependenciesTask.addConfiguredRemoteRepository(remoteRepository);
+    final Project project = new Project();
     dependenciesTask.setProject(project);
     for (DependencyJar dependencyJar : dependencies) {
       Dependency dependency = new Dependency();

File: robolectric/src/main/java/org/robolectric/plugins/DefaultSdkPicker.java
Patch:
@@ -133,8 +133,7 @@ protected Set<Sdk> configuredSdks(Config config, UsesSdk usesSdk) {
   private Sdk findSdk(int apiLevel) {
     Sdk sdk = sdksByApiLevel.get(apiLevel);
     if (sdk == null) {
-      throw new IllegalArgumentException(
-          String.format("Robolectric does not support API level %d.", apiLevel));
+      return new UnknownSdk(apiLevel);
     }
     return sdk;
   }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -327,7 +327,7 @@ private static List<Integer> apisFor(List<FrameworkMethod> children) {
     List<Integer> apis = new ArrayList<>();
     for (FrameworkMethod child : children) {
       apis.add(
-          ((RobolectricTestRunner.RobolectricFrameworkMethod) child).sdk.getApiLevel());
+          ((RobolectricTestRunner.RobolectricFrameworkMethod) child).getSdk().getApiLevel());
     }
     return apis;
   }

File: pluginapi/src/main/java/org/robolectric/internal/Sdk.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.internal;
 
+import java.nio.file.Path;
 import javax.annotation.Nonnull;
 import org.robolectric.internal.dependency.DependencyJar;
 
@@ -13,6 +14,8 @@ public interface Sdk extends Comparable<Sdk> {
 
   DependencyJar getAndroidSdkDependency();
 
+  Path getJarPath();
+
   boolean isKnown();
 
   boolean isSupported();

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -257,10 +257,9 @@ private Package loadAppPackage_measured(ApkLoader apkLoader, Config config,
       }
     } else {
       RuntimeEnvironment.compileTimeSystemResourcesFile =
-          apkLoader.getCompileTimeSystemResourcesFile(sdkEnvironment);
+          sdkEnvironment.getCompileTimeSdk().getJarPath();
 
-      RuntimeEnvironment.setAndroidFrameworkJarPath(
-          Util.pathFrom(apkLoader.getArtifactUrl(sdk.getAndroidSdkDependency())));
+      RuntimeEnvironment.setAndroidFrameworkJarPath(sdk.getJarPath());
 
       Path packageFile = appManifest.getApkFile();
       parsedPackage = ShadowPackageParser.callParsePackage(packageFile);

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -66,9 +66,9 @@ public void setUp() {
     runListener = new MyRunListener();
     runNotifier = new RunNotifier();
     runNotifier.addListener(runListener);
-    sdkProvider = new DefaultSdkProvider();
+    sdkProvider = new DefaultSdkProvider(null);
     delegateSdkPicker =
-        new DefaultSdkPicker(sdkProvider, map(APIS_FOR_TEST), null);
+        new DefaultSdkPicker(map(APIS_FOR_TEST), null);
 
     priorResourcesMode = System.getProperty("robolectric.resourcesMode");
     System.setProperty("robolectric.resourcesMode", "legacy");
@@ -111,7 +111,7 @@ public void withConfigSdkAndMinMax_shouldUseMinMax() throws Throwable {
 
   @Test
   public void withEnabledSdks_createChildrenForEachSupportedSdk() throws Throwable {
-    delegateSdkPicker = new DefaultSdkPicker(sdkProvider, map(16, 17), null);
+    delegateSdkPicker = new DefaultSdkPicker(map(16, 17), null);
 
     runner = runnerOf(TestWithNoConfig.class);
     assertThat(runner.getChildren()).hasSize(2);

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -145,8 +145,8 @@ private void assertNoFailures(Result result) {
 
   public static class Runner extends RobolectricTestRunner {
 
-    static final DefaultSdkProvider SDK_PROVIDER = new DefaultSdkProvider();
-    static final DefaultSdkPicker SDK_PICKER = new DefaultSdkPicker(SDK_PROVIDER,
+    static final DefaultSdkProvider SDK_PROVIDER = new DefaultSdkProvider(null);
+    static final DefaultSdkPicker SDK_PICKER = new DefaultSdkPicker(
         singletonList(SDK_PROVIDER.getSdk(JELLY_BEAN)), null);
     static final Injector INJECTOR = defaultInjector().register(SdkPicker.class, SDK_PICKER);
 

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -22,7 +22,7 @@ public class AndroidSandboxClassLoaderTest {
   @Before
   public void setUp() throws Exception {
     classLoader =
-        new SandboxFactory(dependency -> null, new DefaultSdkProvider())
+        new SandboxFactory(new DefaultSdkProvider(null))
         .createClassLoader(configureBuilder().build());
   }
 

File: robolectric/src/test/java/org/robolectric/plugins/DefaultSdkPickerTest.java
Patch:
@@ -30,8 +30,8 @@ public class DefaultSdkPickerTest {
   @Before
   public void setUp() throws Exception {
     usesSdk = mock(UsesSdk.class);
-    sdkProvider = new DefaultSdkProvider();
-    sdkPicker = new DefaultSdkPicker(sdkProvider, map(sdkInts), null);
+    sdkProvider = new DefaultSdkProvider(null);
+    sdkPicker = new DefaultSdkPicker(map(sdkInts), null);
   }
 
   @Test
@@ -174,7 +174,7 @@ public void withExplicitSdk_selectSdks() throws Exception {
   public void withEnabledSdks_shouldRestrictAsSpecified() throws Exception {
     when(usesSdk.getMinSdkVersion()).thenReturn(16);
     when(usesSdk.getMaxSdkVersion()).thenReturn(23);
-    sdkPicker = new DefaultSdkPicker(sdkProvider, map(sdkInts), map(17, 18));
+    sdkPicker = new DefaultSdkPicker(map(sdkInts), map(17, 18));
     assertThat(sdkPicker.selectSdks(new Config.Builder().setSdk(Config.ALL_SDKS).build(), usesSdk))
         .containsExactly(sdkProvider.getSdk(17), sdkProvider.getSdk(18));
   }

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -24,7 +24,7 @@ public abstract class TestUtil {
   private static ResourcePath TEST_RESOURCE_PATH;
   private static File testDirLocation;
   private static LegacyDependencyResolver dependencyResolver;
-  private static final SdkProvider sdkProvider = new DefaultSdkProvider();
+  private static final SdkProvider sdkProvider = new DefaultSdkProvider(null);
 
   public static Path resourcesBaseDir() {
     return resourcesBaseDirFile().toPath();

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/MavenDependencyResolver.java
Patch:
@@ -7,14 +7,14 @@
 import java.net.URL;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
+import java.nio.file.Paths;
 import java.util.Hashtable;
 import org.apache.maven.artifact.ant.Authentication;
 import org.apache.maven.artifact.ant.DependenciesTask;
 import org.apache.maven.artifact.ant.RemoteRepository;
 import org.apache.maven.model.Dependency;
 import org.apache.tools.ant.Project;
 import org.robolectric.MavenRoboSettings;
-import org.robolectric.util.Util;
 
 public class MavenDependencyResolver implements DependencyResolver {
   private final Project project = new Project();
@@ -44,6 +44,7 @@ public URL[] getLocalArtifactUrls(DependencyJar dependency) {
    * Get an array of local artifact URLs for the given dependencies. The order of the URLs is guaranteed to be the
    * same as the input order of dependencies, i.e., urls[i] is the local artifact URL for dependencies[i].
    */
+  @SuppressWarnings("NewApi")
   public URL[] getLocalArtifactUrls(DependencyJar... dependencies) {
     DependenciesTask dependenciesTask = createDependenciesTask();
     configureMaven(dependenciesTask);
@@ -77,7 +78,7 @@ public URL[] getLocalArtifactUrls(DependencyJar... dependencies) {
     URL[] urls = new URL[dependencies.length];
     for (int i = 0; i < urls.length; i++) {
       try {
-        urls[i] = Util.url(artifacts.get(key(dependencies[i])));
+        urls[i] = Paths.get(artifacts.get(key(dependencies[i]))).toUri().toURL();
       } catch (MalformedURLException e) {
         throw new RuntimeException(e);
       }

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -71,6 +71,7 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TempDirectory;
+import org.robolectric.util.Util;
 
 @SuppressLint("NewApi")
 public class ParallelUniverse implements ParallelUniverseInterface {
@@ -259,7 +260,7 @@ private Package loadAppPackage_measured(ApkLoader apkLoader, Config config,
           apkLoader.getCompileTimeSystemResourcesFile(sdkEnvironment);
 
       RuntimeEnvironment.setAndroidFrameworkJarPath(
-          apkLoader.getArtifactUrl(sdkConfig.getAndroidSdkDependency()).getFile());
+          Util.pathFrom(apkLoader.getArtifactUrl(sdkConfig.getAndroidSdkDependency())));
 
       Path packageFile = appManifest.getApkFile();
       parsedPackage = ShadowPackageParser.callParsePackage(packageFile);

File: robolectric/src/main/java/org/robolectric/internal/SdkEnvironment.java
Patch:
@@ -3,7 +3,6 @@
 import java.net.URL;
 import java.nio.file.FileSystem;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import javax.annotation.Nonnull;
 import org.robolectric.internal.bytecode.Sandbox;
 import org.robolectric.internal.dependency.DependencyJar;
@@ -12,6 +11,7 @@
 import org.robolectric.res.PackageResourceTable;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.res.ResourceTableFactory;
+import org.robolectric.util.Util;
 
 @SuppressWarnings("NewApi")
 public class SdkEnvironment extends Sandbox {
@@ -31,8 +31,8 @@ public synchronized Path getCompileTimeSystemResourcesFile(
       DependencyResolver dependencyResolver) {
     if (compileTimeSystemResourcesFile == null) {
       DependencyJar compileTimeJar = compileTimeSdkConfig.getAndroidSdkDependency();
-      compileTimeSystemResourcesFile =
-          Paths.get(dependencyResolver.getLocalArtifactUrl(compileTimeJar).getFile());
+      URL localArtifactUrl = dependencyResolver.getLocalArtifactUrl(compileTimeJar);
+      compileTimeSystemResourcesFile = Util.pathFrom(localArtifactUrl);
     }
     return compileTimeSystemResourcesFile;
   }

File: shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -31,7 +31,7 @@ public class RuntimeEnvironment {
   private static ResourceTable appResourceTable;
   private static ResourceTable compileTimeResourceTable;
   private static TempDirectory tempDirectory = new TempDirectory("no-test-yet");
-  private static String androidFrameworkJar;
+  private static Path androidFrameworkJar;
   public static Path compileTimeSystemResourcesFile;
 
   private static boolean useLegacyResources;
@@ -208,11 +208,11 @@ public static TempDirectory getTempDirectory() {
     return tempDirectory;
   }
 
-  public static void setAndroidFrameworkJarPath(String localArtifactPath) {
+  public static void setAndroidFrameworkJarPath(Path localArtifactPath) {
     RuntimeEnvironment.androidFrameworkJar = localArtifactPath;
   }
 
-  public static String getAndroidFrameworkJarPath() {
+  public static Path getAndroidFrameworkJarPath() {
     return RuntimeEnvironment.androidFrameworkJar;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscApkAssets9.java
Patch:
@@ -160,7 +160,7 @@ protected static ApkAssets loadFromPath(String path, boolean system)
             + " sdk=" + RuntimeEnvironment.getApiLevel());
 
     if (FRAMEWORK_APK_PATH.equals(path)) {
-      path = RuntimeEnvironment.getAndroidFrameworkJarPath();
+      path = RuntimeEnvironment.getAndroidFrameworkJarPath().toString();
     }
 
     String finalPath = path;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -1261,7 +1261,7 @@ protected void init(boolean isSystem) {
     //    verifySystemIdmaps();
     //  }
 
-    String androidFrameworkJarPath = RuntimeEnvironment.getAndroidFrameworkJarPath();
+    Path androidFrameworkJarPath = RuntimeEnvironment.getAndroidFrameworkJarPath();
     Preconditions.checkNotNull(androidFrameworkJarPath);
 
     if (isSystem) {

File: plugins/maven-dependency-resolver/src/main/java/org/robolectric/internal/dependency/MavenDependencyResolver.java
Patch:
@@ -7,14 +7,14 @@
 import java.net.URL;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
+import java.nio.file.Paths;
 import java.util.Hashtable;
 import org.apache.maven.artifact.ant.Authentication;
 import org.apache.maven.artifact.ant.DependenciesTask;
 import org.apache.maven.artifact.ant.RemoteRepository;
 import org.apache.maven.model.Dependency;
 import org.apache.tools.ant.Project;
 import org.robolectric.MavenRoboSettings;
-import org.robolectric.util.Util;
 
 public class MavenDependencyResolver implements DependencyResolver {
   private final Project project = new Project();
@@ -44,6 +44,7 @@ public URL[] getLocalArtifactUrls(DependencyJar dependency) {
    * Get an array of local artifact URLs for the given dependencies. The order of the URLs is guaranteed to be the
    * same as the input order of dependencies, i.e., urls[i] is the local artifact URL for dependencies[i].
    */
+  @SuppressWarnings("NewApi")
   public URL[] getLocalArtifactUrls(DependencyJar... dependencies) {
     DependenciesTask dependenciesTask = createDependenciesTask();
     configureMaven(dependenciesTask);
@@ -77,7 +78,7 @@ public URL[] getLocalArtifactUrls(DependencyJar... dependencies) {
     URL[] urls = new URL[dependencies.length];
     for (int i = 0; i < urls.length; i++) {
       try {
-        urls[i] = Util.url(artifacts.get(key(dependencies[i])));
+        urls[i] = Paths.get(artifacts.get(key(dependencies[i]))).toUri().toURL();
       } catch (MalformedURLException e) {
         throw new RuntimeException(e);
       }

File: robolectric/src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -27,7 +27,7 @@ public void urlShouldReturnCorrectURLForWindowsLocal() throws Exception {
     // from https://blogs.msdn.microsoft.com/ie/2006/12/06/file-uris-in-windows/ sort of, but not
     final String windowsPath = "C:\\Documents and Settings\\davris\\FileSchemeURIs.doc";
     assertThat(Util.url(windowsPath))
-        .isEqualTo(new URL("file:C:/Documents%20and%20Settings/davris/FileSchemeURIs.doc"));
+        .isEqualTo(new URL("file:/C:/Documents%20and%20Settings/davris/FileSchemeURIs.doc"));
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -71,6 +71,7 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TempDirectory;
+import org.robolectric.util.Util;
 
 @SuppressLint("NewApi")
 public class ParallelUniverse implements ParallelUniverseInterface {
@@ -259,7 +260,7 @@ private Package loadAppPackage_measured(ApkLoader apkLoader, Config config,
           apkLoader.getCompileTimeSystemResourcesFile(sdkEnvironment);
 
       RuntimeEnvironment.setAndroidFrameworkJarPath(
-          apkLoader.getArtifactUrl(sdkConfig.getAndroidSdkDependency()).getFile());
+          Util.pathFrom(apkLoader.getArtifactUrl(sdkConfig.getAndroidSdkDependency())));
 
       Path packageFile = appManifest.getApkFile();
       parsedPackage = ShadowPackageParser.callParsePackage(packageFile);

File: robolectric/src/main/java/org/robolectric/internal/SdkEnvironment.java
Patch:
@@ -3,7 +3,6 @@
 import java.net.URL;
 import java.nio.file.FileSystem;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import javax.annotation.Nonnull;
 import org.robolectric.internal.bytecode.Sandbox;
 import org.robolectric.internal.dependency.DependencyJar;
@@ -12,6 +11,7 @@
 import org.robolectric.res.PackageResourceTable;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.res.ResourceTableFactory;
+import org.robolectric.util.Util;
 
 @SuppressWarnings("NewApi")
 public class SdkEnvironment extends Sandbox {
@@ -31,8 +31,8 @@ public synchronized Path getCompileTimeSystemResourcesFile(
       DependencyResolver dependencyResolver) {
     if (compileTimeSystemResourcesFile == null) {
       DependencyJar compileTimeJar = compileTimeSdkConfig.getAndroidSdkDependency();
-      compileTimeSystemResourcesFile =
-          Paths.get(dependencyResolver.getLocalArtifactUrl(compileTimeJar).getFile());
+      URL localArtifactUrl = dependencyResolver.getLocalArtifactUrl(compileTimeJar);
+      compileTimeSystemResourcesFile = Util.pathFrom(localArtifactUrl);
     }
     return compileTimeSystemResourcesFile;
   }

File: shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -31,7 +31,7 @@ public class RuntimeEnvironment {
   private static ResourceTable appResourceTable;
   private static ResourceTable compileTimeResourceTable;
   private static TempDirectory tempDirectory = new TempDirectory("no-test-yet");
-  private static String androidFrameworkJar;
+  private static Path androidFrameworkJar;
   public static Path compileTimeSystemResourcesFile;
 
   private static boolean useLegacyResources;
@@ -208,11 +208,11 @@ public static TempDirectory getTempDirectory() {
     return tempDirectory;
   }
 
-  public static void setAndroidFrameworkJarPath(String localArtifactPath) {
+  public static void setAndroidFrameworkJarPath(Path localArtifactPath) {
     RuntimeEnvironment.androidFrameworkJar = localArtifactPath;
   }
 
-  public static String getAndroidFrameworkJarPath() {
+  public static Path getAndroidFrameworkJarPath() {
     return RuntimeEnvironment.androidFrameworkJar;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscApkAssets9.java
Patch:
@@ -160,7 +160,7 @@ protected static ApkAssets loadFromPath(String path, boolean system)
             + " sdk=" + RuntimeEnvironment.getApiLevel());
 
     if (FRAMEWORK_APK_PATH.equals(path)) {
-      path = RuntimeEnvironment.getAndroidFrameworkJarPath();
+      path = RuntimeEnvironment.getAndroidFrameworkJarPath().toString();
     }
 
     String finalPath = path;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -1261,7 +1261,7 @@ protected void init(boolean isSystem) {
     //    verifySystemIdmaps();
     //  }
 
-    String androidFrameworkJarPath = RuntimeEnvironment.getAndroidFrameworkJarPath();
+    Path androidFrameworkJarPath = RuntimeEnvironment.getAndroidFrameworkJarPath();
     Preconditions.checkNotNull(androidFrameworkJarPath);
 
     if (isSystem) {

File: plugins/maven-dependency-resolver/src/test/java/org/robolectric/internal/dependency/MavenDependencyResolverTest.java
Patch:
@@ -104,7 +104,7 @@ public void getLocalArtifactUrl_shouldReturnCorrectUrlForArtifactKey() {
 
     URL url = dependencyResolver.getLocalArtifactUrl(dependencyJar);
 
-    assertEquals("file:/path1", url.toExternalForm());
+    assertEquals("file:path1", url.toExternalForm());
   }
 
   @Test
@@ -114,7 +114,7 @@ public void getLocalArtifactUrl_shouldReturnCorrectUrlForArtifactKeyWithClassifi
 
     URL url = dependencyResolver.getLocalArtifactUrl(dependencyJar);
 
-    assertEquals("file:/path3", url.toExternalForm());
+    assertEquals("file:path3", url.toExternalForm());
   }
 
   private DependencyResolver createResolver() {

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -118,7 +118,7 @@ public static URL url(String osPath) throws MalformedURLException {
       return new URL("file:" + volume + "/" + path.replace(" ", "%20"));
     }
 
-    return new URL("file:/" + (osPath.startsWith("/") ? "/" + osPath : osPath));
+    return new URL("file:" + osPath);
   }
 
   public static List<Integer> intArrayToList(int[] ints) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemServiceRegistry.java
Patch:
@@ -64,6 +64,8 @@ static _ServiceFetcher_ get(String key, Object serviceFetcher) {
           return reflector(_ServiceFetcherM_.class, serviceFetcher);
         case STATIC_CONTEXT_SERVICE_FETCHER_CLASS_NAME_N:
           return reflector(_ServiceFetcherN_.class, serviceFetcher);
+        case CACHED_SERVICE_FETCHER_CLASS_NAME:
+          return o -> {}; // these are accessors via the ContextImpl instance, so no reset needed
         default:
           if (key.equals(Context.INPUT_METHOD_SERVICE)) {
             return o -> {}; // handled by ShadowInputMethodManager.reset()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -795,7 +795,6 @@ private void applyFlagsToComponentInfo(ComponentInfo componentInfo, int flags)
       }
       applyFlagsToApplicationInfo(componentInfo.applicationInfo, flags);
       componentInfo.packageName = applicationInfo.packageName;
-      componentInfo.processName = componentInfo.applicationInfo.processName;
       isApplicationEnabled = applicationInfo.enabled;
     }
     if ((flags & GET_META_DATA) == 0) {

File: robolectric/src/main/java/org/robolectric/ConfigMerger.java
Patch:
@@ -4,4 +4,4 @@
 
 /** @deprecated use {@link org.robolectric.plugins.DefaultConfigMerger} instead. */
 @Deprecated
-public abstract class ConfigMerger extends DefaultConfigMerger {}
+public class ConfigMerger extends DefaultConfigMerger {}

File: robolectric/src/main/java/org/robolectric/DefaultSdkPicker.java
Patch:
@@ -15,7 +15,6 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.internal.ConfigUtils;
 import org.robolectric.internal.SdkConfig;
-import org.robolectric.internal.SdkProvider;
 
 public class DefaultSdkPicker implements SdkPicker {
   @Nonnull private final SdkProvider sdkProvider;

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -37,7 +37,6 @@
 import org.robolectric.internal.SandboxTestRunner;
 import org.robolectric.internal.SdkConfig;
 import org.robolectric.internal.SdkEnvironment;
-import org.robolectric.internal.SdkProvider;
 import org.robolectric.internal.ShadowProvider;
 import org.robolectric.internal.bytecode.ClassHandler;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
@@ -83,7 +82,7 @@ public class RobolectricTestRunner extends SandboxTestRunner {
   protected static Injector defaultInjector() {
     return new Injector()
         .register(Properties.class, System.getProperties())
-        .registerDefault(ConfigMerger.class, ConfigMerger.class)
+        .registerDefault(ConfigMerger.class, DefaultConfigMerger.class)
         .registerDefault(SdkPicker.class, DefaultSdkPicker.class)
         .registerDefault(ApkLoader.class, ApkLoader.class)
         .registerDefault(SandboxFactory.class, SandboxFactory.class)

File: robolectric/src/main/java/org/robolectric/SdkProvider.java
Patch:
@@ -1,6 +1,7 @@
-package org.robolectric.internal;
+package org.robolectric;
 
 import java.util.Collection;
+import org.robolectric.internal.SdkConfig;
 
 public interface SdkProvider {
 

File: robolectric/src/main/java/org/robolectric/internal/SandboxFactory.java
Patch:
@@ -19,7 +19,7 @@ public class SandboxFactory {
   private static final int CACHE_SIZE_FACTOR = 3;
 
   private final DependencyResolver dependencyResolver;
-  private final SdkProvider sdkProvider;
+  private final org.robolectric.SdkProvider sdkProvider;
 
   // Simple LRU Cache. SdkEnvironments are unique across InstrumentationConfiguration and SdkConfig
   private final LinkedHashMap<SandboxKey, SdkEnvironment> sdkToEnvironment;

File: robolectric/src/test/java/org/robolectric/DefaultConfigMergerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.robolectric.shadows.testing.TestApplication;
 
 @RunWith(JUnit4.class)
-public class ConfigMergerTest {
+public class DefaultConfigMergerTest {
 
   @Test public void defaultValuesAreMerged() throws Exception {
     assertThat(configFor(Test2.class, "withoutAnnotation",
@@ -377,7 +377,7 @@ public void withEmptyShadowList_shouldLoadDefaultsFromGlobalPropertiesFile() thr
   }
 
   @Test public void testPackageHierarchyOf() throws Exception {
-    assertThat(new ConfigMerger().packageHierarchyOf(ConfigMergerTest.class))
+    assertThat(new DefaultConfigMerger().packageHierarchyOf(DefaultConfigMergerTest.class))
         .containsExactly("org.robolectric", "org", "");
   }
 
@@ -398,7 +398,7 @@ private Config configFor(Class<?> testClass, String methodName, Config.Implement
 
   private Config configFor(Class<?> testClass, String methodName, final Map<String, String> configProperties, Config.Implementation globalConfig) throws InitializationError {
     Method info = getMethod(testClass, methodName);
-    return new ConfigMerger() {
+    return new DefaultConfigMerger() {
       @Override
       InputStream getResourceAsStream(String resourceName) {
         String properties = configProperties.get(resourceName);

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.robolectric.internal.DefaultSdkProvider;
 import org.robolectric.internal.ParallelUniverseInterface;
 import org.robolectric.internal.SdkEnvironment;
-import org.robolectric.internal.SdkProvider;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.util.Injector;
 import org.robolectric.util.PerfStatsCollector.Metric;

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -12,9 +12,9 @@
 import org.robolectric.LegacyDependencyResolver;
 import org.robolectric.R;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.SdkProvider;
 import org.robolectric.internal.DefaultSdkProvider;
 import org.robolectric.internal.SdkConfig;
-import org.robolectric.internal.SdkProvider;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.res.Fs;
 import org.robolectric.res.ResourcePath;

File: robolectric/src/main/java/org/robolectric/ApkLoader.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Nonnull;
+import javax.inject.Inject;
 import org.robolectric.internal.SdkEnvironment;
 import org.robolectric.internal.dependency.DependencyJar;
 import org.robolectric.internal.dependency.DependencyResolver;
@@ -24,7 +25,8 @@ public class ApkLoader {
 
   private final DependencyResolver dependencyResolver;
 
-  protected ApkLoader(DependencyResolver dependencyResolver) {
+  @Inject
+  public ApkLoader(DependencyResolver dependencyResolver) {
     this.dependencyResolver = dependencyResolver;
   }
 

File: utils/src/test/java/org/robolectric/util/InjectorTest.java
Patch:
@@ -6,7 +6,6 @@
 import javax.inject.Inject;
 import org.junit.Before;
 import org.junit.Test;
-import org.robolectric.util.Injector.InjectionException;
 
 public class InjectorTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java
Patch:
@@ -69,6 +69,7 @@ public void isUserKeyUnlocked() {
   private StorageVolume buildAndGetStorageVolume(File file, String description) {
     Parcel parcel = Parcel.obtain();
     parcel.writeInt(0);
+    parcel.setDataPosition(0);
     UserHandle userHandle = new UserHandle(parcel);
     StorageVolumeBuilder storageVolumeBuilder =
         new StorageVolumeBuilder("volume", file, description, userHandle, "mounted");

File: buildSrc/src/main/groovy/org/robolectric/gradle/AarDepsPlugin.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.regex.Pattern;
 import org.gradle.api.Plugin;
 import org.gradle.api.Project;
 import org.gradle.api.file.FileCollection;

File: resources/src/main/java/org/robolectric/res/StartsWithFilter.java
Patch:
@@ -3,7 +3,7 @@
 import java.nio.file.Path;
 import java.util.function.Predicate;
 
-@SuppressWarnings("NewApi")
+@SuppressWarnings({"NewApi", "AndroidJdkLibsChecker"})
 class StartsWithFilter implements Predicate<Path> {
   private final String prefix;
 

File: processor/src/main/java/org/robolectric/annotation/processing/validator/SdkStore.java
Patch:
@@ -255,9 +255,8 @@ private int readSdkInt() {
 
     private JarFile ensureJar() {
       try {
-        URI uri = URI.create(path);
-        if ("classpath".equals(uri.getScheme())) {
-          return new JarFile(copyResourceToFile(uri.getSchemeSpecificPart()));
+        if (path.startsWith("classpath:")) {
+          return new JarFile(copyResourceToFile(URI.create(path).getSchemeSpecificPart()));
         } else {
           return new JarFile(path);
         }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -117,7 +117,9 @@ protected DependencyResolver getJarResolver() {
           dependencyResolver = new LocalDependencyResolver(new File(dependencyDir));
         }
       } else {
-        File cacheDir = new File(new File(System.getProperty("java.io.tmpdir")), "robolectric");
+        // cacheDir bumped to 'robolectric-2' to invalidate caching of bad URLs on windows prior
+        // to fix for https://github.com/robolectric/robolectric/issues/3955
+        File cacheDir = new File(new File(System.getProperty("java.io.tmpdir")), "robolectric-2");
 
         Class<?> mavenDependencyResolverClass = ReflectionHelpers.loadClass(RobolectricTestRunner.class.getClassLoader(),
             "org.robolectric.internal.dependency.MavenDependencyResolver");

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -117,6 +117,8 @@ protected DependencyResolver getJarResolver() {
           dependencyResolver = new LocalDependencyResolver(new File(dependencyDir));
         }
       } else {
+        // cacheDir bumped to 'robolectric-2' to invalidate caching of bad URLs on windows prior
+        // to fix for https://github.com/robolectric/robolectric/issues/3955
         File cacheDir = new File(new File(System.getProperty("java.io.tmpdir")), "robolectric-2");
 
         Class<?> mavenDependencyResolverClass = ReflectionHelpers.loadClass(RobolectricTestRunner.class.getClassLoader(),

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -6,10 +6,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.MalformedURLException;
-import java.net.URI;
 import java.net.URL;
-import java.net.URLEncoder;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Matcher;

File: processor/src/main/java/org/robolectric/annotation/processing/validator/SdkStore.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.InputStreamReader;
 import java.net.URI;
 import java.nio.charset.Charset;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -255,7 +256,7 @@ private int readSdkInt() {
 
     private JarFile ensureJar() {
       try {
-        URI uri = URI.create(path);
+        URI uri = Paths.get(path).toUri();
         if ("classpath".equals(uri.getScheme())) {
           return new JarFile(copyResourceToFile(uri.getSchemeSpecificPart()));
         } else {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -117,7 +117,7 @@ protected DependencyResolver getJarResolver() {
           dependencyResolver = new LocalDependencyResolver(new File(dependencyDir));
         }
       } else {
-        File cacheDir = new File(new File(System.getProperty("java.io.tmpdir")), "robolectric");
+        File cacheDir = new File(new File(System.getProperty("java.io.tmpdir")), "robolectric-2");
 
         Class<?> mavenDependencyResolverClass = ReflectionHelpers.loadClass(RobolectricTestRunner.class.getClassLoader(),
             "org.robolectric.internal.dependency.MavenDependencyResolver");

File: robolectric/src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -21,10 +21,10 @@ public void urlShouldReturnCorrectURLForSensibleOSes() throws Exception {
 
   @Test
   public void urlShouldReturnCorrectURLForWindowsLocal() throws Exception {
-    // from https://blogs.msdn.microsoft.com/ie/2006/12/06/file-uris-in-windows/
+    // from https://blogs.msdn.microsoft.com/ie/2006/12/06/file-uris-in-windows/ sort of, but not
     final String windowsPath = "C:\\Documents and Settings\\davris\\FileSchemeURIs.doc";
     assertThat(Util.url(windowsPath))
-        .isEqualTo(new URL("file:///C:/Documents%20and%20Settings/davris/FileSchemeURIs.doc"));
+        .isEqualTo(new URL("file:C:/Documents%20and%20Settings/davris/FileSchemeURIs.doc"));
   }
 
   @Test

File: utils/src/main/java/org/robolectric/util/Util.java
Patch:
@@ -95,7 +95,8 @@ public static URL url(String osPath) throws MalformedURLException {
     if (windowsLocalMatcher.find()) {
       String volume = windowsLocalMatcher.group("volume");
       String path = windowsLocalMatcher.group("path").replace('\\', '/');
-      return new URL("file:///" + volume + "/" + path.replace(" ", "%20"));
+      // this doesn't correspend to what M$ says, but, again, who cares.
+      return new URL("file:" + volume + "/" + path.replace(" ", "%20"));
     }
 
     return new URL("file:/" + (osPath.startsWith("/") ? "/" + osPath : osPath));

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -228,6 +228,7 @@ static String resolvePackageName(String packageName, ComponentName componentName
     return classString;
   }
 
+  // TODO(christianw): reconcile with ParallelUniverse.setUpPackageStorage
   private static void setUpPackageStorage(ApplicationInfo applicationInfo) {
     TempDirectory tempDirectory = RuntimeEnvironment.getTempDirectory();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -228,6 +228,7 @@ static String resolvePackageName(String packageName, ComponentName componentName
     return classString;
   }
 
+  // TODO(christianw): reconcile with ParallelUniverse.setUpPackageStorage
   private static void setUpPackageStorage(ApplicationInfo applicationInfo) {
     TempDirectory tempDirectory = RuntimeEnvironment.getTempDirectory();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -247,8 +247,9 @@ private static void setUpPackageStorage(ApplicationInfo applicationInfo) {
               .toAbsolutePath()
               .toString();
     }
-    applicationInfo.publicSourceDir = applicationInfo.sourceDir;
-
+    if (applicationInfo.publicSourceDir == null) {
+      applicationInfo.publicSourceDir = applicationInfo.sourceDir;
+    }
     if (RuntimeEnvironment.getApiLevel() >= N) {
       applicationInfo.credentialProtectedDataDir =
           tempDirectory.createIfNotExists("userDataDir").toAbsolutePath().toString();

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -1706,6 +1706,8 @@ String getBcp47Locale(boolean canonicalize) {
         // Replace Tagalog with Filipino if we are canonicalizing
         str.setLength(0);
         str.append("fil");// 3-letter code for Filipino
+      } else {
+        str.append(unpackLanguage());
       }
     }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -12,7 +12,6 @@
 import android.content.pm.ConfigurationInfo;
 import android.os.Build.VERSION_CODES;
 import android.os.Process;
-import android.os.UserManager;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import org.robolectric.RuntimeEnvironment;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -181,6 +181,7 @@ protected ActivityInfo getActivityInfo(ComponentName component, int flags)
     result.packageName = packageName;
     result.applicationInfo = new ApplicationInfo();
     result.applicationInfo.packageName = packageName;
+    result.applicationInfo.flags = ApplicationInfo.FLAG_INSTALLED;
     return result;
   }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -110,9 +110,9 @@ public boolean shouldAcquire(String name) {
       return true;
     }
 
-    // Hack. Fixes issue #1864, #2960 and #4146
+    // Hack. Fixes https://github.com/robolectric/robolectric/issues/1864
     if (name.equals("javax.net.ssl.DistinguishedNameParser")
-        || name.matches("javax.microedition.khronos.*")) {
+        || name.equals("javax.microedition.khronos.opengles.GL")) {
       return true;
     }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -110,9 +110,9 @@ public boolean shouldAcquire(String name) {
       return true;
     }
 
-    // Hack. Fixes https://github.com/robolectric/robolectric/issues/1864
+    // Hack. Fixes issue #1864, #2960 and #4146
     if (name.equals("javax.net.ssl.DistinguishedNameParser")
-        || name.equals("javax.microedition.khronos.opengles.GL")) {
+        || name.matches("javax.microedition.khronos.*")) {
       return true;
     }
 

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -40,7 +40,7 @@ private static URI fixFileURL(URL u) {
   @Deprecated
   public static FsFile fileFromPath(String urlString) {
     if (urlString.startsWith("jar:")) {
-      String[] parts = urlString.replaceFirst("jar:", "").split("!", 1);
+      String[] parts = urlString.replaceFirst("jar:", "").split("!", 0);
       Fs fs = new JarFs(new File(parts[0]));
       return fs.join(parts[1].substring(1));
     } else {
@@ -53,7 +53,7 @@ public static FsFile fromURL(URL url) {
       case "file":
         return new FileFsFile(new File(url.getPath()));
       case "jar":
-        String[] parts = url.getPath().split("!", 1);
+        String[] parts = url.getPath().split("!", 0);
         try {
           Fs fs = fromJar(new URL(parts[0]));
           return fs.join(parts[1].substring(1));

File: resources/src/main/java/org/robolectric/res/Qualifiers.java
Patch:
@@ -160,7 +160,7 @@ public static String addScreenWidth(String qualifiers, int screenWidth) {
    */
   @Deprecated
   public static String getOrientation(String qualifiers) {
-    for (String qualifier : qualifiers.split("-", -1)) {
+    for (String qualifier : qualifiers.split("-", 0)) {
       Matcher matcher = ORIENTATION_QUALIFIER_PATTERN.matcher(qualifier);
       if (matcher.find()) {
         return matcher.group(1);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -408,7 +408,7 @@ private static File getFileFromZip(File file) {
     File fileFromZip = null;
     String pathString = file.getPath();
     String zipFile = pathString.substring(pathString.lastIndexOf(":") + 1, pathString.indexOf("!"));
-    String filePathInsideZip = pathString.split("!", 1)[1].substring(1);
+    String filePathInsideZip = pathString.split("!", 0)[1].substring(1);
     byte[] buffer = new byte[1024];
     try {
       File outputDir = Files.createTempDirectory("robolectric_assets").toFile();

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -40,7 +40,7 @@ private static URI fixFileURL(URL u) {
   @Deprecated
   public static FsFile fileFromPath(String urlString) {
     if (urlString.startsWith("jar:")) {
-      String[] parts = urlString.replaceFirst("jar:", "").split("!", 1);
+      String[] parts = urlString.replaceFirst("jar:", "").split("!", 0);
       Fs fs = new JarFs(new File(parts[0]));
       return fs.join(parts[1].substring(1));
     } else {
@@ -53,7 +53,7 @@ public static FsFile fromURL(URL url) {
       case "file":
         return new FileFsFile(new File(url.getPath()));
       case "jar":
-        String[] parts = url.getPath().split("!", 1);
+        String[] parts = url.getPath().split("!", 0);
         try {
           Fs fs = fromJar(new URL(parts[0]));
           return fs.join(parts[1].substring(1));

File: resources/src/main/java/org/robolectric/res/Qualifiers.java
Patch:
@@ -160,7 +160,7 @@ public static String addScreenWidth(String qualifiers, int screenWidth) {
    */
   @Deprecated
   public static String getOrientation(String qualifiers) {
-    for (String qualifier : qualifiers.split("-", -1)) {
+    for (String qualifier : qualifiers.split("-", 0)) {
       Matcher matcher = ORIENTATION_QUALIFIER_PATTERN.matcher(qualifier);
       if (matcher.find()) {
         return matcher.group(1);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -408,7 +408,7 @@ private static File getFileFromZip(File file) {
     File fileFromZip = null;
     String pathString = file.getPath();
     String zipFile = pathString.substring(pathString.lastIndexOf(":") + 1, pathString.indexOf("!"));
-    String filePathInsideZip = pathString.split("!", 1)[1].substring(1);
+    String filePathInsideZip = pathString.split("!", 0)[1].substring(1);
     byte[] buffer = new byte[1024];
     try {
       File outputDir = Files.createTempDirectory("robolectric_assets").toFile();

File: shadows/framework/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -270,7 +270,7 @@ public boolean fillTypedValue(String data, TypedValue typedValue) {
         try {
           typedValue.data = findValueFor(data);
         } catch (Resources.NotFoundException e) {
-          typedValue.data = Integer.decode(data);
+          typedValue.data = convertInt(data);
         }
         typedValue.assetCookie = 0;
         typedValue.string = null;

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheck.java
Patch:
@@ -89,7 +89,7 @@
     severity = SUGGESTION,
     documentSuppression = false,
     tags = StandardTags.REFACTORING,
-    link = "http://robolectric.org/errorprone-refactorings/",
+    link = "http://robolectric.org/migrating/#improper-use-of-shadows",
     linkType = LinkType.CUSTOM,
     providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION)
 public final class ShadowUsageCheck extends BugChecker implements ClassTreeMatcher {

File: robolectric/src/test/java/org/robolectric/res/ResourceParserTest.java
Patch:
@@ -61,7 +61,9 @@ public void shouldLoadIdResourcesDefinedByItemTag() {
 
   @Test
   public void whenIdItemsHaveStringContent_shouldLoadIdResourcesDefinedByItemTag() {
-    TypedResource value = resourceTable.getValue(new ResName("org.robolectric", "id", "id_with_string_value"), config);
+    TypedResource value =
+        resourceTable.getValue(
+            new ResName("org.robolectric", "id", "id_with_string_value"), config);
     assertThat(value.asString()).isEmpty();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -538,7 +538,9 @@ protected Bitmap createAshmemBitmap() {
   }
 
   @Implementation
-  protected void eraseColor(int c) {}
+  protected void eraseColor(int color) {
+    Arrays.fill(colors, color);
+  }
 
   @Implementation
   protected void writeToParcel(Parcel p, int flags) {

File: shadows/framework/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -270,7 +270,7 @@ public boolean fillTypedValue(String data, TypedValue typedValue) {
         try {
           typedValue.data = findValueFor(data);
         } catch (Resources.NotFoundException e) {
-          typedValue.data = Integer.decode(data);
+          typedValue.data = convertInt(data);
         }
         typedValue.assetCookie = 0;
         typedValue.string = null;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -44,7 +44,6 @@
 import android.Manifest;
 import android.Manifest.permission_group;
 import android.app.Activity;
-import android.app.Application;
 import android.app.admin.DevicePolicyManager;
 import android.content.ComponentName;
 import android.content.Context;

File: resources/src/main/java/org/robolectric/res/android/Asset.java
Patch:
@@ -17,6 +17,8 @@
 import org.robolectric.res.FileTypedResource;
 import org.robolectric.res.FsFile;
 
+// transliterated from https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r12/libs/androidfw/Asset.cpp
+// and https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r12/libs/androidfw/include/androidfw/Asset.h
 /*
  * Instances of this class provide read-only operations on a byte stream.
  *

File: resources/src/main/java/org/robolectric/res/android/LoadedArsc.java
Patch:
@@ -837,7 +837,7 @@ interface TypeSpecFunc {
     }
 
     void ForEachTypeSpec(TypeSpecFunc f) {
-      for (int i = 0; i < type_specs_.size(); i++) {
+      for (Integer i : type_specs_.keySet()) {
         TypeSpec ptr = type_specs_.get(i);
         if (ptr != null) {
           byte type_id = ptr.type_spec.id;

File: resources/src/main/java/org/robolectric/res/android/Asset.java
Patch:
@@ -17,6 +17,8 @@
 import org.robolectric.res.FileTypedResource;
 import org.robolectric.res.FsFile;
 
+// transliterated from https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r12/libs/androidfw/Asset.cpp
+// and https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r12/libs/androidfw/include/androidfw/Asset.h
 /*
  * Instances of this class provide read-only operations on a byte stream.
  *

File: integration_tests/ctesque/src/test/java/android/content/res/AssetManagerTest.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -64,7 +65,7 @@ public void open_withAccessMode_shouldOpenFile() throws IOException {
     assertThat(contents).isEqualTo("assetsHome!");
   }
 
-  @Test
+  @Test @Ignore("TODO(xian): re-enable; see https://github.com/robolectric/robolectric/issues/4091")
   public void openFd_shouldProvideFileDescriptorForAsset() throws Exception {
     AssetFileDescriptor assetFileDescriptor = assetManager.openFd("assetsHome.txt");
     assertThat(CharStreams.toString(new InputStreamReader(assetFileDescriptor.createInputStream(), UTF_8)))

File: resources/src/main/java/org/robolectric/res/android/LoadedArsc.java
Patch:
@@ -837,7 +837,7 @@ interface TypeSpecFunc {
     }
 
     void ForEachTypeSpec(TypeSpecFunc f) {
-      for (int i = 0; i < type_specs_.size(); i++) {
+      for (Integer i : type_specs_.keySet()) {
         TypeSpec ptr = type_specs_.get(i);
         if (ptr != null) {
           byte type_id = ptr.type_spec.id;

File: resources/src/main/java/org/robolectric/res/android/LoadedArsc.java
Patch:
@@ -837,7 +837,7 @@ interface TypeSpecFunc {
     }
 
     void ForEachTypeSpec(TypeSpecFunc f) {
-      for (int i = 0; i < type_specs_.size(); i++) {
+      for (Integer i : type_specs_.keySet()) {
         TypeSpec ptr = type_specs_.get(i);
         if (ptr != null) {
           byte type_id = ptr.type_spec.id;

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -84,7 +84,7 @@ void replace(
                     // transform `ShadowApplication.getInstance()`
                     //  to `shadowOf(RuntimeEnvironment.application)`:
                     Tree parent = state.getPath().getParentPath().getLeaf();
-                    replaceAssignmentRhs(parent, createSyntheticShadowAccess(state));
+                    // replaceAssignmentRhs(parent, createSyntheticShadowAccess(state));
 
                     possibleFixes.put(
                         parent,

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheckTest.java
Patch:
@@ -496,7 +496,7 @@ public void shadowedFieldFromFieldTest() throws IOException {
             "  @Test void theTest() {",
             "    linearLayout = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout.getLayoutAnimation().start();",
-            "    this.linearLayout.getLayoutAnimation().start();",
+            "    linearLayout.getLayoutAnimation().start();",
             "    shadowOf(linearLayout).getGravity();",
             "    shadowOf(this.linearLayout).getGravity();",
             "  }",
@@ -550,7 +550,7 @@ public void avoidFieldNameCollisions() throws IOException {
             "    linearLayout = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout2 = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout2.getLayoutAnimation().start();",
-            "    this.linearLayout2.getLayoutAnimation().start();",
+            "    linearLayout2.getLayoutAnimation().start();",
             "    shadowOf(linearLayout2).getGravity();",
             "    shadowOf(this.linearLayout2).getGravity();",
             "  }",

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheckTest.java
Patch:
@@ -496,7 +496,7 @@ public void shadowedFieldFromFieldTest() throws IOException {
             "  @Test void theTest() {",
             "    linearLayout = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout.getLayoutAnimation().start();",
-            "    this.linearLayout.getLayoutAnimation().start();",
+            "    linearLayout.getLayoutAnimation().start();",
             "    shadowOf(linearLayout).getGravity();",
             "    shadowOf(this.linearLayout).getGravity();",
             "  }",
@@ -550,7 +550,7 @@ public void avoidFieldNameCollisions() throws IOException {
             "    linearLayout = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout2 = new LinearLayout(RuntimeEnvironment.application);",
             "    linearLayout2.getLayoutAnimation().start();",
-            "    this.linearLayout2.getLayoutAnimation().start();",
+            "    linearLayout2.getLayoutAnimation().start();",
             "    shadowOf(linearLayout2).getGravity();",
             "    shadowOf(this.linearLayout2).getGravity();",
             "  }",

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheck.java
Patch:
@@ -61,7 +61,6 @@
 import com.sun.tools.javac.tree.JCTree.JCTypeCast;
 import com.sun.tools.javac.tree.JCTree.JCVariableDecl;
 import com.sun.tools.javac.tree.TreeMaker;
-import com.sun.tools.javac.util.List;
 import com.sun.tools.javac.util.Name;
 import java.util.HashMap;
 import java.util.HashSet;

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -84,7 +84,7 @@ void replace(
                     // transform `ShadowApplication.getInstance()`
                     //  to `shadowOf(RuntimeEnvironment.application)`:
                     Tree parent = state.getPath().getParentPath().getLeaf();
-                    replaceAssignmentRhs(parent, createSyntheticShadowAccess(state));
+                    // replaceAssignmentRhs(parent, createSyntheticShadowAccess(state));
 
                     possibleFixes.put(
                         parent,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-@Implements(value = ActivityThread.class, isInAndroidSdk = false)
+@Implements(value = ActivityThread.class, isInAndroidSdk = false, looseSignatures = true)
 public class ShadowActivityThread {
   private static ApplicationInfo applicationInfo;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -219,10 +219,9 @@ public boolean wasPackageEverHidden(String packageName) {
   }
 
   @Implementation(minSdk = LOLLIPOP)
-  protected int enableSystemApp(ComponentName admin, String packageName) {
+  protected void enableSystemApp(ComponentName admin, String packageName) {
     enforceActiveAdmin(admin);
     systemAppsEnabled.add(packageName);
-    return 1;
   }
 
   /** Returns {@code true} if the given {@code packageName} was a system app and was enabled. */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowHttpResponseCache.java
Patch:
@@ -4,6 +4,7 @@
 
 import android.net.http.HttpResponseCache;
 import java.io.File;
+import java.net.CacheRequest;
 import java.net.CacheResponse;
 import java.net.URI;
 import java.net.URLConnection;
@@ -93,7 +94,7 @@ protected CacheResponse get(
   }
 
   @Implementation
-  protected CacheResponse put(URI uri, URLConnection urlConnection) {
+  protected CacheRequest put(URI uri, URLConnection urlConnection) {
     // Do not cache any data. All requests will be a miss.
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputEventReceiver.java
Patch:
@@ -7,6 +7,7 @@
 @Implements(value = InputEventReceiver.class, isInAndroidSdk = false)
 public class ShadowInputEventReceiver {
   @Implementation
+  @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
   public void consumeBatchedInputEvents(long frameTimeNanos) {
     // The real implementation of this calls a JNI method, and logs a statement if the native
     // object isn't present. Since the native object will never be present in Robolectric tests, it

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinux.java
Patch:
@@ -18,7 +18,7 @@
 @Implements(value = Linux.class, minSdk = Build.VERSION_CODES.O, isInAndroidSdk = false)
 public class ShadowLinux {
   @Implementation
-  public static void mkdir(String path, int mode) throws ErrnoException {
+  public void mkdir(String path, int mode) throws ErrnoException {
     new File(path).mkdirs();
   }
 
@@ -51,7 +51,7 @@ protected StructStat fstat(FileDescriptor fd) throws ErrnoException {
   }
 
   @Implementation
-  protected static FileDescriptor open(String path, int flags, int mode) throws ErrnoException {
+  protected FileDescriptor open(String path, int flags, int mode) throws ErrnoException {
     try {
       RandomAccessFile randomAccessFile = new RandomAccessFile(path, modeToString(mode));
       return randomAccessFile.getFD();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMemoryMappedFile.java
Patch:
@@ -81,6 +81,7 @@ private BufferIterator getHeapBufferIterator(ByteOrder endianness) {
     }
 
     @Implementation
+    @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
     public int size() {
         return bytes.length;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -44,6 +44,7 @@ public class ShadowMessageQueue {
   // rather than automatic.
   @HiddenApi
   @Implementation
+  @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
   public static Number nativeInit() {
     return 1;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResolveInfo.java
Patch:
@@ -46,7 +46,7 @@ public static ResolveInfo newResolveInfo(String displayName, String packageName,
   }
 
   @Implementation
-  protected String loadLabel(PackageManager mgr) {
+  protected CharSequence loadLabel(PackageManager mgr) {
     return label;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -144,6 +144,7 @@ public static class ShadowSecure {
         new WeakHashMap<ContentResolver, Map<String, Object>>();
 
     @Implementation(minSdk = JELLY_BEAN_MR1)
+    @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
     protected static boolean setLocationProviderEnabledForUser(
         ContentResolver cr, String provider, boolean enabled, int uid) {
       return updateEnabledProviders(cr, provider, enabled);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimeZoneFinder.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 
 /** Shadow for {@code TimeZoneFinder}. */
-@Implements(value = TimeZoneFinder.class, minSdk = O, isInAndroidSdk = false)
+@Implements(value = TimeZoneFinder.class, minSdk = O, isInAndroidSdk = false, looseSignatures = true)
 public class ShadowTimeZoneFinder {
 
   private static final String TZLOOKUP_PATH = "/usr/share/zoneinfo/tzlookup.xml";

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVMRuntime.java
Patch:
@@ -54,7 +54,7 @@ Object getObjectForAddress(long address) {
    * Returns whether the VM is running in 64-bit mode. Available in Android L+. Defaults to true.
    */
   @Implementation(minSdk = LOLLIPOP)
-  protected static final boolean is64Bit() {
+  protected boolean is64Bit() {
     return ShadowVMRuntime.is64Bit;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -10,6 +10,7 @@
 import android.os.Looper;
 import android.util.MergedConfiguration;
 import android.view.Display;
+import android.view.IWindowSession;
 import android.view.ViewRootImpl;
 import android.view.WindowManager;
 import java.util.ArrayList;
@@ -27,7 +28,7 @@ public class ShadowViewRootImpl {
   @RealObject private ViewRootImpl realObject;
 
   @Implementation(maxSdk = JELLY_BEAN)
-  public static Object getWindowSession(Looper mainLooper) {
+  public static IWindowSession getWindowSession(Looper mainLooper) {
     return null;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-@Implements(value = ActivityThread.class, isInAndroidSdk = false)
+@Implements(value = ActivityThread.class, isInAndroidSdk = false, looseSignatures = true)
 public class ShadowActivityThread {
   private static ApplicationInfo applicationInfo;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -219,10 +219,9 @@ public boolean wasPackageEverHidden(String packageName) {
   }
 
   @Implementation(minSdk = LOLLIPOP)
-  protected int enableSystemApp(ComponentName admin, String packageName) {
+  protected void enableSystemApp(ComponentName admin, String packageName) {
     enforceActiveAdmin(admin);
     systemAppsEnabled.add(packageName);
-    return 1;
   }
 
   /** Returns {@code true} if the given {@code packageName} was a system app and was enabled. */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowHttpResponseCache.java
Patch:
@@ -4,6 +4,7 @@
 
 import android.net.http.HttpResponseCache;
 import java.io.File;
+import java.net.CacheRequest;
 import java.net.CacheResponse;
 import java.net.URI;
 import java.net.URLConnection;
@@ -93,7 +94,7 @@ protected CacheResponse get(
   }
 
   @Implementation
-  protected CacheResponse put(URI uri, URLConnection urlConnection) {
+  protected CacheRequest put(URI uri, URLConnection urlConnection) {
     // Do not cache any data. All requests will be a miss.
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputEventReceiver.java
Patch:
@@ -7,6 +7,7 @@
 @Implements(value = InputEventReceiver.class, isInAndroidSdk = false)
 public class ShadowInputEventReceiver {
   @Implementation
+  @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
   public void consumeBatchedInputEvents(long frameTimeNanos) {
     // The real implementation of this calls a JNI method, and logs a statement if the native
     // object isn't present. Since the native object will never be present in Robolectric tests, it

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinux.java
Patch:
@@ -18,7 +18,7 @@
 @Implements(value = Linux.class, minSdk = Build.VERSION_CODES.O, isInAndroidSdk = false)
 public class ShadowLinux {
   @Implementation
-  public static void mkdir(String path, int mode) throws ErrnoException {
+  public void mkdir(String path, int mode) throws ErrnoException {
     new File(path).mkdirs();
   }
 
@@ -51,7 +51,7 @@ protected StructStat fstat(FileDescriptor fd) throws ErrnoException {
   }
 
   @Implementation
-  protected static FileDescriptor open(String path, int flags, int mode) throws ErrnoException {
+  protected FileDescriptor open(String path, int flags, int mode) throws ErrnoException {
     try {
       RandomAccessFile randomAccessFile = new RandomAccessFile(path, modeToString(mode));
       return randomAccessFile.getFD();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMemoryMappedFile.java
Patch:
@@ -81,6 +81,7 @@ private BufferIterator getHeapBufferIterator(ByteOrder endianness) {
     }
 
     @Implementation
+    @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
     public int size() {
         return bytes.length;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -44,6 +44,7 @@ public class ShadowMessageQueue {
   // rather than automatic.
   @HiddenApi
   @Implementation
+  @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
   public static Number nativeInit() {
     return 1;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResolveInfo.java
Patch:
@@ -46,7 +46,7 @@ public static ResolveInfo newResolveInfo(String displayName, String packageName,
   }
 
   @Implementation
-  protected String loadLabel(PackageManager mgr) {
+  protected CharSequence loadLabel(PackageManager mgr) {
     return label;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -144,6 +144,7 @@ public static class ShadowSecure {
         new WeakHashMap<ContentResolver, Map<String, Object>>();
 
     @Implementation(minSdk = JELLY_BEAN_MR1)
+    @SuppressWarnings("robolectric.ShadowReturnTypeMismatch")
     protected static boolean setLocationProviderEnabledForUser(
         ContentResolver cr, String provider, boolean enabled, int uid) {
       return updateEnabledProviders(cr, provider, enabled);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimeZoneFinder.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Implements;
 
 /** Shadow for {@code TimeZoneFinder}. */
-@Implements(value = TimeZoneFinder.class, minSdk = O, isInAndroidSdk = false)
+@Implements(value = TimeZoneFinder.class, minSdk = O, isInAndroidSdk = false, looseSignatures = true)
 public class ShadowTimeZoneFinder {
 
   private static final String TZLOOKUP_PATH = "/usr/share/zoneinfo/tzlookup.xml";

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVMRuntime.java
Patch:
@@ -54,7 +54,7 @@ Object getObjectForAddress(long address) {
    * Returns whether the VM is running in 64-bit mode. Available in Android L+. Defaults to true.
    */
   @Implementation(minSdk = LOLLIPOP)
-  protected static final boolean is64Bit() {
+  protected boolean is64Bit() {
     return ShadowVMRuntime.is64Bit;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -10,6 +10,7 @@
 import android.os.Looper;
 import android.util.MergedConfiguration;
 import android.view.Display;
+import android.view.IWindowSession;
 import android.view.ViewRootImpl;
 import android.view.WindowManager;
 import java.util.ArrayList;
@@ -27,7 +28,7 @@ public class ShadowViewRootImpl {
   @RealObject private ViewRootImpl realObject;
 
   @Implementation(maxSdk = JELLY_BEAN)
-  public static Object getWindowSession(Looper mainLooper) {
+  public static IWindowSession getWindowSession(Looper mainLooper) {
     return null;
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGradientDrawableTest.java
Patch:
@@ -16,6 +16,6 @@ public void testGetColor_returnsColor() throws Exception {
     ShadowGradientDrawable shadowGradientDrawable = shadowOf(gradientDrawable);
     int color = 123;
     gradientDrawable.setColor(color);
-    assertThat(shadowGradientDrawable.getColor()).isEqualTo(color);
+    assertThat(shadowGradientDrawable.getLastSetColor()).isEqualTo(color);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowGLES20.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.android.libraries.youtube.edit.shadows;
+package org.robolectric.shadows;
 
 import android.opengl.GLES20;
 import org.robolectric.annotation.Implementation;

File: errorprone/src/test/java/org/robolectric/errorprone/bugpatterns/ShadowUsageCheckTest.java
Patch:
@@ -753,7 +753,7 @@ public void shouldSaveFieldsFromMethodArgs() throws Exception {
             "  }",
             "",
             "  boolean moreTasks() {",
-            "    return theShadowLooper.getScheduler().areAnyRunnable();",
+            "    return theShadowLooper.getSchedule().isEmpty();",
             "  }",
             "}")
         .addOutputLines(
@@ -771,7 +771,7 @@ public void shouldSaveFieldsFromMethodArgs() throws Exception {
             "  }",
             "",
             "  boolean moreTasks() {",
-            "    return shadowOf(looper).getScheduler().areAnyRunnable();",
+            "    return shadowOf(looper).getSchedule().isEmpty();",
             "  }",
             "}")
         .doTest();

File: errorprone/src/test/java/xxx/XShadowLooper.java
Patch:
@@ -3,7 +3,6 @@
 import android.os.Looper;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
-import org.robolectric.util.Scheduler;
 
 /**
  * Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.DeprecatedMethodsCheck}.
@@ -15,7 +14,7 @@ public static Looper getMainLooper() {
     return null;
   }
 
-  public Scheduler getScheduler() {
+  public String getSchedule() {
     return null;
   }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassInstrumentor.java
Patch:
@@ -47,7 +47,7 @@ public MutableClass analyzeClass(
           public FieldVisitor visitField(
               int access, String name, String desc, String signature, Object value) {
             desc = config.remapParamType(desc);
-            return super.visitField(access, name, desc, signature, value);
+            return super.visitField(access & ~Opcodes.ACC_FINAL, name, desc, signature, value);
           }
 
           @Override

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowDecorator.java
Patch:
@@ -20,7 +20,7 @@ public class ShadowDecorator implements ClassInstrumentor.Decorator {
   public void decorate(MutableClass mutableClass) {
     mutableClass.addInterface(Type.getInternalName(ShadowedObject.class));
 
-    mutableClass.addField(0, new FieldNode(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,
+    mutableClass.addField(0, new FieldNode(Opcodes.ACC_PUBLIC,
         ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_DESC, OBJECT_DESC, null));
 
     addRoboGetDataMethod(mutableClass);

File: sandbox/src/test/java/org/robolectric/testing/AnExampleClass.java
Patch:
@@ -7,6 +7,9 @@
 public class AnExampleClass {
   static int foo = 123;
 
+  public static final String STATIC_FINAL_FIELD = "STATIC_FINAL_FIELD";
+  public final String nonstaticFinalField = "nonstaticFinalField";
+
   public String normalMethod(String stringArg, int intArg) {
     return "normalMethod(" + stringArg + ", " + intArg + ")";
   }

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -112,7 +112,7 @@ public void get_shouldReturnColumnValue() throws Exception {
   @Test
   public void get_shouldConvert() throws Exception {
     cursor.setResults(new Object[][]{new Object[]{
-        "aString", 1234L, "42", new byte[]{1, 2, 3}, 255, "1.25", 2.5d, null
+        "aString", "1234", "42", new byte[]{1, 2, 3}, 255, "1.25", 2.5d, null
     }});
     assertThat(cursor.getCount()).isEqualTo(1);
     assertThat(cursor.moveToNext()).isTrue();

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeObjRegistry.java
Patch:
@@ -37,6 +37,9 @@ public synchronized void unregister(T removed) {
   /** Retrieve the native object for given id. Throws if object with that id cannot be found */
   public synchronized T getNativeObject(long nativeId) {
     T object = nativeObjToIdMap.get(nativeId);
+    if (object != null) {
+      return object;
+    }
     return checkNotNull(
         object,
         String.format(

File: resources/src/main/java/org/robolectric/res/android/LoadedArsc.java
Patch:
@@ -519,10 +519,10 @@ int FindEntryByName(String type_name, String entry_name) {
         for (int entry_idx = 0; entry_idx < entry_count; entry_idx++) {
           // const uint32_t* entry_offsets = reinterpret_cast<const uint32_t*>(
           //     reinterpret_cast<const uint8_t*>(type.type) + dtohs(type.type.header.headerSize));
-          ResTable_type entry_offsets = new ResTable_type(type.myBuf(),
-              type.myOffset() + type.header.headerSize);
+          // ResTable_type entry_offsets = new ResTable_type(type.myBuf(),
+          //     type.myOffset() + type.header.headerSize);
           // int offset = dtohl(entry_offsets[entry_idx]);
-          int offset = dtohl(entry_offsets.entryOffset(entry_idx));
+          int offset = dtohl(type.entryOffset(entry_idx));
           if (offset != ResTable_type.NO_ENTRY) {
             // const ResTable_entry* entry =
             //     reinterpret_cast<const ResTable_entry*>(reinterpret_cast<const uint8_t*>(type.type) +

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager2.java
Patch:
@@ -621,8 +621,8 @@ private ApkAssetsCookie FindEntry(int resid, short density_override,
     }
 
     final int package_id = get_package_id(resid);
-    final byte type_idx = (byte) (get_type_id(resid) - 1);
-    final short entry_idx = get_entry_id(resid);
+    final int type_idx = (byte) (get_type_id(resid) - 1);
+    final int entry_idx = get_entry_id(resid);
 
     final byte package_idx = package_ids_[package_id];
     if (package_idx == (byte) 0xff) {
@@ -657,7 +657,7 @@ private ApkAssetsCookie FindEntry(int resid, short density_override,
         continue;
       }
 
-      short local_entry_idx = entry_idx;
+      int local_entry_idx = entry_idx;
 
       // If there is an IDMAP supplied with this package, translate the entry ID.
       if (type_spec.idmap_entries != null) {

File: resources/src/main/java/org/robolectric/res/android/Idmap.java
Patch:
@@ -64,8 +64,8 @@ public LoadedIdmap(Idmap_header header_) {
 
     // Performs a lookup of the expected entry ID for the given IDMAP entry header.
     // Returns true if the mapping exists and fills `output_entry_id` with the result.
-    static boolean Lookup(IdmapEntry_header header, short input_entry_id,
-        final Ref<Short> output_entry_id) {
+    static boolean Lookup(IdmapEntry_header header, int input_entry_id,
+        final Ref<Integer> output_entry_id) {
       if (input_entry_id < dtohs(header.entry_id_offset)) {
         // After applying the offset, the entry is not present.
         return false;
@@ -81,7 +81,7 @@ static boolean Lookup(IdmapEntry_header header, short input_entry_id,
       if (result == 0xffffffff) {
         return false;
       }
-      output_entry_id.set((short) (result));
+      output_entry_id.set(result);
       return true;
     }
 

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -1834,8 +1834,6 @@ static LocaleParserState assignLocaleComponent(ResTable_config config,
             case NO_KEY:
               /* Extension attribute. Do nothing. */
               break;
-            default:
-              break;
           }
           break;
         default:

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetInputStream.java
Patch:
@@ -38,7 +38,6 @@ InputStream getDelegate() {
 
   @Override
   boolean isNinePatch() {
-    String fileName = asset == null ? null : asset.getFileName();
-    return fileName != null && fileName.toLowerCase().endsWith(".9.png");
+    return asset != null && asset.isNinePatch();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNotification.java
Patch:
@@ -30,13 +30,13 @@ public class ShadowNotification {
 
   public CharSequence getContentTitle() {
     return RuntimeEnvironment.getApiLevel() >= Build.VERSION_CODES.N
-        ? realNotification.extras.getString(Notification.EXTRA_TITLE)
+        ? realNotification.extras.getCharSequence(Notification.EXTRA_TITLE)
         : findText(applyContentView(), "title");
   }
 
   public CharSequence getContentText() {
     return RuntimeEnvironment.getApiLevel() >= Build.VERSION_CODES.N
-        ? realNotification.extras.getString(Notification.EXTRA_TEXT)
+        ? realNotification.extras.getCharSequence(Notification.EXTRA_TEXT)
         : findText(applyContentView(), "text");
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -1218,7 +1218,7 @@ public void getPackageInfo_shouldReturnRequestedPermissions() throws Exception {
     PackageInfo packageInfo = packageManager.getPackageInfo(RuntimeEnvironment.application.getPackageName(), PackageManager.GET_PERMISSIONS);
     String[] permissions = packageInfo.requestedPermissions;
     assertThat(permissions).isNotNull();
-    assertThat(permissions.length).isEqualTo(3);
+    assertThat(permissions.length).isEqualTo(4);
   }
 
   @Test

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -27,6 +27,7 @@
 import com.sun.source.util.TreePath;
 import com.sun.source.util.TreeScanner;
 import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.model.JavacElements;
 import com.sun.tools.javac.tree.JCTree.JCExpression;
 import com.sun.tools.javac.tree.JCTree.JCFieldAccess;
 import com.sun.tools.javac.tree.JCTree.JCMethodInvocation;
@@ -166,7 +167,7 @@ private JCMethodInvocation createSyntheticShadowAccess(VisitorState state) {
   }
 
   private static Symbol findSymbol(VisitorState state, String className) {
-    Symbol classSymbol = state.getSymbolFromString(className);
+    Symbol classSymbol = JavacElements.instance(state.context).getTypeElement(className);
     if (classSymbol == null) {
       throw new IllegalStateException("couldn't find symbol " + className);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSensorManagerTest {
@@ -152,8 +151,8 @@ public void createSensorEvent_shouldThrowExceptionWhenValueLessThan1() {
 
   @Test
   public void getSensor_shouldBeConfigurable() {
-    Sensor sensor = Shadow.newInstanceOf(Sensor.class);
-    shadowOf(sensorManager).addSensor(Sensor.TYPE_ACCELEROMETER, sensor);
+    Sensor sensor = ShadowSensor.newInstance(Sensor.TYPE_ACCELEROMETER);
+    shadowOf(sensorManager).addSensor(sensor);
     assertThat(sensor).isSameAs(sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -392,9 +392,9 @@ public void getPixels(int[] pixels, int offset, int stride, int x, int y, int wi
         width != getWidth() ||
         height != getHeight() ||
         pixels.length != colors.length) {
-      for (int y0 = y; y0 < y + height; y0++) {
-        for (int x0 = x; x0 < x + width; x0++) {
-          pixels[offset + y0 * stride + x0] = colors[(y0 - y) * this.width + (x0 - x)];
+      for (int y0 = 0; y0 < height; y0++) {
+        for (int x0 = 0; x0 < width; x0++) {
+          pixels[offset + y0 * stride + x0] = colors[(y0 + y) * getWidth() + x0 + x];
         }
       }
     } else {

File: integration_tests/ctesque/src/test/java/android/content/res/ResourcesTest.java
Patch:
@@ -1,7 +1,6 @@
 package android.content.res;
 
 import static android.os.Build.VERSION_CODES.KITKAT;
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.util.TypedValue.COMPLEX_UNIT_DIP;
 import static android.util.TypedValue.COMPLEX_UNIT_IN;
@@ -733,7 +732,7 @@ public void whenAttrIsDefinedInRuntimeSdk_getResourceName_findsResource() {
 
   @Test
   @SdkSuppress(maxSdkVersion = KITKAT)
-  @Config(maxSdk = KITKAT_WATCH)
+  @Config(maxSdk = KITKAT)
   public void whenAttrIsNotDefinedInRuntimeSdk_getResourceName_doesntFindRequestedResourceButInsteadFindsInternalResourceWithSameId() {
     // asking for an attr defined after the current SDK doesn't have a defined result; in this case it returns
     //   numberPickerStyle from com.internal.android.R

File: processor/src/main/java/org/robolectric/annotation/processing/validator/ImplementationValidator.java
Patch:
@@ -7,7 +7,7 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic.Kind;
-import org.robolectric.annotation.processing.RobolectricModel.Builder;
+import org.robolectric.annotation.processing.RobolectricModel;
 
 /**
  * Validator that checks usages of {@link org.robolectric.annotation.Implementation}.
@@ -20,8 +20,8 @@ public class ImplementationValidator extends FoundOnImplementsValidator {
           "equals"
       );
 
-  public ImplementationValidator(Builder modelBuilder, ProcessingEnvironment env) {
-    super(modelBuilder, env, "org.robolectric.annotation.Implementation");
+  public ImplementationValidator(RobolectricModel model, ProcessingEnvironment env) {
+    super(model, env, "org.robolectric.annotation.Implementation");
   }
 
   @Override

File: processor/src/main/java/org/robolectric/annotation/processing/validator/ResetterValidator.java
Patch:
@@ -13,8 +13,8 @@
  * Validator that checks usages of {@link org.robolectric.annotation.Resetter}.
  */
 public class ResetterValidator extends FoundOnImplementsValidator {
-  public ResetterValidator(RobolectricModel.Builder modelBuilder, ProcessingEnvironment env) {
-    super(modelBuilder, env, "org.robolectric.annotation.Resetter");
+  public ResetterValidator(RobolectricModel model, ProcessingEnvironment env) {
+    super(model, env, "org.robolectric.annotation.Resetter");
   }
 
   @Override
@@ -36,7 +36,7 @@ public Void visitExecutable(ExecutableElement elem, TypeElement parent) {
         error = true;
       }
       if (!error) {
-        modelBuilder.addResetter(parent, elem);
+        model.addResetter(parent, elem);
       }
     }
     return null;

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.res.ResourcePath;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.res.builder.XmlBlock;
-import org.robolectric.shadow.api.ShadowPicker;
+import org.robolectric.shadow.api.ShadowFactory;
 
 public class AndroidConfigurer {
   public static void withConfig(InstrumentationConfiguration.Builder builder, Config config) {
@@ -50,7 +50,7 @@ public static void configure(InstrumentationConfiguration.Builder builder, Inter
         .doNotAcquireClass(AndroidManifest.class)
         .doNotAcquireClass(RobolectricTestRunner.class)
         .doNotAcquireClass(RobolectricTestRunner.HelperTestRunner.class)
-        .doNotAcquireClass(ShadowPicker.class)
+        .doNotAcquireClass(ShadowFactory.class)
         .doNotAcquireClass(ResourcePath.class)
         .doNotAcquireClass(ResourceTable.class)
         .doNotAcquireClass(ApkLoader.class)

File: robolectric/src/test/java/org/robolectric/AttributeSetBuilderTest.java
Patch:
@@ -339,7 +339,6 @@ public void getStyleAttribute_whenStyleIsBogus() throws Exception {
       Robolectric.buildAttributeSet()
             .setStyleAttribute("@style/non_existent_style")
             .build();
-      fail();
     } catch (IllegalArgumentException e) {
       assertThat(e)
           .hasMessageThat()

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -30,14 +30,14 @@ public void setUp() throws Exception {
   @Config(sdk = 26)
   public void testDefaultQualifiers() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
+        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
   }
 
   @Test
   @Config(qualifiers = "en", sdk = 26)
   public void testDefaultQualifiers_withoutRegion() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-nowidecg-lowdr-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
+        .isEqualTo("en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -527,7 +527,7 @@ public static final class plurals {
     public static final class raw {
         public static final int raw_no_ext=0x7f080000;
         public static final int raw_resource=0x7f080001;
-        public static final int sound=0x7f080002;
+    public static final int sound = 0x7f080002;
     }
     public static final class string {
         public static final int activity_name=0x7f0f0015;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -177,7 +177,8 @@ public static class MyParallelUniverse extends ParallelUniverse {
 
     @Override
     public void setUpApplicationState(ApkLoader apkLoader, Method method,
-        Config config, AndroidManifest appManifest, SdkEnvironment environment) {
+        Config config, AndroidManifest appManifest,
+        boolean legacyResources, SdkEnvironment environment) {
       throw new RuntimeException("fake error in setUpApplicationState");
     }
   }

File: robolectric/src/test/java/org/robolectric/android/DrawableResourceLoaderTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.android;
 
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -58,7 +58,7 @@ public void testDrawableTypes() {
     assertThat(resources.getDrawable(R.drawable.rainbow)).isInstanceOf(LayerDrawable.class);
   }
 
-  @Test @Config(maxSdk = KITKAT_WATCH)
+  @Test @Config(maxSdk = KITKAT)
   public void testVectorDrawableType_preVectors() {
     assertThat(resources.getDrawable(R.drawable.an_image_or_vector)).isInstanceOf(BitmapDrawable.class);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowAssetManager.legacyShadowOf;
 import static org.robolectric.shadows.ShadowAssetManager.useLegacy;
 
@@ -26,8 +27,6 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadow.api.Shadow;
-import org.robolectric.shadows.ShadowResources.ShadowLegacyTheme;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAssetManagerTest {
@@ -209,7 +208,7 @@ public void whenStyleAttrResolutionFails_attrsToTypedArray_returnsNiceErrorMessa
                 .build(),
             new int[] {R.attr.string1},
             0,
-            ((ShadowLegacyTheme) Shadow.extract(theme)).getNativePtr(),
+            shadowOf(theme).getNativePtr(),
             0);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static com.google.common.truth.Truth.assertThat;
 import static org.robolectric.Shadows.shadowOf;
@@ -191,7 +191,7 @@ public void testIsInUse() {
   }
   
   @Test
-  @Config(maxSdk = KITKAT_WATCH)
+  @Config(maxSdk = KITKAT)
   public void recycle_shouldInvokeRealObject19() {
     recycle_shouldInvokeRealObject("recycle");
   }
@@ -210,7 +210,7 @@ private void recycle_shouldInvokeRealObject(String recycleMethod) {
   }
   
   @Test
-  @Config(maxSdk = KITKAT_WATCH)
+  @Config(maxSdk = KITKAT)
   public void recycle_shouldRemoveMessageFromScheduler19() {
     recycle_shouldRemoveMessageFromScheduler();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static com.google.common.truth.Truth.assertThat;
@@ -133,7 +134,7 @@ public void isInteractive_shouldGetAndSet() {
   }
 
   @Test
-  @Config(minSdk = LOLLIPOP)
+  @Config(minSdk = KITKAT_WATCH)
   public void isPowerSaveMode_shouldGetAndSet() {
     assertThat(powerManager.isPowerSaveMode()).isFalse();
     shadowPowerManager.setIsPowerSaveMode(true);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -230,7 +230,7 @@ public void shouldParseRfc3339() {
   }
 
   @Test
-  @Config(maxSdk = KITKAT_WATCH)
+  @Config(maxSdk = KITKAT)
   // this fails on LOLLIPOP+; is the shadow impl of parse3339 correct for pre-LOLLIPOP?
   public void shouldParseRfc3339_withQuestionableFormat() {
     for (String tz : Arrays.asList("Europe/Berlin", "America/Los Angeles", "Australia/Adelaide")) {
@@ -355,7 +355,7 @@ public void shouldFormatAllFormats() throws Exception {
   }
 
   @Test
-  @Config(maxSdk = KITKAT_WATCH)
+  @Config(maxSdk = KITKAT)
   // these fail on LOLLIPOP+; is the shadow impl of format correct for pre-LOLLIPOP?
   public void shouldFormatAllFormats_withQuestionableResults() throws Exception {
     Time t = new Time("Asia/Tokyo");

File: shadows/framework/src/main/java/org/robolectric/android/ConfigurationV25.java
Patch:
@@ -205,7 +205,6 @@ public static String resourceQualifierString(Configuration config, DisplayMetric
       case Configuration.UI_MODE_TYPE_VR_HEADSET:
         parts.add("vrheadset");
         break;
-      case Configuration.UI_MODE_TYPE_NORMAL:
       default:
         break;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeAndroidInput.java
Patch:
@@ -4,7 +4,7 @@
  * Java representation of framework native system headers Transliterated from oreo-mr1 (SDK 27)
  * frameworks/native/include/android/Input.h
  *
- * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/android/input.h">include/android/input.h</a>
+ * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/android/input.h
  */
 public class NativeAndroidInput {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeInput.java
Patch:
@@ -34,8 +34,8 @@
  * Java representation of framework native input Transliterated from oreo-mr1 (SDK 27)
  * frameworks/native/include/input/Input.h and libs/input/Input.cpp
  *
- * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/input/Input.h">include/input/Input.h</a>
- * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/libs/input/Input.cpp>libs/input/Input.cpp</a>
+ * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/input/Input.h
+ * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/libs/input/Input.cpp
  */
 public class NativeInput {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static org.robolectric.Shadows.shadowOf;
+
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
@@ -227,7 +229,7 @@ private void describeBitmap(Bitmap bitmap, Paint paint) {
         if (colorFilter instanceof ColorMatrixColorFilter) {
           ColorMatrixColorFilter colorMatrixColorFilter = (ColorMatrixColorFilter) colorFilter;
           ShadowColorMatrixColorFilter shadowColorMatrixColorFilter =
-              Shadow.extract(colorMatrixColorFilter);
+              shadowOf(colorMatrixColorFilter);
           ColorMatrix colorMatrix = shadowColorMatrixColorFilter.getMatrix();
           appendDescription(" with ColorMatrixColorFilter<" + formatColorMatric(colorMatrix) + ">");
         } else {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMotionEvent.java
Patch:
@@ -44,7 +44,7 @@
  * contents of this class were transliterated from oreo-mr1 (SDK 27)
  * frameworks/base/core/jni/android_view_MotionEvent.cpp
  *
- * @see <a href="https://android.googlesource.com/platform/frameworks/base/+/oreo-mr1-release/core/jni/android_view_MotionEvent.cpp">core/jni/android_view_MotionEvent.cpp</a>
+ * @see https://android.googlesource.com/platform/frameworks/base/+/oreo-mr1-release/core/jni/android_view_MotionEvent.cpp
  *
  * Tests should not reference this class directly. MotionEvents should be created via one of the
  * MotionEvent.obtain methods or via MotionEventBuilder.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.annotation.NonNull;
@@ -160,7 +160,7 @@ public static class ShadowSession {
     private int sessionId;
     private ShadowPackageInstaller shadowPackageInstaller;
 
-    @Implementation(maxSdk = KITKAT_WATCH)
+    @Implementation(maxSdk = KITKAT)
     public void __constructor__() {}
 
     @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPicture.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.graphics.Bitmap;
@@ -21,7 +21,7 @@ public void __constructor__() {}
   @Implementation(minSdk = LOLLIPOP)
   public void __constructor__(long nativePicture) {}
 
-  @Implementation(maxSdk = KITKAT_WATCH)
+  @Implementation(maxSdk = KITKAT)
   public void __constructor__(int nativePicture, boolean fromStream) {}
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPowerManager.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static org.robolectric.shadows.ShadowApplication.getInstance;
@@ -42,7 +43,7 @@ public void setIsScreenOn(boolean screenOn) {
     isScreenOn = screenOn;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation(minSdk = KITKAT_WATCH)
   public boolean isInteractive() {
     return isInteractive;
   }
@@ -51,7 +52,7 @@ public void setIsInteractive(boolean interactive) {
     isInteractive = interactive;
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation(minSdk = KITKAT_WATCH)
   public boolean isPowerSaveMode() {
     return isPowerSaveMode;
   }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -74,7 +74,6 @@ public void mediaBrowser_getItem() {
     mediaBrowser.getItem(ROOT_ID, mediaItemCallBack);
     assertThat(mediaItemCallBack.getMediaItem()).isEqualTo(root);
 
-    mediaItemCallBack.mediaItem = null;
     mediaBrowser.getItem("fake_id", mediaItemCallBack);
     assertThat(mediaItemCallBack.getMediaItem()).isNull();
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager9.java
Patch:
@@ -404,8 +404,8 @@ static CppAssetManager2 AssetManagerFromLong(long ptr) {
 
   static ParcelFileDescriptor ReturnParcelFileDescriptor(/* JNIEnv* env,*/ Asset asset,
       long[] out_offsets) throws FileNotFoundException {
-    final Ref<Long> start_offset = new Ref<>(0l);
-    final Ref<Long> length = new Ref<>(0l);
+    final Ref<Long> start_offset = new Ref<>(0L);
+    final Ref<Long> length = new Ref<>(0L);
     FileDescriptor fd = asset.openFileDescriptor(start_offset, length);
     // asset.reset();
 

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution.java
Patch:
@@ -324,7 +324,7 @@ public static void ApplyStyle(ResTableTheme theme, ResXMLParser xmlParser, int d
         }
       }
 
-      if (value.get().dataType == DataType.NULL.code() && value.get().data == Res_value.DATA_NULL_EMPTY) {
+      if (value.get().dataType == DataType.NULL.code() && value.get().data != Res_value.DATA_NULL_EMPTY) {
         // Walk through the style class values looking for the requested attribute.
         final ResTable.bag_entry styleAttrEntry = styleAttrFinder.find(curIdent);
         if (styleAttrEntry != styleAttrEnd) {
@@ -338,7 +338,7 @@ public static void ApplyStyle(ResTableTheme theme, ResXMLParser xmlParser, int d
         }
       }
 
-      if (value.get().dataType == DataType.NULL.code() && value.get().data == Res_value.DATA_NULL_EMPTY) {
+      if (value.get().dataType == DataType.NULL.code() && value.get().data != Res_value.DATA_NULL_EMPTY) {
         // Walk through the default style values looking for the requested attribute.
         final ResTable.bag_entry defStyleAttrEntry = defStyleAttrFinder.find(curIdent);
         if (defStyleAttrEntry != defStyleAttrEnd) {

File: resources/src/main/java/org/robolectric/res/android/ResTable.java
Patch:
@@ -48,6 +48,7 @@
 
 // transliterated from https://android.googlesource.com/platform/frameworks/base/+/android-8.1.0_r22/libs/androidfw/ResourceTypes.cpp
 //   and https://android.googlesource.com/platform/frameworks/base/+/android-8.1.0_r22/include/androidfw/ResourceTypes.h
+@SuppressWarnings("NewApi")
 public class ResTable {
 
   private static final int IDMAP_MAGIC             = 0x504D4449;
@@ -2782,7 +2783,7 @@ public int getBagLocked(int resID, Ref<bag_entry[]> outBag, Ref<Integer> outType
 //        ? dtohl(((const ResTable_map_entry*)entry.entry)->parent.ident) : 0;
 //    const uint32_t count = entrySize >= sizeof(ResTable_map_entry)
 //        ? dtohl(((const ResTable_map_entry*)entry.entry)->count) : 0;
-    ResTable_map_entry mapEntry = entrySize >= ResTable_map_entry.SIZEOF ?
+    ResTable_map_entry mapEntry = entrySize >= ResTable_map_entry.BASE_SIZEOF ?
         new ResTable_map_entry(entry.entry.myBuf(), entry.entry.myOffset()) : null;
     final int parent = mapEntry != null ? dtohl(mapEntry.parent.ident) : 0;
     final int count = mapEntry != null ? dtohl(mapEntry.count) : 0;

File: robolectric/src/main/java/org/robolectric/android/AttributeSetBuilderImpl.java
Patch:
@@ -44,6 +44,7 @@
 import org.robolectric.shadows.Converter;
 import org.robolectric.shadows.Converter2;
 import org.robolectric.shadows.ShadowArscAssetManager;
+import org.robolectric.shadows.ShadowAssetManager;
 import org.robolectric.shadows.ShadowLegacyAssetManager;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
@@ -82,7 +83,7 @@ public static class ArscResourceResolver implements ResourceResolver {
     public ArscResourceResolver(Context context) {
       this.context = context;
 
-      ShadowArscAssetManager shadowArscAssetManager = Shadow.extract(context.getAssets());
+      ShadowAssetManager.ArscBase shadowArscAssetManager = Shadow.extract(context.getAssets());
       this.resTable = shadowArscAssetManager.getCompileTimeResTable();
     }
 

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -125,7 +125,8 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
         ? "nowidecg-lowdr-"
         : "";
     assertThat(RuntimeEnvironment.getQualifiers())
-        .contains("large-notlong-notround-" + optsForO + "land-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v"
+        .contains("large-notlong-notround" + optsForO + "-" + optsForO + "land-notnight-mdpi-finger-keyssoft"
+            + "-nokeys-navhidden-nonav-v"
             + Build.VERSION.RESOURCES_SDK_INT);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -97,7 +97,7 @@ public static Bitmap decodeStream(InputStream is) {
   public static Bitmap decodeStream(InputStream is, Rect outPadding, BitmapFactory.Options opts) {
     byte[] ninePatchChunk = null;
 
-    if (RuntimeEnvironment.useLegacyResources() && is instanceof AssetInputStream) {
+    if (is instanceof AssetInputStream) {
       ShadowAssetInputStream sais = Shadow.extract(is);
       is = sais.getDelegate();
       if (sais.isNinePatch()) {

File: resources/src/main/java/org/robolectric/res/android/AttributeResolution.java
Patch:
@@ -391,7 +391,7 @@ public static void ApplyStyle(ResTableTheme theme, ResXMLParser xmlParser, int d
   }
 
   public static boolean RetrieveAttributes(ResTable res, ResXMLParser xmlParser, int[] attrs, int attrsLength, int[] outValues, int[] outIndices) {
-    Ref<ResTable_config> config = new Ref<>(null);
+    Ref<ResTable_config> config = new Ref<>(new ResTable_config());
     Ref<Res_value> value = new Ref<>(null);
 
     int indices_idx = 0;

File: robolectric/src/test/java/org/robolectric/android/BootstrapTest.java
Patch:
@@ -33,7 +33,6 @@
 import static android.content.res.Configuration.UI_MODE_TYPE_APPLIANCE;
 import static android.content.res.Configuration.UI_MODE_TYPE_MASK;
 import static android.content.res.Configuration.UI_MODE_TYPE_NORMAL;
-import static android.content.res.Configuration.UI_MODE_TYPE_UNDEFINED;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.O;
 import static android.view.Surface.ROTATION_0;

File: processor/src/test/java/org/robolectric/annotation/processing/generator/ShadowProviderGeneratorTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import javax.annotation.processing.ProcessingEnvironment;
 import org.junit.Before;
@@ -33,8 +34,9 @@ public void setUp() throws Exception {
 
   @Test
   public void resettersAreOnlyCalledIfSdkMatches() throws Exception {
-    List<ResetterInfo> resetterInfos = new ArrayList<>();
+    when(model.getVisibleShadowTypes()).thenReturn(Collections.emptyList());
 
+    List<ResetterInfo> resetterInfos = new ArrayList<>();
     resetterInfos.add(resetterInfo("ShadowThing", 19, 20, "reset19To20"));
     resetterInfos.add(resetterInfo("ShadowThing", -1, 18, "resetMax18"));
     resetterInfos.add(resetterInfo("ShadowThing", 21, -1, "resetMin21"));

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeAndroidInput.java
Patch:
@@ -4,7 +4,7 @@
  * Java representation of framework native system headers Transliterated from oreo-mr1 (SDK 27)
  * frameworks/native/include/android/Input.h
  *
- * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/android/input.h
+ * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/android/input.h">include/android/input.h</a>
  */
 public class NativeAndroidInput {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/NativeInput.java
Patch:
@@ -34,8 +34,8 @@
  * Java representation of framework native input Transliterated from oreo-mr1 (SDK 27)
  * frameworks/native/include/input/Input.h and libs/input/Input.cpp
  *
- * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/input/Input.h
- * @see https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/libs/input/Input.cpp
+ * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/include/input/Input.h">include/input/Input.h</a>
+ * @see <a href="https://android.googlesource.com/platform/frameworks/native/+/oreo-mr1-release/libs/input/Input.cpp>libs/input/Input.cpp</a>
  */
 public class NativeInput {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMotionEvent.java
Patch:
@@ -44,7 +44,7 @@
  * contents of this class were transliterated from oreo-mr1 (SDK 27)
  * frameworks/base/core/jni/android_view_MotionEvent.cpp
  *
- * @see https://android.googlesource.com/platform/frameworks/base/+/oreo-mr1-release/core/jni/android_view_MotionEvent.cpp
+ * @see <a href="https://android.googlesource.com/platform/frameworks/base/+/oreo-mr1-release/core/jni/android_view_MotionEvent.cpp">core/jni/android_view_MotionEvent.cpp</a>
  *
  * Tests should not reference this class directly. MotionEvents should be created via one of the
  * MotionEvent.obtain methods or via MotionEventBuilder.

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowMediaBrowserCompatTest.java
Patch:
@@ -74,6 +74,7 @@ public void mediaBrowser_getItem() {
     mediaBrowser.getItem(ROOT_ID, mediaItemCallBack);
     assertThat(mediaItemCallBack.getMediaItem()).isEqualTo(root);
 
+    mediaItemCallBack.mediaItem = null;
     mediaBrowser.getItem("fake_id", mediaItemCallBack);
     assertThat(mediaItemCallBack.getMediaItem()).isNull();
   }

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -201,7 +201,7 @@ public SystemLogEInterceptor() {
       super(new MethodRef(System.class.getName(), "logE"));
     }
 
-    private static void logE(Object[] params) {
+    static void logE(Object... params) {
       String message = "System.logE: ";
       for (Object param : params) {
         message += param.toString();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -512,7 +512,7 @@ public Account[] doWork() throws OperationCanceledException, IOException, Authen
         Account[] accountsByType = getAccountsByType(type);
         for (Account account : accountsByType) {
           Set<String> featureSet = accountFeatures.get(account);
-          if (featureSet.containsAll(Arrays.asList(features))) {
+          if (features == null || featureSet.containsAll(Arrays.asList(features))) {
             result.add(account);
           }
         }

File: errorprone/src/main/java/org/robolectric/errorprone/bugpatterns/DeprecatedMethodsCheck.java
Patch:
@@ -50,7 +50,7 @@ public final class DeprecatedMethodsCheck extends BugChecker
 
   @Override
   public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {
-    if (isInShadowClass(state)) {
+    if (isInShadowClass(state.getPath(), state)) {
       return NO_MATCH;
     }
 

File: integration_tests/androidx_test/src/test/java/org/robolectric/integration_tests/axt/ActivityTestRuleTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.test.rule.ActivityTestRule;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.rule.ActivityTestRule;
+import androidx.test.runner.AndroidJUnit4;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Before;

File: integration_tests/androidx_test/src/test/java/org/robolectric/integration_tests/axt/InstrumentationRegistryTest.java
Patch:
@@ -4,8 +4,8 @@
 
 import android.app.Instrumentation;
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: integration_tests/ctesque/src/androidTest/java/android/app/ActivityInstrTest.java
Patch:
@@ -3,9 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import android.graphics.drawable.ColorDrawable;
-import android.support.test.rule.ActivityTestRule;
-import android.support.test.runner.AndroidJUnit4;
 import android.widget.Button;
+import androidx.test.rule.ActivityTestRule;
+import androidx.test.runner.AndroidJUnit4;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;

File: integration_tests/ctesque/src/test/java/android/app/ActivityTest.java
Patch:
@@ -3,9 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import android.graphics.drawable.ColorDrawable;
-import android.support.test.rule.ActivityTestRule;
-import android.support.test.runner.AndroidJUnit4;
 import android.widget.Button;
+import androidx.test.rule.ActivityTestRule;
+import androidx.test.runner.AndroidJUnit4;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;

File: integration_tests/ctesque/src/test/java/android/content/res/AssetManagerTest.java
Patch:
@@ -1,11 +1,11 @@
 package android.content.res;
 
-import static android.support.test.InstrumentationRegistry.getTargetContext;
+import static androidx.test.InstrumentationRegistry.getTargetContext;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.content.Context;
 import android.os.ParcelFileDescriptor;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.runner.AndroidJUnit4;
 import com.google.common.io.CharStreams;
 import java.io.File;
 import java.io.FileOutputStream;

File: integration_tests/ctesque/src/test/java/android/content/res/ResourcesTest.java
Patch:
@@ -32,12 +32,12 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.NinePatchDrawable;
 import android.os.Build;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.SdkSuppress;
-import android.support.test.runner.AndroidJUnit4;
 import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.util.Xml;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.SdkSuppress;
+import androidx.test.runner.AndroidJUnit4;
 import com.google.common.collect.Range;
 import java.io.File;
 import java.io.InputStream;

File: integration_tests/ctesque/src/test/java/android/content/res/ThemeTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.content.Context;
 import android.content.res.Resources.Theme;
 import android.graphics.Color;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.util.TypedValue;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;

File: integration_tests/ctesque/src/test/java/android/view/MotionEventTest.java
Patch:
@@ -14,9 +14,9 @@
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.os.SystemClock;
-import android.support.test.runner.AndroidJUnit4;
 import android.view.MotionEvent.PointerCoords;
 import android.view.MotionEvent.PointerProperties;
+import androidx.test.runner.AndroidJUnit4;
 import com.google.common.truth.FailureMetadata;
 import com.google.common.truth.Subject;
 import com.google.common.truth.Truth;

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -3,7 +3,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
-import android.support.test.runner.MonitoringInstrumentation;
+import androidx.test.runner.MonitoringInstrumentation;
 import org.robolectric.Robolectric;
 import org.robolectric.android.controller.ActivityController;
 

File: robolectric/src/main/java/org/robolectric/android/internal/RoboUiController.java
Patch:
@@ -10,15 +10,15 @@
 import android.os.Build.VERSION_CODES;
 import android.os.Looper;
 import android.os.SystemClock;
-import android.support.test.platform.ui.InjectEventSecurityException;
-import android.support.test.platform.ui.UiController;
 import android.util.Log;
 import android.view.KeyCharacterMap;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.ViewRootImpl;
 import android.view.WindowManagerGlobal;
 import android.view.WindowManagerImpl;
+import androidx.test.platform.ui.InjectEventSecurityException;
+import androidx.test.platform.ui.UiController;
 import com.google.common.annotations.VisibleForTesting;
 import java.util.Arrays;
 import java.util.List;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -7,7 +7,6 @@
 import android.widget.FrameLayout;
 import com.android.internal.app.AlertController;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.shadow.api.Shadow;

File: processor/src/main/java/org/robolectric/annotation/processing/validator/ImplementsValidator.java
Patch:
@@ -46,6 +46,9 @@ public class ImplementsValidator extends Validator {
   private final ProcessingEnvironment env;
   private final SdkCheckMode sdkCheckMode;
 
+  /**
+   * Supported modes for validation of {@link Implementation} methods against SDKs.
+   */
   public enum SdkCheckMode {
     OFF,
     WARN,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlertController.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAndroidBidi.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.O_MR1;
+
 import android.text.Layout;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static android.os.Build.VERSION_CODES.O_MR1;
-
 @Implements(className = "android.text.AndroidBidi", isInAndroidSdk = false)
 public class ShadowAndroidBidi {
   @Implementation(maxSdk = O_MR1)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderClient.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
+
 import android.content.ContentProvider;
 import android.content.ContentProviderClient;
 import android.content.ContentProviderOperation;
@@ -20,8 +22,6 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
-
 @Implements(ContentProviderClient.class)
 public class ShadowContentProviderClient {
   private boolean stable;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -167,8 +167,9 @@ public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,
   @Implementation(minSdk = JELLY_BEAN_MR1)
   public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user,
       IntentFilter filter, String broadcastPermission, Handler scheduler) {
-    return getShadowInstrumentation().registerReceiverWithContext(receiver, filter, broadcastPermission, scheduler,
-        realContextImpl);
+    return getShadowInstrumentation()
+        .registerReceiverWithContext(
+            receiver, filter, broadcastPermission, scheduler, realContextImpl);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -21,8 +23,6 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
-
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Drawable.class)
 public class ShadowDrawable {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowIAppOpsService.java
Patch:
@@ -1,13 +1,13 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
+
 import android.os.IBinder;
 import com.android.internal.app.IAppOpsService;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
-
 public class ShadowIAppOpsService {
 
   @Implements(value = IAppOpsService.Stub.class, isInAndroidSdk = false)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputManager.java
Patch:
@@ -1,14 +1,14 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 import android.hardware.input.InputManager;
 import android.view.InputEvent;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
-
 /*
  * Shadow for InputManager.
  */

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
@@ -21,8 +20,8 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.util.Logger;
 import org.robolectric.shadow.api.Shadow;
+import org.robolectric.util.Logger;
 import org.robolectric.util.Scheduler;
 
 /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -26,7 +26,6 @@
 import static android.content.pm.PackageManager.SIGNATURE_NO_MATCH;
 import static android.content.pm.PackageManager.SIGNATURE_SECOND_NOT_SIGNED;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.N;
 import static java.util.Arrays.asList;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPlayerBase.java
Patch:
@@ -1,13 +1,13 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.O;
+
 import android.media.IAudioService;
 import android.os.Build;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-import static android.os.Build.VERSION_CODES.O;
-
 @Implements(className = "android.media.PlayerBase", isInAndroidSdk = false,
     minSdk = Build.VERSION_CODES.N)
 public class ShadowPlayerBase {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextToSpeech.java
Patch:
@@ -1,14 +1,14 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+
 import android.content.Context;
 import android.os.Bundle;
 import android.speech.tts.TextToSpeech;
 import java.util.HashMap;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
-
 @Implements(TextToSpeech.class)
 public class ShadowTextToSpeech {
   private Context context;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualRefBasePtr.java
Patch:
@@ -1,13 +1,13 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+
 import com.android.internal.util.VirtualRefBasePtr;
 import java.util.HashMap;
 import java.util.Map;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static android.os.Build.VERSION_CODES.LOLLIPOP;
-
 @Implements(value = VirtualRefBasePtr.class, isInAndroidSdk = false)
 public class ShadowVirtualRefBasePtr {
   private static final Map<Long, RefHolder> POINTERS = new HashMap<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -422,7 +422,7 @@ int getRequestCodeForIntent(Intent requestIntent) {
     return requestCode;
   }
 
-  ComponentName startService(Intent intent) {
+  protected ComponentName startService(Intent intent) {
     startedServices.add(new Intent.FilterComparison(intent));
     if (intent.getComponent() != null) {
       return intent.getComponent();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.bluetooth.BluetoothDevice;
@@ -27,7 +28,7 @@ public static BluetoothDevice newInstance(String address) {
 
   /**
    * Implements getService() in the same way the original method does, but ignores any Exceptions
-   * from invoking {@link BluetoothAdapter#getBluetoothService}.
+   * from invoking {@link android.bluetooth.BluetoothAdapter#getBluetoothService}.
    */
   @Implementation
   public static IBluetooth getService() {
@@ -67,7 +68,7 @@ protected ParcelUuid[] getUuids() {
     return uuids;
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR2)
   protected BluetoothGatt connectGatt(
       Context context, boolean autoConnect, BluetoothGattCallback callback) {
     return ShadowBluetoothGatt.newInstance(realBluetoothDevice);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -9,7 +9,6 @@
 import static android.os.Build.VERSION_CODES.P;
 import static com.google.common.util.concurrent.Futures.immediateFuture;
 import static com.google.common.util.concurrent.MoreExecutors.directExecutor;
-import static org.robolectric.Shadows.shadowOf;
 
 import android.app.Activity;
 import android.app.ActivityThread;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinux.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.N_MR1;
+
 import android.os.Build;
 import android.system.ErrnoException;
 import android.system.OsConstants;
@@ -38,7 +40,7 @@ public StructStat stat(String path) throws ErrnoException {
     );
   }
 
-  @Implementation
+  @Implementation(maxSdk = N_MR1)
   protected StructStat fstat(String path) throws ErrnoException {
     return stat(path);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.O;
@@ -424,7 +425,7 @@ protected boolean isVoicemailVibrationEnabled(PhoneAccountHandle handle) {
    * Sets the value returned by {@link
    * TelephonyManager#isVoicemailVibrationEnabled(PhoneAccountHandle)}.
    */
-  @Implementation(minSdk = N)
+  @Implementation(minSdk = O)
   protected void setVoicemailVibrationEnabled(PhoneAccountHandle handle, boolean isEnabled) {
     voicemailVibrationEnabledMap.put(handle, isEnabled);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -7,7 +7,6 @@
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadow.api.Shadow.invokeConstructor;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
@@ -617,8 +616,9 @@ protected boolean setPermissionGrantState(
   protected void lockNow() {
     KeyguardManager keyguardManager =
         (KeyguardManager) this.context.getSystemService(Context.KEYGUARD_SERVICE);
-    shadowOf(keyguardManager).setKeyguardLocked(true);
-    shadowOf(keyguardManager).setIsDeviceLocked(true);
+    ShadowKeyguardManager shadowKeyguardManager = Shadow.extract(keyguardManager);
+    shadowKeyguardManager.setKeyguardLocked(true);
+    shadowKeyguardManager.setIsDeviceLocked(true);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMotionEvent.java
Patch:
@@ -5,7 +5,6 @@
 import static android.os.Build.VERSION_CODES.P;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_ORIENTATION;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_PRESSURE;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_SIZE;
@@ -30,6 +29,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Resetter;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.ReflectionHelpers;
 
 /**
@@ -970,7 +970,7 @@ private static NativeInput.MotionEvent getNativeMotionEvent(long nativePtr) {
   protected final void transform(Matrix matrix) {
     checkNotNull(matrix);
     NativeInput.MotionEvent event = getNativeMotionEvent();
-    ShadowMatrix shadowMatrix = shadowOf(matrix);
+    ShadowMatrix shadowMatrix = Shadow.extract(matrix);
 
     float[] m = new float[9];
     shadowMatrix.getValues(m);

File: errorprone/src/test/java/xxx/XShadowApplication.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.annotation.Implements;
 
 /**
- * Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricBestPractices}.
+ * Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.DeprecatedMethodsCheck}.
  */
 @Implements(Application.class)
 public class XShadowApplication {

File: errorprone/src/test/java/xxx/XShadowLinearLayout.java
Patch:
@@ -3,9 +3,7 @@
 import android.widget.LinearLayout;
 import org.robolectric.annotation.Implements;
 
-/**
- * Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricBestPractices}.
- */
+/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}. */
 @Implements(LinearLayout.class)
 public class XShadowLinearLayout extends XShadowViewGroup {
   public int getGravity() {

File: errorprone/src/test/java/xxx/XShadowViewGroup.java
Patch:
@@ -6,9 +6,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-/**
- * Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.RobolectricBestPractices}.
- */
+/** Fake shadow for testing {@link org.robolectric.errorprone.bugpatterns.ShadowUsageCheck}. */
 @Implements(ViewGroup.class)
 public class XShadowViewGroup {
   @Implementation

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -419,7 +419,8 @@ private static void setUpPackageStorage(ApplicationInfo applicationInfo) {
   }
 
   // TODO move/replace this with packageManager
-  private static void registerBroadcastReceivers(
+  @VisibleForTesting
+  static void registerBroadcastReceivers(
       Application application, AndroidManifest androidManifest) {
     for (BroadcastReceiverData receiver : androidManifest.getBroadcastReceivers()) {
       IntentFilter filter = new IntentFilter();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -811,7 +811,7 @@ protected void freeStorageAndNotify(long freeStorageSize, IPackageDataObserver o
   protected void freeStorageAndNotify(
       String volumeUuid, long freeStorageSize, IPackageDataObserver observer) {}
 
-  @Implementation(minSdk = M)
+  @Implementation
   protected void setInstallerPackageName(String targetPackage, String installerPackageName) {
     packageInstallerMap.put(targetPackage, installerPackageName);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlertController.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.KITKAT;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.view.LayoutInflater;
@@ -62,7 +63,7 @@ public void setView(View view) {
     directlyOn(realAlertController, AlertController.class).setView(view);
   }
 
-  @Implementation(minSdk = KITKAT)
+  @Implementation(minSdk = LOLLIPOP)
   public void setView(int resourceId) {
     setView(LayoutInflater.from(RuntimeEnvironment.application).inflate(resourceId, null));
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -196,12 +196,12 @@ public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {
     return createBitmap((DisplayMetrics) null, width, height, config);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public static Bitmap createBitmap(DisplayMetrics displayMetrics, int width, int height, Bitmap.Config config, boolean hasAlpha) {
     return createBitmap((DisplayMetrics) null, width, height, config);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public static Bitmap createBitmap(DisplayMetrics displayMetrics, int width, int height, Bitmap.Config config) {
     if (width <= 0 || height <= 0) {
       throw new IllegalArgumentException("width and height must be > 0");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowIAppOpsService.java
Patch:
@@ -6,12 +6,14 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
+
 public class ShadowIAppOpsService {
 
   @Implements(value = IAppOpsService.Stub.class, isInAndroidSdk = false)
   public static class ShadowStub {
 
-    @Implementation
+    @Implementation(minSdk = JELLY_BEAN_MR2)
     public static IAppOpsService asInterface(IBinder obj) {
       return ReflectionHelpers.createNullProxy(IAppOpsService.class);
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowImageDecoder.java
Patch:
@@ -45,7 +45,7 @@ protected static ImageDecoder nCreate(long asset) {
     }
   }
 
-  @Implementation
+  @Implementation(maxSdk = O_MR1)
   protected static ImageDecoder nCreate(InputStream is, byte[] storage) {
     final Point size = ImageUtil.getImageSizeFromStream(is);
     final int width = size == null ? 10 : size.x;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
Patch:
@@ -325,8 +325,8 @@ public static void nativeRegisterCustomFunction(long connectionPtr, SQLiteCustom
     // not supported
   }
 
-  @Implementation(maxSdk = KITKAT_WATCH)
-  public static int nativeExecuteForBlobFileDescriptor(int connectionPtr, long statementPtr) {
+  @Implementation (maxSdk = KITKAT_WATCH)
+  public static int nativeExecuteForBlobFileDescriptor(int connectionPtr, int statementPtr) {
     return nativeExecuteForBlobFileDescriptor((long) connectionPtr, (long) statementPtr);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -260,7 +260,7 @@ public boolean handleMmi(String dialString) {
     return false;
   }
 
-  @Implementation(minSdk = LOLLIPOP_MR1)
+  @Implementation(minSdk = M)
   public boolean handleMmi(String dialString, PhoneAccountHandle accountHandle) {
     return false;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -7,7 +7,6 @@
 import static android.os.Build.VERSION_CODES.N;
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadow.api.Shadow.invokeConstructor;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
@@ -617,8 +616,8 @@ protected boolean setPermissionGrantState(
   protected void lockNow() {
     KeyguardManager keyguardManager =
         (KeyguardManager) this.context.getSystemService(Context.KEYGUARD_SERVICE);
-    shadowOf(keyguardManager).setKeyguardLocked(true);
-    shadowOf(keyguardManager).setIsDeviceLocked(true);
+    ((ShadowKeyguardManager) Shadow.extract(keyguardManager)).setKeyguardLocked(true);
+    ((ShadowKeyguardManager) Shadow.extract(keyguardManager)).setIsDeviceLocked(true);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputMethodManager.java
Patch:
@@ -2,6 +2,7 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
+import static android.os.Build.VERSION_CODES.M;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.os.IBinder;
@@ -107,7 +108,7 @@ protected boolean isFullscreenMode() {
   @Implementation
   protected void focusIn(View view) {}
 
-  @Implementation
+  @Implementation(minSdk = M)
   protected void onViewDetachedFromWindow(View view) {}
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -4,6 +4,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
+import static android.os.Build.VERSION_CODES.P;
 
 import android.app.Activity;
 import android.app.Fragment;
@@ -34,7 +35,7 @@ public class ShadowInstrumentation {
 
   private boolean checkActivities;
 
-  @Implementation
+  @Implementation(minSdk = P)
   public Activity startActivitySync(Intent intent, Bundle options) {
     throw new UnsupportedOperationException("Implement me!!");
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPicture.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.KITKAT;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
@@ -17,7 +18,7 @@ public class ShadowPicture {
   @Implementation
   public void __constructor__() {}
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   public void __constructor__(long nativePicture) {}
 
   @Implementation(maxSdk = KITKAT)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -430,7 +430,7 @@ public Bitmap copy(Bitmap.Config config, boolean isMutable) {
     return newBitmap;
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   public final int getAllocationByteCount() {
     return getRowBytes() * getHeight();
   }
@@ -602,7 +602,7 @@ public String toString() {
     return "Bitmap{description='" + description + '\'' + ", width=" + width + ", height=" + height + '}';
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   protected void reconfigure(int width, int height, Bitmap.Config config) {
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && this.config == Bitmap.Config.HARDWARE) {
       throw new IllegalStateException("native-backed bitmaps may not be reconfigured");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProvider.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.content.ContentProvider;
@@ -17,7 +18,7 @@ public void setCallingPackage(String callingPackage) {
     this.callingPackage = callingPackage;
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   public String getCallingPackage() {
     if (callingPackage != null) {
       return callingPackage;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.KITKAT;
 
 import android.accounts.Account;
@@ -781,7 +782,7 @@ public void registerContentObserver(
     contentObservers.add(new ContentObserverEntry(uri, notifyForDescendents, observer));
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public void registerContentObserver(
       Uri uri, boolean notifyForDescendents, ContentObserver observer, int userHandle) {
     registerContentObserver(uri, notifyForDescendents, observer);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.N;
@@ -175,7 +176,7 @@ public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,
     return ShadowApplication.getInstance().registerReceiverWithContext(receiver, filter, broadcastPermission, scheduler, realObject);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user,
       IntentFilter filter, String broadcastPermission, Handler scheduler) {
     return ShadowApplication.getInstance().registerReceiverWithContext(receiver, filter, broadcastPermission, scheduler, realObject);
@@ -191,7 +192,7 @@ public boolean stopService(Intent name) {
     return ShadowApplication.getInstance().stopService(name);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public int getUserId() {
     return 0;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDevicePolicyManager.java
Patch:
@@ -294,7 +294,7 @@ public void removeActiveAdmin(ComponentName admin) {
     deviceAdmins.remove(admin);
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   public void clearProfileOwner(ComponentName admin) {
     profileOwner = null;
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -215,10 +215,11 @@ public static void setExternalStorageState(File directory, String state) {
   /**
    * Shadow for {@link android.os.Environment.UserEnvironment}
    */
-  @Implements(className = "android.os.Environment$UserEnvironment", isInAndroidSdk = false)
+  @Implements(className = "android.os.Environment$UserEnvironment", isInAndroidSdk = false,
+      minSdk = JELLY_BEAN_MR1)
   public static class ShadowUserEnvironment {
 
-    @Implementation
+    @Implementation(minSdk = M)
     public File[] getExternalDirs() {
       return externalDirs.toArray(new File[externalDirs.size()]);
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInstrumentation.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
@@ -110,7 +111,7 @@ public ActivityResult execStartActivity(
     return logStartedActivity(intent, requestCode, options);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public ActivityResult execStartActivity(
       Context who,
       IBinder contextThread,
@@ -123,7 +124,7 @@ public ActivityResult execStartActivity(
     throw new UnsupportedOperationException("Implement me!!");
   }
 
-  @Implementation
+  @Implementation(minSdk = M)
   public ActivityResult execStartActivityAsCaller(
       Context who,
       IBinder contextThread,

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessage.java
Patch:
@@ -43,8 +43,8 @@ private void unschedule() {
    * package private method {@link Message#recycleUnchecked()}
    * on the real object.
    */
-  @Implementation
   @HiddenApi
+  @Implementation(minSdk = LOLLIPOP)
   public void recycleUnchecked() {
     if (getApiLevel() >= LOLLIPOP) {
       unschedule();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -5,6 +5,7 @@
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static org.robolectric.RuntimeEnvironment.getApiLevel;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
@@ -64,7 +65,7 @@ public static boolean nativeIsIdling(int ptr) {
     return nativeIsIdling((long) ptr);
   }
 
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation(minSdk = LOLLIPOP, maxSdk = LOLLIPOP_MR1)
   public static boolean nativeIsIdling(long ptr) {
     return false;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.annotation.NonNull;
@@ -159,7 +160,7 @@ public static class ShadowSession {
     private int sessionId;
     private ShadowPackageInstaller shadowPackageInstaller;
 
-    @Implementation
+    @Implementation(maxSdk = KITKAT)
     public void __constructor__() {}
 
     @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.O_MR1;
@@ -56,8 +57,8 @@ public <T extends Parcelable> T readParcelable(ClassLoader loader) {
     return (T) creator.createFromParcel(realObject);
   }
 
-  @Implementation
   @HiddenApi
+  @Implementation(minSdk = JELLY_BEAN_MR2)
   public Parcelable.Creator<?> readParcelableCreator(ClassLoader loader) {
     //note: calling `readString` will also consume the string, and increment the data-pointer.
     //which is exactly what we need, since we do not call the real `readParcelableCreator`.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.robolectric.shadows.ShadowPath.Point.Type.LINE_TO;
 import static org.robolectric.shadows.ShadowPath.Point.Type.MOVE_TO;
 
@@ -53,7 +54,8 @@ public void reset() {
     quadDescription = "";
   }
 
-  @Implementation // TODO: This should only be used to enable interpolator resource parsing
+  // TODO: This should only be used to enable interpolator resource parsing
+  @Implementation(minSdk = LOLLIPOP)
   public float[] approximate(float acceptableError) {
     return new float[]{0, 0, 0, 1, 1, 1};
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPicture.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Picture;
@@ -18,7 +20,7 @@ public void __constructor__() {}
   @Implementation
   public void __constructor__(long nativePicture) {}
 
-  @Implementation
+  @Implementation(maxSdk = KITKAT)
   public void __constructor__(int nativePicture, boolean fromStream) {}
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPrecomputedText.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.O_MR1;
 import static android.os.Build.VERSION_CODES.P;
 
 import org.robolectric.annotation.Implementation;
@@ -10,7 +11,7 @@ public class ShadowPrecomputedText {
 
   private static int nativeCounter = 0;
 
-  @Implementation
+  @Implementation(maxSdk = O_MR1)
   protected static long nInitBuilder() {
     return ++nativeCounter;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStaticLayout.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 import static android.os.Build.VERSION_CODES.M;
+import static android.os.Build.VERSION_CODES.O_MR1;
 import static android.os.Build.VERSION_CODES.P;
 
 import android.text.StaticLayout;
@@ -19,8 +20,8 @@ public static int[] nLineBreakOpportunities(String locale, char[] text, int leng
     return new int[] {-1};
   }
 
-  @Implementation(minSdk = M)
   @HiddenApi
+  @Implementation(minSdk = M, maxSdk = O_MR1)
   public static int nComputeLineBreaks(Object nativePtr, Object recycle,
             Object recycleBreaks, Object recycleWidths, Object recycleFlags, Object recycleLength) {
     return 1;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -128,7 +128,7 @@ public void setNetworkOperatorName(String networkOperatorName) {
     this.networkOperatorName = networkOperatorName;
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   protected String getImei() {
     checkReadPhoneStatePermission();
     return imei;
@@ -139,7 +139,7 @@ public void setImei(String imei) {
     this.imei = imei;
   }
 
-  @Implementation
+  @Implementation(minSdk = O)
   protected String getMeid() {
     checkReadPhoneStatePermission();
     return meid;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVMRuntime.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+
 import dalvik.system.VMRuntime;
 import java.lang.reflect.Array;
 import javax.annotation.Nullable;
@@ -11,7 +13,7 @@ public class ShadowVMRuntime {
 
   private NativeObjRegistry<Object> nativeObjRegistry = new NativeObjRegistry<>();
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   public Object newUnpaddedArray(Class<?> klass, int size) {
     return Array.newInstance(klass, size);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.N_MR1;
+
 import android.content.pm.PackageInfo;
 import android.os.Build;
 import android.view.ViewGroup.LayoutParams;
@@ -321,7 +323,7 @@ public static String findAddress(String addr) {
   /**
    * Overrides the system implementation for getting the webview package. Always returns null.
    */
-  @Implementation(minSdk = Build.VERSION_CODES.O)
+  @Implementation(minSdk = Build.VERSION_CODES.O, maxSdk = N_MR1)
   protected static PackageInfo getCurrentWebviewPackage() {
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiP2pManager.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 import android.content.Context;
 import android.net.wifi.p2p.WifiP2pGroup;
 import android.net.wifi.p2p.WifiP2pManager;
@@ -38,7 +40,7 @@ public WifiP2pManager.GroupInfoListener getGroupInfoListener() {
     return groupInfoListener;
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   public void setWifiP2pChannels(
       Channel c, int listeningChannel, int operatingChannel, ActionListener al) {
     Preconditions.checkNotNull(c);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWindowManagerGlobal.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 
 import android.os.Looper;
 import android.view.WindowManagerGlobal;
@@ -17,12 +18,12 @@ public static void reset() {
     ReflectionHelpers.setStaticField(WindowManagerGlobal.class, "sDefaultWindowManager", null);
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR2)
   public static Object getWindowSession() {
     return null;
   }
 
-  @Implementation
+  @Implementation(maxSdk = JELLY_BEAN_MR1)
   public static Object getWindowSession(Looper looper) {
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMotionEvent.java
Patch:
@@ -5,7 +5,6 @@
 import static android.os.Build.VERSION_CODES.P;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_ORIENTATION;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_PRESSURE;
 import static org.robolectric.shadows.NativeAndroidInput.AMOTION_EVENT_AXIS_SIZE;
@@ -30,6 +29,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Resetter;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.ReflectionHelpers;
 
 /**
@@ -970,7 +970,7 @@ private static NativeInput.MotionEvent getNativeMotionEvent(long nativePtr) {
   protected final void transform(Matrix matrix) {
     checkNotNull(matrix);
     NativeInput.MotionEvent event = getNativeMotionEvent();
-    ShadowMatrix shadowMatrix = shadowOf(matrix);
+    ShadowMatrix shadowMatrix = Shadow.extract(matrix);
 
     float[] m = new float[9];
     shadowMatrix.getValues(m);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityService.java
Patch:
@@ -20,7 +20,6 @@ public final boolean performGlobalAction(int action) {
       return true;
     }
 
-    @Implementation
     public List<Integer> getGlobalActionsPerformed() {
       return globalActionsPerformed;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAndroidBidi.java
Patch:
@@ -4,9 +4,11 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
+import static android.os.Build.VERSION_CODES.O_MR1;
+
 @Implements(className = "android.text.AndroidBidi", isInAndroidSdk = false)
 public class ShadowAndroidBidi {
-  @Implementation
+  @Implementation(maxSdk = O_MR1)
   public static int bidi(int dir, char[] chs, byte[] chInfo, int n, boolean haveInfo) {
     // sorry, arabic, hebrew, syriac, n'ko, imperial aramaic, and old turks!
     return Layout.DIR_LEFT_TO_RIGHT;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderClient.java
Patch:
@@ -20,6 +20,8 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
+
 @Implements(ContentProviderClient.class)
 public class ShadowContentProviderClient {
   private boolean stable;
@@ -32,7 +34,7 @@ public void __constructor__(
     this.stable = stable;
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public Bundle call(String method, String arg, Bundle extras) throws RemoteException {
     return provider.call(method, arg, extras);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -21,6 +21,8 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Drawable.class)
 public class ShadowDrawable {
@@ -179,7 +181,7 @@ public void invalidateSelf() {
     Shadow.directlyOn(realDrawable, Drawable.class, "invalidateSelf");
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   public int getAlpha() {
     return alpha;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowICU.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
@@ -25,7 +26,7 @@ public static String getBestDateTimePattern(String skeleton, Locale locale) {
     }
   }
 
-  @Implementation(maxSdk = KITKAT_WATCH)
+  @Implementation(minSdk = JELLY_BEAN_MR2, maxSdk = KITKAT_WATCH)
   public static String getBestDateTimePattern(String skeleton, String locale) {
     return skeleton;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputManager.java
Patch:
@@ -7,6 +7,8 @@
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+
 /*
  * Shadow for InputManager.
  */
@@ -19,7 +21,7 @@ protected boolean injectInputEvent(InputEvent event, int mode) {
     return true;
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   protected boolean[] deviceHasKeys(int id, int[] keyCodes) {
     return new boolean[keyCodes.length];
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowJobScheduler.java
Patch:
@@ -40,7 +40,7 @@ public abstract class ShadowJobScheduler {
 
   public abstract void failOnJob(int jobId);
 
-  @Implements(value = JobSchedulerImpl.class, isInAndroidSdk = false)
+  @Implements(value = JobSchedulerImpl.class, isInAndroidSdk = false, minSdk = LOLLIPOP)
   public static class ShadowJobSchedulerImpl extends ShadowJobScheduler {
 
     private Map<Integer, JobInfo> scheduledJobs = new LinkedHashMap<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMotionEvent.java
Patch:
@@ -465,7 +465,7 @@ protected static void nativeWriteToParcel(long nativePtr, Parcel parcel) {
     }
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   @HiddenApi
   protected static String nativeAxisToString(int axis) {
     // The native code just mirrors the AXIS_* constants defined in MotionEvent.java.
@@ -487,7 +487,7 @@ protected static String nativeAxisToString(int axis) {
     return null;
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   @HiddenApi
   protected static int nativeAxisFromString(String label) {
     // The native code just mirrors the AXIS_* constants defined in MotionEvent.java. Look up

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -5,6 +5,7 @@
 import static android.app.PendingIntent.FLAG_NO_CREATE;
 import static android.app.PendingIntent.FLAG_ONE_SHOT;
 import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.O;
 
@@ -274,7 +275,7 @@ public String getTargetPackage() {
     return getCreatorPackage();
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR1)
   public String getCreatorPackage() {
     return (creatorPackage == null)
         ? RuntimeEnvironment.application.getPackageName()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPlayerBase.java
Patch:
@@ -6,11 +6,13 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
+import static android.os.Build.VERSION_CODES.O;
+
 @Implements(className = "android.media.PlayerBase", isInAndroidSdk = false,
     minSdk = Build.VERSION_CODES.N)
 public class ShadowPlayerBase {
 
-  @Implementation
+  @Implementation(minSdk = O)
   public static IAudioService getService() {
     return ReflectionHelpers.createNullProxy(IAudioService.class);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
+import static android.os.Build.VERSION_CODES.*;
 import static android.telephony.PhoneStateListener.LISTEN_CALL_STATE;
 import static android.telephony.PhoneStateListener.LISTEN_CELL_INFO;
 import static android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION;
@@ -323,7 +322,7 @@ public void setIsSmsCapable(boolean isSmsCapable) {
     this.isSmsCapable = isSmsCapable;
   }
 
-  @Implementation
+  @Implementation(minSdk = O)
   protected PersistableBundle getCarrierConfig() {
     // Avoid NPE - no testing APIS yet.
     return new PersistableBundle();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextToSpeech.java
Patch:
@@ -7,6 +7,8 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+
 @Implements(TextToSpeech.class)
 public class ShadowTextToSpeech {
   private Context context;
@@ -30,7 +32,7 @@ public int speak(final String text, final int queueMode, final HashMap<String, S
     return TextToSpeech.SUCCESS;
   }
 
-  @Implementation
+  @Implementation(minSdk = LOLLIPOP)
   protected int speak(
       final CharSequence text, final int queueMode, final Bundle params, final String utteranceId) {
     return speak(text.toString(), queueMode, new HashMap<>());

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.P;
 import static org.robolectric.RuntimeEnvironment.getApiLevel;
 
@@ -96,7 +97,7 @@ protected static Typeface createFromFamilies(Object /*FontFamily[]*/ families) {
   }
 
   @HiddenApi
-  @Implementation(minSdk = LOLLIPOP)
+  @Implementation(minSdk = LOLLIPOP, maxSdk = N_MR1)
   protected static Typeface createFromFamiliesWithDefault(Object /*FontFamily[]*/ families) {
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 import static org.robolectric.shadow.api.Shadow.invokeConstructor;
 import static org.robolectric.util.ReflectionHelpers.getField;
@@ -466,7 +467,7 @@ public void run() {
     }
   }
 
-  @Implementation
+  @Implementation(minSdk = KITKAT)
   protected boolean isAttachedToWindow() {
     return getAttachInfo() != null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 
 import android.content.Context;
@@ -25,7 +26,7 @@ public class ShadowViewRootImpl {
 
   @RealObject private ViewRootImpl realObject;
 
-  @Implementation
+  @Implementation(maxSdk = JELLY_BEAN)
   public static Object getWindowSession(Looper mainLooper) {
     return null;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -269,6 +269,7 @@ public boolean wasDestroyCalled() {
     return destroyCalled;
   }
 
+  // todo: this won't actually be called right?
   @Override @Implementation
   public void post(Runnable action) {
     action.run();

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public Activity startActivitySync(final Intent intent) {
     ActivityInfo ai = intent.resolveActivityInfo(getTargetContext().getPackageManager(), 0);
     try {
       Class<? extends Activity> activityClass = Class.forName(ai.name).asSubclass(Activity.class);
-      ActivityController<? extends Activity> controller = Robolectric.buildActivity(activityClass);
+      ActivityController<? extends Activity> controller = Robolectric.buildActivity(activityClass, intent);
       Activity activity = controller.get();
       callActivityOnCreate(activity, null);
       controller.postCreate(null);

File: robolectric/src/main/java/org/robolectric/android/fakes/RoboMonitoringInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public Activity startActivitySync(final Intent intent) {
     ActivityInfo ai = intent.resolveActivityInfo(getTargetContext().getPackageManager(), 0);
     try {
       Class<? extends Activity> activityClass = Class.forName(ai.name).asSubclass(Activity.class);
-      ActivityController<? extends Activity> controller = Robolectric.buildActivity(activityClass);
+      ActivityController<? extends Activity> controller = Robolectric.buildActivity(activityClass, intent);
       Activity activity = controller.get();
       callActivityOnCreate(activity, null);
       controller.postCreate(null);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowKeyCharacterMap.java
Patch:
@@ -50,6 +50,7 @@ public class ShadowKeyCharacterMap {
     CHAR_TO_KEY_CODE.put('X', KeyEvent.KEYCODE_X);
     CHAR_TO_KEY_CODE.put('Y', KeyEvent.KEYCODE_Y);
     CHAR_TO_KEY_CODE.put('Z', KeyEvent.KEYCODE_Z);
+    CHAR_TO_KEY_CODE.put(' ', KeyEvent.KEYCODE_SPACE);
 
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_0, '0');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_1, '1');
@@ -87,6 +88,7 @@ public class ShadowKeyCharacterMap {
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_X, 'X');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Y, 'Y');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Z, 'Z');
+    KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_SPACE, ' ');
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowKeyCharacterMap.java
Patch:
@@ -50,7 +50,6 @@ public class ShadowKeyCharacterMap {
     CHAR_TO_KEY_CODE.put('X', KeyEvent.KEYCODE_X);
     CHAR_TO_KEY_CODE.put('Y', KeyEvent.KEYCODE_Y);
     CHAR_TO_KEY_CODE.put('Z', KeyEvent.KEYCODE_Z);
-    CHAR_TO_KEY_CODE.put(' ', KeyEvent.KEYCODE_SPACE);
 
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_0, '0');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_1, '1');
@@ -88,7 +87,6 @@ public class ShadowKeyCharacterMap {
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_X, 'X');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Y, 'Y');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Z, 'Z');
-    KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_SPACE, ' ');
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowKeyCharacterMap.java
Patch:
@@ -50,6 +50,7 @@ public class ShadowKeyCharacterMap {
     CHAR_TO_KEY_CODE.put('X', KeyEvent.KEYCODE_X);
     CHAR_TO_KEY_CODE.put('Y', KeyEvent.KEYCODE_Y);
     CHAR_TO_KEY_CODE.put('Z', KeyEvent.KEYCODE_Z);
+    CHAR_TO_KEY_CODE.put(' ', KeyEvent.KEYCODE_SPACE);
 
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_0, '0');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_1, '1');
@@ -87,6 +88,7 @@ public class ShadowKeyCharacterMap {
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_X, 'X');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Y, 'Y');
     KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_Z, 'Z');
+    KEY_CODE_TO_CHAR.put(KeyEvent.KEYCODE_SPACE, ' ');
   }
 
   @Implementation

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -417,7 +417,8 @@ public final ResStringPool_span styleAt(int idx) {
       final int off = mEntryStyles.get(idx) / SIZEOF_INT;
       if (off < mStylePoolSize) {
         // return (const ResStringPool_span*)(mStyles+off);
-        return new ResStringPool_span(mHeader.myBuf(), mHeader.myOffset() + mStyles + off);
+        return new ResStringPool_span(
+            mHeader.myBuf(), mHeader.myOffset() + mStyles + off * SIZEOF_INT);
       } else {
         ALOGW("Bad string block: style #%d entry is at %d, past end at %d\n",
             (int)idx, (int)(off*SIZEOF_INT),

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -74,7 +74,7 @@ public void testFailure(Failure failure) throws Exception {
   @After
   public void tearDown() throws Exception {
     TestUtil.resetSystemProperty("robolectric.alwaysIncludeVariantMarkersInTestName", priorAlwaysInclude);
-    TestUtil.resetSystemProperty("robolectric.resourcesMode", priorEnabledSdks);
+    TestUtil.resetSystemProperty("robolectric.enabledSdks", priorEnabledSdks);
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -161,6 +161,8 @@ public ActivityController<T> saveInstanceState(Bundle outState) {
   public ActivityController<T> stop() {
     if (RuntimeEnvironment.getApiLevel() <= M) {
       invokeWhilePaused("performStop");
+    } else if (RuntimeEnvironment.getApiLevel() <= O_MR1) {
+      invokeWhilePaused("performStop", from(boolean.class, true));
     } else {
       invokeWhilePaused("performStop", from(boolean.class, true), from(String.class, "stop()"));
     }

File: robolectric/src/test/java/org/robolectric/SdkPickerTest.java
Patch:
@@ -165,9 +165,9 @@ public void withEnabledSdks_shouldRestrictAsSpecified() throws Exception {
 
   @Test
   public void shouldParseSdkSpecs() throws Exception {
-    assertThat(ConfigUtils.parseSdkArrayProperty("17,18"))
+    assertThat(ConfigUtils.parseSdkArrayProperty("17,18")).asList()
         .containsExactly(VERSION_CODES.JELLY_BEAN_MR1, VERSION_CODES.JELLY_BEAN_MR2);
-    assertThat(ConfigUtils.parseSdkArrayProperty("KITKAT, LOLLIPOP"))
+    assertThat(ConfigUtils.parseSdkArrayProperty("KITKAT, LOLLIPOP")).asList()
         .containsExactly(VERSION_CODES.KITKAT, VERSION_CODES.LOLLIPOP);
   }
 }

File: robolectric/src/test/java/org/robolectric/SdkPickerTest.java
Patch:
@@ -166,8 +166,8 @@ public void withEnabledSdks_shouldRestrictAsSpecified() throws Exception {
   @Test
   public void shouldParseSdkSpecs() throws Exception {
     assertThat(ConfigUtils.parseSdkArrayProperty("17,18"))
-        .containsExactly(VERSION_CODES.JELLY_BEAN_MR1, VERSION_CODES.JELLY_BEAN_MR2);
+        .asList().containsExactly(VERSION_CODES.JELLY_BEAN_MR1, VERSION_CODES.JELLY_BEAN_MR2);
     assertThat(ConfigUtils.parseSdkArrayProperty("KITKAT, LOLLIPOP"))
-        .containsExactly(VERSION_CODES.KITKAT, VERSION_CODES.LOLLIPOP);
+        .asList().containsExactly(VERSION_CODES.KITKAT, VERSION_CODES.LOLLIPOP);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -1570,7 +1570,7 @@ protected Drawable loadUnbadgedItemIcon(PackageItemInfo itemInfo, ApplicationInf
   }
 
   @Implementation(minSdk = O)
-  protected ChangedPackages getChangedPackages(int sequenceNumber) {
+  protected Object getChangedPackages(int sequenceNumber) {
     if (sequenceNumber < 0) {
       return null;
     }

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows.support.v4;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/NotificationCompatBuilderTest.java
Patch:
@@ -19,6 +19,6 @@ public void addAction__shouldAddActionToNotification() {
         new NotificationCompat.Builder(RuntimeEnvironment.application)
             .addAction(action)
             .build();
-    assertThat(notification.actions).hasSize(1);
+    assertThat(notification.actions).asList().hasSize(1);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -1570,13 +1570,11 @@ protected Drawable loadUnbadgedItemIcon(PackageItemInfo itemInfo, ApplicationInf
   }
 
   @Implementation(minSdk = O)
-  protected ChangedPackages getChangedPackages(int sequenceNumber) {
+  protected Object getChangedPackages(int sequenceNumber) {
     if (sequenceNumber < 0) {
       return null;
     }
     return new ChangedPackages(
         sequenceNumber + 1, new ArrayList<>(sequenceNumberChangedPackagesMap.get(sequenceNumber)));
   }
-
-
 }

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -350,7 +350,7 @@ private Instrumentation createInstrumentation() {
           Class.forName("org.robolectric.android.fakes.RoboMonitoringInstrumentation")
               .asSubclass(Instrumentation.class);
       return ReflectionHelpers.newInstance(roboInstrumentationClass);
-    } catch (ClassNotFoundException | NoClassDefFoundError e) {
+    } catch (ClassNotFoundException | NoClassDefFoundError | VerifyError e) {
       // fall through
     }
     return new Instrumentation();

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/CursorLoaderTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.robolectric.shadows.support.v4;
 
-import static org.assertj.core.api.Assertions.assertThat;
+
+
+import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/NotificationCompatBuilderTest.java
Patch:
@@ -19,6 +19,6 @@ public void addAction__shouldAddActionToNotification() {
         new NotificationCompat.Builder(RuntimeEnvironment.application)
             .addAction(action)
             .build();
-    assertThat(notification.actions).hasSize(1);
+    assertThat(notification.actions).asList().hasSize(1);
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -183,6 +183,7 @@ public void setActiveNetworkInfo(NetworkInfo info) {
       if (info != null) {
         networkTypeToNetworkInfo.put(info.getType(), info);
         netIdToNetwork.put(info.getType(), ShadowNetwork.newInstance(info.getType()));
+        netIdToNetworkInfo.put(info.getType(), info);
       } else {
         networkTypeToNetworkInfo.clear();
         netIdToNetwork.clear();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -473,7 +473,9 @@ private Intent processStickyIntents(IntentFilter filter, BroadcastReceiver recei
           result = stickyIntent;
         }
         if (receiver != null) {
+          receiver.setPendingResult(ShadowBroadcastPendingResult.createSticky(stickyIntent));
           receiver.onReceive(context, stickyIntent);
+          receiver.setPendingResult(null);
         } else if (result != null) {
           break;
         }

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -53,7 +53,7 @@ public static <T extends IntentService> IntentServiceController<T> buildIntentSe
   }
 
   public static <T extends IntentService> IntentServiceController<T> buildIntentService(Class<T> serviceClass, Intent intent) {
-    return IntentServiceController.of(ReflectionHelpers.callConstructor(serviceClass, new ReflectionHelpers.ClassParameter<String>(String.class, "IntentService")), intent);
+    return IntentServiceController.of(ReflectionHelpers.callConstructor(serviceClass), intent);
   }
 
   public static <T extends IntentService> T setupIntentService(Class<T> serviceClass) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -47,7 +47,7 @@ public static TypedArray create(Resources realResources, int[] attrs, int[] data
   }
 
   @HiddenApi @Implementation
-  public CharSequence loadStringValueAt(int index) {
+  protected CharSequence loadStringValueAt(int index) {
     if (ShadowAssetManager.useLegacy()) {
       return stringData[index / ShadowAssetManager.STYLE_NUM_ENTRIES];
     } else {
@@ -67,7 +67,7 @@ protected String getNonConfigurationString(@StyleableRes int index, int allowedC
   }
 
   @Implementation
-  public String getPositionDescription() {
+  protected String getPositionDescription() {
     if (ShadowAssetManager.useLegacy()) {
       return positionDescription;
     } else {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -60,6 +60,7 @@ public static synchronized void resetThreadLoopers() {
             // Reset the schedulers of all loopers. This prevents un-run tasks queued up in static
             // background handlers from leaking to subsequent tests.
             shadowOf(looper).getScheduler().reset();
+            shadowOf(looper.getQueue()).reset();
           }
         }
       }
@@ -126,6 +127,7 @@ public void quitUnchecked() {
       quit = true;
       realObject.notifyAll();
       getScheduler().reset();
+      shadowOf(realObject.getQueue()).reset();
     }
   }
 

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -350,7 +350,7 @@ private Instrumentation createInstrumentation() {
           Class.forName("org.robolectric.android.fakes.RoboMonitoringInstrumentation")
               .asSubclass(Instrumentation.class);
       return ReflectionHelpers.newInstance(roboInstrumentationClass);
-    } catch (ClassNotFoundException | NoClassDefFoundError e) {
+    } catch (ClassNotFoundException | NoClassDefFoundError | VerifyError e) {
       // fall through
     }
     return new Instrumentation();

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -165,7 +165,9 @@ protected InstrumentationConfiguration createClassLoaderConfig(FrameworkMethod m
 
     String customPackages = System.getProperty("org.robolectric.packagesToNotAcquire", "");
     for (String pkg: customPackages.split(",")) {
-      builder.doNotAcquirePackage(pkg);
+      if (!pkg.isEmpty()) {
+        builder.doNotAcquirePackage(pkg);
+      }
     }
 
     for (Class<?> shadowClass : getExtraShadows(method)) {

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -175,6 +175,7 @@ public void setUpApplicationState(ApkLoader apkLoader, Method method,
     ReflectionHelpers.setStaticField(ActivityThread.class, "sMainThreadHandler", new Handler(Looper.myLooper()));
 
     Bootstrap.setUpDisplay(configuration, displayMetrics);
+    activityThread.applyConfigurationToResources(configuration);
 
     Resources systemResources = Resources.getSystem();
     systemResources.updateConfiguration(configuration, displayMetrics);

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricProcessor.java
Patch:
@@ -76,7 +76,9 @@ public synchronized void init(ProcessingEnvironment environment) {
 
     generators.add(new ShadowProviderGenerator(model, environment, shadowPackage, shouldInstrumentPackages));
     generators.add(new ServiceLoaderGenerator(environment, shadowPackage));
-    generators.add(new JavadocJsonGenerator(model, environment));
+    if (!System.getProperty("SKIP_JAVADOC", "").equals("TRUE")) {
+      generators.add(new JavadocJsonGenerator(model, environment));
+    }
   }
 
   @Override

File: processor/src/test/java/org/robolectric/annotation/processing/validator/SingleClassSubject.java
Patch:
@@ -2,7 +2,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static org.robolectric.annotation.processing.RobolectricProcessorTest.DEFAULT_OPTS;
+import static org.robolectric.annotation.processing.Utils.DEFAULT_OPTS;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.truth.FailureMetadata;
@@ -14,6 +14,7 @@
 import com.google.testing.compile.JavaFileObjects;
 import javax.tools.JavaFileObject;
 import org.robolectric.annotation.processing.RobolectricProcessor;
+import org.robolectric.annotation.processing.Utils;
 
 public final class SingleClassSubject extends Subject<SingleClassSubject, String> {
 

File: integration_tests/ctesque/src/test/java/android/content/res/ResourcesTest.java
Patch:
@@ -1020,7 +1020,7 @@ public void getResourceValue_colorRGB8() {
 
   @Test
   public void getResourceEntryName_forStyle() throws Exception {
-    Assertions.assertThat(resources.getResourceEntryName(android.R.style.TextAppearance_Small))
+    assertThat(resources.getResourceEntryName(android.R.style.TextAppearance_Small))
         .isEqualTo("TextAppearance.Small");
   }
 

File: robolectric/src/test/java/org/robolectric/android/AndroidInterceptorsTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -13,7 +12,7 @@
 public class AndroidInterceptorsTest {
   @Test
   public void allMethodRefs() throws Exception {
-    Assertions.assertThat(new Interceptors(AndroidInterceptors.all()).getAllMethodRefs()).contains(
+    assertThat(new Interceptors(AndroidInterceptors.all()).getAllMethodRefs()).contains(
             new MethodRef("java.util.LinkedHashMap", "eldest"),
             new MethodRef("java.lang.System", "loadLibrary"),
             new MethodRef("android.os.StrictMode", "trackActivity"),

File: sandbox/src/test/java/org/robolectric/ShadowingTest.java
Patch:
@@ -83,7 +83,7 @@ public void testNativeMethodsAreDelegated() throws Exception {
     Paint paint = new Paint();
     paint.setColor(1234);
 
-    Assertions.assertThat(paint.getColor()).isEqualTo(1234);
+    assertThat(paint.getColor()).isEqualTo(1234);
   }
 
   @Instrument

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -121,6 +121,9 @@ public void setUpApplicationState(ApkLoader apkLoader, Method method,
       }
 
     } else {
+      RuntimeEnvironment.compileTimeSystemResourcesFile =
+          apkLoader.getCompileTimeSystemResourcesFile(sdkEnvironment);
+
       RuntimeEnvironment.setAndroidFrameworkJarPath(
           apkLoader.getArtifactUrl(sdkConfig.getAndroidSdkDependency()).getFile());
 
@@ -241,8 +244,6 @@ private void injectResourceStuffForLegacy(ApkLoader apkLoader, AndroidManifest a
     RuntimeEnvironment.setCompileTimeResourceTable(combinedCompileTimeResourceTable);
     RuntimeEnvironment.setAppResourceTable(combinedAppResourceTable);
     RuntimeEnvironment.setSystemResourceTable(new RoutingResourceTable(systemResourceTable));
-    RuntimeEnvironment.compileTimeSystemResourcesFile =
-        apkLoader.getCompileTimeSystemResourcesFile(sdkEnvironment);
 
     try {
       appManifest.initMetaData(combinedAppResourceTable);

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -256,7 +256,7 @@ enum ResourcesMode {
     static final ResourcesMode FROM_PROPERTIES = getFromProperties();
 
     private static ResourcesMode getFromProperties() {
-      String resourcesMode = System.getProperty("robolectric.resources-mode");
+      String resourcesMode = System.getProperty("robolectric.resourcesMode");
       return resourcesMode == null ? DEFAULT : valueOf(resourcesMode);
     }
 

File: robolectric/src/test/java/org/robolectric/android/DeviceConfigTest.java
Patch:
@@ -9,11 +9,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 import org.robolectric.res.Qualifiers;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 26)
 public class DeviceConfigTest {
 
   private Configuration configuration;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -186,11 +186,12 @@ public void attrsToTypedArray_shouldAllowMockedAttributeSets() throws Exception
 
   @Test
   public void whenStyleAttrResolutionFails_attrsToTypedArray_returnsNiceErrorMessage()
-      throws Exception {if (!useLegacy()) return;
+      throws Exception {
+    if (!useLegacy()) return;
     expectedException.expect(RuntimeException.class);
     expectedException.expectMessage(
         "no value for org.robolectric:attr/styleNotSpecifiedInAnyTheme " +
-            "in theme with applied styles: [Style org.robolectric:Theme_Robolectric (and parents)]");
+            "in theme with applied styles: [Style org.robolectric:Theme.Robolectric (and parents)]");
 
    Resources.Theme theme = resources.newTheme();
    theme.applyStyle(R.style.Theme_Robolectric, false);

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/NotificationCompatBuilderTest.java
Patch:
@@ -8,11 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 import org.robolectric.util.TestRunnerWithManifest;
 
 @RunWith(TestRunnerWithManifest.class)
-@Config(sdk = 19)
 public class NotificationCompatBuilderTest {
   @Test
   public void addAction__shouldAddActionToNotification() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -79,7 +79,7 @@ public class ShadowApplication extends ShadowContextWrapper {
   //default values for bindService
   private ServiceConnectionDataWrapper defaultServiceConnectionData = new ServiceConnectionDataWrapper(null, null);
 
-  // these are managed by the AppSingletonizier... kinda gross, sorry [xw]
+  // these are managed by the AppSingletonizer... kinda gross, sorry [xw]
   LayoutInflater layoutInflater;
   AppWidgetManager appWidgetManager;
   private List<String> unbindableActions = new ArrayList<>();

File: resources/src/main/java/org/robolectric/res/android/ResourceTable.java
Patch:
@@ -40,8 +40,8 @@ public flag_entry(String name, int value, String description) {
           + "The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to\n"
           + "some parent container."),
       new flag_entry("enum", ResTable_map.TYPE_ENUM, null),
-      new flag_entry("flags", ResTable_map.TYPE_FLAGS, null),
-      new flag_entry(null, 0, null)
+      new flag_entry("flags", ResTable_map.TYPE_FLAGS, null)
+      // new flag_entry(null, 0, null)
   };
 
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLegacyAssetManager.java
Patch:
@@ -71,7 +71,7 @@
 @SuppressLint("NewApi")
 public class ShadowLegacyAssetManager extends ShadowAssetManager {
 
-  static final Ordering<String> ATTRIBUTE_TYPE_PRECIDENCE =
+  public static final Ordering<String> ATTRIBUTE_TYPE_PRECIDENCE =
       Ordering.explicit(
           "reference",
           "color",
@@ -82,6 +82,7 @@ public class ShadowLegacyAssetManager extends ShadowAssetManager {
           "float",
           "enum",
           "flag",
+          "flags",
           "string");
 
   static boolean strictErrors = false;

File: resources/src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -129,7 +129,7 @@ class JarFsFile implements FsFile {
       private final String path;
 
       public JarFsFile(String path) {
-        this.path = path;
+        this.path = path.replaceAll("^/+", "");
       }
 
       @Override public boolean exists() {

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -40,7 +40,6 @@
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.manifest.BroadcastReceiverData;
 import org.robolectric.manifest.RoboNotFoundException;
-import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.shadows.ClassNameResolver;
@@ -127,6 +126,9 @@ public void setUpApplicationState(Method method, AndroidManifest appManifest,
         // FsFile packageFile = appManifest.getAndroidManifestFile();
         // todo get elsewhere?
         FsFile packageFile = appManifest.getApkFile();
+        if (packageFile == null) {
+          throw new IllegalStateException("no apk file!");
+        }
         parsedPackage = ShadowPackageParser.callParsePackage(packageFile);
       } else {
         parsedPackage = LegacyManifestParser.createPackage(appManifest);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -222,7 +222,7 @@ public void checkedClick_shouldThrowIfViewIsDisabled() throws Exception {
     shadowOf(view).checkedPerformClick();
   }
 
-  /* 
+  /*
    * This test will throw an exception because the accessibility checks depend on the  Android
    * Support Library. If the support library is included at some point, a single test from
    * AccessibilityUtilTest could be moved here to make sure the accessibility checking is run.

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -97,7 +97,7 @@ public static ShadowLegacyAssetManager legacyShadowOf(AssetManager assetManager)
   abstract public boolean getThemeValue(long themePtr, int ident, TypedValue outValue, boolean resolveRefs);
 
   @HiddenApi @Implementation
-  abstract public void ensureStringBlocks();
+  abstract public Object ensureStringBlocks();
 
   @Implementation
   abstract public InputStream open(String fileName) throws IOException;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -109,7 +109,9 @@ public static Bitmap decodeStream(InputStream is, Rect outPadding, BitmapFactory
     String name = (is instanceof NamedStream)
         ? is.toString().replace("stream for ", "")
         : null;
-    Point imageSize = ImageUtil.getImageSizeFromStream(is);
+    Point imageSize = (is instanceof NamedStream)
+        ? null
+        : ImageUtil.getImageSizeFromStream(is);
     Bitmap bitmap = create(name, opts, imageSize);
     bitmap.setNinePatchChunk(ninePatchChunk);
     ShadowBitmap shadowBitmap = Shadow.extract(bitmap);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -63,7 +63,6 @@ public static Typeface createFromAsset(AssetManager mgr, String path) {
     ShadowAssetManager shadowAssetManager = Shadow.extract(mgr);
     Collection<FsFile> assetDirs = shadowAssetManager.getAllAssetDirs();
     for (FsFile assetDir : assetDirs) {
-      // check if in zip file too?
       FsFile[] files = assetDir.listFiles(new StartsWith(path));
       FsFile assetFile = assetDir.join(path);
       if (assetFile.exists() || files.length != 0) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowXmlBlock.java
Patch:
@@ -121,7 +121,7 @@ public static int nativeNext(long state) throws XmlPullParserException {
 
   @Implementation(maxSdk = VERSION_CODES.KITKAT_WATCH)
   public static int nativeGetNamespace(int state) {
-    return (int)nativeGetStringBlock((long)state);
+    return nativeGetNamespace((long)state);
   }
 
   @Implementation(minSdk = VERSION_CODES.LOLLIPOP)

File: integration_tests/ctesque/src/test/java/android/content/res/ThemeTest.java
Patch:
@@ -8,7 +8,6 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.util.TypedValue;
-import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -57,7 +56,7 @@ public void shouldApplyStylesFromResourceReference() throws Exception {
     Theme theme = resources.newTheme();
     theme.applyStyle(R.style.Theme_AnotherTheme, true);
     TypedArray a =
-        theme.obtainStyledAttributes(null, R.styleable.CustomView, 0, R.attr.animalStyle);
+        theme.obtainStyledAttributes(null, R.styleable.CustomView, R.attr.animalStyle, 0);
 
     int animalStyleId = a.getResourceId(R.styleable.CustomView_animalStyle, 0);
     assertThat(animalStyleId).isEqualTo(R.style.Gastropod);
@@ -73,7 +72,7 @@ public void shouldApplyStylesFromAttributeReference() throws Exception {
     Theme theme = resources.newTheme();
     theme.applyStyle(R.style.Theme_ThirdTheme, true);
     TypedArray a =
-        theme.obtainStyledAttributes(null, R.styleable.CustomView, 0, R.attr.animalStyle);
+        theme.obtainStyledAttributes(null, R.styleable.CustomView, R.attr.animalStyle, 0);
 
     int animalStyleId = a.getResourceId(R.styleable.CustomView_animalStyle, 0);
     assertThat(animalStyleId).isEqualTo(R.style.Gastropod);

File: integration_tests/ctesque/src/test/java/android/content/res/ThemeTest.java
Patch:
@@ -8,6 +8,7 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.util.TypedValue;
+import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -252,7 +252,7 @@ enum ResourcesMode {
     binary,
     both;
 
-    static final ResourcesMode DEFAULT = binary;
+    static final ResourcesMode DEFAULT = both;
 
     public boolean includeLegacy() {
       return this == legacy || this == both;
@@ -659,7 +659,7 @@ public String getName() {
       //   latest supported SDK for focused test runs
       return super.getName()
           + (includeApiLevelInName ? "[" + sdkConfig.getApiLevel() + "]" : "")
-          + (!legacyResources ? "" : "")
+          + (!legacyResources ? "[binary]" : "")
           ;
     }
 

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -1751,7 +1751,7 @@ public List<AssetPath> getAssetPaths() {
             fsFile = Fs.newFile(asset_path.path.string());
             break;
           case kFileTypeRegular:
-            fsFile = Fs.newJarFile(new File(asset_path.path.string()));
+            fsFile = Fs.newFile(asset_path.path.string());
             break;
           default:
             throw new IllegalStateException("Unsupported type " + asset_path.type + " for + "

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -123,10 +123,10 @@ public void setUpApplicationState(Method method, AndroidManifest appManifest,
     if (appManifest.getAndroidManifestFile() != null
         && appManifest.getAndroidManifestFile().exists()) {
       if (!legacyResources
-          && Boolean.parseBoolean(System.getProperty("use_framework_manifest_parser", "false"))) {
+          || Boolean.parseBoolean(System.getProperty("use_framework_manifest_parser", "false"))) {
         // FsFile packageFile = appManifest.getAndroidManifestFile();
         // todo get elsewhere?
-        FsFile packageFile = Fs.fromURL(getClass().getResource("/resources.ap_"));
+        FsFile packageFile = appManifest.getApkFile();
         parsedPackage = ShadowPackageParser.callParsePackage(packageFile);
       } else {
         parsedPackage = LegacyManifestParser.createPackage(appManifest);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.xmlpull.v1.XmlPullParser;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(sdk = Build.VERSION_CODES.P)
 public class ShadowResourcesTest {
   private Resources resources;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -242,7 +242,8 @@ public void whenAttrSetAttrSpecifiesAttr_obtainStyledAttribute_returnsItsValue()
     theme.applyStyle(R.style.Theme_ThemeContainingStyleReferences, true);
 
     assertThat(theme.obtainStyledAttributes(
-        Robolectric.buildAttributeSet().addAttribute(R.attr.string2, "?attr/string1").build(), new int[]{R.attr.string2}, 0, 0).getString(0))
+        Robolectric.buildAttributeSet().addAttribute(R.attr.string2, "?attr/string1").build(),
+        new int[]{R.attr.string2}, 0, 0).getString(0))
         .isEqualTo("string 1 from Theme.Robolectric");
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowXmlBlock.java
Patch:
@@ -49,14 +49,15 @@ public static int nativeGetStringBlock(int obj) {
   }
 
   @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
-  public static long nativeGetStringBlock(long obj) {
+  public static Number nativeGetStringBlock(long obj) {
     ResXMLTree osb = NATIVE_RES_XML_TREES.getNativeObject(obj);
 //    if (osb == NULL) {
 //      jniThrowNullPointerException(env, NULL);
 //      return 0;
 //    }
 
-    return ShadowStringBlock.getNativePointer(osb.getStrings());
+    return RuntimeEnvironment.castNativePtr(
+        ShadowStringBlock.getNativePointer(osb.getStrings()));
   }
 
   @Implementation(maxSdk = VERSION_CODES.KITKAT_WATCH)

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowInfo.java
Patch:
@@ -4,6 +4,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Objects;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.Implements.DefaultShadowFactory;
 import org.robolectric.shadow.api.ShadowFactory;
 
 public class ShadowInfo {
@@ -46,7 +47,7 @@ public class ShadowInfo {
   }
 
   private static ShadowFactory<?> manufactureFactory(Class<? extends ShadowFactory> factoryClass) {
-    if (factoryClass == null || factoryClass.equals(ShadowFactory.class)) {
+    if (factoryClass == null || factoryClass.equals(DefaultShadowFactory.class)) {
       return null;
     } else {
       try {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -327,8 +327,6 @@ protected void beforeTest(Sandbox sandbox, FrameworkMethod method, Method bootst
     providers = ServiceLoader.load(ShadowProvider.class, sdkEnvironment.getRobolectricClassLoader());
 
     roboMethod.parallelUniverseInterface.setSdkConfig(sdkConfig);
-    perfStatsCollector.measure("reset Android state (before test)",
-        () -> resetStaticState());
 
     AndroidManifest appManifest = roboMethod.getAppManifest();
     PackageResourceTable systemResourceTable = sdkEnvironment.getSystemResourceTable(getJarResolver());

File: resources/src/main/java/org/robolectric/res/android/FileMap.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.res.android;
 
+import static org.robolectric.res.android.Asset.toIntExact;
 import static org.robolectric.res.android.Util.ALOGV;
 
 import java.io.FileInputStream;
@@ -170,7 +171,7 @@ public boolean createFromZip(String origFileName, ZipFile zipFile, ZipEntry entr
     //mBaseLength = adjLength;
     mDataOffset = offset;
     //mDataPtr = mBasePtr + adjust;
-    mDataLength = Math.toIntExact(entry.getSize());
+    mDataLength = toIntExact(entry.getSize());
 
     //assert(mBasePtr != 0);
 

File: resources/src/main/java/org/robolectric/res/android/ResTableTheme.java
Patch:
@@ -5,6 +5,7 @@
 import static org.robolectric.res.android.ResTable.Res_GETENTRY;
 import static org.robolectric.res.android.ResTable.Res_GETPACKAGE;
 import static org.robolectric.res.android.ResTable.Res_GETTYPE;
+import static org.robolectric.res.android.ResTable.getOrDefault;
 import static org.robolectric.res.android.ResourceTypes.Res_value.TYPE_ATTRIBUTE;
 import static org.robolectric.res.android.ResourceTypes.Res_value.TYPE_NULL;
 import static org.robolectric.res.android.Util.ALOGE;
@@ -220,7 +221,7 @@ public int applyStyle(int resID, boolean force) {
         curEntries = curPI.types[t] != null ? curPI.types[t].entries: null;
         if (curEntries == null) {
           final PackageGroup grp = mTable.mPackageGroups.get(curPackageIndex);
-          final List<Type> typeList = grp.types.getOrDefault(t, Collections.emptyList());
+          final List<Type> typeList = getOrDefault(grp.types, t, Collections.emptyList());
           int cnt = typeList.isEmpty() ? 0 : typeList.get(0).entryCount;
           curEntries = new theme_entry[cnt];
           curPI.types[t] = new type_info();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -8,9 +8,11 @@
 
 import android.content.res.AssetFileDescriptor;
 import android.content.res.AssetManager;
+import android.content.res.AssetManager.AssetInputStream;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.content.res.XmlResourceParser;
+import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.ParcelFileDescriptor;
 import android.util.AttributeSet;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -14,6 +14,7 @@
 import static org.robolectric.shadow.api.Shadow.newInstanceOf;
 
 import android.accounts.IAccountManager;
+import android.app.IWallpaperManager;
 import android.app.admin.IDevicePolicyManager;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -6,7 +6,9 @@
 import static org.robolectric.shadows.ShadowAssetManager.commonShadowOf;
 
 import android.content.res.AssetManager;
+import android.graphics.FontFamily;
 import android.graphics.Typeface;
+import android.util.ArrayMap;
 import java.io.File;
 import java.util.Collection;
 import java.util.HashMap;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void openNonAssetShouldOpenRealAssetFromAndroidJar() throws IOException {
   public void openNonAssetShouldThrowExceptionWhenFileDoesNotExist() throws IOException {
     assumeTrue(isLegacyAssetManager());
 
-    expectedException.expect(FileNotFoundException.class);
+    expectedException.expect(IOException.class);
     expectedException.expectMessage(
         "./res/drawable/does_not_exist.png");
 

File: integration_tests/ctesque/src/test/java/android/content/res/ResourcesTest.java
Patch:
@@ -24,6 +24,8 @@
 import static org.robolectric.R.color.test_RGB8;
 
 import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.Color;
 import android.graphics.drawable.AnimationDrawable;
 import android.graphics.drawable.BitmapDrawable;

File: robolectric/src/main/java/org/robolectric/android/AttributeSetBuilderImpl.java
Patch:
@@ -310,7 +310,6 @@ public AttributeSet build() {
           }
 
           Res_value resValue = new Res_value(type.code(), valueInt);
-          System.out.println(attrName + " resValue = " + resValue + " string: " + value);
 
           int attrNameIndex = resStringPoolWriter.uniqueString(attrName);
           attr(resStringPoolWriter.string(attrNs), attrNameIndex,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGestureDetectorTest.java
Patch:
@@ -53,7 +53,7 @@ public void test_getListener() throws Exception {
   public void canAnswerLastGestureDetector() throws Exception {
     GestureDetector newDetector = new GestureDetector(RuntimeEnvironment.application, new TestOnGestureListener());
     assertNotSame(newDetector, ShadowGestureDetector.getLastActiveDetector());
-    newDetector.onTouchEvent(Shadow.newInstanceOf(MotionEvent.class));
+    newDetector.onTouchEvent(motionEvent);
     assertSame(newDetector, ShadowGestureDetector.getLastActiveDetector());
   }
 

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -150,7 +150,9 @@ public void setUpApplicationState(Method method, AndroidManifest appManifest,
     setUpPackageStorage(applicationInfo);
 
     if (sdkConfig.getApiLevel() <= VERSION_CODES.KITKAT) {
-      applicationInfo.publicSourceDir = ReflectionHelpers.getField(parsedPackage, "mPath");
+      String sourcePath = ReflectionHelpers.getField(parsedPackage, "mPath");
+      applicationInfo.publicSourceDir = sourcePath;
+      applicationInfo.sourceDir = sourcePath;
     } else {
       applicationInfo.publicSourceDir = parsedPackage.codePath;
     }

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -175,7 +175,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
     assertThat(RuntimeEnvironment.getQualifiers())
-        .contains("notlong-notround-large-land-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + Build.VERSION.RESOURCES_SDK_INT);
+        .contains("large-notlong-notround-land-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + Build.VERSION.RESOURCES_SDK_INT);
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -184,7 +184,7 @@ public void setUpApplicationState(
 
       try {
         Context contextImpl = systemContextImpl.createPackageContext(applicationInfo.packageName, Context.CONTEXT_INCLUDE_CODE);
-        shadowOf(contextImpl.getPackageManager()).addPackage(parsedPackage);
+        shadowOf(contextImpl.getPackageManager()).addPackageInternal(parsedPackage);
         ReflectionHelpers.setField(ActivityThread.class, activityThread, "mInitialApplication", application);
         shadowOf(application).callAttach(contextImpl);
       } catch (PackageManager.NameNotFoundException e) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -350,7 +350,7 @@ public void getAllPermissionGroups_duplicatePermission() throws Exception {
         new PermissionGroup(pkg, storagePermissionGroupInfoApp1);
     pkg.permissionGroups.add(storagePermissionGroupApp1);
 
-    shadowPackageManager.addPackage(pkg);
+    shadowPackageManager.addPackageInternal(pkg);
 
     // Package 2, contains one permission group that is the same
     Package pkg2 = new Package(TEST_PACKAGE2_NAME);
@@ -370,7 +370,7 @@ public void getAllPermissionGroups_duplicatePermission() throws Exception {
         new PermissionGroup(pkg2, calendarPermissionGroupInfoApp2);
     pkg2.permissionGroups.add(calendarPermissionGroupApp2);
 
-    shadowPackageManager.addPackage(pkg2);
+    shadowPackageManager.addPackageInternal(pkg2);
 
     // Make sure that the duplicate permission group does not show up in the list
     // Total list should be: contacts, storage, calendar, "org.robolectric.package_permission_group"

File: resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -21,7 +21,7 @@ public class PackageResourceTable implements ResourceTable {
   private int packageIdentifier;
 
 
-  PackageResourceTable(String packageName) {
+  public PackageResourceTable(String packageName) {
     this.packageName = packageName;
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -67,10 +67,10 @@ public void createFromFile_withPath_shouldCreateTypeface() {
 
   @Test
   public void createFromAsset_shouldCreateTypeface() {
-    Typeface typeface = Typeface.createFromAsset(RuntimeEnvironment.application.getAssets(), "libFont.ttf");
+    Typeface typeface = Typeface.createFromAsset(RuntimeEnvironment.application.getAssets(), "myFont.ttf");
 
     assertThat(typeface.getStyle()).isEqualTo(Typeface.NORMAL);
-    assertThat(shadowOf(typeface).getFontDescription().getFamilyName()).isEqualTo("libFont.ttf");
+    assertThat(shadowOf(typeface).getFontDescription().getFamilyName()).isEqualTo("myFont.ttf");
     assertThat(shadowOf(typeface).getFontDescription().getStyle()).isEqualTo(Typeface.NORMAL);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -2,15 +2,13 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 
-import android.content.ComponentCallbacks;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Rect;
 import android.os.Build;
 import android.os.Looper;
 import android.util.MergedConfiguration;
 import android.view.Display;
-import android.view.DisplayCutout.ParcelableWrapper;
 import android.view.ViewRootImpl;
 import android.view.WindowManager;
 import java.util.ArrayList;

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.google.common.collect.Lists;
 import java.lang.reflect.Method;
-import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -142,8 +141,7 @@ protected void runChild(FrameworkMethod method, RunNotifier notifier) {
   @Nonnull
   protected Sandbox getSandbox(FrameworkMethod method) {
     InstrumentationConfiguration instrumentationConfiguration = createClassLoaderConfig(method);
-    URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
-    ClassLoader sandboxClassLoader = new SandboxClassLoader(systemClassLoader, instrumentationConfiguration);
+    ClassLoader sandboxClassLoader = new SandboxClassLoader(ClassLoader.getSystemClassLoader(), instrumentationConfiguration);
     return new Sandbox(sandboxClassLoader);
   }
 

File: junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.google.common.collect.Lists;
 import java.lang.reflect.Method;
-import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -142,8 +141,7 @@ protected void runChild(FrameworkMethod method, RunNotifier notifier) {
   @Nonnull
   protected Sandbox getSandbox(FrameworkMethod method) {
     InstrumentationConfiguration instrumentationConfiguration = createClassLoaderConfig(method);
-    URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
-    ClassLoader sandboxClassLoader = new SandboxClassLoader(systemClassLoader, instrumentationConfiguration);
+    ClassLoader sandboxClassLoader = new SandboxClassLoader(ClassLoader.getSystemClassLoader(), instrumentationConfiguration);
     return new Sandbox(sandboxClassLoader);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -38,6 +38,7 @@
 import android.print.PrintManager;
 import android.telephony.SubscriptionManager;
 import android.view.Gravity;
+import android.view.LayoutInflater;
 import android.view.accessibility.AccessibilityManager;
 import android.view.accessibility.CaptioningManager;
 import android.view.autofill.AutofillManager;
@@ -141,7 +142,7 @@ public void shouldProvideServicesIntroducedOreo() throws Exception {
 
   @Test public void shouldProvideLayoutInflater() throws Exception {
     Object systemService = RuntimeEnvironment.application.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-    assertThat(systemService).isInstanceOf(RoboLayoutInflater.class);
+    assertThat(systemService).isInstanceOf(LayoutInflater.class);
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSystemVibrator.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-@Implements(SystemVibrator.class)
+@Implements(value = SystemVibrator.class, isInAndroidSdk = false)
 public class ShadowSystemVibrator extends ShadowVibrator {
 
   private Handler handler = new Handler(Looper.myLooper());

File: robolectric/src/test/java/org/robolectric/android/XmlResourceParserImplTest.java
Patch:
@@ -377,7 +377,7 @@ public void testGetAttributeEscapedValue() throws Exception {
 
   @Test
   public void testGetAttributeEntityValue() throws Exception {
-    forgeAndOpenDocument("<foo bar=\"\\u201e&#34;\"/>");
+    forgeAndOpenDocument("<foo bar=\"\\u201e&#92;&#34;\"/>");
     assertThat(parser.getAttributeValue(0)).isEqualTo("„\"");
   }
 
@@ -389,7 +389,7 @@ public void testGetNodeTextEscapedValue() throws Exception {
 
   @Test
   public void testGetNodeTextEntityValue() throws Exception {
-    forgeAndOpenDocument("<foo>\\u201e&#34;</foo>");
+    forgeAndOpenDocument("<foo>\\u201e\\&#34;</foo>");
     assertThat(parser.getText()).isEqualTo("„\"");
   }
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassValueMap.java
Patch:
@@ -14,7 +14,7 @@ abstract class ClassValueMap<T> {
   protected abstract T computeValue(Class<?> type);
 
   @SuppressWarnings("Java8MapApi")
-  synchronized public T get(Class<?> type) {
+  public synchronized T get(Class<?> type) {
     T t = map.get(type);
     if (t == null) {
       if (!map.containsKey(type)) {

File: sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -654,7 +654,7 @@ private Object getDeclaredFieldValue(Class<?> aClass, Object o, String fieldName
   }
 
   public static class MyClassHandler implements ClassHandler {
-    private static Object GENERATE_YOUR_OWN_VALUE = new Object();
+    private static final Object GENERATE_YOUR_OWN_VALUE = new Object();
     private List<String> transcript;
     private Object valueToReturn = GENERATE_YOUR_OWN_VALUE;
     private Object valueToReturnFromIntercept = null;

File: integration_tests/android_support_test/src/test/java/org/robolectric/integration_tests/atsl/ActivityTestRuleTest.java
Patch:
@@ -20,7 +20,7 @@ public class ActivityTestRuleTest {
   private static Collection<String> callbacks = new ArrayList<>();
 
   @Rule
-  public ActivityTestRule<MyActivity> mRule =
+  public ActivityTestRule<MyActivity> rule =
       new ActivityTestRule<MyActivity>(MyActivity.class, false, false) {
         @Override
         protected void beforeActivityLaunched() {
@@ -92,7 +92,7 @@ public void setUp() {
 
   @Test
   public void launchActivity_callbackSequence() {
-    MyActivity activity = mRule.launchActivity(null);
+    MyActivity activity = rule.launchActivity(null);
     assertThat(activity).isNotNull();
     assertThat(callbacks)
         .containsExactly(

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -143,7 +143,8 @@ public void clickOn_shouldCallClickListener() throws Exception {
   @Test(expected = ActivityNotFoundException.class)
   public void checkActivities_shouldSetValueOnShadowApplication() throws Exception {
     ShadowApplication.getInstance().checkActivities(true);
-    context.startActivity(new Intent("i.dont.exist.activity"));
+    context.startActivity(
+        new Intent("i.dont.exist.activity").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
   }
 
   @Test @Config(sdk = 16)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -457,7 +457,7 @@ public void startActivity_whenActivityCheckingEnabled_checksPackageManagerResolv
     String action = "com.does.not.exist.android.app.v2.mobile";
 
     try {
-      application.startActivity(new Intent(action));
+      application.startActivity(new Intent(action).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
       fail("Expected startActivity to throw ActivityNotFoundException!");
     } catch (ActivityNotFoundException e) {
       assertThat(e.getMessage()).contains(action);

File: integration_tests/android_support_test/src/test/java/org/robolectric/integration_tests/atsl/InstrumentationRegistryTest.java
Patch:
@@ -57,4 +57,5 @@ private void checkInstances() {
       assertThat(priorContext).isNotEqualTo(InstrumentationRegistry.getTargetContext());
     }
   }
+
 }

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricModel.java
Patch:
@@ -164,7 +164,7 @@ public TypeElement visitType(TypeElement e, Void p) {
   };
 
   public static AnnotationValue getAnnotationValue(AnnotationMirror annotationMirror, String key) {
-    for (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet() ) {
+    for (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {
       if (entry.getKey().getSimpleName().toString().equals(key)) {
         return entry.getValue();
       }

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ShadowProviderGenerator.java
Patch:
@@ -147,6 +147,7 @@ void generate(PrintWriter writer) {
       writer.println();
     }
 
+    writer.println("  @Override");
     writer.println("  public void reset() {");
     for (Map.Entry<TypeElement, ExecutableElement> entry : model.getResetters().entrySet()) {
       Implements annotation = entry.getKey().getAnnotation(Implements.class);

File: processor/src/test/resources/org/robolectric/Robolectric_Anything.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_ClassNameOnly.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowClassNameOnly shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowClassNameOnly.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_EmptyProvidedPackageNames.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -34,7 +34,8 @@ public static ShadowDummy shadowOf(Dummy actual) {
   public static ShadowOuterDummy2 shadowOf(OuterDummy2 actual) {
     return (ShadowOuterDummy2) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
     ShadowPrivate.resetMethod();

File: processor/src/test/resources/org/robolectric/Robolectric_InnerClassCollision.java
Patch:
@@ -51,7 +51,8 @@ public static ShadowUniqueDummy.ShadowInnerDummy shadowOf(UniqueDummy.InnerDummy
   public static ShadowUniqueInnerDummy shadowOf(UniqueInnerDummy actual) {
     return (ShadowUniqueInnerDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: processor/src/test/resources/org/robolectric/Robolectric_NoExcludedTypes.java
Patch:
@@ -18,6 +18,7 @@ public class Shadows implements ShadowProvider {
     SHADOW_MAP.put("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowExcludedFromAndroidSdk");
   }
 
+  @Override
   public void reset() {
   }
 

File: processor/src/test/resources/org/robolectric/Robolectric_Parameterized.java
Patch:
@@ -28,6 +28,7 @@ public static <T, N extends Number> ShadowParameterizedDummy<T,N> shadowOf(Param
     return (ShadowParameterizedDummy<T,N>) Shadow.extract(actual);
   }
 
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: processor/src/test/resources/org/robolectric/annotation/processing/shadows/DocumentedObjectShadow.java
Patch:
@@ -16,7 +16,7 @@ public class DocumentedObjectShadow {
    * Docs for shadow method go here!
    */
   @Implementation
-  public String getSomething(int index, Map<String, String> defaultValue) {
+  protected String getSomething(int index, Map<String, String> defaultValue) {
     return null;
   }
 

File: processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementationWithoutImplements.java
Patch:
@@ -5,5 +5,5 @@
 public class ShadowImplementationWithoutImplements {
 
   @Implementation
-  public static void implementation_method() {}
+  protected static void implementation_method() {}
 }

File: resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
@@ -21,14 +20,14 @@ public BroadcastReceiverData(
     super(attributes.get(NAME), metaData);
     this.attributes = attributes;
     this.actions = new ArrayList<>();
-    this.intentFilters = new LinkedList<>(intentFilters);
+    this.intentFilters = new ArrayList<>(intentFilters);
   }
 
   public BroadcastReceiverData(String className, MetaData metaData) {
     super(className, metaData);
     this.actions = new ArrayList<>();
     this.attributes = new HashMap<>();
-    intentFilters = new LinkedList<>();
+    intentFilters = new ArrayList<>();
   }
 
   public List<String> getActions() {

File: resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -25,6 +25,7 @@ public class PackageResourceTable implements ResourceTable {
     this.packageName = packageName;
   }
 
+  @Override
   public String getPackageName() {
     return packageName;
   }

File: resources/src/main/java/org/robolectric/res/ResourceTable.java
Patch:
@@ -23,6 +23,8 @@ public interface ResourceTable {
 
   void receive(Visitor visitor);
 
+  String getPackageName();
+
   interface Visitor {
     void visit(ResName key, Iterable<TypedResource> values);
   }

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -585,7 +585,7 @@ public final String regionString() {
 
   public final String scriptString() {
     if (localeScript[0] != '\0') {
-      return new String(localeScript);
+      return new String(localeScript, Charsets.UTF_8);
     } else {
       return null;
     }
@@ -1892,7 +1892,7 @@ private int version() {
    };
    */
   int locale() {
-    return (language[0] & 0xff << 24) | (language[1] * 0xff << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
+    return ((language[0] & 0xff) << 24) | ((language[1] & 0xff) << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
   }
 
   private boolean isLocaleBetterThan(ResTable_config o, ResTable_config requested) {

File: robolectric/src/test/java/org/robolectric/InvokeDynamicTest.java
Patch:
@@ -79,7 +79,7 @@ public static class RealShadow {
     public int x = -2;
 
     @Implementation
-    public void setX(int x) {
+    protected void setX(int x) {
       this.x = x;
       real.x = -x;
     }
@@ -90,7 +90,7 @@ public static class RealShadow1 {
     @RealObject RealCopy real;
 
     @Implementation
-    public void setX(int x) {
+    protected void setX(int x) {
       real.x = 1;
     }
   }
@@ -100,7 +100,7 @@ public static class RealShadow2 {
     @RealObject RealCopy real;
 
     @Implementation
-    public void setX(int x) {
+    protected void setX(int x) {
       real.x = 2;
     }
   }

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -159,7 +159,7 @@ public void setupActivity_returnsAVisibleActivity() throws Exception {
   @Implements(View.class)
   public static class TestShadowView {
     @Implementation
-    public Context getContext() {
+    protected Context getContext() {
       return null;
     }
   }

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -78,7 +78,7 @@ public void startVisibleFragment_shouldAttachFragmentToActivityWithSpecifiedActi
     assertThat(fragment.getActivity()).isInstanceOf(LoginActivity.class);
   }
 
-  private static class LoginFragment extends Fragment {
+  public static class LoginFragment extends Fragment {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
       return inflater.inflate(R.layout.fragment_contents, container, false);

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import android.content.res.Configuration;
 import android.content.res.Resources;
+import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -46,7 +47,7 @@ public void checkForPollution2() throws Exception {
 
   private void checkForPollutionHelper() {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
+        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + Build.VERSION.RESOURCES_SDK_INT);
 
     View view = LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.different_screen_sizes, null);
     TextView textView = view.findViewById(android.R.id.text1);

File: robolectric/src/test/java/org/robolectric/android/ShadowingTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.Toast;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowingTest {

File: robolectric/src/test/java/org/robolectric/android/controller/BackupAgentControllerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class BackupAgentControllerTest {

File: robolectric/src/test/java/org/robolectric/android/controller/IntentServiceControllerTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
@@ -53,7 +52,7 @@ public void onBindShouldSetIntentComponentWithCustomIntentWithoutComponentSet()
 
   @Test
   public void shouldSetIntentForGivenServiceInstance() throws Exception {
-    IntentServiceController<MyService> intentServiceController = IntentServiceController.of(new CoreShadowsAdapter(), new MyService(""), null).bind();
+    IntentServiceController<MyService> intentServiceController = IntentServiceController.of(new MyService(""), null).bind();
     assertThat(intentServiceController.get().boundIntent).isNotNull();
   }
 
@@ -177,4 +176,4 @@ private void runOnUiThread(Runnable action) {
       shadowOf(handler.getLooper()).getScheduler().post(action);
     }
   }
-}
\ No newline at end of file
+}

File: robolectric/src/test/java/org/robolectric/android/controller/ServiceControllerTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
@@ -55,7 +54,7 @@ public void onBindShouldSetIntentComponentWithCustomIntentWithoutComponentSet()
 
   @Test
   public void shouldSetIntentForGivenServiceInstance() throws Exception {
-    ServiceController<MyService> serviceController = ServiceController.of(new CoreShadowsAdapter(), new MyService(), null).bind();
+    ServiceController<MyService> serviceController = ServiceController.of(new MyService(), null).bind();
     assertThat(serviceController.get().boundIntent).isNotNull();
   }
 

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboCursorTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboMenuItemTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboVibratorTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboVibratorTest {

File: robolectric/src/test/java/org/robolectric/res/StaxPluralsLoaderTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.junit.runners.JUnit4;
 import org.robolectric.R;
 import org.robolectric.res.android.ResTable_config;
-import org.robolectric.util.TestUtil;
 
 @RunWith(JUnit4.class)
 public class StaxPluralsLoaderTest {
@@ -29,7 +28,7 @@ public void setUp() throws Exception {
 
   @Test
   public void testPluralsAreResolved() throws Exception {
-    ResName resName = new ResName(TestUtil.TEST_PACKAGE, "plurals", "beer");
+    ResName resName = new ResName("org.robolectric", "plurals", "beer");
     PluralRules pluralRules = (PluralRules) resourceTable.getValue(resName, new ResTable_config());
     assertThat(pluralRules.find(0).string).isEqualTo("@string/howdy");
     assertThat(pluralRules.find(1).string).isEqualTo("One beer");

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -3,8 +3,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
@@ -52,7 +52,7 @@ public void escape_shouldSupport() {
 
   @Test
   public void testInvalidCodePoints() {
-    List<String> tests = new LinkedList<>();
+    List<String> tests = new ArrayList<>();
     tests.add("\\u");
     tests.add("\\u0");
     tests.add("\\u00");

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 abstract public class AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -7,7 +7,6 @@
 import android.database.sqlite.SQLiteCursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
-import java.nio.charset.StandardCharsets;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteOpenHelperTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteStatementTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSeekBarTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.AbsSeekBar;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.Gallery;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsoluteLayoutTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.widget.AbsoluteLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsoluteLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbstractCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityEventTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationUtilsTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAnimationUtilsTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowArrayAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskLoaderTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAsyncTaskLoaderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.media.AudioManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAudioManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAutoCompleteTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBatteryManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapFactoryTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothManagerTest.java
Patch:
@@ -8,8 +8,8 @@
 import android.content.Context;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCameraTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.widget.CheckBox;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckBoxTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckedTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowClipboardManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowClipboardManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 /**
  * Tests for {@link ShadowContentProviderOperation}.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestApplication;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCountDownTimerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatePickerDialogTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Locale;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowDatePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.TimeZone;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogPreferenceTest.java
Patch:
@@ -32,6 +32,7 @@ private PreferenceScreen inflatePreferenceActivity() {
     return activity.getPreferenceScreen();
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowExpandableListViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowFrameLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowHandlerThreadTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIconTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowImageViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowInputMethodManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -25,14 +25,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyCharacterMapTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.EditText;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowKeyCharacterMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayerDrawableTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayerDrawableTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutAnimationControllerTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutAnimationControllerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinearLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLinearLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.ListPopupWindow;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListPopupWindowTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.ListView;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListViewAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 import org.robolectric.RoboSettings;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMetadataRetrieverTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMediaMetadataRetrieverTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowMediaPlayer.InvalidStateBehavior;
 import org.robolectric.shadows.ShadowMediaPlayer.MediaEvent;
@@ -736,6 +736,7 @@ public ExceptionTester(Class<? extends Throwable> eClass) {
     }
 
     @Override
+    @SuppressWarnings("MissingFail")
     public void test(MethodSpec method) {
       final State state = shadowMediaPlayer.getState();
       boolean success = false;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -240,7 +240,7 @@ public void reset_shouldEmptyMessagePool() {
     assertThat(dummy2).as("before resetting").isSameAs(dummy1);
 
     shadowOf(dummy2).recycleUnchecked();
-    Robolectric.reset();
+    ShadowMessage.reset();
     dummy1 = Message.obtain();
     assertThat(dummy1).as("after resetting").isNotSameAs(dummy2);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.webkit.MimeTypeMap;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMimeTypeMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.net.Network;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNfcAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -3,9 +3,8 @@
 import android.os.Build;
 import org.junit.Before;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNumberPickerTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.NumberPicker;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNumberPickerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOverScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowOverScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowParcelFileDescriptorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPendingIntentTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowPopupMenuTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTest.java
Patch:
@@ -52,6 +52,7 @@ public void shouldFindPreferencesWithStringResourceKeyValue() {
     assertNotNull(activity.findPreference("preference_resource_key_value"));
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -45,7 +45,6 @@ public void preferenceAddedWithCorrectDetails() {
   }
 
   private static class TestPreferenceActivity extends Activity {
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
@@ -56,8 +55,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
   }
 
-  private static class TestPreferenceFragment extends PreferenceFragment {
-
+  public static class TestPreferenceFragment extends PreferenceFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressDialogTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowProgressDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioButtonTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioButtonTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRatingBarTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRatingBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.RelativeLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResolveInfoTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowResolveInfoTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSeekBarTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShortcutManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 /** Unit tests for ShadowShortcutManager. */

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSimpleCursorAdapterTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.SimpleCursorAdapter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSimpleCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSmsManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSslErrorHandlerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.view.Window;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSurfaceViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabSpecTest.java
Patch:
@@ -9,14 +9,13 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 import android.widget.TabHost;
-import android.widget.TabHost.TabContentFactory;
 import android.widget.TextView;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTabSpecTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -44,8 +44,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.app.TimePickerDialog;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTimePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowToastTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowToastTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTouchDelegateTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTouchDelegateTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TestUtil;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.util.TimeUtils;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowVideoViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewAnimatorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewFlipperTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewFlipperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.app.WallpaperManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWallpaperManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiP2pManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWifiP2pManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 

File: robolectric/src/test/java/org/robolectric/shadows/VelocityTrackerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class VelocityTrackerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewInnerTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewStubTest {

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.util.SQLiteLibraryLoader;
 
 @RunWith(RobolectricTestRunner.class)

File: sandbox/src/main/java/org/robolectric/internal/bytecode/MethodCallSite.java
Patch:
@@ -10,9 +10,9 @@ public class MethodCallSite extends RoboCallSite {
   private final MethodHandle original;
   private final Kind kind;
 
-  public MethodCallSite(MethodType type, Class<?> caller, String name, MethodHandle original,
+  public MethodCallSite(Class<?> theClass, MethodType type, String name, MethodHandle original,
       Kind kind) {
-    super(type, caller);
+    super(type, theClass);
     this.name = name;
     this.original = original;
     this.kind = kind;
@@ -36,7 +36,7 @@ public boolean isStatic() {
 
   @Override public String toString() {
     return "RoboCallSite{" +
-        "caller=" + getCaller() +
+        "theClass=" + getTheClass() +
         ", original=" + original +
         ", kind=" + kind +
         '}';

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricInternals.java
Patch:
@@ -34,9 +34,9 @@ public static MethodHandle getShadowCreator(Class<?> caller) {
     return classHandler.getShadowCreator(caller);
   }
 
-  public static MethodHandle findShadowMethod(Class<?> theClass, String name,
-      MethodType type, boolean isStatic) throws IllegalAccessException {
-    return classHandler.findShadowMethod(theClass, name, type, isStatic);
+  public static MethodHandle findShadowMethodHandle(Class<?> theClass, String name,
+      MethodType methodType, boolean isStatic) throws IllegalAccessException {
+    return classHandler.findShadowMethodHandle(theClass, name, methodType, isStatic);
   }
 
   @SuppressWarnings("UnusedDeclaration")

File: sandbox/src/test/java/org/robolectric/StaticInitializerTest.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.internal.Instrument;
 import org.robolectric.internal.SandboxTestRunner;
@@ -60,8 +61,8 @@ public void whenClassHasShadowWithOverrideMethod_shouldDeferStaticInitialization
   public static class ShadowClassWithStaticInitializerOverride {
     public static boolean initialized = false;
 
-    @SuppressWarnings("UnusedDeclaration")
-    public static void __staticInitializer__() {
+    @Implementation
+    protected static void __staticInitializer__() {
       initialized = true;
     }
   }

File: sandbox/src/test/java/org/robolectric/ThreadSafetyTest.java
Patch:
@@ -46,7 +46,7 @@ public void run() {
   public static class InstrumentedThreadShadow {
     @RealObject InstrumentedThread realObject;
     @Implementation
-    public void run() {
+    protected void run() {
       Shadow.directlyOn(realObject, InstrumentedThread.class, "run");
     }
   }

File: sandbox/src/test/java/org/robolectric/testing/Pony.java
Patch:
@@ -29,7 +29,7 @@ public String ride(String where) {
     }
 
     @Implementation
-    public static String prance(String where) {
+    protected static String prance(String where) {
       return "I'm shadily prancing to " + where + "!";
     }
   }

File: sandbox/src/test/java/org/robolectric/testing/ShadowFoo.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.testing;
 
 import org.robolectric.ShadowWranglerIntegrationTest;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
@@ -11,8 +12,8 @@ public class ShadowFoo extends ShadowWranglerIntegrationTest.ShadowFooParent {
   public String name;
 
   @Override
-  @SuppressWarnings({"UnusedDeclaration"})
-  public void __constructor__(String name) {
+  @Implementation
+  protected void __constructor__(String name) {
     super.__constructor__(name);
     this.name = name;
     realFooInConstructor = realFooField;

File: shadowapi/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -315,8 +315,9 @@ public static Class<?> loadClass(ClassLoader classLoader, String fullyQualifiedC
    */
   public static <T> T newInstance(Class<T> cl) {
     try {
-      return cl.newInstance();
-    } catch (InstantiationException | IllegalAccessException e) {
+      return cl.getDeclaredConstructor().newInstance();
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException
+        | InvocationTargetException e) {
       throw new RuntimeException(e);
     }
   }

File: shadows/framework/src/main/java/org/robolectric/android/controller/FragmentController.java
Patch:
@@ -5,6 +5,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.widget.LinearLayout;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ResourceHelper.java
Patch:
@@ -27,7 +27,7 @@
  */
 public final class ResourceHelper {
 
-  private final static Pattern sFloatPattern = Pattern.compile("(-?[0-9]+(?:\\.[0-9]+)?)(.*)");
+  private final static Pattern sFloatPattern = Pattern.compile("(-?[0-9]*(?:\\.[0-9]+)?)(.*)");
   private final static float[] sFloatOut = new float[1];
 
   private final static TypedValue mValue = new TypedValue();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -502,7 +501,7 @@ public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(
     return start(new BaseRoboAccountManagerFuture<Account[]>(callback, handler) {
       @Override
       public Account[] doWork() throws OperationCanceledException, IOException, AuthenticatorException {
-        List<Account> result = new LinkedList<>();
+        List<Account> result = new ArrayList<>();
 
         Account[] accountsByType = getAccountsByType(type);
         for (Account account : accountsByType) {
@@ -523,7 +522,7 @@ private <T extends BaseRoboAccountManagerFuture> T start(T future) {
 
   @Implementation(minSdk = JELLY_BEAN_MR2)
   public Account[] getAccountsByTypeForPackage (String type, String packageName) {
-    List<Account> result = new LinkedList<>();
+    List<Account> result = new ArrayList<>();
 
     Account[] accountsByType = getAccountsByType(type);
     for (Account account : accountsByType) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -1,4 +1,5 @@
 package org.robolectric.shadows;
+
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.app.ActivityManager;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioEffect.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import android.media.audiofx.AudioEffect;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -10,7 +10,7 @@
 @Implements(AudioEffect.class)
 public class ShadowAudioEffect {
 
-  private static List<AudioEffect.Descriptor> DESCRIPTORS = new LinkedList<>();
+  private static List<AudioEffect.Descriptor> DESCRIPTORS = new ArrayList<>();
 
   public static void addEffect(AudioEffect.Descriptor descriptor) {
     DESCRIPTORS.add(descriptor);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -595,6 +595,8 @@ public static int getBytesPerPixel(Bitmap.Config config) {
       throw new NullPointerException("Bitmap config was null.");
     }
     switch (config) {
+      case RGBA_F16:
+        return 8;
       case ARGB_8888:
         return 4;
       case RGB_565:

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -62,8 +62,9 @@ public long getStatSize() {
   }
 
   /**
-   * Overrides framework to avoid call to FileDescriptor#getInt$ which does not exist on JVM.
-   * Returns a fixed int (0).
+   * Overrides framework to avoid call to {@link FileDescriptor#getInt() which does not exist on JVM.
+   *
+   * @return a fixed int (`0`)
    */
   @Implementation
   public int getFd() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -52,12 +52,12 @@ public CharSequence loadStringValueAt(int index) {
   }
 
   @Implementation
-  public String getNonResourceString(@StyleableRes int index) {
+  protected String getNonResourceString(@StyleableRes int index) {
     return directlyOn(realTypedArray, TypedArray.class).getString(index);
   }
 
   @Implementation
-  public String getNonConfigurationString(@StyleableRes int index, int allowedChangingConfigs) {
+  protected String getNonConfigurationString(@StyleableRes int index, int allowedChangingConfigs) {
     return directlyOn(realTypedArray, TypedArray.class).getString(index);
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPhoneWindow.java
Patch:
@@ -5,13 +5,12 @@
 
 import android.graphics.drawable.Drawable;
 import android.view.Window;
-import com.android.internal.policy.PhoneWindow;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
-@Implements(value = PhoneWindow.class, isInAndroidSdk = false, minSdk = M)
+@Implements(className = "com.android.internal.policy.PhoneWindow", isInAndroidSdk = false, minSdk = M)
 public class ShadowPhoneWindow extends ShadowWindow {
   @SuppressWarnings("UnusedDeclaration")
   protected @RealObject Window realWindow;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -113,7 +113,7 @@ public static float getFloat(ContentResolver cr, String name) throws Settings.Se
     private static Map<String, Object> get(ContentResolver cr) {
       Map<String, Object> map = dataMap.get(cr);
       if (map == null) {
-        map = new HashMap<String, Object>();
+        map = new HashMap<>();
         dataMap.put(cr, map);
       }
       return map;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimePickerDialog.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.annotation.RealObject;
 import org.robolectric.shadow.api.Shadow;
 
-@Implements(value = TimePickerDialog.class, inheritImplementationMethods = true)
+@Implements(value = TimePickerDialog.class)
 public class ShadowTimePickerDialog extends ShadowAlertDialog {
   @RealObject
   protected TimePickerDialog realTimePickerDialog;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -24,7 +24,7 @@
 import org.robolectric.util.ReflectionHelpers;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(value = WebView.class, inheritImplementationMethods = true)
+@Implements(value = WebView.class)
 public class ShadowWebView extends ShadowViewGroup {
   @RealObject
   private WebView realWebView;

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -167,6 +167,8 @@ private Plan calculatePlan(String signature, boolean isStatic, Class<?> defining
       Method shadowMethod = pickShadowMethod(definingClass, invocationProfile.methodName, types);
       if (shadowMethod == CALL_REAL_CODE) {
         return CALL_REAL_CODE_PLAN;
+      } else if (shadowMethod == DO_NOTHING_METHOD){
+        return DO_NOTHING_PLAN;
       } else {
         return new ShadowMethodPlan(shadowMethod);
       }

File: integration_tests/android_support_test/src/test/java/org/robolectric/integration_tests/atsl/InstrumentationRegistryTest.java
Patch:
@@ -29,7 +29,9 @@ public void getInstrumentation() {
   @Test
   public void getTargetContext() {
     assertThat(InstrumentationRegistry.getTargetContext()).isNotNull();
-    assertThat(InstrumentationRegistry.getTargetContext()).isEqualTo(InstrumentationRegistry.getContext());
+    assertThat(InstrumentationRegistry.getContext()).isNotNull();
+    assertThat(InstrumentationRegistry.getTargetContext().getPackageName()).isEqualTo(
+        InstrumentationRegistry.getContext().getPackageName());
   }
 
   @Test

File: integration_tests/android_support_test/src/test/java/org/robolectric/integration_tests/atsl/InstrumentationRegistryTest.java
Patch:
@@ -29,7 +29,9 @@ public void getInstrumentation() {
   @Test
   public void getTargetContext() {
     assertThat(InstrumentationRegistry.getTargetContext()).isNotNull();
-    assertThat(InstrumentationRegistry.getTargetContext()).isEqualTo(InstrumentationRegistry.getContext());
+    assertThat(InstrumentationRegistry.getContext()).isNotNull();
+    assertThat(InstrumentationRegistry.getTargetContext().getPackageName()).isEqualTo(
+        InstrumentationRegistry.getContext().getPackageName());
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageParser.java
Patch:
@@ -92,7 +92,7 @@ public Package parsePackage(
     boolean assetError = true;
     try {
       assmgr = new AssetManager();
-      int cookie = assmgr.addAssetPath(mArchiveSourcePath);
+      int cookie = mArchiveSourcePath != null ? assmgr.addAssetPath(mArchiveSourcePath) : 1;
       if (cookie != 0) {
         res = new Resources(assmgr, metrics, null);
         parser = assmgr.openXmlResourceParser(cookie, MANIFEST_FILE);

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ClassHandler.java
Patch:
@@ -124,7 +124,7 @@ Object intercept(String signature, Object instance, Object[] params, Class theCl
    */
   interface Plan {
 
-    Object run(Object instance, Object roboData, Object[] params) throws Throwable;
+    Object run(Object instance, Object[] params) throws Throwable;
 
     String describe();
   }

File: sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -693,7 +693,7 @@ public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass)
       final InvocationProfile invocationProfile = new InvocationProfile(signature, isStatic, getClass().getClassLoader());
       return new Plan() {
         @Override
-        public Object run(Object instance, Object roboData, Object[] params) throws Exception {
+        public Object run(Object instance, Object[] params) throws Exception {
           try {
             return methodInvoked(invocationProfile.clazz, invocationProfile.methodName, instance, invocationProfile.paramTypes, params);
           } catch (Throwable throwable) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -9,7 +9,6 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -978,7 +978,6 @@ private AttributeResource findAttributeValue(int resId, AttributeSet attributeSe
 
   private List<FsFile> getAllAssetsDirectories() {
     List<FsFile> assetsDirs = new ArrayList<>();
-    assetsDirs.add(getAssetsDirectory());
     assetsDirs.addAll(getLibraryAssetsDirectories());
     return assetsDirs;
   }
@@ -989,7 +988,8 @@ private FsFile getAssetsDirectory() {
 
   private List<FsFile> getLibraryAssetsDirectories() {
     List<FsFile> libraryAssetsDirectory = new ArrayList<>();
-    for (AndroidManifest manifest : ShadowApplication.getInstance().getAppManifest().getLibraryManifests()) {
+    AndroidManifest appManifest = ShadowApplication.getInstance().getAppManifest();
+    for (AndroidManifest manifest : appManifest.getAllManifests()) {
       if (manifest.getAssetsDirectory() != null) {
         libraryAssetsDirectory.add(manifest.getAssetsDirectory());
       }

File: annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -21,6 +21,7 @@
 @Inherited
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@SuppressWarnings(value = {"BadAnnotationImplementation", "ImmutableAnnotationChecker"})
 public @interface Config {
   /**
    * TODO(vnayar): Create named constants for default values instead of magic numbers.

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ShadowProviderGenerator.java
Patch:
@@ -147,6 +147,7 @@ void generate(PrintWriter writer) {
       writer.println();
     }
 
+    writer.println("  @Override");
     writer.println("  public void reset() {");
     for (Map.Entry<TypeElement, ExecutableElement> entry : model.getResetters().entrySet()) {
       Implements annotation = entry.getKey().getAnnotation(Implements.class);

File: processor/src/test/resources/org/robolectric/Robolectric_Anything.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_ClassNameOnly.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowClassNameOnly shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowClassNameOnly.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_EmptyProvidedPackageNames.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -34,7 +34,8 @@ public static ShadowDummy shadowOf(Dummy actual) {
   public static ShadowOuterDummy2 shadowOf(OuterDummy2 actual) {
     return (ShadowOuterDummy2) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
     ShadowPrivate.resetMethod();

File: processor/src/test/resources/org/robolectric/Robolectric_InnerClassCollision.java
Patch:
@@ -51,7 +51,8 @@ public static ShadowUniqueDummy.ShadowInnerDummy shadowOf(UniqueDummy.InnerDummy
   public static ShadowUniqueInnerDummy shadowOf(UniqueInnerDummy actual) {
     return (ShadowUniqueInnerDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: processor/src/test/resources/org/robolectric/Robolectric_NoExcludedTypes.java
Patch:
@@ -18,6 +18,7 @@ public class Shadows implements ShadowProvider {
     SHADOW_MAP.put("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowExcludedFromAndroidSdk");
   }
 
+  @Override
   public void reset() {
   }
 

File: processor/src/test/resources/org/robolectric/Robolectric_Parameterized.java
Patch:
@@ -28,6 +28,7 @@ public static <T, N extends Number> ShadowParameterizedDummy<T,N> shadowOf(Param
     return (ShadowParameterizedDummy<T,N>) Shadow.extract(actual);
   }
 
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
@@ -21,14 +20,14 @@ public BroadcastReceiverData(
     super(attributes.get(NAME), metaData);
     this.attributes = attributes;
     this.actions = new ArrayList<>();
-    this.intentFilters = new LinkedList<>(intentFilters);
+    this.intentFilters = new ArrayList<>(intentFilters);
   }
 
   public BroadcastReceiverData(String className, MetaData metaData) {
     super(className, metaData);
     this.actions = new ArrayList<>();
     this.attributes = new HashMap<>();
-    intentFilters = new LinkedList<>();
+    intentFilters = new ArrayList<>();
   }
 
   public List<String> getActions() {

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -585,7 +585,7 @@ public final String regionString() {
 
   public final String scriptString() {
     if (localeScript[0] != '\0') {
-      return new String(localeScript);
+      return new String(localeScript, Charsets.UTF_8);
     } else {
       return null;
     }
@@ -1892,7 +1892,7 @@ private int version() {
    };
    */
   int locale() {
-    return (language[0] & 0xff << 24) | (language[1] * 0xff << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
+    return ((language[0] & 0xff) << 24) | ((language[1] & 0xff) << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
   }
 
   private boolean isLocaleBetterThan(ResTable_config o, ResTable_config requested) {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -410,7 +410,7 @@ Properties getBuildSystemApiProperties() {
       try {
         resourceAsStream.close();
       } catch (IOException e) {
-        throw new RuntimeException("couldn't close test_config.properties", e);
+        // ignore
       }
     }
   }
@@ -507,6 +507,7 @@ private PackageResourceTable getAppResourceTable(final AndroidManifest appManife
     return resourceTable;
   }
 
+  @SuppressWarnings(value = {"ImmutableAnnotationChecker", "BadAnnotationImplementation"})
   private static class MethodPassThrough extends Config.Implementation {
     private final FrameworkMethod method;
 

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -78,7 +78,7 @@ public void startVisibleFragment_shouldAttachFragmentToActivityWithSpecifiedActi
     assertThat(fragment.getActivity()).isInstanceOf(LoginActivity.class);
   }
 
-  private static class LoginFragment extends Fragment {
+  public static class LoginFragment extends Fragment {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
       return inflater.inflate(R.layout.fragment_contents, container, false);

File: robolectric/src/test/java/org/robolectric/android/PreferenceIntegrationTest.java
Patch:
@@ -137,8 +137,8 @@ private PreferenceScreen inflatePreferenceActivity() {
     return activity.getPreferenceScreen();
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);

File: robolectric/src/test/java/org/robolectric/android/controller/FragmentControllerTest.java
Patch:
@@ -160,7 +160,7 @@ public void visible() {
     assertThat(fragment.isVisible()).isTrue();
   }
 
-  private static class LoginFragment extends Fragment {
+  public static class LoginFragment extends Fragment {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
       return inflater.inflate(R.layout.fragment_contents, container, false);

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -3,8 +3,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
@@ -52,7 +52,7 @@ public void escape_shouldSupport() {
 
   @Test
   public void testInvalidCodePoints() {
-    List<String> tests = new LinkedList<>();
+    List<String> tests = new ArrayList<>();
     tests.add("\\u");
     tests.add("\\u0");
     tests.add("\\u00");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -627,7 +627,7 @@ public void onRestoreInstanceState(Bundle savedInstanceState) {
     @Override
     public Object onRetainNonConfigurationInstance() {
       transcript.add("onRetainNonConfigurationInstance");
-      return new Integer(5);
+      return 5;
     }
 
     @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityThreadTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 import android.app.ActivityThread;
 import android.content.res.CompatibilityInfo;
@@ -38,6 +39,7 @@ public void getPackageInfo_throwsRemoteExceptionWhenNotFound() throws Exception
     try {
       activityThread.getPackageInfo(
           "com.unknownpackage.ab", CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO, 0);
+      fail("should have thrown");
     } catch (RuntimeException e) {
       assertThat(e).hasCauseInstanceOf(RemoteException.class);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogPreferenceTest.java
Patch:
@@ -32,6 +32,7 @@ private PreferenceScreen inflatePreferenceActivity() {
     return activity.getPreferenceScreen();
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -736,6 +736,7 @@ public ExceptionTester(Class<? extends Throwable> eClass) {
     }
 
     @Override
+    @SuppressWarnings("MissingFail")
     public void test(MethodSpec method) {
       final State state = shadowMediaPlayer.getState();
       boolean success = false;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTest.java
Patch:
@@ -52,6 +52,7 @@ public void shouldFindPreferencesWithStringResourceKeyValue() {
     assertNotNull(activity.findPreference("preference_resource_key_value"));
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -45,7 +45,6 @@ public void preferenceAddedWithCorrectDetails() {
   }
 
   private static class TestPreferenceActivity extends Activity {
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
@@ -56,8 +55,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
   }
 
-  private static class TestPreferenceFragment extends PreferenceFragment {
-
+  public static class TestPreferenceFragment extends PreferenceFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -360,11 +360,12 @@ public Object createShadowFor(Object instance) {
 
     try {
       Class<?> shadowClass = loadClass(shadowClassName, instance.getClass().getClassLoader());
-      Object shadow = shadowClass.newInstance();
+      Object shadow = shadowClass.getDeclaredConstructor().newInstance();
       injectRealObjectOn(shadow, shadowClass, instance);
 
       return shadow;
-    } catch (InstantiationException | IllegalAccessException e) {
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException
+        | InvocationTargetException e) {
       throw new RuntimeException("Could not instantiate shadow, missing public empty constructor.", e);
     }
   }

File: shadowapi/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -315,8 +315,9 @@ public static Class<?> loadClass(ClassLoader classLoader, String fullyQualifiedC
    */
   public static <T> T newInstance(Class<T> cl) {
     try {
-      return cl.newInstance();
-    } catch (InstantiationException | IllegalAccessException e) {
+      return cl.getDeclaredConstructor().newInstance();
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException
+        | InvocationTargetException e) {
       throw new RuntimeException(e);
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -502,7 +501,7 @@ public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(
     return start(new BaseRoboAccountManagerFuture<Account[]>(callback, handler) {
       @Override
       public Account[] doWork() throws OperationCanceledException, IOException, AuthenticatorException {
-        List<Account> result = new LinkedList<>();
+        List<Account> result = new ArrayList<>();
 
         Account[] accountsByType = getAccountsByType(type);
         for (Account account : accountsByType) {
@@ -523,7 +522,7 @@ private <T extends BaseRoboAccountManagerFuture> T start(T future) {
 
   @Implementation(minSdk = JELLY_BEAN_MR2)
   public Account[] getAccountsByTypeForPackage (String type, String packageName) {
-    List<Account> result = new LinkedList<>();
+    List<Account> result = new ArrayList<>();
 
     Account[] accountsByType = getAccountsByType(type);
     for (Account account : accountsByType) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioEffect.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import android.media.audiofx.AudioEffect;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -10,7 +10,7 @@
 @Implements(AudioEffect.class)
 public class ShadowAudioEffect {
 
-  private static List<AudioEffect.Descriptor> DESCRIPTORS = new LinkedList<>();
+  private static List<AudioEffect.Descriptor> DESCRIPTORS = new ArrayList<>();
 
   public static void addEffect(AudioEffect.Descriptor descriptor) {
     DESCRIPTORS.add(descriptor);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDateIntervalFormat.java
Patch:
@@ -29,6 +29,7 @@ public static void destroyDateIntervalFormat(long address) {
   }
 
   @Implementation
+  @SuppressWarnings("JdkObsolete")
   public static String formatDateInterval(long address, long fromDate, long toDate) {
     StringBuffer buffer = new StringBuffer();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -10,8 +10,8 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import org.robolectric.RuntimeEnvironment;
@@ -27,7 +27,7 @@ public class ShadowEnvironment {
   private static final Map<File, Boolean> STORAGE_REMOVABLE = new HashMap<>();
   private static boolean sIsExternalStorageEmulated;
   private static Path tmpExternalFilesDirBase;
-  private static final List<File> externalDirs = new LinkedList<>();
+  private static final List<File> externalDirs = new ArrayList<>();
   private static Map<Path, String> storageState = new HashMap<>();
 
   static Path EXTERNAL_CACHE_DIR;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -477,7 +477,7 @@ public Collection<String> getProvidersForListener(LocationListener listener) {
     return providers;
   }
 
-  final private class LocationProviderEntry implements Map.Entry<Boolean, List<Criteria>> {
+  final private static class LocationProviderEntry implements Map.Entry<Boolean, List<Criteria>> {
     private Boolean enabled;
     private List<Criteria> criteria;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -28,6 +28,7 @@
  * @see ShadowMessageQueue
  */
 @Implements(Looper.class)
+@SuppressWarnings("SynchronizeOnNonFinalField")
 public class ShadowLooper {
   // Replaced SoftThreadLocal with a WeakHashMap, because ThreadLocal make it impossible to access their contents from other
   // threads, but we need to be able to access the loopers for all threads so that we can shut them down when resetThreadLoopers()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -493,6 +493,7 @@ public boolean equals(Object o) {
       return this == o || (o instanceof SimpleMatrix && equals((SimpleMatrix) o));
     }
 
+    @SuppressWarnings("NonOverridingEquals")
     public boolean equals(SimpleMatrix matrix) {
       if (matrix == null) {
         return false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -107,6 +107,7 @@ public void reset() {
   }
 
   @Implementation
+  @SuppressWarnings("SynchronizeOnNonFinalField")
   public boolean enqueueMessage(final Message msg, long when) {
     final boolean retval = directlyOn(realQueue, MessageQueue.class, "enqueueMessage", from(Message.class, msg), from(long.class, when));
     if (retval) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -9,8 +9,7 @@
 
 @Implements(value = NumberPicker.class)
 public class ShadowNumberPicker extends ShadowLinearLayout {
-  @RealObject
-  private NumberPicker realObject;
+  @RealObject private NumberPicker realNumberPicker;
   private int value;
   private int minValue;
   private int maxValue;
@@ -70,7 +69,7 @@ public boolean getWrapSelectorWheel() {
 
   @Implementation
   public void setOnValueChangedListener(NumberPicker.OnValueChangeListener listener) {
-    directlyOn(realObject, NumberPicker.class).setOnValueChangedListener(listener);
+    directlyOn(realNumberPicker, NumberPicker.class).setOnValueChangedListener(listener);
     this.onValueChangeListener = listener;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -71,7 +71,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -86,7 +85,7 @@
 public class ShadowPackageManager {
 
   Map<String, Boolean> permissionRationaleMap = new HashMap<>();
-  List<FeatureInfo> systemAvailableFeatures = new LinkedList<>();
+  List<FeatureInfo> systemAvailableFeatures = new ArrayList<>();
   final Map<String, PackageInfo> packageInfos = new LinkedHashMap<>();
   final Map<String, Package> packages = new LinkedHashMap<>();
   private Map<String, PackageInfo> packageArchiveInfo = new HashMap<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -82,6 +82,7 @@ public static PendingIntent getService(
   }
 
   @Implementation
+  @SuppressWarnings("ReferenceEquality")
   public void cancel() {
     for (Iterator<PendingIntent> i = createdIntents.iterator(); i.hasNext(); ) {
       PendingIntent pendingIntent = i.next();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVectorDrawable.java
Patch:
@@ -76,7 +76,7 @@ protected Object clone() {
   }
 
   private static Path getPath(long pathPtr) {
-    return get(pathPtr);
+    return get(pathPtr, Path.class);
   }
 
 
@@ -168,7 +168,7 @@ protected Object clone() {
   }
 
   private static Group getGroup(long groupPtr) {
-    return get(groupPtr);
+    return get(groupPtr, Group.class);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualRefBasePtr.java
Patch:
@@ -17,8 +17,8 @@ synchronized public static <T> long put(T object) {
     return nativePtr;
   }
 
-  synchronized public static <T> T get(long nativePtr) {
-    return (T) POINTERS.get(nativePtr).nativeThing;
+  synchronized public static <T> T get(long nativePtr, Class<T> clazz) {
+    return clazz.cast(POINTERS.get(nativePtr).nativeThing);
   }
 
   @Implementation

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowPagerAdapterTest.java
Patch:
@@ -38,7 +38,7 @@ public boolean isViewFromObject(View view, Object object) {
 
   }
 
-  private class TestDataSetObserver extends DataSetObserver {
+  private static class TestDataSetObserver extends DataSetObserver {
     boolean onChangedWasCalled;
 
     @Override

File: robolectric/src/main/java/org/robolectric/internal/ManifestFactory.java
Patch:
@@ -1,9 +1,6 @@
 package org.robolectric.internal;
 
-import java.util.ArrayList;
-import java.util.List;
 import org.robolectric.annotation.Config;
-import org.robolectric.manifest.AndroidManifest;
 
 /**
  * A factory that detects what build system is in use and provides a ManifestFactory that can

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.InputStream;
 import org.assertj.core.data.Offset;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;

File: processor/src/test/resources/org/robolectric/Robolectric_Anything.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_ClassNameOnly.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowClassNameOnly shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowClassNameOnly.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_EmptyProvidedPackageNames.java
Patch:
@@ -27,7 +27,8 @@ public static ShadowAnything shadowOf(AnyObject actual) {
   public static ShadowDummy shadowOf(Dummy actual) {
     return (ShadowDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowAnything.anotherResetter();
     ShadowDummy.resetter_method();

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -34,7 +34,8 @@ public static ShadowDummy shadowOf(Dummy actual) {
   public static ShadowOuterDummy2 shadowOf(OuterDummy2 actual) {
     return (ShadowOuterDummy2) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
     ShadowPrivate.resetMethod();

File: processor/src/test/resources/org/robolectric/Robolectric_InnerClassCollision.java
Patch:
@@ -51,7 +51,8 @@ public static ShadowUniqueDummy.ShadowInnerDummy shadowOf(UniqueDummy.InnerDummy
   public static ShadowUniqueInnerDummy shadowOf(UniqueInnerDummy actual) {
     return (ShadowUniqueInnerDummy) Shadow.extract(actual);
   }
-  
+
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: processor/src/test/resources/org/robolectric/Robolectric_NoExcludedTypes.java
Patch:
@@ -18,6 +18,7 @@ public class Shadows implements ShadowProvider {
     SHADOW_MAP.put("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowExcludedFromAndroidSdk");
   }
 
+  @Override
   public void reset() {
   }
 

File: processor/src/test/resources/org/robolectric/Robolectric_Parameterized.java
Patch:
@@ -28,6 +28,7 @@ public static <T, N extends Number> ShadowParameterizedDummy<T,N> shadowOf(Param
     return (ShadowParameterizedDummy<T,N>) Shadow.extract(actual);
   }
 
+  @Override
   public void reset() {
     ShadowDummy.resetter_method();
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderOperation.java
Patch:
@@ -21,7 +21,7 @@ public class ShadowContentProviderOperation {
 
   @HiddenApi @Implementation
   public int getType() {
-    return getFieldReflectively("mType", int.class);
+    return getFieldReflectively("mType", Integer.class);
   }
 
   public String getSelection() {

File: resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.internal.dependency;
 
-import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.robolectric.R.layout;
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -35,6 +34,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.R.layout;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.CustomStateView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -199,7 +199,7 @@ public void testBuilderWithItemArrayViaResourceId() throws Exception {
     ShadowAlertDialog shadowAlertDialog = shadowOf(alert);
     assertThat(shadowAlertDialog.getTitle().toString()).isEqualTo("title");
     assertThat(shadowAlertDialog.getItems().length).isEqualTo(2);
-    assertEquals(shadowAlertDialog.getItems()[0], "Aloha");
+    assertThat(shadowAlertDialog.getItems()[0]).isEqualTo("Aloha");
     assertThat(shadowOf(ShadowAlertDialog.getLatestAlertDialog())).isSameAs(shadowAlertDialog);
     assertThat(ShadowAlertDialog.getLatestAlertDialog()).isSameAs(alert);
   }
@@ -224,8 +224,8 @@ public void onClick(DialogInterface dialog, int item) {
 
     assertTrue(alert.isShowing());
     ShadowAlertDialog shadowAlertDialog = shadowOf(alert);
-    assertEquals(shadowAlertDialog.getAdapter().getCount(), 3);
-    assertEquals(shadowAlertDialog.getAdapter().getItem(0), 99);
+    assertThat(shadowAlertDialog.getAdapter().getCount()).isEqualTo(3);
+    assertThat(shadowAlertDialog.getAdapter().getItem(0)).isEqualTo(99);
   }
 
   @Test

File: shadowapi/src/test/java/org/robolectric/util/ReflectionHelpersTest.java
Patch:
@@ -296,7 +296,7 @@ private int returnNegativeNumber() {
 
   @SuppressWarnings("unused")
   private static class ExampleDescendant extends ExampleBase {
-    public static int DESCENDANT = 6;
+    public static final int DESCENDANT = 6;
 
     @SuppressWarnings("HidingField")
     protected int overridden;

File: resources/src/test/java/org/robolectric/res/android/ResTable_configTest.java
Patch:
@@ -3,7 +3,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
+@RunWith(JUnit4.class)
 public class ResTable_configTest {
 
   @Test

File: annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -21,6 +21,7 @@
 @Inherited
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@SuppressWarnings(value = {"BadAnnotationImplementation", "ImmutableAnnotationChecker"})
 public @interface Config {
   /**
    * TODO(vnayar): Create named constants for default values instead of magic numbers.

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ShadowProviderGenerator.java
Patch:
@@ -147,6 +147,7 @@ void generate(PrintWriter writer) {
       writer.println();
     }
 
+    writer.println("  @Override");
     writer.println("  public void reset() {");
     for (Map.Entry<TypeElement, ExecutableElement> entry : model.getResetters().entrySet()) {
       Implements annotation = entry.getKey().getAnnotation(Implements.class);

File: resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -21,14 +21,14 @@ public BroadcastReceiverData(
     super(attributes.get(NAME), metaData);
     this.attributes = attributes;
     this.actions = new ArrayList<>();
-    this.intentFilters = new LinkedList<>(intentFilters);
+    this.intentFilters = new ArrayList<>(intentFilters);
   }
 
   public BroadcastReceiverData(String className, MetaData metaData) {
     super(className, metaData);
     this.actions = new ArrayList<>();
     this.attributes = new HashMap<>();
-    intentFilters = new LinkedList<>();
+    intentFilters = new ArrayList<>();
   }
 
   public List<String> getActions() {

File: resources/src/main/java/org/robolectric/res/android/ConfigDescription.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.robolectric.res.android.Util.isTruthy;
 
+import com.google.common.base.Charsets;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import java.util.Arrays;
@@ -182,11 +183,11 @@ public void writeTo(ResTable_config out) {
       out.packRegion(region);
 
       Arrays.fill(out.localeScript, (byte) 0);
-      byte[] scriptBytes = script == null ? new byte[4] : script.getBytes();
+      byte[] scriptBytes = script == null ? new byte[4] : script.getBytes(Charsets.UTF_8);
       System.arraycopy(scriptBytes, 0, out.localeScript, 0, scriptBytes.length);
 
       Arrays.fill(out.localeVariant, (byte) 0);
-      byte[] variantBytes = variant == null ? new byte[8] : variant.getBytes();
+      byte[] variantBytes = variant == null ? new byte[8] : variant.getBytes(Charsets.UTF_8);
       System.arraycopy(variantBytes, 0, out.localeVariant, 0, variantBytes.length);
     }
   }

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -585,7 +585,7 @@ public final String regionString() {
 
   public final String scriptString() {
     if (localeScript[0] != '\0') {
-      return new String(localeScript);
+      return new String(localeScript, Charsets.UTF_8);
     } else {
       return null;
     }
@@ -1892,7 +1892,7 @@ private int version() {
    };
    */
   int locale() {
-    return (language[0] & 0xff << 24) | (language[1] * 0xff << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
+    return ((language[0] & 0xff) << 24) | ((language[1] & 0xff) << 16) | ((country[0] & 0xff) << 8) | (country[1] & 0xff);
   }
 
   private boolean isLocaleBetterThan(ResTable_config o, ResTable_config requested) {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -410,7 +410,7 @@ Properties getBuildSystemApiProperties() {
       try {
         resourceAsStream.close();
       } catch (IOException e) {
-        throw new RuntimeException("couldn't close test_config.properties", e);
+        // ignore
       }
     }
   }
@@ -507,6 +507,7 @@ private PackageResourceTable getAppResourceTable(final AndroidManifest appManife
     return resourceTable;
   }
 
+  @SuppressWarnings(value = {"ImmutableAnnotationChecker", "BadAnnotationImplementation"})
   private static class MethodPassThrough extends Config.Implementation {
     private final FrameworkMethod method;
 

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -78,7 +78,7 @@ public void startVisibleFragment_shouldAttachFragmentToActivityWithSpecifiedActi
     assertThat(fragment.getActivity()).isInstanceOf(LoginActivity.class);
   }
 
-  private static class LoginFragment extends Fragment {
+  public static class LoginFragment extends Fragment {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
       return inflater.inflate(R.layout.fragment_contents, container, false);

File: robolectric/src/test/java/org/robolectric/android/PreferenceIntegrationTest.java
Patch:
@@ -137,8 +137,8 @@ private PreferenceScreen inflatePreferenceActivity() {
     return activity.getPreferenceScreen();
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);

File: robolectric/src/test/java/org/robolectric/android/controller/FragmentControllerTest.java
Patch:
@@ -160,7 +160,7 @@ public void visible() {
     assertThat(fragment.isVisible()).isTrue();
   }
 
-  private static class LoginFragment extends Fragment {
+  public static class LoginFragment extends Fragment {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
       return inflater.inflate(R.layout.fragment_contents, container, false);

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -3,8 +3,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
@@ -52,7 +52,7 @@ public void escape_shouldSupport() {
 
   @Test
   public void testInvalidCodePoints() {
-    List<String> tests = new LinkedList<>();
+    List<String> tests = new ArrayList<>();
     tests.add("\\u");
     tests.add("\\u0");
     tests.add("\\u00");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -627,7 +627,7 @@ public void onRestoreInstanceState(Bundle savedInstanceState) {
     @Override
     public Object onRetainNonConfigurationInstance() {
       transcript.add("onRetainNonConfigurationInstance");
-      return new Integer(5);
+      return 5;
     }
 
     @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityThreadTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 import android.app.ActivityThread;
 import android.content.res.CompatibilityInfo;
@@ -38,6 +39,7 @@ public void getPackageInfo_throwsRemoteExceptionWhenNotFound() throws Exception
     try {
       activityThread.getPackageInfo(
           "com.unknownpackage.ab", CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO, 0);
+      fail("should have thrown");
     } catch (RuntimeException e) {
       assertThat(e).hasCauseInstanceOf(RemoteException.class);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -316,6 +316,7 @@ public void alertControllerShouldStoreCorrectIconIdFromBuilder() {
   private static class TestDialogOnClickListener implements DialogInterface.OnClickListener {
     private final ArrayList<String> transcript = new ArrayList<>();
 
+    @Override
     public void onClick(DialogInterface dialog, int item) {
       transcript.add("clicked on " + item);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogPreferenceTest.java
Patch:
@@ -32,6 +32,7 @@ private PreferenceScreen inflatePreferenceActivity() {
     return activity.getPreferenceScreen();
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -440,6 +440,7 @@ public void testConverterAcceptsEnumOrdinal() throws Exception {
 
   /////////////////////////
 
+  @SuppressWarnings("TypeParameterUnusedInFormals")
   private <T extends View> T inflate(int layoutResId) {
     return (T) LayoutInflater.from(context).inflate(layoutResId, null);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -736,6 +736,7 @@ public ExceptionTester(Class<? extends Throwable> eClass) {
     }
 
     @Override
+    @SuppressWarnings("MissingFail")
     public void test(MethodSpec method) {
       final State state = shadowMediaPlayer.getState();
       boolean success = false;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTest.java
Patch:
@@ -52,6 +52,7 @@ public void shouldFindPreferencesWithStringResourceKeyValue() {
     assertNotNull(activity.findPreference("preference_resource_key_value"));
   }
 
+  @SuppressWarnings("FragmentInjection")
   private static class TestPreferenceActivity extends PreferenceActivity {
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -45,7 +45,6 @@ public void preferenceAddedWithCorrectDetails() {
   }
 
   private static class TestPreferenceActivity extends Activity {
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
@@ -56,8 +55,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
   }
 
-  private static class TestPreferenceFragment extends PreferenceFragment {
-
+  public static class TestPreferenceFragment extends PreferenceFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -360,11 +360,12 @@ public Object createShadowFor(Object instance) {
 
     try {
       Class<?> shadowClass = loadClass(shadowClassName, instance.getClass().getClassLoader());
-      Object shadow = shadowClass.newInstance();
+      Object shadow = shadowClass.getDeclaredConstructor().newInstance();
       injectRealObjectOn(shadow, shadowClass, instance);
 
       return shadow;
-    } catch (InstantiationException | IllegalAccessException e) {
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException
+        | InvocationTargetException e) {
       throw new RuntimeException("Could not instantiate shadow, missing public empty constructor.", e);
     }
   }

File: shadowapi/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -315,8 +315,9 @@ public static Class<?> loadClass(ClassLoader classLoader, String fullyQualifiedC
    */
   public static <T> T newInstance(Class<T> cl) {
     try {
-      return cl.newInstance();
-    } catch (InstantiationException | IllegalAccessException e) {
+      return cl.getDeclaredConstructor().newInstance();
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException
+        | InvocationTargetException e) {
       throw new RuntimeException(e);
     }
   }

File: shadowapi/src/test/java/org/robolectric/util/ReflectionHelpersTest.java
Patch:
@@ -298,6 +298,7 @@ private int returnNegativeNumber() {
   private static class ExampleDescendant extends ExampleBase {
     public static int DESCENDANT = 6;
 
+    @SuppressWarnings("HidingField")
     protected int overridden;
 
     private int returnNumber() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -502,7 +501,7 @@ public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(
     return start(new BaseRoboAccountManagerFuture<Account[]>(callback, handler) {
       @Override
       public Account[] doWork() throws OperationCanceledException, IOException, AuthenticatorException {
-        List<Account> result = new LinkedList<>();
+        List<Account> result = new ArrayList<>();
 
         Account[] accountsByType = getAccountsByType(type);
         for (Account account : accountsByType) {
@@ -523,7 +522,7 @@ private <T extends BaseRoboAccountManagerFuture> T start(T future) {
 
   @Implementation(minSdk = JELLY_BEAN_MR2)
   public Account[] getAccountsByTypeForPackage (String type, String packageName) {
-    List<Account> result = new LinkedList<>();
+    List<Account> result = new ArrayList<>();
 
     Account[] accountsByType = getAccountsByType(type);
     for (Account account : accountsByType) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAudioEffect.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import android.media.audiofx.AudioEffect;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -10,7 +10,7 @@
 @Implements(AudioEffect.class)
 public class ShadowAudioEffect {
 
-  private static List<AudioEffect.Descriptor> DESCRIPTORS = new LinkedList<>();
+  private static List<AudioEffect.Descriptor> DESCRIPTORS = new ArrayList<>();
 
   public static void addEffect(AudioEffect.Descriptor descriptor) {
     DESCRIPTORS.add(descriptor);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDateIntervalFormat.java
Patch:
@@ -29,6 +29,7 @@ public static void destroyDateIntervalFormat(long address) {
   }
 
   @Implementation
+  @SuppressWarnings("JdkObsolete")
   public static String formatDateInterval(long address, long fromDate, long toDate) {
     StringBuffer buffer = new StringBuffer();
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -10,8 +10,8 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import org.robolectric.RuntimeEnvironment;
@@ -27,7 +27,7 @@ public class ShadowEnvironment {
   private static final Map<File, Boolean> STORAGE_REMOVABLE = new HashMap<>();
   private static boolean sIsExternalStorageEmulated;
   private static Path tmpExternalFilesDirBase;
-  private static final List<File> externalDirs = new LinkedList<>();
+  private static final List<File> externalDirs = new ArrayList<>();
   private static Map<Path, String> storageState = new HashMap<>();
 
   static Path EXTERNAL_CACHE_DIR;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -477,7 +477,7 @@ public Collection<String> getProvidersForListener(LocationListener listener) {
     return providers;
   }
 
-  final private class LocationProviderEntry implements Map.Entry<Boolean, List<Criteria>> {
+  final private static class LocationProviderEntry implements Map.Entry<Boolean, List<Criteria>> {
     private Boolean enabled;
     private List<Criteria> criteria;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -28,6 +28,7 @@
  * @see ShadowMessageQueue
  */
 @Implements(Looper.class)
+@SuppressWarnings("SynchronizeOnNonFinalField")
 public class ShadowLooper {
   // Replaced SoftThreadLocal with a WeakHashMap, because ThreadLocal make it impossible to access their contents from other
   // threads, but we need to be able to access the loopers for all threads so that we can shut them down when resetThreadLoopers()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -493,6 +493,7 @@ public boolean equals(Object o) {
       return this == o || (o instanceof SimpleMatrix && equals((SimpleMatrix) o));
     }
 
+    @SuppressWarnings("NonOverridingEquals")
     public boolean equals(SimpleMatrix matrix) {
       if (matrix == null) {
         return false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessageQueue.java
Patch:
@@ -107,6 +107,7 @@ public void reset() {
   }
 
   @Implementation
+  @SuppressWarnings("SynchronizeOnNonFinalField")
   public boolean enqueueMessage(final Message msg, long when) {
     final boolean retval = directlyOn(realQueue, MessageQueue.class, "enqueueMessage", from(Message.class, msg), from(long.class, when));
     if (retval) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -9,8 +9,7 @@
 
 @Implements(value = NumberPicker.class)
 public class ShadowNumberPicker extends ShadowLinearLayout {
-  @RealObject
-  private NumberPicker realObject;
+  @RealObject private NumberPicker realNumberPicker;
   private int value;
   private int minValue;
   private int maxValue;
@@ -70,7 +69,7 @@ public boolean getWrapSelectorWheel() {
 
   @Implementation
   public void setOnValueChangedListener(NumberPicker.OnValueChangeListener listener) {
-    directlyOn(realObject, NumberPicker.class).setOnValueChangedListener(listener);
+    directlyOn(realNumberPicker, NumberPicker.class).setOnValueChangedListener(listener);
     this.onValueChangeListener = listener;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -71,7 +71,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -86,7 +85,7 @@
 public class ShadowPackageManager {
 
   Map<String, Boolean> permissionRationaleMap = new HashMap<>();
-  List<FeatureInfo> systemAvailableFeatures = new LinkedList<>();
+  List<FeatureInfo> systemAvailableFeatures = new ArrayList<>();
   final Map<String, PackageInfo> packageInfos = new LinkedHashMap<>();
   final Map<String, Package> packages = new LinkedHashMap<>();
   private Map<String, PackageInfo> packageArchiveInfo = new HashMap<>();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -82,6 +82,7 @@ public static PendingIntent getService(
   }
 
   @Implementation
+  @SuppressWarnings("ReferenceEquality")
   public void cancel() {
     for (Iterator<PendingIntent> i = createdIntents.iterator(); i.hasNext(); ) {
       PendingIntent pendingIntent = i.next();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVectorDrawable.java
Patch:
@@ -76,7 +76,7 @@ protected Object clone() {
   }
 
   private static Path getPath(long pathPtr) {
-    return get(pathPtr);
+    return get(pathPtr, Path.class);
   }
 
 
@@ -168,7 +168,7 @@ protected Object clone() {
   }
 
   private static Group getGroup(long groupPtr) {
-    return get(groupPtr);
+    return get(groupPtr, Group.class);
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVirtualRefBasePtr.java
Patch:
@@ -17,8 +17,8 @@ synchronized public static <T> long put(T object) {
     return nativePtr;
   }
 
-  synchronized public static <T> T get(long nativePtr) {
-    return (T) POINTERS.get(nativePtr).nativeThing;
+  synchronized public static <T> T get(long nativePtr, Class<T> clazz) {
+    return clazz.cast(POINTERS.get(nativePtr).nativeThing);
   }
 
   @Implementation

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowPagerAdapterTest.java
Patch:
@@ -38,7 +38,7 @@ public boolean isViewFromObject(View view, Object object) {
 
   }
 
-  private class TestDataSetObserver extends DataSetObserver {
+  private static class TestDataSetObserver extends DataSetObserver {
     boolean onChangedWasCalled;
 
     @Override

File: robolectric/src/test/java/org/robolectric/android/ShadowingTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.Toast;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowingTest {

File: robolectric/src/test/java/org/robolectric/android/controller/BackupAgentControllerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class BackupAgentControllerTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboCursorTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboMenuItemTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboVibratorTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboVibratorTest {

File: robolectric/src/test/java/org/robolectric/internal/BuckManifestFactoryTest.java
Patch:
@@ -2,11 +2,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.io.File;
-import java.util.List;
-
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
+import java.io.File;
+import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;

File: robolectric/src/test/java/org/robolectric/internal/GradleManifestFactoryTest.java
Patch:
@@ -2,11 +2,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.io.File;
-import java.io.IOException;
-
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
+import java.io.File;
+import java.io.IOException;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 abstract public class AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -7,7 +7,6 @@
 import android.database.sqlite.SQLiteCursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
-import java.nio.charset.StandardCharsets;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TempDirectory;
 import org.robolectric.util.TestUtil;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteOpenHelperTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteStatementTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSeekBarTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.AbsSeekBar;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.Gallery;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsoluteLayoutTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.widget.AbsoluteLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsoluteLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbstractCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityEventTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationUtilsTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAnimationUtilsTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowArrayAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskLoaderTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAsyncTaskLoaderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.media.AudioManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAudioManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAutoCompleteTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBatteryManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapFactoryTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.res.FsFile;
 import org.robolectric.util.TestUtil;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothManagerTest.java
Patch:
@@ -8,8 +8,8 @@
 import android.content.Context;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCameraTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.widget.CheckBox;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckBoxTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckedTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowClipboardManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowClipboardManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 /**
  * Tests for {@link ShadowContentProviderOperation}.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -19,7 +19,6 @@
 import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
-import android.content.Context;
 import android.content.Intent;
 import android.content.OperationApplicationException;
 import android.content.PeriodicSync;
@@ -48,13 +47,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
-import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.fakes.BaseCursor;
-import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowContentResolverTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestApplication;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCountDownTimerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatePickerDialogTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Locale;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowDatePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.TimeZone;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowExpandableListViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowFrameLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowHandlerThreadTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIconTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowImageViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowInputMethodManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyCharacterMapTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.EditText;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowKeyCharacterMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayerDrawableTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayerDrawableTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutAnimationControllerTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutAnimationControllerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinearLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLinearLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.ListPopupWindow;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListPopupWindowTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.ListView;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListViewAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 import org.robolectric.RoboSettings;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMetadataRetrieverTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMediaMetadataRetrieverTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowMediaPlayer.InvalidStateBehavior;
 import org.robolectric.shadows.ShadowMediaPlayer.MediaEvent;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.webkit.MimeTypeMap;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMimeTypeMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkScoreManagerTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 /** ShadowNetworkScoreManagerTest tests {@link ShadowNetworkScoreManager}. */

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.net.Network;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNfcAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -3,9 +3,8 @@
 import android.os.Build;
 import org.junit.Before;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNumberPickerTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.NumberPicker;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNumberPickerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOverScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowOverScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowParcelFileDescriptorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPendingIntentTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowPopupMenuTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressDialogTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowProgressDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioButtonTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioButtonTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRatingBarTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRatingBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.RelativeLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResolveInfoTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowResolveInfoTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSeekBarTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSharedPreferencesTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSharedPreferencesTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShortcutManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 /** Unit tests for ShadowShortcutManager. */

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSimpleCursorAdapterTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.SimpleCursorAdapter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSimpleCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSmsManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSslErrorHandlerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.view.Window;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSurfaceViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabSpecTest.java
Patch:
@@ -9,14 +9,13 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 import android.widget.TabHost;
-import android.widget.TabHost.TabContentFactory;
 import android.widget.TextView;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTabSpecTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -44,8 +44,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.app.TimePickerDialog;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTimePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowToastTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowToastTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTouchDelegateTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTouchDelegateTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypedArrayTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.AttributeResource;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TestUtil;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.util.TimeUtils;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowVideoViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewAnimatorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewFlipperTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewFlipperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.app.WallpaperManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWallpaperManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebViewTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiP2pManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWifiP2pManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 

File: robolectric/src/test/java/org/robolectric/shadows/VelocityTrackerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class VelocityTrackerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewInnerTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewStubTest {

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.util.SQLiteLibraryLoader;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.util;
 
+import java.io.*;
 import org.junit.Test;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.R;
@@ -10,8 +11,6 @@
 import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourcePath;
 
-import java.io.*;
-
 public abstract class TestUtil {
   private static ResourcePath SYSTEM_RESOURCE_PATH;
   private static ResourcePath TEST_RESOURCE_PATH;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -1,4 +1,5 @@
 package org.robolectric.shadows;
+
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.app.ActivityManager;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbManager.java
Patch:
@@ -5,11 +5,9 @@
 import android.hardware.usb.UsbManager;
 import android.os.ParcelFileDescriptor;
 import com.google.common.base.Preconditions;
-
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.HashMap;
-
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;

File: resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -25,6 +25,7 @@ public class PackageResourceTable implements ResourceTable {
     this.packageName = packageName;
   }
 
+  @Override
   public String getPackageName() {
     return packageName;
   }

File: resources/src/main/java/org/robolectric/res/ResourceTable.java
Patch:
@@ -23,6 +23,8 @@ public interface ResourceTable {
 
   void receive(Visitor visitor);
 
+  String getPackageName();
+
   interface Visitor {
     void visit(ResName key, Iterable<TypedResource> values);
   }

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -1,15 +1,14 @@
 package org.robolectric.internal;
 
 import java.lang.reflect.Method;
-import org.robolectric.TestLifecycle;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.ResourceTable;
 
 public interface ParallelUniverseInterface {
   void resetStaticState(Config config);
 
-  void setUpApplicationState(Method method, TestLifecycle testLifecycle, AndroidManifest appManifest, Config config,
+  void setUpApplicationState(Method method, AndroidManifest appManifest, Config config,
                              ResourceTable compiletimeResourceTable, ResourceTable appResourceTable,
                              ResourceTable systemResourceTable);
 

File: robolectric/src/test/java/org/robolectric/android/controller/ContentProviderControllerTest.java
Patch:
@@ -18,10 +18,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 23)
 public class ContentProviderControllerTest {
   private final ContentProviderController<MyContentProvider> controller = Robolectric.buildContentProvider(MyContentProvider.class);
   private ContentResolver contentResolver;
@@ -55,7 +53,9 @@ public void shouldInitializeFromManifestProviderInfo() throws Exception {
   public void shouldRegisterWithContentResolver() throws Exception {
     controller.create().get();
 
-    ContentProviderClient client = contentResolver.acquireContentProviderClient("org.robolectric.authority2");
+    ContentProviderClient client =
+        contentResolver.acquireContentProviderClient(
+            "org.robolectric.my_content_provider_authority");
     client.query(Uri.parse("something"), new String[]{"title"}, "*", new String[]{}, "created");
     assertThat(controller.get().transcript).containsExactly("onCreate", "query for something");
   }

File: robolectric/src/test/java/org/robolectric/android/controller/IntentServiceControllerTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
@@ -53,7 +52,7 @@ public void onBindShouldSetIntentComponentWithCustomIntentWithoutComponentSet()
 
   @Test
   public void shouldSetIntentForGivenServiceInstance() throws Exception {
-    IntentServiceController<MyService> intentServiceController = IntentServiceController.of(new CoreShadowsAdapter(), new MyService(""), null).bind();
+    IntentServiceController<MyService> intentServiceController = IntentServiceController.of(new MyService(""), null).bind();
     assertThat(intentServiceController.get().boundIntent).isNotNull();
   }
 
@@ -177,4 +176,4 @@ private void runOnUiThread(Runnable action) {
       shadowOf(handler.getLooper()).getScheduler().post(action);
     }
   }
-}
\ No newline at end of file
+}

File: robolectric/src/test/java/org/robolectric/android/controller/ServiceControllerTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
@@ -55,7 +54,7 @@ public void onBindShouldSetIntentComponentWithCustomIntentWithoutComponentSet()
 
   @Test
   public void shouldSetIntentForGivenServiceInstance() throws Exception {
-    ServiceController<MyService> serviceController = ServiceController.of(new CoreShadowsAdapter(), new MyService(), null).bind();
+    ServiceController<MyService> serviceController = ServiceController.of(new MyService(), null).bind();
     assertThat(serviceController.get().boundIntent).isNotNull();
   }
 

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.model.InitializationError;
-import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.R;
 import org.robolectric.RoboSettings;
 import org.robolectric.RobolectricTestRunner;
@@ -73,7 +72,6 @@ private void setUpApplicationState(Config defaultConfig, AndroidManifest appMani
     Method method = getDummyMethodForTest();
     pu.setUpApplicationState(
         method,
-        new DefaultTestLifecycle(),
         appManifest,
         defaultConfig,
         sdkResourceProvider,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -25,14 +25,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -52,7 +52,6 @@ public void testShouldBeAbleToDisableTheKeyguardLock() throws Exception {
   }
 
   @Test
-  @Config(minSdk = M)
   public void isKeyguardSecure() {
     assertThat(manager.isKeyguardSecure()).isFalse();
 

File: shadows/framework/src/main/java/org/robolectric/android/controller/FragmentController.java
Patch:
@@ -5,6 +5,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.widget.LinearLayout;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 /**

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -155,7 +155,7 @@ private void registerBroadcastReceivers(AndroidManifest androidManifest) {
       for (String action : receiver.getActions()) {
         filter.addAction(action);
       }
-      String receiverClassName = replaceLastDotWith$IfInnerStaticClass(receiver.getClassName());
+      String receiverClassName = replaceLastDotWith$IfInnerStaticClass(receiver.getName());
       registerReceiver((BroadcastReceiver) newInstanceOf(receiverClassName), filter);
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -121,6 +121,7 @@ private void convertAndFill(AttributeResource attribute, TypedValue outValue, Re
 
     // short-circuit Android caching of loaded resources cuz our string positions don't remain stable...
     outValue.assetCookie = Converter.getNextStringCookie();
+    outValue.changingConfigurations = 0;
 
     // TODO: Handle resource and style references
     if (attribute.isStyleReference()) {
@@ -435,11 +436,11 @@ public final AssetFileDescriptor openNonAssetFd(int cookie, String fileName) thr
 
   @Implementation
   public final XmlResourceParser openXmlResourceParser(int cookie, String fileName) throws IOException {
-    XmlBlock xmlBlock = XmlBlock.create(Fs.fileFromPath(fileName), "fixme");
+    XmlBlock xmlBlock = XmlBlock.create(Fs.fileFromPath(fileName), resourceTable.getPackageName());
     if (xmlBlock == null) {
       throw new Resources.NotFoundException(fileName);
     }
-    return getXmlResourceParser(null, xmlBlock, "fixme");
+    return getXmlResourceParser(resourceTable, xmlBlock, resourceTable.getPackageName());
   }
 
   public XmlResourceParser loadXmlResourceParser(int resId, String type) throws Resources.NotFoundException {

File: robolectric/src/test/java/org/robolectric/android/ShadowingTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.Toast;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowingTest {

File: robolectric/src/test/java/org/robolectric/android/controller/BackupAgentControllerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class BackupAgentControllerTest {

File: robolectric/src/test/java/org/robolectric/android/controller/ContentProviderControllerTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboCursorTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboMenuItemTest {

File: robolectric/src/test/java/org/robolectric/fakes/RoboVibratorTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class RoboVibratorTest {

File: robolectric/src/test/java/org/robolectric/internal/BuckManifestFactoryTest.java
Patch:
@@ -2,11 +2,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.io.File;
-import java.util.List;
-
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
+import java.io.File;
+import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;

File: robolectric/src/test/java/org/robolectric/internal/GradleManifestFactoryTest.java
Patch:
@@ -2,11 +2,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.io.File;
-import java.io.IOException;
-
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
+import java.io.File;
+import java.io.IOException;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 abstract public class AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -7,7 +7,6 @@
 import android.database.sqlite.SQLiteCursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
-import java.nio.charset.StandardCharsets;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TempDirectory;
 import org.robolectric.util.TestUtil;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteOpenHelperTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class SQLiteStatementTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSeekBarTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.AbsSeekBar;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.Gallery;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsoluteLayoutTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.widget.AbsoluteLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbsoluteLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAbstractCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityEventTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityThreadTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowActivityThreadTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationUtilsTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAnimationUtilsTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -31,10 +31,10 @@
 import android.os.IBinder;
 import android.os.UserManager;
 import android.print.PrintManager;
-import android.view.accessibility.CaptioningManager;
 import android.telephony.SubscriptionManager;
 import android.view.Gravity;
 import android.view.accessibility.AccessibilityManager;
+import android.view.accessibility.CaptioningManager;
 import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 import com.google.common.base.Charsets;
@@ -47,9 +47,9 @@
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.fakes.RoboVibrator;
 import org.robolectric.manifest.AndroidManifest;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowArrayAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskLoaderTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAsyncTaskLoaderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.media.AudioManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAudioManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowAutoCompleteTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBatteryManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapFactoryTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.res.FsFile;
 import org.robolectric.util.TestUtil;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothManagerTest.java
Patch:
@@ -8,8 +8,8 @@
 import android.content.Context;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCameraTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.widget.CheckBox;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckBoxTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCheckedTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowClipboardManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowClipboardManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 /**
  * Tests for {@link ShadowContentProviderOperation}.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestApplication;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCountDownTimerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatePickerDialogTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Locale;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowDatePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.TimeZone;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowExpandableListViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowFrameLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowHandlerThreadTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIconTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowImageViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowInputMethodManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyCharacterMapTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.EditText;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowKeyCharacterMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayerDrawableTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayerDrawableTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutAnimationControllerTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutAnimationControllerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinearLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowLinearLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.ListPopupWindow;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListPopupWindowTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewAdapterViewBehaviorTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.widget.AdapterView;
 import android.widget.ListView;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowListViewAdapterViewBehaviorTest extends AdapterViewBehavior {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 import org.robolectric.RoboSettings;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMetadataRetrieverTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMediaMetadataRetrieverTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowMediaPlayer.InvalidStateBehavior;
 import org.robolectric.shadows.ShadowMediaPlayer.MediaEvent;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.webkit.MimeTypeMap;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowMimeTypeMapTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkScoreManagerTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 /** ShadowNetworkScoreManagerTest tests {@link ShadowNetworkScoreManager}. */

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.net.Network;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNfcAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -3,9 +3,8 @@
 import android.os.Build;
 import org.junit.Before;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNumberPickerTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.widget.NumberPicker;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowNumberPickerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOverScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowOverScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowParcelFileDescriptorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPendingIntentTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowPopupMenuTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressDialogTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowProgressDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioButtonTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioButtonTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRadioGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRatingBarTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowRatingBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -9,8 +9,8 @@
 import android.widget.RelativeLayout;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResolveInfoTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowResolveInfoTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSeekBarTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSharedPreferencesTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSharedPreferencesTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShortcutManagerTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 /** Unit tests for ShadowShortcutManager. */

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSimpleCursorAdapterTest.java
Patch:
@@ -7,8 +7,8 @@
 import android.widget.SimpleCursorAdapter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSimpleCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSmsManagerTest.java
Patch:
@@ -10,8 +10,8 @@
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSslErrorHandlerTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.shadow.api.Shadow;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.view.Window;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowSurfaceViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabSpecTest.java
Patch:
@@ -9,14 +9,13 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 import android.widget.TabHost;
-import android.widget.TabHost.TabContentFactory;
 import android.widget.TextView;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTabSpecTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -44,8 +44,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.shadow.api.Shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.app.TimePickerDialog;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTimePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowToastTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowToastTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTouchDelegateTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowTouchDelegateTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypedArrayTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.AttributeResource;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TestUtil;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.util.TimeUtils;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowVideoViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewAnimatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewAnimatorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewFlipperTest.java
Patch:
@@ -6,8 +6,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewFlipperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowViewGroupTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.app.WallpaperManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWallpaperManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebViewTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiP2pManagerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowWifiP2pManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 

File: robolectric/src/test/java/org/robolectric/shadows/VelocityTrackerTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Shadows;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 @RunWith(RobolectricTestRunner.class)
 public class VelocityTrackerTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewInnerTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewStubTest {

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.util.SQLiteLibraryLoader;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.util;
 
+import java.io.*;
 import org.junit.Test;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.R;
@@ -10,8 +11,6 @@
 import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourcePath;
 
-import java.io.*;
-
 public abstract class TestUtil {
   private static ResourcePath SYSTEM_RESOURCE_PATH;
   private static ResourcePath TEST_RESOURCE_PATH;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -1,4 +1,5 @@
 package org.robolectric.shadows;
+
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 
 import android.app.ActivityManager;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -8,7 +8,6 @@
 import android.util.TypedValue;
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.HiddenApi;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowUsbManager.java
Patch:
@@ -5,11 +5,9 @@
 import android.hardware.usb.UsbManager;
 import android.os.ParcelFileDescriptor;
 import com.google.common.base.Preconditions;
-
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.HashMap;
-
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;

File: resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -25,6 +25,7 @@ public class PackageResourceTable implements ResourceTable {
     this.packageName = packageName;
   }
 
+  @Override
   public String getPackageName() {
     return packageName;
   }

File: resources/src/main/java/org/robolectric/res/ResourceTable.java
Patch:
@@ -23,6 +23,8 @@ public interface ResourceTable {
 
   void receive(Visitor visitor);
 
+  String getPackageName();
+
   interface Visitor {
     void visit(ResName key, Iterable<TypedResource> values);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -25,14 +25,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -530,6 +530,7 @@ public void addAccount_noAuthenticatorDefined() throws Exception {
     } catch(AuthenticatorException e) {
       // Expected
     }
+    assertThat(future.isDone()).isTrue();
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -581,7 +581,7 @@ public boolean isCancelled() {
 
     @Override
     public boolean isDone() {
-      return result != null;
+      return result != null || exception != null || isCancelled();
     }
 
     @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -530,6 +530,7 @@ public void addAccount_noAuthenticatorDefined() throws Exception {
     } catch(AuthenticatorException e) {
       // Expected
     }
+    assertThat(future.isDone()).isTrue();
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -581,7 +581,7 @@ public boolean isCancelled() {
 
     @Override
     public boolean isDone() {
-      return result != null;
+      return result != null || exception != null || isCancelled();
     }
 
     @Override

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -152,6 +152,6 @@ public static void setWifiOn(boolean isOn) {
    * @param use24HourTimeFormat new status for the time setting
    */
   public static void set24HourTimeFormat(boolean use24HourTimeFormat) {
-    Settings.System.putInt(RuntimeEnvironment.application.getContentResolver(), Settings.System.TIME_12_24, use24HourTimeFormat ? 24 : 12);
+    Settings.System.putString(RuntimeEnvironment.application.getContentResolver(), Settings.System.TIME_12_24, use24HourTimeFormat ? "24" : "12");
   }
 }

File: robolectric/src/test/java/org/robolectric/android/BootstrapTest.java
Patch:
@@ -323,7 +323,7 @@ public void whenPrefixedWithPlus_applyQualifiers_shouldOverlayQualifiers() throw
         configuration, displayMetrics);
     String outQualifiers = ConfigurationV25.resourceQualifierString(configuration, displayMetrics);
 
-    assertThat(outQualifiers).startsWith("fr-ldltr-sw123dp-w321dp-h123dp-small");
+    assertThat(outQualifiers).startsWith("fr-ldltr-sw321dp-w321dp-h426dp-small");
   }
 
   @Test
@@ -332,7 +332,7 @@ public void whenAllPrefixedWithPlus_applyQualifiers_shouldOverlayQualifiers() th
         configuration, displayMetrics);
     String outQualifiers = ConfigurationV25.resourceQualifierString(configuration, displayMetrics);
 
-    assertThat(outQualifiers).startsWith("fr-ldltr-sw123dp-w321dp-h123dp-small")
+    assertThat(outQualifiers).startsWith("fr-ldltr-sw321dp-w321dp-h426dp-small")
         .contains("-xxhdpi-");
   }
 }
\ No newline at end of file

File: annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -533,7 +533,7 @@ public Builder overlay(Config overlayConfig) {
       String qualifiersOverlayValue = overlayConfig.qualifiers();
       if (qualifiersOverlayValue != null && !qualifiersOverlayValue.equals("")) {
         if (qualifiersOverlayValue.startsWith("+")) {
-          this.qualifiers = this.qualifiers + " " + qualifiersOverlayValue.substring(1);
+          this.qualifiers = this.qualifiers + " " + qualifiersOverlayValue;
         } else {
           this.qualifiers = qualifiersOverlayValue;
         }

File: robolectric/src/test/java/org/robolectric/ConfigTest.java
Patch:
@@ -109,7 +109,7 @@ public void shouldAppendQualifiersStartingWithPlus() throws Exception {
 
     config = overlay(config, new Config.Builder().setQualifiers("+w102dp").build());
     config = overlay(config, new Config.Builder().setQualifiers("+w103dp").build());
-    assertThat(config.qualifiers()).isEqualTo("w101dp w102dp w103dp");
+    assertThat(config.qualifiers()).isEqualTo("w101dp +w102dp +w103dp");
 
     config = overlay(config, new Config.Builder().setQualifiers("+w104dp").build());
     config = overlay(config, new Config.Builder().setQualifiers("w105dp").build());

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -28,14 +28,14 @@ public void setUp() throws Exception {
   @Config(sdk = 26)
   public void testDefaultQualifiers() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v26");
+        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
   }
 
   @Test
   @Config(qualifiers = "en", sdk = 26)
   public void testDefaultQualifiers_withoutRegion() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v26");
+        .isEqualTo("en-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v26");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/BootstrapTest.java
Patch:
@@ -3,7 +3,7 @@
 import static android.content.res.Configuration.KEYBOARDHIDDEN_SOFT;
 import static android.content.res.Configuration.KEYBOARDHIDDEN_YES;
 import static android.content.res.Configuration.KEYBOARD_12KEY;
-import static android.content.res.Configuration.KEYBOARD_QWERTY;
+import static android.content.res.Configuration.KEYBOARD_NOKEYS;
 import static android.content.res.Configuration.NAVIGATIONHIDDEN_YES;
 import static android.content.res.Configuration.NAVIGATION_DPAD;
 import static android.content.res.Configuration.NAVIGATION_NONAV;
@@ -138,7 +138,7 @@ public void applyQualifiers_shouldAddDefaults() {
 
     assertThat(outQualifiers)
         .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi" +
-            "-finger-keyssoft-qwerty-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
+            "-finger-keyssoft-nokeys-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
 
     assertThat(configuration.mcc).isEqualTo(0);
     assertThat(configuration.mnc).isEqualTo(0);
@@ -163,7 +163,7 @@ public void applyQualifiers_shouldAddDefaults() {
 
     assertThat(configuration.touchscreen).isEqualTo(TOUCHSCREEN_FINGER);
     assertThat(configuration.keyboardHidden).isEqualTo(KEYBOARDHIDDEN_SOFT);
-    assertThat(configuration.keyboard).isEqualTo(KEYBOARD_QWERTY);
+    assertThat(configuration.keyboard).isEqualTo(KEYBOARD_NOKEYS);
     assertThat(configuration.navigationHidden).isEqualTo(NAVIGATIONHIDDEN_YES);
     assertThat(configuration.navigation).isEqualTo(NAVIGATION_NONAV);
   }

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -46,7 +46,7 @@ public void checkForPollution2() throws Exception {
 
   private void checkForPollutionHelper() {
     assertThat(RuntimeEnvironment.getQualifiers())
-        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
+        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
 
     View view = LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.different_screen_sizes, null);
     TextView textView = view.findViewById(android.R.id.text1);

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -161,7 +161,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
     assertThat(RuntimeEnvironment.getQualifiers())
-        .contains("notlong-notround-land-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v" + Build.VERSION.SDK_INT);
+        .contains("notlong-notround-land-notnight-mdpi-finger-keyssoft-nokeys-navhidden-nonav-v" + Build.VERSION.SDK_INT);
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/android/DeviceConfig.java
Patch:
@@ -322,7 +322,7 @@ static void applyRules(Configuration configuration, DisplayMetrics displayMetric
     }
 
     if (configuration.keyboard == Configuration.KEYBOARD_UNDEFINED) {
-      configuration.keyboard = Configuration.KEYBOARD_QWERTY;
+      configuration.keyboard = Configuration.KEYBOARD_NOKEYS;
     }
 
     if (configuration.navigationHidden == Configuration.NAVIGATIONHIDDEN_UNDEFINED) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowViewRootImpl.java
Patch:
@@ -118,7 +118,7 @@ public void callDispatchResized() {
   }
 
   private Display getDisplay() {
-    if (Build.VERSION.SDK_INT > JELLY_BEAN_MR1) {
+    if (RuntimeEnvironment.getApiLevel() > JELLY_BEAN_MR1) {
       return realObject.getView().getDisplay();
     } else {
       WindowManager windowManager = (WindowManager) realObject.getView().getContext()

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManager.java
Patch:
@@ -42,8 +42,7 @@ public static void configureDefaultDisplay(Configuration configuration, DisplayM
       throw new IllegalStateException("this method should only be called by Robolectric");
     }
 
-    shadowDisplayManagerGlobal.addDisplay(createDisplayInfo(configuration,
-        displayMetrics));
+    shadowDisplayManagerGlobal.addDisplay(createDisplayInfo(configuration, displayMetrics));
   }
 
   private static DisplayInfo createDisplayInfo(Configuration configuration, DisplayMetrics displayMetrics) {

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -45,7 +45,8 @@ public void checkForPollution2() throws Exception {
   }
 
   private void checkForPollutionHelper() {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-rUS-ldltr-sw320dp-w320dp-normal-notlong-notround-port-notnight-mdpi-finger-v" + RuntimeEnvironment.getApiLevel());
+    assertThat(RuntimeEnvironment.getQualifiers())
+        .isEqualTo("en-rUS-ldltr-sw320dp-w320dp-h470dp-normal-notlong-notround-port-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v" + RuntimeEnvironment.getApiLevel());
 
     View view = LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.different_screen_sizes, null);
     TextView textView = view.findViewById(android.R.id.text1);

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -159,7 +159,8 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     String givenQualifiers = "large-land";
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
-    assertThat(RuntimeEnvironment.getQualifiers()).contains("notlong-notround-land-notnight-mdpi-finger-v" + Build.VERSION.SDK_INT);
+    assertThat(RuntimeEnvironment.getQualifiers())
+        .contains("notlong-notround-land-notnight-mdpi-finger-keyssoft-qwerty-navhidden-nonav-v" + Build.VERSION.SDK_INT);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -203,7 +203,7 @@ private static TypedResource<String> createStringTypedResource(String str, Strin
   private static ResTable_config from(String qualifiers) {
     ResTable_config config = new ResTable_config();
     if (!Strings.isNullOrEmpty(qualifiers) &&
-        !new ConfigDescription().parse(qualifiers, config, false)) {
+        !ConfigDescription.parse(qualifiers, config, false)) {
       throw new IllegalArgumentException("Invalid qualifiers \"" + qualifiers + "\"");
     }
     return config;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -50,6 +50,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
+import org.robolectric.android.DeviceConfig;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.AccessibilityChecks;
 import org.robolectric.annotation.Config;
@@ -914,7 +915,8 @@ public void usesDefaultGlobalVisibleRect() {
     assertThat(view.getGlobalVisibleRect(globalVisibleRect))
         .isTrue();
     assertThat(globalVisibleRect)
-        .isEqualTo(new Rect(0, 25, 480, 800));
+        .isEqualTo(new Rect(0, 25,
+            DeviceConfig.DEFAULT_SCREEN_SIZE.width, DeviceConfig.DEFAULT_SCREEN_SIZE.height));
   }
 
   public static class MyActivity extends Activity {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContextImpl.java
Patch:
@@ -167,7 +167,7 @@ public Object getSystemService(String name) {
             service = ReflectionHelpers.callConstructor(windowMgrImplClass,
                 ClassParameter.from(Context.class, realObject));
           } else {
-            Display display = newInstanceOf(Display.class);
+            Display display = ShadowDisplayManagerGlobal.getInstance().getRealDisplay(Display.DEFAULT_DISPLAY);
             service = ReflectionHelpers.callConstructor(windowMgrImplClass,
                 ClassParameter.from(Display.class, display));
           }

File: processor/src/main/java/org/robolectric/annotation/processing/generator/ShadowProviderGenerator.java
Patch:
@@ -82,7 +82,7 @@ void generate(PrintWriter writer) {
     writer.println("@SuppressWarnings({\"unchecked\",\"deprecation\"})");
     writer.println("public class " + GEN_CLASS + " implements ShadowProvider {");
 
-    final int shadowSize = model.getAllShadowTypes().size();
+    final int shadowSize = model.getAllShadowTypes().size() + model.getExtraShadowTypes().size();
     writer.println("  private static final Map<String, String> SHADOW_MAP = new HashMap<>(" + shadowSize + ");");
     writer.println();
 

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -8,7 +8,6 @@
 import org.robolectric.annotation.processing.shadows.ShadowDummy;
 import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2;
 import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerPackage;
-import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerPrivate;
 import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerProtected;
 import org.robolectric.annotation.processing.shadows.ShadowPrivate;
 import org.robolectric.internal.ShadowProvider;
@@ -23,9 +22,9 @@ public class Shadows implements ShadowProvider {
     SHADOW_MAP.put("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowDummy");
     SHADOW_MAP.put("com.example.objects.OuterDummy2", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2");
     SHADOW_MAP.put("com.example.objects.OuterDummy2.InnerPackage", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPackage");
-    SHADOW_MAP.put("com.example.objects.OuterDummy2.InnerPrivate", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPrivate");
     SHADOW_MAP.put("com.example.objects.OuterDummy2.InnerProtected", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerProtected");
     SHADOW_MAP.put("com.example.objects.Private", "org.robolectric.annotation.processing.shadows.ShadowPrivate");
+    SHADOW_MAP.put("com.example.objects.OuterDummy2.InnerPrivate", "org.robolectric.annotation.processing.shadows.ShadowOuterDummy2$ShadowInnerPrivate");
   }
 
   public static ShadowDummy shadowOf(Dummy actual) {

File: processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowOuterDummy.java
Patch:
@@ -7,6 +7,6 @@
 public class ShadowOuterDummy {
 
   @Implements(OuterDummy.InnerDummy.class)
-  public class ShadowInnerDummy {
+  public static class ShadowInnerDummy {
   }
 }

File: processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowUniqueDummy.java
Patch:
@@ -7,10 +7,10 @@
 public class ShadowUniqueDummy {
 
   @Implements(UniqueDummy.InnerDummy.class)
-  public class ShadowInnerDummy {
+  public static class ShadowInnerDummy {
   }
   
   @Implements(UniqueDummy.UniqueInnerDummy.class)
-  public class ShadowUniqueInnerDummy {
+  public static class ShadowUniqueInnerDummy {
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -176,8 +176,7 @@ public static List<LogItem> getLogsForTag(String tag) {
   }
 
   /**
-   * Clear any accummulated logs
-   *
+   * Clear all accummulated logs.
    */
   public static void clear() {
     reset();

File: resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -25,6 +25,7 @@ public class PackageResourceTable implements ResourceTable {
     this.packageName = packageName;
   }
 
+  @Override
   public String getPackageName() {
     return packageName;
   }

File: resources/src/main/java/org/robolectric/res/ResourceTable.java
Patch:
@@ -23,6 +23,8 @@ public interface ResourceTable {
 
   void receive(Visitor visitor);
 
+  String getPackageName();
+
   interface Visitor {
     void visit(ResName key, Iterable<TypedResource> values);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -25,14 +25,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -136,7 +136,7 @@ private void registerBroadcastReceivers(AndroidManifest androidManifest) {
       for (String action : receiver.getActions()) {
         filter.addAction(action);
       }
-      String receiverClassName = replaceLastDotWith$IfInnerStaticClass(receiver.getClassName());
+      String receiverClassName = replaceLastDotWith$IfInnerStaticClass(receiver.getName());
       registerReceiver((BroadcastReceiver) newInstanceOf(receiverClassName), filter);
     }
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -117,6 +117,7 @@ private void convertAndFill(AttributeResource attribute, TypedValue outValue, Re
 
     // short-circuit Android caching of loaded resources cuz our string positions don't remain stable...
     outValue.assetCookie = Converter.getNextStringCookie();
+    outValue.changingConfigurations = 0;
 
     // TODO: Handle resource and style references
     if (attribute.isStyleReference()) {
@@ -416,11 +417,11 @@ public final AssetFileDescriptor openNonAssetFd(int cookie, String fileName) thr
 
   @Implementation
   public final XmlResourceParser openXmlResourceParser(int cookie, String fileName) throws IOException {
-    XmlBlock xmlBlock = XmlBlock.create(Fs.fileFromPath(fileName), "fixme");
+    XmlBlock xmlBlock = XmlBlock.create(Fs.fileFromPath(fileName), resourceTable.getPackageName());
     if (xmlBlock == null) {
       throw new Resources.NotFoundException(fileName);
     }
-    return getXmlResourceParser(null, xmlBlock, "fixme");
+    return getXmlResourceParser(resourceTable, xmlBlock, resourceTable.getPackageName());
   }
 
   public XmlResourceParser loadXmlResourceParser(int resId, String type) throws Resources.NotFoundException {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -294,6 +294,7 @@ public static final class attr {
     public static final int offsetY = 0x7f0b0021;
     public static final int textStyle2 = 0x7f0b0022;
     public static final int textStyle3 = 0x7f0b0023;
+    public static final int multiformat = 0x7f0b0024;
   }
 
   public static final class menu {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -294,6 +294,7 @@ public static final class attr {
     public static final int offsetY = 0x7f0b0021;
     public static final int textStyle2 = 0x7f0b0022;
     public static final int textStyle3 = 0x7f0b0023;
+    public static final int multiformat = 0x7f0b0024;
   }
 
   public static final class menu {

File: resources/src/test/java/org/robolectric/res/StaxValueLoaderTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.robolectric.res.android.ResTable_config;
 
 @RunWith(JUnit4.class)
 public class StaxValueLoaderTest {
@@ -36,7 +37,7 @@ public void ignoresXliffTags() throws Exception {
         "<string name=\"preposition_for_date\">on <xliff:g id=\"date\" example=\"May 29\">%s</xliff:g></string>" +
         "</resources>");
 
-    assertThat(resourceTable.getValue(new ResName("pkg:string/preposition_for_date"), "").getData())
+    assertThat(resourceTable.getValue(new ResName("pkg:string/preposition_for_date"), new ResTable_config()).getData())
         .isEqualTo("on %s");
   }
 
@@ -50,7 +51,7 @@ public void ignoresBTags() throws Exception {
         "<item type=\"string\" name=\"sms_short_code_details\">This <b>may cause charges</b> on your mobile account.</item>" +
         "</resources>");
 
-    assertThat(resourceTable.getValue(new ResName("pkg:string/sms_short_code_details"), "").getData())
+    assertThat(resourceTable.getValue(new ResName("pkg:string/sms_short_code_details"), new ResTable_config()).getData())
         .isEqualTo("This may cause charges on your mobile account.");
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -152,6 +152,6 @@ public static void setWifiOn(boolean isOn) {
    * @param use24HourTimeFormat new status for the time setting
    */
   public static void set24HourTimeFormat(boolean use24HourTimeFormat) {
-    Settings.System.putInt(RuntimeEnvironment.application.getContentResolver(), Settings.System.TIME_12_24, use24HourTimeFormat ? 24 : 12);
+    Settings.System.putString(RuntimeEnvironment.application.getContentResolver(), Settings.System.TIME_12_24, use24HourTimeFormat ? "24" : "12");
   }
 }

File: resources/src/test/java/org/robolectric/res/QualifiersTest.java
Patch:
@@ -19,7 +19,7 @@ public void testQualifiers() throws Exception {
   public void testWhenQualifiersFailToParse() throws Exception {
     assertThatThrownBy(() -> configFrom("values-unknown-v23"))
         .isInstanceOf(IllegalArgumentException.class)
-        .hasMessageContaining("failed to parse qualifiers 'values-unknown-v23");
+        .hasMessageContaining("failed to parse qualifiers 'unknown-v23");
   }
 
   private String configFrom(String path) {

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -45,7 +45,7 @@ public void checkForPollution2() throws Exception {
   }
 
   private void checkForPollutionHelper() {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("sw320dp-w320dp-normal-notlong-notround-port-notnight-mdpi-finger-v" + RuntimeEnvironment.getApiLevel());
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-rUS-ldltr-sw320dp-w320dp-normal-notlong-notround-port-notnight-mdpi-finger-v" + RuntimeEnvironment.getApiLevel());
 
     View view = LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.different_screen_sizes, null);
     TextView textView = view.findViewById(android.R.id.text1);

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -657,11 +657,11 @@ private String unpackLanguageOrRegion(byte[] value, int base) {
     }
   }
 
-  void packLanguage(final String language) {
+  public void packLanguage(final String language) {
     packLanguageOrRegion(language, (byte) 'a', this.language);
   }
 
-  void packRegion(final String region) {
+  public void packRegion(final String region) {
     packLanguageOrRegion(region, (byte) '0', this.country);
   }
 

File: resources/src/main/java/org/robolectric/res/android/ConfigDescription.java
Patch:
@@ -185,7 +185,7 @@ public void writeTo(ResTable_config out) {
       System.arraycopy(scriptBytes, 0, out.localeScript, 0, scriptBytes.length);
 
       Arrays.fill(out.localeVariant, (byte) 0);
-      byte[] variantBytes = variant == null ? new byte[2] : variant.getBytes();
+      byte[] variantBytes = variant == null ? new byte[8] : variant.getBytes();
       System.arraycopy(variantBytes, 0, out.localeVariant, 0, variantBytes.length);
     }
   }

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -507,7 +507,7 @@ public ResTable_config() {
     this.language = new byte[2];
     this.country = new byte[2];
     this.localeScript = new byte[LocaleData.SCRIPT_LENGTH];
-    this.localeVariant = new byte[2];
+    this.localeVariant = new byte[8];
   }
 
   public int minorVersion;

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -137,7 +137,7 @@ public void shouldMatchQualifiersPerAndroidSpec() throws Exception {
         "en-notouch-12key",
         "port-ldpi",
         "land-notouch-12key").pick(resName,
-        "en-rGB-port-hdpi-notouch-12key").asString());
+        "en-rGB-port-hdpi-notouch-12key-v25").asString());
   }
 
   @Test
@@ -148,7 +148,7 @@ public void shouldMatchQualifiersInSizeRange() throws Exception {
         "sw350dp-port",
         "sw300dp-port",
         "sw300dp").pick(resName,
-        "sw320dp-port").asString());
+        "sw320dp-port-v25").asString());
   }
 
   @Test
@@ -159,7 +159,7 @@ public void shouldPreferWidthOverHeight() throws Exception {
         "sw200dp-w300dp",
         "sw300dp-w200dp",
         "w300dp").pick(resName,
-        "sw320dp-w320dp").asString());
+        "sw320dp-w320dp-v25").asString());
   }
 
   @Test

File: resources/src/main/java/org/robolectric/res/ResBundle.java
Patch:
@@ -33,8 +33,8 @@ public TypedResource pick(ResName resName, String qualifiersStr) {
       if (values == null || values.size() == 0) return null;
 
       ResTable_config toMatch = new ResTable_config();
-      if (!Strings.isNullOrEmpty(qualifiersStr) && !new ConfigDescription()
-          .parse(qualifiersStr, toMatch)) {
+      if (!Strings.isNullOrEmpty(qualifiersStr) &&
+          !new ConfigDescription().parse(qualifiersStr, toMatch, false)) {
         throw new IllegalArgumentException("Invalid qualifiers \"" + qualifiersStr + "\"");
       }
 

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() throws Exception {
   @Test
   @Config(sdk = 26)
   public void testDefaultQualifiers() throws Exception {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-ldltr-sw320dp-w320dp-mdpi-v26");
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-ldltr-sw320dp-w320dp-normal-notlong-notround-port-notnight-mdpi-finger-v26");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DrawableResourceLoaderTest.java
Patch:
@@ -38,7 +38,7 @@ public void testGetDrawable_rainbow() throws Exception {
   }
 
   @Test
-  public void testGetDrawablBundlee_shouldWorkWithSystem() throws Exception {
+  public void testGetDrawableBundle_shouldWorkWithSystem() throws Exception {
     assertNotNull(resources.getDrawable(android.R.drawable.ic_popup_sync));
   }
 

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -45,7 +45,7 @@ public void checkForPollution2() throws Exception {
   }
 
   private void checkForPollutionHelper() {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("sw320dp-w320dp-mdpi-v" + RuntimeEnvironment.getApiLevel());
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("sw320dp-w320dp-normal-notlong-notround-port-notnight-mdpi-finger-v" + RuntimeEnvironment.getApiLevel());
 
     View view = LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.different_screen_sizes, null);
     TextView textView = view.findViewById(android.R.id.text1);

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -158,7 +158,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     String givenQualifiers = "large-land";
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
-    assertThat(RuntimeEnvironment.getQualifiers()).contains("large-land-mdpi-v" + Build.VERSION.SDK_INT);
+    assertThat(RuntimeEnvironment.getQualifiers()).contains("notlong-notround-land-notnight-mdpi-finger-v" + Build.VERSION.SDK_INT);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DrawableResourceLoaderTest.java
Patch:
@@ -38,7 +38,7 @@ public void testGetDrawable_rainbow() throws Exception {
   }
 
   @Test
-  public void testGetDrawable_shouldWorkWithSystem() throws Exception {
+  public void testGetDrawablBundlee_shouldWorkWithSystem() throws Exception {
     assertNotNull(resources.getDrawable(android.R.drawable.ic_popup_sync));
   }
 

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() throws Exception {
   @Test
   @Config(sdk = 26)
   public void testDefaultQualifiers() throws Exception {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-ldltr-sw320dp-w320dp-v26");
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-ldltr-sw320dp-w320dp-mdpi-v26");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -158,7 +158,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     String givenQualifiers = "large-land";
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
-    assertThat(RuntimeEnvironment.getQualifiers()).contains("large-land-v" + Build.VERSION.SDK_INT);
+    assertThat(RuntimeEnvironment.getQualifiers()).contains("large-land-mdpi-v" + Build.VERSION.SDK_INT);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -16,10 +16,12 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.res.FsFile;
 import org.robolectric.util.TestUtil;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(qualifiers = "hdpi")
 public class ShadowBitmapRegionDecoderTest {
 
   private static final FsFile IMAGE_FILE = TestUtil.resourcesBaseDir().join("res/drawable-hdpi/robolectric.png");

File: resources/src/main/java/org/robolectric/res/android/ConfigDescription.java
Patch:
@@ -93,10 +93,10 @@ static boolean is_alpha(final String str) {
     int initFromParts(PeekingIterator<String> iter) {
 
       String part = iter.peek();
-      if (part.indexOf(0) == 'b' && part.indexOf(1) == '+') {
+      if (part.startsWith("b+")) {
         // This is a "modified" BCP 47 language tag. Same semantics as BCP 47 tags,
         // except that the separator is "+" and not "-".
-        String[] subtags = part.toLowerCase().split("\\+");
+        String[] subtags = part.substring(2).toLowerCase().split("\\+");
         if (subtags.length == 1) {
           set_language(subtags[0]);
         } else if (subtags.length == 2) {
@@ -689,6 +689,7 @@ private boolean parseDensity(String name, ResTable_config out) {
       return true;
     }
 
+    // check that we have 'dpi' after the last digit.
     Matcher matcher = DENSITY_PATTERN.matcher(name);
     if (matcher.matches()) {
       out.density = Integer.parseInt(matcher.group(1));

File: robolectric/src/main/java/org/robolectric/android/AttributeSetBuilderImpl.java
Patch:
@@ -60,7 +60,7 @@ public class AttributeSetBuilderImpl implements AttributeSetBuilder {
   private final ResourceResolver resourceResolver;
   private Map<Integer, String> attrToValue = new TreeMap<>();
 
-  interface ResourceResolver {
+  public interface ResourceResolver {
 
     String getPackageName();
 

File: robolectric/src/test/java/org/robolectric/android/BootstrapTest.java
Patch:
@@ -94,12 +94,13 @@ public void applySystemConfiguration_shouldHonorSpecifiedQualifiers() {
     );
 
     if (RuntimeEnvironment.getApiLevel() > VERSION_CODES.JELLY_BEAN) {
+      // Setting Locale in > JB results in forcing layout direction to match locale
       assertThat(outQualifiers).isEqualTo("mcc310-mnc4-fr-rFR-ldltr-sw400dp-w480dp-h456dp-xlarge"
           + "-long-round-land-appliance-night-hdpi-notouch-keyshidden-12key-navhidden-dpad-v"
           + RuntimeEnvironment.getApiLevel());
     } else {
       assertThat(outQualifiers).isEqualTo("mcc310-mnc4-fr-rFR-ldrtl-sw400dp-w480dp-h456dp-xlarge"
-          + "-long-round-land-appliance-night-notouch-keyshidden-12key-navhidden-dpad-v"
+          + "-long-round-land-appliance-night-hdpi-notouch-keyshidden-12key-navhidden-dpad-v"
           + RuntimeEnvironment.getApiLevel());
     }
 

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -166,6 +166,9 @@ public static final class color {
     public static final int list_separator = 0x7f05000c;
     public static final int custom_state_view_text_color = 0x7f05000d;
     public static final int typed_array_orange = 0x7f05000e;
+    public static final int test_ARGB8=0x7f05000f;
+    public static final int test_RGB4=0x7f050010;
+    public static final int test_RGB8=0x7f050011;
   }
 
   public static final class drawable {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -837,7 +837,7 @@ public void getValueShouldClearTypedArrayBetweenCalls() throws Exception {
     assertThat(outValue.assetCookie).isNotEqualTo(0);
 
     resources.getValue(R.color.blue, outValue, true);
-    assertThat(outValue.type).isEqualTo(TypedValue.TYPE_INT_COLOR_ARGB8);
+    assertThat(outValue.type).isEqualTo(TypedValue.TYPE_INT_COLOR_RGB8);
     assertThat(outValue.data).isEqualTo(ResourceHelper.getColor("#0000ff"));
     assertThat(outValue.string).isNull();
     assertThat(outValue.assetCookie).isEqualTo(TypedValue.DATA_NULL_UNDEFINED);

File: shadows/framework/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -134,7 +134,7 @@ public static class FromColor extends Converter<String> {
     @Override
     public boolean fillTypedValue(String data, TypedValue typedValue) {
       try {
-        typedValue.type = TypedValue.TYPE_INT_COLOR_ARGB8;
+        typedValue.type =  ResourceHelper.getColorType(data);
         typedValue.data = ResourceHelper.getColor(data);
         typedValue.assetCookie = 0;
         typedValue.string = null;
@@ -150,8 +150,6 @@ public int asInt(TypedResource typedResource) {
     }
   }
 
-
-
   public static class FromFilePath extends Converter<String> {
     @Override
     public boolean fillTypedValue(String data, TypedValue typedValue) {

File: resources/src/main/java/org/robolectric/res/PluralRules.java
Patch:
@@ -9,7 +9,7 @@ public PluralRules(List<Plural> data, ResType resType, XmlContext xmlContext) {
 
   public Plural find(int quantity) {
     for (Plural p : getData()) {
-      if (p.num == quantity) return p;
+      if (p.num == quantity && p.usedInEnglish) return p;
     }
     for (Plural p : getData()) {
       if (p.num == -1) return p;

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -325,14 +325,15 @@ protected void beforeTest(Sandbox sandbox, FrameworkMethod method, Method bootst
           roboMethod.testLifecycle, appManifest, getJarResolver(), config,
           new RoutingResourceTable(getCompiletimeSdkResourceTable(), appResourceTable),
           new RoutingResourceTable(systemResourceTable, appResourceTable),
-          new RoutingResourceTable(systemResourceTable));
+          new RoutingResourceTable(systemResourceTable),
+          null);
     } else {
       ResourceTable nullResourceTable = new NullResourceTable();
 
       roboMethod.parallelUniverseInterface.setUpApplicationState(bootstrappedMethod,
           roboMethod.testLifecycle, appManifest, getJarResolver(), config,
           nullResourceTable, nullResourceTable,
-          nullResourceTable);
+          nullResourceTable, sdkEnvironment.getCompileTimeSystemResourcesFile(getJarResolver()));
     }
     roboMethod.testLifecycle.beforeTest(bootstrappedMethod);
   }

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -5,6 +5,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourceTable;
 
 public interface ParallelUniverseInterface {
@@ -14,7 +15,7 @@ void setUpApplicationState(Method method, TestLifecycle testLifecycle,
       AndroidManifest appManifest,
       DependencyResolver jarResolver, Config config,
       ResourceTable compiletimeResourceTable, ResourceTable appResourceTable,
-      ResourceTable systemResourceTable);
+      ResourceTable systemResourceTable, FsFile compileTimeSystemResourcesFile);
 
   Thread getMainThread();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -39,7 +39,6 @@ public void testNewInstance() throws Exception {
   }
 
   @Test
-  @Config(sdk = 16) // todo unpin
   public void getWidthAndGetHeight_shouldReturnCorrectValuesForImage() throws Exception {
     BitmapRegionDecoder decoder = BitmapRegionDecoder.newInstance(getImageInputStream(), true);
     assertThat(decoder.getWidth()).isEqualTo(297);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -148,7 +148,7 @@ public void drawableShouldLoadImageOfCorrectSizeWithMdpiQualifier() {
   }
 
   @Test
-  @Config(qualifiers = "hdpi", sdk = 16) // TODO unpin
+  @Config(qualifiers = "hdpi")
   public void drawableShouldLoadImageOfCorrectSizeWithHdpiQualifier() {
     final Drawable anImage = RuntimeEnvironment.application.getResources().getDrawable(R.drawable.robolectric);
 

File: shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -4,6 +4,7 @@
 
 import android.app.Application;
 import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TempDirectory;
@@ -23,6 +24,7 @@ public class RuntimeEnvironment {
   private static TempDirectory tempDirectory = new TempDirectory("no-test-yet");
   private static AndroidManifest appManifest;
   private static String androidFrameworkJar;
+  public static FsFile compileTimeSystemResourcesFile;
 
   /**
    * Tests if the given thread is currently set as the main thread.

File: shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java
Patch:
@@ -79,6 +79,6 @@ public static String applySystemConfiguration(String qualifiers, int apiLevel,
       }
     }
 
-    return ConfigurationV25.resourceQualifierString(configuration);
+    return ConfigurationV25.resourceQualifierString(configuration, displayMetrics);
   }
 }

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -166,6 +166,9 @@ public static final class color {
     public static final int list_separator = 0x7f05000c;
     public static final int custom_state_view_text_color = 0x7f05000d;
     public static final int typed_array_orange = 0x7f05000e;
+    public static final int test_ARGB8=0x7f05000f;
+    public static final int test_RGB4=0x7f050010;
+    public static final int test_RGB8=0x7f050011;
   }
 
   public static final class drawable {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -837,7 +837,7 @@ public void getValueShouldClearTypedArrayBetweenCalls() throws Exception {
     assertThat(outValue.assetCookie).isNotEqualTo(0);
 
     resources.getValue(R.color.blue, outValue, true);
-    assertThat(outValue.type).isEqualTo(TypedValue.TYPE_INT_COLOR_ARGB8);
+    assertThat(outValue.type).isEqualTo(TypedValue.TYPE_INT_COLOR_RGB8);
     assertThat(outValue.data).isEqualTo(ResourceHelper.getColor("#0000ff"));
     assertThat(outValue.string).isNull();
     assertThat(outValue.assetCookie).isEqualTo(TypedValue.DATA_NULL_UNDEFINED);

File: shadows/framework/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -134,7 +134,7 @@ public static class FromColor extends Converter<String> {
     @Override
     public boolean fillTypedValue(String data, TypedValue typedValue) {
       try {
-        typedValue.type = TypedValue.TYPE_INT_COLOR_ARGB8;
+        typedValue.type =  ResourceHelper.getColorType(data);
         typedValue.data = ResourceHelper.getColor(data);
         typedValue.assetCookie = 0;
         typedValue.string = null;
@@ -150,8 +150,6 @@ public int asInt(TypedResource typedResource) {
     }
   }
 
-
-
   public static class FromFilePath extends Converter<String> {
     @Override
     public boolean fillTypedValue(String data, TypedValue typedValue) {

File: shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java
Patch:
@@ -65,9 +65,6 @@ public static String applySystemConfiguration(String qualifiers, int apiLevel,
     //configuration.
     // end new stuff
 
-    // JDK has a default locale of en_US. A previous test may have changed the default, so reset it
-    // here
-    Locale.setDefault(Locale.US);
     Locale locale = null;
     if (!isNullOrEmpty(resTab.languageString()) || !isNullOrEmpty(resTab.regionString())) {
       locale = new Locale(resTab.languageString(), resTab.regionString());

File: resources/src/main/java/org/robolectric/res/android/ResTable_config.java
Patch:
@@ -444,7 +444,7 @@ public final int keyboardHidden() {
   }
 
   public final int navigationHidden() {
-    return inputFlags & NAVIGATIONHIDDEN_MASK;
+    return (inputFlags & NAVIGATIONHIDDEN_MASK) >> 2;
   }
 
   public int screenWidth;

File: resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -142,6 +142,7 @@ private void parseResourceFiles(ResourcePath resourcePath, PackageResourceTable
       loadOpaque(resourcePath, resourceTable, "layout", ResType.LAYOUT);
       loadOpaque(resourcePath, resourceTable, "menu", ResType.LAYOUT);
       loadOpaque(resourcePath, resourceTable, "drawable", ResType.DRAWABLE);
+      loadOpaque(resourcePath, resourceTable, "mipmap", ResType.DRAWABLE);
       loadOpaque(resourcePath, resourceTable, "anim", ResType.LAYOUT);
       loadOpaque(resourcePath, resourceTable, "animator", ResType.LAYOUT);
       loadOpaque(resourcePath, resourceTable, "color", ResType.COLOR_STATE_LIST);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -425,5 +425,7 @@ public static final class fraction {
   public static final class mipmap {
     public static final int robolectric = 0x7f140000;
     public static final int mipmap_reference = 0x7f140001;
+    public static final int robolectric_xml = 0x7f140002;
+    public static final int mipmap_reference_xml = 0x7f140003;
   }
 }

File: resources/src/main/java/org/robolectric/res/android/ResXMLParser.java
Patch:
@@ -397,7 +397,7 @@ public int indexOfAttribute(final String ns, int nsLen,
       if (attr == null) {
         return NAME_NOT_FOUND;
       }
-        final int N = getAttributeCount();
+      final int N = getAttributeCount();
       if (mTree.mStrings.isUTF8()) {
         String8 ns8 = null, attr8;
         if (ns != null) {
@@ -410,8 +410,8 @@ public int indexOfAttribute(final String ns, int nsLen,
         }
         for (int i=0; i<N; i++) {
           Ref<Integer> curNsLen = new Ref<>(0), curAttrLen = new Ref<>(0);
-                final String curNs = getAttributeNamespace8(i, curNsLen);
-                final String curAttr = getAttributeName8(i, curAttrLen);
+          final String curNs = getAttributeNamespace8(i, curNsLen);
+          final String curAttr = getAttributeName8(i, curAttrLen);
           if (kDebugStringPoolNoisy) {
             ALOGI("  curNs=%s (0x%x), curAttr=%s (0x%x)", curNs, curNsLen, curAttr, curAttrLen);
           }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.robolectric.annotation.Config;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.BitmapRegionDecoder;
@@ -20,6 +21,7 @@
 import org.robolectric.util.TestUtil;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(qualifiers = "hdpi")
 public class ShadowBitmapRegionDecoderTest {
 
   private static final FsFile IMAGE_FILE = TestUtil.resourcesBaseDir().join("res/drawable-hdpi/robolectric.png");

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -1544,8 +1544,6 @@ static class ResTable_type extends WithOffset
       }
 
       public int findEntryByResName(int stringId) {
-        ByteBuffer buf = myBuf();
-        int offset = myOffset();
         for (int i = 0; i < entryCount; i++) {
           if (entryNameIndex(i) == stringId) {
             return i;

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() {
   @Test
   @Config(sdk = 26)
   public void sanityCheck() throws Exception {
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-v26-sw320dp-w320dp");
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-sw320dp-w320dp-v26");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -183,7 +183,8 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     String givenQualifiers = "large-land";
     Config c = new Config.Builder().setQualifiers(givenQualifiers).build();
     setUpApplicationState(c, dummyManifest());
-    assertThat(RuntimeEnvironment.getQualifiers()).contains("large-land-v" + Build.VERSION.SDK_INT);
+    assertThat(RuntimeEnvironment.getQualifiers()).endsWith("-v" + Build.VERSION.SDK_INT);
+    assertThat(RuntimeEnvironment.getQualifiers()).contains(givenQualifiers);
   }
 
   @Test

File: resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -113,9 +113,11 @@ private void parseResourceFiles(ResourcePath resourcePath, PackageResourceTable
                   .addHandler("bool", new StaxValueLoader(resourceTable, "bool", ResType.BOOLEAN))
                   .addHandler("item[@type='bool']", new StaxValueLoader(resourceTable, "bool", ResType.BOOLEAN))
                   .addHandler("color", new StaxValueLoader(resourceTable, "color", ResType.COLOR))
-                  .addHandler("drawable", new StaxValueLoader(resourceTable, "drawable", ResType.DRAWABLE))
                   .addHandler("item[@type='color']", new StaxValueLoader(resourceTable, "color", ResType.COLOR))
+                  .addHandler("drawable", new StaxValueLoader(resourceTable, "drawable", ResType.DRAWABLE))
                   .addHandler("item[@type='drawable']", new StaxValueLoader(resourceTable, "drawable", ResType.DRAWABLE))
+                  .addHandler("mipmap", new StaxValueLoader(resourceTable, "mipmap", ResType.DRAWABLE))
+                  .addHandler("item[@type='mipmap']", new StaxValueLoader(resourceTable, "mipmap", ResType.DRAWABLE))
                   .addHandler("dimen", new StaxValueLoader(resourceTable, "dimen", ResType.DIMEN))
                   .addHandler("item[@type='dimen']", new StaxValueLoader(resourceTable, "dimen", ResType.DIMEN))
                   .addHandler("integer", new StaxValueLoader(resourceTable, "integer", ResType.INTEGER))

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -424,5 +424,7 @@ public static final class fraction {
 
   public static final class mipmap {
     public static final int robolectric = 0x7f140000;
+    public static final int mipmap_reference_element = 0x7f140001;
+    public static final int mipmap_reference_item = 0x7f140002;
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -15,6 +15,7 @@
 import android.content.res.AssetManager;
 import android.content.res.Resources;
 import android.util.AttributeSet;
+import android.util.TypedValue;
 import com.google.common.io.CharStreams;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowChoreographer.java
Patch:
@@ -110,7 +110,7 @@ public void removeCallbacks(int callbackType, Runnable action, Object token) {
    * AnimationHandler would result in endless looping (the execution of the task results in a new
    * animation task created and scheduled to the front of the event loop queue).
    *
-   * <p>To prevent endless looping, a test may call {@link #setPostFrameCallbackDelay(int)} to
+   * To prevent endless looping, a test may call {@link #setPostFrameCallbackDelay(int)} to
    * specify a small delay when animation is scheduled.
    *
    * @see #setPostCallbackDelay(int)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowInputMethodManager.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowInputMethodManager {
   /**
    * Handler for receiving soft input visibility changed event.
    *
-   * <p>Since Android does not have any API for retrieving soft input status, most application
+   * Since Android does not have any API for retrieving soft input status, most application
    * relies on GUI layout changes to detect the soft input change event. Currently, Robolectric are
    * not able to simulate the GUI change when application changes the soft input through {@code
    * InputMethodManager}, this handler can be used by application to simulate GUI change in response

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -26,6 +26,7 @@ public void setUp() {
   }
 
   @Test
+  @Config(sdk = 26)
   public void sanityCheck() throws Exception {
     assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo("en-v26-sw320dp-w320dp");
   }

File: resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -105,6 +105,7 @@ private void parseResourceFiles(ResourcePath resourcePath, PackageResourceTable
     }
 
     Logger.debug("Loading resources for %s from %s...", resourceTable.getPackageName(), resourcePath.getResourceBase());
+    System.out.println("Loading resources for " + resourceTable.getPackageName()  + " from " + resourcePath.getResourceBase());
 
     try {
       new StaxDocumentLoader(resourceTable.getPackageName(), resourcePath.getResourceBase(),

File: resources/src/main/java/org/robolectric/res/android/ResourceString.java
Patch:
@@ -29,7 +29,7 @@
 /** Provides utilities to decode/encode a String packed in an arsc resource file. */
 public final class ResourceString {
 
-  /** DataType of {@link ResourceString} to encode / decode. */
+  /** Type of {@link ResourceString} to encode / decode. */
   public enum Type {
     UTF8(UTF_8),
     UTF16(UTF_16LE);

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -318,7 +318,6 @@ protected void beforeTest(Sandbox sandbox, FrameworkMethod method, Method bootst
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "CODENAME", sdkConfig.getAndroidCodeName());
 
     if (USE_LEGACY) {
-      System.out.println("Using legacy resources!");
       PackageResourceTable systemResourceTable = sdkEnvironment.getSystemResourceTable(getJarResolver());
       PackageResourceTable appResourceTable = getAppResourceTable(appManifest);
 

File: robolectric/src/main/java/org/robolectric/android/AttributeSetBuilderImpl.java
Patch:
@@ -34,6 +34,7 @@
 import org.robolectric.res.android.ResourceTypes.ResXMLTree_node;
 import org.robolectric.res.android.ResourceTypes.Res_value;
 import org.robolectric.shadows.Converter;
+import org.robolectric.shadows.Converter2;
 import org.robolectric.shadows.ShadowArscAssetManager;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
@@ -233,7 +234,7 @@ private TypedValue parse(Integer attrId, ResName attrResName, String value, Reso
           }
 
           AttrData attrData = new AttrData(attrResName.getFullyQualifiedName(), flag.name, pairs);
-          Converter converter = Converter.getConverterFor(attrData, flag.name);
+          Converter2 converter = Converter2.getConverterFor(attrData, flag.name);
           if (converter.fillTypedValue(attribute.value, outValue, true)) {
             break;
           }

File: robolectric/src/main/java/org/robolectric/android/LegacyAttributeSetBuilder.java
Patch:
@@ -45,7 +45,7 @@ public AttributeSetBuilder addAttribute(int resId, String value) {
       ((Element)document.getFirstChild()).setAttribute(resName, value);
     } else {
       ((Element)document.getFirstChild()).setAttributeNS("http://schemas.android.com/apk/res/" + resPkg,
-          resPkg + ":" + resName, value);
+          resName, value);
     }
     return this;
   }

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -15,9 +15,7 @@
 import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.os.Looper;
-import java.io.File;
 import java.lang.reflect.Method;
-import java.net.URL;
 import java.security.Security;
 import java.util.Locale;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
@@ -36,7 +34,6 @@
 import org.robolectric.res.Qualifiers;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.res.android.ConfigDescription;
-import org.robolectric.res.android.CppAssetManager;
 import org.robolectric.res.android.ResTable_config;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowLooper;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -369,9 +369,7 @@ public void releaseTheme(long themePtr) {
   }
 
   private static boolean shouldDelegateToLegacyShadow(long themePtr) {
-    // return true;
-    // TODO: implement me
-    return false;
+    return USE_LEGACY;
   }
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowParcelFileDescriptor.java
Patch:
@@ -28,7 +28,7 @@ public static ParcelFileDescriptor open(File file, int mode) throws FileNotFound
     return pfd;
   }
 
-  // @Implementation
+  // @Implementation // todo legacy?
   // public FileDescriptor getFileDescriptor() {
   //   try {
   //     return file.getFD();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -74,7 +74,7 @@ public static void dump(TypedArray typedArray) {
     for (int index = 0; index < data.length; index+= ShadowAssetManager.STYLE_NUM_ENTRIES) {
       final int type = data[index+ShadowAssetManager.STYLE_TYPE];
       result.append("Index: ").append(index / ShadowAssetManager.STYLE_NUM_ENTRIES).append(System.lineSeparator());
-      result.append(Strings.padEnd("DataType: ", 25, ' ')).append(TYPE_MAP.get(type)).append(System.lineSeparator());
+      result.append(Strings.padEnd("Type: ", 25, ' ')).append(TYPE_MAP.get(type)).append(System.lineSeparator());
       if (type != TypedValue.TYPE_NULL) {
         result.append(Strings.padEnd("Style data: ", 25, ' ')).append(data[index+ ShadowAssetManager.STYLE_DATA]).append(System.lineSeparator());
         result.append(Strings.padEnd("Asset cookie ", 25, ' ')).append(data[index+ShadowAssetManager.STYLE_ASSET_COOKIE]).append(System.lineSeparator());

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/TestHttpResponse.java
Patch:
@@ -193,7 +193,7 @@ public class TestHttpEntity extends HttpEntityStub {
     }
 
     @Override public Header getContentType() {
-      return getFirstHeader("Content-DataType");
+      return getFirstHeader("Content-Type");
     }
 
     @Override public Header getContentEncoding() {

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/ShadowDefaultRequestDirectorTest.java
Patch:
@@ -318,7 +318,7 @@ public void getNextSentHttpRequest_shouldRemoveHttpRequests() throws Exception {
 
   @Test
   public void shouldSupportBasicResponseHandlerHandleResponse() throws Exception {
-    FakeHttp.addPendingHttpResponse(200, "OK", new BasicHeader("Content-DataType", "text/plain"));
+    FakeHttp.addPendingHttpResponse(200, "OK", new BasicHeader("Content-Type", "text/plain"));
 
     DefaultHttpClient client = new DefaultHttpClient();
     HttpResponse response = client.execute(new HttpGet("http://www.nowhere.org"));

File: robolectric/src/main/java/org/robolectric/internal/BuckManifestFactory.java
Patch:
@@ -43,11 +43,11 @@ public ManifestIdentifier identify(Config config) {
       libraries = new ArrayList<>();
 
       for (FsFile buckResource: buckResources) {
-        libraries.add(new ManifestIdentifier(null, null, buckResource, null, null));
+        libraries.add(new ManifestIdentifier((String) null, null, buckResource, null, null));
       }
 
       for (FsFile buckAsset: buckAssets) {
-        libraries.add(new ManifestIdentifier(null, null, null, buckAsset, null));
+        libraries.add(new ManifestIdentifier((String) null, null, null, buckAsset, null));
       }
     }
 

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricProcessor.java
Patch:
@@ -62,7 +62,7 @@ public RobolectricProcessor() {
   }
 
   @Override
-  public void init(ProcessingEnvironment environment) {
+  public synchronized void init(ProcessingEnvironment environment) {
     super.init(environment);
     processOptions(environment.getOptions());
     model = new RobolectricModel(environment.getElementUtils(), environment.getTypeUtils());

File: processor/src/test/java/com/example/objects/OuterDummy.java
Patch:
@@ -1,6 +1,7 @@
 package com.example.objects;
 
 public class OuterDummy {
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
   }
 }

File: processor/src/test/java/com/example/objects/UniqueDummy.java
Patch:
@@ -2,9 +2,11 @@
 
 public class UniqueDummy {
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
   }
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class UniqueInnerDummy {
   }
 }

File: processor/src/test/java/com/example/objects2/OuterDummy.java
Patch:
@@ -2,6 +2,7 @@
 
 public class OuterDummy {
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
     
   }

File: processor/src/test/java/org/robolectric/annotation/processing/validator/SingleClassSubject.java
Patch:
@@ -89,6 +89,7 @@ public SingleFileClause withNoErrorContaining(final String messageFragment) {
       return this;
     }
     
+    @Override
     public SingleFileClause and() {
       return this;
     }

File: resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -73,7 +73,7 @@ public static ResName qualifyResName(@Nonnull String possiblyQualifiedResourceNa
       name = possiblyQualifiedResourceName.substring(indexOfSlash + 1);
     }
 
-    if ((type == null && defaultType == null) || packageName == null && defaultPackageName == null) {
+    if ((type == null && defaultType == null) || (packageName == null && defaultPackageName == null)) {
       return null;
     }
 

File: resources/src/main/java/org/robolectric/res/ResourceIdGenerator.java
Patch:
@@ -11,7 +11,7 @@ public class ResourceIdGenerator {
   private final Map<String, TypeTracker> typeInfo = new HashMap<>();
   private int packageIdentifier;
 
-  private class TypeTracker {
+  private static class TypeTracker {
     private int typeIdentifier;
     private int currentMaxEntry;
 

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -490,7 +490,7 @@ private PackageResourceTable getAppResourceTable(final AndroidManifest appManife
   }
 
   private static class MethodPassThrough extends Config.Implementation {
-    private FrameworkMethod method;
+    private final FrameworkMethod method;
 
     private MethodPassThrough(FrameworkMethod method, int[] sdk, int minSdk, int maxSdk, String manifest, String qualifiers, String packageName, String abiSplit, String resourceDir, String assetDir, String buildDir, Class<?>[] shadows, String[] instrumentedPackages, Class<? extends Application> application, String[] libraries, Class<?> constants) {
       super(sdk, minSdk, maxSdk, manifest, qualifiers, packageName, abiSplit, resourceDir, assetDir, buildDir, shadows, instrumentedPackages, application, libraries, constants);

File: robolectric/src/main/java/org/robolectric/internal/dependency/CachedDependencyResolver.java
Patch:
@@ -113,7 +113,7 @@ static class FileCache implements Cache {
     public <T extends Serializable> T load(String id, Class<T> type) {
       try {
         File file = new File(dir, id);
-        if (!file.exists() || validTime > 0 && file.lastModified() < new Date().getTime() - validTime) {
+        if (!file.exists() || (validTime > 0 && file.lastModified() < new Date().getTime() - validTime)) {
           return null;
         }
 

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric;
 
 import static com.google.common.collect.ImmutableMap.of;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.annotation.Config.DEFAULT_APPLICATION;
 
@@ -175,7 +176,7 @@ private Config configFor(Class<?> testClass, String methodName, final Map<String
       @Override
       InputStream getResourceAsStream(String resourceName) {
         String properties = configProperties.get(resourceName);
-        return properties == null ? null : new ByteArrayInputStream(properties.getBytes());
+        return properties == null ? null : new ByteArrayInputStream(properties.getBytes(UTF_8));
       }
     }.getConfig(testClass, info, globalConfig);
   }

File: robolectric/src/test/java/org/robolectric/ManifestFactoryTest.java
Patch:
@@ -65,7 +65,7 @@ public void whenBuildSystemApiPropertiesFileIsPresent_shouldUseDefaultManifestFa
     properties.setProperty("android_merged_assets", "/path/to/merged-assets");
 
     RobolectricTestRunner testRunner = new RobolectricTestRunner(ManifestFactoryTest.class) {
-      Properties getBuildSystemApiProperties() {
+      @Override Properties getBuildSystemApiProperties() {
         return properties;
       }
     };
@@ -95,7 +95,7 @@ public void whenConfigSpecified_overridesValuesFromFile() throws Exception {
     properties.setProperty("android_merged_assets", "/path/to/merged-assets");
 
     RobolectricTestRunner testRunner = new RobolectricTestRunner(ManifestFactoryTest.class) {
-      Properties getBuildSystemApiProperties() {
+      @Override Properties getBuildSystemApiProperties() {
         return properties;
       }
     };

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -187,7 +187,7 @@ public void testResourceNotFound() {
   }
 
   /** Can't use Mockito for classloader issues */
-  class ThrowingManifest extends AndroidManifest {
+  static class ThrowingManifest extends AndroidManifest {
     public ThrowingManifest() {
       super(null, null, null);
     }

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -162,7 +162,7 @@ public void setOnActionExpandListener_shouldReturnMenuItem() throws Exception {
     assertThat(item.setOnActionExpandListener(listener)).isSameAs(item);
   }
 
-  class TestOnActionExpandListener implements MenuItem.OnActionExpandListener {
+  static class TestOnActionExpandListener implements MenuItem.OnActionExpandListener {
     private boolean expanded = false;
 
     @Override

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuTest.java
Patch:
@@ -7,11 +7,11 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.view.MenuItem;
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowApplication;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowMapTest.java
Patch:
@@ -54,7 +54,7 @@ public class ShadowMapTest {
     assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
   }
 
-  class CursorAdapter {
+  static class CursorAdapter {
   }
 
 }

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.res.builder;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertTrue;
@@ -75,7 +76,7 @@ private void forgeAndOpenDocument(String xmlValue) {
       factory.setIgnoringElementContentWhitespace(true);
       DocumentBuilder documentBuilder = factory.newDocumentBuilder();
       Document document = documentBuilder.parse(
-          new ByteArrayInputStream(xmlValue.getBytes()));
+          new ByteArrayInputStream(xmlValue.getBytes(UTF_8)));
 
       parser = new XmlResourceParserImpl(document, "file", R.class.getPackage().getName(),
           TEST_PACKAGE, resourceTable);

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -918,7 +919,7 @@ public void shouldGetBlobFromString() {
         Cursor data = database.query("table_name", new String[]{"first_column"}, null, null, null, null, null);
         assertThat(data.getCount()).isEqualTo(1);
         data.moveToFirst();
-        assertThat(data.getBlob(0)).isEqualTo(values.getAsString("first_column").getBytes());
+        assertThat(data.getBlob(0)).isEqualTo(values.getAsString("first_column").getBytes(UTF_8));
     }
 
     /////////////////////

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -221,7 +221,7 @@ private static void assertDatabaseOpened(SQLiteDatabase database, TestOpenHelper
     assertThat(helper.onUpgradeCalled).isFalse();
   }
 
-  private class TestOpenHelper extends SQLiteOpenHelper {
+  private static class TestOpenHelper extends SQLiteOpenHelper {
     public boolean onCreateCalled;
     public boolean onUpgradeCalled;
     public boolean onOpenCalled;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -150,6 +151,7 @@ public void testCloseShouldCloseUnderlyingPreparedStatement() throws Exception {
     insertStatement.close();
     try {
       insertStatement.executeInsert();
+      fail();
     } catch (Exception e) {
       assertThat(e).isInstanceOf(IllegalStateException.class);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -219,7 +219,7 @@ public void testIsClosedWhenAfterCallingClose() {
     assertThat(cursor.isClosed()).isTrue();
   }
 
-  private class TestCursor extends AbstractCursor {
+  private static class TestCursor extends AbstractCursor {
 
     public List<Object> theTable = new ArrayList<>();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.shadows;
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertNull;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
@@ -24,8 +24,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.CustomView;
 import org.robolectric.annotation.Config;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -37,6 +37,7 @@ public void verifyContext() {
   }
 
   @Test
+  @SuppressWarnings("BoxedPrimitiveConstructor")
   public void verifyListContent() {
     assertEquals(3, arrayAdapter.getCount());
     assertEquals(new Integer(1), arrayAdapter.getItem(0));
@@ -49,7 +50,7 @@ public void usesTextViewResourceIdToSetTextWithinListItemView() throws Exception
     ListView parent = new ListView(RuntimeEnvironment.application);
     ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(RuntimeEnvironment.application, R.layout.main, R.id.title, new String[] { "first value" });
     View listItemView = arrayAdapter.getView(0, null, parent);
-    TextView titleTextView = (TextView) listItemView.findViewById(R.id.title);
+    TextView titleTextView = listItemView.findViewById(R.id.title);
     assertEquals("first value", titleTextView.getText().toString());
   }
 
@@ -87,6 +88,7 @@ public void shouldClear() throws Exception {
   }
 
   @Test
+  @SuppressWarnings("BoxedPrimitiveConstructor")
   public void test_remove() throws Exception {
     Integer firstItem = arrayAdapter.getItem(0);
     assertEquals(3, arrayAdapter.getCount());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java
Patch:
@@ -200,7 +200,7 @@ protected void onCancelled() {
     }
   }
 
-  public class ImmediateExecutor implements Executor {
+  public static class ImmediateExecutor implements Executor {
     @Override
     public void execute(Runnable command) {
       command.run();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBaseAdapterTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.view.View;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertTrue;
-import static junit.framework.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 import android.os.Binder;
 import android.os.Parcel;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -61,7 +62,7 @@ public void draw_shouldCopyDescriptionToCanvas() throws Exception {
 
   @Test
   public void shouldInheritSourceStringFromDrawableDotCreateFromStream() throws Exception {
-    InputStream emptyInputStream = new ByteArrayInputStream("".getBytes());
+    InputStream emptyInputStream = new ByteArrayInputStream("".getBytes(UTF_8));
     BitmapDrawable drawable = (BitmapDrawable) Drawable.createFromStream(emptyInputStream, "source string value");
     assertThat(shadowOf(drawable).getSource()).isEqualTo("source string value");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Shadows.shadowOf;
@@ -177,7 +178,7 @@ public void decodeByteArray_shouldGetWidthAndHeightFromHints() throws Exception
     String data = "arbitrary bytes";
     ShadowBitmapFactory.provideWidthAndHeightHints(Uri.parse(data), 123, 456);
 
-    byte[] bytes = data.getBytes();
+    byte[] bytes = data.getBytes(UTF_8);
     Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
     assertEquals("Bitmap for " + data, shadowOf(bitmap).getDescription());
     assertEquals(123, bitmap.getWidth());
@@ -189,7 +190,7 @@ public void decodeByteArray_shouldIncludeOffsets() throws Exception {
     String data = "arbitrary bytes";
     ShadowBitmapFactory.provideWidthAndHeightHints(Uri.parse(data), 123, 456);
 
-    byte[] bytes = data.getBytes();
+    byte[] bytes = data.getBytes(UTF_8);
     Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 1, bytes.length - 2);
     assertEquals("Bitmap for " + data + " bytes 1..13", shadowOf(bitmap).getDescription());
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentObserverTest.java
Patch:
@@ -46,7 +46,7 @@ public void testDispatchChangeBoolean() {
     assertThat(observer.selfChange).isTrue();
   }
 
-  private class TestContentObserver extends ContentObserver {
+  private static class TestContentObserver extends ContentObserver {
 
     public TestContentObserver(Handler handler) {
       super(handler);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextWrapperTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static android.content.pm.PackageManager.PERMISSION_DENIED;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static junit.framework.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.buildActivity;
@@ -33,8 +33,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowContextWrapperTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.graphics.CornerPathEffect;
@@ -13,6 +13,6 @@ public class ShadowCornerPathEffectTest {
   @Test
   public void shouldGetRadius() throws Exception {
     CornerPathEffect cornerPathEffect = new CornerPathEffect(4.0f);
-    assertEquals(4.0f, shadowOf(cornerPathEffect).getRadius());
+    assertThat(shadowOf(cornerPathEffect).getRadius()).isEqualTo(4.0f);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetView() {
     assertThat(adapter.getCursor()).isNotSameAs(curs);
   }
 
-  private class TestAdapter extends CursorAdapter {
+  private static class TestAdapter extends CursorAdapter {
 
     public TestAdapter(Cursor curs) {
       super(RuntimeEnvironment.application, curs, false);
@@ -119,7 +119,7 @@ public View newView(Context context, Cursor cursor, ViewGroup parent) {
     }
   }
 
-  private class TestAdapterWithFlags extends CursorAdapter {
+  private static class TestAdapterWithFlags extends CursorAdapter {
     public TestAdapterWithFlags(Cursor c, int flags) {
       super(RuntimeEnvironment.application, c, flags);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -24,7 +24,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {
 
-  private class ForwardVerifier {
+  private static class ForwardVerifier {
 
     final Cursor mockCursor;
     final CursorWrapper cursorWrapper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
-import static junit.framework.Assert.assertFalse;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
@@ -22,8 +22,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextPreferenceTest.java
Patch:
@@ -1,17 +1,17 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 import android.content.Context;
 import android.preference.EditTextPreference;
 import android.widget.EditText;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextPreferenceTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentServiceTest.java
Patch:
@@ -22,7 +22,7 @@ public void shouldSetIntentRedelivery() {
     assertThat(shadowIntentService.getIntentRedelivery()).isFalse();
   }
 
-  private class TestIntentService extends IntentService {
+  private static class TestIntentService extends IntentService {
     public TestIntentService() {
       super("TestIntentService");
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsResultTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertTrue;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.webkit.JsResult;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -218,13 +218,13 @@ public void testRelease() throws Exception {
     assertThat(shadowMediaRecorder.getState()).isEqualTo(ShadowMediaRecorder.STATE_RELEASED);
   }
 
-  private class TestErrorListener implements MediaRecorder.OnErrorListener {
+  private static class TestErrorListener implements MediaRecorder.OnErrorListener {
     @Override
     public void onError(MediaRecorder arg0, int arg1, int arg2) {
     }
   }
 
-  private class TestInfoListener implements MediaRecorder.OnInfoListener {
+  private static class TestInfoListener implements MediaRecorder.OnInfoListener {
     @Override
     public void onInfo(MediaRecorder mr, int what, int extra) {
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScanResultTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertNotNull;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.net.wifi.ScanResult;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollViewTest.java
Patch:
@@ -1,12 +1,12 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 import android.widget.ScrollView;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class ShadowScrollViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -103,7 +103,7 @@ public void shouldReturnASensorList() throws Exception {
     assertThat(sensorManager.getSensorList(0)).isNotNull();
   }
 
-  private class TestSensorEventListener implements SensorEventListener {
+  private static class TestSensorEventListener implements SensorEventListener {
 
     @Override
     public void onAccuracyChanged(Sensor sensor, int accuracy) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSyncResultTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import android.content.SyncResult;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextPaintTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import android.text.TextPaint;
 import org.junit.Test;
@@ -13,6 +13,6 @@ public class ShadowTextPaintTest {
   @Test
   public void measureText_returnsStringLengthAsMeasurement() throws Exception {
     TextPaint paint = new TextPaint();
-    assertEquals(4f, paint.measureText("1234"));
+    assertThat(paint.measureText("1234")).isEqualTo(4f);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -144,19 +144,19 @@ public void shouldSeekToSpecifiedPosition() throws Exception {
     assertThat(view.getCurrentPosition()).isEqualTo(10000);
   }
 
-  private class TestPreparedListener implements MediaPlayer.OnPreparedListener {
+  private static class TestPreparedListener implements MediaPlayer.OnPreparedListener {
     @Override
     public void onPrepared(MediaPlayer mp) {}
   }
 
-  private class TestErrorListener implements MediaPlayer.OnErrorListener  {
+  private static class TestErrorListener implements MediaPlayer.OnErrorListener  {
     @Override
     public boolean onError(MediaPlayer mp, int what, int extra) {
       return false;
     }
   }
 
-  private class TestCompletionListener implements MediaPlayer.OnCompletionListener {
+  private static class TestCompletionListener implements MediaPlayer.OnCompletionListener {
     @Override
     public void onCompletion(MediaPlayer mp) {}
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -390,7 +390,7 @@ private void makeFocusable(View... views) {
     }
   }
 
-  class TestOnHierarchyChangeListener implements ViewGroup.OnHierarchyChangeListener {
+  static class TestOnHierarchyChangeListener implements ViewGroup.OnHierarchyChangeListener {
     boolean wasCalled = false;
 
     @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
-import static junit.framework.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;
@@ -48,8 +48,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.AccessibilityChecks;
 import org.robolectric.annotation.Config;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiConfigurationTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
-import static junit.framework.Assert.assertNotNull;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.net.wifi.WifiConfiguration;

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.util;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.ByteArrayInputStream;
@@ -69,7 +70,7 @@ public void shouldRewriteExistingLibraryIfThereAreChanges() throws Exception {
     loader.getNativeLibraryPath().getParentFile().mkdirs();
 
     SQLiteLibraryLoader.copy(
-        new ByteArrayInputStream("changed".getBytes()),
+        new ByteArrayInputStream("changed".getBytes(UTF_8)),
         new FileOutputStream(loader.getNativeLibraryPath()));
     long firstSize = loader.getNativeLibraryPath().length();
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RoboType.java
Patch:
@@ -16,7 +16,7 @@ enum RoboType {
     this.type = type;
   }
 
-  private Class type;
+  private final Class type;
 
   public static Class findPrimitiveClass(String name) {
     for (RoboType type : RoboType.values()) {

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowMap.java
Patch:
@@ -71,6 +71,7 @@ public static ShadowInfo getShadowInfo(Class<?> clazz) {
     return new ShadowInfo(className, new ShadowConfig(clazz.getName(), annotation));
   }
 
+  @SuppressWarnings("ReferenceEquality")
   public Set<String> getInvalidatedClasses(ShadowMap previous) {
     if (this == previous) return Collections.emptySet();
 

File: sandbox/src/test/java/org/robolectric/ShadowWranglerIntegrationTest.java
Patch:
@@ -210,6 +210,7 @@ public String get() {
 
   @Instrument
   public static class Child extends Parent {
+    @Override
     public String get() {
       return "from child (" + super.get() + ")";
     }

File: sandbox/src/test/java/org/robolectric/internal/bytecode/ProxyMakerTest.java
Patch:
@@ -48,7 +48,7 @@ public void cachesProxyClass() {
     assertThat(proxy1.getClass()).isSameAs(proxy2.getClass());
   }
 
-  public class Thing {
+  public static class Thing {
     public Thing() {
       throw new UnsupportedOperationException();
     }

File: shadowapi/src/main/java/org/robolectric/shadow/api/Shadow.java
Patch:
@@ -10,7 +10,7 @@ public class Shadow {
   static {
     try {
       SHADOW_IMPL = Class.forName("org.robolectric.internal.bytecode.ShadowImpl")
-          .asSubclass(IShadow.class).newInstance();
+          .asSubclass(IShadow.class).getDeclaredConstructor().newInstance();
     } catch (Exception e) {
       throw new RuntimeException(e);
     }

File: shadowapi/src/test/java/org/robolectric/util/ReflectionHelpersTest.java
Patch:
@@ -279,7 +279,7 @@ private static class ExampleBase {
     private int notOverridden;
     protected int overridden;
 
-    private static final int BASE = new Integer(8);
+    private static final int BASE = 8;
 
     public int getNotOverridden() {
       return notOverridden;

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -186,6 +186,7 @@ public boolean isLast() {
     return extras;
   }
 
+  @Override
   public void setExtras(Bundle extras) {
     this.extras = extras;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -920,9 +920,8 @@ public boolean performAction(int action, Bundle arguments) {
       performedActionAndArgsList = new LinkedList<>();
     }
 
-    performedActionAndArgsList.add(new Pair<Integer, Bundle>(new Integer(action), arguments));
-    return (actionListener != null) ? actionListener.onPerformAccessibilityAction(action, arguments)
-      : true;
+    performedActionAndArgsList.add(new Pair<>(action, arguments));
+    return actionListener == null || actionListener.onPerformAccessibilityAction(action, arguments);
   }
 
   private boolean childrenEqualityCheck(
@@ -1219,6 +1218,7 @@ public StrictEqualityNodeWrapper(AccessibilityNodeInfo info) {
     }
 
     @Override
+    @SuppressWarnings("ReferenceEquality")
     public boolean equals(Object object) {
       if (object == null) {
         return false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -517,7 +517,7 @@ public boolean clickMenuItem(int menuItemResId) {
    * Container object to hold an Intent, together with the requestCode used
    * in a call to {@code Activity.startActivityForResult(Intent, int)}
    */
-  public class IntentForResult {
+  public static class IntentForResult {
     public Intent intent;
     public int requestCode;
     public Bundle options;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlarmManager.java
Patch:
@@ -122,7 +122,7 @@ public void cancel(PendingIntent pendingIntent) {
    * Container object to hold an PendingIntent, together with the alarm
    * parameters used in a call to {@code AlarmManager}
    */
-  public class ScheduledAlarm {
+  public static class ScheduledAlarm {
     public int type;
     public long triggerAtTime;
     public long interval;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -257,7 +257,7 @@ public void setValidWidgetProviderComponentName(boolean validWidgetProviderCompo
     this.validWidgetProviderComponentName = validWidgetProviderComponentName;
   }
 
-  private class WidgetInfo {
+  private static class WidgetInfo {
     View view;
     int layoutId;
     final AppWidgetProvider appWidgetProvider;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -741,7 +741,7 @@ public void setLatestListPopupWindow(ListPopupWindow latestListPopupWindow) {
     this.latestListPopupWindow = latestListPopupWindow;
   }
 
-  public class Wrapper {
+  public static class Wrapper {
     public BroadcastReceiver broadcastReceiver;
     public IntentFilter intentFilter;
     public Context context;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -453,7 +453,7 @@ private static float distanceBetween(Location location1, Location location2) {
 
     int meterConversion = 1609;
 
-    return new Float(dist * meterConversion);
+    return (float) (dist * meterConversion);
   }
 
   public Map<PendingIntent, Criteria> getRequestLocationUdpateCriteriaPendingIntents() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -368,7 +368,7 @@ public boolean rectStaysRect() {
       final float m01 = mValues[1];
       final float m10 = mValues[3];
       final float m11 = mValues[4];
-      return m00 == 0 && m11 == 0 && m01 != 0 && m10 != 0 || m00 != 0 && m11 != 0 && m01 == 0 && m10 == 0;
+      return (m00 == 0 && m11 == 0 && m01 != 0 && m10 != 0) || (m00 != 0 && m11 != 0 && m01 == 0 && m10 == 0);
     }
 
     public void getValues(float[] values) {
@@ -490,7 +490,7 @@ public PointF transform(PointF point) {
 
     @Override
     public boolean equals(Object o) {
-      return this == o || o instanceof SimpleMatrix && equals((SimpleMatrix) o);
+      return this == o || (o instanceof SimpleMatrix && equals((SimpleMatrix) o));
     }
 
     public boolean equals(SimpleMatrix matrix) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowMimeTypeMap {
   private final Map<String, String> extensionToMimeTypeMap = new HashMap<>();
   private final Map<String, String> mimeTypeToExtensionMap = new HashMap<>();
-  private static MimeTypeMap singleton = null;
+  private static volatile MimeTypeMap singleton = null;
   private static final Object singletonLock = new Object();
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -29,7 +29,7 @@ public class ShadowPackageInstaller {
   private Map<Integer, PackageInstaller.Session> sessions = new HashMap<>();
   private Set<CallbackInfo> callbackInfos = new HashSet<>();
 
-  private class CallbackInfo {
+  private static class CallbackInfo {
     PackageInstaller.SessionCallback callback;
     Handler handler;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRemoteCallbackList.java
Patch:
@@ -10,7 +10,7 @@
 
 @Implements(RemoteCallbackList.class)
 public class ShadowRemoteCallbackList<E extends IInterface> {
-  private HashMap<IBinder, Callback> callbacks = new HashMap<>();
+  private final HashMap<IBinder, Callback> callbacks = new HashMap<>();
   private Object[] activeBroadcast;
   private int broadcastCount = -1;
   private boolean killed = false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -290,7 +290,7 @@ public void setSimCallManager(PhoneAccountHandle simCallManager) {
     this.simCallManager = simCallManager;
   }
 
-  public class CallRecord {
+  public static class CallRecord {
     public final PhoneAccountHandle phoneAccount;
     public final Bundle bundle;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -78,7 +78,7 @@ public static void dump(TypedArray typedArray) {
     System.out.println(result.toString());
   }
 
-  private static final Map<Integer, String> TYPE_MAP = ImmutableMap.<Integer, String>builder()
+  private static final ImmutableMap<Integer, String> TYPE_MAP = ImmutableMap.<Integer, String>builder()
           .put(TypedValue.TYPE_NULL, "TYPE_NULL")
           .put(TypedValue.TYPE_REFERENCE, "TYPE_REFERENCE")
           .put(TypedValue.TYPE_ATTRIBUTE, "TYPE_ATTRIBUTE")

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -356,7 +356,7 @@ public LoadDataWithBaseURL getLastLoadDataWithBaseURL() {
 
   public static void setWebContentsDebuggingEnabled(boolean enabled) { }
 
-  public class LoadDataWithBaseURL {
+  public static class LoadDataWithBaseURL {
     public final String baseUrl;
     public final String data;
     public final String mimeType;
@@ -372,7 +372,7 @@ public LoadDataWithBaseURL(String baseUrl, String data, String mimeType, String
     }
   }
 
-  public class LoadData {
+  public static class LoadData {
     public final String data;
     public final String mimeType;
     public final String encoding;

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/AndroidHttpClientTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows.httpclient;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.net.http.AndroidHttpClient;
@@ -34,7 +35,7 @@ public void testExecute() throws IOException {
     FakeHttp.addPendingHttpResponse(200, "foo");
     HttpResponse resp = client.execute(new HttpGet("/foo"));
     assertThat(resp.getStatusLine().getStatusCode()).isEqualTo(200);
-    assertThat(CharStreams.toString(new InputStreamReader(resp.getEntity().getContent())))
+    assertThat(CharStreams.toString(new InputStreamReader(resp.getEntity().getContent(), UTF_8)))
         .isEqualTo("foo");
   }
 }
\ No newline at end of file

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: shadows/supportv4/src/test/java/org/robolectric/shadows/support/v4/ShadowPagerAdapterTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows.support.v4;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 
 import android.database.DataSetObserver;
 import android.support.v4.view.PagerAdapter;

File: utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -353,7 +353,7 @@ private ScheduledRunnable(Runnable runnable, long scheduledTime) {
 
     @Override
     public int compareTo(ScheduledRunnable runnable) {
-      return (int) (scheduledTime - runnable.scheduledTime);
+      return Long.compare(scheduledTime, runnable.scheduledTime);
     }
 
     public void run() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.junit.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
 import android.graphics.CornerPathEffect;
@@ -13,6 +13,6 @@ public class ShadowCornerPathEffectTest {
   @Test
   public void shouldGetRadius() throws Exception {
     CornerPathEffect cornerPathEffect = new CornerPathEffect(4.0f);
-    assertEquals(4.0f, shadowOf(cornerPathEffect).getRadius());
+    assertThat(shadowOf(cornerPathEffect).getRadius()).isEqualTo(4.0f);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -77,15 +77,15 @@ public void testDoubleExtra() throws Exception {
     Intent intent = new Intent();
     assertSame(intent, intent.putExtra("foo", 2d));
     assertEquals(2d, intent.getExtras().get("foo"));
-    assertEquals(2d, intent.getDoubleExtra("foo", -1));
+    assertThat(intent.getDoubleExtra("foo", -1)).isEqualTo(2d);
   }
 
   @Test
   public void testFloatExtra() throws Exception {
     Intent intent = new Intent();
     assertSame(intent, intent.putExtra("foo", 2f));
-    assertEquals(2f, intent.getExtras().get("foo"));
-    assertEquals(2f, intent.getFloatExtra("foo", -1));
+    assertThat(intent.getExtras().get("foo")).isEqualTo(2f);
+    assertThat(intent.getFloatExtra("foo", -1)).isEqualTo(2f);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextPaintTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.junit.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import android.text.TextPaint;
 import org.junit.Test;
@@ -13,6 +13,6 @@ public class ShadowTextPaintTest {
   @Test
   public void measureText_returnsStringLengthAsMeasurement() throws Exception {
     TextPaint paint = new TextPaint();
-    assertEquals(4f, paint.measureText("1234"));
+    assertThat(paint.measureText("1234")).isEqualTo(4f);
   }
 }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -34,9 +34,10 @@ public void methodsShouldReturnAndroidConstants() {
     assertEquals(320 * 480 * 4, ViewConfiguration.getMaximumDrawingCacheSize());
     assertEquals(3000, ViewConfiguration.getZoomControlsTimeout());
     assertEquals(500, ViewConfiguration.getGlobalActionKeyTimeout());
-    assertEquals(0.015f, ViewConfiguration.getScrollFriction());
+    assertThat(ViewConfiguration.getScrollFriction()).isEqualTo(0.015f);
 
-    assertEquals(1f, RuntimeEnvironment.application.getResources().getDisplayMetrics().density);
+    assertThat(RuntimeEnvironment.application.getResources().getDisplayMetrics().density)
+        .isEqualTo(1f);
 
     assertEquals(10, viewConfiguration.getScaledScrollBarSize());
     assertEquals(12, viewConfiguration.getScaledFadingEdgeLength());

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricProcessor.java
Patch:
@@ -62,7 +62,7 @@ public RobolectricProcessor() {
   }
 
   @Override
-  public void init(ProcessingEnvironment environment) {
+  public synchronized void init(ProcessingEnvironment environment) {
     super.init(environment);
     processOptions(environment.getOptions());
     model = new RobolectricModel(environment.getElementUtils(), environment.getTypeUtils());

File: processor/src/test/java/com/example/objects/OuterDummy.java
Patch:
@@ -1,6 +1,7 @@
 package com.example.objects;
 
 public class OuterDummy {
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
   }
 }

File: processor/src/test/java/com/example/objects/UniqueDummy.java
Patch:
@@ -2,9 +2,11 @@
 
 public class UniqueDummy {
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
   }
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class UniqueInnerDummy {
   }
 }

File: processor/src/test/java/com/example/objects2/OuterDummy.java
Patch:
@@ -2,6 +2,7 @@
 
 public class OuterDummy {
 
+  @SuppressWarnings("ClassCanBeStatic")
   public class InnerDummy {
     
   }

File: processor/src/test/java/org/robolectric/annotation/processing/validator/SingleClassSubject.java
Patch:
@@ -89,6 +89,7 @@ public SingleFileClause withNoErrorContaining(final String messageFragment) {
       return this;
     }
     
+    @Override
     public SingleFileClause and() {
       return this;
     }

File: resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -73,7 +73,7 @@ public static ResName qualifyResName(@Nonnull String possiblyQualifiedResourceNa
       name = possiblyQualifiedResourceName.substring(indexOfSlash + 1);
     }
 
-    if ((type == null && defaultType == null) || packageName == null && defaultPackageName == null) {
+    if ((type == null && defaultType == null) || (packageName == null && defaultPackageName == null)) {
       return null;
     }
 

File: resources/src/main/java/org/robolectric/res/ResourceIdGenerator.java
Patch:
@@ -11,7 +11,7 @@ public class ResourceIdGenerator {
   private final Map<String, TypeTracker> typeInfo = new HashMap<>();
   private int packageIdentifier;
 
-  private class TypeTracker {
+  private static class TypeTracker {
     private int typeIdentifier;
     private int currentMaxEntry;
 

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -490,7 +490,7 @@ private PackageResourceTable getAppResourceTable(final AndroidManifest appManife
   }
 
   private static class MethodPassThrough extends Config.Implementation {
-    private FrameworkMethod method;
+    private final FrameworkMethod method;
 
     private MethodPassThrough(FrameworkMethod method, int[] sdk, int minSdk, int maxSdk, String manifest, String qualifiers, String packageName, String abiSplit, String resourceDir, String assetDir, String buildDir, Class<?>[] shadows, String[] instrumentedPackages, Class<? extends Application> application, String[] libraries, Class<?> constants) {
       super(sdk, minSdk, maxSdk, manifest, qualifiers, packageName, abiSplit, resourceDir, assetDir, buildDir, shadows, instrumentedPackages, application, libraries, constants);

File: robolectric/src/main/java/org/robolectric/internal/dependency/CachedDependencyResolver.java
Patch:
@@ -113,7 +113,7 @@ static class FileCache implements Cache {
     public <T extends Serializable> T load(String id, Class<T> type) {
       try {
         File file = new File(dir, id);
-        if (!file.exists() || validTime > 0 && file.lastModified() < new Date().getTime() - validTime) {
+        if (!file.exists() || (validTime > 0 && file.lastModified() < new Date().getTime() - validTime)) {
           return null;
         }
 

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric;
 
 import static com.google.common.collect.ImmutableMap.of;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.annotation.Config.DEFAULT_APPLICATION;
 
@@ -175,7 +176,7 @@ private Config configFor(Class<?> testClass, String methodName, final Map<String
       @Override
       InputStream getResourceAsStream(String resourceName) {
         String properties = configProperties.get(resourceName);
-        return properties == null ? null : new ByteArrayInputStream(properties.getBytes());
+        return properties == null ? null : new ByteArrayInputStream(properties.getBytes(UTF_8));
       }
     }.getConfig(testClass, info, globalConfig);
   }

File: robolectric/src/test/java/org/robolectric/ManifestFactoryTest.java
Patch:
@@ -65,7 +65,7 @@ public void whenBuildSystemApiPropertiesFileIsPresent_shouldUseDefaultManifestFa
     properties.setProperty("android_merged_assets", "/path/to/merged-assets");
 
     RobolectricTestRunner testRunner = new RobolectricTestRunner(ManifestFactoryTest.class) {
-      Properties getBuildSystemApiProperties() {
+      @Override Properties getBuildSystemApiProperties() {
         return properties;
       }
     };
@@ -95,7 +95,7 @@ public void whenConfigSpecified_overridesValuesFromFile() throws Exception {
     properties.setProperty("android_merged_assets", "/path/to/merged-assets");
 
     RobolectricTestRunner testRunner = new RobolectricTestRunner(ManifestFactoryTest.class) {
-      Properties getBuildSystemApiProperties() {
+      @Override Properties getBuildSystemApiProperties() {
         return properties;
       }
     };

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -187,7 +187,7 @@ public void testResourceNotFound() {
   }
 
   /** Can't use Mockito for classloader issues */
-  class ThrowingManifest extends AndroidManifest {
+  static class ThrowingManifest extends AndroidManifest {
     public ThrowingManifest() {
       super(null, null, null);
     }

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -162,7 +162,7 @@ public void setOnActionExpandListener_shouldReturnMenuItem() throws Exception {
     assertThat(item.setOnActionExpandListener(listener)).isSameAs(item);
   }
 
-  class TestOnActionExpandListener implements MenuItem.OnActionExpandListener {
+  static class TestOnActionExpandListener implements MenuItem.OnActionExpandListener {
     private boolean expanded = false;
 
     @Override

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowMapTest.java
Patch:
@@ -54,7 +54,7 @@ public class ShadowMapTest {
     assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
   }
 
-  class CursorAdapter {
+  static class CursorAdapter {
   }
 
 }

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.res.builder;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertTrue;
@@ -75,7 +76,7 @@ private void forgeAndOpenDocument(String xmlValue) {
       factory.setIgnoringElementContentWhitespace(true);
       DocumentBuilder documentBuilder = factory.newDocumentBuilder();
       Document document = documentBuilder.parse(
-          new ByteArrayInputStream(xmlValue.getBytes()));
+          new ByteArrayInputStream(xmlValue.getBytes(UTF_8)));
 
       parser = new XmlResourceParserImpl(document, "file", R.class.getPackage().getName(),
           TEST_PACKAGE, resourceTable);

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -918,7 +919,7 @@ public void shouldGetBlobFromString() {
         Cursor data = database.query("table_name", new String[]{"first_column"}, null, null, null, null, null);
         assertThat(data.getCount()).isEqualTo(1);
         data.moveToFirst();
-        assertThat(data.getBlob(0)).isEqualTo(values.getAsString("first_column").getBytes());
+        assertThat(data.getBlob(0)).isEqualTo(values.getAsString("first_column").getBytes(UTF_8));
     }
 
     /////////////////////

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -221,7 +221,7 @@ private static void assertDatabaseOpened(SQLiteDatabase database, TestOpenHelper
     assertThat(helper.onUpgradeCalled).isFalse();
   }
 
-  private class TestOpenHelper extends SQLiteOpenHelper {
+  private static class TestOpenHelper extends SQLiteOpenHelper {
     public boolean onCreateCalled;
     public boolean onUpgradeCalled;
     public boolean onOpenCalled;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -150,6 +151,7 @@ public void testCloseShouldCloseUnderlyingPreparedStatement() throws Exception {
     insertStatement.close();
     try {
       insertStatement.executeInsert();
+      fail();
     } catch (Exception e) {
       assertThat(e).isInstanceOf(IllegalStateException.class);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -219,7 +219,7 @@ public void testIsClosedWhenAfterCallingClose() {
     assertThat(cursor.isClosed()).isTrue();
   }
 
-  private class TestCursor extends AbstractCursor {
+  private static class TestCursor extends AbstractCursor {
 
     public List<Object> theTable = new ArrayList<>();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -37,6 +37,7 @@ public void verifyContext() {
   }
 
   @Test
+  @SuppressWarnings("BoxedPrimitiveConstructor")
   public void verifyListContent() {
     assertEquals(3, arrayAdapter.getCount());
     assertEquals(new Integer(1), arrayAdapter.getItem(0));
@@ -49,7 +50,7 @@ public void usesTextViewResourceIdToSetTextWithinListItemView() throws Exception
     ListView parent = new ListView(RuntimeEnvironment.application);
     ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(RuntimeEnvironment.application, R.layout.main, R.id.title, new String[] { "first value" });
     View listItemView = arrayAdapter.getView(0, null, parent);
-    TextView titleTextView = (TextView) listItemView.findViewById(R.id.title);
+    TextView titleTextView = listItemView.findViewById(R.id.title);
     assertEquals("first value", titleTextView.getText().toString());
   }
 
@@ -87,6 +88,7 @@ public void shouldClear() throws Exception {
   }
 
   @Test
+  @SuppressWarnings("BoxedPrimitiveConstructor")
   public void test_remove() throws Exception {
     Integer firstItem = arrayAdapter.getItem(0);
     assertEquals(3, arrayAdapter.getCount());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java
Patch:
@@ -200,7 +200,7 @@ protected void onCancelled() {
     }
   }
 
-  public class ImmediateExecutor implements Executor {
+  public static class ImmediateExecutor implements Executor {
     @Override
     public void execute(Runnable command) {
       command.run();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -61,7 +62,7 @@ public void draw_shouldCopyDescriptionToCanvas() throws Exception {
 
   @Test
   public void shouldInheritSourceStringFromDrawableDotCreateFromStream() throws Exception {
-    InputStream emptyInputStream = new ByteArrayInputStream("".getBytes());
+    InputStream emptyInputStream = new ByteArrayInputStream("".getBytes(UTF_8));
     BitmapDrawable drawable = (BitmapDrawable) Drawable.createFromStream(emptyInputStream, "source string value");
     assertThat(shadowOf(drawable).getSource()).isEqualTo("source string value");
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Shadows.shadowOf;
@@ -177,7 +178,7 @@ public void decodeByteArray_shouldGetWidthAndHeightFromHints() throws Exception
     String data = "arbitrary bytes";
     ShadowBitmapFactory.provideWidthAndHeightHints(Uri.parse(data), 123, 456);
 
-    byte[] bytes = data.getBytes();
+    byte[] bytes = data.getBytes(UTF_8);
     Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
     assertEquals("Bitmap for " + data, shadowOf(bitmap).getDescription());
     assertEquals(123, bitmap.getWidth());
@@ -189,7 +190,7 @@ public void decodeByteArray_shouldIncludeOffsets() throws Exception {
     String data = "arbitrary bytes";
     ShadowBitmapFactory.provideWidthAndHeightHints(Uri.parse(data), 123, 456);
 
-    byte[] bytes = data.getBytes();
+    byte[] bytes = data.getBytes(UTF_8);
     Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 1, bytes.length - 2);
     assertEquals("Bitmap for " + data + " bytes 1..13", shadowOf(bitmap).getDescription());
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentObserverTest.java
Patch:
@@ -46,7 +46,7 @@ public void testDispatchChangeBoolean() {
     assertThat(observer.selfChange).isTrue();
   }
 
-  private class TestContentObserver extends ContentObserver {
+  private static class TestContentObserver extends ContentObserver {
 
     public TestContentObserver(Handler handler) {
       super(handler);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetView() {
     assertThat(adapter.getCursor()).isNotSameAs(curs);
   }
 
-  private class TestAdapter extends CursorAdapter {
+  private static class TestAdapter extends CursorAdapter {
 
     public TestAdapter(Cursor curs) {
       super(RuntimeEnvironment.application, curs, false);
@@ -119,7 +119,7 @@ public View newView(Context context, Cursor cursor, ViewGroup parent) {
     }
   }
 
-  private class TestAdapterWithFlags extends CursorAdapter {
+  private static class TestAdapterWithFlags extends CursorAdapter {
     public TestAdapterWithFlags(Cursor c, int flags) {
       super(RuntimeEnvironment.application, c, flags);
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -24,7 +24,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {
 
-  private class ForwardVerifier {
+  private static class ForwardVerifier {
 
     final Cursor mockCursor;
     final CursorWrapper cursorWrapper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentServiceTest.java
Patch:
@@ -22,7 +22,7 @@ public void shouldSetIntentRedelivery() {
     assertThat(shadowIntentService.getIntentRedelivery()).isFalse();
   }
 
-  private class TestIntentService extends IntentService {
+  private static class TestIntentService extends IntentService {
     public TestIntentService() {
       super("TestIntentService");
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -492,7 +492,7 @@ public int hashCode() {
     }
   }
 
-  private class TestCharSequence implements CharSequence {
+  private static class TestCharSequence implements CharSequence {
     String s;
 
     public TestCharSequence(String s) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationManagerTest.java
Patch:
@@ -502,7 +502,7 @@ public void onProviderDisabled(String s) {
     }
   }
 
-  private class TestGpsListener implements Listener {
+  private static class TestGpsListener implements Listener {
 
     @Override
     public void onGpsStatusChanged(int event) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLogTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -154,11 +155,11 @@ public void shouldLogToProvidedStream() throws Exception {
     try {
       ShadowLog.stream = new PrintStream(bos);
       Log.d("tag", "msg");
-      assertThat(new String(bos.toByteArray())).isEqualTo("D/tag: msg" + System.getProperty("line.separator"));
+      assertThat(new String(bos.toByteArray(), UTF_8)).isEqualTo("D/tag: msg" + System.getProperty("line.separator"));
 
 
       Log.w("tag", new RuntimeException());
-      assertTrue(new String(bos.toByteArray()).contains("RuntimeException"));
+      assertTrue(new String(bos.toByteArray(), UTF_8).contains("RuntimeException"));
     } finally {
       ShadowLog.stream = old;
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -218,13 +218,13 @@ public void testRelease() throws Exception {
     assertThat(shadowMediaRecorder.getState()).isEqualTo(ShadowMediaRecorder.STATE_RELEASED);
   }
 
-  private class TestErrorListener implements MediaRecorder.OnErrorListener {
+  private static class TestErrorListener implements MediaRecorder.OnErrorListener {
     @Override
     public void onError(MediaRecorder arg0, int arg1, int arg2) {
     }
   }
 
-  private class TestInfoListener implements MediaRecorder.OnInfoListener {
+  private static class TestInfoListener implements MediaRecorder.OnInfoListener {
     @Override
     public void onInfo(MediaRecorder mr, int what, int extra) {
     }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -641,7 +641,7 @@ public void testReceiverInfo() throws Exception {
 
     metaValue = meta.get("org.robolectric.metaFloat");
     assertTrue(Float.class.isInstance(metaValue));
-    assertEquals(new Float(1.23), metaValue);
+    assertEquals(1.23f, metaValue);
 
     metaValue = meta.get("org.robolectric.metaColor");
     assertTrue(Integer.class.isInstance(metaValue));
@@ -813,7 +813,7 @@ public void shouldAssignTheAppMetaDataFromTheManifest() throws Exception {
 
     metaValue = meta.get("org.robolectric.metaFloat");
     assertTrue(Float.class.isInstance(metaValue));
-    assertEquals(new Float(1.23), metaValue);
+    assertEquals(1.23f, metaValue);
 
     metaValue = meta.get("org.robolectric.metaColor");
     assertTrue(Integer.class.isInstance(metaValue));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -103,7 +103,7 @@ public void shouldReturnASensorList() throws Exception {
     assertThat(sensorManager.getSensorList(0)).isNotNull();
   }
 
-  private class TestSensorEventListener implements SensorEventListener {
+  private static class TestSensorEventListener implements SensorEventListener {
 
     @Override
     public void onAccuracyChanged(Sensor sensor, int accuracy) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.buildActivity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -144,19 +144,19 @@ public void shouldSeekToSpecifiedPosition() throws Exception {
     assertThat(view.getCurrentPosition()).isEqualTo(10000);
   }
 
-  private class TestPreparedListener implements MediaPlayer.OnPreparedListener {
+  private static class TestPreparedListener implements MediaPlayer.OnPreparedListener {
     @Override
     public void onPrepared(MediaPlayer mp) {}
   }
 
-  private class TestErrorListener implements MediaPlayer.OnErrorListener  {
+  private static class TestErrorListener implements MediaPlayer.OnErrorListener  {
     @Override
     public boolean onError(MediaPlayer mp, int what, int extra) {
       return false;
     }
   }
 
-  private class TestCompletionListener implements MediaPlayer.OnCompletionListener {
+  private static class TestCompletionListener implements MediaPlayer.OnCompletionListener {
     @Override
     public void onCompletion(MediaPlayer mp) {}
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -390,7 +390,7 @@ private void makeFocusable(View... views) {
     }
   }
 
-  class TestOnHierarchyChangeListener implements ViewGroup.OnHierarchyChangeListener {
+  static class TestOnHierarchyChangeListener implements ViewGroup.OnHierarchyChangeListener {
     boolean wasCalled = false;
 
     @Override

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.util;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.ByteArrayInputStream;
@@ -69,7 +70,7 @@ public void shouldRewriteExistingLibraryIfThereAreChanges() throws Exception {
     loader.getNativeLibraryPath().getParentFile().mkdirs();
 
     SQLiteLibraryLoader.copy(
-        new ByteArrayInputStream("changed".getBytes()),
+        new ByteArrayInputStream("changed".getBytes(UTF_8)),
         new FileOutputStream(loader.getNativeLibraryPath()));
     long firstSize = loader.getNativeLibraryPath().length();
 

File: sandbox/src/main/java/org/robolectric/internal/bytecode/RoboType.java
Patch:
@@ -16,7 +16,7 @@ enum RoboType {
     this.type = type;
   }
 
-  private Class type;
+  private final Class type;
 
   public static Class findPrimitiveClass(String name) {
     for (RoboType type : RoboType.values()) {

File: sandbox/src/main/java/org/robolectric/internal/bytecode/ShadowMap.java
Patch:
@@ -71,6 +71,7 @@ public static ShadowInfo getShadowInfo(Class<?> clazz) {
     return new ShadowInfo(className, new ShadowConfig(clazz.getName(), annotation));
   }
 
+  @SuppressWarnings("ReferenceEquality")
   public Set<String> getInvalidatedClasses(ShadowMap previous) {
     if (this == previous) return Collections.emptySet();
 

File: sandbox/src/test/java/org/robolectric/ShadowWranglerIntegrationTest.java
Patch:
@@ -210,6 +210,7 @@ public String get() {
 
   @Instrument
   public static class Child extends Parent {
+    @Override
     public String get() {
       return "from child (" + super.get() + ")";
     }

File: sandbox/src/test/java/org/robolectric/internal/bytecode/ProxyMakerTest.java
Patch:
@@ -48,7 +48,7 @@ public void cachesProxyClass() {
     assertThat(proxy1.getClass()).isSameAs(proxy2.getClass());
   }
 
-  public class Thing {
+  public static class Thing {
     public Thing() {
       throw new UnsupportedOperationException();
     }

File: shadowapi/src/main/java/org/robolectric/shadow/api/Shadow.java
Patch:
@@ -10,7 +10,7 @@ public class Shadow {
   static {
     try {
       SHADOW_IMPL = Class.forName("org.robolectric.internal.bytecode.ShadowImpl")
-          .asSubclass(IShadow.class).newInstance();
+          .asSubclass(IShadow.class).getDeclaredConstructor().newInstance();
     } catch (Exception e) {
       throw new RuntimeException(e);
     }

File: shadowapi/src/test/java/org/robolectric/util/ReflectionHelpersTest.java
Patch:
@@ -279,7 +279,7 @@ private static class ExampleBase {
     private int notOverridden;
     protected int overridden;
 
-    private static final int BASE = new Integer(8);
+    private static final int BASE = 8;
 
     public int getNotOverridden() {
       return notOverridden;

File: shadows/framework/src/main/java/org/robolectric/fakes/RoboCursor.java
Patch:
@@ -186,6 +186,7 @@ public boolean isLast() {
     return extras;
   }
 
+  @Override
   public void setExtras(Bundle extras) {
     this.extras = extras;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -920,9 +920,8 @@ public boolean performAction(int action, Bundle arguments) {
       performedActionAndArgsList = new LinkedList<>();
     }
 
-    performedActionAndArgsList.add(new Pair<Integer, Bundle>(new Integer(action), arguments));
-    return (actionListener != null) ? actionListener.onPerformAccessibilityAction(action, arguments)
-      : true;
+    performedActionAndArgsList.add(new Pair<>(action, arguments));
+    return actionListener == null || actionListener.onPerformAccessibilityAction(action, arguments);
   }
 
   private boolean childrenEqualityCheck(
@@ -1219,6 +1218,7 @@ public StrictEqualityNodeWrapper(AccessibilityNodeInfo info) {
     }
 
     @Override
+    @SuppressWarnings("ReferenceEquality")
     public boolean equals(Object object) {
       if (object == null) {
         return false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -517,7 +517,7 @@ public boolean clickMenuItem(int menuItemResId) {
    * Container object to hold an Intent, together with the requestCode used
    * in a call to {@code Activity.startActivityForResult(Intent, int)}
    */
-  public class IntentForResult {
+  public static class IntentForResult {
     public Intent intent;
     public int requestCode;
     public Bundle options;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAlarmManager.java
Patch:
@@ -122,7 +122,7 @@ public void cancel(PendingIntent pendingIntent) {
    * Container object to hold an PendingIntent, together with the alarm
    * parameters used in a call to {@code AlarmManager}
    */
-  public class ScheduledAlarm {
+  public static class ScheduledAlarm {
     public int type;
     public long triggerAtTime;
     public long interval;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -257,7 +257,7 @@ public void setValidWidgetProviderComponentName(boolean validWidgetProviderCompo
     this.validWidgetProviderComponentName = validWidgetProviderComponentName;
   }
 
-  private class WidgetInfo {
+  private static class WidgetInfo {
     View view;
     int layoutId;
     final AppWidgetProvider appWidgetProvider;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -741,7 +741,7 @@ public void setLatestListPopupWindow(ListPopupWindow latestListPopupWindow) {
     this.latestListPopupWindow = latestListPopupWindow;
   }
 
-  public class Wrapper {
+  public static class Wrapper {
     public BroadcastReceiver broadcastReceiver;
     public IntentFilter intentFilter;
     public Context context;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -453,7 +453,7 @@ private static float distanceBetween(Location location1, Location location2) {
 
     int meterConversion = 1609;
 
-    return new Float(dist * meterConversion);
+    return (float) (dist * meterConversion);
   }
 
   public Map<PendingIntent, Criteria> getRequestLocationUdpateCriteriaPendingIntents() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -368,7 +368,7 @@ public boolean rectStaysRect() {
       final float m01 = mValues[1];
       final float m10 = mValues[3];
       final float m11 = mValues[4];
-      return m00 == 0 && m11 == 0 && m01 != 0 && m10 != 0 || m00 != 0 && m11 != 0 && m01 == 0 && m10 == 0;
+      return (m00 == 0 && m11 == 0 && m01 != 0 && m10 != 0) || (m00 != 0 && m11 != 0 && m01 == 0 && m10 == 0);
     }
 
     public void getValues(float[] values) {
@@ -490,7 +490,7 @@ public PointF transform(PointF point) {
 
     @Override
     public boolean equals(Object o) {
-      return this == o || o instanceof SimpleMatrix && equals((SimpleMatrix) o);
+      return this == o || (o instanceof SimpleMatrix && equals((SimpleMatrix) o));
     }
 
     public boolean equals(SimpleMatrix matrix) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -13,7 +13,7 @@
 public class ShadowMimeTypeMap {
   private final Map<String, String> extensionToMimeTypeMap = new HashMap<>();
   private final Map<String, String> mimeTypeToExtensionMap = new HashMap<>();
-  private static MimeTypeMap singleton = null;
+  private static volatile MimeTypeMap singleton = null;
   private static final Object singletonLock = new Object();
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -29,7 +29,7 @@ public class ShadowPackageInstaller {
   private Map<Integer, PackageInstaller.Session> sessions = new HashMap<>();
   private Set<CallbackInfo> callbackInfos = new HashSet<>();
 
-  private class CallbackInfo {
+  private static class CallbackInfo {
     PackageInstaller.SessionCallback callback;
     Handler handler;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowRemoteCallbackList.java
Patch:
@@ -10,7 +10,7 @@
 
 @Implements(RemoteCallbackList.class)
 public class ShadowRemoteCallbackList<E extends IInterface> {
-  private HashMap<IBinder, Callback> callbacks = new HashMap<>();
+  private final HashMap<IBinder, Callback> callbacks = new HashMap<>();
   private Object[] activeBroadcast;
   private int broadcastCount = -1;
   private boolean killed = false;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -290,7 +290,7 @@ public void setSimCallManager(PhoneAccountHandle simCallManager) {
     this.simCallManager = simCallManager;
   }
 
-  public class CallRecord {
+  public static class CallRecord {
     public final PhoneAccountHandle phoneAccount;
     public final Bundle bundle;
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -78,7 +78,7 @@ public static void dump(TypedArray typedArray) {
     System.out.println(result.toString());
   }
 
-  private static final Map<Integer, String> TYPE_MAP = ImmutableMap.<Integer, String>builder()
+  private static final ImmutableMap<Integer, String> TYPE_MAP = ImmutableMap.<Integer, String>builder()
           .put(TypedValue.TYPE_NULL, "TYPE_NULL")
           .put(TypedValue.TYPE_REFERENCE, "TYPE_REFERENCE")
           .put(TypedValue.TYPE_ATTRIBUTE, "TYPE_ATTRIBUTE")

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -356,7 +356,7 @@ public LoadDataWithBaseURL getLastLoadDataWithBaseURL() {
 
   public static void setWebContentsDebuggingEnabled(boolean enabled) { }
 
-  public class LoadDataWithBaseURL {
+  public static class LoadDataWithBaseURL {
     public final String baseUrl;
     public final String data;
     public final String mimeType;
@@ -372,7 +372,7 @@ public LoadDataWithBaseURL(String baseUrl, String data, String mimeType, String
     }
   }
 
-  public class LoadData {
+  public static class LoadData {
     public final String data;
     public final String mimeType;
     public final String encoding;

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/AndroidHttpClientTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows.httpclient;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.net.http.AndroidHttpClient;
@@ -34,7 +35,7 @@ public void testExecute() throws IOException {
     FakeHttp.addPendingHttpResponse(200, "foo");
     HttpResponse resp = client.execute(new HttpGet("/foo"));
     assertThat(resp.getStatusLine().getStatusCode()).isEqualTo(200);
-    assertThat(CharStreams.toString(new InputStreamReader(resp.getEntity().getContent())))
+    assertThat(CharStreams.toString(new InputStreamReader(resp.getEntity().getContent(), UTF_8)))
         .isEqualTo("foo");
   }
 }
\ No newline at end of file

File: shadows/playservices/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import android.app.Activity;

File: utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -353,7 +353,7 @@ private ScheduledRunnable(Runnable runnable, long scheduledTime) {
 
     @Override
     public int compareTo(ScheduledRunnable runnable) {
-      return (int) (scheduledTime - runnable.scheduledTime);
+      return Long.compare(scheduledTime, runnable.scheduledTime);
     }
 
     public void run() {

File: resources/src/main/java/org/robolectric/res/android/CppAssetManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res.android;
 
-import static java.lang.System.getenv;
 import static org.robolectric.res.android.CppAssetManager.FileType.kFileTypeDirectory;
 import static org.robolectric.res.android.Util.ALOGD;
 import static org.robolectric.res.android.Util.ALOGE;
@@ -11,6 +10,7 @@
 import static org.robolectric.res.android.Util.LOG_FATAL_IF;
 import static org.robolectric.res.android.Util.isTruthy;
 
+import com.google.common.base.Preconditions;
 import java.io.File;
 import java.io.IOException;
 import java.lang.ref.WeakReference;
@@ -24,8 +24,6 @@
 import java.util.Objects;
 import java.util.zip.ZipEntry;
 import javax.annotation.Nullable;
-
-import com.google.common.base.Preconditions;
 import org.robolectric.res.android.Asset.AccessMode;
 import org.robolectric.res.android.AssetDir.FileInfo;
 import org.robolectric.res.android.ZipFileRO.ZipEntryRO;

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -14,6 +14,8 @@
 import java.util.Map;
 import org.robolectric.res.android.ResourceTypes.ResStringPool_header.Writer;
 
+// transliterated from https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r13/libs/androidfw/ResourceTypes.cpp
+//   and https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r13/include/androidfw/ResourceTypes.h
 public class ResourceTypes {
   public static final String ANDROID_NS = "http://schemas.android.com/apk/res/android";
   public static final String AUTO_NS = "http://schemas.android.com/apk/res-auto";

File: resources/src/main/java/org/robolectric/res/android/Util.java
Patch:
@@ -68,8 +68,8 @@ static void ALOGE(String message, Object... args) {
     System.out.println("ERROR: " + String.format(message, args));
   }
 
-  static void LOG_FATAL_IF(boolean assertion, String message) {
-    assert !assertion : message;
+  static void LOG_FATAL_IF(boolean assertion, String message, Object... args) {
+    assert !assertion : String.format(message, args);
   }
 
   static void ATRACE_CALL() {

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -320,12 +320,12 @@ public String stringAt(int idx) {
 //            if (mCache == NULL) {
 //#ifndef __ANDROID__
 //              if (kDebugStringPoolNoisy) {
-//                ALOGI("CREATING STRING CACHE OF %zu bytes",
+//                ALOGI("CREATING STRING CACHE OF 0x%x bytes",
 //                    mHeader.stringCount*sizeof(char16_t**));
 //              }
 //#else
 //              // We do not want to be in this case when actually running Android.
-//              ALOGW("CREATING STRING CACHE OF %zu bytes",
+//              ALOGW("CREATING STRING CACHE OF 0x%x bytes",
 //                  static_cast<size_t>(mHeader.stringCount*sizeof(char16_t**)));
 //#endif
 //                  mCache = (char16_t**)calloc(mHeader.stringCount, sizeof(char16_t**));

File: resources/src/main/java/org/robolectric/res/android/ResTableTheme.java
Patch:
@@ -165,7 +165,7 @@ public int applyStyle(int resID, boolean force) {
     styles.add(newAppliedStyle);
 
     final Ref<bag_entry[]> bag = new Ref<>(null);
-    Ref<Integer> bagTypeSpecFlags = new Ref(0);
+    Ref<Integer> bagTypeSpecFlags = new Ref<>(0);
     mTable.lock();
     final int N = mTable.getBagLocked(resID, bag, bagTypeSpecFlags);
     if (kDebugTableNoisy) {

File: resources/src/main/java/org/robolectric/res/android/ResXMLTree.java
Patch:
@@ -62,7 +62,7 @@ public ResXMLTree(DynamicRefTable dynamicRefTable) {
     mOwnedData = null;
 
     if (kDebugResXMLTree) {
-      ALOGI("Creating ResXMLTree %p #%d\n", this, gCount.getAndIncrement()+1);
+      ALOGI("Creating ResXMLTree %s #%d\n", this, gCount.getAndIncrement()+1);
     }
     mParser.restart();
   }
@@ -75,7 +75,7 @@ public ResXMLTree(DynamicRefTable dynamicRefTable) {
 //  {
   protected void finalize() {
     if (kDebugResXMLTree) {
-      ALOGI("Destroying ResXMLTree in %p #%d\n", this, gCount.getAndDecrement()-1);
+      ALOGI("Destroying ResXMLTree in %s #%d\n", this, gCount.getAndDecrement()-1);
     }
     uninit();
   }
@@ -137,7 +137,7 @@ public int setTo(byte[] data, int size, boolean copyData)
       final short type = dtohs(chunk.type);
       final int size1 = dtohl(chunk.size);
       if (kDebugXMLNoisy) {
-//        System.out.println(String.format("Scanning @ %p: type=0x%x, size=0x%zx\n",
+//        System.out.println(String.format("Scanning @ %s: type=0x%x, size=0x%zx\n",
 //            (void*)(((uintptr_t)chunk)-((uintptr_t)mHeader)), type, size1);
       }
       if (type == RES_STRING_POOL_TYPE) {

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -746,9 +746,8 @@ public static class ResXMLTree_endElementExt
     final ResStringPool_ref name;
 
     public ResXMLTree_endElementExt(ByteBuffer buf, int offset) {
-      throw new UnsupportedOperationException();
-//      this.ns = throw new UnsupportedOperationException();
-//      this.name = name;
+      this.ns = new ResStringPool_ref(buf, offset);
+      this.name = new ResStringPool_ref(buf, offset + ResStringPool_ref.SIZEOF);
     }
 
     public static class Writer {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -284,6 +284,7 @@ protected void beforeTest(Sandbox sandbox, FrameworkMethod method, Method bootst
     SdkConfig sdkConfig = roboMethod.sdkConfig;
     Class<?> androidBuildVersionClass = (sdkEnvironment).bootstrappedClass(Build.VERSION.class);
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "SDK_INT", sdkConfig.getApiLevel());
+    ReflectionHelpers.setStaticField(androidBuildVersionClass, "RESOURCES_SDK_INT", sdkConfig.getApiLevel());
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "RELEASE", sdkConfig.getAndroidVersion());
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "CODENAME", sdkConfig.getAndroidCodeName());
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowXmlBlock.java
Patch:
@@ -71,8 +71,7 @@ public static long nativeCreateParseState(long obj) {
 //      return 0;
 //    }
 
-//    ResXMLParser st = new ResXMLParser(osb);
-    ResXMLParser st = osb.mParser;
+    ResXMLParser st = new ResXMLParser(osb);
 //    if (st == NULL) {
 //      jniThrowException(env, "java/lang/OutOfMemoryError", NULL);
 //      return 0;
@@ -90,7 +89,7 @@ public static int nativeNext(int state) throws XmlPullParserException {
 
   @Implementation(minSdk = VERSION_CODES.LOLLIPOP)
   public static int nativeNext(long state) throws XmlPullParserException {
-    ResXMLTree st = NATIVE_RES_XML_TREES.getNativeObject(state);
+    ResXMLParser st = getResXMLParser(state);
     if (st == null) {
       return ResXMLParser.event_code_t.END_DOCUMENT;
     }

File: resources/src/main/java/org/robolectric/res/android/Asset.java
Patch:
@@ -711,7 +711,7 @@ public int read(byte[] buf, int bufOffset, int count) {
         count = maxLen;
 
       if (!isTruthy(count)) {
-        return -1;
+        return 0;
       }
 
       if (mMap != null) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -614,7 +614,7 @@ public final int readAssetChar(long asset) {
     Asset a = getAsset(asset);
     byte[] b = new byte[1];
     int res = a.read(b, 1);
-    return res == 1 ? b[0] : -1;
+    return res == 1 ? b[0] & 0xff : -1;
   }
 
   @HiddenApi

File: resources/src/main/java/org/robolectric/res/android/ResTableConfig.java
Patch:
@@ -528,6 +528,8 @@ public final int screenLayoutRound() {
     return screenLayout & SCREENLAYOUT_ROUND_MASK;
   }
 
+  public int colorMode;
+
   public int uiMode;
 
   public final int uiModeType() {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -68,7 +68,7 @@ public class ShadowArscAssetManager {
   private static NativeObjRegistry<ResXMLParser> nativeXMLParserRegistry = new NativeObjRegistry<>();
   private static NativeObjRegistry<Asset> nativeAssetRegistry = new NativeObjRegistry<>();
 
-  static boolean isLegacyAssetManager(AssetManager assets) {
+  public static boolean isLegacyAssetManager(AssetManager assets) {
     return Shadow.extract(assets) instanceof ShadowAssetManager;
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -49,6 +49,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.robolectric.Robolectric.buildActivity;
+import static org.robolectric.Robolectric.setupActivity;
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
@@ -685,7 +686,7 @@ public void performHapticFeedback_shouldSetLastPerformedHapticFeedback() throws
 
   @Test
   public void canAssertThatSuperDotOnLayoutWasCalledFromViewSubclasses() throws Exception {
-    TestView2 view = new TestView2(buildActivity(Activity.class).create().get(), 1111, 1112);
+    TestView2 view = new TestView2(setupActivity(Activity.class), 1111, 1112);
     assertThat(shadowOf(view).onLayoutWasCalled()).isFalse();
     view.onLayout(true, 1, 2, 3, 4);
     assertThat(shadowOf(view).onLayoutWasCalled()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -38,7 +38,6 @@
 import static org.robolectric.shadows.ShadowArscAssetManager.isLegacyAssetManager;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
-@Config(sdk = VERSION_CODES.N_MR1)
 public class ShadowAssetManagerTest {
 
   @Rule
@@ -69,7 +68,7 @@ public void assertGetAssetsNotNull() {
 
   @Test
   public void assetsPathListing() throws IOException {
-    assertThat(assetManager.list("")).containsExactlyInAnyOrder("assetsHome.txt", "deflatedAsset.xml", "docs", "myFont.ttf", "images", "sounds", "webkit");
+    assertThat(assetManager.list("")).contains("assetsHome.txt", "deflatedAsset.xml", "docs", "myFont.ttf", "images", "webkit");
 
     assertThat(assetManager.list("docs")).containsExactlyInAnyOrder("extra");
 

File: resources/src/main/java/org/robolectric/res/android/Asset.java
Patch:
@@ -201,7 +201,7 @@ protected void registerAsset(Asset asset)
 {
   int gCount = 0;
     synchronized (gAssetLock) {
-      gAssets.add(asset);
+//      gAssets.add(asset);
       gCount = gAssets.size();
     }
   if (kIsDebug) {
@@ -213,7 +213,7 @@ protected void registerAsset(Asset asset)
   protected void unregisterAsset(Asset asset) {
   int gCount = 0;
   synchronized (gAssetLock) {
-    gAssets.remove(asset);
+//    gAssets.remove(asset);
     gCount = gAssets.size();
   }
   if (kIsDebug) {

File: resources/src/main/java/org/robolectric/res/android/ResourceTypes.java
Patch:
@@ -536,7 +536,7 @@ public void write(ByteBuffer buf) {
             String string = strings.get(i);
             byte[] bytes = stringsAsBytes.get(i);
             buf.putInt(stringOffset);
-            stringOffset += lenLen(string.length()) + lenLen(bytes.length) + bytes.length;
+            stringOffset += lenLen(string.length()) + lenLen(bytes.length) + bytes.length + 1;
           }
 
           for (int i = 0; i < stringsAsBytes.size(); i++) {
@@ -548,6 +548,8 @@ public void write(ByteBuffer buf) {
 
             // bytes
             buf.put(stringsAsBytes.get(i));
+            // null terminator
+            buf.put((byte) '\0');
           }
         });
       }

File: resources/src/main/java/org/robolectric/res/android/BagAttributeFinder.java
Patch:
@@ -15,7 +15,7 @@ public BagAttributeFinder(bag_entry[] bag_entries, int bagEndIndex) {
 
   public bag_entry find(int curIdent) {
     for (int curIndex = bagEndIndex - 1; curIndex >= 0; curIndex--) {
-      if (bag_entries[curIndex].map.nameIdent == curIdent) {
+      if (bag_entries[curIndex].map.name.ident == curIdent) {
         return bag_entries[curIndex];
       }
     }

File: resources/src/main/java/org/robolectric/res/android/DynamicRefTable.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Objects;
+import org.robolectric.res.android.ResourceTypes.Res_value;
 
 /**
  * Holds the shared library ID table. Shared libraries are assigned package IDs at
@@ -129,7 +130,7 @@ int lookupResourceId(Ref<Integer> resId) {
     return NO_ERROR;
   }
 //
-  int lookupResourceValue(ResValue value) {
+  int lookupResourceValue(Res_value value) {
     byte resolvedType = DataType.REFERENCE.code();
     switch (DataType.fromCode(value.dataType)) {
       case ATTRIBUTE:

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -34,14 +34,14 @@
 import org.robolectric.res.ResName;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.res.android.DataType;
-import org.robolectric.res.android.ResValue;
 import org.robolectric.res.android.ResourceTypes.ResChunk_header;
 import org.robolectric.res.android.ResourceTypes.ResStringPool_header;
 import org.robolectric.res.android.ResourceTypes.ResStringPool_header.Writer;
 import org.robolectric.res.android.ResourceTypes.ResXMLTree_attrExt;
 import org.robolectric.res.android.ResourceTypes.ResXMLTree_endElementExt;
 import org.robolectric.res.android.ResourceTypes.ResXMLTree_header;
 import org.robolectric.res.android.ResourceTypes.ResXMLTree_node;
+import org.robolectric.res.android.ResourceTypes.Res_value;
 import org.robolectric.shadows.Converter;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.util.*;
@@ -301,7 +301,7 @@ public AttributeSet build() {
             }
 
             System.out.println(attrName + " type " + type + " value " + valueInt);
-            ResValue resValue = new ResValue(type.code(), valueInt);
+            Res_value resValue = new Res_value(type.code(), valueInt);
 
             int attrNameIndex = resStringPoolWriter.uniqueString(attrName);
             attr(resStringPoolWriter.string(attrNs), attrNameIndex,

File: shadows/framework/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -287,7 +287,7 @@ public boolean fillTypedValue(String data, TypedValue typedValue) {
   private static class FromDimen extends Converter<String> {
     @Override
     public boolean fillTypedValue(String data, TypedValue typedValue) {
-      return ResourceHelper.parseFloatAttribute(null, data, typedValue, false);
+      return ResourceHelper.parseFloatAttribute(null, data, typedValue, true);
     }
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ResourceHelper.java
Patch:
@@ -145,7 +145,7 @@ public static TypedValue getValue(String attribute, String value, boolean requir
    */
   public static boolean parseFloatAttribute(String attribute, String value,
       TypedValue outValue, boolean requireUnit) {
-    assert requireUnit == false || attribute != null;
+//    assert requireUnit == false || attribute != null;
 
     // remove the space before and after
     value = value.trim();
@@ -209,7 +209,7 @@ public static boolean parseFloatAttribute(String attribute, String value,
 
             System.out.println(String.format(
                 "Dimension \"%1$s\" in attribute \"%2$s\" is missing unit!",
-                    value, attribute));
+                    value, attribute == null ? "(unknown)" : attribute));
           }
           return true;
         }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -179,8 +179,8 @@ public void obtainTypedArray() throws Exception {
 
     assertThat(refsTypedArray.getResourceId(8, 0)).isEqualTo(R.array.typed_array_values);
     assertThat(refsTypedArray.getTextArray(8))
-        .containsExactly("abcdefg", "3875", "2.0", "#ffff00ff", "#00ffff", "8px",
-            "12dp", "6dip", "3mm", "4in", "36sp", "18pt");
+        .containsExactly("abcdefg", null, null, null, null, null,
+            null, null, null, null, null, null);
 
     assertThat(refsTypedArray.getResourceId(9, 0)).isEqualTo(R.style.Theme_Robolectric);
   }
@@ -739,7 +739,7 @@ public void obtainStyledAttributes_shouldCheckXmlFirst_fromXmlLoadedFromResource
         android.R.attr.viewportWidth,
         android.R.attr.viewportHeight
     }, 0, 0);
-    assertThat(typedArray.getFloat(0, 0)).isEqualTo(12.0f);
+    assertThat(typedArray.getFloat(0, 0)).isEqualTo(23.0f);
     assertThat(typedArray.getFloat(1, 0)).isEqualTo(24.0f);
     typedArray.recycle();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -100,7 +100,7 @@ public void openFd_shouldProvideFileDescriptorForAsset() throws Exception {
 
   @Test
   public void openNonAssetShouldOpenRealAssetFromResources() throws IOException {
-    InputStream inputStream = assetManager.openNonAsset(0, "./res/drawable/an_image.png", 0);
+    InputStream inputStream = assetManager.openNonAsset(0, "res/drawable/an_image.png", 0);
 
     ByteArrayInputStream byteArrayInputStream = (ByteArrayInputStream) inputStream;
     assertThat(byteArrayInputStream.available()).isEqualTo(6559);

File: robolectric/src/test/java/org/robolectric/AttributeSetBuilderTest.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Tests for {@link Robolectric#buildAttributeSet()}
  */
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class AttributeSetBuilderTest {
 
   private static final String ANDROID_NS = "http://schemas.android.com/apk/res/android";

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.robolectric.res.Fs;
 import org.robolectric.shadows.ShadowApplication;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class DefaultTestLifecycleTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();

File: robolectric/src/test/java/org/robolectric/IncludedDependenciesTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserFactory;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class IncludedDependenciesTest {
   @Test
   public void jsonShouldWork() throws Exception {

File: robolectric/src/test/java/org/robolectric/InvokeDynamicTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.internal.Instrument;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class InvokeDynamicTest {
   @Test
   @Config(shadows = {DoNothingShadow.class})

File: robolectric/src/test/java/org/robolectric/OverrideSdkVersionTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.shadows.ShadowApplication;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class OverrideSdkVersionTest {
   @Test
   public void whenNotOverridden_shouldUseTargetSdkVersionFromAppManifest() {

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Config;
 
 @Config(qualifiers = "en")
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class QualifiersTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/ResourceMergerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ResourceMergerTest {
   private final Resources resources = RuntimeEnvironment.application.getResources();
 

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.robolectric.shadows.ShadowView;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RobolectricTest {
 
   private PrintStream originalSystemOut;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerClassLoaderConfigTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.bytecode.SandboxClassLoader;
 import org.robolectric.test.DummyClass;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RobolectricTestRunnerClassLoaderConfigTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/TemporaryBindingsTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowView;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class TemporaryBindingsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/AndroidTranslatorClassInstrumentedTest.java
Patch:
@@ -6,13 +6,13 @@
 import android.graphics.Paint;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.internal.Instrument;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class AndroidTranslatorClassInstrumentedTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -5,10 +5,10 @@
 import android.content.Intent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.ShadowPackageManager.IntentComparator;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class DefaultPackageManagerIntentComparatorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DrawableResourceLoaderTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.SelfTest.class) // todo: @Config(sdk=ALL_SDKS) or something
+@RunWith(RobolectricTestRunner.class) // todo: @Config(sdk=ALL_SDKS) or something
 public class DrawableResourceLoaderTest {
   private Resources resources;
 

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -15,9 +15,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class FragmentTestUtilTest {
   @Test
   public void startFragment_shouldStartFragment() {

File: robolectric/src/test/java/org/robolectric/android/PreferenceIntegrationTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class PreferenceIntegrationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/ResourceLoaderTest.java
Patch:
@@ -10,12 +10,12 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.res.ResName;
 import org.robolectric.res.ResourceTable;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ResourceLoaderTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/ResourceTableFactoryIntegrationTest.java
Patch:
@@ -4,11 +4,12 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.ResName;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ResourceTableFactoryIntegrationTest {
   @Test
   public void shouldIncludeStyleableAttributesThatDoNotHaveACorrespondingEntryInAttrClass() throws Exception {

File: robolectric/src/test/java/org/robolectric/android/ShadowingTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowingTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/controller/ActivityControllerTest.java
Patch:
@@ -22,14 +22,14 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TestRunnable;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ActivityControllerTest {
   private static final List<String> transcript = new ArrayList<>();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyActivity.class.getName());

File: robolectric/src/test/java/org/robolectric/android/controller/BackupAgentControllerTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class BackupAgentControllerTest {
   private final BackupAgentController<MyBackupAgent> backupAgentController = Robolectric.buildBackupAgent(MyBackupAgent.class);
 

File: robolectric/src/test/java/org/robolectric/android/controller/ContentProviderControllerTest.java
Patch:
@@ -17,10 +17,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(sdk = 23)
 public class ContentProviderControllerTest {
   private final ContentProviderController<MyContentProvider> controller = Robolectric.buildContentProvider(MyContentProvider.class);

File: robolectric/src/test/java/org/robolectric/android/controller/FragmentControllerTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class FragmentControllerTest {
 
   private static final int VIEW_ID_CUSTOMIZED_LOGIN_ACTIVITY = 123;

File: robolectric/src/test/java/org/robolectric/android/controller/IntentServiceControllerTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class IntentServiceControllerTest {
   private static final List<String> transcript = new ArrayList<>();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyService.class.getName());

File: robolectric/src/test/java/org/robolectric/android/controller/ServiceControllerTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ServiceControllerTest {
   private static final List<String> transcript = new ArrayList<>();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyService.class.getName());

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.robolectric.RoboSettings;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.SdkConfig;
 import org.robolectric.manifest.AndroidManifest;
@@ -34,7 +34,7 @@
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowLooper;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ParallelUniverseTest {
 
   private ParallelUniverse pu;

File: robolectric/src/test/java/org/robolectric/android/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -11,11 +11,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboExecutorServiceTest {
   private final List<String> transcript = new ArrayList<>();
   private final RoboExecutorService executorService = new RoboExecutorService();

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboCursorTest {
   private static final String STRING_COLUMN = "stringColumn";
   private static final String LONG_COLUMN = "longColumn";

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboMenuItemTest {
   private MenuItem item;
   private TestOnActionExpandListener listener;

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.ShadowApplication;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboMenuTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/fakes/RoboVibratorTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboVibratorTest {
   private RoboVibrator vibrator;
 

File: robolectric/src/test/java/org/robolectric/fakes/RoboWebSettingsTest.java
Patch:
@@ -5,11 +5,11 @@
 import android.webkit.WebSettings;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.internal.DoNotInstrument;
 
 @DoNotInstrument
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class RoboWebSettingsTest {
   private final RoboWebSettings webSettings = new RoboWebSettings();
   private static final boolean[] TRUE_AND_FALSE = {true, false};

File: robolectric/src/test/java/org/robolectric/json/JSONArrayTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.json.JSONArray;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class JSONArrayTest {
   @Test
   public void testEquality() throws Exception {

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.robolectric.R;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.XmlResourceParserImpl;
 import org.robolectric.res.FsFile;
 import org.robolectric.res.PackageResourceTable;

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 abstract public class AdapterViewBehavior {
   private AdapterView adapterView;
 

File: robolectric/src/test/java/org/robolectric/shadows/ConverterTest.java
Patch:
@@ -6,13 +6,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.Fs;
 import org.robolectric.res.ResType;
 import org.robolectric.res.TypedResource;
 import org.robolectric.res.XmlContext;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ConverterTest {
 
   private XmlContext xmlContext;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteCursorTest {
 
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -23,12 +23,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TempDirectory;
 import org.robolectric.util.TestUtil;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteDatabaseTest {
     private SQLiteDatabase database;
     private List<SQLiteDatabase> openDatabases = new ArrayList<>();

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteOpenHelperTest {
 
   private TestOpenHelper helper;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteQueryBuilderTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteQueryBuilderTest {
 
   private static final String TABLE_NAME = "sqlBuilderTest";

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteStatementTest {
   private SQLiteDatabase database;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSeekBarTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSeekBarTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerAdapterViewBehaviorTest.java
Patch:
@@ -4,9 +4,9 @@
 import android.widget.Gallery;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerAdapterViewBehaviorTest extends AdapterViewBehavior {
   @Override public AdapterView createAdapterView() {
     return new Gallery(RuntimeEnvironment.application);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAbsSpinnerTest {
   private Context context;
   private Spinner spinner;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsoluteLayoutTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAbsoluteLayoutTest {
   @Test
   public void getLayoutParams_shouldReturnAbsoluteLayoutParams() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAbstractCursorTest {
 
   private TestCursor cursor;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityEventTest {
 
   private AccessibilityEvent event;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityManagerTest {
 
   private AccessibilityManager accessibilityManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityNodeInfoTest {
 
   private AccessibilityNodeInfo node;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityServiceTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccessibilityServiceTest {
   private MyService service ;
   private ShadowAccessibilityService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowAccessibilityWindowInfoTest {
   private AccessibilityWindowInfo window;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -26,11 +26,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccountManagerTest {
   private AccountManager am;
   private Scheduler scheduler;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.os.Parcel;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAccountTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityGroupTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.app.ActivityGroup;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowActivityGroupTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowActivityManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -62,15 +62,15 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.TestRunnable;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowActivityTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityThreadTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowActivityThreadTest {
     @Test
     public void testTriggersUndeclaredThrowableException() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAlarmManagerTest {
 
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -25,11 +25,11 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.CustomView;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAlertDialogTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationSetTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAnimationSetTest {
   final Animation.AnimationListener moveListener = mock(Animation.AnimationListener.class);
   final Animation.AnimationListener spinListener = mock(Animation.AnimationListener.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationUtilsTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAnimationUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostTest {
   private AppWidgetHost appWidgetHost;
   private ShadowAppWidgetHost shadowAppWidgetHost;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostViewTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetHostViewTest {
   private AppWidgetHostView appWidgetHostView;
   private ShadowAppWidgetHostView shadowAppWidgetHostView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -23,9 +23,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAppWidgetManagerTest {
   private AppWidgetManager appWidgetManager;
   private ShadowAppWidgetManager shadowAppWidgetManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -48,15 +48,15 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.TestBroadcastReceiver;
 import org.robolectric.annotation.Config;
 import org.robolectric.fakes.RoboVibrator;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowApplicationTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowArrayAdapterTest {
   private ArrayAdapter<Integer> arrayAdapter;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -31,10 +31,10 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAssetManagerTest {
 
   @Rule

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskLoaderTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAsyncTaskLoaderTest {
   private final List<String> transcript = new ArrayList<>();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.Join;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAsyncTaskTest {
   private List<String> transcript;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioEffectTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.media.audiofx.AudioEffect;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAudioEffectTest {
 
   @Test public void queryEffects() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAudioManagerTest {
   private final AudioManager audioManager = new AudioManager(RuntimeEnvironment.application);
   private final ShadowAudioManager shadowAudioManager = Shadows.shadowOf(audioManager);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowAutoCompleteTextViewTest {
   private final AutoCompleteAdapter adapter = new AutoCompleteAdapter(RuntimeEnvironment.application);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBaseAdapterTest.java
Patch:
@@ -9,9 +9,9 @@
 import android.widget.BaseAdapter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBaseAdapterTest {
   @Test
   public void shouldRecordNotifyDataSetChanged() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBatteryManagerTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowBatteryManagerTest {
   private BatteryManager batteryManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -9,9 +9,9 @@
 import android.os.RemoteException;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBinderTest {
   @Test
   public void transactCallsOnTransact() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -18,10 +18,10 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapDrawableTest {
   private final Resources resources = RuntimeEnvironment.application.getResources();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapFactoryTest {
   @Test
   public void decodeResource_shouldSetDescriptionAndCreatedFrom() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -15,11 +15,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.FsFile;
 import org.robolectric.util.TestUtil;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapRegionDecoderTest {
 
   private static final FsFile IMAGE_FILE = TestUtil.resourcesBaseDir().join("res/drawable-hdpi/robolectric.png");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapTest.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBitmapTest {
   @Test
   public void shouldCreateScaledBitmap() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -11,11 +11,11 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBluetoothAdapterTest {
   private BluetoothAdapter bluetoothAdapter;
   private ShadowBluetoothAdapter shadowBluetoothAdapter;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothDeviceTest.java
Patch:
@@ -5,10 +5,10 @@
 import android.bluetooth.BluetoothDevice;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBluetoothDeviceTest {
 
   private static final String MOCK_MAC_ADDRESS = "00:11:22:33:AA:BB";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothManagerTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowBluetoothManagerTest {
     private final BluetoothManager manager = (BluetoothManager) RuntimeEnvironment.application.getSystemService(Context.BLUETOOTH_SERVICE);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBroadcastPendingResultTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.os.Bundle;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBroadcastPendingResultTest {
   @Test
   public void testCreate() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBundleTest.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.ArrayList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowBundleTest {
   private final Bundle bundle = new Bundle();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCameraParametersTest {
 
   private Camera.Parameters parameters;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraSizeTest.java
Patch:
@@ -6,10 +6,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCameraSizeTest {
 
   private Camera.Size cameraSize;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCameraTest {
 
   private Camera camera;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCanvasTest.java
Patch:
@@ -17,10 +17,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCanvasTest {
   private Bitmap targetBitmap;
   private Bitmap imageBitmap;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCheckBoxTest {
   @Test
   public void testWorks() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCheckedTextViewTest {
 
   private CheckedTextView checkedTextView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -9,10 +9,10 @@
 import android.view.Choreographer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.TimeUtils;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowChoreographerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowClipboardManagerTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowClipboardManagerTest {
 
   private ClipboardManager clipboardManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowColorTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.graphics.Color;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowColorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConfigurationTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowConfigurationTest {
 
   private Configuration configuration;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConnectivityManagerTest.java
Patch:
@@ -18,10 +18,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowConnectivityManagerTest {
   private ConnectivityManager connectivityManager;
   private ShadowNetworkInfo shadowOfActiveNetworkInfo;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentObserverTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentObserverTest {
 
   private TestContentObserver observer;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentProviderClientTest {
 
   private static final String AUTHORITY = "org.robolectric";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationBuilderTest.java
Patch:
@@ -10,9 +10,9 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentProviderOperationBuilderTest {
   private Builder builder;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -8,12 +8,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
 /**
  * Tests for {@link ShadowContentProviderOperation}.
  */
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentProviderOperationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderResultTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentProviderResultTest {
   @Test
   public void count() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderTest.java
Patch:
@@ -7,10 +7,10 @@
 import android.content.ContentProvider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentProviderTest {
   @Config(minSdk = KITKAT)
   @Test public void testSetCallingPackage() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -50,14 +50,14 @@
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.fakes.BaseCursor;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.manifest.ContentProviderData;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentResolverTest {
   private static final String AUTHORITY = "org.robolectric";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentUrisTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentUrisTest {
   Uri URI;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentValuesTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContentValuesTest {
   private static final String KEY = "key";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestApplication;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContextImplTest {
   private final Context context = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -18,10 +18,10 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContextTest {
   private final Context context = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextWrapperTest.java
Patch:
@@ -34,9 +34,9 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowContextWrapperTest {
   public ArrayList<String> transcript;
   private ContextWrapper contextWrapper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCookieManagerTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.webkit.CookieManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCookieManagerTest {
   private final String url = "robolectric.org/";
   private final String httpUrl = "http://robolectric.org/";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCookieSyncManagerTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.webkit.CookieSyncManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCookieSyncManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.graphics.CornerPathEffect;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCornerPathEffectTest {
   @Test
   public void shouldGetRadius() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCountDownTimerTest {
 
   private ShadowCountDownTimer shadowCountDownTimer;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -15,9 +15,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCursorAdapterTest {
 
   private Cursor curs;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWindowTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.database.MatrixCursor;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWindowTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowCursorWrapperTest {
 
   private class ForwardVerifier {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatabaseUtilsTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.database.DatabaseUtils;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDatabaseUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateFormatTest.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.Date;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDateFormatTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateIntervalFormatTest.java
Patch:
@@ -14,10 +14,10 @@
 import libcore.icu.DateIntervalFormat;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = M)
 public class ShadowDateIntervalFormatTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatePickerDialogTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDatePickerDialogTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -12,10 +12,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDateUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDebugTest.java
Patch:
@@ -6,10 +6,10 @@
 import android.os.Debug;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDebugTest {
   @Test
   public void initNoCrash() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDevicePolicyManagerTest.java
Patch:
@@ -17,11 +17,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 /** Unit tests for {@link ShadowDevicePolicyManager}. */
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public final class ShadowDevicePolicyManagerTest {
 
   private DevicePolicyManager devicePolicyManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogPreferenceTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDialogPreferenceTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDialogTest {
   @Test
   public void shouldCallOnDismissListener() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayTest.java
Patch:
@@ -10,11 +10,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDisplayTest {
   @Test
   public void shouldProvideDisplayMetrics() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDownloadManagerTest.java
Patch:
@@ -12,9 +12,9 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDownloadManagerTest {
 
   private final Uri uri = Uri.parse("http://example.com/foo.mp4");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -23,10 +23,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowDrawableTest {
   @Test
   public void createFromStream__shouldReturnNullWhenAskedToCreateADrawableFromACorruptedSourceStream() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextPreferenceTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextPreferenceTest {
 
   private static final String SOME_TEXT = "some text";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowEditTextTest {
   private EditText editText;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class  ShadowEnvironmentTest {
 
   @After

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -5,9 +5,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowExpandableListViewTest {
 
   private ExpandableListView expandableListView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFilterTest.java
Patch:
@@ -6,9 +6,9 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowFilterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowFrameLayoutTest {
 
   private FrameLayout frameLayout;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGestureDetectorTest.java
Patch:
@@ -12,10 +12,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowGestureDetectorTest {
 
   private GestureDetector detector;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGradientDrawableTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.graphics.drawable.GradientDrawable;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowGradientDrawableTest {
   @Test
   public void testGetColor_returnsColor() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 import org.robolectric.util.TestRunnable;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowHandlerTest {
   private List<String> transcript;
   TestRunnable scratchRunnable = new TestRunnable();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -15,9 +15,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowHandlerThreadTest {
 
   private HandlerThread handlerThread;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowHtmlTest {
   private static final String HTML_SHORT = "<img src='foo.png'>";
   private static final String HTML_LONG = String.format("<img src='%s.png'>",

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHttpResponseCacheTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowHttpResponseCacheTest {
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowICUTest.java
Patch:
@@ -11,11 +11,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowICUTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIconTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = M)
 public class ShadowIconTest {
   public static final int TYPE_BITMAP = 1;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowImageViewTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputDeviceTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.view.InputDevice;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowInputDeviceTest {
   @Test
   public void canConstructInputDeviceWithName() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputEventTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.view.KeyEvent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowInputEventTest {
   @Test
   public void canSetInputDeviceOnKeyEvent() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowInputMethodManagerTest {
 
   private InputMethodManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterAuthorityEntryTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.content.IntentFilter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowIntentFilterAuthorityEntryTest {
   @Test(expected = NumberFormatException.class)
   public void constructor_shouldThrowAnExceptionIfPortIsNotAValidNumber() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowIntentFilterTest {
   @Test
   public void copyConstructorTest() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentServiceTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.content.Intent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowIntentServiceTest {
   @Test
   public void shouldSetIntentRedelivery() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -24,10 +24,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIoUtilsTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowIoUtilsTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowJobSchedulerTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsPromptResultTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.webkit.JsPromptResult;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowJsPromptResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsResultTest.java
Patch:
@@ -7,10 +7,10 @@
 import android.webkit.JsResult;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowJsResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsonReaderTest.java
Patch:
@@ -6,9 +6,9 @@
 import java.io.StringReader;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowJsonReaderTest {
   @Test public void shouldWork() throws Exception {
     JsonReader jsonReader = new JsonReader(new StringReader("{\"abc\": \"def\"}"));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyCharacterMapTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowKeyCharacterMapTest {
   private final KeyCharacterMap keyMap = ShadowKeyCharacterMap.load(0);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowKeyguardManagerTest {
 
   private KeyguardManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayerDrawableTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLayerDrawableTest {
   /**
    * drawables

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutAnimationControllerTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutAnimationControllerTest {
   private ShadowLayoutAnimationController shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -37,14 +37,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.CustomStateView;
 import org.robolectric.android.CustomView;
 import org.robolectric.android.CustomView2;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutInflaterTest {
   private Activity context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutParamsTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.widget.Gallery;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLayoutParamsTest {
   @Test
   public void testConstructor() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinearLayoutTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLinearLayoutTest {
   private LinearLayout linearLayout;
   private ShadowLinearLayout shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinkMovementMethodTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.text.method.LinkMovementMethod;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLinkMovementMethodTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowListPopupWindowTest {
   @Test
   public void show_setsLastListPopupWindow() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPreferenceTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowListPreferenceTest {
 
   private ListPreference listPreference;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewAdapterViewBehaviorTest.java
Patch:
@@ -4,9 +4,9 @@
 import android.widget.ListView;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowListViewAdapterViewBehaviorTest extends AdapterViewBehavior {
   @Override public AdapterView createAdapterView() {
     return new ListView(RuntimeEnvironment.application);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -23,10 +23,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowListViewTest {
 
   private List<String> transcript;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocaleDataTest.java
Patch:
@@ -10,10 +10,10 @@
 import libcore.icu.LocaleData;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLocaleDataTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationManagerTest.java
Patch:
@@ -30,9 +30,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLocationManagerTest {
   private LocationManager locationManager;
   private ShadowLocationManager shadowLocationManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLogTest.java
Patch:
@@ -12,9 +12,9 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLogTest {
   @Test
   public void d_shouldLogAppropriately() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperTest.java
Patch:
@@ -18,11 +18,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RoboSettings;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLooperTest {
 
   // testName is used when creating background threads. Makes it

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLruTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.util.LruCache;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowLruTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMarginLayoutParamsTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.view.ViewGroup;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMarginLayoutParamsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMatrixCursorTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMatrixCursorTest {
 
   private MatrixCursor singleColumnSingleNullValueMatrixCursor;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMatrixTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.assertj.core.data.Offset;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMatrixTest {
   private static final float EPSILON = 1e-7f;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMetadataRetrieverTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMediaMetadataRetrieverTest {
   private final String path = "/media/foo.mp3";
   private final String path2 = "/media/foo2.mp3";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowMediaPlayer.InvalidStateBehavior;
 import org.robolectric.shadows.ShadowMediaPlayer.MediaEvent;
@@ -44,7 +44,7 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMediaPlayerTest {
 
   private static final String DUMMY_SOURCE = "dummy-source";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMediaRecorderTest {
 
   private MediaRecorder mediaRecorder;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaStoreTest.java
Patch:
@@ -6,9 +6,9 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMediaStoreTest {
   @Test
   public void shouldInitializeFields() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMergeCursorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMergeCursorTest {
 
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageQueueTest.java
Patch:
@@ -18,10 +18,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMessageQueueTest {
   private Looper looper;
   private MessageQueue queue;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -11,12 +11,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMessageTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessengerTest.java
Patch:
@@ -8,9 +8,9 @@
 import android.os.Messenger;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMessengerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMimeTypeMapTest {
 
   private static final String IMAGE_EXTENSION = "jpg";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMotionEventTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowMotionEventTest {
   private MotionEvent event;
   private ShadowMotionEvent shadowMotionEvent;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkInfoTest.java
Patch:
@@ -6,10 +6,10 @@
 import android.net.NetworkInfo;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNetworkInfoTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkScoreManagerTest.java
Patch:
@@ -9,11 +9,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 /** ShadowNetworkScoreManagerTest tests {@link ShadowNetworkScoreManager}. */
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public final class ShadowNetworkScoreManagerTest {
   private NetworkScoreManager networkScoreManager;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -7,10 +7,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowNetworkTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNfcAdapterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNonAppLibraryTest.java
Patch:
@@ -9,11 +9,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @Config(manifest = Config.NONE)
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNonAppLibraryTest {
   @Test public void shouldStillCreateAnApplication() throws Exception {
     assertThat(RuntimeEnvironment.application).isExactlyInstanceOf(Application.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -4,10 +4,10 @@
 import org.junit.Before;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {
 
   /**

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationBuilderTest {
   private final Notification.Builder builder = new Notification.Builder(RuntimeEnvironment.application);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationManagerTest.java
Patch:
@@ -17,10 +17,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationManagerTest {
   private NotificationManager notificationManager;
   private Notification notification1 = new Notification();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationTest.java
Patch:
@@ -8,9 +8,9 @@
 import android.content.Intent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNotificationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNumberPickerTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowNumberPickerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowObjectAnimatorTest {
   private final AnimatorTarget target = new AnimatorTarget();
   private List<String> listenerEvents = new ArrayList<>();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOpenGLMatrixTest.java
Patch:
@@ -8,10 +8,10 @@
 import android.opengl.Matrix;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowOpenGLMatrixTest {
   @Test(expected = IllegalArgumentException.class)
   public void multiplyMM_failIfResIsNull() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOutlineTest.java
Patch:
@@ -6,10 +6,10 @@
 import android.graphics.Path;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowOutlineTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOverScrollerTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowOverScrollerTest {
   private OverScroller overScroller;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageInstallerTest.java
Patch:
@@ -15,11 +15,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowPackageInstallerTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -80,11 +80,11 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPackageManagerTest {
 
   private static final String TEST_PACKAGE_NAME = "com.some.other.package";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPaintTest.java
Patch:
@@ -9,10 +9,10 @@
 import android.graphics.Paint;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPaintTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPairTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.util.Pair;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPairTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowParcelFileDescriptorTest {
   private File file;
   private File readOnlyFile;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelTest.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowParcelTest {
 
   private Parcel parcel;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPasswordTransformationMethodTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPasswordTransformationMethodTest {
 
   private PasswordTransformationMethod transformationMethod;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPathTest.java
Patch:
@@ -10,10 +10,10 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPathTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPendingIntentTest.java
Patch:
@@ -12,10 +12,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPendingIntentTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPhoneWindowTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPhoneWindowTest {
 
   private Window window;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPictureTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.graphics.Picture;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPictureTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPopupMenuTest {
 
   private PopupMenu popupMenu;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPorterDuffColorFilterTest.java
Patch:
@@ -8,10 +8,10 @@
 import android.graphics.PorterDuffColorFilter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowPorterDuffColorFilterTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPowerManagerTest {
   private PowerManager powerManager;
   private ShadowPowerManager shadowPowerManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPreferenceActivityTest {
 
   private TestPreferenceActivity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -12,15 +12,15 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
 /**
  * Current Android examples show adding a PreferenceFragment as part of the
  * hosting Activity lifecycle. This resulted in a null pointer exception when
  * trying to access a Context while inflating the Preference objects defined in
  * xml. This class tests that path.
  */
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPreferenceActivityTestWithFragment {
   private TestPreferenceActivity activity = Robolectric.setupActivity(TestPreferenceActivity.class);
   private TestPreferenceFragment fragment;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceGroupTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowPreferenceGroupTest {
 
   private TestPreferenceGroup group;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProcessTest.java
Patch:
@@ -4,9 +4,9 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowProcessTest {
   @Test
   public void shouldBeZeroWhenNotSet() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressBarTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowProgressBarTest {
 
   private int[] testValues = {0, 1, 2, 100};

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressDialogTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowProgressDialogTest {
 
   private ProgressDialog dialog;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioButtonTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRadioButtonTest {
   @Test
   public void canBeExplicitlyChecked() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRadioGroupTest {
   private static final int BUTTON_ID = 3245;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRatingBarTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRatingBarTest {
 
   private RatingBar ratingBar;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRectTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRectTest {
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRelativeLayoutTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRemoteCallbackListTest.java
Patch:
@@ -8,9 +8,9 @@
 import android.os.RemoteCallbackList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowRemoteCallbackListTest {
   @Test
   public void testBasicWiring() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRenderNodeAnimatorTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowRenderNodeAnimatorTest {
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResolveInfoTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowResolveInfoTest {
 
   private ResolveInfo mResolveInfo;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -34,14 +34,14 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.XmlResourceParserImpl;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.util.TestUtil;
 import org.xmlpull.v1.XmlPullParser;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowResourcesTest {
   private Resources resources;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResultReceiverTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.os.ResultReceiver;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowResultReceiverTest {
   @Test
   public void callingSend_shouldCallOverridenOnReceiveResultWithTheSameArguments() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -21,11 +21,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowSQLiteConnectionTest {
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScaleGestureDetectorTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowScaleGestureDetectorTest {
 
   private ScaleGestureDetector detector;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScanResultTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.net.wifi.ScanResult;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowScanResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollViewTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowScrollViewTest {
   @Test
   public void shouldSmoothScrollTo() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollerTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowScrollerTest {
   private Scroller scroller;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSeekBarTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSeekBarTest {
 
   private SeekBar seekBar;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSensorManagerTest {
 
   private SensorManager sensorManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowServiceTest {
   private MyService service ;
   private ShadowService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSettingsTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSettingsTest {
   private ContentResolver contentResolver;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShapeDrawableTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.graphics.drawable.ShapeDrawable;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowShapeDrawableTest {
   @Test
   public void getPaint_ShouldReturnTheSamePaint() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSharedPreferencesTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSharedPreferencesTest {
   private final static String FILENAME = "filename";
   private SharedPreferences.Editor editor;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShortcutManagerTest.java
Patch:
@@ -13,12 +13,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 /** Unit tests for ShadowShortcutManager. */
 @Config(minSdk = Build.VERSION_CODES.N_MR1)
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public final class ShadowShortcutManagerTest {
   private ShortcutManager shortcutManager;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSimpleCursorAdapterTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSimpleCursorAdapterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSmsManagerTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowSmsManagerTest {
   private SmsManager smsManager = SmsManager.getDefault();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSoundPoolTest.java
Patch:
@@ -9,10 +9,10 @@
 import android.media.SoundPool;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSoundPoolTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSpannableStringTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSpannableStringTest {
   private static final String TEST_STRING = "Visit us at http://www.foobar.com for more selections";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSpannedStringTest.java
Patch:
@@ -6,9 +6,9 @@
 import android.text.SpannedString;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSpannedStringTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSslErrorHandlerTest.java
Patch:
@@ -7,10 +7,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSslErrorHandlerTest {
 
   private SslErrorHandler handler;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStatFsTest.java
Patch:
@@ -7,10 +7,10 @@
 import java.io.File;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowStatFsTest {
   @Test
   public void shouldRegisterStats() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStateListDrawableTest.java
Patch:
@@ -10,9 +10,9 @@
 import android.util.StateSet;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowStateListDrawableTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStaticLayoutTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.text.TextPaint;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowStaticLayoutTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStrictModeTest.java
Patch:
@@ -3,9 +3,9 @@
 import android.os.StrictMode;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowStrictModeTest {
   @Test
   public void setVmPolicyTest() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.view.Surface;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSurfaceTest {
   private final SurfaceTexture texture = new SurfaceTexture(0);
   private final Surface surface = new Surface(texture);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSurfaceViewTest {
 
   private SurfaceHolder.Callback callback1 = new TestCallback();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSyncResultTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.content.SyncResult;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSyncResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSystemClockTest.java
Patch:
@@ -8,10 +8,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.internal.bytecode.RobolectricInternals;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowSystemClockTest {
   @Test
   public void shouldAllowForFakingOfTime() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabActivityTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTabActivityTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabHostTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTabHostTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabSpecTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTabSpecTest {
   Drawable icon1;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowTelecomManagerTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelephonyManagerTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTelephonyManagerTest {
 
   private TelephonyManager telephonyManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTest.java
Patch:
@@ -7,10 +7,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTest {
 
   private ClassLoader myClassLoader;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextPaintTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.text.TextPaint;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTextPaintTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextToSpeechTest.java
Patch:
@@ -9,9 +9,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTextToSpeechTest {
   private TextToSpeech textToSpeech;
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextUtilsTest.java
Patch:
@@ -8,9 +8,9 @@
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTextUtilsTest {
   @Test
   public void testExpandTemplate() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -44,11 +44,11 @@
 import org.mockito.ArgumentCaptor;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.shadow.api.Shadow;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTextViewTest {
 
   private static final String INITIAL_TEXT = "initial text";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.controller.ActivityController;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowThemeTest {
 
   private Resources resources;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTimePickerDialogTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -16,10 +16,10 @@
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
   private static final TimeZone DEFAULT_TIMEZONE = TimeZone.getDefault();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowToastTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowToastTest {
   @Test
   public void shouldHaveShortDuration() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTouchDelegateTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTouchDelegateTest {
 
   private ShadowTouchDelegate td;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTrafficStatsTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.net.TrafficStats;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTrafficStatsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypedArrayTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.AttributeResource;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTypedArrayTest {
   private Context context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -9,11 +9,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.util.TestUtil;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowTypefaceTest {
   private File fontFile;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUriTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowUriTest {
   @Test
   public void shouldParseUris() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -18,10 +18,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowUserManagerTest {
 
   private UserManager userManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -10,10 +10,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.util.TimeUtils;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowValueAnimatorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowVideoViewTest {
 
   private VideoView view;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewAnimatorTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowViewAnimatorTest {
 
   ViewAnimator viewAnimator;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowViewConfigurationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewFlipperTest.java
Patch:
@@ -7,9 +7,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowViewFlipperTest {
   protected ViewFlipper flipper;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowViewGroupTest {
   private String defaultLineSeparator;
   private ViewGroup root;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -49,7 +49,7 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.TestOnClickListener;
 import org.robolectric.android.TestOnLongClickListener;
 import org.robolectric.android.controller.ActivityController;
@@ -58,7 +58,7 @@
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.TestRunnable;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowViewTest {
   private View view;
   private List<String> transcript;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -6,9 +6,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWallpaperManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebViewTest.java
Patch:
@@ -15,10 +15,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWebViewTest {
 
   private WebView webView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiConfigurationTest.java
Patch:
@@ -7,9 +7,9 @@
 import android.net.wifi.WifiConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWifiConfigurationTest {
   @Test
   public void shouldSetTheBitSetsAndWepKeyArrays() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -10,10 +10,10 @@
 import android.net.wifi.WifiManager;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWifiInfoTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiManagerTest.java
Patch:
@@ -17,10 +17,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWifiManagerTest {
   private final WifiManager wifiManager = (WifiManager) RuntimeEnvironment.application.getSystemService(Context.WIFI_SERVICE);
   private final ShadowWifiManager shadowWifiManager = shadowOf(wifiManager);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiP2pManagerTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWifiP2pManagerTest {
 
   private WifiP2pManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalTest.java
Patch:
@@ -6,10 +6,10 @@
 import android.os.Looper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(minSdk = JELLY_BEAN_MR1)
 public class ShadowWindowManagerGlobalTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowTest.java
Patch:
@@ -17,11 +17,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ShadowWindowTest {
   @Test
   public void getFlag_shouldReturnWindowFlags() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/VelocityTrackerTest.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Shadows;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class VelocityTrackerTest {
   VelocityTracker velocityTracker;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ViewInnerTextTest {
   private Context context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class ViewStubTest {
   private Context ctxt;
 

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -10,10 +10,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.util.SQLiteLibraryLoader;
 
-@RunWith(TestRunners.SelfTest.class)
+@RunWith(RobolectricTestRunner.class)
 public class SQLiteLibraryLoaderTest {
   /** Saved system properties. */
   private String savedOs, savedArch;

File: resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.res;
 
+import com.google.common.base.Strings;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.regex.Pattern;
-import com.google.common.base.Strings;
 
 public class StyleData implements Style {
   private final String packageName;
@@ -79,7 +79,7 @@ public boolean equals(Object obj) {
     }
     StyleData other = (StyleData) obj;
 
-      return Objects.equals(packageName, other.packageName)
+    return Objects.equals(packageName, other.packageName)
         && Objects.equals(name, other.name)
         && Objects.equals(parent, other.parent)
         && items.size() == other.items.size();

File: robolectric/src/main/java/org/robolectric/android/controller/IntentServiceController.java
Patch:
@@ -102,4 +102,4 @@ public IntentServiceController<T> withIntent(Intent intent) {
     this.intent = intent;
     return this;
   }
-}
\ No newline at end of file
+}

File: robolectric/src/test/java/org/robolectric/internal/DefaultManifestFactoryTest.java
Patch:
@@ -49,8 +49,7 @@ public void identify_configNoneShouldBeIgnored() throws Exception {
         .isEqualTo(FileFsFile.from("gradle/res"));
     assertThat(manifest.getAssetsDirectory())
         .isEqualTo(FileFsFile.from("gradle/assets"));
-    assertThat(manifest.getRClassName())
-        .isEqualTo("com.example.app.R");
+    assertThat(manifest.getRClassName()).isEqualTo("com.example.app.R");
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderClient.java
Patch:
@@ -27,7 +27,8 @@ public class ShadowContentProviderClient {
   private ContentProvider provider;
 
   @Implementation
-  public void __constructor__(ContentResolver contentResolver, IContentProvider contentProvider, boolean stable) {
+  public void __constructor__(
+      ContentResolver contentResolver, IContentProvider contentProvider, boolean stable) {
     this.stable = stable;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowGestureDetector.java
Patch:
@@ -26,7 +26,8 @@ public class ShadowGestureDetector {
   private OnDoubleTapListener onDoubleTapListener;
 
   @Implementation
-  public void __constructor__(Context context, GestureDetector.OnGestureListener listener, Handler handler) {
+  public void __constructor__(
+      Context context, GestureDetector.OnGestureListener listener, Handler handler) {
     Shadow.invokeConstructor(GestureDetector.class, realObject,
         from(Context.class, context),
         from(GestureDetector.OnGestureListener.class, listener),

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinearGradient.java
Patch:
@@ -17,7 +17,8 @@ public class ShadowLinearGradient {
   private Shader.TileMode tile;
 
   @Implementation
-  public void __constructor__(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) {
+  public void __constructor__(
+      float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) {
     this.x0 = x0;
     this.y0 = y0;
     this.x1 = x1;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -13,10 +13,9 @@ public class ShadowNetworkInfo {
   private int connectionType;
   private int connectionSubType;
   private NetworkInfo.DetailedState detailedState;
-
+  
   @Implementation
-  public static void __staticInitializer__() {
-  }
+  public static void __staticInitializer__() {}
 
   public static NetworkInfo newInstance(NetworkInfo.DetailedState detailedState, int type, int subType, boolean isAvailable, boolean isConnected) {
     NetworkInfo networkInfo = Shadow.newInstanceOf(NetworkInfo.class);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -157,9 +157,7 @@ public static class ShadowSession {
     private ShadowPackageInstaller shadowPackageInstaller;
 
     @Implementation
-    public void __constructor__() {
-
-    }
+    public void __constructor__() {}
 
     @Implementation
     public @NonNull OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -47,7 +47,6 @@
 import android.content.pm.ResolveInfo;
 import android.content.pm.ServiceInfo;
 import android.content.pm.Signature;
-import android.content.res.AssetManager;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
@@ -656,7 +655,6 @@ public void addPermissionInfo(PermissionInfo permissionInfo) {
     extraPermissions.put(permissionInfo.name, permissionInfo);
   }
 
-
   public void addManifest(AndroidManifest androidManifest) {
     androidManifests.put(androidManifest.getPackageName(), androidManifest);
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -302,8 +302,7 @@ public static class ShadowNotFoundException {
     private String message;
 
     @Implementation
-    public void __constructor__() {
-    }
+    public void __constructor__() {}
 
     @Implementation
     public void __constructor__(String name) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowToast.java
Patch:
@@ -25,8 +25,7 @@ public class ShadowToast {
   @RealObject Toast toast;
 
   @Implementation
-  public void __constructor__(Context context) {
-  }
+  public void __constructor__(Context context) {}
 
   @Implementation
   public static Toast makeText(Context context, int resId, int duration) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTouchDelegate.java
Patch:
@@ -14,7 +14,7 @@ public class ShadowTouchDelegate {
   private View delegateView;
 
   @Implementation
-  public void __constructor__( Rect bounds, View delegateView ){
+  public void __constructor__(Rect bounds, View delegateView) {
     this.bounds = bounds;
     this.delegateView = delegateView;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -10,8 +10,7 @@
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
   @Implementation
-  public static void __staticInitializer__() {
-  }
+  public static void __staticInitializer__() {}
 
   private String macAddress = "02:00:00:00:00:00"; // WifiInfo.DEFAULT_MAC_ADDRESS (@hide)
   private String ssid = "<unknown ssid>"; // WifiSsid.NONE (@hide)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowZoomButtonsController.java
Patch:
@@ -11,8 +11,7 @@ public class ShadowZoomButtonsController {
   private ZoomButtonsController.OnZoomListener listener;
 
   @Implementation
-  public void __constructor__(View ownerView) {
-  }
+  public void __constructor__(View ownerView) {}
 
   @Implementation
   public void setOnZoomListener(ZoomButtonsController.OnZoomListener listener) {

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/AndroidHttpClientTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.google.common.io.CharStreams;
 import java.io.IOException;
 import java.io.InputStreamReader;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.junit.Test;

File: resources/src/main/java/org/robolectric/res/AttributeResource.java
Patch:
@@ -3,6 +3,7 @@
 import javax.annotation.Nonnull;
 
 public class AttributeResource {
+  public static final String ANDROID_NS = "http://schemas.android.com/apk/res/android";
   public static final String ANDROID_RES_NS_PREFIX = "http://schemas.android.com/apk/res/";
   public static final String RES_AUTO_NS_URI = "http://schemas.android.com/apk/res-auto";
 

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -316,7 +316,7 @@ public AttributeSet build() {
         if (finalMaxAttrNameIndex > 0) {
           ResChunk_header.write(buf, (short) RES_XML_RESOURCE_MAP_TYPE, () -> {}, () -> {
             // not particularly compact, but no big deal for our purposes...
-            for (int i = 0; i < finalMaxAttrNameIndex; i++) {
+            for (int i = 0; i <= finalMaxAttrNameIndex; i++) {
               Integer value = resIds.get(i);
               buf.putInt(value == null ? 0 : value);
             }

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 import org.robolectric.TestRunners;
 import org.robolectric.android.XmlResourceParserImpl;
@@ -34,7 +35,7 @@
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(JUnit4.class)
 public class XmlResourceParserImplTest {
 
   private static final String XMLNS_NS = "http://www.w3.org/2000/xmlns/";

File: processor/src/test/java/org/robolectric/annotation/processing/validator/ImplementsValidatorTest.java
Patch:
@@ -94,10 +94,10 @@ public void constructorShadowWithoutImplementation_shouldNotCompile() {
         .that(testClass)
         .failsToCompile()
         .withErrorContaining("Shadow methods must be annotated @Implementation")
-        .onLine(9)
+        .onLine(8)
         .and()
         .withErrorContaining("Shadow methods must be annotated @Implementation")
-        .onLine(12);
+        .onLine(10);
   }
 
   @Test

File: resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.res;
 
+import com.google.common.base.Strings;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.regex.Pattern;
-import com.google.common.base.Strings;
 
 public class StyleData implements Style {
   private final String packageName;
@@ -79,7 +79,7 @@ public boolean equals(Object obj) {
     }
     StyleData other = (StyleData) obj;
 
-      return Objects.equals(packageName, other.packageName)
+    return Objects.equals(packageName, other.packageName)
         && Objects.equals(name, other.name)
         && Objects.equals(parent, other.parent)
         && items.size() == other.items.size();

File: robolectric/src/main/java/org/robolectric/android/controller/IntentServiceController.java
Patch:
@@ -102,4 +102,4 @@ public IntentServiceController<T> withIntent(Intent intent) {
     this.intent = intent;
     return this;
   }
-}
\ No newline at end of file
+}

File: robolectric/src/test/java/org/robolectric/internal/DefaultManifestFactoryTest.java
Patch:
@@ -49,8 +49,7 @@ public void identify_configNoneShouldBeIgnored() throws Exception {
         .isEqualTo(FileFsFile.from("gradle/res"));
     assertThat(manifest.getAssetsDirectory())
         .isEqualTo(FileFsFile.from("gradle/assets"));
-    assertThat(manifest.getRClassName())
-        .isEqualTo("com.example.app.R");
+    assertThat(manifest.getRClassName()).isEqualTo("com.example.app.R");
   }
 
   @Test

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderClient.java
Patch:
@@ -27,7 +27,8 @@ public class ShadowContentProviderClient {
   private ContentProvider provider;
 
   @Implementation
-  public void __constructor__(ContentResolver contentResolver, IContentProvider contentProvider, boolean stable) {
+  public void __constructor__(
+      ContentResolver contentResolver, IContentProvider contentProvider, boolean stable) {
     this.stable = stable;
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowGestureDetector.java
Patch:
@@ -26,7 +26,8 @@ public class ShadowGestureDetector {
   private OnDoubleTapListener onDoubleTapListener;
 
   @Implementation
-  public void __constructor__(Context context, GestureDetector.OnGestureListener listener, Handler handler) {
+  public void __constructor__(
+      Context context, GestureDetector.OnGestureListener listener, Handler handler) {
     Shadow.invokeConstructor(GestureDetector.class, realObject,
         from(Context.class, context),
         from(GestureDetector.OnGestureListener.class, listener),

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinearGradient.java
Patch:
@@ -17,7 +17,8 @@ public class ShadowLinearGradient {
   private Shader.TileMode tile;
 
   @Implementation
-  public void __constructor__(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) {
+  public void __constructor__(
+      float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) {
     this.x0 = x0;
     this.y0 = y0;
     this.x1 = x1;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -13,10 +13,9 @@ public class ShadowNetworkInfo {
   private int connectionType;
   private int connectionSubType;
   private NetworkInfo.DetailedState detailedState;
-
+  
   @Implementation
-  public static void __staticInitializer__() {
-  }
+  public static void __staticInitializer__() {}
 
   public static NetworkInfo newInstance(NetworkInfo.DetailedState detailedState, int type, int subType, boolean isAvailable, boolean isConnected) {
     NetworkInfo networkInfo = Shadow.newInstanceOf(NetworkInfo.class);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -157,9 +157,7 @@ public static class ShadowSession {
     private ShadowPackageInstaller shadowPackageInstaller;
 
     @Implementation
-    public void __constructor__() {
-
-    }
+    public void __constructor__() {}
 
     @Implementation
     public @NonNull OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -47,7 +47,6 @@
 import android.content.pm.ResolveInfo;
 import android.content.pm.ServiceInfo;
 import android.content.pm.Signature;
-import android.content.res.AssetManager;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
@@ -656,7 +655,6 @@ public void addPermissionInfo(PermissionInfo permissionInfo) {
     extraPermissions.put(permissionInfo.name, permissionInfo);
   }
 
-
   public void addManifest(AndroidManifest androidManifest) {
     androidManifests.put(androidManifest.getPackageName(), androidManifest);
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -302,8 +302,7 @@ public static class ShadowNotFoundException {
     private String message;
 
     @Implementation
-    public void __constructor__() {
-    }
+    public void __constructor__() {}
 
     @Implementation
     public void __constructor__(String name) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowToast.java
Patch:
@@ -25,8 +25,7 @@ public class ShadowToast {
   @RealObject Toast toast;
 
   @Implementation
-  public void __constructor__(Context context) {
-  }
+  public void __constructor__(Context context) {}
 
   @Implementation
   public static Toast makeText(Context context, int resId, int duration) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTouchDelegate.java
Patch:
@@ -14,7 +14,7 @@ public class ShadowTouchDelegate {
   private View delegateView;
 
   @Implementation
-  public void __constructor__( Rect bounds, View delegateView ){
+  public void __constructor__(Rect bounds, View delegateView) {
     this.bounds = bounds;
     this.delegateView = delegateView;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -10,8 +10,7 @@
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
   @Implementation
-  public static void __staticInitializer__() {
-  }
+  public static void __staticInitializer__() {}
 
   private String macAddress = "02:00:00:00:00:00"; // WifiInfo.DEFAULT_MAC_ADDRESS (@hide)
   private String ssid = "<unknown ssid>"; // WifiSsid.NONE (@hide)

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowZoomButtonsController.java
Patch:
@@ -11,8 +11,7 @@ public class ShadowZoomButtonsController {
   private ZoomButtonsController.OnZoomListener listener;
 
   @Implementation
-  public void __constructor__(View ownerView) {
-  }
+  public void __constructor__(View ownerView) {}
 
   @Implementation
   public void setOnZoomListener(ZoomButtonsController.OnZoomListener listener) {

File: shadows/httpclient/src/test/java/org/robolectric/shadows/httpclient/AndroidHttpClientTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.google.common.io.CharStreams;
 import java.io.IOException;
 import java.io.InputStreamReader;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 import org.robolectric.TestRunners;
 import org.robolectric.android.XmlResourceParserImpl;
@@ -34,7 +35,7 @@
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 
-@RunWith(TestRunners.MultiApiSelfTest.class)
+@RunWith(JUnit4.class)
 public class XmlResourceParserImplTest {
 
   private static final String XMLNS_NS = "http://www.w3.org/2000/xmlns/";

File: resources/src/main/java/org/robolectric/res/android/ResXMLParser.java
Patch:
@@ -489,7 +489,7 @@ private int memcmp(String s1, String s2, int len) {
     return 0;
   }
 
-  int indexOfID()
+  public int indexOfID()
   {
     if (mEventCode == START_TAG) {
         final int idx = dtohs((new ResXMLTree_attrExt(mTree.mBuffer.buf, mCurExt)).idIndex);
@@ -498,7 +498,7 @@ int indexOfID()
     return NAME_NOT_FOUND;
   }
 
-  int indexOfClass()
+  public int indexOfClass()
   {
     if (mEventCode == START_TAG) {
         final int idx = dtohs((new ResXMLTree_attrExt(mTree.mBuffer.buf, mCurExt)).classIndex);
@@ -523,7 +523,7 @@ int nextNode() {
 
     do {
 //        final ResXMLTree_node next = (ResXMLTree_node)
-//      (((final int8_t*)mCurNode) + dtohl(mCurNode.header().size()));
+//      (((final int8_t*)mCurNode) + dtohl(mCurNode.header.size));
         ResXMLTree_node next = new ResXMLTree_node(mTree.mBuffer.buf, mCurNode.myOffset() + dtohl(mCurNode.header.size));
       if (kDebugXMLNoisy) {
         ALOGI("Next node: prev=%p, next=%p\n", mCurNode, next);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowActivityTest.TestActivityWithAnotherTheme;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowThemeTest {
@@ -99,10 +98,11 @@ public void withEmptyTheme_returnsEmptyAttributes() throws Exception {
   }
 
   @Test public void canResolveAttrReferenceToDifferentPackage() throws Exception {
-    TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
+    Resources.Theme theme = resources.newTheme();
+    theme.applyStyle(R.style.Theme_AnotherTheme, true);
 
     TypedValue value = new TypedValue();
-    boolean resolved = activity.getTheme().resolveAttribute(R.attr.styleReference, value, false);
+    boolean resolved = theme.resolveAttribute(R.attr.styleReference, value, false);
 
     assertThat(resolved).isTrue();
     assertThat(value.type).isEqualTo(TypedValue.TYPE_REFERENCE);

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -169,7 +169,7 @@ private void hackySetSystemResources() {
     File sdkDir = new File(androidHome,
         "platforms/android-" + sdkConfig.getApiLevel());
     if (!new File(sdkDir, "android.jar").exists()) {
-      throw new RuntimeException(new File(sdkDir, "android.jar") + "not found, install it!");
+      throw new RuntimeException(new File(sdkDir, "android.jar ") + "not found, install it!");
     }
     CppAssetManager.setSystemResourcesPathHackHackHack(
         sdkDir);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.robolectric.util.Strings;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
-@Config(sdk = VERSION_CODES.O)
 public class ShadowAssetManagerTest {
 
   @Rule

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowArscAssetManager.java
Patch:
@@ -885,7 +885,8 @@ public static final boolean applyStyle(long themeToken,
           if (kDebugStyles) {
             ALOGI(". From theme: type=0x%x, data=0x%08x", value.get().dataType, value.get().data);
           }
-          newBlock = res.resolveReference(value, block, resid,
+          // TODO: platform code passes in 'block' here, which seems incorrect as it can be not set yet
+          newBlock = res.resolveReference(value, newBlock, resid,
                         typeSetFlags, config);
           if (kThrowOnBadId) {
             if (newBlock == BAD_INDEX) {

File: resources/src/main/java/org/robolectric/res/android/ResTable.java
Patch:
@@ -756,7 +756,7 @@ public int identifierForName(String nameString, String type, String packageName,
     final String attrPrivate = "^attr-private";
     int NG = mPackageGroups.size();
     for (PackageGroup group : mPackageGroups.values()) {
-      if (Strings.equals(packageName, group.name)) {
+      if (!Strings.equals(packageName.trim(), group.name.trim())) {
         if (kDebugTableNoisy) {
            System.out.println(String.format("Skipping package group: %s\n", group.name));
         }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -461,7 +461,7 @@ public void systemResourcesShouldReturnZeroForLocalId() throws Exception {
     assertThat(Resources.getSystem().getIdentifier("copy", "string", TestUtil.TEST_PACKAGE)).isEqualTo(0);
   }
 
-  @Test @Config(sdk = 25) // todo: unpin sdk
+  @Test
   public void testGetXml() throws Exception {
     XmlResourceParser parser = resources.getXml(R.xml.preferences);
     assertThat(parser).isNotNull();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -244,7 +244,7 @@ public TypedArray obtainStyledAttributes(int resid, int[] attrs) throws android.
 
     @Implementation(maxSdk = M)
     public TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) {
-      if (ShadowArscAssetManager.isLegacyAssetManager(realTheme.getResources().getAssets())) {
+      if (ShadowArscAssetManager.isLegacyAssetManager(getResources().getAssets())) {
         return getShadowAssetManager().attrsToTypedArray(getResources(), set, attrs, defStyleAttr, getNativePtr(), defStyleRes);
       } else {
         return directlyOn(realTheme, Resources.Theme.class, "obtainStyledAttributes",

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
-@Config(sdk = VERSION_CODES.N_MR1) // TODO: unpin sdk
+@Config(sdk = VERSION_CODES.O) // TODO: unpin sdk
 public class ShadowThemeTest {
 
   private Resources resources;

File: resources/src/test/java/org/robolectric/res/android/ResTableTest.java
Patch:
@@ -58,7 +58,7 @@ public void testGetEntry_stringType() throws Exception {
   public void testGetEntry_boolType() throws Exception {
     assertThat(resTable.getEntry(R.bool.is_verizon, null).entry.value.dataType).isEqualTo(DataType.INT_BOOLEAN.code());
     // Uncomment when we start selecting correct configuration
-//    assertThat(resTable.getEntry(R.bool.is_verizon, 0).value.dataType).isEqualTo(0);
+    assertThat(resTable.getEntry(R.bool.is_verizon, "").entry.value.data).isEqualTo(0);
   }
 
 //  @Test

File: resources/src/main/java/org/robolectric/res/android/ResTablePackage.java
Patch:
@@ -4,6 +4,9 @@
  * A collection of resource data types within a package.  Followed by
  * one or more Type and ResTable_typeSpec structures containing the
  * entry values for each resource type.
+ *
+ * Transliterated from https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r13/include/androidfw/ResourceTypes.h
+ * struct ResTable_package
  */
 public class ResTablePackage {
     public ResChunkHeader header;

File: resources/src/main/java/org/robolectric/res/android/Chunk.java
Patch:
@@ -173,7 +173,8 @@ public static void readTableChunk(ByteBuffer buffer, ResTable resTable) {
 
       for (TypeSpecChunk typeSpecChunk : packageChunk.getTypeSpecs()) {
         ResTableTypeSpec typeSpec = typeSpecChunk.typeSpec;
-        ResTable.Type type = new ResTable.Type(new Header(resTable), new Package(resTable, new Header(resTable), resTablePackage), typeSpec.entryCount);
+        ResTable.Type type = new ResTable.Type(new Header(resTable), new Package(resTable,
+            new Header(resTable), resTablePackage), typeSpec.entryCount);
         type.typeSpec = typeSpec;
 
         List<TypeChunk> types = packageChunk.getTypes(typeSpec.id);

File: resources/src/main/java/org/robolectric/res/android/ResTablePackage.java
Patch:
@@ -19,9 +19,7 @@ public class ResTablePackage {
     // Offset to a ResStringPool_header defining the resource
     // type symbol table.  If zero, this package is inheriting from
     // another base package (overriding specific values in it).
-    //public int typeStrings;
-    // TODO(BC): reconcile this description with this type
-    public ResStringPool typeStrings;
+    public int typeStrings;
 
     // Last index into typeStrings that is for public use by others.
     public int lastPublicType;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -39,7 +39,7 @@ public void shouldReturnTrueWhenEnabled() throws Exception {
 
   // Emulates Android framework behavior, e.g.,
   // AccessibilityManager.getInstance(context).isEnabled().
-  private AccessibilityManager getAccessibilityManagerInstance() throws Exception {
+  private static AccessibilityManager getAccessibilityManagerInstance() throws Exception {
     return ReflectionHelpers.callStaticMethod(AccessibilityManager.class, "getInstance",
             ReflectionHelpers.ClassParameter.from(Context.class, RuntimeEnvironment.application));
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityManager.java
Patch:
@@ -34,9 +34,9 @@ public class ShadowAccessibilityManager {
 
   @Resetter
   public static void reset() {
-      synchronized (sInstanceSync) {
-          sInstance = null;
-      }
+    synchronized (sInstanceSync) {
+      sInstance = null;
+    }
   }
 
   @HiddenApi

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -31,7 +31,7 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void shouldReturnTrueWhenEnabled() {
+  public void shouldReturnTrueWhenEnabled() throws Exception {
     shadowAccessibilityManager.setEnabled(true);
     assertThat(accessibilityManager.isEnabled()).isTrue();
     assertThat(getAccessibilityManagerInstance().isEnabled()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -34,7 +34,7 @@ public void setUp() throws Exception {
   public void shouldReturnTrueWhenEnabled() {
     shadowAccessibilityManager.setEnabled(true);
     assertThat(accessibilityManager.isEnabled()).isTrue();
-    assertThat(getAccessibilityManagerInstance.isEnabled()).isTrue();
+    assertThat(getAccessibilityManagerInstance().isEnabled()).isTrue();
   }
 
   // Emulates Android framework behavior, e.g.,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 import android.accessibilityservice.AccessibilityServiceInfo;
+import android.content.Context;
 import android.content.pm.ServiceInfo;
 import android.view.accessibility.AccessibilityManager;
 import java.util.ArrayList;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebViewTest.java
Patch:
@@ -271,7 +271,7 @@ public void shouldRecordOnSaveState() {
   @Test
   public void shouldRecordOnRestoreState() {
     assertThat(shadowWebView.wasRestoreStateCalled()).isFalse();
-    webView.saveState(new Bundle());
+    webView.restoreState(new Bundle());
     assertThat(shadowWebView.wasRestoreStateCalled()).isTrue();
   }
 }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -188,7 +188,7 @@ public void callAttach(Intent intent) {
           ReflectionHelpers.ClassParameter.from(IVoiceInteractor.class, null),
           ReflectionHelpers.ClassParameter.from(Window.class, null) // ADDED
       );
-    } else if (apiLevel == Build.VERSION_CODES.O) {
+    } else if (apiLevel >= Build.VERSION_CODES.O) {
       ReflectionHelpers.callInstanceMethod(Activity.class, realActivity, "attach",
           ReflectionHelpers.ClassParameter.from(Context.class, baseContext),
           ReflectionHelpers.ClassParameter.from(ActivityThread.class, RuntimeEnvironment.getActivityThread()),

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -39,7 +39,7 @@ public class ShadowTelephonyManager {
   private String simOperatorName;
   private boolean readPhoneStatePermission = true;
   private int phoneType = TelephonyManager.PHONE_TYPE_GSM;
-  private String simCountryIso;
+  private String simCountryIso = "";
   private int simState = TelephonyManager.SIM_STATE_READY;
   private String line1Number;
   private int networkType;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -76,7 +76,6 @@ public class ShadowActivity extends ShadowContextThemeWrapper {
   private Menu optionsMenu;
   private ComponentName callingActivity;
 
-  @Implementation
   public void __constructor__() {
     invokeConstructor(Activity.class, realActivity);
   }
@@ -188,7 +187,7 @@ public void callAttach(Intent intent) {
           ReflectionHelpers.ClassParameter.from(IVoiceInteractor.class, null),
           ReflectionHelpers.ClassParameter.from(Window.class, null) // ADDED
       );
-    } else if (apiLevel == Build.VERSION_CODES.O) {
+    } else if (apiLevel >= Build.VERSION_CODES.O) {
       ReflectionHelpers.callInstanceMethod(Activity.class, realActivity, "attach",
           ReflectionHelpers.ClassParameter.from(Context.class, baseContext),
           ReflectionHelpers.ClassParameter.from(ActivityThread.class, RuntimeEnvironment.getActivityThread()),

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTelephonyManager.java
Patch:
@@ -39,7 +39,7 @@ public class ShadowTelephonyManager {
   private String simOperatorName;
   private boolean readPhoneStatePermission = true;
   private int phoneType = TelephonyManager.PHONE_TYPE_GSM;
-  private String simCountryIso;
+  private String simCountryIso = "";
   private int simState = TelephonyManager.SIM_STATE_READY;
   private String line1Number;
   private int networkType;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -12,7 +12,6 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.Icon;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;

File: resources/src/main/java/org/robolectric/res/android/ResStringPool.java
Patch:
@@ -12,9 +12,9 @@ public class ResStringPool {
 //
 //
 //    void setToEmpty();
-//    Status setTo(final Object data, int size, boolean copyData=false);
+//    Errors setTo(final Object data, int size, boolean copyData=false);
 //
-//    Status getError() final;
+//    Errors getError() final;
 //
 //    void uninit();
 //
@@ -44,7 +44,7 @@ public class ResStringPool {
 //    boolean isSorted() final;
 //    boolean isUTF8() final;
 //
-//    private Status                    mError;
+//    private Errors                    mError;
 //    private Object                       mOwnedData;
 //    private final ResStringPool_header* mHeader;
 //    private int                      mSize;

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -69,7 +69,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, An
     try {
       appManifest.initMetaData(appResourceTable);
     } catch (RoboNotFoundException e1) {
-      throw new Resources.NotFoundException(e1.getMessage(), e1);
+      throw new Resources.NotFoundException(e1.getMessage());
     }
     RuntimeEnvironment.setApplicationManifest(appManifest);
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityEvent.java
Patch:
@@ -34,6 +34,7 @@ public class ShadowAccessibilityEvent extends ShadowAccessibilityRecord {
   @RealObject
   private AccessibilityEvent realAccessibilityEvent;
 
+  @Implementation
   public void __constructor__() {
     ReflectionHelpers.setStaticField(AccessibilityEvent.class, "CREATOR", ShadowAccessibilityEvent.CREATOR);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -173,6 +173,7 @@ public AccessibilityNodeInfo[] newArray(int size) {
   @RealObject
   private AccessibilityNodeInfo realAccessibilityNodeInfo;
 
+  @Implementation
   public void __constructor__() {
     ReflectionHelpers.setStaticField(AccessibilityNodeInfo.class, "CREATOR", ShadowAccessibilityNodeInfo.CREATOR);
   }
@@ -1241,6 +1242,7 @@ public static final class ShadowAccessibilityAction {
     private int id;
     private CharSequence label;
 
+    @Implementation
     public void __constructor__(int id, CharSequence label) {
       if (((id & (int)ReflectionHelpers.getStaticField(AccessibilityNodeInfo.class, "ACTION_TYPE_MASK")) == 0) && Integer.bitCount(id) != 1) {
         throw new IllegalArgumentException("Invalid standard action id");

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityWindowInfo.java
Patch:
@@ -48,6 +48,7 @@ public class ShadowAccessibilityWindowInfo {
   @RealObject
   private AccessibilityWindowInfo mRealAccessibilityWindowInfo;
 
+  @Implementation
   public void __constructor__() {}
 
   @Implementation

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -52,6 +52,7 @@ public class ShadowAccountManager {
   private Handler mainHandler;
   private RoboAccountManagerFuture pendingAddFuture;
 
+  @Implementation
   public void __constructor__(Context context, IAccountManager service) {
     mainHandler = new Handler(context.getMainLooper());
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -76,6 +76,7 @@ public class ShadowActivity extends ShadowContextThemeWrapper {
   private Menu optionsMenu;
   private ComponentName callingActivity;
 
+  @Implementation
   public void __constructor__() {
     invokeConstructor(Activity.class, realActivity);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAppWidgetHost.java
Patch:
@@ -18,6 +18,7 @@ public class ShadowAppWidgetHost {
   private int hostId;
   private int appWidgetIdToAllocate;
 
+  @Implementation
   public void __constructor__(Context context, int hostId) {
     this.context = context;
     this.hostId = hostId;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -208,10 +208,12 @@ private void convertAndFill(AttributeResource attribute, TypedValue outValue, St
     }
   }
 
+  @Implementation
   public void __constructor__() {
     resourceTable = RuntimeEnvironment.getAppResourceTable();
   }
 
+  @Implementation
   public void __constructor__(boolean isSystem) {
     resourceTable = isSystem ? RuntimeEnvironment.getSystemResourceTable() : RuntimeEnvironment.getAppResourceTable();
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -13,6 +13,7 @@ public class ShadowAsyncTaskLoader<D> {
   @RealObject private AsyncTaskLoader<D> realObject;
   private SimpleFuture<D> future;
 
+  @Implementation
   public void __constructor__(Context context) {
     BackgroundWorker worker = new BackgroundWorker();
     future = new SimpleFuture<D>(worker) {

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCamera.java
Patch:
@@ -38,6 +38,7 @@ public class ShadowCamera {
   @RealObject
   private Camera realCamera;
 
+  @Implementation
   public void __constructor__() {
     locked = true;
     previewing = false;
@@ -434,6 +435,7 @@ private void addRange(List<int[]> ranges, int min, int max) {
   public static class ShadowSize {
     @RealObject private Camera.Size realCameraSize;
 
+    @Implementation
     public void __constructor__(Camera camera, int width, int height) {
       realCameraSize.width = width;
       realCameraSize.height = height;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -50,6 +50,7 @@ public static String visualize(Canvas canvas) {
     return shadowOf(canvas).getDescription();
   }
 
+  @Implementation
   public void __constructor__(Bitmap bitmap) {
     this.targetBitmap = bitmap;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderClient.java
Patch:
@@ -26,6 +26,7 @@ public class ShadowContentProviderClient {
   private boolean released;
   private ContentProvider provider;
 
+  @Implementation
   public void __constructor__(ContentResolver contentResolver, IContentProvider contentProvider, boolean stable) {
     this.stable = stable;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowContentProviderResult.java
Patch:
@@ -3,19 +3,22 @@
 import android.content.ContentProviderResult;
 import android.net.Uri;
 import java.lang.reflect.Field;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
 @Implements(ContentProviderResult.class)
 public class ShadowContentProviderResult {
   @RealObject ContentProviderResult realResult;
 
+  @Implementation
   public void __constructor__(Uri uri) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
     Field field = realResult.getClass().getField("uri");
     field.setAccessible(true);
     field.set(realResult, uri);
   }
 
+  @Implementation
   public void __constructor__(int count) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
     Field field = realResult.getClass().getField("count");
     field.setAccessible(true);

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCornerPathEffect.java
Patch:
@@ -1,13 +1,15 @@
 package org.robolectric.shadows;
 
 import android.graphics.CornerPathEffect;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(CornerPathEffect.class)
 public class ShadowCornerPathEffect {
   private float radius;
 
+  @Implementation
   public void __constructor__(float radius) {
     this.radius = radius;
    }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCountDownTimer.java
Patch:
@@ -13,6 +13,7 @@ public class ShadowCountDownTimer {
 
   @RealObject CountDownTimer countDownTimer;
 
+  @Implementation
   public void __constructor__(long millisInFuture, long countDownInterval) {
     this.countDownInterval = countDownInterval;
     this.millisInFuture = millisInFuture;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowCursorWrapper.java
Patch:
@@ -18,6 +18,7 @@
 public class ShadowCursorWrapper implements Cursor {
   private Cursor wrappedCursor;
 
+  @Implementation
   public void __constructor__(Cursor c) {
     wrappedCursor = c;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowGestureDetector.java
Patch:
@@ -25,6 +25,7 @@ public class ShadowGestureDetector {
   private GestureDetector.OnGestureListener listener;
   private OnDoubleTapListener onDoubleTapListener;
 
+  @Implementation
   public void __constructor__(Context context, GestureDetector.OnGestureListener listener, Handler handler) {
     Shadow.invokeConstructor(GestureDetector.class, realObject,
         from(Context.class, context),

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowLinearGradient.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.LinearGradient;
 import android.graphics.Shader;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
@@ -15,6 +16,7 @@ public class ShadowLinearGradient {
   private int color1;
   private Shader.TileMode tile;
 
+  @Implementation
   public void __constructor__(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) {
     this.x0 = x0;
     this.y0 = y0;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -35,6 +35,7 @@ public class ShadowMatrix {
 
   private SimpleMatrix mMatrix = SimpleMatrix.IDENTITY;
 
+  @Implementation
   public void __constructor__(Matrix src) {
     set(src);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaPlayer.java
Patch:
@@ -87,6 +87,7 @@
  */
 @Implements(MediaPlayer.class)
 public class ShadowMediaPlayer extends ShadowPlayerBase {
+  @Implementation
   public static void __staticInitializer__() {
     // don't bind the JNI library
   }
@@ -529,6 +530,7 @@ public static MediaPlayer create(Context context, Uri uri) {
     return mp;
   }
 
+  @Implementation
   public void __constructor__() {
     // Contract of audioSessionId is that if it is 0 (which represents
     // the master mix) then that's an error. By default it generates

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaRecorder.java
Patch:
@@ -9,6 +9,7 @@
 @Implements(MediaRecorder.class)
 public class ShadowMediaRecorder {
   @SuppressWarnings("UnusedDeclaration")
+  @Implementation
   public static void __staticInitializer__() {
     // don't bind the JNI library
   }
@@ -46,6 +47,7 @@ public static void __staticInitializer__() {
   private MediaRecorder.OnErrorListener errorListener;
   private MediaRecorder.OnInfoListener infoListener;
 
+  @Implementation
   public void __constructor__() {
     state = STATE_INITIAL;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowMessenger.java
Patch:
@@ -11,6 +11,7 @@
 public class ShadowMessenger {
   private Handler handler;
 
+  @Implementation
   public void __constructor__(Handler handler) {
     this.handler = handler;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNetwork.java
Patch:
@@ -3,6 +3,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 import android.net.Network;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadow.api.Shadow;
 
@@ -21,6 +22,7 @@ public static Network newInstance(int netId) {
     return network;
   }
 
+  @Implementation
   public void __constructor__(int netId) {
     this.netId = netId;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -14,6 +14,7 @@ public class ShadowNetworkInfo {
   private int connectionSubType;
   private NetworkInfo.DetailedState detailedState;
 
+  @Implementation
   public static void __staticInitializer__() {
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageInstaller.java
Patch:
@@ -156,6 +156,7 @@ public static class ShadowSession {
     private int sessionId;
     private ShadowPackageInstaller shadowPackageInstaller;
 
+    @Implementation
     public void __constructor__() {
 
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPaint.java
Patch:
@@ -40,11 +40,13 @@ public class ShadowPaint {
   private float textSize;
   private Paint.Align textAlign = Paint.Align.LEFT;
 
+  @Implementation
   public void __constructor__(int flags) {
     this.flags = flags;
     Shadow.invokeConstructor(Paint.class, paint, ClassParameter.from(int.class, flags));
   }
 
+  @Implementation
   public void __constructor__(Paint otherPaint) {
     ShadowPaint otherShadowPaint = shadowOf(otherPaint);
     this.color = otherShadowPaint.color;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPath.java
Patch:
@@ -20,6 +20,7 @@ public class ShadowPath {
   private Point wasMovedTo;
   private String quadDescription = "";
 
+  @Implementation
   public void __constructor__(Path path) {
     points = new ArrayList<>(Shadows.shadowOf(path).getPoints());
     wasMovedTo = Shadows.shadowOf(path).wasMovedTo;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowPorterDuffColorFilter.java
Patch:
@@ -10,6 +10,7 @@ public class ShadowPorterDuffColorFilter {
   private int color;
   private PorterDuff.Mode mode;
 
+  @Implementation
   public void __constructor__(int color, PorterDuff.Mode mode) {
     this.color = color;
     this.mode = mode;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -301,9 +301,11 @@ public static class ShadowNotFoundException {
 
     private String message;
 
+    @Implementation
     public void __constructor__() {
     }
 
+    @Implementation
     public void __constructor__(String name) {
       this.message = name;
     }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowStatFs.java
Patch:
@@ -22,6 +22,7 @@ public class ShadowStatFs {
   private static Map<String, Stats> stats = new HashMap<String, Stats>();
   private Stats stat;
 
+  @Implementation
   public void __constructor__(String path) {
     restat(path);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowSurface.java
Patch:
@@ -2,12 +2,14 @@
 
 import android.graphics.SurfaceTexture;
 import android.view.Surface;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
 @Implements(Surface.class)
 public class ShadowSurface {
   private SurfaceTexture surfaceTexture;
 
+  @Implementation
   public void __constructor__(SurfaceTexture surfaceTexture) {
     this.surfaceTexture = surfaceTexture;
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTextToSpeech.java
Patch:
@@ -14,6 +14,7 @@ public class ShadowTextToSpeech {
   private boolean shutdown = false;
   private int queueMode = -1;
 
+  @Implementation
   public void __constructor__(Context context, TextToSpeech.OnInitListener listener) {
     this.context = context;
     this.listener = listener;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTimePickerDialog.java
Patch:
@@ -4,6 +4,7 @@
 
 import android.app.TimePickerDialog;
 import android.content.Context;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.shadow.api.Shadow;
@@ -15,6 +16,7 @@ public class ShadowTimePickerDialog extends ShadowAlertDialog {
   private int hourOfDay;
   private int minute;
 
+  @Implementation
   public void __constructor__(Context context, int theme, TimePickerDialog.OnTimeSetListener callBack,
                               int hourOfDay, int minute, boolean is24HourView) {
     this.hourOfDay = hourOfDay;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowToast.java
Patch:
@@ -24,6 +24,7 @@ public class ShadowToast {
 
   @RealObject Toast toast;
 
+  @Implementation
   public void __constructor__(Context context) {
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTouchDelegate.java
Patch:
@@ -3,6 +3,7 @@
 import android.graphics.Rect;
 import android.view.TouchDelegate;
 import android.view.View;
+import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
@@ -12,6 +13,7 @@ public class ShadowTouchDelegate {
   private Rect bounds;
   private View delegateView;
 
+  @Implementation
   public void __constructor__( Rect bounds, View delegateView ){
     this.bounds = bounds;
     this.delegateView = delegateView;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -30,11 +30,13 @@ public class ShadowTypeface {
   @RealObject private Typeface realTypeface;
 
   @HiddenApi
+  @Implementation
   public void __constructor__(int fontId) {
     description = findById((long) fontId);
   }
 
   @HiddenApi
+  @Implementation
   public void __constructor__(long fontId) {
     description = findById(fontId);
   }

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -110,6 +110,7 @@ public static String innerText(View view) {
     return shadowOf(view).innerText();
   }
 
+  @Implementation
   public void __constructor__(Context context, AttributeSet attributeSet, int defStyle) {
     if (context == null) throw new NullPointerException("no context");
     this.attributeSet = attributeSet;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiConfiguration.java
Patch:
@@ -10,6 +10,7 @@
 public class ShadowWifiConfiguration {
   @RealObject private WifiConfiguration realObject;
 
+  @Implementation
   public void __constructor__() {
     realObject.networkId = -1;
     realObject.SSID = null;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -9,6 +9,7 @@
 
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
+  @Implementation
   public static void __staticInitializer__() {
   }
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowZoomButtonsController.java
Patch:
@@ -10,6 +10,7 @@
 public class ShadowZoomButtonsController {
   private ZoomButtonsController.OnZoomListener listener;
 
+  @Implementation
   public void __constructor__(View ownerView) {
   }
 

File: shadows/httpclient/src/main/java/org/robolectric/shadows/httpclient/ShadowDefaultRequestDirector.java
Patch:
@@ -53,6 +53,7 @@ public class ShadowDefaultRequestDirector {
 
   org.robolectric.shadows.httpclient.DefaultRequestDirector redirector;
 
+  @Implementation
   public void __constructor__(
       Log log,
       HttpRequestExecutor requestExec,
@@ -102,6 +103,7 @@ public void __constructor__(
     }
   }
 
+  @Implementation
   public void __constructor__(
       HttpRequestExecutor requestExec,
       ClientConnectionManager conman,

File: shadows/supportv4/src/main/java/org/robolectric/shadows/support/v4/ShadowAsyncTaskLoader.java
Patch:
@@ -14,6 +14,7 @@ public class ShadowAsyncTaskLoader<D> {
   @RealObject private AsyncTaskLoader<D> realLoader;
   private SimpleFuture<D> future;
 
+  @Implementation
   public void __constructor__(Context context) {
     BackgroundWorker worker = new BackgroundWorker();
     future = new SimpleFuture<D>(worker) {

File: robolectric/src/main/java/org/robolectric/android/internal/ParallelUniverse.java
Patch:
@@ -69,7 +69,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, An
     try {
       appManifest.initMetaData(appResourceTable);
     } catch (RoboNotFoundException e1) {
-      throw new Resources.NotFoundException(e1.getMessage(), e1);
+      throw new Resources.NotFoundException(e1.getMessage());
     }
     RuntimeEnvironment.setApplicationManifest(appManifest);
 

File: resources/src/main/java/org/robolectric/res/android/ResTablePackage.java
Patch:
@@ -5,7 +5,7 @@
  * one or more ResTable_type and ResTable_typeSpec structures containing the
  * entry values for each resource type.
  */
-class ResTablePackage {
+public class ResTablePackage {
     ResChunkHeader header;
 
     // If this is a base package, its ID.  Package IDs start

File: integration_tests/dependency-on-stubs/src/test/java/org/robolectric/LoadWeirdClassesTest.java
Patch:
@@ -1,5 +1,8 @@
 package org.robolectric;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
+import static org.robolectric.Shadows.shadowOf;
+
 import android.app.Activity;
 import android.content.Context;
 import android.os.Build;
@@ -10,9 +13,6 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ReflectionHelpers;
 
-import static android.os.Build.VERSION_CODES.KITKAT;
-import static org.robolectric.Shadows.shadowOf;
-
 @RunWith(RobolectricTestRunner.class) @Config(sdk = Config.ALL_SDKS)
 public class LoadWeirdClassesTest {
   @Test @Config(sdk = KITKAT)

File: integration_tests/libphonenumber/src/test/java/org/robolectric/integration_tests/libphonenumber/ClassloadingTest.java
Patch:
@@ -1,14 +1,14 @@
 package org.robolectric.integration_tests.libphonenumber;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import com.google.i18n.phonenumbers.PhoneNumberUtil;
 import com.google.i18n.phonenumbers.Phonenumber;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = Config.ALL_SDKS )
 public class ClassloadingTest {

File: integration_tests/powermock/src/test/java/org/robolectric/integration_tests/mockito/PowerMockStaticTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.integration_tests.mockito;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -10,8 +12,6 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 @RunWith(RobolectricTestRunner.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
 @PrepareForTest(PowerMockStaticTest.Static.class)

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.database.Cursor;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteQueryBuilderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.content.ContentValues;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.graphics.ImageFormat;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraSizeTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.hardware.Camera;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConfigurationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static android.content.res.Configuration.SCREENLAYOUT_UNDEFINED;
 import static org.assertj.core.api.Assertions.assertThat;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCornerPathEffectTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static android.os.Build.VERSION_CODES.M;
 import static android.os.Build.VERSION_CODES.N;
 import static org.assertj.core.api.Assertions.assertThat;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIoUtilsTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import com.google.common.io.Files;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 import android.hardware.Camera;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPaintTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.robolectric.TestRunners;
 import org.robolectric.shadow.api.Shadow;
 
-
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPaintTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPathTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.robolectric.TestRunners;
 import org.robolectric.shadow.api.Shadow;
 
-
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPathTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSyncResultTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSyncResultTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
-
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewConfigurationTest {
 

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -34,6 +34,7 @@
 import org.robolectric.annotation.RealObject;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
+
 /**
  * Shadow of {@link android.view.accessibility.AccessibilityNodeInfo} that allows a test to set
  * properties that are locked in the original class. It also keeps track of calls to

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowIAppOpsService.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import android.os.IBinder;
 import com.android.internal.app.IAppOpsService;
 import org.robolectric.annotation.Implementation;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowIoUtils.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.io.IOException;

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowVectorDrawable.java
Patch:
@@ -14,7 +14,6 @@
 
 package org.robolectric.shadows;
 
-
 import static android.os.Build.VERSION_CODES.N;
 import static org.robolectric.shadows.ShadowVirtualRefBasePtr.get;
 import static org.robolectric.shadows.ShadowVirtualRefBasePtr.put;

File: resources/src/main/java/org/robolectric/res/android/ResourceConfiguration.java
Patch:
@@ -316,7 +316,7 @@ public final int uiModeNight() {
   @SuppressWarnings("mutable")
   private final byte[] unknown;
 
-  static ResourceConfiguration create(ByteBuffer buffer) {
+  public static ResourceConfiguration create(ByteBuffer buffer) {
     int startPosition = buffer.position();  // The starting buffer position to calculate bytes read.
     int size = buffer.getInt();
     int mcc = buffer.getShort() & 0xFFFF;

File: resources/src/test/java/org/robolectric/res/arsc/ArscTableTest.java
Patch:
@@ -54,10 +54,11 @@ public void testSomething() throws Exception {
 
   @Test
   public void getPackageName() {
-    assertThat(arscTable.getPackageName()).isEqualTo("org.robolectric.resources");
+    assertThat(arscTable.getPackageName(R.string.first_string)).isEqualTo("org.robolectric.resources");
+    assertThat(arscTable.getPackageName(R.string.second_string)).isEqualTo("org.robolectric.resources");
   }
 
-  @Test @Ignore
+  @Test
   public void testGetString() throws Exception {
     assertThat(arscTable.getString(R.string.first_string)).isEqualTo("sheep");
     assertThat(arscTable.getString(R.string.second_string)).isEqualTo("goat");

File: resources/src/main/java/org/robolectric/res/DocumentLoader.java
Patch:
@@ -31,6 +31,9 @@ private void loadFile(FsFile dir) {
     if (!dir.exists()) {
       throw new RuntimeException("no such directory " + dir);
     }
+    if (!dir.isDirectory()) {
+      return;
+    }
 
     for (FsFile file : dir.listFiles(ENDS_WITH_XML)) {
       loadResourceXmlFile(new XmlContext(packageName, file));

File: robolectric/src/main/java/org/robolectric/res/arsc/Chunk.java
Patch:
@@ -416,7 +416,7 @@ public StringPoolChunk getKeyStringPool() {
     }
 
     public TypeSpecChunk getTypeSpec() {
-      return new TypeSpecChunk(super.buffer, getKeyStringPool().getChunkEnd(), Type.TABLE_TYPE);
+      return new TypeSpecChunk(super.buffer, getKeyStringPool().getChunkEnd(), Type.TABLE_TYPE_SPEC);
     }
 
     public void dump() {

File: robolectric/src/main/java/org/robolectric/res/arsc/Chunk.java
Patch:
@@ -314,7 +314,7 @@ public List<StringPoolSpan> getSpans() {
         while (nameIndex != RES_STRING_POOL_SPAN_END) {
           result.add(new StringPoolSpan(buffer, idx));
           idx += StringPoolSpan.SPAN_LENGTH;
-          nameIndex = buffer.getInt(offset);
+          nameIndex = buffer.getInt(idx);
         }
         return result;
       }

File: robolectric/src/main/java/org/robolectric/internal/DefaultManifestFactory.java
Patch:
@@ -4,6 +4,7 @@
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
+import org.robolectric.util.Logger;
 
 import java.net.URL;
 import java.util.List;
@@ -29,7 +30,7 @@ public ManifestIdentifier identify(Config config) {
 
     String manifestConfig = config.manifest();
     if (Config.NONE.equals(manifestConfig)) {
-      manifestFile = null;
+      Logger.info("@Config(manifest = Config.NONE) specified while using Build System API, ignoring");
     } else if (!Config.DEFAULT_MANIFEST_NAME.equals(manifestConfig)) {
       manifestFile = resolveFile(manifestConfig);
     }

File: shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 
-import org.robolectric.internal.Shadow;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.ResourceTable;
 import org.robolectric.res.builder.RobolectricPackageManager;

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -42,7 +42,6 @@ public static void reset() {
       provider.reset();
     }
     RuntimeEnvironment.application = null;
-    RuntimeEnvironment.setRobolectricPackageManager(null);
     RuntimeEnvironment.setActivityThread(null);
   }
 

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
-import org.robolectric.res.builder.DefaultPackageManager;
+import org.robolectric.shadows.ShadowPackageManager.IntentComparator;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -13,7 +13,7 @@ public class DefaultPackageManagerIntentComparatorTest {
 
   @Test
   public void validCompareResult() {
-    final DefaultPackageManager.IntentComparator intentComparator = new DefaultPackageManager.IntentComparator();
+    final IntentComparator intentComparator = new IntentComparator();
 
     assertThat(intentComparator.compare(null, null)).isEqualTo(0);
     assertThat(intentComparator.compare(new Intent(), null)).isEqualTo(1);
@@ -27,7 +27,7 @@ public void validCompareResult() {
 
   @Test
   public void canSustainConcurrentModification() {
-    final DefaultPackageManager.IntentComparator intentComparator = new DefaultPackageManager.IntentComparator();
+    final IntentComparator intentComparator = new IntentComparator();
 
     Intent intent1 = new Intent("actionstring0");
     Intent intent2 = new Intent("actionstring1");

File: robolectric/src/test/java/org/robolectric/android/internal/ParallelUniverseTest.java
Patch:
@@ -157,6 +157,8 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQual
     assertThat(RuntimeEnvironment.getQualifiers()).contains("large-land-v23");
   }
   
+
+  
   @Test
   public void tearDownApplication_invokesOnTerminate() {
     RuntimeEnvironment.application = mock(Application.class);

File: shadows/framework/src/main/java/org/robolectric/ShadowsAdapter.java
Patch:
@@ -15,6 +15,7 @@ public interface ShadowsAdapter {
 
   ShadowLooperAdapter getMainLooper();
 
+  // todo remove
   String getShadowActivityThreadClassName();
 
   void setupLogging();

File: shadows/framework/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -38,6 +38,8 @@ public Object invoke(Object proxy, @Nonnull Method method, Object[] args) throws
           }
         } else if (method.getName().equals("notifyPackageUse")) {
           return null;
+        } else if (method.getName().equals("getPackageInstaller")) {
+          return null;
         }
         throw new UnsupportedOperationException("sorry, not supporting " + method + " yet!");
       }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -371,7 +371,9 @@ public void shouldFormatAllFormats_withQuestionableResults() throws Exception {
   @Test
   public void shouldFormat2445() throws Exception {
     Time t = new Time();
+    t.timezone = "PST";
     assertEquals("19700101T000000", t.format2445());
+    
     t.timezone = Time.TIMEZONE_UTC;
     //2445 formatted date should hava a Z postfix
     assertEquals("19700101T000000Z",t.format2445());

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -371,7 +371,9 @@ public void shouldFormatAllFormats_withQuestionableResults() throws Exception {
   @Test
   public void shouldFormat2445() throws Exception {
     Time t = new Time();
+    t.timezone = "PST";
     assertEquals("19700101T000000", t.format2445());
+    
     t.timezone = Time.TIMEZONE_UTC;
     //2445 formatted date should hava a Z postfix
     assertEquals("19700101T000000Z",t.format2445());

File: processor/src/main/java/org/robolectric/annotation/processing/RobolectricModel.java
Patch:
@@ -322,8 +322,8 @@ public Void visitPackage(PackageElement parent, TypeElement type) {
     imports.add("java.util.Map");
     imports.add("java.util.HashMap");
     imports.add("javax.annotation.Generated");
-    imports.add("org.robolectric.shadow.api.Shadow");
     imports.add("org.robolectric.internal.ShadowProvider");
+    imports.add("org.robolectric.shadow.api.Shadow");
   }
 
   public void addShadowType(TypeElement elem, TypeElement type) {

File: processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -7,6 +7,9 @@
 import javax.annotation.Generated;
 import org.robolectric.annotation.processing.shadows.ShadowDummy;
 import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2;
+import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerPackage;
+import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerPrivate;
+import org.robolectric.annotation.processing.shadows.ShadowOuterDummy2.ShadowInnerProtected;
 import org.robolectric.annotation.processing.shadows.ShadowPrivate;
 import org.robolectric.internal.ShadowProvider;
 import org.robolectric.shadow.api.Shadow;

File: processor/src/test/resources/org/robolectric/Robolectric_NoExcludedTypes.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 import javax.annotation.Generated;
 import org.robolectric.internal.ShadowProvider;
+import org.robolectric.shadow.api.Shadow;
 
 /**
  * Shadow mapper. Automatically generated by the Robolectric Annotation Processor.

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -927,7 +927,7 @@ public void shouldGetBlobFromString() {
     /////////////////////
 
     private File writableCopyOf(File testDbOrig) throws IOException {
-        Path tempDir = TempDirectory.create();
+        Path tempDir = new TempDirectory("test").create("sqlite");
         File testDb = tempDir.resolve("sqlite-db-dump.sql").toFile();
         Files.copy(testDbOrig, testDb);
         return testDb;

File: shadows/framework/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -99,8 +99,6 @@ public interface RobolectricPackageManager {
 
   void setQueryIntentImplicitly(boolean queryIntentImplicitly);
 
-  void reset();
-
   void setNameForUid(int uid, String name);
 
   void setPackagesForCallingUid(String... packagesForCallingUid);

File: robolectric-junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -188,7 +188,7 @@ protected void configureShadows(FrameworkMethod method, Sandbox sandbox) {
     sandbox.configure(createClassHandler(shadowMap, sandbox), getInterceptors());
   }
 
-  protected Statement methodBlock(final FrameworkMethod method) {
+  @Override protected Statement methodBlock(final FrameworkMethod method) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -54,7 +54,7 @@ public TypedResource getValue(int resId, String qualifiers) {
     return resources.get(getResName(resId), qualifiers);
   }
 
-  public XmlBlock getXml(ResName resName, String qualifiers) {
+  @Override public XmlBlock getXml(ResName resName, String qualifiers) {
     FileTypedResource fileTypedResource = getFileResource(resName, qualifiers);
     if (fileTypedResource == null || !fileTypedResource.isXml()) {
       return null;
@@ -63,7 +63,7 @@ public XmlBlock getXml(ResName resName, String qualifiers) {
     }
   }
 
-  public InputStream getRawValue(ResName resName, String qualifiers) {
+  @Override public InputStream getRawValue(ResName resName, String qualifiers) {
     FileTypedResource fileTypedResource = getFileResource(resName, qualifiers);
     if (fileTypedResource == null) {
       return null;

File: robolectric-resources/src/main/java/org/robolectric/res/ThemeStyleSet.java
Patch:
@@ -10,7 +10,7 @@ public class ThemeStyleSet implements Style {
 
   private List<OverlayedStyle> styles = new ArrayList<>();
 
-  public AttributeResource getAttrValue(ResName attrName) {
+  @Override public AttributeResource getAttrValue(ResName attrName) {
     AttributeResource attribute = null;
 
     for (OverlayedStyle overlayedStyle : styles) {

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlBlock.java
Patch:
@@ -41,7 +41,7 @@ private synchronized static Document parse(FsFile xmlFile) {
       if (inputStream != null) try {
         inputStream.close();
       } catch (IOException e) {
-        throw new RuntimeException(e);
+        // ignore
       }
     }
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboIntentSender.java
Patch:
@@ -20,7 +20,7 @@ public RoboIntentSender(PendingIntent pendingIntent) {
     this.pendingIntent = pendingIntent;
   }
 
-  public void sendIntent(Context context, int code, Intent intent,
+  @Override public void sendIntent(Context context, int code, Intent intent,
                          final OnFinished onFinished, Handler handler, String requiredPermission)
       throws SendIntentException {
     try {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboVibrator.java
Patch:
@@ -53,7 +53,7 @@ public void vibrate(int i, String s, long[] l, int i1) {
 
   }
 
-  public void cancel() {
+  @Override public void cancel() {
     cancelled = true;
     vibrating = false;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -26,7 +26,7 @@ public ShadowActivityAdapter getShadowActivityAdapter(Activity component) {
     final ShadowActivity shadow = Shadows.shadowOf(component);
     return new ShadowActivityAdapter() {
 
-      public void setThemeFromManifest() {
+      @Override public void setThemeFromManifest() {
         shadow.setThemeFromManifest();
       }
     };
@@ -36,7 +36,7 @@ public void setThemeFromManifest() {
   public ShadowLooperAdapter getMainLooper() {
     final ShadowLooper shadow = Shadows.shadowOf(Looper.getMainLooper());
     return new ShadowLooperAdapter() {
-      public void runPaused(Runnable runnable) {
+      @Override public void runPaused(Runnable runnable) {
         shadow.runPaused(runnable);
       }
     };
@@ -50,7 +50,7 @@ public String getShadowActivityThreadClassName() {
   @Override
   public ShadowApplicationAdapter getApplicationAdapter(final Activity component) {
     return new ShadowApplicationAdapter() {
-      public AndroidManifest getAppManifest() {
+      @Override public AndroidManifest getAppManifest() {
         return ShadowApplication.getInstance().getAppManifest();
       }
     };

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/RoboLayoutInflater.java
Patch:
@@ -51,7 +51,7 @@ public RoboLayoutInflater(Context context) {
     return super.onCreateView(name, attrs);
   }
 
-  public LayoutInflater cloneInContext(Context newContext) {
+  @Override public LayoutInflater cloneInContext(Context newContext) {
     return new RoboLayoutInflater(this, newContext);
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -89,7 +89,7 @@ public CharSequence getMessage() {
     return getShadowAlertController().getMessage();
   }
 
-  @Implementation
+  @Override @Implementation
   public void show() {
     super.show();
     shadowOf(RuntimeEnvironment.application).setLatestAlertDialog(this);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -520,7 +520,7 @@ public int compare(Wrapper o1, Wrapper o2) {
     });
   }
 
-  public List<Intent> getBroadcastIntents() {
+  @Override public List<Intent> getBroadcastIntents() {
     return broadcastIntents;
   }
 
@@ -774,11 +774,11 @@ public int checkPermission(String permission, int pid, int uid) {
     return grantedPermissions.contains(permission) ? PERMISSION_GRANTED : PERMISSION_DENIED;
   }
 
-  public void grantPermissions(String... permissionNames) {
+  @Override public void grantPermissions(String... permissionNames) {
     Collections.addAll(grantedPermissions, permissionNames);
   }
 
-  public void denyPermissions(String... permissionNames) {
+  @Override public void denyPermissions(String... permissionNames) {
     for (String permissionName : permissionNames) {
       grantedPermissions.remove(permissionName);
     }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -220,7 +220,7 @@ public void setComponentEnabledSetting(ComponentName componentName, int newState
     throw new UnsupportedOperationException("Not implemented");
   }
 
-  public void setApplicationEnabledSetting(String packageName, int newState, int flags) {
+  @Override public void setApplicationEnabledSetting(String packageName, int newState, int flags) {
     RuntimeEnvironment.getRobolectricPackageManager().setApplicationEnabledSetting(packageName, newState, flags);
   }
 
@@ -381,7 +381,7 @@ public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags, @User
     return getDelegatePackageManager().queryBroadcastReceivers(intent, flags, userId);
   }
 
-  @Implementation
+  @Override @Implementation
   public PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags) {
     return getDelegatePackageManager().getPackageArchiveInfo(archiveFilePath, flags);
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPhoneWindowFor22.java
Patch:
@@ -11,13 +11,13 @@
 @Implements(className = "com.android.internal.policy.impl.PhoneWindow", maxSdk = LOLLIPOP_MR1)
 public class ShadowPhoneWindowFor22 extends ShadowPhoneWindow {
 
-  @Implementation(maxSdk = LOLLIPOP_MR1)
+  @Override @Implementation(maxSdk = LOLLIPOP_MR1)
   public void setTitle(CharSequence title) {
     this.title = title;
     directlyOn(realWindow, realWindow.getClass().getName(), "setTitle", ReflectionHelpers.ClassParameter.from(CharSequence.class, title));
   }
 
-  @Implementation(maxSdk = LOLLIPOP_MR1)
+  @Override @Implementation(maxSdk = LOLLIPOP_MR1)
   public void setBackgroundDrawable(Drawable drawable) {
     this.backgroundDrawable = drawable;
     directlyOn(realWindow, realWindow.getClass().getName(), "setBackgroundDrawable", ReflectionHelpers.ClassParameter.from(Drawable.class, drawable));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPorterDuffColorFilter.java
Patch:
@@ -25,7 +25,7 @@ public void setMode(PorterDuff.Mode mode) {
     this.mode = mode;
   }
 
-  @Implementation
+  @Override @Implementation
   public int hashCode() {
     return 31 * mode.hashCode() + color;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowRemoteCallbackList.java
Patch:
@@ -25,7 +25,7 @@ private final class Callback implements IBinder.DeathRecipient {
       this.cookie = cookie;
     }
 
-    public void binderDied() {
+    @Override public void binderDied() {
       synchronized (callbacks) {
         callbacks.remove(callback.asBinder());
       }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -298,7 +298,7 @@ public void __constructor__(String name) {
       this.message = name;
     }
 
-    @Implementation
+    @Override @Implementation
     public String toString() {
       return realObject.getClass().getName() + ": " + message;
     }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -243,7 +243,7 @@ public boolean wasDestroyCalled() {
     return destroyCalled;
   }
 
-  @Implementation
+  @Override @Implementation
   public void post(Runnable action) {
     action.run();
     runFlag = true;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWifiConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public WifiConfiguration copy() {
   }
 
   // WifiConfiguration's toString() method crashes.
-  @Implementation
+  @Override @Implementation
   public String toString() {
     return String.format("WifiConfiguration{ssid=%s}", realObject.SSID);
   }

File: robolectric-shadows/shadows-httpclient/src/main/java/org/robolectric/shadows/httpclient/DefaultRequestDirector.java
Patch:
@@ -347,7 +347,7 @@ protected void rewriteRequestURI(
 
 
   // non-javadoc, see interface ClientRequestDirector
-  public HttpResponse execute(HttpHost target, HttpRequest request,
+  @Override public HttpResponse execute(HttpHost target, HttpRequest request,
                 HttpContext context)
     throws HttpException, IOException {
 

File: robolectric-shadows/shadows-maps/src/main/java/org/robolectric/shadows/maps/ShadowMapActivity.java
Patch:
@@ -14,7 +14,7 @@
 public class ShadowMapActivity extends ShadowActivity {
   private ConnectivityBroadcastReceiver connectivityBroadcastReceiver = new ConnectivityBroadcastReceiver();
 
-  public void __constructor__() {
+  @Override public void __constructor__() {
   }
 
   @Implementation

File: robolectric-shadows/shadows-maps/src/main/java/org/robolectric/shadows/maps/ShadowMapView.java
Patch:
@@ -98,7 +98,7 @@ public boolean isOpaque() {
   public void onSizeChanged(int newWidth, int newHeight, int oldWidth, int oldHeight) {
   }
 
-  @Implementation // todo 2.0-cleanup
+  @Override @Implementation // todo 2.0-cleanup
   public boolean onTouchEvent(MotionEvent event) {
     return directlyOn(realView, View.class).onTouchEvent(event);
   }
@@ -259,7 +259,7 @@ public void preLoad() {
     preLoadWasCalled = true;
   }
 
-  @Implementation
+  @Override @Implementation
   public void onLayout(boolean b, int i, int i1, int i2, int i3) {
   }
 

File: robolectric-utils/src/main/java/org/robolectric/util/SoftThreadLocal.java
Patch:
@@ -9,7 +9,7 @@
  */
 public abstract class SoftThreadLocal<T> {
   private final ThreadLocal<SoftReference<T>> threadLocal = new ThreadLocal<SoftReference<T>>() {
-    protected SoftReference<T> initialValue() {
+    @Override protected SoftReference<T> initialValue() {
       return new SoftReference<>(create());
     }
   };

File: robolectric-utils/src/main/java/org/robolectric/util/Strings.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.util;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -14,7 +16,7 @@ public static String fromStream(InputStream inputStream) throws IOException {
     int inSize;
     StringBuilder stringBuilder = new StringBuilder();
     while ((inSize = inputStream.read(buffer)) > 0) {
-      stringBuilder.append(new String(buffer, 0, inSize));
+      stringBuilder.append(new String(buffer, 0, inSize, UTF_8));
     }
     return stringBuilder.toString();
   }

File: robolectric-utils/src/test/java/org/robolectric/util/StringsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(JUnit4.class)
 public class StringsTest {

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -244,11 +244,11 @@ public NoOpInterceptor() {
       );
     }
 
-    public Function<Object, Object> handle(MethodSignature methodSignature) {
+    @Override public Function<Object, Object> handle(MethodSignature methodSignature) {
       return returnDefaultValue(methodSignature);
     }
 
-    public MethodHandle getMethodHandle(String methodName, MethodType type) throws NoSuchMethodException, IllegalAccessException {
+    @Override public MethodHandle getMethodHandle(String methodName, MethodType type) throws NoSuchMethodException, IllegalAccessException {
       MethodHandle nothing = constant(Void.class, null).asType(methodType(void.class));
 
       if (type.parameterCount() != 0) {

File: robolectric/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -143,7 +143,7 @@ public void run() {
     return this;
   }
 
-  public ActivityController<T> create() {
+  @Override public ActivityController<T> create() {
     return create(null);
   }
 
@@ -231,7 +231,7 @@ public ActivityController<T> stop() {
     return this;
   }
 
-  public ActivityController<T> destroy() {
+  @Override public ActivityController<T> destroy() {
     invokeWhilePaused("performDestroy");
     return this;
   }

File: robolectric/src/main/java/org/robolectric/android/controller/IntentServiceController.java
Patch:
@@ -68,12 +68,12 @@ public IntentServiceController<T> bind() {
       return this;
     }
 
-    public IntentServiceController<T> create() {
+    @Override public IntentServiceController<T> create() {
       invokeWhilePaused("onCreate");
       return this;
     }
 
-    public IntentServiceController<T> destroy() {
+    @Override public IntentServiceController<T> destroy() {
       invokeWhilePaused("onDestroy");
       return this;
     }

File: robolectric/src/main/java/org/robolectric/android/controller/ServiceController.java
Patch:
@@ -65,12 +65,12 @@ public ServiceController<T> bind() {
     return this;
   }
 
-  public ServiceController<T> create() {
+  @Override public ServiceController<T> create() {
     invokeWhilePaused("onCreate");
     return this;
   }
 
-  public ServiceController<T> destroy() {
+  @Override public ServiceController<T> destroy() {
     invokeWhilePaused("onDestroy");
     return this;
   }

File: shadow-api/src/main/java/org/robolectric/internal/IShadow.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.robolectric.util.ReflectionHelpers;
 
+@SuppressWarnings("TypeParameterUnusedInFormals")
 public interface IShadow {
   <T> T extract(Object instance);
 

File: shadow-api/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -15,6 +15,7 @@
 /**
  * Collection of helper methods for calling methods and accessing fields reflectively.
  */
+@SuppressWarnings(value = {"unchecked", "TypeParameterUnusedInFormals"})
 public class ReflectionHelpers {
   public static final Map<String, Object> PRIMITIVE_RETURN_VALUES =
       Collections.unmodifiableMap(new HashMap<String, Object>() {{
@@ -41,7 +42,7 @@ public static <A extends Annotation> A defaultsFor(Class<A> annotation) {
     return annotation.cast(
         Proxy.newProxyInstance(annotation.getClassLoader(), new Class[] { annotation },
             new InvocationHandler() {
-              public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+              @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                 return method.getDefaultValue();
               }
             }));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java
Patch:
@@ -209,7 +209,7 @@ public void verifyPendingInstall(int id, int verificationCode) {
     verificationResults.put(id, verificationCode);
   }
 
-  @Override @Implementation
+  @Implementation
   public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) {
     verificationTimeoutExtension.put(id, millisecondsToDelay);
   }

File: robolectric-junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -188,7 +188,7 @@ protected void configureShadows(FrameworkMethod method, Sandbox sandbox) {
     sandbox.configure(createClassHandler(shadowMap, sandbox), getInterceptors());
   }
 
-  protected Statement methodBlock(final FrameworkMethod method) {
+  @Override protected Statement methodBlock(final FrameworkMethod method) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -54,7 +54,7 @@ public TypedResource getValue(int resId, String qualifiers) {
     return resources.get(getResName(resId), qualifiers);
   }
 
-  public XmlBlock getXml(ResName resName, String qualifiers) {
+  @Override public XmlBlock getXml(ResName resName, String qualifiers) {
     FileTypedResource fileTypedResource = getFileResource(resName, qualifiers);
     if (fileTypedResource == null || !fileTypedResource.isXml()) {
       return null;
@@ -63,7 +63,7 @@ public XmlBlock getXml(ResName resName, String qualifiers) {
     }
   }
 
-  public InputStream getRawValue(ResName resName, String qualifiers) {
+  @Override public InputStream getRawValue(ResName resName, String qualifiers) {
     FileTypedResource fileTypedResource = getFileResource(resName, qualifiers);
     if (fileTypedResource == null) {
       return null;

File: robolectric-resources/src/main/java/org/robolectric/res/ThemeStyleSet.java
Patch:
@@ -10,7 +10,7 @@ public class ThemeStyleSet implements Style {
 
   private List<OverlayedStyle> styles = new ArrayList<>();
 
-  public AttributeResource getAttrValue(ResName attrName) {
+  @Override public AttributeResource getAttrValue(ResName attrName) {
     AttributeResource attribute = null;
 
     for (OverlayedStyle overlayedStyle : styles) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboIntentSender.java
Patch:
@@ -20,7 +20,7 @@ public RoboIntentSender(PendingIntent pendingIntent) {
     this.pendingIntent = pendingIntent;
   }
 
-  public void sendIntent(Context context, int code, Intent intent,
+  @Override public void sendIntent(Context context, int code, Intent intent,
                          final OnFinished onFinished, Handler handler, String requiredPermission)
       throws SendIntentException {
     try {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboVibrator.java
Patch:
@@ -53,7 +53,7 @@ public void vibrate(int i, String s, long[] l, int i1) {
 
   }
 
-  public void cancel() {
+  @Override public void cancel() {
     cancelled = true;
     vibrating = false;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -26,7 +26,7 @@ public ShadowActivityAdapter getShadowActivityAdapter(Activity component) {
     final ShadowActivity shadow = Shadows.shadowOf(component);
     return new ShadowActivityAdapter() {
 
-      public void setThemeFromManifest() {
+      @Override public void setThemeFromManifest() {
         shadow.setThemeFromManifest();
       }
     };
@@ -36,7 +36,7 @@ public void setThemeFromManifest() {
   public ShadowLooperAdapter getMainLooper() {
     final ShadowLooper shadow = Shadows.shadowOf(Looper.getMainLooper());
     return new ShadowLooperAdapter() {
-      public void runPaused(Runnable runnable) {
+      @Override public void runPaused(Runnable runnable) {
         shadow.runPaused(runnable);
       }
     };
@@ -50,7 +50,7 @@ public String getShadowActivityThreadClassName() {
   @Override
   public ShadowApplicationAdapter getApplicationAdapter(final Activity component) {
     return new ShadowApplicationAdapter() {
-      public AndroidManifest getAppManifest() {
+      @Override public AndroidManifest getAppManifest() {
         return ShadowApplication.getInstance().getAppManifest();
       }
     };

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/RoboLayoutInflater.java
Patch:
@@ -51,7 +51,7 @@ public RoboLayoutInflater(Context context) {
     return super.onCreateView(name, attrs);
   }
 
-  public LayoutInflater cloneInContext(Context newContext) {
+  @Override public LayoutInflater cloneInContext(Context newContext) {
     return new RoboLayoutInflater(this, newContext);
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -89,7 +89,7 @@ public CharSequence getMessage() {
     return getShadowAlertController().getMessage();
   }
 
-  @Implementation
+  @Override @Implementation
   public void show() {
     super.show();
     shadowOf(RuntimeEnvironment.application).setLatestAlertDialog(this);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -520,7 +520,7 @@ public int compare(Wrapper o1, Wrapper o2) {
     });
   }
 
-  public List<Intent> getBroadcastIntents() {
+  @Override public List<Intent> getBroadcastIntents() {
     return broadcastIntents;
   }
 
@@ -774,11 +774,11 @@ public int checkPermission(String permission, int pid, int uid) {
     return grantedPermissions.contains(permission) ? PERMISSION_GRANTED : PERMISSION_DENIED;
   }
 
-  public void grantPermissions(String... permissionNames) {
+  @Override public void grantPermissions(String... permissionNames) {
     Collections.addAll(grantedPermissions, permissionNames);
   }
 
-  public void denyPermissions(String... permissionNames) {
+  @Override public void denyPermissions(String... permissionNames) {
     for (String permissionName : permissionNames) {
       grantedPermissions.remove(permissionName);
     }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPackageManager.java
Patch:
@@ -220,7 +220,7 @@ public void setComponentEnabledSetting(ComponentName componentName, int newState
     throw new UnsupportedOperationException("Not implemented");
   }
 
-  public void setApplicationEnabledSetting(String packageName, int newState, int flags) {
+  @Override public void setApplicationEnabledSetting(String packageName, int newState, int flags) {
     RuntimeEnvironment.getRobolectricPackageManager().setApplicationEnabledSetting(packageName, newState, flags);
   }
 
@@ -381,7 +381,7 @@ public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags, @User
     return getDelegatePackageManager().queryBroadcastReceivers(intent, flags, userId);
   }
 
-  @Implementation
+  @Override @Implementation
   public PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags) {
     return getDelegatePackageManager().getPackageArchiveInfo(archiveFilePath, flags);
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPhoneWindowFor22.java
Patch:
@@ -11,13 +11,13 @@
 @Implements(className = "com.android.internal.policy.impl.PhoneWindow", maxSdk = LOLLIPOP_MR1)
 public class ShadowPhoneWindowFor22 extends ShadowPhoneWindow {
 
-  @Implementation(maxSdk = LOLLIPOP_MR1)
+  @Override @Implementation(maxSdk = LOLLIPOP_MR1)
   public void setTitle(CharSequence title) {
     this.title = title;
     directlyOn(realWindow, realWindow.getClass().getName(), "setTitle", ReflectionHelpers.ClassParameter.from(CharSequence.class, title));
   }
 
-  @Implementation(maxSdk = LOLLIPOP_MR1)
+  @Override @Implementation(maxSdk = LOLLIPOP_MR1)
   public void setBackgroundDrawable(Drawable drawable) {
     this.backgroundDrawable = drawable;
     directlyOn(realWindow, realWindow.getClass().getName(), "setBackgroundDrawable", ReflectionHelpers.ClassParameter.from(Drawable.class, drawable));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPorterDuffColorFilter.java
Patch:
@@ -25,7 +25,7 @@ public void setMode(PorterDuff.Mode mode) {
     this.mode = mode;
   }
 
-  @Implementation
+  @Override @Implementation
   public int hashCode() {
     return 31 * mode.hashCode() + color;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowRemoteCallbackList.java
Patch:
@@ -25,7 +25,7 @@ private final class Callback implements IBinder.DeathRecipient {
       this.cookie = cookie;
     }
 
-    public void binderDied() {
+    @Override public void binderDied() {
       synchronized (callbacks) {
         callbacks.remove(callback.asBinder());
       }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -298,7 +298,7 @@ public void __constructor__(String name) {
       this.message = name;
     }
 
-    @Implementation
+    @Override @Implementation
     public String toString() {
       return realObject.getClass().getName() + ": " + message;
     }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -243,7 +243,7 @@ public boolean wasDestroyCalled() {
     return destroyCalled;
   }
 
-  @Implementation
+  @Override @Implementation
   public void post(Runnable action) {
     action.run();
     runFlag = true;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWifiConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public WifiConfiguration copy() {
   }
 
   // WifiConfiguration's toString() method crashes.
-  @Implementation
+  @Override @Implementation
   public String toString() {
     return String.format("WifiConfiguration{ssid=%s}", realObject.SSID);
   }

File: robolectric-shadows/shadows-httpclient/src/main/java/org/robolectric/shadows/httpclient/DefaultRequestDirector.java
Patch:
@@ -347,7 +347,7 @@ protected void rewriteRequestURI(
 
 
   // non-javadoc, see interface ClientRequestDirector
-  public HttpResponse execute(HttpHost target, HttpRequest request,
+  @Override public HttpResponse execute(HttpHost target, HttpRequest request,
                 HttpContext context)
     throws HttpException, IOException {
 

File: robolectric-shadows/shadows-maps/src/main/java/org/robolectric/shadows/maps/ShadowMapActivity.java
Patch:
@@ -14,7 +14,7 @@
 public class ShadowMapActivity extends ShadowActivity {
   private ConnectivityBroadcastReceiver connectivityBroadcastReceiver = new ConnectivityBroadcastReceiver();
 
-  public void __constructor__() {
+  @Override public void __constructor__() {
   }
 
   @Implementation

File: robolectric-shadows/shadows-maps/src/main/java/org/robolectric/shadows/maps/ShadowMapView.java
Patch:
@@ -98,7 +98,7 @@ public boolean isOpaque() {
   public void onSizeChanged(int newWidth, int newHeight, int oldWidth, int oldHeight) {
   }
 
-  @Implementation // todo 2.0-cleanup
+  @Override @Implementation // todo 2.0-cleanup
   public boolean onTouchEvent(MotionEvent event) {
     return directlyOn(realView, View.class).onTouchEvent(event);
   }
@@ -259,7 +259,7 @@ public void preLoad() {
     preLoadWasCalled = true;
   }
 
-  @Implementation
+  @Override @Implementation
   public void onLayout(boolean b, int i, int i1, int i2, int i3) {
   }
 

File: robolectric-utils/src/main/java/org/robolectric/util/SoftThreadLocal.java
Patch:
@@ -9,7 +9,7 @@
  */
 public abstract class SoftThreadLocal<T> {
   private final ThreadLocal<SoftReference<T>> threadLocal = new ThreadLocal<SoftReference<T>>() {
-    protected SoftReference<T> initialValue() {
+    @Override protected SoftReference<T> initialValue() {
       return new SoftReference<>(create());
     }
   };

File: robolectric-utils/src/main/java/org/robolectric/util/Strings.java
Patch:
@@ -1,5 +1,7 @@
 package org.robolectric.util;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -14,7 +16,7 @@ public static String fromStream(InputStream inputStream) throws IOException {
     int inSize;
     StringBuilder stringBuilder = new StringBuilder();
     while ((inSize = inputStream.read(buffer)) > 0) {
-      stringBuilder.append(new String(buffer, 0, inSize));
+      stringBuilder.append(new String(buffer, 0, inSize, UTF_8));
     }
     return stringBuilder.toString();
   }

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -244,11 +244,11 @@ public NoOpInterceptor() {
       );
     }
 
-    public Function<Object, Object> handle(MethodSignature methodSignature) {
+    @Override public Function<Object, Object> handle(MethodSignature methodSignature) {
       return returnDefaultValue(methodSignature);
     }
 
-    public MethodHandle getMethodHandle(String methodName, MethodType type) throws NoSuchMethodException, IllegalAccessException {
+    @Override public MethodHandle getMethodHandle(String methodName, MethodType type) throws NoSuchMethodException, IllegalAccessException {
       MethodHandle nothing = constant(Void.class, null).asType(methodType(void.class));
 
       if (type.parameterCount() != 0) {

File: robolectric/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -143,7 +143,7 @@ public void run() {
     return this;
   }
 
-  public ActivityController<T> create() {
+  @Override public ActivityController<T> create() {
     return create(null);
   }
 
@@ -231,7 +231,7 @@ public ActivityController<T> stop() {
     return this;
   }
 
-  public ActivityController<T> destroy() {
+  @Override public ActivityController<T> destroy() {
     invokeWhilePaused("performDestroy");
     return this;
   }

File: robolectric/src/main/java/org/robolectric/android/controller/IntentServiceController.java
Patch:
@@ -68,12 +68,12 @@ public IntentServiceController<T> bind() {
       return this;
     }
 
-    public IntentServiceController<T> create() {
+    @Override public IntentServiceController<T> create() {
       invokeWhilePaused("onCreate");
       return this;
     }
 
-    public IntentServiceController<T> destroy() {
+    @Override public IntentServiceController<T> destroy() {
       invokeWhilePaused("onDestroy");
       return this;
     }

File: robolectric/src/main/java/org/robolectric/android/controller/ServiceController.java
Patch:
@@ -65,12 +65,12 @@ public ServiceController<T> bind() {
     return this;
   }
 
-  public ServiceController<T> create() {
+  @Override public ServiceController<T> create() {
     invokeWhilePaused("onCreate");
     return this;
   }
 
-  public ServiceController<T> destroy() {
+  @Override public ServiceController<T> destroy() {
     invokeWhilePaused("onDestroy");
     return this;
   }

File: shadow-api/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -42,7 +42,7 @@ public static <A extends Annotation> A defaultsFor(Class<A> annotation) {
     return annotation.cast(
         Proxy.newProxyInstance(annotation.getClassLoader(), new Class[] { annotation },
             new InvocationHandler() {
-              public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+              @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                 return method.getDefaultValue();
               }
             }));

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlBlock.java
Patch:
@@ -41,7 +41,7 @@ private synchronized static Document parse(FsFile xmlFile) {
       if (inputStream != null) try {
         inputStream.close();
       } catch (IOException e) {
-        throw new RuntimeException(e);
+        // ignore
       }
     }
   }

File: robolectric-utils/src/test/java/org/robolectric/util/StringsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(JUnit4.class)
 public class StringsTest {

File: shadow-api/src/main/java/org/robolectric/internal/IShadow.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.robolectric.util.ReflectionHelpers;
 
+@SuppressWarnings("TypeParameterUnusedInFormals")
 public interface IShadow {
   <T> T extract(Object instance);
 

File: shadow-api/src/main/java/org/robolectric/util/ReflectionHelpers.java
Patch:
@@ -15,6 +15,7 @@
 /**
  * Collection of helper methods for calling methods and accessing fields reflectively.
  */
+@SuppressWarnings(value = {"unchecked", "TypeParameterUnusedInFormals"})
 public class ReflectionHelpers {
   public static final Map<String, Object> PRIMITIVE_RETURN_VALUES =
       Collections.unmodifiableMap(new HashMap<String, Object>() {{

File: robolectric-sandbox/src/test/java/org/robolectric/testing/AnUninstrumentedClass.java
Patch:
@@ -1,4 +1,4 @@
 package org.robolectric.testing;
 
-public class AnUninstrumentedClass {
+public final class AnUninstrumentedClass {
 }

File: robolectric-sandbox/src/test/java/org/robolectric/testing/AnUninstrumentedClass.java
Patch:
@@ -1,4 +1,4 @@
 package org.robolectric.testing;
 
-public class AnUninstrumentedClass {
+public final class AnUninstrumentedClass {
 }

File: robolectric-resources/src/main/java/org/robolectric/res/DocumentLoader.java
Patch:
@@ -31,6 +31,9 @@ private void loadFile(FsFile dir) {
     if (!dir.exists()) {
       throw new RuntimeException("no such directory " + dir);
     }
+    if (!dir.isDirectory()) {
+      return;
+    }
 
     for (FsFile file : dir.listFiles(ENDS_WITH_XML)) {
       loadResourceXmlFile(new XmlContext(packageName, file));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -444,7 +444,7 @@ public void setDefaultKeyMode_shouldSetKeyMode() {
 
     for (int mode : modes) {
       activity.setDefaultKeyMode(mode);
-      assertThat(shadow.getDefaultKeymode()).isEqualTo(mode).as("Unexpected key mode");
+      assertThat(shadow.getDefaultKeymode()).as("Unexpected key mode").isEqualTo(mode);
     }
   }
 
@@ -1037,4 +1037,4 @@ public void onActivityDestroyed(Activity activity) {
       transcript.add("onActivityDestroyed");
     }
   }
-}
+}
\ No newline at end of file

File: robolectric-resources/src/main/java/org/robolectric/res/RoutingResourceTable.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeSet;
 
 public class RoutingResourceTable implements ResourceTable {
   private static final PackageResourceTable EMPTY_RESOURCE_TABLE = new ResourceTableFactory().newResourceTable("");
@@ -95,6 +96,6 @@ private PackageResourceTable whichProvidesFor(String namespace) {
 
   @Override
   public String toString() {
-    return resourceTables.keySet().toString();
+    return new TreeSet<>(resourceTables.keySet()).toString();
   }
 }

File: robolectric-sandbox/src/test/java/org/robolectric/JavaVersionTest.java
Patch:
@@ -1,10 +1,13 @@
 package org.robolectric;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.JavaVersion;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class JavaVersionTest {
   @Test
   public void jdk8() {

File: robolectric-sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -3,6 +3,8 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.Mockito;
 import org.robolectric.internal.bytecode.ClassHandler;
 import org.robolectric.internal.bytecode.ClassInfo;
@@ -81,6 +83,7 @@
 import static org.robolectric.util.ReflectionHelpers.newInstance;
 import static org.robolectric.util.ReflectionHelpers.setStaticField;
 
+@RunWith(JUnit4.class)
 public class SandboxClassLoaderTest {
 
   private ClassLoader classLoader;

File: robolectric-sandbox/src/test/java/org/robolectric/internal/bytecode/ProxyMakerTest.java
Patch:
@@ -1,13 +1,16 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.internal.bytecode.ProxyMaker;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class ProxyMakerTest {
   private static final ProxyMaker.MethodMapper IDENTITY_NAME = new ProxyMaker.MethodMapper() {
     @Override public String getName(String className, String methodName) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResourcesImpl.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Locale;
 
 import static android.os.Build.VERSION_CODES.N;
+import static android.os.Build.VERSION_CODES.O;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
@@ -225,4 +226,5 @@ public Drawable loadDrawable(Resources wrapper, TypedValue value, int id, Resour
     ShadowResources.setCreatedFromResId(wrapper, id, drawable);
     return drawable;
   }
+
 }

File: robolectric/src/main/java/org/robolectric/internal/SdkConfig.java
Patch:
@@ -26,7 +26,7 @@ public class SdkConfig implements Comparable<SdkConfig> {
       addSdk(Build.VERSION_CODES.M, "6.0.1_r3", "0", "1.7", "REL");
       addSdk(Build.VERSION_CODES.N, "7.0.0_r1", "0", "1.8", "REL");
       addSdk(Build.VERSION_CODES.N_MR1, "7.1.0_r7", "0", "1.8", "REL");
-      addSdk(Build.VERSION_CODES.CUR_DEVELOPMENT, "o-preview-2", "0", "1.8", "O");
+      addSdk(Build.VERSION_CODES.O, "o-preview-2", "0", "1.8", "O");
     }
 
     private void addSdk(int sdkVersion, String androidVersion, String frameworkSdkBuildVersion, String minJdkVersion, String codeName) {

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -3,6 +3,8 @@
 import android.app.Application;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowView;
@@ -19,6 +21,7 @@
 import static org.robolectric.annotation.Config.DEFAULT_APPLICATION;
 import static org.robolectric.util.TestUtil.stringify;
 
+@RunWith(JUnit4.class)
 public class ConfigMergerTest {
   @Test public void defaultValuesAreMerged() throws Exception {
     assertThat(configFor(Test2.class, "withoutAnnotation",

File: robolectric/src/test/java/org/robolectric/ConfigTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import javax.annotation.Nonnull;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
@@ -11,6 +13,7 @@
 import static org.junit.Assert.fail;
 import static org.robolectric.annotation.Config.DEFAULT_VALUE_INT;
 
+@RunWith(JUnit4.class)
 public class ConfigTest {
   @Test
   public void testDefaults() throws Exception {

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.TestUtil.newConfig;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.SelfTest.class)
 public class DefaultTestLifecycleTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
@@ -48,7 +48,7 @@ public void shouldReturnSpecifiedApplicationWhenManifestDeclaresAppName() throws
         .isExactlyInstanceOf(TestApplication.class);
   }
 
-  @Config(manifest = "src/test/resources/TestAndroidManifestWithReceiversCustomPackage.xml")
+  @Config(manifest = "TestAndroidManifestWithReceiversCustomPackage.xml")
   @Test public void shouldAssignThePackageNameFromTheManifest() throws Exception {
     Application application = RuntimeEnvironment.application;
 
@@ -67,7 +67,7 @@ public void shouldRegisterReceiversFromTheManifest() throws Exception {
     assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
   }
 
-  @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
+  @Config(manifest = "TestAndroidManifestForActivities.xml")
   @Test public void shouldRegisterActivitiesFromManifestInPackageManager() throws Exception {
     Application application = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/ResourceMergerTest.java
Patch:
@@ -40,7 +40,7 @@ public void sameIdentifiersFromLibraryRClassesShouldReturnSameValues() throws Ex
   }
 
   @Test
-  @Config(manifest="src/test/resources/TestAndroidManifest.xml", libraries="lib1")
+  @Config(libraries="lib1")
   public void libraryConfigShouldOverrideProjectProperties() throws Exception {
     AndroidManifest manifest = Shadows.shadowOf(RuntimeEnvironment.application).getAppManifest();
     List<AndroidManifest> libraryManifests = manifest.getLibraryManifests();

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -6,9 +6,11 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.Description;
+import org.junit.runner.RunWith;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.RobolectricTestRunner.RobolectricFrameworkMethod;
 import org.robolectric.android.internal.ParallelUniverse;
@@ -30,6 +32,7 @@
 import static org.mockito.Mockito.mock;
 import static org.robolectric.util.ReflectionHelpers.callConstructor;
 
+@RunWith(JUnit4.class)
 public class RobolectricTestRunnerTest {
 
   private RunNotifier notifier;

File: robolectric/src/test/java/org/robolectric/RuntimeEnvironmentTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.robolectric;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.Scheduler;
 
 import java.util.concurrent.CountDownLatch;
@@ -9,6 +11,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class RuntimeEnvironmentTest {
   @Test
   public void setMainThread_forCurrentThread() {

File: robolectric/src/test/java/org/robolectric/SdkPickerTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.SdkConfig;
 import org.robolectric.manifest.AndroidManifest;
@@ -13,6 +15,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class SdkPickerTest {
   private static final int[] sdkInts = { 16, 17, 18, 19, 21, 22, 23 };
   private AndroidManifest appManifest;

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -7,8 +7,10 @@
 import org.junit.Test;
 import org.junit.internal.TextListener;
 import org.junit.runner.Result;
+import org.junit.runner.RunWith;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
@@ -30,6 +32,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.util.TestUtil.resourceFile;
 
+@RunWith(JUnit4.class)
 public class TestRunnerSequenceTest {
   public static class StateHolder {
     public static List<String> transcript;

File: robolectric/src/test/java/org/robolectric/android/AndroidInterceptorsTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.bytecode.Interceptors;
 import org.robolectric.internal.bytecode.MethodRef;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class AndroidInterceptorsTest {
   @Test
   public void allMethodRefs() throws Exception {

File: robolectric/src/test/java/org/robolectric/android/AndroidTranslatorClassInstrumentedTest.java
Patch:
@@ -5,14 +5,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.internal.Instrument;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.SelfTest.class)
 public class AndroidTranslatorClassInstrumentedTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -2,10 +2,13 @@
 
 import android.content.Intent;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.TestRunners;
 import org.robolectric.res.builder.DefaultPackageManager;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(TestRunners.SelfTest.class)
 public class DefaultPackageManagerIntentComparatorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/internal/ClassNameResolverTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import android.app.Application;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.TestApplication;
 import org.robolectric.android.internal.ClassNameResolver;
 
 import static org.junit.Assert.assertEquals;
 
+@RunWith(JUnit4.class)
 public class ClassNameResolverTest {
   @Test
   public void shouldResolveClassesBySimpleName() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/BuckManifestFactoryTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.FileFsFile;
@@ -12,6 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class BuckManifestFactoryTest {
 
   private Config.Builder configBuilder;

File: robolectric/src/test/java/org/robolectric/internal/GradleManifestFactoryTest.java
Patch:
@@ -5,6 +5,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.gradleapp.BuildConfig;
 import org.robolectric.manifest.AndroidManifest;
@@ -18,6 +20,7 @@
 import static org.robolectric.util.TestUtil.joinPath;
 import static org.robolectric.util.TestUtil.newFile;
 
+@RunWith(JUnit4.class)
 public class GradleManifestFactoryTest {
   @Rule
   public ExpectedException exception = ExpectedException.none();

File: robolectric/src/test/java/org/robolectric/internal/MavenManifestFactoryTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.res.FsFile;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class MavenManifestFactoryTest {
 
   private Config.Builder configBuilder;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -4,6 +4,8 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
 import org.robolectric.internal.SandboxFactory;
@@ -12,6 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class AndroidSandboxClassLoaderTest {
 
   private ClassLoader classLoader;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InstrumentationConfigurationTest.java
Patch:
@@ -2,13 +2,16 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class InstrumentationConfigurationTest {
   private InstrumentationConfiguration config;
 

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InvocationProfileTest.java
Patch:
@@ -2,9 +2,12 @@
 
 import android.view.View;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class InvocationProfileTest {
   @Test
   public void shouldConvertFromMethodSignature() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/bytecode/MethodSignatureTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class MethodSignatureTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowMapTest.java
Patch:
@@ -1,10 +1,13 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.shadows.ShadowCursorAdapter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ShadowMapTest {
   @Test public void shouldLookUpShadowClassesByNamingConvention() throws Exception {
     ShadowMap map = new ShadowMap.Builder().build();

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowWranglerUnitTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -13,6 +15,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
+@RunWith(JUnit4.class)
 public class ShadowWranglerUnitTest {
   private ShadowWrangler shadowWrangler;
   private Interceptors interceptors;

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverFileCacheTest.java
Patch:
@@ -12,10 +12,13 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.internal.dependency.CachedDependencyResolver.Cache;
 
 import static org.junit.Assert.*;
 
+@RunWith(JUnit4.class)
 public class CachedDependencyResolverFileCacheTest {
 
   private final String ID = "id";

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverTest.java
Patch:
@@ -10,6 +10,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.internal.dependency.CachedDependencyResolver.Cache;
 import org.robolectric.internal.dependency.CachedDependencyResolver.CacheNamingStrategy;
@@ -18,6 +20,7 @@
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;
 
+@RunWith(JUnit4.class)
 public class CachedDependencyResolverTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private static final String CACHE_NAME = "someName";

File: robolectric/src/test/java/org/robolectric/internal/dependency/DependencyJarTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.internal.dependency;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class DependencyJarTest {
   @Test
   public void testGetShortName() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/dependency/MavenDependencyResolverTest.java
Patch:
@@ -6,6 +6,8 @@
 import org.apache.tools.ant.Project;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -15,6 +17,7 @@
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
+@RunWith(JUnit4.class)
 public class MavenDependencyResolverTest {
 
   private static final String REPOSITORY_URL = "https://default-repo";

File: robolectric/src/test/java/org/robolectric/internal/dependency/PropertiesDependencyResolverTest.java
Patch:
@@ -6,6 +6,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
 
@@ -18,6 +20,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class PropertiesDependencyResolverTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();

File: robolectric/src/test/java/org/robolectric/res/DrawableResourceLoaderNoRunnerTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.ReflectionHelpers;
 
 import java.io.File;
@@ -11,6 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
+@RunWith(JUnit4.class)
 public class DrawableResourceLoaderNoRunnerTest {
   private static final String JAR_SEPARATOR = "/";
   private static final String UNIX_SEPARATOR = "/";

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -3,13 +3,16 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class ResBundleTest {
   private ResBundle.ResMap resMap = new ResBundle.ResMap();
   private ResName resName;

File: robolectric/src/test/java/org/robolectric/res/ResNameTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.res;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ResNameTest {
   @Test public void shouldQualify() throws Exception {
     assertThat(ResName.qualifyResourceName("some.package:type/name", null, null)).isEqualTo("some.package:type/name");

File: robolectric/src/test/java/org/robolectric/res/ResourceParserTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -20,6 +22,7 @@
 import static org.robolectric.util.TestUtil.sdkResources;
 import static org.robolectric.util.TestUtil.testResources;
 
+@RunWith(JUnit4.class)
 public class ResourceParserTest {
 
   private ResourceTable resourceTable;

File: robolectric/src/test/java/org/robolectric/res/ResourceRemapperTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.util.HashSet;
 import java.util.Set;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ResourceRemapperTest {
 
   @Test(expected = IllegalArgumentException.class)

File: robolectric/src/test/java/org/robolectric/res/ResourceTableFactoryTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.*;
 
+@RunWith(JUnit4.class)
 public class ResourceTableFactoryTest {
   private ResourceTable appResourceTable;
   private ResourceTable systemResourceTable;

File: robolectric/src/test/java/org/robolectric/res/StaxPluralsLoaderTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 import org.robolectric.util.TestUtil;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.testResources;
 
+@RunWith(JUnit4.class)
 public class StaxPluralsLoaderTest {
   private PackageResourceTable resourceTable;
 

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -1,11 +1,14 @@
 package org.robolectric.res;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.util.*;
 
 import static org.assertj.core.api.Assertions.*;
 
+@RunWith(JUnit4.class)
 public class StringResourcesTest {
   @Test
   public void escape_shouldEscapeStrings() {

File: robolectric/src/test/java/org/robolectric/res/StyleResourceLoaderTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.sdkResources;
 
+@RunWith(JUnit4.class)
 public class StyleResourceLoaderTest {
   private PackageResourceTable resourceTable;
 

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.robolectric.R;
+import org.robolectric.TestRunners;
 import org.robolectric.android.XmlResourceParserImpl;
 import org.robolectric.res.*;
 import org.w3c.dom.Document;
@@ -34,7 +35,7 @@
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 import static org.robolectric.util.TestUtil.testResources;
 
-@RunWith(JUnit4.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class XmlResourceParserImplTest {
 
   private static final String XMLNS_NS = "http://www.w3.org/2000/xmlns/";

File: robolectric/src/test/java/org/robolectric/shadows/ConverterTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.TestRunners;
 import org.robolectric.res.*;
 
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(TestRunners.SelfTest.class)
 public class ConverterTest {
 
   private XmlContext xmlContext;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -46,10 +46,10 @@ public void shouldRecordParcelables() {
   }
 
   @Test
-  public void shouldEqualToClonedEvent() {
+  public void shouldBeEqualToClonedEvent() {
     shadow.setEventType(AccessibilityEvent.TYPE_ANNOUNCEMENT);
     AccessibilityEvent newEvent = ShadowAccessibilityEvent.obtain(event);
-    assertThat(shadow.equals(newEvent)).isEqualTo(true);
+    assertThat(event.equals(newEvent)).isEqualTo(true);
     newEvent.recycle();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -1,13 +1,14 @@
 package org.robolectric.shadows;
 
 import android.view.Choreographer;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 import org.robolectric.util.TimeUtils;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -34,7 +35,7 @@ public void removeFrameCallback_shouldRemoveCallback() {
     instance.postFrameCallbackDelayed(callback, 1000);
     instance.removeFrameCallback(callback);
     ShadowApplication.getInstance().getForegroundThreadScheduler().advanceToLastPostedRunnable();
-    verify(callback, never()).doFrame(anyInt());
+    verify(callback, never()).doFrame(anyLong());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConnectivityManagerTest.java
Patch:
@@ -145,7 +145,7 @@ public void setActiveNetworkInfo_shouldSetActiveNetwork() throws Exception {
   public void getAllNetworkInfo_shouldReturnAllNetworkInterfaces() throws Exception {
     NetworkInfo[] infos = connectivityManager.getAllNetworkInfo();
     assertThat(infos).hasSize(2);
-    assertThat(connectivityManager.getActiveNetworkInfo()).isSameAs(infos[0]);
+    assertThat(infos).contains(connectivityManager.getActiveNetworkInfo());
 
     shadowConnectivityManager.setActiveNetworkInfo(null);
     assertThat(connectivityManager.getAllNetworkInfo()).isEmpty();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -544,23 +544,23 @@ public void shouldRemovePeriodSync() throws Exception {
   @Test
   public void shouldGetPeriodSyncs() throws Exception {
     assertThat(ContentResolver.getPeriodicSyncs(a, AUTHORITY).size()).isEqualTo(0);
-    ContentResolver.addPeriodicSync(a, AUTHORITY, new Bundle(), 6000l);
+    ContentResolver.addPeriodicSync(a, AUTHORITY, new Bundle(), 6000L);
 
     List<PeriodicSync> syncs = ContentResolver.getPeriodicSyncs(a, AUTHORITY);
     assertThat(syncs.size()).isEqualTo(1);
 
     PeriodicSync first = syncs.get(0);
     assertThat(first.account).isEqualTo(a);
     assertThat(first.authority).isEqualTo(AUTHORITY);
-    assertThat(first.period).isEqualTo(6000l);
+    assertThat(first.period).isEqualTo(6000L);
     assertThat(first.extras).isNotNull();
   }
 
   @Test
   public void shouldValidateSyncExtras() throws Exception {
     Bundle bundle = new Bundle();
     bundle.putString("foo", "strings");
-    bundle.putLong("long", 10l);
+    bundle.putLong("long", 10L);
     bundle.putDouble("double", 10.0d);
     bundle.putFloat("float", 10.0f);
     bundle.putInt("int", 10);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -497,9 +497,9 @@ public boolean handleMessage(Message msg) {
 
     final long startTime = Robolectric.getForegroundThreadScheduler().getCurrentTime();
     h.sendEmptyMessage(0);
-    h.sendEmptyMessageDelayed(0, 4000l);
+    h.sendEmptyMessageDelayed(0, 4000L);
     Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-    h.sendEmptyMessageDelayed(0, 12000l);
+    h.sendEmptyMessageDelayed(0, 12000L);
     Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
     assertThat(whens).as("whens").containsExactly(startTime, startTime + 4000, startTime + 16000);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -33,7 +33,7 @@ public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
+  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
-@Config(manifest = "src/test/resources/TestAndroidManifest25.xml")
+@Config(manifest = "TestAndroidManifest25.xml")
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {
   // run 'em all again with android:targetSdkVersion=25 - behavior of NotificationBuilder
   // varies based on version specified in Manifest rather than runtime framework version.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelTest.java
Patch:
@@ -48,7 +48,7 @@ public void testReadIntWhenEmpty() {
 
   @Test
   public void testReadLongWhenEmpty() {
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test
@@ -306,7 +306,7 @@ public void testReadWriteMultipleLongs() {
       assertThat(parcel.readLong()).isEqualTo(i);
     }
     // now try to read past the number of items written and see what happens
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test
@@ -322,7 +322,7 @@ public void testReadWriteStringLong() {
     }
     // now try to read past the number of items written and see what happens
     assertThat(parcel.readString()).isNull();
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test(expected = ClassCastException.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -110,7 +110,7 @@ public void getText_withHtml() throws Exception {
 
   @Test
   public void getText_withLayoutId() throws Exception {
-    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("." + File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
+    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).endsWith(File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
   }
 
   @Test
@@ -680,6 +680,7 @@ public void obtainStyledAttributes_shouldCheckXmlFirst_fromAttributeSetBuilder()
     typedArray.recycle();
   }
 
+  @Test
   public void obtainStyledAttributes_shouldCheckXmlFirst_fromXmlLoadedFromResources() throws Exception {
 
     // This simulates a ResourceProvider built from a 21+ SDK as viewportHeight / viewportWidth were introduced in API 21

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -560,6 +560,7 @@ public void shouldTrackRequestLayoutCalls() throws Exception {
     assertThat(shadowOf(view).didRequestLayout()).isFalse();
   }
 
+  @Test
   public void shouldClickAndNotClick() throws Exception {
     assertThat(view.isClickable()).isFalse();
     view.setClickable(true);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalUnitTest.java
Patch:
@@ -3,12 +3,15 @@
 import android.app.Activity;
 import android.view.WindowManagerGlobal;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.android.FailureListener;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ShadowWindowManagerGlobalUnitTest {
   @Test
   public void shouldReset() throws Exception {

File: robolectric/src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.robolectric.util;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.net.URL;
 
@@ -10,6 +12,7 @@
  * @author Vyacheslav Mayorov
  * @since 2013-10-04
  */
+@RunWith(JUnit4.class)
 public class UtilTest {
   @Test
   public void urlShouldReturnCorrectURL() throws Exception {

File: robolectric-resources/src/main/java/org/robolectric/res/RoutingResourceTable.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeSet;
 
 public class RoutingResourceTable implements ResourceTable {
   private static final PackageResourceTable EMPTY_RESOURCE_TABLE = new ResourceTableFactory().newResourceTable("");
@@ -95,6 +96,6 @@ private PackageResourceTable whichProvidesFor(String namespace) {
 
   @Override
   public String toString() {
-    return resourceTables.keySet().toString();
+    return new TreeSet<>(resourceTables.keySet()).toString();
   }
 }

File: robolectric-sandbox/src/test/java/org/robolectric/JavaVersionTest.java
Patch:
@@ -1,10 +1,13 @@
 package org.robolectric;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.JavaVersion;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class JavaVersionTest {
   @Test
   public void jdk8() {

File: robolectric-sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -3,6 +3,8 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.Mockito;
 import org.robolectric.internal.bytecode.ClassHandler;
 import org.robolectric.internal.bytecode.ClassInfo;
@@ -81,6 +83,7 @@
 import static org.robolectric.util.ReflectionHelpers.newInstance;
 import static org.robolectric.util.ReflectionHelpers.setStaticField;
 
+@RunWith(JUnit4.class)
 public class SandboxClassLoaderTest {
 
   private ClassLoader classLoader;

File: robolectric-sandbox/src/test/java/org/robolectric/internal/bytecode/ProxyMakerTest.java
Patch:
@@ -1,13 +1,16 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.internal.bytecode.ProxyMaker;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class ProxyMakerTest {
   private static final ProxyMaker.MethodMapper IDENTITY_NAME = new ProxyMaker.MethodMapper() {
     @Override public String getName(String className, String methodName) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResourcesImpl.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Locale;
 
 import static android.os.Build.VERSION_CODES.N;
+import static android.os.Build.VERSION_CODES.O;
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadow.api.Shadow.directlyOn;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
@@ -225,4 +226,5 @@ public Drawable loadDrawable(Resources wrapper, TypedValue value, int id, Resour
     ShadowResources.setCreatedFromResId(wrapper, id, drawable);
     return drawable;
   }
+
 }

File: robolectric/src/main/java/org/robolectric/internal/SdkConfig.java
Patch:
@@ -26,7 +26,7 @@ public class SdkConfig implements Comparable<SdkConfig> {
       addSdk(Build.VERSION_CODES.M, "6.0.1_r3", "0", "1.7", "REL");
       addSdk(Build.VERSION_CODES.N, "7.0.0_r1", "0", "1.8", "REL");
       addSdk(Build.VERSION_CODES.N_MR1, "7.1.0_r7", "0", "1.8", "REL");
-      addSdk(Build.VERSION_CODES.CUR_DEVELOPMENT, "o-preview-2", "0", "1.8", "O");
+      addSdk(Build.VERSION_CODES.O, "o-preview-2", "0", "1.8", "O");
     }
 
     private void addSdk(int sdkVersion, String androidVersion, String frameworkSdkBuildVersion, String minJdkVersion, String codeName) {

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -3,6 +3,8 @@
 import android.app.Application;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowView;
@@ -19,6 +21,7 @@
 import static org.robolectric.annotation.Config.DEFAULT_APPLICATION;
 import static org.robolectric.util.TestUtil.stringify;
 
+@RunWith(JUnit4.class)
 public class ConfigMergerTest {
   @Test public void defaultValuesAreMerged() throws Exception {
     assertThat(configFor(Test2.class, "withoutAnnotation",

File: robolectric/src/test/java/org/robolectric/ConfigTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import javax.annotation.Nonnull;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
@@ -11,6 +13,7 @@
 import static org.junit.Assert.fail;
 import static org.robolectric.annotation.Config.DEFAULT_VALUE_INT;
 
+@RunWith(JUnit4.class)
 public class ConfigTest {
   @Test
   public void testDefaults() throws Exception {

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.TestUtil.newConfig;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.SelfTest.class)
 public class DefaultTestLifecycleTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
@@ -48,7 +48,7 @@ public void shouldReturnSpecifiedApplicationWhenManifestDeclaresAppName() throws
         .isExactlyInstanceOf(TestApplication.class);
   }
 
-  @Config(manifest = "src/test/resources/TestAndroidManifestWithReceiversCustomPackage.xml")
+  @Config(manifest = "TestAndroidManifestWithReceiversCustomPackage.xml")
   @Test public void shouldAssignThePackageNameFromTheManifest() throws Exception {
     Application application = RuntimeEnvironment.application;
 
@@ -67,7 +67,7 @@ public void shouldRegisterReceiversFromTheManifest() throws Exception {
     assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
   }
 
-  @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
+  @Config(manifest = "TestAndroidManifestForActivities.xml")
   @Test public void shouldRegisterActivitiesFromManifestInPackageManager() throws Exception {
     Application application = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/ResourceMergerTest.java
Patch:
@@ -40,7 +40,7 @@ public void sameIdentifiersFromLibraryRClassesShouldReturnSameValues() throws Ex
   }
 
   @Test
-  @Config(manifest="src/test/resources/TestAndroidManifest.xml", libraries="lib1")
+  @Config(libraries="lib1")
   public void libraryConfigShouldOverrideProjectProperties() throws Exception {
     AndroidManifest manifest = Shadows.shadowOf(RuntimeEnvironment.application).getAppManifest();
     List<AndroidManifest> libraryManifests = manifest.getLibraryManifests();

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -6,9 +6,11 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.Description;
+import org.junit.runner.RunWith;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.RobolectricTestRunner.RobolectricFrameworkMethod;
 import org.robolectric.android.internal.ParallelUniverse;
@@ -30,6 +32,7 @@
 import static org.mockito.Mockito.mock;
 import static org.robolectric.util.ReflectionHelpers.callConstructor;
 
+@RunWith(JUnit4.class)
 public class RobolectricTestRunnerTest {
 
   private RunNotifier notifier;

File: robolectric/src/test/java/org/robolectric/RuntimeEnvironmentTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.robolectric;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.Scheduler;
 
 import java.util.concurrent.CountDownLatch;
@@ -9,6 +11,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class RuntimeEnvironmentTest {
   @Test
   public void setMainThread_forCurrentThread() {

File: robolectric/src/test/java/org/robolectric/SdkPickerTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.SdkConfig;
 import org.robolectric.manifest.AndroidManifest;
@@ -13,6 +15,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class SdkPickerTest {
   private static final int[] sdkInts = { 16, 17, 18, 19, 21, 22, 23 };
   private AndroidManifest appManifest;

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -7,8 +7,10 @@
 import org.junit.Test;
 import org.junit.internal.TextListener;
 import org.junit.runner.Result;
+import org.junit.runner.RunWith;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
@@ -30,6 +32,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.util.TestUtil.resourceFile;
 
+@RunWith(JUnit4.class)
 public class TestRunnerSequenceTest {
   public static class StateHolder {
     public static List<String> transcript;

File: robolectric/src/test/java/org/robolectric/android/AndroidInterceptorsTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.bytecode.Interceptors;
 import org.robolectric.internal.bytecode.MethodRef;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class AndroidInterceptorsTest {
   @Test
   public void allMethodRefs() throws Exception {

File: robolectric/src/test/java/org/robolectric/android/AndroidTranslatorClassInstrumentedTest.java
Patch:
@@ -5,14 +5,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.internal.Instrument;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.SelfTest.class)
 public class AndroidTranslatorClassInstrumentedTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -2,10 +2,13 @@
 
 import android.content.Intent;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.TestRunners;
 import org.robolectric.res.builder.DefaultPackageManager;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(TestRunners.SelfTest.class)
 public class DefaultPackageManagerIntentComparatorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/android/internal/ClassNameResolverTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import android.app.Application;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.TestApplication;
 import org.robolectric.android.internal.ClassNameResolver;
 
 import static org.junit.Assert.assertEquals;
 
+@RunWith(JUnit4.class)
 public class ClassNameResolverTest {
   @Test
   public void shouldResolveClassesBySimpleName() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/BuckManifestFactoryTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.FileFsFile;
@@ -12,6 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class BuckManifestFactoryTest {
 
   private Config.Builder configBuilder;

File: robolectric/src/test/java/org/robolectric/internal/GradleManifestFactoryTest.java
Patch:
@@ -5,6 +5,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.gradleapp.BuildConfig;
 import org.robolectric.manifest.AndroidManifest;
@@ -18,6 +20,7 @@
 import static org.robolectric.util.TestUtil.joinPath;
 import static org.robolectric.util.TestUtil.newFile;
 
+@RunWith(JUnit4.class)
 public class GradleManifestFactoryTest {
   @Rule
   public ExpectedException exception = ExpectedException.none();

File: robolectric/src/test/java/org/robolectric/internal/MavenManifestFactoryTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.annotation.Config;
 import org.robolectric.res.FileFsFile;
 import org.robolectric.res.FsFile;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class MavenManifestFactoryTest {
 
   private Config.Builder configBuilder;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -4,6 +4,8 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
 import org.robolectric.internal.SandboxFactory;
@@ -12,6 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class AndroidSandboxClassLoaderTest {
 
   private ClassLoader classLoader;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InstrumentationConfigurationTest.java
Patch:
@@ -2,13 +2,16 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class InstrumentationConfigurationTest {
   private InstrumentationConfiguration config;
 

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InvocationProfileTest.java
Patch:
@@ -2,9 +2,12 @@
 
 import android.view.View;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class InvocationProfileTest {
   @Test
   public void shouldConvertFromMethodSignature() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/bytecode/MethodSignatureTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class MethodSignatureTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowMapTest.java
Patch:
@@ -1,10 +1,13 @@
 package org.robolectric.internal.bytecode;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.shadows.ShadowCursorAdapter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ShadowMapTest {
   @Test public void shouldLookUpShadowClassesByNamingConvention() throws Exception {
     ShadowMap map = new ShadowMap.Builder().build();

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowWranglerUnitTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -13,6 +15,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
+@RunWith(JUnit4.class)
 public class ShadowWranglerUnitTest {
   private ShadowWrangler shadowWrangler;
   private Interceptors interceptors;

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverFileCacheTest.java
Patch:
@@ -12,10 +12,13 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.internal.dependency.CachedDependencyResolver.Cache;
 
 import static org.junit.Assert.*;
 
+@RunWith(JUnit4.class)
 public class CachedDependencyResolverFileCacheTest {
 
   private final String ID = "id";

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverTest.java
Patch:
@@ -10,6 +10,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.internal.dependency.CachedDependencyResolver.Cache;
 import org.robolectric.internal.dependency.CachedDependencyResolver.CacheNamingStrategy;
@@ -18,6 +20,7 @@
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;
 
+@RunWith(JUnit4.class)
 public class CachedDependencyResolverTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private static final String CACHE_NAME = "someName";

File: robolectric/src/test/java/org/robolectric/internal/dependency/DependencyJarTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.internal.dependency;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class DependencyJarTest {
   @Test
   public void testGetShortName() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/dependency/MavenDependencyResolverTest.java
Patch:
@@ -6,6 +6,8 @@
 import org.apache.tools.ant.Project;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -15,6 +17,7 @@
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
+@RunWith(JUnit4.class)
 public class MavenDependencyResolverTest {
 
   private static final String REPOSITORY_URL = "https://default-repo";

File: robolectric/src/test/java/org/robolectric/internal/dependency/PropertiesDependencyResolverTest.java
Patch:
@@ -6,6 +6,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
 
@@ -18,6 +20,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class PropertiesDependencyResolverTest {
 
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();

File: robolectric/src/test/java/org/robolectric/res/DrawableResourceLoaderNoRunnerTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.util.ReflectionHelpers;
 
 import java.io.File;
@@ -11,6 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
+@RunWith(JUnit4.class)
 public class DrawableResourceLoaderNoRunnerTest {
   private static final String JAR_SEPARATOR = "/";
   private static final String UNIX_SEPARATOR = "/";

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -3,13 +3,16 @@
 import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@RunWith(JUnit4.class)
 public class ResBundleTest {
   private ResBundle.ResMap resMap = new ResBundle.ResMap();
   private ResName resName;

File: robolectric/src/test/java/org/robolectric/res/ResNameTest.java
Patch:
@@ -1,9 +1,12 @@
 package org.robolectric.res;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ResNameTest {
   @Test public void shouldQualify() throws Exception {
     assertThat(ResName.qualifyResourceName("some.package:type/name", null, null)).isEqualTo("some.package:type/name");

File: robolectric/src/test/java/org/robolectric/res/ResourceParserTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -20,6 +22,7 @@
 import static org.robolectric.util.TestUtil.sdkResources;
 import static org.robolectric.util.TestUtil.testResources;
 
+@RunWith(JUnit4.class)
 public class ResourceParserTest {
 
   private ResourceTable resourceTable;

File: robolectric/src/test/java/org/robolectric/res/ResourceRemapperTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.util.HashSet;
 import java.util.Set;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ResourceRemapperTest {
 
   @Test(expected = IllegalArgumentException.class)

File: robolectric/src/test/java/org/robolectric/res/ResourceTableFactoryTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.*;
 
+@RunWith(JUnit4.class)
 public class ResourceTableFactoryTest {
   private ResourceTable appResourceTable;
   private ResourceTable systemResourceTable;

File: robolectric/src/test/java/org/robolectric/res/StaxPluralsLoaderTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.R;
 import org.robolectric.util.TestUtil;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.testResources;
 
+@RunWith(JUnit4.class)
 public class StaxPluralsLoaderTest {
   private PackageResourceTable resourceTable;
 

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -1,11 +1,14 @@
 package org.robolectric.res;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.util.*;
 
 import static org.assertj.core.api.Assertions.*;
 
+@RunWith(JUnit4.class)
 public class StringResourcesTest {
   @Test
   public void escape_shouldEscapeStrings() {

File: robolectric/src/test/java/org/robolectric/res/StyleResourceLoaderTest.java
Patch:
@@ -2,11 +2,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.sdkResources;
 
+@RunWith(JUnit4.class)
 public class StyleResourceLoaderTest {
   private PackageResourceTable resourceTable;
 

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.robolectric.R;
+import org.robolectric.TestRunners;
 import org.robolectric.android.XmlResourceParserImpl;
 import org.robolectric.res.*;
 import org.w3c.dom.Document;
@@ -34,7 +35,7 @@
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 import static org.robolectric.util.TestUtil.testResources;
 
-@RunWith(JUnit4.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class XmlResourceParserImplTest {
 
   private static final String XMLNS_NS = "http://www.w3.org/2000/xmlns/";

File: robolectric/src/test/java/org/robolectric/shadows/ConverterTest.java
Patch:
@@ -2,12 +2,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.TestRunners;
 import org.robolectric.res.*;
 
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(TestRunners.SelfTest.class)
 public class ConverterTest {
 
   private XmlContext xmlContext;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -46,10 +46,10 @@ public void shouldRecordParcelables() {
   }
 
   @Test
-  public void shouldEqualToClonedEvent() {
+  public void shouldBeEqualToClonedEvent() {
     shadow.setEventType(AccessibilityEvent.TYPE_ANNOUNCEMENT);
     AccessibilityEvent newEvent = ShadowAccessibilityEvent.obtain(event);
-    assertThat(shadow.equals(newEvent)).isEqualTo(true);
+    assertThat(event.equals(newEvent)).isEqualTo(true);
     newEvent.recycle();
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -1,13 +1,14 @@
 package org.robolectric.shadows;
 
 import android.view.Choreographer;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 import org.robolectric.util.TimeUtils;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -34,7 +35,7 @@ public void removeFrameCallback_shouldRemoveCallback() {
     instance.postFrameCallbackDelayed(callback, 1000);
     instance.removeFrameCallback(callback);
     ShadowApplication.getInstance().getForegroundThreadScheduler().advanceToLastPostedRunnable();
-    verify(callback, never()).doFrame(anyInt());
+    verify(callback, never()).doFrame(anyLong());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConnectivityManagerTest.java
Patch:
@@ -145,7 +145,7 @@ public void setActiveNetworkInfo_shouldSetActiveNetwork() throws Exception {
   public void getAllNetworkInfo_shouldReturnAllNetworkInterfaces() throws Exception {
     NetworkInfo[] infos = connectivityManager.getAllNetworkInfo();
     assertThat(infos).hasSize(2);
-    assertThat(connectivityManager.getActiveNetworkInfo()).isSameAs(infos[0]);
+    assertThat(infos).contains(connectivityManager.getActiveNetworkInfo());
 
     shadowConnectivityManager.setActiveNetworkInfo(null);
     assertThat(connectivityManager.getAllNetworkInfo()).isEmpty();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -544,23 +544,23 @@ public void shouldRemovePeriodSync() throws Exception {
   @Test
   public void shouldGetPeriodSyncs() throws Exception {
     assertThat(ContentResolver.getPeriodicSyncs(a, AUTHORITY).size()).isEqualTo(0);
-    ContentResolver.addPeriodicSync(a, AUTHORITY, new Bundle(), 6000l);
+    ContentResolver.addPeriodicSync(a, AUTHORITY, new Bundle(), 6000L);
 
     List<PeriodicSync> syncs = ContentResolver.getPeriodicSyncs(a, AUTHORITY);
     assertThat(syncs.size()).isEqualTo(1);
 
     PeriodicSync first = syncs.get(0);
     assertThat(first.account).isEqualTo(a);
     assertThat(first.authority).isEqualTo(AUTHORITY);
-    assertThat(first.period).isEqualTo(6000l);
+    assertThat(first.period).isEqualTo(6000L);
     assertThat(first.extras).isNotNull();
   }
 
   @Test
   public void shouldValidateSyncExtras() throws Exception {
     Bundle bundle = new Bundle();
     bundle.putString("foo", "strings");
-    bundle.putLong("long", 10l);
+    bundle.putLong("long", 10L);
     bundle.putDouble("double", 10.0d);
     bundle.putFloat("float", 10.0f);
     bundle.putInt("int", 10);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -497,9 +497,9 @@ public boolean handleMessage(Message msg) {
 
     final long startTime = Robolectric.getForegroundThreadScheduler().getCurrentTime();
     h.sendEmptyMessage(0);
-    h.sendEmptyMessageDelayed(0, 4000l);
+    h.sendEmptyMessageDelayed(0, 4000L);
     Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-    h.sendEmptyMessageDelayed(0, 12000l);
+    h.sendEmptyMessageDelayed(0, 12000L);
     Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
     assertThat(whens).as("whens").containsExactly(startTime, startTime + 4000, startTime + 16000);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -33,7 +33,7 @@ public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 
   @Test
-  @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
+  @Config(manifest = "TestAndroidManifestForActivities.xml")
   public void resolveActivityInfo_shouldReturnActivityInfoForExistingActivity() {
       Context context = RuntimeEnvironment.application;
       PackageManager packageManager = context.getPackageManager();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilder25Test.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
-@Config(manifest = "src/test/resources/TestAndroidManifest25.xml")
+@Config(manifest = "TestAndroidManifest25.xml")
 public class ShadowNotificationBuilder25Test extends ShadowNotificationBuilderTest {
   // run 'em all again with android:targetSdkVersion=25 - behavior of NotificationBuilder
   // varies based on version specified in Manifest rather than runtime framework version.

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelTest.java
Patch:
@@ -48,7 +48,7 @@ public void testReadIntWhenEmpty() {
 
   @Test
   public void testReadLongWhenEmpty() {
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test
@@ -306,7 +306,7 @@ public void testReadWriteMultipleLongs() {
       assertThat(parcel.readLong()).isEqualTo(i);
     }
     // now try to read past the number of items written and see what happens
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test
@@ -322,7 +322,7 @@ public void testReadWriteStringLong() {
     }
     // now try to read past the number of items written and see what happens
     assertThat(parcel.readString()).isNull();
-    assertThat(parcel.readLong()).isEqualTo(0l);
+    assertThat(parcel.readLong()).isEqualTo(0L);
   }
 
   @Test(expected = ClassCastException.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -110,7 +110,7 @@ public void getText_withHtml() throws Exception {
 
   @Test
   public void getText_withLayoutId() throws Exception {
-    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("." + File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
+    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).endsWith(File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
   }
 
   @Test
@@ -680,6 +680,7 @@ public void obtainStyledAttributes_shouldCheckXmlFirst_fromAttributeSetBuilder()
     typedArray.recycle();
   }
 
+  @Test
   public void obtainStyledAttributes_shouldCheckXmlFirst_fromXmlLoadedFromResources() throws Exception {
 
     // This simulates a ResourceProvider built from a 21+ SDK as viewportHeight / viewportWidth were introduced in API 21

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -560,6 +560,7 @@ public void shouldTrackRequestLayoutCalls() throws Exception {
     assertThat(shadowOf(view).didRequestLayout()).isFalse();
   }
 
+  @Test
   public void shouldClickAndNotClick() throws Exception {
     assertThat(view.isClickable()).isFalse();
     view.setClickable(true);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalUnitTest.java
Patch:
@@ -3,12 +3,15 @@
 import android.app.Activity;
 import android.view.WindowManagerGlobal;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.android.FailureListener;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(JUnit4.class)
 public class ShadowWindowManagerGlobalUnitTest {
   @Test
   public void shouldReset() throws Exception {

File: robolectric/src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.robolectric.util;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import java.net.URL;
 
@@ -10,6 +12,7 @@
  * @author Vyacheslav Mayorov
  * @since 2013-10-04
  */
+@RunWith(JUnit4.class)
 public class UtilTest {
   @Test
   public void urlShouldReturnCorrectURL() throws Exception {

File: robolectric-sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -105,7 +105,7 @@ public void forClassesWithNoDefaultConstructor_shouldCreateOneButItShouldNotCall
     assertTrue(Modifier.isPublic(defaultCtor.getModifiers()));
     defaultCtor.setAccessible(true);
     Object instance = defaultCtor.newInstance();
-    assertThat(shadow.extract(instance)).isNotNull();
+    assertThat((Object) shadow.extract(instance)).isNotNull();
     assertThat(transcript).isEmpty();
   }
 

File: robolectric-shadows/shadows-support-v4/src/test/java/org/robolectric/shadows/support/v4/SupportFragmentControllerTest.java
Patch:
@@ -8,6 +8,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
+import android.widget.TextView;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
@@ -72,7 +73,7 @@ public void attachedAfterCreate_customizedViewId() {
     assertThat(fragment.getActivity()).isNotNull();
     assertThat(fragment.isAdded()).isTrue();
     assertThat(fragment.isResumed()).isFalse();
-    assertThat(fragment.getView().findViewById(R.id.tacos)).isNotNull();
+    assertThat((TextView) fragment.getView().findViewById(R.id.tacos)).isNotNull();
   }
 
   @Test
@@ -92,7 +93,7 @@ public void isResumed() {
     assertThat(fragment.getActivity()).isNotNull();
     assertThat(fragment.isAdded()).isTrue();
     assertThat(fragment.isResumed()).isTrue();
-    assertThat(fragment.getView().findViewById(R.id.tacos)).isNotNull();
+    assertThat((TextView) fragment.getView().findViewById(R.id.tacos)).isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -10,6 +10,7 @@
 import android.accounts.OperationCanceledException;
 import android.app.Activity;
 import android.content.Context;
+import android.content.Intent;
 import android.os.Bundle;
 import android.os.Handler;
 import org.junit.Before;
@@ -469,7 +470,7 @@ public void addAccount_noActivitySpecified() throws Exception {
 
     Bundle resultBundle = result.getResult();
 
-    assertThat(resultBundle.getParcelable(AccountManager.KEY_INTENT)).isNotNull();
+    assertThat((Intent) resultBundle.getParcelable(AccountManager.KEY_INTENT)).isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -271,7 +271,7 @@ public void shouldDelegateToDialogFindViewByIdIfViewIsNull() {
     AlertDialog dialog = new AlertDialog(RuntimeEnvironment.application) {
     };
 
-    assertThat(dialog.findViewById(99)).isNull();
+    assertThat((View) dialog.findViewById(99)).isNull();
 
     dialog.setContentView(R.layout.main);
     assertNotNull(dialog.findViewById(R.id.title));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBundleTest.java
Patch:
@@ -90,7 +90,7 @@ public void getWrongType() {
     assertThat(bundle.getStringArray("foo")).isNull();
     assertThat(bundle.getStringArrayList("foo")).isNull();
     assertThat(bundle.getBundle("foo")).isNull();
-    assertThat(bundle.getParcelable("foo")).isNull();
+    assertThat((Parcelable) bundle.getParcelable("foo")).isNull();
     assertThat(bundle.getParcelableArray("foo")).isNull();
     assertThat(bundle.getParcelableArrayList("foo")).isNull();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -350,7 +350,8 @@ public void createChooser_shouldWrapIntent() throws Exception {
     Intent chooserIntent = Intent.createChooser(originalIntent, "The title");
     assertThat(chooserIntent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
     assertThat(chooserIntent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("The title");
-    assertThat(chooserIntent.getParcelableExtra(Intent.EXTRA_INTENT)).isSameAs(originalIntent);
+    assertThat((Intent) chooserIntent.getParcelableExtra(Intent.EXTRA_INTENT))
+        .isSameAs(originalIntent);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTest.java
Patch:
@@ -36,13 +36,14 @@ public void deprecated_newInstanceOf() throws Exception {
   @Test
   public void extractor() throws Exception {
     Activity activity = new Activity();
-    assertThat(Shadow.extract(activity)).isSameAs(shadowOf(activity));
+    assertThat((ShadowActivity) Shadow.extract(activity)).isSameAs(shadowOf(activity));
   }
 
   @Test
   public void deprecated_extractor() throws Exception {
     Activity activity = new Activity();
-    assertThat(org.robolectric.internal.Shadow.extract(activity)).isSameAs(shadowOf(activity));
+    assertThat((ShadowActivity) org.robolectric.internal.Shadow.extract(activity))
+        .isSameAs(shadowOf(activity));
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -378,7 +378,7 @@ public void shouldSetAnimation() throws Exception {
   @Test
   public void shouldFindViewWithTag() {
     view.setTag("tagged");
-    assertThat(view.findViewWithTag("tagged")).isSameAs(view);
+    assertThat((View) view.findViewWithTag("tagged")).isSameAs(view);
   }
 
   @Test

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSensorManager.java
Patch:
@@ -14,7 +14,7 @@
 
 import static android.os.Build.VERSION_CODES.O;
 
-@Implements(SensorManager.class)
+@Implements(value = SensorManager.class, looseSignatures = true)
 public class ShadowSensorManager {
   public boolean forceListenersToFail = false;
   private final Map<Integer, Sensor> sensorMap = new HashMap<>();
@@ -66,7 +66,7 @@ public SensorEvent createSensorEvent() {
   }
 
   @Implementation(minSdk = O)
-  public SensorDirectChannel createDirectChannel(MemoryFile mem) {
+  public Object createDirectChannel(MemoryFile mem) {
     return ReflectionHelpers.callConstructor(SensorDirectChannel.class,
         ClassParameter.from(SensorManager.class, realObject),
         ClassParameter.from(int.class, 0),

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -37,7 +37,7 @@ public void tearDown() {
   @Test
   @Config(minSdk = Build.VERSION_CODES.O)
   public void createDirectChannel() throws Exception {
-    SensorDirectChannel channel = sensorManager.createDirectChannel(new MemoryFile("name", 10));
+    SensorDirectChannel channel = (SensorDirectChannel) sensorManager.createDirectChannel(new MemoryFile("name", 10));
     assertThat(channel.isValid()).isTrue();
 
     channel.close();

File: robolectric/src/test/java/org/robolectric/internal/dependency/CachedDependencyResolverTest.java
Patch:
@@ -9,11 +9,11 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 import org.junit.runners.model.InitializationError;
 import org.robolectric.internal.dependency.CachedDependencyResolver.Cache;
 import org.robolectric.internal.dependency.CachedDependencyResolver.CacheNamingStrategy;
 import org.robolectric.internal.dependency.CachedDependencyResolver.CacheValidationStrategy;
-import org.robolectric.test.TemporaryFolder;
 
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java
Patch:
@@ -27,14 +27,14 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
-import org.robolectric.test.TemporaryFolder;
 
 import java.io.ByteArrayInputStream;
 import java.util.ArrayList;

File: robolectric-resources/src/main/java/org/robolectric/res/StyleResolver.java
Patch:
@@ -79,7 +79,7 @@ private static boolean hasParent(StyleData style) {
   private StyleData getParent(StyleData style) {
     String parent = getParentStyleName(style);
 
-    if (parent == null || "Null".equals(parent)) return null;
+    if (parent == null) return null;
 
     if (parent.startsWith("@")) parent = parent.substring(1);
 

File: robolectric/src/test/java/org/robolectric/res/FileFsFileTest.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import edu.emory.mathcs.backport.java.util.Collections;
+import java.util.Collections;
 import javax.annotation.Nonnull;
 import org.junit.After;
 import org.junit.Before;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -172,6 +172,7 @@ public void delete_shouldTrackDeletedStatements() {
     assertThat(contentResolver.delete(uri21, "id", new String[]{"5"})).isEqualTo(1);
     assertThat(shadowContentResolver.getDeleteStatements().size()).isEqualTo(1);
     assertThat(shadowContentResolver.getDeleteStatements().get(0).getUri()).isEqualTo(uri21);
+    assertThat(shadowContentResolver.getDeleteStatements().get(0).getContentProvider()).isNull();
     assertThat(shadowContentResolver.getDeleteStatements().get(0).getWhere()).isEqualTo("id");
     assertThat(shadowContentResolver.getDeleteStatements().get(0).getSelectionArgs()[0]).isEqualTo("5");
 

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -910,7 +910,7 @@ public void pushDefaultReturnValueToStack(Type type) {
       } else if (type.equals(Type.INT_TYPE) || type.equals(Type.SHORT_TYPE) || type.equals(Type.BYTE_TYPE) || type.equals(Type.CHAR_TYPE)) {
         push(0);
       } else if (type.equals(Type.LONG_TYPE)) {
-        push(0l);
+        push(0L);
       } else if (type.equals(Type.FLOAT_TYPE)) {
         push(0f);
       } else if (type.equals(Type.DOUBLE_TYPE)) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/AccessibilityUtil.java
Patch:
@@ -245,7 +245,7 @@ private static AccessibilityChecks getAnnotation() {
 
         /* If we've crawled up the stack far enough to find the test, stop looking */
         for (Annotation annotation : clazz.getAnnotations()) {
-          if (annotation.getClass().getName().equals("org.junit.Test")) {
+          if (annotation.annotationType().getName().equals("org.junit.Test")) {
             break;
           }
         }

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -910,7 +910,7 @@ public void pushDefaultReturnValueToStack(Type type) {
       } else if (type.equals(Type.INT_TYPE) || type.equals(Type.SHORT_TYPE) || type.equals(Type.BYTE_TYPE) || type.equals(Type.CHAR_TYPE)) {
         push(0);
       } else if (type.equals(Type.LONG_TYPE)) {
-        push(0l);
+        push(0L);
       } else if (type.equals(Type.FLOAT_TYPE)) {
         push(0f);
       } else if (type.equals(Type.DOUBLE_TYPE)) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/AccessibilityUtil.java
Patch:
@@ -245,7 +245,7 @@ private static AccessibilityChecks getAnnotation() {
 
         /* If we've crawled up the stack far enough to find the test, stop looking */
         for (Annotation annotation : clazz.getAnnotations()) {
-          if (annotation.getClass().getName().equals("org.junit.Test")) {
+          if (annotation.annotationType().getName().equals("org.junit.Test")) {
             break;
           }
         }

File: robolectric-junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -252,7 +252,7 @@ protected Statement methodBlock(FrameworkMethod method) {
   @Nonnull
   protected Class<?>[] getExtraShadows(FrameworkMethod method) {
     List<Class<?>> shadowClasses = new ArrayList<>();
-    addShadows(shadowClasses, getTestClass().getAnnotation(SandboxConfig.class));
+    addShadows(shadowClasses, getTestClass().getJavaClass().getAnnotation(SandboxConfig.class));
     addShadows(shadowClasses, method.getAnnotation(SandboxConfig.class));
     return shadowClasses.toArray(new Class[shadowClasses.size()]);
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/StubPackageManager.java
Patch:
@@ -52,6 +52,7 @@
  * If there is functionality you are missing you can extend ShadowPackageManager.
  */
 @Instrument
+@Deprecated
 public class StubPackageManager extends PackageManager {
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboWebSettings.java
Patch:
@@ -399,7 +399,7 @@ public void setGeolocationEnabled(boolean geolocationEnabled) {
 
   @Override
   public void setDefaultZoom(ZoomDensity zoom) {
-    this.defaultZoom = defaultZoom;
+    this.defaultZoom = zoom;
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -456,7 +456,7 @@ private Location copyOf(Location location) {
   private static float distanceBetween(Location location1, Location location2) {
     double earthRadius = 3958.75;
     double latDifference = Math.toRadians(location2.getLatitude() - location1.getLatitude());
-    double lonDifference = Math.toRadians(location2.getLongitude() - location2.getLongitude());
+    double lonDifference = Math.toRadians(location2.getLongitude() - location1.getLongitude());
     double a = Math.sin(latDifference/2) * Math.sin(latDifference/2) +
         Math.cos(Math.toRadians(location1.getLatitude())) * Math.cos(Math.toRadians(location2.getLatitude())) *
             Math.sin(lonDifference/2) * Math.sin(lonDifference/2);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -425,7 +425,7 @@ public void writeLong(long l) {
      * Reads a long from the byte buffer based on the current data position
      */
     public long readLong() {
-      return readValue(0l);
+      return readValue(0L);
     }
 
     /**

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -146,6 +146,7 @@ public void unregisterPhoneAccount(PhoneAccountHandle accountHandle) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public void clearAccounts() {
     accounts.clear();
@@ -168,6 +169,7 @@ public void clearAccountsForPackage(String packageName) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public ComponentName getDefaultPhoneApp() {
     return null;

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -81,6 +81,7 @@ public synchronized void setIdleState(IdleState idleState) {
       case CONSTANT_IDLE:
         advanceToLastPostedRunnable();
         break;
+      default:
     }
   }
 
@@ -327,6 +328,7 @@ private void runOrQueueRunnable(Runnable runnable, long scheduledTime) {
       case UNPAUSED:
         advanceBy(0);
         break;
+      default:
     }
   }
 

File: robolectric/src/main/java/org/robolectric/internal/BuckManifestFactory.java
Patch:
@@ -40,9 +40,9 @@ public AndroidManifest create(ManifestIdentifier manifestIdentifier) {
     final List<String> buckAssets = buckAssetsDirs == null ? null :
               Arrays.asList(buckAssetsDirs.split(File.pathSeparator));
 
-    final FsFile resDir = (buckResources == null || "".equals(buckResources)) ? null :
+    final FsFile resDir = (buckResources == null || buckResources.isEmpty()) ? null :
             Fs.fileFromPath(buckResources.get(buckResources.size() - 1));
-    final FsFile assetsDir = (buckAssets == null || "".equals(buckAssets)) ? null :
+    final FsFile assetsDir = (buckAssets == null || buckAssets.isEmpty()) ? null :
             Fs.fileFromPath(buckAssets.get(buckAssets.size() - 1));
 
     Logger.debug("Robolectric assets directory: " + (assetsDir == null ? null : assetsDir.getPath()));

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -910,7 +910,7 @@ public void pushDefaultReturnValueToStack(Type type) {
       } else if (type.equals(Type.INT_TYPE) || type.equals(Type.SHORT_TYPE) || type.equals(Type.BYTE_TYPE) || type.equals(Type.CHAR_TYPE)) {
         push(0);
       } else if (type.equals(Type.LONG_TYPE)) {
-        push(0l);
+        push(0L);
       } else if (type.equals(Type.FLOAT_TYPE)) {
         push(0f);
       } else if (type.equals(Type.DOUBLE_TYPE)) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/AccessibilityUtil.java
Patch:
@@ -245,7 +245,7 @@ private static AccessibilityChecks getAnnotation() {
 
         /* If we've crawled up the stack far enough to find the test, stop looking */
         for (Annotation annotation : clazz.getAnnotations()) {
-          if (annotation.getClass().getName().equals("org.junit.Test")) {
+          if (annotation.annotationType().getName().equals("org.junit.Test")) {
             break;
           }
         }

File: robolectric-junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -252,7 +252,7 @@ protected Statement methodBlock(FrameworkMethod method) {
   @Nonnull
   protected Class<?>[] getExtraShadows(FrameworkMethod method) {
     List<Class<?>> shadowClasses = new ArrayList<>();
-    addShadows(shadowClasses, getTestClass().getAnnotation(SandboxConfig.class));
+    addShadows(shadowClasses, getTestClass().getJavaClass().getAnnotation(SandboxConfig.class));
     addShadows(shadowClasses, method.getAnnotation(SandboxConfig.class));
     return shadowClasses.toArray(new Class[shadowClasses.size()]);
   }

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -81,6 +81,7 @@ public synchronized void setIdleState(IdleState idleState) {
       case CONSTANT_IDLE:
         advanceToLastPostedRunnable();
         break;
+      default:
     }
   }
 
@@ -327,6 +328,7 @@ private void runOrQueueRunnable(Runnable runnable, long scheduledTime) {
       case UNPAUSED:
         advanceBy(0);
         break;
+      default:
     }
   }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/StubPackageManager.java
Patch:
@@ -49,6 +49,7 @@
  * If there is functionality you are missing you can extend ShadowPackageManager.
  */
 @Instrument
+@Deprecated
 public class StubPackageManager extends PackageManager {
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboWebSettings.java
Patch:
@@ -399,7 +399,7 @@ public void setGeolocationEnabled(boolean geolocationEnabled) {
 
   @Override
   public void setDefaultZoom(ZoomDensity zoom) {
-    this.defaultZoom = defaultZoom;
+    this.defaultZoom = zoom;
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -938,7 +938,7 @@ private boolean childrenEqualityCheck(
             (ShadowAccessibilityNodeInfo) ShadowExtractor.extract(otherShadow.children.get(i));
         visitedNodes.add(childShadow);
         childShadow.visitedWhenCheckingChildren = true;
-        if (!childShadow.equals(otherShadow.children.get(i))) {
+        if (!childShadow.equals(shadowOf(otherShadow.children.get(i)))) {
            childrenEquality = false;
            break;
         }
@@ -973,7 +973,7 @@ public boolean equals(Object object) {
       if (parent == null) {
         areEqual &= (otherShadow.parent == null);
       } else if (!shadowOf(parent).visitedWhenCheckingChildren){
-        areEqual &= (shadowOf(parent).equals(otherShadow.parent));
+        areEqual &= (shadowOf(parent).equals(shadowOf(otherShadow.parent)));
       }
 
       while (!visitedNodes.isEmpty()) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -456,7 +456,7 @@ private Location copyOf(Location location) {
   private static float distanceBetween(Location location1, Location location2) {
     double earthRadius = 3958.75;
     double latDifference = Math.toRadians(location2.getLatitude() - location1.getLatitude());
-    double lonDifference = Math.toRadians(location2.getLongitude() - location2.getLongitude());
+    double lonDifference = Math.toRadians(location2.getLongitude() - location1.getLongitude());
     double a = Math.sin(latDifference/2) * Math.sin(latDifference/2) +
         Math.cos(Math.toRadians(location1.getLatitude())) * Math.cos(Math.toRadians(location2.getLatitude())) *
             Math.sin(lonDifference/2) * Math.sin(lonDifference/2);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -425,7 +425,7 @@ public void writeLong(long l) {
      * Reads a long from the byte buffer based on the current data position
      */
     public long readLong() {
-      return readValue(0l);
+      return readValue(0L);
     }
 
     /**

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -146,6 +146,7 @@ public void unregisterPhoneAccount(PhoneAccountHandle accountHandle) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public void clearAccounts() {
     accounts.clear();
@@ -168,6 +169,7 @@ public void clearAccountsForPackage(String packageName) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public ComponentName getDefaultPhoneApp() {
     return null;

File: robolectric/src/main/java/org/robolectric/internal/BuckManifestFactory.java
Patch:
@@ -40,9 +40,9 @@ public AndroidManifest create(ManifestIdentifier manifestIdentifier) {
     final List<String> buckAssets = buckAssetsDirs == null ? null :
               Arrays.asList(buckAssetsDirs.split(File.pathSeparator));
 
-    final FsFile resDir = (buckResources == null || "".equals(buckResources)) ? null :
+    final FsFile resDir = (buckResources == null || buckResources.isEmpty()) ? null :
             Fs.fileFromPath(buckResources.get(buckResources.size() - 1));
-    final FsFile assetsDir = (buckAssets == null || "".equals(buckAssets)) ? null :
+    final FsFile assetsDir = (buckAssets == null || buckAssets.isEmpty()) ? null :
             Fs.fileFromPath(buckAssets.get(buckAssets.size() - 1));
 
     Logger.debug("Robolectric assets directory: " + (assetsDir == null ? null : assetsDir.getPath()));

File: robolectric-annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.Documented;
@@ -367,7 +367,7 @@ public String[] libraries() {
       return libraries;
     }
 
-    @NotNull @Override
+    @Nonnull @Override
     public Class<? extends Annotation> annotationType() {
       return Config.class;
     }

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/generator/ShadowProviderGeneratorTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.annotation.processing.generator;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
 import org.robolectric.annotation.Implements;
@@ -57,7 +57,7 @@ private TypeElement type(String shadowClassName, int minSdk, int maxSdk) {
     return shadowType;
   }
 
-  @NotNull
+  @Nonnull
   private ExecutableElement element(String reset) {
     ExecutableElement resetterExecutable = mock(ExecutableElement.class);
     Name mock = mock(Name.class);

File: robolectric-resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.manifest;
 
 import com.google.common.base.Preconditions;
-import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nullable;
 import org.robolectric.res.FsFile;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.res.ResourceTable;

File: robolectric-resources/src/main/java/org/robolectric/res/DocumentLoader.java
Patch:
@@ -1,10 +1,10 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 
 public abstract class DocumentLoader {
   private static final FsFile.Filter ENDS_WITH_XML = new FsFile.Filter() {
-    @Override public boolean accept(@NotNull FsFile fsFile) {
+    @Override public boolean accept(@Nonnull FsFile fsFile) {
       return fsFile.getName().endsWith(".xml");
     }
   };

File: robolectric-resources/src/main/java/org/robolectric/res/FileFsFile.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.res;
 
 import com.google.common.annotations.VisibleForTesting;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.util.Util;
 
 import java.io.BufferedInputStream;
@@ -176,7 +176,7 @@ private synchronized File getCanonicalFile() {
    * @param paths Array of path components.
    * @return New FileFsFile.
    */
-  @NotNull
+  @Nonnull
   public static FileFsFile from(String... paths) {
     File file = null;
     for (String path : paths) {

File: robolectric-resources/src/main/java/org/robolectric/res/FsFile.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -39,6 +39,6 @@ public interface FsFile {
   String getPath();
 
   public interface Filter {
-    boolean accept(@NotNull FsFile fsFile);
+    boolean accept(@Nonnull FsFile fsFile);
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.res.builder.XmlBlock;
 
 import java.io.IOException;
@@ -49,7 +49,7 @@ public ResName getResName(int resourceId) {
   }
 
   @Override
-  public TypedResource getValue(@NotNull ResName resName, String qualifiers) {
+  public TypedResource getValue(@Nonnull ResName resName, String qualifiers) {
     return resources.get(resName, qualifiers);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResBunch.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.LinkedHashMap;
 import java.util.Map;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 
 public class ResBunch {
   private final Map<String, ResBundle> types = new LinkedHashMap<>();
@@ -21,7 +21,7 @@ private ResBundle getBundle(String attrType) {
     return bundle;
   }
 
-  public TypedResource get(@NotNull ResName resName, String qualifiers) {
+  public TypedResource get(@Nonnull ResName resName, String qualifiers) {
     ResBundle bundle = getBundle(resName.type);
     return bundle.get(resName, qualifiers);
   }

File: robolectric-resources/src/main/java/org/robolectric/res/ResType.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nullable;
 
 import java.util.regex.Pattern;
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceMerger.java
Patch:
@@ -1,13 +1,13 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.manifest.AndroidManifest;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class ResourceMerger {
-  @NotNull
+  @Nonnull
   public PackageResourceTable buildResourceTable(AndroidManifest appManifest) {
     ResourceRemapper resourceRemapper = new ResourceRemapper(appManifest.getRClass());
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.res.builder.XmlBlock;
 
 import java.io.InputStream;
@@ -13,7 +13,7 @@ public interface ResourceTable {
 
   TypedResource getValue(int resId, String qualifiers);
 
-  TypedResource getValue(@NotNull ResName resName, String qualifiers) ;
+  TypedResource getValue(@Nonnull ResName resName, String qualifiers) ;
 
   XmlBlock getXml(ResName resName, String qualifiers);
 

File: robolectric-resources/src/main/java/org/robolectric/res/RoutingResourceTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.res.builder.XmlBlock;
 
 import java.io.InputStream;
@@ -23,7 +23,7 @@ public InputStream getRawValue(int resId, String qualifiers) {
     return getRawValue(getResName(resId), qualifiers);
   }
 
-  @Override public TypedResource getValue(@NotNull ResName resName, String qualifiers) {
+  @Override public TypedResource getValue(@Nonnull ResName resName, String qualifiers) {
     return pickFor(resName).getValue(resName, qualifiers);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlBlock.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res.builder;
 
-import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nullable;
 import org.robolectric.res.FsFile;
 import org.w3c.dom.Document;
 import org.xml.sax.SAXException;

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/Interceptor.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.internal.bytecode;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.util.Function;
 import org.robolectric.util.ReflectionHelpers;
 
@@ -22,7 +22,7 @@ public MethodRef[] getMethodRefs() {
 
   abstract public MethodHandle getMethodHandle(String methodName, MethodType type) throws NoSuchMethodException, IllegalAccessException;
 
-  @NotNull
+  @Nonnull
   protected static Function<Object, Object> returnDefaultValue(final MethodSignature methodSignature) {
     return new Function<Object, Object>() {
       @Override

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/SandboxClassLoader.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.internal.bytecode;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.FieldVisitor;
@@ -369,7 +369,7 @@ public void instrument() {
       doSpecialHandling();
     }
 
-    @NotNull
+    @Nonnull
     private Set<String> instrumentMethods() {
       Set<String> foundMethods = new HashSet<>();
       List<MethodNode> methods = new ArrayList<>(classNode.methods);

File: robolectric-sandbox/src/test/java/org/robolectric/SandboxClassLoaderTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -590,7 +590,7 @@ private Object invokeInterceptedMethodOnAClassToForget(String methodName) throws
     return m.invoke(shadow.directlyOn(instance, (Class<Object>) theClass));
   }
 
-  @NotNull
+  @Nonnull
   private InstrumentationConfiguration.Builder configureBuilder() {
     InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
     builder.doNotAcquirePackage("java.")

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -3,7 +3,7 @@
 import android.app.ActivityThread;
 import android.content.pm.PackageManager;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -30,7 +30,7 @@ public static Object getPackageManager() {
     }
     return Proxy.newProxyInstance(classLoader, new Class[]{iPackageManagerClass}, new InvocationHandler() {
       @Override
-      public Object invoke(Object proxy, @NotNull Method method, Object[] args) throws Exception {
+      public Object invoke(Object proxy, @Nonnull Method method, Object[] args) throws Exception {
         if (method.getName().equals("getApplicationInfo")) {
           String packageName = (String) args[0];
           int flags = (Integer) args[1];

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAndroidBidi.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * Shadow for {@code android.text.AndroidBidi}.
  */
-@Implements(className = "android.text.AndroidBidi")
+@Implements(className = "android.text.AndroidBidi", isInAndroidSdk = false)
 public class ShadowAndroidBidi {
   @Implementation
   public static int bidi(int dir, char[] chs, byte[] chInfo, int n, boolean haveInfo) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -8,8 +8,8 @@
 import android.graphics.Path;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowMediaPlayer.java
Patch:
@@ -82,7 +82,7 @@
  * @author Fr Jeremy Krieg, Holy Monastery of St Nectarios, Adelaide, Australia
  */
 @Implements(MediaPlayer.class)
-public class ShadowMediaPlayer {
+public class ShadowMediaPlayer extends ShadowPlayerBase {
   public static void __staticInitializer__() {
     // don't bind the JNI library
   }

File: robolectric/src/main/java/org/robolectric/ParameterizedRobolectricTestRunner.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Assert;
 import org.junit.runner.Runner;
 import org.junit.runners.Parameterized;
@@ -99,7 +99,7 @@ protected void validateConstructor(List<Throwable> errors) {
       validateOnlyOneConstructor(errors);
     }
 
-    @NotNull
+    @Nonnull
     @Override
     protected SdkEnvironment getSandbox(FrameworkMethod method) {
       SdkEnvironment sandbox = super.getSandbox(method);

File: robolectric/src/main/java/org/robolectric/android/AndroidInterceptors.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.android;
 
 import android.content.Context;
-import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nullable;
 import org.robolectric.internal.bytecode.Interceptor;
 import org.robolectric.internal.bytecode.MethodRef;
 import org.robolectric.internal.bytecode.MethodSignature;

File: robolectric/src/main/java/org/robolectric/android/runtime/RuntimeAdapterFactory.java
Patch:
@@ -21,6 +21,8 @@ public static RuntimeAdapter getInstance() {
       return new Api23RuntimeAdapter();
     } else if (apiLevel <= Build.VERSION_CODES.N_MR1) {
       return new Api24RuntimeAdapter();
+    } else if (apiLevel == Build.VERSION_CODES.O) {
+      return new Api26RuntimeAdapter();
     } else {
       throw new RuntimeException("Could not find AndroidRuntimeAdapter for API level: " + apiLevel);
     }

File: robolectric/src/main/java/org/robolectric/internal/SandboxFactory.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.internal;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 import org.robolectric.internal.bytecode.SandboxClassLoader;
 import org.robolectric.internal.dependency.DependencyResolver;
@@ -43,7 +43,7 @@ public synchronized SdkEnvironment getSdkEnvironment(InstrumentationConfiguratio
     return sdkEnvironment;
   }
 
-  @NotNull
+  @Nonnull
   public ClassLoader createClassLoader(InstrumentationConfiguration instrumentationConfig, URL... urls) {
     URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
     return new SandboxClassLoader(systemClassLoader, instrumentationConfig, urls);

File: robolectric/src/main/java/org/robolectric/internal/SdkEnvironment.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.internal;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.internal.bytecode.Sandbox;
 import org.robolectric.internal.dependency.DependencyResolver;
 import org.robolectric.res.Fs;
@@ -25,7 +25,7 @@ public synchronized PackageResourceTable getSystemResourceTable(DependencyResolv
     return systemResourceTable;
   }
 
-  @NotNull
+  @Nonnull
   private ResourcePath createRuntimeSdkResourcePath(DependencyResolver dependencyResolver) {
     try {
       Fs systemResFs = Fs.fromJar(dependencyResolver.getLocalArtifactUrl(sdkConfig.getAndroidSdkDependency()));

File: robolectric/src/test/java/org/robolectric/ConfigTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Test;
 import org.robolectric.annotation.Config;
 
@@ -151,7 +151,7 @@ private String sdksIn(Config config) {
     return "sdk=" + Arrays.toString(config.sdk()) + ", minSdk=" + config.minSdk() + ", maxSdk=" + config.maxSdk();
   }
 
-  @NotNull
+  @Nonnull
   private Config overlay(Config.Implementation base, Config.Implementation build) {
     return new Config.Builder(base).overlay(build).build();
   }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric;
 
 import android.os.Build;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.Description;
@@ -205,10 +205,10 @@ public void methodConfigWithMinSdkAndMaxSdk() throws Throwable {
 
   ///////////////////////////
 
-  @NotNull
+  @Nonnull
   private RobolectricTestRunner runnerOf(Class<?> testClass) throws InitializationError {
     return new RobolectricTestRunner(testClass) {
-      @NotNull @Override
+      @Nonnull @Override
       protected SdkPicker createSdkPicker() {
         return sdkPicker;
       }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -5,7 +5,7 @@
 import android.os.Build;
 import org.assertj.core.api.Assertions;
 import org.hamcrest.CoreMatchers;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Test;
@@ -124,7 +124,7 @@ public RunnerForTesting(Class<?> testClass) throws InitializationError {
       instance = this;
     }
 
-    @NotNull
+    @Nonnull
     @Override protected Class<? extends TestLifecycle> getTestLifecycleClass() {
       return MyTestLifecycle.class;
     }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric;
 
 import android.os.Build;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -132,7 +132,7 @@ public MyRobolectricTestRunner(Class<?> testClass) throws InitializationError {
       super(testClass);
     }
 
-    @NotNull
+    @Nonnull
     @Override
     protected SdkPicker createSdkPicker() {
       return new SdkPicker(asList(new SdkConfig(JELLY_BEAN)), new Properties());

File: robolectric/src/test/java/org/robolectric/android/FailureListener.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.android;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
@@ -11,7 +11,7 @@
 import java.util.List;
 
 public class FailureListener extends RunListener {
-  @NotNull
+  @Nonnull
   public static List<Failure> runTests(Class<?> testClass) throws InitializationError {
     RunNotifier notifier = new RunNotifier();
     FailureListener failureListener = new FailureListener();

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.internal.bytecode;
 
 import android.os.Build;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
 import org.robolectric.android.AndroidInterceptors;
@@ -30,7 +30,7 @@ public void shouldMakeBuildVersionIntsNonFinal() throws Exception {
 
   ////////////////////////
 
-  @NotNull
+  @Nonnull
   private InstrumentationConfiguration.Builder configureBuilder() {
     InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
     builder.doNotAcquirePackage("java.");

File: robolectric/src/test/java/org/robolectric/res/FileFsFileTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 import edu.emory.mathcs.backport.java.util.Collections;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -85,7 +85,7 @@ List<String> partsOf(FsFile fsFile) {
     return parts;
   }
 
-  @NotNull
+  @Nonnull
   private String safe(String path) {
     return path.replace("/", File.separator);
   }

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.res;
 
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -195,7 +195,7 @@ private static TypedResource<String> createStringTypedResource(String qualifiers
     return createStringTypedResource("title from resourceLoader1", qualifiers);
   }
 
-  @NotNull
+  @Nonnull
   private static TypedResource<String> createStringTypedResource(String str, String qualifiers) {
     XmlContext mockXmlContext = mock(XmlContext.class);
     when(mockXmlContext.getQualifiers()).thenReturn(qualifiers);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -44,6 +44,7 @@
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
+import static android.os.Build.VERSION_CODES.O;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 import static org.junit.Assert.assertEquals;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -8,13 +8,13 @@
 import org.robolectric.TestRunners;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
 @RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowObjectAnimatorTest {
   private final AnimatorTarget target = new AnimatorTarget();
-  private final Animator.AnimatorListener listener = mock(Animator.AnimatorListener.class);
+  private final Animator.AnimatorListener listener = spy(Animator.AnimatorListener.class);
 
   @Test
   public void start_shouldRunAnimation() {

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.util;
 
 import android.app.Application;
-import org.jetbrains.annotations.NotNull;
+import javax.annotation.Nonnull;
 import org.robolectric.R;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.SdkConfig;
@@ -104,7 +104,7 @@ public static ResourcePath systemResources() {
     return SYSTEM_RESOURCE_PATH;
   }
 
-  @NotNull
+  @Nonnull
   public static ResourcePath sdkResources(int apiLevel) {
     Fs sdkResFs = Fs.fromJar(new MavenDependencyResolver().getLocalArtifactUrl(new SdkConfig(apiLevel).getAndroidSdkDependency()));
     return new ResourcePath(null, sdkResFs.join("res"), null, null);

File: robolectric-junit/src/main/java/org/robolectric/internal/SandboxTestRunner.java
Patch:
@@ -252,7 +252,7 @@ protected Statement methodBlock(FrameworkMethod method) {
   @NotNull
   protected Class<?>[] getExtraShadows(FrameworkMethod method) {
     List<Class<?>> shadowClasses = new ArrayList<>();
-    addShadows(shadowClasses, getTestClass().getAnnotation(SandboxConfig.class));
+    addShadows(shadowClasses, getTestClass().getJavaClass().getAnnotation(SandboxConfig.class));
     addShadows(shadowClasses, method.getAnnotation(SandboxConfig.class));
     return shadowClasses.toArray(new Class[shadowClasses.size()]);
   }

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -81,6 +81,7 @@ public synchronized void setIdleState(IdleState idleState) {
       case CONSTANT_IDLE:
         advanceToLastPostedRunnable();
         break;
+      default:
     }
   }
 
@@ -327,6 +328,7 @@ private void runOrQueueRunnable(Runnable runnable, long scheduledTime) {
       case UNPAUSED:
         advanceBy(0);
         break;
+      default:
     }
   }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/android/StubPackageManager.java
Patch:
@@ -49,6 +49,7 @@
  * If there is functionality you are missing you can extend ShadowPackageManager.
  */
 @Instrument
+@Deprecated
 public class StubPackageManager extends PackageManager {
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/fakes/RoboWebSettings.java
Patch:
@@ -399,7 +399,7 @@ public void setGeolocationEnabled(boolean geolocationEnabled) {
 
   @Override
   public void setDefaultZoom(ZoomDensity zoom) {
-    this.defaultZoom = defaultZoom;
+    this.defaultZoom = zoom;
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAccessibilityNodeInfo.java
Patch:
@@ -938,7 +938,7 @@ private boolean childrenEqualityCheck(
             (ShadowAccessibilityNodeInfo) ShadowExtractor.extract(otherShadow.children.get(i));
         visitedNodes.add(childShadow);
         childShadow.visitedWhenCheckingChildren = true;
-        if (!childShadow.equals(otherShadow.children.get(i))) {
+        if (!childShadow.equals(shadowOf(otherShadow.children.get(i)))) {
            childrenEquality = false;
            break;
         }
@@ -973,7 +973,7 @@ public boolean equals(Object object) {
       if (parent == null) {
         areEqual &= (otherShadow.parent == null);
       } else if (!shadowOf(parent).visitedWhenCheckingChildren){
-        areEqual &= (shadowOf(parent).equals(otherShadow.parent));
+        areEqual &= (shadowOf(parent).equals(shadowOf(otherShadow.parent)));
       }
 
       while (!visitedNodes.isEmpty()) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -456,7 +456,7 @@ private Location copyOf(Location location) {
   private static float distanceBetween(Location location1, Location location2) {
     double earthRadius = 3958.75;
     double latDifference = Math.toRadians(location2.getLatitude() - location1.getLatitude());
-    double lonDifference = Math.toRadians(location2.getLongitude() - location2.getLongitude());
+    double lonDifference = Math.toRadians(location2.getLongitude() - location1.getLongitude());
     double a = Math.sin(latDifference/2) * Math.sin(latDifference/2) +
         Math.cos(Math.toRadians(location1.getLatitude())) * Math.cos(Math.toRadians(location2.getLatitude())) *
             Math.sin(lonDifference/2) * Math.sin(lonDifference/2);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -425,7 +425,7 @@ public void writeLong(long l) {
      * Reads a long from the byte buffer based on the current data position
      */
     public long readLong() {
-      return readValue(0l);
+      return readValue(0L);
     }
 
     /**

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTelecomManager.java
Patch:
@@ -146,6 +146,7 @@ public void unregisterPhoneAccount(PhoneAccountHandle accountHandle) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public void clearAccounts() {
     accounts.clear();
@@ -168,6 +169,7 @@ public void clearAccountsForPackage(String packageName) {
   }
 
   /** @deprecated */
+  @Deprecated
   @Implementation
   public ComponentName getDefaultPhoneApp() {
     return null;

File: robolectric/src/main/java/org/robolectric/internal/BuckManifestFactory.java
Patch:
@@ -40,9 +40,9 @@ public AndroidManifest create(ManifestIdentifier manifestIdentifier) {
     final List<String> buckAssets = buckAssetsDirs == null ? null :
               Arrays.asList(buckAssetsDirs.split(File.pathSeparator));
 
-    final FsFile resDir = (buckResources == null || "".equals(buckResources)) ? null :
+    final FsFile resDir = (buckResources == null || buckResources.isEmpty()) ? null :
             Fs.fileFromPath(buckResources.get(buckResources.size() - 1));
-    final FsFile assetsDir = (buckAssets == null || "".equals(buckAssets)) ? null :
+    final FsFile assetsDir = (buckAssets == null || buckAssets.isEmpty()) ? null :
             Fs.fileFromPath(buckAssets.get(buckAssets.size() - 1));
 
     Logger.debug("Robolectric assets directory: " + (assetsDir == null ? null : assetsDir.getPath()));

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -105,7 +105,8 @@ public boolean shouldAcquire(String name) {
     }
 
     // Hack. Fixes https://github.com/robolectric/robolectric/issues/1864
-    if (name.equals("javax.net.ssl.DistinguishedNameParser")) {
+    if (name.equals("javax.net.ssl.DistinguishedNameParser")
+        || name.equals("javax.microedition.khronos.opengles.GL")) {
       return true;
     }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -12,7 +12,7 @@ public class ResourceTableFactory {
   private boolean useStax;
 
   public ResourceTableFactory() {
-    this(false);
+    this(true);
   }
 
   public ResourceTableFactory(boolean useStax) {

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -12,7 +12,7 @@ public class ResourceTableFactory {
   private boolean useStax;
 
   public ResourceTableFactory() {
-    this(true);
+    this(false);
   }
 
   public ResourceTableFactory(boolean useStax) {
@@ -141,7 +141,7 @@ private void parseResourceFiles(ResourcePath resourcePath, PackageResourceTable
             new StaxLoader(resourceTable, "/resources/string", "string", ResType.CHAR_SEQUENCE),
             new StaxLoader(resourceTable, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
             new StaxArrayLoader(resourceTable, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY, ResType.CHAR_SEQUENCE),
-            new StaxArrayLoader(resourceTable, "/resources/array", "array", ResType.TYPED_ARRAY, ResType.CHAR_SEQUENCE),
+            new StaxArrayLoader(resourceTable, "/resources/array", "array", ResType.TYPED_ARRAY, null),
             new StaxLoader(resourceTable, "/resources/id", "id", ResType.CHAR_SEQUENCE),
             new StaxLoader(resourceTable, "/resources/item[@type='id']", "id", ResType.CHAR_SEQUENCE),
             new StaxAttrLoader(resourceTable, "/resources/attr", "attr", ResType.ATTR_DATA),

File: robolectric/src/test/java/org/robolectric/res/ResourceParserTest.java
Patch:
@@ -54,7 +54,7 @@ public void compareSdk() throws Exception {
 //    }
 
     try (BufferedWriter out = new BufferedWriter(new FileWriter(new File("stax.txt")))) {
-//      out.write(stringify(staxResources));
+      out.write(stringify(staxResources));
     }
 
     time("old", new Runnable() {

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -85,6 +85,7 @@ public static void configure(InstrumentationConfiguration.Builder builder, Inter
         .addInstrumentedPackage("android.")
         .addInstrumentedPackage("com.android.internal.")
         .addInstrumentedPackage("org.apache.http.")
+        .addInstrumentedPackage("org.ccil.cowan.tagsoup")
         .addInstrumentedPackage("org.kxml2.");
 
 

File: robolectric/src/main/java/org/robolectric/internal/AndroidConfigurer.java
Patch:
@@ -85,6 +85,7 @@ public static void configure(InstrumentationConfiguration.Builder builder, Inter
         .addInstrumentedPackage("android.")
         .addInstrumentedPackage("com.android.internal.")
         .addInstrumentedPackage("org.apache.http.")
+        .addInstrumentedPackage("org.ccil.cowan.tagsoup")
         .addInstrumentedPackage("org.kxml2.");
 
 

File: robolectric-processor/src/test/java/com/example/objects/OuterDummy.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.annotation.processing.objects;
+package com.example.objects;
 
 public class OuterDummy {
   public class InnerDummy {

File: robolectric-processor/src/test/java/com/example/objects/OuterDummy2.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.annotation.processing.objects;
+package com.example.objects;
 
 public class OuterDummy2 {
   protected class InnerProtected {

File: robolectric-processor/src/test/java/com/example/objects/ParameterizedDummy.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.annotation.processing.objects;
+package com.example.objects;
 
 public class ParameterizedDummy<T, N extends Number> {
 

File: robolectric-processor/src/test/java/com/example/objects/UniqueDummy.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.annotation.processing.objects;
+package com.example.objects;
 
 public class UniqueDummy {
 

File: robolectric-processor/src/test/java/com/example/objects2/OuterDummy.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.annotation.processing.objects2;
+package com.example.objects2;
 
 public class OuterDummy {
 

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/validator/ImplementsValidatorTest.java
Patch:
@@ -51,7 +51,7 @@ public void value_withClassName_shouldNotCompile() {
       .that(testClass)
       .failsToCompile()
       .withErrorContaining("@Implements: cannot specify both <value> and <className> attributes")
-      .onLine(7);
+      .onLine(6);
   }
 
   @Test

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/validator/RealObjectValidatorTest.java
Patch:
@@ -75,7 +75,7 @@ public void realObjectWithTypeMismatch_shouldNotCompile() {
     ASSERT.about(singleClass())
       .that(testClass)
       .failsToCompile()
-      .withErrorContaining("@RealObject with type <org.robolectric.annotation.processing.objects.UniqueDummy>; expected <org.robolectric.annotation.processing.objects.Dummy>")
+      .withErrorContaining("@RealObject with type <com.example.objects.UniqueDummy>; expected <com.example.objects.Dummy>")
       .onLine(11);
   }
 
@@ -85,7 +85,7 @@ public void realObjectWithClassName_typeMismatch_shouldNotCompile() {
     ASSERT.about(singleClass())
       .that(testClass)
       .failsToCompile()
-      .withErrorContaining("@RealObject with type <org.robolectric.annotation.processing.objects.UniqueDummy>; expected <org.robolectric.annotation.processing.objects.Dummy>")
+      .withErrorContaining("@RealObject with type <com.example.objects.UniqueDummy>; expected <com.example.objects.Dummy>")
       .onLine(10);
   }
 

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_NoExcludedTypes.java
Patch:
@@ -16,7 +16,7 @@ public class Shadows implements ShadowProvider {
   private static final Map<String, String> SHADOW_MAP = new HashMap<>(1);
 
   static {
-    SHADOW_MAP.put("org.robolectric.annotation.processing.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowExcludedFromAndroidSdk");
+    SHADOW_MAP.put("com.example.objects.Dummy", "org.robolectric.annotation.processing.shadows.ShadowExcludedFromAndroidSdk");
   }
 
   public void reset() {
@@ -29,6 +29,6 @@ public Map<String, String> getShadowMap() {
 
   @Override
   public String[] getProvidedPackageNames() {
-    return new String[] {};
+    return new String[] {"com.example.objects"};
   }
 }

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowAnything.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.Resetter;
 
 @Implements(value = Robolectric.Anything.class,
-            className = "org.robolectric.annotation.processing.objects.AnyObject")
+            className = "com.example.objects.AnyObject")
 public class ShadowAnything {
   public static int resetCount = 0;
   @Resetter

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowClassNameOnly.java
Patch:
@@ -3,7 +3,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
 
-@Implements(className = "org.robolectric.annotation.processing.objects.AnyObject")
+@Implements(className = "com.example.objects.AnyObject")
 public class ShadowClassNameOnly {
   public static int resetCount = 0;
   @Resetter

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowDummy.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowDummy {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowExcludedFromAndroidSdk.java
Patch:
@@ -1,8 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.Resetter;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(value = Dummy.class, isInAndroidSdk = false)
 public class ShadowExcludedFromAndroidSdk {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementsAnythingWithUnresolvableClassNameAndOldMaxSdk.java
Patch:
@@ -1,8 +1,6 @@
 package org.robolectric.annotation.processing.shadows;
 
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.Dummy;
 
 @Implements(className="some.Stuff", maxSdk = 21)
 public class ShadowImplementsAnythingWithUnresolvableClassNameAndOldMaxSdk {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementsDummyWithOuterDummyClassName.java
Patch:
@@ -1,11 +1,10 @@
 package org.robolectric.annotation.processing.shadows;
 
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(value = Dummy.class,
-            className="org.robolectric.annotation.processing.objects.OuterDummy")
+            className="com.example.objects.OuterDummy")
 public class ShadowImplementsDummyWithOuterDummyClassName {
   
 }

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementsWithExtraParameters.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowImplementsWithExtraParameters<T,S,R> {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementsWithMissingParameters.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.ParameterizedDummy;
+import com.example.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
 public class ShadowImplementsWithMissingParameters {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowImplementsWithParameterMismatch.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.ParameterizedDummy;
+import com.example.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
 public class ShadowImplementsWithParameterMismatch<N extends Number,T> {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowOuterDummy.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.OuterDummy;
+import com.example.objects.OuterDummy;
 
 @Implements(OuterDummy.class)
 public class ShadowOuterDummy {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowParameterizedDummy.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.ParameterizedDummy;
+import com.example.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
 public class ShadowParameterizedDummy<T, S extends Number> {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowPrivate.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.Resetter;
 
 @Implements(value=Robolectric.Anything.class,
-            className="org.robolectric.annotation.processing.objects.Private")
+            className="com.example.objects.Private")
 public class ShadowPrivate {
   @Resetter
   public static void resetMethod() {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectParameterizedMismatch.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.ParameterizedDummy;
+import com.example.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
 public class ShadowRealObjectParameterizedMismatch<T,S extends Number> {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectParameterizedMissingParameters.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.ParameterizedDummy;
+import com.example.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
 public class ShadowRealObjectParameterizedMissingParameters<T,S extends Number> {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithCorrectAnything.java
Patch:
@@ -3,10 +3,10 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(value=Robolectric.Anything.class,
-            className="org.robolectric.annotation.processing.objects.Dummy"
+            className="com.example.objects.Dummy"
             )
 public class ShadowRealObjectWithCorrectAnything {
 

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithCorrectClassName.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
-@Implements(className="org.robolectric.annotation.processing.objects.Dummy")
+@Implements(className="com.example.objects.Dummy")
 public class ShadowRealObjectWithCorrectClassName {
 
   @RealObject Dummy someField;

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithCorrectType.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowRealObjectWithCorrectType {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithIncorrectClassName.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.UniqueDummy;
+import com.example.objects.UniqueDummy;
 
-@Implements(className="org.robolectric.annotation.processing.objects.Dummy")
+@Implements(className="com.example.objects.Dummy")
 public class ShadowRealObjectWithIncorrectClassName {
 
   @RealObject UniqueDummy someField;

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithNestedClassName.java
Patch:
@@ -3,10 +3,10 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.OuterDummy;
+import com.example.objects.OuterDummy;
 
 @Implements(value=Robolectric.Anything.class,
-            className="org.robolectric.annotation.processing.objects.OuterDummy$InnerDummy")
+            className="com.example.objects.OuterDummy$InnerDummy")
 public class ShadowRealObjectWithNestedClassName {
 
   @RealObject OuterDummy.InnerDummy someField;

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowRealObjectWithWrongType.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.annotation.processing.objects.Dummy;
-import org.robolectric.annotation.processing.objects.UniqueDummy;
+import com.example.objects.Dummy;
+import com.example.objects.UniqueDummy;
 
 @Implements(Dummy.class)
 public class ShadowRealObjectWithWrongType {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowResetterNonPublic.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowResetterNonPublic {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowResetterNonStatic.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowResetterNonStatic {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowResetterWithParameters.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.annotation.processing.objects.Dummy;
+import com.example.objects.Dummy;
 
 @Implements(Dummy.class)
 public class ShadowResetterWithParameters {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowUniqueDummy.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.annotation.processing.shadows;
 
 import org.robolectric.annotation.Implements;
-import org.robolectric.annotation.processing.objects.UniqueDummy;
+import com.example.objects.UniqueDummy;
 
 @Implements(UniqueDummy.class)
 public class ShadowUniqueDummy {

File: robolectric/src/main/java/org/robolectric/android/StubPackageManager.java
Patch:
@@ -37,6 +37,7 @@
 import android.os.UserHandle;
 import android.os.storage.VolumeInfo;
 
+import java.util.Collections;
 import java.util.List;
 
 public class StubPackageManager extends PackageManager {
@@ -724,12 +725,12 @@ public ComponentName getHomeActivities(List<ResolveInfo> outActivities) {
 
   @Override
   public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId) {
-    return null;
+    return Collections.emptyList();
   }
 
   @Override
   public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) {
-    return null;
+    return Collections.emptyList();
   }
 
   @Override

File: robolectric/src/main/java/org/robolectric/android/StubPackageManager.java
Patch:
@@ -37,6 +37,7 @@
 import android.os.UserHandle;
 import android.os.storage.VolumeInfo;
 
+import java.util.Collections;
 import java.util.List;
 
 public class StubPackageManager extends PackageManager {
@@ -724,12 +725,12 @@ public ComponentName getHomeActivities(List<ResolveInfo> outActivities) {
 
   @Override
   public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId) {
-    return null;
+    return Collections.emptyList();
   }
 
   @Override
   public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) {
-    return null;
+    return Collections.emptyList();
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.Map.Entry;
 import java.util.concurrent.TimeUnit;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
 
@@ -452,7 +453,7 @@ public Account[] doWork() throws OperationCanceledException, IOException, Authen
     };
   }
 
-  @Implementation
+  @Implementation(minSdk = JELLY_BEAN_MR2)
   public Account[] getAccountsByTypeForPackage (String type, String packageName) {
     List<Account> result = new LinkedList<>();
 

File: robolectric/src/test/java/org/robolectric/android/controller/ActivityControllerTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
-import org.robolectric.android.runtime.Api19RuntimeAdapter;
 import org.robolectric.android.runtime.RuntimeAdapter;
 import org.robolectric.android.runtime.RuntimeAdapterFactory;
 import org.robolectric.shadows.CoreShadowsAdapter;
@@ -226,7 +225,7 @@ public void shouldUseCorrectRuntimeAdapter() {
     MyActivity activity = Robolectric.buildActivity(MyActivity.class).setup().get();
     assertThat(activity).isNotNull();
     RuntimeAdapter adapter = RuntimeAdapterFactory.getInstance();
-    assertThat(adapter.getClass().getName()).isEqualTo(Api19RuntimeAdapter.class.getName());
+    assertThat(adapter.getClass().getName()).isEqualTo("org.robolectric.android.runtime.Api19RuntimeAdapter");
   }
   
   @Test

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -284,7 +284,7 @@ protected void beforeTest(Sandbox sandbox, FrameworkMethod method, Method bootst
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "SDK_INT", sdkConfig.getApiLevel());
     ReflectionHelpers.setStaticField(androidBuildVersionClass, "RELEASE", sdkConfig.getAndroidVersion());
 
-    PackageResourceTable systemResourceTable = (sdkEnvironment).getSystemResourceTable(getJarResolver());
+    PackageResourceTable systemResourceTable = sdkEnvironment.getSystemResourceTable(getJarResolver());
     PackageResourceTable appResourceTable = getAppResourceTable(appManifest);
 
     roboMethod.parallelUniverseInterface.setUpApplicationState(bootstrappedMethod, roboMethod.testLifecycle, appManifest, config, new RoutingResourceTable(getCompiletimeSdkResourceTable(), appResourceTable), new RoutingResourceTable(systemResourceTable, appResourceTable), new RoutingResourceTable(systemResourceTable));

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -102,7 +102,7 @@ public void testVersionConfiguration() {
   }
 
 
-  @Test public void assertThatz() throws Exception {
+  @Test public void hamcrestMatchersDontBlowUpDuringLinking() throws Exception {
     org.junit.Assert.assertThat(true, CoreMatchers.is(true));
   }
 

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricInternals.java
Patch:
@@ -60,7 +60,7 @@ public static ShadowInvalidator getShadowInvalidator() {
     return shadowInvalidator;
   }
 
-  public static SandboxClassLoader getClassLoader() {
+  public static ClassLoader getClassLoader() {
     return classLoader;
   }
 }

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/Sandbox.java
Patch:
@@ -18,9 +18,9 @@ public Sandbox(ClassLoader robolectricClassLoader) {
     this.shadowInvalidator = new ShadowInvalidator();
   }
 
-  public <T> Class<T> bootstrappedClass(Class<?> testClass) {
+  public <T> Class<T> bootstrappedClass(Class<?> clazz) {
     try {
-      return (Class<T>) robolectricClassLoader.loadClass(testClass.getName());
+      return (Class<T>) robolectricClassLoader.loadClass(clazz.getName());
     } catch (ClassNotFoundException e) {
       throw new RuntimeException(e);
     }

File: robolectric/src/main/java/org/robolectric/ParameterizedRobolectricTestRunner.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.runners.Suite;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
-import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
 import org.robolectric.internal.DeepCloner;
 import org.robolectric.internal.SandboxTestRunner;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Test;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
+import org.robolectric.internal.SandboxFactory;
 
 import java.lang.reflect.Modifier;
 
@@ -17,7 +18,7 @@ public class AndroidSandboxClassLoaderTest {
 
   @Before
   public void setUp() throws Exception {
-    classLoader = new SandboxClassLoader(configureBuilder().build());
+    classLoader = SandboxFactory.INSTANCE.createClassLoader(configureBuilder().build());
   }
 
   @Test

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/RobolectricInternals.java
Patch:
@@ -60,7 +60,7 @@ public static ShadowInvalidator getShadowInvalidator() {
     return shadowInvalidator;
   }
 
-  public static SandboxClassLoader getClassLoader() {
+  public static ClassLoader getClassLoader() {
     return classLoader;
   }
 }

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/Sandbox.java
Patch:
@@ -18,9 +18,9 @@ public Sandbox(ClassLoader robolectricClassLoader) {
     this.shadowInvalidator = new ShadowInvalidator();
   }
 
-  public <T> Class<T> bootstrappedClass(Class<?> testClass) {
+  public <T> Class<T> bootstrappedClass(Class<?> clazz) {
     try {
-      return (Class<T>) robolectricClassLoader.loadClass(testClass.getName());
+      return (Class<T>) robolectricClassLoader.loadClass(clazz.getName());
     } catch (ClassNotFoundException e) {
       throw new RuntimeException(e);
     }

File: robolectric/src/main/java/org/robolectric/ParameterizedRobolectricTestRunner.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.runners.Suite;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
-import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
 import org.robolectric.internal.DeepCloner;
 import org.robolectric.internal.SandboxTestRunner;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/AndroidSandboxClassLoaderTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Test;
 import org.robolectric.android.AndroidInterceptors;
 import org.robolectric.internal.AndroidConfigurer;
+import org.robolectric.internal.SandboxFactory;
 
 import java.lang.reflect.Modifier;
 
@@ -17,7 +18,7 @@ public class AndroidSandboxClassLoaderTest {
 
   @Before
   public void setUp() throws Exception {
-    classLoader = new SandboxClassLoader(configureBuilder().build());
+    classLoader = SandboxFactory.INSTANCE.createClassLoader(configureBuilder().build());
   }
 
   @Test

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivityThread.java
Patch:
@@ -35,7 +35,7 @@ public Object invoke(Object proxy, @NotNull Method method, Object[] args) throws
           String packageName = (String) args[0];
           int flags = (Integer) args[1];
           try {
-            return RuntimeEnvironment.getPackageManager().getApplicationInfo(packageName, flags);
+            return RuntimeEnvironment.application.getPackageManager().getApplicationInfo(packageName, flags);
           } catch (PackageManager.NameNotFoundException e) {
             return null;
           }

File: robolectric/src/main/java/org/robolectric/android/controller/ContentProviderController.java
Patch:
@@ -30,7 +30,7 @@ public ContentProviderController<T> create() {
 
     ProviderInfo providerInfo = null;
     try {
-      providerInfo = RuntimeEnvironment.getPackageManager().getProviderInfo(componentName, 0);
+      providerInfo = baseContext.getPackageManager().getProviderInfo(componentName, 0);
     } catch (PackageManager.NameNotFoundException e) {
       Logger.strict("Unable to find provider info for " + componentName, e);
     }

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerTest.java
Patch:
@@ -794,7 +794,7 @@ public static class ActivityWithConfigChanges extends Activity { }
   public void getActivityMetaData_configChanges() throws Exception {
     Activity activity = setupActivity(ActivityWithConfigChanges.class);
 
-    ActivityInfo activityInfo = RuntimeEnvironment.getPackageManager().getActivityInfo(activity.getComponentName(), 0);
+    ActivityInfo activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), 0);
 
     int configChanges = activityInfo.configChanges;
     assertThat(configChanges & ActivityInfo.CONFIG_MCC).isEqualTo(ActivityInfo.CONFIG_MCC);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -25,7 +25,7 @@ public class ShadowContextTest {
 
   @Before
   public void setUp() throws Exception {
-    File dataDir = new File(RuntimeEnvironment.getPackageManager()
+    File dataDir = new File(context.getPackageManager()
         .getPackageInfo("org.robolectric", 0).applicationInfo.dataDir);
 
     File[] files = dataDir.listFiles();
@@ -44,7 +44,7 @@ public void shouldGetApplicationDataDirectory() throws IOException {
 
   @Test
   public void shouldCreateIfDoesNotExistAndGetApplicationDataDirectory() throws Exception {
-    File dataDir = new File(RuntimeEnvironment.getPackageManager()
+    File dataDir = new File(context.getPackageManager()
         .getPackageInfo("org.robolectric", 0).applicationInfo.dataDir, "data");
 
     assertThat(dataDir).doesNotExist();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNonAppLibraryTest.java
Patch:
@@ -25,7 +25,7 @@ public class ShadowNonAppLibraryTest {
   }
 
   @Test public void shouldHaveDefaultPackageInfo() throws Exception {
-    PackageInfo packageInfo = RuntimeEnvironment.getPackageManager().getPackageInfo("org.robolectric.default", 0);
+    PackageInfo packageInfo = RuntimeEnvironment.application.getPackageManager().getPackageInfo("org.robolectric.default", 0);
     assertThat(packageInfo).isNotNull();
 
     ApplicationInfo applicationInfo = packageInfo.applicationInfo;

File: robolectric-resources/src/main/java/org/robolectric/manifest/ContentProviderData.java
Patch:
@@ -16,7 +16,7 @@ public ContentProviderData(String className, MetaData metaData, String authority
     this.pathPermissionDatas = pathPermissionDatas;
   }
 
-  public String getAuthority() {
+  public String getAuthorities() {
     return authority;
   }
 

File: robolectric/src/main/java/org/robolectric/android/ParallelUniverse.java
Patch:
@@ -72,6 +72,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, An
     RuntimeEnvironment.setSystemResourceTable(systemResourceTable);
 
     initializeAppManifest(appManifest, appResourceTable, packageManager);
+    packageManager.setDependencies(appManifest, appResourceTable);
 
     if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
       Security.insertProviderAt(new BouncyCastleProvider(), 1);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -127,6 +127,8 @@ public static final class string {
     public static final int also_in_all_libs = 0x7f020122;
     public static final int typed_array_a = 0x7f020123;
     public static final int typed_array_b = 0x7f020124;
+    public static final int test_permission_description = 0x7f020125;
+    public static final int test_permission_label = 0x7f020126;
   }
 
   public static final class plurals {

File: robolectric-resources/src/main/java/org/robolectric/manifest/ContentProviderData.java
Patch:
@@ -16,7 +16,7 @@ public ContentProviderData(String className, MetaData metaData, String authority
     this.pathPermissionDatas = pathPermissionDatas;
   }
 
-  public String getAuthority() {
+  public String getAuthorities() {
     return authority;
   }
 

File: robolectric/src/main/java/org/robolectric/android/ParallelUniverse.java
Patch:
@@ -72,6 +72,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, An
     RuntimeEnvironment.setSystemResourceTable(systemResourceTable);
 
     initializeAppManifest(appManifest, appResourceTable, packageManager);
+    packageManager.setDependencies(appManifest, appResourceTable);
 
     if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
       Security.insertProviderAt(new BouncyCastleProvider(), 1);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -127,6 +127,8 @@ public static final class string {
     public static final int also_in_all_libs = 0x7f020122;
     public static final int typed_array_a = 0x7f020123;
     public static final int typed_array_b = 0x7f020124;
+    public static final int test_permission_description = 0x7f020125;
+    public static final int test_permission_label = 0x7f020126;
   }
 
   public static final class plurals {

File: robolectric/src/main/java/org/robolectric/android/controller/ActivityController.java
Patch:
@@ -26,7 +26,7 @@
 import static android.os.Build.VERSION_CODES.M;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
-public class ActivityController<T extends Activity> extends org.robolectric.res.builder.ActivityController<T> {
+public class ActivityController<T extends Activity> extends org.robolectric.util.ActivityController<T> {
   private final ShadowsAdapter shadowsAdapter;
   private ShadowActivityAdapter shadowReference;
 

File: robolectric/src/main/java/org/robolectric/android/controller/ContentProviderController.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.shadows.ShadowContentResolver;
 import org.robolectric.util.Logger;
 
-public class ContentProviderController<T extends ContentProvider> extends org.robolectric.res.builder.ContentProviderController<T> {
+public class ContentProviderController<T extends ContentProvider> extends org.robolectric.util.ContentProviderController<T> {
   private T contentProvider;
 
   private ContentProviderController(T contentProvider) {

File: robolectric/src/main/java/org/robolectric/android/controller/FragmentController.java
Patch:
@@ -7,14 +7,14 @@
 import android.widget.LinearLayout;
 import org.robolectric.Robolectric;
 import org.robolectric.ShadowsAdapter;
-import org.robolectric.res.builder.FragmentTestUtil;
+import org.robolectric.util.FragmentTestUtil;
 
 /**
  * Controller class for driving fragment lifecycles, similar to {@link ActivityController}. Only
  * necessary if more complex lifecycle management is needed, otherwise {@link FragmentTestUtil}
  * should be sufficient.
  */
-public class FragmentController<F extends Fragment> extends org.robolectric.res.builder.FragmentController<F> {
+public class FragmentController<F extends Fragment> extends org.robolectric.util.FragmentController<F> {
   private final F fragment;
   private final ActivityController<? extends Activity> activityController;
 

File: robolectric/src/main/java/org/robolectric/android/controller/IntentServiceController.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
-public class IntentServiceController<T extends IntentService> extends org.robolectric.res.builder.IntentServiceController<T> {
+public class IntentServiceController<T extends IntentService> extends org.robolectric.util.IntentServiceController<T> {
   private final String shadowActivityThreadClassName;
 
   public static <T extends IntentService> IntentServiceController<T> of(final ShadowsAdapter shadowsAdapter,

File: robolectric/src/main/java/org/robolectric/android/controller/ServiceController.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
-public class ServiceController<T extends Service> extends org.robolectric.res.builder.ServiceController<T> {
+public class ServiceController<T extends Service> extends org.robolectric.util.ServiceController<T> {
 
   private String shadowActivityThreadClassName;
 

File: robolectric/src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import android.app.Activity;
 import android.content.Intent;

File: robolectric/src/main/java/org/robolectric/util/ContentProviderController.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import android.content.ContentProvider;
 import android.content.pm.ProviderInfo;

File: robolectric/src/main/java/org/robolectric/util/FragmentController.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import android.app.Activity;
 import android.app.Fragment;

File: robolectric/src/main/java/org/robolectric/util/FragmentTestUtil.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import org.robolectric.Robolectric;
 

File: robolectric/src/main/java/org/robolectric/util/IntentServiceController.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import android.app.IntentService;
 import android.content.Intent;

File: robolectric/src/main/java/org/robolectric/util/ServiceController.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.util;
 
 import android.app.Service;
 import android.content.Intent;

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.robolectric.android;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.robolectric.res.builder.FragmentTestUtil.startFragment;
-import static org.robolectric.res.builder.FragmentTestUtil.startVisibleFragment;
+import static org.robolectric.util.FragmentTestUtil.startFragment;
+import static org.robolectric.util.FragmentTestUtil.startVisibleFragment;
 
 import android.widget.LinearLayout;
 import org.junit.Test;

File: robolectric-resources/src/main/java/org/robolectric/RuntimeEnvironment.java
Patch:
@@ -4,7 +4,7 @@
 import android.content.pm.PackageManager;
 
 import org.robolectric.res.ResourceTable;
-import org.robolectric.android.RobolectricPackageManager;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.util.Scheduler;
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.android;
+package org.robolectric.res.builder;
 
 import android.content.ComponentName;
 import android.content.Intent;

File: robolectric/src/main/java/org/robolectric/android/ParallelUniverse.java
Patch:
@@ -24,6 +24,8 @@
 import org.robolectric.manifest.ActivityData;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.*;
+import org.robolectric.res.builder.DefaultPackageManager;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadows.ShadowLooper;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.Scheduler;

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.internal.SdkConfig;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.*;
-import org.robolectric.android.RobolectricPackageManager;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowLooper;
 

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.internal.ShadowProvider;
-import org.robolectric.android.RobolectricPackageManager;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowDisplay;
 import org.robolectric.shadows.ShadowLooper;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.android.RobolectricPackageManager;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.util.ReflectionHelpers;
 
 import java.lang.reflect.Method;

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.content.Intent;
 import org.junit.Test;
-import org.robolectric.android.DefaultPackageManager;
+import org.robolectric.res.builder.DefaultPackageManager;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: robolectric/src/test/java/org/robolectric/android/DefaultPackageManagerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
+import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowDrawable;
 import org.robolectric.test.TemporaryFolder;

File: robolectric-sandbox/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -34,6 +34,8 @@ public static Builder newBuilder() {
       "org.robolectric.res.builder.ContentProviderController",
       "org.robolectric.res.builder.DefaultPackageManager",
       "org.robolectric.res.builder.FragmentController",
+      "org.robolectric.res.builder.FragmentTestUtil",
+      "org.robolectric.res.builder.FragmentTestUtil$FragmentUtilActivity",
       "org.robolectric.res.builder.IntentServiceController",
       "org.robolectric.res.builder.ServiceController"
   );

File: robolectric/src/test/java/org/robolectric/android/FragmentTestUtilTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.res.builder;
+package org.robolectric.android;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.res.builder.FragmentTestUtil.startFragment;

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -125,7 +125,7 @@ private static void parseResourceFiles(ResourcePath resourcePath, PackageResourc
           new ValueResourceLoader(resourceTable, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
           new ValueResourceLoader(resourceTable, "/resources/fraction", "fraction", ResType.FRACTION),
           new ValueResourceLoader(resourceTable, "/resources/item[@type='fraction']", "fraction", ResType.FRACTION),
-          new ValueResourceLoader(resourceTable, "/resources/item", "layout", ResType.LAYOUT),
+          new ValueResourceLoader(resourceTable, "/resources/item[@type='layout']", "layout", ResType.LAYOUT),
           new PluralResourceLoader(resourceTable),
           new ValueResourceLoader(resourceTable, "/resources/string", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(resourceTable, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceTableFactory.java
Patch:
@@ -125,7 +125,7 @@ private static void parseResourceFiles(ResourcePath resourcePath, PackageResourc
           new ValueResourceLoader(resourceTable, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
           new ValueResourceLoader(resourceTable, "/resources/fraction", "fraction", ResType.FRACTION),
           new ValueResourceLoader(resourceTable, "/resources/item[@type='fraction']", "fraction", ResType.FRACTION),
-          new ValueResourceLoader(resourceTable, "/resources/item", "layout", ResType.LAYOUT),
+          new ValueResourceLoader(resourceTable, "/resources/item[@type='layout']", "layout", ResType.LAYOUT),
           new PluralResourceLoader(resourceTable),
           new ValueResourceLoader(resourceTable, "/resources/string", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(resourceTable, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -177,8 +177,8 @@ public void shouldNotOverwriteValuesWithMatchingQualifiers() {
 
     TypedResource firstValue = new TypedResource<>("first_value", ResType.CHAR_SEQUENCE, xmlContext);
     TypedResource secondValue = new TypedResource<>("second_value", ResType.CHAR_SEQUENCE, xmlContext);
-    bundle.put(new ResName("package", "string", "resource_name"), firstValue);
-    bundle.put(new ResName("package", "string", "resource_name"), secondValue);
+    bundle.put(new ResName("org.robolectric", "string", "resource_name"), firstValue);
+    bundle.put(new ResName("org.robolectric", "string", "resource_name"), secondValue);
 
     assertThat(bundle.get(new ResName("org.robolectric", "string", "resource_name"), "").getData()).isEqualTo("first_value");
   }

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceTable.java
Patch:
@@ -111,7 +111,7 @@ void addResource(String type, String name, TypedResource value) {
         throw new IllegalStateException(resName + " assigned ID to already existing " + existing);
       }
     }
-    resources.put(type, name, value);
+    resources.put(resName, value);
   }
 
   private boolean isAndroidPackage(ResName resName) {

File: robolectric-resources/src/main/java/org/robolectric/res/ResBunch.java
Patch:
@@ -7,9 +7,9 @@
 public class ResBunch {
   private final Map<String, ResBundle> types = new LinkedHashMap<>();
 
-  public void put(String attrType, String name, TypedResource value) {
-    ResBundle bundle = getBundle(attrType);
-    bundle.put(attrType, name, value);
+  public void put(ResName resName, TypedResource value) {
+    ResBundle bundle = getBundle(resName.type);
+    bundle.put(resName, value);
   }
 
   private ResBundle getBundle(String attrType) {

File: robolectric-resources/src/main/java/org/robolectric/res/ResBundle.java
Patch:
@@ -5,9 +5,7 @@
 public class ResBundle {
   private final ResMap valuesMap = new ResMap();
 
-  public void put(String attrType, String name, TypedResource value) {
-    XmlContext xmlContext = value.getXmlContext();
-    ResName resName = new ResName(xmlContext.getPackageName(), attrType, name);
+  public void put(ResName resName, TypedResource value) {
     valuesMap.put(resName, value);
   }
 

File: robolectric/src/test/java/org/robolectric/res/ResBundleTest.java
Patch:
@@ -177,8 +177,8 @@ public void shouldNotOverwriteValuesWithMatchingQualifiers() {
 
     TypedResource firstValue = new TypedResource<>("first_value", ResType.CHAR_SEQUENCE, xmlContext);
     TypedResource secondValue = new TypedResource<>("second_value", ResType.CHAR_SEQUENCE, xmlContext);
-    bundle.put("string", "resource_name", firstValue);
-    bundle.put("string", "resource_name", secondValue);
+    bundle.put(new ResName("package", "string", "resource_name"), firstValue);
+    bundle.put(new ResName("package", "string", "resource_name"), secondValue);
 
     assertThat(bundle.get(new ResName("org.robolectric", "string", "resource_name"), "").getData()).isEqualTo("first_value");
   }

File: robolectric/src/test/java/org/robolectric/lib1/R.java
Patch:
@@ -14,8 +14,8 @@ public static final class string {
 
   public static final class styleable {
     public static final int[] SomeStyleable = new int[]{attr.offsetX, attr.offsetY};
-    public static final int SomeStyleable_attr_1 = 0;
-    public static final int SomeStyleable_attr_2 = 1;
+    public static final int SomeStyleable_offsetX = 0;
+    public static final int SomeStyleable_offsetY = 1;
   }
 
   public static final class attr {

File: robolectric/src/test/java/org/robolectric/lib2/R.java
Patch:
@@ -14,8 +14,8 @@ public static final class string {
 
   public static final class styleable {
     public static final int[] SomeStyleable = new int[]{attr.offsetX, attr.offsetY};
-    public static final int SomeStyleable_attr_1 = 0;
-    public static final int SomeStyleable_attr_2 = 1;
+    public static final int SomeStyleable_offsetX = 0;
+    public static final int SomeStyleable_offsetY = 1;
   }
 
   public static final class attr {

File: robolectric/src/test/java/org/robolectric/lib3/R.java
Patch:
@@ -14,8 +14,8 @@ public static final class string {
 
   public static final class styleable {
     public static final int[] SomeStyleable = new int[]{attr.offsetX, attr.offsetY};
-    public static final int SomeStyleable_attr_1 = 0;
-    public static final int SomeStyleable_attr_2 = 1;
+    public static final int SomeStyleable_offsetX = 0;
+    public static final int SomeStyleable_offsetY = 1;
   }
 
   public static final class attr {

File: robolectric/src/test/java/org/robolectric/util/TestUtil.java
Patch:
@@ -93,7 +93,7 @@ public static ResourcePath lib3Resources() {
 
   public static ResourcePath systemResources() {
     if (SYSTEM_RESOURCE_PATH == null) {
-      SdkConfig sdkConfig = new SdkConfig(SdkConfig.FALLBACK_SDK_VERSION);
+      SdkConfig sdkConfig = new SdkConfig(SdkConfig.MAX_SDK_VERSION);
       Fs fs = Fs.fromJar(new MavenDependencyResolver().getLocalArtifactUrl(sdkConfig.getAndroidSdkDependency()));
       SYSTEM_RESOURCE_PATH = new ResourcePath(android.R.class, fs.join("res"), fs.join("assets"));
     }

File: robolectric-resources/src/main/java/org/robolectric/res/ResType.java
Patch:
@@ -41,7 +41,7 @@ public TypedResource getValueWithType(XpathResourceXmlLoader.XmlNode xmlNode, Xm
   },
 
   TYPED_ARRAY {
-    @Override public TypedResource getValueWithType(XpathResourceXmlLoader.XmlNode xmlNode, XmlLoader.XmlContext xmlContext) {
+    @Override public TypedResource getValueWithType(XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) {
       return extractTypedItems(xmlNode, TYPED_ARRAY, xmlContext);
     }
   },
@@ -61,7 +61,7 @@ public TypedResource getValueWithType(XpathResourceXmlLoader.XmlNode xmlNode, Xm
     return new TypedResource<>(xmlNode.getTextContent(), this, xmlContext);
   }
   
-  private static TypedResource extractTypedItems(XpathResourceXmlLoader.XmlNode xmlNode, ResType arrayResType, XmlLoader.XmlContext xmlContext) {
+  private static TypedResource extractTypedItems(XpathResourceXmlLoader.XmlNode xmlNode, ResType arrayResType, XmlContext xmlContext) {
     final List<TypedResource> items = new ArrayList<>();
     for (XpathResourceXmlLoader.XmlNode item : xmlNode.selectElements("item")) {
       final String itemString = item.getTextContent();

File: robolectric/src/main/java/org/robolectric/internal/bytecode/AndroidInterceptors.java
Patch:
@@ -167,7 +167,7 @@ public LocaleAdjustLanguageCodeInterceptor() {
       super(new MethodRef(Locale.class, "adjustLanguageCode"));
     }
 
-    static Object adjustLanguageCode(String languageCode) {
+    static String adjustLanguageCode(String languageCode) {
       String adjusted = languageCode.toLowerCase(Locale.US);
       // Map new language codes to the obsolete language
       // codes so the correct resource bundles will be used.

File: robolectric/src/main/java/org/robolectric/internal/bytecode/Interceptors.java
Patch:
@@ -45,7 +45,7 @@ public MethodHandle getMethodHandle(String className, String methodName, MethodT
     if (mh == null) mh = interceptors.get(new MethodRef(className, "*"));
     if (mh != null) {
       try {
-        return mh.getMethodHandle(methodName);
+        return mh.getMethodHandle(methodName, type);
       } catch (NoSuchMethodException | IllegalAccessException e) {
         throw new RuntimeException(e);
       }

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -118,7 +118,7 @@ public void shouldLoadDefaultsFromGlobalPropertiesFile() throws Exception {
             "libraries: libs/test, libs/test2\n" +
             "constants: " + ConfigMergerTest.BuildConfigConstants3.class.getName();
 
-    assertConfig(configFor(Test2.class, "withoutAnnotation", of("/robolectric.properties", properties)),
+    assertConfig(configFor(Test2.class, "withoutAnnotation", of("robolectric.properties", properties)),
         new int[] {432}, "--none", TestFakeApp.class, "com.example.test", "from-properties-file", "from/properties/file/res", "from/properties/file/assets", new Class[] {ShadowView.class, ShadowViewGroup.class}, new String[]{"com.example.test1", "com.example.test2"}, new String[]{"libs/test", "libs/test2"}, BuildConfigConstants3.class);
   }
 
@@ -134,7 +134,7 @@ public void shouldMergeConfigUpPackageHierarchy() throws Exception {
         of(
             "org/robolectric/robolectric.properties", "qualifiers: from-org-robolectric\nlibraries: FromOrgRobolectric\n",
             "org/robolectric.properties", "sdk: 123\nqualifiers: from-org\nlibraries: FromOrg\n",
-            "/robolectric.properties", "sdk: 456\nqualifiers: from-top-level\nlibraries: FromTopLevel\n"
+            "robolectric.properties", "sdk: 456\nqualifiers: from-top-level\nlibraries: FromTopLevel\n"
             )
         ),
         new int[] {123}, "AndroidManifest.xml", DEFAULT_APPLICATION, "", "from-org-robolectric", "res", "assets", new Class[] {}, new String[]{},
@@ -143,7 +143,7 @@ public void shouldMergeConfigUpPackageHierarchy() throws Exception {
 
   @Test
   public void withEmptyShadowList_shouldLoadDefaultsFromGlobalPropertiesFile() throws Exception {
-    assertConfig(configFor(Test2.class, "withoutAnnotation", of("/robolectric.properties", "shadows:")),
+    assertConfig(configFor(Test2.class, "withoutAnnotation", of("robolectric.properties", "shadows:")),
         new int[0],  "AndroidManifest.xml", DEFAULT_APPLICATION, "", "", "res", "assets", new Class[] {}, new String[]{}, new String[]{}, null);
   }
 

File: robolectric/src/test/java/org/robolectric/ConfigMergerTest.java
Patch:
@@ -118,7 +118,7 @@ public void shouldLoadDefaultsFromGlobalPropertiesFile() throws Exception {
             "libraries: libs/test, libs/test2\n" +
             "constants: " + ConfigMergerTest.BuildConfigConstants3.class.getName();
 
-    assertConfig(configFor(Test2.class, "withoutAnnotation", of("/robolectric.properties", properties)),
+    assertConfig(configFor(Test2.class, "withoutAnnotation", of("robolectric.properties", properties)),
         new int[] {432}, "--none", TestFakeApp.class, "com.example.test", "from-properties-file", "from/properties/file/res", "from/properties/file/assets", new Class[] {ShadowView.class, ShadowViewGroup.class}, new String[]{"com.example.test1", "com.example.test2"}, new String[]{"libs/test", "libs/test2"}, BuildConfigConstants3.class);
   }
 
@@ -134,7 +134,7 @@ public void shouldMergeConfigUpPackageHierarchy() throws Exception {
         of(
             "org/robolectric/robolectric.properties", "qualifiers: from-org-robolectric\nlibraries: FromOrgRobolectric\n",
             "org/robolectric.properties", "sdk: 123\nqualifiers: from-org\nlibraries: FromOrg\n",
-            "/robolectric.properties", "sdk: 456\nqualifiers: from-top-level\nlibraries: FromTopLevel\n"
+            "robolectric.properties", "sdk: 456\nqualifiers: from-top-level\nlibraries: FromTopLevel\n"
             )
         ),
         new int[] {123}, "AndroidManifest.xml", DEFAULT_APPLICATION, "", "from-org-robolectric", "res", "assets", new Class[] {}, new String[]{},
@@ -143,7 +143,7 @@ public void shouldMergeConfigUpPackageHierarchy() throws Exception {
 
   @Test
   public void withEmptyShadowList_shouldLoadDefaultsFromGlobalPropertiesFile() throws Exception {
-    assertConfig(configFor(Test2.class, "withoutAnnotation", of("/robolectric.properties", "shadows:")),
+    assertConfig(configFor(Test2.class, "withoutAnnotation", of("robolectric.properties", "shadows:")),
         new int[0],  "AndroidManifest.xml", DEFAULT_APPLICATION, "", "", "res", "assets", new Class[] {}, new String[]{}, new String[]{}, null);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceParser.java
Patch:
@@ -37,6 +37,9 @@ static void load(String packageName, ResourcePath resourcePath, PackageResourceT
           new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
+          new ValueResourceLoader(data, "/resources/array", "array", ResType.TYPED_ARRAY),
+          new ValueResourceLoader(data, "/resources/id", "id", ResType.CHAR_SEQUENCE),
+          new ValueResourceLoader(data, "/resources/item[@type='id']", "id", ResType.CHAR_SEQUENCE),
           new AttrResourceLoader(data),
           new StyleResourceLoader(data)
       );

File: robolectric-resources/src/main/java/org/robolectric/res/TypedResource.java
Patch:
@@ -32,7 +32,8 @@ public XmlLoader.XmlContext getXmlContext() {
   }
 
   public String asString() {
-    return ((String) getData());
+    T data = getData();
+    return data instanceof String ? (String) data : null;
   }
 
   public boolean isFile() {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -51,9 +51,10 @@ public static void dump(TypedArray typedArray) {
     int[] data = ReflectionHelpers.getField(typedArray, "mData");
 
     StringBuilder result = new StringBuilder();
-    for (int index = 0;  index < data.length; index+= ShadowAssetManager.STYLE_NUM_ENTRIES) {
+    for (int index = 0; index < data.length; index+= ShadowAssetManager.STYLE_NUM_ENTRIES) {
       final int type = data[index+ShadowAssetManager.STYLE_TYPE];
-      result.append("Type: ").append(TYPE_MAP.get(type)).append(System.lineSeparator());
+      result.append("Index: ").append(index / ShadowAssetManager.STYLE_NUM_ENTRIES).append(System.lineSeparator());
+      result.append(Strings.padEnd("Type: ", 25, ' ')).append(TYPE_MAP.get(type)).append(System.lineSeparator());
       if (type != TypedValue.TYPE_NULL) {
         result.append(Strings.padEnd("Style data: ", 25, ' ')).append(data[index+ ShadowAssetManager.STYLE_DATA]).append(System.lineSeparator());
         result.append(Strings.padEnd("Asset cookie ", 25, ' ')).append(data[index+ShadowAssetManager.STYLE_ASSET_COOKIE]).append(System.lineSeparator());

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceParser.java
Patch:
@@ -38,6 +38,8 @@ static void load(String packageName, ResourcePath resourcePath, PackageResourceT
           new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
           new ValueResourceLoader(data, "/resources/array", "array", ResType.TYPED_ARRAY),
+          new ValueResourceLoader(data, "/resources/id", "id", ResType.CHAR_SEQUENCE),
+          new ValueResourceLoader(data, "/resources/item[@type='id']", "id", ResType.CHAR_SEQUENCE),
           new AttrResourceLoader(data),
           new StyleResourceLoader(data)
       );

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -493,7 +493,7 @@ private TypedArray getTypedArray(Resources resources, TypedResource[] typedResou
     }
 
     int[] indices = new int[typedResources.length + 1]; /* keep zeroed out */
-    return ShadowTypedArray.create(resources, null, data, indices, totalLen, stringData);
+    return ShadowTypedArray.create(resources, null, data, indices, typedResources.length, stringData);
   }
 
   private int getResourceType(TypedResource typedResource) {

File: robolectric-resources/src/main/java/org/robolectric/res/Attribute.java
Patch:
@@ -48,11 +48,11 @@ public ResName getStyleReference() {
   }
 
   public boolean isNull() {
-    return AttributeResource.isNull(value);
+    return ResourceValue.isNull(value);
   }
 
   public boolean isEmpty() {
-    return AttributeResource.isEmpty(value);
+    return ResourceValue.isEmpty(value);
   }
 
   @Override

File: robolectric-resources/src/main/java/org/robolectric/res/EmptyStyle.java
Patch:
@@ -2,7 +2,7 @@
 
 public class EmptyStyle implements Style {
   @Override
-  public AttributeResource getAttrValue(ResName resName) {
+  public ResourceValue getAttrValue(ResName resName) {
     return null;
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -88,7 +88,7 @@ public static String qualifyResName(String possiblyQualifiedResourceName, String
       return null;
     }
 
-    if (AttributeResource.isNull(possiblyQualifiedResourceName)) {
+    if (ResourceValue.isNull(possiblyQualifiedResourceName)) {
       return null;
     }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceParser.java
Patch:
@@ -37,6 +37,7 @@ static void load(String packageName, ResourcePath resourcePath, PackageResourceT
           new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
           new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
+          new ValueResourceLoader(data, "/resources/array", "array", ResType.TYPED_ARRAY),
           new AttrResourceLoader(data),
           new StyleResourceLoader(data)
       );

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceValue.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.jetbrains.annotations.NotNull;
 
-public class AttributeResource {
+public class ResourceValue {
   public static final String ANDROID_RES_NS_PREFIX = "http://schemas.android.com/apk/res/";
   public static final String RES_AUTO_NS_URI = "http://schemas.android.com/apk/res-auto";
 
@@ -14,11 +14,11 @@ public class AttributeResource {
   public final @NotNull String contextPackageName;
   private final Integer referenceResId;
 
-  public AttributeResource(@NotNull ResName resName, @NotNull String value, @NotNull String contextPackageName) {
+  public ResourceValue(@NotNull ResName resName, @NotNull String value, @NotNull String contextPackageName) {
     this(resName, value, contextPackageName, null);
   }
 
-  public AttributeResource(@NotNull ResName resName, @NotNull String value, @NotNull String contextPackageName, Integer referenceResId) {
+  public ResourceValue(@NotNull ResName resName, @NotNull String value, @NotNull String contextPackageName, Integer referenceResId) {
     this.referenceResId = referenceResId;
     if (!resName.type.equals("attr")) throw new IllegalStateException("\"" + resName.getFullyQualifiedName() + "\" unexpected");
 

File: robolectric-resources/src/main/java/org/robolectric/res/Style.java
Patch:
@@ -1,5 +1,5 @@
 package org.robolectric.res;
 
 public interface Style {
-  AttributeResource getAttrValue(ResName resName);
+  ResourceValue getAttrValue(ResName resName);
 }

File: robolectric-resources/src/main/java/org/robolectric/res/StyleResourceLoader.java
Patch:
@@ -27,7 +27,7 @@ protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
       String value = item.getTextContent();
 
       ResName attrResName = ResName.qualifyResName(attrName, xmlContext.getPackageName(), "attr");
-      styleData.add(attrResName, new AttributeResource(attrResName, value, xmlContext.getPackageName()));
+      styleData.add(attrResName, new ResourceValue(attrResName, value, xmlContext.getPackageName()));
     }
 
     data.put("style", styleNameWithUnderscores, new TypedResource<>(styleData, ResType.STYLE, xmlContext));

File: robolectric-resources/src/main/java/org/robolectric/res/ThemeStyleSet.java
Patch:
@@ -10,11 +10,11 @@ public class ThemeStyleSet implements Style {
 
   private List<OverlayedStyle> styles = new ArrayList<>();
 
-  public AttributeResource getAttrValue(ResName attrName) {
-    AttributeResource attribute = null;
+  public ResourceValue getAttrValue(ResName attrName) {
+    ResourceValue attribute = null;
 
     for (OverlayedStyle overlayedStyle : styles) {
-      AttributeResource overlayedAttribute = overlayedStyle.style.getAttrValue(attrName);
+      ResourceValue overlayedAttribute = overlayedStyle.style.getAttrValue(attrName);
       if (overlayedAttribute != null && (attribute == null || overlayedStyle.force)) {
         attribute = overlayedAttribute;
       }

File: robolectric-resources/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -66,6 +66,7 @@ public static Converter getConverter(ResType resType) {
         return new FromFraction();
       case CHAR_SEQUENCE_ARRAY:
       case INTEGER_ARRAY:
+      case TYPED_ARRAY:
         return new FromArray();
       default:
         throw new UnsupportedOperationException(resType.name());

File: robolectric/src/test/java/org/robolectric/res/ResourceTableFactoryTest.java
Patch:
@@ -42,7 +42,7 @@ public void shouldPrefixAllSystemResourcesWithAndroid() throws Exception {
 
   @Test
   public void shouldHandleNull() throws Exception {
-    assertThat(appResourceTable.getResourceId(ResName.qualifyResName(AttributeResource.NULL_VALUE, null, null))).isEqualTo(null);
+    assertThat(appResourceTable.getResourceId(ResName.qualifyResName(ResourceValue.NULL_VALUE, null, null))).isEqualTo(null);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypedArrayTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.res.AttributeResource;
+import org.robolectric.res.ResourceValue;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
@@ -145,7 +145,7 @@ public void getTextArray_shouldReturnValues() throws Exception {
   @Test public void hasValue_withNullValue() throws Exception {
     TypedArray typedArray = context.obtainStyledAttributes(
         Robolectric.buildAttributeSet()
-            .addAttribute(R.attr.items, AttributeResource.NULL_VALUE)
+            .addAttribute(R.attr.items, ResourceValue.NULL_VALUE)
             .build(),
         new int[]{R.attr.items});
     assertThat(typedArray.hasValue(0)).isFalse();

File: robolectric-resources/src/main/java/org/robolectric/res/RawResourceLoader.java
Patch:
@@ -30,8 +30,8 @@ private void loadRawFiles(PackageResourceTable resourceTable, String resourceTyp
     if (files != null) {
       for (FsFile file : files) {
         String fileBaseName = file.getBaseName();
-        resourceTable.addRaw(resourceType, fileBaseName,
-            new TypedResource<>(file, ResType.FILE, new XmlContext(packageName, file)));
+        resourceTable.addValue(resourceType, fileBaseName,
+            new FileTypedResource(file, ResType.FILE, new XmlContext(packageName, file)));
       }
     }
   }

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -745,9 +745,11 @@ public int getIdAttributeResourceValue(int defaultValue) {
   @Override
   public int getStyleAttribute() {
     String attr = getAttribute(null, "style");
-    if (attr == null) {
+    if (attr == null ||
+        (!AttributeResource.isResourceReference(attr) && !AttributeResource.isStyleReference(attr))) {
       return 0;
     }
+
     return getResourceId(attr, packageName, "style");
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -745,9 +745,11 @@ public int getIdAttributeResourceValue(int defaultValue) {
   @Override
   public int getStyleAttribute() {
     String attr = getAttribute(null, "style");
-    if (attr == null) {
+    if (attr == null ||
+        (!AttributeResource.isResourceReference(attr) && !AttributeResource.isStyleReference(attr))) {
       return 0;
     }
+
     return getResourceId(attr, packageName, "style");
   }
 

File: robolectric/src/main/java/org/robolectric/ConfigMerger.java
Patch:
@@ -91,7 +91,8 @@ protected Properties getConfigProperties(String packageName) {
 
   @NotNull @VisibleForTesting
   List<String> packageHierarchyOf(Class<?> javaClass) {
-    String testPackageName = javaClass.getPackage().getName();
+    Package aPackage = javaClass.getPackage();
+    String testPackageName = aPackage == null ? "" : aPackage.getName();
     List<String> packageHierarchy = new ArrayList<>();
     while (!testPackageName.isEmpty()) {
       packageHierarchy.add(testPackageName);

File: robolectric/src/main/java/org/robolectric/internal/bytecode/InstrumentingClassLoader.java
Patch:
@@ -386,7 +386,9 @@ public void instrument() {
         }
       }
 
-      classNode.fields.add(0, new FieldNode(ACC_PUBLIC, ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_DESC, OBJECT_DESC, null));
+      classNode.fields.add(0, new FieldNode(ACC_PUBLIC | ACC_FINAL,
+          ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_DESC, OBJECT_DESC, null));
+
 
       // If there is no constructor, adds one
       if (!foundMethods.contains("<init>()V")) {

File: robolectric/src/main/java/org/robolectric/internal/bytecode/InstrumentingClassLoader.java
Patch:
@@ -386,7 +386,9 @@ public void instrument() {
         }
       }
 
-      classNode.fields.add(0, new FieldNode(ACC_PUBLIC, ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_DESC, OBJECT_DESC, null));
+      classNode.fields.add(0, new FieldNode(ACC_PUBLIC | ACC_FINAL,
+          ShadowConstants.CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_DESC, OBJECT_DESC, null));
+
 
       // If there is no constructor, adds one
       if (!foundMethods.contains("<init>()V")) {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -225,8 +225,9 @@ protected List<FrameworkMethod> getChildren() {
           last.dontIncludeApiLevelInName();
         }
       } catch (IllegalArgumentException e) {
-        throw new RuntimeException("failed to configure " +
-            getTestClass().getName() + "." + frameworkMethod.getMethod().getName(), e);
+        throw new IllegalArgumentException("failed to configure " +
+            getTestClass().getName() + "." + frameworkMethod.getMethod().getName() +
+            ": " + e.getMessage(), e);
       }
     }
     return children;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerMultiApiTest.java
Patch:
@@ -73,7 +73,7 @@ public void withConfigSdkAndMinMax_shouldUseMinMax() throws Throwable {
       runner.getChildren();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).isEqualTo("sdk and minSdk/maxSdk may not be specified together" +
+      assertThat(e.getMessage()).contains("sdk and minSdk/maxSdk may not be specified together" +
           " (sdk=[16], minSdk=19, maxSdk=21)");
     }
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowNotification.java
Patch:
@@ -98,8 +98,8 @@ public boolean isWhenShown() {
   }
 
   /**
-   * These methods do not work on API > {@link Build#VERSION_CODES#N}
-   * Use {@link #isIndeterminate()}, {@link #getMax()} ()}, {@link #getProgress()} ()} instead.
+   * This method does not work on API > {@link Build.VERSION_CODES#N}
+   * @deprecated Use {@link #isIndeterminate()}, {@link #getMax()} ()}, {@link #getProgress()} ()} instead.
    */
   @Deprecated
   public ProgressBar getProgressBar() {

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceMerger.java
Patch:
@@ -7,7 +7,7 @@
 
 public class  ResourceMerger {
   @NotNull
-  public static ResourceTable buildResourceTable(AndroidManifest appManifest) {
+  public static PackageResourceTable buildResourceTable(AndroidManifest appManifest) {
     List<ResourcePath> allResourcePaths = appManifest.getIncludedResourcePaths();
     ResourceRemapper resourceRemapper = null;
     for (ResourcePath resourcePath : allResourcePaths) {
@@ -18,7 +18,7 @@ public static ResourceTable buildResourceTable(AndroidManifest appManifest) {
       }
     }
 
-    ResourceTable resourceTable = ResourceTableFactory.newResourceTable(appManifest.getPackageName(),
+    PackageResourceTable resourceTable = ResourceTableFactory.newResourceTable(appManifest.getPackageName(),
         allResourcePaths.toArray(new ResourcePath[allResourcePaths.size()]));
 
     for (ResourcePath resourcePath : allResourcePaths) {

File: robolectric-resources/src/main/java/org/robolectric/shadows/ResourceHelper.java
Patch:
@@ -86,7 +86,7 @@ public static int getColor(String value) {
   }
 
   public static int getInternalResourceId(String idName) {
-    return RuntimeEnvironment.getSystemResourceProvider().getResourceId(new ResName("android", "id", idName));
+    return RuntimeEnvironment.getSystemResourceTable().getResourceId(new ResName("android", "id", idName));
   }
 
   // ------- TypedValue stuff

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -196,11 +196,11 @@ private void convertAndFill(AttributeResource attribute, TypedValue outValue, St
   }
 
   public void __constructor__() {
-    resourceTable = RuntimeEnvironment.getAppResourceProvider();
+    resourceTable = RuntimeEnvironment.getAppResourceTable();
   }
 
   public void __constructor__(boolean isSystem) {
-    resourceTable = isSystem ? RuntimeEnvironment.getSystemResourceProvider() : RuntimeEnvironment.getAppResourceProvider();
+    resourceTable = isSystem ? RuntimeEnvironment.getSystemResourceTable() : RuntimeEnvironment.getAppResourceTable();
   }
 
   public ResourceTable getResourceTable() {
@@ -381,7 +381,7 @@ public XmlResourceParser loadXmlResourceParser(int resId, String type) throws Re
       throw new Resources.NotFoundException(resName.getFullyQualifiedName());
     }
 
-    ResourceTable resourceProvider = ResourceIds.isFrameworkResource(resId) ? RuntimeEnvironment.getSystemResourceProvider() : RuntimeEnvironment.getCompiletimeResourceProvider();
+    ResourceTable resourceProvider = ResourceIds.isFrameworkResource(resId) ? RuntimeEnvironment.getSystemResourceTable() : RuntimeEnvironment.getCompileTimeResourceTable();
 
     return getXmlResourceParser(resourceProvider, block, resName.packageName);
   }

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -126,7 +126,7 @@ public static AttributeSetBuilder buildAttributeSet() {
     } catch (ParserConfigurationException e) {
       throw new RuntimeException(e);
     }
-    return new AttributeSetBuilder(document, RuntimeEnvironment.getCompileTimeResourceProvider());
+    return new AttributeSetBuilder(document, RuntimeEnvironment.getCompileTimeResourceTable());
   }
 
   public static class AttributeSetBuilder {

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -49,7 +49,7 @@ private void setUpApplicationState(Config defaultConfig) {
         new AndroidManifest(null, null, null, "package"), defaultConfig,
         sdkResourceProvider,
         routingResourceTable,
-        RuntimeEnvironment.getSystemResourceProvider());
+        RuntimeEnvironment.getSystemResourceTable());
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldInitializeAndBindApplicationButNotCallOnCreate() {
       .isNotNull()
       .isInstanceOf(MyTestApplication.class);
     assertThat(((MyTestApplication) RuntimeEnvironment.application).onCreateWasCalled).as("onCreate called").isTrue();
-    assertThat(RuntimeEnvironment.getAppResourceProvider()).as("Application resource loader").isNotNull();
+    assertThat(RuntimeEnvironment.getAppResourceTable()).as("Application resource loader").isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -57,7 +57,7 @@ private void checkForPollutionHelper() {
 
   @Test
   public void shouldMakeInternalResourcesAvailable() throws Exception {
-    ResourceTable resourceProvider = RuntimeEnvironment.getSystemResourceProvider();
+    ResourceTable resourceProvider = RuntimeEnvironment.getSystemResourceTable();
     ResName internalResource = new ResName("android", "string", "badPin");
     Integer resId = resourceProvider.getResourceId(internalResource);
     assertThat(resId).isNotNull();

File: robolectric-resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -17,7 +17,7 @@
 import com.google.common.base.Preconditions;
 import org.jetbrains.annotations.Nullable;
 import org.robolectric.res.FsFile;
-import org.robolectric.res.ResourceLoader;
+import org.robolectric.res.ResourceProvider;
 import org.robolectric.res.ResourcePath;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
@@ -411,7 +411,7 @@ private IntentFilterData parseIntentFilterData(final Node intentFilterNode, Inte
    * a resource index for initialising the resource attributes in all the metadata elements
    * @param resLoader used for getting resource IDs from string identifiers
    */
-  public void initMetaData(ResourceLoader resLoader) {
+  public void initMetaData(ResourceProvider resLoader) {
     if (!packageNameIsOverridden()) {
       // packageName needs to be resolved
       parseAndroidManifest();
@@ -553,7 +553,7 @@ public Map<String, Object> getApplicationMetaData() {
   }
 
   public ResourcePath getResourcePath() {
-    return new ResourcePath(getRClass(), getPackageName(), resDirectory, assetsDirectory);
+    return new ResourcePath(getRClass(), resDirectory, assetsDirectory);
   }
 
   public List<ResourcePath> getIncludedResourcePaths() {

File: robolectric-resources/src/main/java/org/robolectric/manifest/MetaData.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.res.Resources;
 import org.robolectric.res.ResName;
 import org.robolectric.res.ResourceIndex;
-import org.robolectric.res.ResourceLoader;
+import org.robolectric.res.ResourceProvider;
 import org.robolectric.res.TypedResource;
 import org.robolectric.shadows.ResourceHelper;
 import org.w3c.dom.NamedNodeMap;
@@ -35,7 +35,7 @@ public MetaData(List<Node> nodes) {
     }
   }
 
-  public void init(ResourceLoader resLoader, String packageName) {
+  public void init(ResourceProvider resLoader, String packageName) {
     ResourceIndex resIndex = resLoader.getResourceIndex();
 
     if (!initialised) {

File: robolectric-resources/src/main/java/org/robolectric/res/AttrResourceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import javax.xml.xpath.XPathExpressionException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -13,8 +12,7 @@ public AttrResourceLoader(ResBunch resBunch) {
   }
 
   @Override
-  protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
-      throws XPathExpressionException {
+  protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) {
     String format = xmlNode.getAttrValue("format");
     String childFormat = null;
     List<AttrData.Pair> pairs = null;

File: robolectric-resources/src/main/java/org/robolectric/res/ColorResourceLoader.java
Patch:
@@ -1,7 +1,5 @@
 package org.robolectric.res;
 
-import javax.xml.xpath.XPathExpressionException;
-
 public class ColorResourceLoader extends XpathResourceXmlLoader {
   private final ResBunch data;
 
@@ -11,7 +9,7 @@ public ColorResourceLoader(ResBunch data) {
   }
 
   @Override
-  protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
+  protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) {
     TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST, xmlContext);
     data.put("color", xmlContext.getXmlFile().getBaseName(), value);
   }

File: robolectric-resources/src/main/java/org/robolectric/res/OpaqueFileLoader.java
Patch:
@@ -16,7 +16,7 @@ public OpaqueFileLoader(ResBunch resBunch, String attrType, ResType resType) {
   }
 
   @Override
-  protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
+  protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) {
     resBunch.put(attrType, xmlFile.getBaseName(), new FileTypedResource(xmlFile, resType, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/PluralResourceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import javax.xml.xpath.XPathExpressionException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -12,7 +11,7 @@ public PluralResourceLoader(ResBunch resBunch) {
     this.resBunch = resBunch;
   }
 
-  @Override protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
+  @Override protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) {
     List<Plural> rules = new ArrayList<>();
     for (XmlNode item : xmlNode.selectElements("item")) {
       String value = item.getTextContent();

File: robolectric-resources/src/main/java/org/robolectric/res/XmlBlockLoader.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.res.XmlResourceParser;
 import org.robolectric.res.builder.XmlBlock;
-import org.w3c.dom.Document;
 
 /**
  * Loader for xml property files.
@@ -21,8 +20,8 @@ public XmlBlockLoader(ResBundle resBundle, String attrType) {
   }
 
   @Override
-  protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
-    XmlBlock block = XmlBlock.create(parse(xmlFile), xmlFile.getPath(), xmlContext.packageName);
+  protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) {
+    XmlBlock block = XmlBlock.create(parse(xmlFile), xmlFile.getPath(), xmlContext.getPackageName());
     resBundle.put(attrType, xmlFile.getBaseName(), new TypedResource<>(block, null, xmlContext));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -107,7 +107,7 @@ public String getQuantityString(int id, int quantity, Object... formatArgs) thro
   public String getQuantityString(int resId, int quantity) throws Resources.NotFoundException {
     ShadowAssetManager shadowAssetManager = shadowOf(realResources.getAssets());
 
-    TypedResource typedResource = shadowAssetManager.getResourceLoader().getValue(resId, RuntimeEnvironment.getQualifiers());
+    TypedResource typedResource = shadowAssetManager.getResourceProvider().getValue(resId, RuntimeEnvironment.getQualifiers());
     if (typedResource != null && typedResource instanceof PluralResourceLoader.PluralRules) {
       PluralResourceLoader.PluralRules pluralRules = (PluralResourceLoader.PluralRules) typedResource;
       Plural plural = pluralRules.find(quantity);
@@ -127,7 +127,7 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
 
   @Implementation
   public InputStream openRawResource(int id) throws Resources.NotFoundException {
-    return shadowOf(realResources.getAssets()).getResourceLoader().getRawValue(id, RuntimeEnvironment.getQualifiers());
+    return shadowOf(realResources.getAssets()).getResourceProvider().getRawValue(id, RuntimeEnvironment.getQualifiers());
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResourcesImpl.java
Patch:
@@ -91,7 +91,7 @@ public String getQuantityString(int id, int quantity, Object... formatArgs) thro
   public String getQuantityString(int resId, int quantity) throws Resources.NotFoundException {
     ShadowAssetManager shadowAssetManager = shadowOf(realResourcesImpl.getAssets());
 
-    TypedResource typedResource = shadowAssetManager.getResourceLoader().getValue(resId, RuntimeEnvironment.getQualifiers());
+    TypedResource typedResource = shadowAssetManager.getResourceProvider().getValue(resId, RuntimeEnvironment.getQualifiers());
     if (typedResource != null && typedResource instanceof PluralResourceLoader.PluralRules) {
       PluralResourceLoader.PluralRules pluralRules = (PluralResourceLoader.PluralRules) typedResource;
       Plural plural = pluralRules.find(quantity);
@@ -110,7 +110,7 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
 
   @Implementation
   public InputStream openRawResource(int id) throws Resources.NotFoundException {
-    return shadowOf(realResourcesImpl.getAssets()).getResourceLoader().getRawValue(id, RuntimeEnvironment.getQualifiers());
+    return shadowOf(realResourcesImpl.getAssets()).getResourceProvider().getRawValue(id, RuntimeEnvironment.getQualifiers());
   }
 
   @Implementation

File: robolectric/src/main/java/org/robolectric/ParameterizedRobolectricTestRunner.java
Patch:
@@ -12,7 +12,6 @@
 import org.robolectric.internal.DeepCloner;
 import org.robolectric.internal.SdkEnvironment;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.res.EmptyResourceLoader;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: robolectric/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.internal.bytecode;
 
-import android.R;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -18,7 +17,7 @@
 import org.robolectric.internal.fakes.RoboExtendedResponseCache;
 import org.robolectric.internal.fakes.RoboResponseSource;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.res.ResourceLoader;
+import org.robolectric.res.ResourceProvider;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.res.builder.XmlBlock;
 import org.robolectric.util.TempDirectory;
@@ -110,7 +109,7 @@ public InstrumentationConfiguration build() {
           RobolectricTestRunner.class,
           RobolectricTestRunner.HelperTestRunner.class,
           ResourcePath.class,
-          ResourceLoader.class,
+          ResourceProvider.class,
           XmlBlock.class,
           ClassHandler.class,
           ClassHandler.Plan.class,

File: robolectric/src/test/java/org/robolectric/AttributeSetBuilderTest.java
Patch:
@@ -246,7 +246,7 @@ public void getStyleAttribute_whenStyleIsBogus() throws Exception {
         .setStyleAttribute("@style/non_existent_style")
         .build();
 
-    assertThat(roboAttributeSet.getStyleAttribute()).isNotEqualTo(0);
+    assertThat(roboAttributeSet.getStyleAttribute()).isEqualTo(0);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldInitializeAndBindApplicationButNotCallOnCreate() {
       .isNotNull()
       .isInstanceOf(MyTestApplication.class);
     assertThat(((MyTestApplication) RuntimeEnvironment.application).onCreateWasCalled).as("onCreate called").isTrue();
-    assertThat(RuntimeEnvironment.getAppResourceLoader()).as("Application resource loader").isNotNull();
+    assertThat(RuntimeEnvironment.getAppResourceProvider()).as("Application resource loader").isNotNull();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -220,7 +220,6 @@ public void shouldTolerateMissingRFile() throws Exception {
     AndroidManifest appManifest = new AndroidManifest(resourceFile("TestAndroidManifestWithNoRFile.xml"), resourceFile("res"), resourceFile("assets"));
     assertEquals(appManifest.getPackageName(), "org.no.resources.for.me");
     assertThat(appManifest.getRClass()).isNull();
-    assertEquals(appManifest.getResourcePath().getPackageName(), "org.no.resources.for.me");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/PluralResourceLoaderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.robolectric.R;
 import org.robolectric.util.TestUtil;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -15,7 +16,7 @@ public void setUp() throws Exception {
     resBunch = new ResBunch();
     PluralResourceLoader pluralResourceLoader = new PluralResourceLoader(resBunch);
 
-    new DocumentLoader(testResources()).load("values", pluralResourceLoader);
+    new DocumentLoader(R.class.getPackage().getName(), testResources()).load("values", pluralResourceLoader);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -57,11 +57,11 @@ private void checkForPollutionHelper() {
 
   @Test
   public void shouldMakeInternalResourcesAvailable() throws Exception {
-    ResourceLoader resourceLoader = RuntimeEnvironment.getSystemResourceLoader();
+    ResourceProvider resourceProvider = RuntimeEnvironment.getSystemResourceProvider();
     ResName internalResource = new ResName("android", "string", "badPin");
-    Integer resId = resourceLoader.getResourceIndex().getResourceId(internalResource);
+    Integer resId = resourceProvider.getResourceIndex().getResourceId(internalResource);
     assertThat(resId).isNotNull();
-    assertThat(resourceLoader.getResourceIndex().getResName(resId)).isEqualTo(internalResource);
+    assertThat(resourceProvider.getResourceIndex().getResName(resId)).isEqualTo(internalResource);
 
     Class<?> internalRIdClass = Robolectric.class.getClassLoader().loadClass("com.android.internal.R$" + internalResource.type);
     int internalResourceId;

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -361,19 +361,19 @@ public void shouldReadIntentFilterWithData() {
 
 
     assertThat(intentFilterData.getSchemes().get(0)).isEqualTo("content");
-    assertThat(intentFilterData.getPaths().get(0).toString()).isEqualTo("/testPath");
+    assertThat(intentFilterData.getPaths().get(0)).isEqualTo("/testPath/test.jpeg");
     assertThat(intentFilterData.getMimeTypes().get(0)).isEqualTo("video/mpeg");
     assertThat(intentFilterData.getAuthorities().get(0).getHost()).isEqualTo("testhost1.com");
     assertThat(intentFilterData.getAuthorities().get(0).getPort()).isEqualTo("1");
 
     assertThat(intentFilterData.getSchemes().get(1)).isEqualTo("http");
-    assertThat(intentFilterData.getPathPrefixes().get(0).toString()).isEqualTo("/testPrefix");
+    assertThat(intentFilterData.getPathPrefixes().get(0)).isEqualTo("/testPrefix");
     assertThat(intentFilterData.getMimeTypes().get(1)).isEqualTo("image/jpeg");
     assertThat(intentFilterData.getAuthorities().get(1).getHost()).isEqualTo("testhost2.com");
     assertThat(intentFilterData.getAuthorities().get(1).getPort()).isEqualTo("2");
 
     assertThat(intentFilterData.getSchemes().get(2)).isEqualTo("https");
-    assertThat(intentFilterData.getPathPatterns().get(0).toString()).isEqualTo("/.*testPattern");
+    assertThat(intentFilterData.getPathPatterns().get(0)).isEqualTo("/.*testPattern");
     assertThat(intentFilterData.getMimeTypes().get(2)).isEqualTo("image/*");
     assertThat(intentFilterData.getAuthorities().get(2).getHost()).isEqualTo("testhost3.com");
     assertThat(intentFilterData.getAuthorities().get(2).getPort()).isEqualTo("3");

File: robolectric/src/main/java/org/robolectric/SdkPicker.java
Patch:
@@ -49,13 +49,11 @@ public SdkPicker(Collection<SdkConfig> supportedSdks, Properties properties) {
    */
   @NotNull
   public List<SdkConfig> selectSdks(Config config, AndroidManifest appManifest) {
-    Set<SdkConfig> sdks = new TreeSet<>(supportedSdks);
+    Set<SdkConfig> sdks = new TreeSet<>(configuredSdks(config, appManifest));
     Set<SdkConfig> enabledSdks = enumerateEnabledSdks();
     if (enabledSdks != null) {
       sdks = Sets.intersection(sdks, enabledSdks);
     }
-    sdks = Sets.intersection(sdks, configuredSdks(config, appManifest));
-
     return Lists.newArrayList(sdks);
   }
 

File: robolectric/src/main/java/org/robolectric/SdkPicker.java
Patch:
@@ -49,13 +49,11 @@ public SdkPicker(Collection<SdkConfig> supportedSdks, Properties properties) {
    */
   @NotNull
   public List<SdkConfig> selectSdks(Config config, AndroidManifest appManifest) {
-    Set<SdkConfig> sdks = new TreeSet<>(supportedSdks);
+    Set<SdkConfig> sdks = new TreeSet<>(configuredSdks(config, appManifest));
     Set<SdkConfig> enabledSdks = enumerateEnabledSdks();
     if (enabledSdks != null) {
       sdks = Sets.intersection(sdks, enabledSdks);
     }
-    sdks = Sets.intersection(sdks, configuredSdks(config, appManifest));
-
     return Lists.newArrayList(sdks);
   }
 

File: robolectric/src/test/java/org/robolectric/AttributeSetBuilderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric;
 
-import android.content.res.Resources;
 import android.util.AttributeSet;
 import org.junit.Rule;
 import org.junit.Test;
@@ -14,7 +13,7 @@
 /**
  * Tests for {@link Robolectric#buildAttributeSet()}
  */
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class AttributeSetBuilderTest {
 
   private static final String ANDROID_NS = "http://schemas.android.com/apk/res/android";

File: robolectric/src/test/java/org/robolectric/IncludedDependenciesTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class IncludedDependenciesTest {
   @Test
   public void jsonShouldWork() throws Exception {

File: robolectric/src/test/java/org/robolectric/InvokeDynamicTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class InvokeDynamicTest {
   @Test
   @Config(shadows = {DoNothingShadow.class})

File: robolectric/src/test/java/org/robolectric/LibraryHandlingTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.List;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class LibraryHandlingTest {
   private final Resources resources = RuntimeEnvironment.application.getResources();
 

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ParallelUniverseTest {
 
   private ParallelUniverse pu;

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @Config(qualifiers = "en")
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class QualifiersTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -42,7 +42,7 @@
 import static org.mockito.Mockito.mock;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RobolectricTest {
 
   private PrintStream originalSystemOut;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerClassLoaderConfigTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.bytecode.InstrumentingClassLoader;
 import org.robolectric.test.DummyClass;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RobolectricTestRunnerClassLoaderConfigTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -117,7 +117,7 @@ public static void resetStaticState_shouldBeCalled_onMainThread() {
     assertThat(onTerminateCalledFromMain).isTrue();
   }
 
-  public static class RunnerForTesting extends TestRunners.WithDefaults {
+  public static class RunnerForTesting extends TestRunners.SelfTest {
     public static RunnerForTesting instance;
 
     public RunnerForTesting(Class<?> testClass) throws InitializationError {

File: robolectric/src/test/java/org/robolectric/TemporaryBindingsTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class TemporaryBindingsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/annotation/OverrideSdkVersionTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class OverrideSdkVersionTest {
   @Test
   public void whenNotOverridden_shouldUseTargetSdkVersionFromAppManifest() {

File: robolectric/src/test/java/org/robolectric/fakes/RoboAttributeSetTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboAttributeSetTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/fakes/RoboCursorTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboCursorTest {
   private final Uri uri = Uri.parse("http://foo");
   private final RoboCursor cursor = new RoboCursor();

File: robolectric/src/test/java/org/robolectric/fakes/RoboMenuItemTest.java
Patch:
@@ -9,11 +9,10 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.fakes.RoboMenuItem;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboMenuItemTest {
   private MenuItem item;
   private TestOnActionExpandListener listener;

File: robolectric/src/test/java/org/robolectric/fakes/RoboSharedPreferencesTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.fakes;
 
 import android.content.SharedPreferences;
-import org.robolectric.fakes.RoboSharedPreferences;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,7 +16,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboSharedPreferencesTest {
   protected final static String FILENAME = "filename";
   private HashMap<String, Map<String, Object>> content;

File: robolectric/src/test/java/org/robolectric/fakes/RoboVibratorTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.fakes;
 
 import android.content.Context;
-import org.robolectric.fakes.RoboVibrator;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -10,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboVibratorTest {
   private RoboVibrator vibrator;
 

File: robolectric/src/test/java/org/robolectric/fakes/RoboWebSettingsTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @DoNotInstrument
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboWebSettingsTest {
   private final RoboWebSettings webSettings = new RoboWebSettings();
   private static final boolean[] TRUE_AND_FALSE = {true, false};

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ClassicSuperHandlingTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ClassicSuperHandlingTest {
   @Test
   @Config(shadows = {ChildShadow.class, ParentShadow.class, GrandparentShadow.class})

File: robolectric/src/test/java/org/robolectric/internal/bytecode/RealApisTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RealApisTest {
   @Test
   @Config(shadows = {ShimmeryShadowPony.class})

File: robolectric/src/test/java/org/robolectric/internal/bytecode/RobolectricInternalsTest.java
Patch:
@@ -10,12 +10,11 @@
 import org.robolectric.internal.ShadowExtractor;
 import org.robolectric.internal.Shadow;
 import org.robolectric.util.ReflectionHelpers.ClassParameter;
-import org.robolectric.util.ReflectionHelpers.StringParameter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 @Config(shadows={ RobolectricInternalsTest.ShadowConstructors.class })
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RobolectricInternalsTest {
 
   private static final String PARAM1 = "param1";

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowWranglerTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ShadowWranglerTest {
   private String name;
 

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ShadowingTest.java
Patch:
@@ -17,9 +17,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.internal.bytecode.testing.AFinalClass;
-import org.robolectric.internal.bytecode.testing.Foo;
 import org.robolectric.internal.bytecode.testing.Pony;
-import org.robolectric.internal.bytecode.testing.ShadowFoo;
 import org.robolectric.annotation.internal.Instrument;
 import org.robolectric.internal.ShadowConstants;
 import org.robolectric.internal.Shadow;
@@ -33,7 +31,7 @@
 import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.mock;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ShadowingTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/internal/bytecode/StaticInitializerTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.junit.Assert.*;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class StaticInitializerTest {
   @Test
   public void whenClassIsUnshadowed_shouldPerformStaticInitialization() throws Exception {

File: robolectric/src/test/java/org/robolectric/internal/bytecode/ThreadSafetyTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ThreadSafetyTest {
   @Test
   @Config(shadows = {InstrumentedThreadShadow.class})

File: robolectric/src/test/java/org/robolectric/json/JSONArrayTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class JSONArrayTest {
   @Test
   public void testEquality() throws Exception {

File: robolectric/src/test/java/org/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.util.TestUtil.assertInstanceOf;
 
-@RunWith(TestRunners.WithDefaults.class) // todo: @Config(sdk=ALL_SDKS) or something
+@RunWith(TestRunners.SelfTest.class) // todo: @Config(sdk=ALL_SDKS) or something
 public class DrawableResourceLoaderTest {
   private Resources resources;
 

File: robolectric/src/test/java/org/robolectric/res/PreferenceIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class PreferenceIntegrationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import android.preference.PreferenceActivity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.TextView;
@@ -12,12 +11,11 @@
 import org.robolectric.Shadows;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ResourceLoaderTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 abstract public class AdapterViewBehavior {
   private AdapterView adapterView;
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class SQLiteCursorTest {
 
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class SQLiteDatabaseTest {
     private SQLiteDatabase database;
     private List<SQLiteDatabase> openDatabases = new ArrayList<>();

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class SQLiteOpenHelperTest {
 
   private TestOpenHelper helper;

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteQueryBuilderTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class SQLiteQueryBuilderTest {
 
   private static final String TABLE_NAME = "sqlBuilderTest";

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class SQLiteStatementTest {
   private SQLiteDatabase database;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSeekBarTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAbsSeekBarTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerAdapterViewBehaviorTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAbsSpinnerAdapterViewBehaviorTest extends AdapterViewBehavior {
   @Override public AdapterView createAdapterView() {
     return new Gallery(RuntimeEnvironment.application);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsSpinnerTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAbsSpinnerTest {
   private Context context;
   private Spinner spinner;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbsoluteLayoutTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAbsoluteLayoutTest {
   @Test
   public void getLayoutParams_shouldReturnAbsoluteLayoutParams() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAbstractCursorTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAbstractCursorTest {
 
   private TestCursor cursor;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,13 +11,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.annotation.Config;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccessibilityEventTest {
 
   private AccessibilityEvent event;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityManagerTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccessibilityManagerTest {
 
   private AccessibilityManager accessibilityManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -4,7 +4,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import android.R.anim;
 import android.graphics.Rect;
 import android.os.Bundle;
 import android.os.Parcel;
@@ -20,7 +19,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.ShadowExtractor;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccessibilityNodeInfoTest {
 
   private AccessibilityNodeInfo node;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityServiceTest.java
Patch:
@@ -8,13 +8,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
-import org.robolectric.annotation.Config;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccessibilityServiceTest {
   private MyService service ;
   private ShadowAccessibilityService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -9,12 +9,11 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowAccessibilityWindowInfoTest {
   private AccessibilityWindowInfo window;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -11,7 +11,6 @@
 import android.app.Activity;
 import android.app.Application;
 import android.content.Context;
-import android.os.Build;
 import android.os.Bundle;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
@@ -39,7 +38,7 @@
 import static org.assertj.core.api.Assertions.fail;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccountManagerTest {
   Application app;
   AccountManager am;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAccountTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityGroupTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowActivityGroupTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.app.ActivityManager;
 import android.content.ComponentName;
 import android.content.Context;
-import android.os.Build;
 import com.google.android.collect.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -15,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowActivityManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityTest.java
Patch:
@@ -18,7 +18,6 @@
 import android.database.sqlite.SQLiteCursor;
 import android.media.AudioManager;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.Display;
 import android.view.KeyEvent;
@@ -54,7 +53,6 @@
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -71,7 +69,7 @@
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowActivityTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityThreadTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowActivityThreadTest {
     @Test
     public void testTriggersUndeclaredThrowableException() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlarmManagerTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -22,7 +21,7 @@
 import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAlarmManagerTest {
 
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.app.Dialog;
 import android.content.ContextWrapper;
 import android.content.DialogInterface;
-import android.os.Build;
 import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.EditText;
@@ -32,7 +31,7 @@
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAlertDialogTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationSetTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAnimationSetTest {
   final Animation.AnimationListener moveListener = mock(Animation.AnimationListener.class);
   final Animation.AnimationListener spinListener = mock(Animation.AnimationListener.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationUtilsTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAnimationUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAppWidgetHostTest {
   private AppWidgetHost appWidgetHost;
   private ShadowAppWidgetHost shadowAppWidgetHost;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetHostViewTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAppWidgetHostViewTest {
   private AppWidgetHostView appWidgetHostView;
   private ShadowAppWidgetHostView shadowAppWidgetHostView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAppWidgetManagerTest {
   private AppWidgetManager appWidgetManager;
   private ShadowAppWidgetManager shadowAppWidgetManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowApplicationTest.java
Patch:
@@ -51,7 +51,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowApplicationTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowArrayAdapterTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowArrayAdapterTest {
   private ArrayAdapter<Integer> arrayAdapter;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAssetManagerTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.TestUtil.joinPath;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAssetManagerTest {
 
   @Rule

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAsyncTaskTest {
   private Transcript transcript;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioEffectTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAudioEffectTest {
 
   @Test public void queryEffects() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAudioManagerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAudioManagerTest {
   private final AudioManager audioManager = new AudioManager(RuntimeEnvironment.application);
   private final ShadowAudioManager shadowAudioManager = Shadows.shadowOf(audioManager);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowAutoCompleteTextViewTest {
   private final AutoCompleteAdapter adapter = new AutoCompleteAdapter(RuntimeEnvironment.application);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBaseAdapterTest.java
Patch:
@@ -11,7 +11,7 @@
 import static junit.framework.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBaseAdapterTest {
   @Test
   public void shouldRecordNotifyDataSetChanged() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -11,7 +11,7 @@
 import static junit.framework.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBinderTest {
   @Test
   public void transactCallsOnTransact() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapDrawableTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBitmapDrawableTest {
   private final Resources resources = RuntimeEnvironment.application.getResources();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapFactoryTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.robolectric.R;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.shadows.util.DataSource;
 
 import java.io.File;
 import java.io.FileDescriptor;
@@ -22,7 +21,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.util.DataSource.toDataSource;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBitmapFactoryTest {
   @Test
   public void decodeResource_shouldSetDescriptionAndCreatedFrom() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapRegionDecoderTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBitmapRegionDecoderTest {
 
   private static final FsFile IMAGE_FILE = TestUtil.resourcesBaseDir().join("res/drawable-hdpi/robolectric.png");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBitmapTest {
   @Test
   public void shouldCreateScaledBitmap() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothAdapterTest.java
Patch:
@@ -3,7 +3,6 @@
 
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
-import android.os.Build;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -17,7 +16,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBluetoothAdapterTest {
   private BluetoothAdapter bluetoothAdapter;
   private ShadowBluetoothAdapter shadowBluetoothAdapter;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBluetoothManagerTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothManager;
 import android.content.Context;
-import android.os.Build;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
@@ -13,7 +12,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowBluetoothManagerTest {
     private final BluetoothManager manager = (BluetoothManager) RuntimeEnvironment.application.getSystemService(Context.BLUETOOTH_SERVICE);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBroadcastPendingResultTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBroadcastPendingResultTest {
   @Test
   public void testCreate() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBundleTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowBundleTest {
   private final Bundle bundle = new Bundle();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraParametersTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCameraParametersTest {
 
   private Camera.Parameters parameters;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraSizeTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCameraSizeTest {
 
   private Camera.Size cameraSize;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCameraTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Fail.fail;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCameraTest {
 
   private Camera camera;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCanvasTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowPath.Point.Type.LINE_TO;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCanvasTest {
   private Bitmap targetBitmap;
   private Bitmap imageBitmap;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckBoxTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCheckBoxTest {
   @Test
   public void testWorks() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCheckedTextViewTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCheckedTextViewTest {
 
   private CheckedTextView checkedTextView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowChoreographerTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.view.Choreographer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mockito;
 import org.robolectric.TestRunners;
 import org.robolectric.util.TimeUtils;
 
@@ -13,7 +12,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowChoreographerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowClipboardManagerTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowClipboardManagerTest {
 
   private ClipboardManager clipboardManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowColorTest.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Color;
 import static org.assertj.core.api.Assertions.*;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowColorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConfigurationTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowConfigurationTest {
 
   private Configuration configuration;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowConnectivityManagerTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.net.Network;
 import android.net.NetworkInfo;
 import android.net.NetworkRequest;
-import android.os.Build;
 import android.telephony.TelephonyManager;
 import org.junit.Before;
 import org.junit.Test;
@@ -21,7 +20,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowConnectivityManagerTest {
   private ConnectivityManager connectivityManager;
   private ShadowNetworkInfo shadowOfActiveNetworkInfo;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentObserverTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentObserverTest {
 
   private TestContentObserver observer;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderClientTest.java
Patch:
@@ -6,7 +6,6 @@
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.CancellationSignal;
 import org.junit.Before;
@@ -26,7 +25,7 @@
 import static org.mockito.MockitoAnnotations.initMocks;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentProviderClientTest {
 
   static final String AUTHORITY = "org.robolectric";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationBuilderTest.java
Patch:
@@ -13,7 +13,7 @@
 import android.database.Cursor;
 import android.net.Uri;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentProviderOperationBuilderTest {
   private Builder builder;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderOperationTest.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Tests for {@link ShadowContentProviderOperation}.
  */
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentProviderOperationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderResultTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentProviderResultTest {
   @Test
   public void count() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentProviderTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentProviderTest {
   @Config(minSdk = KITKAT)
   @Test public void testSetCallingPackage() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -19,7 +19,6 @@
 import android.database.Cursor;
 import android.database.MatrixCursor;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.CancellationSignal;
 import android.os.Handler;
@@ -33,7 +32,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.annotation.Config;
 import org.robolectric.fakes.BaseCursor;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.manifest.ContentProviderData;
@@ -57,7 +55,7 @@
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentResolverTest {
   static final String AUTHORITY = "org.robolectric";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentUrisTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentUrisTest {
   Uri URI;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentValuesTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContentValuesTest {
   private static final String KEY = "key";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -6,7 +6,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentSender;
-import android.os.Build;
 import android.view.LayoutInflater;
 import android.widget.FrameLayout;
 import android.widget.RemoteViews;
@@ -22,7 +21,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContextImplTest {
   private final Context context = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContextTest {
   private final Context context = RuntimeEnvironment.application;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextWrapperTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.app.Activity;
-import android.app.Application;
 import android.appwidget.AppWidgetProvider;
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -40,7 +39,7 @@
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowContextWrapperTest {
   public Transcript transcript;
   private ContextWrapper contextWrapper;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCookieManagerTest.java
Patch:
@@ -4,11 +4,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
-import org.robolectric.internal.Shadow;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCookieManagerTest {
   private final String url = "robolectric.org/";
   private final String httpUrl = "http://robolectric.org/";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCornerPathEffectTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCornerPathEffectTest {
   @Test
   public void shouldGetRadius() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCountDownTimerTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCountDownTimerTest {
 
   private ShadowCountDownTimer shadowCountDownTimer;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorAdapterTest.java
Patch:
@@ -20,7 +20,7 @@
 import static android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCursorAdapterTest {
 
   private Cursor curs;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWindowTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCursorWindowTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowCursorWrapperTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowCursorWrapperTest {
 
   private class ForwardVerifier {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDatabaseUtilsTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDatabaseUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateFormatTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDateFormatTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateIntervalFormatTest.java
Patch:
@@ -4,7 +4,6 @@
 import android.icu.text.SimpleDateFormat;
 import android.icu.util.TimeZone;
 import android.icu.util.ULocale;
-import android.os.Build;
 import android.text.format.DateUtils;
 import libcore.icu.DateIntervalFormat;
 import org.junit.Test;
@@ -19,7 +18,7 @@
 import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = M)
 public class ShadowDateIntervalFormatTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.text.format.DateUtils;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
@@ -16,7 +14,7 @@
 import static android.os.Build.VERSION_CODES.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDateUtilsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDebugTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.Debug;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -10,7 +9,7 @@
 import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDebugTest {
   @Test
   public void initNoCrash() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogPreferenceTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDialogPreferenceTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.graphics.Point;
 import android.graphics.Rect;
-import android.os.Build;
 import android.util.DisplayMetrics;
 import android.view.Display;
 import org.junit.Test;
@@ -15,7 +14,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDisplayTest {
   @Test
   public void shouldProvideDisplayMetrics() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDownloadManagerTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.shadows.ShadowDownloadManager.ShadowRequest;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDownloadManagerTest {
 
   private final Uri uri = Uri.parse("http://example.com/foo.mp4");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowDrawableTest {
   @Test
   public void createFromStream__shouldReturnNullWhenAskedToCreateADrawableFromACorruptedSourceStream() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextPreferenceTest.java
Patch:
@@ -13,7 +13,7 @@
 import static junit.framework.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowEditTextPreferenceTest {
 
   private static final String SOME_TEXT = "some text";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.RuntimeEnvironment.application;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowEditTextTest {
   private EditText editText;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEnvironmentTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.Environment;
 import org.junit.After;
 import org.junit.Test;
@@ -16,7 +15,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowEnvironmentTest {
 
   @After

File: robolectric/src/test/java/org/robolectric/shadows/ShadowExpandableListViewTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowExpandableListViewTest {
 
   private ExpandableListView expandableListView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFilterTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowFilterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowFrameLayoutTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowFrameLayoutTest {
 
   private FrameLayout frameLayout;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGestureDetectorTest.java
Patch:
@@ -13,7 +13,7 @@
 import static junit.framework.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowGestureDetectorTest {
 
   private GestureDetector detector;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowGradientDrawableTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowGradientDrawableTest {
   @Test
   public void testGetColor_returnsColor() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowHandlerTest {
   private Transcript transcript;
   TestRunnable scratchRunnable = new TestRunnable();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerThreadTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowHandlerThreadTest {
 
   private HandlerThread handlerThread;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHtmlTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowHtmlTest {
   private Context context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHttpResponseCacheTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowHttpResponseCacheTest {
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowICUTest.java
Patch:
@@ -15,7 +15,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowICUTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIconTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = M)
 public class ShadowIconTest {
   public static final int TYPE_BITMAP = 1;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowImageViewTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowImageViewTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputDeviceTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowInputDeviceTest {
   @Test
   public void canConstructInputDeviceWithName() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputEventTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowInputEventTest {
   @Test
   public void canSetInputDeviceOnKeyEvent() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowInputMethodManagerTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowInputMethodManagerTest {
 
   private InputMethodManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterAuthorityEntryTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowIntentFilterAuthorityEntryTest {
   @Test(expected = NumberFormatException.class)
   public void constructor_shouldThrowAnExceptionIfPortIsNotAValidNumber() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowIntentFilterTest {
   @Test
   public void copyConstructorTest() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentServiceTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowIntentServiceTest {
   @Test
   public void shouldSetIntentRedelivery() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Arrays;
 import java.util.Set;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowIntentTest {
   private static final String TEST_ACTIVITY_CLASS_NAME = "org.robolectric.shadows.TestActivity";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJobSchedulerTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowJobSchedulerTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsPromptResultTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.junit.Assert.assertNotNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowJsPromptResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsResultTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowJsResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowJsonReaderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowJsonReaderTest {
   @Test public void shouldWork() throws Exception {
     JsonReader jsonReader = new JsonReader(new StringReader("{\"abc\": \"def\"}"));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyCharacterMapTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowKeyCharacterMapTest {
   private final KeyCharacterMap keyMap = ShadowKeyCharacterMap.load(0);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.app.KeyguardManager;
-import android.os.Build;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -17,7 +16,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowKeyguardManagerTest {
 
   private KeyguardManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayerDrawableTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLayerDrawableTest {
   /**
    * drawables

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutAnimationControllerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLayoutAnimationControllerTest {
   private ShadowLayoutAnimationController shadow;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.*;
@@ -43,7 +42,7 @@
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 import static org.robolectric.util.TestUtil.assertInstanceOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLayoutInflaterTest {
   private Activity context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutParamsTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLayoutParamsTest {
   @Test
   public void testConstructor() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinearLayoutTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertSame;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLinearLayoutTest {
   private LinearLayout linearLayout;
   private ShadowLinearLayout shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLinkMovementMethodTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLinkMovementMethodTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPopupWindowTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowListPopupWindowTest {
   @Test
   public void show_setsLastListPopupWindow() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListPreferenceTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowListPreferenceTest {
 
   private ListPreference listPreference;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewAdapterViewBehaviorTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowListViewAdapterViewBehaviorTest extends AdapterViewBehavior {
   @Override public AdapterView createAdapterView() {
     return new ListView(RuntimeEnvironment.application);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowListViewTest.java
Patch:
@@ -29,7 +29,7 @@
 import android.widget.LinearLayout;
 import android.widget.ListView;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowListViewTest {
 
   private Transcript transcript;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocaleDataTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
-
 import java.util.Locale;
 import libcore.icu.LocaleData;
 import org.junit.Test;
@@ -12,7 +10,7 @@
 import static android.os.Build.VERSION_CODES.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLocaleDataTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationManagerTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertSame;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLocationManagerTest {
   private LocationManager locationManager;
   private ShadowLocationManager shadowLocationManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLocationTest.java
Patch:
@@ -11,7 +11,7 @@
 import static junit.framework.Assert.*;
 import static org.junit.Assert.assertArrayEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLocationTest {
 
   private Location location;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLogTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLogTest {
   @Test
   public void d_shouldLogAppropriately() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLooperTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLooperTest {
 
   // testName is used when creating background threads. Makes it

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLruTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowLruTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMarginLayoutParamsTest.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * {@link org.robolectric.shadows.ShadowViewGroup.ShadowMarginLayoutParams} test suite.
  */
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMarginLayoutParamsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMatrixCursorTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMatrixCursorTest {
 
   private MatrixCursor singleColumnSingleNullValueMatrixCursor;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMatrixTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.entry;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMatrixTest {
   private static final float EPSILON = 1e-7f;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaMetadataRetrieverTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.robolectric.shadows.ShadowMediaMetadataRetriever.addMetadata;
 import static org.robolectric.shadows.util.DataSource.toDataSource;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMediaMetadataRetrieverTest {
   private final String path = "/media/foo.mp3";
   private final String path2 = "/media/foo2.mp3";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.robolectric.shadows.ShadowMediaPlayer.State.*;
 import static org.robolectric.shadows.util.DataSource.toDataSource;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMediaPlayerTest {
 
   private static final String DUMMY_SOURCE = "dummy-source";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaRecorderTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMediaRecorderTest {
 
   private MediaRecorder mediaRecorder;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaStoreTest.java
Patch:
@@ -8,7 +8,7 @@
 import static android.provider.MediaStore.Video;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMediaStoreTest {
   @Test
   public void shouldInitializeFields() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMergeCursorTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMergeCursorTest {
 
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageQueueTest.java
Patch:
@@ -9,7 +9,6 @@
 import android.os.Message;
 import android.os.MessageQueue;
 
-import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,7 +20,7 @@
 import static org.robolectric.util.ReflectionHelpers.*;
 import static org.robolectric.util.ReflectionHelpers.ClassParameter.from;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMessageQueueTest {
   private Looper looper;
   private MessageQueue queue;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Message;
@@ -18,7 +17,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMessageTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessengerTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMessengerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMimeTypeMapTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMimeTypeMapTest {
 
   private static final String IMAGE_EXTENSION = "jpg";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMotionEventTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowMotionEventTest {
   private MotionEvent event;
   private ShadowMotionEvent shadowMotionEvent;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkInfoTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNetworkInfoTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.net.Network;
-import android.os.Build;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -12,7 +11,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowNetworkTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNfcAdapterTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.mockito.Mockito.mock;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNfcAdapterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationBuilderTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.Icon;
-import android.os.Build;
 import android.widget.ProgressBar;
 
 import org.junit.Test;
@@ -21,7 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNotificationBuilderTest {
   private final Notification.Builder builder = new Notification.Builder(RuntimeEnvironment.application);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationManagerTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.Assert.assertNull;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNotificationManagerTest {
   private NotificationManager notificationManager;
   private Notification notification1 = new Notification();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNotificationTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNotificationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNumberPickerTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowNumberPickerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowObjectAnimatorTest {
   private final AnimatorTarget target = new AnimatorTarget();
   private final Animator.AnimatorListener listener = mock(Animator.AnimatorListener.class);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOutlineTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowOutlineTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowOverScrollerTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowOverScrollerTest {
   private OverScroller overScroller;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPaintTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPaintTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPairTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPairTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowParcelFileDescriptorTest {
   private File file;
   private File readOnlyFile;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelTest.java
Patch:
@@ -21,7 +21,7 @@
 import android.os.Bundle;
 import android.os.Parcel;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowParcelTest {
 
   private Parcel parcel;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPasswordTransformationMethodTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPasswordTransformationMethodTest {
 
   private PasswordTransformationMethod transformationMethod;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPathTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.robolectric.shadows.ShadowPath.Point.Type.MOVE_TO;
 
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPathTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPendingIntentTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.app.Activity;
-import android.app.Application;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
@@ -15,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPendingIntentTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPictureTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPictureTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPopupMenuTest {
 
   private PopupMenu popupMenu;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPorterDuffColorFilterTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.graphics.Color;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
-import android.os.Build;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -13,7 +12,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowPorterDuffColorFilterTest {
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPowerManagerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.content.Context;
-import android.os.Build;
 import android.os.PowerManager;
 
 import org.junit.Before;
@@ -15,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPowerManagerTest {
   private PowerManager powerManager;
   private ShadowPowerManager shadowPowerManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPreferenceActivityTest {
 
   private TestPreferenceActivity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceActivityTestWithFragment.java
Patch:
@@ -20,7 +20,7 @@
  * trying to access a Context while inflating the Preference objects defined in
  * xml. This class tests that path.
  */
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPreferenceActivityTestWithFragment {
   private TestPreferenceActivity activity = Robolectric.setupActivity(TestPreferenceActivity.class);
   private TestPreferenceFragment fragment;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPreferenceGroupTest.java
Patch:
@@ -11,15 +11,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
-import org.robolectric.fakes.RoboAttributeSet;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowPreferenceGroupTest {
 
   private TestPreferenceGroup group;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProcessTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowProcessTest {
   @Test
   public void shouldBeZeroWhenNotSet() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressBarTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.RuntimeEnvironment.application;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowProgressBarTest {
 
   private int[] testValues = {0, 1, 2, 100};

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressDialogTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowProgressDialogTest {
 
   private ProgressDialog dialog;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioButtonTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRadioButtonTest {
   @Test
   public void canBeExplicitlyChecked() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRadioGroupTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRadioGroupTest {
   private static final int BUTTON_ID = 3245;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRatingBarTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRatingBarTest {
 
   private RatingBar ratingBar;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRectTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRectTest {
   @Before
   public void setUp() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRelativeLayoutTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
@@ -12,10 +11,9 @@
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
-import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRelativeLayoutTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRemoteCallbackListTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowRemoteCallbackListTest {
   @Test
   public void testBasicWiring() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResolveInfoTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowResolveInfoTest {
 
   private ResolveInfo mResolveInfo;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.junit.Assert.fail;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowResourcesTest {
   private Resources resources;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResultReceiverTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowResultReceiverTest {
   @Test
   public void callingSend_shouldCallOverridenOnReceiveResultWithTheSameArguments() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -10,7 +10,6 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatatypeMismatchException;
 import android.database.sqlite.SQLiteStatement;
-import android.os.Build;
 import com.almworks.sqlite4java.SQLiteConnection;
 import org.junit.After;
 import org.junit.Before;
@@ -27,7 +26,7 @@
 import java.util.List;
 import java.util.Map;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = LOLLIPOP)
 public class ShadowSQLiteConnectionTest {
   private SQLiteDatabase database;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScaleGestureDetectorTest.java
Patch:
@@ -11,7 +11,7 @@
 import static junit.framework.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowScaleGestureDetectorTest {
 
   private ScaleGestureDetector detector;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScanResultTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowScanResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollViewTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static junit.framework.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowScrollViewTest {
   @Test
   public void shouldSmoothScrollTo() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowScrollerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowScrollerTest {
   private Scroller scroller;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSeekBarTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSeekBarTest {
 
   private SeekBar seekBar;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSensorManagerTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSensorManagerTest {
 
   private SensorManager sensorManager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowServiceTest.java
Patch:
@@ -3,10 +3,8 @@
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.Service;
-import android.appwidget.AppWidgetProvider;
 import android.content.Context;
 import android.content.Intent;
-import android.content.IntentFilter;
 import android.content.ServiceConnection;
 import android.media.MediaScannerConnection;
 import android.os.IBinder;
@@ -22,7 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowServiceTest {
   private MyService service ;
   private ShadowService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSettingsTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.content.ContentResolver;
-import android.os.Build;
 import android.provider.Settings;
 
 import org.junit.Before;
@@ -14,7 +13,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSettingsTest {
   private ContentResolver contentResolver;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowShapeDrawableTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowShapeDrawableTest {
   @Test
   public void getPaint_ShouldReturnTheSamePaint() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSimpleCursorAdapterTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSimpleCursorAdapterTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSmsManagerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.app.PendingIntent;
-import android.os.Build;
 import android.telephony.SmsManager;
 import com.google.android.collect.Lists;
 import org.junit.Test;
@@ -14,7 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowSmsManagerTest {
   private SmsManager smsManager = SmsManager.getDefault();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSoundPoolTest.java
Patch:
@@ -2,19 +2,17 @@
 
 import android.media.AudioManager;
 import android.media.SoundPool;
-import android.os.Build;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSoundPoolTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSpannableStringTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSpannableStringTest {
   private static final String TEST_STRING = "Visit us at http://www.foobar.com for more selections";
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSpannedStringTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSpannedStringTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSslErrorHandlerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSslErrorHandlerTest {
 
   private SslErrorHandler handler;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStatFsTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.StatFs;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -12,7 +11,7 @@
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowStatFsTest {
   @Test
   public void shouldRegisterStats() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStateListDrawableTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowStateListDrawableTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStaticLayoutTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowStaticLayoutTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowStrictModeTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowStrictModeTest {
   @Test
   public void setVmPolicyTest() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSurfaceTest {
   private final SurfaceTexture texture = new SurfaceTexture(0);
   private final Surface surface = new Surface(texture);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSurfaceViewTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSurfaceViewTest {
 
   private SurfaceHolder.Callback callback1 = new TestCallback();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSyncResultTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSyncResultTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSystemClockTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowSystemClockTest {
   @Test
   public void shouldAllowForFakingOfTime() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabActivityTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTabActivityTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabHostTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.Assert.assertNull;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTabHostTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTabSpecTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTabSpecTest {
   Drawable icon1;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTelephonyManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.internal.Shadow.newInstanceOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTelephonyManagerTest {
 
   private TelephonyManager manager;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextPaintTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static junit.framework.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTextPaintTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextToSpeechTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTextToSpeechTest {
   private TextToSpeech textToSpeech;
   private Activity activity;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextUtilsTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertArrayEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTextUtilsTest {
   @Test
   public void testExpandTemplate() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTextViewTest.java
Patch:
@@ -49,7 +49,7 @@
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTextViewTest {
 
   private static final String INITIAL_TEXT = "initial text";

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowThemeTest {
 
   private Resources resources;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimePickerDialogTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTimePickerDialogTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTimeTest.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Arrays;
 import java.util.TimeZone;
 
-import android.os.Build;
 import android.os.SystemClock;
 import android.text.format.Time;
 import android.util.TimeFormatException;
@@ -19,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = JELLY_BEAN_MR2)
 public class ShadowTimeTest {
   private static final TimeZone DEFAULT_TIMEZONE = TimeZone.getDefault();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowToastTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowToastTest {
   @Test
   public void shouldHaveShortDuration() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTouchDelegateTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTouchDelegateTest {
 
   private ShadowTouchDelegate td;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTrafficStatsTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTrafficStatsTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypedArrayTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTypedArrayTest {
   private Context context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowTypefaceTest {
   private File fontFile;
   @Rule public TemporaryAsset temporaryAsset = new TemporaryAsset();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUriTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowUriTest {
   @Test
   public void shouldParseUris() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowUserManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.os.UserManager;
@@ -16,7 +15,7 @@
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowUserManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowValueAnimatorTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.*;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowVideoViewTest {
 
   private VideoView view;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewAnimatorTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewAnimatorTest {
 
   ViewAnimator viewAnimator;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewConfigurationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.app.Activity;
 import android.view.ViewConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -12,7 +11,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewConfigurationTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewFlipperTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewFlipperTest {
   protected ViewFlipper flipper;
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewGroupTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.junit.Assert.*;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewGroupTest {
   private String defaultLineSeparator;
   private ViewGroup root;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -7,7 +7,6 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.os.Bundle;
 import android.util.AttributeSet;
 import android.view.*;
@@ -44,7 +43,7 @@
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowViewTest {
   private View view;
   private Transcript transcript;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWallpaperManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWallpaperManagerTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWebViewTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWebViewTest {
 
   private WebView webView;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiConfigurationTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWifiConfigurationTest {
   @Test
   public void shouldSetTheBitSetsAndWepKeyArrays() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWifiInfoTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiManagerTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWifiManagerTest {
   private final WifiManager wifiManager = (WifiManager) RuntimeEnvironment.application.getSystemService(Context.WIFI_SERVICE);
   private final ShadowWifiManager shadowWifiManager = shadowOf(wifiManager);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowManagerGlobalTest.java
Patch:
@@ -1,17 +1,15 @@
 package org.robolectric.shadows;
 
-import android.os.Build;
 import android.os.Looper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.MultiApiRobolectricTestRunner;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
 import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 @Config(minSdk = JELLY_BEAN_MR1)
 public class ShadowWindowManagerGlobalTest {
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWindowTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.R;
 import android.app.Activity;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.View;
 import android.view.Window;
@@ -22,7 +21,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ShadowWindowTest {
   @Test
   public void getFlag_shouldReturnWindowFlags() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/VelocityTrackerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Shadows;
 import org.robolectric.TestRunners;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class VelocityTrackerTest {
   VelocityTracker velocityTracker;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ViewInnerTextTest {
   private Context context;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 
-@RunWith(TestRunners.MultiApiWithDefaults.class)
+@RunWith(TestRunners.MultiApiSelfTest.class)
 public class ViewStubTest {
   private Context ctxt;
 

File: robolectric/src/test/java/org/robolectric/util/ActivityControllerTest.java
Patch:
@@ -28,7 +28,7 @@
 import android.view.Window;
 import android.widget.LinearLayout;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ActivityControllerTest {
   private static final Transcript transcript = new Transcript();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyActivity.class.getName());

File: robolectric/src/test/java/org/robolectric/util/FragmentControllerTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class FragmentControllerTest {
 
   private static final int VIEW_ID_CUSTOMIZED_LOGIN_ACTIVITY = 123;

File: robolectric/src/test/java/org/robolectric/util/FragmentTestUtilTest.java
Patch:
@@ -17,7 +17,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class FragmentTestUtilTest {
   @Test
   public void startFragment_shouldStartFragment() {

File: robolectric/src/test/java/org/robolectric/util/IntentServiceControllerTest.java
Patch:
@@ -17,7 +17,7 @@
 import android.os.Looper;
 import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class IntentServiceControllerTest {
   private static final Transcript transcript = new Transcript();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyService.class.getName());

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class SQLiteLibraryLoaderTest {
   /** Saved system properties. */
   private String savedOs, savedArch;

File: robolectric/src/test/java/org/robolectric/util/ServiceControllerTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.robolectric.shadows.CoreShadowsAdapter;
 import org.robolectric.shadows.ShadowLooper;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class ServiceControllerTest {
   private static final Transcript transcript = new Transcript();
   private final ComponentName componentName = new ComponentName("org.robolectric", MyService.class.getName());

File: robolectric/src/test/java/org/robolectric/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.SelfTest.class)
 public class RoboExecutorServiceTest {
   private final Transcript transcript = new Transcript();
   private final RoboExecutorService executorService = new RoboExecutorService();

File: robolectric/src/main/java/org/robolectric/DefaultTestLifecycle.java
Patch:
@@ -33,9 +33,9 @@ public class DefaultTestLifecycle implements TestLifecycle {
   public Application createApplication(Method method, AndroidManifest appManifest, Config config) {
 
     Application application = null;
-    if (config != null && !config.application().getCanonicalName().equals(Application.class.getCanonicalName())) {
+    if (config != null && !Config.Builder.isDefaultApplication(config.application())) {
       if (config.application().getCanonicalName() != null) {
-        Class<? extends Application> applicationClass = null;
+        Class<? extends Application> applicationClass;
         try {
           applicationClass = new ClassNameResolver<Application>(null, config.application().getName()).resolve();
         } catch (ClassNotFoundException e) {

File: robolectric/src/main/java/org/robolectric/internal/SdkEnvironment.java
Patch:
@@ -44,9 +44,9 @@ public synchronized ResourceLoader getSystemResourceLoader(DependencyResolver de
     return systemResourceLoader;
   }
 
-  public Class<?> bootstrappedClass(Class<?> testClass) {
+  public <T> Class<T> bootstrappedClass(Class<?> testClass) {
     try {
-      return robolectricClassLoader.loadClass(testClass.getName());
+      return (Class<T>) robolectricClassLoader.loadClass(testClass.getName());
     } catch (ClassNotFoundException e) {
       throw new RuntimeException(e);
     }

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -5,6 +5,7 @@
 import android.os.Build;
 
 import org.assertj.core.api.Assertions;
+import org.jetbrains.annotations.NotNull;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Test;
@@ -124,6 +125,7 @@ public RunnerForTesting(Class<?> testClass) throws InitializationError {
       instance = this;
     }
 
+    @NotNull
     @Override protected Class<? extends TestLifecycle> getTestLifecycleClass() {
       return MyTestLifecycle.class;
     }

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.app.Application;
 
+import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
@@ -106,6 +107,7 @@ public Runner(Class<?> testClass) throws InitializationError {
       super(testClass);
     }
 
+    @NotNull
     @Override public InstrumentationConfiguration createClassLoaderConfig(Config config) {
       return InstrumentationConfiguration.newBuilder()
           .doNotAcquireClass(StateHolder.class.getName())
@@ -117,6 +119,7 @@ protected AndroidManifest getAppManifest(Config config) {
       return new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
     }
 
+    @NotNull
     @Override protected Class<? extends TestLifecycle> getTestLifecycleClass() {
       return MyTestLifecycle.class;
     }

File: robolectric-shadows/shadows-maps/src/test/java/org/robolectric/shadows/maps/ShadowMapViewTest.java
Patch:
@@ -166,7 +166,7 @@ public boolean onTouch(View v, MotionEvent event) {
   }
 
   @Implements(ItemizedOverlay.class)
-  public static class MyOverlay<T extends OverlayItem> extends ItemizedOverlay<T> {
+  public static class MyOverlay extends ItemizedOverlay {
     private MotionEvent lastMotionEvent;
     private boolean shouldConsumeEvent = true;
 
@@ -175,7 +175,7 @@ public MyOverlay(Drawable drawable) {
     }
 
     @Override
-    protected T createItem(int i) {
+    protected OverlayItem createItem(int i) {
       return null;
     }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -495,6 +495,9 @@ private TypedArray getTypedArray(Resources resources, TypedResource[] typedResou
   }
 
   private int getResourceType(TypedResource typedResource) {
+    if (typedResource == null) {
+      return -1;
+    }
     final ResType resType = typedResource.getResType();
     int type;
     if (typedResource.getData() == null || resType == ResType.NULL) {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -161,6 +161,7 @@ public static final class color {
     public static final int color_state_list = 0x1040c;
     public static final int list_separator = 0x1040d;
     public static final int custom_state_view_text_color = 0x1040e;
+    public static final int typed_array_orange = 0x1040f;
   }
 
   public static final class drawable {

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -48,6 +48,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
+        new ValueResourceLoader(data, "/resources/array", "array", ResType.TYPED_ARRAY),
         new AttrResourceLoader(data),
         new StyleResourceLoader(data)
     );

File: robolectric-resources/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -66,6 +66,7 @@ public static Converter getConverter(ResType resType) {
         return new FromFraction();
       case CHAR_SEQUENCE_ARRAY:
       case INTEGER_ARRAY:
+      case TYPED_ARRAY:
         return new FromArray();
       default:
         throw new UnsupportedOperationException(resType.name());

File: robolectric-shadows/shadows-maps/src/test/java/org/robolectric/shadows/maps/ShadowMapViewTest.java
Patch:
@@ -166,7 +166,7 @@ public boolean onTouch(View v, MotionEvent event) {
   }
 
   @Implements(ItemizedOverlay.class)
-  public static class MyOverlay extends ItemizedOverlay {
+  public static class MyOverlay<T extends OverlayItem> extends ItemizedOverlay<T> {
     private MotionEvent lastMotionEvent;
     private boolean shouldConsumeEvent = true;
 
@@ -175,7 +175,7 @@ public MyOverlay(Drawable drawable) {
     }
 
     @Override
-    protected OverlayItem createItem(int i) {
+    protected T createItem(int i) {
       return null;
     }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -324,7 +324,7 @@ public static void nativeWriteInterfaceToken(int nativePtr, String interfaceName
     nativeWriteInterfaceToken((long) nativePtr, interfaceName);
   }
 
-  @Implementation(maxSdk = LOLLIPOP)
+  @Implementation(minSdk = LOLLIPOP)
   public static void nativeWriteInterfaceToken(long nativePtr, String interfaceName) {
     // Write StrictMode.ThreadPolicy bits (assume 0 for test).
     nativeWriteInt(nativePtr, 0);
@@ -337,7 +337,7 @@ public static void nativeEnforceInterface(int nativePtr, String interfaceName) {
     nativeEnforceInterface((long) nativePtr, interfaceName);
   }
 
-  @Implementation(maxSdk = LOLLIPOP)
+  @Implementation(minSdk = LOLLIPOP)
   public static void nativeEnforceInterface(long nativePtr, String interfaceName) {
     // Consume StrictMode.ThreadPolicy bits (don't bother setting in test).
     nativeReadInt(nativePtr);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelTest.java
Patch:
@@ -555,8 +555,8 @@ public void testWriteAndEnforceCompatibleInterface() {
   }
   
   @Test
-  public void testWriteAndEnforceInCompatibleInterface() {
-    parcel.writeInterfaceToken("com.example.IMyInterface");
+  public void testWriteAndEnforceIncompatibleInterface() {
+    parcel.writeInterfaceToken("com.example.Derp");
     parcel.setDataPosition(0);
     try {
       parcel.enforceInterface("com.example.IMyInterface");

File: robolectric-shadows/shadows-maps/src/test/java/org/robolectric/shadows/maps/ShadowMapViewTest.java
Patch:
@@ -166,7 +166,7 @@ public boolean onTouch(View v, MotionEvent event) {
   }
 
   @Implements(ItemizedOverlay.class)
-  public static class MyOverlay extends ItemizedOverlay {
+  public static class MyOverlay<T extends OverlayItem> extends ItemizedOverlay<T> {
     private MotionEvent lastMotionEvent;
     private boolean shouldConsumeEvent = true;
 
@@ -175,7 +175,7 @@ public MyOverlay(Drawable drawable) {
     }
 
     @Override
-    protected OverlayItem createItem(int i) {
+    protected T createItem(int i) {
       return null;
     }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -57,7 +57,7 @@ public void enforceInterface(String interfaceName) {
     // Consume StrictMode.ThreadPolicy bits (don't bother setting in test).
     realObject.readInt();
     String actualInterfaceName = realObject.readString();
-    if (!Objects.equal(interfaceName, actualInterfaceName)) {
+    if (!Objects.equals(interfaceName, actualInterfaceName)) {
       throw new SecurityException("Binder invocation to an incorrect interface");
     }
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -483,7 +483,7 @@ public void themeResolveAttribute_shouldSupportNotDereferencingResource() {
 
     theme.resolveAttribute(android.R.attr.windowBackground, out, false);
     assertThat(out.type).isEqualTo(TypedValue.TYPE_REFERENCE);
-    assertThat(out.resourceId).isEqualTo(android.R.color.black);
+    assertThat(out.data).isEqualTo(android.R.color.black);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -483,7 +483,7 @@ public void themeResolveAttribute_shouldSupportNotDereferencingResource() {
 
     theme.resolveAttribute(android.R.attr.windowBackground, out, false);
     assertThat(out.type).isEqualTo(TypedValue.TYPE_REFERENCE);
-    assertThat(out.resourceId).isEqualTo(android.R.color.black);
+    assertThat(out.data).isEqualTo(android.R.color.black);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -127,7 +127,7 @@ public void shouldUseSetDisplayForContexts() throws Exception {
   @Test
   public void clickOn_shouldCallClickListener() throws Exception {
     View view = new View(RuntimeEnvironment.application);
-    shadowOf(view).setMyParent(ReflectionHelpers.newInstance(ViewParent.class));
+    shadowOf(view).setMyParent(ReflectionHelpers.createNullProxy(ViewParent.class));
     TestOnClickListener testOnClickListener = new TestOnClickListener();
     view.setOnClickListener(testOnClickListener);
     ShadowView.clickOn(view);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -483,7 +483,7 @@ public void themeResolveAttribute_shouldSupportNotDereferencingResource() {
 
     theme.resolveAttribute(android.R.attr.windowBackground, out, false);
     assertThat(out.type).isEqualTo(TypedValue.TYPE_REFERENCE);
-    assertThat(out.resourceId).isEqualTo(android.R.color.black);
+    assertThat(out.data).isEqualTo(android.R.color.black);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -57,7 +57,7 @@ public void thrownExceptionIsParceled() throws Exception {
       reply.readException();
       fail();  // Expect thrown
     } catch (SecurityException e) {
-      assertThat(e.getMessage).isEqualTo("Halt! Who goes there?");
+      assertThat(e.getMessage()).isEqualTo("Halt! Who goes there?");
     }
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -48,7 +48,7 @@ protected boolean onTransact(int code, Parcel data, Parcel reply, int flags) thr
   }
 
   @Test
-  public void transactCallsOnTransact() throws Exception {
+  public void thrownExceptionIsParceled() throws Exception {
     TestThrowingBinder testThrowingBinder = new TestThrowingBinder();
     Parcel data = Parcel.obtain();
     Parcel reply = Parcel.obtain();

File: robolectric-resources/src/main/java/org/robolectric/manifest/MetaData.java
Patch:
@@ -50,9 +50,9 @@ public void init(ResourceLoader resLoader, String packageName) {
               valueMap.put(entry.getKey(), resIndex.getResourceId(resName));
               break;
             case VALUE:
-              // Was provided by value attribute, need to parse it
+              // Was provided by value attribute, need to inferFromValue it
               TypedResource<?> typedRes = resLoader.getValue(resName, "");
-              // The typed resource's data is always a String, so need to parse the value.
+              // The typed resource's data is always a String, so need to inferFromValue the value.
               if (typedRes == null) {
                 throw new Resources.NotFoundException(resName.getFullyQualifiedName());
               }
@@ -66,7 +66,7 @@ public void init(ResourceLoader resLoader, String packageName) {
               break;
           }
         } else if (entry.getValue() == VALUE_TYPE.VALUE) {
-          // Raw value, so parse it in to the appropriate type and store it
+          // Raw value, so inferFromValue it in to the appropriate type and store it
           valueMap.put(entry.getKey(), parseValue(value));
         }
       }

File: robolectric-shadows/shadows-core/src/main/java/android/webkit/RoboCookieManager.java
Patch:
@@ -239,7 +239,7 @@ private Date getExpiration(String field) {
         DateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
         return dateFormat.parse(date);
       } catch (ParseException e) {
-        // No-op. Try to parse additional date formats.
+        // No-op. Try to inferFromValue additional date formats.
       }
 
       try {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowMemoryMappedFile.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Shadow for {@link libcore.io.MemoryMappedFile}.
  *
- * <p>This is used by Android to load and parse time zone information. Robolectric emulates
+ * <p>This is used by Android to load and inferFromValue time zone information. Robolectric emulates
  * this functionality by proxying to a time zone database file packaged into the android-all
  * jar.</p>
  */

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -107,7 +107,7 @@ public String getQuantityString(int id, int quantity, Object... formatArgs) thro
   public String getQuantityString(int resId, int quantity) throws Resources.NotFoundException {
     ShadowAssetManager shadowAssetManager = shadowOf(realResources.getAssets());
 
-    TypedResource typedResource = shadowAssetManager.getResourceLoader().getValue(resId, RuntimeEnvironment.getQualifiers());
+    TypedResource typedResource = shadowAssetManager.getResourceLoader(resId).getValue(resId, RuntimeEnvironment.getQualifiers());
     if (typedResource != null && typedResource instanceof PluralResourceLoader.PluralRules) {
       PluralResourceLoader.PluralRules pluralRules = (PluralResourceLoader.PluralRules) typedResource;
       Plural plural = pluralRules.find(quantity);
@@ -127,7 +127,7 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
 
   @Implementation
   public InputStream openRawResource(int id) throws Resources.NotFoundException {
-    return shadowOf(realResources.getAssets()).getResourceLoader().getRawValue(id);
+    return shadowOf(realResources.getAssets()).getResourceLoader(id).getRawValue(id);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTime.java
Patch:
@@ -262,7 +262,7 @@ public boolean parse3339(String rfc3339String) {
     if (rfc3339String.matches("\\d{4}-\\d{2}-\\d{2}")) {
       final TimeZone tz = TimeZone.getTimeZone(time.timezone);
       formatter.applyLocalizedPattern("yyyy-MM-dd");
-      // Make sure we parse the date in the context of the specified time zone
+      // Make sure we inferFromValue the date in the context of the specified time zone
       // instead of the system default time zone.
       formatter.setTimeZone(tz);
       Calendar calendar = Calendar.getInstance(tz, Locale.getDefault());

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -9,7 +9,7 @@
 public interface ParallelUniverseInterface {
   void resetStaticState(Config config);
 
-  void setUpApplicationState(Method method, TestLifecycle testLifecycle, ResourceLoader systemResourceLoader, AndroidManifest appManifest, Config config);
+  void setUpApplicationState(Method method, TestLifecycle testLifecycle, ResourceLoader systemResourceLoader, ResourceLoader compiletimeSdkResourceLoader, AndroidManifest appManifest, Config config);
 
   Thread getMainThread();
 

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -179,6 +179,7 @@ public static final class drawable {
     public static final int drawable_with_nine_patch = 0x10510;
     public static final int robolectric = 0x10511;
     public static final int an_image_or_vector = 0x10512;
+    public static final int vector = 0x10513;
   }
 
   public static final class layout {

File: robolectric/src/test/java/org/robolectric/res/ResourceExtractorTest.java
Patch:
@@ -20,7 +20,7 @@ public void setUp() throws Exception {
   @Test
   public void shouldHandleStyleable() throws Exception {
     assertThat(ResName.getResourceId(resourceIndex, "id/textStyle", R.class.getPackage().getName())).isEqualTo(R.id.textStyle);
-    assertThat(ResName.getResourceId(resourceIndex, "styleable/TitleBar_textStyle", R.class.getPackage().getName())).isNull();
+    assertThat(ResName.getResourceId(resourceIndex, "styleable/TitleBar_textStyle", R.class.getPackage().getName())).isEqualTo(0);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -59,7 +59,7 @@ private void checkForPollutionHelper() {
 
   @Test
   public void shouldMakeInternalResourcesAvailable() throws Exception {
-    ResourceLoader resourceLoader = RuntimeEnvironment.getAppResourceLoader();
+    ResourceLoader resourceLoader = RuntimeEnvironment.getSystemResourceLoader();
     ResName internalResource = new ResName("android", "string", "badPin");
     Integer resId = resourceLoader.getResourceIndex().getResourceId(internalResource);
     assertThat(resId).isNotNull();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResourcesImpl.java
Patch:
@@ -101,7 +101,7 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
       }
 
       TypedResource<?> resolvedTypedResource = shadowAssetManager.resolve(
-          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE), RuntimeEnvironment.getQualifiers(), resId);
+          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE, pluralRules.getXmlContext()), RuntimeEnvironment.getQualifiers(), resId);
       return resolvedTypedResource == null ? null : resolvedTypedResource.asString();
     } else {
       return null;

File: robolectric-resources/src/main/java/org/robolectric/res/AttrResourceLoader.java
Patch:
@@ -47,7 +47,6 @@ protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
 //                    "you need a format, enums, or flags for \"" + name + "\" in " + xmlContext);
     }
     AttrData attrData = new AttrData(name, format, pairs);
-    resBunch.put("attr", name, new TypedResource<>(attrData, ResType.ATTR_DATA),
-        xmlContext);
+    resBunch.put("attr", name, new TypedResource<>(attrData, ResType.ATTR_DATA, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/ColorResourceLoader.java
Patch:
@@ -12,7 +12,7 @@ public ColorResourceLoader(ResBunch data) {
 
   @Override
   protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
-    TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST);
-    data.put("color", xmlContext.getXmlFile().getBaseName(), value, xmlContext);
+    TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST, xmlContext);
+    data.put("color", xmlContext.getXmlFile().getBaseName(), value);
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/DrawableResourceLoader.java
Patch:
@@ -64,7 +64,7 @@ private void listDrawableResources(ResourcePath resourcePath, FsFile dir, String
         }
 
         XmlLoader.XmlContext fakeXmlContext = new XmlLoader.XmlContext(resourcePath.getPackageName(), f);
-        resBunch.put(type, shortName, new FileTypedResource.Image(f, isNinePatch), fakeXmlContext);
+        resBunch.put(type, shortName, new FileTypedResource.Image(f, isNinePatch, fakeXmlContext));
       }
     }
   }

File: robolectric-resources/src/main/java/org/robolectric/res/OpaqueFileLoader.java
Patch:
@@ -17,6 +17,6 @@ public OpaqueFileLoader(ResBunch resBunch, String attrType, ResType resType) {
 
   @Override
   protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
-    resBunch.put(attrType, xmlFile.getBaseName(), new FileTypedResource(xmlFile, resType), xmlContext);
+    resBunch.put(attrType, xmlFile.getBaseName(), new FileTypedResource(xmlFile, resType, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/PluralResourceLoader.java
Patch:
@@ -19,12 +19,12 @@ public PluralResourceLoader(ResBunch resBunch) {
       String quantity = item.getAttrValue("quantity");
       rules.add(new Plural(quantity, value));
     }
-    resBunch.put("plurals", name, new PluralRules(rules, ResType.CHAR_SEQUENCE), xmlContext);
+    resBunch.put("plurals", name, new PluralRules(rules, ResType.CHAR_SEQUENCE, xmlContext));
   }
 
   public static class PluralRules extends TypedResource<List<Plural>> {
-    public PluralRules(List<Plural> data, ResType resType) {
-      super(data, resType);
+    public PluralRules(List<Plural> data, ResType resType, XmlContext xmlContext) {
+      super(data, resType, xmlContext);
     }
 
     public Plural find(int quantity) {

File: robolectric-resources/src/main/java/org/robolectric/res/StyleResourceLoader.java
Patch:
@@ -32,7 +32,7 @@ protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
       styleData.add(attrResName, new AttributeResource(attrResName, value, xmlContext.packageName));
     }
 
-    data.put("style", styleNameWithUnderscores, new TypedResource<>(styleData, ResType.STYLE), xmlContext);
+    data.put("style", styleNameWithUnderscores, new TypedResource<>(styleData, ResType.STYLE, xmlContext));
   }
 
   private String underscorize(String s) {

File: robolectric-resources/src/main/java/org/robolectric/res/ValueResourceLoader.java
Patch:
@@ -33,6 +33,6 @@ protected void processResourceXml(FsFile xmlFile, XmlNode xmlNode, XmlContext xm
 
   @Override
   protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
-    resBunch.put(attrType, name, resType.getValueWithType(xmlNode), xmlContext);
+    resBunch.put(attrType, name, resType.getValueWithType(xmlNode, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/XmlBlockLoader.java
Patch:
@@ -13,16 +13,16 @@
  */
 public class XmlBlockLoader extends XmlLoader {
   private final String attrType;
-  private final ResBundle<XmlBlock> resBundle;
+  private final ResBundle resBundle;
 
-  public XmlBlockLoader(ResBundle<XmlBlock> resBundle, String attrType) {
+  public XmlBlockLoader(ResBundle resBundle, String attrType) {
     this.attrType = attrType;
     this.resBundle = resBundle;
   }
 
   @Override
   protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
     XmlBlock block = XmlBlock.create(parse(xmlFile), xmlFile.getPath(), xmlContext.packageName);
-    resBundle.put(attrType, xmlFile.getBaseName(), block, xmlContext);
+    resBundle.put(attrType, xmlFile.getBaseName(), new TypedResource<>(block, null, xmlContext));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -383,7 +383,7 @@ private TypedResource getAndResolve(int resId, String qualifiers, boolean resolv
     String resourceTypeName = getResourceTypeName(resId);
     if (value == null && DrawableResourceLoader.isStillHandledHere(resourceTypeName)) {
       FileTypedResource typedResource = (FileTypedResource) resourceLoader.getValue(resId, qualifiers);
-      return new TypedResource<>(typedResource.getFsFile(), ResType.FILE);
+      return new TypedResource<>(typedResource.getFsFile(), ResType.FILE, typedResource.getXmlContext());
     }
 
     // todo: gross. this is so resources.getString(R.layout.foo) works for ABS.

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -122,7 +122,8 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
       }
 
       TypedResource<?> resolvedTypedResource = shadowAssetManager.resolve(
-          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE), RuntimeEnvironment.getQualifiers(), resId);
+          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE, pluralRules.getXmlContext()),
+          RuntimeEnvironment.getQualifiers(), resId);
       return resolvedTypedResource == null ? null : resolvedTypedResource.asString();
     } else {
       return null;

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -57,12 +57,12 @@ public class XmlResourceParserImplTest {
 
   @Before
   public void setUp() throws Exception {
-    ResBundle<XmlBlock> resBundle = new ResBundle<>();
+    ResBundle resBundle = new ResBundle();
     XmlBlockLoader xmlBlockLoader = new XmlBlockLoader(resBundle, "xml");
     new DocumentLoader(testResources()).load("xml", xmlBlockLoader);
 
     ResName resName = new ResName(TEST_PACKAGE, "xml", "preferences");
-    XmlBlock xmlBlock = resBundle.get(resName, "");
+    XmlBlock xmlBlock = (XmlBlock) resBundle.get(resName, "").getData();
     ResourceIndex resourceIndex = new ResourceExtractor(testResources());
     resourceLoader = mock(ResourceLoader.class);
     when(resourceLoader.getResourceIndex()).thenReturn(resourceIndex);

File: robolectric-resources/src/main/java/org/robolectric/res/AttrResourceLoader.java
Patch:
@@ -47,7 +47,6 @@ protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
 //                    "you need a format, enums, or flags for \"" + name + "\" in " + xmlContext);
     }
     AttrData attrData = new AttrData(name, format, pairs);
-    resBunch.put("attr", name, new TypedResource<>(attrData, ResType.ATTR_DATA),
-        xmlContext);
+    resBunch.put("attr", name, new TypedResource<>(attrData, ResType.ATTR_DATA, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/ColorResourceLoader.java
Patch:
@@ -12,7 +12,7 @@ public ColorResourceLoader(ResBunch data) {
 
   @Override
   protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
-    TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST);
-    data.put("color", xmlContext.getXmlFile().getBaseName(), value, xmlContext);
+    TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST, xmlContext);
+    data.put("color", xmlContext.getXmlFile().getBaseName(), value);
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/DrawableResourceLoader.java
Patch:
@@ -64,7 +64,7 @@ private void listDrawableResources(ResourcePath resourcePath, FsFile dir, String
         }
 
         XmlLoader.XmlContext fakeXmlContext = new XmlLoader.XmlContext(resourcePath.getPackageName(), f);
-        resBunch.put(type, shortName, new FileTypedResource.Image(f, isNinePatch), fakeXmlContext);
+        resBunch.put(type, shortName, new FileTypedResource.Image(f, isNinePatch, fakeXmlContext));
       }
     }
   }

File: robolectric-resources/src/main/java/org/robolectric/res/OpaqueFileLoader.java
Patch:
@@ -17,6 +17,6 @@ public OpaqueFileLoader(ResBunch resBunch, String attrType, ResType resType) {
 
   @Override
   protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
-    resBunch.put(attrType, xmlFile.getBaseName(), new FileTypedResource(xmlFile, resType), xmlContext);
+    resBunch.put(attrType, xmlFile.getBaseName(), new FileTypedResource(xmlFile, resType, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/PluralResourceLoader.java
Patch:
@@ -19,12 +19,12 @@ public PluralResourceLoader(ResBunch resBunch) {
       String quantity = item.getAttrValue("quantity");
       rules.add(new Plural(quantity, value));
     }
-    resBunch.put("plurals", name, new PluralRules(rules, ResType.CHAR_SEQUENCE), xmlContext);
+    resBunch.put("plurals", name, new PluralRules(rules, ResType.CHAR_SEQUENCE, xmlContext));
   }
 
   public static class PluralRules extends TypedResource<List<Plural>> {
-    public PluralRules(List<Plural> data, ResType resType) {
-      super(data, resType);
+    public PluralRules(List<Plural> data, ResType resType, XmlContext xmlContext) {
+      super(data, resType, xmlContext);
     }
 
     public Plural find(int quantity) {

File: robolectric-resources/src/main/java/org/robolectric/res/StyleResourceLoader.java
Patch:
@@ -32,7 +32,7 @@ protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext)
       styleData.add(attrResName, new AttributeResource(attrResName, value, xmlContext.packageName));
     }
 
-    data.put("style", styleNameWithUnderscores, new TypedResource<>(styleData, ResType.STYLE), xmlContext);
+    data.put("style", styleNameWithUnderscores, new TypedResource<>(styleData, ResType.STYLE, xmlContext));
   }
 
   private String underscorize(String s) {

File: robolectric-resources/src/main/java/org/robolectric/res/ValueResourceLoader.java
Patch:
@@ -33,6 +33,6 @@ protected void processResourceXml(FsFile xmlFile, XmlNode xmlNode, XmlContext xm
 
   @Override
   protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
-    resBunch.put(attrType, name, resType.getValueWithType(xmlNode), xmlContext);
+    resBunch.put(attrType, name, resType.getValueWithType(xmlNode, xmlContext));
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/XmlBlockLoader.java
Patch:
@@ -13,16 +13,16 @@
  */
 public class XmlBlockLoader extends XmlLoader {
   private final String attrType;
-  private final ResBundle<XmlBlock> resBundle;
+  private final ResBundle resBundle;
 
-  public XmlBlockLoader(ResBundle<XmlBlock> resBundle, String attrType) {
+  public XmlBlockLoader(ResBundle resBundle, String attrType) {
     this.attrType = attrType;
     this.resBundle = resBundle;
   }
 
   @Override
   protected void processResourceXml(FsFile xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
     XmlBlock block = XmlBlock.create(parse(xmlFile), xmlFile.getPath(), xmlContext.packageName);
-    resBundle.put(attrType, xmlFile.getBaseName(), block, xmlContext);
+    resBundle.put(attrType, xmlFile.getBaseName(), new TypedResource<>(block, null, xmlContext));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -383,7 +383,7 @@ private TypedResource getAndResolve(int resId, String qualifiers, boolean resolv
     String resourceTypeName = getResourceTypeName(resId);
     if (value == null && DrawableResourceLoader.isStillHandledHere(resourceTypeName)) {
       FileTypedResource typedResource = (FileTypedResource) resourceLoader.getValue(resId, qualifiers);
-      return new TypedResource<>(typedResource.getFsFile(), ResType.FILE);
+      return new TypedResource<>(typedResource.getFsFile(), ResType.FILE, typedResource.getXmlContext());
     }
 
     // todo: gross. this is so resources.getString(R.layout.foo) works for ABS.

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -122,7 +122,8 @@ public String getQuantityString(int resId, int quantity) throws Resources.NotFou
       }
 
       TypedResource<?> resolvedTypedResource = shadowAssetManager.resolve(
-          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE), RuntimeEnvironment.getQualifiers(), resId);
+          new TypedResource<>(plural.getString(), ResType.CHAR_SEQUENCE, pluralRules.getXmlContext()),
+          RuntimeEnvironment.getQualifiers(), resId);
       return resolvedTypedResource == null ? null : resolvedTypedResource.asString();
     } else {
       return null;

File: robolectric/src/test/java/org/robolectric/res/builder/XmlResourceParserImplTest.java
Patch:
@@ -57,12 +57,12 @@ public class XmlResourceParserImplTest {
 
   @Before
   public void setUp() throws Exception {
-    ResBundle<XmlBlock> resBundle = new ResBundle<>();
+    ResBundle resBundle = new ResBundle();
     XmlBlockLoader xmlBlockLoader = new XmlBlockLoader(resBundle, "xml");
     new DocumentLoader(testResources()).load("xml", xmlBlockLoader);
 
     ResName resName = new ResName(TEST_PACKAGE, "xml", "preferences");
-    XmlBlock xmlBlock = resBundle.get(resName, "");
+    XmlBlock xmlBlock = (XmlBlock) resBundle.get(resName, "").getData();
     ResourceIndex resourceIndex = new ResourceExtractor(testResources());
     resourceLoader = mock(ResourceLoader.class);
     when(resourceLoader.getResourceIndex()).thenReturn(resourceIndex);

File: robolectric/src/main/java/org/robolectric/internal/bytecode/InstrumentingClassLoader.java
Patch:
@@ -686,9 +686,10 @@ private void filterSpecialMethods(MethodNode callingMethod) {
               interceptInvokeVirtualMethod(instructions, targetMethod);
             }
             break;
+
           case INVOKEDYNAMIC:
-            System.out.println("invokedynamic?");
-            /* falls through */
+            /* no unusual behavior */
+            break;
 
           default:
             break;

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -257,8 +257,8 @@ public void evaluate() throws Throwable {
             }
             assureTestLifecycle(sdkEnvironment);
 
-            parallelUniverseInterface.resetStaticState(config);
             parallelUniverseInterface.setSdkConfig(sdkEnvironment.getSdkConfig());
+            parallelUniverseInterface.resetStaticState(config);
 
             int sdkVersion = pickSdkVersion(config, appManifest);
             Class<?> androidBuildVersionClass = sdkEnvironment.bootstrappedClass(Build.VERSION.class);

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -59,8 +59,6 @@ public void resetStaticState(Config config) {
 
   @Override
   public void setUpApplicationState(Method method, TestLifecycle testLifecycle, ResourceLoader systemResourceLoader, AndroidManifest appManifest, Config config) {
-    ReflectionHelpers.setStaticField(RuntimeEnvironment.class, "apiLevel", sdkConfig.getApiLevel());
-
     RuntimeEnvironment.application = null;
     RuntimeEnvironment.setMasterScheduler(new Scheduler());
     RuntimeEnvironment.setMainThread(Thread.currentThread());
@@ -195,5 +193,6 @@ public Object getCurrentApplication() {
   @Override
   public void setSdkConfig(SdkConfig sdkConfig) {
     this.sdkConfig = sdkConfig;
+    ReflectionHelpers.setStaticField(RuntimeEnvironment.class, "apiLevel", sdkConfig.getApiLevel());
   }
 }

File: robolectric/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -130,7 +130,7 @@ public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass)
       return planCache.get(signature);
     }
     Plan plan = calculatePlan(signature, isStatic, theClass);
-    planCache.put(signature, plan);
+      planCache.put(signature, plan);
     return plan;
   }
 

File: robolectric/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -48,7 +48,7 @@ public String describe() {
   private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
   private static final boolean STRIP_SHADOW_STACK_TRACES = true;
   private static final ShadowConfig NO_SHADOW_CONFIG = new ShadowConfig(Object.class.getName(), true, false, false, -1, -1);
-  private static final Object NO_SHADOW = new Object();
+  static final Object NO_SHADOW = new Object();
   private static final MethodHandle NO_SHADOW_HANDLE = constant(Object.class, NO_SHADOW);
   private final ShadowMap shadowMap;
   private int apiLevel;
@@ -492,11 +492,11 @@ private String getShadowClassNameInvoke(Class<?> cl) {
   private String getShadowClassName(Class<?> cl) {
     Class clazz = cl;
     ShadowConfig shadowConfig = null;
-    while (shadowConfig == null && clazz != null) {
+    while ((shadowConfig == null || !shadowConfig.supportsSdk(apiLevel)) && clazz != null) {
       shadowConfig = getShadowConfig(clazz);
       clazz = clazz.getSuperclass();
     }
-    return shadowConfig == null || !shadowConfig.supportsSdk(apiLevel) ? null : shadowConfig.shadowClassName;
+    return shadowConfig == null ? null : shadowConfig.shadowClassName;
   }
 
   private void injectRealObjectOn(Object shadow, Class<?> shadowClass, Object instance) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextImplTest.java
Patch:
@@ -72,7 +72,6 @@ public void startIntentSender_serviceIntent() throws IntentSender.SendIntentExce
   }
 
   @Test
-  @Config(sdk = M)
   public void createPackageContext() throws Exception {
     Context packageContext = context.createPackageContext(RuntimeEnvironment.application.getPackageName(), 0);
 

File: robolectric-shadows/shadows-support-v4/src/test/java/org/robolectric/shadows/support/v4/ShadowLocalBroadcastManagerTest.java
Patch:
@@ -88,11 +88,11 @@ public void testGetBroadcastIntents() throws Exception {
       @Override public void onReceive(Context context, Intent intent) {
         transcript.add("got intent " + intent.getAction());
       }
-    }, IntentFilter.create("foo", "blatz"));
+    }, IntentFilter.create("foo", "application/blatz"));
 
-    Intent intent1 = new Intent("foo");
+    Intent intent1 = new Intent("foo").setType("application/blatz");
     broadcastManager.sendBroadcast(intent1);
-    Intent intent2 = new Intent("bar");
+    Intent intent2 = new Intent("bar").setType("application/blatz");
     broadcastManager.sendBroadcast(intent2);
 
     transcript.assertEventsSoFar("got intent foo");

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowIntentFilter.java
Patch:
@@ -37,8 +37,9 @@ public void __constructor__(String action) {
     actions.add(action);
   }
 
-  public void __constructor__(String action, String dataType) {
+  public void __constructor__(String action, String dataType) throws IntentFilter.MalformedMimeTypeException {
     actions.add(action);
+    addDataType(dataType);
   }
 
   public void __constructor__(IntentFilter filter) {

File: robolectric/src/main/java/org/robolectric/internal/ManifestFactory.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.internal;
 
 import org.robolectric.annotation.Config;
-import org.robolectric.internal.ManifestIdentifier;
 import org.robolectric.manifest.AndroidManifest;
 
 /**
@@ -15,8 +14,6 @@
  * </ul>
  */
 public interface ManifestFactory {
-  String DEFAULT_MANIFEST_NAME = "AndroidManifest.xml";
-
   ManifestIdentifier identify(Config config);
 
   AndroidManifest create(ManifestIdentifier manifestIdentifier);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,11 +11,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
+import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.MultiApiWithDefaults.class)
 public class ShadowAccessibilityEventTest {
 
   private AccessibilityEvent event;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
@@ -100,9 +101,7 @@ public void shouldNotHaveInfiniteLoopWithDifferentLoopedChildren() {
   }
 
   @Test
-  @Config(sdk = {
-      android.os.Build.VERSION_CODES.LOLLIPOP,
-      android.os.Build.VERSION_CODES.LOLLIPOP_MR1})
+  @Config(minSdk = LOLLIPOP)
   public void shouldRecordFlagsProperly() {
     node = AccessibilityNodeInfo.obtain();
     node.setClickable(false);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityServiceTest.java
Patch:
@@ -8,11 +8,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.MultiApiWithDefaults.class)
 public class ShadowAccessibilityServiceTest {
   private MyService service ;
   private ShadowAccessibilityService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.IOException;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.sameInstance;
 import static org.junit.Assert.assertFalse;
@@ -529,8 +530,7 @@ public void addAccount_withOptionsShouldSupportPeekNextAddAccountOptions() throw
   }
 
   @Test
-  @Config(sdk = {
-      Build.VERSION_CODES.LOLLIPOP })
+  @Config(minSdk = LOLLIPOP)
   public void addPreviousAccount() {
     Account account = new Account("name_a", "type_a");
     shadowOf(am).setPreviousAccountName(account, "old_name");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -105,7 +106,7 @@ public void isUserAMonkey_shouldReturnFalse() {
     assertThat(ActivityManager.isUserAMonkey()).isFalse();
   }
 
-  @Test @Config(sdk = Build.VERSION_CODES.M)
+  @Test @Config(minSdk = M)
   public void getLockTaskModeState() throws Exception {
     assertThat(getActivityManager().getLockTaskModeState()).isEqualTo(0); // just don't throw
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -126,7 +127,7 @@ public void shouldSetView() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+  @Config(minSdk = LOLLIPOP)
   public void shouldSetView_withLayoutId() throws Exception {
     AlertDialog.Builder builder = new AlertDialog.Builder(application);
     builder.setView(R.layout.custom_layout);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateIntervalFormatTest.java
Patch:
@@ -16,11 +16,11 @@
 import java.util.Calendar;
 import java.util.Date;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.M })
+@Config(minSdk = M)
 public class ShadowDateIntervalFormatTest {
   @Test
   public void testDateInterval_FormatDateRange() throws ParseException {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDebugTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
@@ -17,7 +18,7 @@ public void initNoCrash() {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void getRuntimeStats() {
     assertThat(Debug.getRuntimeStats()).isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.Transcript;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static junit.framework.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
@@ -175,7 +176,7 @@ public void shouldFindViewsWithinAContentViewThatWasPreviouslySet() throws Excep
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.KITKAT)
+  @Config(minSdk = KITKAT)
   public void show_shouldWorkWithAPI19() {
     Dialog dialog = new Dialog(RuntimeEnvironment.application);
     dialog.show();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.annotation.Config;
 
 import static android.content.Context.KEYGUARD_SERVICE;
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -48,7 +49,7 @@ public void testShouldBeAbleToDisableTheKeyguardLock() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void isKeyguardSecure() {
     assertThat(manager.isKeyguardSecure()).isFalse();
 
@@ -59,7 +60,7 @@ public void isKeyguardSecure() {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void isDeviceSecure() {
     assertThat(manager.isDeviceSecure()).isFalse();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -9,10 +9,11 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(minSdk = LOLLIPOP)
 public class ShadowNetworkTest {
   @Test
   public void getNetId_shouldReturnConstructorNetId() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPorterDuffColorFilterTest.java
Patch:
@@ -10,11 +10,11 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.LOLLIPOP })
+@Config(minSdk = LOLLIPOP)
 public class ShadowPorterDuffColorFilterTest {
   @Test
   public void constructor_shouldWork() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowSQLiteConnection.convertSQLWithLocalizedUnicodeCollator;
@@ -27,8 +28,7 @@
 import java.util.Map;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.LOLLIPOP })
+@Config(minSdk = LOLLIPOP)
 public class ShadowSQLiteConnectionTest {
   private SQLiteDatabase database;
   private File databasePath;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSettingsTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
@@ -41,7 +42,7 @@ public void testSecureGetInt() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+  @Config(minSdk = JELLY_BEAN_MR1)
   public void testGlobalGetInt() throws Exception {
     assertThat(Settings.Global.getInt(contentResolver, "property", 0)).isEqualTo(0);
     assertThat(Settings.Global.getInt(contentResolver, "property", 2)).isEqualTo(2);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.TestRunners;
 import static android.content.Context.WIFI_SERVICE;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
@@ -80,7 +81,7 @@ public void shouldReturnLinkSpeed() {
     assertThat(wifiInfo.getLinkSpeed()).isEqualTo(10);
   }
 
-  @Test @Config(sdk = 21)
+  @Test @Config(minSdk = LOLLIPOP)
   public void shouldReturnFrequency() {
     WifiManager wifiManager = (WifiManager) application.getSystemService(WIFI_SERVICE);
     WifiInfo wifiInfo = wifiManager.getConnectionInfo();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -167,7 +167,7 @@ public final Cursor query(Uri uri, String[] projection, String selection,
     }
   }
 
-      @Implementation
+    @Implementation
     public Cursor query(Uri uri, String[] projection, String selection,
         String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) {
       return query(uri, projection, selection, selectionArgs, sortOrder);

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -311,7 +311,7 @@ protected AndroidManifest getAppManifest(Config config) {
   }
 
   public Config getConfig(Method method) {
-    Config config = new Config.Builder().build();
+    Config config = Config.Builder.defaults().build();
 
     Config globalConfig = buildGlobalConfig();
     if (globalConfig != null) {

File: robolectric/src/main/java/org/robolectric/internal/ManifestFactory.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.internal;
 
 import org.robolectric.annotation.Config;
-import org.robolectric.internal.ManifestIdentifier;
 import org.robolectric.manifest.AndroidManifest;
 
 /**
@@ -15,8 +14,6 @@
  * </ul>
  */
 public interface ManifestFactory {
-  String DEFAULT_MANIFEST_NAME = "AndroidManifest.xml";
-
   ManifestIdentifier identify(Config config);
 
   AndroidManifest create(ManifestIdentifier manifestIdentifier);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityEventTest.java
Patch:
@@ -11,11 +11,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
+import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.MultiApiWithDefaults.class)
 public class ShadowAccessibilityEventTest {
 
   private AccessibilityEvent event;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityNodeInfoTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
@@ -100,9 +101,7 @@ public void shouldNotHaveInfiniteLoopWithDifferentLoopedChildren() {
   }
 
   @Test
-  @Config(sdk = {
-      android.os.Build.VERSION_CODES.LOLLIPOP,
-      android.os.Build.VERSION_CODES.LOLLIPOP_MR1})
+  @Config(minSdk = LOLLIPOP)
   public void shouldRecordFlagsProperly() {
     node = AccessibilityNodeInfo.obtain();
     node.setClickable(false);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityServiceTest.java
Patch:
@@ -8,11 +8,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.MultiApiWithDefaults.class)
 public class ShadowAccessibilityServiceTest {
   private MyService service ;
   private ShadowAccessibilityService shadow;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccountManagerTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.IOException;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.sameInstance;
 import static org.junit.Assert.assertFalse;
@@ -529,8 +530,7 @@ public void addAccount_withOptionsShouldSupportPeekNextAddAccountOptions() throw
   }
 
   @Test
-  @Config(sdk = {
-      Build.VERSION_CODES.LOLLIPOP })
+  @Config(minSdk = LOLLIPOP)
   public void addPreviousAccount() {
     Account account = new Account("name_a", "type_a");
     shadowOf(am).setPreviousAccountName(account, "old_name");

File: robolectric/src/test/java/org/robolectric/shadows/ShadowActivityManagerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -105,7 +106,7 @@ public void isUserAMonkey_shouldReturnFalse() {
     assertThat(ActivityManager.isUserAMonkey()).isFalse();
   }
 
-  @Test @Config(sdk = Build.VERSION_CODES.M)
+  @Test @Config(minSdk = M)
   public void getLockTaskModeState() throws Exception {
     assertThat(getActivityManager().getLockTaskModeState()).isEqualTo(0); // just don't throw
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAlertDialogTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -126,7 +127,7 @@ public void shouldSetView() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+  @Config(minSdk = LOLLIPOP)
   public void shouldSetView_withLayoutId() throws Exception {
     AlertDialog.Builder builder = new AlertDialog.Builder(application);
     builder.setView(R.layout.custom_layout);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateIntervalFormatTest.java
Patch:
@@ -16,11 +16,11 @@
 import java.util.Calendar;
 import java.util.Date;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.M })
+@Config(minSdk = M)
 public class ShadowDateIntervalFormatTest {
   @Test
   public void testDateInterval_FormatDateRange() throws ParseException {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDebugTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
@@ -17,7 +18,7 @@ public void initNoCrash() {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void getRuntimeStats() {
     assertThat(Debug.getRuntimeStats()).isNotNull();
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDialogTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.Transcript;
 
+import static android.os.Build.VERSION_CODES.KITKAT;
 import static junit.framework.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
@@ -175,7 +176,7 @@ public void shouldFindViewsWithinAContentViewThatWasPreviouslySet() throws Excep
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.KITKAT)
+  @Config(minSdk = KITKAT)
   public void show_shouldWorkWithAPI19() {
     Dialog dialog = new Dialog(RuntimeEnvironment.application);
     dialog.show();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowKeyguardManagerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.annotation.Config;
 
 import static android.content.Context.KEYGUARD_SERVICE;
+import static android.os.Build.VERSION_CODES.M;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -48,7 +49,7 @@ public void testShouldBeAbleToDisableTheKeyguardLock() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void isKeyguardSecure() {
     assertThat(manager.isKeyguardSecure()).isFalse();
 
@@ -59,7 +60,7 @@ public void isKeyguardSecure() {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.M)
+  @Config(minSdk = M)
   public void isDeviceSecure() {
     assertThat(manager.isDeviceSecure()).isFalse();
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowNetworkTest.java
Patch:
@@ -9,10 +9,11 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(minSdk = LOLLIPOP)
 public class ShadowNetworkTest {
   @Test
   public void getNetId_shouldReturnConstructorNetId() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPorterDuffColorFilterTest.java
Patch:
@@ -10,11 +10,11 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.LOLLIPOP })
+@Config(minSdk = LOLLIPOP)
 public class ShadowPorterDuffColorFilterTest {
   @Test
   public void constructor_shouldWork() {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSQLiteConnectionTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowSQLiteConnection.convertSQLWithLocalizedUnicodeCollator;
@@ -27,8 +28,7 @@
 import java.util.Map;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
-@Config(sdk = {
-    Build.VERSION_CODES.LOLLIPOP })
+@Config(minSdk = LOLLIPOP)
 public class ShadowSQLiteConnectionTest {
   private SQLiteDatabase database;
   private File databasePath;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSettingsTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)
@@ -41,7 +42,7 @@ public void testSecureGetInt() throws Exception {
   }
 
   @Test
-  @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+  @Config(minSdk = JELLY_BEAN_MR1)
   public void testGlobalGetInt() throws Exception {
     assertThat(Settings.Global.getInt(contentResolver, "property", 0)).isEqualTo(0);
     assertThat(Settings.Global.getInt(contentResolver, "property", 2)).isEqualTo(2);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowWifiInfoTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.TestRunners;
 import static android.content.Context.WIFI_SERVICE;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.RuntimeEnvironment.application;
 import static org.robolectric.Shadows.shadowOf;
@@ -80,7 +81,7 @@ public void shouldReturnLinkSpeed() {
     assertThat(wifiInfo.getLinkSpeed()).isEqualTo(10);
   }
 
-  @Test @Config(sdk = 21)
+  @Test @Config(minSdk = LOLLIPOP)
   public void shouldReturnFrequency() {
     WifiManager wifiManager = (WifiManager) application.getSystemService(WIFI_SERVICE);
     WifiInfo wifiInfo = wifiManager.getConnectionInfo();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -22,6 +22,7 @@
 import static android.os.Build.VERSION_CODES;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static org.robolectric.RuntimeEnvironment.castNativePtr;
 
 /**
  * Shadow for {@link android.os.Parcel}.
@@ -253,13 +254,14 @@ public static String nativeReadString(long nativePtr) {
 
   @Implementation @HiddenApi
   public static Number nativeCreate() {
+    // todo: yikes, perf:
     // Pick a native ptr that hasn't been used.
     long/*ptr*/ nativePtrUsed = 0;
     while (NATIVE_PTR_TO_PARCEL.containsKey(nativePtrUsed)) {
       nativePtrUsed++;
     }
     NATIVE_PTR_TO_PARCEL.put(nativePtrUsed, new ByteBuffer());
-    return nativePtrUsed;
+    return castNativePtr(nativePtrUsed);
   }
 
   @HiddenApi

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
Patch:
@@ -45,6 +45,8 @@
 import static android.os.Build.VERSION_CODES;
 import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static org.robolectric.RuntimeEnvironment.castNativePtr;
+import static org.robolectric.RuntimeEnvironment.getApiLevel;
 
 /**
  * Shadow for {@link android.database.sqlite.SQLiteConnection}.
@@ -72,7 +74,7 @@ private static SQLiteStatement stmt(long connectionPtr, long pointer) {
   @Implementation
   public static Number nativeOpen(String path, int openFlags, String label, boolean enableTrace, boolean enableProfile) {
     SQLiteLibraryLoader.load();
-    return CONNECTIONS.open(path);
+    return castNativePtr(CONNECTIONS.open(path));
   }
 
   @Implementation(maxSdk = KITKAT_WATCH)

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -67,9 +67,7 @@ private void loadEverything() throws Exception {
 
   @Override
   public String toString() {
-    return "PackageResourceLoader{" +
-        "resourcePath=" + resourcePath +
-        '}';
+    return "PackageResourceLoader{" + resourcePath.getPackageName() + '}';
   }
 
   @Override public boolean providesFor(String namespace) {

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -319,7 +319,8 @@ public String getAttributeValue(int index) {
     return qualify(getAttributeAt(index).getNodeValue());
   }
 
-  private String qualify(String value) {
+  // for testing only...
+  public String qualify(String value) {
     if (value == null) return null;
     if (AttributeResource.isResourceReference(value)) {
       return "@" + ResName.qualifyResourceName(value.substring(1).replace("+", ""), packageName, "attr");

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -67,9 +67,7 @@ private void loadEverything() throws Exception {
 
   @Override
   public String toString() {
-    return "PackageResourceLoader{" +
-        "resourcePath=" + resourcePath +
-        '}';
+    return "PackageResourceLoader{" + resourcePath.getPackageName() + '}';
   }
 
   @Override public boolean providesFor(String namespace) {

File: robolectric-resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -7,6 +7,8 @@
 import java.util.regex.Pattern;
 
 public class ResName {
+  public static final String ID_TYPE = "id";
+
   private static final Pattern FQN_PATTERN = Pattern.compile("^([^:]*):([^/]+)/(.+)$");
   private static final int NAMESPACE = 1;
   private static final int TYPE = 2;

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -319,7 +319,8 @@ public String getAttributeValue(int index) {
     return qualify(getAttributeAt(index).getNodeValue());
   }
 
-  private String qualify(String value) {
+  // for testing only...
+  public String qualify(String value) {
     if (value == null) return null;
     if (AttributeResource.isResourceReference(value)) {
       return "@" + ResName.qualifyResourceName(value.substring(1).replace("+", ""), packageName, "attr");

File: robolectric-resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -7,6 +7,8 @@
 import java.util.regex.Pattern;
 
 public class ResName {
+  public static final String ID_TYPE = "id";
+
   private static final Pattern FQN_PATTERN = Pattern.compile("^([^:]*):([^/]+)/(.+)$");
   private static final int NAMESPACE = 1;
   private static final int TYPE = 2;

File: robolectric-resources/src/main/java/org/robolectric/res/ColorResourceLoader.java
Patch:
@@ -12,7 +12,7 @@ public ColorResourceLoader(ResBunch data) {
 
   @Override
   protected void processNode(String name, XmlNode xmlNode, XmlContext xmlContext) throws XPathExpressionException {
-    TypedResource value = new FileTypedResource(xmlContext.getXmlFile().getPath(), ResType.COLOR_STATE_LIST);
+    TypedResource value = new FileTypedResource(xmlContext.getXmlFile(), ResType.COLOR_STATE_LIST);
     data.put("color", xmlContext.getXmlFile().getBaseName(), value, xmlContext);
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -43,7 +43,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/fraction", "fraction", ResType.FRACTION),
         new ValueResourceLoader(data, "/resources/item[@type='fraction']", "fraction", ResType.FRACTION),
         new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
-        new PluralResourceLoader(pluralsData),
+        new PluralResourceLoader(data),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
@@ -53,15 +53,15 @@ private void loadEverything() throws Exception {
 
     documentLoader.load("layout", new OpaqueFileLoader(data, "layout"), new XmlBlockLoader(xmlDocuments, "layout"));
     documentLoader.load("menu", new OpaqueFileLoader(data, "menu"), new XmlBlockLoader(xmlDocuments, "menu"));
-    documentLoader.load("drawable", new OpaqueFileLoader(data, "drawable"), new XmlBlockLoader(xmlDocuments, "drawable"));
+    documentLoader.load("drawable", new OpaqueFileLoader(data, "drawable", ResType.DRAWABLE), new XmlBlockLoader(xmlDocuments, "drawable"));
     documentLoader.load("anim", new OpaqueFileLoader(data, "anim"), new XmlBlockLoader(xmlDocuments, "anim"));
     documentLoader.load("animator", new OpaqueFileLoader(data, "animator"), new XmlBlockLoader(xmlDocuments, "animator"));
     documentLoader.load("color", new ColorResourceLoader(data), new XmlBlockLoader(xmlDocuments, "color"));
     documentLoader.load("xml", new OpaqueFileLoader(data, "xml"), new XmlBlockLoader(xmlDocuments, "xml"));
     documentLoader.load("transition", new OpaqueFileLoader(data, "transition"), new XmlBlockLoader(xmlDocuments, "transition"));
     documentLoader.load("interpolator", new OpaqueFileLoader(data, "interpolator"), new XmlBlockLoader(xmlDocuments, "interpolator"));
 
-    new DrawableResourceLoader(drawableData).findDrawableResources(resourcePath);
+    new DrawableResourceLoader(data).findDrawableResources(resourcePath);
     new RawResourceLoader(resourcePath).loadTo(rawResources);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ValueResourceLoader.java
Patch:
@@ -2,7 +2,7 @@
 
 import javax.xml.xpath.XPathExpressionException;
 
-class ValueResourceLoader extends XpathResourceXmlLoader {
+public class ValueResourceLoader extends XpathResourceXmlLoader {
   private final ResBunch resBunch;
   private final String attrType;
   private final ResType resType;

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -83,6 +83,9 @@ public static final class id {
 
     public static final int list_view_with_enum_scrollbar = 0x1003b;
     public static final int action_search = 0x1003c;
+
+    public static final int idNotInXml = 0x1003d;
+    public static final int idInRClassAndXml = 0x1003e;
   }
 
   public static final class string {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawableTest.java
Patch:
@@ -153,7 +153,7 @@ public void drawableShouldLoadImageOfCorrectSizeWithHdpiQualifier() {
   }
 
   @Test
-  @Config(sdk = 21)
+  @Config(sdk = 21, qualifiers = "anydpi")
   public void testGetBitmapOrVectorDrawableAt21() {
     final Drawable aDrawable = RuntimeEnvironment.application.getResources()
         .getDrawable(R.drawable.an_image_or_vector);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -83,6 +83,9 @@ public static final class id {
 
     public static final int list_view_with_enum_scrollbar = 0x1003b;
     public static final int action_search = 0x1003c;
+
+    public static final int idNotInXml = 0x1003d;
+    public static final int idInRClassAndXml = 0x1003e;
   }
 
   public static final class string {

File: robolectric-resources/src/main/java/org/robolectric/res/AttributeResource.java
Patch:
@@ -33,7 +33,7 @@ public boolean isResourceReference() {
 
   public @NotNull ResName getResourceReference() {
     if (!isResourceReference()) throw new RuntimeException("not a resource reference: " + this);
-    return ResName.qualifyResName(value.substring(1).replace("+", ""), contextPackageName, "attr");
+    return ResName.qualifyResName(value.substring(1).replace("+", ""), contextPackageName, "style");
   }
 
   public boolean isStyleReference() {

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -773,7 +773,7 @@ private int getResourceId(String possiblyQualifiedResourceName, String defaultPa
     if (AttributeResource.isNull(possiblyQualifiedResourceName)) return 0;
 
     if (AttributeResource.isStyleReference(possiblyQualifiedResourceName)) {
-      ResName styleReference = AttributeResource.getStyleReference(possiblyQualifiedResourceName, defaultPackageName, defaultType);
+      ResName styleReference = AttributeResource.getStyleReference(possiblyQualifiedResourceName, defaultPackageName, "attr");
       Integer resourceId = resourceLoader.getResourceIndex().getResourceId(styleReference);
       if (resourceId == null) {
         throw new Resources.NotFoundException(styleReference.getFullyQualifiedName());

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -271,6 +271,7 @@ public static final class attr {
     public static final int string2 = 0x10a1b;
     public static final int string3 = 0x10a1c;
     public static final int parentStyleReference = 0x10a1d;
+    public static final int styleNotSpecifiedInAnyTheme = 0x10a1e;
   }
 
   public static final class menu {

File: robolectric-resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -37,7 +37,7 @@ public void add(ResName attrName, AttributeResource attribute) {
     // org.robolectric.shadows.ShadowThemeTest.obtainTypedArrayFromDependencyLibrary()
     // for an explanation. TODO(jongerrish): Make Robolectric use a more realistic resource merging
     // scheme.
-    if (attributeResource == null && !"android".equals(resName.packageName)) {
+    if (attributeResource == null && !"android".equals(resName.packageName) && !"android".equals(packageName)) {
       attributeResource = items.get(resName.withPackageName(packageName));
       if (attributeResource != null && (!"android".equals(attributeResource.contextPackageName))) {
         attributeResource = new AttributeResource(resName, attributeResource.value, resName.packageName);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -261,6 +261,7 @@ public static final class attr {
     public static final int numColumns = 0x10a11;
     public static final int sugaryScale = 0x10a12;
     public static final int selectableItemBackground = 0x10a13;
+    public static final int attrFromLib1 = 0x10a14;
   }
 
   public static final class menu {

File: robolectric/src/test/java/org/robolectric/lib1/R.java
Patch:
@@ -21,5 +21,6 @@ public static final class styleable {
   public static final class attr {
     public static int offsetX = 0x7f010070;
     public static int offsetY = 0x7f010071;
+    public static final int attrFromLib1 = 0x10a14;
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -37,7 +37,7 @@ public void add(ResName attrName, AttributeResource attribute) {
     // org.robolectric.shadows.ShadowThemeTest.obtainTypedArrayFromDependencyLibrary()
     // for an explanation. TODO(jongerrish): Make Robolectric use a more realistic resource merging
     // scheme.
-    if (attributeResource == null && !"android".equals(resName.packageName)) {
+    if (attributeResource == null && !"android".equals(resName.packageName) && !"android".equals(packageName)) {
       attributeResource = items.get(resName.withPackageName(packageName));
       if (attributeResource != null && (!"android".equals(attributeResource.contextPackageName))) {
         attributeResource = new AttributeResource(resName, attributeResource.value, resName.packageName);

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -134,7 +134,7 @@ public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotF
       return packageInfos.get(packageName);
     }
 
-    throw new NameNotFoundException();
+    throw new NameNotFoundException(packageName);
   }
 
   @Override
@@ -143,7 +143,7 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags) throws
     if (info != null) {
       return info.applicationInfo;
     } else {
-      throw new NameNotFoundException();
+      throw new NameNotFoundException(packageName);
     }
   }
 
@@ -242,7 +242,7 @@ public ServiceInfo getServiceInfo(ComponentName className, int flags) throws Nam
     String serviceName = className.getClassName();
     ServiceData serviceData = androidManifest.getServiceData(serviceName);
     if (serviceData == null) {
-      throw new NameNotFoundException();
+      throw new NameNotFoundException(serviceName);
     }
     
     ServiceInfo serviceInfo = new ServiceInfo();

File: robolectric/src/main/java/org/robolectric/util/ContentProviderController.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.content.pm.ProviderInfo;
-import android.text.TextUtils;
 import org.robolectric.RuntimeEnvironment;
 
 public class ContentProviderController<T extends ContentProvider> {

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -47,7 +47,6 @@ public class AndroidManifestTest {
   @Test
   public void parseManifest_shouldReadContentProviders() throws Exception {
     AndroidManifest config = newConfig("TestAndroidManifestWithContentProviders.xml");
-    assertThat(config.getContentProviders()).hasSize(2);
 
     assertThat(config.getContentProviders().get(0).getClassName()).isEqualTo("org.robolectric.tester.FullyQualifiedClassName");
     assertThat(config.getContentProviders().get(0).getAuthority()).isEqualTo("org.robolectric.authority1");

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -76,7 +76,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
 
     String qualifiers = Qualifiers.addPlatformVersion(config.qualifiers(), sdkConfig.getApiLevel());
     qualifiers = Qualifiers.addSmallestScreenWidth(qualifiers, 320);
-    qualifiers = Qualifiers.addScreenWidth(qualifiers, 1024);
+    qualifiers = Qualifiers.addScreenWidth(qualifiers, 320);
     Resources systemResources = Resources.getSystem();
     Configuration configuration = systemResources.getConfiguration();
     configuration.smallestScreenWidthDp = Qualifiers.getSmallestScreenWidth(qualifiers);

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -48,7 +48,7 @@ public void inflateLayout_overridesTo_sw720dp() throws Exception {
 
   @Test
   public void defaultScreenWidth() {
-    assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.value_only_present_in_w820dp)).isTrue();
-    assertThat(RuntimeEnvironment.application.getResources().getConfiguration().screenWidthDp).isEqualTo(1024);
+    assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.value_only_present_in_w320dp)).isTrue();
+    assertThat(RuntimeEnvironment.application.getResources().getConfiguration().screenWidthDp).isEqualTo(320);
   }
 }

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -332,7 +332,7 @@ public static final class bool {
     public static final int reference_to_true = 0x10f04;
     public static final int true_as_item = 0x10f05;
     public static final int different_resource_boolean=0x10f06;
-    public static final int value_only_present_in_w820dp=0x10f07;
+    public static final int value_only_present_in_w320dp=0x10f07;
   }
 
   public static final class style {

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -76,7 +76,7 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
 
     String qualifiers = Qualifiers.addPlatformVersion(config.qualifiers(), sdkConfig.getApiLevel());
     qualifiers = Qualifiers.addSmallestScreenWidth(qualifiers, 320);
-    qualifiers = Qualifiers.addScreenWidth(qualifiers, 1024);
+    qualifiers = Qualifiers.addScreenWidth(qualifiers, 320);
     Resources systemResources = Resources.getSystem();
     Configuration configuration = systemResources.getConfiguration();
     configuration.smallestScreenWidthDp = Qualifiers.getSmallestScreenWidth(qualifiers);

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -48,7 +48,7 @@ public void inflateLayout_overridesTo_sw720dp() throws Exception {
 
   @Test
   public void defaultScreenWidth() {
-    assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.value_only_present_in_w820dp)).isTrue();
-    assertThat(RuntimeEnvironment.application.getResources().getConfiguration().screenWidthDp).isEqualTo(1024);
+    assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.value_only_present_in_w320dp)).isTrue();
+    assertThat(RuntimeEnvironment.application.getResources().getConfiguration().screenWidthDp).isEqualTo(320);
   }
 }

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -332,7 +332,7 @@ public static final class bool {
     public static final int reference_to_true = 0x10f04;
     public static final int true_as_item = 0x10f05;
     public static final int different_resource_boolean=0x10f06;
-    public static final int value_only_present_in_w820dp=0x10f07;
+    public static final int value_only_present_in_w320dp=0x10f07;
   }
 
   public static final class style {

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -285,7 +285,7 @@ public String getAttributeName(int index) {
     try {
       Node attr = getAttributeAt(index);
       String namespace = maybeReplaceNamespace(attr.getNamespaceURI());
-      return (AttributeResource.ANDROID_RES_NS_PREFIX + packageName).equals(namespace) ?
+      return applicationNamespace.equals(namespace) ?
         attr.getLocalName() :
         attr.getNodeName();
     } catch (IndexOutOfBoundsException ex) {

File: robolectric-resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -458,6 +458,7 @@ public String getActivityLabel(Class<? extends Activity> activity) {
     return (data != null && data.getLabel() != null) ? data.getLabel() : applicationLabel;
   }
 
+  @Deprecated
   public void setPackageName(String packageName) {
     this.packageName = packageName;
   }

File: robolectric/src/main/java/org/robolectric/util/IntentServiceController.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.util;
 
 import android.app.Application;
+import android.app.Service;
 import android.app.IntentService;
 import android.content.Context;
 import android.content.Intent;

File: robolectric/src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.app.Fragment;
 import android.app.Service;
+import android.app.IntentService;
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.content.Intent;

File: robolectric-resources/src/main/java/org/robolectric/res/builder/XmlResourceParserImpl.java
Patch:
@@ -285,7 +285,7 @@ public String getAttributeName(int index) {
     try {
       Node attr = getAttributeAt(index);
       String namespace = maybeReplaceNamespace(attr.getNamespaceURI());
-      return (AttributeResource.ANDROID_RES_NS_PREFIX + packageName).equals(namespace) ?
+      return applicationNamespace.equals(namespace) ?
         attr.getLocalName() :
         attr.getNodeName();
     } catch (IndexOutOfBoundsException ex) {

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -76,9 +76,11 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
 
     String qualifiers = Qualifiers.addPlatformVersion(config.qualifiers(), sdkConfig.getApiLevel());
     qualifiers = Qualifiers.addSmallestScreenWidth(qualifiers, 320);
+    qualifiers = Qualifiers.addScreenWidth(qualifiers, 1024);
     Resources systemResources = Resources.getSystem();
     Configuration configuration = systemResources.getConfiguration();
     configuration.smallestScreenWidthDp = Qualifiers.getSmallestScreenWidth(qualifiers);
+    configuration.screenWidthDp = Qualifiers.getScreenWidth(qualifiers);
     shadowsAdapter.overrideQualifiers(configuration, qualifiers);
     systemResources.updateConfiguration(configuration, systemResources.getDisplayMetrics());
     RuntimeEnvironment.setQualifiers(qualifiers);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -332,6 +332,7 @@ public static final class bool {
     public static final int reference_to_true = 0x10f04;
     public static final int true_as_item = 0x10f05;
     public static final int different_resource_boolean=0x10f06;
+    public static final int value_only_present_in_w820dp=0x10f07;
   }
 
   public static final class style {

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -28,7 +28,8 @@ public void testChoosesLayoutBasedOnSearchPath_respectsOrderOfPath() throws Exce
     assertThat(textView.getText().toString()).isEqualTo("land");
   }
 
-  @Test 
+  @Test
+  @Config(qualifiers="w0dp")
   public void checkDefaultBooleanValue() throws Exception {
 	  assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.different_resource_boolean)).isEqualTo(false);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -357,6 +357,7 @@ public void testMultiOrientation_explicitLandscape() throws Exception {
   }
 
   @Test
+  @Config(qualifiers = "w0dp")
   public void testSetContentViewByItemResource() throws Exception {
     Activity activity = buildActivity(Activity.class).create().get();
     activity.setContentView(R.layout.main_layout);

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -76,9 +76,11 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
 
     String qualifiers = Qualifiers.addPlatformVersion(config.qualifiers(), sdkConfig.getApiLevel());
     qualifiers = Qualifiers.addSmallestScreenWidth(qualifiers, 320);
+    qualifiers = Qualifiers.addScreenWidth(qualifiers, 1024);
     Resources systemResources = Resources.getSystem();
     Configuration configuration = systemResources.getConfiguration();
     configuration.smallestScreenWidthDp = Qualifiers.getSmallestScreenWidth(qualifiers);
+    configuration.screenWidthDp = Qualifiers.getScreenWidth(qualifiers);
     shadowsAdapter.overrideQualifiers(configuration, qualifiers);
     systemResources.updateConfiguration(configuration, systemResources.getDisplayMetrics());
     RuntimeEnvironment.setQualifiers(qualifiers);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -332,6 +332,7 @@ public static final class bool {
     public static final int reference_to_true = 0x10f04;
     public static final int true_as_item = 0x10f05;
     public static final int different_resource_boolean=0x10f06;
+    public static final int value_only_present_in_w820dp=0x10f07;
   }
 
   public static final class style {

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -28,7 +28,8 @@ public void testChoosesLayoutBasedOnSearchPath_respectsOrderOfPath() throws Exce
     assertThat(textView.getText().toString()).isEqualTo("land");
   }
 
-  @Test 
+  @Test
+  @Config(qualifiers="w0dp")
   public void checkDefaultBooleanValue() throws Exception {
 	  assertThat(RuntimeEnvironment.application.getResources().getBoolean(R.bool.different_resource_boolean)).isEqualTo(false);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -357,6 +357,7 @@ public void testMultiOrientation_explicitLandscape() throws Exception {
   }
 
   @Test
+  @Config(qualifiers = "w0dp")
   public void testSetContentViewByItemResource() throws Exception {
     Activity activity = buildActivity(Activity.class).create().get();
     activity.setContentView(R.layout.main_layout);

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -219,6 +219,7 @@ public static final class layout {
     public static final int ordinal_scrollbar = 0x10625;
     public static final int custom_layout5 = 0x10626;
     public static final int custom_layout6 = 0x10627;
+    public static final int layout_smallest_width = 0x10628;
   }
 
   public static final class anim {

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -63,8 +63,7 @@ public void setStaticValue_shouldIgnoreFinalModifier() {
   @Test
   @Config(qualifiers = "fr")
   public void internalBeforeTest_testValuesResQualifiers() {
-    String expectedQualifiers = "fr" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo(expectedQualifiers);
+    assertThat(RuntimeEnvironment.getQualifiers()).contains("fr");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -63,8 +63,7 @@ public void setStaticValue_shouldIgnoreFinalModifier() {
   @Test
   @Config(qualifiers = "fr")
   public void internalBeforeTest_testValuesResQualifiers() {
-    String expectedQualifiers = "fr" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
-    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo(expectedQualifiers);
+    assertThat(RuntimeEnvironment.getQualifiers()).contains("fr");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -219,7 +219,7 @@ public static final class layout {
     public static final int ordinal_scrollbar = 0x10625;
     public static final int custom_layout5 = 0x10626;
     public static final int custom_layout6 = 0x10627;
-    public static final int layout_320_smallest_width = 0x10628;
+    public static final int layout_smallest_width = 0x10628;
   }
 
   public static final class anim {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -219,6 +219,7 @@ public static final class layout {
     public static final int ordinal_scrollbar = 0x10625;
     public static final int custom_layout5 = 0x10626;
     public static final int custom_layout6 = 0x10627;
+    public static final int layout_320_smallest_width = 0x10628;
   }
 
   public static final class anim {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -219,6 +219,7 @@ public static final class layout {
     public static final int ordinal_scrollbar = 0x10625;
     public static final int custom_layout5 = 0x10626;
     public static final int custom_layout6 = 0x10627;
+    public static final int layout_320_smallest_width = 0x10628;
   }
 
   public static final class anim {

File: robolectric/src/test/java/org/robolectric/R.java
Patch:
@@ -259,6 +259,7 @@ public static final class attr {
     public static final int sugarinessPercent = 0x10a10;
     public static final int numColumns = 0x10a11;
     public static final int sugaryScale = 0x10a12;
+    public static final int selectableItemBackground = 0x10a13;
   }
 
   public static final class menu {

File: robolectric/src/main/java/org/robolectric/util/ComponentController.java
Patch:
@@ -11,7 +11,7 @@
 
 public abstract class ComponentController<C extends ComponentController<C, T>, T> {
   protected final C myself;
-  protected final T component;
+  protected T component;
   protected final ShadowLooperAdapter shadowMainLooper;
 
   protected Intent intent;

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -50,10 +50,10 @@ public void parseManifest_shouldReadContentProviders() throws Exception {
     assertThat(config.getContentProviders()).hasSize(2);
 
     assertThat(config.getContentProviders().get(0).getClassName()).isEqualTo("org.robolectric.tester.FullyQualifiedClassName");
-    assertThat(config.getContentProviders().get(0).getAuthority()).isEqualTo("org.robolectric");
+    assertThat(config.getContentProviders().get(0).getAuthority()).isEqualTo("org.robolectric.authority1");
 
     assertThat(config.getContentProviders().get(1).getClassName()).isEqualTo("org.robolectric.tester.PartiallyQualifiedClassName");
-    assertThat(config.getContentProviders().get(1).getAuthority()).isEqualTo("org.robolectric");
+    assertThat(config.getContentProviders().get(1).getAuthority()).isEqualTo("org.robolectric.authority2");
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContentResolverTest.java
Patch:
@@ -683,7 +683,7 @@ public void shouldUnregisterMultipleContentObservers() throws Exception {
   @Test
   public void getProvider_shouldCreateProviderFromManifest() {
     AndroidManifest manifest = ShadowApplication.getInstance().getAppManifest();
-    ContentProviderData testProviderData = new ContentProviderData("org.robolectric.shadows.ShadowContentResolverTest$TestContentProvider", AUTHORITY);
+    ContentProviderData testProviderData = new ContentProviderData("org.robolectric.shadows.ShadowContentResolverTest$TestContentProvider", null, AUTHORITY);
     try {
       manifest.getContentProviders().add(testProviderData);
       assertThat(ShadowContentResolver.getProvider(Uri.parse("content://" + AUTHORITY + "/shadows"))).isNotNull();
@@ -702,7 +702,7 @@ public void getProvider_shouldNotReturnAnyProviderWhenManifestIsNull() {
   @Test
   public void getProvider_shouldSetAuthority() throws RemoteException {
     AndroidManifest manifest = ShadowApplication.getInstance().getAppManifest();
-    ContentProviderData testProviderData = new ContentProviderData("org.robolectric.shadows.ShadowContentResolverTest$TestContentProvider", AUTHORITY);
+    ContentProviderData testProviderData = new ContentProviderData("org.robolectric.shadows.ShadowContentResolverTest$TestContentProvider", null, AUTHORITY);
     try {
       manifest.getContentProviders().add(testProviderData);
       Uri uri = Uri.parse("content://" + AUTHORITY + "/shadows");

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -66,7 +66,7 @@ public interface RobolectricPackageManager {
 
   void addPackage(String packageName);
 
-  void addManifest(AndroidManifest androidManifest);
+  void addManifest(AndroidManifest androidManifest, int labelRes);
 
   void removePackage(String packageName);
 

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -66,7 +66,7 @@ public interface RobolectricPackageManager {
 
   void addPackage(String packageName);
 
-  void addManifest(AndroidManifest androidManifest);
+  void addManifest(AndroidManifest androidManifest, int labelRes);
 
   void removePackage(String packageName);
 

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -88,9 +88,9 @@ public interface RobolectricPackageManager {
 
   void setNameForUid(int uid, String name);
 
-  void setPackagesForCallingUid(String[] packagesForCallingUid);
+  void setPackagesForCallingUid(String... packagesForCallingUid);
 
-  void setPackagesForUid(int uid, String[] packagesForCallingUid);
+  void setPackagesForUid(int uid, String... packagesForCallingUid);
 
   class ComponentState {
     public int newState;

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -749,11 +749,11 @@ public String getNameForUid(int uid) {
     return namesForUid.get(uid);
   }
 
-  public void setPackagesForCallingUid(String[] packagesForCallingUid) {
+  public void setPackagesForCallingUid(String... packagesForCallingUid) {
     setPackagesForUid(Binder.getCallingUid(), packagesForCallingUid);
   }
 
-  public void setPackagesForUid(int uid, String[] packagesForCallingUid) {
+  public void setPackagesForUid(int uid, String... packagesForCallingUid) {
     this.packagesForUid.put(uid, packagesForCallingUid);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -553,7 +553,7 @@ public List<BroadcastReceiverData> getBroadcastReceivers() {
 
   public List<ServiceData> getServices() {
     parseAndroidManifest();
-    return new ArrayList<ServiceData>(serviceDatas.values());
+    return new ArrayList<>(serviceDatas.values());
   }
 
   public ServiceData getServiceData(String serviceClassName) {

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -3,8 +3,6 @@
 import android.app.Application;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -67,7 +65,6 @@ public void shouldRegisterReceiversFromTheManifest() throws Exception {
     assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
   }
 
-  @Ignore("https://github.com/robolectric/robolectric/issues/2376")
   @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
   @Test public void shouldRegisterActivitiesFromManifestInPackageManager() throws Exception {
     Application application = RuntimeEnvironment.application;

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -3,8 +3,6 @@
 import android.app.Application;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -67,7 +65,6 @@ public void shouldRegisterReceiversFromTheManifest() throws Exception {
     assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
   }
 
-  @Ignore("https://github.com/robolectric/robolectric/issues/2376")
   @Config(manifest = "src/test/resources/TestAndroidManifestForActivities.xml")
   @Test public void shouldRegisterActivitiesFromManifestInPackageManager() throws Exception {
     Application application = RuntimeEnvironment.application;

File: robolectric-resources/src/main/java/org/robolectric/res/ResName.java
Patch:
@@ -41,7 +41,7 @@ public ResName(@NotNull String fullyQualifiedName) {
   }
 
   /**
-   * Returns null if the resource could not be qualified.
+   * @return null if the resource could not be qualified.
    */
   public static String qualifyResourceName(@NotNull String possiblyQualifiedResourceName, String defaultPackageName, String defaultType) {
     ResName resName = qualifyResName(possiblyQualifiedResourceName, defaultPackageName, defaultType);

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -96,7 +96,7 @@ protected DependencyResolver getJarResolver() {
         }
       }
 
-      URL buildPathPropertiesUrl = getClass().getClassLoader().getResource("robolectric-build-paths.properties");
+      URL buildPathPropertiesUrl = getClass().getClassLoader().getResource("robolectric-deps.properties");
       if (buildPathPropertiesUrl != null) {
         try {
           Logger.info("Using Robolectric classes from %s", buildPathPropertiesUrl.getPath());
@@ -106,7 +106,7 @@ protected DependencyResolver getJarResolver() {
           properties.load(stream);
           stream.close();
 
-          dependencyResolver = new LocalBuildResolver(properties, dependencyResolver);
+          dependencyResolver = new PropertiesDependencyResolver(properties, dependencyResolver);
         } catch (IOException e) {
           throw new RuntimeException("couldn't read " + buildPathPropertiesUrl, e);
         }

File: robolectric/src/main/java/org/robolectric/internal/dependency/PropertiesDependencyResolver.java
Patch:
@@ -7,11 +7,11 @@
 import java.util.List;
 import java.util.Properties;
 
-public class LocalBuildResolver implements DependencyResolver {
+public class PropertiesDependencyResolver implements DependencyResolver {
   private final Properties properties;
   private DependencyResolver delegate;
 
-  public LocalBuildResolver(Properties properties, DependencyResolver dependencyResolver) {
+  public PropertiesDependencyResolver(Properties properties, DependencyResolver dependencyResolver) {
     this.properties = properties;
     delegate = dependencyResolver;
   }

File: robolectric/src/test/java/org/robolectric/internal/bytecode/RealApisTest.java
Patch:
@@ -15,7 +15,7 @@ public class RealApisTest {
   @Test
   @Config(shadows = {ShimmeryShadowPony.class})
   public void whenShadowHandlerIsInRealityBasedMode_shouldNotCallRealForUnshadowedMethod() throws Exception {
-    assertEquals("Off I saunter to the salon!", new Pony("abc").saunter("the salon"));
+    assertEquals("Off I saunter to the salon!", new Pony().saunter("the salon"));
   }
 
   @Implements(Pony.class)

File: robolectric/src/test/java/org/robolectric/internal/dependency/PropertiesDependencyResolverTest.java
Patch:
@@ -10,17 +10,17 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-public class LocalBuildResolverTest {
+public class PropertiesDependencyResolverTest {
 
-  private LocalBuildResolver resolver;
+  private PropertiesDependencyResolver resolver;
   private Properties properties;
   private DependencyResolver mock;
 
   @Before
   public void setUp() throws Exception {
     properties = new Properties();
     mock = mock(DependencyResolver.class);
-    resolver = new LocalBuildResolver(properties, mock);
+    resolver = new PropertiesDependencyResolver(properties, mock);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -37,7 +37,7 @@ public void formatDateTime_withCurrentYear_worksSinceM() {
     final int currentYear = calendar.get(Calendar.YEAR);
     final long millisAtStartOfYear = getMillisAtStartOfYear();
 
-    String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_NUMERIC_DATE);
+    String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_NUMERIC_DATE);
     assertThat(actual).isEqualTo("1/1/" + currentYear);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -37,7 +37,7 @@ public void formatDateTime_withCurrentYear_worksSinceM() {
     final int currentYear = calendar.get(Calendar.YEAR);
     final long millisAtStartOfYear = getMillisAtStartOfYear();
 
-    String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_NUMERIC_DATE);
+    String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_NUMERIC_DATE);
     assertThat(actual).isEqualTo("1/1/" + currentYear);
   }
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import android.content.res.Resources;
 import org.jetbrains.annotations.NotNull;
 import org.robolectric.res.builder.XmlBlock;
 

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import android.content.res.Resources;
 import org.jetbrains.annotations.NotNull;
 import org.robolectric.res.builder.XmlBlock;
 

File: robolectric-resources/src/main/java/org/robolectric/manifest/AndroidManifest.java
Patch:
@@ -546,7 +546,7 @@ public List<BroadcastReceiverData> getBroadcastReceivers() {
 
   public List<ServiceData> getServices() {
     parseAndroidManifest();
-    return new ArrayList<ServiceData>(serviceDatas.values());
+    return new ArrayList<>(serviceDatas.values());
   }
 
   public ServiceData getServiceData(String serviceClassName) {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutParamsTest.java
Patch:
@@ -26,6 +26,6 @@ public void constructor_canTakeSourceLayoutParams() throws Exception {
     assertThat(layoutParams1.height).isEqualTo(456);
     assertThat(layoutParams1.width).isEqualTo(123);
     assertThat(layoutParams2.height).isEqualTo(456);
-    assertThat(layoutParams1.width).isEqualTo(123);
+    assertThat(layoutParams2.width).isEqualTo(123);
   }
 }

File: robolectric-annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -27,8 +27,8 @@
   /**
    * TODO(vnayar): Create named constants for default values instead of magic numbers.
    * Array named contants must be avoided in order to dodge a JDK 1.7 bug.
-   *   error: annotation Config is missing value for the attribute <clinit>
-   * {@link https://bugs.openjdk.java.net/browse/JDK-8013485}
+   *   error: annotation Config is missing value for the attribute &lt;clinit&gt;
+   * See <a href="https://bugs.openjdk.java.net/browse/JDK-8013485">JDK-8013485</a>.
    */
   String NONE = "--none";
   String DEFAULT_MANIFEST = "--default";

File: robolectric-resources/src/main/java/org/robolectric/res/Attribute.java
Patch:
@@ -3,7 +3,7 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * @deprecated Rather than use {@link RoboAttributeSet} and {@link Attribute} please use {@link Robolectric#buildAttributeSet} instead.
+ * @deprecated Rather than use {@link org.robolectric.fakes.RoboAttributeSet} and {@link Attribute} please use {@link Robolectric#buildAttributeSet} instead.
  * This class will be removed in the next version of Robolectric.
  */
 @Deprecated

File: robolectric/src/main/java/org/robolectric/internal/bytecode/MethodSignature.java
Patch:
@@ -33,7 +33,7 @@ public static MethodSignature parse(String internalString) {
 
   @Override
   public String toString() {
-    return className + "." + methodName + "(" + Join.join(", ", paramTypes) + ")";
+    return className + "." + methodName + "(" + Join.join(", ", (Object[]) paramTypes) + ")";
   }
 
   boolean matches(String className, String methodName) {

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/RobolectricProcessorTest.java
Patch:
@@ -28,12 +28,12 @@ public class RobolectricProcessorTest {
   }
 	
   @Test
-  public void roboProcessor_supportsPackageOption() {
+  public void robolectricProcessor_supportsPackageOption() {
     ASSERT.that(new RobolectricProcessor().getSupportedOptions()).contains(PACKAGE_OPT);
   }
   
   @Test
-  public void roboProcessor_supportsShouldInstrumentPackageOption() {
+  public void robolectricProcessor_supportsShouldInstrumentPackageOption() {
     ASSERT.that(
         new RobolectricProcessor().getSupportedOptions()).contains(SHOULD_INSTRUMENT_PKG_OPT);
   }

File: robolectric/src/main/java/org/robolectric/internal/SdkConfig.java
Patch:
@@ -60,7 +60,7 @@ public DependencyJar getAndroidSdkDependency() {
   }
 
   public DependencyJar getCoreShadowsDependency() {
-    return createDependency("org.robolectric", "shadows-core", ROBOLECTRIC_VERSION, Integer.toString(apiLevel));
+    return createDependency("org.robolectric", "shadows-core-v" + apiLevel, ROBOLECTRIC_VERSION, null);
   }
 
   @Override

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -3,6 +3,7 @@
 import android.os.Build;
 import android.text.format.DateUtils;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RuntimeEnvironment;

File: robolectric/src/main/java/org/robolectric/internal/bytecode/MethodSignature.java
Patch:
@@ -33,7 +33,7 @@ public static MethodSignature parse(String internalString) {
 
   @Override
   public String toString() {
-    return className + "." + methodName + "(" + Join.join(", ", paramTypes) + ")";
+    return className + "." + methodName + "(" + Join.join(", ", (Object[]) paramTypes) + ")";
   }
 
   boolean matches(String className, String methodName) {

File: robolectric/src/test/java/org/robolectric/res/builder/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -29,10 +29,10 @@ public void canSustainConcurrentModification() {
     final DefaultPackageManager.IntentComparator intentComparator = new DefaultPackageManager.IntentComparator();
 
     Intent mockedIntent1 = mock(Intent.class);
-    when(mockedIntent1.getAction()).thenReturn("actionstring0", null);
+    when(mockedIntent1.getAction()).thenReturn("actionstring0", (String) null);
 
     Intent mockedIntent2 = mock(Intent.class);
-    when(mockedIntent2.getAction()).thenReturn("actionstring1", null);
+    when(mockedIntent2.getAction()).thenReturn("actionstring1", (String) null);
 
     Assertions.assertThat(intentComparator.compare(mockedIntent1, mockedIntent2)).isEqualTo(-1);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.util.AttributeSet;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,7 +20,6 @@
 import java.io.IOException;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 
 @RunWith(TestRunners.MultiApiWithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAppWidgetManagerTest.java
Patch:
@@ -78,10 +78,10 @@ public void shouldReplaceLayoutIfAndOnlyIfLayoutIdIsDifferent() throws Exception
     View originalWidgetView = shadowAppWidgetManager.getViewFor(widgetId);
     assertContains("Main Layout", originalWidgetView);
 
-    appWidgetManager.updateAppWidget(widgetId, new RemoteViews("org.robolectric.default", R.layout.main));
+    appWidgetManager.updateAppWidget(widgetId, new RemoteViews(RuntimeEnvironment.application.getPackageName(), R.layout.main));
     assertSame(originalWidgetView, shadowAppWidgetManager.getViewFor(widgetId));
 
-    appWidgetManager.updateAppWidget(widgetId, new RemoteViews("org.robolectric.default", R.layout.media));
+    appWidgetManager.updateAppWidget(widgetId, new RemoteViews(RuntimeEnvironment.application.getPackageName(), R.layout.media));
     assertNotSame(originalWidgetView, shadowAppWidgetManager.getViewFor(widgetId));
 
     View mediaWidgetView = shadowAppWidgetManager.getViewFor(widgetId);

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -6,7 +6,6 @@
 import android.content.pm.*;
 import android.graphics.drawable.Drawable;
 import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.res.ResourceLoader;
 
 import java.util.List;
 
@@ -67,7 +66,7 @@ public interface RobolectricPackageManager {
 
   void addPackage(String packageName);
 
-  void addManifest(AndroidManifest androidManifest, ResourceLoader loader);
+  void addManifest(AndroidManifest androidManifest);
 
   void removePackage(String packageName);
 

File: robolectric-shadows/shadows-httpclient/src/test/java/org/robolectric/util/TestRunnerWithManifest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.runners.model.InitializationError;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
@@ -27,7 +28,7 @@ private static boolean hasTestManifest(File testDir) {
   }
 
   @Override
-  protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir, String packageName) {
+  protected AndroidManifest getAppManifest(Config config) {
     return new AndroidManifest(resourceFile("AndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
   }
 }

File: robolectric-shadows/shadows-maps/src/test/java/org/robolectric/util/TestRunnerWithManifest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.runners.model.InitializationError;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
@@ -27,7 +28,7 @@ private static boolean hasTestManifest(File testDir) {
   }
 
   @Override
-  protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir, String packageName) {
+  protected AndroidManifest getAppManifest(Config config) {
     return new AndroidManifest(resourceFile("AndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
   }
 }

File: robolectric-shadows/shadows-support-v4/src/test/java/org/robolectric/util/TestRunnerWithManifest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.runners.model.InitializationError;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 import org.robolectric.res.FsFile;
@@ -27,7 +28,7 @@ private static boolean hasTestManifest(File testDir) {
   }
 
   @Override
-  protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir, String packageName) {
+  protected AndroidManifest getAppManifest(Config config) {
     return new AndroidManifest(resourceFile("AndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
   }
 }

File: robolectric/src/test/java/org/robolectric/LibraryHandlingTest.java
Patch:
@@ -1,15 +1,16 @@
 package org.robolectric;
 
+import static org.junit.Assert.assertEquals;
+
 import android.content.res.Resources;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 import org.robolectric.manifest.AndroidManifest;
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-
 @RunWith(TestRunners.WithDefaults.class)
 public class LibraryHandlingTest {
   private final Resources resources = RuntimeEnvironment.application.getResources();

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric;
 
 import android.app.Application;
+
 import org.junit.Test;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
@@ -47,7 +48,7 @@ public static class StateHolder {
   @Test public void whenNoAppManifest_shouldRunThingsInTheRightOrder() throws Exception {
     StateHolder.transcript = new Transcript();
     assertNoFailures(run(new Runner(SimpleTest.class) {
-      @Override protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir, String packageName) {
+      @Override protected AndroidManifest getAppManifest(Config config) {
         return null;
       }
     }));
@@ -106,7 +107,7 @@ public Runner(Class<?> testClass) throws InitializationError {
     }
 
     @Override
-    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir, String packageName) {
+    protected AndroidManifest getAppManifest(Config config) {
       return new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
     }
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -152,7 +152,7 @@ public void testMoveBackwards() throws Exception {
     assertThat(cursor.moveToNext()).isTrue();
     assertThat(cursor.getPosition()).isEqualTo(2);
 
-    assertThat(cursor.moveToPosition(1));
+    assertThat(cursor.moveToPosition(1)).isTrue();
     assertThat(cursor.getPosition()).isEqualTo(1);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -542,7 +542,7 @@ public void testReplaceIsReplacing() throws Exception {
         assertThat(firstCursor.moveToNext()).isTrue();
         long secondId = database.replaceOrThrow("table_name", null, valuesB);
         Cursor secondCursor = executeQuery(query + secondId);
-        assertThat(secondCursor.moveToNext());
+        assertThat(secondCursor.moveToNext()).isTrue();
 
         assertThat(firstId).isEqualTo(id);
         assertThat(secondId).isEqualTo(id);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowIntentFilterTest.java
Patch:
@@ -15,7 +15,7 @@ public void copyConstructorTest() throws Exception {
     String action = "test";
     IntentFilter intentFilter = new IntentFilter(action);
     IntentFilter copy = new IntentFilter(intentFilter);
-    assertThat(copy.hasAction("test"));
+    assertThat(copy.hasAction("test")).isTrue();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutParamsTest.java
Patch:
@@ -26,6 +26,6 @@ public void constructor_canTakeSourceLayoutParams() throws Exception {
     assertThat(layoutParams1.height).isEqualTo(456);
     assertThat(layoutParams1.width).isEqualTo(123);
     assertThat(layoutParams2.height).isEqualTo(456);
-    assertThat(layoutParams1.width).isEqualTo(123);
+    assertThat(layoutParams2.width).isEqualTo(123);
   }
 }

File: robolectric-resources/src/main/java/org/robolectric/ShadowsAdapter.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.app.Activity;
 import android.app.Application;
-import android.content.res.AssetManager;
 import android.content.res.Configuration;
+
 import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.ResourceLoader;
 import org.robolectric.util.Scheduler;
@@ -32,8 +32,6 @@ public interface ShadowsAdapter {
 
   void bind(Application application, AndroidManifest appManifest, ResourceLoader resourceLoader);
 
-  void setAssetsQualifiers(AssetManager assets, String qualifiers);
-
   ResourceLoader getResourceLoader();
 
   interface ShadowActivityAdapter {

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -159,7 +159,6 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
       ReflectionHelpers.setField(loadedApk, "mApplication", application);
 
       appResources.updateConfiguration(configuration, appResources.getDisplayMetrics());
-      shadowsAdapter.setAssetsQualifiers(appResources.getAssets(), qualifiers);
 
       application.onCreate();
     }

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.robolectric.annotation.Config;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.robolectric.Shadows.shadowOf;
 
 @Config(qualifiers = "en")
 @RunWith(TestRunners.WithDefaults.class)
@@ -14,13 +13,13 @@ public class QualifiersTest {
   @Test
   public void shouldGetFromClass() throws Exception {
     String expectedQualifiers = "en" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
-    assertThat(shadowOf(RuntimeEnvironment.application.getAssets()).getQualifiers()).isEqualTo(expectedQualifiers);
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo(expectedQualifiers);
   }
 
   @Test @Config(qualifiers = "fr")
   public void shouldGetFromMethod() throws Exception {
     String expectedQualifiers = "fr" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
-    assertThat(shadowOf(RuntimeEnvironment.application.getAssets()).getQualifiers()).isEqualTo(expectedQualifiers);
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo(expectedQualifiers);
   }
 
   @Test @Config(qualifiers = "de")

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.app.Application;
 import android.content.res.Resources;
-
 import android.os.Build;
+
 import org.assertj.core.api.Assertions;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -64,7 +64,7 @@ public void setStaticValue_shouldIgnoreFinalModifier() {
   @Config(qualifiers = "fr")
   public void internalBeforeTest_testValuesResQualifiers() {
     String expectedQualifiers = "fr" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
-    assertThat(shadowOf(RuntimeEnvironment.application.getAssets()).getQualifiers()).isEqualTo(expectedQualifiers);
+    assertThat(RuntimeEnvironment.getQualifiers()).isEqualTo(expectedQualifiers);
   }
 
   @Test

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -87,6 +87,8 @@ public interface RobolectricPackageManager {
 
   void reset();
 
+  void setNameForUid(int uid, String name);
+
   class ComponentState {
     public int newState;
     public int flags;

File: robolectric-resources/src/main/java/org/robolectric/res/XResourceLoader.java
Patch:
@@ -24,7 +24,7 @@ protected XResourceLoader(ResourceIndex resourceIndex) {
 
   abstract void doInitialize();
 
-  void initialize() {
+  synchronized void initialize() {
     if (isInitialized) return;
     doInitialize();
     isInitialized = true;

File: robolectric/src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -39,7 +39,7 @@ protected void setUpApplicationState(Method method, ParallelUniverseInterface pa
   }
 
   public static class WithDefaults extends RobolectricTestRunner {
-    public static final String SDK_TARGETED_BY_MANIFEST = "-v21";
+    public static final String SDK_TARGETED_BY_MANIFEST = "-v23";
     
     public WithDefaults(Class<?> testClass) throws InitializationError {
       super(testClass);

File: robolectric/src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -39,7 +39,7 @@ protected void setUpApplicationState(Method method, ParallelUniverseInterface pa
   }
 
   public static class WithDefaults extends RobolectricTestRunner {
-    public static final String SDK_TARGETED_BY_MANIFEST = "-v21";
+    public static final String SDK_TARGETED_BY_MANIFEST = "-v23";
     
     public WithDefaults(Class<?> testClass) throws InitializationError {
       super(testClass);

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -113,6 +113,8 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
     Context systemContextImpl = ReflectionHelpers.callStaticMethod(contextImplClass, "createSystemContext", ClassParameter.from(activityThreadClass, activityThread));
 
     final Application application = (Application) testLifecycle.createApplication(method, appManifest, config);
+    RuntimeEnvironment.application = application;
+
     if (application != null) {
       String packageName = appManifest != null ? appManifest.getPackageName() : null;
       if (packageName == null) packageName = DEFAULT_PACKAGE_NAME;
@@ -150,7 +152,6 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
       appResources.updateConfiguration(configuration, appResources.getDisplayMetrics());
       shadowsAdapter.setAssetsQualifiers(appResources.getAssets(), qualifiers);
 
-      RuntimeEnvironment.application = application;
       application.onCreate();
     }
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -72,7 +72,7 @@ public static Bitmap decodeResource(Resources res, int id) {
   }
 
   private static String getResourceName(int id) {
-    return Shadows.shadowOf(RuntimeEnvironment.application).getResourceLoader().getNameForId(id);
+    return Shadows.shadowOf(RuntimeEnvironment.application.getAssets()).getResourceLoader().getNameForId(id);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -292,7 +292,7 @@ protected void dumpFirstPart(PrintStream out, int indent) {
 
   protected void dumpAttributes(PrintStream out) {
     if (realView.getId() > 0) {
-      dumpAttribute(out, "id", shadowOf(realView.getContext()).getResourceLoader().getNameForId(realView.getId()));
+      dumpAttribute(out, "id", shadowOf(realView.getContext().getAssets()).getResourceLoader().getNameForId(realView.getId()));
     }
 
     switch (realView.getVisibility()) {

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.robolectric.shadows.ShadowApplication;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ResourceLoaderTest {
@@ -57,7 +58,7 @@ private void checkForPollutionHelper() {
 
   @Test
   public void shouldMakeInternalResourcesAvailable() throws Exception {
-    ResourceLoader resourceLoader = ShadowApplication.getInstance().getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(RuntimeEnvironment.application.getAssets()).getResourceLoader();
     ResName internalResource = new ResName("android", "string", "badPin");
     Integer resId = resourceLoader.getResourceIndex().getResourceId(internalResource);
     assertThat(resId).isNotNull();

File: robolectric/src/test/java/org/robolectric/res/RoboAttributeSetTest.java
Patch:
@@ -26,7 +26,7 @@ public class RoboAttributeSetTest {
   @Before
   public void setUp() throws Exception {
     resources = RuntimeEnvironment.application.getResources();
-    resourceLoader = shadowOf(resources).getResourceLoader();
+    resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
   }
 
   @Test
@@ -158,7 +158,7 @@ public void getAttributeValue_byIdWithReference_shouldReturnValueFromAttribute()
   @Test
   public void getAttributeIntValue_shouldReturnValueFromAttribute() throws Exception {
     roboAttributeSet = new RoboAttributeSet(asList(new Attribute(TEST_PACKAGE + ":attr/sugarinessPercent", "100", TEST_PACKAGE)),
-        shadowOf(resources).getResourceLoader());
+        shadowOf(resources.getAssets()).getResourceLoader());
     assertThat(roboAttributeSet.getAttributeIntValue(TEST_PACKAGE_NS, "sugarinessPercent", 0)).isEqualTo(100);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -33,7 +33,7 @@ public class ShadowEditTextTest {
   public void setup() {
     List<Attribute> attributes = new ArrayList<>();
     attributes.add(new Attribute("android:attr/maxLength", "5", R.class.getPackage().getName()));
-    RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, shadowOf(application.getResources()).getResourceLoader());
+    RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, shadowOf(application.getResources().getAssets()).getResourceLoader());
     editText = new EditText(application, attributeSet);
   }
 
@@ -120,15 +120,15 @@ private int anyInteger() {
 
   private AttributeSet attributeSetWithMaxLength(int maxLength) {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
     return new RoboAttributeSet(
         asList(new Attribute(new ResName("android", "attr", "maxLength"), maxLength + "", "android")),
         resourceLoader);
   }
 
   private AttributeSet attributeSetWithoutMaxLength() {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
     return new RoboAttributeSet(Arrays.<Attribute>asList(),
         resourceLoader);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -441,7 +441,7 @@ private View inflate(String packageName, String layoutName, String qualifiers) {
   public View inflate(Context context, String packageName, String key, ViewGroup parent, String qualifiers) {
     ResName resName = new ResName(packageName + ":layout/" + key);
     shadowOf(context.getAssets()).setQualifiers(qualifiers);
-    ResourceLoader resourceLoader = shadowOf(context.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(context.getResources().getAssets()).getResourceLoader();
     Integer layoutResId = resourceLoader.getResourceIndex().getResourceId(resName);
     if (layoutResId == null) throw new AssertionError("no such resource " + resName);
     return LayoutInflater.from(context).inflate(layoutResId, parent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressBarTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() {
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "max"), "100", TestUtil.TEST_PACKAGE),
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "indeterminate"), "false", TestUtil.TEST_PACKAGE),
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "indeterminateOnly"), "false", TestUtil.TEST_PACKAGE)
-    ), shadowOf(application.getResources()).getResourceLoader());
+    ), shadowOf(application.getResources().getAssets()).getResourceLoader());
 
     progressBar = new ProgressBar(application, attrs);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -102,7 +102,7 @@ public class ShadowThemeTest {
 
   @Test public void shouldInheritThemeValuesFromImplicitParents() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style style = ShadowAssetManager.resolveStyle(resourceLoader,
         null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Widget.AnotherTheme.Button.Blarf"), "");
@@ -112,7 +112,7 @@ public class ShadowThemeTest {
 
   @Test public void whenAThemeHasExplicitlyEmptyParentAttr_shouldHaveNoParent() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style style = ShadowAssetManager.resolveStyle(resourceLoader,
         null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Theme.MyTheme"), "");
@@ -122,7 +122,7 @@ public class ShadowThemeTest {
 
   @Test public void shouldApplyParentStylesFromAttrs() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style theme = ShadowAssetManager.resolveStyle(resourceLoader, null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Theme.AnotherTheme"), "");
     Style style = ShadowAssetManager.resolveStyle(resourceLoader, theme,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() throws Exception {
     transcript = new Transcript();
     view = new View(RuntimeEnvironment.application);
     resources = RuntimeEnvironment.application.getResources();
-    resourceLoader = shadowOf(resources).getResourceLoader();
+    resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -56,7 +56,7 @@ public void inflate_shouldReplaceOriginalWithLayout() throws Exception {
   @Test
   public void shouldApplyAttributes() throws Exception {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
 
     ViewStub viewStub = new ViewStub(ctxt,
         new RoboAttributeSet(asList(

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -72,7 +72,7 @@ public static Bitmap decodeResource(Resources res, int id) {
   }
 
   private static String getResourceName(int id) {
-    return Shadows.shadowOf(RuntimeEnvironment.application).getResourceLoader().getNameForId(id);
+    return Shadows.shadowOf(RuntimeEnvironment.application.getAssets()).getResourceLoader().getNameForId(id);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -292,7 +292,7 @@ protected void dumpFirstPart(PrintStream out, int indent) {
 
   protected void dumpAttributes(PrintStream out) {
     if (realView.getId() > 0) {
-      dumpAttribute(out, "id", shadowOf(realView.getContext()).getResourceLoader().getNameForId(realView.getId()));
+      dumpAttribute(out, "id", shadowOf(realView.getContext().getAssets()).getResourceLoader().getNameForId(realView.getId()));
     }
 
     switch (realView.getVisibility()) {

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.robolectric.shadows.ShadowApplication;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ResourceLoaderTest {
@@ -57,7 +58,7 @@ private void checkForPollutionHelper() {
 
   @Test
   public void shouldMakeInternalResourcesAvailable() throws Exception {
-    ResourceLoader resourceLoader = ShadowApplication.getInstance().getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(RuntimeEnvironment.application.getAssets()).getResourceLoader();
     ResName internalResource = new ResName("android", "string", "badPin");
     Integer resId = resourceLoader.getResourceIndex().getResourceId(internalResource);
     assertThat(resId).isNotNull();

File: robolectric/src/test/java/org/robolectric/res/RoboAttributeSetTest.java
Patch:
@@ -26,7 +26,7 @@ public class RoboAttributeSetTest {
   @Before
   public void setUp() throws Exception {
     resources = RuntimeEnvironment.application.getResources();
-    resourceLoader = shadowOf(resources).getResourceLoader();
+    resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
   }
 
   @Test
@@ -158,7 +158,7 @@ public void getAttributeValue_byIdWithReference_shouldReturnValueFromAttribute()
   @Test
   public void getAttributeIntValue_shouldReturnValueFromAttribute() throws Exception {
     roboAttributeSet = new RoboAttributeSet(asList(new Attribute(TEST_PACKAGE + ":attr/sugarinessPercent", "100", TEST_PACKAGE)),
-        shadowOf(resources).getResourceLoader());
+        shadowOf(resources.getAssets()).getResourceLoader());
     assertThat(roboAttributeSet.getAttributeIntValue(TEST_PACKAGE_NS, "sugarinessPercent", 0)).isEqualTo(100);
   }
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -33,7 +33,7 @@ public class ShadowEditTextTest {
   public void setup() {
     List<Attribute> attributes = new ArrayList<>();
     attributes.add(new Attribute("android:attr/maxLength", "5", R.class.getPackage().getName()));
-    RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, shadowOf(application.getResources()).getResourceLoader());
+    RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, shadowOf(application.getResources().getAssets()).getResourceLoader());
     editText = new EditText(application, attributeSet);
   }
 
@@ -120,15 +120,15 @@ private int anyInteger() {
 
   private AttributeSet attributeSetWithMaxLength(int maxLength) {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
     return new RoboAttributeSet(
         asList(new Attribute(new ResName("android", "attr", "maxLength"), maxLength + "", "android")),
         resourceLoader);
   }
 
   private AttributeSet attributeSetWithoutMaxLength() {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
     return new RoboAttributeSet(Arrays.<Attribute>asList(),
         resourceLoader);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowLayoutInflaterTest.java
Patch:
@@ -441,7 +441,7 @@ private View inflate(String packageName, String layoutName, String qualifiers) {
   public View inflate(Context context, String packageName, String key, ViewGroup parent, String qualifiers) {
     ResName resName = new ResName(packageName + ":layout/" + key);
     shadowOf(context.getAssets()).setQualifiers(qualifiers);
-    ResourceLoader resourceLoader = shadowOf(context.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(context.getResources().getAssets()).getResourceLoader();
     Integer layoutResId = resourceLoader.getResourceIndex().getResourceId(resName);
     if (layoutResId == null) throw new AssertionError("no such resource " + resName);
     return LayoutInflater.from(context).inflate(layoutResId, parent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowProgressBarTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() {
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "max"), "100", TestUtil.TEST_PACKAGE),
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "indeterminate"), "false", TestUtil.TEST_PACKAGE),
         new Attribute(new ResName(TestUtil.SYSTEM_PACKAGE, "attr", "indeterminateOnly"), "false", TestUtil.TEST_PACKAGE)
-    ), shadowOf(application.getResources()).getResourceLoader());
+    ), shadowOf(application.getResources().getAssets()).getResourceLoader());
 
     progressBar = new ProgressBar(application, attrs);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowThemeTest.java
Patch:
@@ -102,7 +102,7 @@ public class ShadowThemeTest {
 
   @Test public void shouldInheritThemeValuesFromImplicitParents() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style style = ShadowAssetManager.resolveStyle(resourceLoader,
         null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Widget.AnotherTheme.Button.Blarf"), "");
@@ -112,7 +112,7 @@ public class ShadowThemeTest {
 
   @Test public void whenAThemeHasExplicitlyEmptyParentAttr_shouldHaveNoParent() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style style = ShadowAssetManager.resolveStyle(resourceLoader,
         null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Theme.MyTheme"), "");
@@ -122,7 +122,7 @@ public class ShadowThemeTest {
 
   @Test public void shouldApplyParentStylesFromAttrs() throws Exception {
     TestActivity activity = buildActivity(TestActivityWithAnotherTheme.class).create().get();
-    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources()).getResourceLoader();
+    ResourceLoader resourceLoader = Shadows.shadowOf(activity.getResources().getAssets()).getResourceLoader();
     Style theme = ShadowAssetManager.resolveStyle(resourceLoader, null,
         new ResName(TestUtil.TEST_PACKAGE, "style", "Theme.AnotherTheme"), "");
     Style style = ShadowAssetManager.resolveStyle(resourceLoader, theme,

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() throws Exception {
     transcript = new Transcript();
     view = new View(RuntimeEnvironment.application);
     resources = RuntimeEnvironment.application.getResources();
-    resourceLoader = shadowOf(resources).getResourceLoader();
+    resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -56,7 +56,7 @@ public void inflate_shouldReplaceOriginalWithLayout() throws Exception {
   @Test
   public void shouldApplyAttributes() throws Exception {
     Resources resources = RuntimeEnvironment.application.getResources();
-    ResourceLoader resourceLoader = shadowOf(resources).getResourceLoader();
+    ResourceLoader resourceLoader = shadowOf(resources.getAssets()).getResourceLoader();
 
     ViewStub viewStub = new ViewStub(ctxt,
         new RoboAttributeSet(asList(

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -86,7 +86,7 @@ public String getShadowContextImplClassName() {
 
   @Override
   public void setSystemResources(ResourceLoader systemResourceLoader) {
-    ShadowResources.setSystemResources(systemResourceLoader);
+    ShadowAssetManager.setSystemResources(systemResourceLoader);
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -200,7 +200,7 @@ public Context getApplicationContext() {
   @Implementation
   public AssetManager getAssets() {
     if (assetManager == null) {
-      assetManager = ShadowAssetManager.bind(newInstanceOf(AssetManager.class), appManifest, resourceLoader);
+      assetManager = new AssetManager();
     }
     return assetManager;
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.res.TypedArray;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -11,7 +12,6 @@
 import org.robolectric.res.Attribute;
 import org.robolectric.res.PackageResourceLoader;
 import org.robolectric.res.ResourceLoader;
-import org.robolectric.util.TestUtil;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -242,7 +242,6 @@ public void deleteFile_shouldReturnFalse() throws IOException {
   @Test
   public void obtainStyledAttributes_shouldExtractAttributesFromAttributeSet() throws Exception {
     ResourceLoader resourceLoader = new PackageResourceLoader(TEST_RESOURCE_PATH);
-    TestUtil.createResourcesFor(resourceLoader);
 
     RoboAttributeSet roboAttributeSet = new RoboAttributeSet(asList(
         new Attribute(TEST_PACKAGE + ":attr/itemType", "ungulate", TEST_PACKAGE),

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -86,7 +86,7 @@ public String getShadowContextImplClassName() {
 
   @Override
   public void setSystemResources(ResourceLoader systemResourceLoader) {
-    ShadowResources.setSystemResources(systemResourceLoader);
+    ShadowAssetManager.setSystemResources(systemResourceLoader);
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -200,7 +200,7 @@ public Context getApplicationContext() {
   @Implementation
   public AssetManager getAssets() {
     if (assetManager == null) {
-      assetManager = ShadowAssetManager.bind(newInstanceOf(AssetManager.class), appManifest, resourceLoader);
+      assetManager = new AssetManager();
     }
     return assetManager;
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowContextTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.res.TypedArray;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -11,7 +12,6 @@
 import org.robolectric.res.Attribute;
 import org.robolectric.res.PackageResourceLoader;
 import org.robolectric.res.ResourceLoader;
-import org.robolectric.util.TestUtil;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -242,7 +242,6 @@ public void deleteFile_shouldReturnFalse() throws IOException {
   @Test
   public void obtainStyledAttributes_shouldExtractAttributesFromAttributeSet() throws Exception {
     ResourceLoader resourceLoader = new PackageResourceLoader(TEST_RESOURCE_PATH);
-    TestUtil.createResourcesFor(resourceLoader);
 
     RoboAttributeSet roboAttributeSet = new RoboAttributeSet(asList(
         new Attribute(TEST_PACKAGE + ":attr/itemType", "ungulate", TEST_PACKAGE),

File: robolectric-shadows/shadows-play-services/src/test/java/org/robolectric/shadows/gms/ShadowGooglePlayServicesUtilTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
+@Config(manifest = Config.NONE, shadows = {ShadowGooglePlayServicesUtil.class})
 public class ShadowGooglePlayServicesUtilTest {
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java
Patch:
@@ -72,7 +72,7 @@ public void shouldSetVideoDuration() throws Exception {
   }
 
   @Test
-  public void shoulDetermineIsPlaying() throws Exception {
+  public void shouldDetermineIsPlaying() throws Exception {
     assertThat(view.isPlaying()).isFalse();
     view.start();
     assertThat(view.isPlaying()).isTrue();

File: robolectric/src/test/java/org/robolectric/shadows/ShadowRemoteViewsTest.java
Patch:
@@ -4,6 +4,7 @@
 import android.app.PendingIntent;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.RemoteViews;
@@ -47,7 +48,7 @@ public void setImageViewBitmap_shouldUpdateView() {
 
     View layout = views.apply(activity, null);
     ImageView image = (ImageView) layout.findViewById(R.id.remote_view_2);
-    assertThat(shadowOf(image).getImageBitmap()).isEqualTo(bitmap);
+    assertThat(((BitmapDrawable) image.getDrawable()).getBitmap()).isEqualTo(bitmap);
   }
 
   @Test

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -16,9 +16,11 @@
 import android.os.Bundle;
 import android.os.PatternMatcher;
 import android.util.Pair;
+
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
+
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.ShadowsAdapter;
 import org.robolectric.manifest.ActivityData;

File: robolectric/src/main/java/org/robolectric/res/builder/StubPackageManager.java
Patch:
@@ -9,20 +9,19 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.ContainerEncryptionParams;
 import android.content.pm.FeatureInfo;
-import android.content.pm.IntentFilterVerificationInfo;
 import android.content.pm.IPackageDataObserver;
 import android.content.pm.IPackageDeleteObserver;
 import android.content.pm.IPackageInstallObserver;
 import android.content.pm.IPackageMoveObserver;
 import android.content.pm.IPackageStatsObserver;
 import android.content.pm.InstrumentationInfo;
+import android.content.pm.IntentFilterVerificationInfo;
 import android.content.pm.KeySet;
 import android.content.pm.ManifestDigest;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageItemInfo;
 import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.MoveCallback;
 import android.content.pm.PermissionGroupInfo;
 import android.content.pm.PermissionInfo;
 import android.content.pm.ProviderInfo;

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InstrumentingClassLoaderTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.internal.bytecode;
 
 import android.os.Build;
+
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.robolectric.RobolectricTestRunner;

File: robolectric/src/test/java/org/robolectric/res/DefaultRobolectricPackageManagerTest.java
Patch:
@@ -18,6 +18,7 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
+
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/test/java/org/robolectric/res/builder/DefaultPackageManagerIntentComparatorTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.robolectric.res.builder;
 
 import android.content.Intent;
-import org.junit.Test;
+
 import org.assertj.core.api.Assertions;
+import org.junit.Test;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 public class DefaultPackageManagerIntentComparatorTest {

File: robolectric-resources/src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -31,7 +31,6 @@ public void add(ResName attrName, Attribute attribute) {
   }
 
   @Override public Attribute getAttrValue(ResName resName) {
-    resName.mustBe("attr");
     Attribute attribute = items.get(resName);
 
     // yuck. hack to work around library package remapping

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -34,10 +34,12 @@ public void formatDateTime_withCurrentYear_worksSinceKitKat() {
       Build.VERSION_CODES.JELLY_BEAN_MR1,
       Build.VERSION_CODES.JELLY_BEAN_MR2})
   public void formatDateTime_withCurrentYear_worksPreKitKat() {
+    Calendar calendar = Calendar.getInstance();
+    final int currentYear = calendar.get(Calendar.YEAR);
     final long millisAtStartOfYear = getMillisAtStartOfYear();
 
     String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_NUMERIC_DATE);
-    assertThat(actual).isEqualTo("1/1/2016");
+    assertThat(actual).isEqualTo("1/1/" + currentYear);
   }
 
   @Test

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDateUtilsTest.java
Patch:
@@ -34,10 +34,12 @@ public void formatDateTime_withCurrentYear_worksSinceKitKat() {
       Build.VERSION_CODES.JELLY_BEAN_MR1,
       Build.VERSION_CODES.JELLY_BEAN_MR2})
   public void formatDateTime_withCurrentYear_worksPreKitKat() {
+    Calendar calendar = Calendar.getInstance();
+    final int currentYear = calendar.get(Calendar.YEAR);
     final long millisAtStartOfYear = getMillisAtStartOfYear();
 
     String actual = DateUtils.formatDateTime(RuntimeEnvironment.application, millisAtStartOfYear, DateUtils.FORMAT_NUMERIC_DATE);
-    assertThat(actual).isEqualTo("1/1/2016");
+    assertThat(actual).isEqualTo("1/1/" + currentYear);
   }
 
   @Test

File: robolectric-resources/src/main/java/org/robolectric/res/Attribute.java
Patch:
@@ -90,7 +90,7 @@ public Attribute(@NotNull ResName resName, @NotNull String value, @NotNull Strin
     if (!resName.type.equals("attr")) throw new IllegalStateException("\"" + resName.getFullyQualifiedName() + "\" unexpected");
 
     this.resName = resName;
-    this.value = value;
+    this.value = value.trim();
     this.contextPackageName = contextPackageName;
   }
 

File: robolectric-utils/src/main/java/org/robolectric/util/AccessibilityUtil.java
Patch:
@@ -107,7 +107,7 @@ public static boolean passesAccessibilityChecksIfEnabled(View view) {
   /**
    * Specify that a specific subset of accessibility checks be run. The subsets are specified based
    * on which Robolectric version particular checks were released with. By default, all checks are
-   * run ({@link ForRobolectricVersion.LATEST}.
+   * run ({@link ForRobolectricVersion}.
    * <p>
    * If you call this method, the value you pass will take precedence over any value in any 
    * annotations. 
@@ -277,4 +277,4 @@ private static AccessibilityCheckPreset convertRoboVersionToA11yTestVersion(
     }
     return preset;
   }  
-}
\ No newline at end of file
+}

File: robolectric-utils/src/main/java/org/robolectric/util/AccessibilityUtil.java
Patch:
@@ -107,7 +107,7 @@ public static boolean passesAccessibilityChecksIfEnabled(View view) {
   /**
    * Specify that a specific subset of accessibility checks be run. The subsets are specified based
    * on which Robolectric version particular checks were released with. By default, all checks are
-   * run ({@link ForRobolectricVersion.LATEST}.
+   * run ({@link ForRobolectricVersion}.
    * <p>
    * If you call this method, the value you pass will take precedence over any value in any 
    * annotations. 
@@ -277,4 +277,4 @@ private static AccessibilityCheckPreset convertRoboVersionToA11yTestVersion(
     }
     return preset;
   }  
-}
\ No newline at end of file
+}

File: robolectric/src/test/java/org/robolectric/res/ResNameTest.java
Patch:
@@ -11,6 +11,7 @@ public class ResNameTest {
     assertThat(ResName.qualifyResourceName("some.package:name", "default.package", "deftype")).isEqualTo("some.package:deftype/name");
     assertThat(ResName.qualifyResourceName("type/name", "default.package", "deftype")).isEqualTo("default.package:type/name");
     assertThat(ResName.qualifyResourceName("name", "default.package", "deftype")).isEqualTo("default.package:deftype/name");
+    assertThat(ResName.qualifyResourceName("someRawString", "default.package", null)).isNull();
   }
 
   @Test public void shouldQualifyResNameFromString() throws Exception {

File: robolectric/src/test/java/org/robolectric/res/ResNameTest.java
Patch:
@@ -11,6 +11,7 @@ public class ResNameTest {
     assertThat(ResName.qualifyResourceName("some.package:name", "default.package", "deftype")).isEqualTo("some.package:deftype/name");
     assertThat(ResName.qualifyResourceName("type/name", "default.package", "deftype")).isEqualTo("default.package:type/name");
     assertThat(ResName.qualifyResourceName("name", "default.package", "deftype")).isEqualTo("default.package:deftype/name");
+    assertThat(ResName.qualifyResourceName("someRawString", "default.package", null)).isNull();
   }
 
   @Test public void shouldQualifyResNameFromString() throws Exception {

File: robolectric/src/main/java/org/robolectric/internal/bytecode/InstrumentationConfiguration.java
Patch:
@@ -261,14 +261,17 @@ public boolean equals(Object o) {
     if (!classNameTranslations.equals(that.classNameTranslations)) return false;
     if (!classesToNotAquire.equals(that.classesToNotAquire)) return false;
     if (!instrumentedPackages.equals(that.instrumentedPackages)) return false;
+    if (!instrumentedClasses.equals(that.instrumentedClasses)) return false;
     if (!interceptedMethods.equals(that.interceptedMethods)) return false;
 
+
     return true;
   }
 
   @Override
   public int hashCode() {
     int result = instrumentedPackages.hashCode();
+    result = 31 * result + instrumentedClasses.hashCode();
     result = 31 * result + classNameTranslations.hashCode();
     result = 31 * result + interceptedMethods.hashCode();
     result = 31 * result + classesToNotAquire.hashCode();

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -678,7 +678,7 @@ public int getApplicationEnabledSetting(String packageName) {
   @Override
   public int checkPermission(String permName, String pkgName) {
     PackageInfo permissionsInfo = packageInfos.get(pkgName);
-    if (permissionsInfo == null) {
+    if (permissionsInfo == null || permissionsInfo.requestedPermissions == null) {
       return PackageManager.PERMISSION_DENIED;
     }
     for (String permission : permissionsInfo.requestedPermissions) {

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -12,9 +12,9 @@
 /**
  * Class that manages a queue of Runnables that are scheduled to run now (or at some time in
  * the future). Runnables that are scheduled to run on the UI thread (tasks, animations, etc)
- * eventually get routed to a Scheduler instance. If
- * {@link org.robolectric.RoboSettings#isUseMasterScheduler()} is <tt>true</tt>, then there will
- * only be one instance of this class which is used by all components in the test.
+ * eventually get routed to a Scheduler instance. If org.robolectric.RoboSettings#isUseGlobalScheduler()
+ * is <tt>true</tt>, then there will only be one instance of this class which is used by all components
+ * in the test.
  * 
  * The execution of a scheduler can be in one of three states:
  * <ul><li>paused ({@link #pause()}): if paused, then no posted events will be run unless the Scheduler

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityWindowInfo;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -19,6 +18,8 @@ public class ShadowAccessibilityWindowInfoTest {
 
   @Before
   public void setUp() {
+    ShadowAccessibilityWindowInfo.resetObtainedInstances();
+    assertThat(ShadowAccessibilityWindowInfo.areThereUnrecycledWindows(true)).isEqualTo(false);
     window = ShadowAccessibilityWindowInfo.obtain();
     assertThat(window == null).isEqualTo(false);
     shadow = shadowOf(window);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAccessibilityWindowInfoTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityWindowInfo;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -19,6 +18,8 @@ public class ShadowAccessibilityWindowInfoTest {
 
   @Before
   public void setUp() {
+    ShadowAccessibilityWindowInfo.resetObtainedInstances();
+    assertThat(ShadowAccessibilityWindowInfo.areThereUnrecycledWindows(true)).isEqualTo(false);
     window = ShadowAccessibilityWindowInfo.obtain();
     assertThat(window == null).isEqualTo(false);
     shadow = shadowOf(window);

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -398,7 +398,7 @@ private ScheduledRunnable(Runnable runnable, long scheduledTime) {
 
     @Override
     public int compareTo(ScheduledRunnable runnable) {
-      return (int) (scheduledTime - runnable.scheduledTime);
+      return Long.compare(scheduledTime, runnable.scheduledTime);
     }
 
     @Override

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -398,7 +398,7 @@ private ScheduledRunnable(Runnable runnable, long scheduledTime) {
 
     @Override
     public int compareTo(ScheduledRunnable runnable) {
-      return (int) (scheduledTime - runnable.scheduledTime);
+      return Long.compare(scheduledTime, runnable.scheduledTime);
     }
 
     @Override

File: robolectric/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.lang.reflect.*;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class ShadowWrangler implements ClassHandler {
   public static final Function<Object, Object> DO_NOTHING_HANDLER = new Function<Object, Object>() {
@@ -37,7 +38,7 @@ protected boolean removeEldestEntry(Map.Entry<String, Plan> eldest) {
       return size() > 500;
     }
   };
-  private final Map<Class, ShadowConfig> shadowConfigCache = new HashMap<>();
+  private final Map<Class, ShadowConfig> shadowConfigCache = new ConcurrentHashMap<>();
   public static final HashMap<String, Object> PRIMITIVE_RETURN_VALUES = new HashMap<>();
 
   static {

File: robolectric/src/main/java/org/robolectric/internal/bytecode/ShadowWrangler.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.lang.reflect.*;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class ShadowWrangler implements ClassHandler {
   public static final Function<Object, Object> DO_NOTHING_HANDLER = new Function<Object, Object>() {
@@ -37,7 +38,7 @@ protected boolean removeEldestEntry(Map.Entry<String, Plan> eldest) {
       return size() > 500;
     }
   };
-  private final Map<Class, ShadowConfig> shadowConfigCache = new HashMap<>();
+  private final Map<Class, ShadowConfig> shadowConfigCache = new ConcurrentHashMap<>();
   public static final HashMap<String, Object> PRIMITIVE_RETURN_VALUES = new HashMap<>();
 
   static {

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -206,7 +206,7 @@ protected boolean shouldIgnore(FrameworkMethod method, Config config) {
 
   private ParallelUniverseInterface parallelUniverseInterface;
 
-  private Statement methodBlock(final FrameworkMethod method, final Config config, final AndroidManifest appManifest, final SdkEnvironment sdkEnvironment) {
+  Statement methodBlock(final FrameworkMethod method, final Config config, final AndroidManifest appManifest, final SdkEnvironment sdkEnvironment) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -678,7 +678,7 @@ public int getApplicationEnabledSetting(String packageName) {
   @Override
   public int checkPermission(String permName, String pkgName) {
     PackageInfo permissionsInfo = packageInfos.get(pkgName);
-    if (permissionsInfo == null) {
+    if (permissionsInfo == null || permissionsInfo.requestedPermissions == null) {
       return PackageManager.PERMISSION_DENIED;
     }
     for (String permission : permissionsInfo.requestedPermissions) {

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -19,6 +19,8 @@ public interface RobolectricPackageManager {
 
   ActivityInfo getReceiverInfo(ComponentName className, int flags) throws PackageManager.NameNotFoundException;
 
+  ServiceInfo getServiceInfo(ComponentName className, int flags) throws PackageManager.NameNotFoundException;
+  
   List<PackageInfo> getInstalledPackages(int flags);
 
   List<ResolveInfo> queryIntentActivities(Intent intent, int flags);

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -220,6 +220,7 @@ public ServiceInfo getServiceInfo(ComponentName className, int flags) throws Nam
     serviceInfo.packageName = packageName;
     serviceInfo.name = serviceName;
     serviceInfo.applicationInfo = getApplicationInfo(packageName, flags);
+    serviceInfo.permission = serviceData.getPermission();
     if ((flags & GET_META_DATA) != 0) {
       serviceInfo.metaData = metaDataToBundle(serviceData.getMetaData().getValueMap());
     }

File: robolectric/src/test/java/org/robolectric/res/builder/DefaultPackageManagerTest.java
Patch:
@@ -27,6 +27,7 @@ public void getServiceInfo_shouldReturnServiceInfoIfExists() throws Exception {
     ServiceInfo serviceInfo = packageManager.getServiceInfo(new ComponentName("org.robolectric", "com.foo.Service"), PackageManager.GET_SERVICES);
     assertEquals(serviceInfo.packageName, "org.robolectric");
     assertEquals(serviceInfo.name, "com.foo.Service");
+    assertEquals(serviceInfo.permission, "com.foo.MY_PERMISSION");
     assertNotNull(serviceInfo.applicationInfo);  
   }
   

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -103,6 +103,7 @@ public void parseManifest_shouldReadServices() throws Exception {
     
     assertThat(config.getServiceData("com.foo.Service").getClassName()).isEqualTo("com.foo.Service");
     assertThat(config.getServiceData("com.bar.ServiceWithoutIntentFilter").getClassName()).isEqualTo("com.bar.ServiceWithoutIntentFilter");
+    assertEquals(config.getServiceData("com.foo.Service").getPermission(), "com.foo.Permission");
   }
 
   @Test(expected = IllegalAccessError.class)

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -206,7 +206,7 @@ protected boolean shouldIgnore(FrameworkMethod method, Config config) {
 
   private ParallelUniverseInterface parallelUniverseInterface;
 
-  private Statement methodBlock(final FrameworkMethod method, final Config config, final AndroidManifest appManifest, final SdkEnvironment sdkEnvironment) {
+  Statement methodBlock(final FrameworkMethod method, final Config config, final AndroidManifest appManifest, final SdkEnvironment sdkEnvironment) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {

File: robolectric/src/test/java/org/robolectric/manifest/AndroidManifestTest.java
Patch:
@@ -100,6 +100,9 @@ public void parseManifest_shouldReadServices() throws Exception {
 
     assertThat(config.getServices().get(1).getClassName()).isEqualTo("com.bar.ServiceWithoutIntentFilter");
     assertThat(config.getServices().get(1).getActions()).isEmpty();
+    
+    assertThat(config.getServiceData("com.foo.Service").getClassName()).isEqualTo("com.foo.Service");
+    assertThat(config.getServiceData("com.bar.ServiceWithoutIntentFilter").getClassName()).isEqualTo("com.bar.ServiceWithoutIntentFilter");
   }
 
   @Test(expected = IllegalAccessError.class)

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -14,10 +14,10 @@ public class ShadowIntent {
 
   /**
    * Non-Android accessor that returns the {@code Class} object set by
-   * {@link #setClass(android.content.Context, Class)}
+   * {@link Intent#setClass(android.content.Context, Class)}
    *
    * @return the {@code Class} object set by
-   *         {@link #setClass(android.content.Context, Class)}
+   *         {@link Intent#setClass(android.content.Context, Class)}
    */
   public Class<?> getIntentClass() {
     try {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -14,10 +14,10 @@ public class ShadowIntent {
 
   /**
    * Non-Android accessor that returns the {@code Class} object set by
-   * {@link #setClass(android.content.Context, Class)}
+   * {@link Intent#setClass(android.content.Context, Class)}
    *
    * @return the {@code Class} object set by
-   *         {@link #setClass(android.content.Context, Class)}
+   *         {@link Intent#setClass(android.content.Context, Class)}
    */
   public Class<?> getIntentClass() {
     try {

File: robolectric/src/main/java/org/robolectric/internal/SdkConfig.java
Patch:
@@ -24,7 +24,7 @@ public class SdkConfig {
     addSdk(Build.VERSION_CODES.JELLY_BEAN_MR2, "4.3_r2", "0");
     addSdk(Build.VERSION_CODES.KITKAT, "4.4_r1", "1");
     addSdk(Build.VERSION_CODES.LOLLIPOP, "5.0.0_r2", "1");
-    addSdk(Build.VERSION_CODES.LOLLIPOP_MR1, "5.0.0_r2", "1");
+    addSdk(Build.VERSION_CODES.LOLLIPOP_MR1, "5.1.1_r9", "0");
     ROBOLECTRIC_VERSION = getRobolectricVersion();
   }
 

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -46,7 +46,7 @@ public DefaultPackageManager(ShadowsAdapter shadowsAdapter) {
     this.shadowsAdapter = shadowsAdapter;
   }
 
-  private static class IntentComparator implements Comparator<Intent> {
+  static class IntentComparator implements Comparator<Intent> {
 
     @Override
     public int compare(Intent i1, Intent i2) {
@@ -59,8 +59,8 @@ public int compare(Intent i1, Intent i2) {
       if (action1 == null && action2 != null) return -1;
       if (action1 != null && action2 == null) return 1;
       if (action1 != null && action2 != null) {
-        if (!i1.getAction().equals(i2.getAction())) {
-          return i1.getAction().compareTo(i2.getAction());
+        if (!action1.equals(action2)) {
+          return action1.compareTo(action2);
         }
       }
       Uri data1 = i1.getData();

File: robolectric/src/main/java/org/robolectric/res/builder/DefaultPackageManager.java
Patch:
@@ -46,7 +46,7 @@ public DefaultPackageManager(ShadowsAdapter shadowsAdapter) {
     this.shadowsAdapter = shadowsAdapter;
   }
 
-  private static class IntentComparator implements Comparator<Intent> {
+  static class IntentComparator implements Comparator<Intent> {
 
     @Override
     public int compare(Intent i1, Intent i2) {
@@ -59,8 +59,8 @@ public int compare(Intent i1, Intent i2) {
       if (action1 == null && action2 != null) return -1;
       if (action1 != null && action2 == null) return 1;
       if (action1 != null && action2 != null) {
-        if (!i1.getAction().equals(i2.getAction())) {
-          return i1.getAction().compareTo(i2.getAction());
+        if (!action1.equals(action2)) {
+          return action1.compareTo(action2);
         }
       }
       Uri data1 = i1.getData();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowFilter.java
Patch:
@@ -26,7 +26,7 @@ public void filter(CharSequence constraint, Filter.FilterListener listener) {
           ClassParameter.from(forName, filtering));
 
       if (listener != null) {
-        int count = ReflectionHelpers.getField(filtering, "count");
+        int count = filtering == null ? -1 : (int) ReflectionHelpers.getField(filtering, "count");
         listener.onFilterComplete(count);
       }
     } catch (ClassNotFoundException e) {

File: robolectric-annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -218,7 +218,7 @@ public Implementation(Config baseConfig, Config overlayConfig) {
       shadows.addAll(Arrays.asList(overlayConfig.shadows()));
       this.shadows = shadows.toArray(new Class[shadows.size()]);
 
-      this.application = pick(baseConfig.application(), overlayConfig.application(), null);
+      this.application = pick(baseConfig.application(), overlayConfig.application(), Application.class);
 
       Set<String> libraries = new HashSet<>();
       libraries.addAll(Arrays.asList(baseConfig.libraries()));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -91,7 +91,7 @@ public void setTranslate(float dx, float dy) {
 
   @Implementation
   public void setScale(float sx, float sy, float px, float py) {
-    setOps.put(SCALE, sx + " " + sy + " " + py + " " + py);
+    setOps.put(SCALE, sx + " " + sy + " " + px + " " + py);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -91,7 +91,7 @@ public void setTranslate(float dx, float dy) {
 
   @Implementation
   public void setScale(float sx, float sy, float px, float py) {
-    setOps.put(SCALE, sx + " " + sy + " " + py + " " + py);
+    setOps.put(SCALE, sx + " " + sy + " " + px + " " + py);
   }
 
   @Implementation

File: robolectric-annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -218,7 +218,7 @@ public Implementation(Config baseConfig, Config overlayConfig) {
       shadows.addAll(Arrays.asList(overlayConfig.shadows()));
       this.shadows = shadows.toArray(new Class[shadows.size()]);
 
-      this.application = pick(baseConfig.application(), overlayConfig.application(), null);
+      this.application = pick(baseConfig.application(), overlayConfig.application(), Application.class);
 
       Set<String> libraries = new HashSet<>();
       libraries.addAll(Arrays.asList(baseConfig.libraries()));

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -378,7 +378,7 @@ public void handleMessage(Message msg) {
     Message newMsg = handler.obtainMessage(123);
     assertThat(newMsg).as("new message").isSameAs(msg);
     handler.sendMessageDelayed(newMsg, 400);
-    ShadowLooper.unPauseMainLooper();
+    ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
     // Original implementation had a bug which caused reused messages to still
     // be invoked at their original post time.
     assertThat(runAt).as("handledAt").containsExactly(startTime + 400L);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -299,7 +299,7 @@ public void shouldPostInvalidateDelayed() throws Exception {
     ShadowView shadowView = shadowOf(view);
     assertFalse(shadowView.wasInvalidated());
 
-    ShadowLooper.unPauseMainLooper();
+    ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
     assertTrue(shadowView.wasInvalidated());
   }
 

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -51,7 +51,7 @@ public synchronized void pause() {
    */
   public synchronized void unPause() {
     paused = false;
-    advanceToLastPostedRunnable();
+    advanceBy(0);
   }
 
   /**

File: robolectric-utils/src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -23,7 +23,7 @@
  * </ul>
  */
 public class Scheduler {
-  private long currentTime = 0;
+  private long currentTime = 100;
   private boolean paused = false;
   private boolean isConstantlyIdling = false;
   private boolean isExecutingRunnable = false;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -939,6 +939,7 @@ public void testSeekWhileSeekingWhilePlaying() {
     shadowMediaPlayer.setState(PREPARED);
     shadowMediaPlayer.setSeekDelay(100);
 
+    final long startTime = scheduler.getCurrentTime();
     mediaPlayer.start();
     scheduler.advanceBy(200);
     mediaPlayer.seekTo(450);
@@ -967,7 +968,7 @@ public void testSeekWhileSeekingWhilePlaying() {
     assertThat(scheduler.advanceToLastPostedRunnable()).isTrue();
     Mockito.verify(completionListener).onCompletion(mediaPlayer);
     Mockito.verifyNoMoreInteractions(seekListener);
-    assertThat(scheduler.getCurrentTime()).isEqualTo(750);
+    assertThat(scheduler.getCurrentTime()).isEqualTo(startTime + 750);
     assertThat(mediaPlayer.getCurrentPosition()).isEqualTo(1000);
     assertThat(shadowMediaPlayer.getState()).isEqualTo(PLAYBACK_COMPLETED);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowSystemClockTest.java
Patch:
@@ -15,7 +15,7 @@
 public class ShadowSystemClockTest {
   @Test
   public void shouldAllowForFakingOfTime() throws Exception {
-    assertThat(SystemClock.uptimeMillis()).isEqualTo(0);
+    assertThat(SystemClock.uptimeMillis()).isNotEqualTo(1000);
     Robolectric.getForegroundThreadScheduler().advanceTo(1000);
     assertThat(SystemClock.uptimeMillis()).isEqualTo(1000);
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -431,7 +431,7 @@ public XmlResourceParser loadXmlResourceParser(int id, String type) throws Resou
     if (block == null) {
       throw new Resources.NotFoundException();
     }
-    return ResourceParser.from(block, getResourceLoader().getResourceIndex());
+    return ResourceParser.from(block, resName.packageName, getResourceLoader().getResourceIndex());
   }
 
   @HiddenApi @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -431,7 +431,7 @@ public XmlResourceParser loadXmlResourceParser(int id, String type) throws Resou
     if (block == null) {
       throw new Resources.NotFoundException();
     }
-    return ResourceParser.from(block, getResourceLoader().getResourceIndex());
+    return ResourceParser.from(block, resName.packageName, getResourceLoader().getResourceIndex());
   }
 
   @HiddenApi @Implementation

File: robolectric-resources/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -83,6 +83,8 @@ public static void convertAndFill(Attribute attribute, TypedValue outValue, Reso
           return;
         } else if (resName.type.equals("interpolator")) {
           return;
+        } else if (resName.type.equals("menu")) {
+          return;
         } else if (DrawableResourceLoader.isStillHandledHere(resName)) {
           // wtf. color and drawable references reference are all kinds of stupid.
           DrawableNode drawableNode = resourceLoader.getDrawableNode(resName, qualifiers);

File: robolectric-resources/src/main/java/org/robolectric/shadows/Converter.java
Patch:
@@ -83,6 +83,8 @@ public static void convertAndFill(Attribute attribute, TypedValue outValue, Reso
           return;
         } else if (resName.type.equals("interpolator")) {
           return;
+        } else if (resName.type.equals("menu")) {
+          return;
         } else if (DrawableResourceLoader.isStillHandledHere(resName)) {
           // wtf. color and drawable references reference are all kinds of stupid.
           DrawableNode drawableNode = resourceLoader.getDrawableNode(resName, qualifiers);

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -127,8 +127,8 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
       ReflectionHelpers.setField(loadedApk, "mResources", appResources);
       try {
         Context contextImpl = systemContextImpl.createPackageContext(applicationInfo.packageName, Context.CONTEXT_INCLUDE_CODE);
-        ReflectionHelpers.setField(activityThread, "mInitialApplication", application);
-        ReflectionHelpers.callInstanceMethod(application, "attach", ClassParameter.from(Context.class, contextImpl));
+        ReflectionHelpers.setField(activityThreadClass, activityThread, "mInitialApplication", application);
+        ReflectionHelpers.callInstanceMethod(Application.class, application, "attach", ClassParameter.from(Context.class, contextImpl));
       } catch (PackageManager.NameNotFoundException e) {
         throw new RuntimeException(e);
       }

File: robolectric/src/main/java/org/robolectric/internal/runtime/Api19RuntimeAdapter.java
Patch:
@@ -16,7 +16,7 @@ public class Api19RuntimeAdapter implements RuntimeAdapter {
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Activity.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/internal/runtime/Api21RuntimeAdapter.java
Patch:
@@ -17,7 +17,7 @@ public class Api21RuntimeAdapter implements RuntimeAdapter {
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Activity.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -119,7 +119,7 @@ public ActivityController<T> create(final Bundle bundle) {
       @Override
       public void run() {
         if (!attached) attach();
-        ReflectionHelpers.callInstanceMethod(component, "performCreate", ClassParameter.from(Bundle.class, bundle));
+        ReflectionHelpers.callInstanceMethod(Activity.class, component, "performCreate", ClassParameter.from(Bundle.class, bundle));
       }
     });
     return this;

File: robolectric/src/main/java/org/robolectric/util/ServiceController.java
Patch:
@@ -46,7 +46,7 @@ public ServiceController<T> attach() {
       throw new RuntimeException(e);
     }
 
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Service.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(String.class, component.getClass().getSimpleName()),

File: robolectric/src/main/java/org/robolectric/internal/ParallelUniverse.java
Patch:
@@ -127,8 +127,8 @@ public void setUpApplicationState(Method method, TestLifecycle testLifecycle, Re
       ReflectionHelpers.setField(loadedApk, "mResources", appResources);
       try {
         Context contextImpl = systemContextImpl.createPackageContext(applicationInfo.packageName, Context.CONTEXT_INCLUDE_CODE);
-        ReflectionHelpers.setField(activityThread, "mInitialApplication", application);
-        ReflectionHelpers.callInstanceMethod(application, "attach", ClassParameter.from(Context.class, contextImpl));
+        ReflectionHelpers.setField(activityThreadClass, activityThread, "mInitialApplication", application);
+        ReflectionHelpers.callInstanceMethod(Application.class, application, "attach", ClassParameter.from(Context.class, contextImpl));
       } catch (PackageManager.NameNotFoundException e) {
         throw new RuntimeException(e);
       }

File: robolectric/src/main/java/org/robolectric/internal/runtime/Api19RuntimeAdapter.java
Patch:
@@ -16,7 +16,7 @@ public class Api19RuntimeAdapter implements RuntimeAdapter {
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Activity.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/internal/runtime/Api21RuntimeAdapter.java
Patch:
@@ -17,7 +17,7 @@ public class Api21RuntimeAdapter implements RuntimeAdapter {
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Activity.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -119,7 +119,7 @@ public ActivityController<T> create(final Bundle bundle) {
       @Override
       public void run() {
         if (!attached) attach();
-        ReflectionHelpers.callInstanceMethod(component, "performCreate", ClassParameter.from(Bundle.class, bundle));
+        ReflectionHelpers.callInstanceMethod(Activity.class, component, "performCreate", ClassParameter.from(Bundle.class, bundle));
       }
     });
     return this;

File: robolectric/src/main/java/org/robolectric/util/ServiceController.java
Patch:
@@ -46,7 +46,7 @@ public ServiceController<T> attach() {
       throw new RuntimeException(e);
     }
 
-    ReflectionHelpers.callInstanceMethod(component, "attach",
+    ReflectionHelpers.callInstanceMethod(Service.class, component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(String.class, component.getClass().getSimpleName()),

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -20,7 +20,7 @@
 public class CoreShadowsAdapter implements ShadowsAdapter {
   @Override
   public Scheduler getBackgroundScheduler() {
-    return ShadowApplication.getInstance().getBackgroundScheduler();
+    return ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -233,7 +233,7 @@ public void setWindow(Window window) {
 
   @Implementation
   public void runOnUiThread(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowChoreographer.java
Patch:
@@ -41,12 +41,12 @@ public static Choreographer getInstance() {
 
   @Implementation
   public void postCallbackDelayed(int callbackType, Runnable action, Object token, long delayMillis) {
-      ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMillis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMillis);
   }
 
   @Implementation
   public void postFrameCallbackDelayed(final Choreographer.FrameCallback callback, long delayMillis) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         callback.doFrame(getFrameTimeNanos());

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSystemClock.java
Patch:
@@ -17,13 +17,13 @@ public class ShadowSystemClock {
   private static final int MILLIS_PER_NANO = 1000000;
 
   static long now() {
-    return ShadowLooper.getUiThreadScheduler().getCurrentTime();
+    return ShadowApplication.getInstance().getForegroundThreadScheduler().getCurrentTime();
   }
 
   @Implementation
   public static void sleep(long millis) {
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceBy(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceBy(millis);
   }
 
   @Implementation
@@ -32,7 +32,7 @@ public static boolean setCurrentTimeMillis(long millis) {
       return false;
     }
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceTo(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceTo(millis);
     return true;
   }
   

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -403,17 +403,17 @@ public Bitmap getDrawingCache() {
 
   @Implementation
   public void post(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation
   public void postDelayed(Runnable action, long delayMills) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMills);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMills);
   }
 
   @Implementation
   public void postInvalidateDelayed(long delayMilliseconds) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         realView.invalidate();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/util/concurrent/RoboExecutorService.java
Patch:
@@ -20,7 +20,7 @@ public class RoboExecutorService implements ExecutorService {
   private final Scheduler scheduler;
 
   public RoboExecutorService() {
-    this.scheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+    this.scheduler = ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import android.content.Context;
+import org.robolectric.Robolectric;
 import org.robolectric.util.SimpleFuture;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Implements;
@@ -22,7 +23,7 @@ public void __constructor__(Context context) {
       @Override protected void done() {
         try {
           final D result = get();
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override public void run() {
               realLoader.deliverResult(result);
             }
@@ -36,7 +37,7 @@ public void __constructor__(Context context) {
 
   @Implementation
   public void onForceLoad() {
-    ShadowApplication.getInstance().getBackgroundScheduler().post(new Runnable() {
+    Robolectric.getBackgroundThreadScheduler().post(new Runnable() {
       @Override
       public void run() {
         future.run();

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowLocalBroadcastManager.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -65,7 +66,7 @@ public boolean sendBroadcast(Intent intent) {
           sent = true;
           final BroadcastReceiver receiver = wrapper.broadcastReceiver;
           final Intent broadcastIntent = intent;
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override
             public void run() {
               receiver.onReceive(RuntimeEnvironment.application, broadcastIntent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationSetTest.java
Patch:
@@ -35,7 +35,7 @@ public void start_shouldRunAnimation() {
 
     verify(moveListener).onAnimationStart(move);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(moveListener).onAnimationEnd(move);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
@@ -21,7 +22,7 @@ public class ShadowAutoCompleteTextViewTest {
 
   @Test
   public void shouldInvokeFilter() throws Exception {
-    ShadowLooper.getUiThreadScheduler().pause();
+    Robolectric.getForegroundThreadScheduler().pause();
     AutoCompleteTextView view = new AutoCompleteTextView(RuntimeEnvironment.application);
     view.setAdapter(adapter);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.TestRunnable;
@@ -466,9 +467,9 @@ public boolean handleMessage(Message msg) {
 
     h.sendEmptyMessage(0);
     h.sendEmptyMessageDelayed(0, 4000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
     h.sendEmptyMessageDelayed(0, 12000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
     assertThat(whens).as("whens").containsExactly(0l, 4000l, 16000l);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.internal.Shadow;
@@ -74,9 +75,9 @@ public void setUp() {
 
     // Scheduler is used in many of the tests to simulate
     // moving forward in time.
-    scheduler = ShadowLooper.getUiThreadScheduler();
+    scheduler = Robolectric.getForegroundThreadScheduler();
     scheduler.pause();
-    
+
     defaultSource = toDataSource(DUMMY_SOURCE);
     info = new MediaInfo();
     ShadowMediaPlayer.addMediaInfo(defaultSource, info);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -224,7 +224,7 @@ private void recycle_shouldRemoveMessageFromScheduler() {
     Handler h = new Handler();
     Message msg = Message.obtain(h, 234);
     msg.sendToTarget();
-    Scheduler scheduler = ShadowLooper.getUiThreadScheduler();
+    Scheduler scheduler = Robolectric.getForegroundThreadScheduler();
     assertThat(scheduler.size()).as("before recycle").isEqualTo(1);
     shadowOf(msg).recycleUnchecked();
     assertThat(scheduler.size()).as("after recycle").isEqualTo(0);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -28,7 +28,7 @@ public void start_shouldRunAnimation() {
     verify(listener).onAnimationStart(animator);
     assertThat(target.getTransparency()).isEqualTo(0);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(listener).onAnimationEnd(animator);
     assertThat(target.getTransparency()).isEqualTo(4);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -31,7 +31,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
     });
     animator.start();
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     assertThat(values).containsExactly(0, 0, 0, 0, 2, 3, 5, 6, 7, 9, 9, 10);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -311,7 +311,7 @@ public void shouldPostActionsToTheMessageQueueWithDelay() throws Exception {
     view.postDelayed(runnable, 1);
     assertFalse(runnable.wasRun);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertTrue(runnable.wasRun);
   }
 
@@ -322,7 +322,7 @@ public void shouldRemovePostedCallbacksFromMessageQueue() throws Exception {
 
     view.removeCallbacks(runnable);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertThat(runnable.wasRun).isFalse();
   }
 
@@ -469,7 +469,7 @@ public void setAnimation() {
 
     verifyZeroInteractions(listener);
 
-    ShadowLooper.getUiThreadScheduler().advanceToNextPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToNextPostedRunnable();
 
     verify(listener).onAnimationStart(animation);
     verify(listener).onAnimationEnd(animation);

File: robolectric/src/test/java/org/robolectric/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.util.Scheduler;
@@ -17,7 +18,7 @@
 public class RoboExecutorServiceTest {
   private final Transcript transcript = new Transcript();
   private final RoboExecutorService executorService = new RoboExecutorService();
-  private final Scheduler backgroundScheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+  private final Scheduler backgroundScheduler = Robolectric.getBackgroundThreadScheduler();
   private Runnable runnable;
 
   @Before

File: robolectric/src/test/java/org/robolectric/MultiApiRobolectricTestRunnerUriTest.java
Patch:
@@ -11,8 +11,8 @@
  *
  * @author John Ferlisi
  */
-@RunWith(ExperimentalRobolectricTestRunner.class)
-public final class ExperimentalRobolectricTestRunnerUriTest {
+@RunWith(MultiApiRobolectricTestRunner.class)
+public final class MultiApiRobolectricTestRunnerUriTest {
 
   @Test
   @Config(manifest = Config.NONE)

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -20,7 +20,7 @@
 public class CoreShadowsAdapter implements ShadowsAdapter {
   @Override
   public Scheduler getBackgroundScheduler() {
-    return ShadowApplication.getInstance().getBackgroundScheduler();
+    return ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -233,7 +233,7 @@ public void setWindow(Window window) {
 
   @Implementation
   public void runOnUiThread(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowChoreographer.java
Patch:
@@ -41,12 +41,12 @@ public static Choreographer getInstance() {
 
   @Implementation
   public void postCallbackDelayed(int callbackType, Runnable action, Object token, long delayMillis) {
-      ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMillis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMillis);
   }
 
   @Implementation
   public void postFrameCallbackDelayed(final Choreographer.FrameCallback callback, long delayMillis) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         callback.doFrame(getFrameTimeNanos());

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSystemClock.java
Patch:
@@ -17,13 +17,13 @@ public class ShadowSystemClock {
   private static final int MILLIS_PER_NANO = 1000000;
 
   static long now() {
-    return ShadowLooper.getUiThreadScheduler().getCurrentTime();
+    return ShadowApplication.getInstance().getForegroundThreadScheduler().getCurrentTime();
   }
 
   @Implementation
   public static void sleep(long millis) {
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceBy(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceBy(millis);
   }
 
   @Implementation
@@ -32,7 +32,7 @@ public static boolean setCurrentTimeMillis(long millis) {
       return false;
     }
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceTo(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceTo(millis);
     return true;
   }
   

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -403,17 +403,17 @@ public Bitmap getDrawingCache() {
 
   @Implementation
   public void post(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation
   public void postDelayed(Runnable action, long delayMills) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMills);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMills);
   }
 
   @Implementation
   public void postInvalidateDelayed(long delayMilliseconds) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         realView.invalidate();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/util/concurrent/RoboExecutorService.java
Patch:
@@ -20,7 +20,7 @@ public class RoboExecutorService implements ExecutorService {
   private final Scheduler scheduler;
 
   public RoboExecutorService() {
-    this.scheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+    this.scheduler = ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import android.content.Context;
+import org.robolectric.Robolectric;
 import org.robolectric.util.SimpleFuture;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Implements;
@@ -22,7 +23,7 @@ public void __constructor__(Context context) {
       @Override protected void done() {
         try {
           final D result = get();
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override public void run() {
               realLoader.deliverResult(result);
             }
@@ -36,7 +37,7 @@ public void __constructor__(Context context) {
 
   @Implementation
   public void onForceLoad() {
-    ShadowApplication.getInstance().getBackgroundScheduler().post(new Runnable() {
+    Robolectric.getBackgroundThreadScheduler().post(new Runnable() {
       @Override
       public void run() {
         future.run();

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowLocalBroadcastManager.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -65,7 +66,7 @@ public boolean sendBroadcast(Intent intent) {
           sent = true;
           final BroadcastReceiver receiver = wrapper.broadcastReceiver;
           final Intent broadcastIntent = intent;
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override
             public void run() {
               receiver.onReceive(RuntimeEnvironment.application, broadcastIntent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationSetTest.java
Patch:
@@ -35,7 +35,7 @@ public void start_shouldRunAnimation() {
 
     verify(moveListener).onAnimationStart(move);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(moveListener).onAnimationEnd(move);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
@@ -21,7 +22,7 @@ public class ShadowAutoCompleteTextViewTest {
 
   @Test
   public void shouldInvokeFilter() throws Exception {
-    ShadowLooper.getUiThreadScheduler().pause();
+    Robolectric.getForegroundThreadScheduler().pause();
     AutoCompleteTextView view = new AutoCompleteTextView(RuntimeEnvironment.application);
     view.setAdapter(adapter);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.TestRunnable;
@@ -466,9 +467,9 @@ public boolean handleMessage(Message msg) {
 
     h.sendEmptyMessage(0);
     h.sendEmptyMessageDelayed(0, 4000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
     h.sendEmptyMessageDelayed(0, 12000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
     assertThat(whens).as("whens").containsExactly(0l, 4000l, 16000l);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.internal.Shadow;
@@ -74,9 +75,9 @@ public void setUp() {
 
     // Scheduler is used in many of the tests to simulate
     // moving forward in time.
-    scheduler = ShadowLooper.getUiThreadScheduler();
+    scheduler = Robolectric.getForegroundThreadScheduler();
     scheduler.pause();
-    
+
     defaultSource = toDataSource(DUMMY_SOURCE);
     info = new MediaInfo();
     ShadowMediaPlayer.addMediaInfo(defaultSource, info);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -224,7 +224,7 @@ private void recycle_shouldRemoveMessageFromScheduler() {
     Handler h = new Handler();
     Message msg = Message.obtain(h, 234);
     msg.sendToTarget();
-    Scheduler scheduler = ShadowLooper.getUiThreadScheduler();
+    Scheduler scheduler = Robolectric.getForegroundThreadScheduler();
     assertThat(scheduler.size()).as("before recycle").isEqualTo(1);
     shadowOf(msg).recycleUnchecked();
     assertThat(scheduler.size()).as("after recycle").isEqualTo(0);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -28,7 +28,7 @@ public void start_shouldRunAnimation() {
     verify(listener).onAnimationStart(animator);
     assertThat(target.getTransparency()).isEqualTo(0);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(listener).onAnimationEnd(animator);
     assertThat(target.getTransparency()).isEqualTo(4);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -31,7 +31,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
     });
     animator.start();
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     assertThat(values).containsExactly(0, 0, 0, 0, 2, 3, 5, 6, 7, 9, 9, 10);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -311,7 +311,7 @@ public void shouldPostActionsToTheMessageQueueWithDelay() throws Exception {
     view.postDelayed(runnable, 1);
     assertFalse(runnable.wasRun);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertTrue(runnable.wasRun);
   }
 
@@ -322,7 +322,7 @@ public void shouldRemovePostedCallbacksFromMessageQueue() throws Exception {
 
     view.removeCallbacks(runnable);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertThat(runnable.wasRun).isFalse();
   }
 
@@ -469,7 +469,7 @@ public void setAnimation() {
 
     verifyZeroInteractions(listener);
 
-    ShadowLooper.getUiThreadScheduler().advanceToNextPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToNextPostedRunnable();
 
     verify(listener).onAnimationStart(animation);
     verify(listener).onAnimationEnd(animation);

File: robolectric/src/test/java/org/robolectric/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.util.Scheduler;
@@ -17,7 +18,7 @@
 public class RoboExecutorServiceTest {
   private final Transcript transcript = new Transcript();
   private final RoboExecutorService executorService = new RoboExecutorService();
-  private final Scheduler backgroundScheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+  private final Scheduler backgroundScheduler = Robolectric.getBackgroundThreadScheduler();
   private Runnable runnable;
 
   @Before

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/CoreShadowsAdapter.java
Patch:
@@ -20,7 +20,7 @@
 public class CoreShadowsAdapter implements ShadowsAdapter {
   @Override
   public Scheduler getBackgroundScheduler() {
-    return ShadowApplication.getInstance().getBackgroundScheduler();
+    return ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -233,7 +233,7 @@ public void setWindow(Window window) {
 
   @Implementation
   public void runOnUiThread(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowChoreographer.java
Patch:
@@ -41,12 +41,12 @@ public static Choreographer getInstance() {
 
   @Implementation
   public void postCallbackDelayed(int callbackType, Runnable action, Object token, long delayMillis) {
-      ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMillis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMillis);
   }
 
   @Implementation
   public void postFrameCallbackDelayed(final Choreographer.FrameCallback callback, long delayMillis) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         callback.doFrame(getFrameTimeNanos());

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSystemClock.java
Patch:
@@ -17,13 +17,13 @@ public class ShadowSystemClock {
   private static final int MILLIS_PER_NANO = 1000000;
 
   static long now() {
-    return ShadowLooper.getUiThreadScheduler().getCurrentTime();
+    return ShadowApplication.getInstance().getForegroundThreadScheduler().getCurrentTime();
   }
 
   @Implementation
   public static void sleep(long millis) {
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceBy(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceBy(millis);
   }
 
   @Implementation
@@ -32,7 +32,7 @@ public static boolean setCurrentTimeMillis(long millis) {
       return false;
     }
     nanoTime = millis * MILLIS_PER_NANO;
-    ShadowLooper.getUiThreadScheduler().advanceTo(millis);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().advanceTo(millis);
     return true;
   }
   

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -403,17 +403,17 @@ public Bitmap getDrawingCache() {
 
   @Implementation
   public void post(Runnable action) {
-    ShadowLooper.getUiThreadScheduler().post(action);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().post(action);
   }
 
   @Implementation
   public void postDelayed(Runnable action, long delayMills) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(action, delayMills);
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(action, delayMills);
   }
 
   @Implementation
   public void postInvalidateDelayed(long delayMilliseconds) {
-    ShadowLooper.getUiThreadScheduler().postDelayed(new Runnable() {
+    ShadowApplication.getInstance().getForegroundThreadScheduler().postDelayed(new Runnable() {
       @Override
       public void run() {
         realView.invalidate();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/util/concurrent/RoboExecutorService.java
Patch:
@@ -20,7 +20,7 @@ public class RoboExecutorService implements ExecutorService {
   private final Scheduler scheduler;
 
   public RoboExecutorService() {
-    this.scheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+    this.scheduler = ShadowApplication.getInstance().getBackgroundThreadScheduler();
   }
 
   @Override

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -1,6 +1,7 @@
 package org.robolectric.shadows;
 
 import android.content.Context;
+import org.robolectric.Robolectric;
 import org.robolectric.util.SimpleFuture;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Implements;
@@ -22,7 +23,7 @@ public void __constructor__(Context context) {
       @Override protected void done() {
         try {
           final D result = get();
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override public void run() {
               realLoader.deliverResult(result);
             }
@@ -36,7 +37,7 @@ public void __constructor__(Context context) {
 
   @Implementation
   public void onForceLoad() {
-    ShadowApplication.getInstance().getBackgroundScheduler().post(new Runnable() {
+    Robolectric.getBackgroundThreadScheduler().post(new Runnable() {
       @Override
       public void run() {
         future.run();

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowLocalBroadcastManager.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -65,7 +66,7 @@ public boolean sendBroadcast(Intent intent) {
           sent = true;
           final BroadcastReceiver receiver = wrapper.broadcastReceiver;
           final Intent broadcastIntent = intent;
-          ShadowLooper.getUiThreadScheduler().post(new Runnable() {
+          Robolectric.getForegroundThreadScheduler().post(new Runnable() {
             @Override
             public void run() {
               receiver.onReceive(RuntimeEnvironment.application, broadcastIntent);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAnimationSetTest.java
Patch:
@@ -35,7 +35,7 @@ public void start_shouldRunAnimation() {
 
     verify(moveListener).onAnimationStart(move);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(moveListener).onAnimationEnd(move);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowAutoCompleteTextViewTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 
@@ -21,7 +22,7 @@ public class ShadowAutoCompleteTextViewTest {
 
   @Test
   public void shouldInvokeFilter() throws Exception {
-    ShadowLooper.getUiThreadScheduler().pause();
+    Robolectric.getForegroundThreadScheduler().pause();
     AutoCompleteTextView view = new AutoCompleteTextView(RuntimeEnvironment.application);
     view.setAdapter(adapter);
 

File: robolectric/src/test/java/org/robolectric/shadows/ShadowHandlerTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.util.TestRunnable;
@@ -466,9 +467,9 @@ public boolean handleMessage(Message msg) {
 
     h.sendEmptyMessage(0);
     h.sendEmptyMessageDelayed(0, 4000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
     h.sendEmptyMessageDelayed(0, 12000l);
-    ShadowLooper.getUiThreadScheduler().advanceToLastPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
     assertThat(whens).as("whens").containsExactly(0l, 4000l, 16000l);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMediaPlayerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.internal.Shadow;
@@ -74,9 +75,9 @@ public void setUp() {
 
     // Scheduler is used in many of the tests to simulate
     // moving forward in time.
-    scheduler = ShadowLooper.getUiThreadScheduler();
+    scheduler = Robolectric.getForegroundThreadScheduler();
     scheduler.pause();
-    
+
     defaultSource = toDataSource(DUMMY_SOURCE);
     info = new MediaInfo();
     ShadowMediaPlayer.addMediaInfo(defaultSource, info);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowMessageTest.java
Patch:
@@ -224,7 +224,7 @@ private void recycle_shouldRemoveMessageFromScheduler() {
     Handler h = new Handler();
     Message msg = Message.obtain(h, 234);
     msg.sendToTarget();
-    Scheduler scheduler = ShadowLooper.getUiThreadScheduler();
+    Scheduler scheduler = Robolectric.getForegroundThreadScheduler();
     assertThat(scheduler.size()).as("before recycle").isEqualTo(1);
     shadowOf(msg).recycleUnchecked();
     assertThat(scheduler.size()).as("after recycle").isEqualTo(0);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -28,7 +28,7 @@ public void start_shouldRunAnimation() {
     verify(listener).onAnimationStart(animator);
     assertThat(target.getTransparency()).isEqualTo(0);
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     verify(listener).onAnimationEnd(animator);
     assertThat(target.getTransparency()).isEqualTo(4);

File: robolectric/src/test/java/org/robolectric/shadows/ShadowValueAnimatorTest.java
Patch:
@@ -31,7 +31,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
     });
     animator.start();
 
-    Robolectric.flushForegroundScheduler();
+    Robolectric.flushForegroundThreadScheduler();
 
     assertThat(values).containsExactly(0, 0, 0, 0, 2, 3, 5, 6, 7, 9, 9, 10);
   }

File: robolectric/src/test/java/org/robolectric/shadows/ShadowViewTest.java
Patch:
@@ -311,7 +311,7 @@ public void shouldPostActionsToTheMessageQueueWithDelay() throws Exception {
     view.postDelayed(runnable, 1);
     assertFalse(runnable.wasRun);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertTrue(runnable.wasRun);
   }
 
@@ -322,7 +322,7 @@ public void shouldRemovePostedCallbacksFromMessageQueue() throws Exception {
 
     view.removeCallbacks(runnable);
 
-    ShadowLooper.getUiThreadScheduler().advanceBy(1);
+    Robolectric.getForegroundThreadScheduler().advanceBy(1);
     assertThat(runnable.wasRun).isFalse();
   }
 
@@ -469,7 +469,7 @@ public void setAnimation() {
 
     verifyZeroInteractions(listener);
 
-    ShadowLooper.getUiThreadScheduler().advanceToNextPostedRunnable();
+    Robolectric.getForegroundThreadScheduler().advanceToNextPostedRunnable();
 
     verify(listener).onAnimationStart(animation);
     verify(listener).onAnimationEnd(animation);

File: robolectric/src/test/java/org/robolectric/util/concurrent/RoboExecutorServiceTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.util.Scheduler;
@@ -17,7 +18,7 @@
 public class RoboExecutorServiceTest {
   private final Transcript transcript = new Transcript();
   private final RoboExecutorService executorService = new RoboExecutorService();
-  private final Scheduler backgroundScheduler = ShadowApplication.getInstance().getBackgroundScheduler();
+  private final Scheduler backgroundScheduler = Robolectric.getBackgroundThreadScheduler();
   private Runnable runnable;
 
   @Before

File: robolectric/src/test/java/org/robolectric/MultiApiRobolectricTestRunnerUriTest.java
Patch:
@@ -11,8 +11,8 @@
  *
  * @author John Ferlisi
  */
-@RunWith(ExperimentalRobolectricTestRunner.class)
-public final class ExperimentalRobolectricTestRunnerUriTest {
+@RunWith(MultiApiRobolectricTestRunner.class)
+public final class MultiApiRobolectricTestRunnerUriTest {
 
   @Test
   @Config(manifest = Config.NONE)

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -125,7 +125,7 @@ protected DependencyResolver getJarResolver() {
   }
 
   public SdkEnvironment createSdkEnvironment(SdkConfig sdkConfig) {
-    InstrumentingClassLoaderConfig config = createSetup();
+    InstrumentingClassLoaderConfig config = createClassLoaderConfig();
     ClassLoader robolectricClassLoader = createRobolectricClassLoader(config, sdkConfig);
     return new SdkEnvironment(sdkConfig, robolectricClassLoader);
   }
@@ -146,8 +146,8 @@ protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir,
     return manifest;
   }
 
-  public InstrumentingClassLoaderConfig createSetup() {
-    return new InstrumentingClassLoaderConfig();
+  public InstrumentingClassLoaderConfig createClassLoaderConfig() {
+    return InstrumentingClassLoaderConfig.newBuilder().build();
   }
 
   protected Class<? extends TestLifecycle> getTestLifecycleClass() {

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Test;
 import org.junit.Before;
 import org.junit.runner.RunWith;
+import org.junit.runners.model.InitializationError;
 import org.robolectric.annotation.Config;
 import android.content.res.Resources;
 import android.content.res.Configuration;
@@ -15,7 +16,6 @@
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 
-import static org.mockito.Mockito.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
@@ -24,8 +24,8 @@ public class ParallelUniverseTest {
   private ParallelUniverse pu;
 
   @Before
-  public void setUp() {
-    pu = new ParallelUniverse(mock(RobolectricTestRunner.class));
+  public void setUp() throws InitializationError {
+    pu = new ParallelUniverse(new RobolectricTestRunner(ParallelUniverseTest.class));
     pu.setSdkConfig(new SdkConfig(18));
   }
 

File: robolectric/src/test/java/org/robolectric/internal/bytecode/InstrumentingClassLoaderConfigTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.mockito.Mockito.when;
 
 public class InstrumentingClassLoaderConfigTest {
-  private final InstrumentingClassLoaderConfig config = new InstrumentingClassLoaderConfig();
+  private final InstrumentingClassLoaderConfig config = InstrumentingClassLoaderConfig.newBuilder().build();
 
   @Test
   public void shouldNotInstrumentAndroidAppClasses() throws Exception {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowObjectAnimatorTest.java
Patch:
@@ -20,6 +20,7 @@ public class ShadowObjectAnimatorTest {
   public void start_shouldRunAnimation() {
     final ObjectAnimator animator = ObjectAnimator.ofInt(target, "transparency", 0, 1, 2, 3, 4);
 
+    Robolectric.getForegroundThreadScheduler().pause();
     animator.setDuration(1000);
     animator.addListener(listener);
     animator.start();

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -85,13 +85,13 @@ public void shouldRegisterActivitiesFromManifestInPackageManager() throws Except
 
   @Test public void shouldLoadConfigApplicationIfSpecified() throws Exception {
     Application application = defaultTestLifecycle.createApplication(null,
-        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeApp.class, new String[0], null));
+        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", null, "", "", -1, new Class[0], TestFakeApp.class, new String[0], null));
     assertThat(application).isExactlyInstanceOf(TestFakeApp.class);
   }
 
   @Test public void shouldLoadConfigInnerClassApplication() throws Exception {
     Application application = defaultTestLifecycle.createApplication(null,
-        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeAppInner.class, new String[0], null));
+        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", null, "", "", -1, new Class[0], TestFakeAppInner.class, new String[0], null));
     assertThat(application).isExactlyInstanceOf(TestFakeAppInner.class);
   }
 

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -38,7 +38,7 @@ public void ensureBouncyCastleInstalled() throws CertificateException {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
     String givenQualifiers = "";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, null, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("v18");
@@ -48,7 +48,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
     String givenQualifiers = "land-v17";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, null, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("land-v17");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("land-v17");
@@ -58,7 +58,7 @@ public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQualifiers() {
     String givenQualifiers = "large-land";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, null, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("large-land-v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("large-land-v18");

File: robolectric-annotations/src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -198,7 +198,7 @@ public Implementation(Config baseConfig, Config overlayConfig) {
       this.resourceDir = pick(baseConfig.resourceDir(), overlayConfig.resourceDir(), Config.DEFAULT_RES_FOLDER);
       this.assetDir = pick(baseConfig.assetDir(), overlayConfig.assetDir(), Config.DEFAULT_ASSET_FOLDER);
       this.reportSdk = pick(baseConfig.reportSdk(), overlayConfig.reportSdk(), -1);
-      this.constants = pick(baseConfig.constants(), overlayConfig.constants(), null);
+      this.constants = pick(baseConfig.constants(), overlayConfig.constants(), Void.class);
 
       Set<Class<?>> shadows = new HashSet<>();
       shadows.addAll(Arrays.asList(baseConfig.shadows()));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -98,7 +98,9 @@ public static synchronized boolean isLoggable(String tag, int level) {
   @Implementation
   public static int println(int priority, String tag, String msg) {
     addLog(priority, tag, msg, null);
-    return extraLogLength + tag.length() + msg.length();
+    int tagLength = tag == null ? 0 : tag.length();
+    int msgLength = msg == null ? 0 : msg.length();
+    return extraLogLength + tagLength + msgLength;
   }
 
   /**

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -62,7 +62,7 @@ public class RobolectricTestRunner extends BlockJUnit4ClassRunner {
   private Class<? extends RobolectricTestRunner> lastTestRunnerClass;
   private SdkConfig lastSdkConfig;
   private SdkEnvironment lastSdkEnvironment;
-  private final HashSet<Class<?>> loadedTestClasses = new HashSet<Class<?>>();
+  private final HashSet<Class<?>> loadedTestClasses = new HashSet<>();
 
   /**
    * Creates a runner to run {@code testClass}. Looks in your working directory for your AndroidManifest.xml file

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -85,13 +85,13 @@ public void shouldRegisterActivitiesFromManifestInPackageManager() throws Except
 
   @Test public void shouldLoadConfigApplicationIfSpecified() throws Exception {
     Application application = defaultTestLifecycle.createApplication(null,
-        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeApp.class, new String[0]));
+        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeApp.class, new String[0], null));
     assertThat(application).isExactlyInstanceOf(TestFakeApp.class);
   }
 
   @Test public void shouldLoadConfigInnerClassApplication() throws Exception {
     Application application = defaultTestLifecycle.createApplication(null,
-        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeAppInner.class, new String[0]));
+        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeAppInner.class, new String[0], null));
     assertThat(application).isExactlyInstanceOf(TestFakeAppInner.class);
   }
 

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -38,7 +38,7 @@ public void ensureBouncyCastleInstalled() throws CertificateException {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
     String givenQualifiers = "";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("v18");
@@ -48,7 +48,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
     String givenQualifiers = "land-v17";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("land-v17");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("land-v17");
@@ -58,7 +58,7 @@ public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQualifiers() {
     String givenQualifiers = "large-land";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0], null);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("large-land-v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("large-land-v18");

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -420,7 +420,7 @@ protected void setUpApplicationState(Method method, ParallelUniverseInterface pa
     parallelUniverseInterface.setUpApplicationState(method, testLifecycle, systemResourceLoader, appManifest, config);
   }
 
-  private SdkConfig pickSdkVersion(AndroidManifest appManifest, Config config) {
+  protected SdkConfig pickSdkVersion(AndroidManifest appManifest, Config config) {
     if (config != null && config.emulateSdk() > 0) {
       return new SdkConfig(config.emulateSdk());
     } else {
@@ -432,7 +432,7 @@ private SdkConfig pickSdkVersion(AndroidManifest appManifest, Config config) {
     }
   }
 
-  private int pickReportedSdkVersion(Config config, AndroidManifest appManifest) {
+  protected int pickReportedSdkVersion(Config config, AndroidManifest appManifest) {
     // Check if the user has explicitly overridden the reported version
     if (config != null && config.reportSdk() > 0) {
       return config.reportSdk();

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPreferenceActivity.java
Patch:
@@ -21,6 +21,7 @@ public class ShadowPreferenceActivity extends ShadowActivity {
   public void addPreferencesFromResource(int preferencesResId) {
     this.preferencesResId = preferencesResId;
     preferenceScreen = inflatePreferences(preferencesResId);
+    ((PreferenceActivity)realActivity).setPreferenceScreen(preferenceScreen);
   }
 
   private PreferenceScreen inflatePreferences(int preferencesResId) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/util/PreferenceBuilder.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.preference.Preference;
+import android.preference.PreferenceActivity;
 import android.preference.PreferenceGroup;
 import android.preference.PreferenceManager;
 import android.util.AttributeSet;
@@ -38,8 +39,7 @@ public Preference inflate(PreferenceNode preferenceNode, Activity activity, Pref
     }
 
     Preference preference = create(preferenceNode, activity, (PreferenceGroup) parent);
-    PreferenceManager manager = ReflectionHelpers.callConstructor(PreferenceManager.class, ReflectionHelpers.ClassParameter.from(Activity.class, activity), ReflectionHelpers.ClassParameter.from(int.class, 0));
-    shadowOf(preference).callOnAttachedToHierarchy(manager);
+    shadowOf(preference).callOnAttachedToHierarchy(((PreferenceActivity)activity).getPreferenceManager());
 
     for (PreferenceNode child : preferenceNode.getChildren()) {
       inflate(child, activity, preference);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -381,7 +381,8 @@ public Menu getOptionsMenu() {
    */
   public boolean clickMenuItem(int menuItemResId) {
     if (optionsMenu == null) {
-      throw new RuntimeException("Activity does not have an options menu!");
+      throw new RuntimeException("Activity does not have an options menu! Did you forget to call " +
+          "super.onCreateOptionsMenu(menu) in " + realActivity.getClass().getName() + "?");
     }
 
     final MenuItem item = optionsMenu.findItem(menuItemResId);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowService.java
Patch:
@@ -48,6 +48,7 @@ public void unbindService(ServiceConnection conn) {
     if (unbindServiceShouldThrowIllegalArgument) {
       throw new IllegalArgumentException();
     }
+    super.unbindService(conn);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -381,7 +381,8 @@ public Menu getOptionsMenu() {
    */
   public boolean clickMenuItem(int menuItemResId) {
     if (optionsMenu == null) {
-      throw new RuntimeException("Activity does not have an options menu!");
+      throw new RuntimeException("Activity does not have an options menu! Did you forget to call " +
+          "super.onCreateOptionsMenu(menu) in " + realActivity.getClass().getName() + "?");
     }
 
     final MenuItem item = optionsMenu.findItem(menuItemResId);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowService.java
Patch:
@@ -48,6 +48,7 @@ public void unbindService(ServiceConnection conn) {
     if (unbindServiceShouldThrowIllegalArgument) {
       throw new IllegalArgumentException();
     }
+    super.unbindService(conn);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPreferenceActivity.java
Patch:
@@ -21,6 +21,7 @@ public class ShadowPreferenceActivity extends ShadowActivity {
   public void addPreferencesFromResource(int preferencesResId) {
     this.preferencesResId = preferencesResId;
     preferenceScreen = inflatePreferences(preferencesResId);
+    ((PreferenceActivity)realActivity).setPreferenceScreen(preferenceScreen);
   }
 
   private PreferenceScreen inflatePreferences(int preferencesResId) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/util/PreferenceBuilder.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.preference.Preference;
+import android.preference.PreferenceActivity;
 import android.preference.PreferenceGroup;
 import android.preference.PreferenceManager;
 import android.util.AttributeSet;
@@ -38,8 +39,7 @@ public Preference inflate(PreferenceNode preferenceNode, Activity activity, Pref
     }
 
     Preference preference = create(preferenceNode, activity, (PreferenceGroup) parent);
-    PreferenceManager manager = ReflectionHelpers.callConstructor(PreferenceManager.class, ReflectionHelpers.ClassParameter.from(Activity.class, activity), ReflectionHelpers.ClassParameter.from(int.class, 0));
-    shadowOf(preference).callOnAttachedToHierarchy(manager);
+    shadowOf(preference).callOnAttachedToHierarchy(((PreferenceActivity)activity).getPreferenceManager());
 
     for (PreferenceNode child : preferenceNode.getChildren()) {
       inflate(child, activity, preference);

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -45,6 +45,8 @@ public interface RobolectricPackageManager {
 
   void addActivityIcon(Intent intent, Drawable d);
 
+  void setApplicationIcon(String packageName, Drawable d);
+
   Intent getLaunchIntentForPackage(String packageName);
 
   CharSequence getApplicationLabel(ApplicationInfo info);

File: robolectric-resources/src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -45,6 +45,8 @@ public interface RobolectricPackageManager {
 
   void addActivityIcon(Intent intent, Drawable d);
 
+  void setApplicationIcon(String packageName, Drawable d);
+
   Intent getLaunchIntentForPackage(String packageName);
 
   CharSequence getApplicationLabel(ApplicationInfo info);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -120,7 +120,7 @@ private TypedArray attrsToTypedArray(AttributeSet set, int[] attrs, int defStyle
     Style styleAttrStyle = null;
     Style theme = null;
 
-    List<ShadowAssetManager.OverlayedStyle> overlayedStyles = ShadowAssetManager.getOverlayThemeStyles((long) themeResourceId);
+    List<ShadowAssetManager.OverlayedStyle> overlayedStyles = ShadowAssetManager.getOverlayThemeStyles(themeResourceId);
     if (themeResourceId != 0) {
       // Load the style for the theme we represent. E.g. "@style/Theme.Robolectric"
       ResName themeStyleName = getResName(themeResourceId);

File: robolectric-resources/src/main/java/org/robolectric/ShadowsAdapter.java
Patch:
@@ -44,8 +44,6 @@ public interface ShadowsAdapter {
 
   ResourceLoader getResourceLoader();
 
-  File getFilesDir();
-
   public interface ShadowActivityAdapter {
     public void setTestApplication(Application application);
 

File: robolectric-resources/src/main/java/org/robolectric/manifest/BroadcastReceiverData.java
Patch:
@@ -1,15 +1,15 @@
 package org.robolectric.manifest;
 
+import java.util.ArrayList;
 import java.util.List;
-import com.google.android.collect.Lists;
 
 public class BroadcastReceiverData {
   private final String className;
   private final MetaData metaData;
   private final List<String> actions;
 
   public BroadcastReceiverData(String className, MetaData metaData) {
-    this.actions = Lists.newArrayList();
+    this.actions = new ArrayList<>();
     this.className = className;
     this.metaData = metaData;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -18,6 +18,6 @@ public class ShadowAbstractCursor {
    * @return Notification URI.
    */
   public Uri getNotificationUri_Compatibility() {
-    return ReflectionHelpers.getFieldReflectively(realAbstractCursor, "mNotifyUri");
+    return ReflectionHelpers.getField(realAbstractCursor, "mNotifyUri");
   }
 }
\ No newline at end of file

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -68,7 +68,7 @@ public void __constructor__() {
   }
 
   public void setApplication(Application application) {
-    ReflectionHelpers.setFieldReflectively(realActivity, "mApplication", application);
+    ReflectionHelpers.setField(realActivity, "mApplication", application);
   }
 
   public boolean setThemeFromManifest() {
@@ -232,7 +232,7 @@ public Window getWindow()  {
   }
 
   public void setWindow(Window window) {
-    ReflectionHelpers.setFieldReflectively(realActivity, "mWindow", window);
+    ReflectionHelpers.setField(realActivity, "mWindow", window);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAlertController.java
Patch:
@@ -75,6 +75,6 @@ public View getView() {
   }
 
   public Adapter getAdapter() {
-    return ReflectionHelpers.<ListView>callInstanceMethodReflectively(realAlertController, "getListView").getAdapter();
+    return ReflectionHelpers.<ListView>callInstanceMethod(realAlertController, "getListView").getAdapter();
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -120,7 +120,7 @@ public View getCustomTitleView() {
   }
 
   public ShadowAlertController getShadowAlertController() {
-    AlertController alert = ReflectionHelpers.getFieldReflectively(realAlertDialog, "mAlert");
+    AlertController alert = ReflectionHelpers.getField(realAlertDialog, "mAlert");
     return (ShadowAlertController) ShadowExtractor.extract(alert);
   }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAndroidHttpClient.java
Patch:
@@ -28,12 +28,12 @@ public class ShadowAndroidHttpClient {
 
   @Implementation
   public static AndroidHttpClient newInstance(String userAgent) {
-    return ReflectionHelpers.callConstructorReflectively(AndroidHttpClient.class);
+    return ReflectionHelpers.callConstructor(AndroidHttpClient.class);
   }
 
   @Implementation
   public static AndroidHttpClient newInstance(String userAgent, Context context) {
-    return ReflectionHelpers.callConstructorReflectively(AndroidHttpClient.class);
+    return ReflectionHelpers.callConstructor(AndroidHttpClient.class);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAnimationBridge.java
Patch:
@@ -15,7 +15,7 @@ public ShadowAnimationBridge(Animation realAnimation) {
   }
 
   public void applyTransformation(float interpolatedTime, Transformation transformation) {
-    ReflectionHelpers.callInstanceMethodReflectively(realAnimation, "applyTransformation",
+    ReflectionHelpers.callInstanceMethod(realAnimation, "applyTransformation",
         ClassParameter.from(float.class, interpolatedTime),
         ClassParameter.from(Transformation.class, transformation));
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.shadows;
 
-import android.app.Activity;
 import android.app.Application;
 import android.appwidget.AppWidgetManager;
 import android.appwidget.AppWidgetProvider;
@@ -193,7 +192,7 @@ public int createWidget(Class<? extends AppWidgetProvider> appWidgetProviderClas
    * @return the IDs of the new widgets
    */
   public int[] createWidgets(Class<? extends AppWidgetProvider> appWidgetProviderClass, int widgetLayoutId, int howManyToCreate) {
-    AppWidgetProvider appWidgetProvider = ReflectionHelpers.callConstructorReflectively(appWidgetProviderClass);
+    AppWidgetProvider appWidgetProvider = ReflectionHelpers.callConstructor(appWidgetProviderClass);
 
     int[] newWidgetIds = new int[howManyToCreate];
     for (int i = 0; i < howManyToCreate; i++) {
@@ -209,7 +208,7 @@ public int[] createWidgets(Class<? extends AppWidgetProvider> appWidgetProviderC
   }
 
   private void createWidgetProvider(Class<? extends AppWidgetProvider> appWidgetProviderClass, int... newWidgetIds) {
-    AppWidgetProvider appWidgetProvider = ReflectionHelpers.callConstructorReflectively(appWidgetProviderClass);
+    AppWidgetProvider appWidgetProvider = ReflectionHelpers.callConstructor(appWidgetProviderClass);
     appWidgetProvider.onUpdate(context, realAppWidgetManager, newWidgetIds);
   }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -11,10 +11,10 @@ public class ShadowArrayAdapter<T> extends ShadowBaseAdapter {
   @RealObject private ArrayAdapter<T> realArrayAdapter;
 
   public int getTextViewResourceId() {
-    return ReflectionHelpers.getFieldReflectively(realArrayAdapter, "mFieldId");
+    return ReflectionHelpers.getField(realArrayAdapter, "mFieldId");
   }
 
   public int getResourceId() {
-    return ReflectionHelpers.getFieldReflectively(realArrayAdapter, "mResource");
+    return ReflectionHelpers.getField(realArrayAdapter, "mResource");
   }
 }
\ No newline at end of file

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBinderBridge.java
Patch:
@@ -16,7 +16,7 @@ public ShadowBinderBridge(Binder realBinder) {
   }
 
   public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
-    return ReflectionHelpers.callInstanceMethodReflectively(realBinder, "onTransact",
+    return ReflectionHelpers.callInstanceMethod(realBinder, "onTransact",
         ClassParameter.from(int.class, code),
         ClassParameter.from(Parcel.class, data),
         ClassParameter.from(Parcel.class, reply),

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBitmapDrawable.java
Patch:
@@ -39,7 +39,7 @@ public void draw(Canvas canvas) {
   @Implementation
   public Drawable mutate() {
     Bitmap bitmap = realBitmapDrawable.getBitmap();
-    BitmapDrawable real = ReflectionHelpers.callConstructorReflectively(BitmapDrawable.class, ClassParameter.from(Bitmap.class, bitmap));
+    BitmapDrawable real = ReflectionHelpers.callConstructor(BitmapDrawable.class, ClassParameter.from(Bitmap.class, bitmap));
     ShadowBitmapDrawable shadow = shadowOf(real);
     shadow.colorFilter = this.colorFilter;
     shadow.drawableCreateFromStreamSource = drawableCreateFromStreamSource;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -48,7 +48,7 @@ public static Bitmap decodeResourceStream(Resources res, TypedValue value, Input
 
     if (value != null && value.string != null && value.string.toString().contains(".9.")) {
       // todo: better support for nine-patches
-      ReflectionHelpers.callInstanceMethodReflectively(bitmap, "setNinePatchChunk", ClassParameter.from(byte[].class, new byte[0]));
+      ReflectionHelpers.callInstanceMethod(bitmap, "setNinePatchChunk", ClassParameter.from(byte[].class, new byte[0]));
     }
     return bitmap;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBundle.java
Patch:
@@ -43,6 +43,6 @@ public boolean equals(Object other) {
   }
 
   private static Map getUnderlyingMap(Bundle bundle) {
-    return ReflectionHelpers.getFieldReflectively(bundle, "mMap");
+    return ReflectionHelpers.getField(bundle, "mMap");
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -8,7 +8,6 @@
 import android.graphics.Path;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import org.robolectric.Shadows;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
@@ -37,7 +36,7 @@ public class ShadowCanvas {
   private List<OvalPaintHistoryEvent> ovalPaintEvents = new ArrayList<OvalPaintHistoryEvent>();
   private List<TextHistoryEvent> drawnTextEventHistory = new ArrayList<TextHistoryEvent>();
   private Paint drawnPaint;
-  private Bitmap targetBitmap = ReflectionHelpers.callConstructorReflectively(Bitmap.class);
+  private Bitmap targetBitmap = ReflectionHelpers.callConstructor(Bitmap.class);
   private float translateX;
   private float translateY;
   private float scaleX = 1;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowColorMatrix.java
Patch:
@@ -28,6 +28,6 @@ public String toString() {
   }
   
   private float[] getMatrix() {
-    return ReflectionHelpers.getFieldReflectively(realColorMatrix, "mArray");
+    return ReflectionHelpers.getField(realColorMatrix, "mArray");
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowContentProviderOperation.java
Patch:
@@ -54,6 +54,6 @@ public Map<Integer, Integer> getSelectionArgsBackReferences() {
   }
 
   private <T> T getFieldReflectively(String fieldName) {
-    return ReflectionHelpers.getFieldReflectively(realOperation, fieldName);
+    return ReflectionHelpers.getField(realOperation, fieldName);
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowContext.java
Patch:
@@ -198,6 +198,6 @@ public ShadowApplication getShadowApplication() {
   }
 
   public void callAttachBaseContext(Context context) {
-    ReflectionHelpers.callInstanceMethodReflectively(realContext, "attachBaseContext", ClassParameter.from(Context.class, context));
+    ReflectionHelpers.callInstanceMethod(realContext, "attachBaseContext", ClassParameter.from(Context.class, context));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowContextThemeWrapper.java
Patch:
@@ -11,6 +11,6 @@ public class ShadowContextThemeWrapper extends ShadowContextWrapper {
   @RealObject private ContextThemeWrapper realContextThemeWrapper;
 
   public Integer callGetThemeResId() {
-    return ReflectionHelpers.callInstanceMethodReflectively(realContextThemeWrapper, "getThemeResId");
+    return ReflectionHelpers.callInstanceMethod(realContextThemeWrapper, "getThemeResId");
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowCookieManager.java
Patch:
@@ -38,7 +38,7 @@ public class ShadowCookieManager {
   @Implementation
   public static CookieManager getInstance() {
     if (sRef == null) {
-      sRef = ReflectionHelpers.callConstructorReflectively(CookieManager.class);
+      sRef = ReflectionHelpers.callConstructor(CookieManager.class);
     }
     return sRef;
   }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -82,7 +82,7 @@ public void setCanceledOnTouchOutside(boolean flag) {
   }
 
   public boolean isCancelable() {
-    return ReflectionHelpers.getFieldReflectively(realDialog, "mCancelable");
+    return ReflectionHelpers.getField(realDialog, "mCancelable");
   }
 
   public boolean isCancelableOnTouchOutside() {
@@ -139,6 +139,6 @@ public static List<Dialog> getShownDialogs() {
   }
 
   public void callOnCreate(Bundle bundle) {
-    ReflectionHelpers.callInstanceMethodReflectively(realDialog, "onCreate", ClassParameter.from(Bundle.class, bundle));
+    ReflectionHelpers.callInstanceMethod(realDialog, "onCreate", ClassParameter.from(Bundle.class, bundle));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowDisplayManagerGlobal {
 
   @Implementation
   public static Object getInstance() {
-    return ReflectionHelpers.callConstructorReflectively(DisplayManagerGlobal.class,
+    return ReflectionHelpers.callConstructor(DisplayManagerGlobal.class,
         ClassParameter.from(IDisplayManager.class, displayManager));
   }
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowDownloadManager.java
Patch:
@@ -239,6 +239,6 @@ private void checkClosed() {
   }
 
   private static <T> T getFieldReflectively(String fieldName, Object object, Class aClass) {
-    return ReflectionHelpers.getFieldReflectively(object, fieldName);
+    return ReflectionHelpers.getField(object, fieldName);
   }
 }
\ No newline at end of file

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowFilter.java
Patch:
@@ -15,10 +15,10 @@ public class ShadowFilter {
   public void filter(CharSequence constraint, Filter.FilterListener listener) {
     try {
       Class<?> forName = Class.forName("android.widget.Filter$FilterResults");
-      Object filtering = ReflectionHelpers.callInstanceMethodReflectively(realObject, "performFiltering",
+      Object filtering = ReflectionHelpers.callInstanceMethod(realObject, "performFiltering",
           ClassParameter.from(CharSequence.class, constraint));
 
-      ReflectionHelpers.callInstanceMethodReflectively(realObject, "publishResults",
+      ReflectionHelpers.callInstanceMethod(realObject, "publishResults",
           ClassParameter.from(CharSequence.class, constraint),
           ClassParameter.from(forName, filtering));
 

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowHandler.java
Patch:
@@ -116,7 +116,7 @@ public void run() {
   }
 
   private void setMessageWhen(Message msg, long when) {
-    ReflectionHelpers.setFieldReflectively(msg, "when", when);
+    ReflectionHelpers.setField(msg, "when", when);
   }
 
   private void routeMessage(Message msg) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowHandlerThread.java
Patch:
@@ -33,7 +33,7 @@ public void run() {
   }
 
   private void callOnLooperPrepared() {
-    ReflectionHelpers.callInstanceMethodReflectively(realObject, "onLooperPrepared");
+    ReflectionHelpers.callInstanceMethod(realObject, "onLooperPrepared");
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowKeyCharacterMap.java
Patch:
@@ -9,6 +9,6 @@
 public class ShadowKeyCharacterMap {
   @Implementation
   public static KeyCharacterMap load(int deviceId) {
-    return ReflectionHelpers.callConstructorReflectively(KeyCharacterMap.class);
+    return ReflectionHelpers.callConstructor(KeyCharacterMap.class);
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -11,6 +11,6 @@ public class ShadowLinearLayout extends ShadowViewGroup {
   @RealObject LinearLayout realObject;
 
   public int getGravity() {
-    return ReflectionHelpers.getFieldReflectively(realObject, "mGravity");
+    return ReflectionHelpers.getField(realObject, "mGravity");
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -38,7 +38,7 @@ private static SoftThreadLocal<Looper> makeThreadLocalLoopers() {
   }
 
   private static Looper createLooper() {
-    return ReflectionHelpers.callConstructorReflectively(Looper.class);
+    return ReflectionHelpers.callConstructor(Looper.class);
   }
 
   @Resetter

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowNfcAdapter.java
Patch:
@@ -21,7 +21,7 @@ public class ShadowNfcAdapter {
 
   @Implementation
   public static NfcAdapter getDefaultAdapter(Context context) {
-    return ReflectionHelpers.callConstructorReflectively(NfcAdapter.class);
+    return ReflectionHelpers.callConstructor(NfcAdapter.class);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -13,7 +13,6 @@
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -34,7 +33,7 @@ public void writeByteArray(byte[] b, int offset, int len) {
       realObject.writeInt(-1);
       return;
     }
-    nativeWriteByteArray((Long) ReflectionHelpers.getFieldReflectively(realObject, "mNativePtr"), b, offset, len);
+    nativeWriteByteArray((Long) ReflectionHelpers.getField(realObject, "mNativePtr"), b, offset, len);
   }
 
   @Implementation @HiddenApi

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowPendingIntent.java
Patch:
@@ -162,7 +162,7 @@ private static PendingIntent create(Context context, Intent[] intents, boolean i
       return getCreatedIntentFor(intents);
     }
 
-    PendingIntent pendingIntent = ReflectionHelpers.callConstructorReflectively(PendingIntent.class);
+    PendingIntent pendingIntent = ReflectionHelpers.callConstructor(PendingIntent.class);
     ShadowPendingIntent shadowPendingIntent = Shadows.shadowOf(pendingIntent);
     shadowPendingIntent.savedIntents = intents;
     shadowPendingIntent.isActivityIntent = isActivity;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowResultReceiver.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowResultReceiver {
 
   @Implementation
   public void send(int resultCode, android.os.Bundle resultData) {
-    ReflectionHelpers.callInstanceMethodReflectively(realResultReceiver, "onReceiveResult", new ReflectionHelpers.ClassParameter(Integer.TYPE, resultCode),
+    ReflectionHelpers.callInstanceMethod(realResultReceiver, "onReceiveResult", new ReflectionHelpers.ClassParameter(Integer.TYPE, resultCode),
         new ReflectionHelpers.ClassParameter(Bundle.class, resultData));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowSensorManager.java
Patch:
@@ -62,6 +62,6 @@ public boolean hasListener(SensorEventListener listener) {
   }
 
   public SensorEvent createSensorEvent() {
-    return ReflectionHelpers.callConstructorReflectively(SensorEvent.class);
+    return ReflectionHelpers.callConstructor(SensorEvent.class);
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTypedArray.java
Patch:
@@ -17,7 +17,7 @@ public class ShadowTypedArray {
   public String positionDescription;
 
   public static TypedArray create(Resources realResources, int[] attrs, int[] data, int[] indices, int len, CharSequence[] stringData) {
-    TypedArray typedArray = ReflectionHelpers.callConstructorReflectively(TypedArray.class, new ReflectionHelpers.ClassParameter(Resources.class, realResources),
+    TypedArray typedArray = ReflectionHelpers.callConstructor(TypedArray.class, new ReflectionHelpers.ClassParameter(Resources.class, realResources),
         new ReflectionHelpers.ClassParameter(int[].class, data), new ReflectionHelpers.ClassParameter(int[].class, indices),
         new ReflectionHelpers.ClassParameter(int.class, len));
     Shadows.shadowOf(typedArray).stringData = stringData;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.PriorityQueue;
 
 import static org.robolectric.Shadows.shadowOf;
 
@@ -106,7 +105,7 @@ synchronized public static void reset() {
   private static Typeface createUnderlyingTypeface(String familyName, int style) {
     long thisFontId = nextFontId++;
     FONTS.put(thisFontId, new FontDesc(familyName, style));
-    return ReflectionHelpers.callConstructorReflectively(Typeface.class, ClassParameter.from(long.class, thisFontId));
+    return ReflectionHelpers.callConstructor(Typeface.class, ClassParameter.from(long.class, thisFontId));
   }
 
   private static String getAssetsPath(AndroidManifest appManifest, String fontName) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -391,7 +391,7 @@ public View.OnCreateContextMenuListener getOnCreateContextMenuListener() {
 
   @Implementation
   public Bitmap getDrawingCache() {
-    return ReflectionHelpers.callConstructorReflectively(Bitmap.class);
+    return ReflectionHelpers.callConstructor(Bitmap.class);
   }
 
   @Implementation
@@ -490,7 +490,7 @@ public void finishedAnimation() {
 
   @Implementation
   public boolean isAttachedToWindow() {
-    return ReflectionHelpers.getFieldReflectively(realView, "mAttachInfo") != null;
+    return ReflectionHelpers.getField(realView, "mAttachInfo") != null;
   }
 
   public void callOnAttachedToWindow() {
@@ -502,7 +502,7 @@ public void callOnDetachedFromWindow() {
   }
 
   private void invokeReflectively(String methodName) {
-    ReflectionHelpers.callInstanceMethodReflectively(realView, methodName);
+    ReflectionHelpers.callInstanceMethod(realView, methodName);
   }
 
   @Implementation

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -86,7 +86,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
 
   @Implementation
   public void setLayoutParams(LayoutParams params) {
-    ReflectionHelpers.setFieldReflectively(realWebView, "mLayoutParams", params);
+    ReflectionHelpers.setField(realWebView, "mLayoutParams", params);
   }
 
   private Object nullish(Method method) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowWifiManager.java
Patch:
@@ -46,7 +46,7 @@ public boolean isWifiEnabled() {
   public WifiInfo getConnectionInfo() {
     checkAccessWifiStatePermission();
     if (wifiInfo == null) {
-      wifiInfo = ReflectionHelpers.callConstructorReflectively(WifiInfo.class);
+      wifiInfo = ReflectionHelpers.callConstructor(WifiInfo.class);
     }
     return wifiInfo;
   }
@@ -103,7 +103,7 @@ public boolean enableNetwork(int netId, boolean disableOthers) {
 
   @Implementation
   public WifiManager.WifiLock createWifiLock(int lockType, java.lang.String tag) {
-    return ReflectionHelpers.callConstructorReflectively(WifiManager.WifiLock.class);
+    return ReflectionHelpers.callConstructor(WifiManager.WifiLock.class);
   }
 
   @Implementation

File: robolectric-shadows/shadows-maps/src/main/java/org/robolectric/shadows/ShadowMapView.java
Patch:
@@ -321,7 +321,7 @@ public void setCanCoverCenter(boolean canCoverCenter) {
   }
 
   private void setContextOnRealView(Context context) {
-    ReflectionHelpers.setFieldReflectively(realView, "mContext", context);
+    ReflectionHelpers.setField(realView, "mContext", context);
   }
 
   private ShadowMapController shadowOf(MapController mapController) {

File: robolectric-shadows/shadows-support-v4/src/main/java/org/robolectric/shadows/ShadowLocalBroadcastManager.java
Patch:
@@ -27,7 +27,7 @@ public static LocalBroadcastManager getInstance(final Context context) {
     return shadowOf(context).getShadowApplication().getSingleton(LocalBroadcastManager.class, new Provider<LocalBroadcastManager>() {
       @Override
       public LocalBroadcastManager get() {
-        return ReflectionHelpers.callConstructorReflectively(LocalBroadcastManager.class, new ReflectionHelpers.ClassParameter(Context.class, context));
+        return ReflectionHelpers.callConstructor(LocalBroadcastManager.class, new ReflectionHelpers.ClassParameter(Context.class, context));
       }
     });
   }

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -150,8 +150,8 @@ protected ClassLoader createRobolectricClassLoader(Setup setup, SdkConfig sdkCon
 
   public static void injectClassHandler(ClassLoader robolectricClassLoader, ClassHandler classHandler) {
     String className = RobolectricInternals.class.getName();
-    Class<?> robolectricInternalsClass = ReflectionHelpers.loadClassReflectively(robolectricClassLoader, className);
-    ReflectionHelpers.setStaticFieldReflectively(robolectricInternalsClass, "classHandler", classHandler);
+    Class<?> robolectricInternalsClass = ReflectionHelpers.loadClass(robolectricClassLoader, className);
+    ReflectionHelpers.setStaticField(robolectricInternalsClass, "classHandler", classHandler);
   }
 
   @Override
@@ -214,7 +214,7 @@ public void evaluate() throws Throwable {
           parallelUniverseInterface.setSdkConfig(sdkEnvironment.getSdkConfig());
 
           int sdkVersion = pickReportedSdkVersion(config, appManifest);
-          ReflectionHelpers.setStaticFieldReflectively(sdkEnvironment.bootstrappedClass(Build.VERSION.class), "SDK_INT", sdkVersion);
+          ReflectionHelpers.setStaticField(sdkEnvironment.bootstrappedClass(Build.VERSION.class), "SDK_INT", sdkVersion);
 
           ResourceLoader systemResourceLoader = sdkEnvironment.getSystemResourceLoader(getJarResolver());
           setUpApplicationState(bootstrappedMethod, parallelUniverseInterface, systemResourceLoader, appManifest, config);

File: robolectric/src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -37,6 +37,6 @@ public static Object intercept(String signature, Object instance, Object[] param
   }
 
   public static void performStaticInitialization(Class<?> clazz) {
-    ReflectionHelpers.callStaticMethodReflectively(clazz, ShadowConstants.STATIC_INITIALIZER_METHOD_NAME);
+    ReflectionHelpers.callStaticMethod(clazz, ShadowConstants.STATIC_INITIALIZER_METHOD_NAME);
   }
 }

File: robolectric/src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -283,7 +283,7 @@ public Object call(Class<?> theClass, Object value, Object[] params) {
           }
 
           Object context = params[0];
-          return ReflectionHelpers.callStaticMethodReflectively(shadowWindowClass, "create", ClassParameter.from(activityClass, context));
+          return ReflectionHelpers.callStaticMethod(shadowWindowClass, "create", ClassParameter.from(activityClass, context));
         }
       };
     } else if (methodSignature.matches("java.lang.System", "nanoTime") || methodSignature.matches("java.lang.System", "currentTimeMillis")) {
@@ -298,7 +298,7 @@ public Object call(Class<?> theClass, Object value, Object[] params) {
             throw new RuntimeException(e);
           }
 
-          return ReflectionHelpers.callStaticMethodReflectively(shadowSystemClockClass, methodSignature.methodName);
+          return ReflectionHelpers.callStaticMethod(shadowSystemClockClass, methodSignature.methodName);
         }
       };
     } else if (methodSignature.matches("java.lang.System", "arraycopy")) {

File: robolectric/src/main/java/org/robolectric/runtime/Api19AndroidRuntimeAdapter.java
Patch:
@@ -15,7 +15,7 @@ public class Api19AndroidRuntimeAdapter implements AndroidRuntimeAdapter{
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethodReflectively(component, "attach",
+    ReflectionHelpers.callInstanceMethod(component, "attach",
         new ReflectionHelpers.ClassParameter(Context.class, baseContext),
         new ReflectionHelpers.ClassParameter(activityThreadClass, null),
         new ReflectionHelpers.ClassParameter(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/runtime/Api21AndroidRuntimeAdapter.java
Patch:
@@ -16,7 +16,7 @@ public class Api21AndroidRuntimeAdapter implements AndroidRuntimeAdapter {
 
   @Override
   public void callActivityAttach(Object component, Context baseContext, Class<?> activityThreadClass, Application application, Intent intent, ActivityInfo activityInfo, String activityTitle, Class<?> nonConfigurationInstancesClass) {
-    ReflectionHelpers.callInstanceMethodReflectively(component, "attach",
+    ReflectionHelpers.callInstanceMethod(component, "attach",
         new ReflectionHelpers.ClassParameter(Context.class, baseContext),
         new ReflectionHelpers.ClassParameter(activityThreadClass, null),
         new ReflectionHelpers.ClassParameter(Instrumentation.class, new RoboInstrumentation()),

File: robolectric/src/main/java/org/robolectric/util/ServiceController.java
Patch:
@@ -48,7 +48,7 @@ public ServiceController<T> attach() {
       throw new RuntimeException(e);
     }
 
-    ReflectionHelpers.callInstanceMethodReflectively(component, "attach",
+    ReflectionHelpers.callInstanceMethod(component, "attach",
         ClassParameter.from(Context.class, baseContext),
         ClassParameter.from(activityThreadClass, null),
         ClassParameter.from(String.class, component.getClass().getSimpleName()),

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -39,7 +39,7 @@ public void shouldInitializeAndBindApplicationButNotCallOnCreate() throws Except
 
   @Test
   public void setStaticValue_shouldIgnoreFinalModifier() {
-    ReflectionHelpers.setStaticFieldReflectively(android.os.Build.class, "MODEL", "expected value");
+    ReflectionHelpers.setStaticField(android.os.Build.class, "MODEL", "expected value");
 
     assertEquals("expected value", android.os.Build.MODEL);
   }

File: robolectric/src/test/java/org/robolectric/res/DrawableResourceLoaderNoRunnerTest.java
Patch:
@@ -36,7 +36,7 @@ public class DrawableResourceLoaderNoRunnerTest {
   public void tearDown() throws Exception {
     if (originalSeparator != null) {
       Field field = File.class.getDeclaredField("separator");
-      ReflectionHelpers.setStaticFieldReflectively(field, originalSeparator);
+      ReflectionHelpers.setStaticField(field, originalSeparator);
       originalSeparator = null;
     }
   }
@@ -143,8 +143,8 @@ public void shouldFindDrawableResourcesWorkWithWindowsFilePath() throws Exceptio
 
   private void setFileSeparator(String separator) throws Exception {
     Field field = File.class.getDeclaredField("separator");
-    originalSeparator = ReflectionHelpers.getStaticFieldReflectively(field);
-    ReflectionHelpers.setStaticFieldReflectively(field, separator);
+    originalSeparator = ReflectionHelpers.getStaticField(field);
+    ReflectionHelpers.setStaticField(field, separator);
   }
 
   private void setResourceBase(FsFile mockTestBaseDir, ResourcePath mockResourcePath) throws NoSuchFieldException, IllegalAccessException {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowResourcesTest.java
Patch:
@@ -511,7 +511,7 @@ public void applyStyleNotForced() {
   }
 
   private long getInternalId(Resources.Theme theme) {
-    return ReflectionHelpers.getFieldReflectively(theme, "mTheme");
+    return ReflectionHelpers.getField(theme, "mTheme");
   }
 
   private static String findRootTag(XmlResourceParser parser) throws Exception {

File: robolectric/src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -76,7 +76,7 @@ public Object initializing(Object instance) {
   }
 
   @Override
-  synchronized public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass) {
+  public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass) {
     if (debug) System.out.println("[DEBUG] " + signature);
     if (planCache.containsKey(signature)) return planCache.get(signature);
     Plan plan = calculatePlan(signature, isStatic, theClass);
@@ -145,7 +145,7 @@ private Plan calculatePlan(String signature, boolean isStatic, Class<?> theClass
     }
   }
 
-  synchronized private ShadowConfig getShadowConfig(Class clazz) {
+  private ShadowConfig getShadowConfig(Class clazz) {
     ShadowConfig shadowConfig = shadowConfigCache.get(clazz);
     if (shadowConfig == null) {
       shadowConfig = shadowMap.get(clazz);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAbsSpinner.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import static org.robolectric.internal.Shadow.directlyOn;
 
@@ -17,13 +17,13 @@ public class ShadowAbsSpinner extends ShadowAdapterView {
 
   @Implementation
   public void setSelection(int position, boolean animate) {
-    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new ReflectionHelpers.ClassParameter(int.class, position), new ReflectionHelpers.ClassParameter(boolean.class, animate));
+    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", ClassParameter.from(int.class, position), ClassParameter.from(boolean.class, animate));
     animatedTransition = animate;
   }
 
   @Implementation
   public void setSelection(int position) {
-    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new ReflectionHelpers.ClassParameter(int.class, position));
+    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", ClassParameter.from(int.class, position));
     SpinnerAdapter adapter = realAbsSpinner.getAdapter();
     if (getItemSelectedListener() != null && adapter != null) {
       getItemSelectedListener().onItemSelected(realAbsSpinner, null, position, adapter.getItemId(position));

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAccessibilityManager.java
Patch:
@@ -13,6 +13,7 @@
 import org.robolectric.annotation.HiddenApi;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.internal.Shadow;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -118,7 +119,7 @@ static class MyHandler extends Handler {
     public void handleMessage(Message message) {
       switch (message.what) {
         case DO_SET_STATE:
-          ReflectionHelpers.callInstanceMethodReflectively(accessibilityManager, "setState", new ReflectionHelpers.ClassParameter(int.class, message.arg1));
+          ReflectionHelpers.callInstanceMethodReflectively(accessibilityManager, "setState", ClassParameter.from(int.class, message.arg1));
           return;
         default:
           Log.w("AccessibilityManager", "Unknown message type: " + message.what);

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowAdapterView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import static org.robolectric.internal.Shadow.directlyOn;
 import static org.robolectric.Shadows.shadowOf;
@@ -27,7 +27,7 @@ public class ShadowAdapterView<T extends Adapter> extends ShadowViewGroup {
   @Implementation
   public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener itemSelectedListener) {
     this.itemSelectedListener = itemSelectedListener;
-    directlyOn(realAdapterView, AdapterView.class, "setOnItemSelectedListener", new ReflectionHelpers.ClassParameter(AdapterView.OnItemSelectedListener.class, itemSelectedListener));
+    directlyOn(realAdapterView, AdapterView.class, "setOnItemSelectedListener", ClassParameter.from(AdapterView.OnItemSelectedListener.class, itemSelectedListener));
   }
 
   public AdapterView.OnItemSelectedListener getItemSelectedListener() {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowBitmapDrawable.java
Patch:
@@ -10,6 +10,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import static org.robolectric.Shadows.shadowOf;
 import static org.robolectric.internal.Shadow.directlyOn;
@@ -38,7 +39,7 @@ public void draw(Canvas canvas) {
   @Implementation
   public Drawable mutate() {
     Bitmap bitmap = realBitmapDrawable.getBitmap();
-    BitmapDrawable real = ReflectionHelpers.callConstructorReflectively(BitmapDrawable.class, new ReflectionHelpers.ClassParameter(Bitmap.class, bitmap));
+    BitmapDrawable real = ReflectionHelpers.callConstructorReflectively(BitmapDrawable.class, ClassParameter.from(Bitmap.class, bitmap));
     ShadowBitmapDrawable shadow = shadowOf(real);
     shadow.colorFilter = this.colorFilter;
     shadow.drawableCreateFromStreamSource = drawableCreateFromStreamSource;

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowContext.java
Patch:
@@ -14,6 +14,7 @@
 import org.robolectric.res.Attribute;
 import org.robolectric.res.ResName;
 import org.robolectric.res.ResourceLoader;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import java.io.*;
 import java.util.List;
@@ -197,6 +198,6 @@ public ShadowApplication getShadowApplication() {
   }
 
   public void callAttachBaseContext(Context context) {
-    ReflectionHelpers.callInstanceMethodReflectively(realContext, "attachBaseContext", new ReflectionHelpers.ClassParameter(Context.class, context));
+    ReflectionHelpers.callInstanceMethodReflectively(realContext, "attachBaseContext", ClassParameter.from(Context.class, context));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -15,12 +15,12 @@
 import org.robolectric.annotation.RealObject;
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static org.robolectric.internal.Shadow.directlyOn;
-import static org.robolectric.Shadows.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Dialog.class)
@@ -139,6 +139,6 @@ public static List<Dialog> getShownDialogs() {
   }
 
   public void callOnCreate(Bundle bundle) {
-    ReflectionHelpers.callInstanceMethodReflectively(realDialog, "onCreate", new ReflectionHelpers.ClassParameter(Bundle.class, bundle));
+    ReflectionHelpers.callInstanceMethodReflectively(realDialog, "onCreate", ClassParameter.from(Bundle.class, bundle));
   }
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -19,6 +19,7 @@
 import org.robolectric.annotation.Resetter;
 import org.robolectric.util.ReflectionHelpers;
 import org.robolectric.internal.Shadow;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import static org.robolectric.Shadows.shadowOf;
 
@@ -65,7 +66,7 @@ public static Drawable createFromResourceStream(Resources res, TypedValue value,
     if (bm != null) {
       boolean isNinePatch = srcName != null && srcName.contains(".9.");
       if (isNinePatch) {
-        ReflectionHelpers.callInstanceMethodReflectively(bm, "setNinePatchChunk", new ReflectionHelpers.ClassParameter(byte[].class, new byte[0]));
+        ReflectionHelpers.callInstanceMethodReflectively(bm, "setNinePatchChunk", ClassParameter.from(byte[].class, new byte[0]));
       }
       byte[] np = bm.getNinePatchChunk();
       if (np == null || !NinePatch.isNinePatchChunk(np)) {

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowIntentService.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
-import org.robolectric.util.ReflectionHelpers;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import static org.robolectric.internal.Shadow.directlyOn;
 
@@ -22,6 +22,6 @@ public boolean getIntentRedelivery() {
   @Implementation
   public void setIntentRedelivery(boolean enabled) {
     mRedelivery = enabled;
-    directlyOn(realIntentService, IntentService.class, "setIntentRedelivery", new ReflectionHelpers.ClassParameter(boolean.class, enabled));
+    directlyOn(realIntentService, IntentService.class, "setIntentRedelivery", ClassParameter.from(boolean.class, enabled));
   }
 }

File: robolectric/src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -8,6 +8,7 @@
 import org.robolectric.util.Function;
 import org.robolectric.internal.ShadowConstants;
 import org.robolectric.internal.Shadow;
+import org.robolectric.util.ReflectionHelpers.ClassParameter;
 
 import java.lang.reflect.*;
 import java.util.*;
@@ -245,7 +246,7 @@ public Object call(Class<?> theClass, Object value, Object[] params) {
           }
 
           Object context = params[0];
-          return ReflectionHelpers.callStaticMethodReflectively(shadowWindowClass, "create", new ReflectionHelpers.ClassParameter(activityClass, context));
+          return ReflectionHelpers.callStaticMethodReflectively(shadowWindowClass, "create", ClassParameter.from(activityClass, context));
         }
       };
     } else if (methodSignature.matches("java.lang.System", "nanoTime") || methodSignature.matches("java.lang.System", "currentTimeMillis")) {

File: robolectric/src/test/java/org/robolectric/bytecode/RealApisSuperHandlingTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.robolectric.internal.Shadow;
 
 import static org.junit.Assert.assertEquals;
-import static org.robolectric.internal.Shadow.directlyOn;
 
 @RunWith(TestRunners.RealApisWithoutDefaults.class)
 public class RealApisSuperHandlingTest {

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/ImplementationValidatorTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.robolectric.annotation.processing.SingleClassSubject.singleClass;
 import static org.truth0.Truth.ASSERT;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class ImplementationValidatorTest {

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/RoboProcessorTest.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;
@@ -181,7 +180,6 @@ public void shouldGracefullyHandleNoAnythingClass_withFoundOnImplementsAnnotatio
       .failsToCompile();
   }
 
-  @Ignore("feature not yet implemented")
   @Test
   public void shouldGenerateGenericShadowOf() {
     ASSERT.about(javaSources())
@@ -191,7 +189,7 @@ public void shouldGenerateGenericShadowOf() {
           SHADOW_EXTRACTOR_SOURCE,
           forResource("org/robolectric/annotation/processing/shadows/ShadowDummy.java"),
           forResource("org/robolectric/annotation/processing/shadows/ShadowParameterizedDummy.java")))
-      .processedWith(new RoboProcessor())
+      .processedWith(new RoboProcessor(DEFAULT_OPTS))
       .compilesWithoutError()
       .and()
       .generatesSources(forResource("org/robolectric/Robolectric_Parameterized.java"));

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/objects/ParameterizedDummy.java
Patch:
@@ -1,5 +1,5 @@
 package org.robolectric.annotation.processing.objects;
 
-public class ParameterizedDummy<T, S extends Number> {
+public class ParameterizedDummy<T, N extends Number> {
 
 }

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_Anything.java
Patch:
@@ -10,6 +10,7 @@
 import org.robolectric.util.ShadowProvider;
 
 @Generated("org.robolectric.annotation.processing.RoboProcessor")
+@SuppressWarnings({"unchecked","deprecation"})
 public class Shadows implements ShadowProvider {
 
   public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_ClassNameOnly.java
Patch:
@@ -10,6 +10,7 @@
 import org.robolectric.util.ShadowProvider;
 
 @Generated("org.robolectric.annotation.processing.RoboProcessor")
+@SuppressWarnings({"unchecked","deprecation"})
 public class Shadows implements ShadowProvider {
 
   public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_HiddenClasses.java
Patch:
@@ -14,6 +14,7 @@
 import org.robolectric.util.ShadowProvider;
 
 @Generated("org.robolectric.annotation.processing.RoboProcessor")
+@SuppressWarnings({"unchecked","deprecation"})
 public class Shadows implements ShadowProvider {
 
   public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_InnerClassCollision.java
Patch:
@@ -14,6 +14,7 @@
 import org.robolectric.util.ShadowProvider;
 
 @Generated("org.robolectric.annotation.processing.RoboProcessor")
+@SuppressWarnings({"unchecked","deprecation"})
 public class Shadows implements ShadowProvider {
 
   public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {

File: robolectric-processor/src/test/resources/org/robolectric/Robolectric_Parameterized.java
Patch:
@@ -6,10 +6,11 @@
 import org.robolectric.annotation.processing.objects.ParameterizedDummy;
 import org.robolectric.annotation.processing.shadows.ShadowDummy;
 import org.robolectric.annotation.processing.shadows.ShadowParameterizedDummy;
-import org.robolectric.util.ShadowExtractor;
+import org.robolectric.internal.ShadowExtractor;
 import org.robolectric.util.ShadowProvider;
 
 @Generated("org.robolectric.annotation.processing.RoboProcessor")
+@SuppressWarnings({"unchecked","deprecation"})
 public class Shadows implements ShadowProvider {
 
   public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {
@@ -22,8 +23,7 @@ public static ShadowDummy shadowOf(Dummy actual) {
   }
   
   public static <T, N extends Number> ShadowParameterizedDummy<T,N> shadowOf(ParameterizedDummy<T,N> actual) {
-    return (ShadowParameterizedDummy)<T,
-    N> ShadowExtractor.extract(actual);
+    return (ShadowParameterizedDummy<T,N>) ShadowExtractor.extract(actual);
   }
 
   public void reset() {

File: robolectric-processor/src/test/resources/org/robolectric/annotation/processing/shadows/ShadowParameterizedDummy.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.annotation.processing.objects.ParameterizedDummy;
 
 @Implements(ParameterizedDummy.class)
-public class ShadowParameterizedDummy<T, N extends Number> {
+public class ShadowParameterizedDummy<T, S extends Number> {
   @RealObject
-  ParameterizedDummy real;
+  ParameterizedDummy<T,S> real;
 }

File: robolectric-shadows/shadows-core/src/main/java/org/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -8,7 +8,7 @@
 @SuppressWarnings( { "UnusedDeclaration" })
 @Implements(ArrayAdapter.class)
 public class ShadowArrayAdapter<T> extends ShadowBaseAdapter {
-  @RealObject private ArrayAdapter realArrayAdapter;
+  @RealObject private ArrayAdapter<T> realArrayAdapter;
 
   public int getTextViewResourceId() {
     return ReflectionHelpers.getFieldReflectively(realArrayAdapter, "mFieldId");

File: robolectric-resources/src/main/java/org/robolectric/manifest/ActivityData.java
Patch:
@@ -166,6 +166,8 @@ public String getTaskAffinity() {
 
   /**
    * Convenience accessor for value of android:THEME attribute.
+   *
+   * @return The theme attribute.
    */
   public String getThemeRef() {
     return attrs.get(withXMLNS(THEME));

File: robolectric-resources/src/main/java/org/robolectric/res/DrawableResourceLoader.java
Patch:
@@ -31,10 +31,9 @@ private String toResourceName(FsFile xmlFile) {
   }
 
   /**
-   * Returns a collection of resource IDs for all nine-patch drawables
-   * in the project.
+   * Returns a collection of resource IDs for all nine-patch drawables in the project.
    *
-   * @param resourcePath
+   * @param resourcePath Resource path.
    */
   public void findDrawableResources(ResourcePath resourcePath) {
     FsFile[] files = resourcePath.resourceBase.listFiles();

File: robolectric-resources/src/main/java/org/robolectric/res/ResourceExtractor.java
Patch:
@@ -26,7 +26,8 @@ public ResourceExtractor() {
 
   /**
    * Constructs a ResourceExtractor for the Android system resources.
-   * @param classLoader
+   *
+   * @param classLoader Class loader.
    */
   public ResourceExtractor(ClassLoader classLoader) {
     Class<?> androidRClass;

File: robolectric-resources/src/main/java/org/robolectric/res/StringResources.java
Patch:
@@ -6,6 +6,9 @@ public class StringResources {
    * Provides escaping of String resources as described
    *
    * <a href="http://developer.android.com/guide/topics/resources/string-resource.html#FormattingAndStyling">here</a>
+   *
+   * @param text Text to escape.
+   * @return Escaped text.
    */
   public static String escape(String text) {
     if (text.length() > 1 && text.charAt(0) == '"' && text.charAt(text.length() - 1) == '"') {

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -13,8 +13,9 @@ public class ShadowAbstractCursor {
   private AbstractCursor realAbstractCursor;
 
   /**
-   * Returns the Uri set by {@code setNotificationUri()}.  Method included for testing
-   * pre-API 11 projects.
+   * Returns the Uri set by {@code setNotificationUri()}.
+   *
+   * @return Notification URI.
    */
   public Uri getNotificationUri_Compatibility() {
     return ReflectionHelpers.getFieldReflectively(realAbstractCursor, "mNotifyUri");

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -361,9 +361,9 @@ public void setLastNonConfigurationInstance(Object lastNonConfigurationInstance)
   }
 
   /**
-   * Non-Android accessor Sets the {@code View} for this {@code Activity}
+   * Non-Android accessor.
    *
-   * @param view
+   * @param view View to focus.
    */
   public void setCurrentFocus(View view) {
     currentFocus = view;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowActivityGroup.java
Patch:
@@ -15,9 +15,9 @@ public android.app.Activity getCurrentActivity() {
   }
 
   /**
-   * Non-Android accessor Sets the current {@code Activity} for this {@code ActivityGroup}
+   * Non-Android accessor.
    *
-   * @param activity
+   * @param activity Current activity.
    */
   public void setCurrentActivity(Activity activity) {
     currentActivity = activity;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowAnimation.java
Patch:
@@ -119,9 +119,9 @@ public boolean getFillAfter() {
   }
 
   /**
-   * Non-Android accessor.  Returns most recently set animation listener.
+   * Non-Android accessor.
    *
-   * @return
+   * @return Current animation listener.
    */
   public Animation.AnimationListener getAnimationListener() {
     return listener;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowCamera.java
Patch:
@@ -196,8 +196,8 @@ public SurfaceHolder getPreviewDisplay() {
    * the existence of one or more cameras.  By default, no
    * cameras are defined.
    *
-   * @param id
-   * @param camInfo
+   * @param id The camera id
+   * @param camInfo The CameraInfo
    */
   public static void addCameraInfo(int id, Camera.CameraInfo camInfo) {
     cameras.put(id, camInfo);

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -20,7 +20,8 @@
 
 /**
  * Shadows the {@code android.graphics.Canvas} class.
- * <p/>
+ *
+ * <p>
  * Broken.
  * This implementation is very specific to the application for which it was developed.
  * Todo: Reimplement. Consider using the same strategy of collecting a history of draw events and providing methods for writing queries based on type, number, and order of events.
@@ -48,6 +49,7 @@ public class ShadowCanvas {
    * Returns a textual representation of the appearance of the object.
    *
    * @param canvas the canvas to visualize
+   * @return The textual representation of the appearance of the object.
    */
   public static String visualize(Canvas canvas) {
     return shadowOf(canvas).getDescription();

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -510,8 +510,8 @@ public void clearContentObservers() {
   /**
    * Non-Android accessor.  Returns the content observer registered with
    * the given URI, or null if none registered.
-   * @param uri
-   * @return
+   * @param uri Given URI
+   * @return The content observer
    */
   public ContentObserver getContentObserver( Uri uri ) {
     return contentObservers.get(uri);

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -197,9 +197,9 @@ public String getPackageName() {
   }
 
   /**
-   * Non-Android accessor to set the application name.
+   * Non-Android accessor.
    *
-   * @param name
+   * @param name Application name.
    */
   public void setApplicationName(String name) {
     appName = name;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -799,8 +799,10 @@ private String ifWeHave(Object o, String name) {
   }
 
   /**
-   * @deprecated Use {@link ShadowIntent#setData(android.net.Uri).}
+   * @param uri The URI
+   * @deprecated Use {@link ShadowIntent#setData}
    */
+  @Deprecated
   public void setURI(String uri) {
     this.data = Uri.parse(uri);
   }

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowLocation.java
Patch:
@@ -365,7 +365,7 @@ public static void setDistanceBetween(float[] distanceBetween) {
    * @param endLongitude the ending longitude
    * @param results an array of floats to hold the results
    *
-   * @throws IllegalArgumentException if results is null or has length < 1
+   * @throws IllegalArgumentException if results is null or has length &lt; 1
    */
   @Implementation
   public static void distanceBetween(double startLatitude, double startLongitude,

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -137,7 +137,7 @@ private static void logToStream(PrintStream ps, int level, String tag, String ms
 
   /**
    * Non-Android accessor.  Returns ordered list of all log entries.
-   * @return
+   * @return List of log items
    */
   public static synchronized List<LogItem> getLogs() {
     return logs;
@@ -146,8 +146,8 @@ public static synchronized List<LogItem> getLogs() {
   /**
    * Non-Android accessor.  Returns ordered list of all log items for a specific tag.
    *
-   * @param tag
-   * @return
+   * @param tag The tag to get logs for
+   * @return The list of log items for the tag
    */
   public static synchronized List<LogItem> getLogsForTag( String tag ) {
     return logsByTag.get(tag);

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowLooper.java
Patch:
@@ -158,8 +158,8 @@ public static void idleMainLooperConstantly(boolean shouldIdleConstantly) {
   /**
    * Runs any immediately runnable tasks previously queued on the UI thread,
    * e.g. by {@link android.app.Activity#runOnUiThread(Runnable)} or {@link android.os.AsyncTask#onPostExecute(Object)}.
-   * <p/>
-   * <p/>
+   *
+   * <p>
    * Note: calling this method does not pause or un-pause the scheduler.
    */
   public static void runUiThreadTasks() {
@@ -222,6 +222,7 @@ public void runOneTask() {
    *
    * @param runnable    the task to be run
    * @param delayMillis how many milliseconds into the (virtual) future to run it
+   * @return true if the runnable is enqueued
    */
   public boolean post(Runnable runnable, long delayMillis) {
     if (!quit) {

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 /**
- * Shadow for {@code MimeTypeMap} that allows custom extension <-> mimetype mapping to be set up by tests.
+ * Shadow for {@code MimeTypeMap} that allows custom extension to mimetype mapping to be set up by tests.
  */
 @Implements(MimeTypeMap.class)
 public class ShadowMimeTypeMap {

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowNotification.java
Patch:
@@ -352,9 +352,6 @@ public void internalSetSummaryText(CharSequence summaryText) {
       directlyOn(realStyle, Style.class, "internalSetSummaryText", new ReflectionHelpers.ClassParameter(CharSequence.class, summaryText));
     }
 
-    /**
-     * Non-Android accessors
-     */
     public CharSequence getBigContentTitle() {
       return bigContentTitle;
     }

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowPowerManager.java
Patch:
@@ -50,7 +50,7 @@ public static void reset() {
    * Non-Android accessor retrieves the most recent wakelock registered
    * by the application
    *
-   * @return
+   * @return Most recent wake lock.
    */
   public static PowerManager.WakeLock getLatestWakeLock() {
     return shadowOf(RuntimeEnvironment.application).getLatestWakeLock();
@@ -94,7 +94,7 @@ public synchronized boolean isHeld() {
     /**
      * Non-Android accessor retrieves if the wake lock is reference counted or not
      *
-     * @return
+     * @return Is the wake lock reference counted?
      */
     public boolean isReferenceCounted() {
       return refCounted;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowPreferenceManager.java
Patch:
@@ -11,8 +11,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 /**
- * Shadow for {@code PreferenceManager} that returns instances of the
- * {@link org.robolectric.tester.android.content.TestSharedPreferences} utility class
+ * Shadow for {@code PreferenceManager} that returns instances of the {@link android.content.TestSharedPreferences} utility class.
  */
 @Implements(PreferenceManager.class)
 public class ShadowPreferenceManager {

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowService.java
Patch:
@@ -105,7 +105,7 @@ public void assertNoBroadcastListenersRegistered() {
 
   /**
    * Non-Android accessor, to use in assertions.
-   * @return
+   * @return Is this service stopped by self.
    */
   public boolean isStoppedBySelf() {
     return selfStopped;

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowTextView.java
Patch:
@@ -95,7 +95,8 @@ public KeyEvent getPreviousKeyEvent(int index) {
 
   /**
    * Returns the text string of this {@code TextView}.
-   * <p/>
+   *
+   * <p>
    * Robolectric extension.
    */
   @Override

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowUri.java
Patch:
@@ -9,7 +9,8 @@
 
 @Implements(Uri.class)
 public class ShadowUri {
-  /**
+
+  /*
    * Avoid a reference to Android's custom java.nio.charset.Charsets.
    */
   @Implementation
@@ -23,5 +24,4 @@ public static String decode(String s) {
       throw new RuntimeException(e);
     }
   }
-
 }

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -43,7 +43,7 @@ public void addView(final View child, final int index, final ViewGroup.LayoutPar
   /**
    * Returns a string representation of this {@code ViewGroup} by concatenating all of the strings contained in all
    * of the descendants of this {@code ViewGroup}.
-   * <p/>
+   * <p>
    * Robolectric extension.
    */
   @Override

File: robolectric-shadows/src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -305,7 +305,7 @@ public int getGoBackInvocations() {
    *
    * Sets the value to return from {@code android.webkit.WebView#canGoBack()}
    *
-   * @param canGoBack
+   * @param canGoBack Value to return from {@code android.webkit.WebView#canGoBack()}
    */
   public void setCanGoBack(boolean canGoBack) {
     this.canGoBack = canGoBack;

File: robolectric/src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.*;
 
 /**
- * Installs a {@link org.robolectric.bytecode.InstrumentingClassLoader} and
+ * Installs a {@link org.robolectric.bytecode.AsmInstrumentingClassLoader} and
  * {@link org.robolectric.res.ResourceLoader} in order to
  * provide a simulation of the Android runtime environment.
  */

File: robolectric/src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -140,7 +140,7 @@ public Set<MethodRef> methodsToIntercept() {
   /**
    * Map from a requested class to an alternate stand-in, or not.
    *
-   * @return
+   * @return Mapping of class name translations.
    */
   public Map<String, String> classNameTranslations() {
     Map<String, String> map = new HashMap<String, String>();

File: robolectric/src/main/java/org/robolectric/impl/ResponseSource.java
Patch:
@@ -18,8 +18,6 @@
 
 /**
  * Where the HTTP client should look for a response.
- *
- * @hide
  */
 public enum ResponseSource {
 

File: robolectric/src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -39,7 +39,7 @@
  * class {@link XmlResourceParserImpl}. The tests verify
  * that this implementation will behave exactly as
  * the android implementation.
- * <p/>
+ *
  * <p>Please note that this implementation uses the resource file "xml/preferences"
  * to test the parser implementation. If that file is changed
  * some test may start failing.

File: robolectric/src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -74,7 +74,7 @@ public Object initializing(Object instance) {
   }
 
   @Override
-  synchronized public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass) {
+  public Plan methodInvoked(String signature, boolean isStatic, Class<?> theClass) {
     if (debug) System.out.println("[DEBUG] " + signature);
     if (planCache.containsKey(signature)) return planCache.get(signature);
     Plan plan = calculatePlan(signature, isStatic, theClass);
@@ -143,7 +143,7 @@ private Plan calculatePlan(String signature, boolean isStatic, Class<?> theClass
     }
   }
 
-  synchronized private ShadowConfig getShadowConfig(Class clazz) {
+  private ShadowConfig getShadowConfig(Class clazz) {
     ShadowConfig shadowConfig = shadowConfigCache.get(clazz);
     if (shadowConfig == null) {
       shadowConfig = shadowMap.get(clazz);

File: robolectric/src/test/java/org/robolectric/AndroidManifestTest.java
Patch:
@@ -212,7 +212,7 @@ public void shouldReturnApplicationMetaData() throws PackageManager.NameNotFound
 
   @Test
   public void shouldLoadAllResourcesForExistingLibraries() {
-    AndroidManifest appManifest = new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"));
+    AndroidManifest appManifest = new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
 
     // This intentionally loads from the non standard resources/project.properties
     List<String> resourcePaths = stringify(appManifest.getIncludedResourcePaths());
@@ -226,7 +226,7 @@ public void shouldLoadAllResourcesForExistingLibraries() {
 
   @Test
   public void shouldTolerateMissingRFile() throws Exception {
-    AndroidManifest appManifest = new AndroidManifest(resourceFile("TestAndroidManifestWithNoRFile.xml"), resourceFile("res"));
+    AndroidManifest appManifest = new AndroidManifest(resourceFile("TestAndroidManifestWithNoRFile.xml"), resourceFile("res"), resourceFile("assets"));
     assertEquals(appManifest.getPackageName(), "org.no.resources.for.me");
     assertThat(appManifest.getRClass()).isNull();
     assertEquals(appManifest.getResourcePath().getPackageName(), "org.no.resources.for.me");

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -84,7 +84,7 @@ public void shouldRegisterActivitiesFromManifestInPackageManager() throws Except
 
   @Test public void shouldLoadConfigApplicationIfSpecified() throws Exception {
     Application application = defaultTestLifecycle.createApplication(null,
-        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", -1, new Class[0], TestFakeApp.class, new String[0]));
+        newConfigWith("<application android:name=\"" + "ClassNameToIgnore" + "\"/>"), new Config.Implementation(-1, "", "", "", "", -1, new Class[0], TestFakeApp.class, new String[0]));
     assertThat(application).isExactlyInstanceOf(TestFakeApp.class);
   }
 

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -25,7 +25,7 @@ public void setUp() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
     String givenQualifiers = "";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("v18");
@@ -35,7 +35,7 @@ public void setUpApplicationState_setsVersionQualifierFromSdkConfig() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
     String givenQualifiers = "land-v17";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("land-v17");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("land-v17");
@@ -45,7 +45,7 @@ public void setUpApplicationState_setsVersionQualifierFromConfigQualifiers() {
   @Test
   public void setUpApplicationState_setsVersionQualifierFromSdkConfigWithOtherQualifiers() {
     String givenQualifiers = "large-land";
-    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", -1, new Class[0], Application.class, new String[0]);
+    Config c = new Config.Implementation(-1, Config.DEFAULT, givenQualifiers, "res", "assets", -1, new Class[0], Application.class, new String[0]);
     pu.setUpApplicationState(null, new DefaultTestLifecycle(), null, null, c);
     assertThat(getQualifiersfromSystemResources()).isEqualTo("large-land-v18");
     assertThat(getQualifiersFromAppAssetManager()).isEqualTo("large-land-v18");

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -45,7 +45,7 @@ public static class StateHolder {
   @Test public void whenNoAppManifest_shouldRunThingsInTheRightOrder() throws Exception {
     StateHolder.transcript = new Transcript();
     assertNoFailures(run(new Runner(SimpleTest.class) {
-      @Override protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir) {
+      @Override protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir) {
         return null;
       }
     }));
@@ -107,7 +107,7 @@ public Runner(Class<?> testClass) throws InitializationError {
     }
 
     @Override
-    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir) {
+    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir) {
       return new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
     }
 

File: robolectric/src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -23,7 +23,7 @@ public WithCustomClassList(@SuppressWarnings("rawtypes") Class testClass) throws
     }
 
     @Override
-    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir) {
+    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir) {
       return new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
     }
 
@@ -55,7 +55,7 @@ public WithoutDefaults(Class<?> testClass) throws InitializationError {
           .build();
     }
 
-    @Override protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir) {
+    @Override protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir) {
       return null;
     }
 
@@ -84,7 +84,7 @@ public WithDefaults(Class<?> testClass) throws InitializationError {
     }
 
     @Override
-    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetsDir) {
+    protected AndroidManifest createAppManifest(FsFile manifestFile, FsFile resDir, FsFile assetDir) {
       return new AndroidManifest(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets"));
     }
   }

File: robolectric/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -15,6 +15,7 @@ public class ShadowSystemProperties {
 
   static {
     VALUES.put("ro.build.version.sdk", 8);
+    VALUES.put("ro.build.date.utc", 1277708400000L);  // Jun 28, 2010
     VALUES.put("ro.debuggable", 0);
     VALUES.put("ro.secure", 1);
     VALUES.put("log.closeguard.Animation", false);

File: robolectric/src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -15,6 +15,7 @@ public class ShadowSystemProperties {
 
   static {
     VALUES.put("ro.build.version.sdk", 8);
+    VALUES.put("ro.build.date.utc", 1277708400000L);  // Jun 28, 2010
     VALUES.put("ro.debuggable", 0);
     VALUES.put("ro.secure", 1);
     VALUES.put("log.closeguard.Animation", false);

File: robolectric/src/test/java/org/robolectric/shadows/ContentResolverTest.java
Patch:
@@ -19,7 +19,6 @@
 import android.os.Handler;
 import android.os.RemoteException;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.AndroidManifest;
@@ -348,7 +347,6 @@ public int update(Uri uri, ContentValues values, String selection,
   }
 
   @Test
-  @Ignore("Temporarily ignore this test while we investigate")
   public void applyBatchForUnregisteredProvider() throws RemoteException, OperationApplicationException {
     ArrayList<ContentProviderOperation> resultOperations = shadowContentResolver.getContentProviderOperations(AUTHORITY);
     assertThat(resultOperations).isNotNull();

File: robolectric/src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -285,7 +285,7 @@ public void notifyChange(Uri uri, ContentObserver observer) {
 
   @Implementation
   public ContentProviderResult[] applyBatch(String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException {
-    ContentProvider provider = providers.get(authority);
+    ContentProvider provider = getProvider(authority);
     if (provider != null) {
       return provider.applyBatch(operations);
     } else {

File: robolectric-processor/src/test/java/org/robolectric/annotation/processing/ImplementationValidatorTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.Test;
 
 public class ImplementationValidatorTest {
-  @Ignore
   @Test
   public void implementationWithoutImplements_shouldNotCompile() {
     final String testClass = "org.robolectric.annotation.processing.shadows.ShadowImplementationWithoutImplements";

File: robolectric/src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -285,7 +285,7 @@ public void notifyChange(Uri uri, ContentObserver observer) {
 
   @Implementation
   public ContentProviderResult[] applyBatch(String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException {
-    ContentProvider provider = providers.get(authority);
+    ContentProvider provider = getProvider(authority);
     if (provider != null) {
       return provider.applyBatch(operations);
     } else {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowMediaPlayer.java
Patch:
@@ -53,7 +53,7 @@ public static MediaPlayer create(Context context, Uri uri) {
   }
 
   public void __constructor__() {
-    playing = true;
+    playing = false;
   }
 
   @Implementation

File: robolectric/src/main/java/org/robolectric/shadows/ShadowMediaPlayer.java
Patch:
@@ -53,7 +53,7 @@ public static MediaPlayer create(Context context, Uri uri) {
   }
 
   public void __constructor__() {
-    playing = true;
+    playing = false;
   }
 
   @Implementation

File: robolectric/src/main/java/org/robolectric/shadows/ShadowAbsListView.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.shadows;
 
 import android.widget.AbsListView;
-
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 

File: robolectric/src/main/java/org/robolectric/shadows/ShadowAbsSpinner.java
Patch:
@@ -2,10 +2,10 @@
 
 import android.widget.AbsSpinner;
 import android.widget.SpinnerAdapter;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.internal.ReflectionHelpers;
 
 import static org.robolectric.Robolectric.directlyOn;
 
@@ -17,13 +17,13 @@ public class ShadowAbsSpinner extends ShadowAdapterView {
 
   @Implementation
   public void setSelection(int position, boolean animate) {
-    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new Robolectric.ClassParameter(int.class, position), new Robolectric.ClassParameter(boolean.class, animate));
+    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new ReflectionHelpers.ClassParameter(int.class, position), new ReflectionHelpers.ClassParameter(boolean.class, animate));
     animatedTransition = animate;
   }
 
   @Implementation
   public void setSelection(int position) {
-    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new Robolectric.ClassParameter(int.class, position));
+    directlyOn(realAbsSpinner, AbsSpinner.class, "setSelection", new ReflectionHelpers.ClassParameter(int.class, position));
     SpinnerAdapter adapter = realAbsSpinner.getAdapter();
     if (getItemSelectedListener() != null && adapter != null) {
       getItemSelectedListener().onItemSelected(realAbsSpinner, null, position, adapter.getItemId(position));

File: robolectric/src/main/java/org/robolectric/shadows/ShadowAdapterView.java
Patch:
@@ -3,10 +3,10 @@
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.internal.ReflectionHelpers;
 
 import static org.robolectric.Robolectric.directlyOn;
 import static org.robolectric.Robolectric.shadowOf;
@@ -25,7 +25,7 @@ public class ShadowAdapterView extends ShadowViewGroup {
   @Implementation
   public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener itemSelectedListener) {
     this.itemSelectedListener = itemSelectedListener;
-    directlyOn(realAdapterView, AdapterView.class, "setOnItemSelectedListener", new Robolectric.ClassParameter(AdapterView.OnItemSelectedListener.class, itemSelectedListener));
+    directlyOn(realAdapterView, AdapterView.class, "setOnItemSelectedListener", new ReflectionHelpers.ClassParameter(AdapterView.OnItemSelectedListener.class, itemSelectedListener));
   }
 
   public AdapterView.OnItemSelectedListener getItemSelectedListener() {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowCursorLoader.java
Patch:
@@ -1,8 +1,8 @@
 package org.robolectric.shadows;
 
 import android.database.Cursor;
-import org.robolectric.annotation.Implements;
 import android.support.v4.content.CursorLoader;
+import org.robolectric.annotation.Implements;
 
 @Implements(CursorLoader.class)
 public class ShadowCursorLoader extends ShadowAsyncTaskLoader<Cursor> {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowDatePickerDialog.java
Patch:
@@ -5,8 +5,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
-import static org.robolectric.Robolectric.ClassParameter;
 import static org.robolectric.bytecode.RobolectricInternals.invokeConstructor;
+import static org.robolectric.internal.ReflectionHelpers.ClassParameter;
 
 @Implements(DatePickerDialog.class)
 public class ShadowDatePickerDialog extends ShadowAlertDialog {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowInputMethodManager.java
Patch:
@@ -5,9 +5,9 @@
 import android.view.View;
 import android.view.inputmethod.InputMethodManager;
 import org.robolectric.Robolectric;
-import org.robolectric.internal.HiddenApi;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.internal.HiddenApi;
 
 @Implements(value = InputMethodManager.class, callThroughByDefault = false)
 public class ShadowInputMethodManager {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 
 import static android.content.Intent.*;
-import static org.robolectric.Robolectric.ClassParameter;
+import static org.robolectric.internal.ReflectionHelpers.ClassParameter;
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})

File: robolectric/src/main/java/org/robolectric/shadows/ShadowIntentService.java
Patch:
@@ -1,10 +1,10 @@
 package org.robolectric.shadows;
 
 import android.app.IntentService;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.internal.ReflectionHelpers;
 
 import static org.robolectric.Robolectric.directlyOn;
 
@@ -22,6 +22,6 @@ public boolean getIntentRedelivery() {
   @Implementation
   public void setIntentRedelivery(boolean enabled) {
     mRedelivery = enabled;
-    directlyOn(realIntentService, IntentService.class, "setIntentRedelivery", new Robolectric.ClassParameter(boolean.class, enabled));
+    directlyOn(realIntentService, IntentService.class, "setIntentRedelivery", new ReflectionHelpers.ClassParameter(boolean.class, enabled));
   }
 }

File: robolectric/src/main/java/org/robolectric/shadows/ShadowSearchManager.java
Patch:
@@ -3,8 +3,8 @@
 import android.app.SearchManager;
 import android.app.SearchableInfo;
 import android.content.ComponentName;
-import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
 
 @Implements(SearchManager.class)
 public class ShadowSearchManager {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowTimePickerDialog.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.annotation.RealObject;
 import org.robolectric.bytecode.RobolectricInternals;
 
-import static org.robolectric.Robolectric.ClassParameter;
+import static org.robolectric.internal.ReflectionHelpers.ClassParameter;
 
 @Implements(value = TimePickerDialog.class, inheritImplementationMethods = true)
 public class ShadowTimePickerDialog extends ShadowAlertDialog {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -15,6 +15,7 @@
 import org.robolectric.annotation.Resetter;
 import org.robolectric.bytecode.RobolectricInternals;
 import org.robolectric.internal.HiddenApi;
+import org.robolectric.internal.ReflectionHelpers;
 
 import static org.robolectric.Robolectric.shadowOf;
 
@@ -29,7 +30,7 @@ public class ShadowTypeface {
   @HiddenApi
   public void __constructor__(int fontId) {
     fontDesc = findById(fontId);
-    RobolectricInternals.invokeConstructor(Typeface.class, realTypeface, new Robolectric.ClassParameter(int.class, fontId));
+    RobolectricInternals.invokeConstructor(Typeface.class, realTypeface, new ReflectionHelpers.ClassParameter(int.class, fontId));
   }
 
   public String getAssetPath() {

File: robolectric/src/main/java/org/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -6,10 +6,10 @@
 import android.view.ViewGroup;
 import android.view.animation.Animation.AnimationListener;
 import android.view.animation.LayoutAnimationController;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.internal.ReflectionHelpers;
 
 import java.io.PrintStream;
 
@@ -33,8 +33,8 @@ public class ShadowViewGroup extends ShadowView {
   public void addView(final View child, final int index, final ViewGroup.LayoutParams params) {
     shadowOf(Looper.getMainLooper()).runPaused(new Runnable() {
       @Override public void run() {
-        directlyOn(realViewGroup, ViewGroup.class, "addView", new Robolectric.ClassParameter(View.class, child),
-            new Robolectric.ClassParameter(int.class, index), new Robolectric.ClassParameter(ViewGroup.LayoutParams.class, params));
+        directlyOn(realViewGroup, ViewGroup.class, "addView", new ReflectionHelpers.ClassParameter(View.class, child),
+            new ReflectionHelpers.ClassParameter(int.class, index), new ReflectionHelpers.ClassParameter(ViewGroup.LayoutParams.class, params));
       }
     });
   }

File: robolectric/src/main/java/org/robolectric/shadows/ShadowWindowManagerImpl.java
Patch:
@@ -6,6 +6,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.internal.ReflectionHelpers;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -23,15 +24,15 @@ public class ShadowWindowManagerImpl extends ShadowWindowManager {
   public void addView(View view, android.view.ViewGroup.LayoutParams layoutParams) {
     views.add(view);
     directlyOn(realObject, WINDOW_MANAGER_IMPL_CLASS_NAME, "addView",
-        new Robolectric.ClassParameter(View.class, view), new Robolectric.ClassParameter(ViewGroup.LayoutParams.class, layoutParams));
+        new ReflectionHelpers.ClassParameter(View.class, view), new ReflectionHelpers.ClassParameter(ViewGroup.LayoutParams.class, layoutParams));
   }
 
   @Implementation
   public void removeView(View view) {
     views.remove(view);
 
     directlyOn(realObject, WINDOW_MANAGER_IMPL_CLASS_NAME, "removeView",
-        new Robolectric.ClassParameter(View.class, view));
+        new ReflectionHelpers.ClassParameter(View.class, view));
   }
 
   public List<View> getViews() {

File: robolectric/src/test/java/android/webkit/WebSettingsTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.internal.DoNotInstrument;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @DoNotInstrument
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/AndroidManifestTest.java
Patch:
@@ -40,7 +40,7 @@
 import static android.content.pm.ApplicationInfo.FLAG_TEST_ONLY;
 import static android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE;
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;

File: robolectric/src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.IOException;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;
 import static org.robolectric.util.TestUtil.newConfig;

File: robolectric/src/test/java/org/robolectric/ParallelUniverseTest.java
Patch:
@@ -9,7 +9,7 @@
 import android.content.res.Configuration;
 import org.robolectric.internal.ParallelUniverse;
 import static org.mockito.Mockito.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ParallelUniverseTest {

File: robolectric/src/test/java/org/robolectric/ParameterizedRobolectricTestRunnerConfigTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Parameterized tests using custom shadow classes.

File: robolectric/src/test/java/org/robolectric/ParameterizedRobolectricTestRunnerNormalTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Parameterized tests using basic java classes.

File: robolectric/src/test/java/org/robolectric/ParameterizedRobolectricTestRunnerUriTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Parameterized tests using an Android class.

File: robolectric/src/test/java/org/robolectric/QualifiersTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @Config(qualifiers = "en")
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.io.IOException;
 import java.io.PrintStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerClassLoaderSetupTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric;
 
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Assert;
 import org.junit.Test;

File: robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Arrays;
 import java.util.Properties;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.fest.reflect.core.Reflection.method;
 
 public class RobolectricTestRunnerTest {

File: robolectric/src/test/java/org/robolectric/TemporaryBindingsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadows.ShadowView;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/TestRunnerSequenceTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.fail;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.util.TestUtil.resourceFile;
 

File: robolectric/src/test/java/org/robolectric/annotation/OverrideSdkVersionTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class OverrideSdkVersionTest {

File: robolectric/src/test/java/org/robolectric/annotation/WithConstantStringTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class WithConstantStringTest {

File: robolectric/src/test/java/org/robolectric/bytecode/AndroidTranslatorClassInstrumentedTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithCustomClassList.class)
 public class AndroidTranslatorClassInstrumentedTest {

File: robolectric/src/test/java/org/robolectric/bytecode/CustomRobolectricTestRunnerTest.java
Patch:
@@ -20,8 +20,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 import static org.fest.reflect.core.Reflection.field;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: robolectric/src/test/java/org/robolectric/bytecode/InstrumentingClassLoaderTestBase.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.fest.reflect.core.Reflection.staticField;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.directlyOn;

File: robolectric/src/test/java/org/robolectric/bytecode/InvocationProfileTest.java
Patch:
@@ -3,7 +3,7 @@
 import android.view.View;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class InvocationProfileTest {
   @Test

File: robolectric/src/test/java/org/robolectric/bytecode/RobolectricInternalsTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @Config(shadows={ RobolectricInternalsTest.ShadowConstructors.class })
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/bytecode/ShadowMapTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.robolectric.shadows.ShadowCursorAdapter;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ShadowMapTest {
   @Test public void shouldLookUpShadowClassesByNamingConvention() throws Exception {

File: robolectric/src/test/java/org/robolectric/bytecode/ShadowWranglerTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf_;
 

File: robolectric/src/test/java/org/robolectric/bytecode/ShadowWranglerUnitTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ShadowWranglerUnitTest {
   private ShadowWrangler shadowWrangler;

File: robolectric/src/test/java/org/robolectric/bytecode/ShadowingTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;

File: robolectric/src/test/java/org/robolectric/bytecode/ThreadSafetyTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.directlyOn;
 import static org.robolectric.Robolectric.shadowOf_;
 

File: robolectric/src/test/java/org/robolectric/json/JSONArrayTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.Arrays;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class JSONArrayTest {

File: robolectric/src/test/java/org/robolectric/res/ActivityDataTest.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.HashMap;
 import java.util.ArrayList;
 import android.content.pm.ActivityInfo;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 public class ActivityDataTest {
 

File: robolectric/src/test/java/org/robolectric/res/AttributeTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.util.TestUtil;
 import org.w3c.dom.Node;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: robolectric/src/test/java/org/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.shadows.ShadowStateListDrawable;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Robolectric.application;

File: robolectric/src/test/java/org/robolectric/res/OverlayResourceIndexTest.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Collection;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class OverlayResourceIndexTest {
   @Test public void shouldOnlyRespondForIncludedPackages() throws Exception {

File: robolectric/src/test/java/org/robolectric/res/PackageResourceLoaderTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 import static org.robolectric.util.TestUtil.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 public class PackageResourceLoaderTest {
 

File: robolectric/src/test/java/org/robolectric/res/PluralResourceLoaderTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.robolectric.util.TestUtil;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.testResources;
 
 public class PluralResourceLoaderTest {

File: robolectric/src/test/java/org/robolectric/res/PreferenceLoaderTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.robolectric.res.builder.PreferenceBuilder;
 import org.robolectric.util.I18nException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 import static org.robolectric.util.TestUtil.testResources;
 

File: robolectric/src/test/java/org/robolectric/res/RawResourceLoaderTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.R;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.TEST_RESOURCE_PATH;
 import static org.robolectric.util.TestUtil.testResources;
 

File: robolectric/src/test/java/org/robolectric/res/ResBunchTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ResBunchTest extends ResBunch {

File: robolectric/src/test/java/org/robolectric/res/ResNameTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ResNameTest {
   @Test public void shouldQualify() throws Exception {

File: robolectric/src/test/java/org/robolectric/res/ResourceExtractorTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.robolectric.R;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.TestUtil.*;
 
 public class ResourceExtractorTest {

File: robolectric/src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.I18nException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.fest.reflect.core.Reflection.field;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/res/RoboAttributeSetTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.util.CustomView;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.res.ResourceLoader.ANDROID_NS;
 import static org.robolectric.res.Attribute.ANDROID_RES_NS_PREFIX;
 import static org.robolectric.util.TestUtil.*;

File: robolectric/src/test/java/org/robolectric/res/RobolectricPackageManagerTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.robolectric.shadows.ShadowDrawable;
 import org.robolectric.test.TemporaryFolder;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/res/StringResourcesTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.res;
 
 import org.junit.Test;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 public class StringResourcesTest {
   @Test

File: robolectric/src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Set;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;

File: robolectric/src/test/java/org/robolectric/shadows/AbsSeekBarTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AbsSeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/AbsSpinnerTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/AbsoluteLayoutTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AbsoluteLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/AbstractCursorTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AbstractCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/AccessibilityManagerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 import java.util.List;
 import com.google.android.collect.Lists;

File: robolectric/src/test/java/org/robolectric/shadows/AccountManagerTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AccountManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/AccountTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AccountTest {

File: robolectric/src/test/java/org/robolectric/shadows/ActivityGroupTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ActivityManagerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ActivityTest.java
Patch:
@@ -44,7 +44,7 @@
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;

File: robolectric/src/test/java/org/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.util.Transcript;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/AlarmManagerTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Date;
 
 import static junit.framework.Assert.assertEquals;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AlarmManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/AlertDialogTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;

File: robolectric/src/test/java/org/robolectric/shadows/AndroidHttpClientTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AndroidHttpClientTest {

File: robolectric/src/test/java/org/robolectric/shadows/AnimationSetTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AnimationSetTest {

File: robolectric/src/test/java/org/robolectric/shadows/AnimationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.util.TestAnimationListener;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/AnimationUtilsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AnimationUtilsTest {

File: robolectric/src/test/java/org/robolectric/shadows/AnimatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.RobolectricShadowOfLevel16;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AnimatorTest {

File: robolectric/src/test/java/org/robolectric/shadows/AppWidgetHostTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/AppWidgetHostViewTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ApplicationTest.java
Patch:
@@ -40,8 +40,8 @@
 
 import static android.content.pm.PackageManager.PERMISSION_DENIED;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;

File: robolectric/src/test/java/org/robolectric/shadows/ArrayAdapterTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/AssetManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.util.TestUtil.joinPath;
 

File: robolectric/src/test/java/org/robolectric/shadows/AsyncTaskTest.java
Patch:
@@ -12,8 +12,8 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;

File: robolectric/src/test/java/org/robolectric/shadows/AudioManagerTest.java
Patch:
@@ -5,7 +5,7 @@
 import android.media.AudioManager;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AudioManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/AutoCompleteTextViewTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class AutoCompleteTextViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/BitmapFactoryTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/BitmapTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;

File: robolectric/src/test/java/org/robolectric/shadows/BluetoothAdapterTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/CameraParametersTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CameraParametersTest {

File: robolectric/src/test/java/org/robolectric/shadows/CameraSizeTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CameraSizeTest {

File: robolectric/src/test/java/org/robolectric/shadows/CameraTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Fail.fail;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CameraTest {

File: robolectric/src/test/java/org/robolectric/shadows/CanvasTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Robolectric.shadowOf;
 import static org.robolectric.shadows.ShadowPath.Point.Type.LINE_TO;

File: robolectric/src/test/java/org/robolectric/shadows/CheckBoxTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CheckBoxTest {

File: robolectric/src/test/java/org/robolectric/shadows/ClipboardManagerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.TestRunners;
 
 import static android.content.ClipboardManager.OnPrimaryClipChangedListener;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ColorTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 import android.graphics.Color;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ColorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ConfigurationTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ConfigurationTest {

File: robolectric/src/test/java/org/robolectric/shadows/ConnectivityManagerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/ContentObserverTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ContentObserverTest {

File: robolectric/src/test/java/org/robolectric/shadows/ContentProviderClientTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/ContentProviderOperationBuilderTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/test/java/org/robolectric/shadows/ContentProviderOperationTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.Collections;
 

File: robolectric/src/test/java/org/robolectric/shadows/ContentProviderResultTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ContentProviderResultTest {

File: robolectric/src/test/java/org/robolectric/shadows/ContentProviderTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ContentProviderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ContentResolverTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.List;
 
 import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/ContentUrisTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ContentUrisTest {

File: robolectric/src/test/java/org/robolectric/shadows/ContentValuesTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ContentValuesTest {

File: robolectric/src/test/java/org/robolectric/shadows/ContextTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.IOException;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;

File: robolectric/src/test/java/org/robolectric/shadows/ContextWrapperTest.java
Patch:
@@ -28,7 +28,7 @@
 import static android.content.pm.PackageManager.PERMISSION_DENIED;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 import static junit.framework.Assert.assertEquals;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.buildActivity;

File: robolectric/src/test/java/org/robolectric/shadows/CookieManagerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: robolectric/src/test/java/org/robolectric/shadows/CookieSyncManagerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CookieSyncManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/CountDownTimerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CountDownTimerTest {

File: robolectric/src/test/java/org/robolectric/shadows/CursorAdapterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static android.widget.CursorAdapter.FLAG_AUTO_REQUERY;
 import static android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/CursorLoaderTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CursorLoaderTest {

File: robolectric/src/test/java/org/robolectric/shadows/CursorWindowTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class CursorWindowTest {

File: robolectric/src/test/java/org/robolectric/shadows/CursorWrapperTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.lang.reflect.Method;
 import java.util.HashMap;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.matchers.JUnitMatchers.hasItem;
 import static org.mockito.Mockito.*;
 

File: robolectric/src/test/java/org/robolectric/shadows/DatabaseTestBase.java
Patch:
@@ -11,7 +11,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/DatabaseUtilsTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class DatabaseUtilsTest {

File: robolectric/src/test/java/org/robolectric/shadows/DatePickerDialogTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.Locale;
 
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class DatePickerDialogTest {

File: robolectric/src/test/java/org/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.*;
 import java.net.URI;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/DialogPreferenceTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class DialogPreferenceTest {

File: robolectric/src/test/java/org/robolectric/shadows/DialogTest.java
Patch:
@@ -16,7 +16,7 @@
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 import static org.robolectric.util.TestUtil.assertInstanceOf;

File: robolectric/src/test/java/org/robolectric/shadows/DownloadManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 
 import static android.app.DownloadManager.Request;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 import static org.robolectric.shadows.ShadowDownloadManager.ShadowRequest;
 

File: robolectric/src/test/java/org/robolectric/shadows/DrawableTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.io.InputStream;
 
 import static junit.framework.Assert.assertFalse;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/EditTextPreferenceTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.TestRunners;
 
 import static junit.framework.Assert.*;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class EditTextPreferenceTest {

File: robolectric/src/test/java/org/robolectric/shadows/EditTextTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Random;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class EditTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/EnvironmentTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertTrue;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ExpandableListViewTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/FrameLayoutTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
 /**

File: robolectric/src/test/java/org/robolectric/shadows/GradientDrawableTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.TestRunners;
 import android.graphics.drawable.GradientDrawable;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/HandlerTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.newInstanceOf;

File: robolectric/src/test/java/org/robolectric/shadows/HtmlTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class HtmlTest {

File: robolectric/src/test/java/org/robolectric/shadows/HttpResponseCacheTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class HttpResponseCacheTest {

File: robolectric/src/test/java/org/robolectric/shadows/ImageButtonTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.ArrayList;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ImageButtonTest {

File: robolectric/src/test/java/org/robolectric/shadows/ImageViewTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.data.MapEntry.entry;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.entry;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;

File: robolectric/src/test/java/org/robolectric/shadows/InputDeviceTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class InputDeviceTest {

File: robolectric/src/test/java/org/robolectric/shadows/InputMethodManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class InputMethodManagerTest {

File: robolectric/src/test/java/org/robolectric/shadows/IntentFilterAuthorityEntryTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class IntentFilterAuthorityEntryTest {

File: robolectric/src/test/java/org/robolectric/shadows/IntentFilterTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class IntentFilterTest {

File: robolectric/src/test/java/org/robolectric/shadows/IntentServiceTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/IntentTest.java
Patch:
@@ -19,7 +19,7 @@
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;

File: robolectric/src/test/java/org/robolectric/shadows/JsonReaderTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class JsonReaderTest {

File: robolectric/src/test/java/org/robolectric/shadows/KeyEventTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/KeyguardManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 
 import static android.content.Context.KEYGUARD_SERVICE;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/LayoutAnimationControllerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class LayoutAnimationControllerTest {

File: robolectric/src/test/java/org/robolectric/shadows/LayoutInflaterTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.robolectric.util.CustomView2;
 import org.robolectric.util.TestUtil;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;

File: robolectric/src/test/java/org/robolectric/shadows/LayoutParamsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class LayoutParamsTest {

File: robolectric/src/test/java/org/robolectric/shadows/LinearLayoutTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertSame;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/LinkMovementMethodTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class LinkMovementMethodTest {

File: robolectric/src/test/java/org/robolectric/shadows/ListPopupWindowTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ListPopupWindowTest {

File: robolectric/src/test/java/org/robolectric/shadows/ListPreferenceTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ListViewTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.robolectric.shadows;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;

File: robolectric/src/test/java/org/robolectric/shadows/LocaleDataTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class LocaleDataTest {

File: robolectric/src/test/java/org/robolectric/shadows/LocationManagerTest.java
Patch:
@@ -26,7 +26,7 @@
 import static android.location.LocationManager.GPS_PROVIDER;
 import static android.location.LocationManager.NETWORK_PROVIDER;
 import static junit.framework.Assert.*;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertSame;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/LogTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 
 import static junit.framework.Assert.assertEquals;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.shadows.ShadowLog.LogItem;

File: robolectric/src/test/java/org/robolectric/shadows/LooperTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/LruTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class LruTest {

File: robolectric/src/test/java/org/robolectric/shadows/MapViewTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.bytecode.ShadowingTest;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowMapView.toE6;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/MarginLayoutParamsTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * {@link org.robolectric.shadows.ShadowViewGroup.ShadowMarginLayoutParams} test suite.

File: robolectric/src/test/java/org/robolectric/shadows/MatrixCursorTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.util.Arrays;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/shadows/MatrixTest.java
Patch:
@@ -5,8 +5,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.data.MapEntry.entry;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.entry;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/MediaMetadataRetrieverTest.java
Patch:
@@ -17,7 +17,7 @@
 import static android.media.MediaMetadataRetriever.METADATA_KEY_ALBUM;
 import static android.media.MediaMetadataRetriever.METADATA_KEY_ARTIST;
 import static android.media.MediaMetadataRetriever.METADATA_KEY_TITLE;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowMediaMetadataRetriever.addFrame;
 import static org.robolectric.shadows.ShadowMediaMetadataRetriever.addMetadata;
 

File: robolectric/src/test/java/org/robolectric/shadows/MediaPlayerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MediaPlayerTest {

File: robolectric/src/test/java/org/robolectric/shadows/MediaRecorderTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MediaRecorderTest {

File: robolectric/src/test/java/org/robolectric/shadows/MediaStoreTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static android.provider.MediaStore.Images;
 import static android.provider.MediaStore.Video;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MediaStoreTest {

File: robolectric/src/test/java/org/robolectric/shadows/MenuInflaterTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.tester.android.view.TestMenuItem;
 import org.robolectric.util.I18nException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;

File: robolectric/src/test/java/org/robolectric/shadows/MergeCursorTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MergeCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/MessageTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/MotionEventTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/NetworkInfoTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/NfcAdapterTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class NfcAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/NonAppLibraryTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class) @Config(manifest = Config.NONE)
 public class NonAppLibraryTest {

File: robolectric/src/test/java/org/robolectric/shadows/NotificationBigTextStyleTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/NotificationBuilderTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.shadows.ShadowNotification.Progress;
 
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class NotificationBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/NotificationTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.application;
 
 import android.app.Notification;

File: robolectric/src/test/java/org/robolectric/shadows/ObjectAnimatorTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.TestRunners;
 
 import static org.robolectric.Robolectric.application;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ObjectAnimatorTest {

File: robolectric/src/test/java/org/robolectric/shadows/OverScrollerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class OverScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/PaintTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/PairTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class PairTest {

File: robolectric/src/test/java/org/robolectric/shadows/ParcelTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/shadows/PasswordTransformationMethodTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class PasswordTransformationMethodTest {

File: robolectric/src/test/java/org/robolectric/shadows/PendingIntentTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/PopupWindowTest.java
Patch:
@@ -21,7 +21,7 @@
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNotNull;
 import static junit.framework.Assert.assertSame;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/PorterDuffColorFilterTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class PorterDuffColorFilterTest {

File: robolectric/src/test/java/org/robolectric/shadows/PowerManagerTest.java
Patch:
@@ -12,7 +12,7 @@
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNotNull;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceActivityTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceActivityTestWithFragment.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import android.app.Activity;
 import android.app.FragmentManager;

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceCategoryTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class PreferenceCategoryTest {

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceGroupTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.util.ArrayList;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceManagerTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.Map;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceScreenTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class PreferenceScreenTest {

File: robolectric/src/test/java/org/robolectric/shadows/PreferenceTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ProcessTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: robolectric/src/test/java/org/robolectric/shadows/ProgressBarTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.util.TestUtil;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ProgressDialogTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.concurrent.Callable;
 
 import static junit.framework.Assert.assertNull;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/RadioButtonTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/shadows/RadioGroupTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/RatingBarTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.util.Transcript;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class RatingBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/RectTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class RectTest {

File: robolectric/src/test/java/org/robolectric/shadows/RelativeLayoutTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class RelativeLayoutTest {

File: robolectric/src/test/java/org/robolectric/shadows/RemoteCallbackListTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class RemoteCallbackListTest {

File: robolectric/src/test/java/org/robolectric/shadows/RemoteViewsTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/ResolveInfoTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ResolveInfoTest {

File: robolectric/src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -13,7 +13,7 @@
 import android.graphics.drawable.NinePatchDrawable;
 import android.util.DisplayMetrics;
 import android.util.TypedValue;
-import org.fest.assertions.data.Offset;
+import org.assertj.core.data.Offset;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -27,7 +27,7 @@
 import java.io.File;
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.fest.reflect.core.Reflection.field;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SQLiteCursorTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.CountDownLatch;
 
 import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SQLiteOpenHelperTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteQueryBuilderTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SQLiteQueryBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SQLiteStatementTest {

File: robolectric/src/test/java/org/robolectric/shadows/ScanResultTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.TestRunners;
 
 import static junit.framework.Assert.assertNotNull;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ScrollerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ScrollerTest {

File: robolectric/src/test/java/org/robolectric/shadows/SeekBarTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.util.Transcript;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SeekBarTest {

File: robolectric/src/test/java/org/robolectric/shadows/SensorManagerTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.robolectric.TestRunners;
 
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ServiceTest {

File: robolectric/src/test/java/org/robolectric/shadows/SettingsTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SettingsTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowBinderTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ShadowBinderTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowDrawerLayoutTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ShadowEditTextTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowParcelFileDescriptorTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.File;
 import java.io.FileOutputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ShadowParcelFileDescriptorTest {

File: robolectric/src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ShapeDrawableTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/SimpleCursorAdapterTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SimpleCursorAdapterTest {

File: robolectric/src/test/java/org/robolectric/shadows/SpannableStringBuilderTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SpannableStringBuilderTest {

File: robolectric/src/test/java/org/robolectric/shadows/SpannableStringTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SpannableStringTest {

File: robolectric/src/test/java/org/robolectric/shadows/SpinnerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: robolectric/src/test/java/org/robolectric/shadows/SslErrorHandlerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/StatFsTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class StatFsTest {

File: robolectric/src/test/java/org/robolectric/shadows/StateListDrawableTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/SupportLoaderTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Tests for support loaders.

File: robolectric/src/test/java/org/robolectric/shadows/SurfaceTest.java
Patch:
@@ -6,7 +6,7 @@
 import android.view.Surface;
 import android.graphics.SurfaceTexture;
 import static org.robolectric.Robolectric.*;
-import static org.fest.assertions.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SurfaceTest {

File: robolectric/src/test/java/org/robolectric/shadows/SurfaceViewTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/SyncResultTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/SystemClockTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/shadows/TabActivityTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class TabActivityTest {

File: robolectric/src/test/java/org/robolectric/shadows/TabHostTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNull;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/TabSpecTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TelephonyManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 
 import static android.content.Context.TELEPHONY_SERVICE;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Robolectric.*;
 

File: robolectric/src/test/java/org/robolectric/shadows/TextToSpeechTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TextUtilsTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.Arrays;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertArrayEquals;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TextViewTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Random;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;

File: robolectric/src/test/java/org/robolectric/shadows/ThemeTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.robolectric.util.ActivityController;
 import org.robolectric.util.TestUtil;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.buildActivity;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TimePickerDialogTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TimeTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/ToastTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ToastTest {

File: robolectric/src/test/java/org/robolectric/shadows/TouchDelegateTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class TouchDelegateTest {

File: robolectric/src/test/java/org/robolectric/shadows/TranslateAnimationTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/TypedArrayTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Arrays;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/TypedValueTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class TypedValueTest {

File: robolectric/src/test/java/org/robolectric/shadows/TypefaceTest.java
Patch:
@@ -1,7 +1,7 @@
 // Not in master, can maybe be deleted
 package org.robolectric.shadows;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 import java.io.File;

File: robolectric/src/test/java/org/robolectric/shadows/UriTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class UriTest {

File: robolectric/src/test/java/org/robolectric/shadows/VibratorTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class VibratorTest {

File: robolectric/src/test/java/org/robolectric/shadows/VideoViewTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class VideoViewTest {

File: robolectric/src/test/java/org/robolectric/shadows/ViewConfigurationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.TestRunners;
 
 import static junit.framework.Assert.assertEquals;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.res.Attribute;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.util.TestUtil.TEST_PACKAGE;
 

File: robolectric/src/test/java/org/robolectric/shadows/ViewTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static junit.framework.Assert.assertEquals;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;

File: robolectric/src/test/java/org/robolectric/shadows/WebViewTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/WifiConfigurationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.TestRunners;
 
 import static junit.framework.Assert.assertNotNull;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/shadows/WifiInfoTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.TestRunners;
 
 import static android.content.Context.WIFI_SERVICE;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/shadows/WifiManagerTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static android.content.Context.WIFI_SERVICE;
 import static junit.framework.Assert.assertTrue;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;

File: robolectric/src/test/java/org/robolectric/shadows/WindowManagerGlobalTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class WindowManagerGlobalTest {

File: robolectric/src/test/java/org/robolectric/shadows/WindowTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(TestRunners.WithDefaults.class)

File: robolectric/src/test/java/org/robolectric/test/DrawableAssert.java
Patch:
@@ -2,9 +2,9 @@
 
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
-import org.fest.assertions.api.AbstractAssert;
+import org.assertj.core.api.AbstractAssert;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 public class DrawableAssert<T extends Drawable> extends AbstractAssert<DrawableAssert<T>, T> {

File: robolectric/src/test/java/org/robolectric/tester/android/content/TestSharedPreferencesTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/tester/android/database/SimpleTestCursorTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.ArrayList;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/tester/android/view/MenuItemTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MenuItemTest {

File: robolectric/src/test/java/org/robolectric/tester/android/view/MenuTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class MenuTest {

File: robolectric/src/test/java/org/robolectric/tester/org/apache/http/FakeHttpLayerTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 

File: robolectric/src/test/java/org/robolectric/tester/org/apache/http/ParamsParserTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.Map;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ParamsParserTest {

File: robolectric/src/test/java/org/robolectric/tester/org/apache/http/TestHttpResponseTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.apache.http.message.BasicHeader;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class TestHttpResponseTest {
 

File: robolectric/src/test/java/org/robolectric/util/ActivityControllerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.robolectric.Robolectric.shadowOf;
 

File: robolectric/src/test/java/org/robolectric/util/FragmentTestUtilTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.util;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.util.FragmentTestUtil.startFragment;
 import static org.robolectric.util.FragmentTestUtil.startVisibleFragment;
 

File: robolectric/src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class SQLiteLibraryLoaderTest {

File: robolectric/src/test/java/org/robolectric/util/SchedulerTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SchedulerTest {
   private Transcript transcript;

File: robolectric/src/test/java/org/robolectric/util/ServiceControllerTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.robolectric.util;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 import org.junit.Before;

File: robolectric/src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import java.net.URL;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * @author Vyacheslav Mayorov

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -133,7 +133,7 @@ private TypedArray attrsToTypedArray(AttributeSet set, int[] attrs, int defStyle
         Attribute defStyleAttribute = getOverlayedThemeValue(defStyleName, theme, overlayedStyles);
         if (defStyleAttribute != null) {
           while (defStyleAttribute.isStyleReference()) {
-            Attribute other = theme.getAttrValue(defStyleAttribute.getStyleReference());
+            Attribute other = getOverlayedThemeValue(defStyleAttribute.getStyleReference(), theme, overlayedStyles);
             if (other == null) {
               throw new RuntimeException("couldn't dereference " + defStyleAttribute);
             }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -211,6 +211,7 @@ public static final class layout {
     public static final int activity_main = 0x10624;
     public static final int activity_main_1 = 0x10625;
     public static final int ordinal_scrollbar = 0x10626;
+    public static final int custom_layout6 = 0x10627;
   }
 
   public static final class anim {
@@ -242,6 +243,7 @@ public static final class attr {
     public static final int quitKeyCombo = 0x10a09;
     public static final int responses = 0x10a0a;
     public static final int animalStyle = 0x10a0b;
+    public static final int stateFoo = 0x10a0c;
   }
 
   public static final class menu {
@@ -325,6 +327,7 @@ public static final class style {
     public static final int Gastropod = 0x11007;
     public static final int Theme_ThirdTheme = 0x11008;
     public static final int MyBlackTheme = 0x11009;
+    public static final int MyBlueTheme = 0x1100a;
   }
 
   public static final class fraction {

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -283,7 +283,9 @@ public String getAttributeNamespace(int index) {
     public String getAttributeName(int index) {
       try {
         Node attr = getAttributeAt(index);
-        return attr.getNodeName();
+        return (Attribute.ANDROID_RES_NS_PREFIX + packageName).equals(attr.getNamespaceURI()) ?
+          attr.getLocalName() :
+          attr.getNodeName();
       } catch (IndexOutOfBoundsException ex) {
         return null;
       }

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -160,8 +160,8 @@ public AssetManager getAssets() {
   @Override
   @Implementation
   public Resources getResources() {
-    if (resources == null ) {
-      resources = ShadowResources.bind(new Resources(realApplication.getAssets(), null, new Configuration()), resourceLoader);
+    if (resources == null) {
+      resources = new Resources(realApplication.getAssets(), null, new Configuration());
     }
     return resources;
   }

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowImageView extends ShadowView {
   private Drawable imageDrawable;
   private Bitmap imageBitmap;
   private ImageView.ScaleType scaleType;
-  private Matrix matrix;
+  private Matrix matrix = new Matrix();
   private int imageLevel;
 
   @Implementation

File: src/test/java/org/robolectric/R.java
Patch:
@@ -147,6 +147,7 @@ public static final class color {
     public static final int test_color_1 = 0x1040b;
     public static final int color_state_list = 0x1040c;
     public static final int list_separator = 0x1040d;
+    public static final int custom_state_view_text_color = 0x1040e;
   }
 
   public static final class drawable {
@@ -324,7 +325,6 @@ public static final class style {
     public static final int Gastropod = 0x11007;
     public static final int Theme_ThirdTheme = 0x11008;
     public static final int MyBlackTheme = 0x11009;
-    public static final int MyBlueTheme = 0x1100a;
   }
 
   public static final class fraction {

File: src/test/java/org/robolectric/shadows/ImageViewTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() throws Exception {
 
   @Test
   public void shouldCopyMatrixSetup() throws Exception {
-    Matrix matrix = new Matrix();
+    Matrix matrix = imageView.getImageMatrix();
     matrix.setTranslate(15, 20);
     imageView.setImageMatrix(matrix);
     ShadowMatrix m1 = shadowOf(imageView.getImageMatrix());

File: src/test/java/org/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -59,7 +59,7 @@ public void testProcessResourceXml() throws Exception {
     drawableResourceLoader.findDrawableResources(testResources());
 
     assertNotNull(drawableNodes.get(new ResName(TEST_PACKAGE, "drawable", "rainbow"), ""));
-    assertEquals(32, drawableNodes.size());
+    assertEquals(19, drawableNodes.size());
   }
 
   @Test

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -283,7 +283,7 @@ public String getAttributeNamespace(int index) {
     public String getAttributeName(int index) {
       try {
         Node attr = getAttributeAt(index);
-        return packageName.equals(attr.getNamespaceURI()) ?
+        return (Attribute.ANDROID_RES_NS_PREFIX + packageName).equals(attr.getNamespaceURI()) ?
           attr.getLocalName() :
           attr.getNodeName();
       } catch (IndexOutOfBoundsException ex) {

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -160,8 +160,8 @@ public AssetManager getAssets() {
   @Override
   @Implementation
   public Resources getResources() {
-    if (resources == null ) {
-      resources = ShadowResources.bind(new Resources(realApplication.getAssets(), null, new Configuration()), resourceLoader);
+    if (resources == null) {
+      resources = new Resources(realApplication.getAssets(), null, new Configuration());
     }
     return resources;
   }

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -283,7 +283,7 @@ public String getAttributeNamespace(int index) {
     public String getAttributeName(int index) {
       try {
         Node attr = getAttributeAt(index);
-        return packageName.equals(attr.getNamespaceURI()) ?
+        return (Attribute.ANDROID_RES_NS_PREFIX + packageName).equals(attr.getNamespaceURI()) ?
           attr.getLocalName() :
           attr.getNodeName();
       } catch (IndexOutOfBoundsException ex) {

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -283,7 +283,9 @@ public String getAttributeNamespace(int index) {
     public String getAttributeName(int index) {
       try {
         Node attr = getAttributeAt(index);
-        return attr.getNodeName();
+        return packageName.equals(attr.getNamespaceURI()) ?
+          attr.getLocalName() :
+          attr.getNodeName();
       } catch (IndexOutOfBoundsException ex) {
         return null;
       }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -146,6 +146,7 @@ public static final class color {
     public static final int test_color_1 = 0x1040a;
     public static final int color_state_list = 0x1040b;
     public static final int list_separator = 0x1040c;
+    public static final int custom_state_view_text_color = 0x1040d;
   }
 
   public static final class drawable {
@@ -209,6 +210,7 @@ public static final class layout {
     public static final int activity_main = 0x10624;
     public static final int activity_main_1 = 0x10625;
     public static final int ordinal_scrollbar = 0x10626;
+    public static final int custom_layout6 = 0x10627;
   }
 
   public static final class anim {
@@ -240,6 +242,7 @@ public static final class attr {
     public static final int quitKeyCombo = 0x10a09;
     public static final int responses = 0x10a0a;
     public static final int animalStyle = 0x10a0b;
+    public static final int stateFoo = 0x10a0c;
   }
 
   public static final class menu {

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -15,7 +15,7 @@ public class ShadowImageView extends ShadowView {
   private Drawable imageDrawable;
   private Bitmap imageBitmap;
   private ImageView.ScaleType scaleType;
-  private Matrix matrix;
+  private Matrix matrix = new Matrix();
   private int imageLevel;
 
   @Implementation

File: src/test/java/org/robolectric/shadows/ImageViewTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() throws Exception {
 
   @Test
   public void shouldCopyMatrixSetup() throws Exception {
-    Matrix matrix = new Matrix();
+    Matrix matrix = imageView.getImageMatrix();
     matrix.setTranslate(15, 20);
     imageView.setImageMatrix(matrix);
     ShadowMatrix m1 = shadowOf(imageView.getImageMatrix());

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -123,6 +123,7 @@ public boolean shouldAcquire(String name) {
             || name.startsWith("org.hamcrest")
             || name.startsWith("org.specs2")  // allows for android projects with mixed scala\java tests to be
             || name.startsWith("scala.")      //  run with Maven Surefire (see the RoboSpecs project on github)
+            || name.startsWith("kotlin.")
             || name.startsWith("com.almworks.sqlite4java") // Fix #958: SQLite native library must be loaded once.
     );
   }

File: src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -75,7 +75,7 @@ public class ShadowActivity extends ShadowContextThemeWrapper {
   private Menu optionsMenu;
 
   public void __constructor__() {
-    RobolectricInternals.getConstructor(Activity.class, realActivity, new Class[0]).invoke();
+    RobolectricInternals.getConstructor(Activity.class, realActivity).invoke();
   }
 
   public void setApplication(Application application) {

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -172,9 +172,9 @@ public static Invoker<Void> getConstructor(Class<?> clazz, Object instance, Stri
     } catch (ClassNotFoundException e) {
       throw new RuntimeException(e);
     }
-    for (int i = 1; i < parameterTypes.length; i++) {
+    for (int i = 0; i < parameterTypes.length; i++) {
       try {
-        parameterClasses[i] = clazz.getClassLoader().loadClass(parameterTypes[i]);
+        parameterClasses[i + 1] = clazz.getClassLoader().loadClass(parameterTypes[i]);
       } catch (ClassNotFoundException e) {
         throw new RuntimeException(e);
       }

File: src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -344,8 +344,9 @@ public CharSequence getCharSequenceExtra(String name) {
   }
 
   @Implementation
-  public void putExtra(String key, byte[] value) {
+  public Intent putExtra(String key, byte[] value) {
     extras.putByteArray(key, value);
+    return realIntent;
   }
 
   @Implementation

File: src/main/java/org/robolectric/shadows/ShadowIntent.java
Patch:
@@ -344,8 +344,9 @@ public CharSequence getCharSequenceExtra(String name) {
   }
 
   @Implementation
-  public void putExtra(String key, byte[] value) {
+  public Intent putExtra(String key, byte[] value) {
     extras.putByteArray(key, value);
+    return realIntent;
   }
 
   @Implementation

File: src/test/java/org/robolectric/shadows/ToastTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldHaveLongDuration() throws Exception {
   }
 
   @Test
-  public void shouldSetTextCorrectly() throws Exception {
+  public void shouldMakeTextCorrectly() throws Exception {
     Toast toast = Toast.makeText(new Activity(), "short toast", Toast.LENGTH_SHORT);
     assertThat(toast).isNotNull();
     assertThat(toast.getDuration()).isEqualTo(Toast.LENGTH_SHORT);
@@ -42,7 +42,7 @@ public void shouldSetTextCorrectly() throws Exception {
   }
 
   @Test
-  public void shouldMakeTextCorrectly() throws Exception {
+  public void shouldSetTextCorrectly() throws Exception {
     Toast toast = Toast.makeText(new Activity(), "short toast", Toast.LENGTH_SHORT);
     toast.setText("other toast");
     toast.show();

File: src/test/java/org/robolectric/shadows/ToastTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldHaveLongDuration() throws Exception {
   }
 
   @Test
-  public void shouldSetTextCorrectly() throws Exception {
+  public void shouldMakeTextCorrectly() throws Exception {
     Toast toast = Toast.makeText(new Activity(), "short toast", Toast.LENGTH_SHORT);
     assertThat(toast).isNotNull();
     assertThat(toast.getDuration()).isEqualTo(Toast.LENGTH_SHORT);
@@ -42,7 +42,7 @@ public void shouldSetTextCorrectly() throws Exception {
   }
 
   @Test
-  public void shouldMakeTextCorrectly() throws Exception {
+  public void shouldSetTextCorrectly() throws Exception {
     Toast toast = Toast.makeText(new Activity(), "short toast", Toast.LENGTH_SHORT);
     toast.setText("other toast");
     toast.show();

File: src/test/java/org/robolectric/CachedMavenCentralTest.java
Patch:
@@ -27,7 +27,7 @@ public class CachedMavenCentralTest {
   private MavenCentral internalMc = mock(MavenCentral.class);
   private CacheNamingStrategy cacheNamingStrategy = new CacheNamingStrategy() {
     @Override
-    public String getName(Dependency... dependencies) {
+    public String getName(String prefix, Dependency... dependencies) {
       return CACHE_NAME;
     }
   };

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -74,7 +74,7 @@ public int getAttributeIntValue(String namespace, String attribute, int defaultV
     }
 
     TypedValue outValue = new TypedValue();
-    Converter.convertAndFill(attr, outValue, resourceLoader, qualifiers, typedResource.getData());
+    Converter.convertAndFill(attr, outValue, resourceLoader, qualifiers, typedResource.getData(), false);
     if (outValue.type == TypedValue.TYPE_NULL) {
       return defaultValue;
     }

File: src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -132,7 +132,7 @@ public boolean getThemeValue(int theme, int ident, TypedValue outValue, boolean
         System.out.println("Couldn't find " + resName + " in " + themeStyleName);
       } else {
         TypedResource attrDataValue = resourceLoader.getValue(resName, getQualifiers());
-        Converter.convertAndFill(attrValue, outValue, resourceLoader, getQualifiers());
+        Converter.convertAndFill(attrValue, outValue, resourceLoader, getQualifiers(), resolveRefs);
         return true;
       }
     }

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -226,7 +226,7 @@ public TypedArray createTypedArray(List<Attribute> set, int[] attrs) {
       if (attrName != null) {
         Attribute attribute = Attribute.find(set, attrName);
         TypedValue typedValue = new TypedValue();
-        Converter.convertAndFill(attribute, typedValue, resourceLoader, qualifiers);
+        Converter.convertAndFill(attribute, typedValue, resourceLoader, qualifiers, true);
 
         if (attribute != null && !attribute.isNull()) {
           //noinspection PointlessArithmeticExpression

File: src/test/java/org/robolectric/R.java
Patch:
@@ -322,6 +322,7 @@ public static final class style {
     public static final int Sized = 0x11006;
     public static final int Gastropod = 0x11007;
     public static final int Theme_ThirdTheme = 0x11008;
+    public static final int MyBlackTheme = 0x11009;
   }
 
   public static final class fraction {

File: src/main/java/org/robolectric/shadows/ShadowPreferenceGroup.java
Patch:
@@ -9,6 +9,8 @@
 
 import java.util.ArrayList;
 
+import static org.robolectric.Robolectric.shadowOf;
+
 /**
  * See: http://android.git.kernel.org/?p=platform/frameworks/base.git;a=blob_plain;f=core/java/android/preference/PreferenceGroup.java;hb=HEAD
  */
@@ -32,6 +34,7 @@ public boolean addPreference(Preference preference) {
 
     // TODO currently punting on ordering logic
     preferenceList.add(preference);
+    shadowOf(preference).onAttachedToHierarchy(realPreferenceGroup.getPreferenceManager());
 
     return true;
   }

File: src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -274,7 +274,7 @@ public void testGetColumnNumber() {
   @Test
   public void testGetDepth() throws XmlPullParserException, IOException {
     // Recorded depths from preference file elements
-    List<Integer> expectedDepths = asList(1, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2);
+    List<Integer> expectedDepths = asList(1, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2);
     List<Integer> actualDepths = new ArrayList<Integer>();
     int evt;
     while ((evt = parser.next()) != XmlResourceParser.END_DOCUMENT) {
@@ -455,6 +455,8 @@ public void testNext() throws XmlPullParserException, IOException {
         "<", // PreferenceScreen
         "<", // Preference
         ">",
+        "<", // Preference
+        ">",
         ">",
 
         "<", // CheckBoxPreference

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -31,6 +31,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/bool", "bool", ResType.BOOLEAN),
         new ValueResourceLoader(data, "/resources/item[@type='bool']", "bool", ResType.BOOLEAN),
         new ValueResourceLoader(data, "/resources/color", "color", ResType.COLOR),
+        new ValueResourceLoader(data, "/resources/item[@type='color']", "color", ResType.COLOR),
         new ValueResourceLoader(data, "/resources/dimen", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/item[@type='dimen']", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),

File: src/test/java/org/robolectric/tester/android/view/MenuTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
-public class TestMenuTest {
+public class MenuTest {
 
   @Test
   public void addAndRemoveMenuItems() {

File: src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.robolectric.Robolectric.directlyOn;
 
-@Implements(value = NumberPicker.class, callThroughByDefault = true)
+@Implements(value = NumberPicker.class)
 public class ShadowNumberPicker extends ShadowLinearLayout {
   @RealObject
   private NumberPicker realObject;

File: src/main/java/org/robolectric/AndroidManifest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.graphics.Color;
+import org.fest.util.Lists;
 import org.robolectric.res.*;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
@@ -490,7 +491,7 @@ public List<ResourcePath> getIncludedResourcePaths() {
     for (AndroidManifest libraryManifest : getLibraryManifests()) {
       resourcePaths.addAll(libraryManifest.getIncludedResourcePaths());
     }
-    return new ArrayList<ResourcePath>(resourcePaths);
+    return Lists.newArrayList(resourcePaths);
   }
 
   public List<ContentProviderData> getContentProviders() {

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -223,7 +223,7 @@ public void evaluate() throws Throwable {
           }
           assureTestLifecycle(sdkEnvironment);
 
-          parallelUniverseInterface.resetStaticState();
+          parallelUniverseInterface.resetStaticState(config);
           parallelUniverseInterface.setSdkConfig(sdkEnvironment.getSdkConfig());
 
           boolean strictI18n = determineI18nStrictState(bootstrappedMethod);
@@ -262,7 +262,7 @@ public void evaluate() throws Throwable {
             try {
               internalAfterTest(bootstrappedMethod);
             } finally {
-              parallelUniverseInterface.resetStaticState(); // afterward too, so stuff doesn't hold on to classes?
+              parallelUniverseInterface.resetStaticState(config); // afterward too, so stuff doesn't hold on to classes?
               // todo: is this really needed?
               Thread.currentThread().setContextClassLoader(RobolectricTestRunner.class.getClassLoader());
             }

File: src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.res.ResourceLoader;
 
 public interface ParallelUniverseInterface {
-  public void resetStaticState();
+  void resetStaticState(Config config);
 
   void setUpApplicationState(Method method, TestLifecycle testLifecycle, boolean strictI18n, ResourceLoader systemResourceLoader, AndroidManifest appManifest, Config config);
 

File: src/main/java/org/robolectric/shadows/ShadowAccountManager.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Shadow implementation for the Android {@code AccountManager } class.
  */
-@Implements(AccountManager.class)
+@Implements(value = AccountManager.class, resetStaticState = true)
 public class ShadowAccountManager {
   private static final Object lock = new Object();
 

File: src/main/java/org/robolectric/shadows/ShadowBinder.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
-@Implements(android.os.Binder.class)
+@Implements(value = Binder.class, resetStaticState = true)
 public class ShadowBinder {
   @RealObject
   Binder realObject;

File: src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -30,7 +30,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(BitmapFactory.class)
+@Implements(value = BitmapFactory.class, resetStaticState = true)
 public class ShadowBitmapFactory {
   private static Map<String, Point> widthAndHeightMap = new HashMap<String, Point>();
 

File: src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
-@Implements(ContentResolver.class)
+@Implements(value = ContentResolver.class, resetStaticState = true)
 public class ShadowContentResolver {
   private int nextDatabaseIdForInserts;
   private int nextDatabaseIdForUpdates;

File: src/main/java/org/robolectric/shadows/ShadowContext.java
Patch:
@@ -28,7 +28,7 @@
  * Calls through to the {@code resourceLoader} to actually load resources.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Context.class)
+@Implements(value = Context.class, resetStaticState = true)
 abstract public class ShadowContext {
   public static final File CACHE_DIR = createTempDir("android-cache");
   public static final File EXTERNAL_CACHE_DIR = createTempDir("android-external-cache");
@@ -154,7 +154,7 @@ public boolean isStrictI18n() {
     return getShadowApplication().isStrictI18n();
   }
 
-  public static void clearFilesAndCache() {
+  public static void reset() {
     clearFiles(FILES_DIR);
     clearFiles(CACHE_DIR);
     clearFiles(EXTERNAL_CACHE_DIR);

File: src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -23,7 +23,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Dialog.class)
+@Implements(value = Dialog.class, resetStaticState = true)
 public class ShadowDialog {
 
   @RealObject private Dialog realDialog;

File: src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -23,7 +23,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Drawable.class)
+@Implements(value = Drawable.class, resetStaticState = true)
 public class ShadowDrawable {
   private static int defaultIntrinsicWidth = -1;
   private static int defaultIntrinsicHeight = -1;

File: src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 import java.util.Map;
 
-@Implements(Log.class)
+@Implements(value = Log.class, resetStaticState = true)
 public class ShadowLog {
   private static final int extraLogLength = "l/: \n".length();
   private static Map<String,List<LogItem>> logsByTag = new HashMap<String,List<LogItem>>();

File: src/main/java/org/robolectric/shadows/ShadowMediaMetadataRetriever.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Implementation;
 
-@Implements(MediaMetadataRetriever.class)
+@Implements(value = MediaMetadataRetriever.class, resetStaticState = true)
 public class ShadowMediaMetadataRetriever {
   private String path;
   private static final Map<String, HashMap<Integer, String>> metadata = Maps.newHashMap();

File: src/main/java/org/robolectric/shadows/ShadowMediaStore.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.annotation.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(MediaStore.class)
+@Implements(value = MediaStore.class, resetStaticState = true)
 public class ShadowMediaStore {
 
   @Implements(MediaStore.Images.class)

File: src/main/java/org/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Shadow for {@code MimeTypeMap} that allows custom extension <-> mimetype mapping to be set up by tests.
  */
-@Implements(MimeTypeMap.class)
+@Implements(value = MimeTypeMap.class, resetStaticState = true)
 public class ShadowMimeTypeMap {
 
   Map<String, String> extensionToMimeTypeMap = new HashMap<String, String>();

File: src/main/java/org/robolectric/shadows/ShadowPowerManager.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Shadows the {@code android.os.PowerManager} class.
  */
-@Implements(PowerManager.class)
+@Implements(value = PowerManager.class, resetStaticState = true)
 public class ShadowPowerManager {
 
   private boolean isScreenOn = true;

File: src/main/java/org/robolectric/shadows/ShadowProcess.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Shadows the {@code android.os.Process} class.
  */
-@Implements(android.os.Process.class)
+@Implements(value = android.os.Process.class, resetStaticState = true)
 public class ShadowProcess {
   private static int pid;
 

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -44,7 +44,7 @@
  * @see org.robolectric.RobolectricTestRunner#RobolectricTestRunner(Class)
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Resources.class)
+@Implements(value = Resources.class, resetStaticState = true)
 public class ShadowResources {
   private static boolean DEBUG = false;
   private static Resources system = null;

File: src/main/java/org/robolectric/shadows/ShadowStatFs.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-@Implements(StatFs.class)
+@Implements(value = StatFs.class, resetStaticState = true)
 public class ShadowStatFs {
   public static final int BLOCK_SIZE = 4096;
   private static final Stats DEFAULT_STATS = new Stats(0, 0, 0);

File: src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(Typeface.class)
+@Implements(value = Typeface.class, resetStaticState = true)
 public class ShadowTypeface {
   private static Map<FontDesc, Integer> fonts = new HashMap<FontDesc, Integer>();
   private static int nextFontId = 1;

File: src/test/java/org/robolectric/bytecode/RobolectricWiringTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() throws Exception {
 
   @Test
   public void testAllImplementationMethodsHaveCorrectSignature() throws Exception {
-    for (Class<?> shadowClass : Robolectric.getDefaultShadowClasses()) {
+    for (Class<?> shadowClass : Robolectric.DEFAULT_SHADOW_CLASSES) {
       verifyClass(shadowClass);
     }
 

File: src/test/java/org/robolectric/shadows/TypefaceTest.java
Patch:
@@ -67,7 +67,7 @@ public void createFontWithStyle() {
     typeface = Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL);
     assertThat(typeface).isNotNull();
     assertThat(typeface.getStyle()).isEqualTo((Typeface.NORMAL));
-    Robolectric.reset();
+    ShadowTypeface.reset();
     typeface = Typeface.create(Typeface.SANS_SERIF, Typeface.ITALIC);
     assertThat(typeface).isNotNull();
     assertThat(typeface.getStyle()).isEqualTo((Typeface.ITALIC));

File: src/test/java/org/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -59,7 +59,7 @@ public void testProcessResourceXml() throws Exception {
     drawableResourceLoader.findDrawableResources(testResources());
 
     assertNotNull(drawableNodes.get(new ResName(TEST_PACKAGE, "drawable", "rainbow"), ""));
-    assertEquals(31, drawableNodes.size());
+    assertEquals(32, drawableNodes.size());
   }
 
   @Test

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -36,6 +36,8 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/item[@type='integer']", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
+        new ValueResourceLoader(data, "/resources/fraction", "fraction", ResType.FRACTION),
+        new ValueResourceLoader(data, "/resources/item[@type='fraction']", "fraction", ResType.FRACTION),
         new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),

File: src/main/java/org/robolectric/res/ResType.java
Patch:
@@ -11,6 +11,7 @@ public enum ResType {
   DIMEN,
   FILE,
   FLOAT,
+  FRACTION,
   INTEGER,
   LAYOUT,
   STYLE {

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -36,6 +36,8 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/item[@type='integer']", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
+        new ValueResourceLoader(data, "/resources/fraction", "fraction", ResType.FRACTION),
+        new ValueResourceLoader(data, "/resources/item[@type='fraction']", "fraction", ResType.FRACTION),
         new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),

File: src/main/java/org/robolectric/res/ResType.java
Patch:
@@ -11,6 +11,7 @@ public enum ResType {
   DIMEN,
   FILE,
   FLOAT,
+  FRACTION,
   INTEGER,
   LAYOUT,
   STYLE {

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -29,10 +29,12 @@ private void loadEverything() throws Exception {
 
     documentLoader.load("values",
         new ValueResourceLoader(data, "/resources/bool", "bool", ResType.BOOLEAN),
+        new ValueResourceLoader(data, "/resources/item[@type='bool']", "bool", ResType.BOOLEAN),
         new ValueResourceLoader(data, "/resources/color", "color", ResType.COLOR),
         new ValueResourceLoader(data, "/resources/dimen", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/item[@type='dimen']", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),
+        new ValueResourceLoader(data, "/resources/item[@type='integer']", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
         new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),

File: src/test/java/org/robolectric/R.java
Patch:
@@ -110,6 +110,7 @@ public static final class string {
     public static final int surrounding_quotes = 0x10119;
     public static final int escaped_apostrophe = 0x10120;
     public static final int escaped_quotes = 0x10121;
+    public static final int say_it_with_item = 0x10122;
   }
 
   public static final class plurals {
@@ -291,6 +292,7 @@ public static final class integer {
     public static final int hex_int = 0x10d07;
     public static final int test_value_with_zero = 0x10d08;
     public static final int reference_to_meaning_of_life = 0x10d09;
+    public static final int meaning_of_life_as_item = 0x10d0a;
   }
 
   public static final class bool {
@@ -299,6 +301,7 @@ public static final class bool {
     public static final int zero_is_false = 0x10e02;
     public static final int integers_are_true = 0x10e03;
     public static final int reference_to_true = 0x10e04;
+    public static final int true_as_item = 0x10e05;
   }
 
   public static final class style {

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -41,6 +41,7 @@ public void setup() throws Exception {
   @Test
   public void getString() throws Exception {
     assertThat(resources.getString(R.string.hello)).isEqualTo("Hello");
+    assertThat(resources.getString(R.string.say_it_with_item)).isEqualTo("flowers");
   }
 
   @Test
@@ -98,6 +99,7 @@ public void getInt() throws Exception {
     assertThat(resources.getInteger(R.integer.test_integer2)).isEqualTo(9);
     assertThat(resources.getInteger(R.integer.test_large_hex)).isEqualTo(-65536);
     assertThat(resources.getInteger(R.integer.test_value_with_zero)).isEqualTo(7210);
+    assertThat(resources.getInteger(R.integer.meaning_of_life_as_item)).isEqualTo(42);
   }
 
   @Test
@@ -116,6 +118,7 @@ public void getIntArray() throws Exception {
   public void getBoolean() throws Exception {
     assertThat(resources.getBoolean(R.bool.false_bool_value)).isEqualTo(false);
     assertThat(resources.getBoolean(R.bool.integers_are_true)).isEqualTo(true);
+    assertThat(resources.getBoolean(R.bool.true_as_item)).isEqualTo(true);
   }
 
   @Test

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -142,7 +142,7 @@ protected Class<? extends TestLifecycle> getTestLifecycleClass() {
   }
 
   protected ClassLoader createRobolectricClassLoader(Setup setup, SdkConfig sdkConfig) {
-    URL[] urls = MAVEN_CENTRAL.getLocalArtifactUrls(this, sdkConfig.getSdkClasspathDependencies()).values().toArray(new URL[0]);
+    URL[] urls = MAVEN_CENTRAL.getLocalArtifactUrls(this, sdkConfig.getSdkClasspathDependencies());
     return new AsmInstrumentingClassLoader(setup, urls);
   }
 

File: src/main/java/org/robolectric/shadows/ShadowSocketTagger.java
Patch:
@@ -11,6 +11,9 @@
 public class ShadowSocketTagger {
   public static final String REAL_CLASS_NAME = "dalvik.system.SocketTagger";
 
+  @Implementation
+  public final void tag(Socket socket) throws SocketException { }
+
   @Implementation
   public final void untag(Socket socket) throws SocketException { }
 }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -106,6 +106,9 @@ public static final class string {
     public static final int preference_resource_key = 0x10115;
     public static final int preference_resource_title = 0x10116;
     public static final int preference_resource_summary = 0x10117;
+    public static final int surrounding_quotes = 0x10118;
+    public static final int escaped_apostrophe = 0x10119;
+    public static final int escaped_quotes = 0x10120;
   }
 
   public static final class plurals {

File: src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -62,7 +62,7 @@ public void shouldMakeInternalResourcesAvailable() throws Exception {
     Class<?> internalRIdClass = Robolectric.class.getClassLoader().loadClass("com.android.internal.R$" + internalResource.type);
     assertThat(resId).isEqualTo(field(internalResource.name).ofType(int.class).in(internalRIdClass).get());
 
-    assertThat(Robolectric.application.getResources().getString(resId)).isEqualTo("The old PIN you typed isn\\'t correct.");
+    assertThat(Robolectric.application.getResources().getString(resId)).isEqualTo("The old PIN you typed isn't correct.");
   }
 
   private static class TestPreferenceActivity extends PreferenceActivity { }

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
+import static org.robolectric.util.TestUtil.joinCanonicalPath;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class ResourcesTest {
@@ -65,7 +66,7 @@ public void getText_withHtml() throws Exception {
   @Test
   public void getText_withLayoutId() throws Exception {
     // todo: this needs to change...
-    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("." + File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
+    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo(joinCanonicalPath(".", "src", "test", "resources", "res", "layout", "different_screen_sizes.xml"));
   }
 
   @Test

File: src/main/java/org/robolectric/shadows/ShadowConfiguration.java
Patch:
@@ -6,6 +6,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
 
+import static org.robolectric.Robolectric.directlyOn;
+
 @Implements(Configuration.class)
 public class ShadowConfiguration {
 
@@ -141,6 +143,7 @@ public int hashCode() {
 
   @Implementation
   public void setToDefaults() {
+    directlyOn(realConfiguration, Configuration.class).setToDefaults();
     realConfiguration.screenLayout = Configuration.SCREENLAYOUT_LONG_NO |
         Configuration.SCREENLAYOUT_SIZE_NORMAL;
   }

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -114,7 +114,7 @@ public void getDimension() throws Exception {
     assertThat(resources.getDimension(R.dimen.test_mm_dimen)).isEqualTo(((float) (42f / 25.4 * 240)));
     assertThat(resources.getDimension(R.dimen.test_px_dimen)).isEqualTo(15f);
     assertThat(resources.getDimension(R.dimen.test_pt_dimen)).isEqualTo(12 / 0.3f);
-    assertThat(resources.getDimension(R.dimen.test_sp_dimen)).isEqualTo(0); // huh?
+    assertThat(resources.getDimension(R.dimen.test_sp_dimen)).isEqualTo(5);
   }
 
   @Test
@@ -125,7 +125,7 @@ public void getDimensionPixelSize() throws Exception {
     assertThat(resources.getDimensionPixelSize(R.dimen.test_mm_dimen)).isEqualTo(397);
     assertThat(resources.getDimensionPixelSize(R.dimen.test_px_dimen)).isEqualTo(15);
     assertThat(resources.getDimensionPixelSize(R.dimen.test_pt_dimen)).isEqualTo(40);
-    assertThat(resources.getDimensionPixelSize(R.dimen.test_sp_dimen)).isEqualTo(1);
+    assertThat(resources.getDimensionPixelSize(R.dimen.test_sp_dimen)).isEqualTo(5);
   }
 
   @Test
@@ -136,7 +136,7 @@ public void getDimensionPixelOffset() throws Exception {
     assertThat(resources.getDimensionPixelOffset(R.dimen.test_mm_dimen)).isEqualTo(396);
     assertThat(resources.getDimensionPixelOffset(R.dimen.test_px_dimen)).isEqualTo(15);
     assertThat(resources.getDimensionPixelOffset(R.dimen.test_pt_dimen)).isEqualTo(40);
-    assertThat(resources.getDimensionPixelOffset(R.dimen.test_sp_dimen)).isEqualTo(0);
+    assertThat(resources.getDimensionPixelOffset(R.dimen.test_sp_dimen)).isEqualTo(5);
   }
 
   @Test

File: src/test/java/org/robolectric/R.java
Patch:
@@ -129,6 +129,7 @@ public static final class string {
     public static final int activity_name = 0x10111;
     public static final int minute_singular = 0x10112;
     public static final int minute_plural = 0x10113;
+    public static final int str_int = 0x10114;
   }
 
   public static final class plurals {

File: src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -60,7 +60,8 @@ public void internalBeforeTest_clearsShadowApplicationStrictI18n() {
   @Test
   @Config(qualifiers = "fr")
   public void internalBeforeTest_testValuesResQualifiers() {
-    assertEquals("fr", Robolectric.shadowOf(Robolectric.getShadowApplication().getResources().getAssets()).getQualifiers());
+    String expectedQualifiers = "fr" + TestRunners.WithDefaults.SDK_TARGETED_BY_MANIFEST;
+    assertEquals(expectedQualifiers, Robolectric.shadowOf(Robolectric.getShadowApplication().getResources().getAssets()).getQualifiers());
   }
 
   @Test

File: src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -68,6 +68,8 @@ protected void setUpApplicationState(Method method, ParallelUniverseInterface pa
   }
 
   public static class WithDefaults extends RobolectricTestRunner {
+    public static final String SDK_TARGETED_BY_MANIFEST = "-v18";
+    
     public WithDefaults(Class<?> testClass) throws InitializationError {
       super(testClass);
       Locale.setDefault(Locale.ENGLISH);

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -39,6 +39,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
+        new ValueResourceLoader(data, "/resources/item[@type='string']", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),
         new AttrResourceLoader(data),
         new StyleResourceLoader(data)

File: src/main/java/org/robolectric/bytecode/AsmInstrumentingClassLoader.java
Patch:
@@ -138,7 +138,7 @@ protected Class<?> findClass(final String className) throws ClassNotFoundExcepti
       }
 
       final ClassReader classReader = new ClassReader(origClassBytes);
-      ClassNode classNode = new ClassNode() {
+      ClassNode classNode = new ClassNode(Opcodes.ASM4) {
         @Override
         public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
           desc = remapParamType(desc);
@@ -975,4 +975,4 @@ public String getName() {
       return className;
     }
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/robolectric/bytecode/AsmInstrumentingClassLoader.java
Patch:
@@ -138,7 +138,7 @@ protected Class<?> findClass(final String className) throws ClassNotFoundExcepti
       }
 
       final ClassReader classReader = new ClassReader(origClassBytes);
-      ClassNode classNode = new ClassNode() {
+      ClassNode classNode = new ClassNode(Opcodes.ASM4) {
         @Override
         public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
           desc = remapParamType(desc);
@@ -975,4 +975,4 @@ public String getName() {
       return className;
     }
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -130,7 +130,7 @@ public boolean shouldAcquire(String name) {
             || name.startsWith("org.hamcrest")
             || name.startsWith("org.specs2")  // allows for android projects with mixed scala\java tests to be
             || name.startsWith("scala.")      //  run with Maven Surefire (see the RoboSpecs project on github)
-            || name.startsWith("org.sqlite.") // ugh, we're barfing while loading org.sqlite now for some reason?!? todo: still?
+            || name.startsWith("com.almworks.sqlite4java") // Fix #958: SQLite native library must be loaded once.
     );
   }
 

File: src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -73,7 +73,6 @@ public void shouldRegisterActivitiesFromManifestInPackageManager() throws Except
     PackageManager packageManager = application.getPackageManager();
     assertThat(packageManager.resolveActivity(new Intent("org.robolectric.shadows.TestActivity"), -1)).isNotNull();
     assertThat(packageManager.resolveActivity(new Intent("org.robolectric.shadows.TestActivity2"), -1)).isNotNull();
-
   }
 
   @Test public void shouldDoTestApplicationNameTransform() throws Exception {

File: src/main/java/org/robolectric/shadows/ShadowObjectAnimator.java
Patch:
@@ -3,6 +3,7 @@
 import android.animation.ObjectAnimator;
 import android.os.Handler;
 import android.os.Looper;
+
 import org.robolectric.RobolectricShadowOfLevel16;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
@@ -39,7 +40,6 @@ public static ObjectAnimator ofFloat(Object target, String propertyName, float..
     result.setTarget(target);
     result.setPropertyName(propertyName);
     result.setFloatValues(values);
-    RobolectricShadowOfLevel16.shadowOf(result).setAnimationType(float.class);
 
     getAnimatorMapFor(target).put(propertyName, result);
     return result;
@@ -52,7 +52,6 @@ public static ObjectAnimator ofInt(Object target, String propertyName, int... va
     result.setTarget(target);
     result.setPropertyName(propertyName);
     result.setIntValues(values);
-    RobolectricShadowOfLevel16.shadowOf(result).setAnimationType(int.class);
 
     getAnimatorMapFor(target).put(propertyName, result);
     return result;
@@ -94,11 +93,13 @@ public String getPropertyName() {
   @Implementation
   public void setFloatValues(float... values) {
     this.floatValues = values;
+    RobolectricShadowOfLevel16.shadowOf(realObject).setAnimationType(float.class);
   }
 
   @Implementation
   public void setIntValues(int... values) {
     this.intValues = values;
+    RobolectricShadowOfLevel16.shadowOf(realObject).setAnimationType(int.class);
   }
 
   @Implementation

File: src/test/java/org/robolectric/R.java
Patch:
@@ -230,6 +230,7 @@ public static final class anim {
 
   public static final class animator {
     public static final int spinning = 0x10710;
+    public static final int fade = 0x10711;
   }
 
   public static final class raw {

File: src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -116,7 +116,7 @@ public final Uri insert(Uri url, ContentValues values) {
     } else {
       InsertStatement insertStatement = new InsertStatement(url, new ContentValues(values));
       insertStatements.add(insertStatement);
-      return Uri.parse(url.toString() + "/" + nextDatabaseIdForInserts++);
+      return Uri.parse(url.toString() + "/" + ++nextDatabaseIdForInserts);
     }
   }
 
@@ -128,7 +128,7 @@ public int update(Uri uri, ContentValues values, String where, String[] selectio
     } else {
       UpdateStatement updateStatement = new UpdateStatement(uri, new ContentValues(values), where, selectionArgs);
       updateStatements.add(updateStatement);
-      return nextDatabaseIdForUpdates++;
+      return ++nextDatabaseIdForUpdates;
     }
   }
 

File: src/test/java/org/robolectric/shadows/ContentResolverTest.java
Patch:
@@ -61,7 +61,7 @@ public void setUp() throws Exception {
 
   @Test
   public void insert_shouldReturnIncreasingUris() throws Exception {
-    shadowContentResolver.setNextDatabaseIdForInserts(21);
+    shadowContentResolver.setNextDatabaseIdForInserts(20);
 
     assertThat(contentResolver.insert(EXTERNAL_CONTENT_URI, new ContentValues())).isEqualTo(uri21);
     assertThat(contentResolver.insert(EXTERNAL_CONTENT_URI, new ContentValues())).isEqualTo(uri22);
@@ -408,7 +408,7 @@ public void shouldDelegateCallsToRegisteredProvider() throws Exception {
     assertNull(contentResolver.query(unrelated, null, null, null, null));
     assertNotNull(contentResolver.insert(unrelated, new ContentValues()));
     assertThat(contentResolver.delete(unrelated, null, null)).isEqualTo(1);
-    assertThat(contentResolver.update(unrelated, new ContentValues(), null, null)).isEqualTo(0);
+    assertThat(contentResolver.update(unrelated, new ContentValues(), null, null)).isEqualTo(1);
   }
 
   @Test

File: src/test/java/org/robolectric/shadows/ContentResolverTest.java
Patch:
@@ -61,7 +61,7 @@ public void setUp() throws Exception {
 
   @Test
   public void insert_shouldReturnIncreasingUris() throws Exception {
-    shadowContentResolver.setNextDatabaseIdForInserts(21);
+    shadowContentResolver.setNextDatabaseIdForInserts(20);
 
     assertThat(contentResolver.insert(EXTERNAL_CONTENT_URI, new ContentValues())).isEqualTo(uri21);
     assertThat(contentResolver.insert(EXTERNAL_CONTENT_URI, new ContentValues())).isEqualTo(uri22);
@@ -408,7 +408,7 @@ public void shouldDelegateCallsToRegisteredProvider() throws Exception {
     assertNull(contentResolver.query(unrelated, null, null, null, null));
     assertNotNull(contentResolver.insert(unrelated, new ContentValues()));
     assertThat(contentResolver.delete(unrelated, null, null)).isEqualTo(1);
-    assertThat(contentResolver.update(unrelated, new ContentValues(), null, null)).isEqualTo(0);
+    assertThat(contentResolver.update(unrelated, new ContentValues(), null, null)).isEqualTo(1);
   }
 
   @Test

File: src/main/java/org/robolectric/shadows/ShadowContentResolver.java
Patch:
@@ -116,7 +116,7 @@ public final Uri insert(Uri url, ContentValues values) {
     } else {
       InsertStatement insertStatement = new InsertStatement(url, new ContentValues(values));
       insertStatements.add(insertStatement);
-      return Uri.parse(url.toString() + "/" + nextDatabaseIdForInserts++);
+      return Uri.parse(url.toString() + "/" + ++nextDatabaseIdForInserts);
     }
   }
 
@@ -128,7 +128,7 @@ public int update(Uri uri, ContentValues values, String where, String[] selectio
     } else {
       UpdateStatement updateStatement = new UpdateStatement(uri, new ContentValues(values), where, selectionArgs);
       updateStatements.add(updateStatement);
-      return nextDatabaseIdForUpdates++;
+      return ++nextDatabaseIdForUpdates;
     }
   }
 

File: src/test/java/org/robolectric/ParameterizedRobolectricTestRunnerUriTest.java
Patch:
@@ -3,6 +3,7 @@
 import android.net.Uri;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -30,6 +31,7 @@ public ParameterizedRobolectricTestRunnerUriTest(String basePath,
   }
 
   @Test
+  @Config(manifest = Config.NONE)
   public void parse() {
     assertThat(Uri.parse(basePath).buildUpon().path(resourcePath).build()).isEqualTo(expectedUri);
   }

File: src/test/java/org/robolectric/shadows/GradientDrawableTest.java
Patch:
@@ -1,14 +1,14 @@
 package org.robolectric.shadows;
 
-import android.graphics.drawable.GradientDrawable;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
+import android.graphics.drawable.GradientDrawable;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.WithDefaults.class)
 public class GradientDrawableTest {
   @Test
   public void testGetColor_returnsColor() throws Exception {

File: src/test/java/org/robolectric/shadows/ShadowDrawerLayoutTest.java
Patch:
@@ -5,14 +5,14 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Robolectric.shadowOf;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.WithDefaults.class)
 public class ShadowDrawerLayoutTest {
   @Test
   public void canGetAndSetDrawerListener() throws Exception {

File: src/test/java/org/robolectric/shadows/ShadowPopupMenuTest.java
Patch:
@@ -8,12 +8,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.WithDefaults.class)
 public class ShadowPopupMenuTest {
 
   private PopupMenu popupMenu;

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -28,6 +28,7 @@
 import org.robolectric.shadows.ShadowArrayAdapter;
 import org.robolectric.shadows.ShadowAssetManager;
 import org.robolectric.shadows.ShadowAsyncTask;
+import org.robolectric.shadows.ShadowAsyncTaskLoader;
 import org.robolectric.shadows.ShadowAudioManager;
 import org.robolectric.shadows.ShadowBaseAdapter;
 import org.robolectric.shadows.ShadowBinder;
@@ -250,6 +251,7 @@ public class RobolectricBase {
       ShadowArrayAdapter.class,
       ShadowAssetManager.class,
       ShadowAsyncTask.class,
+      ShadowAsyncTaskLoader.class,
       ShadowAudioManager.class,
       ShadowBaseAdapter.class,
       ShadowBinder.class,

File: src/main/java/org/robolectric/shadows/ShadowAsyncTaskLoader.java
Patch:
@@ -13,7 +13,7 @@
  * Shadow AsyncTaskLoader from the support library.
  */
 @Implements(AsyncTaskLoader.class)
-public class ShadowAsyncTaskLoader<D> extends ShadowLoader<D> {
+public class ShadowAsyncTaskLoader<D> {
   @RealObject private AsyncTaskLoader<D> realLoader;
   private SimpleFuture<D> future;
 
@@ -36,7 +36,7 @@ public void __constructor__(Context context) {
   }
 
   @Implementation
-  protected void onForceLoad() {
+  public void onForceLoad() {
     Robolectric.getBackgroundScheduler().post(new Runnable() {
       @Override public void run() {
         future.run();

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -35,6 +35,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/dimen", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
+        new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -35,6 +35,7 @@ private void loadEverything() throws Exception {
         new ValueResourceLoader(data, "/resources/dimen", "dimen", ResType.DIMEN),
         new ValueResourceLoader(data, "/resources/integer", "integer", ResType.INTEGER),
         new ValueResourceLoader(data, "/resources/integer-array", "array", ResType.INTEGER_ARRAY),
+        new ValueResourceLoader(data, "/resources/item", "layout", ResType.LAYOUT),
         new PluralResourceLoader(pluralsData),
         new ValueResourceLoader(data, "/resources/string", "string", ResType.CHAR_SEQUENCE),
         new ValueResourceLoader(data, "/resources/string-array", "array", ResType.CHAR_SEQUENCE_ARRAY),

File: src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -135,7 +135,6 @@ public void shouldThrowExceptionIfUnknownNameAndArch() throws Exception {
 
   private String loadLibrary(SQLiteLibraryLoader loader, String name, String arch) throws IOException {
     setNameAndArch(name, arch);
-    loader.doLoad();
     return loader.getLibClasspathResourceName();
   }
 

File: src/test/java/org/robolectric/util/SQLiteLibraryLoaderTest.java
Patch:
@@ -135,7 +135,6 @@ public void shouldThrowExceptionIfUnknownNameAndArch() throws Exception {
 
   private String loadLibrary(SQLiteLibraryLoader loader, String name, String arch) throws IOException {
     setNameAndArch(name, arch);
-    loader.doLoad();
     return loader.getLibClasspathResourceName();
   }
 

File: src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -273,6 +273,7 @@
 import org.robolectric.shadows.ShadowResourceCursorAdapter;
 import org.robolectric.shadows.ShadowResources;
 import org.robolectric.shadows.ShadowResultReceiver;
+import org.robolectric.shadows.ShadowSQLiteConnection;
 import org.robolectric.shadows.ShadowScaleGestureDetector;
 import org.robolectric.shadows.ShadowScanResult;
 import org.robolectric.shadows.ShadowScrollView;
@@ -1316,6 +1317,7 @@ public static void reset() {
     ShadowStatFs.reset();
     ShadowTypeface.reset();
     ShadowCursorWindow.reset();
+    //ShadowSQLiteConnection.reset();
   }
 
   public static <T extends Activity> ActivityController<T> buildActivity(Class<T> activityClass) {

File: src/main/java/org/robolectric/shadows/ShadowDateFormat.java
Patch:
@@ -12,12 +12,12 @@ public class ShadowDateFormat {
 
   @Implementation
   public static java.text.DateFormat getDateFormat(Context context) {
-    return new java.text.SimpleDateFormat("MMM-DD-yyyy", Locale.ROOT);
+    return new java.text.SimpleDateFormat("MMM-dd-yyyy", Locale.ROOT);
   }
 
   @Implementation
   public static java.text.DateFormat getLongDateFormat(Context context) {
-    return new java.text.SimpleDateFormat("MMMM DD, yyyy", Locale.ROOT);
+    return new java.text.SimpleDateFormat("MMMM dd, yyyy", Locale.ROOT);
   }
 
   @Implementation

File: src/main/java/org/robolectric/shadows/ShadowDateFormat.java
Patch:
@@ -12,12 +12,12 @@ public class ShadowDateFormat {
 
   @Implementation
   public static java.text.DateFormat getDateFormat(Context context) {
-    return new java.text.SimpleDateFormat("MMM-DD-yyyy", Locale.ROOT);
+    return new java.text.SimpleDateFormat("MMM-dd-yyyy", Locale.ROOT);
   }
 
   @Implementation
   public static java.text.DateFormat getLongDateFormat(Context context) {
-    return new java.text.SimpleDateFormat("MMMM DD, yyyy", Locale.ROOT);
+    return new java.text.SimpleDateFormat("MMMM dd, yyyy", Locale.ROOT);
   }
 
   @Implementation

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -358,7 +358,7 @@ private ResName tryResName(int id) {
   }
 
   private String getQualifiers() {
-    return shadowOf(realResources.getConfiguration()).getQualifiers();
+    return shadowOf(realResources.getAssets()).getQualifiers();
   }
 
   @Implementation
@@ -374,7 +374,7 @@ public String getQuantityString(int id, int quantity) throws Resources.NotFoundE
     String string = plural.getString();
     ShadowAssetManager shadowAssetManager = shadowOf(realResources.getAssets());
     TypedResource typedResource = shadowAssetManager.resolve(
-        new TypedResource(string, ResType.CHAR_SEQUENCE), getQualifiers(),
+        new TypedResource<String>(string, ResType.CHAR_SEQUENCE), getQualifiers(),
         new ResName(resName.packageName, "string", resName.name));
     return typedResource == null ? null : typedResource.asString();
   }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -120,10 +120,13 @@ public static final class string {
     public static final int interpolate = 0x1010f;
     public static final int app_name = 0x10110;
     public static final int activity_name = 0x10111;
+    public static final int minute_singular = 0x10112;
+    public static final int minute_plural = 0x10113;
   }
 
   public static final class plurals {
     public static final int beer = 0x10200;
+    public static final int minute = 0x10201;
   }
 
   public static final class array {

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -358,7 +358,7 @@ private ResName tryResName(int id) {
   }
 
   private String getQualifiers() {
-    return shadowOf(realResources.getConfiguration()).getQualifiers();
+    return shadowOf(realResources.getAssets()).getQualifiers();
   }
 
   @Implementation
@@ -374,7 +374,7 @@ public String getQuantityString(int id, int quantity) throws Resources.NotFoundE
     String string = plural.getString();
     ShadowAssetManager shadowAssetManager = shadowOf(realResources.getAssets());
     TypedResource typedResource = shadowAssetManager.resolve(
-        new TypedResource(string, ResType.CHAR_SEQUENCE), getQualifiers(),
+        new TypedResource<String>(string, ResType.CHAR_SEQUENCE), getQualifiers(),
         new ResName(resName.packageName, "string", resName.name));
     return typedResource == null ? null : typedResource.asString();
   }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -120,10 +120,13 @@ public static final class string {
     public static final int interpolate = 0x1010f;
     public static final int app_name = 0x10110;
     public static final int activity_name = 0x10111;
+    public static final int minute_singular = 0x10112;
+    public static final int minute_plural = 0x10113;
   }
 
   public static final class plurals {
     public static final int beer = 0x10200;
+    public static final int minute = 0x10201;
   }
 
   public static final class array {

File: src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -80,6 +80,9 @@ public ActivityController<T> attach() {
     Application application = this.application == null ? Robolectric.application : this.application;
     Context baseContext = this.baseContext == null ? application : this.baseContext;
     Intent intent = this.intent == null ? new Intent(application, activity.getClass()) : this.intent;
+    if (intent.getComponent() == null) {
+      intent.setClass(application, activity.getClass());
+    }
     ActivityInfo activityInfo = new ActivityInfo();
 
     ClassLoader cl = baseContext.getClassLoader();

File: src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -226,7 +226,7 @@ public Function<Object, Object> getInterceptionHandler(MethodSignature methodSig
         @Override
         public Object call(Class<?> theClass, Object value, Object[] params) {
           LinkedHashMap map = (LinkedHashMap) value;
-          return map.entrySet().iterator().next();
+          return map.isEmpty() ? null : map.entrySet().iterator().next();
         }
       };
     } else if (methodSignature.matches("com.android.internal.policy.PolicyManager", "makeNewWindow")) {

File: src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -226,7 +226,7 @@ public Function<Object, Object> getInterceptionHandler(MethodSignature methodSig
         @Override
         public Object call(Class<?> theClass, Object value, Object[] params) {
           LinkedHashMap map = (LinkedHashMap) value;
-          return map.entrySet().iterator().next();
+          return map.isEmpty() ? null : map.entrySet().iterator().next();
         }
       };
     } else if (methodSignature.matches("com.android.internal.policy.PolicyManager", "makeNewWindow")) {

File: src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -80,6 +80,9 @@ public ActivityController<T> attach() {
     Application application = this.application == null ? Robolectric.application : this.application;
     Context baseContext = this.baseContext == null ? application : this.baseContext;
     Intent intent = this.intent == null ? new Intent(application, activity.getClass()) : this.intent;
+    if (intent.getComponent() == null) {
+      intent.setClass(application, activity.getClass());
+    }
     ActivityInfo activityInfo = new ActivityInfo();
 
     ClassLoader cl = baseContext.getClassLoader();

File: src/main/java/org/robolectric/shadows/ShadowCookieManager.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Map;
 
 /**
- * Shadows the {@code android.telephony.TelephonyManager} class.
+ * Shadows the {@code android.webkit.CookieManager} class.
  */
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(CookieManager.class)

File: src/main/java/org/robolectric/shadows/ShadowCookieManager.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Map;
 
 /**
- * Shadows the {@code android.telephony.TelephonyManager} class.
+ * Shadows the {@code android.webkit.CookieManager} class.
  */
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(CookieManager.class)

File: src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -39,7 +39,7 @@ public static Bitmap decodeResourceStream(Resources res, TypedValue value,
         InputStream.class, Rect.class, BitmapFactory.Options.class)
         .invoke(res, value, is, pad, opts);
 
-    if (value.string != null && value.string.toString().contains(".9.")) {
+    if (value != null && value.string != null && value.string.toString().contains(".9.")) {
       // todo: better support for nine-patches
       method("setNinePatchChunk").withParameterTypes(byte[].class).in(bitmap).invoke(new byte[0]);
     }

File: src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -63,7 +63,7 @@ public static Drawable createFromResourceStream(Resources res, TypedValue value,
 
     Bitmap  bm = BitmapFactory.decodeResourceStream(res, value, is, pad, opts);
     if (bm != null) {
-      boolean isNinePatch = srcName.contains(".9.");
+      boolean isNinePatch = srcName != null && srcName.contains(".9.");
       if (isNinePatch) {
         method("setNinePatchChunk").withParameterTypes(byte[].class).in(bm).invoke(new byte[0]);
       }

File: src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java
Patch:
@@ -39,7 +39,7 @@ public static Bitmap decodeResourceStream(Resources res, TypedValue value,
         InputStream.class, Rect.class, BitmapFactory.Options.class)
         .invoke(res, value, is, pad, opts);
 
-    if (value.string != null && value.string.toString().contains(".9.")) {
+    if (value != null && value.string != null && value.string.toString().contains(".9.")) {
       // todo: better support for nine-patches
       method("setNinePatchChunk").withParameterTypes(byte[].class).in(bitmap).invoke(new byte[0]);
     }

File: src/main/java/org/robolectric/shadows/ShadowDrawable.java
Patch:
@@ -63,7 +63,7 @@ public static Drawable createFromResourceStream(Resources res, TypedValue value,
 
     Bitmap  bm = BitmapFactory.decodeResourceStream(res, value, is, pad, opts);
     if (bm != null) {
-      boolean isNinePatch = srcName.contains(".9.");
+      boolean isNinePatch = srcName != null && srcName.contains(".9.");
       if (isNinePatch) {
         method("setNinePatchChunk").withParameterTypes(byte[].class).in(bm).invoke(new byte[0]);
       }

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -175,7 +175,6 @@
 import org.robolectric.shadows.ShadowSQLiteClosable;
 import org.robolectric.shadows.ShadowSQLiteCursor;
 import org.robolectric.shadows.ShadowSQLiteDatabase;
-import org.robolectric.shadows.ShadowSQLiteOpenHelper;
 import org.robolectric.shadows.ShadowSQLiteProgram;
 import org.robolectric.shadows.ShadowSQLiteQueryBuilder;
 import org.robolectric.shadows.ShadowSQLiteStatement;
@@ -445,7 +444,6 @@ public class RobolectricBase {
       ShadowSQLiteClosable.class,
       ShadowSQLiteDatabase.class,
       ShadowSQLiteCursor.class,
-      ShadowSQLiteOpenHelper.class,
       ShadowSQLiteStatement.class,
       ShadowSQLiteQueryBuilder.class,
       ShadowSslErrorHandler.class,

File: src/main/java/org/robolectric/util/DatabaseConfig.java
Patch:
@@ -80,7 +80,7 @@ private static Connection getConnection(String connection) {
     try {
       return DriverManager.getConnection(connection);
     } catch (SQLException e) {
-      throw new CannotLoadDatabaseMapDriverException("Error in DatabaseConfig, could not retrieve connection to in memory database.", e);
+      throw new CannotLoadDatabaseMapDriverException("could not retrieve connection to database. (map="+dbMap+")", e);
     }
   }
 

File: src/test/java/org/robolectric/shadows/CursorAdapterTest.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() throws Exception {
     statement = connection.createStatement(DatabaseConfig.getResultSetType(), ResultSet.CONCUR_READ_ONLY);
     String sql = "SELECT * FROM table_name;";
     ResultSet resultSet = statement.executeQuery(sql);
-    curs = new SQLiteCursor(null, null, null, null);
+    curs = new SQLiteCursor(null, null, null);
     Robolectric.shadowOf((SQLiteCursor) curs).setResultSet(resultSet, sql);
 
     adapter = new TestAdapter(curs);

File: src/test/java/org/robolectric/shadows/MergeCursorTest.java
Patch:
@@ -58,7 +58,7 @@ private void setupTable1() throws Exception {
     statement = connection.createStatement(DatabaseConfig.getResultSetType(), ResultSet.CONCUR_READ_ONLY);
     String sql ="SELECT * FROM table_1;";
     ResultSet rs = statement.executeQuery(sql);
-    dbCursor1 = new SQLiteCursor(null, null, null, null);
+    dbCursor1 = new SQLiteCursor(null, null, null);
     Robolectric.shadowOf(dbCursor1).setResultSet(rs, sql);
   }
 
@@ -75,7 +75,7 @@ private void setupTable2() throws Exception {
     statement = connection.createStatement(DatabaseConfig.getResultSetType(), ResultSet.CONCUR_READ_ONLY);
     String sql ="SELECT * FROM table_2;";
     ResultSet rs = statement.executeQuery(sql);
-    dbCursor2 = new SQLiteCursor(null, null, null, null);
+    dbCursor2 = new SQLiteCursor(null, null, null);
     Robolectric.shadowOf(dbCursor2).setResultSet(rs, sql);
   }
 

File: src/test/java/org/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -447,7 +447,7 @@ private void setupCursor() throws Exception {
     Statement statement = connection.createStatement(DatabaseConfig.getResultSetType(), ResultSet.CONCUR_READ_ONLY);
     String sql ="SELECT * FROM table_name;";
     resultSet = statement.executeQuery("SELECT * FROM table_name;");
-    cursor = new SQLiteCursor(null, null, null, null);
+    cursor = new SQLiteCursor(null, null, null);
     Robolectric.shadowOf(cursor).setResultSet(resultSet, sql);
   }
 

File: src/test/java/org/robolectric/shadows/SQLiteStatementTest.java
Patch:
@@ -24,7 +24,7 @@ public class SQLiteStatementTest {
 
   @Before
   public void setUp() throws Exception {
-    database = SQLiteDatabase.openDatabase(Robolectric.application.getDatabasePath("path").getPath(), null, 0);
+    database = SQLiteDatabase.openOrCreateDatabase(Robolectric.application.getDatabasePath("path").getPath(), null);
     SQLiteStatement createStatement = database.compileStatement("CREATE TABLE `routine` (`id` INTEGER PRIMARY KEY AUTOINCREMENT , `name` VARCHAR , `lastUsed` INTEGER DEFAULT 0 ,  UNIQUE (`name`)) ;");
     createStatement.execute();
 

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -284,7 +284,7 @@ private SdkEnvironment getEnvironment(final AndroidManifest appManifest, final C
   }
 
   protected SdkConfig pickSdkVersion(AndroidManifest appManifest, Config config) {
-    if (config != null) {
+    if (config != null && config.emulateSdk() > 0) {
       return new SdkConfig(config.emulateSdk());
     } else {
       if (appManifest != null) {

File: src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -23,12 +23,11 @@
   @SuppressWarnings("UnusedDeclaration")
   public static final String NONE = "--none";
   public static final String DEFAULT = "--default";
-  public static final int DEFAULT_SDK_LEVEL = Build.VERSION_CODES.JELLY_BEAN;
 
   /**
    * The Android SDK level to emulate. If not specified, Robolectric defaults to API 16.
    */
-  int emulateSdk() default DEFAULT_SDK_LEVEL;
+  int emulateSdk() default -1;
 
   /**
    * The Android manifest file to load; Robolectric will look relative to the current directory.
@@ -100,7 +99,7 @@ public Implementation(int emulateSdk, String manifest, String qualifiers, int re
     }
 
     public Implementation(Config baseConfig, Config overlayConfig) {
-      this.emulateSdk = pick(baseConfig.emulateSdk(), overlayConfig.emulateSdk(), DEFAULT_SDK_LEVEL);
+      this.emulateSdk = pick(baseConfig.emulateSdk(), overlayConfig.emulateSdk(), -1);
       this.manifest = pick(baseConfig.manifest(), overlayConfig.manifest(), DEFAULT);
       this.qualifiers = pick(baseConfig.qualifiers(), overlayConfig.qualifiers(), "");
       this.reportSdk = pick(baseConfig.reportSdk(), overlayConfig.reportSdk(), -1);

File: src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -32,10 +32,10 @@ public class RobolectricTestRunnerTest {
 
   @Test public void whenClassDoesntHaveConfigAnnotation_getConfig_shouldUseMethodConfig() throws Exception {
     assertConfig(configFor(Test2.class, "withoutAnnotation"),
-        Config.DEFAULT_SDK_LEVEL, "--default", "", -1, new Class[]{});
+        -1, "--default", "", -1, new Class[]{});
 
     assertConfig(configFor(Test2.class, "withDefaultsAnnotation"),
-        Config.DEFAULT_SDK_LEVEL, "--default", "", -1, new Class[]{});
+        -1, "--default", "", -1, new Class[]{});
 
     assertConfig(configFor(Test2.class, "withOverrideAnnotation"),
         9, "furf", "from-method", 8, new Class[]{Test1.class});

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -284,7 +284,7 @@ private SdkEnvironment getEnvironment(final AndroidManifest appManifest, final C
   }
 
   protected SdkConfig pickSdkVersion(AndroidManifest appManifest, Config config) {
-    if (config != null) {
+    if (config != null && config.emulateSdk() > 0) {
       return new SdkConfig(config.emulateSdk());
     } else {
       if (appManifest != null) {

File: src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -23,12 +23,11 @@
   @SuppressWarnings("UnusedDeclaration")
   public static final String NONE = "--none";
   public static final String DEFAULT = "--default";
-  public static final int DEFAULT_SDK_LEVEL = Build.VERSION_CODES.JELLY_BEAN;
 
   /**
    * The Android SDK level to emulate. If not specified, Robolectric defaults to API 16.
    */
-  int emulateSdk() default DEFAULT_SDK_LEVEL;
+  int emulateSdk() default -1;
 
   /**
    * The Android manifest file to load; Robolectric will look relative to the current directory.
@@ -100,7 +99,7 @@ public Implementation(int emulateSdk, String manifest, String qualifiers, int re
     }
 
     public Implementation(Config baseConfig, Config overlayConfig) {
-      this.emulateSdk = pick(baseConfig.emulateSdk(), overlayConfig.emulateSdk(), DEFAULT_SDK_LEVEL);
+      this.emulateSdk = pick(baseConfig.emulateSdk(), overlayConfig.emulateSdk(), -1);
       this.manifest = pick(baseConfig.manifest(), overlayConfig.manifest(), DEFAULT);
       this.qualifiers = pick(baseConfig.qualifiers(), overlayConfig.qualifiers(), "");
       this.reportSdk = pick(baseConfig.reportSdk(), overlayConfig.reportSdk(), -1);

File: src/test/java/org/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -32,10 +32,10 @@ public class RobolectricTestRunnerTest {
 
   @Test public void whenClassDoesntHaveConfigAnnotation_getConfig_shouldUseMethodConfig() throws Exception {
     assertConfig(configFor(Test2.class, "withoutAnnotation"),
-        Config.DEFAULT_SDK_LEVEL, "--default", "", -1, new Class[]{});
+        -1, "--default", "", -1, new Class[]{});
 
     assertConfig(configFor(Test2.class, "withDefaultsAnnotation"),
-        Config.DEFAULT_SDK_LEVEL, "--default", "", -1, new Class[]{});
+        -1, "--default", "", -1, new Class[]{});
 
     assertConfig(configFor(Test2.class, "withOverrideAnnotation"),
         9, "furf", "from-method", 8, new Class[]{Test1.class});

File: src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -197,6 +197,9 @@ public void clear() {
      */
     public byte[] readByteArray() {
       int length = readInt();
+      if (length == -1) {
+        return null;
+      }
       byte[] array = new byte[length];
       for (int i = 0; i < length; i++) {
         array[i] = readByte();

File: src/main/java/org/robolectric/shadows/ShadowParcel.java
Patch:
@@ -197,6 +197,9 @@ public void clear() {
      */
     public byte[] readByteArray() {
       int length = readInt();
+      if (length == -1) {
+        return null;
+      }
       byte[] array = new byte[length];
       for (int i = 0; i < length; i++) {
         array[i] = readByte();

File: src/test/java/org/robolectric/util/UtilTest.java
Patch:
@@ -13,6 +13,8 @@
 public class UtilTest {
   @Test
   public void urlShouldReturnCorrectURL() throws Exception {
+    final String uncPath = "\\\\hostname\\path\\to\\file.jar";
+    assertThat(Util.url(uncPath)).isEqualTo(new URL("file:////hostname/path/to/file.jar"));
 
     final String windowsPath = "E:\\Test\\Path With Spaces\\MyFile.jar";
     assertThat(Util.url(windowsPath)).isEqualTo(new URL("file:/" + windowsPath));

File: src/main/java/org/robolectric/util/Util.java
Patch:
@@ -52,9 +52,8 @@ public static File file(File f, String... pathParts) {
 
   public static URL url(String path) throws MalformedURLException {
     //Starts with double backslash, is likely a UNC path
-    if(path.startsWith("\\\\"))
-    {
-        path = path.replace("\\", "/");
+    if(path.startsWith("\\\\")) {
+      path = path.replace("\\", "/");
     }
     return new URL("file:/" + (path.startsWith("/") ? "/" + path : path));
   }

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -55,6 +55,7 @@ private void loadEverything() throws Exception {
     documentLoader.load("res" + separator + "menu", new MenuLoader(menuData), new XmlFileLoader(xmlDocuments, "menu"));
     documentLoader.load("res" + separator + "drawable", new OpaqueFileLoader(data, "drawable"), new XmlFileLoader(xmlDocuments, "drawable"));
     documentLoader.load("res" + separator + "anim", new OpaqueFileLoader(data, "anim"), new XmlFileLoader(xmlDocuments, "anim"));
+    documentLoader.load("res" + separator + "animator", new OpaqueFileLoader(data, "animator"), new XmlFileLoader(xmlDocuments, "animator"));
     documentLoader.load("res" + separator + "color", new ColorResourceLoader(data), new XmlFileLoader(xmlDocuments, "color"));
     documentLoader.load("res" + separator + "xml", new PreferenceLoader(preferenceData), new XmlFileLoader(xmlDocuments, "xml"));
     new DrawableResourceLoader(drawableData).findDrawableResources(resourcePath);

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -55,6 +55,7 @@ private void loadEverything() throws Exception {
     documentLoader.load("res" + separator + "menu", new MenuLoader(menuData), new XmlFileLoader(xmlDocuments, "menu"));
     documentLoader.load("res" + separator + "drawable", new OpaqueFileLoader(data, "drawable"), new XmlFileLoader(xmlDocuments, "drawable"));
     documentLoader.load("res" + separator + "anim", new OpaqueFileLoader(data, "anim"), new XmlFileLoader(xmlDocuments, "anim"));
+    documentLoader.load("res" + separator + "animator", new OpaqueFileLoader(data, "animator"), new XmlFileLoader(xmlDocuments, "animator"));
     documentLoader.load("res" + separator + "color", new ColorResourceLoader(data), new XmlFileLoader(xmlDocuments, "color"));
     documentLoader.load("res" + separator + "xml", new PreferenceLoader(preferenceData), new XmlFileLoader(xmlDocuments, "xml"));
     new DrawableResourceLoader(drawableData).findDrawableResources(resourcePath);

File: src/main/java/org/robolectric/shadows/ShadowIntentFilter.java
Patch:
@@ -91,7 +91,7 @@ public String getDataScheme(int index) {
 
   @Implementation
   public boolean hasDataScheme(String scheme) {
-	return schemes.contains(scheme);
+    return schemes.contains(scheme);
   }
   
   @Implementation

File: src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -191,7 +191,7 @@ public static Bitmap createBitmap(Bitmap src, int x, int y, int width, int heigh
 
   @Implementation
   public static Bitmap createBitmap(Bitmap src, int x, int y, int width, int height, Matrix matrix, boolean filter) {
-    if (x == 0 && y == 0 && width == src.getWidth() && height == src.getHeight() && (matrix == null || matrix.isIdentity()) && !filter) {
+    if (x == 0 && y == 0 && width == src.getWidth() && height == src.getHeight() && (matrix == null || matrix.isIdentity())) {
       return src; // Return the original.
     }
 
@@ -205,7 +205,7 @@ public static Bitmap createBitmap(Bitmap src, int x, int y, int width, int heigh
       shadowBitmap.appendDescription(" using matrix " + matrix);
     }
     if (filter) {
-      shadowBitmap.appendDescription(" with filter " + filter);
+      shadowBitmap.appendDescription(" with filter");
     }
 
     shadowBitmap.createdFromBitmap = src;

File: src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -693,7 +693,7 @@ public void shouldCreateDefaultCursorFactoryWhenNullFactoryPassed() throws Excep
 
   @Test
   public void shouldOpenExistingDatabaseFromFileSystemIfFileExists() throws Exception {
-      File testDb = new File(getClass().getResource("/test.sql").getFile());
+      File testDb = new File(getClass().getResource("/test with spaces.sql").toURI().getPath());
       assertThat(testDb.exists()).isTrue();
       SQLiteDatabase db = SQLiteDatabase.openDatabase(testDb.getAbsolutePath(), null, 0);
 

File: src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -693,7 +693,7 @@ public void shouldCreateDefaultCursorFactoryWhenNullFactoryPassed() throws Excep
 
   @Test
   public void shouldOpenExistingDatabaseFromFileSystemIfFileExists() throws Exception {
-      File testDb = new File(getClass().getResource("/test.sql").getFile());
+      File testDb = new File(getClass().getResource("/test with spaces.sql").toURI().getPath());
       assertThat(testDb.exists()).isTrue();
       SQLiteDatabase db = SQLiteDatabase.openDatabase(testDb.getAbsolutePath(), null, 0);
 

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.robolectric.util.TestUtil;
 import org.xmlpull.v1.XmlPullParser;
 
+import java.io.File;
 import java.io.InputStream;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -64,7 +65,7 @@ public void getText_withHtml() throws Exception {
   @Test
   public void getText_withLayoutId() throws Exception {
     // todo: this needs to change...
-    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("./src/test/resources/res/layout/different_screen_sizes.xml");
+    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("." + File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
   }
 
   @Test

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.robolectric.util.TestUtil;
 import org.xmlpull.v1.XmlPullParser;
 
+import java.io.File;
 import java.io.InputStream;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -64,7 +65,7 @@ public void getText_withHtml() throws Exception {
   @Test
   public void getText_withLayoutId() throws Exception {
     // todo: this needs to change...
-    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("./src/test/resources/res/layout/different_screen_sizes.xml");
+    assertThat(resources.getText(R.layout.different_screen_sizes, "value")).isEqualTo("." + File.separator + "src" + File.separator + "test" + File.separator + "resources" + File.separator + "res" + File.separator + "layout" + File.separator + "different_screen_sizes.xml");
   }
 
   @Test

File: src/main/java/org/robolectric/res/builder/RobolectricPackageManager.java
Patch:
@@ -72,8 +72,7 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags) throws
       // Based on ShadowActivity
       if (activityData.getThemeRef() != null) {
         themeRef = activityData.getThemeRef();
-      }
-      else {
+      } else {
         themeRef = androidManifest.getThemeRef();
       }
       if (themeRef != null) {

File: src/main/java/org/robolectric/shadows/ShadowAsyncTask.java
Patch:
@@ -6,12 +6,12 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.RealObject;
+import org.robolectric.util.SimpleFuture;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
-import java.util.concurrent.FutureTask;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
@@ -20,13 +20,13 @@ public class ShadowAsyncTask<Params, Progress, Result> {
 
   @RealObject private AsyncTask<Params, Progress, Result> realAsyncTask;
 
-  private final FutureTask<Result> future;
+  private final SimpleFuture<Result> future;
   private final BackgroundWorker worker;
   private AsyncTask.Status status = AsyncTask.Status.PENDING;
 
   public ShadowAsyncTask() {
     worker = new BackgroundWorker();
-    future = new FutureTask<Result>(worker) {
+    future = new SimpleFuture<Result>(worker) {
       @Override
       protected void done() {
         status = AsyncTask.Status.FINISHED;

File: src/main/java/org/robolectric/util/ActivityController.java
Patch:
@@ -113,7 +113,6 @@ public ActivityController<T> create(final Bundle bundle) {
       public void run() {
         if (!attached) attach();
 
-        activity.getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
         method("performCreate").withParameterTypes(Bundle.class).in(activity).invoke(bundle);
       }
     });

File: src/test/java/org/robolectric/R.java
Patch:
@@ -97,6 +97,8 @@ public static final class id {
     public static final int ungulate = 0x10032;
 
     public static final int custom_view = 0x10033;
+
+    public static final int custom_title_text = 0x10034;
   }
 
   public static final class string {
@@ -202,6 +204,7 @@ public static final class layout {
     public static final int with_invalid_onclick = 0x1061e;
     public static final int styles_button_with_style_layout = 0x1061f;
     public static final int activity_fragment = 0x10620;
+    public static final int custom_title = 0x10621;
   }
 
   public static final class anim {

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -35,7 +35,7 @@ public void setImageDrawable(Drawable drawable) {
 
   @Implementation
   public void setImageResource(int resId) {
-    setImageDrawable(buildDrawable(resId));
+    setImageDrawable(resId != 0 ? buildDrawable(resId) : null);
   }
 
   @Implementation

File: src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -36,7 +36,8 @@ public String getAssetPath() {
   }
 
   synchronized public static void reset() {
-    fonts.clear();
+    // Don't need to reset cache, because native Typeface itself has a cache of font instance,
+    // so this class should be consistent with it. 
   }
 
   @HiddenApi @Implementation

File: src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -36,7 +36,8 @@ public String getAssetPath() {
   }
 
   synchronized public static void reset() {
-    fonts.clear();
+    // Don't need to reset cache, because native Typeface itself has a cache of font instance,
+    // so this class should be consistent with it. 
   }
 
   @HiddenApi @Implementation

File: src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -33,7 +33,7 @@ public void add(ResName attrName, Attribute attribute) {
     Attribute attribute = items.get(resName);
 
     // yuck. hack to work around library package remapping
-    if (attribute == null) {
+    if (attribute == null && !"android".equals(resName.packageName)) {
       attribute = items.get(resName.withPackageName(packageName));
       if (attribute != null && (!"android".equals(attribute.contextPackageName))) {
         attribute = new Attribute(resName, attribute.value, resName.packageName);

File: src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -33,7 +33,7 @@ public void add(ResName attrName, Attribute attribute) {
     Attribute attribute = items.get(resName);
 
     // yuck. hack to work around library package remapping
-    if (attribute == null) {
+    if (attribute == null && !"android".equals(resName.packageName)) {
       attribute = items.get(resName.withPackageName(packageName));
       if (attribute != null && (!"android".equals(attribute.contextPackageName))) {
         attribute = new Attribute(resName, attribute.value, resName.packageName);

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -35,7 +35,9 @@ public void setImageDrawable(Drawable drawable) {
 
   @Implementation
   public void setImageResource(int resId) {
-    setImageDrawable(buildDrawable(resId));
+    if (resId != 0) {
+      setImageDrawable(buildDrawable(resId));
+    }
   }
 
   @Implementation

File: src/test/java/org/robolectric/util/ActivityControllerTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.ComponentName;
 import android.os.Bundle;
 import android.os.Looper;
-import android.view.Window;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -41,7 +40,6 @@ public void setUp() throws Exception {
 
   @Test public void createsAnActivityThatHasAnActionBar() throws Exception {
     MyActivity myActivity = Robolectric.buildActivity(MyActivity.class).create().get();
-    myActivity.getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
     ActionBar actionBar = myActivity.getActionBar();
     assertThat(actionBar).isNotNull();
   }

File: src/main/java/org/robolectric/tester/android/view/RoboWindow.java
Patch:
@@ -1,7 +1,6 @@
 package org.robolectric.tester.android.view;
 
 import android.R;
-import android.app.ActionBar;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.drawable.Drawable;
@@ -240,8 +239,8 @@ private void createDecorView() {
 
     viewRootImpl = createViewRootImpl(context);
     WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
-    layoutParams.width = ActionBar.LayoutParams.MATCH_PARENT;
-    layoutParams.height = ActionBar.LayoutParams.WRAP_CONTENT;
+    layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
+    layoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
 
     final int INPUT_FEATURE_NO_INPUT_CHANNEL =
         field("INPUT_FEATURE_NO_INPUT_CHANNEL").ofType(int.class)

File: src/main/java/org/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -147,7 +147,7 @@ public static void reset() {
   public Connection getConnection() {
     synchronized (connectionLock) {
       if (connection == null) {
-        if (path != null && new File(path).isFile()) {
+        if (path != null) {
           connection = DatabaseConfig.getFileConnection(new File(path));
           isFileConnection = true;
         } else {

File: src/main/java/org/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -147,7 +147,7 @@ public static void reset() {
   public Connection getConnection() {
     synchronized (connectionLock) {
       if (connection == null) {
-        if (path != null && new File(path).isFile()) {
+        if (path != null) {
           connection = DatabaseConfig.getFileConnection(new File(path));
           isFileConnection = true;
         } else {

File: src/main/java/org/robolectric/shadows/ShadowProgressDialog.java
Patch:
@@ -6,4 +6,5 @@
 
 @Implements(ProgressDialog.class)
 public class ShadowProgressDialog extends ShadowAlertDialog {
+
 }

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -53,7 +53,7 @@ public static boolean isAndroidSupportedFeature(String name) {
 
   public static XmlResourceParser getXmlResourceParser(String file, String packageName, ResourceIndex resourceIndex) {
    FsFile fsFile = Fs.fileFromPath(file);
-   Document document = new XmlFileLoader(null).parse(fsFile);
+   Document document = new XmlFileLoader(null, "xml").parse(fsFile);
    if (document == null) {
      throw new Resources.NotFoundException("couldn't find resource " + fsFile.getPath());
    }

File: src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -56,7 +56,7 @@ public class XmlFileLoaderTest {
   @Before
   public void setUp() throws Exception {
     resBundle = new ResBundle<Document>();
-    xmlFileLoader = new XmlFileLoader(resBundle);
+    xmlFileLoader = new XmlFileLoader(resBundle, "xml");
     new DocumentLoader(testResources()).load("xml", xmlFileLoader);
     xmlFileBuilder = new XmlFileBuilder();
 

File: src/main/java/org/robolectric/res/builder/XmlFileBuilder.java
Patch:
@@ -53,7 +53,7 @@ public static boolean isAndroidSupportedFeature(String name) {
 
   public static XmlResourceParser getXmlResourceParser(String file, String packageName, ResourceIndex resourceIndex) {
    FsFile fsFile = Fs.fileFromPath(file);
-   Document document = new XmlFileLoader(null).parse(fsFile);
+   Document document = new XmlFileLoader(null, "xml").parse(fsFile);
    if (document == null) {
      throw new Resources.NotFoundException("couldn't find resource " + fsFile.getPath());
    }

File: src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -56,7 +56,7 @@ public class XmlFileLoaderTest {
   @Before
   public void setUp() throws Exception {
     resBundle = new ResBundle<Document>();
-    xmlFileLoader = new XmlFileLoader(resBundle);
+    xmlFileLoader = new XmlFileLoader(resBundle, "xml");
     new DocumentLoader(testResources()).load("xml", xmlFileLoader);
     xmlFileBuilder = new XmlFileBuilder();
 

File: src/main/java/org/robolectric/shadows/ShadowMatrixCursor.java
Patch:
@@ -32,7 +32,7 @@ public void addRow(Iterable<?> columnValues) {
 
     List<Object> data = new ArrayList<Object>();
     for (Object columnValue : columnValues) {
-        data.add(columnValue);
+      data.add(columnValue);
     }
 
     this.data.add(data.toArray());

File: src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -33,9 +33,9 @@ public void add(ResName attrName, Attribute attribute) {
     Attribute attribute = items.get(resName);
 
     // yuck. hack to work around library package remapping
-    if (attribute == null && !"android".equals(resName.packageName)) {
+    if (attribute == null) {
       attribute = items.get(resName.withPackageName(packageName));
-      if (attribute != null) {
+      if (attribute != null && (!"android".equals(attribute.contextPackageName))) {
         attribute = new Attribute(resName, attribute.value, resName.packageName);
       }
     }

File: src/main/java/org/robolectric/res/StyleData.java
Patch:
@@ -33,9 +33,9 @@ public void add(ResName attrName, Attribute attribute) {
     Attribute attribute = items.get(resName);
 
     // yuck. hack to work around library package remapping
-    if (attribute == null && !"android".equals(resName.packageName)) {
+    if (attribute == null) {
       attribute = items.get(resName.withPackageName(packageName));
-      if (attribute != null) {
+      if (attribute != null && (!"android".equals(attribute.contextPackageName))) {
         attribute = new Attribute(resName, attribute.value, resName.packageName);
       }
     }

File: src/main/java/org/robolectric/shadows/ShadowCursorWrapper.java
Patch:
@@ -211,7 +211,7 @@ public Bundle respond(Bundle bundle) {
 
   @Implementation
   public int getType(int columnIndex) {
-    return 0;
+    return wrappedCursor.getType(columnIndex);
   }
 
   @Implementation

File: src/test/java/org/robolectric/shadows/CursorWrapperTest.java
Patch:
@@ -74,6 +74,7 @@ public void testCursorMethodsAreForwarded() throws Exception {
     v.verifyForward("getPosition");
     v.verifyForward("getShort", 7);
     v.verifyForward("getString", 8);
+    v.verifyForward("getType", 9);
     v.verifyForward("getWantsAllOnMoveCalls");
     v.verifyForward("isAfterLast");
     v.verifyForward("isBeforeFirst");

File: src/main/java/org/robolectric/res/OverlayResourceLoader.java
Patch:
@@ -7,8 +7,6 @@
 import java.util.List;
 
 public class OverlayResourceLoader extends XResourceLoader {
-  public static final boolean DEBUG = true;
-
   private final String packageName;
   private final List<PackageResourceLoader> subResourceLoaders;
 

File: src/main/java/org/robolectric/shadows/ShadowCursorWrapper.java
Patch:
@@ -211,7 +211,7 @@ public Bundle respond(Bundle bundle) {
 
   @Implementation
   public int getType(int columnIndex) {
-    return 0;
+    return wrappedCursor.getType(columnIndex);
   }
 
   @Implementation

File: src/test/java/org/robolectric/shadows/CursorWrapperTest.java
Patch:
@@ -74,6 +74,7 @@ public void testCursorMethodsAreForwarded() throws Exception {
     v.verifyForward("getPosition");
     v.verifyForward("getShort", 7);
     v.verifyForward("getString", 8);
+    v.verifyForward("getType", 9);
     v.verifyForward("getWantsAllOnMoveCalls");
     v.verifyForward("isAfterLast");
     v.verifyForward("isBeforeFirst");

File: src/main/java/org/robolectric/shadows/ShadowSQLiteProgram.java
Patch:
@@ -41,7 +41,6 @@ public void bindNull(int index) {
     checkDatabaseIsOpen();
     try {
       // SQLite ignores typecode
-      // typecode is also ignored in H2 when using the two parameter setNUll()
       actualDBstatement.setNull(index,java.sql.Types.NULL);
     } catch (SQLException e) {
       throw new RuntimeException(e);

File: src/test/java/org/robolectric/R.java
Patch:
@@ -201,6 +201,7 @@ public static final class layout {
     public static final int webview_holder = 0x1061d;
     public static final int with_invalid_onclick = 0x1061e;
     public static final int styles_button_with_style_layout = 0x1061f;
+    public static final int activity_fragment = 0x10620;
   }
 
   public static final class anim {

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -148,7 +148,6 @@
 import org.robolectric.shadows.ShadowMediaStore;
 import org.robolectric.shadows.ShadowMenuInflater;
 import org.robolectric.shadows.ShadowMergeCursor;
-import org.robolectric.shadows.ShadowMessage;
 import org.robolectric.shadows.ShadowMessenger;
 import org.robolectric.shadows.ShadowMimeTypeMap;
 import org.robolectric.shadows.ShadowMockPackageManager;
@@ -414,7 +413,6 @@ public class RobolectricBase {
       ShadowMediaStore.ShadowImages.ShadowMedia.class,
       ShadowMenuInflater.class,
       ShadowMergeCursor.class,
-      ShadowMessage.class,
       ShadowMessenger.class,
       ShadowMimeTypeMap.class,
       ShadowMockPackageManager.class,

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -42,7 +42,7 @@ public static <T> T newInstance(Class<T> clazz, Class[] parameterTypes, Object[]
       declaredConstructor.setAccessible(true);
       return declaredConstructor.newInstance(params);
     } catch (InstantiationException e) {
-      throw new RuntimeException(e);
+      throw new RuntimeException("error instantiating " + clazz.getName(), e);
     } catch (IllegalAccessException e) {
       throw new RuntimeException(e);
     } catch (NoSuchMethodException e) {

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -144,10 +144,9 @@ public Set<MethodRef> methodsToIntercept() {
         new MethodRef("java.lang.AutoCloseable", "*"),
         new MethodRef("android.util.LocaleUtil", "getLayoutDirectionFromLocale"),
         new MethodRef("com.android.internal.policy.PolicyManager", "*"),
-        new MethodRef("android.view.CompatibilityInfoHolder", "*"),
-        new MethodRef("android.content.res.CompatibilityInfo", "*"),
         new MethodRef("android.view.FallbackEventHandler", "*"),
-        new MethodRef("android.view.IWindowSession", "*")
+        new MethodRef("android.view.IWindowSession", "*"),
+        new MethodRef("java.lang.System", "nanoTime")
     )));
   }
 

File: src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -83,6 +83,7 @@ public synchronized boolean advanceBy(long intervalMs) {
 
   public synchronized boolean advanceTo(long endingTime) {
     if (endingTime - currentTime < 0 || enqueuedTaskCount() < 1) {
+      currentTime = endingTime;
       return false;
     }
 

File: src/test/java/org/robolectric/shadows/ViewTest.java
Patch:
@@ -698,8 +698,10 @@ public void onLayout(boolean changed, int l, int t, int r, int b) {
 
     parent.addView(new MyView("child", transcript));
     parent.addView(new MyView("another child", transcript));
+    Robolectric.runUiThreadTasks();
     transcript.clear();
     parent.removeAllViews();
+    Robolectric.runUiThreadTasks();
     transcript.assertEventsSoFar("another child detached", "child detached");
   }
 

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -148,7 +148,6 @@
 import org.robolectric.shadows.ShadowMediaStore;
 import org.robolectric.shadows.ShadowMenuInflater;
 import org.robolectric.shadows.ShadowMergeCursor;
-import org.robolectric.shadows.ShadowMessage;
 import org.robolectric.shadows.ShadowMessenger;
 import org.robolectric.shadows.ShadowMimeTypeMap;
 import org.robolectric.shadows.ShadowMockPackageManager;
@@ -414,7 +413,6 @@ public class RobolectricBase {
       ShadowMediaStore.ShadowImages.ShadowMedia.class,
       ShadowMenuInflater.class,
       ShadowMergeCursor.class,
-      ShadowMessage.class,
       ShadowMessenger.class,
       ShadowMimeTypeMap.class,
       ShadowMockPackageManager.class,

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -42,7 +42,7 @@ public static <T> T newInstance(Class<T> clazz, Class[] parameterTypes, Object[]
       declaredConstructor.setAccessible(true);
       return declaredConstructor.newInstance(params);
     } catch (InstantiationException e) {
-      throw new RuntimeException(e);
+      throw new RuntimeException("error instantiating " + clazz.getName(), e);
     } catch (IllegalAccessException e) {
       throw new RuntimeException(e);
     } catch (NoSuchMethodException e) {

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -145,7 +145,8 @@ public Set<MethodRef> methodsToIntercept() {
         new MethodRef("android.util.LocaleUtil", "getLayoutDirectionFromLocale"),
         new MethodRef("com.android.internal.policy.PolicyManager", "*"),
         new MethodRef("android.view.FallbackEventHandler", "*"),
-        new MethodRef("android.view.IWindowSession", "*")
+        new MethodRef("android.view.IWindowSession", "*"),
+        new MethodRef("java.lang.System", "nanoTime")
     )));
   }
 

File: src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -14,7 +14,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewParent;
-import android.view.animation.Animation;
 import java.io.PrintStream;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;

File: src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -83,6 +83,7 @@ public synchronized boolean advanceBy(long intervalMs) {
 
   public synchronized boolean advanceTo(long endingTime) {
     if (endingTime - currentTime < 0 || enqueuedTaskCount() < 1) {
+      currentTime = endingTime;
       return false;
     }
 

File: src/test/java/org/robolectric/shadows/ViewTest.java
Patch:
@@ -698,8 +698,10 @@ public void onLayout(boolean changed, int l, int t, int r, int b) {
 
     parent.addView(new MyView("child", transcript));
     parent.addView(new MyView("another child", transcript));
+    Robolectric.runUiThreadTasks();
     transcript.clear();
     parent.removeAllViews();
+    Robolectric.runUiThreadTasks();
     transcript.assertEventsSoFar("another child detached", "child detached");
   }
 

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -144,8 +144,6 @@ public Set<MethodRef> methodsToIntercept() {
         new MethodRef("java.lang.AutoCloseable", "*"),
         new MethodRef("android.util.LocaleUtil", "getLayoutDirectionFromLocale"),
         new MethodRef("com.android.internal.policy.PolicyManager", "*"),
-        new MethodRef("android.view.CompatibilityInfoHolder", "*"),
-        new MethodRef("android.content.res.CompatibilityInfo", "*"),
         new MethodRef("android.view.FallbackEventHandler", "*"),
         new MethodRef("android.view.IWindowSession", "*")
     )));

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -136,9 +136,11 @@ public Set<MethodRef> methodsToIntercept() {
         new MethodRef(LinkedHashMap.class, "eldest"),
         new MethodRef(System.class, "loadLibrary"),
         new MethodRef("android.os.StrictMode", "trackActivity"),
+        new MethodRef("android.os.StrictMode", "incrementExpectedActivityCount"),
         new MethodRef("com.android.i18n.phonenumbers.Phonenumber$PhoneNumber", "*"),
         new MethodRef("com.android.i18n.phonenumbers.PhoneNumberUtil", "*"),
         new MethodRef("dalvik.system.CloseGuard", "get"),
+        new MethodRef("dalvik.system.BlockGuard", "*"),
         new MethodRef("java.lang.AutoCloseable", "*"),
         new MethodRef("android.util.LocaleUtil", "getLayoutDirectionFromLocale"),
         new MethodRef("com.android.internal.policy.PolicyManager", "*"),

File: src/main/java/org/robolectric/res/Attribute.java
Patch:
@@ -133,7 +133,7 @@ public boolean isResourceReference() {
     return value.startsWith("@") && !isNull();
   }
 
-  public ResName getResourceReference() {
+  public @NotNull ResName getResourceReference() {
     if (!isResourceReference()) throw new RuntimeException("not a resource reference: " + this);
     return ResName.qualifyResName(value.substring(1).replace("+", ""), contextPackageName, "attr");
   }

File: src/main/java/org/robolectric/res/ResType.java
Patch:
@@ -13,6 +13,7 @@ public enum ResType {
   FILE,
   FLOAT,
   INTEGER,
+  LAYOUT,
   STYLE {
     @Override public TypedResource getValueWithType(XpathResourceXmlLoader.XmlNode xmlNode) {
       throw new UnsupportedOperationException();

File: src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -24,8 +24,6 @@ public interface ResourceLoader {
 
   ResourceIndex getResourceIndex();
 
-  ViewNode getLayoutViewNode(ResName resName, String qualifiers);
-
   MenuNode getMenuNode(ResName resName, String qualifiers);
 
   boolean providesFor(String namespace);

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -117,7 +117,7 @@ public String getAttributeValue(int index) {
 
   @Override
   public String getPositionDescription() {
-    throw new UnsupportedOperationException();
+    return "position description from RoboAttributeSet -- implement me!";
   }
 
   @Override

File: src/test/java/org/robolectric/bytecode/ShadowMapTest.java
Patch:
@@ -18,16 +18,16 @@ public class ShadowMapTest {
   }
 
   @Test public void equalsHashCode() throws Exception {
-    ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
-    ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
+    ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false, false).build();
+    ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false, false).build();
     assertThat(a).isEqualTo(b);
     assertThat(a.hashCode()).isEqualTo(b.hashCode());
 
     ShadowMap c = b.newBuilder().build();
     assertThat(c).isEqualTo(b);
     assertThat(c.hashCode()).isEqualTo(b.hashCode());
 
-    ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false).build();
+    ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false, false).build();
     assertThat(d).isNotEqualTo(a);
     assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
   }

File: src/test/java/org/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -115,7 +115,7 @@ public void testStateListDrawable() {
     assertThat(shDrawable.getResourceIdForState(android.R.attr.state_active)).isEqualTo(R.drawable.l7_white);
   }
 
-  @Test
+  @Test @Ignore("this seems to be wrong...")
   public void shouldCreateAnims() throws Exception {
     assertInstanceOf(AnimationDrawable.class, resources.getDrawable(R.anim.test_anim_1));
   }

File: src/test/java/org/robolectric/bytecode/ShadowMapTest.java
Patch:
@@ -18,16 +18,16 @@ public class ShadowMapTest {
   }
 
   @Test public void equalsHashCode() throws Exception {
-    ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
-    ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
+    ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false, false).build();
+    ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false, false).build();
     assertThat(a).isEqualTo(b);
     assertThat(a.hashCode()).isEqualTo(b.hashCode());
 
     ShadowMap c = b.newBuilder().build();
     assertThat(c).isEqualTo(b);
     assertThat(c.hashCode()).isEqualTo(b.hashCode());
 
-    ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false).build();
+    ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false, false).build();
     assertThat(d).isNotEqualTo(a);
     assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
   }

File: src/main/java/org/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -323,7 +323,7 @@ public Cursor rawQueryWithFactory (SQLiteDatabase.CursorFactory cursorFactory, S
 
         resultSet = Robolectric.shadowOf(stmt).getStatement().executeQuery();
       } catch (SQLException e) {
-        throw new RuntimeException("SQL exception in query", e);
+        throw new RuntimeException("SQL exception in rawQueryWithFactory", e);
       }
       //TODO: assert rawquery with args returns actual values
 
@@ -387,7 +387,7 @@ public void endTransaction() {
         }
           getConnection().setAutoCommit(true);
       } catch (SQLException e) {
-        throw new RuntimeException("SQL exception in beginTransaction", e);
+        throw new RuntimeException("SQL exception in endTransaction", e);
       }
       transaction = null;
     }

File: src/main/java/org/robolectric/bytecode/AsmInstrumentingClassLoader.java
Patch:
@@ -661,14 +661,14 @@ private void interceptNastyMethod(ListIterator<AbstractInsnNode> instructions, M
         Type type = argumentTypes[i];
         int argWidth = type.getSize();
 
-        if (argWidth == 1) {                         // A B C []
+        if (argWidth == 1) {                       // A B C []
           instructions.add(new InsnNode(DUP_X1));  // A B [] C []
           instructions.add(new InsnNode(SWAP));    // A B [] [] C
           instructions.add(new LdcInsnNode(i));    // A B [] [] C 2
           instructions.add(new InsnNode(SWAP));    // A B [] [] 2 C
           box(type, instructions);                 // A B [] [] 2 (C)
           instructions.add(new InsnNode(AASTORE)); // A B [(C)]
-        } else if (argWidth == 2) {                  // A B _C_ []
+        } else if (argWidth == 2) {                // A B _C_ []
           instructions.add(new InsnNode(DUP_X2));  // A B [] _C_ []
           instructions.add(new InsnNode(DUP_X2));  // A B [] [] _C_ []
           instructions.add(new InsnNode(POP));     // A B [] [] _C_
@@ -768,7 +768,7 @@ private void generateCallToClassHandler(MethodNode originalMethod, String origin
         m.loadThis();                                         // this
         m.getField(classType, CLASS_HANDLER_DATA_FIELD_NAME, OBJECT_TYPE);  // contents of __robo_data__
         m.instanceOf(classType);                              // __robo_data__, is instance of same class?
-        m.visitJumpInsn(IFEQ, notInstanceOfThis); // jump if no (is not instance)
+        m.visitJumpInsn(IFEQ, notInstanceOfThis);             // jump if no (is not instance)
 
         TryCatch tryCatchForProxyCall = m.tryStart(THROWABLE_TYPE);
         m.loadThis();                                         // this

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -125,8 +125,8 @@ public boolean shouldAcquire(String name) {
             || name.startsWith("org.xml.")
             || name.startsWith("org.junit")
             || name.startsWith("org.hamcrest")
-            || name.startsWith("org.specs2") // allows for android projects with mixed scala\java tests to be
-            || name.startsWith("scala.")     //  run with Maven Surefire (see the RoboSpecs project on github)
+            || name.startsWith("org.specs2")  // allows for android projects with mixed scala\java tests to be
+            || name.startsWith("scala.")      //  run with Maven Surefire (see the RoboSpecs project on github)
             || name.startsWith("org.sqlite.") // ugh, we're barfing while loading org.sqlite now for some reason?!? todo: still?
     );
   }

File: src/main/java/org/robolectric/shadows/ShadowGridView.java
Patch:
@@ -5,5 +5,5 @@
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(GridView.class)
-public class ShadowGridView extends ShadowAdapterView {
+public class ShadowGridView extends ShadowAbsListView {
 }

File: src/main/java/org/robolectric/annotation/Config.java
Patch:
@@ -78,6 +78,7 @@ public static Config fromProperties(Properties configProperties) {
         }
 
         private static Class<?>[] parseClasses(String classList) {
+            if (classList.length() == 0) return new Class[0];
             String[] classNames = classList.split("[, ]+");
             Class[] classes = new Class[classNames.length];
             for (int i = 0; i < classNames.length; i++) {

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -189,7 +189,7 @@ private TypedArray attrsToTypedArray(AttributeSet set, int[] attrs, int defStyle
             }
         }
 
-        return ShadowTypedArray.create(realResources, attributes, attrs);
+        return ShadowTypedArray.create(attributes, attrs, this);
     }
 
     private Attribute findAttributeValue(ResName attrName, AttributeSet attributeSet, Style defStyleFromAttr, Style defStyleFromRes, Style theme) {

File: src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -104,7 +104,7 @@ public int getCreatedFromHeight() {
     }
 
     /** Matrix from which this Bitmap's content was transformed, or {@code null}. */
-    public Matrix getCreateFromMatrix() {
+    public Matrix getCreatedFromMatrix() {
         return createdFromMatrix;
     }
 

File: src/main/java/org/robolectric/shadows/ShadowBitmap.java
Patch:
@@ -104,7 +104,7 @@ public int getCreatedFromHeight() {
     }
 
     /** Matrix from which this Bitmap's content was transformed, or {@code null}. */
-    public Matrix getCreateFromMatrix() {
+    public Matrix getCreatedFromMatrix() {
         return createdFromMatrix;
     }
 

File: src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -48,7 +48,7 @@ public static FsFile currentDirectory() {
         return newFile(new File("."));
     }
 
-    private static class JarFs extends Fs {
+    static class JarFs extends Fs {
         private final JarFile jarFile;
         private final NavigableMap<String, JarEntry> jarEntryMap = new TreeMap<String, JarEntry>();
 
@@ -69,7 +69,7 @@ public JarFs(File file) {
             return new JarFsFile(folderBaseName);
         }
 
-        private class JarFsFile implements FsFile {
+        class JarFsFile implements FsFile {
             private final String path;
 
             public JarFsFile(String path) {

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -115,6 +115,7 @@
 import org.robolectric.shadows.ShadowItemizedOverlay;
 import org.robolectric.shadows.ShadowJsPromptResult;
 import org.robolectric.shadows.ShadowJsResult;
+import org.robolectric.shadows.ShadowKeyCharacterMap;
 import org.robolectric.shadows.ShadowKeyEvent;
 import org.robolectric.shadows.ShadowKeyguardManager;
 import org.robolectric.shadows.ShadowLayerDrawable;
@@ -382,6 +383,7 @@ public class RobolectricBase {
             ShadowLayoutAnimationController.class,
             ShadowJsPromptResult.class,
             ShadowJsResult.class,
+            ShadowKeyCharacterMap.class,
             ShadowKeyEvent.class,
             ShadowKeyguardManager.class,
             ShadowKeyguardManager.ShadowKeyguardLock.class,
@@ -406,7 +408,6 @@ public class RobolectricBase {
             ShadowViewGroup.ShadowMarginLayoutParams.class,
             ShadowMatrix.class,
             ShadowMatrixCursor.class,
-            ShadowView.ShadowMeasureSpec.class,
             ShadowMediaPlayer.class,
             ShadowMediaRecorder.class,
             ShadowMediaScannerConnection.class,
@@ -520,7 +521,6 @@ public class RobolectricBase {
             ShadowViewGroup.class,
             ShadowViewFlipper.class,
             ShadowViewRootImpl.class,
-            ShadowView.ShadowMeasureSpec.class,
             ShadowViewTreeObserver.class,
             ShadowWebView.class,
             ShadowWebViewDatabase.class,

File: src/main/java/org/robolectric/res/builder/LayoutBuilder.java
Patch:
@@ -234,8 +234,10 @@ private Class<? extends Fragment> loadFragmentClass(String className) {
 
     public void applyFocusOverride(ViewNode viewNode, ViewParent parent) {
         if (viewNode.shouldRequestFocusOverride()) {
+            if (!(parent instanceof View)) return;
+
             View ancestor = (View) parent;
-            while (ancestor.getParent() != null) {
+            while (ancestor.getParent() instanceof View) {
                 ancestor = (View) ancestor.getParent();
             }
             ancestor.clearFocus();

File: src/test/java/org/robolectric/R.java
Patch:
@@ -188,7 +188,7 @@ public static final class layout {
 
     public static final class anim {
         public static final int test_anim_1 = 0x10700;
-        public static final int animation_list = 0x10700;
+        public static final int animation_list = 0x10701;
     }
 
     public static final class raw {

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -17,6 +17,7 @@ public class RobolectricInternals {
     // initialized via magic by SdkEnvironment
     private static ClassHandler classHandler;
     private static final Map<Class, Field> shadowFieldMap = new HashMap<Class, Field>();
+    public static boolean inActivityControllerBlock = false;
 
     public static ClassHandler getClassHandler() {
         return classHandler;
@@ -192,8 +193,8 @@ public static Invoker<Void> getConstructor(Class<?> clazz, Object instance, Stri
         return getConstructor(clazz, instance, parameterClasses);
     }
 
-    public static Invoker<Void> getConstructor(Class<?> clazz, Object realView, Class... parameterTypes) {
+    public static Invoker<Void> getConstructor(Class<?> clazz, Object instance, Class... parameterTypes) {
         String name = directMethodName(clazz.getName(), InstrumentingClassLoader.CONSTRUCTOR_METHOD_NAME);
-        return method(name).withParameterTypes(parameterTypes).in(realView);
+        return method(name).withParameterTypes(parameterTypes).in(instance);
     }
 }

File: src/main/java/org/robolectric/res/Fs.java
Patch:
@@ -25,9 +25,9 @@ public static Fs fromJar(URL url) {
         return new JarFs(new File(url.getFile()));
     }
 
-    public static FsFile fileFromJar(String urlString) {
+    public static FsFile fileFromPath(String urlString) {
         URI uri = URI.create(urlString);
-        if (uri.getScheme().equals("jar")) {
+        if ("jar".equals(uri.getScheme())) {
             String[] parts = uri.getPath().split("!");
             try {
                 Fs fs = fromJar(URI.create("file:" + parts[0]).toURL());
@@ -36,7 +36,7 @@ public static FsFile fileFromJar(String urlString) {
                 throw new RuntimeException(e);
             }
         } else {
-            throw new RuntimeException("not sure what to do with " + urlString);
+            return new FileFsFile(new File(urlString));
         }
     }
 

File: src/main/java/org/robolectric/res/ResBunch.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import org.jetbrains.annotations.NotNull;
 
 public class ResBunch {
     private final Map<String, ResMap<TypedResource>> types = new LinkedHashMap<String, ResMap<TypedResource>>();
@@ -26,12 +27,12 @@ private ResMap<TypedResource> getValuesMap(String attrType) {
         return valuesMap;
     }
 
-    public TypedResource get(ResName resName, String qualifiers) {
+    public TypedResource get(@NotNull ResName resName, String qualifiers) {
         Value value = getValue(resName, qualifiers);
         return value == null ? null : value.value;
     }
 
-    public Value getValue(ResName resName, String qualifiers) {
+    public Value getValue(@NotNull ResName resName, String qualifiers) {
         ResMap<TypedResource> valuesMap = getValuesMap(resName.type);
         Values values = valuesMap.find(resName);
         return (values != null) ? pick(values, qualifiers) : null;

File: src/main/java/org/robolectric/shadows/ShadowAbsSeekBar.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.AbsSeekBar;
 import org.robolectric.internal.Implements;
 
-@Implements(value = AbsSeekBar.class, inheritImplementationMethods = true)
+@Implements(value = AbsSeekBar.class)
 public class ShadowAbsSeekBar extends ShadowProgressBar {
     
     boolean mIsUserSeekable = true;

File: src/main/java/org/robolectric/shadows/ShadowAppWidgetHostView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(value = AppWidgetHostView.class, inheritImplementationMethods = true)
+@Implements(value = AppWidgetHostView.class)
 public class ShadowAppWidgetHostView extends ShadowFrameLayout {
 
     private int appWidgetId;

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -26,7 +26,6 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 import org.robolectric.res.ResourceLoader;
-import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 import org.robolectric.util.Scheduler;
 
@@ -49,7 +48,7 @@ public class ShadowApplication extends ShadowContextWrapper {
     static {
         // note that these are different!
         // They specify concrete classes within Robolectric for interfaces or abstract classes defined by Android
-        SYSTEM_SERVICE_MAP.put(Context.WINDOW_SERVICE, "org.robolectric.tester.android.view.TestWindowManager");
+        SYSTEM_SERVICE_MAP.put(Context.WINDOW_SERVICE, "org.robolectric.tester.android.view.RoboWindowManager");
         SYSTEM_SERVICE_MAP.put(Context.CLIPBOARD_SERVICE, "android.content.ClipboardManager");
         SYSTEM_SERVICE_MAP.put(Context.SENSOR_SERVICE, "android.hardware.TestSensorManager");
         SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.RoboVibrator");
@@ -71,6 +70,7 @@ public class ShadowApplication extends ShadowContextWrapper {
         SYSTEM_SERVICE_MAP.put(Context.INPUT_METHOD_SERVICE, "android.view.inputmethod.InputMethodManager");
         SYSTEM_SERVICE_MAP.put(Context.UI_MODE_SERVICE, "android.app.UiModeManager");
         SYSTEM_SERVICE_MAP.put(Context.DOWNLOAD_SERVICE, "android.app.DownloadManager");
+        SYSTEM_SERVICE_MAP.put(Context.TEXT_SERVICES_MANAGER_SERVICE, "android.view.textservice.TextServicesManager");
     }
 
     @RealObject private Application realApplication;
@@ -124,7 +124,6 @@ public void bind(AndroidManifest appManifest, ResourceLoader resourceLoader) {
             setPackageName(appManifest.getPackageName());
             setApplicationName(appManifest.getApplicationName());
 
-            setPackageManager(new RobolectricPackageManager(realApplication, appManifest));
             this.registerBroadcastReceivers(appManifest);
         }
     }

File: src/main/java/org/robolectric/shadows/ShadowDialogPreference.java
Patch:
@@ -4,11 +4,12 @@
 import android.preference.DialogPreference;
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
+import org.robolectric.res.ResourceLoader;
 
 @Implements(DialogPreference.class)
 public class ShadowDialogPreference extends ShadowPreference {
     @Implementation
     public CharSequence getDialogMessage() {
-        return attrs.getAttributeValue("android", "dialogMessage");
+        return attrs.getAttributeValue(ResourceLoader.ANDROID_NS, "dialogMessage");
     }
 }

File: src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 
-@Implements(value = NumberPicker.class, inheritImplementationMethods = true)
+@Implements(value = NumberPicker.class)
 public class ShadowNumberPicker extends ShadowLinearLayout {
     private int value;
     private String[] displayedValues;

File: src/main/java/org/robolectric/shadows/ShadowPreference.java
Patch:
@@ -7,6 +7,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
+import org.robolectric.res.ResourceLoader;
 
 @Implements(Preference.class)
 public class ShadowPreference {
@@ -46,7 +47,7 @@ public void __constructor__(Context context, AttributeSet attributeSet, int defS
 		this.defStyle = defStyle;
 		
 		if (attributeSet != null) {
-			key = attributeSet.getAttributeValue("android", "key");
+			key = attributeSet.getAttributeValue(ResourceLoader.ANDROID_NS, "key");
         }
 	}
 

File: src/main/java/org/robolectric/shadows/ShadowRadioButton.java
Patch:
@@ -10,19 +10,19 @@
  * Shadows the {@code android.widget.RadioButton} class.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(value = RadioButton.class, inheritImplementationMethods = true)
+@Implements(value = RadioButton.class)
 public class ShadowRadioButton extends ShadowCompoundButton {
 
     @Implementation
     @Override public void setChecked(boolean checked) {
         super.setChecked(checked);
-        ViewParent viewParent = getParent();
+        ViewParent viewParent = realView.getParent();
 
          /* This simulates the listener a parent RadioGroup would have, listening to the
             checked state it's child RadioButtons. Feel free to implement properly.
          */
         if (viewParent instanceof RadioGroup) {
-            ((RadioGroup) viewParent).check(getId());
+            ((RadioGroup) viewParent).check(realView.getId());
         }
     }
 }

File: src/main/java/org/robolectric/shadows/ShadowRadioGroup.java
Patch:
@@ -8,7 +8,7 @@
 import static android.widget.RadioGroup.OnCheckedChangeListener;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(value = RadioGroup.class, inheritImplementationMethods = true)
+@Implements(RadioGroup.class)
 public class ShadowRadioGroup extends ShadowLinearLayout {
     @RealObject
     protected RadioGroup realGroup;

File: src/main/java/org/robolectric/shadows/ShadowScrollView.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(value = ScrollView.class, inheritImplementationMethods = true)
+@Implements(value = ScrollView.class)
 public class ShadowScrollView extends ShadowFrameLayout {
     @Implementation
     public void smoothScrollTo(int x, int y) {

File: src/main/java/org/robolectric/shadows/ShadowSpinner.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(value = Spinner.class, inheritImplementationMethods = true)
+@Implements(value = Spinner.class)
 public class ShadowSpinner extends ShadowAbsSpinner {
 
     private CharSequence prompt;

File: src/main/java/org/robolectric/shadows/ShadowSurfaceView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(value = SurfaceView.class, inheritImplementationMethods = true)
+@Implements(value = SurfaceView.class)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowSurfaceView extends ShadowView {
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowSystemProperties.java
Patch:
@@ -19,6 +19,7 @@ public class ShadowSystemProperties {
         VALUES.put("ro.debuggable", 0);
         VALUES.put("ro.secure", 1);
         VALUES.put("log.closeguard.Animation", false);
+        VALUES.put("debug.choreographer.vsync", false); // disable vsync for Choreographer
     }
 
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowVideoView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(value = VideoView.class, inheritImplementationMethods = true)
+@Implements(value = VideoView.class)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowVideoView extends ShadowSurfaceView {
 	

File: src/main/java/org/robolectric/shadows/ShadowViewFlipper.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(value = ViewFlipper.class, inheritImplementationMethods = true)
+@Implements(value = ViewFlipper.class)
 public class ShadowViewFlipper extends ShadowViewAnimator {
     @RealObject
     protected ViewFlipper realObject;

File: src/main/java/org/robolectric/tester/android/view/RoboWindowManager.java
Patch:
@@ -10,7 +10,7 @@
 import static org.robolectric.Robolectric.newInstanceOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-public class TestWindowManager implements WindowManager {
+public class RoboWindowManager implements WindowManager {
 
     private Display display;
     private List<View> views = new ArrayList<View>();

File: src/main/java/org/robolectric/util/Function.java
Patch:
@@ -3,6 +3,6 @@
 /**
  *
  */
-public interface Function<R, V> {
-    public R call(V value);
+public interface Function<R, T> {
+    public R call(Class<?> theClass, T value, Object[] params);
 }

File: src/test/java/org/robolectric/RobolectricTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 import org.robolectric.shadows.ShadowDisplay;
+import org.robolectric.shadows.StubViewRoot;
 import org.robolectric.util.TestOnClickListener;
 
 import java.io.ByteArrayOutputStream;
@@ -138,6 +139,7 @@ public void shouldUseSetDisplayForContexts() throws Exception {
     @Test
     public void clickOn_shouldCallClickListener() throws Exception {
         View view = new View(Robolectric.application);
+        shadowOf(view).setMyParent(new StubViewRoot());
         TestOnClickListener testOnClickListener = new TestOnClickListener();
         view.setOnClickListener(testOnClickListener);
         Robolectric.clickOn(view);

File: src/test/java/org/robolectric/bytecode/ShadowWranglerUnitTest.java
Patch:
@@ -25,7 +25,7 @@ public void getInterceptionHandler_whenCallIsNotRecognized_shouldReturnDoNothing
         assertThat(handler)
                 .isNotNull()
                 .isSameAs(ShadowWrangler.DO_NOTHING_HANDLER);
-        assertThat(handler.call(null)).isNull();
+        assertThat(handler.call(null, null, new Object[0])).isNull();
     }
 
     @Test

File: src/test/java/org/robolectric/bytecode/StaticInitializerTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.Config;
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.Instrument;
 

File: src/test/java/org/robolectric/res/ResourceExtractorTest.java
Patch:
@@ -36,9 +36,9 @@ public void shouldPrefixAllSystemResourcesWithAndroid() throws Exception {
 
     @Test
     public void shouldHandleNull() throws Exception {
-        assertThat(ResName.getResourceId(resourceIndex, "@null", "")).isEqualTo(0);
-        assertThat(ResName.getResourceId(resourceIndex, "@null", "android")).isEqualTo(0);
-        assertThat(ResName.getResourceId(resourceIndex, "@null", "anything")).isEqualTo(0);
+        assertThat(ResName.getResourceId(resourceIndex, "@null", "")).isEqualTo(null);
+        assertThat(ResName.getResourceId(resourceIndex, "@null", "android")).isEqualTo(null);
+        assertThat(ResName.getResourceId(resourceIndex, "@null", "anything")).isEqualTo(null);
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/ActivityTest.java
Patch:
@@ -771,7 +771,7 @@ private static class ActivityWithOnCreateDialog extends Activity {
         @Override
         protected Dialog onCreateDialog(int id) {
             onCreateDialogWasCalled = true;
-            return new Dialog(null);
+            return new Dialog(this);
         }
     }
 }

File: src/test/java/org/robolectric/shadows/CheckBoxTest.java
Patch:
@@ -18,10 +18,10 @@ public void testWorks() throws Exception {
         checkBox.setChecked(true);
         assertThat(checkBox.isChecked()).isTrue();
 
-        checkBox.performClick();
+        checkBox.toggle();
         assertThat(checkBox.isChecked()).isFalse();
 
-        checkBox.toggle();
-        assertThat(checkBox.isChecked()).isTrue();
+        checkBox.performClick();  // Used to support performClick(), but Android doesn't. Sigh.
+//        assertThat(checkBox.isChecked()).isFalse();
     }
 }

File: src/test/java/org/robolectric/shadows/CheckedTextViewTest.java
Patch:
@@ -44,7 +44,7 @@ public void testSetChecked() {
         assertFalse(view.isChecked());
         view.toggle();
         assertTrue(view.isChecked());
-        view.performClick();
+        view.toggle();  // Used to support performClick(), but Android doesn't. Sigh.
         assertFalse(view.isChecked());
     }
 }

File: src/test/java/org/robolectric/shadows/CountingAdapter.java
Patch:
@@ -12,10 +12,10 @@ class CountingAdapter extends BaseAdapter {
     public CountingAdapter(int itemCount) {
         this.itemCount = itemCount;
     }
-    
+
     public void setCount(int itemCount) {
-    	this.itemCount = itemCount;
-    	notifyDataSetChanged();
+        this.itemCount = itemCount;
+        notifyDataSetChanged();
     }
 
     @Override

File: src/test/java/org/robolectric/shadows/DialogPreferenceTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.res.Attribute;
-import org.robolectric.res.EmptyResourceLoader;
+import org.robolectric.util.TestUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -34,14 +34,14 @@ public void setup() {
         List<Attribute> attributes = new ArrayList<Attribute>();
         attributes.add(new Attribute("android:attr/dialogMessage", TEST_DIALOG_MESSAGE, R.class.getPackage().getName()));
         context = new Activity();
-        attrs = new RoboAttributeSet(attributes, new EmptyResourceLoader(), null);
+        attrs = new RoboAttributeSet(attributes, TestUtil.emptyResources(), null);
         preference = new TestDialogPreference(context, attrs);
         shadow = Robolectric.shadowOf(preference);
     }
 
     @Test
     public void testConstructors() {
-        int defStyle = 7;
+        int defStyle = android.R.attr.buttonStyle;
 
         preference = new TestDialogPreference(context, attrs, defStyle);
         shadow = Robolectric.shadowOf(preference);

File: src/test/java/org/robolectric/shadows/MapActivityTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 import com.google.android.maps.MapActivity;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.TestRunners;
@@ -17,6 +18,7 @@ public void onDestroy_shouldNotComplainIfLifecycleIsCorrect() throws Exception {
         mapActivity.onDestroy();
     }
 
+    @Ignore("maybe not a valid test in the 2.0 world?") // todo 2.0-cleanup
     @Test(expected = IllegalStateException.class)
     public void onDestroy_shouldComplainIfPauseIsNotCalled() throws Exception {
         MyMapActivity mapActivity = new MyMapActivity();

File: src/test/java/org/robolectric/shadows/PopupWindowTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
-import org.robolectric.tester.android.view.TestWindowManager;
+import org.robolectric.tester.android.view.RoboWindowManager;
 
 import static android.view.MotionEvent.ACTION_DOWN;
 import static android.view.MotionEvent.obtain;
@@ -123,13 +123,13 @@ public boolean onTouch(View v, MotionEvent event) {
     @RunWith(TestRunners.WithDefaults.class)
     public static class WithContentView {
 
-        private TestWindowManager windowManager;
+        private RoboWindowManager windowManager;
         private View contentView;
         private View anchor;
 
         @Before
         public void setUp() throws Exception {
-            windowManager = (TestWindowManager) Robolectric.application.getSystemService(Context.WINDOW_SERVICE);
+            windowManager = (RoboWindowManager) Robolectric.application.getSystemService(Context.WINDOW_SERVICE);
             contentView = new View(Robolectric.application);
             contentView.setId(R.id.content_view);
             anchor = new View(Robolectric.application);

File: src/test/java/org/robolectric/shadows/PreferenceTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.robolectric.TestRunners;
 import org.robolectric.res.Attribute;
 import org.robolectric.res.EmptyResourceLoader;
+import org.robolectric.util.TestUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -34,7 +35,7 @@ public class PreferenceTest {
     @Before
     public void setup() {
         context = new Activity();
-        attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new EmptyResourceLoader(), null);
+        attrs = new RoboAttributeSet(new ArrayList<Attribute>(), TestUtil.emptyResources(), null);
         preference = new TestPreference(context, attrs);
         shadow = Robolectric.shadowOf(preference);
     }
@@ -67,7 +68,7 @@ public void shouldInitializeFromAttributes() {
         String key = "key_value";
         List<Attribute> attributes = new ArrayList<Attribute>();
         attributes.add(new Attribute("android:attr/key", key, R.class.getPackage().getName()));
-        attrs = new RoboAttributeSet(attributes, new EmptyResourceLoader(), null);
+        attrs = new RoboAttributeSet(attributes, TestUtil.emptyResources(), null);
 
         preference = new TestPreference(context, attrs);
         assertThat(preference.getKey()).isEqualTo(key);

File: src/test/java/org/robolectric/shadows/RadioButtonTest.java
Patch:
@@ -34,7 +34,7 @@ public void canBeToggledBetweenCheckedState() throws Exception {
         assertTrue(radioButton.isChecked());
 
         radioButton.toggle();
-        assertFalse(radioButton.isChecked());
+        assertTrue(radioButton.isChecked()); // radio buttons can't be turned off again with a click
     }
 
     @Test
@@ -46,7 +46,7 @@ public void canBeClickedToToggleCheckedState() throws Exception {
         assertTrue(radioButton.isChecked());
 
         radioButton.performClick();
-        assertFalse(radioButton.isChecked());
+        assertTrue(radioButton.isChecked()); // radio buttons can't be turned off again with a click
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/RatingBarTest.java
Patch:
@@ -31,9 +31,9 @@ public void setup() {
     
     @Test
     public void testOnSeekBarChangedListener() {
-        assertThat(shadow.getOnRatingBarChangeListener()).isSameAs(listener);
+        assertThat(ratingBar.getOnRatingBarChangeListener()).isSameAs(listener);
         ratingBar.setOnRatingBarChangeListener(null);
-        assertThat(shadow.getOnRatingBarChangeListener()).isNull();
+        assertThat(ratingBar.getOnRatingBarChangeListener()).isNull();
     }
     
     @Test

File: src/test/java/org/robolectric/shadows/ShadowEditTextTest.java
Patch:
@@ -22,7 +22,7 @@ public class ShadowEditTextTest {
     public void setup() {
         List<Attribute> attributes = new ArrayList<Attribute>();
         attributes.add(new Attribute("android:attr/maxLength", "5", R.class.getPackage().getName()));
-        RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, Robolectric.getShadowApplication().getResourceLoader(), null);
+        RoboAttributeSet attributeSet = new RoboAttributeSet(attributes, Robolectric.application.getResources(), null);
         editText = new EditText(Robolectric.application, attributeSet);
     }
 

File: src/test/java/org/robolectric/shadows/WindowTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
-import org.robolectric.tester.android.view.TestWindow;
+import org.robolectric.tester.android.view.RoboWindow;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -26,7 +26,7 @@ public void setup() throws Exception {
 
     @Test
     public void testGetFlag() throws Exception {
-        Window window = new TestWindow(context);
+        Window window = new RoboWindow(context);
 
         assertFalse(shadowOf(window).getFlag(WindowManager.LayoutParams.FLAG_FULLSCREEN));
         window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

File: src/test/java/org/robolectric/tester/android/view/TestWindowTest.java
Patch:
@@ -16,13 +16,13 @@ public class TestWindowTest {
 
     @Test
     public void windowManager__shouldNotBeNull() throws Exception {
-        TestWindow window = new TestWindow(null);
+        RoboWindow window = new RoboWindow(null);
         Assert.assertNotNull(window.getWindowManager());
     }
 
     @Test
     public void decorViewFindViewById__shouldReturnContentWrapper() throws Exception {
-        TestWindow window = new TestWindow(Robolectric.application);
+        RoboWindow window = new RoboWindow(Robolectric.application);
         View contentView = new View(Robolectric.application);
         contentView.setTag("content view");
         window.setContentView(contentView);
@@ -35,7 +35,7 @@ public void decorViewFindViewById__shouldReturnContentWrapper() throws Exception
     }
     
     @Test public void setContentViewByResource() throws Exception {
-        TestWindow window = new TestWindow(Robolectric.application);
+        RoboWindow window = new RoboWindow(Robolectric.application);
         window.setContentView(R.layout.text_views);
 
         ViewGroup contentWrapper = (ViewGroup) window.findViewById(android.R.id.content);

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -171,7 +171,7 @@ public Context getApplicationContext() {
     @Implementation
     public AssetManager getAssets() {
         if (assetManager == null) {
-            assetManager = ShadowAssetManager.bind(Robolectric.newInstanceOf(AssetManager.class), appManifest);
+            assetManager = ShadowAssetManager.bind(Robolectric.newInstanceOf(AssetManager.class), appManifest, resourceLoader);
         }
         return assetManager;
     }

File: src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -60,7 +60,7 @@ public void internalBeforeTest_clearsShadowApplicationStrictI18n() {
     @Test
     @Config(qualifiers = "fr")
     public void internalBeforeTest_testValuesResQualifiers() {
-        assertEquals("fr", Robolectric.shadowOf(Robolectric.getShadowApplication().getResources().getConfiguration()).getQualifiers());
+        assertEquals("fr", Robolectric.shadowOf(Robolectric.getShadowApplication().getResources().getAssets()).getQualifiers());
     }
 
     @Test

File: src/test/java/org/robolectric/bytecode/RobolectricWiringTest.java
Patch:
@@ -71,7 +71,7 @@ private void verifyMethod(Class implementedClass, Method shadowMethod) {
             }
             if (implementedMember == null) {
                 if (!isAnnotatedHiddenApi(shadowMethod)) {
-                    mismatches.add(shadowMethod.toGenericString() + " doesn't match a real method");
+                    mismatches.add(shadowMethod.toGenericString() + " doesn't match a real method (maybe it's a @HiddenApi?)");
                 }
             } else if (staticMismatch(shadowMethod, implementedMember)) {
                 mismatches.add(shadowMethod.toGenericString() + " doesn't match the staticness of the real method");

File: src/test/java/org/robolectric/res/PluralResourceLoaderTest.java
Patch:
@@ -12,10 +12,8 @@ public class PluralResourceLoaderTest {
 
     @Before
     public void setUp() throws Exception {
-        ResourceIndex extractor = new ResourceExtractor(testResources());
-
         pluralRulesResBundle = new ResBundle<PluralResourceLoader.PluralRules>();
-        PluralResourceLoader pluralResourceLoader = new PluralResourceLoader(extractor, pluralRulesResBundle);
+        PluralResourceLoader pluralResourceLoader = new PluralResourceLoader(pluralRulesResBundle);
 
         new DocumentLoader(testResources()).load("values", pluralResourceLoader);
     }

File: src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -390,7 +390,7 @@ public static <T> T directlyOn(T shadowedObject, Class<T> clazz) {
         return RobolectricInternals.directlyOn(shadowedObject, clazz);
     }
 
-    public static <T> Invoker directlyOn(T shadowedObject, Class<T> clazz, String methodName, Class<T>... paramTypes) {
+    public static <T> Invoker directlyOn(T shadowedObject, Class<T> clazz, String methodName, Class<?>... paramTypes) {
         String directMethodName = RobolectricInternals.directMethodName(clazz.getName(), methodName);
         return method(directMethodName).withReturnType(Object.class).withParameterTypes(paramTypes).in(shadowedObject);
     }

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -244,7 +244,7 @@ public void evaluate() throws Throwable {
                     parallelUniverseInterface.setDatabaseMap(databaseMap); //Set static DatabaseMap in DBConfig
 
                     boolean strictI18n = RobolectricTestRunner.determineI18nStrictState(bootstrappedMethod);
-                    
+
                     int sdkVersion = pickReportedSdkVersion(config, appManifest);
                     Class<?> versionClass = sdkEnvironment.bootstrappedClass(Build.VERSION.class);
                     staticField("SDK_INT").ofType(int.class).in(versionClass).set(sdkVersion);

File: src/main/java/org/robolectric/res/MenuLoader.java
Patch:
@@ -43,7 +43,7 @@ private void processNode(Node node, MenuNode parent, XmlContext xmlContext) {
             int length = attributesNodes.getLength();
             for (int i = 0; i < length; i++) {
                 Node attr = attributesNodes.item(i);
-                String resourceName = ResName.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
+                String resourceName = Attribute.qualifyName(attr.getNodeName(), xmlContext.packageName);
                 attributes.add(new Attribute(Attribute.addType(resourceName, "attr"), attr.getNodeValue(), xmlContext.packageName));
             }
         }

File: src/main/java/org/robolectric/res/PreferenceLoader.java
Patch:
@@ -37,7 +37,7 @@ private void processNode(Node node, PreferenceNode parent, XmlContext xmlContext
             int length = attributes.getLength();
             for (int i = 0; i < length; i++) {
                 Node attr = attributes.item(i);
-                String attrName = ResName.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
+                String attrName = Attribute.qualifyName(attr.getNodeName(), xmlContext.packageName);
                 if (attrName.startsWith("xmlns:")) {
                     // ignore
                 } else {

File: src/main/java/org/robolectric/res/XResourceLoader.java
Patch:
@@ -217,7 +217,7 @@ public List<T> resolveArray(ResName resName, String qualifiers) {
         T resolveValue(String qualifiers, String value, String packageName) {
             if (value == null) return null;
             if (value.startsWith("@")) {
-                ResName resName = new ResName(ResName.qualifyResourceName(value.substring(1), packageName));
+                ResName resName = new ResName(ResName.qualifyResourceName(value.substring(1), packageName, null));
                 return resolve(resName, qualifiers);
             } else {
                 return convert(value);

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -235,7 +235,7 @@ public Object getSystemService(String name) {
         }
         return service;
     }
-    
+
     @Implementation
     @Override
     public void startActivity(Intent intent) {

File: src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -152,7 +152,7 @@ public void dismiss() {
     public View findViewById(int viewId) {
         if (context != null) {
             if (inflatedView == null && layoutId > 0) {
-                inflatedView = ShadowLayoutInflater.from(context).inflate(layoutId, null);
+                inflatedView = LayoutInflater.from(context).inflate(layoutId, null);
             }
             if (inflatedView != null) return inflatedView.findViewById(viewId);
         }
@@ -234,7 +234,7 @@ public CharSequence getTitle() {
 
     public void clickOnText(int textId) {
         if (inflatedView == null) {
-            inflatedView = ShadowLayoutInflater.from(context).inflate(layoutId, null);
+            inflatedView = LayoutInflater.from(context).inflate(layoutId, null);
         }
         String text = getContext().getResources().getString(textId);
         if (!clickOnText(inflatedView, text)) {

File: src/test/java/org/robolectric/shadows/ActivityTest.java
Patch:
@@ -361,7 +361,7 @@ public void retrieveIdOfResource() {
         assertEquals("Hello", string);
 
         int id = activity.getResources().getIdentifier("hello", "string", "org.robolectric");
-        assertTrue(id > 0);
+        assertThat(id).isEqualTo(R.string.hello);
 
         String hello = activity.getResources().getString(id);
         assertEquals("Hello", hello);
@@ -372,7 +372,7 @@ public void retrieveIdOfNonExistingResource() {
         Activity activity = new Activity();
 
         int id = activity.getResources().getIdentifier("just_alot_of_crap", "string", "org.robolectric");
-        assertTrue(id == 0);
+        assertThat(id).isEqualTo(0);
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/ResourcesTest.java
Patch:
@@ -209,7 +209,7 @@ public void systemResourcesShouldReturnCorrectSystemId() throws Exception {
 
     @Test
     public void systemResourcesShouldReturnZeroForLocalId() throws Exception {
-        assertThat(Resources.getSystem().getIdentifier("copy", "string", null)).isEqualTo(0);
+        assertThat(Resources.getSystem().getIdentifier("copy", "string", TestUtil.TEST_PACKAGE)).isEqualTo(0);
     }
 
     @Test

File: src/main/java/org/robolectric/Robolectric.java
Patch:
@@ -390,7 +390,7 @@ public static <T> T directlyOn(T shadowedObject, Class<T> clazz) {
         return RobolectricInternals.directlyOn(shadowedObject, clazz);
     }
 
-    public static <T> Invoker directlyOn(T shadowedObject, Class<T> clazz, String methodName, Class<T>... paramTypes) {
+    public static <T> Invoker directlyOn(T shadowedObject, Class<T> clazz, String methodName, Class<?>... paramTypes) {
         String directMethodName = RobolectricInternals.directMethodName(clazz.getName(), methodName);
         return method(directMethodName).withReturnType(Object.class).withParameterTypes(paramTypes).in(shadowedObject);
     }

File: src/main/java/org/robolectric/res/ResourceExtractor.java
Patch:
@@ -50,9 +50,6 @@ private void process(Class<?> rClass, String packageName, boolean checkForCollis
 
                     if (!section.equals("styleable")) {
                         String fieldName = field.getName();
-                        if (fieldName.equals("ellipsis") || fieldName.equals("soundEffectVolumeDb")) {
-                            System.out.println("found: " + field + ": " + value);
-                        }
                         ResName resName = new ResName(packageName, section, fieldName);
 
                         resourceNameToId.put(resName, value);

File: src/main/java/org/robolectric/shadows/ShadowMapActivity.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.internal.Implements;
 
 /**
- * Shadow {@code MapActivity} that registers and unregisters a {@code BroadcastReciever} when {@link #onResume()} and
+ * Shadow {@code MapActivity} that registers and unregisters a {@code BroadcastReceiver} when {@link #onResume()} and
  * {@link #onPause()} are called respectively.
  */
 

File: src/main/java/org/robolectric/internal/ParallelUniverseInterface.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.internal;
 
+import org.robolectric.AndroidManifest;
 import org.robolectric.SdkEnvironment;
 import org.robolectric.TestLifecycle;
 import org.robolectric.res.ResourceLoader;
@@ -12,7 +13,7 @@ public interface ParallelUniverseInterface {
 
     void setDatabaseMap(DatabaseConfig.DatabaseMap databaseMap);
 
-    void setUpApplicationState(Method method, TestLifecycle testLifecycle, SdkEnvironment sdkEnvironment, boolean strictI18n, ResourceLoader systemResourceLoader);
+    void setUpApplicationState(Method method, TestLifecycle testLifecycle, boolean strictI18n, ResourceLoader systemResourceLoader, AndroidManifest appManifest);
 
     void tearDownApplication();
 

File: src/main/java/org/robolectric/res/XmlLoader.java
Patch:
@@ -64,7 +64,7 @@ public XmlContext(String packageName, FsFile xmlFile) {
         }
 
         public String getQualifiers() {
-            String parentDir = xmlFile.getParentFile().getName();
+            String parentDir = xmlFile.getParent().getName();
             Matcher matcher = DIR_QUALIFIER_PATTERN.matcher(parentDir);
             if (!matcher.find()) throw new IllegalStateException(parentDir);
             return matcher.group(1);

File: src/main/java/org/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -53,7 +53,7 @@ synchronized private static FontDesc findById(int fontId) {
 
     @HiddenApi @Implementation
     public static int nativeCreateFromAsset(AssetManager mgr, String path) {
-        return nativeCreateFromFile(new File(shadowOf(mgr).getAssetsDirectory(), path).getPath());
+        return nativeCreateFromFile(shadowOf(mgr).getAssetsDirectory().join(path).toString());
     }
 
     @HiddenApi @Implementation

File: src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -22,6 +22,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(value = WebView.class, inheritImplementationMethods = true)
 public class ShadowWebView extends ShadowAbsoluteLayout {
+    public static boolean DEBUG = false;
 
     private String lastUrl;
     private HashMap<String, Object> javascriptInterfaces = new HashMap<String, Object>();
@@ -56,7 +57,7 @@ public void ensureProviderCreated() {
         if (mProviderField.get() == null) {
             Object provider = Proxy.newProxyInstance(classLoader, new Class[]{webViewProviderClass}, new InvocationHandler() {
                 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                    System.out.println("[DEBUG] WebView: " + method);
+                    if (DEBUG) System.out.println("[DEBUG] WebView: " + method);
 
                     if (method.getName().equals("getViewDelegate") || method.getName().equals("getScrollDelegate")) {
                         return Proxy.newProxyInstance(classLoader, new Class[]{
@@ -65,7 +66,7 @@ public void ensureProviderCreated() {
                         }, new InvocationHandler() {
                             @Override
                             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                                System.out.println("[DEBUG] WebView delegate: " + method);
+                                if (DEBUG) System.out.println("[DEBUG] WebView delegate: " + method);
                                 return nullish(method);
                             }
                         });

File: src/test/java/org/robolectric/AndroidManifestTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.res.Fs;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.test.TemporaryFolder;
 
@@ -97,7 +98,7 @@ public AndroidManifest newConfigWith(String usesSdkAttrs) throws IOException {
                         "          package=\"org.robolectric\">\n" +
                         "    <uses-sdk " + usesSdkAttrs + "/>\n" +
                         "</manifest>\n");
-        return new AndroidManifest(f, null, null);
+        return new AndroidManifest(Fs.newFile(f), null, null);
     }
 
     private List<String> stringify(List<ResourcePath> resourcePaths) {

File: src/test/java/org/robolectric/DefaultTestLifecycleTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.res.Fs;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.test.TemporaryFolder;
 
@@ -100,6 +101,6 @@ private AndroidManifest newConfigWith(String packageName, String contents) throw
                         "          package=\"" + packageName + "\">\n" +
                         "    " + contents + "\n" +
                         "</manifest>\n");
-        return new AndroidManifest(f, null, null);
+        return new AndroidManifest(Fs.newFile(f), null, null);
     }
 }

File: src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -59,7 +59,7 @@ public WithoutDefaults(Class<?> testClass) throws InitializationError {
         }
 
         @Override
-        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
+        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, AndroidManifest appManifest) {
             // Don't do any resource loading or app init, because that's what we're trying to test here.
         }
     }
@@ -101,7 +101,7 @@ public RealApisWithoutDefaults(Class<?> testClass) throws InitializationError {
         }
 
         @Override
-        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
+        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, AndroidManifest appManifest) {
             // Don't do any resource loading or app init, because that's what we're trying to test here.
         }
     }

File: src/test/java/org/robolectric/bytecode/CustomRobolectricTestRunnerTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.robolectric.AndroidManifest;
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.Robolectric;
-import org.robolectric.SdkEnvironment;
 import org.robolectric.TestRunners;
 import org.robolectric.internal.ParallelUniverseInterface;
 import org.robolectric.TestLifecycle;
@@ -128,8 +127,8 @@ public MyTestRunner(Class<?> testClass) throws InitializationError {
         }
 
         @Override
-        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
-            super.setUpApplicationState(method, parallelUniverseInterface, strictI18n, systemResourceLoader, sdkEnvironment);
+        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, AndroidManifest appManifest) {
+            super.setUpApplicationState(method, parallelUniverseInterface, strictI18n, systemResourceLoader, appManifest);
             this.application = parallelUniverseInterface.getCurrentApplication();
         }
 

File: src/test/java/org/robolectric/shadows/ActivityTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.res.Fs;
 import org.robolectric.shadows.testing.OnMethodTestActivity;
 import org.robolectric.test.TemporaryFolder;
 import org.robolectric.util.TestRunnable;
@@ -726,7 +727,7 @@ private AndroidManifest newConfigWith(String packageName, String contents) throw
                         "          package=\"" + packageName + "\">\n" +
                         "    " + contents + "\n" +
                         "</manifest>\n");
-        return new AndroidManifest(f, null, null);
+        return new AndroidManifest(Fs.newFile(f), null, null);
     }
 
     private static class DialogCreatingActivity extends Activity {

File: src/test/java/org/robolectric/shadows/ApplicationTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 import org.robolectric.res.EmptyResourceLoader;
+import org.robolectric.res.Fs;
 import org.robolectric.res.ResName;
 import org.robolectric.res.ResourceExtractor;
 import org.robolectric.res.ResourceIndex;
@@ -349,7 +350,7 @@ private AndroidManifest newConfigWith(String packageName, String contents) throw
                         "          package=\"" + packageName + "\">\n" +
                         "    " + contents + "\n" +
                         "</manifest>\n");
-        return new AndroidManifest(f, null, null);
+        return new AndroidManifest(Fs.newFile(f), null, null);
     }
 
     private static class ImperviousResourceExtractor extends ResourceExtractor {

File: src/test/java/org/robolectric/shadows/ShadowTypefaceTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.res.FileFsFile;
 
 import java.io.File;
 import java.io.FileWriter;
@@ -22,7 +23,7 @@ public class ShadowTypefaceTest {
 
     @Before
     public void setup() throws Exception {
-        File assetsBase = shadowOf(Robolectric.application).getAppManifest().getAssetsDirectory();
+        File assetsBase = ((FileFsFile) shadowOf(Robolectric.application).getAppManifest().getAssetsDirectory()).getFile();
         fontFile = new File(assetsBase, "myFont.ttf");
         FileWriter fileWriter = new FileWriter(fontFile);
         fileWriter.write("fontdata");

File: src/main/java/org/robolectric/shadows/ShadowWebView.java
Patch:
@@ -22,6 +22,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(value = WebView.class, inheritImplementationMethods = true)
 public class ShadowWebView extends ShadowAbsoluteLayout {
+    public static boolean DEBUG = false;
 
     private String lastUrl;
     private HashMap<String, Object> javascriptInterfaces = new HashMap<String, Object>();
@@ -56,7 +57,7 @@ public void ensureProviderCreated() {
         if (mProviderField.get() == null) {
             Object provider = Proxy.newProxyInstance(classLoader, new Class[]{webViewProviderClass}, new InvocationHandler() {
                 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                    System.out.println("[DEBUG] WebView: " + method);
+                    if (DEBUG) System.out.println("[DEBUG] WebView: " + method);
 
                     if (method.getName().equals("getViewDelegate") || method.getName().equals("getScrollDelegate")) {
                         return Proxy.newProxyInstance(classLoader, new Class[]{
@@ -65,7 +66,7 @@ public void ensureProviderCreated() {
                         }, new InvocationHandler() {
                             @Override
                             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                                System.out.println("[DEBUG] WebView delegate: " + method);
+                                if (DEBUG) System.out.println("[DEBUG] WebView delegate: " + method);
                                 return nullish(method);
                             }
                         });

File: src/main/java/org/robolectric/res/MenuLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
@@ -17,10 +16,10 @@ public MenuLoader(ResBundle<MenuNode> menuNodes) {
     }
 
     @Override
-    protected void processResourceXml(File xmlFile, Document document, XmlContext xmlContext) throws Exception {
+    protected void processResourceXml(File xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
         MenuNode topLevelNode = new MenuNode("top-level", new ArrayList<Attribute>());
 
-        NodeList items = document.getChildNodes();
+        NodeList items = parse(xmlFile).getChildNodes();
         if (items.getLength() != 1)
             throw new RuntimeException("Expected only one top-level item in menu file " + xmlFile.getName());
         if (items.item(0).getNodeName().compareTo("menu") != 0)

File: src/main/java/org/robolectric/res/OverlayResourceLoader.java
Patch:
@@ -32,7 +32,7 @@ void doInitialize() {
             drawableData.mergeLibraryStyle(subResourceLoader.drawableData, packageName);
             preferenceData.mergeLibraryStyle(subResourceLoader.preferenceData, packageName);
             xmlDocuments.mergeLibraryStyle(subResourceLoader.xmlDocuments, packageName);
-            rawResourceFiles.mergeLibraryStyle(subResourceLoader.rawResourceFiles, packageName);
+            rawResources.mergeLibraryStyle(subResourceLoader.rawResources, packageName);
         }
     }
 

File: src/main/java/org/robolectric/res/PreferenceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package org.robolectric.res;
 
-import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
@@ -17,9 +16,9 @@ public PreferenceLoader(ResBundle<PreferenceNode> resBundle) {
     }
 
     @Override
-    protected void processResourceXml(File xmlFile, Document document, XmlContext xmlContext) throws Exception {
+    protected void processResourceXml(File xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
         PreferenceNode topLevelNode = new PreferenceNode("top-level", new ArrayList<Attribute>());
-        processChildren(document.getChildNodes(), topLevelNode, xmlContext);
+        processChildren(parse(xmlFile).getChildNodes(), topLevelNode, xmlContext);
         resBundle.put("xml", xmlFile.getName().replace(".xml", ""), topLevelNode.getChildren().get(0), xmlContext);
     }
 

File: src/main/java/org/robolectric/res/XResourceLoader.java
Patch:
@@ -23,7 +23,7 @@ abstract class XResourceLoader implements ResourceLoader {
     final ResBundle<DrawableNode> drawableData = new ResBundle<DrawableNode>();
     final ResBundle<PreferenceNode> preferenceData = new ResBundle<PreferenceNode>();
     final ResBundle<Document> xmlDocuments = new ResBundle<Document>();
-    final ResBundle<File> rawResourceFiles = new ResBundle<File>();
+    final ResBundle<File> rawResources = new ResBundle<File>();
     private final ResourceIndex resourceIndex;
     boolean isInitialized = false;
 
@@ -53,7 +53,7 @@ protected void makeImmutable() {
         drawableData.makeImmutable();
         preferenceData.makeImmutable();
         xmlDocuments.makeImmutable();
-        rawResourceFiles.makeImmutable();
+        rawResources.makeImmutable();
     }
 
     @Override
@@ -117,7 +117,7 @@ public DrawableNode getDrawableNode(ResName resName, String qualifiers) {
     public InputStream getRawValue(ResName resName) {
         initialize();
 
-        File file = rawResourceFiles.get(resName, "");
+        File file = rawResources.get(resName, "");
         try {
             return file == null ? null : new FileInputStream(file);
         } catch (FileNotFoundException e) {

File: src/main/java/org/robolectric/res/XmlFileLoader.java
Patch:
@@ -25,7 +25,7 @@ public XmlFileLoader(ResBundle<Document> resBundle) {
     }
 
     @Override
-    protected void processResourceXml(File xmlFile, Document document, XmlContext xmlContext) throws Exception {
-        resBundle.put("xml", xmlFile.getName().replace(".xml", ""), document, xmlContext);
+    protected void processResourceXml(File xmlFile, XpathResourceXmlLoader.XmlNode xmlNode, XmlContext xmlContext) throws Exception {
+        resBundle.put("xml", xmlFile.getName().replace(".xml", ""), parse(xmlFile), xmlContext);
     }
 }

File: src/main/java/org/robolectric/res/builder/LayoutBuilder.java
Patch:
@@ -243,7 +243,7 @@ public void applyFocusOverride(ViewNode viewNode, ViewParent parent) {
     }
 
     /**
-     * Create a new ViewLoader with the given attributes merged in. If there's a layout attribute, it'll be excluded.
+     * Create a new ViewNode with the given attributes merged in. If there's a layout attribute, it'll be excluded.
      */
     public ViewNode plusAttributes(ViewNode viewNode, List<Attribute> attributes) {
         if (attributes.size() == 0 || attributes.size() == 1 && attributes.get(0).resName.equals(LayoutBuilder.ATTR_LAYOUT)) {

File: src/test/java/org/robolectric/res/AttrResourceLoaderTest.java
Patch:
@@ -16,8 +16,8 @@ public class AttrResourceLoaderTest {
     @Before
     public void setUp() throws Exception {
         attrResourceLoader = new AttrResourceLoader();
-        new DocumentLoader(attrResourceLoader).loadResourceXmlDir(testResources(), "values");
-        new DocumentLoader(attrResourceLoader).loadResourceXmlDir(systemResources(), "values");
+        new DocumentLoader(testResources()).loadResourceXmlDir("values", attrResourceLoader);
+        new DocumentLoader(systemResources()).loadResourceXmlDir("values", attrResourceLoader);
     }
 
     @Test

File: src/test/java/org/robolectric/res/LayoutLoaderTest.java
Patch:
@@ -45,7 +45,7 @@
 import static org.robolectric.util.TestUtil.assertInstanceOf;
 
 @RunWith(TestRunners.WithDefaults.class)
-public class ViewLoaderTest {
+public class LayoutLoaderTest {
     private Activity context;
     private ResourceLoader resourceLoader;
 

File: src/test/java/org/robolectric/res/PluralResourceLoaderTest.java
Patch:
@@ -17,7 +17,7 @@ public void setUp() throws Exception {
         pluralRulesResBundle = new ResBundle<PluralResourceLoader.PluralRules>();
         PluralResourceLoader pluralResourceLoader = new PluralResourceLoader(extractor, pluralRulesResBundle);
 
-        new DocumentLoader( pluralResourceLoader).loadResourceXmlDir(testResources(), "values");
+        new DocumentLoader(testResources()).loadResourceXmlDir("values", pluralResourceLoader);
     }
 
     @Test

File: src/test/java/org/robolectric/res/PreferenceLoaderTest.java
Patch:
@@ -30,7 +30,7 @@ public class PreferenceLoaderTest {
     public void setUp() throws Exception {
         resBundle = new ResBundle<PreferenceNode>();
         prefLoader = new PreferenceLoader(resBundle);
-        new DocumentLoader(prefLoader).loadResourceXmlDir(testResources(), "xml");
+        new DocumentLoader(testResources()).loadResourceXmlDir("xml", prefLoader);
 
         preferenceBuilder = new PreferenceBuilder();
     }

File: src/test/java/org/robolectric/res/RawResourceLoaderTest.java
Patch:
@@ -22,8 +22,8 @@ public class RawResourceLoaderTest {
     @Before public void setUp() throws Exception {
         resourceIndex = new ResourceExtractor(testResources());
         rawResourceFiles = new ResBundle<File>();
-        RawResourceLoader rawResourceLoader = new RawResourceLoader(rawResourceFiles);
-        rawResourceLoader.loadFrom(TEST_RESOURCE_PATH);
+        RawResourceLoader rawResourceLoader = new RawResourceLoader(TEST_RESOURCE_PATH);
+        rawResourceLoader.loadTo(rawResourceFiles);
     }
 
     @Test

File: src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -25,8 +25,6 @@
 public class ResourceLoaderTest {
     private ResourcePath resourcePath;
 
-
-
     @Before
     public void setUp() throws Exception {
         resourcePath = new ResourcePath(R.class, resourceFile("res"), resourceFile("assets"));

File: src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -53,7 +53,7 @@ public class XmlFileLoaderTest {
     public void setUp() throws Exception {
         resBundle = new ResBundle<Document>();
         xmlFileLoader = new XmlFileLoader(resBundle);
-        new DocumentLoader(xmlFileLoader).loadResourceXmlDir(testResources(), "xml");
+        new DocumentLoader(testResources()).loadResourceXmlDir("xml", xmlFileLoader);
         xmlFileBuilder = new XmlFileBuilder();
 
         Document document = resBundle.get(new ResName(TEST_PACKAGE, "xml", "preferences"), "");

File: src/main/java/org/robolectric/res/DocumentLoader.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Map;
 
 public class DocumentLoader {
-    public static boolean DEBUG_PERF = true;
+    public static boolean DEBUG_PERF = false;
     private Map<String, Long> perfResponsibleParties = new HashMap<String, Long>();
 
     private static final FileFilter ENDS_WITH_XML = new FileFilter() {

File: src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -25,8 +25,6 @@
 public class ResourceLoaderTest {
     private ResourcePath resourcePath;
 
-
-
     @Before
     public void setUp() throws Exception {
         resourcePath = new ResourcePath(R.class, resourceFile("res"), resourceFile("assets"));

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -40,6 +40,7 @@
 import org.robolectric.util.DatabaseConfig.DatabaseMap;
 import org.robolectric.util.DatabaseConfig.UsingDatabaseMap;
 import org.robolectric.util.SQLiteMap;
+import org.robolectric.util.Util;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -213,7 +214,7 @@ private URL[] artifactUrls(Dependency... dependencies) {
         int i = 0;
         for (String path : artifacts.values()) {
             try {
-                urls[i++] = new URL("file://" + path);
+                urls[i++] = Util.url(path);
             } catch (MalformedURLException e) {
                 throw new RuntimeException(e);
             }

File: src/main/java/org/robolectric/shadows/ShadowActivity.java
Patch:
@@ -8,6 +8,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.os.Bundle;
 import android.text.Selection;
@@ -649,7 +650,7 @@ public void startManagingCursor(Cursor c) {
     public void stopManagingCursor(Cursor c) {
     	managedCusors.remove(c);
     }
-    
+
     public List<Cursor> getManagedCursors() {
     	return managedCusors;
     }

File: src/main/java/org/robolectric/RobolectricTestRunner.java
Patch:
@@ -213,7 +213,7 @@ private URL[] artifactUrls(Dependency... dependencies) {
         int i = 0;
         for (String path : artifacts.values()) {
             try {
-                urls[i++] = new URL("file://" + path);
+                urls[i++] = new URL("file:/" + path);
             } catch (MalformedURLException e) {
                 throw new RuntimeException(e);
             }

File: src/test/java/org/robolectric/util/FragmentTestUtilTest.java
Patch:
@@ -9,12 +9,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.R;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.TestRunners;
 
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.junit.Assert.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(TestRunners.WithDefaults.class)
 public class FragmentTestUtilTest {
     private LoginFragment fragment;
 

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -15,7 +15,7 @@
 import org.robolectric.internal.Instrument;
 import org.robolectric.internal.ParallelUniverseInterface;
 import org.robolectric.internal.RealObject;
-import org.robolectric.internal.TestLifecycle;
+import org.robolectric.TestLifecycle;
 import org.robolectric.res.ResourceLoader;
 import org.robolectric.res.ResourcePath;
 import org.robolectric.util.DatabaseConfig;

File: src/test/java/org/robolectric/RobolectricTestRunnerSelfTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.DisableStrictI18n;
 import org.robolectric.annotation.EnableStrictI18n;
-import org.robolectric.internal.TestLifecycle;
 
 import java.lang.reflect.Method;
 
@@ -22,7 +21,7 @@ public class RobolectricTestRunnerSelfTest {
     public void shouldInitializeAndBindApplicationButNotCallOnCreate() throws Exception {
         assertNotNull(Robolectric.application);
         assertEquals(MyTestApplication.class, Robolectric.application.getClass());
-        assertFalse(((MyTestApplication) Robolectric.application).onCreateWasCalled);
+        assertTrue(((MyTestApplication) Robolectric.application).onCreateWasCalled);
         assertNotNull(shadowOf(Robolectric.application).getResourceLoader());
     }
 

File: src/test/java/org/robolectric/TestRunners.java
Patch:
@@ -59,7 +59,7 @@ public WithoutDefaults(Class<?> testClass) throws InitializationError {
         }
 
         @Override
-        protected void setupApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
+        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
             // Don't do any resource loading or app init, because that's what we're trying to test here.
         }
     }
@@ -101,7 +101,7 @@ public RealApisWithoutDefaults(Class<?> testClass) throws InitializationError {
         }
 
         @Override
-        protected void setupApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
+        protected void setUpApplicationState(Method method, ParallelUniverseInterface parallelUniverseInterface, boolean strictI18n, ResourceLoader systemResourceLoader, SdkEnvironment sdkEnvironment) {
             // Don't do any resource loading or app init, because that's what we're trying to test here.
         }
     }

File: src/test/java/org/robolectric/internal/ClassNameResolverTest.java
Patch:
@@ -27,7 +27,7 @@ public void shouldResolveClassesByPartiallyQualifiedName() throws Exception {
         assertEquals(TestApplication.class, new ClassNameResolver<Application>("org", ".robolectric.TestApplication").resolve());
     }
 
-    @Test(expected = RuntimeException.class)
+    @Test(expected = ClassNotFoundException.class)
     public void shouldNotResolveClassesByUndottedPartiallyQualifiedNameBecauseAndroidDoesnt() throws Exception {
         new ClassNameResolver<Application>("org", "robolectric.TestApplication").resolve();
     }

File: src/test/java/org/robolectric/internal/ClassNameResolverTest.java
Patch:
@@ -27,7 +27,7 @@ public void shouldResolveClassesByPartiallyQualifiedName() throws Exception {
         assertEquals(TestApplication.class, new ClassNameResolver<Application>("org", ".robolectric.TestApplication").resolve());
     }
 
-    @Test(expected = RuntimeException.class)
+    @Test(expected = ClassNotFoundException.class)
     public void shouldNotResolveClassesByUndottedPartiallyQualifiedNameBecauseAndroidDoesnt() throws Exception {
         new ClassNameResolver<Application>("org", "robolectric.TestApplication").resolve();
     }

File: src/main/java/android/content/TestIntentSender.java
Patch:
@@ -1,6 +1,6 @@
 package android.content;
 
-public class TestIntentSender extends IntentSender{
+public class TestIntentSender extends IntentSender {
     public Intent intent;
 
 }

File: src/main/java/org/robolectric/res/ResourceIndex.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.Map;
 
 public abstract class ResourceIndex {
-    final Map<ResName, Integer> resourceNameToId = new HashMap<ResName, Integer>();
-    final Map<Integer, ResName> resourceIdToResName = new HashMap<Integer, ResName>();
+    protected final Map<ResName, Integer> resourceNameToId = new HashMap<ResName, Integer>();
+    protected final Map<Integer, ResName> resourceIdToResName = new HashMap<Integer, ResName>();
 
     public abstract Integer getResourceId(ResName resName);
 

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -117,7 +117,8 @@ public String getPositionDescription() {
     @Override
     public int getAttributeNameResource(int index) {
         ResName resName = attributes.get(index).resName;
-        return resourceLoader.getResourceIndex().getResourceId(resName);
+        Integer resourceId = resourceLoader.getResourceIndex().getResourceId(resName);
+        return resourceId == null ? 0 : resourceId;
     }
 
     @Override

File: src/main/java/org/robolectric/shadows/ShadowAbsListView.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(AbsListView.class)
+@Implements(value = AbsListView.class, inheritImplementationMethods = true)
 public class ShadowAbsListView extends ShadowAdapterView {
     private AbsListView.OnScrollListener onScrollListener;
     private int smoothScrolledPosition;

File: src/main/java/org/robolectric/shadows/ShadowAbsSeekBar.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.AbsSeekBar;
 import org.robolectric.internal.Implements;
 
-@Implements(AbsSeekBar.class)
+@Implements(value = AbsSeekBar.class, inheritImplementationMethods = true)
 public class ShadowAbsSeekBar extends ShadowProgressBar {
     
     boolean mIsUserSeekable = true;

File: src/main/java/org/robolectric/shadows/ShadowAbsoluteLayout.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(AbsoluteLayout.class)
+@Implements(value = AbsoluteLayout.class, inheritImplementationMethods = true)
 public class ShadowAbsoluteLayout extends ShadowViewGroup {
     @Implements(AbsoluteLayout.LayoutParams.class)
     public static class ShadowLayoutParams extends org.robolectric.shadows.ShadowLayoutParams {

File: src/main/java/org/robolectric/shadows/ShadowAppWidgetHostView.java
Patch:
@@ -5,9 +5,8 @@
 import android.appwidget.AppWidgetProviderInfo;
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
-import org.robolectric.shadows.ShadowFrameLayout;
 
-@Implements(AppWidgetHostView.class)
+@Implements(value = AppWidgetHostView.class, inheritImplementationMethods = true)
 public class ShadowAppWidgetHostView extends ShadowFrameLayout {
 
     private int appWidgetId;

File: src/main/java/org/robolectric/shadows/ShadowBitmapDrawable.java
Patch:
@@ -16,7 +16,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(BitmapDrawable.class)
+@Implements(value = BitmapDrawable.class, inheritImplementationMethods = true)
 public class ShadowBitmapDrawable extends ShadowDrawable {
     private Bitmap bitmap;
     private ColorFilter colorFilter;

File: src/main/java/org/robolectric/shadows/ShadowButton.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.Button;
 import org.robolectric.internal.Implements;
 
-@Implements(Button.class)
+@Implements(value = Button.class, inheritImplementationMethods = true)
 public class ShadowButton extends ShadowTextView {
 
     @Override

File: src/main/java/org/robolectric/shadows/ShadowCheckedTextView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(CheckedTextView.class)
+@Implements(value = CheckedTextView.class, inheritImplementationMethods = true)
 public class ShadowCheckedTextView extends ShadowTextView {
     @RealObject CheckedTextView realCheckedTextView;
     private boolean checked;

File: src/main/java/org/robolectric/shadows/ShadowCompoundButton.java
Patch:
@@ -11,7 +11,7 @@
  * Keeps track of whether or not its "checked" state is set and deals with listeners in an appropriate way.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(CompoundButton.class)
+@Implements(value = CompoundButton.class, inheritImplementationMethods = true)
 public class ShadowCompoundButton extends ShadowTextView implements Checkable {
     private boolean checked;
     private CompoundButton.OnCheckedChangeListener onCheckedChangeListener;

File: src/main/java/org/robolectric/shadows/ShadowEditText.java
Patch:
@@ -11,7 +11,7 @@
  * A shadow for EditText that provides support for listeners
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(EditText.class)
+@Implements(value = EditText.class, inheritImplementationMethods = true)
 public class ShadowEditText extends ShadowTextView {
 
     private int maxLength = Integer.MAX_VALUE;

File: src/main/java/org/robolectric/shadows/ShadowExpandableListView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(ExpandableListView.class)
+@Implements(value = ExpandableListView.class, inheritImplementationMethods = true)
 public class ShadowExpandableListView extends ShadowListView {
     @RealObject private ExpandableListView mExpandable;
     private OnChildClickListener mChildClickListener;

File: src/main/java/org/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -11,7 +11,7 @@
  * Shadow for {@link FrameLayout} that simulates its implementation.
  */
 @SuppressWarnings("UnusedDeclaration")
-@Implements(FrameLayout.class)
+@Implements(value = FrameLayout.class, inheritImplementationMethods = true)
 public class ShadowFrameLayout extends ShadowViewGroup {
     private FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(0, 0);
 

File: src/main/java/org/robolectric/shadows/ShadowGallery.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(Gallery.class)
+@Implements(value = Gallery.class, inheritImplementationMethods = true)
 public class ShadowGallery extends ShadowAbsSpinner {
 
     @RealObject Gallery gallery;

File: src/main/java/org/robolectric/shadows/ShadowGridView.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(GridView.class)
+@Implements(value = GridView.class, inheritImplementationMethods = true)
 public class ShadowGridView extends ShadowAdapterView {
     @RealObject private GridView realGridView;
 

File: src/main/java/org/robolectric/shadows/ShadowImageButton.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.ImageButton;
 import org.robolectric.internal.Implements;
 
-@Implements(ImageButton.class)
+@Implements(value = ImageButton.class, inheritImplementationMethods = true)
 public class ShadowImageButton extends ShadowImageView {
     @Override
     public void applyAttributes() {

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(ImageView.class)
+@Implements(value = ImageView.class, inheritImplementationMethods = true)
 public class ShadowImageView extends ShadowView {
     private Drawable imageDrawable;
     private int resourceId;

File: src/main/java/org/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(LinearLayout.class)
+@Implements(value = LinearLayout.class, inheritImplementationMethods = true)
 public class ShadowLinearLayout extends ShadowViewGroup {
     private int orientation;
     private int gravity = Gravity.TOP | Gravity.START;

File: src/main/java/org/robolectric/shadows/ShadowMapActivity.java
Patch:
@@ -14,7 +14,7 @@
  */
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(MapActivity.class)
+@Implements(value = MapActivity.class, inheritImplementationMethods = true)
 public class ShadowMapActivity extends ShadowActivity {
     private ConnectivityBroadcastReceiver connectivityBroadcastReceiver = new ConnectivityBroadcastReceiver();
 

File: src/main/java/org/robolectric/shadows/ShadowMapView.java
Patch:
@@ -23,7 +23,7 @@
  * {@code Overlay}s, and {@code TouchEvent}s
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(MapView.class)
+@Implements(value = MapView.class, inheritImplementationMethods = true)
 public class ShadowMapView extends ShadowViewGroup {
     private boolean satelliteOn;
     private MapController mapController;

File: src/main/java/org/robolectric/shadows/ShadowMergeCursor.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Implementation for Android {@code MergeCursor} class.
  */
-@Implements(MergeCursor.class)
+@Implements(value = MergeCursor.class, inheritImplementationMethods = true)
 public class ShadowMergeCursor extends ShadowAbstractCursor {
 	
 	private Cursor [] cursors;

File: src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 
-@Implements(NumberPicker.class)
+@Implements(value = NumberPicker.class, inheritImplementationMethods = true)
 public class ShadowNumberPicker extends ShadowLinearLayout {
     private int value;
     private String[] displayedValues;

File: src/main/java/org/robolectric/shadows/ShadowProgressBar.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(ProgressBar.class)
+@Implements(value = ProgressBar.class, inheritImplementationMethods = true)
 public class ShadowProgressBar extends ShadowView {
 
     private int progress;

File: src/main/java/org/robolectric/shadows/ShadowRadioButton.java
Patch:
@@ -10,7 +10,7 @@
  * Shadows the {@code android.widget.RadioButton} class.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(RadioButton.class)
+@Implements(value = RadioButton.class, inheritImplementationMethods = true)
 public class ShadowRadioButton extends ShadowCompoundButton {
 
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowRadioGroup.java
Patch:
@@ -8,7 +8,7 @@
 import static android.widget.RadioGroup.OnCheckedChangeListener;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(RadioGroup.class)
+@Implements(value = RadioGroup.class, inheritImplementationMethods = true)
 public class ShadowRadioGroup extends ShadowLinearLayout {
     @RealObject
     protected RadioGroup realGroup;

File: src/main/java/org/robolectric/shadows/ShadowRatingBar.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(RatingBar.class)
+@Implements(value = RatingBar.class, inheritImplementationMethods = true)
 public class ShadowRatingBar extends ShadowAbsSeekBar {
 
     @RealObject

File: src/main/java/org/robolectric/shadows/ShadowRelativeLayout.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(RelativeLayout.class)
+@Implements(value = RelativeLayout.class, inheritImplementationMethods = true)
 public class ShadowRelativeLayout extends ShadowViewGroup {
 
     public void __constructor__(Context context) {

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -122,7 +122,7 @@ private String getQualifiers() {
 
     @Implementation
     public ColorStateList getColorStateList(int id) {
-        return new ColorStateList(null, null);
+        return new ColorStateList(new int[0][0], new int[0]);
     }
 
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -40,7 +40,7 @@
  * Implemented as a wrapper around an embedded SQL database, accessed via JDBC.  The JDBC connection is
  * made available to test cases for use in fixture setup and assertions.
  */
-@Implements(SQLiteDatabase.class)
+@Implements(value = SQLiteDatabase.class, inheritImplementationMethods = true)
 public class ShadowSQLiteDatabase extends ShadowSQLiteCloseable {
 
     public static final android.database.sqlite.SQLiteDatabase.CursorFactory DEFAULT_CURSOR_FACTORY = new SQLiteDatabase.CursorFactory() {

File: src/main/java/org/robolectric/shadows/ShadowSQLiteProgram.java
Patch:
@@ -12,7 +12,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-@Implements(SQLiteProgram.class)
+@Implements(value = SQLiteProgram.class, inheritImplementationMethods = true)
 public abstract class ShadowSQLiteProgram extends ShadowSQLiteCloseable {
 	@RealObject	SQLiteProgram realSQLiteProgram;
 	protected SQLiteDatabase mDatabase;

File: src/main/java/org/robolectric/shadows/ShadowSQLiteStatement.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-@Implements(SQLiteStatement.class)
+@Implements(value = SQLiteStatement.class, inheritImplementationMethods = true)
 public class ShadowSQLiteStatement extends ShadowSQLiteProgram {
     String mSql;
 

File: src/main/java/org/robolectric/shadows/ShadowScrollView.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(ScrollView.class)
+@Implements(value = ScrollView.class, inheritImplementationMethods = true)
 public class ShadowScrollView extends ShadowFrameLayout {
     @Implementation
     public void smoothScrollTo(int x, int y) {

File: src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -17,7 +17,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Settings.class)
 public class ShadowSettings {
-    @Implements(Settings.class)
+    @Implements(Settings.System.class)
     public static class SettingsImpl {
         private static final WeakHashMap<ContentResolver, Map<String, Object>> dataMap = new WeakHashMap<ContentResolver, Map<String, Object>>();
 
@@ -119,11 +119,11 @@ private static Map<String, Object> get(ContentResolver cr) {
         }
     }
 
-    @Implements(Settings.System.class)
+    @Implements(value = Settings.System.class, inheritImplementationMethods = true)
     public static class ShadowSystem extends SettingsImpl {
     }
 
-    @Implements(Settings.Secure.class)
+    @Implements(value = Settings.Secure.class, inheritImplementationMethods = true)
     public static class ShadowSecure extends SettingsImpl {
     }
 

File: src/main/java/org/robolectric/shadows/ShadowSparseBooleanArray.java
Patch:
@@ -82,7 +82,7 @@ public boolean equals(Object o) {
         if (o == null || o.getClass() != realObject.getClass())
             return false;
 
-        ShadowSparseBooleanArray target = (ShadowSparseBooleanArray) shadowOf((SparseBooleanArray) o);
+        ShadowSparseBooleanArray target = shadowOf((SparseBooleanArray) o);
         return sparseArray.equals(target.sparseArray);
     }
 }

File: src/main/java/org/robolectric/shadows/ShadowSpinner.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Spinner.class)
+@Implements(value = Spinner.class, inheritImplementationMethods = true)
 public class ShadowSpinner extends ShadowAbsSpinner {
 
     private CharSequence prompt;

File: src/main/java/org/robolectric/shadows/ShadowSurfaceView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(SurfaceView.class)
+@Implements(value = SurfaceView.class, inheritImplementationMethods = true)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowSurfaceView extends ShadowView {
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowTabHost.java
Patch:
@@ -17,7 +17,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(TabHost.class)
+@Implements(value = TabHost.class, inheritImplementationMethods = true)
 public class ShadowTabHost extends ShadowFrameLayout {
     private List<TabHost.TabSpec> tabSpecs = new ArrayList<TabHost.TabSpec>();
     private TabHost.OnTabChangeListener listener;

File: src/main/java/org/robolectric/shadows/ShadowVideoView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(VideoView.class)
+@Implements(value = VideoView.class, inheritImplementationMethods = true)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowVideoView extends ShadowSurfaceView {
 	

File: src/main/java/org/robolectric/shadows/ShadowViewAnimator.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Shadow of {@link android.widget.ViewAnimator}
  */
-@Implements(ViewAnimator.class)
+@Implements(value = ViewAnimator.class, inheritImplementationMethods = true)
 public class ShadowViewAnimator extends ShadowFrameLayout {
 
     private int currentChild = 0;

File: src/main/java/org/robolectric/shadows/ShadowViewFlipper.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(ViewFlipper.class)
+@Implements(value = ViewFlipper.class, inheritImplementationMethods = true)
 public class ShadowViewFlipper extends ShadowViewAnimator {
     @RealObject
     protected ViewFlipper realObject;

File: src/main/java/org/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -17,7 +17,7 @@
  * Shadow for {@code ViewGroup} that simulates its implementation
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(ViewGroup.class)
+@Implements(value = ViewGroup.class, inheritImplementationMethods = true)
 public class ShadowViewGroup extends ShadowView {
     private ArrayList<View> children = new ArrayList<View>();
     private AnimationListener animListener;

File: src/main/java/org/robolectric/shadows/ShadowViewStub.java
Patch:
@@ -12,7 +12,7 @@
 import java.lang.ref.WeakReference;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(ViewStub.class)
+@Implements(value = ViewStub.class, inheritImplementationMethods = true)
 public class ShadowViewStub extends ShadowView {
     @RealObject ViewStub viewStub;
 

File: src/main/java/org/robolectric/tester/ConfigTestReceiver.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.test;
+package org.robolectric.tester;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;

File: src/test/java/org/robolectric/AndroidManifestTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldReadBroadcastReceivers() throws Exception {
         assertEquals("org.robolectric.AndroidManifestTest.ConfigTestReceiver", config.getReceiverClassName(1));
         assertEquals("org.robolectric.ACTION2", config.getReceiverIntentFilterActions(1).get(0));
 
-        assertEquals("org.robolectric.test.ConfigTestReceiver", config.getReceiverClassName(2));
+        assertEquals("org.robolectric.tester.ConfigTestReceiver", config.getReceiverClassName(2));
         assertEquals("org.robolectric.ACTION_SUPERSET_PACKAGE", config.getReceiverIntentFilterActions(2).get(0));
 
         assertEquals("org.robolectric.ConfigTestReceiver", config.getReceiverClassName(3));

File: src/test/java/org/robolectric/ApplicationResolverTest.java
Patch:
@@ -48,7 +48,7 @@ public void shouldAssignTheApplicationNameFromTheManifest() throws Exception {
     public void shouldRegisterReceiversFromTheManifest() throws Exception {
         Application application = new ApplicationResolver(newConfig("TestAndroidManifestWithReceivers.xml")).resolveApplication();
         List<ShadowApplication.Wrapper> receivers = shadowOf(application).getRegisteredReceivers();
-        assertEquals(7, receivers.size());
+        assertEquals(6, receivers.size());
         assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
     }
 }

File: src/test/java/org/robolectric/annotation/WithConstantStringTest.java
Patch:
@@ -20,7 +20,7 @@ public void testWithConstantString() {
 
     @Test
     public void testWithoutConstantString() {
-        assertThat(Build.MANUFACTURER).isNull();
+        assertThat(Build.MANUFACTURER).isEqualTo(Build.UNKNOWN);
     }
 
 }

File: src/test/java/org/robolectric/bytecode/ClassicSuperHandlingTest.java
Patch:
@@ -51,6 +51,7 @@ public void whenIntermediateIsShadowed() throws Exception {
         assertEquals(null, new Grandparent().method("boof"));
     }
 
+    @Ignore("this class probably doesn't make much sense anymore...")
     @Test public void whenNoneAreShadowed() throws Exception {
         assertEquals(null, new Child().method("boof"));
         assertEquals(null, new Parent().method("boof"));

File: src/test/java/org/robolectric/bytecode/ShadowMapTest.java
Patch:
@@ -6,16 +6,16 @@
 
 public class ShadowMapTest {
     @Test public void equalsHashCode() throws Exception {
-        ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true).build();
-        ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true).build();
+        ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
+        ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
         assertThat(a).isEqualTo(b);
         assertThat(a.hashCode()).isEqualTo(b.hashCode());
 
         ShadowMap c = b.newBuilder().build();
         assertThat(c).isEqualTo(b);
         assertThat(c.hashCode()).isEqualTo(b.hashCode());
 
-        ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true).build();
+        ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false).build();
         assertThat(d).isNotEqualTo(a);
         assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
     }

File: src/test/java/org/robolectric/shadows/AppWidgetManagerTest.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.ContextWrapper;
+import android.os.Parcel;
 import android.view.View;
 import android.widget.RemoteViews;
 import android.widget.TextView;
@@ -98,7 +99,7 @@ public void getAppWidgetIds() {
 
     @Test
     public void getAppWidgetInfo_shouldReturnSpecifiedAppWidgetInfo() throws Exception {
-        AppWidgetProviderInfo expectedWidgetInfo = new AppWidgetProviderInfo(null);
+        AppWidgetProviderInfo expectedWidgetInfo = new AppWidgetProviderInfo(Parcel.obtain());
         shadowAppWidgetManager.addBoundWidget(26, expectedWidgetInfo);
 
         assertEquals(expectedWidgetInfo, appWidgetManager.getAppWidgetInfo(26));

File: src/test/java/org/robolectric/shadows/ColorTest.java
Patch:
@@ -27,5 +27,7 @@ public void testParseColor() throws Exception {
         assertEquals(-1, Color.parseColor("#ffffffff"));
         assertEquals(0, Color.parseColor("#00000000"));
         assertEquals(-5588020, Color.parseColor("#ffaabbcc"));
+        assertEquals(-5588020, Color.parseColor("#fabc"));
+        assertEquals(-5588020, Color.parseColor("#abc"));
     }
 }
\ No newline at end of file

File: src/test/java/org/robolectric/shadows/DialogPreferenceTest.java
Patch:
@@ -46,14 +46,14 @@ public void testConstructors() {
         preference = new TestDialogPreference(context, attrs, defStyle);
         shadow = Robolectric.shadowOf(preference);
         assertThat(shadow.getContext()).isSameAs(context);
-        assertThat(shadow.getAttrs()).isSameAs((AttributeSet) attrs);
+        assertThat(shadow.getAttrs()).isSameAs(attrs);
         assertThat(shadow.getDefStyle()).isEqualTo(defStyle);
 
         preference = new TestDialogPreference(context, attrs);
         shadow = Robolectric.shadowOf(preference);
         assertThat(shadow.getContext()).isSameAs(context);
-        assertThat(shadow.getAttrs()).isSameAs((AttributeSet) attrs);
-        assertThat(shadow.getDefStyle()).isEqualTo(0);
+        assertThat(shadow.getAttrs()).isSameAs(attrs);
+        assertThat(shadow.getDefStyle()).isGreaterThan(7);
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/DrawableTest.java
Patch:
@@ -103,9 +103,9 @@ public void testCreateFromResourceId_shouldSetTheId() throws Exception {
     public void testWasSelfInvalidated() throws Exception {
         Drawable drawable = ShadowDrawable.createFromResourceId(34758);
         ShadowDrawable shadowDrawable = shadowOf(drawable);
-        assertFalse(shadowDrawable.wasInvalidated());
+        assertThat(shadowDrawable.wasInvalidated()).isFalse();
         drawable.invalidateSelf();
-        assertTrue(shadowDrawable.wasInvalidated());
+        assertThat(shadowDrawable.wasInvalidated()).isTrue();
     }
 
     private static class TestDrawable extends Drawable {

File: src/test/java/org/robolectric/shadows/TextUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
 public class TextUtilsTest {
     @Test
     public void testExpandTemplate() throws Exception {
-        assertThat((String) TextUtils.expandTemplate("a^1b^2c^3d", "A", "B", "C", "D")).isEqualTo("aAbBcCd");
+        assertThat(TextUtils.expandTemplate("a^1b^2c^3d", "A", "B", "C", "D").toString()).isEqualTo("aAbBcCd");
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/TextViewTest.java
Patch:
@@ -113,7 +113,7 @@ public void shouldSetTextAndTextColorWhileInflatingXmlLayout() throws Exception
 
         TextView black = (TextView) activity.findViewById(R.id.black_text_view);
         assertThat(black.getText().toString()).isEqualTo("Black Text");
-        assertThat(shadowOf(black).getTextColorHexValue()).isEqualTo(0);
+        assertThat(shadowOf(black).getTextColorHexValue()).isEqualTo(0xff000000);
 
         TextView white = (TextView) activity.findViewById(R.id.white_text_view);
         assertThat(white.getText().toString()).isEqualTo("White Text");
@@ -131,7 +131,7 @@ public void shouldSetHintAndHintColorWhileInflatingXmlLayout() throws Exception
 
         TextView black = (TextView) activity.findViewById(R.id.black_text_view_hint);
         assertThat(black.getHint().toString()).isEqualTo("Black Hint");
-        assertThat(shadowOf(black).getHintColorHexValue()).isEqualTo(0);
+        assertThat(shadowOf(black).getHintColorHexValue()).isEqualTo(0xff000000);
 
         TextView white = (TextView) activity.findViewById(R.id.white_text_view_hint);
         assertThat(white.getHint().toString()).isEqualTo("White Hint");

File: src/test/java/org/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -235,7 +235,7 @@ public void dump_shouldDumpStructure() throws Exception {
                 "  <FrameLayout id=\"org.robolectric:id/snippet_text\">\n" +
                 "    <View/>\n" +
                 "    <View visibility=\"GONE\"/>\n" +
-                "    <TextView visibility=\"INVISIBLE\" text=\"Here&apos;s some text!\"/>\n" +
+                "    <TextView visibility=\"INVISIBLE\" text=\"Here&#39;s some text!\"/>\n" +
                 "  </FrameLayout>\n" +
                 "</FrameLayout>\n", out.toString());
     }

File: src/main/java/android/content/TestIntentSender.java
Patch:
@@ -1,6 +1,6 @@
 package android.content;
 
-public class TestIntentSender extends IntentSender{
+public class TestIntentSender extends IntentSender {
     public Intent intent;
 
 }

File: src/main/java/org/robolectric/res/ResourceIndex.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.Map;
 
 public abstract class ResourceIndex {
-    final Map<ResName, Integer> resourceNameToId = new HashMap<ResName, Integer>();
-    final Map<Integer, ResName> resourceIdToResName = new HashMap<Integer, ResName>();
+    protected final Map<ResName, Integer> resourceNameToId = new HashMap<ResName, Integer>();
+    protected final Map<Integer, ResName> resourceIdToResName = new HashMap<Integer, ResName>();
 
     public abstract Integer getResourceId(ResName resName);
 

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -117,7 +117,8 @@ public String getPositionDescription() {
     @Override
     public int getAttributeNameResource(int index) {
         ResName resName = attributes.get(index).resName;
-        return resourceLoader.getResourceIndex().getResourceId(resName);
+        Integer resourceId = resourceLoader.getResourceIndex().getResourceId(resName);
+        return resourceId == null ? 0 : resourceId;
     }
 
     @Override

File: src/main/java/org/robolectric/shadows/ShadowAbsListView.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(AbsListView.class)
+@Implements(value = AbsListView.class, inheritImplementationMethods = true)
 public class ShadowAbsListView extends ShadowAdapterView {
     private AbsListView.OnScrollListener onScrollListener;
     private int smoothScrolledPosition;

File: src/main/java/org/robolectric/shadows/ShadowAbsSeekBar.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.AbsSeekBar;
 import org.robolectric.internal.Implements;
 
-@Implements(AbsSeekBar.class)
+@Implements(value = AbsSeekBar.class, inheritImplementationMethods = true)
 public class ShadowAbsSeekBar extends ShadowProgressBar {
     
     boolean mIsUserSeekable = true;

File: src/main/java/org/robolectric/shadows/ShadowAbsoluteLayout.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(AbsoluteLayout.class)
+@Implements(value = AbsoluteLayout.class, inheritImplementationMethods = true)
 public class ShadowAbsoluteLayout extends ShadowViewGroup {
     @Implements(AbsoluteLayout.LayoutParams.class)
     public static class ShadowLayoutParams extends org.robolectric.shadows.ShadowLayoutParams {

File: src/main/java/org/robolectric/shadows/ShadowAppWidgetHostView.java
Patch:
@@ -5,9 +5,8 @@
 import android.appwidget.AppWidgetProviderInfo;
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
-import org.robolectric.shadows.ShadowFrameLayout;
 
-@Implements(AppWidgetHostView.class)
+@Implements(value = AppWidgetHostView.class, inheritImplementationMethods = true)
 public class ShadowAppWidgetHostView extends ShadowFrameLayout {
 
     private int appWidgetId;

File: src/main/java/org/robolectric/shadows/ShadowBitmapDrawable.java
Patch:
@@ -16,7 +16,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(BitmapDrawable.class)
+@Implements(value = BitmapDrawable.class, inheritImplementationMethods = true)
 public class ShadowBitmapDrawable extends ShadowDrawable {
     private Bitmap bitmap;
     private ColorFilter colorFilter;

File: src/main/java/org/robolectric/shadows/ShadowButton.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.Button;
 import org.robolectric.internal.Implements;
 
-@Implements(Button.class)
+@Implements(value = Button.class, inheritImplementationMethods = true)
 public class ShadowButton extends ShadowTextView {
 
     @Override

File: src/main/java/org/robolectric/shadows/ShadowCheckedTextView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(CheckedTextView.class)
+@Implements(value = CheckedTextView.class, inheritImplementationMethods = true)
 public class ShadowCheckedTextView extends ShadowTextView {
     @RealObject CheckedTextView realCheckedTextView;
     private boolean checked;

File: src/main/java/org/robolectric/shadows/ShadowCompoundButton.java
Patch:
@@ -11,7 +11,7 @@
  * Keeps track of whether or not its "checked" state is set and deals with listeners in an appropriate way.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(CompoundButton.class)
+@Implements(value = CompoundButton.class, inheritImplementationMethods = true)
 public class ShadowCompoundButton extends ShadowTextView implements Checkable {
     private boolean checked;
     private CompoundButton.OnCheckedChangeListener onCheckedChangeListener;

File: src/main/java/org/robolectric/shadows/ShadowEditText.java
Patch:
@@ -11,7 +11,7 @@
  * A shadow for EditText that provides support for listeners
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(EditText.class)
+@Implements(value = EditText.class, inheritImplementationMethods = true)
 public class ShadowEditText extends ShadowTextView {
 
     private int maxLength = Integer.MAX_VALUE;

File: src/main/java/org/robolectric/shadows/ShadowExpandableListView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(ExpandableListView.class)
+@Implements(value = ExpandableListView.class, inheritImplementationMethods = true)
 public class ShadowExpandableListView extends ShadowListView {
     @RealObject private ExpandableListView mExpandable;
     private OnChildClickListener mChildClickListener;

File: src/main/java/org/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -11,7 +11,7 @@
  * Shadow for {@link FrameLayout} that simulates its implementation.
  */
 @SuppressWarnings("UnusedDeclaration")
-@Implements(FrameLayout.class)
+@Implements(value = FrameLayout.class, inheritImplementationMethods = true)
 public class ShadowFrameLayout extends ShadowViewGroup {
     private FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(0, 0);
 

File: src/main/java/org/robolectric/shadows/ShadowGallery.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(Gallery.class)
+@Implements(value = Gallery.class, inheritImplementationMethods = true)
 public class ShadowGallery extends ShadowAbsSpinner {
 
     @RealObject Gallery gallery;

File: src/main/java/org/robolectric/shadows/ShadowGridView.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(GridView.class)
+@Implements(value = GridView.class, inheritImplementationMethods = true)
 public class ShadowGridView extends ShadowAdapterView {
     @RealObject private GridView realGridView;
 

File: src/main/java/org/robolectric/shadows/ShadowImageButton.java
Patch:
@@ -3,7 +3,7 @@
 import android.widget.ImageButton;
 import org.robolectric.internal.Implements;
 
-@Implements(ImageButton.class)
+@Implements(value = ImageButton.class, inheritImplementationMethods = true)
 public class ShadowImageButton extends ShadowImageView {
     @Override
     public void applyAttributes() {

File: src/main/java/org/robolectric/shadows/ShadowImageView.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(ImageView.class)
+@Implements(value = ImageView.class, inheritImplementationMethods = true)
 public class ShadowImageView extends ShadowView {
     private Drawable imageDrawable;
     private int resourceId;

File: src/main/java/org/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(LinearLayout.class)
+@Implements(value = LinearLayout.class, inheritImplementationMethods = true)
 public class ShadowLinearLayout extends ShadowViewGroup {
     private int orientation;
     private int gravity = Gravity.TOP | Gravity.START;

File: src/main/java/org/robolectric/shadows/ShadowMapActivity.java
Patch:
@@ -14,7 +14,7 @@
  */
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(MapActivity.class)
+@Implements(value = MapActivity.class, inheritImplementationMethods = true)
 public class ShadowMapActivity extends ShadowActivity {
     private ConnectivityBroadcastReceiver connectivityBroadcastReceiver = new ConnectivityBroadcastReceiver();
 

File: src/main/java/org/robolectric/shadows/ShadowMapView.java
Patch:
@@ -23,7 +23,7 @@
  * {@code Overlay}s, and {@code TouchEvent}s
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(MapView.class)
+@Implements(value = MapView.class, inheritImplementationMethods = true)
 public class ShadowMapView extends ShadowViewGroup {
     private boolean satelliteOn;
     private MapController mapController;

File: src/main/java/org/robolectric/shadows/ShadowMergeCursor.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Implementation for Android {@code MergeCursor} class.
  */
-@Implements(MergeCursor.class)
+@Implements(value = MergeCursor.class, inheritImplementationMethods = true)
 public class ShadowMergeCursor extends ShadowAbstractCursor {
 	
 	private Cursor [] cursors;

File: src/main/java/org/robolectric/shadows/ShadowNumberPicker.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 
-@Implements(NumberPicker.class)
+@Implements(value = NumberPicker.class, inheritImplementationMethods = true)
 public class ShadowNumberPicker extends ShadowLinearLayout {
     private int value;
     private String[] displayedValues;

File: src/main/java/org/robolectric/shadows/ShadowProgressBar.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(ProgressBar.class)
+@Implements(value = ProgressBar.class, inheritImplementationMethods = true)
 public class ShadowProgressBar extends ShadowView {
 
     private int progress;

File: src/main/java/org/robolectric/shadows/ShadowRadioButton.java
Patch:
@@ -10,7 +10,7 @@
  * Shadows the {@code android.widget.RadioButton} class.
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(RadioButton.class)
+@Implements(value = RadioButton.class, inheritImplementationMethods = true)
 public class ShadowRadioButton extends ShadowCompoundButton {
 
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowRadioGroup.java
Patch:
@@ -8,7 +8,7 @@
 import static android.widget.RadioGroup.OnCheckedChangeListener;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(RadioGroup.class)
+@Implements(value = RadioGroup.class, inheritImplementationMethods = true)
 public class ShadowRadioGroup extends ShadowLinearLayout {
     @RealObject
     protected RadioGroup realGroup;

File: src/main/java/org/robolectric/shadows/ShadowRatingBar.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(RatingBar.class)
+@Implements(value = RatingBar.class, inheritImplementationMethods = true)
 public class ShadowRatingBar extends ShadowAbsSeekBar {
 
     @RealObject

File: src/main/java/org/robolectric/shadows/ShadowRelativeLayout.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(RelativeLayout.class)
+@Implements(value = RelativeLayout.class, inheritImplementationMethods = true)
 public class ShadowRelativeLayout extends ShadowViewGroup {
 
     public void __constructor__(Context context) {

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -122,7 +122,7 @@ private String getQualifiers() {
 
     @Implementation
     public ColorStateList getColorStateList(int id) {
-        return new ColorStateList(null, null);
+        return new ColorStateList(new int[0][0], new int[0]);
     }
 
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -40,7 +40,7 @@
  * Implemented as a wrapper around an embedded SQL database, accessed via JDBC.  The JDBC connection is
  * made available to test cases for use in fixture setup and assertions.
  */
-@Implements(SQLiteDatabase.class)
+@Implements(value = SQLiteDatabase.class, inheritImplementationMethods = true)
 public class ShadowSQLiteDatabase extends ShadowSQLiteCloseable {
 
     public static final android.database.sqlite.SQLiteDatabase.CursorFactory DEFAULT_CURSOR_FACTORY = new SQLiteDatabase.CursorFactory() {

File: src/main/java/org/robolectric/shadows/ShadowSQLiteProgram.java
Patch:
@@ -12,7 +12,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-@Implements(SQLiteProgram.class)
+@Implements(value = SQLiteProgram.class, inheritImplementationMethods = true)
 public abstract class ShadowSQLiteProgram extends ShadowSQLiteCloseable {
 	@RealObject	SQLiteProgram realSQLiteProgram;
 	protected SQLiteDatabase mDatabase;

File: src/main/java/org/robolectric/shadows/ShadowSQLiteStatement.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-@Implements(SQLiteStatement.class)
+@Implements(value = SQLiteStatement.class, inheritImplementationMethods = true)
 public class ShadowSQLiteStatement extends ShadowSQLiteProgram {
     String mSql;
 

File: src/main/java/org/robolectric/shadows/ShadowScrollView.java
Patch:
@@ -4,7 +4,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(ScrollView.class)
+@Implements(value = ScrollView.class, inheritImplementationMethods = true)
 public class ShadowScrollView extends ShadowFrameLayout {
     @Implementation
     public void smoothScrollTo(int x, int y) {

File: src/main/java/org/robolectric/shadows/ShadowSettings.java
Patch:
@@ -17,7 +17,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Settings.class)
 public class ShadowSettings {
-    @Implements(Settings.class)
+    @Implements(Settings.System.class)
     public static class SettingsImpl {
         private static final WeakHashMap<ContentResolver, Map<String, Object>> dataMap = new WeakHashMap<ContentResolver, Map<String, Object>>();
 
@@ -119,11 +119,11 @@ private static Map<String, Object> get(ContentResolver cr) {
         }
     }
 
-    @Implements(Settings.System.class)
+    @Implements(value = Settings.System.class, inheritImplementationMethods = true)
     public static class ShadowSystem extends SettingsImpl {
     }
 
-    @Implements(Settings.Secure.class)
+    @Implements(value = Settings.Secure.class, inheritImplementationMethods = true)
     public static class ShadowSecure extends SettingsImpl {
     }
 

File: src/main/java/org/robolectric/shadows/ShadowSparseBooleanArray.java
Patch:
@@ -82,7 +82,7 @@ public boolean equals(Object o) {
         if (o == null || o.getClass() != realObject.getClass())
             return false;
 
-        ShadowSparseBooleanArray target = (ShadowSparseBooleanArray) shadowOf((SparseBooleanArray) o);
+        ShadowSparseBooleanArray target = shadowOf((SparseBooleanArray) o);
         return sparseArray.equals(target.sparseArray);
     }
 }

File: src/main/java/org/robolectric/shadows/ShadowSpinner.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(Spinner.class)
+@Implements(value = Spinner.class, inheritImplementationMethods = true)
 public class ShadowSpinner extends ShadowAbsSpinner {
 
     private CharSequence prompt;

File: src/main/java/org/robolectric/shadows/ShadowSurfaceView.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(SurfaceView.class)
+@Implements(value = SurfaceView.class, inheritImplementationMethods = true)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowSurfaceView extends ShadowView {
     @Implementation

File: src/main/java/org/robolectric/shadows/ShadowTabHost.java
Patch:
@@ -17,7 +17,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(TabHost.class)
+@Implements(value = TabHost.class, inheritImplementationMethods = true)
 public class ShadowTabHost extends ShadowFrameLayout {
     private List<TabHost.TabSpec> tabSpecs = new ArrayList<TabHost.TabSpec>();
     private TabHost.OnTabChangeListener listener;

File: src/main/java/org/robolectric/shadows/ShadowVideoView.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.internal.Implementation;
 import org.robolectric.internal.Implements;
 
-@Implements(VideoView.class)
+@Implements(value = VideoView.class, inheritImplementationMethods = true)
 @SuppressWarnings({"UnusedDeclaration"})
 public class ShadowVideoView extends ShadowSurfaceView {
 	

File: src/main/java/org/robolectric/shadows/ShadowViewAnimator.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Shadow of {@link android.widget.ViewAnimator}
  */
-@Implements(ViewAnimator.class)
+@Implements(value = ViewAnimator.class, inheritImplementationMethods = true)
 public class ShadowViewAnimator extends ShadowFrameLayout {
 
     private int currentChild = 0;

File: src/main/java/org/robolectric/shadows/ShadowViewFlipper.java
Patch:
@@ -5,7 +5,7 @@
 import org.robolectric.internal.Implements;
 import org.robolectric.internal.RealObject;
 
-@Implements(ViewFlipper.class)
+@Implements(value = ViewFlipper.class, inheritImplementationMethods = true)
 public class ShadowViewFlipper extends ShadowViewAnimator {
     @RealObject
     protected ViewFlipper realObject;

File: src/main/java/org/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -17,7 +17,7 @@
  * Shadow for {@code ViewGroup} that simulates its implementation
  */
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(ViewGroup.class)
+@Implements(value = ViewGroup.class, inheritImplementationMethods = true)
 public class ShadowViewGroup extends ShadowView {
     private ArrayList<View> children = new ArrayList<View>();
     private AnimationListener animListener;

File: src/main/java/org/robolectric/shadows/ShadowViewStub.java
Patch:
@@ -12,7 +12,7 @@
 import java.lang.ref.WeakReference;
 
 @SuppressWarnings({"UnusedDeclaration"})
-@Implements(ViewStub.class)
+@Implements(value = ViewStub.class, inheritImplementationMethods = true)
 public class ShadowViewStub extends ShadowView {
     @RealObject ViewStub viewStub;
 

File: src/main/java/org/robolectric/tester/ConfigTestReceiver.java
Patch:
@@ -1,4 +1,4 @@
-package org.robolectric.test;
+package org.robolectric.tester;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;

File: src/test/java/org/robolectric/AndroidManifestTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldReadBroadcastReceivers() throws Exception {
         assertEquals("org.robolectric.AndroidManifestTest.ConfigTestReceiver", config.getReceiverClassName(1));
         assertEquals("org.robolectric.ACTION2", config.getReceiverIntentFilterActions(1).get(0));
 
-        assertEquals("org.robolectric.test.ConfigTestReceiver", config.getReceiverClassName(2));
+        assertEquals("org.robolectric.tester.ConfigTestReceiver", config.getReceiverClassName(2));
         assertEquals("org.robolectric.ACTION_SUPERSET_PACKAGE", config.getReceiverIntentFilterActions(2).get(0));
 
         assertEquals("org.robolectric.ConfigTestReceiver", config.getReceiverClassName(3));

File: src/test/java/org/robolectric/ApplicationResolverTest.java
Patch:
@@ -48,7 +48,7 @@ public void shouldAssignTheApplicationNameFromTheManifest() throws Exception {
     public void shouldRegisterReceiversFromTheManifest() throws Exception {
         Application application = new ApplicationResolver(newConfig("TestAndroidManifestWithReceivers.xml")).resolveApplication();
         List<ShadowApplication.Wrapper> receivers = shadowOf(application).getRegisteredReceivers();
-        assertEquals(7, receivers.size());
+        assertEquals(6, receivers.size());
         assertTrue(receivers.get(0).intentFilter.matchAction("org.robolectric.ACTION1"));
     }
 }

File: src/test/java/org/robolectric/annotation/WithConstantStringTest.java
Patch:
@@ -20,7 +20,7 @@ public void testWithConstantString() {
 
     @Test
     public void testWithoutConstantString() {
-        assertThat(Build.MANUFACTURER).isNull();
+        assertThat(Build.MANUFACTURER).isEqualTo(Build.UNKNOWN);
     }
 
 }

File: src/test/java/org/robolectric/bytecode/ClassicSuperHandlingTest.java
Patch:
@@ -51,6 +51,7 @@ public void whenIntermediateIsShadowed() throws Exception {
         assertEquals(null, new Grandparent().method("boof"));
     }
 
+    @Ignore("this class probably doesn't make much sense anymore...")
     @Test public void whenNoneAreShadowed() throws Exception {
         assertEquals(null, new Child().method("boof"));
         assertEquals(null, new Parent().method("boof"));

File: src/test/java/org/robolectric/bytecode/ShadowMapTest.java
Patch:
@@ -6,16 +6,16 @@
 
 public class ShadowMapTest {
     @Test public void equalsHashCode() throws Exception {
-        ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true).build();
-        ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true).build();
+        ShadowMap a = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
+        ShadowMap b = new ShadowMap.Builder().addShadowClass("a", "b", true, false).build();
         assertThat(a).isEqualTo(b);
         assertThat(a.hashCode()).isEqualTo(b.hashCode());
 
         ShadowMap c = b.newBuilder().build();
         assertThat(c).isEqualTo(b);
         assertThat(c.hashCode()).isEqualTo(b.hashCode());
 
-        ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true).build();
+        ShadowMap d = new ShadowMap.Builder().addShadowClass("a", "x", true, false).build();
         assertThat(d).isNotEqualTo(a);
         assertThat(d.hashCode()).isNotEqualTo(b.hashCode());
     }

File: src/test/java/org/robolectric/shadows/AppWidgetManagerTest.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.ContextWrapper;
+import android.os.Parcel;
 import android.view.View;
 import android.widget.RemoteViews;
 import android.widget.TextView;
@@ -98,7 +99,7 @@ public void getAppWidgetIds() {
 
     @Test
     public void getAppWidgetInfo_shouldReturnSpecifiedAppWidgetInfo() throws Exception {
-        AppWidgetProviderInfo expectedWidgetInfo = new AppWidgetProviderInfo(null);
+        AppWidgetProviderInfo expectedWidgetInfo = new AppWidgetProviderInfo(Parcel.obtain());
         shadowAppWidgetManager.addBoundWidget(26, expectedWidgetInfo);
 
         assertEquals(expectedWidgetInfo, appWidgetManager.getAppWidgetInfo(26));

File: src/test/java/org/robolectric/shadows/ColorTest.java
Patch:
@@ -27,5 +27,7 @@ public void testParseColor() throws Exception {
         assertEquals(-1, Color.parseColor("#ffffffff"));
         assertEquals(0, Color.parseColor("#00000000"));
         assertEquals(-5588020, Color.parseColor("#ffaabbcc"));
+        assertEquals(-5588020, Color.parseColor("#fabc"));
+        assertEquals(-5588020, Color.parseColor("#abc"));
     }
 }
\ No newline at end of file

File: src/test/java/org/robolectric/shadows/DialogPreferenceTest.java
Patch:
@@ -46,14 +46,14 @@ public void testConstructors() {
         preference = new TestDialogPreference(context, attrs, defStyle);
         shadow = Robolectric.shadowOf(preference);
         assertThat(shadow.getContext()).isSameAs(context);
-        assertThat(shadow.getAttrs()).isSameAs((AttributeSet) attrs);
+        assertThat(shadow.getAttrs()).isSameAs(attrs);
         assertThat(shadow.getDefStyle()).isEqualTo(defStyle);
 
         preference = new TestDialogPreference(context, attrs);
         shadow = Robolectric.shadowOf(preference);
         assertThat(shadow.getContext()).isSameAs(context);
-        assertThat(shadow.getAttrs()).isSameAs((AttributeSet) attrs);
-        assertThat(shadow.getDefStyle()).isEqualTo(0);
+        assertThat(shadow.getAttrs()).isSameAs(attrs);
+        assertThat(shadow.getDefStyle()).isGreaterThan(7);
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/DrawableTest.java
Patch:
@@ -103,9 +103,9 @@ public void testCreateFromResourceId_shouldSetTheId() throws Exception {
     public void testWasSelfInvalidated() throws Exception {
         Drawable drawable = ShadowDrawable.createFromResourceId(34758);
         ShadowDrawable shadowDrawable = shadowOf(drawable);
-        assertFalse(shadowDrawable.wasInvalidated());
+        assertThat(shadowDrawable.wasInvalidated()).isFalse();
         drawable.invalidateSelf();
-        assertTrue(shadowDrawable.wasInvalidated());
+        assertThat(shadowDrawable.wasInvalidated()).isTrue();
     }
 
     private static class TestDrawable extends Drawable {

File: src/test/java/org/robolectric/shadows/TextUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
 public class TextUtilsTest {
     @Test
     public void testExpandTemplate() throws Exception {
-        assertThat((String) TextUtils.expandTemplate("a^1b^2c^3d", "A", "B", "C", "D")).isEqualTo("aAbBcCd");
+        assertThat(TextUtils.expandTemplate("a^1b^2c^3d", "A", "B", "C", "D").toString()).isEqualTo("aAbBcCd");
     }
 
     @Test

File: src/test/java/org/robolectric/shadows/TextViewTest.java
Patch:
@@ -113,7 +113,7 @@ public void shouldSetTextAndTextColorWhileInflatingXmlLayout() throws Exception
 
         TextView black = (TextView) activity.findViewById(R.id.black_text_view);
         assertThat(black.getText().toString()).isEqualTo("Black Text");
-        assertThat(shadowOf(black).getTextColorHexValue()).isEqualTo(0);
+        assertThat(shadowOf(black).getTextColorHexValue()).isEqualTo(0xff000000);
 
         TextView white = (TextView) activity.findViewById(R.id.white_text_view);
         assertThat(white.getText().toString()).isEqualTo("White Text");
@@ -131,7 +131,7 @@ public void shouldSetHintAndHintColorWhileInflatingXmlLayout() throws Exception
 
         TextView black = (TextView) activity.findViewById(R.id.black_text_view_hint);
         assertThat(black.getHint().toString()).isEqualTo("Black Hint");
-        assertThat(shadowOf(black).getHintColorHexValue()).isEqualTo(0);
+        assertThat(shadowOf(black).getHintColorHexValue()).isEqualTo(0xff000000);
 
         TextView white = (TextView) activity.findViewById(R.id.white_text_view_hint);
         assertThat(white.getHint().toString()).isEqualTo("White Hint");

File: src/test/java/org/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -235,7 +235,7 @@ public void dump_shouldDumpStructure() throws Exception {
                 "  <FrameLayout id=\"org.robolectric:id/snippet_text\">\n" +
                 "    <View/>\n" +
                 "    <View visibility=\"GONE\"/>\n" +
-                "    <TextView visibility=\"INVISIBLE\" text=\"Here&apos;s some text!\"/>\n" +
+                "    <TextView visibility=\"INVISIBLE\" text=\"Here&#39;s some text!\"/>\n" +
                 "  </FrameLayout>\n" +
                 "</FrameLayout>\n", out.toString());
     }

File: src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -10,13 +10,13 @@ public interface ResourceLoader {
 
     String getNameForId(int id);
 
-    int getColorValue(ResName resName, String qualifiers);
+    String getColorValue(ResName resName, String qualifiers);
 
     String getStringValue(ResName resName, String qualifiers);
 
     String getPluralStringValue(ResName resName, int quantity, String qualifiers);
 
-    float getDimenValue(ResName resName, String qualifiers);
+    String getDimenValue(ResName resName, String qualifiers);
 
     int getIntegerValue(ResName resName, String qualifiers);
 

File: src/main/java/org/robolectric/res/RoutingResourceLoader.java
Patch:
@@ -28,7 +28,7 @@ public String getNameForId(int id) {
     }
 
     @Override
-    public int getColorValue(ResName resName, String qualifiers) {
+    public String getColorValue(ResName resName, String qualifiers) {
         return pickFor(resName).getColorValue(resName, qualifiers);
     }
 
@@ -43,7 +43,7 @@ public String getPluralStringValue(ResName resName, int quantity, String qualifi
     }
 
     @Override
-    public float getDimenValue(ResName resName, String qualifiers) {
+    public String getDimenValue(ResName resName, String qualifiers) {
         return pickFor(resName).getDimenValue(resName, qualifiers);
     }
 

File: src/main/java/org/robolectric/RobolectricBase.java
Patch:
@@ -5,6 +5,7 @@
 import org.robolectric.shadows.ShadowAbsSpinner;
 import org.robolectric.shadows.ShadowAbsoluteLayout;
 import org.robolectric.shadows.ShadowAbstractCursor;
+import org.robolectric.shadows.ShadowAbstractWindowedCursor;
 import org.robolectric.shadows.ShadowAccount;
 import org.robolectric.shadows.ShadowAccountManager;
 import org.robolectric.shadows.ShadowActivity;
@@ -269,6 +270,7 @@ public class RobolectricBase {
             ShadowAbsSeekBar.class,
             ShadowAbsSpinner.class,
             ShadowAbstractCursor.class,
+            ShadowAbstractWindowedCursor.class,
             ShadowAccount.class,
             ShadowAccountManager.class,
             ShadowActivity.class,

File: src/main/java/org/robolectric/bytecode/Setup.java
Patch:
@@ -40,7 +40,6 @@ public class Setup {
             TestLifecycle.class,
             RealObject.class,
             ShadowWrangler.class,
-            Vars.class,
             AndroidManifest.class,
             DatabaseConfig.DatabaseMap.class,
             R.class,
@@ -55,6 +54,7 @@ public class Setup {
             ResourceLoader.class,
             AndroidTranslator.class,
             ClassHandler.class,
+            ClassHandler.Plan.class,
             Implements.class,
             Implementation.class,
             Instrument.class,

File: src/main/java/org/robolectric/bytecode/ShadowMap.java
Patch:
@@ -100,9 +100,9 @@ public Builder addShadowClass(Class<?> shadowClass) {
             }
 
             try {
-                String className = implementsAnnotation.value().getName();
-                if (!implementsAnnotation.className().isEmpty()) {
-                    className = implementsAnnotation.className();
+                String className = implementsAnnotation.className();
+                if (className.isEmpty()) {
+                    className = implementsAnnotation.value().getName();
                 }
                 addShadowClass(className, shadowClass, implementsAnnotation.callThroughByDefault());
             } catch (TypeNotPresentException typeLoadingException) {

File: src/main/java/org/robolectric/EnvHolder.java
Patch:
@@ -14,7 +14,7 @@ synchronized public SdkEnvironment getSdkEnvironment(SdkConfig sdkConfig, SdkEnv
         SdkEnvironment sdkEnvironment = reference == null ? null : reference.get();
         if (sdkEnvironment == null) {
             if (reference != null) {
-                System.out.println("DEBUG: ********************* GC'ed SdkEnvironment reused!");
+                System.out.println("[DEBUG] ********************* GC'ed SdkEnvironment reused!");
             }
 
             sdkEnvironment = factory.create();

File: src/test/java/org/robolectric/R.java
Patch:
@@ -250,6 +250,7 @@ public static final class integer {
         public static final int loneliest_number = 0x10d05;
         public static final int there_can_be_only = 0x10d06;
         public static final int hex_int = 0x10d07;
+        public static final int test_value_with_zero = 0x10d08;
     }
 
     public static final class bool {

File: src/main/java/org/robolectric/shadows/ShadowApplication.java
Patch:
@@ -49,7 +49,7 @@ public class ShadowApplication extends ShadowContextWrapper {
         SYSTEM_SERVICE_MAP.put(Context.WINDOW_SERVICE, "org.robolectric.tester.android.view.TestWindowManager");
         SYSTEM_SERVICE_MAP.put(Context.CLIPBOARD_SERVICE, "android.content.ClipboardManager");
         SYSTEM_SERVICE_MAP.put(Context.SENSOR_SERVICE, "android.hardware.TestSensorManager");
-        SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.TestVibrator");
+        SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.RoboVibrator");
         
         // the rest are as mapped in docs...
         SYSTEM_SERVICE_MAP.put(Context.LAYOUT_INFLATER_SERVICE, "android.view.LayoutInflater");

File: src/test/java/org/robolectric/shadows/ApplicationTest.java
Patch:
@@ -78,7 +78,7 @@ public void shouldProvideServices() throws Exception {
         checkSystemService(Context.SEARCH_SERVICE, android.app.SearchManager.class);
         checkSystemService(Context.SENSOR_SERVICE, android.hardware.TestSensorManager.class);
         checkSystemService(Context.STORAGE_SERVICE, android.os.storage.StorageManager.class);
-        checkSystemService(Context.VIBRATOR_SERVICE, android.os.TestVibrator.class);
+        checkSystemService(Context.VIBRATOR_SERVICE, android.os.RoboVibrator.class);
         checkSystemService(Context.CONNECTIVITY_SERVICE, android.net.ConnectivityManager.class);
         checkSystemService(Context.WIFI_SERVICE, android.net.wifi.WifiManager.class);
         checkSystemService(Context.AUDIO_SERVICE, android.media.AudioManager.class);

File: src/test/java/org/robolectric/R.java
Patch:
@@ -249,6 +249,7 @@ public static final class integer {
         public static final int loneliest_number = 0x10d05;
         public static final int there_can_be_only = 0x10d06;
         public static final int hex_int = 0x10d07;
+        public static final int test_value_with_zero = 0x10d08;
     }
 
     public static final class bool {

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -217,7 +217,7 @@ public void validateStrictI18n() {
     }
 
     private Attribute findByName(String packageName, String attrName) {
-        String namespace = null;
+        String namespace;
         try {
             namespace = URLEncoder.encode(packageName, "UTF-8");
         } catch (UnsupportedEncodingException e) {

File: src/main/java/org/robolectric/shadows/RoboAttributeSet.java
Patch:
@@ -116,7 +116,8 @@ public String getPositionDescription() {
 
     @Override
     public int getAttributeNameResource(int index) {
-        throw new UnsupportedOperationException();
+        ResName resName = attributes.get(index).resName;
+        return resourceLoader.getResourceIndex().getResourceId(resName);
     }
 
     @Override

File: src/test/java/org/robolectric/shadows/ConfigurationTest.java
Patch:
@@ -46,4 +46,7 @@ public void testConstructCopy() {
         assertThat(configuration).isEqualTo(clone);
     }
 
+    @Test public void testToString_shouldntExplode() throws Exception {
+        assertThat(new Configuration().toString()).contains("mcc");
+    }
 }

File: src/main/java/org/robolectric/bytecode/AsmInstrumentingClassLoader.java
Patch:
@@ -223,7 +223,7 @@ public int newClass(String value) {
 
         byte[] classBytes = classWriter.toByteArray();
 
-        if (debug || className.contains("GeoPoint") || className.contains("ClassWithFunnyConstructors")) {
+        if (debug) {
             try {
                 FileOutputStream fileOutputStream = new FileOutputStream("tmp/" + className + ".class");
                 fileOutputStream.write(classBytes);

File: src/main/java/android/os/ShadowAsyncTaskBridge.java
Patch:
@@ -1,6 +1,6 @@
 package android.os;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowAsyncTaskBridge<Params, Progress, Result> {

File: src/main/java/android/os/ShadowBinderBridge.java
Patch:
@@ -1,6 +1,6 @@
 package android.os;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowBinderBridge {

File: src/main/java/android/view/animation/ShadowAnimationBridge.java
Patch:
@@ -1,7 +1,7 @@
 package android.view.animation;
 
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowAnimationBridge {

File: src/main/java/com/google/android/maps/ShadowItemizedOverlayBridge.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.android.maps;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowItemizedOverlayBridge<Item extends OverlayItem> {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAppWidgetHostView.java
Patch:
@@ -3,8 +3,9 @@
 import android.appwidget.AppWidgetHost;
 import android.appwidget.AppWidgetHostView;
 import android.appwidget.AppWidgetProviderInfo;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
+import org.robolectric.shadows.ShadowFrameLayout;
 
 @Implements(AppWidgetHostView.class)
 public class ShadowAppWidgetHostView extends ShadowFrameLayout {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContentObserver.java
Patch:
@@ -2,10 +2,10 @@
 
 import android.database.ContentObserver;
 import android.net.Uri;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.RealObject;
 
 @Implements(ContentObserver.class)
 public class ShadowContentObserver {

File: src/main/java/org/robolectric/RobolectricConfigs.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric;
+package org.robolectric;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;

File: src/main/java/org/robolectric/annotation/DisableStrictI18n.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Indicates that a JUnit test class or method should not be checked for I18N/L10N-safety

File: src/main/java/org/robolectric/annotation/EnableStrictI18n.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Indicates that a JUnit test class or method should be checked for I18N/L10N-safety.

File: src/main/java/org/robolectric/annotation/Values.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
- * Indicate that roboletric should look for values that is specific by those qualifiers
+ * Indicate that robolectric should look for values that is specific by those qualifiers
  * 
  */
 @java.lang.annotation.Documented

File: src/main/java/org/robolectric/annotation/WithConstantInt.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Annotation to run test with setFinalStaticField() defined in a synchronized 

File: src/main/java/org/robolectric/annotation/WithConstantString.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Annotation to run test with setFinalStaticField() defined in a synchronized 

File: src/main/java/org/robolectric/bytecode/IgnorableClassNotFoundException.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import javassist.NotFoundException;
 

File: src/main/java/org/robolectric/internal/ClassNameResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 public class ClassNameResolver<T> {
     private String packageName;

File: src/main/java/org/robolectric/internal/DoNotInstrument.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a class should not be stripped/instrumented under any circumstances.

File: src/main/java/org/robolectric/internal/EmptyRunnable.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 public class EmptyRunnable implements Runnable {
     @Override

File: src/main/java/org/robolectric/internal/Implementation.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a method declaration is intended to Shadow a method with the same signature on the associated

File: src/main/java/org/robolectric/internal/Instrument.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a class should always be instrumented by AndroidTranslator regardless of its package.

File: src/main/java/org/robolectric/internal/RealObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Shadow fields annotated @RealObject will have the real instance injected.

File: src/main/java/org/robolectric/matchers/CompoundButtonCheckedMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.CompoundButton;
 import org.hamcrest.Description;

File: src/main/java/org/robolectric/matchers/HasCompoundDrawablesMatcher.java
Patch:
@@ -1,13 +1,13 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.TextView;
-import com.xtremelabs.robolectric.shadows.ShadowTextView;
+import org.robolectric.shadows.ShadowTextView;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class HasCompoundDrawablesMatcher extends TypeSafeMatcher<TextView> {
     private String message;

File: src/main/java/org/robolectric/matchers/HasResourceMatcher.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.ImageView;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class HasResourceMatcher extends TypeSafeMatcher<ImageView> {
     private int expectedResourceId;

File: src/main/java/org/robolectric/matchers/StartedMatcher.java
Patch:
@@ -1,14 +1,14 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.app.Activity;
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.content.Intent;
-import com.xtremelabs.robolectric.shadows.ShadowIntent;
+import org.robolectric.shadows.ShadowIntent;
 import org.hamcrest.Description;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class StartedMatcher extends TypeSafeMatcher<Context> {
     private final Intent expectedIntent;

File: src/main/java/org/robolectric/matchers/TextViewHasTextMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.TextView;
 import org.hamcrest.Description;

File: src/main/java/org/robolectric/matchers/ViewHasTextMatcher.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.view.View;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class ViewHasTextMatcher<T extends View> extends TypeSafeMatcher<T> {
     private String expected;

File: src/main/java/org/robolectric/res/ResourceValueConverter.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 public interface ResourceValueConverter {
     Object convertRawValue(String rawValue);

File: src/main/java/org/robolectric/shadows/HttpResponseGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;

File: src/main/java/org/robolectric/shadows/ShadowAbsListView.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsListView;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(AbsListView.class)
 public class ShadowAbsListView extends ShadowAdapterView {

File: src/main/java/org/robolectric/shadows/ShadowAbsSeekBar.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsSeekBar;
 
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(AbsSeekBar.class)
 public class ShadowAbsSeekBar extends ShadowProgressBar {

File: src/main/java/org/robolectric/shadows/ShadowAbsSpinner.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsSpinner;
 import android.widget.SpinnerAdapter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AbsSpinner.class)

File: src/main/java/org/robolectric/shadows/ShadowActivityGroup.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.Activity;
 import android.app.ActivityGroup;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ActivityGroup.class)
 public class ShadowActivityGroup extends ShadowActivity {

File: src/main/java/org/robolectric/shadows/ShadowAddress.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.location.Address;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 
 @SuppressWarnings({"UnusedDeclaration"})

File: src/main/java/org/robolectric/shadows/ShadowAlphaAnimation.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.animation.AlphaAnimation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AlphaAnimation.class)

File: src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.media.AudioManager;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AudioManager.class)

File: src/main/java/org/robolectric/shadows/ShadowBase64.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.util.Base64;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.io.UnsupportedEncodingException;
 

File: src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.bluetooth.BluetoothDevice;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(BluetoothDevice.class)
 public class ShadowBluetoothDevice {

File: src/main/java/org/robolectric/shadows/ShadowButton.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Button;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(Button.class)
 public class ShadowButton extends ShadowTextView {

File: src/main/java/org/robolectric/shadows/ShadowCameraSize.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.hardware.Camera;
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 /**
  * Shadow for the Android {@code Camera.Size} value object.

File: src/main/java/org/robolectric/shadows/ShadowColor.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.Color;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(Color.class)
 public class ShadowColor {

File: src/main/java/org/robolectric/shadows/ShadowColorMatrixColorFilter.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.ColorMatrix;
 import android.graphics.ColorMatrixColorFilter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ColorMatrixColorFilter.class)

File: src/main/java/org/robolectric/shadows/ShadowColorStateList.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.res.ColorStateList;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ColorStateList.class)

File: src/main/java/org/robolectric/shadows/ShadowCompoundButton.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Checkable;
 import android.widget.CompoundButton;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadows the {@code android.widget.CompoundButton} class.

File: src/main/java/org/robolectric/shadows/ShadowContentProviderResult.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import java.lang.reflect.Field;
 
 import android.content.ContentProviderResult;
 import android.net.Uri;
 
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 @Implements(ContentProviderResult.class)
 public class ShadowContentProviderResult {

File: src/main/java/org/robolectric/shadows/ShadowContentUris.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.ContentUris;
 import android.net.Uri;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ContentUris.class)
 public class ShadowContentUris {

File: src/main/java/org/robolectric/shadows/ShadowResources.java
Patch:
@@ -178,6 +178,9 @@ public CharSequence getText(int id) throws Resources.NotFoundException {
 
     public void setDensity(float density) {
         this.density = density;
+        if (displayMetrics != null) {
+            displayMetrics.density = density;
+        }
     }
 
     public void setDisplay(Display display) {

File: src/test/java/org/robolectric/shadows/DialogFragmentTest.java
Patch:
@@ -108,6 +108,8 @@ public void dismiss_shouldDismissTheDialog() throws Exception {
         Dialog dialog = ShadowDialog.getLatestDialog();
         assertFalse(dialog.isShowing());
         assertTrue(shadowOf(dialog).hasBeenDismissed());
+        
+        assertNull(fragmentManager.findFragmentByTag("tag"));
     }
 
     @Test

File: src/test/java/org/robolectric/RobolectricTestRunnerClassLoaderSetup.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-
 import org.robolectric.bytecode.RobolectricClassLoader;
 
 

File: src/test/java/org/robolectric/R.java
Patch:
@@ -95,6 +95,8 @@ public static final class id {
 
         public static final int marsupial = 0x10031;
         public static final int ungulate = 0x10032;
+
+        public static final int custom_view = 0x10033;
     }
 
     public static final class string {

File: src/test/java/org/robolectric/util/CustomView.java
Patch:
@@ -7,10 +7,13 @@
 
 public class CustomView extends LinearLayout {
     public int attributeResourceValue;
+    public int namespacedResourceValue;
+    public static final String fakeNS = "http://example.com/fakens";
 
     public CustomView(Context context, AttributeSet attrs) {
         super(context, attrs);
         inflate(context, R.layout.inner_merge, this);
         attributeResourceValue = attrs.getAttributeResourceValue(R.class.getPackage().getName(), "message", -1);
+        namespacedResourceValue = attrs.getAttributeResourceValue(fakeNS, "message", -1);
     }
 }

File: src/main/java/org/robolectric/shadows/ShadowLocalBroadcastManager.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.robolectric.Robolectric.shadowOf;
 
-@Implements(LocalBroadcastManager.class)
+@Implements(value = LocalBroadcastManager.class, callThroughByDefault = true)
 public class ShadowLocalBroadcastManager {
     @Implementation
     public static LocalBroadcastManager getInstance(final Context context) {

File: src/test/java/org/robolectric/shadows/AccountManagerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.robolectric.TestRunners;
 
 import static org.hamcrest.CoreMatchers.*;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertThat;
 
 @RunWith(TestRunners.WithDefaults.class)
@@ -27,7 +28,7 @@ public void setUp() throws Exception {
     public void testGet() {
         AccountManager appAM = AccountManager.get(app);
         assertThat(appAM, notNullValue());
-        assertThat(AccountManager.get(app), sameInstance(appAM));
+        assertSame(AccountManager.get(app), appAM);
 
         Activity a = new Activity();
         assertThat(AccountManager.get(a), notNullValue());

File: src/main/java/org/robolectric/res/Attribute.java
Patch:
@@ -78,9 +78,9 @@ public static Attribute find(List<Attribute> attributes, ResName resName) {
         return null;
     }
 
-    public static Attribute find(List<Attribute> attributes, int attrId, ResourceExtractor resourceExtractor) {
+    public static Attribute find(List<Attribute> attributes, int attrId, ResourceIndex resourceIndex) {
         for (Attribute attribute : attributes) {
-          Integer resourceId = resourceExtractor.getResourceId(attribute.resName);
+          Integer resourceId = resourceIndex.getResourceId(attribute.resName);
           if (resourceId != null && resourceId == attrId) {
                 return attribute;
             }
@@ -123,7 +123,7 @@ public static String addType(String possiblyPartiallyQualifiedAttrName, String t
 
     public String qualifiedValue() {
         if (value.startsWith("@")) {
-            return ResourceExtractor.qualifyResourceName(value.substring(1), contextPackageName);
+            return ResName.qualifyResourceName(value.substring(1), contextPackageName);
         } else {
             return value;
         }

File: src/main/java/org/robolectric/res/MenuLoader.java
Patch:
@@ -45,7 +45,7 @@ private void processNode(Node node, MenuNode parent, XmlContext xmlContext) {
             int length = attributesNodes.getLength();
             for (int i = 0; i < length; i++) {
                 Node attr = attributesNodes.item(i);
-                String resourceName = ResourceExtractor.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
+                String resourceName = ResName.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
                 attributes.add(new Attribute(Attribute.addType(resourceName, "attr"), attr.getNodeValue(), xmlContext.packageName));
             }
         }

File: src/main/java/org/robolectric/res/PluralResourceLoader.java
Patch:
@@ -13,7 +13,7 @@
 public class PluralResourceLoader extends XpathResourceXmlLoader {
     private ResBundle<PluralRules> pluralRulesResBundle;
 
-    public PluralResourceLoader(ResourceExtractor resourceExtractor, ResBundle<PluralRules> pluralRulesResBundle) {
+    public PluralResourceLoader(ResourceIndex resourceIndex, ResBundle<PluralRules> pluralRulesResBundle) {
         super("/resources/plurals", "plurals");
         this.pluralRulesResBundle = pluralRulesResBundle;
     }

File: src/main/java/org/robolectric/res/PreferenceLoader.java
Patch:
@@ -39,7 +39,7 @@ private void processNode(Node node, PreferenceNode parent, XmlContext xmlContext
             int length = attributes.getLength();
             for (int i = 0; i < length; i++) {
                 Node attr = attributes.item(i);
-                String attrName = ResourceExtractor.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
+                String attrName = ResName.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
                 if (attrName.startsWith("xmlns:")) {
                     // ignore
                 } else {

File: src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -34,7 +34,7 @@ public interface ResourceLoader {
 
     PreferenceNode getPreferenceNode(ResName resName, String qualifiers);
 
-    ResourceExtractor getResourceExtractor();
+    ResourceIndex getResourceIndex();
 
     ViewNode getLayoutViewNode(ResName resName, String qualifiers);
 

File: src/main/java/org/robolectric/res/builder/LayoutBuilder.java
Patch:
@@ -53,7 +53,7 @@ private View doInflate(Context context, ViewNode viewNode, ViewGroup parent, Str
     }
 
     public View inflateView(Context context, int resourceId, ViewGroup parent, String qualifiers) {
-        ViewNode viewNode = resourceLoader.getLayoutViewNode(resourceLoader.getResourceExtractor().getResName(resourceId), qualifiers);
+        ViewNode viewNode = resourceLoader.getLayoutViewNode(resourceLoader.getResourceIndex().getResName(resourceId), qualifiers);
         if (viewNode == null) {
             String name = resourceLoader.getNameForId(resourceId);
             throw new RuntimeException("Could not find layout " + (name == null ? resourceId : name));

File: src/main/java/org/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -243,7 +243,7 @@ public void attachBaseContext(Context context) {
         baseContext = context;
     }
 
-    private ShadowApplication getShadowApplication() {
+    public ShadowApplication getShadowApplication() {
         return ((ShadowApplication) shadowOf(getApplicationContext()));
     }
 

File: src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -143,6 +143,8 @@ public void dismiss() {
         hasBeenDismissed = true;
 
         if (onDismissListener != null) {
+            DialogInterface.OnDismissListener onDismissListener = this.onDismissListener;
+            this.onDismissListener = null;
             onDismissListener.onDismiss(realDialog);
         }
     }

File: src/main/java/org/robolectric/shadows/ShadowMenuInflater.java
Patch:
@@ -32,7 +32,7 @@ public void __constructor__(Context context) {
     @Implementation
     public void inflate(int resource, Menu root) {
         String qualifiers = shadowOf(context.getResources().getConfiguration()).getQualifiers();
-        MenuNode menuNode = resourceLoader.getMenuNode(resourceLoader.getResourceExtractor().getResName(resource), qualifiers);
+        MenuNode menuNode = resourceLoader.getMenuNode(resourceLoader.getResourceIndex().getResName(resource), qualifiers);
 
         try {
             addChildrenInGroup(menuNode, 0, root);

File: src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -873,8 +873,7 @@ private void applyBackgroundAttribute() {
     }
 
     private void applyOnClickAttribute() {
-        final String handlerName = attributeSet.getAttributeValue("android",
-                "onClick");
+        final String handlerName = attributeSet.getAttributeValue("android", "onClick");
         if (handlerName == null) {
             return;
         }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -85,7 +85,7 @@ public static final class id {
         public static final int lam_container = 0x10028;
         public static final int lam_inner_contents = 0x10029;
         public static final int my_fragment = 0x1002a;
-        public static final int my_landscape_fragment = 0x1002b;
+        public static final int my_landscape_text = 0x1002b;
 
         public static final int itemType = 0x1002c;
         public static final int scrollBars = 0x1002d;

File: src/test/java/org/robolectric/lib1/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public final class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib1_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/lib2/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public final class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib2_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/lib3/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib3_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/res/PluralResourceLoaderTest.java
Patch:
@@ -13,7 +13,7 @@ public class PluralResourceLoaderTest {
 
     @Before
     public void setUp() throws Exception {
-        ResourceExtractor extractor = new ResourceExtractor(testResources());
+        ResourceIndex extractor = new ResourceExtractor(testResources());
 
         pluralRulesResBundle = new ResBundle<PluralResourceLoader.PluralRules>();
         PluralResourceLoader pluralResourceLoader = new PluralResourceLoader(extractor, pluralRulesResBundle);

File: src/test/java/org/robolectric/res/ViewLoaderTest.java
Patch:
@@ -276,6 +276,9 @@ public void testFragment() throws Exception {
     @Test
     public void testMultiOrientation() throws Exception {
         context = new FragmentActivity();
+        shadowOf(context).callOnCreate(null);
+        shadowOf(context).callOnStart();
+        shadowOf(context).callOnResume();
 
         // Default screen orientation should be portrait.
         ViewGroup view = (ViewGroup) inflate("multi_orientation");

File: src/test/java/org/robolectric/res/XmlFileLoaderTest.java
Patch:
@@ -49,8 +49,6 @@ public class XmlFileLoaderTest {
 
     @Before
     public void setUp() throws Exception {
-        ResourceExtractor resourceExtractor = new ResourceExtractor(testResources(), systemResources());
-
         resBundle = new ResBundle<Document>();
         xmlFileLoader = new XmlFileLoader(resBundle);
         new DocumentLoader(xmlFileLoader).loadResourceXmlDir(testResources(), "xml");

File: src/test/java/org/robolectric/shadows/PreferenceGroupTest.java
Patch:
@@ -7,6 +7,7 @@
 import android.util.AttributeSet;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.res.EmptyResourceLoader;
 import org.robolectric.res.PackageResourceLoader;
 import org.robolectric.res.Attribute;
 import org.junit.Before;
@@ -30,7 +31,7 @@ public class PreferenceGroupTest {
     @Before
     public void setUp() throws Exception {
     	context = new Activity();
-    	attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new PackageResourceLoader(), null);
+    	attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new EmptyResourceLoader(), null);
 
     	group = new TestPreferenceGroup(context, attrs);
     	shadow = Robolectric.shadowOf(group);

File: src/test/java/org/robolectric/shadows/ViewTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.robolectric.R;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
+import org.robolectric.res.EmptyResourceLoader;
 import org.robolectric.res.PackageResourceLoader;
 import org.robolectric.res.Attribute;
 import org.robolectric.tester.android.view.TestWindow;
@@ -292,7 +293,7 @@ public void shouldRememberIsPressed() {
 
     @Test
     public void shouldAddOnClickListenerFromAttribute() throws Exception {
-      RoboAttributeSet attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new PackageResourceLoader(), null);
+      RoboAttributeSet attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new EmptyResourceLoader(), null);
       attrs.put("android:attr/onClick", "clickMe", R.class.getPackage().getName());
 
       view = new View(null, attrs);
@@ -308,7 +309,7 @@ public void clickMe(View view) {
           called.set(true);
         }
       };
-      RoboAttributeSet attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new PackageResourceLoader(), null);
+      RoboAttributeSet attrs = new RoboAttributeSet(new ArrayList<Attribute>(), new EmptyResourceLoader(), null);
       attrs.put("android:attr/onClick", "clickMe", R.class.getPackage().getName());
 
       view = new View(context, attrs);

File: src/main/java/org/robolectric/shadows/ShadowDialog.java
Patch:
@@ -143,6 +143,8 @@ public void dismiss() {
         hasBeenDismissed = true;
 
         if (onDismissListener != null) {
+            DialogInterface.OnDismissListener onDismissListener = this.onDismissListener;
+            this.onDismissListener = null;
             onDismissListener.onDismiss(realDialog);
         }
     }

File: src/main/java/org/robolectric/shadows/ShadowView.java
Patch:
@@ -873,8 +873,7 @@ private void applyBackgroundAttribute() {
     }
 
     private void applyOnClickAttribute() {
-        final String handlerName = attributeSet.getAttributeValue("android",
-                "onClick");
+        final String handlerName = attributeSet.getAttributeValue("android", "onClick");
         if (handlerName == null) {
             return;
         }

File: src/test/java/org/robolectric/R.java
Patch:
@@ -85,7 +85,7 @@ public static final class id {
         public static final int lam_container = 0x10028;
         public static final int lam_inner_contents = 0x10029;
         public static final int my_fragment = 0x1002a;
-        public static final int my_landscape_fragment = 0x1002b;
+        public static final int my_landscape_text = 0x1002b;
 
         public static final int itemType = 0x1002c;
         public static final int scrollBars = 0x1002d;

File: src/test/java/org/robolectric/lib1/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public final class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib1_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/lib2/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public final class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib2_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/lib3/R.java
Patch:
@@ -2,7 +2,7 @@
 
 public class R {
     public static final class id {
-        public static int button = 0x7f010001;
+        public static int lib_button = 0x7f010001;
         public static int lib3_button = 0x7f010002;
     }
 

File: src/test/java/org/robolectric/res/ViewLoaderTest.java
Patch:
@@ -276,6 +276,9 @@ public void testFragment() throws Exception {
     @Test
     public void testMultiOrientation() throws Exception {
         context = new FragmentActivity();
+        shadowOf(context).callOnCreate(null);
+        shadowOf(context).callOnStart();
+        shadowOf(context).callOnResume();
 
         // Default screen orientation should be portrait.
         ViewGroup view = (ViewGroup) inflate("multi_orientation");

File: src/main/java/org/robolectric/res/OverlayResourceLoader.java
Patch:
@@ -28,6 +28,8 @@ void doInitialize() {
             viewNodes.mergeLibraryStyle(subResourceLoader.viewNodes, packageName);
             menuNodes.mergeLibraryStyle(subResourceLoader.menuNodes, packageName);
             drawableNodes.mergeLibraryStyle(subResourceLoader.drawableNodes, packageName);
+            preferenceNodes.mergeLibraryStyle(subResourceLoader.preferenceNodes, packageName);
+            xmlDocuments.mergeLibraryStyle(subResourceLoader.xmlDocuments, packageName);
         }
     }
 

File: src/main/java/org/robolectric/res/ResourceExtractor.java
Patch:
@@ -65,7 +65,7 @@ private void addRClass(Class<?> rClass) {
     }
 
     @Override
-    public Integer getResourceId(ResName resName) {
+    public synchronized Integer getResourceId(ResName resName) {
         Integer id = resourceNameToId.get(resName);
         if (id == null && "android".equals(resName.namespace)) {
             if (maxUsedInt == null) {
@@ -80,7 +80,7 @@ public Integer getResourceId(ResName resName) {
     }
 
     @Override
-    public ResName getResName(int resourceId) {
+    public synchronized ResName getResName(int resourceId) {
         return resourceIdToResName.get(resourceId);
     }
 }
\ No newline at end of file

File: src/test/java/org/robolectric/shadows/DialogFragmentTest.java
Patch:
@@ -32,6 +32,9 @@ public void setUp() throws Exception {
         activity = new FragmentActivity();
         dialogFragment = new TestDialogFragment();
         fragmentManager = activity.getSupportFragmentManager();
+        shadowOf(activity).callOnCreate(null);
+        shadowOf(activity).callOnStart();
+        shadowOf(activity).callOnResume();
     }
 
     @Test

File: src/main/java/org/robolectric/bytecode/ClassHandler.java
Patch:
@@ -7,7 +7,7 @@ public interface ClassHandler {
 
     Object methodInvoked(Class clazz, String methodName, Object instance, String[] paramTypes, Object[] params) throws Throwable;
 
-    Object intercept(Class clazz, String methodName, Object instance, Object[] paramTypes, Object[] params) throws Throwable;
+    Object intercept(String className, String methodName, Object instance, Object[] paramTypes, Object[] params) throws Throwable;
 
     // todo: definitely shouldn't live here
     void setStrictI18n(boolean strictI18n);

File: src/main/java/org/robolectric/bytecode/RobolectricClassLoader.java
Patch:
@@ -20,9 +20,9 @@ public RobolectricClassLoader(ClassLoader classLoader, ClassCache classCache, An
         super(classLoader, null);
         this.setup = setup;
 
-        List<Class<?>> classesToDelegate = setup.getClassesToDelegateFromRcl();
-        for (Class<?> aClass : classesToDelegate) {
-            delegateLoadingOf(aClass.getName());
+        List<String> classesToDelegate = setup.getClassesToDelegateFromRcl();
+        for (String className : classesToDelegate) {
+            delegateLoadingOf(className);
         }
 
 

File: src/main/java/org/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -24,6 +24,9 @@ static AssetManager bind(AssetManager assetManager, AndroidManifest androidManif
 
     private AndroidManifest appManifest;
 
+    public final void __constructor__() {
+    }
+
     @Implementation
     public final String[] list(String path) throws IOException {
         File file = new File(appManifest.getAssetsDirectory(), path);

File: src/main/java/org/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -20,6 +20,9 @@ public class ShadowNetworkInfo {
     private int connectionSubType;
     private NetworkInfo.DetailedState detailedState;
 
+    public static void __staticInitializer__() {
+    }
+
     public static NetworkInfo newInstance() {
         return newInstance(null);
     }

File: src/main/java/org/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -6,6 +6,8 @@
 
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
+    public static void __staticInitializer__() {
+    }
 
     private String macAddress;
 

File: src/main/java/org/robolectric/util/Scheduler.java
Patch:
@@ -30,8 +30,8 @@ public synchronized boolean isPaused() {
 
     public synchronized void postDelayed(Runnable runnable, long delayMillis) {
         if (paused || delayMillis > 0 || Thread.currentThread() != associatedThread) {
-	        postedRunnables.add(new PostedRunnable(runnable, currentTime + delayMillis));
-	        Collections.sort(postedRunnables);
+            postedRunnables.add(new PostedRunnable(runnable, currentTime + delayMillis));
+            Collections.sort(postedRunnables);
         } else {
             runnable.run();
         }
@@ -43,7 +43,7 @@ public synchronized void post(Runnable runnable) {
 
     public synchronized void postAtFrontOfQueue(Runnable runnable) {
         if (paused || Thread.currentThread() != associatedThread) {
-        	postedRunnables.add(0, new PostedRunnable(runnable, currentTime));
+            postedRunnables.add(0, new PostedRunnable(runnable, currentTime));
         } else {
             runnable.run();
         }

File: src/test/java/android/webkit/TestWebSettingsTest.java
Patch:
@@ -1,14 +1,15 @@
 package android.webkit;
 
-import org.robolectric.TestRunners;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.TestRunners;
+import org.robolectric.internal.DoNotInstrument;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(TestRunners.WithDefaults.class)
+@RunWith(TestRunners.WithDefaults.class) @DoNotInstrument
 public class TestWebSettingsTest {
 
     private TestWebSettings webSettings;

File: src/test/java/org/robolectric/bytecode/AndroidTranslatorClassInstrumentedTest.java
Patch:
@@ -43,7 +43,7 @@ public void testEnumConstructorsAreNotRewritten() {
 
     /*
      * Test "foreign class" getting its methods shadowed whe it's
-     * in the RobolectricClassLoader CustomClassNames arrayList
+     * in the InstrumentingClassLoader CustomClassNames arrayList
      */
     @Test
     public void testCustomMethodShadowed() throws Exception {
@@ -56,7 +56,7 @@ public void testCustomMethodShadowed() throws Exception {
 
     /*
      * Test "foreign class" not getting its methods shadowed when it's
-     * not in the RobolectricClassLoader CustomClassNames arrayList
+     * not in the InstrumentingClassLoader CustomClassNames arrayList
      */
     @Test
     public void testCustomMethodNotShadowed() throws Exception {

File: src/test/java/org/robolectric/bytecode/AndroidTranslatorUnitTest.java
Patch:
@@ -15,7 +15,7 @@ public class AndroidTranslatorUnitTest {
 
     @Test
     public void testOnLoadWithNonInstrumentedClass() throws Exception {
-        ClassCache cache = mock(ClassCache.class);
+        ClassCache cache = mock(ZipClassCache.class);
 
         AndroidTranslator translator = new AndroidTranslator(cache, new Setup());
 
@@ -26,7 +26,7 @@ public void testOnLoadWithNonInstrumentedClass() throws Exception {
 
     @Test(expected = IllegalStateException.class)
     public void shouldThrowIllegalStateIfClassCacheIsWriting() throws Exception {
-        ClassCache cache = mock(ClassCache.class);
+        ClassCache cache = mock(ZipClassCache.class);
         when(cache.isWriting()).thenReturn(true);
         new AndroidTranslator(cache, new Setup()).onLoad(classPool, "java.lang.Object");
     }

File: src/test/java/org/robolectric/bytecode/CustomRobolectricTestRunnerTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldInitializeApplication() throws Exception {
     @Test
     public void shouldInvokePrepareTestWithAnInstanceOfTheTest() throws Exception {
         assertEquals(this, preparedTest);
-        assertEquals(RobolectricClassLoader.class.getName(), preparedTest.getClass().getClassLoader().getClass().getName());
+        assertEquals(AsmInstrumentingClassLoader.class.getName(), preparedTest.getClass().getClassLoader().getClass().getName());
     }
 
     @Test

File: src/test/java/org/robolectric/bytecode/RobolectricWiringTest.java
Patch:
@@ -33,6 +33,7 @@ public void testAllImplementationMethodsHaveCorrectSignature() throws Exception
     private void verifyClass(final Class<?> shadowClass) {
         Implements annotation = shadowClass.getAnnotation(Implements.class);
         Class implementedClass = annotation.value();
+        if (implementedClass.getName().equals(Robolectric.Anything.class.getName())) return;
 
         try {
             shadowClass.getConstructor(implementedClass);

File: src/test/java/org/robolectric/bytecode/StaticInitializerTest.java
Patch:
@@ -27,7 +27,7 @@ public void whenClassHasShadowWithoutOverrideMethod_shouldPerformStaticInitializ
         bindShadowClass(ShadowClassWithoutStaticInitializerOverride.class);
         assertEquals("Floyd", ClassWithStaticInitializerB.name);
 
-        AndroidTranslator.performStaticInitialization(ClassWithStaticInitializerB.class);
+        RobolectricInternals.performStaticInitialization(ClassWithStaticInitializerB.class);
         assertEquals("Floyd", ClassWithStaticInitializerB.name);
     }
 
@@ -43,7 +43,7 @@ public void whenClassHasShadowWithOverrideMethod_shouldDeferStaticInitialization
         assertEquals(null, ClassWithStaticInitializerC.name);
         assertTrue(ShadowClassWithStaticInitializerOverride.initialized);
 
-        AndroidTranslator.performStaticInitialization(ClassWithStaticInitializerC.class);
+        RobolectricInternals.performStaticInitialization(ClassWithStaticInitializerC.class);
         assertEquals("Floyd", ClassWithStaticInitializerC.name);
     }
 

File: src/test/java/org/robolectric/shadows/DialogTest.java
Patch:
@@ -119,7 +119,7 @@ public void show_setsLatestDialog() {
         
         dialog.show();
 
-        assertEquals(dialog, ShadowDialog.getLatestDialog());
+        assertSame(dialog, ShadowDialog.getLatestDialog());
         assertNull(ShadowAlertDialog.getLatestAlertDialog());
     }
 

File: src/test/java/org/robolectric/shadows/FragmentActivityTest.java
Patch:
@@ -133,7 +133,7 @@ public void onStart_shouldStartFragments() throws Exception {
 
         activity = new TestFragmentActivity();
         activity.onCreate(bundle);
-        shadowOf(activity).onStart();
+        shadowOf(activity).callOnStart();
         TestFragmentManager fragmentManager = (TestFragmentManager) activity.getSupportFragmentManager();
         assertEquals(2, fragmentManager.getFragments().size());
         TestFragment restoredFrag = (TestFragment) fragmentManager.getFragments().get(containerId);

File: src/test/java/org/robolectric/shadows/FragmentManagerTest.java
Patch:
@@ -148,7 +148,7 @@ public void getFragment_whenBundleSavedByShadowFragmentActivity_shouldGetFragmen
         manager.addFragment(CONTAINER_VIEW_ID, "fragment tag", fragment, true);
 
         Bundle outState = new Bundle();
-        shadowOf(activity).onSaveInstanceState(outState);
+        shadowOf(activity).callOnSaveInstanceState(outState);
 
         Fragment retrievedFragment = manager.getFragment(outState, "fragment tag");
         assertEquals(TestFragment.class, retrievedFragment.getClass());

File: src/test/java/org/robolectric/shadows/MapViewTest.java
Patch:
@@ -7,7 +7,7 @@
 import com.google.android.maps.GeoPoint;
 import com.google.android.maps.MapView;
 import org.robolectric.TestRunners;
-import org.robolectric.bytecode.AndroidTranslatorTest;
+import org.robolectric.bytecode.ShadowingTest;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -163,7 +163,7 @@ private static class MyOnTouchListener implements View.OnTouchListener {
         }
     }
 
-    private class MyOverlay extends AndroidTranslatorTest.ItemizedOverlayForTests {
+    private class MyOverlay extends ShadowingTest.ItemizedOverlayForTests {
         private MotionEvent lastMotionEvent;
         private boolean shouldConsumeEvent = true;
 

File: src/test/java/org/robolectric/shadows/ScrollerTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.robolectric.shadows;
 
+import android.view.animation.BounceInterpolator;
 import android.widget.Scroller;
 import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
@@ -16,7 +17,7 @@ public class ScrollerTest {
 
     @Before
     public void setup() throws Exception {
-        scroller = new Scroller(null, null);
+        scroller = new Scroller(Robolectric.application, new BounceInterpolator());
     }
 
     @Test
@@ -42,7 +43,6 @@ public void shouldScrollOverTime() throws Exception {
 
     @Test
     public void computeScrollOffsetShouldCalculateWhetherScrollIsFinished() throws Exception {
-
         assertThat(scroller.computeScrollOffset(), equalTo(false));
 
         scroller.startScroll(0, 0, 12, 36, 1000);

File: src/test/java/org/robolectric/shadows/TextViewTest.java
Patch:
@@ -351,7 +351,7 @@ public void onTouchEvent_shouldCallMovementMethodOnTouchEventWithSetMotionEvent(
 
     @Test
     public void canSetAndGetLayout() throws Exception {
-        StaticLayout layout = new StaticLayout(null, null, 0, null, 0, 0, true);
+        StaticLayout layout = new StaticLayout("", new TextPaint(), 0, Layout.Alignment.ALIGN_CENTER, 0, 0, true);
         shadowOf(textView).setLayout(layout);
         assertEquals(textView.getLayout(), layout);
     }

File: src/test/java/org/robolectric/shadows/ViewPagerTest.java
Patch:
@@ -33,12 +33,14 @@ public void shouldSetAndGetAdapter() throws Exception {
 
     @Test
     public void test_getAndSetCurrentItem() throws Exception {
+        pager.setAdapter(adapter);
         pager.setCurrentItem(2);
         assertEquals(2, pager.getCurrentItem());
     }
 
     @Test
     public void setCurrentItem_shouldInvokeListener() throws Exception {
+        pager.setAdapter(adapter);
         TestOnPageChangeListener listener = new TestOnPageChangeListener();
         pager.setOnPageChangeListener(listener);
         assertFalse(listener.onPageSelectedCalled);
@@ -49,7 +51,7 @@ public void setCurrentItem_shouldInvokeListener() throws Exception {
     private static class TestPagerAdapter extends PagerAdapter {
         @Override
         public int getCount() {
-            return 0;
+            return 3;
         }
 
         @Override

File: src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -70,15 +70,15 @@ public void classInitializing(Class clazz) {
                 method.invoke(null);
             } catch (NoSuchMethodException e) {
                 if (setup.shouldPerformStaticInitializationIfShadowIsMissing()) {
-                    AndroidTranslator.performStaticInitialization(clazz);
+                    RobolectricInternals.performStaticInitialization(clazz);
                 }
             } catch (InvocationTargetException e) {
                 throw new RuntimeException(e);
             } catch (IllegalAccessException e) {
                 throw new RuntimeException(e);
             }
         } else {
-            AndroidTranslator.performStaticInitialization(clazz);
+            RobolectricInternals.performStaticInitialization(clazz);
         }
     }
 

File: src/test/java/org/robolectric/bytecode/InstrumentingClassLoaderTest.java
Patch:
@@ -526,7 +526,6 @@ public Map<String, String> classNameTranslations() {
 
         @Override
         public boolean shouldAcquire(String name) {
-            System.out.println("name = " + name);
             if (name.equals(AClassToForget.class.getName())) throw new RuntimeException(name + " not found (for pretend)!");
             return super.shouldAcquire(name);
         }

File: src/test/java/org/robolectric/bytecode/StaticInitializerTest.java
Patch:
@@ -27,7 +27,7 @@ public void whenClassHasShadowWithoutOverrideMethod_shouldPerformStaticInitializ
         bindShadowClass(ShadowClassWithoutStaticInitializerOverride.class);
         assertEquals("Floyd", ClassWithStaticInitializerB.name);
 
-        AndroidTranslator.performStaticInitialization(ClassWithStaticInitializerB.class);
+        RobolectricInternals.performStaticInitialization(ClassWithStaticInitializerB.class);
         assertEquals("Floyd", ClassWithStaticInitializerB.name);
     }
 
@@ -43,7 +43,7 @@ public void whenClassHasShadowWithOverrideMethod_shouldDeferStaticInitialization
         assertEquals(null, ClassWithStaticInitializerC.name);
         assertTrue(ShadowClassWithStaticInitializerOverride.initialized);
 
-        AndroidTranslator.performStaticInitialization(ClassWithStaticInitializerC.class);
+        RobolectricInternals.performStaticInitialization(ClassWithStaticInitializerC.class);
         assertEquals("Floyd", ClassWithStaticInitializerC.name);
     }
 

File: src/main/java/org/robolectric/bytecode/AsmInstrumentingClassLoader.java
Patch:
@@ -52,7 +52,7 @@ public class AsmInstrumentingClassLoader extends ClassLoader implements Opcodes,
     private static final Type STRING_TYPE = getType(String.class);
     private static final Type ROBOLECTRIC_INTERNALS_TYPE = Type.getType(RobolectricInternals.class);
 
-    private static boolean debug = true;
+    private static boolean debug = false;
 
     private final Setup setup;
     private final URLClassLoader urls;

File: src/test/java/org/robolectric/RobolectricTestRunnerClassLoaderSetupTest.java
Patch:
@@ -1,10 +1,9 @@
 package org.robolectric;
 
-import org.robolectric.bytecode.JavassistInstrumentingClassLoader;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.TestRunners;
+import org.robolectric.bytecode.AsmInstrumentingClassLoader;
 
 
 @RunWith(TestRunners.WithDefaults.class)
@@ -13,6 +12,6 @@ public class RobolectricTestRunnerClassLoaderSetupTest {
     @Test
     public void testUsingClassLoader() throws ClassNotFoundException {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-        Assert.assertEquals(classLoader.getClass().getName(), JavassistInstrumentingClassLoader.class.getName());
+        Assert.assertEquals(classLoader.getClass().getName(), AsmInstrumentingClassLoader.class.getName());
     }
 }

File: src/test/java/org/robolectric/shadows/MapViewTest.java
Patch:
@@ -7,7 +7,7 @@
 import com.google.android.maps.GeoPoint;
 import com.google.android.maps.MapView;
 import org.robolectric.TestRunners;
-import org.robolectric.bytecode.AndroidTranslatorTest;
+import org.robolectric.bytecode.ShadowingTest;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -163,7 +163,7 @@ private static class MyOnTouchListener implements View.OnTouchListener {
         }
     }
 
-    private class MyOverlay extends AndroidTranslatorTest.ItemizedOverlayForTests {
+    private class MyOverlay extends ShadowingTest.ItemizedOverlayForTests {
         private MotionEvent lastMotionEvent;
         private boolean shouldConsumeEvent = true;
 

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -181,6 +181,8 @@ public static String directMethodName(String className, String methodName) {
         String simpleName = className;
         int lastDotIndex = simpleName.lastIndexOf(".");
         if (lastDotIndex != -1) simpleName = simpleName.substring(lastDotIndex + 1);
+        int lastDollarIndex = simpleName.lastIndexOf("$");
+        if (lastDollarIndex != -1) simpleName = simpleName.substring(lastDollarIndex + 1);
         return String.format("$$robo$$%s_%04x_%s", simpleName, className.hashCode() & 0xffff, methodName);
     }
 }

File: src/main/java/org/robolectric/bytecode/MethodGenerator.java
Patch:
@@ -169,7 +169,7 @@ public void fixMethod(final CtMethod ctMethod, boolean isDeclaredOnClass) throws
             }
 
             CtClass returnCtClass = ctMethod.getReturnType();
-            Type returnType = Type.find(returnCtClass);
+            RoboType returnType = RoboType.find(returnCtClass);
 
             String methodName = ctMethod.getName();
             CtClass[] paramTypes = ctMethod.getParameterTypes();
@@ -270,7 +270,7 @@ public String makeParameterList(int length) {
         return buf.toString();
     }
 
-    public String generateMethodBody(CtMethod ctMethod, boolean wasNative, boolean wasAbstract, CtClass returnCtClass, Type returnType, boolean aStatic, boolean shouldGenerateCallToSuper) throws NotFoundException {
+    public String generateMethodBody(CtMethod ctMethod, boolean wasNative, boolean wasAbstract, CtClass returnCtClass, RoboType returnType, boolean aStatic, boolean shouldGenerateCallToSuper) throws NotFoundException {
         String methodBody;
         if (wasAbstract) {
             methodBody = returnType.isVoid() ? "" : "return " + returnType.defaultReturnString() + ";";
@@ -284,7 +284,7 @@ public String generateMethodBody(CtMethod ctMethod, boolean wasNative, boolean w
         return methodBody;
     }
 
-    public String generateMethodBody(CtMethod ctMethod, CtClass returnCtClass, Type returnType, boolean isStatic, boolean shouldGenerateCallToSuper) throws NotFoundException {
+    public String generateMethodBody(CtMethod ctMethod, CtClass returnCtClass, RoboType returnType, boolean isStatic, boolean shouldGenerateCallToSuper) throws NotFoundException {
         boolean returnsVoid = returnType.isVoid();
         String className = ctClass.getName();
 

File: src/main/java/org/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -161,7 +161,7 @@ private void reportNoShadowMethodFound(Class clazz, String methodName, String[]
     }
 
     public static Class<?> loadClass(String paramType, ClassLoader classLoader) {
-        Class primitiveClass = Type.findPrimitiveClass(paramType);
+        Class primitiveClass = RoboType.findPrimitiveClass(paramType);
         if (primitiveClass != null) return primitiveClass;
 
         int arrayLevel = 0;
@@ -170,7 +170,7 @@ public static Class<?> loadClass(String paramType, ClassLoader classLoader) {
             paramType = paramType.substring(0, paramType.length() - 2);
         }
 
-        Class<?> clazz = Type.findPrimitiveClass(paramType);
+        Class<?> clazz = RoboType.findPrimitiveClass(paramType);
         if (clazz == null) {
             try {
                 clazz = classLoader.loadClass(paramType);

File: src/test/java/com/xtremelabs/robolectric/RobolectricTestRunnerClassLoaderSetup.java
Patch:
@@ -1,16 +1,16 @@
 package com.xtremelabs.robolectric;
 
+import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
-
 
 @RunWith(WithTestDefaultsRunner.class)
 public class RobolectricTestRunnerClassLoaderSetup {
 
     @Test
+    // TODO this test fails in IntelliJ
     public void testUsingClassLoader() throws ClassNotFoundException {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         Assert.assertEquals(classLoader.getClass().getName(), RobolectricClassLoader.class.getName());

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -400,6 +400,7 @@ public static void resetStaticState() {
         ShadowMimeTypeMap.reset();
         ShadowPowerManager.reset();
         ShadowStatFs.reset();
+        ShadowTypeface.reset();
     }
 
     public static <T> T directlyOn(T shadowedObject) {

File: src/test/java/org/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() throws Exception {
 
     @Test
     public void shouldLoadSystemResources() throws Exception {
-        PackageResourceLoader resourceLoader = new PackageResourceLoader(resourcePath, systemResourcePath);
+        ResourceLoader resourceLoader = Robolectric.getShadowApplication().getResourceLoader();
         String stringValue = resourceLoader.getStringValue(resourceLoader.getResourceExtractor().getResName(android.R.string.copy), "");
         assertEquals("Copy", stringValue);
 

File: src/main/java/android/os/ShadowAsyncTaskBridge.java
Patch:
@@ -1,6 +1,6 @@
 package android.os;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowAsyncTaskBridge<Params, Progress, Result> {

File: src/main/java/android/os/ShadowBinderBridge.java
Patch:
@@ -1,6 +1,6 @@
 package android.os;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowBinderBridge {

File: src/main/java/android/view/animation/ShadowAnimationBridge.java
Patch:
@@ -1,7 +1,7 @@
 package android.view.animation;
 
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowAnimationBridge {

File: src/main/java/android/webkit/TestWebSettings.java
Patch:
@@ -1,7 +1,7 @@
 package android.webkit;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
-import com.xtremelabs.robolectric.internal.Implementation;
+import org.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.Implementation;
 
 /**
  * Concrete implementation of the abstract WebSettings class.

File: src/main/java/com/google/android/maps/ShadowItemizedOverlayBridge.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.android.maps;
 
-import com.xtremelabs.robolectric.internal.DoNotInstrument;
+import org.robolectric.internal.DoNotInstrument;
 
 @DoNotInstrument
 public class ShadowItemizedOverlayBridge<Item extends OverlayItem> {

File: src/main/java/org/robolectric/RobolectricConfigs.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric;
+package org.robolectric;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;

File: src/main/java/org/robolectric/annotation/DisableStrictI18n.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Indicates that a JUnit test class or method should not be checked for I18N/L10N-safety

File: src/main/java/org/robolectric/annotation/EnableStrictI18n.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Indicates that a JUnit test class or method should be checked for I18N/L10N-safety.

File: src/main/java/org/robolectric/annotation/Values.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Indicate that robolectric should look for values that is specific by those qualifiers

File: src/main/java/org/robolectric/annotation/WithConstantInt.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Annotation to run test with setFinalStaticField() defined in a synchronized 

File: src/main/java/org/robolectric/annotation/WithConstantString.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.annotation;
+package org.robolectric.annotation;
 
 /**
  * Annotation to run test with setFinalStaticField() defined in a synchronized 

File: src/main/java/org/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import android.net.Uri;
 import javassist.*;

File: src/main/java/org/robolectric/bytecode/ClassCache.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;

File: src/main/java/org/robolectric/bytecode/ClassHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 public interface ClassHandler {
     void reset();

File: src/main/java/org/robolectric/bytecode/IgnorableClassNotFoundException.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import javassist.NotFoundException;
 

File: src/main/java/org/robolectric/bytecode/MethodGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import javassist.*;
 import javassist.expr.ConstructorCall;

File: src/main/java/org/robolectric/bytecode/RobolectricClassLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import javassist.CannotCompileException;
 import javassist.ClassPool;

File: src/main/java/org/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;

File: src/main/java/org/robolectric/bytecode/Type.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 import javassist.CtClass;
 

File: src/main/java/org/robolectric/bytecode/Vars.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.bytecode;
+package org.robolectric.bytecode;
 
 public class Vars {
     public static final ThreadLocal<Vars> ALL_VARS = new ThreadLocal<Vars>() {

File: src/main/java/org/robolectric/internal/ClassNameResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 public class ClassNameResolver<T> {
     private String packageName;

File: src/main/java/org/robolectric/internal/DoNotInstrument.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a class should not be stripped/instrumented under any circumstances.

File: src/main/java/org/robolectric/internal/EmptyRunnable.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 public class EmptyRunnable implements Runnable {
     @Override

File: src/main/java/org/robolectric/internal/Implementation.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a method declaration is intended to Shadow a method with the same signature on the associated

File: src/main/java/org/robolectric/internal/Implements.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 
 /**

File: src/main/java/org/robolectric/internal/Instrument.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Indicates that a class should always be instrumented by AndroidTranslator regardless of its package.

File: src/main/java/org/robolectric/internal/RealObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 /**
  * Shadow fields annotated @RealObject will have the real instance injected.

File: src/main/java/org/robolectric/internal/RobolectricTestRunnerInterface.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.internal;
+package org.robolectric.internal;
 
 import org.junit.runners.model.TestClass;
 

File: src/main/java/org/robolectric/matchers/CompoundButtonCheckedMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.CompoundButton;
 import org.hamcrest.Description;

File: src/main/java/org/robolectric/matchers/HasCompoundDrawablesMatcher.java
Patch:
@@ -1,13 +1,13 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.TextView;
-import com.xtremelabs.robolectric.shadows.ShadowTextView;
+import org.robolectric.shadows.ShadowTextView;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class HasCompoundDrawablesMatcher extends TypeSafeMatcher<TextView> {
     private String message;

File: src/main/java/org/robolectric/matchers/HasResourceMatcher.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.ImageView;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class HasResourceMatcher extends TypeSafeMatcher<ImageView> {
     private int expectedResourceId;

File: src/main/java/org/robolectric/matchers/StartedMatcher.java
Patch:
@@ -1,14 +1,14 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.app.Activity;
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.content.Intent;
-import com.xtremelabs.robolectric.shadows.ShadowIntent;
+import org.robolectric.shadows.ShadowIntent;
 import org.hamcrest.Description;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class StartedMatcher extends TypeSafeMatcher<Context> {
     private final Intent expectedIntent;

File: src/main/java/org/robolectric/matchers/TextViewHasTextMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.widget.TextView;
 import org.hamcrest.Description;

File: src/main/java/org/robolectric/matchers/ViewHasTextMatcher.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.view.View;
 import org.hamcrest.Description;
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
 import org.junit.internal.matchers.TypeSafeMatcher;
 
-import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf;
 
 public class ViewHasTextMatcher<T extends View> extends TypeSafeMatcher<T> {
     private String expected;

File: src/main/java/org/robolectric/matchers/ViewVisibilityMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.matchers;
+package org.robolectric.matchers;
 
 import android.view.View;
 import org.hamcrest.Description;

File: src/main/java/org/robolectric/res/AndroidResourcePathFinder.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.R;
-import com.xtremelabs.robolectric.util.PropertiesHelper;
+import org.robolectric.util.PropertiesHelper;
 
 import java.io.BufferedReader;
 import java.io.File;

File: src/main/java/org/robolectric/res/AttrResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.view.View;
 import org.w3c.dom.Document;

File: src/main/java/org/robolectric/res/DirectoryMatchingFileFilter.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import java.io.File;
 import java.io.FileFilter;

File: src/main/java/org/robolectric/res/DocumentLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 

File: src/main/java/org/robolectric/res/DrawableNode.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.jetbrains.annotations.NotNull;
 import org.w3c.dom.Document;

File: src/main/java/org/robolectric/res/DrawableResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 

File: src/main/java/org/robolectric/res/MenuLoader.java
Patch:
@@ -1,6 +1,6 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.Attribute;
+import org.robolectric.tester.android.util.Attribute;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;

File: src/main/java/org/robolectric/res/MenuNode.java
Patch:
@@ -1,6 +1,6 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.Attribute;
+import org.robolectric.tester.android.util.Attribute;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/main/java/org/robolectric/res/PackageResourceLoader.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.content.Context;
 import android.content.res.XmlResourceParser;
 import android.preference.PreferenceScreen;
 import android.view.View;
-import com.xtremelabs.robolectric.tester.android.util.ResName;
-import com.xtremelabs.robolectric.util.I18nException;
+import org.robolectric.tester.android.util.ResName;
+import org.robolectric.util.I18nException;
 
 import java.io.File;
 import java.io.InputStream;

File: src/main/java/org/robolectric/res/PluralResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;

File: src/main/java/org/robolectric/res/RawResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import java.io.File;
 import java.io.FileInputStream;

File: src/main/java/org/robolectric/res/ResBundle.java
Patch:
@@ -1,6 +1,6 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.ResName;
+import org.robolectric.tester.android.util.ResName;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: src/main/java/org/robolectric/res/ResourceExtractor.java
Patch:
@@ -1,6 +1,6 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.ResName;
+import org.robolectric.tester.android.util.ResName;
 import org.jetbrains.annotations.NotNull;
 
 import java.lang.reflect.Field;

File: src/main/java/org/robolectric/res/ResourceLoader.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.XmlResourceParser;
 import android.graphics.drawable.Drawable;
 import android.preference.PreferenceScreen;
 import android.view.View;
-import com.xtremelabs.robolectric.tester.android.util.ResName;
+import org.robolectric.tester.android.util.ResName;
 
 import java.io.InputStream;
 

File: src/main/java/org/robolectric/res/ResourcePath.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import java.io.File;
 

File: src/main/java/org/robolectric/res/ResourceRemapper.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;

File: src/main/java/org/robolectric/res/ResourceValueConverter.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 public interface ResourceValueConverter {
     Object convertRawValue(String rawValue);

File: src/main/java/org/robolectric/res/RobolectricPackageManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.content.ComponentName;
 import android.content.ContextWrapper;
@@ -8,8 +8,8 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.ResolveInfo;
 import android.graphics.drawable.Drawable;
-import com.xtremelabs.robolectric.AndroidManifest;
-import com.xtremelabs.robolectric.tester.android.content.pm.StubPackageManager;
+import org.robolectric.AndroidManifest;
+import org.robolectric.tester.android.content.pm.StubPackageManager;
 
 import java.util.*;
 

File: src/main/java/org/robolectric/res/RoutingResourceLoader.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.content.Context;
 import android.content.res.XmlResourceParser;
 import android.preference.PreferenceScreen;
 import android.view.View;
-import com.xtremelabs.robolectric.tester.android.util.ResName;
+import org.robolectric.tester.android.util.ResName;
 
 import java.io.InputStream;
 import java.util.HashSet;

File: src/main/java/org/robolectric/res/ValueResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;

File: src/main/java/org/robolectric/res/ViewLoader.java
Patch:
@@ -1,6 +1,6 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.Attribute;
+import org.robolectric.tester.android.util.Attribute;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;

File: src/main/java/org/robolectric/res/XTagXmlResourceLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;

File: src/main/java/org/robolectric/res/XmlFileLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import android.content.res.Resources;
 import android.content.res.XmlResourceParser;

File: src/main/java/org/robolectric/res/XmlLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 

File: src/main/java/org/robolectric/res/XpathResourceXmlLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.res;
+package org.robolectric.res;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;

File: src/main/java/org/robolectric/shadows/HttpResponseGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;

File: src/main/java/org/robolectric/shadows/SerializedFragmentState.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.support.v4.app.Fragment;
 

File: src/main/java/org/robolectric/shadows/ShadowAbsListView.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsListView;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(AbsListView.class)
 public class ShadowAbsListView extends ShadowAdapterView {

File: src/main/java/org/robolectric/shadows/ShadowAbsSeekBar.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsSeekBar;
 
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(AbsSeekBar.class)
 public class ShadowAbsSeekBar extends ShadowProgressBar {

File: src/main/java/org/robolectric/shadows/ShadowAbsSpinner.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.AbsSpinner;
 import android.widget.SpinnerAdapter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AbsSpinner.class)

File: src/main/java/org/robolectric/shadows/ShadowActivityGroup.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.Activity;
 import android.app.ActivityGroup;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ActivityGroup.class)
 public class ShadowActivityGroup extends ShadowActivity {

File: src/main/java/org/robolectric/shadows/ShadowActivityManager.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.ActivityManager;
 import android.content.pm.ConfigurationInfo;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/main/java/org/robolectric/shadows/ShadowAddress.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.location.Address;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 
 @SuppressWarnings({"UnusedDeclaration"})

File: src/main/java/org/robolectric/shadows/ShadowAlphaAnimation.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.animation.AlphaAnimation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AlphaAnimation.class)

File: src/main/java/org/robolectric/shadows/ShadowAnimationDrawable.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.drawable.AnimationDrawable;
 import android.graphics.drawable.Drawable;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/main/java/org/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.media.AudioManager;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(AudioManager.class)

File: src/main/java/org/robolectric/shadows/ShadowBase64.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.util.Base64;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.io.UnsupportedEncodingException;
 

File: src/main/java/org/robolectric/shadows/ShadowBluetoothDevice.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.bluetooth.BluetoothDevice;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(BluetoothDevice.class)
 public class ShadowBluetoothDevice {

File: src/main/java/org/robolectric/shadows/ShadowButton.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Button;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(Button.class)
 public class ShadowButton extends ShadowTextView {

File: src/main/java/org/robolectric/shadows/ShadowCameraSize.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.hardware.Camera;
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 /**
  * Shadow for the Android {@code Camera.Size} value object.

File: src/main/java/org/robolectric/shadows/ShadowClipboardManager.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.ClipboardManager;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ClipboardManager.class)
 public class ShadowClipboardManager {

File: src/main/java/org/robolectric/shadows/ShadowColor.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.Color;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(Color.class)
 public class ShadowColor {

File: src/main/java/org/robolectric/shadows/ShadowColorMatrixColorFilter.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.ColorMatrix;
 import android.graphics.ColorMatrixColorFilter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ColorMatrixColorFilter.class)

File: src/main/java/org/robolectric/shadows/ShadowColorStateList.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.res.ColorStateList;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ColorStateList.class)

File: src/main/java/org/robolectric/shadows/ShadowCompoundButton.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Checkable;
 import android.widget.CompoundButton;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadows the {@code android.widget.CompoundButton} class.

File: src/main/java/org/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.HashMap;
 import java.util.Map;

File: src/main/java/org/robolectric/shadows/ShadowContentProviderResult.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import java.lang.reflect.Field;
 
 import android.content.ContentProviderResult;
 import android.net.Uri;
 
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 @Implements(ContentProviderResult.class)
 public class ShadowContentProviderResult {

File: src/main/java/org/robolectric/shadows/ShadowContentUris.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.ContentUris;
 import android.net.Uri;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ContentUris.class)
 public class ShadowContentUris {

File: src/main/java/org/robolectric/shadows/ShadowContextThemeWrapper.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.view.ContextThemeWrapper;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ContextThemeWrapper.class)

File: src/main/java/org/robolectric/shadows/ShadowCornerPathEffect.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.CornerPathEffect;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(CornerPathEffect.class)

File: src/main/java/org/robolectric/shadows/ShadowCriteria.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.location.Criteria;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(Criteria.class)
 public class ShadowCriteria {

File: src/main/java/org/robolectric/shadows/ShadowCursorAdapter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 
 import android.content.Context;
@@ -29,8 +29,8 @@
 import android.widget.CursorAdapter;
 import android.widget.FilterQueryProvider;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/main/java/org/robolectric/shadows/ShadowCursorLoader.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.net.Uri;
 import android.support.v4.content.CursorLoader;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(CursorLoader.class)
 public class ShadowCursorLoader {

File: src/main/java/org/robolectric/shadows/ShadowCursorWrapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.ContentResolver;
 import android.database.*;
 import android.net.Uri;
 import android.os.Bundle;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(CursorWrapper.class)
 public class ShadowCursorWrapper implements Cursor {

File: src/main/java/org/robolectric/shadows/ShadowDatabaseUtils.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteProgram;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(DatabaseUtils.class)
 public class ShadowDatabaseUtils {

File: src/main/java/org/robolectric/shadows/ShadowDateFormat.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.text.format.DateFormat;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.Locale;
 

File: src/main/java/org/robolectric/shadows/ShadowDialogPreference.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import android.preference.DialogPreference;
 

File: src/main/java/org/robolectric/shadows/ShadowDisplay.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.PixelFormat;
 import android.util.DisplayMetrics;
 import android.view.Display;
 import android.view.Surface;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * A shadow for Display with some reasonable defaults

File: src/main/java/org/robolectric/shadows/ShadowEditText.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.text.Editable;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
 import android.widget.EditText;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * A shadow for EditText that provides support for listeners

File: src/main/java/org/robolectric/shadows/ShadowEditTextPreference.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.preference.EditTextPreference;
 import android.util.AttributeSet;
 import android.widget.EditText;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(EditTextPreference.class)
 public class ShadowEditTextPreference extends ShadowDialogPreference {

File: src/main/java/org/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.os.Environment;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.io.File;
 

File: src/main/java/org/robolectric/shadows/ShadowFilter.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Filter;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Filter.class)

File: src/main/java/org/robolectric/shadows/ShadowFloatMath.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.util.FloatMath;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(FloatMath.class)

File: src/main/java/org/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadow for {@link FrameLayout} that simulates its implementation.

File: src/main/java/org/robolectric/shadows/ShadowGestureDetector.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(GestureDetector.class)

File: src/main/java/org/robolectric/shadows/ShadowHtml.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.text.Html;
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Html.class)

File: src/main/java/org/robolectric/shadows/ShadowImageButton.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.ImageButton;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(ImageButton.class)
 public class ShadowImageButton extends ShadowImageView {

File: src/main/java/org/robolectric/shadows/ShadowInputEvent.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.InputDevice;
 import android.view.InputEvent;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(InputEvent.class)
 public class ShadowInputEvent {

File: src/main/java/org/robolectric/shadows/ShadowInputMethodManager.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.os.IBinder;
 import android.os.ResultReceiver;
 import android.view.View;
 import android.view.inputmethod.InputMethodManager;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(InputMethodManager.class)
 public class ShadowInputMethodManager {

File: src/main/java/org/robolectric/shadows/ShadowIntentFilterAuthorityEntry.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.IntentFilter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(IntentFilter.AuthorityEntry.class)
 public class ShadowIntentFilterAuthorityEntry {

File: src/main/java/org/robolectric/shadows/ShadowJsPromptResult.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.webkit.JsPromptResult;
-import com.xtremelabs.robolectric.Robolectric;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.Robolectric;
+import org.robolectric.internal.Implements;
 
 @Implements(JsPromptResult.class)
 public class ShadowJsPromptResult extends ShadowJsResult{

File: src/main/java/org/robolectric/shadows/ShadowJsResult.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.webkit.JsResult;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(JsResult.class)
 public class ShadowJsResult {

File: src/main/java/org/robolectric/shadows/ShadowKeyEvent.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.KeyEvent;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(KeyEvent.class)

File: src/main/java/org/robolectric/shadows/ShadowKeyGuardLock.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.KeyguardManager;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(KeyguardManager.KeyguardLock.class)
 public class ShadowKeyGuardLock {

File: src/main/java/org/robolectric/shadows/ShadowLayoutAnimationController.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.animation.LayoutAnimationController;
 
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 @Implements(LayoutAnimationController.class)
 public class ShadowLayoutAnimationController {

File: src/main/java/org/robolectric/shadows/ShadowLayoutParams.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.ViewGroup;
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ViewGroup.LayoutParams.class)

File: src/main/java/org/robolectric/shadows/ShadowLinearGradient.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.LinearGradient;
 import android.graphics.Shader;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(LinearGradient.class)

File: src/main/java/org/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(LinearLayout.class)
 public class ShadowLinearLayout extends ShadowViewGroup {

File: src/main/java/org/robolectric/shadows/ShadowLinkMovementMethod.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.text.method.LinkMovementMethod;
 import android.text.method.MovementMethod;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(LinkMovementMethod.class)

File: src/main/java/org/robolectric/shadows/ShadowListActivity.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.ListActivity;
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.ListAdapter;
 import android.widget.ListView;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;

File: src/main/java/org/robolectric/shadows/ShadowListPreference.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.preference.ListPreference;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ListPreference.class)
 public class ShadowListPreference extends ShadowDialogPreference {

File: src/main/java/org/robolectric/shadows/ShadowLocalActivityManager.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.Activity;
 import android.app.LocalActivityManager;
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.Window;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;

File: src/main/java/org/robolectric/shadows/ShadowLog.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.util.Log;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.io.PrintStream;
 import java.util.ArrayList;

File: src/main/java/org/robolectric/shadows/ShadowMapActivity.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import com.google.android.maps.MapActivity;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadow {@code MapActivity} that registers and unregisters a {@code BroadcastReciever} when {@link #onResume()} and

File: src/main/java/org/robolectric/shadows/ShadowMatrixCursor.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import android.database.CursorIndexOutOfBoundsException;
 import android.database.MatrixCursor;

File: src/main/java/org/robolectric/shadows/ShadowMeasureSpec.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.View;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(View.MeasureSpec.class)

File: src/main/java/org/robolectric/shadows/ShadowMediaRecorder.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.hardware.Camera;
 import android.media.MediaRecorder;
 import android.view.Surface;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadows the {@code MediaRecorder} class.

File: src/main/java/org/robolectric/shadows/ShadowMergeCursor.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.Cursor;
 import android.database.MergeCursor;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Implementation for Android {@code MergeCursor} class.

File: src/main/java/org/robolectric/shadows/ShadowNotificationManager.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.Notification;
 import android.app.NotificationManager;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: src/main/java/org/robolectric/shadows/ShadowPagerAdapter.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.DataSetObserver;
 import android.support.v4.view.PagerAdapter;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(PagerAdapter.class)
 public class ShadowPagerAdapter {

File: src/main/java/org/robolectric/shadows/ShadowPasswordTransformationMethod.java
Patch:
@@ -1,11 +1,11 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.Rect;
 import android.text.method.PasswordTransformationMethod;
 import android.text.method.TransformationMethod;
 import android.view.View;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(PasswordTransformationMethod.class)
 public class ShadowPasswordTransformationMethod implements TransformationMethod {

File: src/main/java/org/robolectric/shadows/ShadowPeriodicSync.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.accounts.Account;
 import android.content.PeriodicSync;
 import android.os.Bundle;
-import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.internal.RealObject;
+import org.robolectric.internal.Implements;
+import org.robolectric.internal.RealObject;
 
 import java.lang.reflect.Field;
 

File: src/main/java/org/robolectric/shadows/ShadowPhoneNumberUtils.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.telephony.PhoneNumberUtils;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(PhoneNumberUtils.class)
 public class ShadowPhoneNumberUtils {

File: src/main/java/org/robolectric/shadows/ShadowPreferenceActivity.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.os.Bundle;
 import android.preference.Preference;
 import android.preference.PreferenceActivity;
 import android.preference.PreferenceScreen;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(PreferenceActivity.class)
 public class ShadowPreferenceActivity extends ShadowListActivity {

File: src/main/java/org/robolectric/shadows/ShadowPreferenceCategory.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.preference.PreferenceCategory;
 
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implements;
 
 @Implements(PreferenceCategory.class)
 public class ShadowPreferenceCategory extends ShadowPreferenceGroup {

File: src/main/java/org/robolectric/shadows/ShadowPreferenceScreen.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.app.Dialog;
 import android.preference.PreferenceScreen;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(PreferenceScreen.class)
 public class ShadowPreferenceScreen extends ShadowPreferenceGroup {

File: src/main/java/org/robolectric/shadows/ShadowProgressBar.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import android.widget.ProgressBar;
 

File: src/main/java/org/robolectric/shadows/ShadowRadioButton.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.view.ViewParent;
 import android.widget.RadioButton;
 import android.widget.RadioGroup;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadows the {@code android.widget.RadioButton} class.

File: src/main/java/org/robolectric/shadows/ShadowRelativeLayoutParams.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.RelativeLayout;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadow for {@link android.view.ViewGroup.MarginLayoutParams} that simulates its implementation.

File: src/main/java/org/robolectric/shadows/ShadowRemoteCallbackList.java
Patch:
@@ -1,4 +1,4 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import java.util.HashMap;
 
@@ -7,8 +7,8 @@
 import android.os.RemoteCallbackList;
 import android.os.RemoteException;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(RemoteCallbackList.class)
 public class ShadowRemoteCallbackList<E extends IInterface> {

File: src/main/java/org/robolectric/shadows/ShadowResourceCursorAdapter.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import android.content.Context;
 import android.database.Cursor;

File: src/main/java/org/robolectric/shadows/ShadowSQLiteCloseable.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.sqlite.SQLiteClosable;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 /**
  * Shadow for  {@code SQLiteCloseable}.  Though {@code SQLiteCloseable} is an abstract

File: src/main/java/org/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.sqlite.SQLiteCursor;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.sql.Clob;
 import java.sql.Connection;

File: src/main/java/org/robolectric/shadows/ShadowSQLiteStatement.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDoneException;
 import android.database.sqlite.SQLiteStatement;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: src/main/java/org/robolectric/shadows/ShadowScaleGestureDetector.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.content.Context;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(ScaleGestureDetector.class)

File: src/main/java/org/robolectric/shadows/ShadowScrollView.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.ScrollView;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ScrollView.class)
 public class ShadowScrollView extends ShadowFrameLayout {

File: src/main/java/org/robolectric/shadows/ShadowShapeDrawable.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.Paint;
 import android.graphics.drawable.ShapeDrawable;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(ShapeDrawable.class)
 public class ShadowShapeDrawable extends ShadowDrawable {

File: src/main/java/org/robolectric/shadows/ShadowSpannableString.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 
 import android.text.SpannableString;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(SpannableString.class)
 public class ShadowSpannableString {

File: src/main/java/org/robolectric/shadows/ShadowSpannedString.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.text.SpannedString;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(SpannedString.class)
 public class ShadowSpannedString {

File: src/main/java/org/robolectric/shadows/ShadowSpinner.java
Patch:
@@ -1,8 +1,8 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.widget.Spinner;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Spinner.class)

File: src/main/java/org/robolectric/shadows/ShadowSslErrorHandler.java
Patch:
@@ -1,9 +1,9 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.webkit.SslErrorHandler;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(SslErrorHandler.class)
 public class ShadowSslErrorHandler extends ShadowHandler {

File: src/main/java/org/robolectric/shadows/ShadowStatFs.java
Patch:
@@ -1,7 +1,7 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import android.os.StatFs;
 

File: src/main/java/org/robolectric/shadows/ShadowStateListDrawable.java
Patch:
@@ -1,10 +1,10 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.StateListDrawable;
 import android.util.StateSet;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: src/main/java/org/robolectric/shadows/ShadowSurfaceView.java
Patch:
@@ -1,12 +1,12 @@
-package com.xtremelabs.robolectric.shadows;
+package org.robolectric.shadows;
 
 import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
-import com.xtremelabs.robolectric.internal.Implementation;
-import com.xtremelabs.robolectric.internal.Implements;
+import org.robolectric.internal.Implementation;
+import org.robolectric.internal.Implements;
 
 @Implements(SurfaceView.class)
 @SuppressWarnings({"UnusedDeclaration"})

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -682,7 +682,7 @@ protected void dumpAttributes(PrintStream out) {
     }
 
     protected void dumpAttribute(PrintStream out, String name, String value) {
-        out.print(" " + name + "=\"" + ShadowTextUtils.htmlEncode(value) + "\"");
+        out.print(" " + name + "=\"" + (value == null ? null : ShadowTextUtils.htmlEncode(value)) + "\"");
     }
 
     protected void dumpIndent(PrintStream out, int indent) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -279,7 +279,7 @@ protected String getQualifiers() {
     @Implementation
     public void setBackgroundResource(int backgroundResourceId) {
         this.backgroundResourceId = backgroundResourceId;
-        setBackgroundDrawable(getResources().getDrawable(backgroundResourceId));
+        setBackgroundDrawable(backgroundResourceId == 0 ? null : getResources().getDrawable(backgroundResourceId));
     }
 
     /**
@@ -294,7 +294,7 @@ public int getBackgroundResourceId() {
     @Implementation
     public void setBackgroundColor(int color) {
         backgroundColor = color;
-        setBackgroundDrawable(new ColorDrawable(getResources().getColor(color)));
+        setBackgroundDrawable(new ColorDrawable(color));
     }
 
     /**

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowRelativeLayout.java
Patch:
@@ -5,13 +5,12 @@
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import com.xtremelabs.robolectric.internal.Implements;
-import com.xtremelabs.robolectric.tester.android.util.TestAttributeSet;
 
 @Implements(RelativeLayout.class)
 public class ShadowRelativeLayout extends ShadowViewGroup {
 
     public void __constructor__(Context context) {
-        __constructor__(context, new TestAttributeSet(), 0);
+
     }
 
     public void __constructor__(Context context, AttributeSet attributeSet, int defStyle) {

File: src/test/java/com/xtremelabs/robolectric/res/ViewLoaderTest.java
Patch:
@@ -287,7 +287,7 @@ public void testViewBackgroundIdIsSet() throws Exception {
 
         assertThat(shadowImageView.getBackgroundResourceId(), equalTo(R.drawable.image_background));
     }
-z`
+
     @Test
     public void testOnClickAttribute() throws Exception {
         ClickActivity activity = new ClickActivity();

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -127,7 +127,9 @@ public CharSequence getText(int id) throws Resources.NotFoundException {
 
     public void setDensity(float density) {
         this.density = density;
-        displayMetrics.density = density;
+        if (displayMetrics != null) {
+            displayMetrics.density = density;
+        }
     }
 
     public void setDisplay(Display display) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.xtremelabs.robolectric.Robolectric.newInstanceOf;
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static com.xtremelabs.robolectric.util.SQLite.*;
 
 /**
  * Shadow for {@code SQLiteDatabase} that simulates the movement of a {@code Cursor} through database tables.

File: src/main/java/com/xtremelabs/robolectric/ApplicationResolver.java
Patch:
@@ -39,7 +39,7 @@ public void injectShadow(Application application) {
         registerBroadcastReceivers(shadowApplication);
     }
 
-  private void registerBroadcastReceivers(ShadowApplication shadowApplication) {
+    private void registerBroadcastReceivers(ShadowApplication shadowApplication) {
         for (int i = 0; i < androidManifest.getReceiverCount(); i++) {
             IntentFilter filter = new IntentFilter();
             for (String action : androidManifest.getReceiverIntentFilterActions(i)) {
@@ -55,8 +55,8 @@ private void registerBroadcastReceivers(ShadowApplication shadowApplication) {
         String staticInnerClassRegex = "[A-Z][a-zA-Z]*";
         if (splits[splits.length - 1].matches(staticInnerClassRegex) && splits[splits.length - 2].matches(staticInnerClassRegex)) {
             int lastDotIndex = receiverClassName.lastIndexOf(".");
-            StringBuffer buffer = new StringBuffer(receiverClassName);
-            buffer.setCharAt(lastDotIndex,'$');
+            StringBuilder buffer = new StringBuilder(receiverClassName);
+            buffer.setCharAt(lastDotIndex, '$');
             return buffer.toString();
         }
         return receiverClassName;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLooper.java
Patch:
@@ -67,9 +67,6 @@ public static synchronized Looper myLooper() {
     public void __constructor__() {
     }
 
-    public void __constructor__(boolean quitAllowed) {
-    }
-
     @Implementation
     public void quit() {
         if (this == shadowOf(getMainLooper())) throw new RuntimeException("Main thread not allowed to quit");

File: src/main/java/com/xtremelabs/robolectric/annotation/Values.java
Patch:
@@ -1,7 +1,7 @@
 package com.xtremelabs.robolectric.annotation;
 
 /**
- * Indicate that roboletric should look for values that is specific by those qualifiers
+ * Indicate that robolectric should look for values that is specific by those qualifiers
  * 
  */
 @java.lang.annotation.Documented

File: src/main/java/com/xtremelabs/robolectric/res/XmlFileLoader.java
Patch:
@@ -435,7 +435,7 @@ private int nativeNext() throws XmlPullParserException {
         			// This can only happen if mEventType is
         			// assigned with an unmapped integer.
         			throw new RuntimeException(
-                			"Roboletric-> Uknown XML event type: " + mEventType);
+                			"Robolectric-> Uknown XML event type: " + mEventType);
         		}
         	}
 
@@ -489,7 +489,7 @@ private int nativeNext() throws XmlPullParserException {
 				}
 				default : {
 					throw new RuntimeException(
-							"Roboletric -> Unknown node type: " + 
+							"Robolectric -> Unknown node type: " +
 							node.getNodeType() + ".");
 				}
         	}

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -288,6 +288,7 @@ public File getResourceDirectory() {
         return resourcePath.get(0);
     }
 
+    @Deprecated
     public List<File> getResourcePath() {
         return resourcePath;
     }

File: src/main/java/com/xtremelabs/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -22,10 +22,10 @@ public class AndroidTranslator implements Translator {
     private final ClassCache classCache;
     private final Setup setup;
 
-    private boolean debug = false;
+    private static boolean debug = false;
 
     public static void performStaticInitialization(Class<?> clazz) {
-        System.out.println("static initializing " + clazz);
+        if (debug) System.out.println("static initializing " + clazz);
         try {
             Method originalStaticInitializer = clazz.getDeclaredMethod(STATIC_INITIALIZER_METHOD_NAME);
             originalStaticInitializer.setAccessible(true);

File: src/main/java/com/xtremelabs/robolectric/res/StringArrayResourceLoader.java
Patch:
@@ -1,5 +1,6 @@
 package com.xtremelabs.robolectric.res;
 
+import android.content.res.Resources;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
@@ -24,6 +25,7 @@ public StringArrayResourceLoader(ResourceExtractor resourceExtractor, StringReso
     public String[] getArrayValue(int resourceId) {
         String resourceName = resourceExtractor.getResourceName(resourceId);
         Value[] values = stringArrayValues.get(resourceName);
+        if (values == null) throw new Resources.NotFoundException(resourceName);
         String[] result = new String[values.length];
         for (int i = 0; i < values.length; i++) {
             Value value = values[i];

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowTypeface.java
Patch:
@@ -31,7 +31,9 @@ public static Typeface createFromAsset(AssetManager assetManager, String path) {
     @Implementation
     public static Typeface createFromFile(String path) {
         if (fontPaths.contains(path)) {
-            return Robolectric.newInstanceOf(Typeface.class);
+            Typeface typeface = Robolectric.newInstanceOf(Typeface.class);
+            shadowOf(typeface).setAssetPath(path);
+            return typeface;
         }
         throw new RuntimeException("Font not found");
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -9,7 +9,7 @@
 import com.xtremelabs.robolectric.internal.Implements;
 import com.xtremelabs.robolectric.internal.RealObject;
 import com.xtremelabs.robolectric.util.DatabaseConfig;
-import com.xtremelabs.robolectric.util.SQLite.SQLStringAndBindings;
+import com.xtremelabs.robolectric.util.SQLite.*;
 
 import java.sql.*;
 import java.util.HashSet;
@@ -20,6 +20,7 @@
 
 import static com.xtremelabs.robolectric.Robolectric.newInstanceOf;
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static com.xtremelabs.robolectric.util.SQLite.*;
 
 /**
  * Shadow for {@code SQLiteDatabase} that simulates the movement of a {@code Cursor} through database tables.

File: src/main/java/com/xtremelabs/robolectric/res/ResourceExtractor.java
Patch:
@@ -76,7 +76,10 @@ public Integer getResourceId(String possiblyQualifiedResourceName, String contex
         Integer resourceId = resourceNameToId.get(new ResName(fullyQualifiedResourceName));
         // todo warn if resourceId is null
         return resourceId;
+    }
 
+    public Integer getResourceId(ResName resName) {
+      return resourceNameToId.get(resName);
     }
 
     public static @NotNull String qualifyResourceName(String possiblyQualifiedResourceName, String contextPackageName) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -238,12 +238,11 @@ public TypedArray obtainStyledAttributes(int resid, int[] attrs) throws android.
 
         @Implementation
         public TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) {
-            TypedArray typedArray = inject(resources, newInstanceOf(TypedArray.class));
             if (set == null) {
                 set = new TestAttributeSet();
             }
-            shadowOf(typedArray).populate(set, attrs);
-            return typedArray;
+
+            return ShadowTypedArray.create(resources, set, attrs);
         }
     }
 

File: src/test/java/com/xtremelabs/robolectric/R.java
Patch:
@@ -190,6 +190,7 @@ public static final class attr {
         public static final int keycode = 0x10904;
         public static final int aspectRatio = 0x10905;
         public static final int aspectRatioEnabled = 0x10906;
+        public static final int items = 0x10907;
     }
 
     public static final class menu {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteStatement.java
Patch:
@@ -39,7 +39,7 @@ public long executeInsert() {
             if (resultSet.next()) {
                 return resultSet.getLong(1);
             } else {
-                throw new RuntimeException("Could not retrive generatedKeys");
+                throw new RuntimeException("Could not retrieve generatedKeys");
             }
         } catch (SQLException e) {
             throw new RuntimeException(e);
@@ -81,4 +81,4 @@ private void handleException(SQLException e)  {
             throw new SQLiteDoneException("ResultSet closed,(probably, no data available)");
         } 
     }
-}
\ No newline at end of file
+}

File: src/main/java/com/xtremelabs/robolectric/res/ResourceLoader.java
Patch:
@@ -111,7 +111,7 @@ private void loadEverything(String qualifiers) throws Exception {
             DocumentLoader valuesDocumentLoader = new DocumentLoader(
                     stringResourceLoader, pluralResourceLoader,
                     stringArrayResourceLoader, colorResourceLoader, attrResourceLoader,
-                    dimenResourceLoader, integerResourceLoader
+                    dimenResourceLoader, integerResourceLoader, boolResourceLoader
             );
 
             loadValueResourcesFromDirs(valuesDocumentLoader, resourcePath, qualifiers);

File: src/test/java/com/xtremelabs/robolectric/res/AttrResourceLoaderTest.java
Patch:
@@ -53,10 +53,10 @@ public void testGlobalEnumAttributesAreResolved() throws Exception {
 
     @Test
     public void testInlineFlagAttributesAreResolved() throws Exception {
-        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "scrollbars", "horizontal"), equalTo("0x00000100"));
-        assertThat(attrResourceLoader.hasAttributeFor(CustomView.class, TEST_PACKAGE, "scrollbars"), equalTo(true));
+        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "scrollBars", "horizontal"), equalTo("0x00000100"));
+        assertThat(attrResourceLoader.hasAttributeFor(CustomView.class, TEST_PACKAGE, "scrollBars"), equalTo(true));
 
-        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "scrollbars", "vertical"), equalTo("0x00000200"));
+        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "scrollBars", "vertical"), equalTo("0x00000200"));
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/res/RawResourceLoader.java
Patch:
@@ -1,7 +1,5 @@
 package com.xtremelabs.robolectric.res;
 
-import com.xtremelabs.robolectric.tester.android.util.Attribute;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -18,7 +16,7 @@ public RawResourceLoader(ResourceExtractor resourceExtractor, File resourceDir)
     }
 
     public InputStream getValue(int resourceId) {
-        String resourceFileName = Attribute.getName(resourceExtractor.getResourceName(resourceId));
+        String resourceFileName = resourceExtractor.getResName(resourceId).name;
         File rawResourceDir = new File(resourceDir, "raw");
 
         File[] files = rawResourceDir.listFiles();

File: src/main/java/com/xtremelabs/robolectric/tester/android/util/TestAttributeSet.java
Patch:
@@ -99,7 +99,7 @@ public int getAttributeCount() {
 
     @Override
     public String getAttributeName(int index) {
-        return attributes.get(index).fullyQualifiedName;
+        return attributes.get(index).resName.getFullyQualifiedName();
     }
 
     @Override

File: src/test/java/com/xtremelabs/robolectric/res/ResourceExtractorTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldHandleNull() throws Exception {
     }
 
     @Test public void shouldRetainPackageNameForFullyQualifiedQueries() throws Exception {
-        assertThat(resourceExtractor.getFullyQualifiedResourceName(android.R.id.text1), equalTo("android:id/text1"));
-        assertThat(resourceExtractor.getFullyQualifiedResourceName(R.id.burritos), equalTo("com.xtremelabs.robolectric:id/burritos"));
+        assertThat(resourceExtractor.getResName(android.R.id.text1).getFullyQualifiedName(), equalTo("android:id/text1"));
+        assertThat(resourceExtractor.getResName(R.id.burritos).getFullyQualifiedName(), equalTo("com.xtremelabs.robolectric:id/burritos"));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/res/PreferenceLoader.java
Patch:
@@ -54,8 +54,7 @@ private void processNode(Node node, PreferenceNode parent, XmlContext xmlContext
                 Node attr = attributes.item(i);
                 String attrName = ResourceExtractor.qualifyResourceName(attr.getNodeName(), xmlContext.packageName);
                 if (attrName.startsWith("xmlns:")) {
-                    // ignore for now, but not long!
-                    System.out.println("attrName = " + attrName);
+                    // ignore
                 } else {
                     attrList.add(new Attribute(Attribute.addType(attrName, "attr"), attr.getNodeValue(), xmlContext.packageName));
                 }

File: src/main/java/com/xtremelabs/robolectric/res/RawResourceLoader.java
Patch:
@@ -18,7 +18,7 @@ public RawResourceLoader(ResourceExtractor resourceExtractor, File resourceDir)
     }
 
     public InputStream getValue(int resourceId) {
-        String resourceFileName = Attribute.getResourceName(resourceExtractor.getResourceName(resourceId));
+        String resourceFileName = Attribute.getName(resourceExtractor.getResourceName(resourceId));
         File rawResourceDir = new File(resourceDir, "raw");
 
         File[] files = rawResourceDir.listFiles();

File: src/test/java/com/xtremelabs/robolectric/res/AttrResourceLoaderTest.java
Patch:
@@ -29,10 +29,10 @@ public void testUnknownAttributesAreUnknown() throws Exception {
 
     @Test
     public void testInlineEnumAttributesAreResolved() throws Exception {
-        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "itemType", "integer"), equalTo("0"));
+        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "itemType", "marsupial"), equalTo("0"));
         assertThat(attrResourceLoader.hasAttributeFor(CustomView.class, TEST_PACKAGE, "itemType"), equalTo(true));
 
-        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "itemType", "string"), equalTo("1"));
+        assertThat(attrResourceLoader.convertValueToEnum(CustomView.class, TEST_PACKAGE, "itemType", "ungulate"), equalTo("1"));
         assertThat(attrResourceLoader.hasAttributeFor(CustomView.class, TEST_PACKAGE, "otherItemType"), equalTo(false));
     }
 
@@ -69,7 +69,7 @@ public void testGlobalFlagAttributesAreResolved() throws Exception {
 
     @Test
     public void shouldResolveAttributesForSubClasses() throws Exception {
-        assertThat(attrResourceLoader.convertValueToEnum(SubCustomView.class, TEST_PACKAGE, "itemType", "integer"), equalTo("0"));
+        assertThat(attrResourceLoader.convertValueToEnum(SubCustomView.class, TEST_PACKAGE, "itemType", "marsupial"), equalTo("0"));
         assertThat(attrResourceLoader.hasAttributeFor(SubCustomView.class, TEST_PACKAGE, "itemType"), equalTo(true));
     }
     

File: src/test/java/com/xtremelabs/robolectric/res/TestAttributeSetTest.java
Patch:
@@ -134,7 +134,7 @@ public void getAttributeIntValue_shouldReturnValueFromAttribute() throws Excepti
     public void getAttributeIntValue_shouldReturnEnumValuesForEnumAttributes() throws Exception {
         AttrResourceLoader attrResourceLoader = new AttrResourceLoader(resourceExtractor);
         new DocumentLoader(attrResourceLoader).loadResourceXmlDir(testResources(), "values");
-        testAttributeSet = new TestAttributeSet(asList(new Attribute(TEST_PACKAGE + ":attr/itemType", "string", TEST_PACKAGE)),
+        testAttributeSet = new TestAttributeSet(asList(new Attribute(TEST_PACKAGE + ":attr/itemType", "ungulate", TEST_PACKAGE)),
                 null, attrResourceLoader, CustomView.class);
         assertThat(testAttributeSet.getAttributeIntValue(TEST_PACKAGE, "itemType", 0), equalTo(1));
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -267,7 +267,7 @@ public Cursor rawQueryWithFactory (SQLiteDatabase.CursorFactory cursorFactory, S
           
               resultSet = Robolectric.shadowOf(stmt).getStatement().executeQuery();
           } catch (SQLException e) {
-              throw new RuntimeException("SQL exception in query", e);
+              throw new RuntimeException("SQL exception in rawQueryWithFactory", e);
           }
           //TODO: assert rawquery with args returns actual values
           
@@ -326,7 +326,7 @@ public void endTransaction() {
 			}
 			connection.setAutoCommit(true);
 		} catch (SQLException e) {
-			throw new RuntimeException("SQL exception in beginTransaction", e);
+			throw new RuntimeException("SQL exception in endTransaction", e);
 		} finally {
 			inTransaction = false;
 		}

File: src/test/java/com/xtremelabs/robolectric/bytecode/ShadowWranglerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.xtremelabs.robolectric.bytecode;
 
+import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.TestRunners;
-import com.xtremelabs.robolectric.annotation.EnableStrictI18n;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 import com.xtremelabs.robolectric.internal.Instrument;
@@ -151,8 +151,8 @@ public void shouldRemoveNoiseFromStackTraces() throws Exception {
     }
 
     @Test(expected=RuntimeException.class)
-    @EnableStrictI18n
     public void shouldThrowExceptionOnI18nStrictMode() {
+        Robolectric.getShadowWrangler().setStrictI18n(true);
     	bindShadowClass(ShadowFooI18n.class);
     	Foo foo = new Foo(null);
     	foo.getName();
@@ -203,7 +203,7 @@ public TextFoo(String s) {
     @Implements(Foo.class)
     public static class ShadowFooI18n {
     	String name;
-    	
+
         public void __constructor__(String name) {
            this.name = name;
         }

File: src/main/java/com/xtremelabs/robolectric/res/ResourceReferenceResolver.java
Patch:
@@ -20,6 +20,7 @@ public T getValue(String resourceName) {
 
     public void processResource(String name, String rawValue, ResourceValueConverter loader, String packageName) {
         String valuePointer = prefix + "/" + name;
+        // todo: seems wrong
         if (rawValue.startsWith("@" + prefix) || rawValue.startsWith("@android:" + prefix)) {
             addAttributeReference(rawValue, valuePointer, packageName);
         } else {

File: src/main/java/com/xtremelabs/robolectric/bytecode/Setup.java
Patch:
@@ -82,7 +82,7 @@ public boolean isFromAndroidSdk(Class clazz) {
     }
 
     public boolean shouldPerformStaticInitializationIfShadowIsMissing() {
-        return false;
+        return true;
     }
 
     public static class FakeSubclass {}

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAbsoluteLayout.java
Patch:
@@ -31,7 +31,8 @@ public void __constructor__(int width, int height, int x, int y) {
     }
 
     @Override
-    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+    @Implementation
+    public ViewGroup.LayoutParams generateDefaultLayoutParams() {
         return new AbsoluteLayout.LayoutParams(0, 0, 0, 0);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -53,7 +53,8 @@ public static Dialog getLatestDialog() {
     }
 
     public static void setLatestDialog(ShadowDialog latestDialog) {
-        Robolectric.getShadowApplication().setLatestDialog(latestDialog);
+        ShadowApplication shadowApplication = Robolectric.getShadowApplication();
+        if (shadowApplication != null) shadowApplication.setLatestDialog(latestDialog);
     }
 
     public void __constructor__(Context context) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowFragment.java
Patch:
@@ -38,7 +38,6 @@ public void setView(View view) {
     public void setActivity(FragmentActivity activity) {
         if (fragmentActivity != null) realFragment.onDetach();
         fragmentActivity = activity;
-        if (activity != null) realFragment.onAttach(activity);
         try {
             Field field = Fragment.class.getDeclaredField("mActivity");
             field.setAccessible(true);

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -27,7 +27,8 @@ public ViewGroup.LayoutParams getLayoutParams() {
     }
 
     @Override
-    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+    @Implementation
+    public ViewGroup.LayoutParams generateDefaultLayoutParams() {
         return new FrameLayout.LayoutParams(0, 0);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -14,7 +14,8 @@ public ShadowLinearLayout() {
     }
 
     @Override
-    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+    @Implementation
+    public ViewGroup.LayoutParams generateDefaultLayoutParams() {
         return new LinearLayout.LayoutParams(0, 0);
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMimeTypeMap.java
Patch:
@@ -36,7 +36,9 @@ public static MimeTypeMap getSingleton() {
     }
 
     public static void reset() {
-        shadowOf(getSingleton()).clearMappings();
+        if (sSingleton != null) {
+            shadowOf(getSingleton()).clearMappings();
+        }
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -57,7 +57,8 @@ public View findViewWithTag(Object obj) {
         return null;
     }
 
-    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+    @Implementation
+    public ViewGroup.LayoutParams generateDefaultLayoutParams() {
         return new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
     }
 

File: src/test/java/com/xtremelabs/robolectric/RobolectricTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.PrintStream;
 
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -64,7 +65,7 @@ public void shouldLogMissingInvokedShadowMethodsWhenRequested() throws Exception
         // There's a shadow method for this
         aView.getContext();
         String output = buff.toString();
-        assertEquals("No Shadow method found for View.__constructor__(android.content.Context)\n", output);
+        assertThat(output, containsString("No Shadow method found for View.__constructor__(android.content.Context)\n"));
         buff.reset();
 
         aView.findViewById(27);

File: src/test/java/com/xtremelabs/robolectric/bytecode/ClassicSuperHandlingTest.java
Patch:
@@ -34,7 +34,7 @@ public void uninstrumentedSubclassesShouldBeAbleToCallSuperWithoutLooping() thro
     }
 
     @Test public void shadowInvocationWhenChildIsInstrmentedButUnshadowed() throws Exception {
-        System.out.println("ShadowWrangler is " + Robolectric.getShadowWranger() + " from " + RobolectricInternals.class.getClassLoader());
+        System.out.println("ShadowWrangler is " + Robolectric.getShadowWrangler() + " from " + RobolectricInternals.class.getClassLoader());
         bindShadowClasses(Arrays.<Class<?>>asList(ParentShadow.class, GrandparentShadow.class));
 
         assertEquals("2s-1s-boof", new Child().method("boof"));

File: src/test/java/com/xtremelabs/robolectric/shadows/NotificationTest.java
Patch:
@@ -8,8 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertSame;
 
 @RunWith(TestRunners.WithDefaults.class)
 public class NotificationTest {
@@ -18,6 +17,6 @@ public void setLatestEventInfo__shouldCaptureContentIntent() throws Exception {
         PendingIntent pendingIntent = PendingIntent.getActivity(new Activity(), 0, new Intent(), 0);
         Notification notification = new Notification();
         notification.setLatestEventInfo(new Activity(), "title", "content", pendingIntent);
-        assertThat(pendingIntent, is(notification.contentIntent));
+        assertSame(pendingIntent, notification.contentIntent);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -355,6 +355,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowResultReceiver.class,
                 ShadowResourceCursorAdapter.class,
                 ShadowResources.class,
+                ShadowNotFoundException.class,
                 ShadowResources.ShadowTheme.class,
                 ShadowScaleGestureDetector.class,
                 ShadowScanResult.class,
@@ -529,8 +530,8 @@ public static ShadowAssetManager shadowOf(AssetManager instance) {
     }
     
     @SuppressWarnings("rawtypes")
-	public static ShadowAsyncTask shadowOf(AsyncTask instance){
-    	return (ShadowAsyncTask) Robolectric.shadowOf_( instance );
+    public static ShadowAsyncTask shadowOf(AsyncTask instance){
+        return (ShadowAsyncTask) Robolectric.shadowOf_(instance);
     }
 
     public static ShadowAudioManager shadowOf(AudioManager instance) {

File: src/main/java/com/xtremelabs/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -67,7 +67,8 @@ public static boolean shouldCallDirectly(Object directInstance) {
             if (vars.callDirectly != directInstance) {
                 Object expectedInstance = vars.callDirectly;
                 vars.callDirectly = null;
-                throw new RuntimeException("expected to perform direct call on <" + expectedInstance + "> but got <" + directInstance + ">");
+                throw new RuntimeException("expected to perform direct call on <" + expectedInstance.getClass().getName()
+                        + "> but got <" + directInstance.getClass().getName() + ">");
             } else {
                 vars.callDirectly = null;
             }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -205,7 +205,7 @@ public float getDimension(int id) throws Resources.NotFoundException {
 
     @Implementation
     public int getInteger(int id) throws Resources.NotFoundException {
-    	return resourceLoader.getIntegerValue( id );
+    	return resourceLoader.getIntegerValue(id);
     }
     
     @Implementation
@@ -303,5 +303,4 @@ private static void initSystemResources() throws Exception {
         systemResourceLoader.setSystem(true);
         system = ShadowResources.bind(new Resources(null, null, null), systemResourceLoader);
     }
-
 }

File: src/main/java/com/xtremelabs/robolectric/bytecode/Setup.java
Patch:
@@ -20,7 +20,6 @@ public Setup() {
         androidPackages.add("org.apache.http.impl.client.DefaultRequestDirector");
 
         instrumentingExcludeList.add("android.support.v4.app.NotificationCompat");
-        instrumentingExcludeList.add("android.support.v4.content.LocalBroadcastManager");
         instrumentingExcludeList.add("android.support.v4.util.LruCache");
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAbsoluteLayout.java
Patch:
@@ -1,6 +1,5 @@
 package com.xtremelabs.robolectric.shadows;
 
-import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AbsoluteLayout;
 import com.xtremelabs.robolectric.internal.Implementation;
@@ -32,7 +31,7 @@ public void __constructor__(int width, int height, int x, int y) {
     }
 
     @Override
-    protected void setChildLayoutParams(View child) {
-        child.setLayoutParams(new AbsoluteLayout.LayoutParams(0, 0, 0, 0));
+    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+        return new AbsoluteLayout.LayoutParams(0, 0, 0, 0);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowApplication.java
Patch:
@@ -44,7 +44,7 @@ public class ShadowApplication extends ShadowContextWrapper {
         // note that these are different!
     	// They specify concrete classes within Robolectric for interfaces or abstract classes defined by Android
         SYSTEM_SERVICE_MAP.put(Context.WINDOW_SERVICE, "com.xtremelabs.robolectric.tester.android.view.TestWindowManager");
-        SYSTEM_SERVICE_MAP.put(Context.CLIPBOARD_SERVICE, "com.xtremelabs.robolectric.tester.android.text.TestClipboardManager");
+        SYSTEM_SERVICE_MAP.put(Context.CLIPBOARD_SERVICE, "android.content.ClipboardManager");
         SYSTEM_SERVICE_MAP.put(Context.SENSOR_SERVICE, "android.hardware.TestSensorManager");
         SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.TestVibrator");
         

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 import com.xtremelabs.robolectric.internal.Implementation;
@@ -28,7 +27,7 @@ public ViewGroup.LayoutParams getLayoutParams() {
     }
 
     @Override
-    protected void setChildLayoutParams(View child) {
-        child.setLayoutParams(new FrameLayout.LayoutParams(0, 0));
+    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+        return new FrameLayout.LayoutParams(0, 0);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLinearLayout.java
Patch:
@@ -1,6 +1,6 @@
 package com.xtremelabs.robolectric.shadows;
 
-import android.view.View;
+import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
@@ -14,8 +14,8 @@ public ShadowLinearLayout() {
     }
 
     @Override
-    protected void setChildLayoutParams(View child) {
-        child.setLayoutParams(new LinearLayout.LayoutParams(0, 0));
+    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+        return new LinearLayout.LayoutParams(0, 0);
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -61,7 +61,7 @@ public class ShadowView {
     private int paddingTop;
     private int paddingRight;
     private int paddingBottom;
-    private ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams(0, 0);
+    private ViewGroup.LayoutParams layoutParams;
     private Map<Integer, Object> tags = new HashMap<Integer, Object>();
     private boolean clickable;
     private boolean longClickable;

File: src/test/java/com/xtremelabs/robolectric/RobolectricTest.java
Patch:
@@ -60,12 +60,11 @@ public void shouldLogMissingInvokedShadowMethodsWhenRequested() throws Exception
         Robolectric.bindShadowClass(TestShadowView.class);
         Robolectric.logMissingInvokedShadowMethods();
 
-
         View aView = new View(null);
         // There's a shadow method for this
         aView.getContext();
         String output = buff.toString();
-        assertEquals("No Shadow method found for View.<init>(android.content.Context)\n", output);
+        assertEquals("No Shadow method found for View.__constructor__(android.content.Context)\n", output);
         buff.reset();
 
         aView.findViewById(27);

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -281,6 +281,7 @@ public void removeView_removesView() throws Exception {
     @Test
     public void removeView_resetsParentOnlyIfViewIsInViewGroup() throws Exception {
         assertThat(root.getChildCount(), equalTo(3));
+        assertNotSame(child3a.getParent(), root);
         root.removeView(child3a);
         assertThat(root.getChildCount(), equalTo(3));
         assertThat(child3a.getParent(), sameInstance((ViewParent) child3));

File: src/main/java/com/xtremelabs/robolectric/bytecode/ShadowWrangler.java
Patch:
@@ -8,7 +8,6 @@
 import javassist.CtClass;
 import javassist.CtField;
 import javassist.NotFoundException;
-
 import java.lang.annotation.Annotation;
 import java.lang.reflect.*;
 import java.util.*;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -334,7 +334,7 @@ public AlertDialog.Builder setMultiChoiceItems(CharSequence[] items, boolean[] c
 
         @Implementation(i18nSafe=false)
         public AlertDialog.Builder setTitle(CharSequence title) {
-            this.title = title.toString();
+            this.title = title == null ? "" : title.toString();
             return realBuilder;
         }
 
@@ -352,7 +352,7 @@ public AlertDialog.Builder setTitle(int titleId) {
 
         @Implementation(i18nSafe=false)
         public AlertDialog.Builder setMessage(CharSequence message) {
-            this.message = message.toString();
+            this.message = message == null ? "" : message.toString();
             return realBuilder;
         }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCanvas.java
Patch:
@@ -85,7 +85,7 @@ public void drawBitmap(Bitmap bitmap, float left, float top, Paint paint) {
         int y = (int) (top + translateY);
         if (x != 0 || y != 0) {
             appendDescription(" at (" + x + "," + y + ")");
-        }
+    }
 
         if (scaleX != 1 && scaleY != 1) {
             appendDescription(" scaled by (" + scaleX + "," + scaleY + ")");

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowClipboardManager.java
Patch:
@@ -1,6 +1,6 @@
 package com.xtremelabs.robolectric.shadows;
 
-import android.text.ClipboardManager;
+import android.content.ClipboardManager;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialogFragment.java
Patch:
@@ -38,10 +38,10 @@ public void show(FragmentManager manager, String tag) {
 
         shadowOf(realDialogFragment).setActivity(activityFromManager);
 
-        realDialogFragment.onAttach(activity);
+        realDialogFragment.onAttach(fragmentActivity);
         realDialogFragment.onCreate(null);
         dialog = realDialogFragment.onCreateDialog(null);
-        view = realDialogFragment.onCreateView(ShadowLayoutInflater.from(activity), null, null);
+        view = realDialogFragment.onCreateView(ShadowLayoutInflater.from(fragmentActivity), null, null);
         if (dialog == null) {
             dialog = new Dialog(activityFromManager);
             dialog.setContentView(view);

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowEnvironment.java
Patch:
@@ -1,11 +1,11 @@
 package com.xtremelabs.robolectric.shadows;
 
-import java.io.File;
-
 import android.os.Environment;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 
+import java.io.File;
+
 @Implements(Environment.class)
 public class ShadowEnvironment {
 
@@ -27,7 +27,7 @@ public static File getExternalStorageDirectory() {
     	ShadowContext.EXTERNAL_CACHE_DIR.mkdirs();
 		return ShadowContext.EXTERNAL_CACHE_DIR;
     }
-    
+
     @Implementation
     public static File getExternalStoragePublicDirectory(String type) {
 		File f = (type == null) ? ShadowContext.EXTERNAL_FILES_DIR : new File( ShadowContext.EXTERNAL_FILES_DIR, type );

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowPointF.java
Patch:
@@ -9,7 +9,7 @@
 import static com.xtremelabs.robolectric.Robolectric.shadowOf_;
 
 /**
- * Shadow implementation of {@code Point}
+ * Shadow implementation of {@code PointF}
  */
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(PointF.class)

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowService.java
Patch:
@@ -63,6 +63,9 @@ public final void startForeground(int id, Notification notification) {
     public void stopForeground(boolean removeNotification) {
         foregroundStopped = true;
         notificationShouldRemoved = removeNotification;
+        if (removeNotification) {
+            lastForegroundNotification = null;
+        }
     }
 
     public Notification getLastForegroundNotification() {

File: src/main/java/com/xtremelabs/robolectric/tester/android/database/TestCursor.java
Patch:
@@ -199,10 +199,10 @@ public Bundle respond(Bundle extras) {
         throw new UnsupportedOperationException();
     }
 
-	@Override
+    @Override
 	public int getType(int columnIndex) {
         throw new UnsupportedOperationException();
-	}
+    }
 
 	/**
      * Mimics ContentResolver.query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)

File: src/main/java/com/xtremelabs/robolectric/tester/android/view/TestMenuItem.java
Patch:
@@ -1,11 +1,9 @@
 package com.xtremelabs.robolectric.tester.android.view;
 
-import com.xtremelabs.robolectric.Robolectric;
-
-import android.app.Application;
 import android.content.Intent;
 import android.graphics.drawable.Drawable;
 import android.view.*;
+import com.xtremelabs.robolectric.Robolectric;
 
 public class TestMenuItem implements MenuItem {
 

File: src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/HttpEntityStub.java
Patch:
@@ -12,7 +12,7 @@
 
 public class HttpEntityStub implements HttpEntity {
     @Override public boolean isRepeatable() {
-        throw new UnsupportedOperationException();
+        return true;
     }
 
     @Override public boolean isChunked() {

File: src/test/java/com/xtremelabs/robolectric/res/DrawableResourceLoaderTest.java
Patch:
@@ -34,7 +34,7 @@ public void setup() throws Exception {
         extractor.addLocalRClass(R.class);
         extractor.addSystemRClass(android.R.class);
 
-        resourceLoader = new DrawableResourceLoader(extractor, resourceFile("res"));
+        resourceLoader = new DrawableResourceLoader(extractor);
         DocumentLoader documentLoader = new DocumentLoader(resourceLoader);
 
         documentLoader.loadResourceXmlDir(resourceFile("res", "drawable"));

File: src/test/java/com/xtremelabs/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -49,14 +49,14 @@ public void shouldThrowExceptionOnI18nStrictModeInflateView() throws Exception {
         ViewGroup vg = new FrameLayout(Robolectric.application);
     	resourceLoader.inflateView(Robolectric.application, R.layout.text_views, vg);
     }
-    
+
     @Test(expected=I18nException.class)
     public void shouldThrowExceptionOnI18nStrictModeInflateMenu() throws Exception {
         ResourceLoader resourceLoader = new ResourceLoader(DEFAULT_SDK_VERSION, R.class, resourceFile("res"), resourceFile("menu"));
         resourceLoader.setStrictI18n(true);
     	resourceLoader.inflateMenu(Robolectric.application, R.menu.test, null);
     }
-    
+
     @Test(expected=I18nException.class)
     public void shouldThrowExceptionOnI18nStrictModeInflatePreferences() throws Exception {
         ResourceLoader resourceLoader = new ResourceLoader(DEFAULT_SDK_VERSION, R.class, resourceFile("res"), resourceFile("xml"));

File: src/test/java/com/xtremelabs/robolectric/shadows/IntentTest.java
Patch:
@@ -295,7 +295,7 @@ public void shouldFillIn() throws Exception {
         String category = "category";
         intentB.addCategory(category);
         intentB.setPackage("com.foobar.app");
-        ComponentName cn = new ComponentName("com.foobar.app", "activity");
+        ComponentName cn = new ComponentName("com.foobar.app", "fragmentActivity");
         intentB.setComponent(cn);
         intentB.putExtra("FOO", 23);
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ResolveInfoTest.java
Patch:
@@ -20,7 +20,7 @@ public class ResolveInfoTest {
 
     @Before
     public void setup() {
-    	mResolveInfo = ShadowResolveInfo.newResolveInfo("name", "package", "activity");
+    	mResolveInfo = ShadowResolveInfo.newResolveInfo("name", "package", "fragmentActivity");
         mShadowInfo = Robolectric.shadowOf(mResolveInfo);
     }
 
@@ -35,6 +35,6 @@ public void testNewResolveInfoWithActivity() {
         assertThat(mResolveInfo.loadLabel(null).toString(), equalTo("name"));
         assertThat(mResolveInfo.activityInfo.packageName, equalTo("package"));
         assertThat(mResolveInfo.activityInfo.applicationInfo.packageName, equalTo("package"));
-        assertThat(mResolveInfo.activityInfo.name, equalTo("activity"));
+        assertThat(mResolveInfo.activityInfo.name, equalTo("fragmentActivity"));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -21,7 +21,7 @@ public class ShadowConnectivityManager {
 
     private Map<Integer, NetworkInfo> networkTypeToNetworkInfo = new HashMap<Integer, NetworkInfo>();
 
-    public void __constructor__() {
+    public ShadowConnectivityManager() {
         setActiveNetworkInfo(ShadowNetworkInfo.newInstance());
     }
 

File: src/main/java/com/xtremelabs/robolectric/bytecode/ClassHandler.java
Patch:
@@ -9,9 +9,7 @@ public interface ClassHandler {
 	
     void instrument(CtClass ctClass);
 
-    void beforeTest();
-
-    void afterTest();
+    void reset();
 
     void classInitializing(Class clazz);
 

File: src/main/java/com/xtremelabs/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -5,7 +5,7 @@
 
 @SuppressWarnings({"UnusedDeclaration"})
 public class RobolectricInternals {
-    // initialized via magic by AndroidTranslator
+    // initialized via magic by RobolectricContext
     private static ClassHandler classHandler;
 
     public static ClassHandler getClassHandler() {

File: src/main/java/com/xtremelabs/robolectric/bytecode/Setup.java
Patch:
@@ -45,7 +45,7 @@ public boolean shouldInstrument(CtClass ctClass) throws NotFoundException {
             return true;
         }
 
-        return parentIsInstrumented(ctClass);
+        return false;
 
     }
 

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -120,7 +120,8 @@ public static void bindShadowClass(Class<?> shadowClass) {
         }
     }
 
-    private static ShadowWrangler getShadowWranger() {
+    // todo: make private
+    public static ShadowWrangler getShadowWranger() {
         return ((ShadowWrangler) RobolectricInternals.getClassHandler());
     }
 

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -2,9 +2,7 @@
 
 import android.app.Application;
 import android.net.Uri__FromAndroid;
-import com.xtremelabs.robolectric.bytecode.ClassHandler;
-import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
-import com.xtremelabs.robolectric.bytecode.ShadowWrangler;
+import com.xtremelabs.robolectric.bytecode.*;
 import com.xtremelabs.robolectric.internal.RealObject;
 import com.xtremelabs.robolectric.internal.RobolectricTestRunnerInterface;
 import com.xtremelabs.robolectric.res.ResourceLoader;
@@ -226,6 +224,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final ClassHandler cla
             delegateLoadingOf(RobolectricTestRunnerInterface.class.getName());
             delegateLoadingOf(RealObject.class.getName());
             delegateLoadingOf(ShadowWrangler.class.getName());
+            delegateLoadingOf(Vars.class.getName());
             delegateLoadingOf(RobolectricConfig.class.getName());
             delegateLoadingOf(DatabaseMap.class.getName());
             delegateLoadingOf(android.R.class.getName());

File: src/main/java/com/xtremelabs/robolectric/bytecode/ClassHandler.java
Patch:
@@ -13,5 +13,7 @@ public interface ClassHandler {
 
     void afterTest();
 
+    void classInitializing(Class clazz);
+
     Object methodInvoked(Class clazz, String methodName, Object instance, String[] paramTypes, Object[] params) throws Throwable;
 }

File: src/test/java/com/xtremelabs/robolectric/shadows/CanvasTest.java
Patch:
@@ -103,7 +103,7 @@ public void drawPath_shouldRecordThePointsOfEachPathEvenWhenItIsTheSameInstance(
         ShadowCanvas shadow = shadowOf(canvas);
         assertThat(shadow.getPathPaintHistoryCount(), equalTo(2));
         assertEquals(shadowOf(shadow.getDrawnPath(0)).getPoints().get(0), new ShadowPath.Point(10, 10, LINE_TO));
-        assertEquals(shadowOf(shadow.getDrawnPath(0)).getPoints().get(1), new ShadowPath.Point(20, 20, LINE_TO));
+        assertEquals(shadowOf(shadow.getDrawnPath(1)).getPoints().get(0), new ShadowPath.Point(20, 20, LINE_TO));
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -85,7 +85,7 @@ public class ShadowView {
     private int measuredHeight = 0;
     private float translationX = 0.0f;
     private float translationY = 0.0f;
-    private float alpha = 0.0f;
+    private float alpha = 1.0f;
 
     public void __constructor__(Context context) {
         __constructor__(context, null);

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowRelativeLayoutParams.java
Patch:
@@ -9,7 +9,7 @@
  */
 @SuppressWarnings("UnusedDeclaration")
 @Implements(RelativeLayout.LayoutParams.class)
-public class ShadowRelativeLayoutParams extends ShadowLayoutParams {
+public class ShadowRelativeLayoutParams extends ShadowMarginLayoutParams {
     int rules[] = new int[16]; // not the right way to do this
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSensorManager.java
Patch:
@@ -61,5 +61,4 @@ public boolean hasListener(SensorEventListener listener) {
 	public SensorEvent createSensorEvent() {
 		return Robolectric.newInstanceOf(SensorEvent.class);
 	}
-
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowWebView.java
Patch:
@@ -4,6 +4,7 @@
 import android.util.AttributeSet;
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
+import android.webkit.TestWebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import com.xtremelabs.robolectric.Robolectric;
@@ -18,7 +19,7 @@ public class ShadowWebView extends ShadowAbsoluteLayout {
 
     private String lastUrl;
     private HashMap<String, Object> javascriptInterfaces = new HashMap<String, Object>();
-    private WebSettings webSettings = Robolectric.newInstanceOf(WebSettings.class);
+    private WebSettings webSettings = new TestWebSettings();
     private WebViewClient webViewClient = null;
     private boolean runFlag = false;
     private boolean clearCacheCalled = false;

File: src/test/java/com/xtremelabs/robolectric/shadows/ApplicationTest.java
Patch:
@@ -72,9 +72,9 @@ public void shouldProvideServices() throws Exception {
         checkSystemService(Context.KEYGUARD_SERVICE, android.app.KeyguardManager.class);
         checkSystemService(Context.LOCATION_SERVICE, android.location.LocationManager.class);
         checkSystemService(Context.SEARCH_SERVICE, android.app.SearchManager.class);
-        checkSystemService(Context.SENSOR_SERVICE, android.hardware.SensorManager.class);
+        checkSystemService(Context.SENSOR_SERVICE, android.hardware.TestSensorManager.class);
         checkSystemService(Context.STORAGE_SERVICE, android.os.storage.StorageManager.class);
-        checkSystemService(Context.VIBRATOR_SERVICE, android.os.Vibrator.class);
+        checkSystemService(Context.VIBRATOR_SERVICE, android.os.TestVibrator.class);
         checkSystemService(Context.CONNECTIVITY_SERVICE, android.net.ConnectivityManager.class);
         checkSystemService(Context.WIFI_SERVICE, android.net.wifi.WifiManager.class);
         checkSystemService(Context.AUDIO_SERVICE, android.media.AudioManager.class);

File: src/test/java/com/xtremelabs/robolectric/shadows/WebViewTest.java
Patch:
@@ -58,10 +58,8 @@ public void shouldRecordLastLoadDataWithBaseURL() throws Exception {
     @Test
     public void shouldReturnSettings() {
         WebSettings webSettings = webView.getSettings();
-        ShadowWebSettings shadowWebSettings = Robolectric.shadowOf(webSettings);
 
         assertThat(webSettings, notNullValue());
-        assertThat(shadowWebSettings, notNullValue());
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSensorManager.java
Patch:
@@ -61,5 +61,4 @@ public boolean hasListener(SensorEventListener listener) {
 	public SensorEvent createSensorEvent() {
 		return Robolectric.newInstanceOf(SensorEvent.class);
 	}
-
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowWebView.java
Patch:
@@ -4,6 +4,7 @@
 import android.util.AttributeSet;
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
+import android.webkit.TestWebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import com.xtremelabs.robolectric.Robolectric;
@@ -18,7 +19,7 @@ public class ShadowWebView extends ShadowAbsoluteLayout {
 
     private String lastUrl;
     private HashMap<String, Object> javascriptInterfaces = new HashMap<String, Object>();
-    private WebSettings webSettings = Robolectric.newInstanceOf(WebSettings.class);
+    private WebSettings webSettings = new TestWebSettings();
     private WebViewClient webViewClient = null;
     private boolean runFlag = false;
     private boolean clearCacheCalled = false;

File: src/test/java/com/xtremelabs/robolectric/shadows/ApplicationTest.java
Patch:
@@ -72,9 +72,9 @@ public void shouldProvideServices() throws Exception {
         checkSystemService(Context.KEYGUARD_SERVICE, android.app.KeyguardManager.class);
         checkSystemService(Context.LOCATION_SERVICE, android.location.LocationManager.class);
         checkSystemService(Context.SEARCH_SERVICE, android.app.SearchManager.class);
-        checkSystemService(Context.SENSOR_SERVICE, android.hardware.SensorManager.class);
+        checkSystemService(Context.SENSOR_SERVICE, android.hardware.TestSensorManager.class);
         checkSystemService(Context.STORAGE_SERVICE, android.os.storage.StorageManager.class);
-        checkSystemService(Context.VIBRATOR_SERVICE, android.os.Vibrator.class);
+        checkSystemService(Context.VIBRATOR_SERVICE, android.os.TestVibrator.class);
         checkSystemService(Context.CONNECTIVITY_SERVICE, android.net.ConnectivityManager.class);
         checkSystemService(Context.WIFI_SERVICE, android.net.wifi.WifiManager.class);
         checkSystemService(Context.AUDIO_SERVICE, android.media.AudioManager.class);

File: src/test/java/com/xtremelabs/robolectric/shadows/WebViewTest.java
Patch:
@@ -58,10 +58,8 @@ public void shouldRecordLastLoadDataWithBaseURL() throws Exception {
     @Test
     public void shouldReturnSettings() {
         WebSettings webSettings = webView.getSettings();
-        ShadowWebSettings shadowWebSettings = Robolectric.shadowOf(webSettings);
 
         assertThat(webSettings, notNullValue());
-        assertThat(shadowWebSettings, notNullValue());
     }
 
     @Test

File: src/test/java/com/xtremelabs/robolectric/annotation/WithConstantStringTest.java
Patch:
@@ -15,7 +15,7 @@ public class WithConstantStringTest {
 	private static final String NEW_VALUE = "HTC";
 
 	@Test
-	@WithConstantString(classWithField=android.os.Build.class, fieldName="MANUFACTURER", newValue=NEW_VALUE )
+	@WithConstantString(classWithField=android.os.Build.class, fieldName="MANUFACTURER", newValue=NEW_VALUE)
 	public void testWithConstantString() {
 		assertThat(android.os.Build.MANUFACTURER, equalTo(NEW_VALUE));
 	}

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -231,6 +231,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowListActivity.class,
                 ShadowListPreference.class,
                 ShadowListView.class,
+                ShadowLocalBroadcastManager.class,
                 ShadowLocation.class,
                 ShadowLocationManager.class,
                 ShadowLog.class,

File: src/main/java/com/xtremelabs/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -34,7 +34,6 @@ public AndroidTranslator(ClassHandler classHandler, ClassCache classCache) {
         instrumentingList.add("org.apache.http.impl.client.DefaultRequestDirector");
 
         instrumentingExcludeList.add("android.support.v4.app.NotificationCompat");
-        instrumentingExcludeList.add("android.support.v4.content.LocalBroadcastManager");
         instrumentingExcludeList.add("android.support.v4.util.LruCache");
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/LocalBroadcastManagerTest.java
Patch:
@@ -78,6 +78,7 @@ public void shouldResetStateBetweenTests2() throws Exception {
     public void testGetBroadcastIntents() throws Exception {
         LocalBroadcastManager instance = LocalBroadcastManager.getInstance(Robolectric.application);
         ShadowLocalBroadcastManager shadow = shadowOf_(instance);
+        shadow.clearBroadcastIntents();
         Intent intent1 = new Intent("foo");
         instance.sendBroadcast(intent1);
         Intent intent2 = new Intent("bar");
@@ -104,7 +105,7 @@ public void testGetLatestBroadcastIntent() throws Exception {
     @Test
     public void testHasBroadcastReceiver() throws Exception {
         LocalBroadcastManager instance = LocalBroadcastManager.getInstance(Robolectric.application);
-        instance.registerReceiver(new TestBroadcastReceiver(), null);
+        instance.registerReceiver(new TestBroadcastReceiver(), new IntentFilter());
         ShadowLocalBroadcastManager shadow = shadowOf_(instance);
 
       boolean hasBroadcastReceiver = shadow.hasBroadcastReceiver(TestBroadcastReceiver.class);

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -144,6 +144,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowAsyncTask.class,
                 ShadowAudioManager.class,
                 ShadowBaseAdapter.class,
+                ShadowBase64.class,
                 ShadowBinder.class,
                 ShadowBitmap.class,
                 ShadowBitmapDrawable.class,

File: src/test/java/com/xtremelabs/robolectric/res/DimenResourceLoaderTest.java
Patch:
@@ -28,8 +28,8 @@ public void testDimensionsAreResolved() throws Exception {
 				equalTo(8.0f));
 		assertThat(dimenResourceLoader.getValue(R.dimen.test_dip_dimen),
 				equalTo(20.0f));
-        assertThat(dimenResourceLoader.getValue(R.dimen.test_pt_dimen),
-                equalTo(12.0f));
+		assertThat(dimenResourceLoader.getValue(R.dimen.test_pt_dimen),
+				equalTo(12.0f));
 		assertThat(dimenResourceLoader.getValue(R.dimen.test_px_dimen),
 				equalTo(15.0f));
 		assertThat(dimenResourceLoader.getValue(R.dimen.test_sp_dimen),

File: src/main/java/com/xtremelabs/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -33,8 +33,10 @@ public AndroidTranslator(ClassHandler classHandler, ClassCache classCache) {
         instrumentingList.add("com.google.android.maps");
         instrumentingList.add("org.apache.http.impl.client.DefaultRequestDirector");
 
+//        instrumentingExcludeList.add("android.support.v4.content.LocalBroadcastManager");
+        instrumentingExcludeList.add("android.support.v4.content.");
+        
         instrumentingExcludeList.add("android.support.v4.app.NotificationCompat");
-        instrumentingExcludeList.add("android.support.v4.content.LocalBroadcastManager");
         instrumentingExcludeList.add("android.support.v4.util.LruCache");
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowApplication.java
Patch:
@@ -34,8 +34,10 @@ public class ShadowApplication extends ShadowContextWrapper {
     private static final Map<String, String> SYSTEM_SERVICE_MAP = new HashMap<String, String>();
 
     static {
-        // note that this one is different!
+        // note that these three are different!
         SYSTEM_SERVICE_MAP.put(Context.WINDOW_SERVICE, "com.xtremelabs.robolectric.tester.android.view.TestWindowManager");
+        SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.TestVibrator");
+        SYSTEM_SERVICE_MAP.put(Context.SENSOR_SERVICE, "android.hardware.TestSensorManager");
 
         // the rest are as mapped in docs...
         SYSTEM_SERVICE_MAP.put(Context.LAYOUT_INFLATER_SERVICE, "android.view.LayoutInflater");
@@ -47,9 +49,7 @@ public class ShadowApplication extends ShadowContextWrapper {
         SYSTEM_SERVICE_MAP.put(Context.KEYGUARD_SERVICE, "android.app.KeyguardManager");
         SYSTEM_SERVICE_MAP.put(Context.LOCATION_SERVICE, "android.location.LocationManager");
         SYSTEM_SERVICE_MAP.put(Context.SEARCH_SERVICE, "android.app.SearchManager");
-        SYSTEM_SERVICE_MAP.put(Context.SENSOR_SERVICE, "android.hardware.SensorManager");
         SYSTEM_SERVICE_MAP.put(Context.STORAGE_SERVICE, "android.os.storage.StorageManager");
-        SYSTEM_SERVICE_MAP.put(Context.VIBRATOR_SERVICE, "android.os.Vibrator");
         SYSTEM_SERVICE_MAP.put(Context.CONNECTIVITY_SERVICE, "android.net.ConnectivityManager");
         SYSTEM_SERVICE_MAP.put(Context.WIFI_SERVICE, "android.net.wifi.WifiManager");
         SYSTEM_SERVICE_MAP.put(Context.AUDIO_SERVICE, "android.media.AudioManager");

File: src/main/java/com/xtremelabs/robolectric/res/ResourceLoader.java
Patch:
@@ -125,7 +125,7 @@ private void init() {
 				loadPluralsResources( localValueResourceDir, systemValueResourceDir );
 				loadValueResources( localValueResourceDir, systemValueResourceDir );
 				loadDimenResources( localValueResourceDir, systemValueResourceDir );
-				loadIntegerResource( localValueResourceDir, systemResourceDir );
+				loadIntegerResource( localValueResourceDir, systemValueResourceDir );
 				loadViewResources( systemResourceDir, resourceDir );
 				loadMenuResources( resourceDir );
 				loadDrawableResources( resourceDir );

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewPager.java
Patch:
@@ -37,9 +37,9 @@ public PagerAdapter getAdapter() {
 
     @Implementation
     public void dataSetChanged() {
-        while (getChildCount() < adapter.getCount()) {
+        for (int i = getChildCount(); i < adapter.getCount(); i++) {
             adapter.startUpdate(realViewPager);
-            Object item = adapter.instantiateItem(realViewPager, getChildCount());
+            Object item = adapter.instantiateItem(realViewPager, i);
             adapter.setPrimaryItem(realViewPager, 0, item);
             adapter.finishUpdate(realViewPager);
         }

File: src/test/java/com/xtremelabs/robolectric/RobolectricTestRunnerClassLoaderSetup.java
Patch:
@@ -8,7 +8,7 @@
 
 
 @RunWith(WithTestDefaultsRunner.class)
-public class RobolectricTestRunnerClassLoaderSetupToFixBuild {
+public class RobolectricTestRunnerClassLoaderSetup {
 
     @Test
     public void testUsingClassLoader() throws ClassNotFoundException {

File: src/test/java/com/xtremelabs/robolectric/RobolectricTestRunnerClassloaderSetup.java
Patch:
@@ -8,12 +8,11 @@
 
 
 @RunWith(WithTestDefaultsRunner.class)
-public class RobolectricTestRunnerClassloaderSetup {
+public class RobolectricTestRunnerClassLoaderSetup {
     
     @Test
-    public void testUsingClassloader() throws ClassNotFoundException {
+    public void testUsingClassLoader() throws ClassNotFoundException {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         Assert.assertEquals(classLoader.getClass().getName(), RobolectricClassLoader.class.getName());
-        
     }
 }

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewPagerTest.java
Patch:
@@ -88,7 +88,7 @@ public void shouldRequestItemsWhenAdapterNotifiesDataSetChanged() throws Excepti
         adapter.notifyDataSetChanged();
 
         viewPager.setCurrentItem(0);
-        assertEquals(1, shadowOf(viewPager).getCurrentView().getTag());
+        assertEquals(0, shadowOf(viewPager).getCurrentView().getTag());
         viewPager.setCurrentItem(1);
         assertEquals(1, shadowOf(viewPager).getCurrentView().getTag());
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewPager.java
Patch:
@@ -40,7 +40,7 @@ public void dataSetChanged() {
         int count = adapter.getCount();
         if (count > 0) {
             adapter.startUpdate(realViewPager);
-            Object item = adapter.instantiateItem(realViewPager, count);
+            Object item = adapter.instantiateItem(realViewPager, 0);
             adapter.setPrimaryItem(realViewPager, 0, item);
             adapter.finishUpdate(realViewPager);
         }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewPager.java
Patch:
@@ -25,6 +25,7 @@ public void onChanged() {
                 dataSetChanged();
             }
         });
+        dataSetChanged();
     }
 
     @Implementation

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewTest.java
Patch:
@@ -352,6 +352,7 @@ public TestView(Context context) {
 
         @Override
         protected void onAnimationEnd() {
+            super.onAnimationEnd();
             onAnimationEndWasCalled = true;
         }
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowHandler.java
Patch:
@@ -84,6 +84,7 @@ public Message obtainMessage(int what, int arg1, int arg2, Object obj) {
         message.arg1 = arg1;
         message.arg2 = arg2;
         message.obj = obj;
+        message.setTarget(realHandler);
         return message;
     }
 
@@ -129,7 +130,7 @@ public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
 
     @Implementation
     public final Looper getLooper() {
-    	return looper;
+        return looper;
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMessage.java
Patch:
@@ -21,7 +21,7 @@ public class ShadowMessage {
     public void setData(Bundle data) {
         this.data = data;
     }
-    
+
     @Implementation
     public void setTarget(Handler target) {
         this.target = target;
@@ -39,7 +39,7 @@ public Bundle getData() {
         }
         return data;
     }
-    
+
     @Implementation
     public Handler getTarget() {
         return target;
@@ -51,6 +51,7 @@ public void copyFrom(Message m) {
         message.arg2 = m.arg2;
         message.obj = m.obj;
         message.setData(m.getData());
+        message.setTarget(m.getTarget());
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowHandler.java
Patch:
@@ -84,6 +84,7 @@ public Message obtainMessage(int what, int arg1, int arg2, Object obj) {
         message.arg1 = arg1;
         message.arg2 = arg2;
         message.obj = obj;
+        message.setTarget(realHandler);
         return message;
     }
 
@@ -129,7 +130,7 @@ public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
 
     @Implementation
     public final Looper getLooper() {
-    	return looper;
+        return looper;
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMessage.java
Patch:
@@ -21,7 +21,7 @@ public class ShadowMessage {
     public void setData(Bundle data) {
         this.data = data;
     }
-    
+
     @Implementation
     public void setTarget(Handler target) {
         this.target = target;
@@ -39,7 +39,7 @@ public Bundle getData() {
         }
         return data;
     }
-    
+
     @Implementation
     public Handler getTarget() {
         return target;
@@ -51,6 +51,7 @@ public void copyFrom(Message m) {
         message.arg2 = m.arg2;
         message.obj = m.obj;
         message.setData(m.getData());
+        message.setTarget(m.getTarget());
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowFrameLayout.java
Patch:
@@ -22,7 +22,7 @@ public void __constructor__(Context context, AttributeSet attributeSet, int defS
     }
     
     @Implementation
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     	int width = MeasureSpec.getSize(widthMeasureSpec);
     	int height = MeasureSpec.getSize(heightMeasureSpec);
     	

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -428,6 +428,7 @@ public static void resetStaticState() {
         ShadowLooper.resetThreadLoopers();
         ShadowDialog.reset();
         ShadowContentResolver.reset();
+        ShadowLocalBroadcastManager.reset();
     }
 
     public static <T> T directlyOn(T shadowedObject) {
@@ -601,7 +602,7 @@ public static ShadowCountDownTimer shadowOf(CountDownTimer instance) {
     public static ShadowCursorAdapter shadowOf(CursorAdapter instance) {
         return (ShadowCursorAdapter) shadowOf_(instance);
     }
-    
+
     public static ShadowCursorLoader shadowOf(CursorLoader instance) {
         return (ShadowCursorLoader) shadowOf_(instance);
     }
@@ -1272,7 +1273,7 @@ public static Object newInstanceOf(String className) {
 
         public static void setFinalStaticField(Class classWhichContainsField, String fieldName, Object newValue) {
             try {
-                Field field = classWhichContainsField.getField(fieldName);
+                Field field = classWhichContainsField.getDeclaredField(fieldName);
                 field.setAccessible(true);
 
                 Field modifiersField = Field.class.getDeclaredField("modifiers");

File: src/test/java/com/xtremelabs/robolectric/bytecode/AndroidTranslatorUnitTest.java
Patch:
@@ -129,8 +129,8 @@ public void shouldNotInstrumentInterfaces() throws Exception {
     }
 
     @Test
-    public void shouldNotInstrumentAndroidSupportClasses() throws Exception {
-        assertFalse(androidTranslator.shouldInstrument(classPool.makeClass("android.support.v4.LocalBroadcastManager")));
+    public void shouldNotInstrumentLocalBroadcastManager() throws Exception {
+        assertFalse(androidTranslator.shouldInstrument(classPool.makeClass("android.support.v4.content.LocalBroadcastManager")));
     }
 
     @Test

File: src/test/java/com/xtremelabs/robolectric/shadows/FragmentManagerTest.java
Patch:
@@ -58,7 +58,8 @@ public void addFragment_shouldCallLifecycleMethods() throws Exception {
                 "onCreate",
                 "onCreateView",
                 "onViewCreated",
-                "onActivityCreated"
+                "onActivityCreated",
+                "onStart"
         );
 
         assertSame(activity, fragment.onAttachActivity);

File: src/test/java/com/xtremelabs/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -344,6 +344,6 @@ public HttpParams getParams() {
     public void shouldSupportRealHttpRequests() throws Exception {
         Robolectric.getFakeHttpLayer().interceptHttpRequests(false);
         DefaultHttpClient client = new DefaultHttpClient();
-        client.execute(new HttpGet("http://www.this-host-should-not-exist-123456790.org"));
+        client.execute(new HttpGet("http://www.this-host-should-not-exist-123456790.org:999"));
     }
 }

File: src/test/java/com/xtremelabs/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -344,6 +344,6 @@ public HttpParams getParams() {
     public void shouldSupportRealHttpRequests() throws Exception {
         Robolectric.getFakeHttpLayer().interceptHttpRequests(false);
         DefaultHttpClient client = new DefaultHttpClient();
-        client.execute(new HttpGet("http://www.this-host-should-not-exist-123456790.org"));
+        client.execute(new HttpGet("http://www.this-host-should-not-exist-123456790.org:999"));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContext.java
Patch:
@@ -134,6 +134,7 @@ public static void clearFilesAndCache() {
         clearFiles(FILES_DIR);
         clearFiles(CACHE_DIR);
         clearFiles(EXTERNAL_CACHE_DIR);
+        clearFiles(EXTERNAL_FILES_DIR);
     }
 
     public static void clearFiles(File dir) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAlertDialog.java
Patch:
@@ -294,7 +294,7 @@ public AlertDialog.Builder setMultiChoiceItems(CharSequence[] items, boolean[] c
 
         @Implementation(i18nSafe=false)
         public AlertDialog.Builder setTitle(CharSequence title) {
-            this.title = title.toString();
+            this.title = title == null ? "" : title.toString();
             return realBuilder;
         }
 
@@ -312,7 +312,7 @@ public AlertDialog.Builder setTitle(int titleId) {
 
         @Implementation(i18nSafe=false)
         public AlertDialog.Builder setMessage(CharSequence message) {
-            this.message = message.toString();
+            this.message = message == null ? "" : message.toString();
             return realBuilder;
         }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContext.java
Patch:
@@ -93,8 +93,9 @@ public File getExternalCacheDir() {
     
     @Implementation
     public File getExternalFilesDir(String type) {
-        EXTERNAL_FILES_DIR.mkdirs();
-        return EXTERNAL_FILES_DIR;
+    	File f = (type == null) ? EXTERNAL_FILES_DIR : new File( EXTERNAL_FILES_DIR, type );
+        f.mkdirs();
+        return f;
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewAnimator.java
Patch:
@@ -20,7 +20,7 @@ public void showPrevious() {
         setDisplayedChild(mWhichChild - 1);
     }
 
-	@Implementation
+    @Implementation
     public void setDisplayedChild(int whichChild) {
         mWhichChild = whichChild;
         if (whichChild >= getChildCount()) {

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -77,7 +77,7 @@ public static RobolectricConfig fromBaseDirWithLibraries(File baseDir) {
     private static void buildResourcePath(File baseDir, List<File> resources) {
         resources.add(new File(baseDir, "res"));
 
-        Properties properties = getProperties(new File(baseDir, "src/test/project.properties"));
+        Properties properties = getProperties(new File(baseDir, "project.properties"));
         if (properties != null) {
             int libRef = 1;
             String lib;

File: src/test/java/com/xtremelabs/robolectric/RobolectricConfigTest.java
Patch:
@@ -66,6 +66,7 @@ public void shouldReturnPackageNameWhenNoProcessIsSpecifiedInTheManifest() {
     }
     
     @Test public void shouldLoadAllResourcesForLibraries() {
+        // This intentionally loads from the non standard resources/project.properties
         RobolectricConfig config = fromBaseDirWithLibraries(resourcesBaseDir());
 
         List<File> resourceFileDirs = config.getResourcePath();

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -77,7 +77,7 @@ public static RobolectricConfig fromBaseDirWithLibraries(File baseDir) {
     private static void buildResourcePath(File baseDir, List<File> resources) {
         resources.add(new File(baseDir, "res"));
 
-        Properties properties = getProperties(new File(baseDir, "src/test/project.properties"));
+        Properties properties = getProperties(new File(baseDir, "project.properties"));
         if (properties != null) {
             int libRef = 1;
             String lib;

File: src/test/java/com/xtremelabs/robolectric/RobolectricConfigTest.java
Patch:
@@ -66,6 +66,7 @@ public void shouldReturnPackageNameWhenNoProcessIsSpecifiedInTheManifest() {
     }
     
     @Test public void shouldLoadAllResourcesForLibraries() {
+        // This intentionally loads from the non standard resources/project.properties
         RobolectricConfig config = fromBaseDirWithLibraries(resourcesBaseDir());
 
         List<File> resourceFileDirs = config.getResourcePath();

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContentProviderOperation.java
Patch:
@@ -46,7 +46,8 @@ public static Builder newDelete(Uri uri) {
         shadowBuilder.setDelete(true);
         return builder;
     }
-    
+   
+    @Implementation
     public Uri getUri() {
         return uri;
     }
@@ -86,4 +87,4 @@ public boolean isDelete() {
     public void setDelete(boolean value) {
         isDelete = value;
     }
-}
\ No newline at end of file
+}

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowEditText.java
Patch:
@@ -14,7 +14,7 @@
 @Implements(EditText.class)
 public class ShadowEditText extends ShadowTextView {
 
-    private int maxLength;
+    private int maxLength = Integer.MAX_VALUE;
 
     public ShadowEditText() {
         focusable = true;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContext.java
Patch:
@@ -26,7 +26,7 @@ abstract public class ShadowContext {
     public static final File CACHE_DIR = new File(System.getProperty("java.io.tmpdir"), "android-cache");
     public static final File EXTERNAL_CACHE_DIR = new File(System.getProperty("java.io.tmpdir"), "android-external-cache");
     public static final File FILES_DIR = new File(System.getProperty("java.io.tmpdir"), "android-tmp");
-    public static final File EXTERNAL_FILES_DIR = new File(System.getProperty("java.io.tmpdir"), "android-external-tmp");
+    public static final File EXTERNAL_FILES_DIR = new File(System.getProperty("java.io.tmpdir"), "android-external-files");
 
     @RealObject private Context realContext;
 

File: src/test/java/com/xtremelabs/robolectric/shadows/SpannableStringBuilderTest.java
Patch:
@@ -35,7 +35,7 @@ public void testReplace() throws Exception {
     public void testInsert() throws Exception {
         SpannableStringBuilder builder = new SpannableStringBuilder("abc");
         assertThat(builder.insert(1, "xy").toString(), equalTo("axybc"));
-
+    }
     
     @Test
     public void testDelete() throws Exception {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowEditText.java
Patch:
@@ -13,7 +13,7 @@
 @Implements(EditText.class)
 public class ShadowEditText extends ShadowTextView {
 
-    private int maxLength;
+    private int maxLength = Integer.MAX_VALUE;
 
     public ShadowEditText() {
         focusable = true;

File: src/main/java/com/xtremelabs/robolectric/internal/Implementation.java
Patch:
@@ -10,4 +10,5 @@
 @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
 public @interface Implementation {
+	boolean i18nSafe() default true;
 }

File: src/main/java/com/xtremelabs/robolectric/internal/RobolectricTestRunnerInterface.java
Patch:
@@ -1,6 +1,7 @@
 package com.xtremelabs.robolectric.internal;
 
 import com.xtremelabs.robolectric.RobolectricConfig;
+import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 
 import java.lang.reflect.Method;
 
@@ -12,4 +13,6 @@ public interface RobolectricTestRunnerInterface {
     void internalAfterTest(Method method);
 
     void setRobolectricConfig(RobolectricConfig config);
+    
+    void setDatabaseMap(DatabaseMap databaseMap);    
 }

File: src/main/java/com/xtremelabs/robolectric/res/StringArrayResourceLoader.java
Patch:
@@ -41,6 +41,7 @@ public String[] getArrayValue(int resourceId) {
                 arrayValues.add(value);
             }
         }
-        stringArrayValues.put("array/" + name, arrayValues.toArray(new String[arrayValues.size()]));
+        String valuePointer = (isSystem ? "android:" : "") + "array/" + name;
+        stringArrayValues.put(valuePointer, arrayValues.toArray(new String[arrayValues.size()]));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/res/StringResourceLoader.java
Patch:
@@ -17,8 +17,8 @@ public String getValue(String resourceName, boolean isSystem) {
         return getValue(resourceExtractor.getResourceId(resourceName, isSystem));
     }
 
-    @Override protected void processNode(Node node, String name, boolean ignored) {
-        stringResolver.processResource(name, node.getTextContent(), this);
+    @Override protected void processNode(Node node, String name, boolean isSystem) {
+        stringResolver.processResource(name, node.getTextContent(), this, isSystem);
     }
 
     @Override public Object convertRawValue(String rawValue) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCameraParameters.java
Patch:
@@ -84,8 +84,8 @@ public List<Integer> getSupportedPreviewFormats() {
     @Implementation
     public List<int[]> getSupportedPreviewFpsRange() {
         List<int[]> supportedRanges = new ArrayList<int[]>();
-        addRange(supportedRanges, 15, 15);
-        addRange(supportedRanges, 10, 30);
+        addRange(supportedRanges, 15000, 15000);
+        addRange(supportedRanges, 10000, 30000);
         return supportedRanges;
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -4,7 +4,6 @@
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 
-@SuppressWarnings({"UnusedDeclaration"})
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
 
@@ -15,7 +14,7 @@ public String getMacAddress() {
         return macAddress;
     }
 
-    public void setMacAddress(String macAddress) {
-        this.macAddress = macAddress;
+    public void setMacAddress(String newMacAddress) {
+        macAddress = newMacAddress;
     }
 }

File: src/main/java/com/xtremelabs/robolectric/tester/android/view/TestWindowManager.java
Patch:
@@ -9,7 +9,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class TestWindowManager implements WindowManager {
 
-    private static Display display;
+    private Display display;
 
     @Override
     public void addView(View arg0, android.view.ViewGroup.LayoutParams arg1) {
@@ -31,5 +31,4 @@ public Display getDefaultDisplay() {
     @Override
     public void removeViewImmediate(View arg0) {
     }
-
 }

File: src/test/java/com/xtremelabs/robolectric/bytecode/Foo.java
Patch:
@@ -7,7 +7,7 @@ public class Foo {
     public Foo(String s) {
         throw new RuntimeException("stub!");
     }
-
+    
     public String getName() {
         throw new RuntimeException("stub!");
     }

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -464,7 +464,7 @@ private ResourceLoader createResourceLoader(final RobolectricConfig robolectricC
 
                 String rClassName = robolectricConfig.getRClassName();
                 Class rClass = Class.forName(rClassName);
-                resourceLoader = new ResourceLoader(robolectricConfig.getRealSdkVersion(), rClass, robolectricConfig.getResourceDirectory(), robolectricConfig.getAssetsDirectory());
+                resourceLoader = new ResourceLoader(robolectricConfig.getRealSdkVersion(), rClass, robolectricConfig.getResourcePath(), robolectricConfig.getAssetsDirectory());
                 resourceLoaderForRootAndDirectory.put(robolectricConfig, resourceLoader);
             } catch (Exception e) {
                 throw new RuntimeException(e);

File: src/main/java/com/xtremelabs/robolectric/res/ViewLoader.java
Patch:
@@ -91,6 +91,7 @@ private View inflateView(Context context, String layoutName, Map<String, String>
         if (viewNode == null) {
             throw new RuntimeException("Could not find layout " + layoutName);
         }
+
         try {
             if (attributes != null) {
                 for (Map.Entry<String, String> entry : attributes.entrySet()) {

File: src/test/java/com/xtremelabs/robolectric/util/TestUtil.java
Patch:
@@ -81,7 +81,7 @@ public static File resourceFile(String... pathParts) {
     }
 
     public static RobolectricConfig newConfig(String androidManifestFile) {
-        return new RobolectricConfig(resourceFile(androidManifestFile), null, null);
+        return new RobolectricConfig(resourceFile(androidManifestFile), (File) null, null);
     }
 
     public static File getSystemResourceDir(String... paths) throws Exception {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLocation.java
Patch:
@@ -300,6 +300,7 @@ public static void distanceBetween(double startLatitude, double startLongitude,
         double endLatitude, double endLongitude, float[] results) {
         if (distanceBetween != null && results.length == distanceBetween.length){
             System.arraycopy(distanceBetween, 0, results, 0, results.length);
+            return;
         }
 
         if (results == null || results.length < 1) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -70,7 +70,6 @@ public class ShadowView {
     private View.OnTouchListener onTouchListener;
     protected AttributeSet attributeSet;
     private boolean drawingCacheEnabled;
-    private Drawable backgroundDrawable;
     private int measuredWidth;
     private int measuredHeight;
     public Point scrollToCoordinates;
@@ -379,9 +378,9 @@ public final int getMeasuredHeight() {
 
     @Implementation
     public void draw(android.graphics.Canvas canvas) {
-        if (backgroundDrawable != null) {
+        if (background != null) {
             shadowOf(canvas).appendDescription("background:");
-            backgroundDrawable.draw(canvas);
+            background.draw(canvas);
         }
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -151,7 +151,7 @@ public View findViewById(int viewId) {
             if (inflatedView == null && layoutId > 0) {
                 inflatedView = ShadowLayoutInflater.from(context).inflate(layoutId, null);
             }
-            return inflatedView.findViewById(viewId);
+            if (inflatedView != null) return inflatedView.findViewById(viewId);
         }
         return null;
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowIntent.java
Patch:
@@ -232,6 +232,7 @@ public boolean hasExtra(String name) {
         return extras.containsKey(name);
     }
 
+    @Implementation
     public Intent putExtra(String key, int[] value) {
         extras.put(key, value);
         return realIntent;

File: src/main/java/com/xtremelabs/robolectric/tester/android/util/TestAttributeSet.java
Patch:
@@ -139,7 +139,8 @@ public TestAttributeSet put(String name, String value) {
             return 0;
         }
         if (resourceExtractor != null) {
-            return resourceExtractor.getResourceId(value);
+            Integer i = resourceExtractor.getResourceId(value);
+            if (i != null) return i;
         }
         return 0;
     }

File: src/main/java/com/xtremelabs/robolectric/res/ResourceLoader.java
Patch:
@@ -41,7 +41,6 @@ public boolean accept(File file) {
     private final List<MenuLoader> menuLoaders = new ArrayList<MenuLoader>();
     private final List<StringResourceLoader> stringResourceLoaders = new ArrayList<StringResourceLoader>();
     private final List<StringArrayResourceLoader> stringArrayResourceLoaders = new ArrayList<StringArrayResourceLoader>();
-    private final List<AttrResourceLoader> attrResourceLoaders = new ArrayList<AttrResourceLoader>();
     private final List<ColorResourceLoader> colorResourceLoaders = new ArrayList<ColorResourceLoader>();
     private final List<RawResourceLoader> rawResourceLoaders = new ArrayList<RawResourceLoader>();
     private boolean isInitialized = false;
@@ -77,12 +76,12 @@ private void init() {
             try {
                 File systemResourceDir = getSystemResourceDir(getPathToAndroidResources());
                 File systemValueResourceDir = getValueResourceDir(systemResourceDir);
+                AttrResourceLoader attrResourceLoader = new AttrResourceLoader(resourceExtractor);
 
                 for (File resourceDir : resourcePath) {
                     StringResourceLoader stringResourceLoader = new StringResourceLoader(resourceExtractor);
                     StringArrayResourceLoader stringArrayResourceLoader = new StringArrayResourceLoader(resourceExtractor, stringResourceLoader);
                     ColorResourceLoader colorResourceLoader = new ColorResourceLoader(resourceExtractor);
-                    AttrResourceLoader attrResourceLoader = new AttrResourceLoader(resourceExtractor);
                     RawResourceLoader rawResourceLoader = new RawResourceLoader(resourceExtractor, resourceDir);
 
                     ViewLoader viewLoader = new ViewLoader(resourceExtractor, attrResourceLoader);
@@ -98,7 +97,6 @@ private void init() {
                     stringResourceLoaders.add(stringResourceLoader);
                     stringArrayResourceLoaders.add(stringArrayResourceLoader);
                     colorResourceLoaders.add(colorResourceLoader);
-                    attrResourceLoaders.add(attrResourceLoader);
                     rawResourceLoaders.add(rawResourceLoader);
                     viewLoaders.add(viewLoader);
                     menuLoaders.add(menuLoader);

File: src/main/java/com/xtremelabs/robolectric/res/ResourceLoader.java
Patch:
@@ -41,7 +41,6 @@ public boolean accept(File file) {
     private final List<MenuLoader> menuLoaders = new ArrayList<MenuLoader>();
     private final List<StringResourceLoader> stringResourceLoaders = new ArrayList<StringResourceLoader>();
     private final List<StringArrayResourceLoader> stringArrayResourceLoaders = new ArrayList<StringArrayResourceLoader>();
-    private final List<AttrResourceLoader> attrResourceLoaders = new ArrayList<AttrResourceLoader>();
     private final List<ColorResourceLoader> colorResourceLoaders = new ArrayList<ColorResourceLoader>();
     private final List<RawResourceLoader> rawResourceLoaders = new ArrayList<RawResourceLoader>();
     private boolean isInitialized = false;
@@ -77,12 +76,12 @@ private void init() {
             try {
                 File systemResourceDir = getSystemResourceDir(getPathToAndroidResources());
                 File systemValueResourceDir = getValueResourceDir(systemResourceDir);
+                AttrResourceLoader attrResourceLoader = new AttrResourceLoader(resourceExtractor);
 
                 for (File resourceDir : resourcePath) {
                     StringResourceLoader stringResourceLoader = new StringResourceLoader(resourceExtractor);
                     StringArrayResourceLoader stringArrayResourceLoader = new StringArrayResourceLoader(resourceExtractor, stringResourceLoader);
                     ColorResourceLoader colorResourceLoader = new ColorResourceLoader(resourceExtractor);
-                    AttrResourceLoader attrResourceLoader = new AttrResourceLoader(resourceExtractor);
                     RawResourceLoader rawResourceLoader = new RawResourceLoader(resourceExtractor, resourceDir);
 
                     ViewLoader viewLoader = new ViewLoader(resourceExtractor, attrResourceLoader);
@@ -98,7 +97,6 @@ private void init() {
                     stringResourceLoaders.add(stringResourceLoader);
                     stringArrayResourceLoaders.add(stringArrayResourceLoader);
                     colorResourceLoaders.add(colorResourceLoader);
-                    attrResourceLoaders.add(attrResourceLoader);
                     rawResourceLoaders.add(rawResourceLoader);
                     viewLoaders.add(viewLoader);
                     menuLoaders.add(menuLoader);

File: src/main/java/com/xtremelabs/robolectric/internal/Implementation.java
Patch:
@@ -10,4 +10,5 @@
 @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
 public @interface Implementation {
+	boolean i18nSafe() default true;
 }

File: src/main/java/com/xtremelabs/robolectric/internal/RobolectricTestRunnerInterface.java
Patch:
@@ -1,6 +1,7 @@
 package com.xtremelabs.robolectric.internal;
 
 import com.xtremelabs.robolectric.RobolectricConfig;
+import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 
 import java.lang.reflect.Method;
 
@@ -12,4 +13,6 @@ public interface RobolectricTestRunnerInterface {
     void internalAfterTest(Method method);
 
     void setRobolectricConfig(RobolectricConfig config);
+    
+    void setDatabaseMap(DatabaseMap databaseMap);    
 }

File: src/main/java/com/xtremelabs/robolectric/res/StringArrayResourceLoader.java
Patch:
@@ -41,6 +41,7 @@ public String[] getArrayValue(int resourceId) {
                 arrayValues.add(value);
             }
         }
-        stringArrayValues.put("array/" + name, arrayValues.toArray(new String[arrayValues.size()]));
+        String valuePointer = (isSystem ? "android:" : "") + "array/" + name;
+        stringArrayValues.put(valuePointer, arrayValues.toArray(new String[arrayValues.size()]));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/res/StringResourceLoader.java
Patch:
@@ -17,8 +17,8 @@ public String getValue(String resourceName, boolean isSystem) {
         return getValue(resourceExtractor.getResourceId(resourceName, isSystem));
     }
 
-    @Override protected void processNode(Node node, String name, boolean ignored) {
-        stringResolver.processResource(name, node.getTextContent(), this);
+    @Override protected void processNode(Node node, String name, boolean isSystem) {
+        stringResolver.processResource(name, node.getTextContent(), this, isSystem);
     }
 
     @Override public Object convertRawValue(String rawValue) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCameraParameters.java
Patch:
@@ -84,8 +84,8 @@ public List<Integer> getSupportedPreviewFormats() {
     @Implementation
     public List<int[]> getSupportedPreviewFpsRange() {
         List<int[]> supportedRanges = new ArrayList<int[]>();
-        addRange(supportedRanges, 15, 15);
-        addRange(supportedRanges, 10, 30);
+        addRange(supportedRanges, 15000, 15000);
+        addRange(supportedRanges, 10000, 30000);
         return supportedRanges;
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowWifiInfo.java
Patch:
@@ -4,7 +4,6 @@
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 
-@SuppressWarnings({"UnusedDeclaration"})
 @Implements(WifiInfo.class)
 public class ShadowWifiInfo {
 
@@ -15,7 +14,7 @@ public String getMacAddress() {
         return macAddress;
     }
 
-    public void setMacAddress(String macAddress) {
-        this.macAddress = macAddress;
+    public void setMacAddress(String newMacAddress) {
+        macAddress = newMacAddress;
     }
 }

File: src/main/java/com/xtremelabs/robolectric/tester/android/view/TestWindowManager.java
Patch:
@@ -9,7 +9,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class TestWindowManager implements WindowManager {
 
-    private static Display display;
+    private Display display;
 
     @Override
     public void addView(View arg0, android.view.ViewGroup.LayoutParams arg1) {
@@ -31,5 +31,4 @@ public Display getDefaultDisplay() {
     @Override
     public void removeViewImmediate(View arg0) {
     }
-
 }

File: src/test/java/com/xtremelabs/robolectric/bytecode/Foo.java
Patch:
@@ -7,7 +7,7 @@ public class Foo {
     public Foo(String s) {
         throw new RuntimeException("stub!");
     }
-
+    
     public String getName() {
         throw new RuntimeException("stub!");
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/LocationManagerTest.java
Patch:
@@ -57,9 +57,10 @@ public void shouldReturnNoProviderEnabledByDefault() {
 
     @Test
     public void shouldDisableProvider() {
+        // No provider is enabled by default, so it must be manually enabled
+        shadowLocationManager.setProviderEnabled(GPS_PROVIDER, true);
         shadowLocationManager.setProviderEnabled(GPS_PROVIDER, false);
-        Boolean enabled = locationManager.isProviderEnabled(GPS_PROVIDER);
-        assertFalse(enabled);
+        assertFalse(locationManager.isProviderEnabled(GPS_PROVIDER));
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -363,6 +363,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowViewConfiguration.class,
                 ShadowViewGroup.class,
                 ShadowViewFlipper.class,
+                ShadowViewMeasureSpec.class,
                 ShadowViewStub.class,
                 ShadowWebSettings.class,
                 ShadowWebView.class,
@@ -383,6 +384,7 @@ public static void resetStaticState() {
         ShadowLog.reset();
         ShadowContext.clearFilesAndCache();
         ShadowLooper.resetThreadLoopers();
+        ShadowDialog.reset();
     }
 
     public static <T> T directlyOn(T shadowedObject) {

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -12,7 +12,7 @@
 import com.xtremelabs.robolectric.util.DatabaseConfig;
 import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 import com.xtremelabs.robolectric.util.DatabaseConfig.UsingDatabaseMap;
-import com.xtremelabs.robolectric.util.H2Map;
+import com.xtremelabs.robolectric.util.SQLiteMap;
 import javassist.Loader;
 import org.junit.runners.BlockJUnit4ClassRunner;
 import org.junit.runners.model.FrameworkMethod;
@@ -102,7 +102,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final RobolectricConfi
         this(testClass,
                 isInstrumented() ? null : ShadowWrangler.getInstance(),
                 isInstrumented() ? null : getDefaultLoader(),
-                robolectricConfig,new H2Map());
+                robolectricConfig, new SQLiteMap());
     }
     
     /**
@@ -181,7 +181,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final String androidMa
     }
 
     protected RobolectricTestRunner(Class<?> testClass, ClassHandler classHandler, RobolectricClassLoader classLoader, RobolectricConfig robolectricConfig) throws InitializationError {
-    	this(testClass, classHandler, classLoader, robolectricConfig,new H2Map());	
+        this(testClass, classHandler, classLoader, robolectricConfig, new SQLiteMap());
     }
         
     

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLooper.java
Patch:
@@ -20,7 +20,7 @@ public class ShadowLooper {
     private static ThreadLocal<Looper> looperForThread = makeThreadLocalLoopers();
     private Scheduler scheduler = new Scheduler();
 
-    private static ThreadLocal<Looper> makeThreadLocalLoopers() {
+    private static synchronized ThreadLocal<Looper> makeThreadLocalLoopers() {
         return new ThreadLocal<Looper>() {
             @Override
             protected Looper initialValue() {
@@ -39,7 +39,7 @@ public static Looper getMainLooper() {
     }
 
     @Implementation
-    public static Looper myLooper() {
+    public static synchronized Looper myLooper() {
         return looperForThread.get();
     }
 

File: src/main/java/com/xtremelabs/robolectric/util/SQLite.java
Patch:
@@ -14,7 +14,7 @@
  * {@code ShadowSQLiteDatabase} and {@code ShadowSQLiteCursor}.
  */
 public class SQLite {
-    private static final String[] CONFLICT_VALUES = {"", " OR ROLLBACK ", " OR ABORT ", " OR FAIL ", " OR IGNORE ", " OR REPLACE "};
+    private static final String[] CONFLICT_VALUES = {"", "OR ROLLBACK ", "OR ABORT ", "OR FAIL ", "OR IGNORE ", "OR REPLACE "};
 
     /**
      * Create a SQL INSERT string.  Returned values are then bound via

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -12,7 +12,7 @@
 import com.xtremelabs.robolectric.util.DatabaseConfig;
 import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 import com.xtremelabs.robolectric.util.DatabaseConfig.UsingDatabaseMap;
-import com.xtremelabs.robolectric.util.H2Map;
+import com.xtremelabs.robolectric.util.SQLiteMap;
 import javassist.Loader;
 import org.junit.runners.BlockJUnit4ClassRunner;
 import org.junit.runners.model.FrameworkMethod;
@@ -102,7 +102,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final RobolectricConfi
         this(testClass,
                 isInstrumented() ? null : ShadowWrangler.getInstance(),
                 isInstrumented() ? null : getDefaultLoader(),
-                robolectricConfig,new H2Map());
+                robolectricConfig, new SQLiteMap());
     }
     
     /**
@@ -181,7 +181,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final String androidMa
     }
 
     protected RobolectricTestRunner(Class<?> testClass, ClassHandler classHandler, RobolectricClassLoader classLoader, RobolectricConfig robolectricConfig) throws InitializationError {
-    	this(testClass, classHandler, classLoader, robolectricConfig,new H2Map());	
+        this(testClass, classHandler, classLoader, robolectricConfig, new SQLiteMap());
     }
         
     

File: src/test/java/com/xtremelabs/robolectric/util/SQLiteTest.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import android.content.ContentValues;
+import android.database.sqlite.SQLiteDatabase;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.SQLite.*;
 import org.junit.Before;
@@ -34,7 +35,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testBuildInsertString() {
-        SQLStringAndBindings insertString = buildInsertString("table_name", values);
+        SQLStringAndBindings insertString = buildInsertString("table_name", values, SQLiteDatabase.CONFLICT_NONE);
         assertThat(insertString.sql, equalTo("INSERT INTO table_name (float_value, byte_data, name, int_value) VALUES (?, ?, ?, ?);"));
         verifyColumnValues(insertString.columnValues);
     }

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -12,7 +12,7 @@
 import com.xtremelabs.robolectric.util.DatabaseConfig;
 import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 import com.xtremelabs.robolectric.util.DatabaseConfig.UsingDatabaseMap;
-import com.xtremelabs.robolectric.util.H2Map;
+import com.xtremelabs.robolectric.util.SQLiteMap;
 import javassist.Loader;
 import org.junit.runners.BlockJUnit4ClassRunner;
 import org.junit.runners.model.FrameworkMethod;
@@ -102,7 +102,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final RobolectricConfi
         this(testClass,
                 isInstrumented() ? null : ShadowWrangler.getInstance(),
                 isInstrumented() ? null : getDefaultLoader(),
-                robolectricConfig,new H2Map());
+                robolectricConfig, new SQLiteMap());
     }
     
     /**
@@ -181,7 +181,7 @@ protected RobolectricTestRunner(final Class<?> testClass, final String androidMa
     }
 
     protected RobolectricTestRunner(Class<?> testClass, ClassHandler classHandler, RobolectricClassLoader classLoader, RobolectricConfig robolectricConfig) throws InitializationError {
-    	this(testClass, classHandler, classLoader, robolectricConfig,new H2Map());	
+        this(testClass, classHandler, classLoader, robolectricConfig, new SQLiteMap());
     }
         
     

File: src/test/java/com/xtremelabs/robolectric/util/SQLiteTest.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import android.content.ContentValues;
+import android.database.sqlite.SQLiteDatabase;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.SQLite.*;
 import org.junit.Before;
@@ -34,7 +35,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testBuildInsertString() {
-        SQLStringAndBindings insertString = buildInsertString("table_name", values);
+        SQLStringAndBindings insertString = buildInsertString("table_name", values, SQLiteDatabase.CONFLICT_NONE);
         assertThat(insertString.sql, equalTo("INSERT INTO table_name (float_value, byte_data, name, int_value) VALUES (?, ?, ?, ?);"));
         verifyColumnValues(insertString.columnValues);
     }

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -76,7 +76,7 @@ private void parseAndroidManifest() {
             packageName = getTagAttributeText(manifestDocument, "manifest", "package");
             rClassName = packageName + ".R";
             applicationName = getTagAttributeText(manifestDocument, "application", "android:name");
-            sdkVersion = getTagAttributeIntValue(manifestDocument, "uses-sdk", "android:targetSdkVersion", 9);
+            sdkVersion = getTagAttributeIntValue(manifestDocument, "uses-sdk", "android:targetSdkVersion", 10);
         } catch (Exception ignored) {
         }
         manifestIsParsed = true;

File: src/test/java/com/xtremelabs/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldUseFileSystemSeparatorWhenEvaluatingLayoutDirectories() throws
 
     @Test
     public void shouldLoadSystemResources() throws Exception {
-        ResourceLoader resourceLoader = new ResourceLoader(9, R.class, resourceFile("res"), resourceFile("assets"));
+        ResourceLoader resourceLoader = new ResourceLoader(10, R.class, resourceFile("res"), resourceFile("assets"));
         String stringValue = resourceLoader.getStringValue(android.R.string.copy);
         assertEquals("Copy", stringValue);
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -34,7 +34,7 @@ public class ViewGroupTest {
 
     @Before public void setUp() throws Exception {
         Application context = new Application();
-        ShadowApplication.bind(context, new ResourceLoader(9, R.class, null, null));
+        ShadowApplication.bind(context, new ResourceLoader(10, R.class, null, null));
 
         root = new FrameLayout(context);
 

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -76,7 +76,7 @@ private void parseAndroidManifest() {
             packageName = getTagAttributeText(manifestDocument, "manifest", "package");
             rClassName = packageName + ".R";
             applicationName = getTagAttributeText(manifestDocument, "application", "android:name");
-            sdkVersion = getTagAttributeIntValue(manifestDocument, "uses-sdk", "android:targetSdkVersion", 9);
+            sdkVersion = getTagAttributeIntValue(manifestDocument, "uses-sdk", "android:targetSdkVersion", 10);
         } catch (Exception ignored) {
         }
         manifestIsParsed = true;

File: src/test/java/com/xtremelabs/robolectric/res/ResourceLoaderTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldUseFileSystemSeparatorWhenEvaluatingLayoutDirectories() throws
 
     @Test
     public void shouldLoadSystemResources() throws Exception {
-        ResourceLoader resourceLoader = new ResourceLoader(9, R.class, resourceFile("res"), resourceFile("assets"));
+        ResourceLoader resourceLoader = new ResourceLoader(10, R.class, resourceFile("res"), resourceFile("assets"));
         String stringValue = resourceLoader.getStringValue(android.R.string.copy);
         assertEquals("Copy", stringValue);
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -34,7 +34,7 @@ public class ViewGroupTest {
 
     @Before public void setUp() throws Exception {
         Application context = new Application();
-        ShadowApplication.bind(context, new ResourceLoader(9, R.class, null, null));
+        ShadowApplication.bind(context, new ResourceLoader(10, R.class, null, null));
 
         root = new FrameLayout(context);
 

File: src/main/java/com/xtremelabs/robolectric/res/ColorResourceLoader.java
Patch:
@@ -1,6 +1,5 @@
 package com.xtremelabs.robolectric.res;
 
-import android.R;
 import android.graphics.Color;
 import org.w3c.dom.Node;
 
@@ -37,6 +36,7 @@ public class ColorResourceLoader extends XpathResourceXmlLoader implements Resou
         androidColors.put("@android:color/yellow", Color.YELLOW);
         androidColors.put("@android:color/cyan", Color.CYAN);
         androidColors.put("@android:color/magenta", Color.MAGENTA);
+        androidColors.put("@android:color/transparent", Color.TRANSPARENT);
 
         androidColorsFromIds.put(android.R.color.black, Color.BLACK);
         androidColorsFromIds.put(android.R.color.white, Color.WHITE);

File: src/test/java/com/xtremelabs/robolectric/R.java
Patch:
@@ -57,6 +57,7 @@ public static final class color {
         public static final int clear = nextId++;
         public static final int color_with_alpha = nextId++;
         public static final int android_namespaced_black = nextId++;
+        public static final int android_namespaced_transparent = nextId++;
         public static final int android_red = nextId++;
     }
 

File: src/test/java/com/xtremelabs/robolectric/res/ColorResourceLoaderTest.java
Patch:
@@ -63,6 +63,7 @@ public void shouldNotSupportCarrierDefinedColors() throws Exception {
     @Test
     public void shouldParseAndroidColorReferences() throws Exception {
         assertThat(colorResourceLoader.getValue(R.color.android_namespaced_black), equalTo(Color.BLACK));
+        assertThat(colorResourceLoader.getValue(R.color.android_namespaced_transparent), equalTo(Color.TRANSPARENT));
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -235,6 +235,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowContextThemeWrapper.class,
                 ShadowCookieManager.class,
                 ShadowCookieSyncManager.class,
+                ShadowCriteria.class,
                 ShadowCountDownTimer.class,
                 ShadowCursorAdapter.class,
                 ShadowDatabaseUtils.class,

File: src/test/java/com/xtremelabs/robolectric/shadows/WifiManagerTest.java
Patch:
@@ -14,9 +14,9 @@
 import java.util.List;
 
 import static android.content.Context.WIFI_SERVICE;
-import static android.test.MoreAsserts.assertEmpty;
 import static com.xtremelabs.robolectric.Robolectric.application;
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
+import static junit.framework.Assert.assertTrue;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.sameInstance;
@@ -121,7 +121,7 @@ public void updateNetwork_shouldRejectNullandNewConfigs() throws Exception {
         config.networkId = -1;
         assertThat(wifiManager.updateNetwork(config), equalTo(-1));
         assertThat(wifiManager.updateNetwork(null), equalTo(-1));
-        assertEmpty(wifiManager.getConfiguredNetworks());
+        assertTrue(wifiManager.getConfiguredNetworks().isEmpty());
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAssetManager.java
Patch:
@@ -29,10 +29,7 @@ public final String[] list(String path) throws IOException {
         File file = new File(resourceLoader.getAssetsBase(), path);
         if (file.isDirectory()) {
             return file.list();
-        } else if (file.exists()) {
-            return new String[] {file.getName()};
         }
-
         return new String[0];
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -116,10 +116,10 @@ public int getPosition(T item) {
     @Implementation
     public View getView(int position, View convertView, ViewGroup parent) {
         T item = list.get(position);
-        View view = getResourceLoader().inflateView(context, resource, parent);
+        View view = getResourceLoader().inflateView(context, resource, null);
 
         if (convertView == null) {
-            view = getResourceLoader().inflateView(context,resource, parent);
+            view = getResourceLoader().inflateView(context,resource, null);
         } else {
             view = convertView;
         }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowEditText.java
Patch:
@@ -25,8 +25,11 @@ public ShadowEditText() {
 
     @Override @Implementation
     public void setText(CharSequence text) {
+    	CharSequence oldText = getText();
         super.setText(text);
         for (TextWatcher watcher : watchers) {
+        	watcher.beforeTextChanged(getText(), 0, oldText.length(), getText().length());
+            watcher.onTextChanged(getText(), 0, oldText.length(), getText().length());
             watcher.afterTextChanged(getText());
         }
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -116,10 +116,10 @@ public int getPosition(T item) {
     @Implementation
     public View getView(int position, View convertView, ViewGroup parent) {
         T item = list.get(position);
-        View view = getResourceLoader().inflateView(context, resource, parent);
+        View view = getResourceLoader().inflateView(context, resource, null);
 
         if (convertView == null) {
-            view = getResourceLoader().inflateView(context,resource, parent);
+            view = getResourceLoader().inflateView(context,resource, null);
         } else {
             view = convertView;
         }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAdapterView.java
Patch:
@@ -265,8 +265,9 @@ protected void addViews() {
                 newItems.add(adapter.getItem(i));
                 View view = adapter.getView(i, null, realAdapterView);
                 // don't add null views
-                if( view != null ) { 
-                	addView(view);
+                if( view != null ) {
+                	//FIXME actually do i have to add the view? (will increase number of views in list)
+                	//addView(view);
                 }
             }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -116,7 +116,9 @@ public int getPosition(T item) {
     @Implementation
     public View getView(int position, View convertView, ViewGroup parent) {
         T item = list.get(position);
-        View view = getResourceLoader().inflateView(context, resource, parent);
+        //FIXME check if this is the reason of an empty entry! (will increase number of views in list)
+        //View view = getResourceLoader().inflateView(context, resource, parent);
+        View view;
 
         if (convertView == null) {
             view = getResourceLoader().inflateView(context,resource, parent);

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -72,10 +72,10 @@ private void setPosition(int pos) {
         }
     }
 
-
     @Implementation
     public boolean moveToNext() {
-        if (currentRowNumber >= realAbstractCursor.getCount()) {
+        if (currentRowNumber + 1 >= realAbstractCursor.getCount()) {
+            currentRowNumber = realAbstractCursor.getCount();
             return false;
         }
         setPosition(++currentRowNumber);

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -75,7 +75,7 @@ private void setPosition(int pos) {
 
     @Implementation
     public boolean moveToNext() {
-        if (currentRowNumber >= realAbstractCursor.getCount() - 1) {
+        if (currentRowNumber >= realAbstractCursor.getCount()) {
             return false;
         }
         setPosition(++currentRowNumber);
@@ -125,4 +125,4 @@ public boolean isBeforeFirst() {
     public boolean isAfterLast() {
         return currentRowNumber >= realAbstractCursor.getCount();
     }
-}
+}
\ No newline at end of file

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -75,7 +75,7 @@ private void setPosition(int pos) {
 
     @Implementation
     public boolean moveToNext() {
-        if (currentRowNumber >= realAbstractCursor.getCount() - 1) {
+        if (currentRowNumber >= realAbstractCursor.getCount()) {
             return false;
         }
         setPosition(++currentRowNumber);
@@ -125,4 +125,4 @@ public boolean isBeforeFirst() {
     public boolean isAfterLast() {
         return currentRowNumber >= realAbstractCursor.getCount();
     }
-}
+}
\ No newline at end of file

File: src/test/java/com/xtremelabs/robolectric/shadows/PasswordTransformationMethodTest.java
Patch:
@@ -22,19 +22,19 @@ public void setUp(){
     @Test
     public void shouldMaskInputCharacters(){
         CharSequence output = transformationMethod.getTransformation("foobar", null);
-        assertThat(output.toString(), is("••••••"));
+        assertThat(output.toString(), is("\u2022\u2022\u2022\u2022\u2022\u2022")); //using the escaped characters for cross platform compatibility.
     }
 
     @Test
     public void shouldTransformSpacesWithText(){
         CharSequence output = transformationMethod.getTransformation(" baz ", null);
-        assertThat(output.toString(), is("•••••"));
+        assertThat(output.toString(), is("\u2022\u2022\u2022\u2022\u2022"));
     }
 
     @Test
     public void shouldTransformSpacesWithoutText(){
         CharSequence output = transformationMethod.getTransformation("    ", null);
-        assertThat(output.toString(), is("••••"));
+        assertThat(output.toString(), is("\u2022\u2022\u2022\u2022"));
     }
 
     @Test

File: src/main/java/com/xtremelabs/robolectric/internal/Implementation.java
Patch:
@@ -10,4 +10,5 @@
 @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
 public @interface Implementation {
+	boolean i18nSafe() default true;
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -132,9 +132,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
         }
 
         if (item instanceof CharSequence) {
-            text.setText((CharSequence)item);
+            Robolectric.shadowOf(text).setText((CharSequence)item);
         } else {
-            text.setText(item.toString());
+        	Robolectric.shadowOf(text).setText(item.toString());
         }
 
         return view;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -71,7 +71,7 @@ public void setTitle(int stringResourceId) {
         this.title = context.getResources().getText(stringResourceId);
     }
 
-    @Implementation
+    @Implementation(i18nSafe=false)
     public void setTitle(CharSequence title) {
         this.title = title;
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowTextView.java
Patch:
@@ -47,7 +47,7 @@ public void applyAttributes() {
         applyCompoundDrawablesWithIntrinsicBoundsAttributes();
     }
 
-    @Implementation
+    @Implementation(i18nSafe=false)
     public void setText(CharSequence text) {
         if (text == null) {
             text = "";
@@ -100,7 +100,7 @@ public final void setHint(int resId) {
         this.hintText = getResources().getText(resId);
     }
 
-    @Implementation
+    @Implementation(i18nSafe=false)
     public final void setHint(CharSequence hintText) {
         this.hintText = hintText;
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowToast.java
Patch:
@@ -30,7 +30,7 @@ public static Toast makeText(Context context, int resId, int duration) {
         return makeText(context, context.getResources().getString(resId), duration);
     }
 
-    @Implementation
+    @Implementation(i18nSafe=false)
     public static Toast makeText(Context context, CharSequence text, int duration) {
         Toast toast = new Toast(null);
         shadowOf(toast).text = text.toString();

File: src/test/java/com/xtremelabs/robolectric/WithTestDefaultsRunner.java
Patch:
@@ -4,6 +4,8 @@
 
 import org.junit.runners.model.InitializationError;
 
+import com.xtremelabs.robolectric.bytecode.ClassHandler;
+import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
 import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 
 public class WithTestDefaultsRunner extends RobolectricTestRunner {
@@ -14,4 +16,5 @@ public WithTestDefaultsRunner(Class<?> testClass) throws InitializationError {
 	public WithTestDefaultsRunner(Class<?> testClass,DatabaseMap databaseMap) throws InitializationError {
 		super(testClass, new RobolectricConfig(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets")), databaseMap);
 	}
+
 }

File: src/test/java/com/xtremelabs/robolectric/bytecode/Foo.java
Patch:
@@ -7,7 +7,7 @@ public class Foo {
     public Foo(String s) {
         throw new RuntimeException("stub!");
     }
-
+    
     public String getName() {
         throw new RuntimeException("stub!");
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -268,7 +268,7 @@ public void shouldRecordExtendedRequestData() throws Exception {
     
     @Test
     public void shouldSupportBasicResponseHandlerHandleResponse() throws Exception {
-        Robolectric.addPendingHttpResponseWithContentType(200, "OK", new BasicHeader("Content-Type", "text/plain"));
+        Robolectric.addPendingHttpResponse(200, "OK", new BasicHeader("Content-Type", "text/plain"));
 
         DefaultHttpClient client = new DefaultHttpClient();
         HttpResponse response = client.execute(new HttpGet("http://www.nowhere.org"));

File: src/main/java/com/xtremelabs/robolectric/bytecode/RobolectricClassLoader.java
Patch:
@@ -35,7 +35,7 @@ public RobolectricClassLoader(ClassHandler classHandler, ArrayList<String> custo
     
     @Override
     public Class loadClass(String name) throws ClassNotFoundException {
-        boolean shouldComeFromThisClassLoader = !(name.startsWith("org.junit") || name.startsWith("org.hamcrest"));
+        boolean shouldComeFromThisClassLoader = !(name.startsWith("org.junit") || name.startsWith("org.hamcrest")  || name.startsWith("org.specs2") || name.startsWith("scala."));
 
         Class<?> theClass;
         if (shouldComeFromThisClassLoader) {

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -445,12 +445,13 @@ private ResourceLoader createResourceLoader(final RobolectricConfig robolectricC
                 String rClassName = robolectricConfig.getRClassName();
                 Class rClass = Class.forName(rClassName);
                 resourceLoader = new ResourceLoader(robolectricConfig.getRealSdkVersion(), rClass, robolectricConfig.getResourceDirectory(), robolectricConfig.getAssetsDirectory());
-                resourceLoader.setStrictI18n(robolectricConfig.getStrictI18n());
                 resourceLoaderForRootAndDirectory.put(robolectricConfig, resourceLoader);
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }
         }
+
+        resourceLoader.setStrictI18n(robolectricConfig.getStrictI18n());
         return resourceLoader;
     }
 

File: src/test/java/com/xtremelabs/robolectric/WithTestDefaultsRunner.java
Patch:
@@ -4,6 +4,8 @@
 
 import org.junit.runners.model.InitializationError;
 
+import com.xtremelabs.robolectric.bytecode.ClassHandler;
+import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
 import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 
 public class WithTestDefaultsRunner extends RobolectricTestRunner {
@@ -14,4 +16,5 @@ public WithTestDefaultsRunner(Class<?> testClass) throws InitializationError {
 	public WithTestDefaultsRunner(Class<?> testClass,DatabaseMap databaseMap) throws InitializationError {
 		super(testClass, new RobolectricConfig(resourceFile("TestAndroidManifest.xml"), resourceFile("res"), resourceFile("assets")), databaseMap);
 	}
+
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -3,8 +3,8 @@
 import android.database.sqlite.SQLiteCursor;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
-import org.h2.jdbc.JdbcClob;
 
+import java.sql.Clob;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
@@ -101,9 +101,9 @@ public byte[] getBlob(int columnIndex) {
     public String getString(int columnIndex) {
         checkPosition();
         Object value = this.currentRow.get(getColumnNames()[columnIndex]);
-        if (value instanceof JdbcClob) {
+        if (value instanceof Clob) {
             try {
-                return ((JdbcClob) value).getSubString(1, (int)((JdbcClob) value).length());
+                return ((Clob) value).getSubString(1, (int)((Clob) value).length());
             } catch (SQLException x) {
                 throw new RuntimeException(x);
             }

File: src/test/java/com/xtremelabs/robolectric/shadows/TelephonyManagerTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldGiveNetworkOperator() {
 
     @Test(expected = SecurityException.class)
     public void getDeviceId_shouldThrowSecurityExceptionWhenReadPhoneStatePermissionNotGranted() throws Exception {
-        ShadowTelephonyManager.setReadPhoneStatePermissionGranted(false);
+        shadowManager.setReadPhoneStatePermission(false);
         manager.getDeviceId();
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -3,8 +3,8 @@
 import android.database.sqlite.SQLiteCursor;
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
-import org.h2.jdbc.JdbcClob;
 
+import java.sql.Clob;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
@@ -101,9 +101,9 @@ public byte[] getBlob(int columnIndex) {
     public String getString(int columnIndex) {
         checkPosition();
         Object value = this.currentRow.get(getColumnNames()[columnIndex]);
-        if (value instanceof JdbcClob) {
+        if (value instanceof Clob) {
             try {
-                return ((JdbcClob) value).getSubString(1, (int)((JdbcClob) value).length());
+                return ((Clob) value).getSubString(1, (int)((Clob) value).length());
             } catch (SQLException x) {
                 throw new RuntimeException(x);
             }

File: src/main/java/com/xtremelabs/robolectric/util/H2Map.java
Patch:
@@ -5,6 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+
 public class H2Map implements DatabaseConfig.DatabaseMap {
 
 	@Override

File: src/main/java/com/xtremelabs/robolectric/res/ViewLoader.java
Patch:
@@ -23,7 +23,7 @@
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 
 public class ViewLoader extends XmlLoader {
-    private Map<String, ViewNode> viewNodesByLayoutName = new HashMap<String, ViewNode>();
+    protected Map<String, ViewNode> viewNodesByLayoutName = new HashMap<String, ViewNode>();
     private AttrResourceLoader attrResourceLoader;
 
     public ViewLoader(ResourceExtractor resourceExtractor, AttrResourceLoader attrResourceLoader) {

File: src/test/java/com/xtremelabs/robolectric/res/ResourceExtractorTest.java
Patch:
@@ -15,6 +15,7 @@ public class ResourceExtractorTest {
     public void setUp() throws Exception {
         resourceExtractor = new ResourceExtractor();
         resourceExtractor.addLocalRClass(R.class);
+        resourceExtractor.addSystemRClass(android.R.class);
     }
 
     @Test
@@ -25,6 +26,6 @@ public void shouldHandleStyleable() throws Exception {
 
     @Test
     public void shouldPrefixAllSystemResourcesWithAndroid() throws Exception {
-        assertThat(resourceExtractor.getLocalResourceId("android:id/textStyle"), equalTo(R.id.textStyle));
+        assertThat(resourceExtractor.getResourceId("android:id/text1"), equalTo(android.R.id.text1));
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -112,7 +112,7 @@ public Drawable getDrawable(int drawableResourceId) throws Resources.NotFoundExc
     		return new BitmapDrawable(BitmapFactory.decodeResource(realResources, drawableResourceId));    		
     	}
 
-    	// Load the R.anim and R.color Classes for interigation
+    	// Load the R.anim and R.color Classes for interrogation
     	Class animClass = null;
     	Class colorClass = null;
     	try {

File: src/main/java/com/xtremelabs/robolectric/res/ResourceExtractor.java
Patch:
@@ -79,5 +79,4 @@ public Integer getResourceId(String resourceName, boolean isSystemResource) {
     public String getResourceName(int resourceId) {
         return resourceIdToString.get(resourceId);
     }
-
 }
\ No newline at end of file

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -474,8 +474,7 @@ public boolean isClickable() {
 
     @Implementation
     public Drawable getBackground() {
-//        return background;
-    	return null;
+        return background;
     }
     /**
      * Non-Android accessor.

File: src/test/java/com/xtremelabs/robolectric/R.java
Patch:
@@ -73,6 +73,7 @@ public static final class layout {
         public static final int media = nextId++;
         public static final int inner_merge = nextId++;
         public static final int included_linear_layout = nextId++;
+        public static final int edit_text = nextId++;
     }
 
     public static final class raw {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCursorAdapter.java
Patch:
@@ -47,10 +47,11 @@ public class ShadowCursorAdapter extends ShadowBaseAdapter {
 
     @Implementation
     public View getView(int position, View convertView, ViewGroup parent) {
-        if (this.mCursor == null) {
+    	// if the cursor is null OR there are no views to dispense return null
+        if (this.mCursor == null || views.size() == 0 ) {
             return null;
         }
-
+        
         if (convertView != null) {
             return convertView;
         }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -32,7 +32,7 @@ public class ShadowDialog {
     private View inflatedView;
     private boolean hasBeenDismissed;
     private DialogInterface.OnDismissListener onDismissListener;
-    private CharSequence title;
+    protected CharSequence title;
     private DialogInterface.OnCancelListener onCancelListener;
     private Window window;
     private Activity ownerActivity;

File: src/test/java/com/xtremelabs/robolectric/shadows/AlertDialogTest.java
Patch:
@@ -82,7 +82,7 @@ public void onClick(DialogInterface dialog, int item) {
         assertThat(alert.isShowing(), equalTo(true));
 
         ShadowAlertDialog shadowAlertDialog = shadowOf(alert);
-        assertThat(shadowAlertDialog.getTitle(), equalTo("title"));
+        assertThat(shadowAlertDialog.getTitle().toString(), equalTo("title"));
         assertThat(shadowAlertDialog.getItems().length, equalTo(2));
         assertEquals(shadowAlertDialog.getItems()[0], "Aloha");
         assertThat(ShadowAlertDialog.getLatestAlertDialog(), sameInstance(shadowAlertDialog));

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -36,7 +36,7 @@ public class ShadowDialog {
     private DialogInterface.OnCancelListener onCancelListener;
     private Window window;
     private Activity ownerActivity;
-    private boolean isCancelable;
+    private boolean isCancelable = true;
     private boolean hasShownBefore;
     
     public static void reset() {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowDialog.java
Patch:
@@ -36,7 +36,7 @@ public class ShadowDialog {
     private DialogInterface.OnCancelListener onCancelListener;
     private Window window;
     private Activity ownerActivity;
-    private boolean isCancelable;
+    private boolean isCancelable = true;
     private boolean hasShownBefore;
     
     public static void reset() {

File: src/test/java/com/xtremelabs/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -133,6 +133,7 @@ public void testMoveToNext() throws Exception {
     public void testMoveToNextPastEnd() throws Exception {
         cursor.moveToFirst();
 
+        cursor.moveToNext();
         cursor.moveToNext();
         cursor.moveToNext();
 

File: src/test/java/com/xtremelabs/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -154,7 +154,9 @@ public void testUpdateAll() throws Exception {
         assertThat(cursor.moveToNext(), equalTo(true));
 
         assertIdAndName(cursor, 1235L, "Belvedere");
-        assertThat(cursor.moveToNext(), equalTo(false));
+        assertThat(cursor.moveToNext(), equalTo(true));
+        
+        assertThat(cursor.moveToNext(), equalTo(false));	// past end
     }
 
     @Test

File: src/test/java/com/xtremelabs/robolectric/shadows/ContextTest.java
Patch:
@@ -93,6 +93,6 @@ public void openFileOutput_shouldReturnAFileOutputStream() throws Exception {
 
     @Test(expected = IllegalArgumentException.class)
     public void openFileOutput_shouldNotAcceptPathsWithSeparatorCharacters() throws Exception {
-        context.openFileOutput("/data/test/hi", 0);
+        context.openFileOutput(File.separator + "data" + File.separator + "test" + File.separator + "hi", 0);
     }
 }

File: src/test/java/com/xtremelabs/robolectric/shadows/ContextTest.java
Patch:
@@ -93,6 +93,6 @@ public void openFileOutput_shouldReturnAFileOutputStream() throws Exception {
 
     @Test(expected = IllegalArgumentException.class)
     public void openFileOutput_shouldNotAcceptPathsWithSeparatorCharacters() throws Exception {
-        context.openFileOutput("/data/test/hi", 0);
+        context.openFileOutput(File.separator + "data" + File.separator + "test" + File.separator + "hi", 0);
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -243,8 +243,9 @@ public Cursor rawQuery (String sql, String[] selectionArgs){
             throw new RuntimeException("SQL exception in query", e);
         }
 
+      //TODO: ASSERT rawquery with args returns actual values (we want to test that sqlBody is passed to setResultSet and not sql)
         SQLiteCursor cursor = new SQLiteCursor(null, null, null, null);
-        shadowOf(cursor).setResultSet(resultSet, sql);
+        shadowOf(cursor).setResultSet(resultSet, sqlBody);
         return cursor;
     }
     

File: src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/TestHttpResponse.java
Patch:
@@ -17,7 +17,7 @@ public class TestHttpResponse extends HttpResponseStub {
     private TestStatusLine statusLine = new TestStatusLine();
     private TestHttpEntity httpEntity = new TestHttpEntity();
     private int openEntityContentStreamCount = 0;
-    private Header[] headers;
+    private Header[] headers = new Header[0];
     private HttpParams params = new BasicHttpParams();
 
     public TestHttpResponse() {
@@ -72,8 +72,7 @@ public class TestHttpEntity extends HttpEntityStub {
         }
         
         @Override public Header getContentType() {
-            for (int i = 0; i < headers.length; i++) {
-                Header header = headers[i];
+            for (Header header : headers) {
                 if (header.getName().equals("Content-Type")) {
                     return header;
                 }

File: src/main/java/com/xtremelabs/robolectric/res/ResourceExtractor.java
Patch:
@@ -63,8 +63,8 @@ public Integer getResourceId(String resourceName, boolean isSystemResource) {
         }
         if (resourceName.startsWith("@+id")) {
             resourceName = resourceName.substring(2);
-        } else if (resourceName.startsWith("@android:id")) { // namespace needed for platform files
-            resourceName = resourceName.substring(9);
+        } else if (resourceName.startsWith("@android:")) { // namespace needed for platform files
+            resourceName = resourceName.substring("@android:".length());
         } else if (resourceName.startsWith("@")) {
             resourceName = resourceName.substring(1);
         }

File: src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
Patch:
@@ -38,7 +38,7 @@ public void addPendingHttpResponse(int statusCode, String responseBody) {
     }
 
     public void addPendingHttpResponseWithContentType(int statusCode, String responseBody, Header contentType) {
-        addPendingHttpResponse(new TestHttpResponse(statusCode, responseBody, contentType));
+        addPendingHttpResponse(new TestHttpResponse(statusCode, responseBody, new Header[] {contentType}));
     }
 
     public void addPendingHttpResponse(HttpResponse httpResponse) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -32,8 +32,8 @@ private void cacheColumnNames(ResultSet rs) {
             int columnCount = metaData.getColumnCount();    
             columnNameArray = new String[columnCount];
             for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
-                String cName = metaData.getColumnName(columnIndex);
-                this.columnNames.put(cName.toLowerCase(), columnIndex-1);
+                String cName = metaData.getColumnName(columnIndex).toLowerCase();
+                this.columnNames.put(cName, columnIndex-1);
                 this.columnNameArray[columnIndex-1]=cName;
             }
         } catch (SQLException e) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -33,7 +33,7 @@ private void cacheColumnNames(ResultSet rs) {
             columnNameArray = new String[columnCount];
             for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                 String cName = metaData.getColumnName(columnIndex);
-                this.columnNames.put(cName, columnIndex-1);
+                this.columnNames.put(cName.toLowerCase(), columnIndex-1);
                 this.columnNameArray[columnIndex-1]=cName;
             }
         } catch (SQLException e) {
@@ -48,7 +48,8 @@ private Integer getColIndex(String columnName) {
         if (columnName == null) {
             return -1;
         }
-        Integer i  = this.columnNames.get(columnName);
+        
+        Integer i  = this.columnNames.get(columnName.toLowerCase());
         if (i==null) return -1;
         return i;
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -53,7 +53,7 @@ public long insert(String table, String nullColumnHack, ContentValues values) {
                 return resultSet.getLong(1);
             }
         } catch (SQLException e) {
-            throw new RuntimeException("SQL exception in insert", e);
+            return -1; // this is how SQLite behaves, unlike H2 which throws exceptions
         }
         return -1;
     }
@@ -71,7 +71,7 @@ public long insertWithOnConflict(String table, String nullColumnHack,
                 }
                 result = resultSet.getInt(1);
             } catch (SQLException e) {
-                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
+                e.printStackTrace();
             }
         }
         return result;

File: src/test/java/com/xtremelabs/robolectric/shadows/CursorAdapterTest.java
Patch:
@@ -35,7 +35,7 @@ public class CursorAdapterTest {
 
 	@Before
 	public void setUp() throws Exception {
-		Connection connection = DatabaseConfig.OpenMemoryConnection();
+		Connection connection = DatabaseConfig.getMemoryConnection();
 
         Statement statement = connection.createStatement();
         statement.execute("CREATE TABLE table_name(_id INT PRIMARY KEY, name VARCHAR(255));" );
@@ -51,7 +51,7 @@ public void setUp() throws Exception {
             connection.createStatement().executeUpdate(insert);
         }
 
-        statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
+        statement = connection.createStatement(DatabaseConfig.getResultSetType(), ResultSet.CONCUR_READ_ONLY);
         String sql = "SELECT * FROM table_name;";
         ResultSet resultSet = statement.executeQuery(sql);
         curs = new SQLiteCursor(null, null, null, null);

File: src/test/java/com/xtremelabs/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -290,7 +290,7 @@ private void assertIdAndName(Cursor cursor, long id, String name) {
     private void assertEmptyDatabase() {
         Cursor cursor = database.query("table_name", new String[]{"id", "name"}, null, null, null, null, null);
         assertThat(cursor.moveToFirst(), equalTo(false));
-        assertThat(cursor.isClosed(), equalTo(true));
+        assertThat(cursor.isClosed(), equalTo(false));
         assertThat(cursor.getCount(), equalTo(0));
     }
 

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -159,6 +159,7 @@ public static List<Class<?>> getDefaultShadowClasses() {
                 ShadowIntent.class,
                 ShadowIntentFilter.class,
                 ShadowItemizedOverlay.class,
+                ShadowKeyEvent.class,
                 ShadowLayoutInflater.class,
                 ShadowLayoutParams.class,
                 ShadowListActivity.class,

File: src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
Patch:
@@ -95,7 +95,8 @@ public HttpResponse emulateRequest(HttpHost httpHost, HttpRequest httpRequest, H
         HttpResponse httpResponse = findResponse(httpRequest);
 
         if (httpResponse == null) {
-            throw new RuntimeException("Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse().");
+            throw new RuntimeException("Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse(). Request was: " +
+                    httpRequest.getRequestLine().getMethod() + " " + httpRequest.getRequestLine().getUri());
         }
 
         httpRequestInfos.add(new HttpRequestInfo(httpRequest, httpHost, httpContext, requestDirector));

File: src/test/java/com/xtremelabs/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -235,7 +235,7 @@ public void shouldRejectUnexpectedCallsToExecute() throws Exception {
             requestDirector.execute(null, new HttpGet("http://example.com"), null);
             fail();
         } catch (RuntimeException expected) {
-            assertThat(expected.getMessage(), equalTo("Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse()."));
+            assertThat(expected.getMessage(), equalTo("Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse(). Request was: GET http://example.com"));
         }
     }
 

File: src/main/java/com/xtremelabs/robolectric/internal/RobolectricTestRunnerInterface.java
Patch:
@@ -1,6 +1,7 @@
 package com.xtremelabs.robolectric.internal;
 
 import com.xtremelabs.robolectric.RobolectricConfig;
+import com.xtremelabs.robolectric.util.DatabaseConfig.DatabaseMap;
 
 import java.lang.reflect.Method;
 
@@ -12,4 +13,6 @@ public interface RobolectricTestRunnerInterface {
     void internalAfterTest(Method method);
 
     void setRobolectricConfig(RobolectricConfig config);
+    
+    void setDatabaseMap(DatabaseMap databaseMap);    
 }

File: src/test/java/com/xtremelabs/robolectric/shadows/CursorAdapterTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
-import com.xtremelabs.robolectric.util.DBConfig;
+import com.xtremelabs.robolectric.util.DatabaseConfig;
 
 @RunWith(WithTestDefaultsRunner.class)
 public class CursorAdapterTest {
@@ -39,7 +39,7 @@ public class CursorAdapterTest {
 
 	@Before
 	public void setUp() throws Exception {
-		Connection connection = DBConfig.OpenMemoryConnection();
+		Connection connection = DatabaseConfig.OpenMemoryConnection();
 
         Statement statement = connection.createStatement();
         statement.execute("CREATE TABLE table_name(_id INT PRIMARY KEY, name VARCHAR(255));" );

File: src/test/java/com/xtremelabs/robolectric/shadows/SQLiteCursorTest.java
Patch:
@@ -4,7 +4,7 @@
 import android.database.sqlite.SQLiteCursor;
 import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
-import com.xtremelabs.robolectric.util.DBConfig;
+import com.xtremelabs.robolectric.util.DatabaseConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -30,7 +30,7 @@ public class SQLiteCursorTest {
 
     @Before
     public void setUp() throws Exception {
-    	connection = DBConfig.OpenMemoryConnection();
+    	connection = DatabaseConfig.OpenMemoryConnection();
 
         Statement statement = connection.createStatement();
         statement.execute("CREATE TABLE table_name(" +

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteCursor.java
Patch:
@@ -26,6 +26,8 @@ public int getCount() {
         return rowCount;
     }
 
+    //TODO: determine if SQLite always returns lowercase column names the way H2 always returns UPPERCASE ones
+    
     /**
      * Stores the column names so they are retrievable after the resultSet has closed
      */
@@ -35,7 +37,7 @@ private void cacheColumnNames(ResultSet rs) {
             String[] colNames = new String[metaData.getColumnCount()];
             int columnCount = metaData.getColumnCount();
             for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
-                colNames[columnIndex - 1] = metaData.getColumnName(columnIndex);
+                colNames[columnIndex - 1] = metaData.getColumnName(columnIndex).toLowerCase();
             }
             this.columnNames = colNames;
         } catch (SQLException e) {

File: src/test/java/com/xtremelabs/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -27,7 +27,7 @@ public void setUp() throws Exception {
         database = SQLiteDatabase.openDatabase("path", null, 0);
 
         database.execSQL("CREATE TABLE table_name (\n" +
-                "  id INTEGER PRIMARY KEY AUTOINCREMENT,\n" +
+                "  id INT PRIMARY KEY AUTOINCREMENT,\n" +
                 "  first_column VARCHAR(255),\n" +
                 "  second_column BINARY,\n" +
                 "  name VARCHAR(255),\n" +
@@ -214,7 +214,7 @@ public void testExecSQLException() throws Exception {
 
     @Test
     public void testExecSQLAutoIncrementSQLite() throws Exception {
-        database.execSQL("CREATE TABLE auto_table (id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(255));");
+        database.execSQL("CREATE TABLE auto_table (id INT PRIMARY KEY AUTOINCREMENT, name VARCHAR(255));");
 
         ContentValues values = new ContentValues();
         values.put("name", "Chuck");

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCursorAdapter.java
Patch:
@@ -1,5 +1,6 @@
 package com.xtremelabs.robolectric.shadows;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import android.content.Context;
@@ -16,7 +17,7 @@
 public class ShadowCursorAdapter {
 
 	private Cursor cursor;
-	private List<View> views;
+	private List<View> views = new ArrayList<View>();
 	
     public void __constructor__( Context ctx, Cursor curs, boolean autoRequery ) {
     	cursor = curs;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowHandler.java
Patch:
@@ -20,7 +20,7 @@
 public class ShadowHandler {
     @RealObject private Handler realHandler;
 
-    private Looper looper;
+    private Looper looper = Looper.myLooper();
 
     public void __constructor__() {
         this.looper = Looper.myLooper();

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowCameraParameters.java
Patch:
@@ -84,8 +84,8 @@ public List<Integer> getSupportedPreviewFormats() {
     @Implementation
     public List<int[]> getSupportedPreviewFpsRange() {
         List<int[]> supportedRanges = new ArrayList<int[]>();
-        addRange(supportedRanges, 15, 15);
-        addRange(supportedRanges, 10, 30);
+        addRange(supportedRanges, 15000, 15000);
+        addRange(supportedRanges, 10000, 30000);
         return supportedRanges;
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java
Patch:
@@ -168,13 +168,15 @@ public void setOnPreferenceClickListener( Preference.OnPreferenceClickListener o
 		this.onClickListener = onPreferenceClickListener;
 	}
 	
+	@Implementation
 	public Preference.OnPreferenceClickListener getOnPreferenceClickListener() {
 		return onClickListener;
 	}	
 	
 
 	public boolean click() {
 		return onClickListener.onPreferenceClick(realPreference);
+	}
 
 	@Implementation
 	public void setIntent(Intent i) {

File: src/test/java/com/xtremelabs/robolectric/shadows/PreferenceActivityTest.java
Patch:
@@ -32,7 +32,6 @@ public void setUp() throws Exception {
     
     @Test
     public void shouldGetListView() {
-    	assertThat( activity.getListView(), nullValue() );
     	shadow.setListView( new ListView( new Activity() ) );
     	assertThat( activity.getListView(), notNullValue() );    	
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -48,6 +48,9 @@ public int getColor(int id) throws Resources.NotFoundException {
     public Configuration getConfiguration() {
         Configuration configuration = new Configuration();
         configuration.setToDefaults();
+        if (configuration.locale == null) {
+            configuration.locale = Locale.getDefault();
+        }
         return configuration;
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowResources.java
Patch:
@@ -48,6 +48,9 @@ public int getColor(int id) throws Resources.NotFoundException {
     public Configuration getConfiguration() {
         Configuration configuration = new Configuration();
         configuration.setToDefaults();
+        if (configuration.locale == null) {
+            configuration.locale = Locale.getDefault();
+        }
         return configuration;
     }
 

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -474,9 +474,9 @@ public static ShadowNotification shadowOf(Notification other) {
         return (ShadowNotification) Robolectric.shadowOf_(other);
     }
 
-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {
+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {
         //noinspection unchecked
-        return (SparseArray<E>) Robolectric.shadowOf_(other);
+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);
     }
 
     @SuppressWarnings({"unchecked"})

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java
Patch:
@@ -13,7 +13,7 @@ public class ShadowPreference {
 	protected Context context;
 	protected AttributeSet attrs;
 	protected int defStyle;	
-	protected boolean shouldPersist = true;
+	protected boolean shouldPersist = false;
 	protected int persistedInt;
 
 	public void __constructor__(Context context, AttributeSet attrs, int defStyle) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowAppWidgetManager.java
Patch:
@@ -99,7 +99,7 @@ public int[] getAppWidgetIds(ComponentName provider) {
                 ids = add(ids, id);
             }
         }
-        return ids.length == 0 ? null : ids;
+        return ids;
     }
 
     /**

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -263,8 +263,8 @@ public static ShadowListView shadowOf(ListView instance) {
         return (ShadowListView) shadowOf_(instance);
     }
 
-    public static ExpandableListView shadowOf(ExpandableListView instance) {
-        return (ExpandableListView) shadowOf_(instance);
+    public static ShadowExpandableListView shadowOf(ExpandableListView instance) {
+        return (ShadowExpandableListView) shadowOf_(instance);
     }
 
     public static ShadowActivity shadowOf(Activity instance) {

File: src/main/java/com/xtremelabs/robolectric/res/ViewLoader.java
Patch:
@@ -142,7 +142,6 @@ private View create(Context context, ViewGroup parent) throws Exception {
             if (name.equals("include")) {
                 String layout = attributes.get("layout");
                 View view = inflateView(context, layout.substring(1), attributes, parent);
-                addToParent(parent, view);
                 return view;
             } else if (name.equals("merge")) {
                 return parent;

File: src/test/java/com/xtremelabs/robolectric/R.java
Patch:
@@ -72,6 +72,7 @@ public static final class layout {
         public static final int main = nextId++;
         public static final int media = nextId++;
         public static final int inner_merge = nextId++;
+        public static final int included_linear_layout = nextId++;
     }
 
     public static final class raw {

File: src/main/java/com/xtremelabs/robolectric/shadows/FakeHttpLayer.java
Patch:
@@ -1,6 +1,7 @@
 package com.xtremelabs.robolectric.shadows;
 
 import com.xtremelabs.robolectric.util.HttpRequestInfo;
+import com.xtremelabs.robolectric.util.TestHttpResponse;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;

File: src/main/java/com/xtremelabs/robolectric/res/ResourceLoader.java
Patch:
@@ -73,7 +73,7 @@ private void init() {
         try {
             if (resourceDir != null) {
                 viewLoader = new ViewLoader(resourceExtractor, attrResourceLoader);
-                menuLoader = new MenuLoader(resourceExtractor);
+                menuLoader = new MenuLoader(resourceExtractor, attrResourceLoader);
 
                 File systemResourceDir = getSystemResourceDir(getPathToAndroidResources());
                 File localValueResourceDir = getValueResourceDir(resourceDir);
@@ -282,6 +282,7 @@ public String[] getStringArrayValue(int id) {
     }
 
     public void inflateMenu(Context context, int resource, Menu root) {
+        init();
         menuLoader.inflateMenu(context, resource, root);
     }
 

File: src/main/java/com/xtremelabs/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -77,7 +77,7 @@ public void onLoad(ClassPool classPool, String className) throws NotFoundExcepti
         try {
             ctClass = classPool.get(className);
         } catch (NotFoundException e) {
-            throw new RobolectricClassNotFoundException(e);
+            throw new IgnorableClassNotFoundException(e);
         }
 
         boolean wantsToBeInstrumented =

File: src/test/java/com/xtremelabs/robolectric/shadows/DefaultRequestDirectorTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldReturnRequestsByRule() throws Exception {
 
     @Test
     public void shouldReturnRequestsByRule_MatchingMethod() throws Exception {
-        Robolectric.setDefaultHttpResponse(new TestHttpResponse(404, "no such page"));
+        Robolectric.setDefaultHttpResponse(404, "no such page");
         Robolectric.addHttpResponseRule(HttpPost.METHOD_NAME, "http://some.uri",
                 new TestHttpResponse(200, "a cheery response body"));
 
@@ -124,7 +124,7 @@ public void shouldReturnRequestsByRule_WithTextResponse() throws Exception {
 
     @Test
     public void shouldReturnRequestsByRule_WithCustomRequestMatcher() throws Exception {
-        Robolectric.setDefaultHttpResponse(new TestHttpResponse(404, "no such page"));
+        Robolectric.setDefaultHttpResponse(404, "no such page");
 
         Robolectric.addHttpResponseRule(new FakeHttpLayer.RequestMatcher() {
             @Override public boolean matches(HttpRequest request) {

File: src/test/java/com/xtremelabs/robolectric/shadows/AbsSpinnerTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.app.Activity;
 import android.widget.AdapterView;
 import android.widget.Gallery;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
@@ -15,7 +14,6 @@ public class AbsSpinnerTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
         adapterView = new Gallery(new Activity());
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ApplicationTest.java
Patch:
@@ -32,8 +32,6 @@
 public class ApplicationTest {
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         Robolectric.application = new Application();
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/AudioManagerTest.java
Patch:
@@ -13,14 +13,11 @@
 
 @RunWith(WithTestDefaultsRunner.class)
 public class AudioManagerTest {
-
     private AudioManager audioManager;
     private ShadowAudioManager shadowAudioManager;
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         audioManager = Robolectric.newInstanceOf(AudioManager.class);
         shadowAudioManager = Robolectric.shadowOf(audioManager);
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/CameraSizeTest.java
Patch:
@@ -19,7 +19,6 @@ public class CameraSizeTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
         cameraSize = Robolectric.newInstanceOf(Camera.class).new Size(480, 320);
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ConfigurationTest.java
Patch:
@@ -2,7 +2,6 @@
 
 
 import android.content.res.Configuration;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
@@ -18,7 +17,6 @@ public class ConfigurationTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
         configuration = new Configuration();
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ConnectivityManagerTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.xtremelabs.robolectric.shadows;
 
-import android.app.Application;
 import android.content.Context;
 import android.net.ConnectivityManager;
 import com.xtremelabs.robolectric.Robolectric;
@@ -20,8 +19,6 @@ public class ConnectivityManagerTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-        Robolectric.application = new Application();
         connectivityManager = (ConnectivityManager) Robolectric.application.getSystemService(Context.CONNECTIVITY_SERVICE);
         networkInfo = Robolectric.shadowOf(connectivityManager.getActiveNetworkInfo());
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/ListViewTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.widget.AdapterView;
 import android.widget.BaseAdapter;
 import android.widget.ListView;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Before;
@@ -30,8 +29,6 @@ public class ListViewTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         transcript = new Transcript();
         listView = new ListView(null);
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/MapViewTest.java
Patch:
@@ -6,7 +6,6 @@
 import android.view.View;
 import com.google.android.maps.GeoPoint;
 import com.google.android.maps.MapView;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.bytecode.AndroidTranslatorTest;
 import org.junit.Before;
@@ -29,8 +28,6 @@ public class MapViewTest {
 
 
     @Before public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         mapView = new MapView(new Activity(), "foo");
 
         overlay1 = new MyOverlay();

File: src/test/java/com/xtremelabs/robolectric/shadows/SettingsTest.java
Patch:
@@ -20,8 +20,6 @@ public class SettingsTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-        Robolectric.application = new Application();
         activity = new Activity();
         contentResolver = activity.getContentResolver();
     }

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 import com.xtremelabs.robolectric.R;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import org.junit.After;
@@ -36,8 +35,6 @@ public class ViewGroupTest {
     private View child3b;
 
     @Before public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         Application context = new Application();
         ShadowApplication.bind(context, new ResourceLoader(R.class, null, null));
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
@@ -20,8 +19,6 @@ public class ViewInnerTextTest {
 
     @Before
     public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         activity = new Activity();
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/ViewTest.java
Patch:
@@ -27,8 +27,6 @@ public class ViewTest {
     private View view;
 
     @Before public void setUp() throws Exception {
-        Robolectric.bindDefaultShadowClasses();
-
         view = new View(null);
     }
 

File: src/main/java/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -495,7 +495,7 @@ public static ShadowCameraParameters shadowOf(Camera.Parameters instance) {
     public static ShadowCameraSize shadowOf(Camera.Size instance) {
         return (ShadowCameraSize) shadowOf_(instance);
     }
-    
+
     public static ShadowMediaPlayer shadowOf(MediaPlayer instance) {
         return (ShadowMediaPlayer) shadowOf_(instance);
     }
@@ -512,8 +512,8 @@ public static ShadowAlarmManager shadowOf(AlarmManager instance) {
         return (ShadowAlarmManager) Robolectric.shadowOf_(instance);
     }
 
-public static ShadowConfiguration shadowOf(Configuration instance) {
-    	return (ShadowConfiguration) Robolectric.shadowOf_(instance);
+    public static ShadowConfiguration shadowOf(Configuration instance) {
+        return (ShadowConfiguration) Robolectric.shadowOf_(instance);
     }
 
     public static ShadowBitmap shadowOf(Bitmap other) {

File: src/main/java/com/xtremelabs/robolectric/RobolectricConfig.java
Patch:
@@ -17,7 +17,7 @@ public class RobolectricConfig {
 
     /**
      * Creates a Robolectric configuration using default Android files relative to the specified base directory.
-     *
+     * <p/>
      * The manifest will be baseDir/AndroidManifest.xml, res will be baseDir/res, and assets in baseDir/assets.
      *
      * @param baseDir the base directory of your Android project

File: src/main/java/com/xtremelabs/robolectric/bytecode/RobolectricInternals.java
Patch:
@@ -49,8 +49,7 @@ public static void bindShadowClass(Class<?> shadowClass) {
             ShadowWrangler.getInstance().bindShadowClass(realClass.value(), shadowClass);
         } catch (TypeNotPresentException typeLoadingException) {
             String unloadableClassName = shadowClass.getSimpleName();
-            if (isIgnorable(typeLoadingException) )
-            {
+            if (isIgnorable(typeLoadingException)) {
                 //this allows users of the robolectric.jar file to use the non-Google APIs version of the api
                 if (unloadableClassNames.add(unloadableClassName)) {
                     System.out.println("Warning: an error occurred while binding shadow class: " + unloadableClassName);
@@ -65,7 +64,7 @@ private static boolean isIgnorable(TypeNotPresentException typeLoadingException)
         Throwable cause = typeLoadingException.getCause();
         if (cause instanceof NoClassDefFoundError) {
             cause = cause.getCause();
-            if (cause instanceof  ClassNotFoundException) {
+            if (cause instanceof ClassNotFoundException) {
                 cause = cause.getCause();
                 // instanceof doesn't work here. Are we in different classloaders?
                 if (cause.getClass().getName().equals(RobolectricClassNotFoundException.class.getName())) {

File: src/main/java/com/xtremelabs/robolectric/res/ColorResourceLoader.java
Patch:
@@ -50,7 +50,7 @@ public int getValue(int colorId) {
             return androidColorsFromIds.get(colorId);
         } else {
             String resourceName = resourceExtractor.getResourceName(colorId);
-            return resourceName == null ? -1:colorResolver.getValue(resourceName);
+            return resourceName == null ? -1 : colorResolver.getValue(resourceName);
         }
     }
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowBaseAdapter.java
Patch:
@@ -25,7 +25,7 @@ public boolean areAllItemsEnabled() {
 
     /**
      * Registers the observer.
-     * 
+     *
      * @param observer observer
      */
     @Implementation
@@ -35,7 +35,7 @@ public void registerDataSetObserver(DataSetObserver observer) {
 
     /**
      * Unregisters the observer if it can be found. Nothing otherwise.
-     * 
+     *
      * @param observer observer
      */
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowConnectivityManager.java
Patch:
@@ -15,10 +15,10 @@
 @Implements(ConnectivityManager.class)
 public class ShadowConnectivityManager {
 
-	private NetworkInfo networkInfo;
+    private NetworkInfo networkInfo;
 
-	@Implementation
+    @Implementation
     public NetworkInfo getActiveNetworkInfo() {
-		return networkInfo == null ? networkInfo = newInstanceOf(NetworkInfo.class) : networkInfo;
+        return networkInfo == null ? networkInfo = newInstanceOf(NetworkInfo.class) : networkInfo;
     }
 }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowHandler.java
Patch:
@@ -73,9 +73,9 @@ public final boolean sendEmptyMessage(int what) {
     public static void flush() {
         idleMainLooper();
     }
-    
+
     /**
-     * @see com.xtremelabs.robolectric.shadows.ShadowLooper#idle() 
+     * @see com.xtremelabs.robolectric.shadows.ShadowLooper#idle()
      */
     public static void idleMainLooper() {
         shadowOf(Looper.myLooper()).idle();

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowImageView.java
Patch:
@@ -72,8 +72,9 @@ public Drawable getDrawable() {
     }
 
     /**
+     * @return the image drawable
      * @deprecated Use android.widget.ImageView#getDrawable() instead.
-     * @return the image drawable */
+     */
     @Deprecated
     public Drawable getImageDrawable() {
         return imageDrawable;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowItemizedOverlay.java
Patch:
@@ -43,7 +43,7 @@ public static Drawable boundCenterBottom(Drawable drawable) {
      * than -1.
      *
      * @return whether {@link #setLastFocusedIndex(int)} has been called with a value other
-     * than -1
+     *         than -1
      */
     public boolean lastFocusedIndexWasReset() {
         return lastFocusedIndexWasReset;
@@ -62,7 +62,8 @@ public boolean isPopulated() {
      * {@link #hitTest(com.google.android.maps.OverlayItem, android.graphics.drawable.Drawable, int, int)}
      *
      * @param shouldHit the value that
-     * {@link #hitTest(com.google.android.maps.OverlayItem, android.graphics.drawable.Drawable, int, int)} shoule return
+     *                  {@link #hitTest(com.google.android.maps.OverlayItem, android.graphics.drawable.Drawable, int, int)}
+     *                  should return
      */
     public void setShouldHit(boolean shouldHit) {
         this.shouldHit = shouldHit;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowLocationManager.java
Patch:
@@ -26,7 +26,7 @@ public boolean isProviderEnabled(String provider) {
     /**
      * Sets the value to return from {@link #isProviderEnabled(String)} for the given {@code provider}
      *
-     * @param provider name of the provider whose status to set
+     * @param provider  name of the provider whose status to set
      * @param isEnabled whether that provider should appear enabled
      */
     public void setProviderEnabled(String provider, boolean isEnabled) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMapController.java
Patch:
@@ -68,7 +68,7 @@ public ShadowMapView getShadowMapView() {
     /**
      * Non-Android accessor that returns the most recent value set by a call to either version of {@code animateTo()}
      *
-     * @return  the most recent value set by a call to either version of {@code animateTo()}
+     * @return the most recent value set by a call to either version of {@code animateTo()}
      */
     public GeoPoint getGeoPointAnimatedTo() {
         return geoPointAnimatedTo;
@@ -78,7 +78,7 @@ public GeoPoint getGeoPointAnimatedTo() {
      * Non-Android accessor that allows the {@code MapView} being controlled to be set explicitly.
      *
      * @param shadowMapView the {@link ShadowMapView} to be controlled (either created explicitly or obtained via a call
-     * to {@link com.xtremelabs.robolectric.Robolectric.shadowOf(com.google.android.maps.MapView)})
+     *                      to {@link com.xtremelabs.robolectric.RobolectricForMaps.shadowOf(com.google.android.maps.MapView)})
      */
     void setShadowMapView(ShadowMapView shadowMapView) {
         this.shadowMapView = shadowMapView;

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMatrix.java
Patch:
@@ -32,7 +32,7 @@ public void __constructor__(Matrix src) {
     public void set(Matrix src) {
         transX = shadowOf(src).transX;
         scaleX = shadowOf(src).scaleX;
-        
+
         transY = shadowOf(src).transY;
         scaleY = shadowOf(src).scaleY;
     }

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowMenuInflater.java
Patch:
@@ -18,7 +18,7 @@ public class ShadowMenuInflater {
     private Context context;
 
     public void __constructor__(Context context) {
-		this.context = context;
+        this.context = context;
     }
 
     @Implementation

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -11,17 +11,17 @@
 @Implements(NetworkInfo.class)
 public class ShadowNetworkInfo {
 
-	private boolean isConnected = true;
+    private boolean isConnected = true;
 
-	@Implementation
+    @Implementation
     public boolean isConnectedOrConnecting() {
         return isConnected;
     }
 
     /**
      * Non-Android accessor
      * Sets up the return value of {@link #isConnectedOrConnecting()}.
-     * 
+     *
      * @param isConnected the value that {@link #isConnectedOrConnecting()} will return.
      */
     public void setConnectionStatus(boolean isConnected) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -173,6 +173,7 @@ public void close() {
     /**
      * Allows test cases access to the underlying JDBC connection, for use in
      * setup or assertions.
+     *
      * @return the connection
      */
     public Connection getConnection() {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowTextView.java
Patch:
@@ -146,7 +146,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
 
     /**
      * Returns the text string of this {@code TextView}.
-     * 
+     * <p/>
      * Robolectric extension.
      */
     @Override

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowToast.java
Patch:
@@ -74,7 +74,7 @@ public static void reset() {
      * or since {@link #reset()} has been called.
      *
      * @return the number of {@code Toast} requests that have been made during this test run
-     * or since {@link #reset()} has been called.
+     *         or since {@link #reset()} has been called.
      */
     public static int shownToastCount() {
         return Robolectric.getShadowApplication().getShownToasts().size();
@@ -84,7 +84,8 @@ public static int shownToastCount() {
      * Non-Android query method that returns whether or not a particular custom {@code Toast} has been shown.
      *
      * @param message the message to search for
-     * @param layoutResourceIdToCheckForMessage the id of the resource that contains the toast messages
+     * @param layoutResourceIdToCheckForMessage
+     *                the id of the resource that contains the toast messages
      * @return whether the {@code Toast} was requested
      */
     public static boolean showedCustomToast(CharSequence message, int layoutResourceIdToCheckForMessage) {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowViewGroup.java
Patch:
@@ -90,7 +90,7 @@ public void clearFocus() {
     /**
      * Returns a string representation of this {@code ViewGroup} by concatenating all of the strings contained in all
      * of the descendants of this {@code ViewGroup}.
-     *
+     * <p/>
      * Robolectric extension.
      */
     @Override

File: src/main/java/com/xtremelabs/robolectric/util/Strings.java
Patch:
@@ -10,7 +10,7 @@ public static String fromStream(InputStream inputStream) throws IOException {
         byte[] buffer = new byte[bufSize];
         int inSize;
         StringBuilder stringBuilder = new StringBuilder();
-        while((inSize = inputStream.read(buffer)) > 0) {
+        while ((inSize = inputStream.read(buffer)) > 0) {
             stringBuilder.append(new String(buffer, 0, inSize));
         }
         return stringBuilder.toString();

File: src/test/java/com/xtremelabs/robolectric/R.java
Patch:
@@ -72,7 +72,7 @@ public static final class raw {
     }
 
     public static final class menu {
-		public static final int test = nextId++;
-	}
+        public static final int test = nextId++;
+    }
 
 }

File: src/test/java/com/xtremelabs/robolectric/RobolectricTestRunnerTest.java
Patch:
@@ -6,7 +6,9 @@
 import org.junit.runners.model.InitializationError;
 
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 
 @RunWith(RobolectricTestRunnerTest.RunnerForTesting.class)
 public class RobolectricTestRunnerTest {

File: src/test/java/com/xtremelabs/robolectric/TemporaryBindingsTest.java
Patch:
@@ -34,5 +34,6 @@ public void overridingShadowBindingsShouldNotAffectBindingsInLaterTestsAgain() t
     }
 
     @Implements(View.class)
-    public static class TemporaryShadowView {}
+    public static class TemporaryShadowView {
+    }
 }

File: src/test/java/com/xtremelabs/robolectric/bytecode/CustomRobolectricTestRunnerTest.java
Patch:
@@ -11,7 +11,9 @@
 
 import java.lang.reflect.Method;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(CustomRobolectricTestRunnerTest.CustomRobolectricTestRunner.class)
 public class CustomRobolectricTestRunnerTest {

File: src/test/java/com/xtremelabs/robolectric/res/ViewLoaderTest.java
Patch:
@@ -63,7 +63,7 @@ public void testWebView() throws Exception {
         WebView webView = (WebView) view.findViewById(R.id.web_view);
 
         webView.loadUrl("www.example.com");
-        
+
         assertThat(shadowOf(webView).getLastLoadedUrl(), equalTo("www.example.com"));
     }
 

File: src/test/java/com/xtremelabs/robolectric/shadows/AdapterViewBehavior.java
Patch:
@@ -19,7 +19,7 @@
 public class AdapterViewBehavior {
     public static void shouldActAsAdapterView(AdapterView adapterView) throws Exception {
         Robolectric.shadowOf(Looper.getMainLooper()).pause();
-        
+
         testSetAdapter_ShouldCauseViewsToBeRenderedAsynchronously(adapterView);
         testSetAdapter_ShouldSelectFirstItemAsynchronously(adapterView);
         shouldOnlyUpdateOnceIfInvalidatedMultipleTimes(adapterView);

File: src/test/java/com/xtremelabs/robolectric/shadows/AlertDialogTest.java
Patch:
@@ -13,7 +13,7 @@
 
 @RunWith(WithTestDefaultsRunner.class)
 public class AlertDialogTest {
-    
+
     @Test
     public void testBuilder() throws Exception {
         AlertDialog.Builder builder = new AlertDialog.Builder(new ContextWrapper(null));

File: src/test/java/com/xtremelabs/robolectric/shadows/BitmapDrawableTest.java
Patch:
@@ -44,7 +44,7 @@ public void draw_shouldCopyDescriptionToCanvas() throws Exception {
 
         assertEquals("Bitmap for resource:drawable/an_image", shadowOf(canvas).getDescription());
     }
-    
+
     @Test
     public void withColorFilterSet_draw_shouldCopyDescriptionToCanvas() throws Exception {
         BitmapDrawable drawable = (BitmapDrawable) resources.getDrawable(R.drawable.an_image);

File: src/test/java/com/xtremelabs/robolectric/shadows/LayoutParamsTest.java
Patch:
@@ -1,8 +1,6 @@
 package com.xtremelabs.robolectric.shadows;
 
-import android.view.ViewGroup;
 import android.widget.Gallery;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: src/test/java/com/xtremelabs/robolectric/shadows/SpannableStringBuilderTest.java
Patch:
@@ -1,9 +1,7 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.text.SpannableStringBuilder;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
-import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -12,7 +10,7 @@
 
 @RunWith(WithTestDefaultsRunner.class)
 public class SpannableStringBuilderTest {
-    
+
     @Test
     public void testAppend() throws Exception {
         SpannableStringBuilder builder = new SpannableStringBuilder("abc");

File: src/test/java/com/xtremelabs/robolectric/shadows/TextViewTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.text.style.URLSpan;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: src/test/java/com/xtremelabs/robolectric/util/RobolectricBackgroundExecutorServiceTest.java
Patch:
@@ -9,7 +9,9 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(WithTestDefaultsRunner.class)
 public class RobolectricBackgroundExecutorServiceTest {

File: src/test/java/com/xtremelabs/robolectric/util/SchedulerTest.java
Patch:
@@ -89,7 +89,7 @@ public void resetShouldUnPause() throws Exception {
         scheduler.post(runnable);
 
         assertThat(runnable.wasRun, equalTo(false));
-        
+
         scheduler.reset();
         scheduler.post(runnable);
         assertThat(runnable.wasRun, equalTo(true));
@@ -108,7 +108,7 @@ public void resetShouldClearPendingRunnables() throws Exception {
 
         TestRunnable runnable2 = new TestRunnable();
         scheduler.post(runnable2);
-        
+
         assertThat(runnable1.wasRun, equalTo(false));
         assertThat(runnable2.wasRun, equalTo(true));
     }

File: src/test/java/com/xtremelabs/robolectric/util/TestOnClickListener.java
Patch:
@@ -4,6 +4,7 @@
 
 public class TestOnClickListener implements View.OnClickListener {
     public boolean clicked = false;
+
     @Override public void onClick(View v) {
         clicked = true;
     }

File: src/main/java/com/xtremelabs/robolectric/content/TestSharedPreferences.java
Patch:
@@ -2,10 +2,8 @@
 
 import android.content.SharedPreferences;
 
-import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Hashtable;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -67,7 +65,7 @@ public boolean getBoolean(String key, boolean defValue) {
 
     @Override
     public boolean contains(String key) {
-        return content.get(filename).get(key) == null;
+        return content.get(filename).containsKey(key);
     }
 
     @Override

File: src/main/java/com/xtremelabs/robolectric/bytecode/AndroidTranslator.java
Patch:
@@ -72,8 +72,6 @@ public void onLoad(ClassPool classPool, String className) throws NotFoundExcepti
             return;
         }
 
-//        throw new RuntimeException("fake problem!");
-
         boolean needsStripping =
                 className.startsWith("android.")
                         || className.startsWith("com.google.android.maps")

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowContextWrapper.java
Patch:
@@ -75,9 +75,9 @@ public String getPackageName() {
     }
 
     /**
-     * Implements Android's {@code PackageManager} with an anonymous inner class.
+     * Implements Android's {@code PackageManager}.
      *
-     * @return a {@code MockPackageManager}
+     * @return a {@code RobolectricPackageManager}
      */
     @Implementation
     public PackageManager getPackageManager() {

File: src/test/java/com/xtremelabs/robolectric/shadows/ResourcesTest.java
Patch:
@@ -24,7 +24,7 @@ public class ResourcesTest {
 	@Before
 	public void setUp() throws Exception {
         Robolectric.bindDefaultShadowClasses();		
-        Robolectric.application = ShadowApplication.bind(new Application(), new ResourceLoader(R.class, new File("test/res")));
+        Robolectric.application = ShadowApplication.bind(new Application(), new ResourceLoader(R.class, new File("test/res"), new File("test/assets")));
 	}
 	
     @Test(expected = Resources.NotFoundException.class)

File: src/test/java/com/xtremelabs/robolectric/shadows/CameraSizeTest.java
Patch:
@@ -2,7 +2,6 @@
 
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowBitmapDrawable.java
Patch:
@@ -65,7 +65,7 @@ public boolean equals(Object o) {
 
         if (bitmap != null ? !bitmap.equals(that.bitmap) : that.bitmap != null) return false;
 
-        return true;
+        return super.equals(o);
     }
 
     @Override @Implementation

File: src/test/java/com/xtremelabs/robolectric/bytecode/ShadowWranglerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.xtremelabs.robolectric.bytecode;
 
+import android.app.Activity;
 import android.content.Context;
-import android.test.mock.MockContext;
 import android.view.View;
 import android.widget.TextView;
 import com.xtremelabs.robolectric.Robolectric;
@@ -27,7 +27,7 @@ public class ShadowWranglerTest {
 
     @Before
     public void setUp() throws Exception {
-        context = new MockContext();
+        context = new Activity();
     }
 
     @Test

File: src/test/java/com/xtremelabs/robolectric/shadows/BitmapDrawableTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static android.test.MoreAsserts.assertNotEqual;
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 @RunWith(WithTestDefaultsRunner.class)
 public class BitmapDrawableTest {
@@ -63,7 +63,7 @@ public void equals_shouldTestResourceId() throws Exception {
         Drawable drawable2 = resources.getDrawable(R.drawable.an_other_image);
 
         assertEquals(drawable1a, drawable1b);
-        assertNotEqual(drawable1a, drawable2);
+        assertFalse(drawable1a.equals(drawable2));
     }
 
     @Test
@@ -77,7 +77,7 @@ public void equals_shouldTestBounds() throws Exception {
         assertEquals(drawable1a, drawable1b);
 
         drawable1b.setBounds(1, 2, 3, 5);
-        assertNotEqual(drawable1a, drawable1b);
+        assertFalse(drawable1a.equals(drawable1b));
     }
 
     @Test

File: test/com/xtremelabs/robolectric/shadows/MenuInflaterTest.java
Patch:
@@ -36,11 +36,11 @@ public void canRetrieveMenuList()
 		MenuInflater.inflate(R.menu.test, menu);
 		
         TestMenuItem testMenuItem = (TestMenuItem) menu.getItem(0);
-        assertEquals(testMenuItem.getTitle().toString(), "Test menu item 1");
+        assertEquals("Test menu item 1", testMenuItem.getTitle().toString());
         testMenuItem.click();
 
 		testMenuItem = (TestMenuItem) menu.getItem(1);
-        assertEquals(testMenuItem.getTitle().toString(), "Test menu item 2");
+        assertEquals("Test menu item 2", testMenuItem.getTitle().toString());
         testMenuItem.click();
 	}
 

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -115,7 +115,7 @@ protected RobolectricTestRunner(Class<?> testClass, File androidManifestPath, Fi
      * @param androidManifestPath the relative path to the AndroidManifest.xml file
      * @param resourceDirectory   the relative path to the directory containing the project's resources
      * @throws InitializationError if junit says so
-     * @deprecated Use {@link RobolectricTestRunner(Class, File, File)} instead.
+     * @deprecated Use {@link #RobolectricTestRunner(Class, File, File)} instead.
      */
     protected RobolectricTestRunner(Class<?> testClass, String androidManifestPath, String resourceDirectory)
             throws InitializationError {
@@ -265,7 +265,8 @@ public void afterTest(Method method) {
 
     /**
      * You probably don't want to override this method. Override #prepareTest(Object) instead.
-     * {@see BlockJUnit4TestRunner#createTest()}
+     *
+     * @see BlockJUnit4ClassRunner#createTest()
      */
     @Override
     public Object createTest() throws Exception {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -166,8 +166,7 @@ public void close() {
     /**
      * Allows test cases access to the underlying JDBC connection, for use in
      * setup or assertions.
-     *
-     * @return
+     * @return the connection
      */
     public Connection getConnection() {
         return connection;

File: src/main/java/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -79,7 +79,7 @@ public RobolectricTestRunner(Class<?> testClass, File androidProjectRoot) throws
      * @param testClass            the test class to be run
      * @param androidProjectRoot   the directory containing your AndroidManifest.xml file and res dir
      * @throws InitializationError if junit says so
-     * @deprecated Use #RobolectricTestRunner(Class, File) instead.
+     * @deprecated Use {@link #RobolectricTestRunner(Class, File)} instead.
      */
     public RobolectricTestRunner(Class<?> testClass, String androidProjectRoot) throws InitializationError {
         this(testClass, new File(androidProjectRoot));
@@ -115,7 +115,7 @@ protected RobolectricTestRunner(Class<?> testClass, File androidManifestPath, Fi
      * @param androidManifestPath the relative path to the AndroidManifest.xml file
      * @param resourceDirectory   the relative path to the directory containing the project's resources
      * @throws InitializationError if junit says so
-     * @deprecated Use ##RobolectricTestRunner(Class, File, File) instead.
+     * @deprecated Use {@link RobolectricTestRunner(Class, File, File)} instead.
      */
     protected RobolectricTestRunner(Class<?> testClass, String androidManifestPath, String resourceDirectory)
             throws InitializationError {

File: src/main/java/com/xtremelabs/robolectric/shadows/ShadowHandler.java
Patch:
@@ -68,7 +68,7 @@ public final boolean sendEmptyMessage(int what) {
     }
 
     /**
-     * @Deprecated use {@link #idleMainLooper()} instead
+     * @deprecated use {@link #idleMainLooper()} instead
      */
     public static void flush() {
         idleMainLooper();

File: src/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -291,7 +291,6 @@ public void setupApplicationState(File projectRoot, File resourceDir) {
         resetStaticState();
 
         Robolectric.application = ShadowApplication.bind(createApplication(), resourceLoader);
-        Robolectric.application.onCreate();
     }
 
     /**

File: src/com/xtremelabs/robolectric/shadows/ShadowAlarmManager.java
Patch:
@@ -16,12 +16,10 @@
 @Implements(AlarmManager.class)
 public class ShadowAlarmManager {
 	
-	// TODO tests
-	
 	private List<ScheduledAlarm> scheduledAlarms = new ArrayList<ScheduledAlarm>();
 
 	@Implementation
-	void set(int type, long triggerAtTime, PendingIntent operation) {
+	public void set(int type, long triggerAtTime, PendingIntent operation) {
 		scheduledAlarms.add(new ScheduledAlarm(type, triggerAtTime, operation));
 	}
 	

File: test/com/xtremelabs/robolectric/TemporaryBindingsTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.xtremelabs.robolectric;
 
 import android.view.View;
+import com.xtremelabs.robolectric.internal.Implements;
 import com.xtremelabs.robolectric.shadows.ShadowView;
-import com.xtremelabs.robolectric.util.Implements;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: src/com/xtremelabs/robolectric/shadows/ShadowArrayAdapter.java
Patch:
@@ -4,9 +4,8 @@
 
 import android.content.Context;
 import android.widget.ArrayAdapter;
-
-import com.xtremelabs.robolectric.util.Implementation;
-import com.xtremelabs.robolectric.util.Implements;
+import com.xtremelabs.robolectric.internal.Implementation;
+import com.xtremelabs.robolectric.internal.Implements;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: test/com/xtremelabs/robolectric/internal/ClassNameResolverTest.java
Patch:
@@ -6,9 +6,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-
 public class ClassNameResolverTest {
-
     @Test
     public void shouldResolveClassesBySimpleName() throws Exception {
         assertEquals(TestApplication.class, new ClassNameResolver<Application>("com.xtremelabs.robolectric", "TestApplication").resolve());

File: src/com/xtremelabs/robolectric/shadows/ShadowCameraParameters.java
Patch:
@@ -45,7 +45,7 @@ public void getPreviewFpsRange(int[] range) {			// TODO test
     }
 
     @Implementation
-    int getPreviewFrameRate() {								// TODO test
+    public int getPreviewFrameRate() {						// TODO test
     	return previewFps;				
     }
     

File: src/com/xtremelabs/robolectric/shadows/ShadowCameraSize.java
Patch:
@@ -13,10 +13,10 @@
 public class ShadowCameraSize {
 	  @RealObject private Camera.Size realCameraSize;
 	  
-	  // TODO not being invoked -- why?  Fix.
-	  public void __constructor__(int width, int height) {
+	  // TODO not being invoked -- why?  Also causes RobolectrictricWiringTest to fail.
+/*	  public void __constructor__(int width, int height) {
 		  realCameraSize.width = width;
 		  realCameraSize.height = height;
-	  }
+	  }*/
 	  
 }

File: test/com/xtremelabs/robolectric/shadows/HandlerTest.java
Patch:
@@ -55,7 +55,10 @@ public void testDefaultConstructorUsesDefaultLooper() throws Exception {
     @Test
     public void testDifferentLoopersGetDifferentQueues() throws Exception {
         Looper looper1 = Robolectric.newInstanceOf(Looper.class);
+        Robolectric.shadowOf(looper1).pause();
+
         Looper looper2 = Robolectric.newInstanceOf(Looper.class);
+        Robolectric.shadowOf(looper2).pause();
 
         Handler handler1 = new Handler(looper1);
         handler1.post(new Say("first thing"));

File: src/com/xtremelabs/robolectric/shadows/ShadowDisplay.java
Patch:
@@ -14,8 +14,8 @@
 @Implements(Display.class)
 public class ShadowDisplay {
     private int displayId;
-    private int width = 800;
-    private int height = 480;
+    private int width = 480;
+    private int height = 800;
     private float density = 1.5f;
     private int densityDpi = DisplayMetrics.DENSITY_HIGH;
     private float xdpi = 240.0f;

File: src/com/xtremelabs/robolectric/AndroidTranslator.java
Patch:
@@ -14,7 +14,7 @@ public class AndroidTranslator implements Translator {
      * IMPORTANT -- increment this number when the bytecode generated for modified classes changes
      * so the cache file can be invalidated.
      */
-    public static final int CACHE_VERSION = 17;
+    public static final int CACHE_VERSION = 18;
 
     private static final List<ClassHandler> CLASS_HANDLERS = new ArrayList<ClassHandler>();
 
@@ -64,7 +64,7 @@ public void onLoad(ClassPool classPool, String className) throws NotFoundExcepti
         boolean needsStripping =
                 className.startsWith("android.")
                         || className.startsWith("com.google.android.maps")
-                        || className.equals("org.apache.http.impl.client.AbstractHttpClient");
+                        || className.equals("org.apache.http.impl.client.DefaultRequestDirector");
 
         CtClass ctClass = classPool.get(className);
         if (needsStripping && !ctClass.hasAnnotation(DoNotStrip.class)) {

File: src/com/xtremelabs/robolectric/AndroidTranslator.java
Patch:
@@ -63,8 +63,8 @@ public void onLoad(ClassPool classPool, String className) throws NotFoundExcepti
 
         boolean needsStripping =
                 className.startsWith("android.")
-                        || className.startsWith("org.apache.http")
-                        || className.startsWith("com.google.android.maps");
+                        || className.startsWith("com.google.android.maps")
+                        || className.equals("org.apache.http.impl.client.AbstractHttpClient");
 
         CtClass ctClass = classPool.get(className);
         if (needsStripping && !ctClass.hasAnnotation(DoNotStrip.class)) {

File: test/com/xtremelabs/robolectric/shadows/DefaultHttpClientTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.Assert.*;
 
 @RunWith(WithTestDefaultsRunner.class)
-public class HttpClientTest {
+public class DefaultHttpClientTest {
     private DefaultHttpClient client;
 
     @Before
@@ -74,11 +74,11 @@ public void shouldHandleMultipleInvocationsOfExecute() throws Exception {
         client.execute(new HttpGet("http://example.com"));
         client.execute(new HttpGet("www.example.com"));
 
-        HttpUriRequest request1 = ShadowAbstractHttpClient.getRequest(0);
+        HttpUriRequest request1 = (HttpUriRequest) ShadowAbstractHttpClient.getRequest(0);
         assertThat(request1.getMethod(), equalTo(HttpGet.METHOD_NAME));
         assertThat(request1.getURI(), equalTo(URI.create("http://example.com")));
 
-        HttpUriRequest request2 = ShadowAbstractHttpClient.getRequest(1);
+        HttpUriRequest request2 = (HttpUriRequest) ShadowAbstractHttpClient.getRequest(1);
         assertThat(request2.getMethod(), equalTo(HttpGet.METHOD_NAME));
         assertThat(request2.getURI(), equalTo(URI.create("www.example.com")));
     }

File: src/com/xtremelabs/robolectric/shadows/ShadowActivity.java
Patch:
@@ -192,6 +192,9 @@ public void startActivityForResult(Intent intent, int requestCode) {
 
     public void receiveResult(Intent requestIntent, int resultCode, Intent resultIntent) {
         Integer requestCode = intentRequestCodeMap.get(requestIntent);
+        if (requestCode == null) {
+            throw new RuntimeException("No intent matches " + requestIntent);
+        }
         try {
             Method method = Activity.class.getDeclaredMethod("onActivityResult", Integer.TYPE, Integer.TYPE, Intent.class);
             method.setAccessible(true);

File: src/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -604,14 +604,17 @@ private boolean noParentHasFocus(View view) {
         return true;
     }
 
+    @Implementation
     public void setDrawingCacheEnabled(boolean drawingCacheEnabled) {
         this.drawingCacheEnabled = drawingCacheEnabled;
     }
 
+    @Implementation
     public boolean isDrawingCacheEnabled() {
         return drawingCacheEnabled;
     }
 
+    @Implementation
     public Bitmap getDrawingCache() {
         return Robolectric.newInstanceOf(Bitmap.class);
     }

File: src/com/xtremelabs/robolectric/shadows/ShadowNetworkInfo.java
Patch:
@@ -1,7 +1,6 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.net.NetworkInfo;
-
 import com.xtremelabs.robolectric.util.Implementation;
 import com.xtremelabs.robolectric.util.Implements;
 
@@ -12,7 +11,7 @@
 @Implements(NetworkInfo.class)
 public class ShadowNetworkInfo {
 
-	private boolean isConnected = false;
+	private boolean isConnected = true;
 
 	@Implementation
     public boolean isConnectedOrConnecting() {

File: src/com/xtremelabs/robolectric/shadows/ShadowView.java
Patch:
@@ -26,9 +26,6 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(View.class)
 public class ShadowView {
-    @Deprecated
-    public static final int UNINITIALIZED_ATTRIBUTE = -1000;
-
     @RealObject protected View realView;
 
     private int id;

File: test/com/xtremelabs/robolectric/util/CustomView.java
Patch:
@@ -3,12 +3,14 @@
 import android.content.Context;
 import android.util.AttributeSet;
 import android.widget.LinearLayout;
+import com.xtremelabs.robolectric.R;
 
 public class CustomView extends LinearLayout {
     public int attributeResourceValue;
 
     public CustomView(Context context, AttributeSet attrs) {
         super(context, attrs);
+        inflate(context, R.layout.inner_merge, this);
         attributeResourceValue = attrs.getAttributeResourceValue("some namespace", "message", -1);
     }
 }

File: src/com/xtremelabs/robolectric/Robolectric.java
Patch:
@@ -53,6 +53,7 @@
 import com.xtremelabs.robolectric.shadows.ShadowAlertDialog;
 import com.xtremelabs.robolectric.shadows.ShadowAppWidgetManager;
 import com.xtremelabs.robolectric.shadows.ShadowApplication;
+import com.xtremelabs.robolectric.shadows.ShadowAsyncTask;
 import com.xtremelabs.robolectric.shadows.ShadowAudioManager;
 import com.xtremelabs.robolectric.shadows.ShadowBaseAdapter;
 import com.xtremelabs.robolectric.shadows.ShadowBitmapDrawable;

File: test/com/xtremelabs/robolectric/util/ClassNameResolverTest.java
Patch:
@@ -29,8 +29,8 @@ public void shouldResolveClassesByPartiallyQualifiedName() throws Exception {
         assertEquals(TestApplication.class, new ClassNameResolver<Application>("com.xtremelabs", ".robolectric.TestApplication").resolve());
     }
 
-    @Test
+    @Test(expected = RuntimeException.class)
     public void shouldNotResolveClassesByUndottedPartiallyQualifiedNameBecauseAndroidDoesnt() throws Exception {
-        assertEquals(null, new ClassNameResolver<Application>("com.xtremelabs", "robolectric.TestApplication").resolve());
+        new ClassNameResolver<Application>("com.xtremelabs", "robolectric.TestApplication").resolve();
     }
 }

File: test/com/xtremelabs/robolectric/shadows/SQLiteOpenHelperTest.java
Patch:
@@ -94,13 +94,13 @@ public TestOpenHelper(Context context, String name,
 		}
 
 		@Override
-		public void onCreate(SQLiteDatabase arg0) {
+		public void onCreate(SQLiteDatabase db) {
 			onCreateCalled = true;
 		}
 
 		@Override
-		public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
-			onUpgradeCalled = true;;
+		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+			onUpgradeCalled = true;
 		}
 
 		@Override

File: test/com/xtremelabs/robolectric/shadows/AsyncTaskTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.os.AsyncTask;
 import com.xtremelabs.robolectric.Robolectric;
-import com.xtremelabs.robolectric.RobolectricTestRunner;
 import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Join;
 import com.xtremelabs.robolectric.util.Transcript;
@@ -19,8 +18,6 @@ public class AsyncTaskTest {
 
     @Before public void setUp() throws Exception {
         transcript = new Transcript();
-
-        Robolectric.logMissingInvokedShadowMethods();
     }
 
     @Test

File: src/com/xtremelabs/robolectric/shadows/ShadowAsyncTask.java
Patch:
@@ -3,6 +3,7 @@
 import android.os.AsyncTask;
 import android.os.ShadowAsyncTaskBridge;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.util.Implementation;
 import com.xtremelabs.robolectric.util.Implements;
 import com.xtremelabs.robolectric.util.RealObject;
 
@@ -20,6 +21,7 @@ public class ShadowAsyncTask<Params, Progress, Result> {
 //        return false;
 //    }
 
+    @Implementation
     public boolean cancel(boolean mayInterruptIfRunning) {
         if (hasRun) return false;
         cancelled = true;
@@ -34,6 +36,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
 //        return null;
 //    }
 
+    @Implementation
     public android.os.AsyncTask<Params, Progress, Result> execute(final Params... params) {
         final ShadowAsyncTaskBridge<Params, Progress, Result> bridge = new ShadowAsyncTaskBridge<Params, Progress, Result>(realAsyncTask);
         bridge.onPreExecute();

File: test/com/xtremelabs/robolectric/shadows/AsyncTaskTest.java
Patch:
@@ -20,7 +20,7 @@ public class AsyncTaskTest {
     @Before public void setUp() throws Exception {
         transcript = new Transcript();
 
-        RobolectricTestRunner.logMissingInvokedShadowMethods();
+        Robolectric.logMissingInvokedShadowMethods();
     }
 
     @Test

File: test/com/xtremelabs/robolectric/RobolectricTest.java
Patch:
@@ -50,7 +50,7 @@ public void shouldLogMissingInvokedShadowMethodsWhenRequested() throws Exception
         aView.findViewById(27);
         // No shadow here... should be logged
         output = buff.toString();
-        assertEquals("No Shadow method found for View.findViewById(int)\n", output);
+        assertEquals("No Shadow method found for View.findViewById(int)" + System.getProperty("line.separator"), output);
     }
 
     @Test // This is nasty because it depends on the test above having run first in order to fail

File: src/com/xtremelabs/robolectric/ShadowWrangler.java
Patch:
@@ -94,7 +94,7 @@ public Object methodInvoked(Class clazz, String methodName, Object instance, Str
     private void reportNoShadowMethodFound(Class clazz, String methodName, String[] paramTypes) {
         if (logMissingShadowMethods) {
             System.out.println("No Shadow method found for " + clazz.getSimpleName() + "." + methodName + "(" +
-                    Join.join(", ", paramTypes) + ")");
+                    Join.join(", ", (Object[]) paramTypes) + ")");
         }
     }
 

File: src/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -20,7 +20,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(SQLiteDatabase.class)
 public class ShadowSQLiteDatabase {
-
+    @Implementation
     public static SQLiteDatabase openDatabase(String path, SQLiteDatabase.CursorFactory factory, int flags) {
         return newInstanceOf(SQLiteDatabase.class);
     }

File: src/com/xtremelabs/robolectric/shadows/ShadowAbstractCursor.java
Patch:
@@ -25,7 +25,7 @@ public int getPosition() {
     
     @Implementation
     public final boolean moveToNext() {
-    	if (currentRowNumber == realAbstractCursor.getCount() - 1) {
+    	if (currentRowNumber >= realAbstractCursor.getCount() - 1) {
     		return false;
     	}
     	currentRowNumber++;

File: src/com/xtremelabs/robolectric/shadows/ShadowSQLiteDatabase.java
Patch:
@@ -153,11 +153,11 @@ private String whereValue(String whereClause) {
         	return whereClause.substring(whereClause.indexOf("=") + 1, whereClause.length());
         }
         
-        public boolean isEmptyOrWhitespace(String s) {
+        private boolean isEmptyOrWhitespace(String s) {
             return (s == null) || (s.trim().isEmpty());
         }
         
-        public boolean isSpecialCaseOrUnknown(String s) {
+        private boolean isSpecialCaseOrUnknown(String s) {
         	return "1".equals(s) || !s.contains("=");
         }
     }

File: src/com/xtremelabs/robolectric/shadows/ShadowAudioManager.java
Patch:
@@ -20,12 +20,12 @@ public int getStreamMaxVolume(int streamType) {
 	}
 	
 	@Implementation
-	int getStreamVolume(int streamType) {
+	public int getStreamVolume(int streamType) {
 		return streamVolume;
 	}
 	
 	@Implementation
-	void setStreamVolume(int streamType, int index, int flags) {
+	public void setStreamVolume(int streamType, int index, int flags) {
 		this.streamVolume = index;
 		this.flags = flags;
 	}

File: src/com/xtremelabs/robolectric/RobolectricTestRunner.java
Patch:
@@ -1,7 +1,7 @@
 package com.xtremelabs.robolectric;
 
 import android.app.Application;
-import android.net.Uri;
+import android.net.Uri__FromAndroid;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import com.xtremelabs.robolectric.shadows.ShadowApplication;
 import com.xtremelabs.robolectric.util.RealObject;
@@ -102,7 +102,8 @@ protected RobolectricTestRunner(Class<?> testClass, ClassHandler classHandler, R
             this.androidManifestPath = androidManifestPath;
             this.resourceDirectory = resourceDirectory;
 
-            delegateLoadingOf(Uri.class.getName());
+//            delegateLoadingOf(Uri.class.getName());
+            delegateLoadingOf(Uri__FromAndroid.class.getName());
             delegateLoadingOf(RobolectricTestRunnerInterface.class.getName());
             delegateLoadingOf(RealObject.class.getName());
             delegateLoadingOf(ShadowWrangler.class.getName());

File: src/com/xtremelabs/robolectric/shadows/ShadowCompoundButton.java
Patch:
@@ -42,4 +42,4 @@ public class ShadowCompoundButton extends ShadowTextView implements Checkable {
     public void setOnCheckedChangeListener(CompoundButton.OnCheckedChangeListener listener) {
         mOnCheckedChangeListener = listener;
     }
-}
+    }

File: src/com/xtremelabs/robolectric/shadows/ShadowSettings.java
Patch:
@@ -13,6 +13,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(Settings.class)
 public class ShadowSettings {
+    @Implements(Settings.class)
     private static class SettingsImpl {
         private static final WeakHashMap<ContentResolver, Map<String, Integer>> dataMap = new WeakHashMap<ContentResolver, Map<String, Integer>>();
 

File: test/com/xtremelabs/robolectric/AndroidTranslatorTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class AndroidTranslatorTest {
 
     @Test

File: test/com/xtremelabs/robolectric/ShadowWranglerTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithoutTestDefaultsRunner.class)
 public class ShadowWranglerTest {
     private Context context;
 
@@ -98,7 +98,7 @@ public void testShadowSelectionSearchesSuperclasses() throws Exception {
     }
 
     @Test
-    public void testWeirdness() throws Exception {
+    public void shouldUseMostSpecificShadow() throws Exception {
         Robolectric.bindShadowClass(View.class, TestShadowView.class);
         Robolectric.bindShadowClass(TextView.class, TestShadowTextView.class);
 

File: test/com/xtremelabs/robolectric/matchers/StartedMatcherTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.app.ListActivity;
 import android.content.Context;
 import android.content.Intent;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
@@ -19,7 +19,7 @@
 import static com.xtremelabs.robolectric.matchers.StartedMatcher.createIntent;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class StartedMatcherTest {
     private Activity activity;
     private Intent intentWithExtra;

File: test/com/xtremelabs/robolectric/res/TestAttributeSetTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.xtremelabs.robolectric.res;
 
 import android.view.View;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.CustomView;
 import com.xtremelabs.robolectric.util.TestAttributeSet;
 import org.junit.Before;
@@ -15,7 +15,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class TestAttributeSetTest {
     private HashMap<String, String> attributes;
     private ResourceExtractor resourceExtractor;

File: test/com/xtremelabs/robolectric/res/ViewLoaderTest.java
Patch:
@@ -5,9 +5,9 @@
 import android.view.ViewGroup;
 import android.widget.*;
 import com.google.android.maps.MapView;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.shadows.ShadowImageView;
 import com.xtremelabs.robolectric.shadows.ShadowTextView;
 import com.xtremelabs.robolectric.util.CustomView;
@@ -24,7 +24,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ViewLoaderTest {
     private ViewLoader viewLoader;
     private MockContext context;

File: test/com/xtremelabs/robolectric/shadows/AbsSpinnerTest.java
Patch:
@@ -3,13 +3,13 @@
 import android.app.Activity;
 import android.widget.AdapterView;
 import android.widget.Gallery;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class AbsSpinnerTest {
     private AdapterView adapterView;
 

File: test/com/xtremelabs/robolectric/shadows/ActivityTest.java
Patch:
@@ -4,13 +4,13 @@
 import android.app.Application;
 import android.appwidget.AppWidgetProvider;
 import android.content.IntentFilter;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ActivityTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/AlertDialogTest.java
Patch:
@@ -3,8 +3,8 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.ContextWrapper;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -14,7 +14,7 @@
 import static org.hamcrest.Matchers.sameInstance;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class AlertDialogTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/AppWidgetManagerTest.java
Patch:
@@ -8,9 +8,9 @@
 import android.view.View;
 import android.widget.RemoteViews;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import org.junit.Before;
 import org.junit.Test;
@@ -21,7 +21,7 @@
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class AppWidgetManagerTest {
     private AppWidgetManager appWidgetManager;
     private ShadowAppWidgetManager shadowAppWidgetManager;

File: test/com/xtremelabs/robolectric/shadows/ApplicationTest.java
Patch:
@@ -11,9 +11,9 @@
 import android.view.LayoutInflater;
 import android.view.WindowManager;
 
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import com.xtremelabs.robolectric.res.StringResourceLoader;
 import org.junit.Before;
@@ -27,7 +27,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ApplicationTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/BitmapDrawableTest.java
Patch:
@@ -3,17 +3,17 @@
 import android.app.Application;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static android.test.MoreAsserts.assertNotEqual;
 import static org.junit.Assert.assertEquals;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class BitmapDrawableTest {
     private Resources resources;
 

File: test/com/xtremelabs/robolectric/shadows/CheckBoxTest.java
Patch:
@@ -2,15 +2,15 @@
 
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class CheckBoxTest {
     @Test
     public void testWorks() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/ContextWrapperTest.java
Patch:
@@ -4,8 +4,8 @@
 import android.app.Application;
 import android.appwidget.AppWidgetProvider;
 import android.content.*;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Before;
 import org.junit.Test;
@@ -14,7 +14,7 @@
 import static org.hamcrest.Matchers.sameInstance;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ContextWrapperTest {
     public Transcript transcript;
     private ContextWrapper contextWrapper;

File: test/com/xtremelabs/robolectric/shadows/DialogTest.java
Patch:
@@ -2,16 +2,16 @@
 
 import android.app.Dialog;
 import android.content.DialogInterface;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.Matchers.sameInstance;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class DialogTest {
     @Test
     public void shouldCallOnDismissListener() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/DisplayTest.java
Patch:
@@ -6,13 +6,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.Robolectric;
 
 import android.util.DisplayMetrics;
 import android.view.Display;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class DisplayTest {
 	
     @Before public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/EditTextTest.java
Patch:
@@ -1,15 +1,15 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.widget.EditText;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.junit.Assert.assertTrue;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class EditTextTest {
     @Before public void setUp() throws Exception {
         Robolectric.bindDefaultShadowClasses();

File: test/com/xtremelabs/robolectric/shadows/HandlerTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.os.Handler;
 import android.os.Looper;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Before;
 import org.junit.Test;
@@ -12,7 +12,7 @@
 import static com.xtremelabs.robolectric.Robolectric.newInstanceOf;
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class HandlerTest {
     private Transcript transcript;
 

File: test/com/xtremelabs/robolectric/shadows/IntentTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -16,7 +16,7 @@
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class IntentTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/LayoutInflaterTest.java
Patch:
@@ -3,9 +3,9 @@
 import android.app.Application;
 import android.content.ContextWrapper;
 import android.view.LayoutInflater;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class LayoutInflaterTest {
     private LayoutInflater layoutInflater;
 

File: test/com/xtremelabs/robolectric/shadows/LayoutParamsTest.java
Patch:
@@ -2,15 +2,15 @@
 
 import android.view.ViewGroup;
 import android.widget.Gallery;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class LayoutParamsTest {
     @Test
     public void testConstructor() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/ListViewTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.widget.AdapterView;
 import android.widget.BaseAdapter;
 import android.widget.ListView;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Before;
 import org.junit.Test;
@@ -23,7 +23,7 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ListViewTest {
     private Transcript transcript;
     private ListView listView;

File: test/com/xtremelabs/robolectric/shadows/LooperTest.java
Patch:
@@ -1,15 +1,15 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.os.Looper;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.junit.Assert.assertSame;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class LooperTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/MapActivityTest.java
Patch:
@@ -3,13 +3,13 @@
 import android.app.Application;
 import android.os.Bundle;
 import com.google.android.maps.MapActivity;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class MapActivityTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/MapViewTest.java
Patch:
@@ -7,8 +7,8 @@
 import com.google.android.maps.GeoPoint;
 import com.google.android.maps.MapView;
 import com.xtremelabs.robolectric.AndroidTranslatorTest;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,7 +17,7 @@
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class MapViewTest {
     private MapView mapView;
     private MyOverlay overlay1;

File: test/com/xtremelabs/robolectric/shadows/PreferenceManagerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.view.TestSharedPreferences;
 
@@ -15,7 +15,7 @@
 import android.content.SharedPreferences.Editor;
 import android.preference.PreferenceManager;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class PreferenceManagerTest {
 	
     @Before 

File: test/com/xtremelabs/robolectric/shadows/ResourcesTest.java
Patch:
@@ -3,16 +3,16 @@
 import android.app.Activity;
 import android.app.Application;
 import android.content.res.Resources;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.io.File;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ResourcesTest {
     @Test(expected = Resources.NotFoundException.class)
     public void getStringArray_shouldThrowExceptionIfNotFound() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/SQLiteDatabaseTest.java
Patch:
@@ -4,16 +4,16 @@
 import android.database.AbstractCursor;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class SQLiteDatabaseTest {
     private SQLiteDatabase database;
 

File: test/com/xtremelabs/robolectric/shadows/ServiceTest.java
Patch:
@@ -6,13 +6,13 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.IBinder;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ServiceTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/SettingsTest.java
Patch:
@@ -4,16 +4,16 @@
 import android.app.Application;
 import android.content.ContentResolver;
 import android.provider.Settings;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class SettingsTest {
     private Activity activity;
     private ContentResolver contentResolver;

File: test/com/xtremelabs/robolectric/shadows/SpannableStringBuilderTest.java
Patch:
@@ -1,16 +1,16 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.text.SpannableStringBuilder;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class SpannableStringBuilderTest {
     @Before
     public void setUp() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/TextUtilsTest.java
Patch:
@@ -1,15 +1,15 @@
 package com.xtremelabs.robolectric.shadows;
 
 import android.text.TextUtils;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class TextUtilsTest {
     @Test
     public void testExpandTemplate() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/TextViewTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.text.style.URLSpan;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -14,7 +14,7 @@
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class TextViewTest {
     @Test
     public void testGetUrls() throws Exception {

File: test/com/xtremelabs/robolectric/shadows/ViewGroupTest.java
Patch:
@@ -4,9 +4,9 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.R;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.res.ResourceLoader;
 import org.junit.Before;
 import org.junit.Test;
@@ -22,7 +22,7 @@
 import static org.hamcrest.core.IsNull.nullValue;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ViewGroupTest {
     private ViewGroup root;
     private View child1;

File: test/com/xtremelabs/robolectric/shadows/ViewInnerTextTest.java
Patch:
@@ -5,16 +5,16 @@
 import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.TextView;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static com.xtremelabs.robolectric.Robolectric.shadowOf;
 import static org.junit.Assert.assertEquals;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ViewInnerTextTest {
     private Context activity;
 

File: test/com/xtremelabs/robolectric/shadows/ViewTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.view.View;
 import android.view.ViewGroup;
-import com.xtremelabs.robolectric.DogfoodRobolectricTestRunner;
 import com.xtremelabs.robolectric.Robolectric;
+import com.xtremelabs.robolectric.WithTestDefaultsRunner;
 import com.xtremelabs.robolectric.util.Transcript;
 import org.junit.Before;
 import org.junit.Test;
@@ -13,7 +13,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.*;
 
-@RunWith(DogfoodRobolectricTestRunner.class)
+@RunWith(WithTestDefaultsRunner.class)
 public class ViewTest {
     private View view;
 

File: test/com/xtremelabs/robolectric/AndroidTranslatorUnitTest.java
Patch:
@@ -13,7 +13,7 @@ public class AndroidTranslatorUnitTest {
 
     @Before public void setUp() throws Exception {
         classPool = new ClassPool(true);
-        androidTranslator = new AndroidTranslator(null) {
+        androidTranslator = new AndroidTranslator(null, null) {
             @Override protected int getIndex() {
                 return 0;
             }

File: src/com/xtremelabs/robolectric/AbstractRobolectricTestRunner.java
Patch:
@@ -21,7 +21,6 @@ public AbstractRobolectricTestRunner(Class<?> testClass, Loader loader) throws I
 
         this.loader.delegateLoadingOf(TestHelperInterface.class.getName());
         this.loader.delegateLoadingOf(RealObject.class.getName());
-        this.loader.delegateLoadingOf(com.xtremelabs.robolectric.util.ShadowWrangler.class.getName());
         this.loader.delegateLoadingOf(ShadowWrangler.class.getName());
     }
 

File: src/com/xtremelabs/robolectric/util/AppSingletonizer.java
Patch:
@@ -23,7 +23,7 @@ synchronized public T getInstance(Context context) {
         }
         return instance;
     }
-�
+
     protected abstract T get(ShadowApplication shadowApplication);
 
     protected abstract void set(ShadowApplication shadowApplication, T instance);

File: src/com/xtremelabs/robolectric/fakes/FakeEditText.java
Patch:
@@ -17,6 +17,8 @@ public class FakeEditText extends FakeTextView {
 
     public FakeEditText(EditText view) {
         super(view);
+
+        focusable = true;
     }
 
     @Implementation

File: test/com/xtremelabs/robolectric/DogfoodRobolectricTestRunner.java
Patch:
@@ -10,7 +10,8 @@ public class DogfoodRobolectricTestRunner extends AbstractRobolectricTestRunner
   private static final Loader LOADER = new Loader(PROXY_DELEGATING_HANDLER);
 
   public DogfoodRobolectricTestRunner(Class testClass) throws InitializationError {
-      super(testClass, LOADER, PROXY_DELEGATING_HANDLER);
+      super(testClass, LOADER);
+      setClassHandler(PROXY_DELEGATING_HANDLER);
   }
 
   public static void addProxy(Class<?> realClass, Class<?> handlerClass) {

File: src/com/xtremelabs/robolectric/AndroidTranslator.java
Patch:
@@ -33,7 +33,7 @@ public AndroidTranslator(ClassHandler classHandler) {
 
     synchronized static private int addInstance(AndroidTranslator androidTranslator) {
         INSTANCES.add(androidTranslator);
-        return INSTANCES.size() - CACHE_VERSION;
+        return INSTANCES.size() - 1;
     }
 
     synchronized static public AndroidTranslator get(int index) {
@@ -224,7 +224,7 @@ private void appendParamArray(StringBuilder buf, CtMethod ctMethod) throws NotFo
                 if (i > 0) buf.append(", ");
                 buf.append(AndroidTranslator.class.getName());
                 buf.append(".autobox(");
-                buf.append("$").append(i + CACHE_VERSION);
+                buf.append("$").append(i + 1);
                 buf.append(")");
             }
             buf.append("}");

File: src/com/xtremelabs/droidsugar/util/FakeHelper.java
Patch:
@@ -72,6 +72,7 @@ public static List<Class<?>> getGenericProxies() {
                 FakeTextUtils.class,
                 FakeTextView.class,
                 FakeToast.class,
+                FakeTypedValue.class,
                 FakeView.class,
                 FakeViewGroup.class,
                 FakeWifiManager.class,

File: src/com/xtremelabs/droidsugar/fakes/FakeTextView.java
Patch:
@@ -10,6 +10,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static android.view.View.VISIBLE;
+
 @SuppressWarnings({"UnusedDeclaration"})
 @Implements(TextView.class)
 public class FakeTextView extends FakeView {
@@ -108,7 +110,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
 
     @Override
     public String innerText() {
-        return text == null ? "" : text.toString();
+        return (text == null || visibility != VISIBLE) ? "" : text.toString();
     }
 
     public static class CompoundDrawables {

File: test/com/xtremelabs/droidsugar/fakes/ListViewTest.java
Patch:
@@ -40,6 +40,7 @@ public void onNothingSelected(AdapterView<?> parent) {
         });
 
         listView.setSelection(0);
+        FakeHandler.flush();
         transcript.assertEventsSoFar("item was selected: 0");
     }
 

File: test/com/xtremelabs/droidsugar/util/ViewLoaderTest.java
Patch:
@@ -104,7 +104,7 @@ public void testViewVisibilityIsSet() throws Exception {
     @Test
     public void testTextViewTextIsSet() throws Exception {
         View mediaView = viewLoader.inflateView(context, "layout/main");
-        assertThat(((TextView) mediaView.findViewById(R.id.title)).getText().toString(), equalTo("�Hola!"));
+        assertThat(((TextView) mediaView.findViewById(R.id.title)).getText().toString(), equalTo("Hola!"));
         assertThat(((TextView) mediaView.findViewById(R.id.subtitle)).getText().toString(), equalTo("Hello"));
     }
 

File: src/com/xtremelabs/droidsugar/fakes/FakeContextWrapper.java
Patch:
@@ -16,6 +16,7 @@
 import com.xtremelabs.droidsugar.util.Implements;
 import com.xtremelabs.droidsugar.util.ResourceLoader;
 import com.xtremelabs.droidsugar.util.ViewLoader;
+import com.xtremelabs.droidsugar.view.TestSharedPreferences;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/com/xtremelabs/droidsugar/view/FakeItemizedOverlay.java
Patch:
@@ -6,7 +6,7 @@
 public class FakeItemizedOverlay {
     public boolean populated;
     public boolean shouldHit;
-
+    
     protected final void populate() {
         populated = true;
     }

File: src/com/xtremelabs/droidsugar/view/FakeMapController.java
Patch:
@@ -5,11 +5,13 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class FakeMapController {
 
+    public FakeMapView fakeMapView;
     public GeoPoint geoPointAnimatedTo;
     public int zoomedLatSpan;
     public int zoomedLngSpan;
 
     public void animateTo(com.google.android.maps.GeoPoint geoPoint, java.lang.Runnable runnable) {
+        fakeMapView.mapCenter = geoPoint;
         geoPointAnimatedTo = geoPoint;
         runnable.run();
     }

File: src/com/xtremelabs/droidsugar/view/FakeMapView.java
Patch:
@@ -40,6 +40,7 @@ public MapController getController() {
                 constructor.setAccessible(true);
                 mapController = constructor.newInstance();
                 fakeMapController = ((FakeMapController) ProxyDelegatingHandler.getInstance().proxyFor(mapController));
+                fakeMapController.fakeMapView = this;
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }

File: src/com/xtremelabs/droidsugar/view/FakeIntent.java
Patch:
@@ -73,7 +73,8 @@ public Parcelable getParcelableExtra(String name) {
     }
 
     public int getIntExtra(String name, int defaultValue) {
-        return (Integer) extras.get(name);
+        Integer foundValue = (Integer) extras.get(name);
+        return foundValue == null ? defaultValue : foundValue;
     }
 
     private void init() {

File: src/com/xtremelabs/droidsugar/view/ViewLoader.java
Patch:
@@ -55,8 +55,7 @@ private void processXml(File xmlFile) throws Exception {
         processChildren(document.getChildNodes(), topLevelNode);
         viewNodesByLayoutName.put(
             "layout/" + xmlFile.getName().replace(".xml", ""),
-            topLevelNode.getChildren().get(0)
-        );
+            topLevelNode.getChildren().get(0));
     }
 
     private void processChildren(NodeList childNodes, ViewNode parent) {

File: src/com/xtremelabs/droidsugar/ClassHandler.java
Patch:
@@ -9,5 +9,5 @@ public interface ClassHandler {
 
     void afterTest();
 
-    Object methodInvoked(String className, String methodName, Object instance, String[] paramTypes, Object[] params);
+    Object methodInvoked(Class clazz, String methodName, Object instance, String[] paramTypes, Object[] params);
 }

File: test/com/xtremelabs/droidsugar/view/ViewAssist.java
Patch:
@@ -1,6 +1,5 @@
 package com.xtremelabs.droidsugar.view;
 
-import android.*;
 import android.app.*;
 import android.view.*;
 import android.widget.*;

