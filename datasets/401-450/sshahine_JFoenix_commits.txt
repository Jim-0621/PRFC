File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -175,7 +175,7 @@ protected void updateChildren() {
 
     @Override
     protected double computeMinWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
-        return super.computePrefWidth(height, topInset, rightInset, bottomInset, leftInset)
+        return super.computeMinWidth(height, topInset, rightInset, bottomInset, leftInset)
                + snapSize(box.minWidth(-1)) + getLabelOffset();
     }
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -175,7 +175,7 @@ protected void updateChildren() {
 
     @Override
     protected double computeMinWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
-        return super.computePrefWidth(height, topInset, rightInset, bottomInset, leftInset)
+        return super.computeMinWidth(height, topInset, rightInset, bottomInset, leftInset)
                + snapSize(box.minWidth(-1)) + getLabelOffset();
     }
 

File: jfoenix/src/main/java/com/jfoenix/transitions/JFXKeyValue.java
Patch:
@@ -60,7 +60,7 @@ public Interpolator getInterpolator() {
     }
 
     public boolean isValid() {
-        return animateCondition == null ? true : animateCondition.get();
+        return animateCondition == null || animateCondition.get();
     }
 
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXPasswordFieldSkin.java
Patch:
@@ -7,9 +7,9 @@
 
 public class JFXPasswordFieldSkin extends JFXTextFieldSkin<JFXPasswordField> {
 
-    private final PseudoClass PSEUDO_MASKED = PseudoClass.getPseudoClass("masked");
+    private final PseudoClass PSEUDO_UNMASKED = PseudoClass.getPseudoClass("unmasked");
     private final InvalidationListener invalidationListener = observable ->
-        getSkinnable().pseudoClassStateChanged(PSEUDO_MASKED, ((JFXPasswordField) getSkinnable()).isMaskedText());
+        getSkinnable().pseudoClassStateChanged(PSEUDO_UNMASKED, !((JFXPasswordField) getSkinnable()).isMaskedText());
 
     private final WeakInvalidationListener maskedListener = new WeakInvalidationListener(invalidationListener);
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXSnackbar.java
Patch:
@@ -340,6 +340,9 @@ private void processSnackbar() {
     }
 
     private void refreshPopup() {
+        if (snackbarContainer == null) {
+            return;
+        }
         Bounds contentBound = this.getLayoutBounds();
         double offsetX = Math.ceil(snackbarContainer.getWidth() / 2) - Math.ceil(contentBound.getWidth() / 2);
         double offsetY = snackbarContainer.getHeight() - contentBound.getHeight();

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxOldSkin.java
Patch:
@@ -135,7 +135,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         final CheckBox checkBox = getSkinnable();
         boxWidth = snapSize(container.prefWidth(-1));
         boxHeight = snapSize(container.prefHeight(-1));
-        final double computeWidth = Math.min(checkBox.prefWidth(-1), checkBox.minWidth(-1)) + labelOffset + 2 * padding;
+        final double computeWidth = Math.max(checkBox.prefWidth(-1), checkBox.minWidth(-1)) + labelOffset + 2 * padding;
         final double labelWidth = Math.min(computeWidth - boxWidth, w - snapSize(boxWidth)) + labelOffset + 2 * padding;
         final double labelHeight = Math.min(checkBox.prefHeight(labelWidth), h);
         maxHeight = Math.max(boxHeight, labelHeight);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -201,7 +201,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         final CheckBox checkBox = getSkinnable();
         final double boxWidth = snapSize(box.prefWidth(-1));
         final double boxHeight = snapSize(box.prefHeight(-1));
-        final double computeWidth = Math.min(checkBox.prefWidth(-1), checkBox.minWidth(-1));
+        final double computeWidth = Math.max(checkBox.prefWidth(-1), checkBox.minWidth(-1));
         final double labelWidth = Math.min(computeWidth - boxWidth, w - snapSize(boxWidth)) + labelOffset;
         final double labelHeight = Math.min(checkBox.prefHeight(labelWidth), h);
         final double maxHeight = Math.max(boxHeight, labelHeight);

File: jfoenix/src/main/java/com/jfoenix/validation/StringLengthValidator.java
Patch:
@@ -3,7 +3,7 @@
  * To change this template file, choose Tools | Templates
  * and open the template in the editor.
  */
-package validations;
+package com.jfoenix.validation;
 import com.jfoenix.validation.base.ValidatorBase;
 import javafx.scene.control.TextInputControl;
 /**

File: jfoenix/src/main/java/com/jfoenix/validation/StringLengthValidator.java
Patch:
@@ -3,7 +3,7 @@
  * To change this template file, choose Tools | Templates
  * and open the template in the editor.
  */
-package validations;
+package com.jfoenix.validation;
 import com.jfoenix.validation.base.ValidatorBase;
 import javafx.scene.control.TextInputControl;
 /**

File: jfoenix/src/main/java/com/jfoenix/validation/StringLengthValidator.java
Patch:
@@ -83,7 +83,7 @@ private void evalTextInputField() {
         hasErrors.set(false);
         
         if (!text.isEmpty()) {
-            if(text.length()>=StringLength-1){
+            if(text.length()>StringLength-1){
               hasErrors.set(true);
             //  textField.textProperty().set(text.substring(0, 19));
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -163,7 +163,6 @@ private void createPromptNode() {
             return;
         }
         promptText = new Text();
-        StackPane.setAlignment(promptText, Pos.CENTER_LEFT);
         // create my custom pane for the prompt node
         promptText.textProperty().bind(getSkinnable().promptTextProperty());
         promptText.fillProperty().bind(linesWrapper.animatedPromptTextFill);

File: jfoenix/src/main/java/com/jfoenix/skins/PromptLinesWrapper.java
Patch:
@@ -31,6 +31,7 @@
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableValue;
 import javafx.geometry.Insets;
+import javafx.geometry.Pos;
 import javafx.scene.Node;
 import javafx.scene.control.ComboBox;
 import javafx.scene.control.Control;
@@ -181,6 +182,7 @@ public void init(Runnable createPromptNodeRunnable, Node... cachedNodes) {
                     .setInterpolator(Interpolator.EASE_BOTH).build())
         );
 
+        promptContainer.getStyleClass().add("prompt-container");
         promptContainer.setManaged(false);
         promptContainer.setMouseTransparent(true);
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -34,6 +34,7 @@
 import javafx.animation.Transition;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
+import javafx.geometry.NodeOrientation;
 import javafx.geometry.VPos;
 import javafx.scene.Node;
 import javafx.scene.control.CheckBox;
@@ -80,6 +81,7 @@ public JFXCheckBoxSkin(JFXCheckBox control) {
         indeterminateMark.setScaleY(0);
 
         mark.getStyleClass().setAll("mark");
+        mark.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);
         mark.setOpacity(0);
         mark.setScaleX(0);
         mark.setScaleY(0);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -636,7 +636,7 @@ public void setGraphic(Node node) {
         graphic = node;
     }
 
-    public Node getGraphic(Node node) {
+    public Node getGraphic() {
         return graphic;
     }
 }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -636,7 +636,7 @@ public void setGraphic(Node node) {
         graphic = node;
     }
 
-    public Node getGraphic(Node node) {
+    public Node getGraphic() {
         return graphic;
     }
 }

File: jfoenix/src/main/java/com/jfoenix/utils/JFXHighlighter.java
Patch:
@@ -113,7 +113,7 @@ public synchronized void highlight(Parent pane, String query) {
             }
         }
 
-        Platform.runLater(()-> getParentChildren(pane).addAll(allRectangles));
+        JFXUtilities.runInFXAndWait(()-> getParentChildren(pane).addAll(allRectangles));
     }
 
     private class HighLightRectangle extends Rectangle{
@@ -219,7 +219,7 @@ public synchronized void clear() {
             flatBoxes.addAll(box);
         }
         boxes.clear();
-        if(parent!=null) JFXUtilities.runInFX(()-> getParentChildren(parent).removeAll(flatBoxes));
+        if(parent!=null) JFXUtilities.runInFXAndWait(()-> getParentChildren(parent).removeAll(flatBoxes));
     }
 
     public Paint getPaint() {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXToggleButtonSkin.java
Patch:
@@ -81,6 +81,7 @@ public JFXToggleButtonSkin(JFXToggleButton toggleButton) {
         circlePane.setPadding(new Insets(circleRadius * 1.5));
 
         JFXRippler rippler = new JFXRippler(circlePane, RipplerMask.CIRCLE, RipplerPos.BACK);
+        rippler.setRipplerFill(getSkinnable().isSelected() ? toggleButton.getToggleLineColor() : toggleButton.getUnToggleLineColor());
         rippler.setTranslateX(computeTranslation(circleRadius, line));
 
         final StackPane main = new StackPane();
@@ -110,6 +111,7 @@ public JFXToggleButtonSkin(JFXToggleButton toggleButton) {
 
         // add change listener to selected property
         getSkinnable().selectedProperty().addListener(observable -> {
+            rippler.setRipplerFill(toggleButton.isSelected() ? toggleButton.getToggleLineColor() : toggleButton.getUnToggleLineColor());
             if (!toggleButton.isDisableAnimation()) {
                 timer.reverseAndContinue();
             } else {

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/OnPressedEditableTableCell.java
Patch:
@@ -30,7 +30,7 @@ private void init() {
             }
         });
         addEventFilter(MouseEvent.MOUSE_RELEASED, click -> {
-            if (isEditable() && !isEditing() && getTableColumn().isEditable()) {
+            if (!isEmpty() && isEditable() && !isEditing() && getTableColumn().isEditable()) {
                 getTableView().edit(getIndex(), getTableColumn());
             }
         });

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/OnPressedEditableTreeTableCell.java
Patch:
@@ -30,7 +30,7 @@ private void init() {
             }
         });
         addEventFilter(MouseEvent.MOUSE_RELEASED, click -> {
-            if (isEditable() && !isEditing() && getTableColumn().isEditable()) {
+            if (!isEmpty() && isEditable() && !isEditing() && getTableColumn().isEditable()) {
                 getTreeTableView().edit(getIndex(), getTableColumn());
             }
         });

File: jfoenix/src/main/java/com/jfoenix/skins/JFXColorPickerSkin.java
Patch:
@@ -99,8 +99,6 @@ public JFXColorPickerSkin(final ColorPicker colorPicker) {
         getChildren().setAll(rippler);
         JFXDepthManager.setDepth(getSkinnable(), 1);
         getSkinnable().setPickOnBounds(false);
-        // to improve the performance on 1st click
-        getPopupContent();
 
         colorPicker.focusedProperty().addListener(observable -> {
             if (colorPicker.isFocused()) {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXPopupSkin.java
Patch:
@@ -65,7 +65,7 @@ public JFXPopupSkin(JFXPopup control) {
         container.setOpacity(0);
         root = JFXDepthManager.createMaterialNode(container, 4);
         animation = getAnimation();
-    }
+}
 
 
     public void reset(PopupVPosition vAlign, PopupHPosition hAlign, double offsetX, double offsetY) {
@@ -139,7 +139,7 @@ protected void starting() {
     public void init() {
         animation.stop();
         container.setOpacity(0);
-        scale.setX(0);
-        scale.setY(0);
+        scale.setX(1);
+        scale.setY(0.1);
     }
 }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXPopupSkin.java
Patch:
@@ -65,7 +65,7 @@ public JFXPopupSkin(JFXPopup control) {
         container.setOpacity(0);
         root = JFXDepthManager.createMaterialNode(container, 4);
         animation = getAnimation();
-    }
+}
 
 
     public void reset(PopupVPosition vAlign, PopupHPosition hAlign, double offsetX, double offsetY) {
@@ -139,7 +139,7 @@ protected void starting() {
     public void init() {
         animation.stop();
         container.setOpacity(0);
-        scale.setX(0);
-        scale.setY(0);
+        scale.setX(1);
+        scale.setY(0.1);
     }
 }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXAutoCompletePopup.java
Patch:
@@ -189,7 +189,7 @@ private static class StyleableProperties {
 
         static {
             final List<CssMetaData<? extends Styleable, ?>> styleables =
-                new ArrayList<CssMetaData<? extends Styleable, ?>>(PopupControl.getClassCssMetaData());
+                new ArrayList<>(PopupControl.getClassCssMetaData());
             styleables.add(FIXED_CELL_SIZE);
             styleables.add(CELL_LIMIT);
             STYLEABLES = Collections.unmodifiableList(styleables);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -798,7 +798,7 @@ public StyleableProperty<RipplerMask> getStyleableProperty(JFXRippler control) {
 
         static {
             final List<CssMetaData<? extends Styleable, ?>> styleables =
-                new ArrayList<>(Parent.getClassCssMetaData());
+                new ArrayList<>(StackPane.getClassCssMetaData());
             Collections.addAll(styleables,
                 RIPPLER_RECENTER,
                 RIPPLER_RADIUS,

File: jfoenix/src/main/java/com/jfoenix/skins/JFXColorPickerSkin.java
Patch:
@@ -248,7 +248,7 @@ public StyleableProperty<Boolean> getStyleableProperty(ColorPicker n) {
 
         static {
             final List<CssMetaData<? extends Styleable, ?>> styleables =
-                new ArrayList<>(ComboBoxBaseSkin.getClassCssMetaData());
+                new ArrayList<>(ComboBoxPopupControl.getClassCssMetaData());
             styleables.add(COLOR_LABEL_VISIBLE);
             STYLEABLES = Collections.unmodifiableList(styleables);
         }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -203,7 +203,7 @@ public StyleableProperty<Paint> getStyleableProperty(JFXComboBox n) {
 
         static {
             List<CssMetaData<? extends Styleable, ?>> styleables =
-                new ArrayList<CssMetaData<? extends Styleable, ?>>(ComboBoxListViewSkin.getClassCssMetaData());
+                new ArrayList<>(ComboBoxListViewSkin.getClassCssMetaData());
             styleables.add(PROMPT_TEXT_FILL);
             STYLEABLES = Collections.unmodifiableList(styleables);
         }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPopup.java
Patch:
@@ -73,6 +73,7 @@ private void initialize() {
         this.setHideOnEscape(true);
         this.setConsumeAutoHidingEvents(false);
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
+        getScene().getRoot().setStyle("-fx-background-color: TRANSPARENT");
     }
 
     @Override

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/GenericEditableTableCell.java
Patch:
@@ -106,6 +106,8 @@ protected Object getValue() {
     public void startEdit() {
         if (isEditable()) {
             super.startEdit();
+            // focus cell (in case of validation error the focus will remain)
+            getTableView().getFocusModel().focus(getTableRow().getIndex(), getTableColumn());
             if (editorNode == null) {
                 createEditorNode();
             } else {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXDatePickerContent.java
Patch:
@@ -763,7 +763,8 @@ protected void forward(int offset, ChronoUnit unit, boolean focusDayCell, boolea
     }
 
     private void goToDayCell(DateCell dateCell, int offset, ChronoUnit unit, boolean focusDayCell) {
-        goToDate(dayCellDate(dateCell).plus(offset, unit), focusDayCell);
+        YearMonth yearMonth = selectedYearMonth.get().plus(offset, unit);
+        goToDate(dayCellDate(dateCell).plus(offset, unit).withYear(yearMonth.getYear()), focusDayCell);
     }
 
     private void goToDate(LocalDate date, boolean focusDayCell) {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXDatePickerContent.java
Patch:
@@ -579,8 +579,9 @@ private void updateDayNameCells() {
         for (int i = 0; i < daysPerWeek; i++) {
             String name = weekDayNameFormatter.withLocale(getLocale()).format(date.plus(i, DAYS));
             // Fix Chinese environment week display incorrectly
+            // Take the last character of the Chinese weekday names
             if (weekDayNameFormatter.getLocale() == java.util.Locale.CHINA) {
-                name = name.substring(2, 3).toUpperCase();
+                name = name.substring(name.length() - 1).toUpperCase();
             } else {
                 name = name.substring(0, 1).toUpperCase();
             }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXDatePickerContent.java
Patch:
@@ -579,8 +579,9 @@ private void updateDayNameCells() {
         for (int i = 0; i < daysPerWeek; i++) {
             String name = weekDayNameFormatter.withLocale(getLocale()).format(date.plus(i, DAYS));
             // Fix Chinese environment week display incorrectly
+            // Take the last character of the Chinese weekday names
             if (weekDayNameFormatter.getLocale() == java.util.Locale.CHINA) {
-                name = name.substring(2, 3).toUpperCase();
+                name = name.substring(name.length() - 1).toUpperCase();
             } else {
                 name = name.substring(0, 1).toUpperCase();
             }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTimePicker.java
Patch:
@@ -140,7 +140,7 @@ public final StringConverter<LocalTime> getConverter() {
     }
 
     private StringConverter<LocalTime> defaultConverter = new LocalTimeStringConverter(FormatStyle.SHORT,
-        Locale.ENGLISH);
+        Locale.getDefault());
 
     private BooleanProperty _24HourView = new SimpleBooleanProperty(false);
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTimePicker.java
Patch:
@@ -140,7 +140,7 @@ public final StringConverter<LocalTime> getConverter() {
     }
 
     private StringConverter<LocalTime> defaultConverter = new LocalTimeStringConverter(FormatStyle.SHORT,
-        Locale.ENGLISH);
+        Locale.getDefault());
 
     private BooleanProperty _24HourView = new SimpleBooleanProperty(false);
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXDatePickerContent.java
Patch:
@@ -201,8 +201,8 @@ public void updateItem(String item, boolean empty) {
     private ObjectProperty<YearMonth> selectedYearMonth = new SimpleObjectProperty<>(this, "selectedYearMonth");
 
 
-    JFXDatePickerContent(final DatePicker datePicker) {
-        this.datePicker = (JFXDatePicker) datePicker;
+    JFXDatePickerContent(final JFXDatePicker datePicker) {
+        this.datePicker = datePicker;
         getStyleClass().add("date-picker-popup");
 
         LocalDate date = datePicker.getValue();

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -94,10 +94,10 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
             () -> promptText);
 
         linesWrapper.init(() -> createPromptNode());
+        linesWrapper.clip.widthProperty().bind(linesWrapper.promptContainer.widthProperty().subtract(arrowButton.widthProperty()));
 
         errorContainer = new ValidationPane<>(comboBox);
 
-
         getChildren().addAll(linesWrapper.line, linesWrapper.focusedLine, linesWrapper.promptContainer, errorContainer);
 
         if (comboBox.isEditable()) {

File: jfoenix/src/main/java/com/jfoenix/skins/PromptLinesWrapper.java
Patch:
@@ -72,7 +72,7 @@ public class PromptLinesWrapper<T extends Control & IFXLabelFloatControl> {
     private double initScale = 0.05;
     public final Scale promptTextScale = new Scale(1, 1, 0, 0);
     private final Scale scale = new Scale(initScale, 1);
-    private final Rectangle clip = new Rectangle();
+    public final Rectangle clip = new Rectangle();
 
     public ObjectProperty<Paint> animatedPromptTextFill;
     public BooleanBinding usePromptText;

File: jfoenix/src/main/java/com/jfoenix/transitions/JFXAnimationTimer.java
Patch:
@@ -189,7 +189,7 @@ static class AnimationHandler {
         private HashMap<WritableValue<?>, Object> initialValuesMap = new HashMap<>();
         private HashMap<WritableValue<?>, Object> endValuesMap = new HashMap<>();
 
-        public AnimationHandler(Duration duration, Set<JFXKeyValue<?>> keyValues) {
+        AnimationHandler(Duration duration, Set<JFXKeyValue<?>> keyValues) {
             this.duration = duration.toMillis();
             currentDuration = this.duration;
             this.keyValues = keyValues;
@@ -210,7 +210,7 @@ public void init() {
             }
         }
 
-        public void reverse(double now) {
+        void reverse(double now) {
             currentDuration = duration - (currentDuration - now);
             // update initial values
             for (JFXKeyValue keyValue : keyValues) {
@@ -273,7 +273,7 @@ public void clear() {
             endValuesMap.clear();
         }
 
-        public void dispose() {
+        void dispose() {
             clear();
             keyValues.clear();
         }

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerBasicCloseTransition.java
Patch:
@@ -59,7 +59,7 @@ private static Timeline createTimeline(JFXHamburger burger) {
             .getMinY();
 
         double hypotenuse = Math.sqrt(Math.pow(burgerHeight, 2) + Math.pow(burgerWidth, 2));
-        double angle = (Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 90) * -1;
+        double angle = (Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 100) * -1;
         return new Timeline(
             new KeyFrame(
                 Duration.ZERO,

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerSlideCloseTransition.java
Patch:
@@ -89,7 +89,7 @@ private static Timeline createTimeline(JFXHamburger burger) {
             .getMinY();
 
         double hypotenuse = Math.sqrt(Math.pow(burgerHeight, 2) + Math.pow(burgerWidth, 2));
-        double angle = Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90;
+        double angle = Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 80;
 
         return new Timeline(
             new KeyFrame(

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerBasicCloseTransition.java
Patch:
@@ -59,7 +59,7 @@ private static Timeline createTimeline(JFXHamburger burger) {
             .getMinY();
 
         double hypotenuse = Math.sqrt(Math.pow(burgerHeight, 2) + Math.pow(burgerWidth, 2));
-        double angle = (Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 90) * -1;
+        double angle = (Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 100) * -1;
         return new Timeline(
             new KeyFrame(
                 Duration.ZERO,

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerSlideCloseTransition.java
Patch:
@@ -89,7 +89,7 @@ private static Timeline createTimeline(JFXHamburger burger) {
             .getMinY();
 
         double hypotenuse = Math.sqrt(Math.pow(burgerHeight, 2) + Math.pow(burgerWidth, 2));
-        double angle = Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90;
+        double angle = Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 80;
 
         return new Timeline(
             new KeyFrame(

File: jfoenix/src/main/java/com/jfoenix/skins/JFXPopupSkin.java
Patch:
@@ -54,7 +54,9 @@ public class JFXPopupSkin implements Skin<JFXPopup> {
 
     public JFXPopupSkin(JFXPopup control) {
         this.control = control;
-        scale = new Scale(1, 0, 0, 0);
+        // set scale y to 0.01 instead of 0 to allow layout of the content,
+        // otherwise it will cause exception in traverse engine, when focusing the 1st node
+        scale = new Scale(1, 0.01, 0, 0);
         popupContent = control.getPopupContent();
         container.getStyleClass().add("jfx-popup-container");
         container.setBackground(new Background(new BackgroundFill(Color.WHITE, CornerRadii.EMPTY, Insets.EMPTY)));

File: jfoenix/src/main/java/com/jfoenix/transitions/CachedTransition.java
Patch:
@@ -57,11 +57,11 @@ public CachedTransition(final Node node, final Timeline timeline) {
     public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {
         this.node = node;
         this.timeline.set(timeline);
-        mementos = new CacheMemento[(node == null ? 1 : 0) + cacheMomentos.length];
+        mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];
         if (node != null) {
             mementos[0] = new CacheMemento(node);
         }
-        System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, mementos.length);
+        System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);
         statusProperty().addListener(observable -> {
             switch (getStatus()) {
                 case RUNNING:

File: jfoenix/src/main/java/com/jfoenix/skins/JFXPopupSkin.java
Patch:
@@ -23,7 +23,7 @@
 import com.jfoenix.controls.JFXPopup.PopupHPosition;
 import com.jfoenix.controls.JFXPopup.PopupVPosition;
 import com.jfoenix.effects.JFXDepthManager;
-import com.jfoenix.transitions.CacheMomento;
+import com.jfoenix.transitions.CacheMemento;
 import com.jfoenix.transitions.CachedTransition;
 import javafx.animation.*;
 import javafx.animation.Animation.Status;
@@ -122,7 +122,7 @@ private final class PopupTransition extends CachedTransition {
                         new KeyValue(scale.yProperty(), 1, Interpolator.EASE_BOTH)
                     )
                 )
-                , new CacheMomento(popupContent));
+                , new CacheMemento(popupContent));
             setCycleDuration(Duration.seconds(.4));
             setDelay(Duration.seconds(0));
         }

File: jfoenix/src/main/java/com/jfoenix/skins/PromptLinesWrapper.java
Patch:
@@ -249,7 +249,7 @@ private void updateLabelFloat(boolean animation) {
     private Object validateComboBox(Object text) {
         if (control instanceof ComboBox && ((ComboBox) control).isEditable()) {
             final String editorText = ((ComboBox<?>) control).getEditor().getText();
-            text = editorText.isEmpty() ? null : text;
+            text = editorText == null || editorText.isEmpty() ? null : text;
         }
         return text;
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -556,6 +556,7 @@ private Ripple(double centerX, double centerY) {
 
         public void clear() {
             getChildren().clear();
+            rippler.overlayRect = null;
             generating.set(false);
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeCell.java
Patch:
@@ -103,6 +103,7 @@ protected void layoutChildren() {
             getChildren().add(0, selectedPane);
         }
         cellRippler.resizeRelocate(0, 0, getWidth(), getHeight());
+        cellRippler.releaseRipple();
         selectedPane.resizeRelocate(0, 0, selectedPane.prefWidth(-1), getHeight());
         selectedPane.setVisible(isSelected() ? true : false);
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeTableColumn.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.jfoenix.controls.cells.editors.base.JFXTreeTableCell;
 import com.jfoenix.controls.datamodels.treetable.RecursiveTreeObject;
-import javafx.application.Platform;
 import javafx.beans.property.ReadOnlyObjectWrapper;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.Node;

File: demo/src/main/java/demos/gui/uicomponents/IconsController.java
Patch:
@@ -67,7 +67,7 @@ public void init() {
                 snackbar.fireEvent(new SnackbarEvent("Toast Message " + count));
             } else {
                 if (count % 4 == 0) {
-                    snackbar.fireEvent(new SnackbarEvent("Snackbar Message Persistant " + count,
+                    snackbar.fireEvent(new SnackbarEvent("Snackbar Message Persistent " + count,
                                                          "CLOSE",
                                                          3000,
                                                          true,

File: jfoenix/src/main/java/com/jfoenix/validation/ValidationFacade.java
Patch:
@@ -44,6 +44,7 @@
 import javafx.scene.layout.VBox;
 import javafx.util.Duration;
 
+@Deprecated
 public class ValidationFacade extends VBox {
 
     /**

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -138,7 +138,7 @@ private void createPromptNode() {
         promptText.setTranslateX(1);
         promptText.getTransforms().add(linesWrapper.promptTextScale);
         linesWrapper.promptContainer.getChildren().add(promptText);
-        if (getSkinnable().isFocused()) {
+        if (getSkinnable().isFocused() && ((JFXTextArea) getSkinnable()).isLabelFloat()) {
             promptText.setTranslateY(-Math.floor(scrollPane.getHeight()));
             linesWrapper.promptTextScale.setX(0.85);
             linesWrapper.promptTextScale.setY(0.85);

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -163,7 +163,7 @@ private void createPromptNode() {
         promptText.setLayoutX(1);
         promptText.getTransforms().add(linesWrapper.promptTextScale);
         linesWrapper.promptContainer.getChildren().add(promptText);
-        if (getSkinnable().isFocused()) {
+        if (getSkinnable().isFocused() && ((IFXLabelFloatControl) getSkinnable()).isLabelFloat()) {
             promptText.setTranslateY(-Math.floor(textPane.getHeight()));
             linesWrapper.promptTextScale.setX(0.85);
             linesWrapper.promptTextScale.setY(0.85);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeTableView.java
Patch:
@@ -335,7 +335,7 @@ private void buildGroupedRoot(Map<?,?> groupedItems, RecursiveTreeItem parent, i
             parent.originalItems.add(node);
             parent.getChildren().add(node);
 
-            Object children = groupedItems.get(entry.getValue());
+            Object children = groupedItems.get(entry.getKey());
             if (children instanceof List) {
                 node.originalItems.addAll((List) children);
                 node.getChildren().addAll((List) children);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -173,7 +173,7 @@ private void createPromptNode() {
         promptText.setTranslateX(1);
         linesWrapper.promptContainer.getChildren().add(promptText);
 
-        if (getSkinnable().isFocused()) {
+        if (getSkinnable().isFocused() && ((JFXComboBox<T>) getSkinnable()).isLabelFloat()) {
             promptText.setTranslateY(-snapPosition(promptText.getBaselineOffset() + promptText.getLayoutBounds().getHeight() * .36));
             linesWrapper.promptTextScale.setX(0.85);
             linesWrapper.promptTextScale.setY(0.85);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -130,7 +130,7 @@ private void createPromptNode() {
         promptText.setTranslateX(1);
         promptText.getTransforms().add(linesWrapper.promptTextScale);
         linesWrapper.promptContainer.getChildren().add(promptText);
-        if (getSkinnable().isFocused()) {
+        if (getSkinnable().isFocused() && ((JFXTextArea) getSkinnable()).isLabelFloat()) {
             promptText.setTranslateY(-Math.floor(scrollPane.getHeight()));
             linesWrapper.promptTextScale.setX(0.85);
             linesWrapper.promptTextScale.setY(0.85);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -154,7 +154,7 @@ private void createPromptNode() {
         promptText.setLayoutX(1);
         promptText.getTransforms().add(linesWrapper.promptTextScale);
         linesWrapper.promptContainer.getChildren().add(promptText);
-        if (getSkinnable().isFocused()) {
+        if (getSkinnable().isFocused() && ((IFXLabelFloatControl) getSkinnable()).isLabelFloat()) {
             promptText.setTranslateY(-Math.floor(textPane.getHeight()));
             linesWrapper.promptTextScale.setX(0.85);
             linesWrapper.promptTextScale.setY(0.85);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawer.java
Patch:
@@ -160,13 +160,13 @@ public double doubleValue() {
             JFXKeyValue.builder()
                 .setTargetSupplier(() -> prefSizeProperty)
                 .setEndValueSupplier(() -> tempDrawerSize)
-                .setAnimateCondition(() -> !hasMiniSize() && translateTo == 0 && tempDrawerSize > getDefaultDrawerSize())
+                .setAnimateCondition(() -> translateTo == 0 && tempDrawerSize > getDefaultDrawerSize() && !hasMiniSize())
                 .setInterpolator(Interpolator.EASE_BOTH).build()),
         new JFXKeyFrame(Duration.millis(420),
             JFXKeyValue.builder()
                 .setTargetSupplier(() -> maxSizeProperty)
                 .setEndValueSupplier(() -> tempDrawerSize)
-                .setAnimateCondition(() -> !hasMiniSize() && translateTo == 0 && tempDrawerSize > getDefaultDrawerSize())
+                .setAnimateCondition(() -> translateTo == 0 && tempDrawerSize > getDefaultDrawerSize() && !hasMiniSize())
                 .setInterpolator(Interpolator.EASE_BOTH).build()),
         new JFXKeyFrame(Duration.millis(420),
             JFXKeyValue.builder()
@@ -309,7 +309,7 @@ private void initListeners() {
                 }
 
                 if (size + direction.doubleValue() * eventPoint < activeOffset
-                    && (content.getCursor() == Cursor.DEFAULT || content.getCursor() == null)
+                    && (content.getCursor() == null || content.getCursor() == Cursor.DEFAULT)
                     && valid == 0
                     && !isOpened()) {
                     holdTimer.play();

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/DoubleTextFieldEditorBuilder.java
Patch:
@@ -67,7 +67,7 @@ public void updateItem(Double item, boolean empty) {
 
     @Override
     public Region createNode(Double value, EventHandler<KeyEvent> keyEventsHandler, ChangeListener<Boolean> focusChangeListener) {
-        textField = new JFXTextField(value + "");
+        textField = new JFXTextField(String.valueOf(value));
         textField.setOnKeyPressed(keyEventsHandler);
         textField.focusedProperty().addListener(focusChangeListener);
         DoubleValidator validator = new DoubleValidator();
@@ -78,12 +78,12 @@ public Region createNode(Double value, EventHandler<KeyEvent> keyEventsHandler,
 
     @Override
     public void setValue(Double value) {
-        textField.setText(value + "");
+        textField.setText(String.valueOf(value));
     }
 
     @Override
     public Double getValue() {
-        return Double.parseDouble(textField.getText());
+        return Double.valueOf(textField.getText());
     }
 
     @Override

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/IntegerTextFieldEditorBuilder.java
Patch:
@@ -65,7 +65,7 @@ public void updateItem(Integer item, boolean empty) {
 
     @Override
     public Region createNode(Integer value, EventHandler<KeyEvent> keyEventsHandler, ChangeListener<Boolean> focusChangeListener) {
-        textField = new JFXTextField(value + "");
+        textField = new JFXTextField(String.valueOf(value));
         textField.setOnKeyPressed(keyEventsHandler);
         textField.focusedProperty().addListener(focusChangeListener);
         IntegerValidator validator = new IntegerValidator();
@@ -76,12 +76,12 @@ public Region createNode(Integer value, EventHandler<KeyEvent> keyEventsHandler,
 
     @Override
     public void setValue(Integer value) {
-        textField.setText(value + "");
+        textField.setText(String.valueOf(value));
     }
 
     @Override
     public Integer getValue() {
-        return Integer.parseInt(textField.getText());
+        return Integer.valueOf(textField.getText());
     }
 
     @Override

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/GenericEditableTreeTableCell.java
Patch:
@@ -210,7 +210,7 @@ private void createEditorNode() {
             //listener runs and therefore the text field has been cleaned up. If the
             //text field is null we don't commit the edit. This has the useful side effect
             //of stopping the double commit.
-            if (!newValue && editorNode != null) {
+            if (editorNode != null && !newValue) {
                 commitHelper(true);
             }
         };

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -299,11 +299,11 @@ private void createFillTransition() {
         select = new JFXFillTransition(Duration.millis(120),
             box,
             Color.TRANSPARENT,
-            (Color) ((JFXCheckBox) getSkinnable()).getCheckedColor());
+            (Color) getSkinnable().getCheckedColor());
         select.setInterpolator(Interpolator.EASE_OUT);
     }
 
-    private final class CheckBoxTransition extends CachedTransition {
+    private final static class CheckBoxTransition extends CachedTransition {
         CheckBoxTransition(Node mark) {
             super(mark, new Timeline(
                     new KeyFrame(

File: jfoenix/src/main/java/com/jfoenix/skins/JFXSliderSkin.java
Patch:
@@ -114,7 +114,7 @@ private void refreshSliderValueBinding() {
                 if (getSkinnable().getLabelFormatter() != null) {
                     return getSkinnable().getLabelFormatter().toString(getSkinnable().getValue());
                 } else {
-                    return Math.round(getSkinnable().getValue()) + "";
+                    return String.valueOf(Math.round(getSkinnable().getValue()));
                 }
             }, getSkinnable().valueProperty()));
         }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTimePickerContent.java
Patch:
@@ -207,7 +207,7 @@ protected BorderPane createContentPane(LocalTime time, boolean _24HourView) {
     protected StackPane createHeaderPane(LocalTime time, boolean _24HourView) {
         int hour = time.getHour();
 
-        selectedHourLabel.setText((hour % (_24HourView ? 24 : 12) == 0 ? (_24HourView ? 0 : 12) : hour % (_24HourView ? 24 : 12)) + "");
+        selectedHourLabel.setText(String.valueOf(hour % (_24HourView ? 24 : 12) == 0 ? (_24HourView ? 0 : 12) : hour % (_24HourView ? 24 : 12)));
         selectedHourLabel.getStyleClass().add(SPINNER_LABEL);
         selectedHourLabel.setTextFill(Color.WHITE);
         selectedHourLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 42));
@@ -216,7 +216,7 @@ protected StackPane createHeaderPane(LocalTime time, boolean _24HourView) {
         selectedHourLabel.setAlignment(Pos.CENTER_RIGHT);
         timeLabel.set(selectedHourLabel);
 
-        selectedMinLabel.setText(unitConverter.toString(time.getMinute()) + "");
+        selectedMinLabel.setText(String.valueOf(unitConverter.toString(time.getMinute())));
         selectedMinLabel.getStyleClass().add(SPINNER_LABEL);
         selectedMinLabel.setTextFill(fadedColor);
         selectedMinLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 42));
@@ -449,7 +449,7 @@ private StackPane createMinutesContent(LocalTime time) {
         for (int i = 0; i < 12; i++) {
             StackPane labelContainer = new StackPane();
             int val = ((i + 3) * 5) % 60;
-            Label label = new Label(unitConverter.toString(val) + "");
+            Label label = new Label(String.valueOf(unitConverter.toString(val)));
             label.setFont(Font.font(ROBOTO, FontWeight.BOLD, 12));
             // init label color
             label.setTextFill(val == time.getMinute() ?

File: jfoenix/src/main/java/com/jfoenix/transitions/JFXAnimationTimer.java
Patch:
@@ -176,7 +176,7 @@ public void dispose() {
         animationHandlers.clear();
     }
 
-    class AnimationHandler {
+    static class AnimationHandler {
         private double duration;
         private double currentDuration;
         private Set<JFXKeyValue<?>> keyValues;

File: jfoenix/src/main/java/com/jfoenix/utils/JFXHighlighter.java
Patch:
@@ -92,7 +92,7 @@ public synchronized void highlight(Parent pane, String query) {
         for (Node node : nodes) {
             Text text = ((Text) node);
             final int beginIndex = text.getText().toLowerCase().indexOf(query.toLowerCase());
-            if (node.isVisible() && beginIndex > -1) {
+            if (beginIndex > -1 && node.isVisible()) {
                 ArrayList<Bounds> boundingBoxes = getMatchingBounds(query, text);
                 ArrayList<Rectangle> rectangles = new ArrayList<>();
                 for (Bounds boundingBox : boundingBoxes) {

File: jfoenix/src/main/java/com/jfoenix/validation/NumberValidator.java
Patch:
@@ -67,9 +67,7 @@ public Number fromString(String string) {
         }
     };
 
-    public NumberValidator() {
-
-    }
+    public NumberValidator() { }
 
     public NumberValidator(String message) {
         super(message);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -613,7 +613,7 @@ public StringProperty titleProperty() {
      * If you want the {@code primaryStage}'s title and the {@code JFXDecorator}'s title to be different, then
      * go ahead and use this method.
      * <p>
-     * By default, this title property is bound to the {@code primaryStage}'s title property—so merely setting the
+     * By default, this title property is bound to the {@code primaryStage}'s title property-so merely setting the
      * {@code primaryStage}'s title, will set the {@code JFXDecorator}'s title.
      *
      */

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -503,7 +503,8 @@ private void unFocus() {
         focusedLine.setOpacity(0);
         if (((IFXTextInputControl) getSkinnable()).isLabelFloat()) {
             animatedPromptTextFill.set(promptTextFill.get());
-            if (getSkinnable().getText().isEmpty()) {
+            final String text = getSkinnable().getText();
+            if (text == null || text.isEmpty()) {
                 animating = true;
                 runTimer(unfocusTimer, true);
             }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -496,7 +496,8 @@ private void unFocus() {
         focusedLine.setOpacity(0);
         if (((IFXTextInputControl) getSkinnable()).isLabelFloat()) {
             animatedPromptTextFill.set(promptTextFill.get());
-            if (getSkinnable().getText().isEmpty()) {
+            final String text = getSkinnable().getText();
+            if (text == null || text.isEmpty()) {
                 animating = true;
                 runTimer(unfocusTimer, true);
             }

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -371,7 +371,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
     private void updateTextPos(){
         double textWidth = textNode.getLayoutBounds().getWidth();
-        final double promptWidth = promptText.getLayoutBounds().getWidth();
+        final double promptWidth = promptText == null ? 0 : promptText.getLayoutBounds().getWidth();
         switch (getHAlignment()){
             case CENTER:
                 promptTextScale.setPivotX(promptWidth / 2);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -364,7 +364,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
     private void updateTextPos(){
         double textWidth = textNode.getLayoutBounds().getWidth();
-        final double promptWidth = promptText.getLayoutBounds().getWidth();
+        final double promptWidth = promptText == null ? 0 : promptText.getLayoutBounds().getWidth();
         switch (getHAlignment()){
             case CENTER:
                 promptTextScale.setPivotX(promptWidth / 2);

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -383,8 +383,10 @@ private void updateTextPos(){
                 break;
             case LEFT:
                 promptTextScale.setPivotX(0);
+                break;
             case RIGHT:
                 promptTextScale.setPivotX(promptWidth);
+                break;
         }
 
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -376,8 +376,10 @@ private void updateTextPos(){
                 break;
             case LEFT:
                 promptTextScale.setPivotX(0);
+                break;
             case RIGHT:
                 promptTextScale.setPivotX(promptWidth);
+                break;
         }
 
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXToggleButtonSkin.java
Patch:
@@ -59,6 +59,7 @@ public JFXToggleButtonSkin(JFXToggleButton toggleButton) {
         double circleRadius = toggleButton.getSize();
 
         line = new Line();
+        line.setStroke(getSkinnable().isSelected() ? toggleButton.getToggleLineColor() : toggleButton.getUnToggleLineColor());
         line.setStartX(0);
         line.setStartY(0);
         line.setEndX(circleRadius * 2 + 2);
@@ -68,6 +69,7 @@ public JFXToggleButtonSkin(JFXToggleButton toggleButton) {
         line.setSmooth(true);
 
         circle = new Circle();
+        circle.setFill(getSkinnable().isSelected() ? toggleButton.getToggleColor() : toggleButton.getUnToggleColor());
         circle.setCenterX(-circleRadius);
         circle.setCenterY(0);
         circle.setRadius(circleRadius);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -209,7 +209,9 @@ protected void makeChildrenTransparent() {
         for (Node child : getChildren()) {
             if (child instanceof Label) {
                 Set<Node> texts = child.lookupAll("Text");
-                texts.forEach(text -> text.setMouseTransparent(true));
+                for (Node text : texts) {
+                    text.setMouseTransparent(true);
+                }
             } else if (child instanceof Shape) {
                 child.setMouseTransparent(true);
             }

File: jfoenix/src/main/java/com/jfoenix/controls/RecursiveTreeItem.java
Patch:
@@ -185,13 +185,13 @@ private void addChildrenListener(RecursiveTreeObject<T> value) {
             while (change.next()) {
                 if (change.wasRemoved()) {
                     List<TreeItem<T>> removedItems = new ArrayList<>();
-                    change.getRemoved().forEach(t -> {
+                    for (T t : change.getRemoved()) {
                         final TreeItem<T> treeItem = itemsMap.remove(t);
                         if (treeItem != null) {
                             // remove the items from the current/original items list
                             removedItems.add(treeItem);
                         }
-                    });
+                    }
                     if (originalItems.size() == removedItems.size()) {
                         originalItems.clear();
                         getChildren().clear();

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPasswordField.java
Patch:
@@ -124,9 +124,8 @@ public void setValidators(ValidatorBase... validators) {
     @Override
     public boolean validate() {
         for (ValidatorBase validator : validators) {
-            if (validator.getSrcControl() == null) {
-                validator.setSrcControl(this);
-            }
+            // source control must be set to allow validators re-usability
+            validator.setSrcControl(this);
             validator.validate();
             if (validator.getHasErrors()) {
                 activeValidator.set(validator);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextArea.java
Patch:
@@ -126,9 +126,8 @@ public void setValidators(ValidatorBase... validators) {
      */
     public boolean validate() {
         for (ValidatorBase validator : validators) {
-            if (validator.getSrcControl() == null) {
-                validator.setSrcControl(this);
-            }
+            // source control must be set to allow validators re-usability
+            validator.setSrcControl(this);
             validator.validate();
             if (validator.getHasErrors()) {
                 activeValidator.set(validator);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextField.java
Patch:
@@ -131,9 +131,8 @@ public void setValidators(ValidatorBase... validators) {
     @Override
     public boolean validate() {
         for (ValidatorBase validator : validators) {
-            if (validator.getSrcControl() == null) {
-                validator.setSrcControl(this);
-            }
+            // source control must be set to allow validators re-usability
+            validator.setSrcControl(this);
             validator.validate();
             if (validator.getHasErrors()) {
                 activeValidator.set(validator);

File: jfoenix/src/main/java/com/jfoenix/validation/ValidationFacade.java
Patch:
@@ -206,9 +206,7 @@ public void setValidators(ValidatorBase... validators) {
     public static boolean validate(Control control) {
         ValidationFacade facade = (ValidationFacade) control.getParent();
         for (ValidatorBase validator : facade.validators) {
-            if (validator.getSrcControl() == null) {
-                validator.setSrcControl(facade.controlProperty.get());
-            }
+            validator.setSrcControl(facade.controlProperty.get());
             validator.validate();
             if (validator.getHasErrors()) {
                 facade.activeValidator.set(validator);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDatePicker.java
Patch:
@@ -72,7 +72,7 @@ private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
         try {
             editorProperty();
-            Field editorField = getClass().getSuperclass().getDeclaredField("editor");
+            Field editorField = DatePicker.class.getDeclaredField("editor");
             editorField.setAccessible(true);
             ReadOnlyObjectWrapper<TextField> editor = (ReadOnlyObjectWrapper<TextField>) editorField.get(this);
             final FakeFocusJFXTextField editorNode = new FakeFocusJFXTextField();

File: jfoenix/src/main/java/com/jfoenix/utils/JFXHighlighter.java
Patch:
@@ -82,7 +82,7 @@ public synchronized void highlight(Parent pane, String query) {
         if (this.parent != null && !boxes.isEmpty()) {
             clear();
         }
-        if(query.isEmpty()) return;
+        if(query == null || query.isEmpty()) return;
 
         this.parent = pane;
 

File: jfoenix/src/main/java/com/jfoenix/transitions/JFXAnimationTimer.java
Patch:
@@ -235,7 +235,8 @@ public void animate(double now) {
                     for (JFXKeyValue keyValue : keyValues) {
                         if (keyValue.isValid()) {
                             final WritableValue target = keyValue.getTarget();
-                            final Object endValue = endValuesMap.get(target);
+                            // set updated end value instead of cached
+                            final Object endValue = keyValue.getEndValue();
                             if (target != null && endValue != null) {
                                 target.setValue(endValue);
                             }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXSpinnerSkin.java
Patch:
@@ -258,6 +258,7 @@ protected void updateProgress() {
     }
 
     private void createTransition() {
+        if(!getSkinnable().isIndeterminate()) return;
         final Paint initialColor = arc.getStroke();
         if (initialColor == null) {
             arc.setStroke(blueColor);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawer.java
Patch:
@@ -396,7 +396,7 @@ private double computePaddingSize() {
         } else if (translateTo == initTranslate.get()) {
             return 0;
         } else {
-            return defaultSizeProperty.get() + getDirection().doubleValue() * translateTo;
+            return getDefaultDrawerSize() + getDirection().doubleValue() * translateTo;
         }
     }
 
@@ -1020,7 +1020,7 @@ private void partialClose() {
     private void partialOpen() {
         initValues.forEach((writableValue, valueWrapper) -> currentValue.put(writableValue, valueWrapper.getOpenValueSupplier()));
         translateTo = 0;
-        resizeTo = getDefaultDrawerSize();
+        resizeTo = tempDrawerSize = getDefaultDrawerSize();
         overlayPane.setMouseTransparent(!isOverLayVisible());
         translateTimer.setOnFinished(() -> fireEvent(new JFXDrawerEvent(JFXDrawerEvent.OPENED)));
         translateTimer.start();

File: jfoenix/src/main/java/com/jfoenix/skins/JFXAutoCompletePopupSkin.java
Patch:
@@ -53,7 +53,8 @@ public class JFXAutoCompletePopupSkin<T> implements Skin<JFXAutoCompletePopup<T>
     public JFXAutoCompletePopupSkin(JFXAutoCompletePopup<T> control) {
         this.control = control;
         suggestionList = new ListView<T>(control.getFilteredSuggestions());
-        suggestionList.fixedCellSizeProperty().bind(control.fixedCellSizeProperty());
+        suggestionList.setFixedCellSize(control.getFixedCellSize());
+        control.fixedCellSizeProperty().addListener(observable -> suggestionList.setFixedCellSize(control.getFixedCellSize()));
         suggestionList.getItems().addListener((InvalidationListener) observable -> updateListHeight());
         suggestionList.getStyleClass().add("autocomplete-list");
         control.suggestionsCellFactoryProperty().addListener((o, oldVal, newVal) -> {
@@ -141,8 +142,7 @@ public void animate() {
 
     private void updateListHeight() {
         final double height = Math.min(suggestionList.getItems().size(), getSkinnable().getCellLimit()) * suggestionList.getFixedCellSize();
-        suggestionList.setPrefHeight(height);
-        suggestionList.setMaxHeight(height);
+        suggestionList.setPrefHeight(height + suggestionList.getFixedCellSize() / 2);
     }
 
     private void selectItem() {

File: jfoenix/src/main/java/com/jfoenix/controls/JFXButton.java
Patch:
@@ -22,7 +22,6 @@
 import com.jfoenix.converters.ButtonTypeConverter;
 import com.jfoenix.skins.JFXButtonSkin;
 import com.sun.javafx.css.converters.BooleanConverter;
-import javafx.beans.NamedArg;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.css.*;
@@ -66,15 +65,15 @@ public JFXButton() {
     /**
      * {@inheritDoc}
      */
-    public JFXButton(@NamedArg("text") String text) {
+    public JFXButton(String text) {
         super(text);
         initialize();
     }
 
     /**
      * {@inheritDoc}
      */
-    public JFXButton(@NamedArg("text") String text, @NamedArg("graphic") Node graphic) {
+    public JFXButton(String text, Node graphic) {
         super(text, graphic);
         initialize();
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -35,6 +35,7 @@
 import javafx.stage.Screen;
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
+import javafx.stage.WindowEvent;
 import javafx.util.Duration;
 
 import java.util.ArrayList;
@@ -65,7 +66,8 @@ public class JFXDecorator extends VBox {
     private StackPane contentPlaceHolder = new StackPane();
     private HBox buttonsContainer;
 
-    private ObjectProperty<Runnable> onCloseButtonAction = new SimpleObjectProperty<>(() -> primaryStage.close());
+    private ObjectProperty<Runnable> onCloseButtonAction = new SimpleObjectProperty<>(() ->
+        primaryStage.fireEvent(new WindowEvent(primaryStage, WindowEvent.WINDOW_CLOSE_REQUEST)));
 
     private BooleanProperty customMaximize = new SimpleBooleanProperty(false);
     private boolean maximized = false;

File: jfoenix/src/main/java/com/jfoenix/skins/JFXToggleNodeSkin.java
Patch:
@@ -51,7 +51,8 @@ public JFXToggleNodeSkin(JFXToggleNode toggleNode) {
         super(toggleNode);
 
         selectionOverLay = new StackPane();
-        selectionOverLay.getChildren().add(getSkinnable().getGraphic());
+        final Node graphic = getSkinnable().getGraphic();
+        if(graphic!=null) selectionOverLay.getChildren().add(graphic);
         selectionOverLay.shapeProperty().bind(getSkinnable().shapeProperty());
         selectionOverLay.setPickOnBounds(false);
 

File: jfoenix/src/main/java/com/jfoenix/utils/JFXHighlighter.java
Patch:
@@ -186,7 +186,7 @@ public synchronized void clear() {
         List<Rectangle> allBoxes = new ArrayList<>();
         boxes.values().forEach(allBoxes::addAll);
         boxes.clear();
-        JFXUtilities.runInFX(()-> pane.getChildren().removeAll(allBoxes));
+        if(pane!=null) JFXUtilities.runInFX(()-> pane.getChildren().removeAll(allBoxes));
     }
 
     public Paint getPaint() {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXSpinnerSkin.java
Patch:
@@ -297,6 +297,7 @@ private void createTransition() {
             endingFrame);
         timeline.setCycleCount(Timeline.INDEFINITE);
         timeline.setDelay(Duration.ZERO);
+        timeline.playFromStart();
     }
 
     private void clearAnimation() {

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/GenericEditableTreeTableCell.java
Patch:
@@ -112,6 +112,9 @@ public void startEdit() {
             super.startEdit();
             if (editorNode == null) {
                 createEditorNode();
+            }else{
+                // set current value if the editor is already created
+                builder.setValue(getValue());
             }
             builder.startEdit();
             setGraphic(editorNode);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -487,6 +487,7 @@ private Ripple(double centerX, double centerY) {
                 setCacheHint(CacheHint.SPEED);
                 setCacheShape(true);
                 setManaged(false);
+                setSmooth(true);
 
                 KeyValue[] inKeyValues = new KeyValue[isRipplerRecenter() ? 4 : 2];
                 outKeyValues = new KeyValue[isRipplerRecenter() ? 5 : 3];

File: jfoenix/src/main/java/com/jfoenix/skins/JFXRadioButtonSkin.java
Patch:
@@ -65,13 +65,15 @@ public JFXRadioButtonSkin(JFXRadioButton control) {
         radio.getStyleClass().setAll("radio");
         radio.setStrokeWidth(2);
         radio.setFill(Color.TRANSPARENT);
+        radio.setSmooth(true);
 
         dot = new Circle();
         dot.getStyleClass().setAll("dot");
         dot.setRadius(radioRadius);
         dot.fillProperty().bind(control.selectedColorProperty());
         dot.setScaleX(0);
         dot.setScaleY(0);
+        dot.setSmooth(true);
 
         StackPane boxContainer = new StackPane();
         boxContainer.getChildren().addAll(radio, dot);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawer.java
Patch:
@@ -239,7 +239,7 @@ private void initListeners() {
         // add listeners to update drawer properties
         overLayVisibleProperty().addListener(observable -> {
             final boolean overLayVisible = isOverLayVisible();
-            overlayPane.setManaged(overLayVisible);
+            overlayPane.setStyle(!overLayVisible ? "-fx-background-color : transparent;" : "");
             overlayPane.setPickOnBounds(overLayVisible);
         });
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTabPaneSkin.java
Patch:
@@ -641,7 +641,8 @@ private boolean isTabsFitHeaderWidth() {
         }
 
         private void runTimeline(double newTransX, double newWidth) {
-            if(selectedTabLine.getTranslateX() == newTransX) return;
+            if(selectedTabLine.getTranslateX() == newTransX
+                && scale.getX() == newWidth) return;
 
             double tempScaleX = 0;
             double tempWidth = 0;

File: jfoenix/src/main/java/com/jfoenix/responsive/JFXResponsiveHandler.java
Patch:
@@ -61,7 +61,7 @@ public class JFXResponsiveHandler {
      * @param pseudoClass css class for certain device
      */
     public JFXResponsiveHandler(Stage stage, PseudoClass pseudoClass) {
-        scanAllNodes(stage.getScene().getRoot(), PSEUDO_CLASS_LARGE);
+        scanAllNodes(stage.getScene().getRoot(), pseudoClass);
     }
 
     /**

File: jfoenix/src/main/java/com/jfoenix/controls/JFXScrollPane.java
Patch:
@@ -232,8 +232,8 @@ private static void customScrolling(ScrollPane scrollPane, DoubleProperty scroll
         final double[] derivatives = new double[frictions.length];
 
         Timeline timeline = new Timeline();
-        scrollPane.getContent().addEventHandler(MouseEvent.DRAG_DETECTED, event -> timeline.stop());
-        scrollPane.getContent().addEventHandler(ScrollEvent.ANY, event -> {
+        scrollPane.addEventFilter(MouseEvent.DRAG_DETECTED, event -> timeline.stop());
+        scrollPane.addEventFilter(ScrollEvent.ANY, event -> {
             if (event.getEventType() == ScrollEvent.SCROLL) {
                 int direction = event.getDeltaY() > 0 ? -1 : 1;
                 for (int i = 0; i < pushes.length; i++) {

File: jfoenix/src/main/java/com/jfoenix/effects/JFXDepthManager.java
Patch:
@@ -96,6 +96,7 @@ protected double computePrefHeight(double width) {
             }
         };
         container.getStyleClass().add("depth-container");
+        container.setPickOnBounds(false);
         level = level < 0 ? 0 : level;
         level = level > 5 ? 5 : level;
         container.setEffect(new DropShadow(BlurType.GAUSSIAN,

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTabPaneSkin.java
Patch:
@@ -49,6 +49,7 @@
 import javafx.scene.control.*;
 import javafx.scene.input.ContextMenuEvent;
 import javafx.scene.input.MouseButton;
+import javafx.scene.input.MouseEvent;
 import javafx.scene.input.ScrollEvent;
 import javafx.scene.layout.*;
 import javafx.scene.paint.Color;
@@ -131,7 +132,8 @@ public JFXTabPaneSkin(TabPane tabPane) {
                                       - dragStart);
             me.consume();
         });
-        getSkinnable().setOnMousePressed(me -> {
+
+        getSkinnable().addEventHandler(MouseEvent.MOUSE_PRESSED, me -> {
             dragStart = (isHorizontal() ? me.getSceneX() : me .getSceneY());
             offsetStart = header.scrollOffset;
         });

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -325,7 +325,8 @@ protected void handleControlPropertyChanged(String propertyReference) {
                 }
             }
             // update prompt text position
-            if(isLabelFloat) animateFloatingLabel(!getSkinnable().getText().isEmpty());
+            if(isLabelFloat && getSkinnable().getText() != null)
+                animateFloatingLabel(!getSkinnable().getText().isEmpty());
         } else if ("DISABLE_ANIMATION".equals(propertyReference)) {
             // remove error clip if animation is disabled
             errorContainer.setClip(((JFXTextArea) getSkinnable()).isDisableAnimation() ?

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -326,7 +326,8 @@ protected void handleControlPropertyChanged(String propertyReference) {
                 }
             }
             // update prompt text position
-            if(isLabelFloat) animateFloatingLabel(!getSkinnable().getText().isEmpty());
+            if(isLabelFloat && getSkinnable().getText() != null)
+                animateFloatingLabel(!getSkinnable().getText().isEmpty());
         }else if ("DISABLE_ANIMATION".equals(propertyReference)) {
             // remove error clip if animation is disabled
             errorContainer.setClip(((IFXTextInputControl) getSkinnable()).isDisableAnimation() ?

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -319,7 +319,8 @@ protected void handleControlPropertyChanged(String propertyReference) {
                 }
             }
             // update prompt text position
-            if(isLabelFloat) animateFloatingLabel(!getSkinnable().getText().isEmpty());
+            if(isLabelFloat && getSkinnable().getText() != null)
+                animateFloatingLabel(!getSkinnable().getText().isEmpty());
         } else if ("DISABLE_ANIMATION".equals(propertyReference)) {
             // remove error clip if animation is disabled
             errorContainer.setClip(((JFXTextArea) getSkinnable()).isDisableAnimation() ?

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -319,7 +319,8 @@ protected void handleControlPropertyChanged(String propertyReference) {
                 }
             }
             // update prompt text position
-            if(isLabelFloat) animateFloatingLabel(!getSkinnable().getText().isEmpty());
+            if(isLabelFloat && getSkinnable().getText() != null)
+                animateFloatingLabel(!getSkinnable().getText().isEmpty());
         }else if ("DISABLE_ANIMATION".equals(propertyReference)) {
             // remove error clip if animation is disabled
             errorContainer.setClip(((IFXTextInputControl) getSkinnable()).isDisableAnimation() ?

File: demo/src/main/java/demos/components/NodesListDemo.java
Patch:
@@ -125,6 +125,8 @@ public void start(Stage stage) {
                 return frames;
             }
         );
+
+        JFXNodesList.alignNodeToChild(container, button2);
         container.getChildren().get(0).setOpacity(0);
         container.setScaleX(1);
         container.setScaleY(1);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -75,7 +75,7 @@ protected Node getMask() {
         @Override
         protected void initControlListeners() {
             control.layoutBoundsProperty().addListener(observable -> resetRippler());
-            control.addEventFilter(MouseEvent.MOUSE_PRESSED,
+            control.addEventHandler(MouseEvent.MOUSE_PRESSED,
                 (event) -> createRipple(event.getX(), event.getY()));
         }
         @Override

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeCell.java
Patch:
@@ -55,7 +55,7 @@ protected Node getMask() {
         @Override
         protected void initControlListeners() {
             control.layoutBoundsProperty().addListener(observable -> resetRippler());
-            control.addEventFilter(MouseEvent.MOUSE_PRESSED,
+            control.addEventHandler(MouseEvent.MOUSE_PRESSED,
                 (event) -> createRipple(event.getX(), event.getY()));
         }
         @Override

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTabPaneSkin.java
Patch:
@@ -100,7 +100,7 @@ public JFXTabPaneSkin(TabPane tabPane) {
         tabsContainerHolder.getChildren().add(tabsContainer);
         tabsClip = new Rectangle();
         tabsContainerHolder.setClip(tabsClip);
-        getChildren().add(tabsContainerHolder);
+        getChildren().add(0, tabsContainerHolder);
 
         // add tabs
         for (Tab tab : getSkinnable().getTabs()) {

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDialog.java
Patch:
@@ -119,8 +119,8 @@ public JFXDialog(StackPane dialogContainer, Region content, DialogTransition tra
      * @param overlayClose
      */
     public JFXDialog(StackPane dialogContainer, Region content, DialogTransition transitionType, boolean overlayClose) {
-        initialize();
         setOverlayClose(overlayClose);
+        initialize();
         setContent(content);
         setDialogContainer(dialogContainer);
         this.transitionType.set(transitionType);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDatePicker.java
Patch:
@@ -76,7 +76,6 @@ private void initialize() {
             editorField.setAccessible(true);
             ReadOnlyObjectWrapper<TextField> editor = (ReadOnlyObjectWrapper<TextField>) editorField.get(this);
             final FakeFocusJFXTextField editorNode = new FakeFocusJFXTextField();
-            editorNode.focusColorProperty().bind(this.defaultColorProperty());
             this.focusedProperty().addListener((obj, oldVal, newVal) -> {
                 if (getEditor() != null) {
                     editorNode.setFakeFocus(newVal);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTimePicker.java
Patch:
@@ -175,7 +175,6 @@ public final ReadOnlyObjectProperty<TextField> editorProperty() {
         if (editor == null) {
             editor = new ReadOnlyObjectWrapper<>(this, "editor");
             final FakeFocusJFXTextField editorNode = new FakeFocusJFXTextField();
-            editorNode.focusColorProperty().bind(this.defaultColorProperty());
             this.focusedProperty().addListener((obj, oldVal, newVal) -> {
                 if (getEditor() != null) {
                     editorNode.setFakeFocus(newVal);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -141,6 +141,8 @@ public class JFXTextFieldSkin<T extends TextField & IFXTextInputControl> extends
     public JFXTextFieldSkin(T field) {
         super(field);
 
+        textPane = (Pane) this.getChildren().get(0);
+
         // add style classes
         errorLabel.getStyleClass().add("error-label");
         line.getStyleClass().add("input-line");
@@ -338,7 +340,6 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         if (invalid) {
             invalid = false;
             animatedPromptTextFill.set(promptTextFill.get());
-            textPane = (Pane) this.getChildren().get(0);
 //            focusTimer.setCacheNodes(textPane);
 //            unfocusTimer.setCacheNodes(textPane);
             // create floating label

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDatePicker.java
Patch:
@@ -188,7 +188,7 @@ public void setDefaultColor(Paint color) {
     private static class StyleableProperties {
         private static final CssMetaData<JFXDatePicker, Paint> DEFAULT_COLOR =
             new CssMetaData<JFXDatePicker, Paint>("-jfx-default-color",
-                PaintConverter.getInstance(), Color.valueOf("#5A5A5A")) {
+                PaintConverter.getInstance(), Color.valueOf("#009688")) {
                 @Override
                 public boolean isSettable(JFXDatePicker control) {
                     return control.defaultColor == null || !control.defaultColor.isBound();

File: demo/src/main/java/demos/components/TreeViewDemo.java
Patch:
@@ -19,7 +19,6 @@
 import javafx.scene.layout.VBox;
 import javafx.scene.paint.Color;
 import javafx.stage.Stage;
-import org.scenicview.ScenicView;
 
 import java.lang.reflect.Field;
 import java.util.List;

File: demo/src/main/java/demos/gui/uicomponents/SVGLoaderController.java
Patch:
@@ -104,7 +104,7 @@ private ScrollPane allGlyphs() {
         glyphs.sort(Comparator.comparing(SVGGlyph::getName));
 
 
-        glyphs.forEach(glyph -> glyph.setSizeRatio(16));
+        glyphs.forEach(glyph -> glyph.setSize(16));
         List<Button> iconButtons = glyphs.stream().map(this::createIconButton).collect(Collectors.toList());
         // important to improve the performance of animation in scroll pane so buttons are treated as images
         iconButtons.forEach(button -> button.setCache(true));
@@ -242,7 +242,7 @@ private void refreshView() {
                 return;
             }
 
-            sizeSlider.valueProperty().addListener(observable -> glyph.get().setSizeRatio(sizeSlider.getValue()));
+            sizeSlider.valueProperty().addListener(observable -> glyph.get().setSize(sizeSlider.getValue()));
             idLabel.setText(String.format("%04d", glyph.get().getGlyphId()));
             nameLabel.setText(glyph.get().getName());
             glyph.get().setFill(colorPicker.getValue());
@@ -259,7 +259,7 @@ final ObjectProperty<SVGGlyph> glyphProperty() {
         }
 
         final void setGlyph(SVGGlyph glyph) {
-            glyph.setSizeRatio(sizeSlider.getValue());
+            glyph.setSize(sizeSlider.getValue());
             this.glyph.set(glyph);
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDialogLayout.java
Patch:
@@ -127,7 +127,7 @@ private void initialize() {
         this.setStyle("-fx-text-fill: rgba(0, 0, 0, 0.87);");
         heading.setStyle("-fx-font-weight: BOLD;-fx-alignment: center-left;");
         heading.setPadding(new Insets(5, 0, 5, 0));
-        body.setStyle("-fx-pref-width: 400px;-fx-wrap-text: true;");
+        body.setStyle("-fx-pref-width: 400px;-fx-wrap-text: true; -fx-alignment: center-left;");
         actions.setStyle("-fx-alignment: center-right ;");
         actions.setPadding(new Insets(10, 0, 0, 0));
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -156,10 +156,7 @@ public class JFXComboBoxListViewSkin<T> extends ComboBoxListViewSkin<T> {
      **************************************************************************/
 
     public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
-
         super(comboBox);
-        // customize combo box
-        arrowButton.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, null, null)));
 
         // create my custom pane for the prompt node
         promptText.textProperty().bind(comboBox.promptTextProperty());

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -340,8 +340,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
             invalid = false;
             animatedPromptTextFill.set(promptTextFill.get());
             textPane = (Pane) this.getChildren().get(0);
-            focusTimer.setCacheNodes(textPane);
-            unfocusTimer.setCacheNodes(textPane);
+//            focusTimer.setCacheNodes(textPane);
+//            unfocusTimer.setCacheNodes(textPane);
             // create floating label
             createFloatingLabel();
             // update validation container

File: jfoenix/src/main/java/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -203,7 +203,7 @@ protected void makeChildrenTransparent() {
      * {@inheritDoc}
      */
     @Override
-    public void updateItem(T item, boolean empty) {
+    protected void updateItem(T item, boolean empty) {
         super.updateItem(item, empty);
         if (empty) {
             setText(null);

File: jfoenix/src/main/java/com/jfoenix/transitions/CachedTransition.java
Patch:
@@ -27,7 +27,7 @@
 import javafx.util.Duration;
 
 /**
- * applies animation on a cahced node to improve the performance
+ * applies animation on a cached node to improve the performance
  *
  * @author Shadi Shaheen
  * @version 1.0

File: demo/src/main/java/demos/MainDemo.java
Patch:
@@ -42,13 +42,11 @@ public void start(Stage stage) throws Exception {
 
         JFXDecorator decorator = new JFXDecorator(stage, container.getView());
         decorator.setCustomMaximize(true);
-        Scene scene = new Scene(decorator, 800, 850);
+        Scene scene = new Scene(decorator, 800, 600);
         final ObservableList<String> stylesheets = scene.getStylesheets();
         stylesheets.addAll(MainDemo.class.getResource("/css/jfoenix-fonts.css").toExternalForm(),
                            MainDemo.class.getResource("/css/jfoenix-design.css").toExternalForm(),
                            MainDemo.class.getResource("/css/jfoenix-main-demo.css").toExternalForm());
-        stage.setMinWidth(700);
-        stage.setMinHeight(800);
         stage.setScene(scene);
         stage.show();
     }

File: demo/src/main/java/demos/MainDemo.java
Patch:
@@ -42,13 +42,11 @@ public void start(Stage stage) throws Exception {
 
         JFXDecorator decorator = new JFXDecorator(stage, container.getView());
         decorator.setCustomMaximize(true);
-        Scene scene = new Scene(decorator, 800, 850);
+        Scene scene = new Scene(decorator);
         final ObservableList<String> stylesheets = scene.getStylesheets();
         stylesheets.addAll(MainDemo.class.getResource("/css/jfoenix-fonts.css").toExternalForm(),
                            MainDemo.class.getResource("/css/jfoenix-design.css").toExternalForm(),
                            MainDemo.class.getResource("/css/jfoenix-main-demo.css").toExternalForm());
-        stage.setMinWidth(700);
-        stage.setMinHeight(800);
         stage.setScene(scene);
         stage.show();
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTabPaneSkin.java
Patch:
@@ -1166,7 +1166,7 @@ protected class HeaderControl extends StackPane {
         private boolean showControlButtons, isLeftArrow;
         private Timeline arrowAnimation;
         private SVGGlyph arrowButton;
-        private Container container;
+        private StackPane container;
         private SVGGlyph leftChevron = new SVGGlyph(0,
             "CHEVRON_LEFT",
             "M 742,-37 90,614 Q 53,651 53,704.5 53,758 90,795 l 652,651 q 37,37 90.5,37 53.5,0 90.5,-37 l 75,-75 q 37,-37 37,-90.5 0,-53.5 -37,-90.5 L 512,704 998,219 q 37,-38 37,-91 0,-53 -37,-90 L 923,-37 Q 886,-74 832.5,-74 779,-74 742,-37 z",

File: jfoenix/src/main/java/com/jfoenix/controls/JFXToggleButton.java
Patch:
@@ -287,7 +287,7 @@ public boolean isSettable(JFXToggleButton control) {
                 }
 
                 @Override
-                public StyleableProperty<Paint> getStyleableProperty(JFXToggleButton control) {
+                public StyleableProperty<Number> getStyleableProperty(JFXToggleButton control) {
                     return control.sizeProperty();
                 }
             };

File: jfoenix/src/main/java/com/jfoenix/controls/JFXSnackbar.java
Patch:
@@ -202,7 +202,7 @@ public void show(String message, String pseudoClass, String actionText, EventHan
     }
 
     public void show(String message,  String actionText, long timeout, EventHandler<? super MouseEvent> actionHandler){
-        this.show(message,null,  actionText, -1, actionHandler);
+        this.show(message,null,  actionText, timeout, actionHandler);
     }
 
     public void show(String message, String pseudoClass, String actionText, long timeout, EventHandler<? super MouseEvent> actionHandler) {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -111,8 +111,6 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
         customPane = new StackPane();
         customPane.setMouseTransparent(true);
         customPane.getStyleClass().add("combo-box-button-container");
-        customPane.backgroundProperty().bindBidirectional(getSkinnable().backgroundProperty());
-        customPane.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, null, null)));
         customPane.getChildren().add(promptText);
         getChildren().add(0, customPane);
         StackPane.setAlignment(promptText, Pos.CENTER_LEFT);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXButtonSkin.java
Patch:
@@ -61,7 +61,7 @@ public JFXButtonSkin(JFXButton button) {
             @Override
             protected Node getMask() {
                 StackPane mask = new StackPane();
-                mask.shapeProperty().bind(shapeProperty());
+                mask.shapeProperty().bind(getSkinnable().shapeProperty());
                 mask.backgroundProperty().bind(Bindings.createObjectBinding(() -> {
                     return new Background(new BackgroundFill(Color.WHITE,
                         getSkinnable().getBackground() != null

File: jfoenix/src/main/java/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -262,16 +262,19 @@ protected void initListeners() {
             createRipple(event.getX(), event.getY());
             if (this.position.get() == RipplerPos.FRONT) {
                 this.control.fireEvent(event);
+                event.consume();
             }
         });
         ripplerPane.setOnMouseReleased((event) -> {
             if (this.position.get() == RipplerPos.FRONT) {
                 this.control.fireEvent(event);
+                event.consume();
             }
         });
         ripplerPane.setOnMouseClicked((event) -> {
             if (this.position.get() == RipplerPos.FRONT) {
                 this.control.fireEvent(event);
+                event.consume();
             }
         });
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPopup.java
Patch:
@@ -71,6 +71,7 @@ private void initialize() {
         this.setAutoFix(false);
         this.setAutoHide(true);
         this.setHideOnEscape(true);
+        this.setConsumeAutoHidingEvents(false);
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
     }
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXButton.java
Patch:
@@ -94,7 +94,7 @@ protected Skin<?> createDefaultSkin() {
      */
     @Override
     public String getUserAgentStylesheet() {
-        return JFXButton.class.getResource("/css/jfx-button.css").toExternalForm();
+        return getClass().getResource("/css/controls/jfx-button.css").toExternalForm();
     }
 
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPasswordField.java
Patch:
@@ -83,7 +83,7 @@ private void initialize() {
      */
     @Override
     public String getUserAgentStylesheet() {
-        return JFXButton.class.getResource("/css/jfx-text-field.css").toExternalForm();
+        return getClass().getResource("/css/controls/jfx-password-field.css").toExternalForm();
     }
 
     /***************************************************************************

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextField.java
Patch:
@@ -89,7 +89,7 @@ private void initialize() {
      */
     @Override
     public String getUserAgentStylesheet() {
-        return JFXButton.class.getResource("/css/jfx-text-field.css").toExternalForm();
+        return getClass().getResource("/css/controls/jfx-text-field.css").toExternalForm();
     }
 
     /***************************************************************************

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -241,7 +241,8 @@ protected void layoutChildren(final double x, final double y,
             // create floating label
             // set initial prompt text fill using javafx prompt node fill
             if(!getSkinnable().isEditable()){
-                promptTextFill.set(((Text)((ListCell<T>)super.getDisplayNode()).lookup(".text")).getFill());
+                final Text javaPromptText = (Text) ((ListCell<T>) super.getDisplayNode()).lookup(".text");
+                if(javaPromptText!=null) promptTextFill.set(javaPromptText.getFill());
             }
             createFloatingAnimation();
             if(getSkinnable().getValue()!=null)

File: jfoenix/src/main/java/com/jfoenix/svg/SVGGlyphLoader.java
Patch:
@@ -65,7 +65,7 @@ public static SVGGlyph getGlyph(String glyphName) {
     public static SVGGlyph getIcoMoonGlyph(String glyphName) {
         SVGGlyph glyph = glyphsMap.get(glyphName).build();
         // we need to apply transformation to correct the icon since
-        // its being after importing from icomoon
+        // its being inverted after importing from icomoon
         glyph.getTransforms().add(new Scale(1, -1));
         Translate height = new Translate();
         height.yProperty().bind(Bindings.createDoubleBinding(() -> -glyph.getHeight(), glyph.heightProperty()));

File: jfoenix/src/main/java/com/jfoenix/controls/JFXToggleButton.java
Patch:
@@ -87,7 +87,8 @@ private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
         toggleColor.addListener((o, oldVal, newVal) -> {
             // update line color in case not set by the user
-            toggleLineColor.set(((Color) getToggleColor()).desaturate().desaturate().brighter());
+            if(newVal instanceof Color)
+                toggleLineColor.set(((Color)newVal).desaturate().desaturate().brighter());
         });
     }
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXRadioButtonSkin.java
Patch:
@@ -138,6 +138,7 @@ protected void handleControlPropertyChanged(String p) {
             Color unSelectedColor = ((JFXRadioButton) getSkinnable()).getUnSelectedColor();
             Color selectedColor = ((JFXRadioButton) getSkinnable()).getSelectedColor();
             rippler.setRipplerFill(isSelected ? selectedColor : unSelectedColor);
+            if(timeline == null) updateAnimation();
             // play selection animation
             playAnimation();
         }
@@ -159,7 +160,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         final double yOffset = computeYOffset(h, maxHeight, radioButton.getAlignment().getVpos()) + x;
 
         if (invalid) {
-            initializeComponents(x, y, w, h);
+            initializeComponents();
             invalid = false;
         }
         layoutLabelInArea(xOffset + contWidth, yOffset, labelWidth, maxHeight, radioButton.getAlignment());
@@ -177,7 +178,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
             radioButton.getAlignment().getVpos());
     }
 
-    private void initializeComponents(final double x, final double y, final double w, final double h) {
+    private void initializeComponents() {
         Color unSelectedColor = ((JFXRadioButton) getSkinnable()).getUnSelectedColor();
         Color selectedColor = ((JFXRadioButton) getSkinnable()).getSelectedColor();
         radio.setStroke(unSelectedColor);

File: demo/src/main/java/demos/components/TextAreaDemo.java
Patch:
@@ -30,7 +30,6 @@ public void start(Stage stage) {
 
         RequiredFieldValidator validator = new RequiredFieldValidator();
         // NOTE adding error class to text area is causing the cursor to disapper
-        validator.setErrorStyleClass("");
         validator.setMessage("Please type something!");
         validator.setIcon(GlyphsBuilder.create(FontAwesomeIconView.class)
             .glyph(FontAwesomeIcon.WARNING)

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPasswordField.java
Patch:
@@ -133,7 +133,6 @@ public boolean validate() {
     }
 
     public void resetValidation() {
-        getStyleClass().remove(activeValidator.get() == null ? "" : activeValidator.get().getErrorStyleClass());
         pseudoClassStateChanged(ValidatorBase.PSEUDO_CLASS_ERROR, false);
         activeValidator.set(null);
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextArea.java
Patch:
@@ -139,7 +139,6 @@ public boolean validate() {
     }
 
     public void resetValidation() {
-        getStyleClass().remove(activeValidator.get() == null ? "" : activeValidator.get().getErrorStyleClass());
         pseudoClassStateChanged(ValidatorBase.PSEUDO_CLASS_ERROR, false);
         activeValidator.set(null);
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextField.java
Patch:
@@ -139,7 +139,6 @@ public boolean validate() {
     }
 
     public void resetValidation() {
-        getStyleClass().remove(activeValidator.get() == null ? "" : activeValidator.get().getErrorStyleClass());
         pseudoClassStateChanged(ValidatorBase.PSEUDO_CLASS_ERROR, false);
         activeValidator.set(null);
     }

File: jfoenix/src/main/java/com/jfoenix/validation/ValidationFacade.java
Patch:
@@ -223,8 +223,6 @@ public static boolean validate(Control control) {
 
     public static void reset(Control control) {
         ValidationFacade facade = (ValidationFacade) control.getParent();
-        control.getStyleClass()
-            .remove(facade.activeValidator.get() == null ? "" : facade.activeValidator.get().getErrorStyleClass());
         control.pseudoClassStateChanged(PSEUDO_CLASS_ERROR, false);
         facade.activeValidator.set(null);
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -322,6 +322,7 @@ public JFXDecorator(Stage stage, Node node, boolean fullScreen, boolean max, boo
                 return; // maximized mode does not support resize
             }
             if (!primaryStage.isResizable()) {
+                updateInitMouseValues(mouseEvent);
                 return;
             }
             double x = mouseEvent.getX();

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDialog.java
Patch:
@@ -213,7 +213,7 @@ public void setContent(Region content) {
         if (content != null) {
             this.content = content;
             this.content.setPickOnBounds(false);
-            contentHolder.getChildren().add(content);
+            contentHolder.getChildren().setAll(content);
         }
     }
 

File: jfoenix/src/main/java/com/jfoenix/validation/base/ValidatorBase.java
Patch:
@@ -44,10 +44,10 @@ public abstract class ValidatorBase extends Parent {
     private Tooltip tooltip = null;
 
     public ValidatorBase(String message) {
-        this.setMessage(message);
         this();
+        this.setMessage(message);
     }
-    
+
     public ValidatorBase() {
         parentProperty().addListener((o, oldVal, newVal) -> parentChanged());
     }

File: demo/src/main/java/demos/gui/main/MainController.java
Patch:
@@ -62,7 +62,7 @@ public void init() throws Exception {
             animation.play();
         });
         titleBurgerContainer.setOnMouseClicked(e -> {
-            if (drawer.isHidden() || drawer.isHidding()) {
+            if (drawer.isHidden() || drawer.isHiding()) {
                 drawer.open();
             } else {
                 drawer.close();

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawer.java
Patch:
@@ -461,7 +461,7 @@ private boolean isRunningTransition(Transition transition) {
         return transition.getStatus() == Status.RUNNING;
     }
 
-    public boolean isHidding() {
+    public boolean isHiding() {
         return (isRunningTransition(drawerTransition) && this.drawerTransition.getRate() < 0)
                || (partialTransition instanceof DrawerPartialTransitionHide
                    && isRunningTransition(partialTransition));

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -222,7 +222,6 @@ protected void starting() {
                 }
             }
         });
-
     }
 
     /***************************************************************************
@@ -240,6 +239,8 @@ protected void layoutChildren(final double x, final double y,
             invalid = false;
             // create floating label
             createFloatingAnimation();
+            if(getSkinnable().getValue()!=null)
+                animateFloatingLabel(true);
         }
         focusedLine.resizeRelocate(x, getSkinnable().getHeight(), w, focusedLine.prefHeight(-1));
         line.resizeRelocate(x, getSkinnable().getHeight(), w, line.prefHeight(-1));

File: jfoenix/src/main/java/com/jfoenix/skins/JFXColorPickerUI.java
Patch:
@@ -340,7 +340,8 @@ private void setColorAtLocation(int x, int y) {
         if (allowColorChange) {
             Color color = getColorAtLocation(x, y);
             String colorString = "rgb(" + color.getRed() * 255 + "," + color.getGreen() * 255 + "," + color.getBlue() * 255 + ");";
-            colorNodes.forEach(node -> node.setStyle("-fx-background-color:" + colorString + "; -fx-fill:" + colorString + ";"));
+            for (Node node : colorNodes)
+                node.setStyle("-fx-background-color:" + colorString + "; -fx-fill:" + colorString+";");
         }
     }
 

File: jfoenix/src/main/java/com/jfoenix/skins/JFXDatePickerSkin.java
Patch:
@@ -65,12 +65,14 @@ public JFXDatePickerSkin(final JFXDatePicker datePicker) {
         this.jfxDatePicker = datePicker;
         editorNode = new JFXTextField();
         editorNode.focusColorProperty().bind(datePicker.defaultColorProperty());
+        editorNode.setOnAction(action -> action.consume());
         editorNode.focusedProperty().addListener((obj, oldVal, newVal) -> {
             if (!newVal) {
                 setTextFromTextFieldIntoComboBoxValue();
             }
         });
 
+
         // create calender or clock button
         arrow = new SVGGlyph(0,
             "calendar",

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTimePickerSkin.java
Patch:
@@ -56,6 +56,7 @@ public JFXTimePickerSkin(JFXTimePicker timePicker) {
         this.jfxTimePicker = timePicker;
         editorNode = new JFXTextField();
         editorNode.focusColorProperty().bind(timePicker.defaultColorProperty());
+        editorNode.setOnAction(action -> action.consume());
         editorNode.focusedProperty().addListener((obj, oldVal, newVal) -> {
             if (!newVal) {
                 setTextFromTextFieldIntoComboBoxValue();

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -119,10 +119,12 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
         // add lines
         line.getStyleClass().add("input-line");
         focusedLine.getStyleClass().add("input-focused-line");
+
         getChildren().add(line);
         getChildren().add(focusedLine);
         line.setPrefHeight(1);
         line.setTranslateY(1); // translate = prefHeight + init_translation
+        line.setManaged(false);
         line.setBackground(new Background(new BackgroundFill(((JFXComboBox<?>) getSkinnable()).getUnFocusColor(),
             CornerRadii.EMPTY, Insets.EMPTY)));
         if (getSkinnable().isDisabled()) {
@@ -140,6 +142,7 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
             CornerRadii.EMPTY, Insets.EMPTY)));
         focusedLine.setOpacity(0);
         focusedLine.getTransforms().add(scale);
+        focusedLine.setManaged(false);
 
         if (comboBox.isEditable()) {
             comboBox.getEditor().setStyle("-fx-background-color:TRANSPARENT;-fx-padding: 4 0 4 0");

File: jfoenix/src/main/java/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -95,7 +95,7 @@ public class JFXComboBoxListViewSkin<T> extends ComboBoxListViewSkin<T> {
     public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
 
         super(comboBox);
-        // customize combox box
+        // customize combo box
         arrowButton.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, null, null)));
 
         // create my custom pane for the prompt node
@@ -145,9 +145,8 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
             comboBox.getEditor().setStyle("-fx-background-color:TRANSPARENT;-fx-padding: 4 0 4 0");
             comboBox.getEditor().promptTextProperty().unbind();
             comboBox.getEditor().setPromptText(null);
-            comboBox.getEditor().textProperty().addListener((o, oldVal, newVal) -> usePromptText.invalidate());
-
             comboBox.getEditor().textProperty().addListener((o, oldVal, newVal) -> {
+                usePromptText.invalidate();
                 comboBox.setValue(getConverter().fromString(newVal));
             });
         }

File: demo/src/main/java/demos/gui/uicomponents/PopupController.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.IOException;
 
 @ViewController(value = "/fxml/ui/Popup.fxml", title = "Material Design Example")
-public class PopupController {
+public final class PopupController {
 
     @FXML
     private StackPane root;

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -204,7 +204,7 @@ public JFXTextAreaSkinAndroid(JFXTextArea textArea) {
         textArea.activeValidatorProperty().addListener((o, oldVal, newVal) -> {
             if (scrollPane != null) {
                 if (!((JFXTextArea) getSkinnable()).isDisableAnimation()) {
-                    if (hideErrorAnimation != null && hideErrorAnimation.getStatus().equals(Status.RUNNING)) {
+                    if (hideErrorAnimation != null && hideErrorAnimation.getStatus() == Status.RUNNING) {
                         hideErrorAnimation.stop();
                     }
                     if (newVal != null) {
@@ -309,7 +309,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         super.layoutChildren(x, y, w, h);
 
         // change control properties if and only if animations are stopped
-        if (transition == null || transition.getStatus().equals(Status.STOPPED)) {
+        if (transition == null || transition.getStatus() == Status.STOPPED) {
             if (getSkinnable().isFocused() && ((JFXTextArea) getSkinnable()).isLabelFloat()) {
                 promptTextFill.set(((JFXTextArea) getSkinnable()).getFocusColor());
             }
@@ -349,7 +349,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
     }
 
     private void updateValidationError() {
-        if (hideErrorAnimation != null && hideErrorAnimation.getStatus().equals(Status.RUNNING)) {
+        if (hideErrorAnimation != null && hideErrorAnimation.getStatus() == Status.RUNNING) {
             hideErrorAnimation.stop();
         }
         hideErrorAnimation = new Timeline(

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -293,7 +293,7 @@ public JFXDecorator(Stage stage, Node node, boolean fullScreen, boolean max, boo
             } else {
                 // add border
                 if (windowDecoratorAnimation != null) {
-                    if (windowDecoratorAnimation.getStatus().equals(Animation.Status.RUNNING)) {
+                    if (windowDecoratorAnimation.getStatus() == Animation.Status.RUNNING) {
                         windowDecoratorAnimation.stop();
                     } else {
                         this.getChildren().add(0, buttonsContainer);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawersStack.java
Patch:
@@ -84,7 +84,7 @@ private void addDrawer(JFXDrawer drawer) {
             return;
         }
 
-        if (drawers.size() == 0) {
+        if (drawers.isEmpty()) {
             if (content != null) {
                 drawer.setContent(content);
             }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -318,7 +318,7 @@ else if (newNode instanceof JFXListView<?>) {
                         contentHolder.setOnMouseClicked((click) -> {
                             click.consume();
                             // stop the animation or change the list height
-                            if (expandAnimation != null && expandAnimation.getStatus().equals(Status.RUNNING)) {
+                            if (expandAnimation != null && expandAnimation.getStatus() == Status.RUNNING) {
                                 expandAnimation.stop();
                             }
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXNodesList.java
Patch:
@@ -125,7 +125,7 @@ public void addAnimatedNode(Region node, Callback<Boolean, Collection<KeyValue>>
     public void animateList() {
         expanded = !expanded;
 
-        if (animateTimeline.getStatus().equals(Status.RUNNING)) {
+        if (animateTimeline.getStatus() == Status.RUNNING) {
             animateTimeline.stop();
         }
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPasswordField.java
Patch:
@@ -65,7 +65,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXPasswordFieldSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextArea.java
Patch:
@@ -79,7 +79,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXTextAreaSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextField.java
Patch:
@@ -79,7 +79,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXTextFieldSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCustomColorPicker.java
Patch:
@@ -453,8 +453,7 @@ private Point2D makeControlPoint(final double endX, final double endY, final Cir
         Point2D diff = perp.subtract(end);
         diff = diff.normalize();
         diff = scale(diff, controlPointDistance);
-        perp = end.add(diff);
-        return perp;
+        return end.add(diff);
     }
 
     private Point2D scale(final Point2D a, final double scale) {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTableColumnHeader.java
Patch:
@@ -124,7 +124,7 @@ protected void layoutChildren() {
                 }, arrowContainer.layoutXProperty()));
 
 
-                if (arrowAnimation != null && arrowAnimation.getStatus().equals(Status.RUNNING)) {
+                if (arrowAnimation != null && arrowAnimation.getStatus() == Status.RUNNING) {
                     arrowAnimation.stop();
                 }
                 if (arrow.getRotate() == 180 && arrow.getRotate() != currentArrowRotation) {
@@ -157,7 +157,7 @@ protected void layoutChildren() {
 
             if (arrowContainer != null && arrowPane != null && container.getChildren()
                 .size() == 1 && !arrowPane.isVisible()) {
-                if (arrowAnimation != null && arrowAnimation.getStatus().equals(Status.RUNNING)) {
+                if (arrowAnimation != null && arrowAnimation.getStatus() == Status.RUNNING) {
                     arrowAnimation.stop();
                 }
                 Label label = (Label) container.getChildren().get(0);

File: jfoenix/src/main/java/com/jfoenix/svg/SVGGlyphLoader.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.*;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Set;
 
@@ -48,7 +49,7 @@
  */
 public class SVGGlyphLoader {
 
-    private static HashMap<String, SVGGlyphBuilder> glyphsMap = new HashMap<>();
+    private static final HashMap<String, SVGGlyphBuilder> glyphsMap = new HashMap<>();
 
 
     public static SVGGlyph getGlyph(String glyphName) {

File: jfoenix/src/main/java/com/jfoenix/validation/RequiredFieldValidator.java
Patch:
@@ -52,7 +52,7 @@ protected void eval() {
 
     private void evalTextInputField() {
         TextInputControl textField = (TextInputControl) srcControl.get();
-        if (textField.getText() == null || textField.getText().equals("")) {
+        if (textField.getText() == null || textField.getText().isEmpty()) {
             hasErrors.set(true);
         } else {
             hasErrors.set(false);

File: jfoenix/src/main/java/com/jfoenix/controls/datamodels/treetable/RecursiveTreeObject.java
Patch:
@@ -39,7 +39,7 @@
 public class RecursiveTreeObject<T> {
 
     /**
-     * gropued children objects
+     * grouped children objects
      */
     ObservableList<T> children = FXCollections.observableArrayList();
 

File: jfoenix/src/main/java/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -204,7 +204,7 @@ public JFXTextAreaSkinAndroid(JFXTextArea textArea) {
         textArea.activeValidatorProperty().addListener((o, oldVal, newVal) -> {
             if (scrollPane != null) {
                 if (!((JFXTextArea) getSkinnable()).isDisableAnimation()) {
-                    if (hideErrorAnimation != null && hideErrorAnimation.getStatus().equals(Status.RUNNING)) {
+                    if (hideErrorAnimation != null && hideErrorAnimation.getStatus() == Status.RUNNING) {
                         hideErrorAnimation.stop();
                     }
                     if (newVal != null) {
@@ -309,7 +309,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
         super.layoutChildren(x, y, w, h);
 
         // change control properties if and only if animations are stopped
-        if (transition == null || transition.getStatus().equals(Status.STOPPED)) {
+        if (transition == null || transition.getStatus() == Status.STOPPED) {
             if (getSkinnable().isFocused() && ((JFXTextArea) getSkinnable()).isLabelFloat()) {
                 promptTextFill.set(((JFXTextArea) getSkinnable()).getFocusColor());
             }
@@ -349,7 +349,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
     }
 
     private void updateValidationError() {
-        if (hideErrorAnimation != null && hideErrorAnimation.getStatus().equals(Status.RUNNING)) {
+        if (hideErrorAnimation != null && hideErrorAnimation.getStatus() == Status.RUNNING) {
             hideErrorAnimation.stop();
         }
         hideErrorAnimation = new Timeline(

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -293,7 +293,7 @@ public JFXDecorator(Stage stage, Node node, boolean fullScreen, boolean max, boo
             } else {
                 // add border
                 if (windowDecoratorAnimation != null) {
-                    if (windowDecoratorAnimation.getStatus().equals(Animation.Status.RUNNING)) {
+                    if (windowDecoratorAnimation.getStatus() == Animation.Status.RUNNING) {
                         windowDecoratorAnimation.stop();
                     } else {
                         this.getChildren().add(0, buttonsContainer);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawersStack.java
Patch:
@@ -84,7 +84,7 @@ private void addDrawer(JFXDrawer drawer) {
             return;
         }
 
-        if (drawers.size() == 0) {
+        if (drawers.isEmpty()) {
             if (content != null) {
                 drawer.setContent(content);
             }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -318,7 +318,7 @@ else if (newNode instanceof JFXListView<?>) {
                         contentHolder.setOnMouseClicked((click) -> {
                             click.consume();
                             // stop the animation or change the list height
-                            if (expandAnimation != null && expandAnimation.getStatus().equals(Status.RUNNING)) {
+                            if (expandAnimation != null && expandAnimation.getStatus() == Status.RUNNING) {
                                 expandAnimation.stop();
                             }
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXNodesList.java
Patch:
@@ -125,7 +125,7 @@ public void addAnimatedNode(Region node, Callback<Boolean, Collection<KeyValue>>
     public void animateList() {
         expanded = !expanded;
 
-        if (animateTimeline.getStatus().equals(Status.RUNNING)) {
+        if (animateTimeline.getStatus() == Status.RUNNING) {
             animateTimeline.stop();
         }
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXPasswordField.java
Patch:
@@ -65,7 +65,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXPasswordFieldSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextArea.java
Patch:
@@ -79,7 +79,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXTextAreaSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTextField.java
Patch:
@@ -79,7 +79,7 @@ protected Skin<?> createDefaultSkin() {
 
     private void initialize() {
         this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-        if (System.getProperty("java.vm.name").toLowerCase().equals("dalvik")) {
+        if ("dalvik".equals(System.getProperty("java.vm.name").toLowerCase())) {
             this.setStyle("-fx-skin: \"com.jfoenix.android.skins.JFXTextFieldSkinAndroid\";");
         }
     }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXCustomColorPicker.java
Patch:
@@ -453,8 +453,7 @@ private Point2D makeControlPoint(final double endX, final double endY, final Cir
         Point2D diff = perp.subtract(end);
         diff = diff.normalize();
         diff = scale(diff, controlPointDistance);
-        perp = end.add(diff);
-        return perp;
+        return end.add(diff);
     }
 
     private Point2D scale(final Point2D a, final double scale) {

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTableColumnHeader.java
Patch:
@@ -124,7 +124,7 @@ protected void layoutChildren() {
                 }, arrowContainer.layoutXProperty()));
 
 
-                if (arrowAnimation != null && arrowAnimation.getStatus().equals(Status.RUNNING)) {
+                if (arrowAnimation != null && arrowAnimation.getStatus() == Status.RUNNING) {
                     arrowAnimation.stop();
                 }
                 if (arrow.getRotate() == 180 && arrow.getRotate() != currentArrowRotation) {
@@ -157,7 +157,7 @@ protected void layoutChildren() {
 
             if (arrowContainer != null && arrowPane != null && container.getChildren()
                 .size() == 1 && !arrowPane.isVisible()) {
-                if (arrowAnimation != null && arrowAnimation.getStatus().equals(Status.RUNNING)) {
+                if (arrowAnimation != null && arrowAnimation.getStatus() == Status.RUNNING) {
                     arrowAnimation.stop();
                 }
                 Label label = (Label) container.getChildren().get(0);

File: jfoenix/src/main/java/com/jfoenix/svg/SVGGlyphLoader.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.*;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Set;
 
@@ -48,7 +49,7 @@
  */
 public class SVGGlyphLoader {
 
-    private static HashMap<String, SVGGlyphBuilder> glyphsMap = new HashMap<>();
+    private static final HashMap<String, SVGGlyphBuilder> glyphsMap = new HashMap<>();
 
 
     public static SVGGlyph getGlyph(String glyphName) {

File: jfoenix/src/main/java/com/jfoenix/validation/RequiredFieldValidator.java
Patch:
@@ -52,7 +52,7 @@ protected void eval() {
 
     private void evalTextInputField() {
         TextInputControl textField = (TextInputControl) srcControl.get();
-        if (textField.getText() == null || textField.getText().equals("")) {
+        if (textField.getText() == null || textField.getText().isEmpty()) {
             hasErrors.set(true);
         } else {
             hasErrors.set(false);

File: demo/src/main/java/demos/gui/uicomponents/PopupController.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.IOException;
 
 @ViewController(value = "/fxml/ui/Popup.fxml", title = "Material Design Example")
-public class PopupController {
+public final class PopupController {
 
     @FXML
     private StackPane root;

File: demo/src/main/java/demos/components/CheckBoxDemo.java
Patch:
@@ -11,8 +11,7 @@
 
 public class CheckBoxDemo extends Application {
 
-    public int i = 0;
-    public int step = 1;
+    private static int step = 1;
 
     @Override
     public void start(Stage stage) {
@@ -23,7 +22,7 @@ public void start(Stage stage) {
 
         CheckBox cb = new CheckBox("CheckBox");
         JFXCheckBox jfxCheckBox = new JFXCheckBox("JFX CheckBox");
-        JFXCheckBox customJFXCheckBox = new JFXCheckBox("JFX CheckBox");
+        JFXCheckBox customJFXCheckBox = new JFXCheckBox("Custom JFX CheckBox");
         customJFXCheckBox.getStyleClass().add("custom-jfx-check-box");
 
         main.getChildren().add(cb);

File: demo/src/main/java/demos/components/ColorPickerDemo.java
Patch:
@@ -21,7 +21,7 @@ public void start(Stage stage) {
 
         javafx.scene.control.ColorPicker picker = new javafx.scene.control.ColorPicker(Color.RED);
         picker.getStyleClass().add("button");
-//		picker.getStyleClass().add("split-button");
+        //      picker.getStyleClass().add("split-button");
         main.getChildren().add(picker);
 
         main.getChildren().add(new JFXColorPicker());
@@ -32,7 +32,7 @@ public void start(Stage stage) {
         pane.setStyle("-fx-background-color:WHITE");
 
         final Scene scene = new Scene(pane, 800, 200);
-//		scene.getStylesheets().add(ButtonDemo.class.getResource("/css/jfoenix-components.css").toExternalForm());
+        //      scene.getStylesheets().add(ButtonDemo.class.getResource("/css/jfoenix-components.css").toExternalForm());
         stage.setTitle("JFX Button Demo");
         stage.setScene(scene);
         stage.show();

File: demo/src/main/java/demos/components/ScrollPaneDemo.java
Patch:
@@ -40,7 +40,9 @@ public void start(Stage stage) throws Exception {
         JFXButton button = new JFXButton("");
         SVGGlyph arrow = new SVGGlyph(0,
             "FULLSCREEN",
-            "M402.746 877.254l-320-320c-24.994-24.992-24.994-65.516 0-90.51l320-320c24.994-24.992 65.516-24.992 90.51 0 24.994 24.994 24.994 65.516 0 90.51l-210.746 210.746h613.49c35.346 0 64 28.654 64 64s-28.654 64-64 64h-613.49l210.746 210.746c12.496 12.496 18.744 28.876 18.744 45.254s-6.248 32.758-18.744 45.254c-24.994 24.994-65.516 24.994-90.51 0z",
+            "M402.746 877.254l-320-320c-24.994-24.992-24.994-65.516 0-90.51l320-320c24.994-24.992 65.516-24.992 90.51 0 24.994 24.994 "
+            + "24.994 65.516 0 90.51l-210.746 210.746h613.49c35.346 0 64 28.654 64 64s-28.654 64-64 64h-613.49l210.746 210.746c12.496 "
+            + "12.496 18.744 28.876 18.744 45.254s-6.248 32.758-18.744 45.254c-24.994 24.994-65.516 24.994-90.51 0z",
             Color.WHITE);
         arrow.setSize(20, 16);
         button.setGraphic(arrow);

File: demo/src/main/java/demos/gui/main/MainController.java
Patch:
@@ -44,9 +44,11 @@ public class MainController {
 
     private JFXPopup toolbarPopup;
 
+    /**
+     * init fxml when loaded.
+     */
     @PostConstruct
     public void init() throws Exception {
-
         // init the title hamburger icon
         drawer.setOnDrawerOpening(e -> {
             titleBurger.getAnimation().setRate(1);

File: demo/src/main/java/demos/gui/uicomponents/ComboBoxController.java
Patch:
@@ -16,6 +16,9 @@ public class ComboBoxController {
     @FXML
     private JFXComboBox<String> jfxEditableComboBox;
 
+    /**
+     * init fxml when loaded.
+     */
     @PostConstruct
     public void init() {
 

File: demo/src/main/java/demos/gui/uicomponents/ListViewController.java
Patch:
@@ -16,7 +16,6 @@ public class ListViewController {
     private JFXListView<?> list2;
     @FXML
     private JFXListView<?> subList;
-
     @FXML
     private JFXButton button3D;
     @FXML
@@ -26,6 +25,9 @@ public class ListViewController {
 
     private int counter = 0;
 
+    /**
+     * init fxml when loaded.
+     */
     @PostConstruct
     public void init() {
 

File: demo/src/main/java/demos/gui/uicomponents/ProgressBarController.java
Patch:
@@ -18,6 +18,9 @@ public class ProgressBarController {
     @FXML
     private JFXProgressBar progress2;
 
+    /**
+     * init fxml when loaded.
+     */
     @PostConstruct
     public void init() {
         Timeline task = new Timeline(

File: demo/src/main/java/demos/gui/uicomponents/TextFieldController.java
Patch:
@@ -13,12 +13,14 @@ public class TextFieldController {
 
     @FXML
     private JFXTextField validatedText;
-
     @FXML
     private JFXPasswordField validatedPassowrd;
     @FXML
     private JFXTextArea jfxTextArea;
 
+    /**
+     * init fxml when loaded.
+     */
     @PostConstruct
     public void init() {
         validatedText.focusedProperty().addListener((o, oldVal, newVal) -> {

File: demo/src/main/java/demos/components/TextFieldDemo.java
Patch:
@@ -15,12 +15,10 @@
 
 public class TextFieldDemo extends Application {
 
-    private VBox pane;
-
     @Override
     public void start(Stage stage) throws Exception {
 
-        pane = new VBox();
+        final VBox pane = new VBox();
         pane.setSpacing(30);
         pane.setStyle("-fx-background-color:WHITE;-fx-padding:40;");
 

File: demo/src/main/java/demos/components/ToggleButtonDemo.java
Patch:
@@ -15,12 +15,10 @@
 
 public class ToggleButtonDemo extends Application {
 
-    private VBox pane;
-
     @Override
     public void start(Stage stage) throws Exception {
 
-        pane = new VBox();
+        final VBox pane = new VBox();
         pane.setSpacing(30);
         pane.setStyle("-fx-background-color:#EEE; -fx-padding: 40;");
 

File: demo/src/main/java/demos/components/TextFieldDemo.java
Patch:
@@ -15,12 +15,10 @@
 
 public class TextFieldDemo extends Application {
 
-    private VBox pane;
-
     @Override
     public void start(Stage stage) throws Exception {
 
-        pane = new VBox();
+        final VBox pane = new VBox();
         pane.setSpacing(30);
         pane.setStyle("-fx-background-color:WHITE;-fx-padding:40;");
 

File: demo/src/main/java/demos/components/ToggleButtonDemo.java
Patch:
@@ -15,12 +15,10 @@
 
 public class ToggleButtonDemo extends Application {
 
-    private VBox pane;
-
     @Override
     public void start(Stage stage) throws Exception {
 
-        pane = new VBox();
+        final VBox pane = new VBox();
         pane.setSpacing(30);
         pane.setStyle("-fx-background-color:#EEE; -fx-padding: 40;");
 

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDialogLayout.java
Patch:
@@ -37,7 +37,6 @@
  */
 public class JFXDialogLayout extends StackPane {
 
-    private VBox layout = new VBox();
     private StackPane heading = new StackPane();
     private StackPane body = new StackPane();
     private FlowPane actions = new FlowPane();
@@ -48,6 +47,7 @@ public class JFXDialogLayout extends StackPane {
     public JFXDialogLayout() {
         super();
         initialize();
+        final VBox layout = new VBox();
         layout.getChildren().add(heading);
         heading.getStyleClass().add("jfx-layout-heading");
         heading.getStyleClass().add("title");

File: jfoenix/src/main/java/com/jfoenix/controls/JFXDrawersStack.java
Patch:
@@ -40,14 +40,14 @@ public class JFXDrawersStack extends StackPane {
 
     private ArrayList<JFXDrawer> drawers = new ArrayList<>();
     private Node content;
-    private Rectangle clip = new Rectangle();
     boolean holding = false;
 
     /**
      * creates empty drawers stack
      */
     public JFXDrawersStack() {
         super();
+        final Rectangle clip = new Rectangle();
         clip.widthProperty().bind(this.widthProperty());
         clip.heightProperty().bind(this.heightProperty());
         this.setClip(clip);

File: jfoenix/src/main/java/com/jfoenix/controls/JFXNodesList.java
Patch:
@@ -110,7 +110,7 @@ public void addAnimatedNode(Region node, Callback<Boolean, ArrayList<KeyValue>>
             return initDefaultAnimation(node, expanded);
         };
         else if (animationCallBack == null && this.getChildren().size() == 1) animationCallBack = (expanded) -> {
-            return new ArrayList<KeyValue>();
+            return new ArrayList<>();
         };
         animationsMap.put(node, animationCallBack);
     }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXScrollPane.java
Patch:
@@ -49,7 +49,6 @@ public class JFXScrollPane extends StackPane {
 
     private static final String DEFAULT_STYLE_CLASS = "jfx-scroll-pane";
 
-    private ScrollPane scrollPane = new ScrollPane();
     private VBox contentContainer = new VBox();
     private StackPane headerSpace = new StackPane();
     private StackPane condensedHeaderBG = new StackPane();
@@ -120,6 +119,7 @@ public JFXScrollPane() {
         contentContainer.getChildren().setAll(headerSpace);
 
         contentContainer.localToSceneTransformProperty().addListener((o, oldVal, newVal) -> oldSceneTransform = oldVal);
+        final ScrollPane scrollPane = new ScrollPane();
         scrollPane.setContent(contentContainer);
         scrollPane.setFitToWidth(true);
         scrollPane.vvalueProperty().addListener((o, oldVal, newVal) -> {

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeTableRow.java
Patch:
@@ -43,6 +43,6 @@ public JFXTreeTableRow() {
      */
     @Override
     protected Skin<?> createDefaultSkin() {
-        return new JFXTreeTableRowSkin<T>(this);
+        return new JFXTreeTableRowSkin<>(this);
     }
 }

File: jfoenix/src/main/java/com/jfoenix/controls/JFXTreeView.java
Patch:
@@ -47,7 +47,7 @@ public JFXTreeView(TreeItem<T> root) {
     }
 
     private void init() {
-        this.setCellFactory((view) -> new JFXTreeCell<T>());
+        this.setCellFactory((view) -> new JFXTreeCell<>());
     }
 
     double height = 0;

File: jfoenix/src/main/java/com/jfoenix/controls/behavior/JFXColorPickerBehavior.java
Patch:
@@ -55,7 +55,7 @@ public JFXColorPickerBehavior(final ColorPicker colorPicker) {
      **************************************************************************/
     protected static final String JFX_OPEN_ACTION = "Open";
     protected static final String JFX_CLOSE_ACTION = "Close";
-    protected static final List<KeyBinding> JFX_COLOR_PICKER_BINDINGS = new ArrayList<KeyBinding>();
+    protected static final List<KeyBinding> JFX_COLOR_PICKER_BINDINGS = new ArrayList<>();
 
     static {
         JFX_COLOR_PICKER_BINDINGS.add(new KeyBinding(ESCAPE, KEY_PRESSED, JFX_CLOSE_ACTION));

File: jfoenix/src/main/java/com/jfoenix/controls/behavior/JFXDatePickerBehavior.java
Patch:
@@ -51,7 +51,7 @@ public JFXDatePickerBehavior(final DatePicker datePicker) {
      *                                                                         *
      **************************************************************************/
 
-    protected static final List<KeyBinding> JFX_DATE_PICKER_BINDINGS = new ArrayList<KeyBinding>();
+    protected static final List<KeyBinding> JFX_DATE_PICKER_BINDINGS = new ArrayList<>();
 
     static {
         JFX_DATE_PICKER_BINDINGS.addAll(COMBO_BOX_BASE_BINDINGS);

File: jfoenix/src/main/java/com/jfoenix/controls/behavior/JFXTimePickerBehavior.java
Patch:
@@ -51,7 +51,7 @@ public JFXTimePickerBehavior(final JFXTimePicker timePicker) {
      *                                                                         *
      **************************************************************************/
 
-    protected static final List<KeyBinding> JFX_TIME_PICKER_BINDINGS = new ArrayList<KeyBinding>();
+    protected static final List<KeyBinding> JFX_TIME_PICKER_BINDINGS = new ArrayList<>();
 
     static {
         JFX_TIME_PICKER_BINDINGS.addAll(COMBO_BOX_BASE_BINDINGS);

File: jfoenix/src/main/java/com/jfoenix/controls/cells/editors/base/JFXTreeTableCell.java
Patch:
@@ -34,6 +34,6 @@
 public class JFXTreeTableCell<S, T> extends TreeTableCell<S, T> {
     @Override
     protected Skin<?> createDefaultSkin() {
-        return new JFXTreeTableCellSkin<S, T>(this);
+        return new JFXTreeTableCellSkin<>(this);
     }
 }

File: jfoenix/src/main/java/com/jfoenix/controls/events/JFXDialogEvent.java
Patch:
@@ -53,14 +53,14 @@ public JFXDialogEvent(EventType<? extends Event> eventType) {
      * ( after the exit animation ends )
      */
     public static final EventType<JFXDialogEvent> CLOSED =
-        new EventType<JFXDialogEvent>(Event.ANY, "DIALOG_CLOSED");
+        new EventType<>(Event.ANY, "DIALOG_CLOSED");
 
     /**
      * This event occurs when a JFXDialog is opened, visible to the user
      * ( after the entrance animation ends )
      */
     public static final EventType<JFXDialogEvent> OPENED =
-        new EventType<JFXDialogEvent>(Event.ANY, "DIALOG_OPENED");
+        new EventType<>(Event.ANY, "DIALOG_OPENED");
 
 
 }

File: jfoenix/src/main/java/com/jfoenix/skins/JFXProgressBarSkin.java
Patch:
@@ -44,7 +44,6 @@ public class JFXProgressBarSkin extends ProgressBarSkin {
     private static Color trackColor = Color.valueOf("#E0E0E0");
 
     private StackPane bar;
-    private StackPane track;
     private Region clip;
 
     public JFXProgressBarSkin(JFXProgressBar bar) {
@@ -56,7 +55,7 @@ public void initialize() {
         bar = (StackPane) getChildren().get(1);
         bar.setBackground(new Background(new BackgroundFill(indicatorColor, CornerRadii.EMPTY, Insets.EMPTY)));
         bar.setPadding(new Insets(1.5));
-        track = (StackPane) getChildren().get(0);
+        final StackPane track = (StackPane) getChildren().get(0);
         track.setBackground(new Background(new BackgroundFill(trackColor, CornerRadii.EMPTY, Insets.EMPTY)));
         clip = new Region();
         clip.setBackground(new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));

File: jfoenix/src/main/java/com/jfoenix/skins/JFXToggleNodeSkin.java
Patch:
@@ -43,12 +43,12 @@ public class JFXToggleNodeSkin extends ToggleButtonSkin {
     private final StackPane main = new StackPane();
     private JFXRippler rippler;
     private boolean invalid = true;
-    private final CornerRadii defaultRadii = new CornerRadii(3);
     private JFXFillTransition ft;
     private Runnable releaseManualRippler = null;
 
     public JFXToggleNodeSkin(JFXToggleNode toggleNode) {
         super(toggleNode);
+        final CornerRadii defaultRadii = new CornerRadii(3);
         toggleNode.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, defaultRadii, null)));
         toggleNode.setText(null);
         main.setPickOnBounds(false);

File: jfoenix/src/main/java/com/jfoenix/skins/JFXTreeTableCellSkin.java
Patch:
@@ -38,7 +38,7 @@ public class JFXTreeTableCellSkin<S, T> extends TableCellSkinBase<TreeTableCell<
     private final TreeTableColumn<S, T> tableColumn;
 
     public JFXTreeTableCellSkin(TreeTableCell<S, T> treeTableCell) {
-        super(treeTableCell, new JFXTreeTableCellBehavior<S, T>(treeTableCell));
+        super(treeTableCell, new JFXTreeTableCellBehavior<>(treeTableCell));
         tableColumn = treeTableCell.getTableColumn();
         super.init(treeTableCell);
     }

File: jfoenix/src/main/java/com/jfoenix/svg/SVGGlyphLoader.java
Patch:
@@ -117,7 +117,7 @@ public InputSource resolveEntity(String publicId, String systemId) throws SAXExc
                 String glyphId = glyphName.getNodeValue();
                 SVGGlyphBuilder glyphPane = new SVGGlyphBuilder(i,
                                                                 glyphId,
-                                                                (String) glyph.getAttributes()
+                                                                glyph.getAttributes()
                                                                               .getNamedItem("d")
                                                                               .getNodeValue());
                 glyphsMap.put(svgFontFile.getName() + "." + glyphId, glyphPane);
@@ -169,7 +169,7 @@ public InputSource resolveEntity(String publicId, String systemId) throws SAXExc
                 String glyphId = glyphName.getNodeValue();
                 SVGGlyphBuilder glyphPane = new SVGGlyphBuilder(i,
                                                                 glyphId,
-                                                                (String) glyph.getAttributes()
+                                                                glyph.getAttributes()
                                                                               .getNamedItem("d")
                                                                               .getNodeValue());
                 glyphsMap.put(keyPrefix + "." + glyphId, glyphPane);

File: jfoenix/src/main/java/com/jfoenix/transitions/JFXFillTransition.java
Patch:
@@ -81,7 +81,7 @@ public final Region getRegion() {
 
     public final ObjectProperty<Region> regionProperty() {
         if (region == null) {
-            region = new SimpleObjectProperty<Region>(this, "region", null);
+            region = new SimpleObjectProperty<>(this, "region", null);
         }
         return region;
     }
@@ -163,7 +163,7 @@ public final Color getFromValue() {
 
     public final ObjectProperty<Color> fromValueProperty() {
         if (fromValue == null) {
-            fromValue = new SimpleObjectProperty<Color>(this, "fromValue", DEFAULT_FROM_VALUE);
+            fromValue = new SimpleObjectProperty<>(this, "fromValue", DEFAULT_FROM_VALUE);
         }
         return fromValue;
     }
@@ -188,7 +188,7 @@ public final Color getToValue() {
 
     public final ObjectProperty<Color> toValueProperty() {
         if (toValue == null) {
-            toValue = new SimpleObjectProperty<Color>(this, "toValue", DEFAULT_TO_VALUE);
+            toValue = new SimpleObjectProperty<>(this, "toValue", DEFAULT_TO_VALUE);
         }
         return toValue;
     }

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerSlideCloseTransition.java
Patch:
@@ -88,7 +88,7 @@ private static Timeline createTimeline(JFXHamburger burger) {
                                                                                                 .getMinY();
 
         double hypotenuse = Math.sqrt(Math.pow(burgerHeight, 2) + Math.pow(burgerWidth, 2));
-        double angle = (Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90);
+        double angle = Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90;
 
         return new Timeline(
             new KeyFrame(

File: jfoenix/src/main/java/com/jfoenix/transitions/hamburger/HamburgerTransition.java
Patch:
@@ -38,5 +38,5 @@ public interface HamburgerTransition {
      *         the node to be animated
      * @return animation transition
      */
-    public Transition getAnimation(JFXHamburger burger);
+    Transition getAnimation(JFXHamburger burger);
 }

File: jfoenix/src/main/java/com/jfoenix/validation/ValidationFacade.java
Patch:
@@ -170,7 +170,7 @@ public ValidationFacade() {
      * holds the current active validator on the text field in case of
      * validation error
      */
-    private ReadOnlyObjectWrapper<ValidatorBase> activeValidator = new ReadOnlyObjectWrapper<ValidatorBase>();
+    private ReadOnlyObjectWrapper<ValidatorBase> activeValidator = new ReadOnlyObjectWrapper<>();
 
     public ValidatorBase getActiveValidator() {
         return activeValidator == null ? null : activeValidator.get();
@@ -225,7 +225,7 @@ public static void reset(Control control) {
         facade.activeValidator.set(null);
     }
 
-    private ObjectProperty<Control> controlProperty = new SimpleObjectProperty<Control>();
+    private ObjectProperty<Control> controlProperty = new SimpleObjectProperty<>();
 
     public Control getControl() {
         return controlProperty.get();

File: src/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -47,6 +47,9 @@
 /**
  * material design implementation of ListCell
  * 
+ * By default JFXListCell will try to create a graphic node for the cell,
+ * to override it you need to set graphic to null in {@link #updateItem(Object, boolean)} method.
+ * 
  * NOTE: passive nodes (Labels and Shapes) will be set to mouse transparent in order to
  * show the ripple effect upon clicking , to change this behavior you can override the 
  * method {{@link #makeChildrenTransparent()}

File: demo/demos/gui/uicomponents/ButtonController.java
Patch:
@@ -1,10 +1,10 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/Button.fxml" , title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/Button.fxml", title = "Material Design Example")
 public class ButtonController {
-	
+
 //	@FXMLViewFlowContext
 //	private ViewFlowContext context;
 //

File: demo/demos/gui/uicomponents/CheckboxController.java
Patch:
@@ -1,8 +1,8 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/Checkbox.fxml" , title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/Checkbox.fxml", title = "Material Design Example")
 public class CheckboxController {
 
 }

File: demo/demos/gui/uicomponents/RadioButtonController.java
Patch:
@@ -1,8 +1,8 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/RadioButton.fxml" , title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/RadioButton.fxml", title = "Material Design Example")
 public class RadioButtonController {
 
 }

File: demo/demos/gui/uicomponents/SliderController.java
Patch:
@@ -1,8 +1,8 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/Slider.fxml", title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/Slider.fxml", title = "Material Design Example")
 public class SliderController {
 
 }

File: demo/demos/gui/uicomponents/SpinnerController.java
Patch:
@@ -1,8 +1,8 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/Spinner.fxml", title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/Spinner.fxml", title = "Material Design Example")
 public class SpinnerController {
 
-}
\ No newline at end of file
+}

File: demo/demos/gui/uicomponents/ToggleButtonController.java
Patch:
@@ -1,8 +1,8 @@
 package demos.gui.uicomponents;
 
-import io.datafx.controller.FXMLController;
+import io.datafx.controller.ViewController;
 
-@FXMLController(value = "/resources/fxml/ui/ToggleButton.fxml" , title = "Material Design Example")
+@ViewController(value = "/resources/fxml/ui/ToggleButton.fxml", title = "Material Design Example")
 public class ToggleButtonController {
 
 }

File: src/com/jfoenix/controls/JFXTreeTableView.java
Patch:
@@ -122,7 +122,9 @@ public int getTreeItemLevel(TreeItem<?> node) {
 				break;
 			}
 			// handle group nodes
-			if(((RecursiveTreeObject<?>)parent.getValue()).getGroupedColumn()!=null)
+			if(parent.getValue() !=null
+			&& parent.getValue() instanceof RecursiveTreeObject
+			&& ((RecursiveTreeObject<?>)parent.getValue()).getGroupedColumn()!=null)
 				level--;
 			parent = parent.getParent();
 		}

File: src/com/jfoenix/skins/JFXColorPickerUI.java
Patch:
@@ -70,7 +70,7 @@ public JFXColorPickerUI(int pickerSize){
 		this.pickerSize = pickerSize;	
 		this.centerX = (double)pickerSize/2;
 		this.centerY = (double)pickerSize/2;
-		this.pickerRadius = pickerSize/2;
+		this.pickerRadius = (double)pickerSize/2;
 		this.huesRadius = pickerRadius * 0.9;
 		this.huesSmallR = pickerRadius * 0.8;
 		this.huesLargeR = pickerRadius;
@@ -324,7 +324,7 @@ private Image getHuesCircle(int width, int height, List<Stop> stops) {
 		PixelWriter pixelWriter = raster.getPixelWriter();
 		Point2D center = new Point2D((double)width / 2, (double)height / 2);
 		double rsmall = 0.8*width / 2;
-		double rbig = width / 2;
+		double rbig = (double)width / 2;
 		for (int y = 0 ; y < height ; y++) {
 			for (int x = 0 ; x < width ; x++) {
 				double dx = x - center.getX();

File: src/com/jfoenix/android/skins/JFXPasswordFieldSkinAndroid.java
Patch:
@@ -288,6 +288,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			textPane = ((Pane)this.getChildren().get(0));
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
 			// update validation container
 			if(((JFXPasswordField)getSkinnable()).getActiveValidator()!=null) updateValidationError();
 			// focus

File: src/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -320,6 +320,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
             // update validation container
             if(((JFXTextArea)getSkinnable()).getActiveValidator()!=null) updateValidationError();
             // focus

File: src/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -274,6 +274,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			textPane = ((Pane)this.getChildren().get(0));
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
 			// update validation container
 			if(((JFXTextField)getSkinnable()).getActiveValidator()!=null) updateValidationError();
 			// focus

File: src/com/jfoenix/skins/JFXPasswordFieldSkin.java
Patch:
@@ -282,6 +282,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			textPane = ((Pane)this.getChildren().get(0));
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
 			// update validation container
 			if(((JFXPasswordField)getSkinnable()).getActiveValidator()!=null) updateValidationError();
 			// focus

File: src/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -315,6 +315,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
             // update validation container
             if(((JFXTextArea)getSkinnable()).getActiveValidator()!=null) updateValidationError();
             // focus

File: src/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -282,6 +282,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			textPane = ((Pane)this.getChildren().get(0));
 			// create floating label
 			createFloatingLabel();
+			// to position the prompt node properly
+			super.layoutChildren(x, y, w, h);
 			// update validation container
 			if(((JFXTextField)getSkinnable()).getActiveValidator()!=null) updateValidationError();
 			// focus

File: src/com/jfoenix/skins/JFXSliderSkin.java
Patch:
@@ -28,6 +28,7 @@
 import javafx.animation.Timeline;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.DoubleProperty;
+import javafx.css.PseudoClass;
 import javafx.geometry.Insets;
 import javafx.geometry.Orientation;
 import javafx.scene.input.MouseEvent;
@@ -257,8 +258,10 @@ private void initListeners() {
 			internalChange = true;
 			if(getSkinnable().getMin() == newVal.doubleValue()){
 				thumb.setBackground(new Background(new BackgroundFill(trackColor, new CornerRadii(20), Insets.EMPTY)));
+				animatedThumb.pseudoClassStateChanged(PseudoClass.getPseudoClass("min"),true);
 			}else if(oldVal.doubleValue() == getSkinnable().getMin()){
 				thumb.setBackground(new Background(new BackgroundFill(thumbColor, new CornerRadii(20), Insets.EMPTY)));
+				animatedThumb.pseudoClassStateChanged(PseudoClass.getPseudoClass("min"),false);
 			}
 			internalChange = false;
 		});

File: demo/demos/components/DatePickerDemo.java
Patch:
@@ -19,6 +19,7 @@
 package demos.components;
 
 import com.jfoenix.controls.JFXDatePicker;
+import com.jfoenix.controls.JFXTimePicker;
 
 import demos.MainDemo;
 import javafx.application.Application;
@@ -47,10 +48,9 @@ public class DatePickerDemo  extends Application {
 		
 		main.getChildren().add(datePickerFX);
 		datePickerFX.setPromptText("pick a date");
-		JFXDatePicker blueDatePicker = new JFXDatePicker();
+		JFXTimePicker blueDatePicker = new JFXTimePicker();
 		blueDatePicker.setDefaultColor(Color.valueOf("#3f51b5"));
 		blueDatePicker.setOverLay(true);
-		blueDatePicker.setShowTime(true);
 		main.getChildren().add(blueDatePicker);
 		
 		

File: demo/demos/gui/uicomponents/PickersController.java
Patch:
@@ -3,6 +3,7 @@
 import javax.annotation.PostConstruct;
 
 import com.jfoenix.controls.JFXDatePicker;
+import com.jfoenix.controls.JFXTimePicker;
 
 import io.datafx.controller.FXMLController;
 import io.datafx.controller.flow.FlowException;
@@ -15,7 +16,7 @@ public class PickersController {
 
 	@FXML private StackPane root;
 	@FXML private JFXDatePicker dateOverlay;
-	@FXML private JFXDatePicker timeOverlay;
+	@FXML private JFXTimePicker timeOverlay;
 	
 	@PostConstruct
 	public void init() throws FlowException, VetoException {

File: src/com/jfoenix/skins/JFXCheckBoxSkin.java
Patch:
@@ -207,6 +207,7 @@ static double  computeYOffset(double height, double contentHeight, VPos vpos) {
 	}
 
 	private void playSelectAnimation(Boolean selection) {
+		if(selection == null) selection = false;
 		JFXCheckBox control = ((JFXCheckBox) getSkinnable());
 		transition.setRate(selection?1:-1);
 		select.setRate(selection?1:-1);

File: demo/demos/components/TreeTableDemo.java
Patch:
@@ -95,7 +95,7 @@ public void start(Stage primaryStage) throws Exception {
 			// build tree
 			final TreeItem<User> root = new RecursiveTreeItem<User>(users, RecursiveTreeObject::getChildren);
 			
-			JFXTreeTableView<User> treeView = new JFXTreeTableView<User>(root, users);
+			JFXTreeTableView<User> treeView = new JFXTreeTableView<User>(root);
 			treeView.setShowRoot(false);
 			treeView.setEditable(true);
 			treeView.getColumns().setAll(deptColumn, ageColumn, empColumn);

File: src/com/jfoenix/controls/JFXTreeTableView.java
Patch:
@@ -70,7 +70,7 @@ public JFXTreeTableView() {
 	/**
 	 * {@inheritDoc}
 	 */
-	public JFXTreeTableView(TreeItem<S> root, ObservableList<S> items) {
+	public JFXTreeTableView(TreeItem<S> root) {
 		super(root);
 		originalRoot = root;
 		init();

File: src/com/jfoenix/skins/JFXTreeTableCellSkin.java
Patch:
@@ -90,7 +90,9 @@ public JFXTreeTableCellSkin(TreeTableCell<S,T> treeTableCell) {
 
 		if(tableColumn == treeColumn || ((JFXTreeTableColumn<S,T>)tableColumn).isGrouped()){
 			// add in the width of the disclosure node		
-			leftPadding += JFXTreeTableRowSkin.disclosureWidthMap.containsKey(treeTable) ? JFXTreeTableRowSkin.disclosureWidthMap.get(treeTable) : 0;
+			if (JFXTreeTableRowSkin.disclosureWidthMap != null && JFXTreeTableRowSkin.disclosureWidthMap.containsKey(treeTable)) {
+				leftPadding += JFXTreeTableRowSkin.disclosureWidthMap.get(treeTable);
+			}
 		}
 		// adding in the width of the graphic on the tree item
 		leftPadding += treeItem.getGraphic() == null ? 0 : treeItem.getGraphic().prefWidth(height);

File: src/com/jfoenix/skins/JFXTreeTableCellSkin.java
Patch:
@@ -90,7 +90,9 @@ public JFXTreeTableCellSkin(TreeTableCell<S,T> treeTableCell) {
 
 		if(tableColumn == treeColumn || ((JFXTreeTableColumn<S,T>)tableColumn).isGrouped()){
 			// add in the width of the disclosure node		
-			leftPadding += JFXTreeTableRowSkin.disclosureWidthMap.containsKey(treeTable) ? JFXTreeTableRowSkin.disclosureWidthMap.get(treeTable) : 0;
+			if (JFXTreeTableRowSkin.disclosureWidthMap != null && JFXTreeTableRowSkin.disclosureWidthMap.containsKey(treeTable)) {
+				leftPadding += JFXTreeTableRowSkin.disclosureWidthMap.get(treeTable);
+			}
 		}
 		// adding in the width of the graphic on the tree item
 		leftPadding += treeItem.getGraphic() == null ? 0 : treeItem.getGraphic().prefWidth(height);

File: src/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -158,11 +158,11 @@ protected void layoutChildren() {
 				}
 			}else{
 				this.setTranslateY(0);
-				clip.setX(0);
 				clip.setY(0);
 				clip.setHeight(getHeight());
-				clip.setWidth(getWidth());
 			}
+			clip.setX(0);
+			clip.setWidth(getWidth());
 		}
 		if(!getChildren().contains(cellRippler)){
 			makeChildrenTransparent();

File: src/com/jfoenix/controls/JFXListView.java
Patch:
@@ -87,10 +87,10 @@ protected Skin<?> createDefaultSkin()	{
 	public ObjectProperty<Integer> depthProperty(){
 		return depthProperty;
 	}
-	public int getDepthProperty(){
+	public int getDepth(){
 		return depthProperty.get();
 	}
-	public void setDepthProperty(int depth){
+	public void setDepth(int depth){
 		depthProperty.set(depth);
 	}	
 

File: src/com/jfoenix/android/skins/JFXPasswordFieldSkinAndroid.java
Patch:
@@ -67,7 +67,7 @@
  * however it extends the JavaFXPorts text field android skin.
  *
  * @author  Shadi Shaheen
- * @version 1.0
+ * @version 2.0
  * @since   2017-01-25
  */
 public class JFXPasswordFieldSkinAndroid extends TextFieldSkinAndroid {

File: src/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -68,8 +68,8 @@
  * however it extends the JavaFXPorts text area android skin.
  *
  * @author  Shadi Shaheen
- * @version 1.0
- * @since   2016-01-25
+ * @version 2.0
+ * @since   2017-01-25
  */
 public class JFXTextAreaSkinAndroid extends TextAreaSkinAndroid {
 

File: src/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -52,7 +52,7 @@
  * however it extends the JavaFXPorts text field android skin.
  *
  * @author  Shadi Shaheen
- * @version 1.0
+ * @version 2.0
  * @since   2017-01-25
  */
 public class JFXTextFieldSkinAndroid extends TextFieldSkinAndroid{

File: src/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -45,7 +45,6 @@
 import javafx.scene.layout.BorderStrokeStyle;
 import javafx.scene.layout.BorderWidths;
 import javafx.scene.layout.CornerRadii;
-import javafx.scene.layout.Region;
 import javafx.scene.layout.StackPane;
 import javafx.scene.paint.Color;
 import javafx.scene.paint.Paint;
@@ -58,8 +57,8 @@
  * <h1>Material Design ComboBox Skin</h1>
  *
  * @author  Shadi Shaheen
- * @version 1.0
- * @since   2016-03-09
+ * @version 2.0
+ * @since   2017-01-25
  */
 
 public class JFXComboBoxListViewSkin<T> extends ComboBoxListViewSkin<T> {

File: src/com/jfoenix/skins/JFXPasswordFieldSkin.java
Patch:
@@ -60,7 +60,7 @@
  * <h1>Material Design PasswordField Skin</h1>
  *
  * @author  Shadi Shaheen
- * @version 1.0
+ * @version 2.0
  * @since   2017-01-25
  */
 public class JFXPasswordFieldSkin extends TextFieldSkin{

File: src/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -62,8 +62,8 @@
  * <h1>Material Design TextArea Skin</h1>
  *
  * @author  Shadi Shaheen
- * @version 1.0
- * @since   2016-01-25
+ * @version 2.0
+ * @since   2017-01-25
  */
 public class JFXTextAreaSkin extends TextAreaSkin {
 

File: src/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -60,7 +60,7 @@
  * <h1>Material Design TextField Skin</h1>
  *
  * @author  Shadi Shaheen
- * @version 1.0
+ * @version 2.0
  * @since   2017-01-25
  */
 public class JFXTextFieldSkin extends TextFieldSkin {

File: src/com/jfoenix/skins/JFXTreeTableRowSkin.java
Patch:
@@ -23,7 +23,6 @@
 
 import com.jfoenix.controls.datamodels.treetable.RecursiveTreeObject;
 import com.sun.javafx.scene.control.skin.TreeTableRowSkin;
-import com.sun.javafx.scene.control.skin.VirtualFlow;
 
 import javafx.animation.Animation;
 import javafx.animation.Animation.Status;
@@ -35,7 +34,6 @@
 import javafx.scene.Node;
 import javafx.scene.Parent;
 import javafx.scene.control.Control;
-import javafx.scene.control.IndexedCell;
 import javafx.scene.control.TreeTableRow;
 import javafx.util.Duration;
 

File: src/com/jfoenix/skins/JFXDatePickerContent.java
Patch:
@@ -654,7 +654,9 @@ protected void forward(int offset, ChronoUnit unit, boolean focusDayCell, boolea
 			if(tempImageTransition == null || tempImageTransition.getStatus().equals(Status.STOPPED)){
 				Pane monthContent = (Pane) calendarPlaceHolder.getChildren().get(0);
 				this.getParent().setManaged(false);
-				WritableImage temp = monthContent.snapshot(new SnapshotParameters(), new WritableImage((int)monthContent.getWidth(), (int)monthContent.getHeight()));				
+				SnapshotParameters snapShotparams = new SnapshotParameters();
+				snapShotparams.setFill(Color.TRANSPARENT);
+				WritableImage temp = monthContent.snapshot(snapShotparams, new WritableImage((int)monthContent.getWidth(), (int)monthContent.getHeight()));				
 				ImageView tempImage = new ImageView(temp);				
 				calendarPlaceHolder.getChildren().add(calendarPlaceHolder.getChildren().size()-2,tempImage);
 				TranslateTransition imageTransition = new TranslateTransition(Duration.millis(160), tempImage);

File: src/com/jfoenix/android/skins/JFXPasswordFieldSkinAndroid.java
Patch:
@@ -156,7 +156,7 @@ public JFXPasswordFieldSkinAndroid(JFXPasswordField field) {
 		});
 		errorContainer.visibleProperty().addListener((o,oldVal,newVal)->{
 			// show the error label if it's not shown
-			new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
+			if(newVal) new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
 		});
 
 
@@ -176,6 +176,7 @@ public JFXPasswordFieldSkinAndroid(JFXPasswordField field) {
 					if(newVal!=null){
 						hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 						hideErrorAnimation.setOnFinished(finish->{
+							errorContainer.setVisible(false);
 							JFXUtilities.runInFX(()->showError(newVal));
 						});
 						hideErrorAnimation.play();
@@ -316,6 +317,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 					hideErrorAnimation.stop();
 				hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 				hideErrorAnimation.setOnFinished(finish->{
+					errorContainer.setVisible(false);
 					showError(((JFXPasswordField)getSkinnable()).getActiveValidator());
 				});
 				hideErrorAnimation.play();

File: src/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -155,7 +155,7 @@ public JFXTextFieldSkinAndroid(JFXTextField field) {
 		});
 		errorContainer.visibleProperty().addListener((o,oldVal,newVal)->{
 			// show the error label if it's not shown
-			new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
+			if(newVal) new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
 		});
 
 
@@ -175,6 +175,7 @@ public JFXTextFieldSkinAndroid(JFXTextField field) {
 					if(newVal!=null){
 						hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 						hideErrorAnimation.setOnFinished(finish->{
+							errorContainer.setVisible(false);
 							JFXUtilities.runInFX(()->showError(newVal));
 						});
 						hideErrorAnimation.play();
@@ -315,6 +316,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 					hideErrorAnimation.stop();
 				hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 				hideErrorAnimation.setOnFinished(finish->{
+					errorContainer.setVisible(false);
 					showError(((JFXTextField)getSkinnable()).getActiveValidator());
 				});
 				hideErrorAnimation.play();

File: src/com/jfoenix/skins/JFXPasswordFieldSkin.java
Patch:
@@ -149,7 +149,7 @@ public JFXPasswordFieldSkin(JFXPasswordField field) {
 		});
 		errorContainer.visibleProperty().addListener((o,oldVal,newVal)->{
 			// show the error label if it's not shown
-			new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
+			if(newVal) new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
 		});
 
 
@@ -169,6 +169,7 @@ public JFXPasswordFieldSkin(JFXPasswordField field) {
 					if(newVal!=null){
 						hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 						hideErrorAnimation.setOnFinished(finish->{
+							errorContainer.setVisible(false);
 							JFXUtilities.runInFX(()->showError(newVal));
 						});
 						hideErrorAnimation.play();
@@ -309,6 +310,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 					hideErrorAnimation.stop();
 				hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 				hideErrorAnimation.setOnFinished(finish->{
+					errorContainer.setVisible(false);
 					showError(((JFXPasswordField)getSkinnable()).getActiveValidator());
 				});
 				hideErrorAnimation.play();

File: src/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -182,7 +182,7 @@ public JFXTextAreaSkin(JFXTextArea textArea) {
 		});
 		errorContainer.visibleProperty().addListener((o,oldVal,newVal)->{
 			// show the error label if it's not shown
-			new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
+			if(newVal) new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 1, Interpolator.EASE_BOTH))).play();
 		});
 
 
@@ -202,6 +202,7 @@ public JFXTextAreaSkin(JFXTextArea textArea) {
 					if(newVal!=null){
 						hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 						hideErrorAnimation.setOnFinished(finish->{
+							errorContainer.setVisible(false);
 							JFXUtilities.runInFX(()->showError(newVal));
 						});
 						hideErrorAnimation.play();
@@ -354,6 +355,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 					hideErrorAnimation.stop();
 				hideErrorAnimation = new Timeline(new KeyFrame(Duration.millis(160),new KeyValue(errorContainer.opacityProperty(), 0, Interpolator.EASE_BOTH)));
 				hideErrorAnimation.setOnFinished(finish->{
+					errorContainer.setVisible(false);
 					showError(((JFXTextArea)getSkinnable()).getActiveValidator());
 				});
 				hideErrorAnimation.play();

File: src/com/jfoenix/skins/JFXButtonSkin.java
Patch:
@@ -71,7 +71,7 @@ public JFXButtonSkin(JFXButton button) {
 							buttonContainer.backgroundProperty().get()!=null && buttonContainer.getBackground().getFills().size() > 0 ?buttonContainer.getBackground().getFills().get(0).getRadii() : defaultRadii,
 							buttonContainer.backgroundProperty().get()!=null && buttonContainer.getBackground().getFills().size() > 0 ?buttonContainer.getBackground().getFills().get(0).getInsets() : Insets.EMPTY));
 				}, buttonContainer.backgroundProperty()));				
-				mask.resize(buttonContainer.getWidth(), buttonContainer.getHeight());
+				mask.resize(buttonContainer.getWidth()-buttonContainer.snappedRightInset()-buttonContainer.snappedLeftInset(), buttonContainer.getHeight()-buttonContainer.snappedBottomInset()-buttonContainer.snappedTopInset());
 				return mask;
 			}
 			@Override protected void initListeners(){

File: src/com/jfoenix/svg/SVGGlyphLoader.java
Patch:
@@ -47,7 +47,7 @@
 
 /**
  * will load icomoon svg font file, it will create a map of the 
- * available svg glyphs. the user can retrive the svg glyph using its name. 
+ * available svg glyphs. the user can retrieve the svg glyph using its name. 
  * 
  * @author  Shadi Shaheen
  * @version 1.0
@@ -63,7 +63,7 @@ public static SVGGlyph getGlyph(String glyphName){
 	}
 
 	/**
-	 * will retrive icons from the glyphs map for a certain glyphName 
+	 * will retrieve icons from the glyphs map for a certain glyphName 
 	 * 
 	 * @param glyphName the glyph name
 	 * @return SVGGlyph node 

File: src/com/jfoenix/skins/JFXButtonSkin.java
Patch:
@@ -171,7 +171,9 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 	private boolean isJavaDefaultBackground(Background background){
 		try{
-			return background.getFills().get(0).getFill().toString().equals("0xffffffba");	
+			return background.getFills().get(0).getFill().toString().equals("0xffffffba") 
+				|| background.getFills().get(0).getFill().toString().equals("0xffffffbf") 
+				|| background.getFills().get(0).getFill().toString().equals("0xffffffbd");	
 		}catch(Exception e){
 			return false;
 		}

File: src/com/jfoenix/controls/JFXDecorator.java
Patch:
@@ -64,8 +64,8 @@
 
 /**
  * Window Decorator allow to resize/move its content
- * Note: the default close button will call Platform.exit() which will close the 
- * java application, however it can be customized by calling {@link #setOnCloseButtonAction(Runnable)} 
+ * Note: the default close button will call stage.close() which will only close the current stage. 
+ * it will not close the java application, however it can be customized by calling {@link #setOnCloseButtonAction(Runnable)} 
  * 
  * @author  Shadi Shaheen
  * @version 1.0
@@ -87,7 +87,7 @@ public class JFXDecorator extends VBox {
 	private Timeline windowDecoratorAnimation;
 	private StackPane contentPlaceHolder = new StackPane();
 	private HBox buttonsContainer;
-	private ObjectProperty<Runnable> onCloseButtonAction = new SimpleObjectProperty<>(()->{Platform.exit();});
+	private ObjectProperty<Runnable> onCloseButtonAction = new SimpleObjectProperty<>(()->{primaryStage.close();});
 
 	private BooleanProperty customMaximize = new SimpleBooleanProperty(false);
 	private boolean maximized = false;

File: src/com/jfoenix/skins/JFXToggleNodeSkin.java
Patch:
@@ -93,7 +93,7 @@ public JFXToggleNodeSkin(JFXToggleNode toggleNode) {
 			// show animation only on user action
 			if(!toggleNode.isDisableAnimation()){
 				if(ft==null){
-					ft = new JFXFillTransition(Duration.millis(320), main);
+					ft = new JFXFillTransition(Duration.millis(120), main);
 					ft.toValueProperty().bind(toggleNode.selectedColorProperty());
 					ft.fromValueProperty().bind(toggleNode.unSelectedColorProperty());
 				}

File: src/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -56,9 +56,7 @@ public class JFXListCell<T> extends ListCell<T> {
 
 	protected JFXRippler cellRippler = new JFXRippler(new StackPane()){		
 		@Override protected void initListeners(){
-			ripplerPane.setOnMousePressed((event) -> {
-				createRipple(event.getX(),event.getY());				
-			});
+			ripplerPane.setOnMousePressed((event) -> createRipple(event.getX(),event.getY()));
 		}
 	};
 

File: src/com/jfoenix/controls/JFXNodesList.java
Patch:
@@ -117,7 +117,7 @@ public void animateList(){
 		if(animateTimeline.getStatus().equals(Status.RUNNING)) animateTimeline.stop();
 		
 		animateTimeline.getKeyFrames().clear();
-		double duration = 120/this.getChildren().size();
+		double duration = 120/(double)this.getChildren().size();
 
 		// show child nodes 
 		if(expanded) this.getChildren().forEach(child->child.setVisible(true));

File: src/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -136,7 +136,7 @@ private boolean updateDisplayText(ListCell<T> cell, T item, boolean empty) {
 				cell.setText(null);
 				cell.setGraphic(node==null? newNode : node);
 			}
-			return newNode == null;
+			return node == null;
 		} else {
 			// run item through StringConverter if it isn't null
 			StringConverter<T> c = ((JFXComboBox<T>)getSkinnable()).getConverter();

File: src/com/jfoenix/android/skins/JFXPasswordFieldSkinAndroid.java
Patch:
@@ -227,7 +227,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXPasswordField)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXPasswordField)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -268,7 +268,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXTextArea)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXTextArea)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/android/skins/JFXTextFieldSkinAndroid.java
Patch:
@@ -227,7 +227,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 		
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXTextField)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXTextField)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/skins/JFXPasswordFieldSkin.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.jfoenix.concurrency.JFXUtilities;
 import com.jfoenix.controls.JFXPasswordField;
+import com.jfoenix.controls.JFXTextField;
 import com.jfoenix.transitions.CachedTransition;
 import com.jfoenix.validation.base.ValidatorBase;
 import com.sun.javafx.scene.control.skin.TextFieldSkin;
@@ -220,7 +221,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXPasswordField)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXPasswordField)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -21,6 +21,7 @@
 import java.lang.reflect.Field;
 
 import com.jfoenix.concurrency.JFXUtilities;
+import com.jfoenix.controls.JFXPasswordField;
 import com.jfoenix.controls.JFXTextArea;
 import com.jfoenix.transitions.CachedTransition;
 import com.jfoenix.validation.base.ValidatorBase;
@@ -262,7 +263,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXTextArea)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXTextArea)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/skins/JFXTextFieldSkin.java
Patch:
@@ -220,7 +220,7 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 		
 		// change control properties if and only if animations are stopped 
 		if((transition == null || transition.getStatus().equals(Status.STOPPED))){
-			if(getSkinnable().isFocused()){
+			if(getSkinnable().isFocused() && ((JFXTextField)getSkinnable()).isLabelFloat()){
 				promptTextFill.set(((JFXTextField)getSkinnable()).getFocusColor());
 			}
 		}

File: src/com/jfoenix/android/skins/JFXTextAreaSkinAndroid.java
Patch:
@@ -425,6 +425,9 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 				promptText.visibleProperty().set(true);
 				getSkinnable().textProperty().addListener(textPromptListener);
 				getSkinnable().focusedProperty().addListener(focusPromptTextListener);
+				// override java transparent color for prompt text if the control was focused
+				if(promptTextFill.get().equals(Color.TRANSPARENT) && getSkinnable().isFocused()) promptTextFill.set(Color.valueOf("#b2b2b2"));
+				if(getSkinnable().isFocused()) floatLabel.set(true);
 			}
 
 			mainPane.getChildren().remove(line);

File: src/com/jfoenix/skins/JFXTextAreaSkin.java
Patch:
@@ -418,6 +418,9 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 				promptText.visibleProperty().set(true);
 				getSkinnable().textProperty().addListener(textPromptListener);
 				getSkinnable().focusedProperty().addListener(focusPromptTextListener);
+				// override java transparent color for prompt text if the control was focused
+				if(promptTextFill.get().equals(Color.TRANSPARENT) && getSkinnable().isFocused()) promptTextFill.set(Color.valueOf("#b2b2b2"));
+				if(getSkinnable().isFocused()) floatLabel.set(true);
 			}
 
 			mainPane.getChildren().remove(line);

File: src/com/jfoenix/controls/RecursiveTreeItem.java
Patch:
@@ -107,8 +107,7 @@ public RecursiveTreeItem(final T value, Node graphic, Callback<RecursiveTreeObje
 	 */
 	public RecursiveTreeItem(ObservableList<T> dataList, Callback<RecursiveTreeObject<T>, ObservableList<T>> func) {
 		RecursiveTreeObject<T> root = new RecursiveTreeObject<>();
-		root.getChildren().addAll(dataList);
-
+		root.setChildren(dataList);
 		this.childrenFactory = func;
 		init(root);
 	}

File: src/com/jfoenix/skins/JFXListViewSkin.java
Patch:
@@ -49,7 +49,7 @@ public JFXListViewSkin(final JFXListView<T> listView) {
         		Platform.runLater(()->getSkinnable().requestLayout());
         	}).start();
         });
-//        flow.setCreateCell(flow1 -> JFXListViewSkin.this.createCell());        
+//      flow.setCreateCell(flow1 -> JFXListViewSkin.this.createCell());        
     }
     
 //    @Override protected void layoutChildren(final double x, final double y,
@@ -88,7 +88,7 @@ private double estimateHeight(){
         // compute the gap between list cells
     	
     	JFXListView<T> listview = ((JFXListView<T>) getSkinnable());
-    	double gap = listview.isExpanded()? ((JFXListView<T>) getSkinnable()).getVerticalGap() * (getSkinnable().getItems().size() - 1) : 0;
+    	double gap = listview.isExpanded()? ((JFXListView<T>) getSkinnable()).getVerticalGap() * (getSkinnable().getItems().size()) : 0;
         // compute the height of each list cell
     	double cellsHeight = 0;
     	for(int i = 0 ; i < flow.getCellCount(); i++){

File: src/com/jfoenix/skins/JFXRadioButtonSkin.java
Patch:
@@ -34,6 +34,7 @@
 import javafx.scene.layout.StackPane;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Circle;
+import javafx.scene.text.Text;
 import javafx.util.Duration;
 
 /**
@@ -84,7 +85,6 @@ public JFXRadioButtonSkin(RadioButton control) {
 		container.getChildren().add(rippler);
 		AnchorPane.setRightAnchor(rippler, labelOffset);
 		updateChildren();
-		
 	}
 
 	@Override
@@ -107,13 +107,14 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 		maxHeight = Math.max(contHeight, labelHeight);
 		final double xOffset = computeXOffset(w, labelWidth + contWidth, radioButton.getAlignment().getHpos()) + x;
 		final double yOffset = computeYOffset(h, maxHeight, radioButton.getAlignment().getVpos()) + x;
-
+		
 		if (invalid) {
 			initializeComponents(x, y, w, h);
 			invalid = false;
 		}
 		
         layoutLabelInArea(xOffset + contWidth, yOffset, labelWidth, maxHeight,  radioButton.getAlignment());
+        ((Text)getChildren().get(0)).textProperty().set(getSkinnable().textProperty().get());
         container.resize(snapSize(contWidth), snapSize(contHeight));		
         positionInArea(container, xOffset, yOffset, contWidth, maxHeight, 0, radioButton.getAlignment().getHpos(), radioButton.getAlignment().getVpos());
 	}

File: src/com/jfoenix/skins/JFXListViewSkin.java
Patch:
@@ -86,7 +86,9 @@ private double estimateHeight(){
 //        	borderWidth += getSkinnable().getPadding().getBottom();
 //        }
         // compute the gap between list cells
-    	double gap = ((JFXListView<T>) getSkinnable()).currentVerticalGapProperty().get() * (getSkinnable().getItems().size() - 1);
+    	
+    	JFXListView<T> listview = ((JFXListView<T>) getSkinnable());
+    	double gap = listview.isExpanded()? ((JFXListView<T>) getSkinnable()).getVerticalGap() * (getSkinnable().getItems().size() - 1) : 0;
         // compute the height of each list cell
     	double cellsHeight = 0;
     	for(int i = 0 ; i < flow.getCellCount(); i++){

File: src/com/jfoenix/skins/JFXToggleButtonSkin.java
Patch:
@@ -115,7 +115,7 @@ public JFXToggleButtonSkin(JFXToggleButton toggleButton) {
 			circleContainer.setTranslateX((line.getLayoutBounds().getWidth()/2) - circleRadius);
 			line.setStroke(((JFXToggleButton) getSkinnable()).getToggleLineColor());
 			circle.setFill(((JFXToggleButton) getSkinnable()).getToggleColor());
-			transition.playFrom(Duration.millis(100));
+//			transition.playFrom(Duration.millis(100));
 		}
 	}
 

File: src/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -41,6 +41,7 @@
 import javafx.css.StyleableObjectProperty;
 import javafx.css.StyleableProperty;
 import javafx.event.Event;
+import javafx.geometry.Bounds;
 import javafx.scene.CacheHint;
 import javafx.scene.Group;
 import javafx.scene.Node;

File: demo/demos/datafx/AnimatedFlowContainer.java
Patch:
@@ -91,15 +91,12 @@ public void changeAnimation(ContainerAnimations animation){
     @Override
     public <U> void setViewContext(ViewContext<U> context) {
         updatePlaceholder(context.getRootNode());
-
         if (animation != null) {
             animation.stop();
         }
-
         animation = new Timeline();
         animation.getKeyFrames().addAll(animationProducer.apply(this));
         animation.getKeyFrames().add(new KeyFrame(duration, (e) -> clearPlaceholder()));
-
         animation.play();
     }
 
@@ -127,6 +124,8 @@ public StackPane getView() {
     private void clearPlaceholder() {
         placeholder.setImage(null);
         placeholder.setVisible(false);
+        placeholder.setFitHeight(1);
+        placeholder.setFitWidth(1);
     }
 
     private void updatePlaceholder(Node newView) {

File: src/com/jfoenix/controls/JFXDatePicker.java
Patch:
@@ -109,7 +109,7 @@ public final void setDialogParent(final StackPane dialogParent) {
 	/**
 	 * property that holds the time value if showing the time picker
 	 */
-    private ObjectProperty<LocalTime> lastValidTime = new SimpleObjectProperty<>(LocalTime.now());
+    private ObjectProperty<LocalTime> lastValidTime = new SimpleObjectProperty<>();
     
 	public final ObjectProperty<LocalTime> timeProperty() {
 		return this.lastValidTime;

File: src/com/jfoenix/controls/JFXSnackbar.java
Patch:
@@ -122,10 +122,11 @@ public JFXSnackbar(Pane snackbarContainer) {
 		//popup.requestLayout();
 		popup.setVisible(false);
 
+		sizeListener = (o, oldVal, newVal) ->{refreshPopup();};
+		
 		// register the container before resizing it
 		registerSnackbarContainer(snackbarContainer);
 		
-		sizeListener = (o, oldVal, newVal) ->{refreshPopup();};
 		// resize the popup if its layout has been changed
 		popup.layoutBoundsProperty().addListener((o,oldVal,newVal)-> refreshPopup());
 

File: src/com/jfoenix/controls/JFXListCell.java
Patch:
@@ -259,7 +259,7 @@ else if(newNode instanceof JFXListView<?>){
 //								borderWidth += listview.getPadding().getTop();
 //								borderWidth += listview.getPadding().getBottom();
 //							}
-							double newHeight = (this.getHeight() + listview.currentVerticalGapProperty().get()) * listview.getItems().size() + this.snappedTopInset() + this.snappedBottomInset() - listview.currentVerticalGapProperty().get();
+							double newHeight = (this.getHeight() + listview.currentVerticalGapProperty().get()) * listview.getItems().size() + listview.snappedTopInset() + listview.snappedBottomInset() - listview.currentVerticalGapProperty().get();
 							/*
 							 *  expanding list will ignore its maxheight property. 
 							 *  the maxHeight property shouldn't be set by the user, otherwise

File: src/com/jfoenix/controls/JFXDrawer.java
Patch:
@@ -129,6 +129,8 @@ public JFXDrawer(){
 		overlayPane.setOnMouseClicked((e) -> hide());
 		initListeners();
 
+		//  init size value
+		setDefaultDrawerSize(100);
 	}
 
 

File: src/com/jfoenix/skins/JFXSliderSkin.java
Patch:
@@ -202,7 +202,7 @@ private void initListeners() {
 			// prevent internal color change
 			if(!internalChange && newVal!=null){				
 				thumbColor = newVal.getFills().get(0).getFill();
-				if(getSkinnable().getValue() == 0){
+				if(getSkinnable().getValue() == getSkinnable().getMin()){
 					internalChange = true;
 					thumb.setBackground(new Background(new BackgroundFill(trackColor, new CornerRadii(20), Insets.EMPTY)));
 					internalChange = false;

File: src/com/jfoenix/skins/JFXRadioButtonSkin.java
Patch:
@@ -69,6 +69,9 @@ public JFXRadioButtonSkin(RadioButton control) {
 		dot = new Circle();
 		dot.setRadius(minRadius);
 		dot.setFill(selectedColor);
+		dot.fillProperty().addListener((o,oldVal,newVal)->{
+			selectedColor = (Color) newVal;
+		});
 		dot.getStyleClass().setAll("dot");
 
 		StackPane boxContainer = new StackPane();

File: src/com/jfoenix/skins/JFXCustomColorPicker.java
Patch:
@@ -69,7 +69,7 @@ class JFXCustomColorPicker extends Pane {
 	private double centerY = distance;
 	private double radius = 110;
 
-	private int shapesNumber = 20;
+	private int shapesNumber = 13;
 	private ArrayList<RecentColorPath> shapes = new ArrayList<>();
 	private CachedTransition showAnimation;
 	private JFXColorPickerUI hslColorPicker;

File: src/com/jfoenix/skins/JFXSliderSkin.java
Patch:
@@ -365,7 +365,7 @@ private void positionThumb(final boolean animate) {
 		if (s.getValue() > s.getMax()) {
 			return;// this can happen if we are bound to something 
 		}
-		final double endX = (isHorizontal) ? trackStart + (((trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin()))))) : thumbLeft;
+		final double endX = (isHorizontal) ? trackStart + (((trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin()))))) - snappedLeftInset() : thumbLeft;
 		final double endY = (isHorizontal) ? thumbTop : snappedTopInset() + thumbRadius + trackLength - (trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin())));
 
 		if (animate) {

File: demo/demos/IcoMoonFontViewer.java
Patch:
@@ -36,7 +36,7 @@
 import com.jfoenix.svg.SVGGlyphLoader;
 
 /**
- * @author sshahine
+ * @author Shadi Shaheen
  *
  */
 

File: src/com/jfoenix/skins/JFXComboBoxListViewSkin.java
Patch:
@@ -24,6 +24,7 @@
 import com.jfoenix.converters.base.NodeConverter;
 import com.sun.javafx.scene.control.skin.ComboBoxListViewSkin;
 
+import javafx.beans.value.WeakChangeListener;
 import javafx.scene.Node;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
@@ -90,7 +91,7 @@ public JFXComboBoxListViewSkin(final JFXComboBox<T> comboBox) {
 			Field listView = this.getClass().getSuperclass().getDeclaredField("listView");
 			listView.setAccessible(true);
 			ListView<T> view = (ListView) listView.get(this);
-			view.prefWidthProperty().bind(getSkinnable().widthProperty());
+			view.widthProperty().addListener(new WeakChangeListener<>((o,oldVal,newVal)-> view.setPrefWidth(newVal.doubleValue())));
 		} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();

File: src/com/jfoenix/skins/JFXListViewSkin.java
Patch:
@@ -44,7 +44,8 @@ public JFXListViewSkin(final JFXListView<T> listView) {
     
     @Override protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
     	if (getSkinnable().getItems().size() <= 0) return 200;
-    	if(getSkinnable().getMaxHeight() > 0) return getSkinnable().getMaxHeight();    	
+    	if(getSkinnable().getMaxHeight() > 0) return getSkinnable().getMaxHeight();
+    	if(getSkinnable().maxHeightProperty().isBound()) return super.computePrefHeight(width, topInset, rightInset, bottomInset, leftInset);
         return estimateHeight();
     }
     

File: src/com/jfoenix/controls/JFXDialog.java
Patch:
@@ -207,6 +207,7 @@ public void show(Pane dialogContainer){
 	}
 
 	public void show(){
+		animation = getShowAnimation(transitionType.get());
 		animation.play();		
 	}
 

File: src/com/jfoenix/controls/JFXDialog.java
Patch:
@@ -207,6 +207,7 @@ public void show(Pane dialogContainer){
 	}
 
 	public void show(){
+		animation = getShowAnimation(transitionType.get());
 		animation.play();		
 	}
 

File: src/com/jfoenix/controls/JFXRippler.java
Patch:
@@ -276,7 +276,7 @@ public void createRipple() {
 							// remove overlay rect after 200 ms in case rippler is not generated
 							new Thread(()->{
 								try { Thread.sleep(200); } catch (Exception e1) { }
-								if(getChildren().size() == 1)
+								if(getChildren().size() == 1 && !toggled)
 									resetOverLay();
 							}).start();
 						});

File: src/com/jfoenix/controls/JFXToolbar.java
Patch:
@@ -35,8 +35,10 @@ public JFXToolbar() {
 		initialize();
 		this.setLeft(leftBox);
 		leftBox.getStyleClass().add("tool-bar-left-box");
+		leftBox.setPickOnBounds(false);
 		this.setRight(rightBox);
 		rightBox.getStyleClass().add("tool-bar-right-box");
+		rightBox.setPickOnBounds(false);
 		JFXDepthManager.setDepth(this, 1);
 	}
 	

File: src/com/jfoenix/controls/JFXNodesList.java
Patch:
@@ -71,6 +71,7 @@ public void addAnimatedNode(Region node, Callback<Boolean, ArrayList<KeyValue>>
 		else {
 			if(node instanceof Button) ((Button)node).setOnAction((action)-> this.animateList());
 			else node.setOnMouseClicked((click)-> this.animateList());
+			node.getStyleClass().add("trigger-node");
 		}
 		
 		// init the list height and width
@@ -126,6 +127,7 @@ public void animateList(){
 	protected void initNode(Node node){
 		node.setScaleX(0);
 		node.setScaleY(0);
+		node.getStyleClass().add("sub-node");
 	}
 	
 	// init default animation keyvalues

File: src/com/jfoenix/skins/ComboBoxPopupControl.java
Patch:
@@ -68,7 +68,7 @@ protected PopupControl getPopup() {
     private Point2D getPrefPopupPosition() {
         double dx = 0;
         dx += (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) ? -3 : 0;
-        return com.sun.javafx.Utils.pointRelativeTo(getSkinnable(), getPopupContent(), HPos.CENTER, VPos.BOTTOM, dx, 0, false);
+        return Utils.pointRelativeTo(getSkinnable(), getPopupContent(), HPos.CENTER, VPos.BOTTOM, dx, 0, false);
     }
     
     private void positionAndShowPopup() {

File: demo/demos/components/DrawerDemo.java
Patch:
@@ -41,8 +41,8 @@ public void start(Stage primaryStage) throws Exception {
 		StackPane bottomDrawerPane = new StackPane();
 		bottomDrawerPane.getStyleClass().add("deep-purple-400");
 		bottomDrawerPane.getChildren().add(new JFXButton("Bottom Content"));		
-		bottomDrawer.setDirection(DrawerDirection.BOTTOM);		
 		bottomDrawer.setDefaultDrawerSize(250);
+		bottomDrawer.setDirection(DrawerDirection.BOTTOM);		
 		bottomDrawer.setSidePane(bottomDrawerPane);
 //		bottomDrawer.setContent(leftDrawer);
 		bottomDrawer.setOverLayVisible(false);

File: src/com/jfoenix/skins/JFXTabPaneSkin.java
Patch:
@@ -622,8 +622,9 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 						tabsContainer.setTranslateX(tabsContainer.getTranslateX() + contentWidth*diffTabsIndices);	
 						diffTabsIndices = 0;
 					}
-					Timeline animateTimeline = new Timeline(new KeyFrame(Duration.millis(320), new KeyValue(tabsContainer.translateXProperty(), -contentWidth*index, Interpolator.EASE_BOTH)));				
-					animateTimeline.play();
+					// animate upon tab selection only otherwise just translate the selected tab 
+					if(isSelectingTab) new Timeline(new KeyFrame(Duration.millis(320), new KeyValue(tabsContainer.translateXProperty(), -contentWidth*index, Interpolator.EASE_BOTH))).play();
+					else tabsContainer.setTranslateX(-contentWidth*index);
 				}
 			}
 

File: src/com/cctintl/jfx/skins/JFXTextFieldSkin.java
Patch:
@@ -185,8 +185,7 @@ public JFXTextFieldSkin(JFXTextField field) {
 	protected void layoutChildren(final double x, final double y, final double w, final double h) {
 		super.layoutChildren(x, y, w, h);
 
-		if(invalid){
-
+		if(invalid){			
 			textPane = ((Pane)this.getChildren().get(0));
 			textPane.prefWidthProperty().bind(getSkinnable().prefWidthProperty());
 			errorLabel.maxWidthProperty().bind(Bindings.createDoubleBinding(()->textPane.getWidth()/1.14, textPane.widthProperty()));
@@ -246,6 +245,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			textPane.getChildren().remove(cursorPane);
 			textPane.getChildren().add(cursorPane);
 
+			if(getSkinnable().isFocused()) focus();
+			
 			invalid = false;
 		}		
 

File: demo/demos/MainDemo.java
Patch:
@@ -19,7 +19,7 @@ public void start(Stage stage) throws Exception {
 		flow.createHandler().start(container);
 		Scene scene = new Scene(container.getView(), 800, 800);
 //		Font.loadFont(MainDemo.class.getResource("/resources/roboto/Roboto-Medium.ttf").toExternalForm(), 10);
-		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/jfx-components.css").toExternalForm());
+		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/jfoenix-main-demo.css").toExternalForm());
 //		stage.initStyle(StageStyle.UNDECORATED);
 //		stage.setFullScreen(true);
 		stage.setScene(scene);

File: demo/demos/components/DrawerDemo.java
Patch:
@@ -34,9 +34,9 @@ public void start(Stage primaryStage) throws Exception {
 		pane.getChildren().add(drawer);
 		pane.setStyle("-fx-background-color:WHITE");		
 		final Scene scene = new Scene(pane, 800, 800);
-		scene.getStylesheets().add(DrawerDemo.class.getResource("css/styles.css").toExternalForm());
+		scene.getStylesheets().add(DrawerDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 
-		primaryStage.setTitle("JavaFX Drawer");
+		primaryStage.setTitle("JFX Drawer Demo");
 		primaryStage.setScene(scene);
 		primaryStage.setResizable(false);
 		primaryStage.show();		

File: demo/demos/components/NodesListDemo.java
Patch:
@@ -14,9 +14,8 @@
 import javafx.stage.Stage;
 
 import com.cctintl.jfx.controls.JFXButton;
-import com.cctintl.jfx.controls.JFXNodesList;
-import com.cctintl.jfx.controls.JFXNodesListContainer;
 import com.cctintl.jfx.controls.JFXButton.ButtonType;
+import com.cctintl.jfx.controls.JFXNodesList;
 
 
 public class NodesListDemo extends Application {
@@ -115,7 +114,7 @@ public void start(Stage primaryStage) throws Exception {
 			main.getChildren().add(nodesList);
 			
 			Scene scene = new Scene(main, 600, 600);
-			scene.getStylesheets().add(InputDemo.class.getResource("css/styles.css").toExternalForm());
+			scene.getStylesheets().add(NodesListDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 			primaryStage.setScene(scene);
 			primaryStage.show();
 

File: demo/demos/components/SliderDemo.java
Patch:
@@ -44,11 +44,12 @@ public void start(Stage primaryStage) throws Exception {
 
 			Scene scene = new Scene(new Group());
 			((Group) scene.getRoot()).getChildren().add(vbox);
-			//scene.getStylesheets().add(SliderDemo.class.getResource("/resources/css/jfx-components.css").toExternalForm());
+			scene.getStylesheets().add(SliderDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 			primaryStage.setScene(scene);
 			primaryStage.setWidth(900);
 			primaryStage.setHeight(900);
 			primaryStage.show();
+			primaryStage.setTitle("JFX Slider Demo");
 		} catch (Exception e) {
 			e.printStackTrace();
 		}

File: demo/demos/components/SpinnerDemo.java
Patch:
@@ -16,9 +16,9 @@ public void start(final Stage stage) throws Exception {
 
 		final Group group = new Group();
 		final Scene scene = new Scene(group, 800, 800);
-		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/jfx-components.css").toExternalForm());
+		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 		stage.setScene(scene);
-		stage.setTitle("C3D Spinner");
+		stage.setTitle("JFX Spinner Demo");
 		stage.show();
 		JFXSpinner spinner = new JFXSpinner();
 		group.getChildren().add(spinner);

File: demo/demos/components/TabsDemo.java
Patch:
@@ -64,9 +64,10 @@ public void start(Stage primaryStage) {
 		hbox.setAlignment(Pos.CENTER);
 
 		root.getChildren().addAll(hbox);
-		scene.getStylesheets().add(InputDemo.class.getResource("css/styles.css").toExternalForm());
+		scene.getStylesheets().add(TabsDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 		primaryStage.setScene(scene);
 		primaryStage.show();
+		primaryStage.setTitle("JFX Tabs Demo");
 	}
 
 	private SecureRandom random = new SecureRandom();

File: demo/demos/components/ToolBarDemo.java
Patch:
@@ -21,7 +21,7 @@ public void start(Stage primaryStage) throws Exception {
 			
 			main.getChildren().add(c3dToolbar);
 			Scene scene = new Scene(main, 600, 400);
-			scene.getStylesheets().add(InputDemo.class.getResource("css/styles.css").toExternalForm());
+			scene.getStylesheets().add(ToolBarDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 			primaryStage.setScene(scene);
 			primaryStage.show();
 		} catch (Exception e) {

File: demo/demos/components/TreeTableDemo.java
Patch:
@@ -128,7 +128,7 @@ public void start(Stage primaryStage) throws Exception {
 			main.getChildren().add(size);
 
 			Scene scene = new Scene(main, 475, 500);
-			scene.getStylesheets().add(InputDemo.class.getResource("css/styles.css").toExternalForm());
+			scene.getStylesheets().add(TreeTableDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 			primaryStage.setScene(scene);
 			primaryStage.show();
 

File: demo/demos/components/TreeViewDemo.java
Patch:
@@ -40,7 +40,7 @@ public void start(Stage primaryStage) throws Exception {
 			main.setPadding(new Insets(10));
 			main.getChildren().add(treeView	);
 			Scene scene = new Scene(main, 600, 400);
-			scene.getStylesheets().add(InputDemo.class.getResource("css/styles.css").toExternalForm());
+			scene.getStylesheets().add(TreeViewDemo.class.getResource("/resources/css/jfoenix-components.css").toExternalForm());
 			primaryStage.setScene(scene);
 			primaryStage.show();
 

File: demo/demos/gui/main/MainController.java
Patch:
@@ -19,9 +19,9 @@
 import com.cctintl.jfx.controls.JFXDrawer;
 import com.cctintl.jfx.controls.JFXHamburger;
 import com.cctintl.jfx.controls.JFXPopup;
-import com.cctintl.jfx.controls.JFXRippler;
 import com.cctintl.jfx.controls.JFXPopup.PopupHPosition;
 import com.cctintl.jfx.controls.JFXPopup.PopupVPosition;
+import com.cctintl.jfx.controls.JFXRippler;
 
 import demos.datafx.AnimatedFlowContainer;
 import demos.gui.sidemenu.SideMenuController;

File: src/com/cctintl/jfx/controls/JFXDialog.java
Patch:
@@ -213,7 +213,7 @@ private Transition getShowAnimation(DialogTransition transitionType){
 				break;
 			}
 		}
-		animation.setOnFinished((finish)->onDialogOpenedProperty.get().handle(new JFXDialogEvent(JFXDialogEvent.OPENED)));
+		if(animation!=null)animation.setOnFinished((finish)->onDialogOpenedProperty.get().handle(new JFXDialogEvent(JFXDialogEvent.OPENED)));
 		return animation;
 	}
 

File: src/com/cctintl/jfx/controls/JFXListCell.java
Patch:
@@ -215,20 +215,20 @@ else if(newNode instanceof JFXListView<?>){
 						// initialize the gaps between cells
 						double cellInsetHgap = ((JFXListView<T>)getListView()).getCellHorizontalMargin().doubleValue();
 						double cellInsetVgap = ((JFXListView<T>)getListView()).getCellVerticalMargin().doubleValue();
-						if(cellContainer!=null) StackPane.setMargin(cellContainer, new Insets(cellInsetVgap, cellInsetHgap, cellInsetVgap, cellInsetHgap));
+						StackPane.setMargin(cellContainer, new Insets(cellInsetVgap, cellInsetHgap, cellInsetVgap, cellInsetHgap));
 
 						// add listeners to gaps properties 
 						((JFXListView<T>)getListView()).cellHorizontalMarginProperty().addListener((o,oldVal,newVal)-> {
 							// fit the rippler into the cell bounds
 							double newCellInsetHgap = newVal.doubleValue();
 							double oldCellInsetVgap = ((JFXListView<T>)getListView()).getCellVerticalMargin().doubleValue();
-							if(cellContainer!=null) StackPane.setMargin(cellContainer, new Insets(oldCellInsetVgap, newCellInsetHgap, oldCellInsetVgap, newCellInsetHgap));
+							StackPane.setMargin(cellContainer, new Insets(oldCellInsetVgap, newCellInsetHgap, oldCellInsetVgap, newCellInsetHgap));
 						});
 						((JFXListView<T>)getListView()).cellVerticalMarginProperty().addListener((o,oldVal,newVal)-> {
 							// fit the rippler into the cell bounds
 							double oldCellInsetHgap = ((JFXListView<T>)getListView()).getCellHorizontalMargin().doubleValue();
 							double newCellInsetVgap = newVal.doubleValue();						
-							if(cellContainer!=null) StackPane.setMargin(cellContainer, new Insets(newCellInsetVgap, oldCellInsetHgap, newCellInsetVgap, oldCellInsetHgap));
+							StackPane.setMargin(cellContainer, new Insets(newCellInsetVgap, oldCellInsetHgap, newCellInsetVgap, oldCellInsetHgap));
 						});
 					}
 

File: src/com/cctintl/jfx/controls/JFXSlider.java
Patch:
@@ -56,7 +56,7 @@ public JFXSlider(double min, double max, double value) {
 	}
 
 	private void initialize() {
-		getStyleClass().setAll(DEFAULT_STYLE_CLASS);
+		getStyleClass().add(DEFAULT_STYLE_CLASS);
 	}
 
 	@Override

File: src/com/cctintl/jfx/controls/JFXSpinner.java
Patch:
@@ -45,8 +45,7 @@ public class JFXSpinner extends Region {
 
 	public JFXSpinner() {
 		super();
-
-		getStyleClass().setAll(DEFAULT_STYLE_CLASS);
+		getStyleClass().add(DEFAULT_STYLE_CLASS);
 		initialize();
 	}
 

File: src/com/cctintl/jfx/controls/JFXTabPane.java
Patch:
@@ -46,7 +46,7 @@ protected Skin<?> createDefaultSkin() {
 	}
 
 	private void initialize() {
-		this.getStyleClass().setAll(DEFAULT_STYLE_CLASS);
+		this.getStyleClass().add(DEFAULT_STYLE_CLASS);
 	}
 	
 	public void propagateMouseEventsToParent(){

File: src/com/cctintl/jfx/controls/JFXToggleButton.java
Patch:
@@ -45,6 +45,8 @@
 
 public class JFXToggleButton extends ToggleButton {
 
+	private static final String DEFAULT_STYLE_CLASS = "jfx-toggle-button";
+	
 	public JFXToggleButton() {
 		super();
 		initialize();
@@ -56,7 +58,7 @@ protected Skin<?> createDefaultSkin()	{
 	}
 	
 	private void initialize() {
-		this.getStyleClass().add("jfx-toggle-button");        
+		this.getStyleClass().add(DEFAULT_STYLE_CLASS);        
 	}
 	
 

File: src/com/cctintl/jfx/controls/JFXToggleNode.java
Patch:
@@ -34,6 +34,8 @@
 @DefaultProperty(value="graphic")
 public class JFXToggleNode extends ToggleButton {
 
+	private static final String DEFAULT_STYLE_CLASS = "jfx-toggle-node";
+	
 	public JFXToggleNode() {
 		super();
 		initialize();
@@ -45,7 +47,7 @@ protected Skin<?> createDefaultSkin()	{
 	}
 	
 	private void initialize() {
-		this.getStyleClass().add("jfx-toggle-node");        
+		this.getStyleClass().add(DEFAULT_STYLE_CLASS);        
 	}
 	
 	

File: src/com/cctintl/c3dfx/controls/C3DRippler.java
Patch:
@@ -174,7 +174,7 @@ public void setEnabled(boolean enable){
 	 *  clipping mask
 	 * @return
 	 */
-	protected Shape getMask(){
+	protected Node getMask(){
 		Shape mask = new Rectangle(control.getBoundsInParent().getWidth() - 0.1,control.getBoundsInParent().getHeight() - 0.1); // -0.1 to prevent resizing the anchor pane
 		if(maskType.get().equals(C3DRippler.RipplerMask.CIRCLE))
 			mask = new Circle(control.getBoundsInParent().getWidth()/2 , control.getBoundsInParent().getHeight()/2, (control.getBoundsInParent().getWidth()/2) - 0.1, Color.BLUE);	

File: src/com/cctintl/c3dfx/skins/C3DButtonSkin.java
Patch:
@@ -70,7 +70,7 @@ public class C3DButtonSkin extends ButtonSkin {
 	public C3DButtonSkin(C3DButton button) {
 		super(button);
 
-		if(button.getBackground().getFills().get(0).getFill().toString().equals("0xffffffba"))
+		if(button.getBackground() == null || button.getBackground().getFills().get(0).getFill().toString().equals("0xffffffba"))
 			button.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, null, null)));
 
 		// create button

File: src/com/cctintl/c3dfx/skins/C3DListViewSkin.java
Patch:
@@ -316,8 +316,9 @@ private static <T> ListCell<T> createDefaultCellImpl() {
         } else {
             flow.resizeRelocate(x, y, w, h);
             // FIXME, CHANGE THE HEIGHT if 3D is active or not
-            if(flow.getCellCount() > 0 && getSkinnable().getPrefHeight() == -1)
-            	getSkinnable().setPrefHeight(estimateHeight());
+            double estimatedHeight = estimateHeight();
+            if(flow.getCellCount() > 0 && estimatedHeight < getSkinnable().getPrefHeight())
+            	getSkinnable().setPrefHeight(estimatedHeight);
         }
     }
     

File: demo/demos/components/TreeTableDemo.java
Patch:
@@ -1,6 +1,7 @@
 package demos.components;
 
 import javafx.application.Application;
+import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.collections.FXCollections;
@@ -123,6 +124,7 @@ public void start(Stage primaryStage) throws Exception {
 				treeView.setPredicate(user -> user.getValue().age.get().contains(newVal) || user.getValue().department.get().contains(newVal) || user.getValue().userName.get().contains(newVal));
 			});
 
+			size.textProperty().bind(Bindings.createStringBinding(()->treeView.getCurrentItemsCount()+"", treeView.currentItemsCountProperty()));
 			main.getChildren().add(size);
 
 			Scene scene = new Scene(main, 475, 500);

File: src/com/cctintl/c3dfx/controls/behavior/C3DTreeTableCellBehavior.java
Patch:
@@ -3,8 +3,6 @@
 import javafx.scene.Node;
 import javafx.scene.control.TreeItem;
 import javafx.scene.control.TreeTableCell;
-import javafx.scene.control.TreeTableColumn;
-import javafx.scene.control.TreeTableView;
 
 import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;
 

File: src/com/cctintl/c3dfx/skins/C3DListViewSkin.java
Patch:
@@ -315,9 +315,8 @@ private static <T> ListCell<T> createDefaultCellImpl() {
             }
         } else {
             flow.resizeRelocate(x, y, w, h);
-
             // FIXME, CHANGE THE HEIGHT if 3D is active or not
-            if(flow.getCellCount() > 0)
+            if(flow.getCellCount() > 0 && getSkinnable().getPrefHeight() == -1)
             	getSkinnable().setPrefHeight(estimateHeight());
         }
     }

File: src/com/cctintl/c3dfx/controls/cells/editors/TextFieldEditorBuilder.java
Patch:
@@ -39,7 +39,7 @@ public void updateItem(String item, boolean empty) {
 	@Override
 	public Region createNode(String value, DoubleBinding minWidthBinding, EventHandler<KeyEvent> keyEventsHandler, ChangeListener<Boolean> focusChangeListener) {
 		StackPane pane = new StackPane();
-		pane.setStyle("-fx-padding:-10 -8 -10 -8");
+		pane.setStyle("-fx-padding:-10 0 -10 0");
 		textField = new C3DTextField(value);
 		textField.setStyle("-fx-background-color:TRANSPARENT;");
 		textField.minWidthProperty().bind(minWidthBinding);

File: src/com/cctintl/c3dfx/controls/cells/editors/base/GenericEditableTreeTableCell.java
Patch:
@@ -172,9 +172,10 @@ public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVa
 				}
 			}
 		};
-		DoubleBinding minWidthBinding = Bindings.createDoubleBinding(()->{return this.getWidth() - this.getGraphicTextGap()*2;}, this.widthProperty(), this.graphicTextGapProperty());
+		DoubleBinding minWidthBinding = Bindings.createDoubleBinding(()->{
+			return this.getWidth() - this.getGraphicTextGap()*2 - this.getBaselineOffset() ;
+		}, this.widthProperty(), this.graphicTextGapProperty());
 		editorNode = builder.createNode(getValue(), minWidthBinding, keyEventsHandler, focusChangeListener);
-		
 	}
 	/**
 	 *

File: src/com/cctintl/c3dfx/controls/C3DRippler.java
Patch:
@@ -228,7 +228,8 @@ protected void createRipple(double x, double y){
 	}
 
 	public void fireEventProgrammatically(Event event){
-		ripplerPane.fireEvent(event);
+		if(!event.isConsumed())
+			ripplerPane.fireEvent(event);
 	}
 
 	public void toggle(){

File: src/com/cctintl/c3dfx/skins/C3DTableColumnHeader.java
Patch:
@@ -87,7 +87,6 @@ public C3DTableColumnHeader(TableViewSkinBase skin, TableColumnBase tc) {
 				arrowContainer.maxWidthProperty().bind(arrow.widthProperty());
 				StackPane.setAlignment(arrowContainer, Pos.CENTER_RIGHT);
 
-				
 				// set padding to the label to replace it with ... if it's too close to the sorting arrow
 				Label label = (Label) container.getChildren().get(0);
 				label.setPadding(new Insets(0,30,0,30));
@@ -119,11 +118,13 @@ public C3DTableColumnHeader(TableViewSkinBase skin, TableColumnBase tc) {
 
 			if(arrowContainer!=null && arrowPane!=null && container.getChildren().size() == 1 && !arrowPane.isVisible()){			
 				if(arrowAnimation!=null && arrowAnimation.getStatus().equals(Status.RUNNING)) arrowAnimation.stop();
+				Label label = (Label) container.getChildren().get(0);
+				label.setPadding(new Insets(0,30,0,30));
 				container.getChildren().add(arrowContainer);
 				arrowAnimation = new Timeline(new KeyFrame(Duration.millis(320),
 						new KeyValue(arrowContainer.opacityProperty(), 0, Interpolator.EASE_BOTH),
 						new KeyValue(arrowContainer.translateYProperty(), getHeight()/4, Interpolator.EASE_BOTH)));
-				arrowAnimation.setOnFinished((finish)->{currentArrowRotation = -1;});
+				arrowAnimation.setOnFinished((finish)->{currentArrowRotation = -1;label.setPadding(new Insets(0));});
 				arrowAnimation.play();
 			}
 		}

File: demo/demos/components/TreeTableDemo.java
Patch:
@@ -1,7 +1,6 @@
 package demos.components;
 
 import javafx.application.Application;
-import javafx.application.Platform;
 import javafx.beans.property.ReadOnlyStringWrapper;
 import javafx.geometry.Insets;
 import javafx.scene.Scene;
@@ -10,8 +9,6 @@
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
 
-import org.scenicview.ScenicView;
-
 import com.cctintl.c3dfx.controls.C3DTreeTableView;
 
 public class TreeTableDemo extends Application {

File: demo/demos/components/TreeTableDemo.java
Patch:
@@ -1,6 +1,7 @@
 package demos.components;
 
 import javafx.application.Application;
+import javafx.application.Platform;
 import javafx.beans.property.ReadOnlyStringWrapper;
 import javafx.geometry.Insets;
 import javafx.scene.Scene;
@@ -9,6 +10,8 @@
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
 
+import org.scenicview.ScenicView;
+
 import com.cctintl.c3dfx.controls.C3DTreeTableView;
 
 public class TreeTableDemo extends Application {

File: demo/demos/gui/sidemenu/SideMenuController.java
Patch:
@@ -114,8 +114,8 @@ public void init() throws FlowException, VetoException {
 	private void bindNodeToController(Node node, Class<?> controllerClass, Flow flow, FlowHandler flowHandler) {
 		flow.withGlobalLink(node.getId(), controllerClass);
 		node.setOnMouseClicked((e) -> {
-			try {
-				flowHandler.handle(node.getId());
+			try {				
+				flowHandler.handle(node.getId());				
 			} catch (Exception e1) {
 				e1.printStackTrace();
 			}

File: demo/demos/gui/main/MainController.java
Patch:
@@ -78,7 +78,7 @@ else if (counter == 1)
 		toolbarPopup.setPopupContainer(root);
 		toolbarPopup.setSource(optionsRippler);
 		optionsBurger.setOnMouseClicked((e) -> {
-			toolbarPopup.show(C3DPopupVPosition.TOP, C3DPopupHPosition.RIGHT, -20, 18);
+			toolbarPopup.show(C3DPopupVPosition.TOP, C3DPopupHPosition.RIGHT, -12, 15);
 		});
 
 		// close application

File: src/com/cctintl/c3dfx/controls/C3DDrawer.java
Patch:
@@ -75,6 +75,7 @@ public C3DDrawer(){
 		sidePane.getStyleClass().add("c3d-drawer-side-pane");
 		sidePane.setBackground(new Background(new BackgroundFill(Color.rgb(255, 255, 255, 1), CornerRadii.EMPTY, Insets.EMPTY)));
 		DepthManager.setDepth(sidePane, 2);
+		sidePane.setPickOnBounds(false);
 
 		this.getChildren().add(content);		
 		this.getChildren().add(overlayPane);

File: src/com/cctintl/c3dfx/controls/C3DPopup.java
Patch:
@@ -62,7 +62,7 @@ public void setPopupContainer(Pane popupContainer) {
 		if(popupContainer!=null){
 			this.popupContainer = popupContainer;
 			// close the popup if clicked on the overlay pane
-			overlayPane.setOnMouseClicked((e)->close());
+			overlayPane.setOnMouseClicked((e)->{ if(e.isStillSincePress())close(); });
 			this.popupContainer.getChildren().remove(overlayPane);
 			this.popupContainer.getChildren().add(overlayPane);
 			animation = new PopupTransition();

File: src/com/cctintl/c3dfx/controls/C3DDrawer.java
Patch:
@@ -113,7 +113,7 @@ private void initListeners(){
 		// content listener for mouse hold on a side
 		this.content.addEventHandler(MouseEvent.MOUSE_PRESSED, (e) -> { 
 			double width = 0 ;
-			long valid = callBacks.parallelStream().filter(callback->!callback.call(null)).count();
+			long valid = callBacks.stream().filter(callback->!callback.call(null)).count();
 			if(directionProperty.get().equals(DrawerDirection.RIGHT)) width = content.getWidth();
 			if(width + directionProperty.get().doubleValue() * e.getX() < activeOffset && (content.getCursor() == Cursor.DEFAULT || content.getCursor() == null) && valid == 0)
 				holdTimer.play(); 

File: demo/demos/gui/main/MainController.java
Patch:
@@ -25,7 +25,7 @@
 
 import demos.datafx.AnimatedFlowContainer;
 import demos.gui.sidemenu.SideMenuController;
-import demos.gui.uicomponents.ListViewController;
+import demos.gui.uicomponents.ButtonController;
 
 @FXMLController(value = "/resources/fxml/Main.fxml", title = "Material Design Example")
 public class MainController {
@@ -89,7 +89,7 @@ else if (counter == 1)
 		// create the inner flow and content
 		context = new ViewFlowContext();
 		// set the default controller 
-		Flow innerFlow = new Flow(ListViewController.class);
+		Flow innerFlow = new Flow(ButtonController.class);
 
 		flowHandler = innerFlow.createHandler(context);
 		context.register("ContentFlowHandler", flowHandler);

File: src/com/cctintl/c3dfx/controls/C3DListCell.java
Patch:
@@ -113,7 +113,8 @@ else if(item instanceof C3DListView<?>){
 						sublistContainer.getStyleClass().add("sublist-container");
 						sublistContainer.getChildren().add(cellContent);
 						sublistContainer.setTranslateY(1);
-						sublistContainer.setOpacity(0);							
+						sublistContainer.setOpacity(0);	
+						
 						sublistContainer.heightProperty().addListener((o,oldVal,newVal)->{
 							// store the hieght of the sublist and resize it to 0 to make it hidden
 							if(subListHeight == -1){
@@ -337,6 +338,7 @@ private void initialize() {
 		cellContainer.getStyleClass().add("c3d-list-cell-content-container");
 		cellContainer.setPadding(new Insets(4,8,4,8));
 		this.setPadding(new Insets(0));
+		totalSubListsHeight = -34;
 	}
 
 }

File: src/com/cctintl/c3dfx/skins/C3DListViewSkin.java
Patch:
@@ -304,7 +304,7 @@ private static <T> ListCell<T> createDefaultCellImpl() {
     private double estimateHeight(double borderWidth ){
     	double gap = ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get() * getSkinnable().getItems().size();
     	double cellsHeight = IntStream.range(0, flow.getCellCount()).mapToDouble(index ->flow.getCell(index).getHeight()).sum();
-    	return cellsHeight + gap + ((C3DListView<T>) getSkinnable()).getCellVerticalMargin() - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get() + borderWidth;
+    	return cellsHeight + gap - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get() + borderWidth + getSkinnable().getItems().size()/2;
     }
     
     @Override protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {

File: demo/demos/gui/main/MainController.java
Patch:
@@ -25,7 +25,7 @@
 
 import demos.datafx.AnimatedFlowContainer;
 import demos.gui.sidemenu.SideMenuController;
-import demos.gui.uicomponents.ButtonController;
+import demos.gui.uicomponents.ListViewController;
 
 @FXMLController(value = "/resources/fxml/Main.fxml", title = "Material Design Example")
 public class MainController {
@@ -89,7 +89,7 @@ else if (counter == 1)
 		// create the inner flow and content
 		context = new ViewFlowContext();
 		// set the default controller 
-		Flow innerFlow = new Flow(ButtonController.class);
+		Flow innerFlow = new Flow(ListViewController.class);
 
 		flowHandler = innerFlow.createHandler(context);
 		context.register("ContentFlowHandler", flowHandler);

File: src/com/cctintl/c3dfx/controls/C3DDrawer.java
Patch:
@@ -111,7 +111,8 @@ private void initListeners(){
 		this.content.addEventHandler(MouseEvent.MOUSE_PRESSED, (e) -> { 
 			double width = 0 ;
 			if(directionProperty.get().equals(DrawerDirection.RIGHT)) width = content.getWidth();
-			if(width + directionProperty.get().doubleValue() * e.getX() < activeOffset && content.getCursor() == Cursor.DEFAULT) holdTimer.play(); 
+			if(width + directionProperty.get().doubleValue() * e.getX() < activeOffset && (content.getCursor() == Cursor.DEFAULT || content.getCursor() == null))
+				holdTimer.play(); 
 		});
 
 		// mouse drag handler

File: src/com/cctintl/c3dfx/controls/C3DDrawer.java
Patch:
@@ -16,6 +16,7 @@
 import javafx.event.EventHandler;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
+import javafx.scene.Cursor;
 import javafx.scene.Node;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.Background;
@@ -110,7 +111,7 @@ private void initListeners(){
 		this.content.addEventHandler(MouseEvent.MOUSE_PRESSED, (e) -> { 
 			double width = 0 ;
 			if(directionProperty.get().equals(DrawerDirection.RIGHT)) width = content.getWidth();
-			if(width + directionProperty.get().doubleValue() * e.getX() < activeOffset) holdTimer.play(); 
+			if(width + directionProperty.get().doubleValue() * e.getX() < activeOffset && content.getCursor() == Cursor.DEFAULT) holdTimer.play(); 
 		});
 
 		// mouse drag handler

File: src/com/cctintl/c3dfx/skins/C3DTextFieldSkin.java
Patch:
@@ -208,9 +208,10 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 		super.layoutChildren(x, y, w, h);
 
 		if(invalid){
-
+			
 			textPane = ((Pane)this.getChildren().get(0));
-
+			textPane.prefWidthProperty().bind(getSkinnable().prefWidthProperty());
+			
 			line.setStartX(0);
 			line.endXProperty().bind(textPane.widthProperty());
 			line.startYProperty().bind(textPane.heightProperty());
@@ -232,7 +233,6 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 				mid = (endX - startX )/2;
 				focusedLine.setStartX(mid);
 				focusedLine.setEndX(mid);
-				System.out.println(startX);
 			});
 
 			startX = 0;

File: src/com/cctintl/c3dfx/validation/base/ValidatorBase.java
Patch:
@@ -44,7 +44,7 @@ public void validate(){
 	protected void onEval(){
 		Node control = getSrcControl();
 		if (hasErrors.get()) {
-			if (control.getStyleClass().indexOf(errorStyleClass) == -1)
+			if (!control.getStyleClass().contains(errorStyleClass.get()))
 				control.getStyleClass().add(errorStyleClass.get());
 		} else{
 			control.getStyleClass().remove(errorStyleClass.get());

File: src/com/cctintl/c3dfx/controls/C3DDrawer.java
Patch:
@@ -156,9 +156,9 @@ public void draw() {
 	}
 
 	public void hide(){
-		if(outTransition.getStatus().equals(Status.STOPPED)){
+		// (sidePane.getTranslateX() == 0), prevents the drawer from playing the hidden animation if it's already closed 
+		if(outTransition.getStatus().equals(Status.STOPPED) && sidePane.getTranslateX() == 0)
 			outTransition.play();
-		}
 	}
 
 	/***************************************************************************

File: src/com/cctintl/c3dfx/controls/C3DHamburger.java
Patch:
@@ -3,6 +3,7 @@
 
 import javafx.animation.Transition;
 import javafx.beans.DefaultProperty;
+import javafx.geometry.Pos;
 import javafx.scene.layout.VBox;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.SVGPath;
@@ -33,6 +34,8 @@ public C3DHamburger() {
 		this.setScaleX(0.8);
 		this.setScaleY(0.8);
 		this.getStyleClass().add("c3d-hamburger-icon");
+		// must be specified 
+		this.setAlignment(Pos.CENTER);
 	}
 
 	public Transition getAnimation() {

File: demo/demos/MainDemo.java
Patch:
@@ -18,6 +18,7 @@ public void start(Stage stage) throws Exception {
 		DefaultFlowContainer container = new DefaultFlowContainer();
 		flow.createHandler().start(container);
 		Scene scene = new Scene(container.getView(), 800, 800);
+//		Font.loadFont(MainDemo.class.getResource("/resources/roboto/Roboto-Medium.ttf").toExternalForm(), 10);
 		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/c3dobjects.css").toExternalForm());
 //		stage.initStyle(StageStyle.UNDECORATED);
 //		stage.setFullScreen(true);

File: src/com/cctintl/c3dfx/controls/C3DDialogLayout.java
Patch:
@@ -18,6 +18,7 @@ public C3DDialogLayout() {
 		initialize();
 		layout.getChildren().add(heading);
 		heading.getStyleClass().add("c3d-layout-heading");
+		heading.getStyleClass().add("title");
 		layout.getChildren().add(body);
 		body.getStyleClass().add("c3d-layout-body");
 		layout.getChildren().add(actions);

File: src/com/cctintl/c3dfx/controls/C3DDialogLayout.java
Patch:
@@ -66,8 +66,8 @@ public void setActions(Node... actions) {
 	private void initialize() {
 		this.getStyleClass().add(DEFAULT_STYLE_CLASS);
 		this.setStyle("-fx-padding: 24px 24px 16px 24px;-fx-text-fill: rgba(0, 0, 0, 0.87);");
-		heading.setStyle("-fx-font-size: 20px;-fx-font-weight: BOLD;-fx-alignment: center-left;-fx-padding: 5 0 5 0;");
-		body.setStyle("	-fx-font-size: 14px;-fx-pref-width: 400px;-fx-wrap-text: true;");
+		heading.setStyle("-fx-font-weight: BOLD;-fx-alignment: center-left;-fx-padding: 5 0 5 0;");
+		body.setStyle("-fx-pref-width: 400px;-fx-wrap-text: true;");
 		actions.setStyle("-fx-padding: 10px 0 0 0 ;-fx-alignment: center-right ;");
 	}
 	

File: src/com/cctintl/c3dfx/skins/C3DCheckBoxSkin.java
Patch:
@@ -79,7 +79,7 @@ public C3DCheckBoxSkin(C3DCheckBox control) {
 			transition.setRate(newVal?1:-1);
 			transition.play();
 		});
-
+		
 		updateChildren();
 
 	}
@@ -123,6 +123,8 @@ protected void layoutChildren(final double x, final double y, final double w, fi
 			leftLine.setEndX((boxWidth+padding-labelOffset)/2 - boxWidth/5.5 );
 			leftLine.setEndY(maxHeight-padding-lineThick);
 			transition = new CheckBoxTransition();
+			if(getSkinnable().isSelected())
+				transition.play();
 			invalid = false;
 		}
 

File: src/com/cctintl/c3dfx/controls/C3DRippler.java
Patch:
@@ -256,11 +256,12 @@ private class OverLayRipple extends Rectangle{
 			Timeline animation = new Timeline(
 					new KeyFrame(Duration.ZERO,
 							new KeyValue(opacityProperty(),  0,Interpolator.EASE_BOTH)
-							),new KeyFrame(Duration.seconds(0.2),
+							),new KeyFrame(Duration.seconds(0.3),
 									new KeyValue(opacityProperty(), 1,Interpolator.EASE_BOTH)
 									));
 			public OverLayRipple() {
 				super(control.getBoundsInParent().getWidth() - 0.1,control.getBoundsInParent().getHeight() - 0.1);
+				this.setOpacity(0);
 			}
 		}
 

File: src/com/cctintl/c3dfx/controls/C3DButton.java
Patch:
@@ -36,7 +36,7 @@ public C3DButton(String text, Node graphic){
 
     private void initialize() {
     	this.getStyleClass().add(DEFAULT_STYLE_CLASS);
-    	this.setText("Button");
+    	if(this.getText()==null) this.setText("Button");
     }
     
 	@Override

File: src/com/cctintl/c3dfx/controls/C3DDialogLayout.java
Patch:
@@ -2,6 +2,7 @@
 
 import javafx.collections.ObservableList;
 import javafx.scene.Node;
+import javafx.scene.layout.FlowPane;
 import javafx.scene.layout.StackPane;
 import javafx.scene.layout.VBox;
 
@@ -10,7 +11,7 @@ public class C3DDialogLayout extends StackPane {
 	private VBox layout = new VBox();
 	private StackPane heading = new StackPane();
 	private StackPane body = new StackPane();
-	private StackPane actions = new StackPane();
+	private FlowPane actions = new FlowPane();
 	
 	public C3DDialogLayout() {
 		super();
@@ -35,7 +36,7 @@ public ObservableList<Node> getHeading() {
 	}
 
 	public void setHeading(Node... titleContent) {
-		this.heading.getChildren().addAll(heading);
+		this.heading.getChildren().addAll(titleContent);
 	}
 
 	public ObservableList<Node> getBody() {

File: src/com/cctintl/c3dfx/skins/C3DSliderSkin.java
Patch:
@@ -61,8 +61,6 @@ public C3DSliderSkin(C3DSlider slider) {
 	private void initialize() {
 		isHorizontal = getSkinnable().getOrientation() == Orientation.HORIZONTAL;
 
-		coloredTrack = new Line();
-
 		thumb = new Circle();
 		thumb.setStrokeWidth(2);
 		thumb.setRadius(7);
@@ -75,6 +73,7 @@ private void initialize() {
 		track.setStrokeWidth(3);
 		track.getStyleClass().setAll("track");
 
+		coloredTrack = new Line();
 		coloredTrack.strokeProperty().bind(thumb.strokeProperty());
 		coloredTrack.strokeWidthProperty().bind(track.strokeWidthProperty());
 

File: src/com/cctintl/c3dfx/skins/C3DListViewSkin.java
Patch:
@@ -291,7 +291,7 @@ private static <T> ListCell<T> createDefaultCellImpl() {
             flow.resizeRelocate(x, y, w, h);
             // FIXME, CHANGE THE HEIGHT if 3D is active or not
             if(flow.getCellCount() > 0)
-            	getSkinnable().setPrefHeight((flow.getCell(0).getHeight() + ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get()) * ( getSkinnable().getItems().size()  )+ ((C3DListView<T>) getSkinnable()).getCellVerticalMargin() - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get());
+            	getSkinnable().setPrefHeight((flow.getCell(0).getHeight() + ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get()) * ( getSkinnable().getItems().size()  )+ ((C3DListView<T>) getSkinnable()).getCellVerticalMargin() - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get() - 2);
         }
     }
     
@@ -311,7 +311,8 @@ private static <T> ListCell<T> createDefaultCellImpl() {
     }
 
     @Override protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        return 400;
+    	if (getSkinnable().getItems().size() <= 0) return 200;
+        return (flow.getCell(0).getHeight() + ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get()) * ( getSkinnable().getItems().size()  )+ ((C3DListView<T>) getSkinnable()).getCellVerticalMargin() - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get() - 2;
     }
     
     private void onFocusPreviousCell() {

File: demo/demos/datafx/AnimatedFlowContainer.java
Patch:
@@ -1,4 +1,4 @@
-package com.cctintl.c3dfx.datafx;
+package demos.datafx;
 import io.datafx.controller.context.ViewContext;
 import io.datafx.controller.flow.FlowContainer;
 import io.datafx.controller.flow.container.ContainerAnimations;

File: demo/demos/gui/main/MainController.java
Patch:
@@ -22,8 +22,8 @@
 import com.cctintl.c3dfx.controls.C3DPopup.C3DPopupHPosition;
 import com.cctintl.c3dfx.controls.C3DPopup.C3DPopupVPosition;
 import com.cctintl.c3dfx.controls.C3DRippler;
-import com.cctintl.c3dfx.datafx.AnimatedFlowContainer;
 
+import demos.datafx.AnimatedFlowContainer;
 import demos.gui.sidemenu.SideMenuController;
 import demos.gui.uicomponents.ButtonController;
 

File: src/com/cctintl/c3dfx/controls/C3DSpinner.java
Patch:
@@ -20,6 +20,7 @@ public class C3DSpinner extends Region {
 
 	public C3DSpinner() {
 		super();
+
 		getStyleClass().setAll(DEFAULT_STYLE_CLASS);
 		initialize();
 	}
@@ -33,6 +34,8 @@ private void initialize() {
 		greenColor = Color.valueOf("#0F9D58");
 
 		arc = new Arc(20, 20, 12, 12, 0, 5);
+		arc.setFill(Color.TRANSPARENT);
+		arc.setStrokeWidth(3);
 		arc.getStyleClass().addAll("arc");
 
 		getChildren().add(arc);

File: src/com/cctintl/c3dfx/demos/gui/main/MainController.java
Patch:
@@ -25,7 +25,6 @@
 import com.cctintl.c3dfx.datafx.AnimatedFlowContainer;
 import com.cctintl.c3dfx.demos.gui.sidemenu.SideMenuController;
 import com.cctintl.c3dfx.demos.gui.uicomponents.ButtonController;
-import com.cctintl.c3dfx.demos.gui.uicomponents.ToggleButtonController;
 
 @FXMLController(value = "/resources/fxml/Main.fxml", title = "Material Design Example")
 public class MainController {
@@ -84,7 +83,7 @@ public void init() throws FlowException, VetoException {
 		// create the inner flow and content
 		context = new ViewFlowContext();
 		// set the default controller 
-		Flow innerFlow = new Flow(ToggleButtonController.class);
+		Flow innerFlow = new Flow(ButtonController.class);
 
 		flowHandler = innerFlow.createHandler(context);
 		context.register("ContentFlowHandler", flowHandler);

File: src/com/cctintl/c3dfx/controls/C3DToggleButton.java
Patch:
@@ -34,7 +34,6 @@ private void initialize() {
 		this.getStyleClass().add("c3d-toggle-button");        
 	}
 	
-	
 
 	/**
 	 *  styleable properties 

File: src/com/cctintl/c3dfx/skins/C3DSliderSkin.java
Patch:
@@ -98,7 +98,7 @@ void positionThumb(final boolean animate) {
 			return;// this can happen if we are bound to something 
 		}
 		final double endX = (isHorizontal) ? trackStart + (((trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin()))))) : thumbLeft;
-		final double endY = (isHorizontal) ? thumbTop : snappedTopInset() + trackLength - (trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin())));
+		final double endY = (isHorizontal) ? thumbTop : snappedTopInset() + thumbRadius + trackLength - (trackLength * ((s.getValue() - s.getMin()) / (s.getMax() - s.getMin())));
 
 		if (animate) {
 			// lets animate the thumb transition
@@ -193,7 +193,7 @@ private void initializeStyles() {
 		}
 		track.setStroke(trackColor);
 		if (track.getStrokeWidth() == 1) {
-			track.setStrokeWidth(2);
+			track.setStrokeWidth(3);
 		}
 
 		if (thumb.getRadius() == 0) {

File: src/com/cctintl/c3dfx/controls/C3DSlider.java
Patch:
@@ -27,4 +27,5 @@ private void initialize() {
 	protected Skin<?> createDefaultSkin() {
 		return new C3DSliderSkin(this);
 	}
+	
 }

File: src/com/cctintl/c3dfx/demos/SpinnerDemo.java
Patch:
@@ -14,6 +14,7 @@ public void start(final Stage stage) throws Exception {
 
 		final Group group = new Group();
 		final Scene scene = new Scene(group, 800, 800);
+		scene.getStylesheets().add(MainDemo.class.getResource("/resources/css/c3dobjects.css").toExternalForm());
 		stage.setScene(scene);
 		stage.setTitle("C3D Spinner");
 		stage.show();

File: src/com/cctintl/c3dfx/demos/gui/uicomponents/ButtonController.java
Patch:
@@ -14,6 +14,4 @@ public void init() throws FlowException, VetoException {
 		
 	}
 	
-	
-	
 }

File: src/com/cctintl/c3dfx/skins/C3DListViewSkin.java
Patch:
@@ -289,6 +289,7 @@ private static <T> ListCell<T> createDefaultCellImpl() {
             }
         } else {
             flow.resizeRelocate(x, y, w, h);
+            // FIXME, CHANGE THE HEIGHT if 3D is active or not
             if(flow.getCellCount() > 0)
             	getSkinnable().setPrefHeight((flow.getCell(0).getHeight() + ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get()) * ( getSkinnable().getItems().size()  )+ ((C3DListView<T>) getSkinnable()).getCellVerticalMargin() - ((C3DListView<T>) getSkinnable()).currentVerticalGapProperty().get());
         }

File: src/com/cctintl/c3dfx/controls/C3DButton.java
Patch:
@@ -35,7 +35,7 @@ public C3DButton(String text, Node graphic){
 	}
 
     private void initialize() {
-    	this.getStyleClass().add("c3d-button");        
+    	this.getStyleClass().add("c3d-button");
     }
     
 	@Override

File: src/com/cctintl/c3dfx/demos/gui/main/MainController.java
Patch:
@@ -16,6 +16,8 @@
 
 import com.cctintl.c3dfx.demos.gui.sidemenu.SideMenuController;
 import com.cctintl.c3dfx.demos.gui.uicomponents.ButtonController;
+import com.cctintl.c3dfx.demos.gui.uicomponents.DialogController;
+import com.cctintl.c3dfx.demos.gui.uicomponents.IconsController;
 
 import contact.AnimatedFlowContainer;
 
@@ -39,7 +41,7 @@ public void init() throws FlowException, VetoException {
 		
 		context = new ViewFlowContext();
 		// set the default controller 
-		Flow innerFlow = new Flow(ButtonController.class);
+		Flow innerFlow = new Flow(IconsController.class);
 		
 		flowHandler = innerFlow.createHandler(context);
 		context.register("ContentFlowHandler", flowHandler);

File: src/com/cctintl/c3dfx/demos/gui/main/MainController.java
Patch:
@@ -15,7 +15,7 @@
 import javax.annotation.PostConstruct;
 
 import com.cctintl.c3dfx.demos.gui.sidemenu.SideMenuController;
-import com.cctintl.c3dfx.demos.gui.uicomponents.ButtonController;
+import com.cctintl.c3dfx.demos.gui.uicomponents.DialogController;
 
 import contact.AnimatedFlowContainer;
 
@@ -39,7 +39,7 @@ public void init() throws FlowException, VetoException {
 		
 		context = new ViewFlowContext();
 		// set the default controller 
-		Flow innerFlow = new Flow(ButtonController.class);
+		Flow innerFlow = new Flow(DialogController.class);
 		
 		flowHandler = innerFlow.createHandler(context);
 		context.register("ContentFlowHandler", flowHandler);

File: src/demos/gui/sidemenu/SideMenuController.java
Patch:
@@ -11,7 +11,9 @@
 import javafx.fxml.FXML;
 import javafx.scene.Node;
 import javafx.scene.control.Label;
+
 import javax.annotation.PostConstruct;
+
 import demos.gui.uicomponents.ButtonController;
 import demos.gui.uicomponents.CheckboxController;
 import demos.gui.uicomponents.DialogController;
@@ -69,7 +71,6 @@ public class SideMenuController {
 	@ActionTrigger("togglebutton")
 	private Label togglebutton;
 	
-
 	@PostConstruct
 	public void init() throws FlowException, VetoException {
 		FlowHandler contentFlowHandler = (FlowHandler) context.getRegisteredObject("ContentFlowHandler");

File: src/customui/validation/RequiredFieldValidator.java
Patch:
@@ -1,13 +1,14 @@
 package customui.validation;
 
-import javafx.beans.property.SimpleStringProperty;
 import javafx.scene.control.TextInputControl;
 import customui.validation.base.ValidatorBase;
+import de.jensd.fx.fontawesome.Icon;
 
 public class RequiredFieldValidator extends ValidatorBase {
 
 	public RequiredFieldValidator() {
-		message = new SimpleStringProperty("Input Required!");
+		setMessage("Input Required!");
+		setAwsomeIcon(new Icon("WARNING"));
 	}
 	
 	@Override

File: src/customui/java/components/VirtualFlow.java
Patch:
@@ -2328,7 +2328,7 @@ public double adjustPixels(final double delta) {
             // sure that we DO NOT add empty trailing cells (since we are
             // in the full virtual case and so there are no trailing empty
             // cells).
-            if (! addTrailingCells(false)) {
+            if (! addTrailingCells(true)) {
                 // Reached the end, but not enough cells to fill up to
                 // the end. So, remove the trailing empty space, and translate
                 // the cells down

File: src/customui/components/C3DDialog.java
Patch:
@@ -22,7 +22,6 @@ public class C3DDialog extends StackPane {
 	public static enum C3DDialogLayout{PLAIN, HEADING, ACTIONS, BACKDROP};
 	public static enum C3DDialogAnimation{CENTER, TOP, RIGHT, BOTTOM, LEFT};
 
-	private C3DDialogLayout layout;
 	private C3DDialogAnimation animationType = C3DDialogAnimation.CENTER;
 	private Transition transition;
 	private StackPane contentHolder;

File: src/customui/components/C3DListCell.java
Patch:
@@ -114,11 +114,11 @@ public void updateItem(T item, boolean empty){
 						
 						if(oldVal.doubleValue()<newVal.doubleValue()){
 							C3DListView<T> listview = ((C3DListView<T>)getListView());
-							listview.setPrefHeight((this.getHeight()+ listview.getCellVerticalMargin() + listview.currentVerticalGapProperty().get()) * listview.getItems().size());
+							listview.setPrefHeight((this.getHeight() + listview.currentVerticalGapProperty().get()) * ( listview.getItems().size()  )+ listview.getCellVerticalMargin() - listview.currentVerticalGapProperty().get());
 						}else{
 							animateGap.setOnFinished((e)->{
 								C3DListView<T> listview = ((C3DListView<T>)getListView());
-								listview.setPrefHeight((this.getHeight()+ listview.getCellVerticalMargin() + listview.currentVerticalGapProperty().get()) * listview.getItems().size());
+								listview.setPrefHeight((this.getHeight() + listview.currentVerticalGapProperty().get()) * ( listview.getItems().size()  )+ listview.getCellVerticalMargin() - listview.currentVerticalGapProperty().get());
 							});
 						}
 						

File: src/customui/components/C3DProgressBar.java
Patch:
@@ -7,6 +7,6 @@
 public class C3DProgressBar extends ProgressBar {
 	@Override
 	protected Skin<?> createDefaultSkin()	{
-		return new C3DProgressBarSkin(this);
+		return new C3DProgressBarSkin(this);		
 	}
 }

