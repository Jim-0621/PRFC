File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -639,7 +639,7 @@ private void drawBackground(Canvas canvas) {
       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
         canvas.clipOutPath(mPath);
       } else {
-        canvas.clipPath(mPath, Region.Op.INTERSECT);
+        canvas.clipPath(mPath, Region.Op.XOR);
       }
       canvas.drawRect(left, top, right, bottom, mBackgroundPaint);
       canvas.restore();

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -86,7 +86,7 @@ public void onCreate(Bundle savedInstanceState) {
 
     ActionBar actionBar = getSupportActionBar();
     if (actionBar != null) {
-      CharSequence title =
+      CharSequence title = mOptions != null &&
           mOptions.activityTitle != null && mOptions.activityTitle.length() > 0
               ? mOptions.activityTitle
               : getResources().getString(R.string.crop_image_activity_title);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -86,7 +86,7 @@ public void onCreate(Bundle savedInstanceState) {
 
     ActionBar actionBar = getSupportActionBar();
     if (actionBar != null) {
-      CharSequence title =
+      CharSequence title = mOptions != null &&
           mOptions.activityTitle != null && mOptions.activityTitle.length() > 0
               ? mOptions.activityTitle
               : getResources().getString(R.string.crop_image_activity_title);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -308,7 +308,7 @@ static float getRectWidth(float[] points) {
     return getRectRight(points) - getRectLeft(points);
   }
 
-  /** Get heightof the bounding rectangle of the given points. */
+  /** Get height of the bounding rectangle of the given points. */
   static float getRectHeight(float[] points) {
     return getRectBottom(points) - getRectTop(points);
   }
@@ -318,7 +318,7 @@ static float getRectCenterX(float[] points) {
     return (getRectRight(points) + getRectLeft(points)) / 2f;
   }
 
-  /** Get verical center value of the bounding rectangle of the given points. */
+  /** Get vertical center value of the bounding rectangle of the given points. */
   static float getRectCenterY(float[] points) {
     return (getRectBottom(points) + getRectTop(points)) / 2f;
   }

File: sample/src/main/java/com/theartofdev/edmodo/cropper/sample/MainFragment.java
Patch:
@@ -132,7 +132,7 @@ public View onCreateView(
   public void onViewCreated(View view, Bundle savedInstanceState) {
     super.onViewCreated(view, savedInstanceState);
 
-    mCropImageView = (CropImageView) view.findViewById(R.id.cropImageView);
+    mCropImageView = view.findViewById(R.id.cropImageView);
     mCropImageView.setOnSetImageUriCompleteListener(this);
     mCropImageView.setOnCropImageCompleteListener(this);
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -22,6 +22,7 @@
 import android.graphics.Rect;
 import android.graphics.RectF;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.support.media.ExifInterface;
@@ -1020,7 +1021,7 @@ public void setImageUriAsync(Uri uri) {
       mRestoreDegreesRotated = 0;
       mCropOverlayView.setInitialCropWindowRect(null);
       mBitmapLoadingWorkerTask = new WeakReference<>(new BitmapLoadingWorkerTask(this, uri));
-      mBitmapLoadingWorkerTask.get().execute();
+      mBitmapLoadingWorkerTask.get().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
       setProgressBarVisibility();
     }
   }
@@ -1318,7 +1319,7 @@ public void startCropWorkerTask(
                     saveCompressFormat,
                     saveCompressQuality));
       }
-      mBitmapCroppingWorkerTask.get().execute();
+      mBitmapCroppingWorkerTask.get().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
       setProgressBarVisibility();
     }
   }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -156,7 +156,7 @@ public class CropImageView extends FrameLayout {
     private OnSetCropOverlayMovedListener mOnSetCropOverlayMovedListener;
 
     /**
-     * callback to be invoked when crop windows is changed.
+     * callback to be invoked when crop window is changed.
      */
     private OnSetCropWindowChangeListener mOnSetCropWindowChangeListener;
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -61,7 +61,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.crop_image_activity);
 
-        mCropImageView = (CropImageView) findViewById(R.id.cropImageView);
+        mCropImageView = findViewById(R.id.cropImageView);
 
         Bundle bundle = getIntent().getBundleExtra(CropImageOptions.BUNDLE_KEY);
         mCropImageUri = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_SOURCE);

File: quick-start/src/main/java/com/theartofdev/edmodo/cropper/quick/start/MainActivity.java
Patch:
@@ -38,6 +38,7 @@ public void onSelectImageClick(View view) {
                 .setGuidelines(CropImageView.Guidelines.ON)
                 .setActivityTitle("My Crop")
                 .setCropShape(CropImageView.CropShape.OVAL)
+                .setCropMenuTitle("Done")
                 .setRequestedSize(400, 400)
                 .start(this);
     }

File: quick-start/src/main/java/com/theartofdev/edmodo/cropper/quick/start/MainActivity.java
Patch:
@@ -38,6 +38,7 @@ public void onSelectImageClick(View view) {
                 .setGuidelines(CropImageView.Guidelines.ON)
                 .setActivityTitle("My Crop")
                 .setCropShape(CropImageView.CropShape.OVAL)
+                .setCropMenuTitle("Done")
                 .setRequestedSize(400, 400)
                 .start(this);
     }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -64,7 +64,7 @@ public void onCreate(Bundle savedInstanceState) {
 
         mCropImageView = (CropImageView) findViewById(R.id.cropImageView);
 
-        Bundle bundle = getIntent().getBundleExtra("bundle");
+        Bundle bundle = getIntent().getBundleExtra(CropImageOptions.BUNDLE_KEY);
         mCropImageUri = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_SOURCE);
         mOptions = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_OPTIONS);
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageOptions.java
Patch:
@@ -29,6 +29,8 @@
  */
 public class CropImageOptions implements Parcelable {
 
+    static final String BUNDLE_KEY = "bundle";
+
     public static final Creator<CropImageOptions> CREATOR = new Creator<CropImageOptions>() {
         @Override
         public CropImageOptions createFromParcel(Parcel in) {

File: quick-start/src/main/java/com/theartofdev/edmodo/cropper/quick/start/MainActivity.java
Patch:
@@ -37,6 +37,8 @@ public void onSelectImageClick(View view) {
         CropImage.activity()
                 .setGuidelines(CropImageView.Guidelines.ON)
                 .setActivityTitle("My Crop")
+                .setCropShape(CropImageView.CropShape.OVAL)
+                .setRequestedSize(400, 400)
                 .start(this);
     }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -62,9 +62,9 @@ public void onCreate(Bundle savedInstanceState) {
 
         mCropImageView = (CropImageView) findViewById(R.id.cropImageView);
 
-        Intent intent = getIntent();
-        mCropImageUri = intent.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_SOURCE);
-        mOptions = intent.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_OPTIONS);
+        Bundle bundle = getIntent().getBundleExtra("bundle");
+        mCropImageUri = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_SOURCE);
+        mOptions = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_OPTIONS);
 
         if (savedInstanceState == null) {
             if (mCropImageUri == null || mCropImageUri.equals(Uri.EMPTY)) {

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageActivity.java
Patch:
@@ -62,9 +62,9 @@ public void onCreate(Bundle savedInstanceState) {
 
         mCropImageView = (CropImageView) findViewById(R.id.cropImageView);
 
-        Intent intent = getIntent();
-        mCropImageUri = intent.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_SOURCE);
-        mOptions = intent.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_OPTIONS);
+        Bundle bundle = getIntent().getBundleExtra("bundle");
+        mCropImageUri = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_SOURCE);
+        mOptions = bundle.getParcelable(CropImage.CROP_IMAGE_EXTRA_OPTIONS);
 
         if (savedInstanceState == null) {
             if (mCropImageUri == null || mCropImageUri.equals(Uri.EMPTY)) {

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -21,10 +21,10 @@
 import android.graphics.Matrix;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import android.media.ExifInterface;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.support.media.ExifInterface;
 import android.util.AttributeSet;
 import android.util.Pair;
 import android.view.LayoutInflater;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -896,6 +896,8 @@ public void setImageUriAsync(Uri uri) {
 
             // either no existing task is working or we canceled it, need to load new URI
             clearImageInt();
+            mRestoreCropWindowRect = null;
+            mRestoreDegreesRotated = 0;
             mCropOverlayView.setInitialCropWindowRect(null);
             mBitmapLoadingWorkerTask = new WeakReference<>(new BitmapLoadingWorkerTask(this, uri));
             mBitmapLoadingWorkerTask.get().execute();

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -1235,12 +1235,12 @@ public void onRestoreInstanceState(Parcelable state) {
                 mDegreesRotated = bundle.getInt("DEGREES_ROTATED");
 
                 Rect initialCropRect = bundle.getParcelable("INITIAL_CROP_RECT");
-                if (initialCropRect != null && (initialCropRect.width() < 1 || initialCropRect.height() < 1)) {
+                if (initialCropRect != null && (initialCropRect.width() > 0 || initialCropRect.height() > 0)) {
                     mCropOverlayView.setInitialCropWindowRect(initialCropRect);
                 }
 
                 RectF cropWindowRect = bundle.getParcelable("CROP_WINDOW_RECT");
-                if (cropWindowRect != null && (cropWindowRect.width() < 1 || cropWindowRect.height() < 1)) {
+                if (cropWindowRect != null && (cropWindowRect.width() > 0 || cropWindowRect.height() > 0)) {
                     mRestoreCropWindowRect = cropWindowRect;
                 }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImage.java
Patch:
@@ -814,7 +814,7 @@ public ActivityBuilder setInitialCropWindowRectangle(Rect initialCropWindowRecta
          * <i>Default: NONE - will read image exif data</i>
          */
         public ActivityBuilder setInitialRotation(int initialRotation) {
-            mOptions.initialRotation = initialRotation;
+            mOptions.initialRotation = (initialRotation + 360) % 360;
             return this;
         }
 
@@ -851,7 +851,7 @@ public ActivityBuilder setAllowCounterRotation(boolean allowCounterRotation) {
          * <i>Default: 90</i>
          */
         public ActivityBuilder setRotationDegrees(int rotationDegrees) {
-            mOptions.rotationDegrees = rotationDegrees;
+            mOptions.rotationDegrees = (rotationDegrees + 360) % 360;
             return this;
         }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -838,15 +838,16 @@ public void setImageBitmap(Bitmap bitmap) {
      */
     public void setImageBitmap(Bitmap bitmap, ExifInterface exif) {
         Bitmap setBitmap;
+        int degreesRotated = 0;
         if (bitmap != null && exif != null) {
             BitmapUtils.RotateBitmapResult result = BitmapUtils.rotateBitmapByExif(bitmap, exif);
             setBitmap = result.bitmap;
-            mDegreesRotated = result.degrees;
+            degreesRotated = result.degrees;
         } else {
             setBitmap = bitmap;
         }
         mCropOverlayView.setInitialCropWindowRect(null);
-        setBitmap(setBitmap);
+        setBitmap(setBitmap, 0, null, 1, degreesRotated);
     }
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -264,8 +264,9 @@ public CropImageView(Context context, AttributeSet attrs) {
             @Override
             public void onCropWindowChanged(boolean inProgress) {
                 handleCropWindowChanged(inProgress, true);
-                if (!inProgress) {
-                    mOnCropOverlayReleasedListener.onCropOverlayReleased(getCropRect());
+                OnSetCropOverlayReleasedListener listener = mOnCropOverlayReleasedListener;
+                if (listener != null && !inProgress) {
+                    listener.onCropOverlayReleased(getCropRect());
                 }
             }
         });

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImage.java
Patch:
@@ -175,11 +175,10 @@ public static Intent getPickImageChooserIntent(@NonNull Context context, CharSeq
         allIntents.addAll(galleryIntents);
 
         Intent target;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        if (allIntents.isEmpty()) {
             target = new Intent();
         } else {
-            target = allIntents.get(allIntents.size() - 1);
-            allIntents.remove(allIntents.size() - 1);
+            target = allIntents.remove(0);
         }
 
         // Create a chooser from the main  intent

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImage.java
Patch:
@@ -175,11 +175,10 @@ public static Intent getPickImageChooserIntent(@NonNull Context context, CharSeq
         allIntents.addAll(galleryIntents);
 
         Intent target;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        if (allIntents.isEmpty()) {
             target = new Intent();
         } else {
-            target = allIntents.get(allIntents.size() - 1);
-            allIntents.remove(allIntents.size() - 1);
+            target = allIntents.remove(0);
         }
 
         // Create a chooser from the main  intent

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -626,7 +626,7 @@ public Bitmap getCroppedImage(int reqWidth, int reqHeight, RequestSizeOptions op
             reqWidth = options != RequestSizeOptions.NONE ? reqWidth : 0;
             reqHeight = options != RequestSizeOptions.NONE ? reqHeight : 0;
 
-            if (mLoadedImageUri != null && mLoadedSampleSize > 1) {
+            if (mLoadedImageUri != null && (mLoadedSampleSize > 1 || options == RequestSizeOptions.SAMPLING)) {
                 int orgWidth = mBitmap.getWidth() * mLoadedSampleSize;
                 int orgHeight = mBitmap.getHeight() * mLoadedSampleSize;
                 BitmapUtils.BitmapSampled bitmapSampled =
@@ -1066,7 +1066,7 @@ public void startCropWorkerTask(int reqWidth, int reqHeight, RequestSizeOptions
 
             int orgWidth = mBitmap.getWidth() * mLoadedSampleSize;
             int orgHeight = mBitmap.getHeight() * mLoadedSampleSize;
-            if (mLoadedImageUri != null && mLoadedSampleSize > 1) {
+            if (mLoadedImageUri != null && (mLoadedSampleSize > 1 || options == RequestSizeOptions.SAMPLING)) {
                 mBitmapCroppingWorkerTask = new WeakReference<>(new BitmapCroppingWorkerTask(this, mLoadedImageUri, getCropPoints(),
                         mDegreesRotated, orgWidth, orgHeight,
                         mCropOverlayView.isFixAspectRatio(), mCropOverlayView.getAspectRatioX(), mCropOverlayView.getAspectRatioY(),

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -856,14 +856,14 @@ void onImageCroppingAsyncComplete(BitmapCroppingWorkerTask.Result result) {
      * {@link #setBitmap(Bitmap, Uri, int, int, int)}}
      */
     private void setBitmap(Bitmap bitmap) {
-        setBitmap(bitmap, 0, null, 0, 0);
+        setBitmap(bitmap, 0, null, 1, 0);
     }
 
     /**
      * {@link #setBitmap(Bitmap, Uri, int, int, int)}}
      */
     private void setBitmap(Bitmap bitmap, int imageResource) {
-        setBitmap(bitmap, imageResource, null, 0, 0);
+        setBitmap(bitmap, imageResource, null, 1, 0);
     }
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -759,7 +759,7 @@ public void clearImage() {
     public void rotateImage(int degrees) {
         if (mBitmap != null) {
 
-            boolean flipAxes = (degrees > 45 && degrees < 135) || (degrees > 215 && degrees < 305);
+            boolean flipAxes = !mCropOverlayView.isFixAspectRatio() && (degrees > 45 && degrees < 135) || (degrees > 215 && degrees < 305);
             BitmapUtils.RECT.set(mCropOverlayView.getCropWindowRect());
             float halfWidth = (flipAxes ? BitmapUtils.RECT.height() : BitmapUtils.RECT.width()) / 2f;
             float halfHeight = (flipAxes ? BitmapUtils.RECT.width() : BitmapUtils.RECT.height()) / 2f;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -782,6 +782,7 @@ public void rotateImage(int degrees) {
             // adjust the zoom so the crop window size remains the same even after image scale change
             mImageMatrix.mapPoints(BitmapUtils.POINTS2, BitmapUtils.POINTS);
             mZoom /= Math.sqrt(Math.pow(BitmapUtils.POINTS2[4] - BitmapUtils.POINTS2[2], 2) + Math.pow(BitmapUtils.POINTS2[5] - BitmapUtils.POINTS2[3], 2));
+            mZoom = Math.max(mZoom, 1);
 
             applyImageMatrix(getWidth(), getHeight(), true, false);
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -1120,8 +1120,9 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 if (mBitmap != null && mRestoreCropWindowRect != null) {
                     mImageMatrix.mapRect(mRestoreCropWindowRect);
                     mCropOverlayView.setCropWindowRect(mRestoreCropWindowRect);
-                    mRestoreCropWindowRect = null;
                     handleCropWindowChanged(false, false);
+                    mCropOverlayView.fixCurrentCropWindowRect();
+                    mRestoreCropWindowRect = null;
                 }
             } else {
                 updateImageBounds(true);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageAnimation.java
Patch:
@@ -79,7 +79,7 @@ protected void applyTransformation(float interpolatedTime, Transformation t) {
         mAnimRect.top = mStartCropWindowRect.top + (mEndCropWindowRect.top - mStartCropWindowRect.top) * interpolatedTime;
         mAnimRect.right = mStartCropWindowRect.right + (mEndCropWindowRect.right - mStartCropWindowRect.right) * interpolatedTime;
         mAnimRect.bottom = mStartCropWindowRect.bottom + (mEndCropWindowRect.bottom - mStartCropWindowRect.bottom) * interpolatedTime;
-        mCropOverlayView.setCropWindowRect(mAnimRect, false);
+        mCropOverlayView.setCropWindowRect(mAnimRect);
 
         for (int i = 0; i < mAnimPoints.length; i++) {
             mAnimPoints[i] = mStartBoundPoints[i] + (mEndBoundPoints[i] - mStartBoundPoints[i]) * interpolatedTime;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -400,7 +400,7 @@ private static Bitmap cropForRotatedImage(Bitmap bitmap, float[] points, Rect re
             double rads = Math.toRadians(degreesRotated);
             int compareTo = degreesRotated < 90 || (degreesRotated > 180 && degreesRotated < 270) ? rect.left : rect.right;
             for (int i = 0; i < points.length; i += 2) {
-                if (((int) points[i]) == compareTo) {
+                if (points[i] >= compareTo - 1 && points[i] <= compareTo + 1) {
                     adjLeft = (int) Math.abs(Math.sin(rads) * (rect.bottom - points[i + 1]));
                     adjTop = (int) Math.abs(Math.cos(rads) * (points[i + 1] - rect.top));
                     width = (int) Math.abs((points[i + 1] - rect.top) / Math.sin(rads));

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageAnimation.java
Patch:
@@ -79,12 +79,12 @@ protected void applyTransformation(float interpolatedTime, Transformation t) {
         mAnimRect.top = mStartCropWindowRect.top + (mEndCropWindowRect.top - mStartCropWindowRect.top) * interpolatedTime;
         mAnimRect.right = mStartCropWindowRect.right + (mEndCropWindowRect.right - mStartCropWindowRect.right) * interpolatedTime;
         mAnimRect.bottom = mStartCropWindowRect.bottom + (mEndCropWindowRect.bottom - mStartCropWindowRect.bottom) * interpolatedTime;
-        mCropOverlayView.setCropWindowRect(mAnimRect);
+        mCropOverlayView.setCropWindowRect(mAnimRect, false);
 
         for (int i = 0; i < mAnimPoints.length; i++) {
             mAnimPoints[i] = mStartBoundPoints[i] + (mEndBoundPoints[i] - mStartBoundPoints[i]) * interpolatedTime;
         }
-        mCropOverlayView.setBitmapRect(mAnimPoints, mImageView.getWidth(), mImageView.getHeight());
+        mCropOverlayView.setBounds(mAnimPoints, mImageView.getWidth(), mImageView.getHeight());
 
         for (int i = 0; i < mAnimMatrix.length; i++) {
             mAnimMatrix[i] = mStartImageMatrix[i] + (mEndImageMatrix[i] - mStartImageMatrix[i]) * interpolatedTime;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -127,7 +127,7 @@ public static DecodeBitmapResult decodeSampledBitmap(Context context, Uri uri, i
             return new DecodeBitmapResult(bitmap, options.inSampleSize);
 
         } catch (Exception e) {
-            throw new RuntimeException("Failed to load sampled bitmap: " + uri, e);
+            throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n" + e.getMessage(), e);
         }
     }
 
@@ -205,7 +205,7 @@ public static Bitmap cropBitmap(Context context, Uri loadedImageUri, float[] poi
                     fullBitmap.recycle();
                 }
             } catch (Exception e) {
-                throw new RuntimeException("Failed to load sampled bitmap: " + loadedImageUri, e);
+                throw new RuntimeException("Failed to load sampled bitmap: " + loadedImageUri + "\r\n" + e.getMessage(), e);
             }
         }
 
@@ -315,7 +315,7 @@ private static Bitmap decodeSampledBitmapRegion(Context context, Uri uri, Rect r
                 }
             } while (options.inSampleSize <= 512);
         } catch (Exception e) {
-            throw new RuntimeException("Failed to load sampled bitmap: " + uri, e);
+            throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n" + e.getMessage(), e);
         } finally {
             closeSafe(stream);
             if (decoder != null) {

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImage.java
Patch:
@@ -137,7 +137,7 @@ public static void startPickImageActivity(Activity activity) {
      * @param context used to access Android APIs, like content resolve, it is your activity/fragment/widget.
      */
     public static Intent getPickImageChooserIntent(Context context) {
-        return getPickImageChooserIntent(context, "Select source", false);
+        return getPickImageChooserIntent(context, context.getString(R.string.pick_image_intent_chooser_title), false);
     }
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImage.java
Patch:
@@ -137,7 +137,7 @@ public static void startPickImageActivity(Activity activity) {
      * @param context used to access Android APIs, like content resolve, it is your activity/fragment/widget.
      */
     public static Intent getPickImageChooserIntent(Context context) {
-        return getPickImageChooserIntent(context, "Select source", false);
+        return getPickImageChooserIntent(context, context.getString(R.string.pick_image_intent_chooser_title), false);
     }
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -605,7 +605,7 @@ public void getCroppedImageAsync(int reqWidth, int reqHeight) {
 
     /**
      * Save the cropped image based on the current crop window to the given uri.<br>
-     * Use {@link Bitmap.CompressFormat.JPEG} with 90 compression quality.<br>
+     * Uses JPEG image compression with 90 compression quality.<br>
      * The result will be invoked to listener set by {@link #setOnGetCroppedImageCompleteListener(OnGetCroppedImageCompleteListener)}.
      *
      * @param saveUri the Android Uri to save the cropped image to

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -858,6 +858,9 @@ private void setBitmap(Bitmap bitmap, boolean clearFull) {
 
             mBitmap = bitmap;
             mImageView.setImageBitmap(mBitmap);
+
+            applyImageMatrix(getWidth(), getHeight(), true, false);
+
             if (mCropOverlayView != null) {
                 mCropOverlayView.resetCropOverlayView();
                 setCropOverlayVisibility();

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -65,7 +65,7 @@ public class CropOverlayView extends View {
     /**
      * The bounding box around the Bitmap that we are cropping.
      */
-    private RectF mBitmapRect = new RectF();
+    private final RectF mBitmapRect = new RectF();
 
     /**
      * The bounding image view width used to know the crop overlay is at view edges.
@@ -142,7 +142,7 @@ public class CropOverlayView extends View {
     /**
      * the initial crop window rectangle to set
      */
-    private Rect mInitialCropWindowRect = new Rect();
+    private final Rect mInitialCropWindowRect = new Rect();
 
     /**
      * Whether the Crop View has been initialized for the first time
@@ -827,7 +827,7 @@ public interface CropWindowChangeListener {
          *
          * @param inProgress is the crop window change operation is still in progress by user touch
          */
-        public void onCropWindowChanged(boolean inProgress);
+        void onCropWindowChanged(boolean inProgress);
     }
     //endregion
 }
\ No newline at end of file

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -744,7 +744,7 @@ public void rotateImage(int degrees) {
                 mZoomOffsetX = 0;
                 mZoomOffsetY = 0;
                 mDegreesRotated += degrees;
-                mDegreesRotated = mDegreesRotated % 360;
+                mDegreesRotated = mDegreesRotated >= 0 ? mDegreesRotated % 360 : mDegreesRotated % 360 + 360;
 
                 applyImageMatrix(getWidth(), getHeight(), true, false);
 
@@ -758,7 +758,7 @@ public void rotateImage(int degrees) {
             } else {
 
                 mDegreesRotated += degrees;
-                mDegreesRotated = mDegreesRotated % 360;
+                mDegreesRotated = mDegreesRotated >= 0 ? mDegreesRotated % 360 : mDegreesRotated % 360 + 360;
 
                 mZoom = 1;
                 mZoomOffsetX = mZoomOffsetY = 0;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -850,6 +850,7 @@ public Parcelable onSaveInstanceState() {
         mImageInverseMatrix.mapRect(BitmapUtils.RECT);
 
         bundle.putParcelable("CROP_WINDOW_RECT", BitmapUtils.RECT);
+        bundle.putString("CROP_SHAPE", mCropOverlayView.getCropShape().name());
 
         return bundle;
     }
@@ -900,6 +901,8 @@ public void onRestoreInstanceState(Parcelable state) {
 
             mRestoreCropWindowRect = bundle.getParcelable("CROP_WINDOW_RECT");
 
+            mCropOverlayView.setCropShape(CropShape.valueOf(bundle.getString("CROP_SHAPE")));
+
             super.onRestoreInstanceState(bundle.getParcelable("instanceState"));
         } else {
             super.onRestoreInstanceState(state);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -318,7 +318,7 @@ private static Bitmap cropForRotatedImage(Bitmap bitmap, float[] points, Rect re
                 }
             }
 
-            rect.set(adjLeft, adjTop, width, height);
+            rect.set(adjLeft, adjTop, adjLeft + width, adjTop + height);
             if (fixAspectRatio) {
                 fixRectForAspectRatio(rect, aspectRatioX, aspectRatioY);
             }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -402,9 +402,9 @@ public Rect getActualCropRect() {
                     && mCropOverlayView.getAspectRatioX() == mCropOverlayView.getAspectRatioY()
                     && actualCropBottom - actualCropTop != actualCropRight - actualCropLeft) {
                 if (actualCropBottom - actualCropTop > actualCropRight - actualCropLeft) {
-                    actualCropBottom--;
+                    actualCropBottom -= actualCropBottom - actualCropTop - (actualCropRight - actualCropLeft);
                 } else {
-                    actualCropRight--;
+                    actualCropRight -= actualCropRight - actualCropLeft - (actualCropBottom - actualCropTop);
                 }
             }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -191,6 +191,8 @@ public void setBitmapRect(RectF bitmapRect) {
      */
     public void resetCropOverlayView() {
         if (initializedCropWindow) {
+            setBitmapRect(CropDefaults.EMPTY_RECT_F);
+            setCropWindowRect(CropDefaults.EMPTY_RECT_F);
             initCropWindow();
             invalidate();
         }

File: sample/src/main/java/com/theartofdev/edmodo/cropper/sample/CropImageViewOptions.java
Patch:
@@ -13,7 +13,6 @@
 package com.theartofdev.edmodo.cropper.sample;
 
 import android.util.Pair;
-import android.widget.ImageView;
 
 import com.theartofdev.edmodo.cropper.CropImageView;
 
@@ -22,7 +21,7 @@
  */
 final class CropImageViewOptions {
 
-    public ImageView.ScaleType scaleType = ImageView.ScaleType.CENTER_INSIDE;
+    public CropImageView.ScaleType scaleType = CropImageView.ScaleType.CENTER_INSIDE;
 
     public CropImageView.CropShape cropShape = CropImageView.CropShape.RECTANGLE;
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageHelper.java
Patch:
@@ -81,7 +81,7 @@ public static Intent getPickImageChooserIntent(Context context) {
         PackageManager packageManager = context.getPackageManager();
 
         // collect all camera intents
-        Intent captureIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
+        Intent captureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
         List<ResolveInfo> listCam = packageManager.queryIntentActivities(captureIntent, 0);
         for (ResolveInfo res : listCam) {
             Intent intent = new Intent(captureIntent);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -169,7 +169,6 @@ public void setBitmapRect(Rect bitmapRect) {
      * Resets the crop overlay view.
      */
     public void resetCropOverlayView() {
-
         if (initializedCropWindow) {
             initCropWindow();
             invalidate();
@@ -222,7 +221,6 @@ public void setGuidelines(CropImageView.Guidelines guidelines) {
         if (mGuidelines != guidelines) {
             mGuidelines = guidelines;
             if (initializedCropWindow) {
-                initCropWindow();
                 invalidate();
             }
         }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -394,10 +394,10 @@ private static Rect getBitmapRectFitCenterHelper(int bitmapWidth, int bitmapHeig
         // there
         if (viewToBitmapWidthRatio <= viewToBitmapHeightRatio) {
             resultWidth = viewWidth;
-            resultHeight = (bitmapHeight * resultWidth / bitmapWidth);
+            resultHeight = bitmapHeight * resultWidth / bitmapWidth;
         } else {
             resultHeight = viewHeight;
-            resultWidth = (bitmapWidth * resultHeight / bitmapHeight);
+            resultWidth = bitmapWidth * resultHeight / bitmapHeight;
         }
 
         // Calculate the position of the bitmap inside the ImageView.

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -61,13 +61,13 @@ public class CropImageView extends FrameLayout {
 
     private Bitmap mBitmap;
 
-    private int mDegreesRotated = 0;
+    private int mDegreesRotated;
 
     private int mLayoutWidth;
 
     private int mLayoutHeight;
 
-    private int mImageResource = 0;
+    private int mImageResource;
 
     /**
      * if to show crop overlay UI what contains the crop window UI surrounded by background over the cropping

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/BitmapUtils.java
Patch:
@@ -57,11 +57,11 @@ public static Rect getBitmapRect(Bitmap bitmap, View view, ImageView.ScaleType s
         final int viewHeight = view.getHeight();
 
         switch (scaleType) {
-            default:
-            case CENTER_INSIDE:
-                return getBitmapRectCenterInsideHelper(bitmapWidth, bitmapHeight, viewWidth, viewHeight);
             case FIT_CENTER:
                 return getBitmapRectFitCenterHelper(bitmapWidth, bitmapHeight, viewWidth, viewHeight);
+            case CENTER_INSIDE:
+            default:
+                return getBitmapRectCenterInsideHelper(bitmapWidth, bitmapHeight, viewWidth, viewHeight);
         }
     }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -22,7 +22,6 @@
 import android.graphics.Region;
 import android.os.Build;
 import android.util.AttributeSet;
-import android.util.DisplayMetrics;
 import android.view.MotionEvent;
 import android.view.View;
 
@@ -355,8 +354,6 @@ public void setInitialAttributeValues(CropImageView.CropShape cropShape,
                                           float maxCropResultWidth,
                                           float maxCropResultHeight) {
 
-        DisplayMetrics dm = getResources().getDisplayMetrics();
-
         mCropWindowHandler.setInitialAttributeValues(minCropWindowWidth, minCropWindowHeight,
                 minCropResultWidth, minCropResultHeight,
                 maxCropResultWidth, maxCropResultHeight);

File: sample/src/main/java/com/theartofdev/edmodo/cropper/sample/MainActivity.java
Patch:
@@ -11,6 +11,7 @@
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.provider.MediaStore;
+import android.util.Log;
 import android.view.View;
 import android.view.Window;
 import android.widget.AdapterView;
@@ -243,6 +244,7 @@ public void onSetImageUriComplete(CropImageView view, Uri uri, Exception error)
         if (error == null) {
             Toast.makeText(mCropImageView.getContext(), "Image load successful", Toast.LENGTH_SHORT).show();
         } else {
+            Log.e("AIC", "Failed to load image by URI", error);
             Toast.makeText(mCropImageView.getContext(), "Image load failed: " + error.getMessage(), Toast.LENGTH_LONG).show();
         }
     }
@@ -254,6 +256,7 @@ public void onGetCroppedImageComplete(CropImageView view, Bitmap bitmap, Excepti
             ImageView croppedImageView = (ImageView) findViewById(R.id.croppedImageView);
             croppedImageView.setImageBitmap(croppedImage);
         } else {
+            Log.e("AIC", "Failed to crop image", error);
             Toast.makeText(mCropImageView.getContext(), "Image crop failed: " + error.getMessage(), Toast.LENGTH_LONG).show();
         }
     }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -309,6 +309,7 @@ public boolean isShowCropOverlay() {
      */
     public void setShowCropOverlay(boolean showCropOverlay) {
         mShowCropOverlay = showCropOverlay;
+        setCropOverlayVisibility();
     }
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -338,7 +338,7 @@ public Uri getImageUri() {
      * Set the crop window position and size to the given rectangle.<br>
      * Image to crop must be first set before invoking this, for async after complete callback.
      *
-     * @param crop window rectangle (position and size) relative to source bitmap
+     * @param rect window rectangle (position and size) relative to source bitmap
      */
     public void setCropRect(Rect rect) {
         mCropOverlayView.setInitialCropWindowRect(rect);
@@ -474,8 +474,6 @@ public void getCroppedImageAsync() {
      *
      * @param cropShape the shape to crop the image: {@link CropShape#RECTANGLE} will get the raw crop rectangle from
      * the image, {@link CropShape#OVAL} will "fix" rectangle to oval by setting outside pixels to transparent.
-     * @param reqWidth the width to downsample the cropped image to
-     * @param reqHeight the height to downsample the cropped image to
      */
     public void getCroppedImageAsync(CropShape cropShape) {
         getCroppedImageAsync(cropShape, 0, 0);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropWindowMoveHandler.java
Patch:
@@ -326,7 +326,7 @@ private void adjustLeft(float left, Rect bounds, float snapMargin, float aspectR
             }
 
             // Checks if the window is too large vertically
-            if (newHeight < mCropWindowHandler.getMaxCropHeight()) {
+            if (newHeight > mCropWindowHandler.getMaxCropHeight()) {
                 newLeft = rect.right - mCropWindowHandler.getMaxCropHeight() * aspectRatio;
             }
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -765,6 +765,7 @@ public Parcelable onSaveInstanceState() {
             }
         }
         bundle.putInt("DEGREES_ROTATED", mDegreesRotated);
+        bundle.putParcelable("INITIAL_CROP_RECT", mCropOverlayView.getInitialCropWindowRect());
         return bundle;
     }
 
@@ -802,6 +803,8 @@ public void onRestoreInstanceState(Parcelable state) {
                 mDegreesRotated = tmpRotated;
             }
 
+            mCropOverlayView.setInitialCropWindowRect((Rect) bundle.getParcelable("INITIAL_CROP_RECT"));
+
             super.onRestoreInstanceState(bundle.getParcelable("instanceState"));
         } else {
             super.onRestoreInstanceState(state);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropWindowHandler.java
Patch:
@@ -68,12 +68,12 @@ final class CropWindowHandler {
     /**
      * The width scale factor of shown image and actual image
      */
-    private float mScaleFactorWidth;
+    private float mScaleFactorWidth = 1;
 
     /**
      * The height scale factor of shown image and actual image
      */
-    private float mScaleFactorHeight;
+    private float mScaleFactorHeight = 1;
     //endregion
 
     /**

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -133,9 +133,9 @@ public CropImageView(Context context, AttributeSet attrs) {
                 fixAspectRatio = ta.getBoolean(R.styleable.CropImageView_cropFixAspectRatio, CropDefaults.DEFAULT_FIXED_ASPECT_RATIO);
                 aspectRatioX = ta.getInteger(R.styleable.CropImageView_cropAspectRatioX, CropDefaults.DEFAULT_ASPECT_RATIO_X);
                 aspectRatioY = ta.getInteger(R.styleable.CropImageView_cropAspectRatioY, CropDefaults.DEFAULT_ASPECT_RATIO_Y);
-                scaleType = CropDefaults.VALID_SCALE_TYPES[ta.getInt(R.styleable.CropImageView_scaleType, CropDefaults.DEFAULT_SCALE_TYPE_INDEX)];
+                scaleType = CropDefaults.VALID_SCALE_TYPES[ta.getInt(R.styleable.CropImageView_cropScaleType, CropDefaults.DEFAULT_SCALE_TYPE_INDEX)];
                 cropShape = CropDefaults.VALID_CROP_SHAPES[ta.getInt(R.styleable.CropImageView_cropShape, CropDefaults.DEFAULT_CROP_SHAPE_INDEX)];
-                guidelines = CropDefaults.VALID_GUIDELINES[ta.getInt(R.styleable.CropImageView_guidelines, CropDefaults.DEFAULT_GUIDELINES_INDEX)];
+                guidelines = CropDefaults.VALID_GUIDELINES[ta.getInt(R.styleable.CropImageView_cropGuidelines, CropDefaults.DEFAULT_GUIDELINES_INDEX)];
                 snapRadius = ta.getFloat(R.styleable.CropImageView_cropSnapRadius, snapRadius);
                 borderLineThickness = ta.getFloat(R.styleable.CropImageView_cropBorderLineThickness, borderLineThickness);
                 borderLineColor = ta.getInteger(R.styleable.CropImageView_cropBorderLineColor, borderLineColor);

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -32,7 +32,6 @@
 import android.widget.ImageView;
 import android.widget.ProgressBar;
 
-import com.edmodo.cropper.R;
 import com.theartofdev.edmodo.cropper.cropwindow.edge.Edge;
 import com.theartofdev.edmodo.cropper.util.ImageViewUtil;
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropOverlayView.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * A custom View representing the crop window and the shaded background outside the crop window.
  */
-class CropOverlayView extends View {
+public class CropOverlayView extends View {
 
     //region: Fields and Consts
 

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -671,6 +671,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
 
         int widthMode = MeasureSpec.getMode(widthMeasureSpec);
         int widthSize = MeasureSpec.getSize(widthMeasureSpec);
@@ -679,8 +680,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         if (mBitmap != null) {
 
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
             // Bypasses a baffling bug when used within a ScrollView, where heightSize is set to 0.
             if (heightSize == 0) {
                 heightSize = mBitmap.getHeight();
@@ -732,7 +731,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             setMeasuredDimension(mLayoutWidth, mLayoutHeight);
 
         } else {
-
             mCropOverlayView.setBitmapRect(EMPTY_RECT);
             setMeasuredDimension(widthSize, heightSize);
         }

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/cropwindow/CropOverlayView.java
Patch:
@@ -551,6 +551,7 @@ private void drawBackground(Canvas canvas, Rect bitmapRect) {
             Path circleSelectionPath = new Path();
             mRectF.set(l, t, r, b);
             circleSelectionPath.addOval(mRectF, Path.Direction.CW);
+            canvas.save();
             canvas.clipPath(circleSelectionPath, Region.Op.XOR);
             canvas.drawRect(bitmapRect.left, bitmapRect.top, bitmapRect.right, bitmapRect.bottom, mBackgroundPaint);
             canvas.restore();

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/cropwindow/CropOverlayView.java
Patch:
@@ -551,6 +551,7 @@ private void drawBackground(Canvas canvas, Rect bitmapRect) {
             Path circleSelectionPath = new Path();
             mRectF.set(l, t, r, b);
             circleSelectionPath.addOval(mRectF, Path.Direction.CW);
+            canvas.save();
             canvas.clipPath(circleSelectionPath, Region.Op.XOR);
             canvas.drawRect(bitmapRect.left, bitmapRect.top, bitmapRect.right, bitmapRect.bottom, mBackgroundPaint);
             canvas.restore();

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/util/ImageViewUtil.java
Patch:
@@ -222,7 +222,8 @@ public static File getFileFromUri(Context context, Uri uri) {
             file = new File(realPath);
         } catch (Exception ignored) {
         } finally {
-            closeSafe(cursor);
+            if (cursor != null)
+                cursor.close();
         }
 
         return file;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -379,8 +379,8 @@ public void rotateImage(int degrees) {
         if (mBitmap != null) {
             Matrix matrix = new Matrix();
             matrix.postRotate(degrees);
-            mBitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
-            setImageBitmap(mBitmap);
+            Bitmap bitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
+            setImageBitmap(bitmap);
 
             mDegreesRotated += degrees;
             mDegreesRotated = mDegreesRotated % 360;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/CropImageView.java
Patch:
@@ -379,8 +379,8 @@ public void rotateImage(int degrees) {
         if (mBitmap != null) {
             Matrix matrix = new Matrix();
             matrix.postRotate(degrees);
-            mBitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
-            setImageBitmap(mBitmap);
+            Bitmap bitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
+            setImageBitmap(bitmap);
 
             mDegreesRotated += degrees;
             mDegreesRotated = mDegreesRotated % 360;

File: cropper/src/main/java/com/theartofdev/edmodo/cropper/cropwindow/edge/Edge.java
Patch:
@@ -133,9 +133,9 @@ public void adjustCoordinate(float aspectRatio) {
      * Returns whether or not you can re-scale the image based on whether any edge would be out of bounds.
      * Checks all the edges for a possibility of jumping out of bounds.
      *
-     * @param Edge the Edge that is about to be expanded
+     * @param edge the Edge that is about to be expanded
      * @param imageRect the rectangle of the picture
-     * @param aspectratio the desired aspectRatio of the picture.
+     * @param aspectRatio the desired aspectRatio of the picture.
      * @return whether or not the new image would be out of bounds.
      */
     public boolean isNewRectangleOutOfBounds(Edge edge, Rect imageRect, float aspectRatio) {

File: cropper/src/main/java/com/edmodo/cropper/cropwindow/CropOverlayView.java
Patch:
@@ -389,6 +389,9 @@ private void init(Context context) {
      */
     private void initCropWindow(Rect bitmapRect) {
 
+        if (bitmapRect.width() == 0 || bitmapRect.height() == 0)
+            return;
+
         // Tells the attribute functions the crop window has already been
         // initialized
         if (!initializedCropWindow)

File: cropper/src/main/java/com/edmodo/cropper/cropwindow/CropOverlayView.java
Patch:
@@ -408,6 +408,9 @@ private void initCropWindow(Rect bitmapRect) {
 
                 final float centerX = getWidth() / 2f;
 
+                //dirty fix for wrong crop overlay aspect ratio when using fixed aspect ratio
+                mTargetAspectRatio = (float) mAspectRatioX / mAspectRatioY;
+
                 // Limits the aspect ratio to no less than 40 wide or 40 tall
                 final float cropWidth = Math.max(Edge.MIN_CROP_LENGTH_PX,
                         AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),

File: cropper/src/com/edmodo/cropper/CropImageView.java
Patch:
@@ -114,7 +114,7 @@ public Parcelable onSaveInstanceState() {
     @Override
     public void onRestoreInstanceState(Parcelable state) {
 
-        if (state instanceof Bundle) {
+        if (state instanceof Bundle && mBitmap != null) {
 
             final Bundle bundle = (Bundle) state;
 

File: cropper/src/com/edmodo/cropper/CropImageView.java
Patch:
@@ -134,6 +134,8 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         if (mBitmap != null) {
             final Rect bitmapRect = ImageViewUtil.getBitmapRectCenterInside(mBitmap, this);
             mCropOverlayView.setBitmapRect(bitmapRect);
+        } else {
+            mCropOverlayView.setBitmapRect(new Rect());
         }
     }
 
@@ -208,6 +210,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         } else {
 
+            mCropOverlayView.setBitmapRect(new Rect());
             setMeasuredDimension(widthSize, heightSize);
         }
     }

File: cropper/src/com/edmodo/cropper/cropwindow/edge/EdgePair.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.edge;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/CenterHandleHelper.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/CornerHandleHelper.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/Handle.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/HandleHelper.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/HorizontalHandleHelper.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/cropwindow/handle/VerticalHandleHelper.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.cropwindow.handle;
 

File: cropper/src/com/edmodo/cropper/util/AspectRatioUtil.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.util;
 
@@ -36,7 +36,7 @@ public static float calculateAspectRatio(float left, float top, float right, flo
      * Calculates the aspect ratio given a rectangle.
      */
     public static float calculateAspectRatio(Rect rect) {
-        
+
         final float aspectRatio = (float) rect.width() / (float) rect.height();
 
         return aspectRatio;

File: cropper/src/com/edmodo/cropper/util/HandleUtil.java
Patch:
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
  * governing permissions and limitations under the License. 
-*/
+ */
 
 package com.edmodo.cropper.util;
 
@@ -18,7 +18,6 @@
 import android.util.TypedValue;
 
 import com.edmodo.cropper.cropwindow.CropOverlayView;
-import com.edmodo.cropper.cropwindow.edge.Edge;
 import com.edmodo.cropper.cropwindow.handle.Handle;
 
 /**

