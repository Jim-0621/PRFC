File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JavaVersionsTests.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.platform.tests.process.OutputFiles;
 
@@ -50,7 +51,7 @@ void java_8(@FilePrefix("maven") OutputFiles outputFiles) throws Exception {
 
 	@Test
 	void java_default(@FilePrefix("maven") OutputFiles outputFiles) throws Exception {
-		var actualLines = execute(currentJdkHome(), outputFiles, MavenEnvVars.FOR_JDK24_AND_LATER);
+		var actualLines = execute(currentJdkHome(), outputFiles, MavenEnvVars.forJre(JRE.currentVersion()));
 
 		assertTrue(actualLines.contains("[WARNING] Tests run: 2, Failures: 0, Errors: 0, Skipped: 1"));
 	}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/MultiReleaseJarTests.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.platform.tests.process.OutputFiles;
 
@@ -76,7 +77,7 @@ void checkDefault(@TempDir Path workspace, @FilePrefix("maven") OutputFiles outp
 				.addArguments("-Dsnapshot.repo.url=" + mavenRepoProxy.getBaseUri()) //
 				.addArguments("--update-snapshots", "--show-version", "--errors", "--batch-mode") //
 				.addArguments("test") //
-				.putEnvironment(MavenEnvVars.FOR_JDK24_AND_LATER) //
+				.putEnvironment(MavenEnvVars.forJre(JRE.currentVersion())) //
 				.redirectOutput(outputFiles) //
 				.startAndWait();
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionIntegrationTests.java
Patch:
@@ -957,7 +957,7 @@ private static int incrementAndBlock(AtomicInteger sharedResource, CountDownLatc
 			throws InterruptedException {
 		var value = sharedResource.incrementAndGet();
 		countDownLatch.countDown();
-		countDownLatch.await(estimateSimulatedTestDurationInMiliseconds(), MILLISECONDS);
+		countDownLatch.await(estimateSimulatedTestDurationInMilliseconds(), MILLISECONDS);
 		return value;
 	}
 
@@ -966,7 +966,7 @@ private static void storeAndBlockAndCheck(AtomicInteger sharedResource, CountDow
 			throws InterruptedException {
 		var value = sharedResource.get();
 		countDownLatch.countDown();
-		countDownLatch.await(estimateSimulatedTestDurationInMiliseconds(), MILLISECONDS);
+		countDownLatch.await(estimateSimulatedTestDurationInMilliseconds(), MILLISECONDS);
 		assertEquals(value, sharedResource.get());
 	}
 
@@ -980,7 +980,7 @@ private static void storeAndBlockAndCheck(AtomicInteger sharedResource, CountDow
 	 *
 	 * Currently, CI is known to be slow.
 	 */
-	private static long estimateSimulatedTestDurationInMiliseconds() {
+	private static long estimateSimulatedTestDurationInMilliseconds() {
 		var runningInCi = Boolean.parseBoolean(System.getenv("CI"));
 		return runningInCi ? 1000 : 100;
 	}

File: platform-tests/src/test/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListenerTests.java
Patch:
@@ -141,7 +141,7 @@ void writesValidXmlReport(@TempDir Path tempDirectory) throws Exception {
 				    </e:reported>
 				    <e:reported id="2" time="${xmlunit.isDateTime}">
 				        <attachments>
-				            <file time="${xmlunit.isDateTime}" path="../test.txt" mediaType="text/plain" />
+				            <file time="${xmlunit.isDateTime}" path="${xmlunit.matchesRegex(\\.\\.[/\\\\]test.txt)}" mediaType="text/plain" />
 				        </attachments>
 				    </e:reported>
 				    <e:reported id="2" time="${xmlunit.isDateTime}">

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreePrinter.java
Patch:
@@ -158,7 +158,7 @@ private void printFileEntry(String indent, FileEntry fileEntry) {
 		out.print(indent);
 		out.print(fileEntry.getTimestamp());
 		out.print(" ");
-		out.print(color(Style.SUCCESSFUL, fileEntry.getFile().toUri().toString()));
+		out.print(color(Style.SUCCESSFUL, fileEntry.getPath().toUri().toString()));
 		out.println();
 	}
 

File: junit-platform-jfr/src/main/java/org/junit/platform/jfr/FlightRecordingExecutionListener.java
Patch:
@@ -102,7 +102,7 @@ public void reportingEntryPublished(TestIdentifier test, ReportEntry reportEntry
 	public void fileEntryPublished(TestIdentifier testIdentifier, FileEntry file) {
 		FileEntryEvent event = new FileEntryEvent();
 		event.uniqueId = testIdentifier.getUniqueId();
-		event.path = file.getFile().toAbsolutePath().toString();
+		event.path = file.getPath().toAbsolutePath().toString();
 		event.commit();
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -187,7 +187,8 @@ default void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry
 	}
 
 	/**
-	 * Called when a file has been published for the supplied {@link TestIdentifier}.
+	 * Called when a file or directory has been published for the supplied
+	 * {@link TestIdentifier}.
 	 *
 	 * <p>Can be called at any time during the execution of a test plan.
 	 *

File: junit-platform-reporting/src/main/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListener.java
Patch:
@@ -377,7 +377,7 @@ public void fileEntryPublished(TestIdentifier testIdentifier, FileEntry entry) {
 		String id = inProgressIds.get(testIdentifier.getUniqueIdObject());
 		eventsFileWriter.append(reported(id, Instant.now()), //
 			reported -> reported.append(attachments(), attachments -> attachments.append(file(entry.getTimestamp()), //
-				file -> file.withPath(outputDir.relativize(entry.getFile()).toString()))));
+				file -> file.withPath(outputDir.relativize(entry.getPath()).toString()))));
 	}
 
 	@Override

File: platform-tests/src/test/java/org/junit/platform/console/tasks/FlatPrintingListenerTests.java
Patch:
@@ -65,14 +65,15 @@ void reportingEntryPublished() {
 	@Test
 	void fileEntryPublished() {
 		var stringWriter = new StringWriter();
-		listener(stringWriter).fileEntryPublished(newTestIdentifier(), FileEntry.from(Path.of("test.txt")));
+		listener(stringWriter).fileEntryPublished(newTestIdentifier(),
+			FileEntry.from(Path.of("test.txt"), "text/plain"));
 		var lines = lines(stringWriter);
 
 		assertEquals(2, lines.length);
 		assertAll("lines in the output", //
 			() -> assertEquals("Reported:    demo-test ([engine:demo-engine])", lines[0]), //
 			() -> assertTrue(lines[1].startsWith(INDENTATION + "=> Reported file: FileEntry [timestamp =")), //
-			() -> assertTrue(lines[1].endsWith(", file = test.txt]")));
+			() -> assertTrue(lines[1].endsWith(", path = test.txt, mediaType = 'text/plain']")));
 	}
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TreePrinterTests.java
Patch:
@@ -94,7 +94,7 @@ void reportsAreTabbedCorrectly() {
 		c1.addChild(m1);
 
 		var m2 = new TreeNode(identifier("m-2", "method two")).setResult(successful());
-		m2.addFileEntry(FileEntry.from(Path.of("test.txt")));
+		m2.addFileEntry(FileEntry.from(Path.of("test.txt"), "text/plain"));
 		c1.addChild(m2);
 
 		new TreePrinter(out, Theme.UNICODE, ColorPalette.NONE).print(root);

File: platform-tests/src/test/java/org/junit/platform/jfr/FlightRecordingExecutionListenerIntegrationTests.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
 import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
+import org.junit.jupiter.api.extension.MediaType;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly;
@@ -81,7 +82,7 @@ static class TestCase {
 		@Test
 		void test(TestReporter reporter) {
 			reporter.publishEntry("message", "Hello JFR!");
-			reporter.publishFile("test.txt", file -> Files.writeString(file, "test"));
+			reporter.publishFile("test.txt", MediaType.TEXT_PLAIN_UTF_8, file -> Files.writeString(file, "test"));
 		}
 
 		@Test

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testcases/SingleTestTestCase.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
+import org.junit.jupiter.api.extension.MediaType;
 
 /**
  * @since 1.8
@@ -22,6 +23,6 @@ public class SingleTestTestCase {
 
 	@Test
 	void test(TestReporter testReporter) {
-		testReporter.publishFile("test.txt", file -> Files.writeString(file, "test"));
+		testReporter.publishFile("test.txt", MediaType.TEXT_PLAIN_UTF_8, file -> Files.writeString(file, "test"));
 	}
 }

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GraalVmStarterTests.java
Patch:
@@ -10,6 +10,7 @@
 
 package platform.tooling.support.tests;
 
+import static java.util.concurrent.TimeUnit.MINUTES;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -21,6 +22,7 @@
 
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Timeout;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 import org.junit.jupiter.api.parallel.ResourceLock;
@@ -40,6 +42,7 @@ class GraalVmStarterTests {
 
 	@ResourceLock(Projects.GRAALVM_STARTER)
 	@Test
+	@Timeout(value = 10, unit = MINUTES)
 	void runsTestsInNativeImage() {
 		var request = Request.builder() //
 				.setTool(new GradleWrapper(Paths.get(".."))) //

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/DefaultParallelExecutionConfigurationStrategy.java
Patch:
@@ -77,7 +77,7 @@ public ParallelExecutionConfiguration createConfiguration(ConfigurationParameter
 					Preconditions.condition(maxPoolSizeFactor.compareTo(BigDecimal.ONE) >= 0,
 						() -> String.format(
 							"Factor '%s' specified via configuration parameter '%s' must be greater than or equal to 1",
-							factor, CONFIG_DYNAMIC_FACTOR_PROPERTY_NAME));
+							factor, CONFIG_DYNAMIC_MAX_POOL_SIZE_FACTOR_PROPERTY_NAME));
 					return maxPoolSizeFactor.multiply(BigDecimal.valueOf(parallelism)).intValue();
 				}).orElseGet(() -> 256 + parallelism);
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -63,8 +63,8 @@ public Optional<String> getArtifactId() {
 
 	@Override
 	public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {
-		JupiterConfiguration configuration = new CachingJupiterConfiguration(
-			new DefaultJupiterConfiguration(discoveryRequest.getConfigurationParameters()));
+		JupiterConfiguration configuration = new CachingJupiterConfiguration(new DefaultJupiterConfiguration(
+			discoveryRequest.getConfigurationParameters(), discoveryRequest.getOutputDirectoryProvider()));
 		JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(uniqueId, configuration);
 		new DiscoverySelectorResolver().resolveSelectors(discoveryRequest, engineDescriptor);
 		return engineDescriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/JupiterConfiguration.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.jupiter.api.io.TempDirFactory;
 import org.junit.jupiter.api.parallel.Execution;
 import org.junit.jupiter.api.parallel.ExecutionMode;
+import org.junit.platform.engine.reporting.OutputDirectoryProvider;
 
 /**
  * @since 5.4
@@ -78,4 +79,5 @@ public interface JupiterConfiguration {
 
 	ExtensionContextScope getDefaultTestInstantiationExtensionContextScope();
 
+	OutputDirectoryProvider getOutputDirectoryProvider();
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TestReporterParameterResolver.java
Patch:
@@ -34,7 +34,7 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon
 
 	@Override
 	public TestReporter resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
-		return extensionContext::publishReportEntry;
+		return new DefaultTestReporter(extensionContext);
 	}
 
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -31,9 +31,7 @@
 public class ExecutionRequest {
 
 	private final TestDescriptor rootTestDescriptor;
-
 	private final EngineExecutionListener engineExecutionListener;
-
 	private final ConfigurationParameters configurationParameters;
 
 	@API(status = INTERNAL, since = "1.0")

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -83,7 +83,7 @@ private void add(String key, String value) {
 	 *
 	 * @return a copy of the map of key-value pairs; never {@code null}
 	 */
-	public final Map<String, String> getKeyValuePairs() {
+	public Map<String, String> getKeyValuePairs() {
 		return Collections.unmodifiableMap(this.keyValuePairs);
 	}
 
@@ -94,7 +94,7 @@ public final Map<String, String> getKeyValuePairs() {
 	 *
 	 * @return when this entry was created; never {@code null}
 	 */
-	public final LocalDateTime getTimestamp() {
+	public LocalDateTime getTimestamp() {
 		return this.timestamp;
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineExecutionOrchestrator.java
Patch:
@@ -195,7 +195,7 @@ private void execute(TestDescriptor engineDescriptor, EngineExecutionListener li
 		OutcomeDelayingEngineExecutionListener delayingListener = new OutcomeDelayingEngineExecutionListener(listener,
 			engineDescriptor);
 		try {
-			testEngine.execute(new ExecutionRequest(engineDescriptor, delayingListener, configurationParameters));
+			testEngine.execute(ExecutionRequest.create(engineDescriptor, delayingListener, configurationParameters));
 			delayingListener.reportEngineOutcome();
 		}
 		catch (Throwable throwable) {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/InternalTestPlan.java
Patch:
@@ -31,12 +31,12 @@ class InternalTestPlan extends TestPlan {
 
 	static InternalTestPlan from(LauncherDiscoveryResult discoveryResult) {
 		TestPlan delegate = TestPlan.from(discoveryResult.getEngineTestDescriptors(),
-			discoveryResult.getConfigurationParameters());
+			discoveryResult.getConfigurationParameters(), discoveryResult.getOutputDirectoryProvider());
 		return new InternalTestPlan(discoveryResult, delegate);
 	}
 
 	private InternalTestPlan(LauncherDiscoveryResult discoveryResult, TestPlan delegate) {
-		super(delegate.containsTests(), delegate.getConfigurationParameters());
+		super(delegate.containsTests(), delegate.getConfigurationParameters(), delegate.getOutputDirectoryProvider());
 		this.discoveryResult = discoveryResult;
 		this.delegate = delegate;
 	}

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java
Patch:
@@ -25,7 +25,8 @@ final class DiscoverySelectorResolver {
 			.addSelectorResolver(context -> new ClassSelectorResolver(
 					context.getClassNameFilter(),
 					context.getEngineDescriptor(),
-					context.getDiscoveryRequest().getConfigurationParameters()))
+					context.getDiscoveryRequest().getConfigurationParameters(),
+					context.getDiscoveryRequest().getOutputDirectoryProvider()))
 			.build();
 	// @formatter:on
 

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/ExtensionContextTests.java
Patch:
@@ -16,6 +16,7 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Named.named;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -280,7 +281,8 @@ void usingStore() {
 	@ParameterizedTest
 	@MethodSource("extensionContextFactories")
 	void configurationParameter(Function<JupiterConfiguration, ? extends ExtensionContext> extensionContextFactory) {
-		JupiterConfiguration echo = new DefaultJupiterConfiguration(new EchoParameters());
+		JupiterConfiguration echo = new DefaultJupiterConfiguration(new EchoParameters(),
+			dummyOutputDirectoryProvider());
 		String key = "123";
 		Optional<String> expected = Optional.of(key);
 

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/CloseablePathTests.java
Patch:
@@ -236,7 +236,7 @@ public Path createTempDirectory(AnnotatedElementContext elementContext, Extensio
 
 			@Override
 			public void close() throws IOException {
-				TempDirFactory.super.close();
+				fileSystem.close();
 			}
 		}
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ColorPaletteTests.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 
 import java.io.PrintWriter;
@@ -186,7 +187,7 @@ void flat_single_color() {
 
 		private void demoTestRun(TestExecutionListener listener) {
 			TestDescriptor testDescriptor = new TestDescriptorStub(UniqueId.forEngine("demo-engine"), "My Test");
-			TestPlan testPlan = TestPlan.from(List.of(testDescriptor), mock());
+			TestPlan testPlan = TestPlan.from(List.of(testDescriptor), mock(), dummyOutputDirectoryProvider());
 			listener.testPlanExecutionStarted(testPlan);
 			listener.executionStarted(TestIdentifier.from(testDescriptor));
 			listener.executionFinished(TestIdentifier.from(testDescriptor), TestExecutionResult.successful());

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -359,8 +359,7 @@ void convertsConfigurationParametersResources() {
 	}
 
 	private LauncherDiscoveryRequest convert() {
-		var creator = new DiscoveryRequestCreator();
-		return creator.toDiscoveryRequest(options);
+		return DiscoveryRequestCreator.toDiscoveryRequestBuilder(options).build();
 	}
 
 	private void assertIncludes(Filter<String> filter, String included) {

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TestFeedPrintingListenerTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertLinesMatch;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 
 import java.io.PrintWriter;
@@ -44,7 +45,7 @@ void prepareListener() {
 			"%c ool test");
 		engineDescriptor.addChild(testDescriptor);
 
-		testPlan = TestPlan.from(Collections.singleton(engineDescriptor), mock());
+		testPlan = TestPlan.from(Collections.singleton(engineDescriptor), mock(), dummyOutputDirectoryProvider());
 		testIdentifier = testPlan.getTestIdentifier(testDescriptor.getUniqueId());
 
 		listener.testPlanExecutionStarted(testPlan);

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -77,7 +77,7 @@ void init() {
 
 	private HierarchicalTestExecutor<MyEngineExecutionContext> createExecutor(
 			HierarchicalTestExecutorService executorService) {
-		var request = new ExecutionRequest(root, listener, null);
+		var request = ExecutionRequest.create(root, listener, null);
 		return new HierarchicalTestExecutor<>(request, rootContext, executorService,
 			OpenTest4JAwareThrowableCollector::new);
 	}

File: platform-tests/src/test/java/org/junit/platform/launcher/core/CompositeTestExecutionListenerTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 
@@ -206,7 +207,7 @@ private void assertThatTestListenerErrorLogged(LogRecordListener logRecordListen
 	}
 
 	private static TestPlan anyTestPlan() {
-		return TestPlan.from(Set.of(anyTestDescriptor()), mock());
+		return TestPlan.from(Set.of(anyTestDescriptor()), mock(), dummyOutputDirectoryProvider());
 	}
 
 	private static DemoMethodTestDescriptor anyTestDescriptor() {

File: platform-tests/src/test/java/org/junit/platform/launcher/core/ExecutionListenerAdapterTests.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.platform.launcher.core;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 
 import java.util.Map;
@@ -34,7 +35,8 @@ class ExecutionListenerAdapterTests {
 	void testReportingEntryPublished() {
 		var testDescriptor = getSampleMethodTestDescriptor();
 
-		var discoveryResult = new LauncherDiscoveryResult(Map.of(mock(), testDescriptor), mock());
+		var discoveryResult = new LauncherDiscoveryResult(Map.of(mock(), testDescriptor), mock(),
+			dummyOutputDirectoryProvider());
 		var testPlan = InternalTestPlan.from(discoveryResult);
 		var testIdentifier = testPlan.getTestIdentifier(testDescriptor.getUniqueId());
 

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/SummaryGenerationTests.java
Patch:
@@ -16,6 +16,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.commons.test.ConcurrencyTestingUtils.executeConcurrently;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 
 import java.io.PrintWriter;
@@ -39,7 +40,7 @@
 class SummaryGenerationTests {
 
 	private final SummaryGeneratingListener listener = new SummaryGeneratingListener();
-	private final TestPlan testPlan = TestPlan.from(List.of(), mock());
+	private final TestPlan testPlan = TestPlan.from(List.of(), mock(), dummyOutputDirectoryProvider());
 
 	@Test
 	void emptyReport() {

File: platform-tests/src/test/java/org/junit/platform/reporting/legacy/LegacyReportingUtilsTests.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.platform.reporting.legacy;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;
 import static org.mockito.Mockito.mock;
 
 import java.util.Set;
@@ -71,13 +72,13 @@ void legacyReportingClassNameForDescendantOfTestIdentifierWithClassSourceIsClass
 	}
 
 	private String getClassName(UniqueId uniqueId) {
-		var testPlan = TestPlan.from(Set.of(engineDescriptor), mock());
+		var testPlan = TestPlan.from(Set.of(engineDescriptor), mock(), dummyOutputDirectoryProvider());
 		return LegacyReportingUtils.getClassName(testPlan, testPlan.getTestIdentifier(uniqueId));
 	}
 
 	@SuppressWarnings("deprecation")
 	private String getClassNameFromOldLocation(UniqueId uniqueId) {
-		var testPlan = TestPlan.from(Set.of(engineDescriptor), mock());
+		var testPlan = TestPlan.from(Set.of(engineDescriptor), mock(), dummyOutputDirectoryProvider());
 		return org.junit.platform.launcher.listeners.LegacyReportingUtils.getClassName(testPlan,
 			testPlan.getTestIdentifier(uniqueId));
 	}

File: platform-tests/src/test/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListenerTests.java
Patch:
@@ -13,7 +13,6 @@
 import static java.util.Objects.requireNonNull;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.junit.jupiter.api.condition.JRE.JAVA_22;
 import static org.junit.jupiter.api.io.CleanupMode.ON_SUCCESS;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
@@ -27,7 +26,6 @@
 import java.nio.file.Path;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledForJreRange;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.platform.engine.TestEngine;
 import org.junit.platform.engine.UniqueId;
@@ -43,7 +41,6 @@
  *
  * @since 1.9
  */
-@DisabledForJreRange(min = JAVA_22, disabledReason = "https://github.com/junit-team/junit5/issues/3594")
 public class OpenTestReportGeneratingListenerTests {
 
 	@TempDir(cleanup = ON_SUCCESS)

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -91,7 +91,7 @@ public final class Constants {
 	 * @see #DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME
 	 * @see org.junit.jupiter.api.extension.ExecutionCondition
 	 */
-	public static final String DEACTIVATE_ALL_CONDITIONS_PATTERN = ClassNamePatternFilterUtils.DEACTIVATE_ALL_PATTERN;
+	public static final String DEACTIVATE_ALL_CONDITIONS_PATTERN = ClassNamePatternFilterUtils.ALL_PATTERN;
 
 	/**
 	 * Property name used to set the default display name generator class name: {@value}

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherConstants.java
Patch:
@@ -146,7 +146,7 @@ public class LauncherConstants {
 	 * @see #DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME
 	 * @see org.junit.platform.launcher.TestExecutionListener
 	 */
-	public static final String DEACTIVATE_ALL_LISTENERS_PATTERN = ClassNamePatternFilterUtils.DEACTIVATE_ALL_PATTERN;
+	public static final String DEACTIVATE_ALL_LISTENERS_PATTERN = ClassNamePatternFilterUtils.ALL_PATTERN;
 
 	/**
 	 * Property name used to enable support for

File: platform-tests/src/test/java/org/junit/platform/reporting/legacy/xml/XmlReportWriterTests.java
Patch:
@@ -248,7 +248,7 @@ public void write(char[] buffer, int off, int len) {
 		writeXmlReport(testPlan, reportData, assertingWriter);
 	}
 
-	@ParameterizedTest
+	@ParameterizedTest(name = "{index}")
 	@MethodSource("stringPairs")
 	void escapesIllegalChars(String input, String output) {
 		assertEquals(output, XmlReportWriter.escapeIllegalChars(input));

File: platform-tests/src/test/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListenerTests.java
Patch:
@@ -33,8 +33,8 @@
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestEngine;
-import org.opentest4j.reporting.tooling.validator.DefaultValidator;
-import org.opentest4j.reporting.tooling.validator.ValidationResult;
+import org.opentest4j.reporting.tooling.core.validator.DefaultValidator;
+import org.opentest4j.reporting.tooling.core.validator.ValidationResult;
 import org.xmlunit.assertj3.XmlAssert;
 import org.xmlunit.placeholder.PlaceholderDifferenceEvaluator;
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JarDescribeModuleTests.java
Patch:
@@ -20,7 +20,6 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.util.stream.Collectors;
 
 import de.sormuras.bartholdy.jdk.Jar;
 
@@ -62,7 +61,7 @@ void describeModule(String module) throws Exception {
 			result.getOutputLines("out").forEach(System.err::println);
 			fail("No such file: " + expected);
 		}
-		var expectedLines = Files.lines(expected).map(Helper::replaceVersionPlaceholders).collect(Collectors.toList());
+		var expectedLines = Files.lines(expected).map(Helper::replaceVersionPlaceholders).toList();
 		var origin = Path.of("projects", "jar-describe-module", module + ".expected.txt").toUri();
 		assertLinesMatch(expectedLines, result.getOutputLines("out"), () -> String.format("%s\nError", origin));
 	}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -86,6 +86,7 @@ private static List<String> compile(Path temp, Writer out, Writer err) throws Ex
 		ThirdPartyJars.copy(lib, "org.apiguardian", "apiguardian-api");
 		ThirdPartyJars.copy(lib, "org.hamcrest", "hamcrest");
 		ThirdPartyJars.copy(lib, "org.opentest4j", "opentest4j");
+		ThirdPartyJars.copy(lib, "org.opentest4j.reporting", "open-test-reporting-tooling-spi");
 		ThirdPartyJars.copy(lib, "com.google.jimfs", "jimfs");
 		ThirdPartyJars.copy(lib, "com.google.guava", "guava");
 		Helper.loadAllJUnitModules(lib);

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ToolProviderTests.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.ServiceLoader;
 import java.util.Set;
 import java.util.spi.ToolProvider;
-import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
 
 import org.junit.jupiter.api.BeforeAll;
@@ -69,6 +68,7 @@ static void prepareLocalLibraryDirectoryWithJUnitPlatformModules() {
 			}
 			ThirdPartyJars.copy(lib, "org.apiguardian", "apiguardian-api");
 			ThirdPartyJars.copy(lib, "org.opentest4j", "opentest4j");
+			ThirdPartyJars.copy(lib, "org.opentest4j.reporting", "open-test-reporting-tooling-spi");
 		}
 		catch (Exception e) {
 			throw new AssertionError("Preparing local library folder failed", e);
@@ -97,7 +97,7 @@ void findAndRunJUnitOnTheModulePath() {
 				.map(ModuleReference::descriptor) //
 				.map(ModuleDescriptor::toNameAndVersion) //
 				.sorted() //
-				.collect(Collectors.toList());
+				.toList();
 		// modules.forEach(System.out::println);
 
 		var bootLayer = ModuleLayer.boot();
@@ -139,7 +139,7 @@ private static void assertJUnitPrintsHelpMessage(ToolProvider junit) {
 			">> USAGE >>", //
 			"Launches the JUnit Platform for test discovery and execution.", //
 			">> OPTIONS >>"), //
-			out.toString().lines().collect(Collectors.toList())), //
+			out.toString().lines().toList()), //
 			() -> assertEquals("", err.toString()), //
 			() -> assertEquals(0, code, "Expected exit of 0, but got: " + code) //
 		);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeoutPreemptively.java
Patch:
@@ -113,7 +113,7 @@ private static <T, E extends Throwable> T resolveFutureAndHandleException(Future
 				cause = new ExecutionTimeoutException("Execution timed out in thread " + thread.getName());
 				cause.setStackTrace(thread.getStackTrace());
 			}
-			throw failureFactory.createTimeoutFailure(timeout, messageSupplier, cause);
+			throw failureFactory.createTimeoutFailure(timeout, messageSupplier, cause, thread);
 		}
 		catch (ExecutionException ex) {
 			throw throwAsUncheckedException(ex.getCause());
@@ -124,7 +124,7 @@ private static <T, E extends Throwable> T resolveFutureAndHandleException(Future
 	}
 
 	private static AssertionFailedError createAssertionFailure(Duration timeout, Supplier<String> messageSupplier,
-			Throwable cause) {
+			Throwable cause, Thread thread) {
 		return assertionFailure() //
 				.message(messageSupplier) //
 				.reason("execution timed out after " + timeout.toMillis() + " ms") //

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -3662,6 +3662,6 @@ public interface TimeoutFailureFactory<T extends Throwable> {
 		 *
 		 * @return timeout failure; never {@code null}
 		 */
-		T createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier, Throwable cause);
+		T createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier, Throwable cause, Thread testThread);
 	}
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -55,7 +55,6 @@
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.AfterEachMethodAdapter;
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
-import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
 import org.junit.jupiter.engine.execution.DefaultTestInstances;
 import org.junit.jupiter.engine.execution.ExtensionContextSupplier;
 import org.junit.jupiter.engine.execution.InterceptingExecutableInvoker;
@@ -181,8 +180,8 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 
 		ThrowableCollector throwableCollector = createThrowableCollector();
 		ClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, this.lifecycle, context.getConfiguration(), throwableCollector,
-			it -> new DefaultExecutableInvoker(it, registry));
+			context.getExecutionListener(), this, this.lifecycle, context.getConfiguration(), registry,
+			throwableCollector);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicNodeTestDescriptor.java
Patch:
@@ -12,7 +12,6 @@
 
 import org.junit.jupiter.api.DynamicNode;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
-import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestSource;
@@ -46,8 +45,7 @@ public String getLegacyReportingName() {
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {
 		DynamicExtensionContext extensionContext = new DynamicExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(),
-			it -> new DefaultExecutableInvoker(it, context.getExtensionRegistry()));
+			context.getExecutionListener(), this, context.getConfiguration(), context.getExtensionRegistry());
 		// @formatter:off
 		return context.extend()
 				.withExtensionContext(extensionContext)

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -16,7 +16,6 @@
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
-import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.engine.EngineExecutionListener;
@@ -53,7 +52,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 			context.getConfiguration());
 		EngineExecutionListener executionListener = context.getExecutionListener();
 		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this,
-			context.getConfiguration(), it -> new DefaultExecutableInvoker(it, extensionRegistry));
+			context.getConfiguration(), extensionRegistry);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -35,7 +35,6 @@
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.AfterEachMethodAdapter;
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
-import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
 import org.junit.jupiter.engine.execution.InterceptingExecutableInvoker;
 import org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.ReflectiveInterceptorCall;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
@@ -99,8 +98,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		MutableExtensionRegistry registry = populateNewExtensionRegistry(context);
 		ThrowableCollector throwableCollector = createThrowableCollector();
 		MethodExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(), throwableCollector,
-			it -> new DefaultExecutableInvoker(it, registry));
+			context.getExecutionListener(), this, context.getConfiguration(), registry, throwableCollector);
 		// @formatter:off
 		JupiterEngineExecutionContext newContext = context.extend()
 				.withExtensionRegistry(registry)

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
-import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
@@ -81,8 +80,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		TestInstances testInstances = context.getExtensionContext().getTestInstances().orElse(null);
 
 		ExtensionContext extensionContext = new TestTemplateExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(), testInstances,
-			it -> new DefaultExecutableInvoker(it, registry));
+			context.getExecutionListener(), this, context.getConfiguration(), registry, testInstances);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TimeoutExtension.java
Patch:
@@ -182,8 +182,8 @@ private <T> Invocation<T> decorate(Invocation<T> invocation, ReflectiveInvocatio
 
 		ThreadMode threadMode = resolveTimeoutThreadMode(extensionContext);
 		return new TimeoutInvocationFactory(extensionContext.getRoot().getStore(NAMESPACE)).create(threadMode,
-			new TimeoutInvocationParameters<>(invocation, timeout,
-				() -> describe(invocationContext, extensionContext)));
+			new TimeoutInvocationParameters<>(invocation, timeout, () -> describe(invocationContext, extensionContext),
+				PreInterruptCallbackInvocationFactory.create((ExtensionContextInternal) extensionContext)));
 	}
 
 	private ThreadMode resolveTimeoutThreadMode(ExtensionContext extensionContext) {

File: jupiter-tests/src/test/java/org/junit/jupiter/api/AssertTimeoutPreemptivelyAssertionsTests.java
Patch:
@@ -40,8 +40,8 @@
 class AssertTimeoutPreemptivelyAssertionsTests {
 
 	private static final Duration PREEMPTIVE_TIMEOUT = ofMillis(WINDOWS.isCurrentOs() ? 1000 : 100);
-	private static final Assertions.TimeoutFailureFactory<TimeoutException> TIMEOUT_EXCEPTION_FACTORY = (__, ___,
-			____) -> new TimeoutException();
+	private static final Assertions.TimeoutFailureFactory<TimeoutException> TIMEOUT_EXCEPTION_FACTORY = (__, ___, ____,
+			_____) -> new TimeoutException();
 
 	private static final ThreadLocal<AtomicBoolean> changed = ThreadLocal.withInitial(() -> new AtomicBoolean(false));
 

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/SameThreadTimeoutInvocationTests.java
Patch:
@@ -34,7 +34,8 @@ void resetsInterruptFlag() {
 		var exception = assertThrows(TimeoutException.class, () -> withExecutor(executor -> {
 			var delegate = new EventuallyInterruptibleInvocation();
 			var duration = new TimeoutDuration(1, NANOSECONDS);
-			var timeoutInvocation = new SameThreadTimeoutInvocation<>(delegate, duration, executor, () -> "execution");
+			var timeoutInvocation = new SameThreadTimeoutInvocation<>(delegate, duration, executor, () -> "execution",
+				PreInterruptCallbackInvocation.NOOP);
 			timeoutInvocation.proceed();
 		}));
 		assertFalse(Thread.currentThread().isInterrupted());

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/SeparateThreadTimeoutInvocationTests.java
Patch:
@@ -73,7 +73,8 @@ private static <T> SeparateThreadTimeoutInvocation<T> aSeparateThreadInvocation(
 		var namespace = ExtensionContext.Namespace.create(SeparateThreadTimeoutInvocationTests.class);
 		var store = new NamespaceAwareStore(new NamespacedHierarchicalStore<>(null), namespace);
 		var parameters = new TimeoutInvocationParameters<>(invocation,
-			new TimeoutDuration(PREEMPTIVE_TIMEOUT_MILLIS, MILLISECONDS), () -> "method()");
+			new TimeoutDuration(PREEMPTIVE_TIMEOUT_MILLIS, MILLISECONDS), () -> "method()",
+			PreInterruptCallbackInvocation.NOOP);
 		return (SeparateThreadTimeoutInvocation<T>) new TimeoutInvocationFactory(store) //
 				.create(ThreadMode.SEPARATE_THREAD, parameters);
 	}

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TimeoutInvocationFactoryTests.java
Patch:
@@ -56,7 +56,8 @@ class TimeoutInvocationFactoryTests {
 
 	@BeforeEach
 	void setUp() {
-		parameters = new TimeoutInvocationParameters<>(invocation, timeoutDuration, () -> "description");
+		parameters = new TimeoutInvocationParameters<>(invocation, timeoutDuration, () -> "description",
+			PreInterruptCallbackInvocation.NOOP);
 		timeoutInvocationFactory = new TimeoutInvocationFactory(store);
 	}
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ArchUnitTests.java
Patch:
@@ -108,6 +108,8 @@ void avoidAccessingStandardStreams(JavaClasses classes) {
 				.that(are(not(name("org.junit.platform.runner.JUnitPlatformRunnerListener")))) //
 				.that(are(not(name("org.junit.platform.testkit.engine.Events")))) //
 				.that(are(not(name("org.junit.platform.testkit.engine.Executions")))) //
+				//The PreInterruptThreadDumpPrinter writes to StdOut by contract to dump threads
+				.that(are(not(name("org.junit.jupiter.engine.extension.PreInterruptThreadDumpPrinter")))) //
 				.that(are(not(resideInAPackage("org.junit.platform.console.shadow.picocli"))));
 		GeneralCodingRules.NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(subset);
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -33,7 +33,7 @@
  * @see ExtendWith
  * @see java.lang.annotation.Repeatable
  */
-@Target({ ElementType.TYPE, ElementType.METHOD })
+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ArchUnitTests.java
Patch:
@@ -17,7 +17,6 @@
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.resideInAPackage;
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.resideInAnyPackage;
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.simpleName;
-import static com.tngtech.archunit.core.domain.JavaClass.Predicates.type;
 import static com.tngtech.archunit.core.domain.JavaModifier.PUBLIC;
 import static com.tngtech.archunit.core.domain.properties.HasModifiers.Predicates.modifier;
 import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.name;
@@ -51,7 +50,6 @@
 import com.tngtech.archunit.library.GeneralCodingRules;
 
 import org.apiguardian.api.API;
-import org.junit.jupiter.api.extension.ExtendWith;
 
 @AnalyzeClasses(locations = ArchUnitTests.AllJars.class)
 class ArchUnitTests {
@@ -72,7 +70,6 @@ class ArchUnitTests {
 			.that(nameStartingWith("org.junit.")) //
 			.and().areAnnotations() //
 			.and().areAnnotatedWith(Repeatable.class) //
-			.and(are(not(type(ExtendWith.class)))) // to be resolved in https://github.com/junit-team/junit5/issues/4059
 			.should(haveContainerAnnotationWithSameRetentionPolicy()) //
 			.andShould(haveContainerAnnotationWithSameTargetTypes());
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -92,8 +92,9 @@ void classesAreStoredInDiscoveryRequest() {
 				.build();
 			// @formatter:on
 
-			List<Class<?>> classes = discoveryRequest.getSelectorsByType(ClassSelector.class).stream().map(
-				ClassSelector::getJavaClass).toList();
+			@SuppressWarnings("rawtypes")
+			List<Class> classes = discoveryRequest.getSelectorsByType(ClassSelector.class).stream()//
+					.map(ClassSelector::getJavaClass).map(Class.class::cast).toList();
 			assertThat(classes).contains(SampleTestClass.class, LauncherDiscoveryRequestBuilderTests.class);
 		}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -19,6 +19,7 @@
 import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
+import static org.junit.platform.commons.util.PackageNameUtils.getPackageName;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.TOP_DOWN;
 
@@ -1903,7 +1904,7 @@ private static boolean isPackagePrivate(Member member) {
 	}
 
 	private static boolean declaredInSamePackage(Method m1, Method m2) {
-		return m1.getDeclaringClass().getPackage().getName().equals(m2.getDeclaringClass().getPackage().getName());
+		return getPackageName(m1.getDeclaringClass()).equals(getPackageName(m2.getDeclaringClass()));
 	}
 
 	/**

File: platform-tooling-support-tests/projects/vintage/src/test/java/com/example/vintage/VintageTest.java
Patch:
@@ -15,6 +15,9 @@
 import org.junit.Test;
 
 public class VintageTest {
+	void packagePrivateMethod() {
+	}
+
 	@Test
 	public void success() {
 		// pass

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -288,7 +288,7 @@ private TestInstances instantiateAndPostProcessTestInstance(JupiterEngineExecuti
 			JupiterEngineExecutionContext context) {
 
 		ExtensionContextSupplier extensionContext = ExtensionContextSupplier.create(context.getExtensionContext(),
-			ourExtensionContext);
+			ourExtensionContext, configuration);
 		TestInstances instances = instantiateTestClass(parentExecutionContext, extensionContext, registry, context);
 		context.getThrowableCollector().execute(() -> {
 			invokeTestInstancePostProcessors(instances.getInnermostInstance(), registry, extensionContext);

File: jupiter-tests/src/test/java/org/junit/jupiter/engine/execution/InterceptingExecutableInvokerTests.java
Patch:
@@ -31,9 +31,8 @@ void invokeMethod() {
 
 	@Override
 	<T> T invokeConstructor(Constructor<T> constructor, Object outerInstance) {
-		ExtensionContextSupplier context = ExtensionContextSupplier.create(extensionContext, extensionContext);
-		return newInvoker().invoke(constructor, Optional.ofNullable(outerInstance), context, extensionRegistry,
-			passthroughInterceptor());
+		return newInvoker().invoke(constructor, Optional.ofNullable(outerInstance), __ -> extensionContext,
+			extensionRegistry, passthroughInterceptor());
 	}
 
 	private InterceptingExecutableInvoker newInvoker() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TempDirectory.java
Patch:
@@ -12,6 +12,7 @@
 
 import static java.nio.file.FileVisitResult.CONTINUE;
 import static java.util.stream.Collectors.joining;
+import static org.junit.jupiter.api.extension.Extension.ExtensionContextScope.TEST_SCOPED;
 import static org.junit.jupiter.api.io.CleanupMode.DEFAULT;
 import static org.junit.jupiter.api.io.CleanupMode.NEVER;
 import static org.junit.jupiter.api.io.CleanupMode.ON_SUCCESS;
@@ -93,8 +94,8 @@ public TempDirectory(JupiterConfiguration configuration) {
 	}
 
 	@Override
-	public boolean isTestScopedConstructorContextEnabled(ExtensionContext rootContext) {
-		return true;
+	public ExtensionContextScope getExtensionContextScopeDuringTestInstanceConstruction(ExtensionContext rootContext) {
+		return TEST_SCOPED;
 	}
 
 	/**

File: jupiter-tests/src/test/java/org/junit/jupiter/api/extension/KitchenSinkExtension.java
Patch:
@@ -66,8 +66,8 @@ public class KitchenSinkExtension implements
 {
 
 	@Override
-	public boolean isTestScopedConstructorContextEnabled(ExtensionContext rootContext) {
-		return true;
+	public ExtensionContextScope getExtensionContextScopeDuringTestInstanceConstruction(ExtensionContext rootContext) {
+		return ExtensionContextScope.TEST_SCOPED;
 	}
 
 	// --- Lifecycle Callbacks -------------------------------------------------

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -31,7 +31,7 @@
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.7")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see CsvFileSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.11")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see CsvSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.11")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see EnumSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.11")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/FieldSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see FieldSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = EXPERIMENTAL, since = "5.11")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see MethodSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.11")

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSources.java
Patch:
@@ -32,7 +32,7 @@
  * @see ValueSource
  * @see java.lang.annotation.Repeatable
  */
-@Target(ElementType.METHOD)
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.11")

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ArchUnitTests.java
Patch:
@@ -19,7 +19,6 @@
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.simpleName;
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.type;
 import static com.tngtech.archunit.core.domain.JavaModifier.PUBLIC;
-import static com.tngtech.archunit.core.domain.properties.CanBeAnnotated.Predicates.annotatedWith;
 import static com.tngtech.archunit.core.domain.properties.HasModifiers.Predicates.modifier;
 import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.name;
 import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.nameContaining;
@@ -54,7 +53,6 @@
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.junit.jupiter.params.provider.ArgumentsSource;
 
 @Order(Integer.MAX_VALUE)
 @AnalyzeClasses(locations = ArchUnitTests.AllJars.class)
@@ -77,7 +75,6 @@ class ArchUnitTests {
 			.and().areAnnotations() //
 			.and().areAnnotatedWith(Repeatable.class) //
 			.and(are(not(type(ExtendWith.class)))) // to be resolved in https://github.com/junit-team/junit5/issues/4059
-			.and(are(not(type(ArgumentsSource.class).or(annotatedWith(ArgumentsSource.class))))) // to be resolved in https://github.com/junit-team/junit5/issues/4063
 			.should(haveContainerAnnotationWithSameRetentionPolicy()) //
 			.andShould(haveContainerAnnotationWithSameTargetTypes());
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Timeout.java
Patch:
@@ -358,8 +358,8 @@
 	ThreadMode threadMode() default ThreadMode.INFERRED;
 
 	/**
-	 * {@code ThreadMode} is use to define whether the test code should be executed in the thread
-	 * of the calling code or in a separated thread.
+	 * {@code ThreadMode} is used to define whether test code should be executed
+	 * in the thread of the calling code or in a separate thread.
 	 *
 	 * @since 5.9
 	 */

File: jupiter-tests/src/test/java/org/junit/jupiter/params/converter/DefaultArgumentConverterTests.java
Patch:
@@ -132,7 +132,7 @@ void convertsStringsToPrimitiveWrapperTypes() {
 
 	@ParameterizedTest(name = "[{index}] {0}")
 	@ValueSource(classes = { char.class, boolean.class, short.class, byte.class, int.class, long.class, float.class,
-			double.class })
+			double.class, void.class })
 	void throwsExceptionForNullToPrimitiveTypeConversion(Class<?> type) {
 		assertThatExceptionOfType(ArgumentConversionException.class) //
 				.isThrownBy(() -> convert(null, type)) //
@@ -261,8 +261,10 @@ void convertsStringToPath() {
 	@Test
 	void convertsStringToClass() {
 		assertConverts("java.lang.Integer", Class.class, Integer.class);
+		assertConverts("java.lang.Void", Class.class, Void.class);
 		assertConverts("java.lang.Thread$State", Class.class, State.class);
 		assertConverts("byte", Class.class, byte.class);
+		assertConverts("void", Class.class, void.class);
 		assertConverts("char[]", Class.class, char[].class);
 		assertConverts("java.lang.Long[][]", Class.class, Long[][].class);
 		assertConverts("[[[I", Class.class, int[][][].class);

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -559,6 +559,7 @@ void isAssignableTo() {
 			// Wrappers to Primitives
 			assertTrue(ReflectionUtils.isAssignableTo(Integer.class, int.class));
 			assertTrue(ReflectionUtils.isAssignableTo(Boolean.class, boolean.class));
+			assertTrue(ReflectionUtils.isAssignableTo(Void.class, void.class));
 
 			// Widening Conversions from Wrappers to Primitives
 			assertTrue(ReflectionUtils.isAssignableTo(Integer.class, long.class));
@@ -759,6 +760,7 @@ void loadClass() {
 		@Test
 		void tryToLoadClass() {
 			assertThat(ReflectionUtils.tryToLoadClass(Integer.class.getName())).isEqualTo(success(Integer.class));
+			assertThat(ReflectionUtils.tryToLoadClass(Void.class.getName())).isEqualTo(success(Void.class));
 		}
 
 		@Test
@@ -770,6 +772,7 @@ void tryToLoadClassTrimsClassName() {
 		@Test
 		void tryToLoadClassForPrimitive() {
 			assertThat(ReflectionUtils.tryToLoadClass(int.class.getName())).isEqualTo(success(int.class));
+			assertThat(ReflectionUtils.tryToLoadClass(void.class.getName())).isEqualTo(success(void.class));
 		}
 
 		@Test

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestMethodContext.java
Patch:
@@ -32,7 +32,6 @@
 import org.junit.jupiter.params.converter.DefaultArgumentConverter;
 import org.junit.jupiter.params.support.AnnotationConsumerInitializer;
 import org.junit.platform.commons.support.AnnotationSupport;
-import org.junit.platform.commons.support.ReflectionSupport;
 import org.junit.platform.commons.util.StringUtils;
 
 /**
@@ -200,7 +199,7 @@ Resolver createResolver(ParameterContext parameterContext, ExtensionContext exte
 				try { // @formatter:off
 					return AnnotationSupport.findAnnotation(parameterContext.getParameter(), AggregateWith.class)
 							.map(AggregateWith::value)
-							.map(clazz -> (ArgumentsAggregator) ReflectionSupport.newInstance(clazz))
+							.map(clazz -> ParameterizedTestSpiInstantiator.instantiate(ArgumentsAggregator.class, clazz, extensionContext))
 							.map(Aggregator::new)
 							.orElse(Aggregator.DEFAULT);
 				} // @formatter:on

File: junit-jupiter-params/src/jmh/java/org/junit/jupiter/params/ParameterizedTestNameFormatterBenchmarks.java
Patch:
@@ -47,7 +47,8 @@ public void formatTestNames(Blackhole blackhole) throws Exception {
 		var formatter = new ParameterizedTestNameFormatter(
 			ParameterizedTest.DISPLAY_NAME_PLACEHOLDER + " " + ParameterizedTest.DEFAULT_DISPLAY_NAME + " ({0})",
 			"displayName",
-			new ParameterizedTestMethodContext(TestCase.class.getDeclaredMethod("parameterizedTest", int.class)), 512);
+			new ParameterizedTestMethodContext(TestCase.class.getDeclaredMethod("parameterizedTest", int.class), null),
+			512);
 		for (int i = 0; i < argumentsList.size(); i++) {
 			Arguments arguments = argumentsList.get(i);
 			blackhole.consume(formatter.format(i, arguments, arguments.get()));

File: jupiter-tests/src/test/java/org/junit/jupiter/params/ParameterizedTestMethodContextTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.Mockito.mock;
 
 import java.lang.reflect.Method;
 import java.util.Arrays;
@@ -33,13 +34,13 @@ class ParameterizedTestMethodContextTests {
 	@ValueSource(strings = { "onePrimitive", "twoPrimitives", "twoAggregators", "twoAggregatorsWithTestInfoAtTheEnd",
 			"mixedMode" })
 	void validSignatures(String name) {
-		assertTrue(new ParameterizedTestMethodContext(method(name)).hasPotentiallyValidSignature());
+		assertTrue(new ParameterizedTestMethodContext(method(name), mock()).hasPotentiallyValidSignature());
 	}
 
 	@ParameterizedTest
 	@ValueSource(strings = { "twoAggregatorsWithPrimitiveInTheMiddle", "twoAggregatorsWithTestInfoInTheMiddle" })
 	void invalidSignatures(String name) {
-		assertFalse(new ParameterizedTestMethodContext(method(name)).hasPotentiallyValidSignature());
+		assertFalse(new ParameterizedTestMethodContext(method(name), mock()).hasPotentiallyValidSignature());
 	}
 
 	private Method method(String name) {

File: jupiter-tests/src/test/java/org/junit/jupiter/params/ParameterizedTestNameFormatterTests.java
Patch:
@@ -330,8 +330,8 @@ private static ParameterizedTestNameFormatter formatter(String pattern, String d
 	}
 
 	private static ParameterizedTestNameFormatter formatter(String pattern, String displayName, Method method) {
-		return new ParameterizedTestNameFormatter(pattern, displayName, new ParameterizedTestMethodContext(method),
-			512);
+		return new ParameterizedTestNameFormatter(pattern, displayName,
+			new ParameterizedTestMethodContext(method, mock()), 512);
 	}
 
 	private static String format(ParameterizedTestNameFormatter formatter, int invocationIndex, Arguments arguments) {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.api.extension.ParameterResolver;
 
 /**
  * An {@code ArgumentsProvider} is responsible for {@linkplain #provideArguments
@@ -25,7 +26,8 @@
  * <p>An {@code ArgumentsProvider} can be registered via the
  * {@link ArgumentsSource @ArgumentsSource} annotation.
  *
- * <p>Implementations must provide a no-args constructor.
+ * <p>Implementations must provide a no-args constructor or a single unambiguous
+ * constructor to use {@linkplain ParameterResolver parameter resolution}.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.ParameterizedTest

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/CompositeLock.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.locks.Lock;
 
+import org.junit.platform.commons.util.Preconditions;
+
 /**
  * @since 1.3
  */
@@ -23,7 +25,7 @@ class CompositeLock implements ResourceLock {
 	private final List<Lock> locks;
 
 	CompositeLock(List<Lock> locks) {
-		this.locks = locks;
+		this.locks = Preconditions.notEmpty(locks, "Locks must not be empty");
 	}
 
 	// for tests only

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AnsiColorOptionMixin.java
Patch:
@@ -23,7 +23,9 @@ class AnsiColorOptionMixin {
 	@Spec(MIXEE)
 	CommandSpec commandSpec;
 
-	private boolean disableAnsiColors;
+	// https://no-color.org
+	// ANSI is disabled when environment variable NO_COLOR is defined (regardless of its value).
+	private boolean disableAnsiColors = System.getenv("NO_COLOR") != null;
 
 	public boolean isDisableAnsiColors() {
 		return disableAnsiColors;

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/StandaloneTests.java
Patch:
@@ -383,13 +383,13 @@ JUnit Jupiter > JupiterIntegration > disabled()
 
 	private static Result discover(String... args) {
 		var result = Request.builder() //
+				.putEnvironment("NO_COLOR", "1") // --disable-ansi-colors
 				.setTool(new Java()) //
 				.setProject(Projects.STANDALONE) //
 				.addArguments("-jar", MavenRepo.jar("junit-platform-console-standalone")) //
 				.addArguments("discover") //
 				.addArguments("--scan-class-path") //
 				.addArguments("--disable-banner") //
-				.addArguments("--disable-ansi-colors") //
 				.addArguments("--include-classname", "standalone.*") //
 				.addArguments("--classpath", "bin") //
 				.addArguments((Object[]) args) //
@@ -405,6 +405,7 @@ private static Result discover(String... args) {
 	@Order(3)
 	void execute() throws IOException {
 		var result = Request.builder() //
+				.putEnvironment("NO_COLOR", "1") // --disable-ansi-colors
 				.setTool(new Java()) //
 				.setProject(Projects.STANDALONE) //
 				.addArguments("--show-version") //

File: junit-jupiter-api/src/module/org.junit.jupiter.api/module-info.java
Patch:
@@ -19,6 +19,7 @@
 	exports org.junit.jupiter.api;
 	exports org.junit.jupiter.api.condition;
 	exports org.junit.jupiter.api.extension;
+	exports org.junit.jupiter.api.extension.support;
 	exports org.junit.jupiter.api.function;
 	exports org.junit.jupiter.api.io;
 	exports org.junit.jupiter.api.parallel;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/AbstractExtensionContext.java
Patch:
@@ -55,8 +55,9 @@ abstract class AbstractExtensionContext<T extends TestDescriptor> implements Ext
 	private final ExecutableInvoker executableInvoker;
 
 	AbstractExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener, T testDescriptor,
-			JupiterConfiguration configuration, ExecutableInvoker executableInvoker) {
-		this.executableInvoker = executableInvoker;
+			JupiterConfiguration configuration,
+			Function<ExtensionContext, ExecutableInvoker> executableInvokerFactory) {
+		this.executableInvoker = executableInvokerFactory.apply(this);
 
 		Preconditions.notNull(testDescriptor, "TestDescriptor must not be null");
 		Preconditions.notNull(configuration, "JupiterConfiguration must not be null");

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
-import org.junit.jupiter.api.extension.ExecutableInvoker;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionConfigurationException;
 import org.junit.jupiter.api.extension.ExtensionContext;
@@ -179,10 +178,9 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		registerExtensionsFromInstanceFields(registry, this.testClass);
 
 		ThrowableCollector throwableCollector = createThrowableCollector();
-		ExecutableInvoker executableInvoker = new DefaultExecutableInvoker(context);
 		ClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, this.lifecycle, context.getConfiguration(), throwableCollector,
-			executableInvoker);
+			it -> new DefaultExecutableInvoker(it, registry));
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicExtensionContext.java
Patch:
@@ -13,6 +13,7 @@
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
+import java.util.function.Function;
 
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.ExecutableInvoker;
@@ -26,8 +27,8 @@ class DynamicExtensionContext extends AbstractExtensionContext<DynamicNodeTestDe
 
 	DynamicExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener,
 			DynamicNodeTestDescriptor testDescriptor, JupiterConfiguration configuration,
-			ExecutableInvoker executableInvoker) {
-		super(parent, engineExecutionListener, testDescriptor, configuration, executableInvoker);
+			Function<ExtensionContext, ExecutableInvoker> executableInvokerFactory) {
+		super(parent, engineExecutionListener, testDescriptor, configuration, executableInvokerFactory);
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicNodeTestDescriptor.java
Patch:
@@ -46,7 +46,8 @@ public String getLegacyReportingName() {
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {
 		DynamicExtensionContext extensionContext = new DynamicExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(), new DefaultExecutableInvoker(context));
+			context.getExecutionListener(), this, context.getConfiguration(),
+			it -> new DefaultExecutableInvoker(it, context.getExtensionRegistry()));
 		// @formatter:off
 		return context.extend()
 				.withExtensionContext(extensionContext)

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -14,7 +14,6 @@
 import static org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.toExecutionMode;
 
 import org.apiguardian.api.API;
-import org.junit.jupiter.api.extension.ExecutableInvoker;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.DefaultExecutableInvoker;
@@ -53,9 +52,8 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		MutableExtensionRegistry extensionRegistry = MutableExtensionRegistry.createRegistryWithDefaultExtensions(
 			context.getConfiguration());
 		EngineExecutionListener executionListener = context.getExecutionListener();
-		ExecutableInvoker executableInvoker = new DefaultExecutableInvoker(context);
 		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this,
-			context.getConfiguration(), executableInvoker);
+			context.getConfiguration(), it -> new DefaultExecutableInvoker(it, extensionRegistry));
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.jupiter.api.extension.AfterTestExecutionCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;
-import org.junit.jupiter.api.extension.ExecutableInvoker;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.InvocationInterceptor;
@@ -99,9 +98,9 @@ public Type getType() {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {
 		MutableExtensionRegistry registry = populateNewExtensionRegistry(context);
 		ThrowableCollector throwableCollector = createThrowableCollector();
-		ExecutableInvoker executableInvoker = new DefaultExecutableInvoker(context);
 		MethodExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(), throwableCollector, executableInvoker);
+			context.getExecutionListener(), this, context.getConfiguration(), throwableCollector,
+			it -> new DefaultExecutableInvoker(it, registry));
 		throwableCollector.execute(() -> {
 			TestInstances testInstances = context.getTestInstancesProvider().getTestInstances(registry,
 				throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateExtensionContext.java
Patch:
@@ -13,6 +13,7 @@
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
+import java.util.function.Function;
 
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.ExecutableInvoker;
@@ -31,9 +32,9 @@ final class TestTemplateExtensionContext extends AbstractExtensionContext<TestTe
 
 	TestTemplateExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener,
 			TestTemplateTestDescriptor testDescriptor, JupiterConfiguration configuration, TestInstances testInstances,
-			ExecutableInvoker executableInvoker) {
+			Function<ExtensionContext, ExecutableInvoker> executableInvokerFactory) {
 
-		super(parent, engineExecutionListener, testDescriptor, configuration, executableInvoker);
+		super(parent, engineExecutionListener, testDescriptor, configuration, executableInvokerFactory);
 		this.testInstances = testInstances;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apiguardian.api.API;
-import org.junit.jupiter.api.extension.ExecutableInvoker;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestInstances;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
@@ -81,9 +80,9 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		// The test instance should be properly maintained by the enclosing class's ExtensionContext.
 		TestInstances testInstances = context.getExtensionContext().getTestInstances().orElse(null);
 
-		ExecutableInvoker executableInvoker = new DefaultExecutableInvoker(context);
 		ExtensionContext extensionContext = new TestTemplateExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this, context.getConfiguration(), testInstances, executableInvoker);
+			context.getExecutionListener(), this, context.getConfiguration(), testInstances,
+			it -> new DefaultExecutableInvoker(it, registry));
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -23,7 +23,9 @@
  * etc.
  *
  * <p>Extensions that implement {@code TestInstancePostProcessor} must be
- * registered at the class level.
+ * registered at the class level, {@linkplain ExtendWith declaratively} via a
+ * field of the test class, or {@linkplain RegisterExtension programmatically}
+ * via a <em>static</em> field of the test class.
  *
  * <h2>Constructor Requirements</h2>
  *

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -74,7 +74,7 @@ public boolean mayRegisterTests() {
 	// --- Node ----------------------------------------------------------------
 
 	@Override
-	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
+	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {
 		MutableExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(
 			context.getExtensionRegistry(), getTestMethod());
 

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/LoggingListenerTests.java
Patch:
@@ -66,7 +66,7 @@ void logsExecutionEvents() {
 		inOrder.verify(logger).accept(isNull(), eq(
 			"Execution Finished: success() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[test-factory:success()] - TestExecutionResult [status = SUCCESSFUL, throwable = null]"));
 		inOrder.verify(logger).accept(isNull(), eq(
-			"Execution Skipped: skipped() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:skipped()]"));
+			"Execution Skipped: skipped() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:skipped()] - void org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase.skipped() is @Disabled"));
 		inOrder.verify(logger).accept(isNull(), eq(
 			"Execution Started: failed() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:failed()]"));
 		inOrder.verify(logger).accept(ArgumentMatchers.notNull(AssertionFailedError.class), eq(

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/LoggingListenerTests.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.function.BiConsumer;
 import java.util.stream.Stream;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Order;
@@ -65,9 +66,7 @@ void logsExecutionEvents() {
 		inOrder.verify(logger).accept(isNull(), eq(
 			"Execution Finished: success() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[test-factory:success()] - TestExecutionResult [status = SUCCESSFUL, throwable = null]"));
 		inOrder.verify(logger).accept(isNull(), eq(
-			"Execution Started: skipped() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:skipped()]"));
-		inOrder.verify(logger).accept(isNull(), eq(
-			"Execution Finished: skipped() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:skipped()] - TestExecutionResult [status = SUCCESSFUL, throwable = null]"));
+			"Execution Skipped: skipped() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:skipped()]"));
 		inOrder.verify(logger).accept(isNull(), eq(
 			"Execution Started: failed() - [engine:junit-jupiter]/[class:org.junit.platform.launcher.listeners.LoggingListenerTests$TestCase]/[method:failed()]"));
 		inOrder.verify(logger).accept(ArgumentMatchers.notNull(AssertionFailedError.class), eq(
@@ -108,6 +107,7 @@ Stream<DynamicTest> success() {
 		}
 
 		@Test
+		@Disabled
 		@Order(2)
 		void skipped() {
 		}

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandFacade.java
Patch:
@@ -13,6 +13,7 @@
 import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
+import java.util.Optional;
 
 import org.apiguardian.api.API;
 import org.junit.platform.console.tasks.ConsoleTestExecutor;
@@ -33,9 +34,9 @@ public CommandFacade(ConsoleTestExecutor.Factory consoleTestExecutorFactory) {
 	}
 
 	public CommandResult<?> run(PrintWriter out, PrintWriter err, String[] args) {
-		String version = ManifestVersionProvider.getImplementationVersion();
+		Optional<String> version = ManifestVersionProvider.getImplementationVersion();
 		System.setProperty("junit.docs.version",
-			version == null ? "current" : (version.endsWith("-SNAPSHOT") ? "snapshot" : version));
+			version.map(it -> it.endsWith("-SNAPSHOT") ? "snapshot" : it).orElse("current"));
 		return new MainCommand(consoleTestExecutorFactory).run(out, err, args);
 	}
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/DiscoverTestsCommand.java
Patch:
@@ -39,8 +39,8 @@ class DiscoverTestsCommand extends BaseCommand<Void> {
 	protected Void execute(PrintWriter out) {
 		TestDiscoveryOptions discoveryOptions = this.discoveryOptions.toTestDiscoveryOptions();
 		TestConsoleOutputOptions testOutputOptions = this.testOutputOptions.toTestConsoleOutputOptions();
-		testOutputOptions.setAnsiColorOutputDisabled(outputOptions.isDisableAnsiColors());
-		consoleTestExecutorFactory.create(discoveryOptions, testOutputOptions).discover(out);
+		testOutputOptions.setAnsiColorOutputDisabled(this.ansiColorOption.isDisableAnsiColors());
+		this.consoleTestExecutorFactory.create(discoveryOptions, testOutputOptions).discover(out);
 		return null;
 	}
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/ExecuteTestsCommand.java
Patch:
@@ -77,7 +77,7 @@ TestDiscoveryOptions toTestDiscoveryOptions() {
 
 	TestConsoleOutputOptions toTestConsoleOutputOptions() {
 		TestConsoleOutputOptions testOutputOptions = this.testOutputOptions.toTestConsoleOutputOptions();
-		testOutputOptions.setAnsiColorOutputDisabled(outputOptions.isDisableAnsiColors());
+		testOutputOptions.setAnsiColorOutputDisabled(this.ansiColorOption.isDisableAnsiColors());
 		return testOutputOptions;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledForJreRangeIntegrationTests.java
Patch:
@@ -27,6 +27,7 @@
 import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava21;
 import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava22;
 import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava23;
+import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava24;
 import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava8;
 import static org.junit.jupiter.api.condition.EnabledOnJreIntegrationTests.onJava9;
 import static org.junit.jupiter.api.condition.JRE.JAVA_17;
@@ -80,7 +81,7 @@ void javaMax18() {
 	@Test
 	@EnabledForJreRange(min = JAVA_18)
 	void javaMin18() {
-		assertTrue(onJava18() || onJava19() || onJava20() || onJava21() || onJava22() || onJava23());
+		assertTrue(onJava18() || onJava19() || onJava20() || onJava21() || onJava22() || onJava23() || onJava24());
 		assertFalse(onJava17());
 	}
 

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -38,6 +38,7 @@
 import org.junit.platform.suite.api.IncludeEngines;
 import org.junit.platform.suite.api.IncludePackages;
 import org.junit.platform.suite.api.IncludeTags;
+import org.junit.platform.suite.api.Select;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.SelectClasspathResource;
 import org.junit.platform.suite.api.SelectDirectories;
@@ -87,6 +88,7 @@
  * ClassNameFilter#STANDARD_INCLUDE_PATTERN}).
  *
  * @since 1.0
+ * @see Select
  * @see SelectClasses
  * @see SelectClasspathResource
  * @see SelectDirectories

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Suite.java
Patch:
@@ -46,6 +46,7 @@
  * configuration parameters are taken into account.
  *
  * @since 1.8
+ * @see Select
  * @see SelectClasses
  * @see SelectClasspathResource
  * @see SelectDirectories

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandFacade.java
Patch:
@@ -35,7 +35,7 @@ public CommandFacade(ConsoleTestExecutor.Factory consoleTestExecutorFactory) {
 	public CommandResult<?> run(PrintWriter out, PrintWriter err, String[] args) {
 		String version = ManifestVersionProvider.getImplementationVersion();
 		System.setProperty("junit.docs.version",
-				version == null ? "current" : (version.endsWith("-SNAPSHOT") ? "snapshot" : version));
+			version == null ? "current" : (version.endsWith("-SNAPSHOT") ? "snapshot" : version));
 		return new MainCommand(consoleTestExecutorFactory).run(out, err, args);
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -272,7 +272,8 @@ void executesWithMessageFormat() {
 
 		var results = execute("testWithMessageFormat", double.class);
 		results.allEvents().assertThatEvents() //
-				.haveExactly(1, event(test(), displayName("3.1416"), finishedWithFailure(message(String.valueOf(Math.PI)))));
+				.haveExactly(1,
+					event(test(), displayName("3.1416"), finishedWithFailure(message(String.valueOf(Math.PI)))));
 	}
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/store/NamespacedHierarchicalStore.java
Patch:
@@ -40,9 +40,9 @@
  * <p>This class is thread-safe.
  *
  * @param <N> Namespace type
- * @since 5.10
+ * @since 1.10
  */
-@API(status = EXPERIMENTAL, since = "5.10")
+@API(status = EXPERIMENTAL, since = "1.10")
 public final class NamespacedHierarchicalStore<N> implements AutoCloseable {
 
 	private final AtomicInteger insertOrderSequence = new AtomicInteger();

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/store/NamespacedHierarchicalStoreException.java
Patch:
@@ -18,9 +18,9 @@
 /**
  * Exception thrown by failed {@link NamespacedHierarchicalStore} operations.
  *
- * @since 5.10
+ * @since 1.10
  */
-@API(status = EXPERIMENTAL, since = "5.10")
+@API(status = EXPERIMENTAL, since = "1.10")
 public class NamespacedHierarchicalStoreException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/io/TempDirFactory.java
Patch:
@@ -81,7 +81,7 @@ class Standard implements TempDirFactory {
 
 		public static final TempDirFactory INSTANCE = new Standard();
 
-		private static final String TEMP_DIR_PREFIX = "junit";
+		private static final String TEMP_DIR_PREFIX = "junit-";
 
 		public Standard() {
 		}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TempDirectoryPerContextTests.java
Patch:
@@ -697,7 +697,7 @@ private static class Factory implements TempDirFactory {
 			@Override
 			public Path createTempDirectory(AnnotatedElementContext elementContext, ExtensionContext extensionContext)
 					throws Exception {
-				return Files.createTempDirectory("junit");
+				return Files.createTempDirectory("junit-");
 			}
 		}
 

File: documentation/src/test/java/example/exception/ExceptionAssertionDemo.java
Patch:
@@ -15,7 +15,6 @@
 
 import org.junit.jupiter.api.Test;
 
-
 class ExceptionAssertionDemo {
 
 	// @formatter:off

File: documentation/src/test/java/example/exception/ExceptionAssertionExactDemo.java
Patch:
@@ -13,10 +13,10 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrowsExactly;
 
-import org.junit.jupiter.api.Test;
-
 import extensions.ExpectToFail;
 
+import org.junit.jupiter.api.Test;
+
 public class ExceptionAssertionExactDemo {
 
 	@ExpectToFail

File: documentation/src/test/java/example/exception/FailedAssertionDemo.java
Patch:
@@ -14,10 +14,10 @@
 
 import example.util.Calculator;
 
-import org.junit.jupiter.api.Test;
-
 import extensions.ExpectToFail;
 
+import org.junit.jupiter.api.Test;
+
 class FailedAssertionDemo {
 
 	// tag::user_guide[]

File: documentation/src/test/java/example/exception/UncaughtExceptionHandlingDemo.java
Patch:
@@ -12,10 +12,10 @@
 
 import example.util.Calculator;
 
-import org.junit.jupiter.api.Test;
-
 import extensions.ExpectToFail;
 
+import org.junit.jupiter.api.Test;
+
 class UncaughtExceptionHandlingDemo {
 
 	// tag::user_guide[]

File: documentation/src/test/java/example/session/GlobalSetupTeardownListener.java
Patch:
@@ -37,7 +37,7 @@ public void launcherSessionOpened(LauncherSession session) {
 			@Override
 			public void testPlanExecutionStarted(TestPlan testPlan) {
 				//end::user_guide[]
-				if (!testPlan.getConfigurationParameters().getBoolean("enableHttpServer").orElse(false)) {
+				if (!testPlan.getConfigurationParameters().getBoolean("enableHttpServer").orElse(true)) {
 					// avoid starting multiple HTTP servers unnecessarily from UsingTheLauncherDemo
 					return;
 				}

File: documentation/src/test/java/example/AssertionsDemo.java
Patch:
@@ -85,6 +85,9 @@ void dependentAssertions() {
 		);
 	}
 
+	// end::user_guide[]
+	@extensions.DisabledOnOpenJ9
+	// tag::user_guide[]
 	@Test
 	void exceptionTesting() {
 		Exception exception = assertThrows(ArithmeticException.class, () ->

File: documentation/src/test/java/example/testkit/EngineTestKitAllEventsDemo.java
Patch:
@@ -62,7 +62,7 @@ void verifyAllJupiterEvents() {
 						message(m -> m.contains("abc does not contain Z")))),
 				event(test("failingTest"), started()),
 				event(test("failingTest"), finishedWithFailure(
-					instanceOf(ArithmeticException.class), message("/ by zero"))),
+					instanceOf(ArithmeticException.class), message(it -> it.endsWith("by zero")))),
 				event(container(ExampleTestCase.class), finishedSuccessfully()),
 				event(engine(), finishedSuccessfully()));
 	}

File: documentation/src/test/java/example/testkit/EngineTestKitFailedMethodDemo.java
Patch:
@@ -36,7 +36,7 @@ void verifyJupiterMethodFailed() {
 			.assertThatEvents().haveExactly(1, // <5>
 				event(test("failingTest"),
 					finishedWithFailure(
-						instanceOf(ArithmeticException.class), message("/ by zero"))));
+						instanceOf(ArithmeticException.class), message(it -> it.endsWith("by zero")))));
 	}
 
 }

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -1008,7 +1008,8 @@ void findNestedClassesWithInvalidNestedClassFile(@TrackLogRecords LogRecordListe
 				assertEquals(fqcn, classWithInvalidNestedClassFile.getName());
 				var noClassDefFoundError = assertThrows(NoClassDefFoundError.class,
 					classWithInvalidNestedClassFile::getDeclaredClasses);
-				assertEquals("tests/NestedInterfaceGroovyTests$NestedInterface$1", noClassDefFoundError.getMessage());
+				assertThat(noClassDefFoundError) //
+						.hasMessageMatching("tests[./]NestedInterfaceGroovyTests\\$NestedInterface\\$1");
 
 				assertThat(findNestedClasses(classWithInvalidNestedClassFile)).isEmpty();
 				// @formatter:off

File: platform-tests/src/test/java/org/junit/platform/jfr/FlightRecordingDiscoveryListenerIntegrationTests.java
Patch:
@@ -16,13 +16,15 @@
 import static org.moditect.jfrunit.JfrEventsAssert.assertThat;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly;
 import org.moditect.jfrunit.EnableEvent;
 import org.moditect.jfrunit.JfrEventTest;
 import org.moditect.jfrunit.JfrEvents;
 
 @JfrEventTest
+@DisabledOnOpenJ9
 public class FlightRecordingDiscoveryListenerIntegrationTests {
 
 	public JfrEvents jfrEvents = new JfrEvents();

File: platform-tests/src/test/java/org/junit/platform/jfr/FlightRecordingExecutionListenerIntegrationTests.java
Patch:
@@ -18,13 +18,15 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
+import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly;
 import org.moditect.jfrunit.EnableEvent;
 import org.moditect.jfrunit.JfrEventTest;
 import org.moditect.jfrunit.JfrEvents;
 
 @JfrEventTest
+@DisabledOnOpenJ9
 public class FlightRecordingExecutionListenerIntegrationTests {
 
 	public JfrEvents jfrEvents = new JfrEvents();

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GraalVmStarterTests.java
Patch:
@@ -22,13 +22,15 @@
 import de.sormuras.bartholdy.tool.GradleWrapper;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 
 import platform.tooling.support.MavenRepo;
 import platform.tooling.support.Request;
 
 /**
  * @since 1.9.1
  */
+@DisabledOnOpenJ9
 class GraalVmStarterTests {
 
 	@Test

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.codehaus.groovy.runtime.ProcessGroovyMethods;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 import org.junit.jupiter.api.io.TempDir;
 
 import platform.tooling.support.Helper;
@@ -35,6 +36,7 @@
 /**
  * @since 1.5
  */
+@DisabledOnOpenJ9
 class ModularUserGuideTests {
 
 	private static final String DOCUMENTATION_MODULE_DESCRIPTOR = """

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ToolProviderTests.java
Patch:
@@ -36,6 +36,7 @@
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.DisabledOnOpenJ9;
 
 import platform.tooling.support.Helper;
 import platform.tooling.support.MavenRepo;
@@ -87,6 +88,7 @@ void findAndRunJUnitOnTheClassPath() {
 	}
 
 	@Test
+	@DisabledOnOpenJ9
 	void findAndRunJUnitOnTheModulePath() {
 		var finder = ModuleFinder.of(LIB);
 		var modules = finder.findAll().stream() //

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -1803,15 +1803,16 @@ private static boolean hasCompatibleSignature(Method candidate, String methodNam
 		if (parameterTypes.length != candidate.getParameterCount()) {
 			return false;
 		}
+		Class<?>[] candidateParameterTypes = candidate.getParameterTypes();
 		// trivial case: parameter types exactly match
-		if (Arrays.equals(parameterTypes, candidate.getParameterTypes())) {
+		if (Arrays.equals(parameterTypes, candidateParameterTypes)) {
 			return true;
 		}
 		// param count is equal, but types do not match exactly: check for method sub-signatures
 		// https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2
 		for (int i = 0; i < parameterTypes.length; i++) {
 			Class<?> lowerType = parameterTypes[i];
-			Class<?> upperType = candidate.getParameterTypes()[i];
+			Class<?> upperType = candidateParameterTypes[i];
 			if (!upperType.isAssignableFrom(lowerType)) {
 				return false;
 			}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AutoClose.java
Patch:
@@ -40,9 +40,9 @@
  *
  * <h2>Inheritance</h2>
  *
- * <p>{@code @AutoClose} fields are inherited from superclasses as long as they
- * are not <em>hidden</em>. Furthermore, {@code @AutoClose} fields from subclasses
- * will be closed before {@code @AutoClose} fields in superclasses.
+ * <p>{@code @AutoClose} fields are inherited from superclasses. Furthermore,
+ * {@code @AutoClose} fields from subclasses will be closed before
+ * {@code @AutoClose} fields in superclasses.
  *
  * <h2>Evaluation Order</h2>
  *

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java
Patch:
@@ -71,7 +71,7 @@ private static Boolean getFailIfNoTests(Class<?> suiteClass) {
 	SuiteTestDescriptor addDiscoveryRequestFrom(Class<?> suiteClass) {
 		Preconditions.condition(launcherDiscoveryResult == null,
 			"discovery request can not be modified after discovery");
-		discoveryRequestBuilder.suite(suiteClass);
+		discoveryRequestBuilder.applySelectorsAndFiltersFromSuite(suiteClass);
 		return this;
 	}
 
@@ -92,6 +92,7 @@ void discover() {
 				.filterStandardClassNamePatterns(true)
 				.enableImplicitConfigurationParameters(false)
 				.parentConfigurationParameters(configurationParameters)
+				.applyConfigurationParametersFromSuite(suiteClass)
 				.build();
 		// @formatter:on
 		this.launcher = SuiteLauncher.create();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/LifecycleMethodUtils.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedMethods;
-import static org.junit.platform.commons.util.ReflectionUtils.returnsVoid;
+import static org.junit.platform.commons.util.ReflectionUtils.returnsPrimitiveVoid;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -96,7 +96,7 @@ private static void assertNonStatic(Class<? extends Annotation> annotationType,
 	}
 
 	private static void assertVoid(Class<? extends Annotation> annotationType, Method method) {
-		if (!returnsVoid(method)) {
+		if (!returnsPrimitiveVoid(method)) {
 			throw new JUnitException(String.format("@%s method '%s' must not return a value.",
 				annotationType.getSimpleName(), method.toGenericString()));
 		}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ForkJoinPoolHierarchicalTestExecutorService.java
Patch:
@@ -94,9 +94,9 @@ private ForkJoinPool createForkJoinPool(ParallelExecutionConfiguration configura
 	}
 
 	private static Optional<Constructor<ForkJoinPool>> sinceJava9Constructor() {
-		return Try.call(() -> ForkJoinPool.class.getDeclaredConstructor(Integer.TYPE, ForkJoinWorkerThreadFactory.class,
-			UncaughtExceptionHandler.class, Boolean.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Predicate.class,
-			Long.TYPE, TimeUnit.class)) //
+		return Try.call(() -> ForkJoinPool.class.getDeclaredConstructor(int.class, ForkJoinWorkerThreadFactory.class,
+			UncaughtExceptionHandler.class, boolean.class, int.class, int.class, int.class, Predicate.class, long.class,
+			TimeUnit.class)) //
 				.toOptional();
 	}
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClassLoaderUtilsTests.java
Patch:
@@ -108,8 +108,7 @@ void getLocationFromNullFails() {
 
 	@Test
 	void getLocationFromVariousObjectsArePresent() {
-		assertTrue(ClassLoaderUtils.getLocation(void.class).isPresent());
-		assertTrue(ClassLoaderUtils.getLocation(byte.class).isPresent());
+		assertTrue(ClassLoaderUtils.getLocation(getClass()).isPresent());
 		assertTrue(ClassLoaderUtils.getLocation(this).isPresent());
 		assertTrue(ClassLoaderUtils.getLocation("").isPresent());
 		assertTrue(ClassLoaderUtils.getLocation(0).isPresent());

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/MethodSourceTests.java
Patch:
@@ -239,7 +239,7 @@ void getJavaMethodFromStringShouldFindVoidMethod() throws Exception {
 
 	@Test
 	void getJavaMethodFromStringShouldFindMethodWithParameter() throws Exception {
-		var testMethod = getClass().getDeclaredMethod("method3", Integer.TYPE);
+		var testMethod = getClass().getDeclaredMethod("method3", int.class);
 		var source = MethodSource.from(getClass().getName(), testMethod.getName(), testMethod.getParameterTypes());
 
 		assertThat(source.getJavaMethod()).isEqualTo(testMethod);
@@ -254,7 +254,7 @@ void getJavaMethodFromStringShouldThrowExceptionIfParameterTypesAreNotSupplied()
 
 	@Test
 	void getJavaMethodFromStringShouldThrowExceptionIfParameterTypesDoNotMatch() {
-		var source = MethodSource.from(getClass().getName(), "method3", Double.TYPE);
+		var source = MethodSource.from(getClass().getName(), "method3", double.class);
 
 		assertThrows(PreconditionViolationException.class, source::getJavaMethod);
 	}

File: platform-tests/src/test/java/org/junit/platform/commons/util/AnnotationUtilsTests.java
Patch:
@@ -391,10 +391,11 @@ void findAnnotatedMethodsForAnnotationUsedInClassAndSuperclassHierarchyDown() th
 	}
 
 	/**
-	 * @see https://github.com/junit-team/junit5/issues/3498
+	 * @see https://github.com/junit-team/junit5/issues/3553
 	 */
+	@Disabled("Until #3553 is resolved")
 	@Test
-	void findAnnotatedMethodsAppliesPredicateBeforeSearchingTypeHierarchy() throws Exception {
+	void findAnnotatedMethodsDoesNotAllowInstanceMethodToHideStaticMethod() throws Exception {
 		final String BEFORE = "before";
 		Class<?> superclass = SuperclassWithStaticPackagePrivateBeforeMethod.class;
 		Method beforeAllMethod = superclass.getDeclaredMethod(BEFORE);

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -1326,10 +1326,11 @@ void findMethodsIgnoresBridgeMethods() throws Exception {
 	}
 
 	/**
-	 * @see https://github.com/junit-team/junit5/issues/3498
+	 * @see https://github.com/junit-team/junit5/issues/3553
 	 */
+	@Disabled("Until #3553 is resolved")
 	@Test
-	void findMethodsAppliesPredicateBeforeSearchingTypeHierarchy() throws Exception {
+	void findMethodsDoesNotAllowInstanceMethodToHideStaticMethod() throws Exception {
 		final String BEFORE = "before";
 		Class<?> superclass = SuperclassWithStaticPackagePrivateBeforeMethod.class;
 		Method staticMethod = superclass.getDeclaredMethod(BEFORE);

File: platform-tests/src/test/java/org/junit/platform/commons/util/pkg1/SuperclassWithStaticPackagePrivateBeforeMethod.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.jupiter.api.BeforeAll;
 
 /**
- * @see https://github.com/junit-team/junit5/issues/3498
+ * @see https://github.com/junit-team/junit5/issues/3553
  */
 public class SuperclassWithStaticPackagePrivateBeforeMethod {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/pkg1/subpkg/SubclassWithNonStaticPackagePrivateBeforeMethod.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.platform.commons.util.pkg1.SuperclassWithStaticPackagePrivateBeforeMethod;
 
 /**
- * @see https://github.com/junit-team/junit5/issues/3498
+ * @see https://github.com/junit-team/junit5/issues/3553
  */
 public class SubclassWithNonStaticPackagePrivateBeforeMethod extends SuperclassWithStaticPackagePrivateBeforeMethod {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/pkg1/SuperclassWithStaticPackagePrivateTempDirField.java
Patch:
@@ -13,7 +13,7 @@
 import java.nio.file.Path;
 
 /**
- * @see https://github.com/junit-team/junit5/issues/3532
+ * @see https://github.com/junit-team/junit5/issues/3553
  */
 public class SuperclassWithStaticPackagePrivateTempDirField {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/pkg1/subpkg/SubclassWithNonStaticPackagePrivateTempDirField.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.platform.commons.util.pkg1.SuperclassWithStaticPackagePrivateTempDirField;
 
 /**
- * @see https://github.com/junit-team/junit5/issues/3532
+ * @see https://github.com/junit-team/junit5/issues/3553
  */
 public class SubclassWithNonStaticPackagePrivateTempDirField extends SuperclassWithStaticPackagePrivateTempDirField {
 

File: documentation/src/test/java/example/registration/WebServerDemo.java
Patch:
@@ -31,6 +31,9 @@ class WebServerDemo {
 
 	@Test
 	void getProductList() {
+		// end::user_guide[]
+		@SuppressWarnings("resource")
+		// tag::user_guide[]
 		WebClient webClient = new WebClient();
 		String serverUrl = server.getServerUrl();
 		// Use WebClient to connect to web server using serverUrl and verify response

File: junit-jupiter-api/src/module/org.junit.jupiter.api/module-info.java
Patch:
@@ -23,6 +23,5 @@
 	exports org.junit.jupiter.api.io;
 	exports org.junit.jupiter.api.parallel;
 
-	opens org.junit.jupiter.api to org.junit.platform.commons;
 	opens org.junit.jupiter.api.condition to org.junit.platform.commons;
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/MutableExtensionRegistry.java
Patch:
@@ -49,6 +49,7 @@ public class MutableExtensionRegistry implements ExtensionRegistry, ExtensionReg
 
 	private static final List<Extension> DEFAULT_STATELESS_EXTENSIONS = Collections.unmodifiableList(Arrays.asList(//
 		new DisabledCondition(), //
+		new AutoCloseExtension(), //
 		new TimeoutExtension(), //
 		new RepeatedTestExtension(), //
 		new TestInfoParameterResolver(), //

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExtensionRegistryTests.java
Patch:
@@ -39,7 +39,7 @@
  */
 class ExtensionRegistryTests {
 
-	private static final int NUM_DEFAULT_EXTENSIONS = 6;
+	private static final int NUM_DEFAULT_EXTENSIONS = 7;
 
 	private final JupiterConfiguration configuration = mock();
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GraalVmStarterTests.java
Patch:
@@ -41,6 +41,7 @@ void runsTestsInNativeImage() {
 				.setProject("graalvm-starter") //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
 				.addArguments("javaToolchains", "nativeTest", "--no-daemon", "--stacktrace") //
+				.addArguments("-Porg.gradle.java.installations.fromEnv=GRAALVM_HOME") //
 				.setTimeout(Duration.ofMinutes(5)) //
 				.build();
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GraalVmStarterTests.java
Patch:
@@ -49,7 +49,8 @@ void runsTestsInNativeImage() {
 		assertFalse(result.isTimedOut(), () -> "tool timed out: " + result);
 
 		assumeFalse(
-			result.getOutputLines("err").stream().anyMatch(line -> line.contains("No matching toolchains found")),
+			result.getOutputLines("err").stream().anyMatch(
+				line -> line.contains("No locally installed toolchains match")),
 			"Abort test if GraalVM is not installed");
 
 		assertEquals(0, result.getExitCode());

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/store/NamespacedHierarchicalStore.java
Patch:
@@ -252,7 +252,8 @@ private <T> T castToRequiredType(Object key, Object value, Class<T> requiredType
 		}
 		// else
 		throw new NamespacedHierarchicalStoreException(
-			String.format("Object stored under key [%s] is not of required type [%s]", key, requiredType.getName()));
+			String.format("Object stored under key [%s] is not of required type [%s], but was [%s]: %s", key,
+				requiredType.getName(), value.getClass(), value));
 	}
 
 	private static class CompositeKey<N> {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -40,7 +40,7 @@
  * methods may optionally declare parameters to be resolved by
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}.
  *
- * <p>Using {@code private} visibility for {@code @BeforeAll} methods is
+ * <p>Using {@code private} visibility for {@code @AfterAll} methods is
  * strongly discouraged and will be disallowed in a future release.
  *
  * <h2>Inheritance and Execution Order</h2>

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -53,8 +53,7 @@ public void close() throws Exception {
 				((AutoCloseable) extensionContext).close();
 			}
 			catch (Exception e) {
-				logger.error(e, () -> "Caught exception while closing extension context: " + extensionContext);
-				throw e;
+				throw new JUnitException("Failed to close extension context", e);
 			}
 		}
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -248,11 +248,12 @@ void customEmptyValueAndDefaultNullValue() {
 
 	@Test
 	void customNullValues() {
-		var annotation = csvSource().nullValues("N/A", "NIL").lines("apple, , NIL, '', N/A, banana").build();
+		var annotation = csvSource().nullValues("N/A", "NIL", "null")//
+				.lines("apple, , NIL, '', N/A, banana, null").build();
 
 		var arguments = provideArguments(annotation);
 
-		assertThat(arguments).containsExactly(array("apple", null, null, "", null, "banana"));
+		assertThat(arguments).containsExactly(array("apple", null, null, "", null, "banana", null));
 	}
 
 	@Test

File: documentation/src/test/java/example/extensions/RandomNumberDemo.java
Patch:
@@ -27,7 +27,7 @@ class RandomNumberDemo {
 	private int randomNumber1;
 
 	RandomNumberDemo(@Random int randomNumber2) {
-		// Use randomNumber2 in constructor
+		// Use randomNumber2 in constructor.
 	}
 
 	@BeforeEach

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/StandaloneTests.java
Patch:
@@ -354,8 +354,8 @@ void execute() throws IOException {
 		var workspace = Request.WORKSPACE.resolve("standalone");
 		var expectedOutLines = Files.readAllLines(workspace.resolve("expected-out.txt"));
 		var expectedErrLines = Files.readAllLines(workspace.resolve("expected-err.txt"));
-		assertLinesMatch(expectedOutLines, result.getOutputLines("out"), result.getOutput("out"));
-		assertLinesMatch(expectedErrLines, result.getOutputLines("err"), result.getOutput("err"));
+		assertLinesMatch(expectedOutLines, result.getOutputLines("out"));
+		assertLinesMatch(expectedErrLines, result.getOutputLines("err"));
 
 		var jupiterVersion = Helper.version("junit-jupiter-engine");
 		var vintageVersion = Helper.version("junit-vintage-engine");

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/ClassSelectorResolver.java
Patch:
@@ -26,15 +26,14 @@
 import org.junit.platform.engine.discovery.UniqueIdSelector;
 import org.junit.platform.engine.support.discovery.SelectorResolver;
 import org.junit.runner.Runner;
-import org.junit.runners.model.RunnerBuilder;
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
  * @since 4.12
  */
 class ClassSelectorResolver implements SelectorResolver {
 
-	private static final RunnerBuilder RUNNER_BUILDER = new DefensiveAllDefaultPossibilitiesBuilder();
+	private static final DefensiveAllDefaultPossibilitiesBuilder RUNNER_BUILDER = new DefensiveAllDefaultPossibilitiesBuilder();
 
 	private final ClassFilter classFilter;
 
@@ -76,7 +75,7 @@ private Resolution resolveTestClass(Class<?> testClass, Context context) {
 
 	private RunnerTestDescriptor createRunnerTestDescriptor(TestDescriptor parent, Class<?> testClass, Runner runner) {
 		UniqueId uniqueId = parent.getUniqueId().append(SEGMENT_TYPE_RUNNER, testClass.getName());
-		return new RunnerTestDescriptor(uniqueId, testClass, runner);
+		return new RunnerTestDescriptor(uniqueId, testClass, runner, RUNNER_BUILDER.isIgnored(runner));
 	}
 
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/MainCommand.java
Patch:
@@ -33,7 +33,7 @@
 		sortOptions = false, //
 		usageHelpWidth = 95, //
 		showAtFileInUsageHelp = true, //
-		usageHelpAutoWidth = true, //
+		usageHelpAutoWidth = false, // https://github.com/remkop/picocli/issues/1104
 		description = "Launches the JUnit Platform for test discovery and execution.", //
 		footerHeading = "%n", //
 		footer = "For more information, please refer to the JUnit User Guide at%n" //

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherTests.java
Patch:
@@ -47,8 +47,7 @@ void displayBanner(String command) {
 		var consoleLauncher = new ConsoleLauncher(ConsoleTestExecutor::new, printSink, printSink);
 		consoleLauncher.run(command);
 
-		assertThat(stringWriter.toString()).contains(
-			"Thanks for using JUnit! Support its development at https://junit.org/sponsoring");
+		assertThat(stringWriter.toString()).contains("Thanks for using JUnit!");
 	}
 
 	@ParameterizedTest(name = "{0}")

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/StandaloneTests.java
Patch:
@@ -66,7 +66,7 @@ void listAllObservableEngines() {
 				.setTool(new Java()) //
 				.setProject("standalone") //
 				.addArguments("-jar", MavenRepo.jar("junit-platform-console-standalone")) //
-				.addArguments("engines", "--disable-banner").build() //
+				.addArguments("engines", "--disable-ansi-colors", "--disable-banner").build() //
 				.run(false);
 
 		assertEquals(0, result.getExitCode(), String.join("\n", result.getOutputLines("out")));

File: documentation/src/test/java/example/extensions/RandomNumberExtension.java
Patch:
@@ -86,7 +86,7 @@ private void injectFields(Class<?> testClass, Object testInstance,
 	}
 
 	private static boolean isInteger(Class<?> type) {
-		return int.class.isAssignableFrom(type);
+		return type == Integer.class || type == int.class;
 	}
 
 }

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherTests.java
Patch:
@@ -38,7 +38,7 @@ void displayHelp(String command) {
 		var exitCode = consoleLauncher.run(command, "--help").getExitCode();
 
 		assertEquals(0, exitCode);
-		assertThat(stringWriter.toString()).contains("--help", "--disable-banner", "--scan-classpath" /* ... */);
+		assertThat(stringWriter.toString()).contains("--help", "--disable-banner" /* ... */);
 	}
 
 	@ParameterizedTest(name = "{0}")

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/config/DefaultJupiterConfigurationTests.java
Patch:
@@ -122,7 +122,7 @@ void shouldGetDefaultTempDirFactorySupplierWithConfigParamSet() {
 
 		Supplier<TempDirFactory> supplier = configuration.getDefaultTempDirFactorySupplier();
 
-		assertThat(supplier.get()).isInstanceOf(TempDirFactory.class);
+		assertThat(supplier.get()).isInstanceOf(CustomFactory.class);
 	}
 
 	private static class CustomFactory implements TempDirFactory {

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GradleKotlinExtensionsTests.java
Patch:
@@ -15,6 +15,8 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static platform.tooling.support.Helper.TOOL_TIMEOUT;
 
+import java.nio.file.Paths;
+
 import de.sormuras.bartholdy.tool.GradleWrapper;
 
 import org.junit.jupiter.api.Test;
@@ -32,7 +34,7 @@ class GradleKotlinExtensionsTests {
 	@Test
 	void gradle_wrapper() {
 		var result = Request.builder() //
-				.setTool(new GradleWrapper(Request.PROJECTS.resolve("gradle-kotlin-extensions"))) //
+				.setTool(new GradleWrapper(Paths.get(".."))) //
 				.setProject("gradle-kotlin-extensions") //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
 				.addArguments("build", "--no-daemon", "--stacktrace") //

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/JRE.java
Patch:
@@ -159,7 +159,7 @@ public enum JRE {
 	 *
 	 * @since 5.10
 	 */
-	@API(status = STABLE, since = "5.9.2")
+	@API(status = STABLE, since = "5.10")
 	JAVA_22,
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/JRE.java
Patch:
@@ -139,7 +139,7 @@ public enum JRE {
 	JAVA_20,
 
 	/**
-	 * Java 20.
+	 * Java 21.
 	 *
 	 * @since 5.9.2
 	 */

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -114,7 +114,7 @@ default String getLegacyReportingName() {
 	 *
 	 * @see #getParent()
 	 */
-	@API(status = STABLE, since = "5.10")
+	@API(status = STABLE, since = "1.10")
 	default Set<? extends TestDescriptor> getAncestors() {
 		if (!getParent().isPresent()) {
 			return Collections.emptySet();

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/SelectMethodsSuite.java
Patch:
@@ -18,6 +18,6 @@
  * @since 1.10
  */
 @Suite
-@SelectMethod(clazz = MultipleTestsTestCase.class, name = "test")
+@SelectMethod(type = MultipleTestsTestCase.class, name = "test")
 public class SelectMethodsSuite {
 }

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -1361,7 +1361,8 @@ public static Optional<Method> findMethod(Class<?> clazz, String methodName, Str
 		return findMethod(clazz, methodName, resolveParameterTypes(clazz, methodName, parameterTypeNames));
 	}
 
-	private static Class<?>[] resolveParameterTypes(Class<?> clazz, String methodName, String parameterTypeNames) {
+	@API(status = INTERNAL, since = "1.10")
+	public static Class<?>[] resolveParameterTypes(Class<?> clazz, String methodName, String parameterTypeNames) {
 		if (StringUtils.isBlank(parameterTypeNames)) {
 			return EMPTY_CLASS_ARRAY;
 		}

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/MethodSelectorTests.java
Patch:
@@ -35,8 +35,9 @@ void equalsAndHashCode() {
 		var selector1 = new MethodSelector(null, TEST_CASE_NAME, "method", "int, boolean");
 		var selector2 = new MethodSelector(null, TEST_CASE_NAME, "method", "int, boolean");
 		var selector3 = new MethodSelector(TestCase.class, "method", "int, boolean");
+		var selector4 = new MethodSelector(TestCase.class, "method", int.class, boolean.class);
 
-		Stream.of(selector2, selector3).forEach(selector -> {
+		Stream.of(selector2, selector3, selector4).forEach(selector -> {
 			assertEqualsAndHashCode(selector1, selector, new MethodSelector(null, TEST_CASE_NAME, "method", "int"));
 			assertEqualsAndHashCode(selector1, selector,
 				new MethodSelector((ClassLoader) null, TEST_CASE_NAME, "method", ""));

File: junit-platform-commons/src/testFixtures/java/org/junit/platform/commons/test/TestClassLoader.java
Patch:
@@ -28,7 +28,7 @@
  * <p>This class loader is only suitable for specific testing scenarios, where
  * you need to load particular classes from a different class loader.
  *
- * @since 5.10
+ * @since 1.10
  */
 public class TestClassLoader extends URLClassLoader {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -269,10 +269,10 @@ void propagatesMethodSelectors() {
 		assertThat(methodSelectors).hasSize(2);
 		assertThat(methodSelectors.get(0).getClassName()).isEqualTo("com.acme.Foo");
 		assertThat(methodSelectors.get(0).getMethodName()).isEqualTo("m");
-		assertThat(methodSelectors.get(0).getMethodParameterTypes()).isEmpty();
+		assertThat(methodSelectors.get(0).getParameterTypeNames()).isEmpty();
 		assertThat(methodSelectors.get(1).getClassName()).isEqualTo("com.example.Bar");
 		assertThat(methodSelectors.get(1).getMethodName()).isEqualTo("method");
-		assertThat(methodSelectors.get(1).getMethodParameterTypes()).isEqualTo("java.lang.Object");
+		assertThat(methodSelectors.get(1).getParameterTypeNames()).isEqualTo("java.lang.Object");
 	}
 
 	@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/io/TempDir.java
Patch:
@@ -90,7 +90,7 @@
  *
  * @since 5.4
  */
-@Target({ ElementType.FIELD, ElementType.PARAMETER })
+@Target({ ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(status = STABLE, since = "5.10")

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java
Patch:
@@ -57,13 +57,14 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 	}
 
 	private Method getConditionMethod(String fullyQualifiedMethodName, ExtensionContext context) {
+		final Class<?> testClass = context.getRequiredTestClass();
 		if (!fullyQualifiedMethodName.contains("#")) {
-			return findMethod(context.getRequiredTestClass(), fullyQualifiedMethodName);
+			return findMethod(testClass, fullyQualifiedMethodName);
 		}
 		String[] methodParts = ReflectionUtils.parseFullyQualifiedMethodName(fullyQualifiedMethodName);
 		String className = methodParts[0];
 		String methodName = methodParts[1];
-		Class<?> clazz = ReflectionUtils.tryToLoadClass(className).getOrThrow(
+		Class<?> clazz = ReflectionUtils.tryToLoadClass(className, testClass.getClassLoader()).getOrThrow(
 			cause -> new JUnitException(format("Could not load class [%s]", className), cause));
 		return findMethod(clazz, methodName);
 	}

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -1049,10 +1049,9 @@ void findMethodByParameterNamesWithWithCustomTypeFromDifferentClassLoader() thro
 
 				var parameterTypes = method.getParameterTypes();
 				assertThat(parameterTypes).extracting(Class::getName).containsExactly(nestedTypeName);
-				Class<?> parameterType = parameterTypes[0].getClass();
+				Class<?> parameterType = parameterTypes[0];
 				assertThat(parameterType).isNotEqualTo(CustomType.NestedType.class);
-				// The ClassLoader is null because of the behavior of our TestClassLoader.
-				assertThat(parameterType.getClassLoader()).isNull();
+				assertThat(parameterType.getClassLoader()).isInstanceOf(TestClassLoader.class);
 			});
 		}
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/FallbackStringToObjectConverter.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.junit.jupiter.params.converter.DefaultArgumentConverter.StringToObjectConverter;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestMethodContext.java
Patch:
@@ -253,7 +253,7 @@ static class Aggregator implements Resolver {
 
 		@Override
 		public Object resolve(ParameterContext parameterContext, Object[] arguments, int invocationIndex) {
-			ArgumentsAccessor accessor = new DefaultArgumentsAccessor(invocationIndex, arguments);
+			ArgumentsAccessor accessor = new DefaultArgumentsAccessor(parameterContext, invocationIndex, arguments);
 			try {
 				return this.argumentsAggregator.aggregateArguments(accessor, parameterContext);
 			}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/CloseablePathCleanupTests.java
Patch:
@@ -36,7 +36,6 @@
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.jupiter.engine.execution.NamespaceAwareStore;
 import org.junit.platform.engine.support.store.NamespacedHierarchicalStore;
-import org.mockito.Mockito;
 
 /**
  * Integration tests for cleanup of the {@link TempDirectory} when the {@link CleanupMode} is
@@ -84,7 +83,7 @@ void never() throws IOException {
 
 		closeablePath.close();
 		assertThat(closeablePath.get()).exists();
-		verify(factory, Mockito.never()).close();
+		verify(factory).close();
 	}
 
 	@Test
@@ -97,7 +96,7 @@ void onSuccessWithException() throws IOException {
 
 		closeablePath.close();
 		assertThat(closeablePath.get()).exists();
-		verify(factory, Mockito.never()).close();
+		verify(factory).close();
 	}
 
 	@Test

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/AnnotationBasedArgumentConverter.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.platform.commons.util.Preconditions;
 
 /**
- * {@code SimpleArgumentConverter} is an abstract base class for
+ * {@code AnnotationBasedArgumentConverter} is an abstract base class for
  * {@link ArgumentConverter} implementations that also need to consume an
  * annotation in order to perform the conversion.
  *

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -179,7 +179,9 @@ void throwsExceptionWhenNonStaticFactoryMethodIsReferencedAndStaticIsRequired()
 			() -> provideArguments(NonStaticTestCase.class, null, false, "nonStaticStringStreamProvider").toArray());
 
 		assertThat(exception).hasMessageContainingAll("Method '",
-			"' must be static unless the test class is annotated with @TestInstance(Lifecycle.PER_CLASS)");
+			"' must be static: local factory methods must be static ",
+			"unless the test class is annotated with @TestInstance(Lifecycle.PER_CLASS); ",
+			"external factory methods must always be static.");
 	}
 
 	@Test

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -69,7 +69,8 @@ private List<? extends DiscoverySelector> createDiscoverySelectors(CommandLineOp
 				"Scanning the module-path and using explicit selectors at the same time is not supported");
 			return selectModules(ModuleUtils.findAllNonSystemBootModuleNames());
 		}
-		return Preconditions.notEmpty(explicitSelectors, "No arguments were supplied to the ConsoleLauncher");
+		return Preconditions.notEmpty(explicitSelectors,
+			"Please specify an explicit selector option or use --scan-class-path or --scan-modules");
 	}
 
 	private List<ClasspathRootSelector> createClasspathRootSelectors(CommandLineOptions options) {

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherIntegrationTests.java
Patch:
@@ -26,8 +26,9 @@ class ConsoleLauncherIntegrationTests {
 	void executeWithoutArgumentsFailsAndPrintsHelpInformation() {
 		var result = new ConsoleLauncherWrapper().execute(-1);
 		assertAll("empty args array results in display of help information and an exception stacktrace", //
-			() -> assertThat(result.out).contains("help information"), //
-			() -> assertThat(result.err).contains("No arguments were supplied to the ConsoleLauncher") //
+			() -> assertThat(result.err).contains("help information"), //
+			() -> assertThat(result.err).contains(
+				"Please specify an explicit selector option or use --scan-class-path or --scan-modules") //
 		);
 	}
 

File: junit-platform-console/src/main/java/org/junit/platform/console/options/DiscoverTestsCommand.java
Patch:
@@ -25,7 +25,9 @@ public class DiscoverTestsCommand extends BaseCommand<Void> {
 
 	@Override
 	protected Void execute(PrintWriter out) {
-		new ConsoleTestExecutor(options.toCommandLineOptions()).discover(out);
+		CommandLineOptions options = this.options.toCommandLineOptions();
+		options.setAnsiColorOutputDisabled(outputOptions.isDisableAnsiColors());
+		new ConsoleTestExecutor(options).discover(out);
 		return null;
 	}
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/ListTestEnginesCommand.java
Patch:
@@ -35,13 +35,15 @@ void displayEngines(PrintWriter out) {
 		StreamSupport.stream(engines.spliterator(), false) //
 				.sorted(Comparator.comparing(TestEngine::getId)) //
 				.forEach(engine -> displayEngine(out, engine));
+		out.flush();
 	}
 
 	private void displayEngine(PrintWriter out, TestEngine engine) {
 		StringJoiner details = new StringJoiner(":", " (", ")");
 		engine.getGroupId().ifPresent(details::add);
 		engine.getArtifactId().ifPresent(details::add);
 		engine.getVersion().ifPresent(details::add);
-		out.println(engine.getId() + details);
+		out.println(
+			commandSpec.commandLine().getColorScheme().text(String.format("@|bold %s|@%s", engine.getId(), details)));
 	}
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/DynamicTestTests.java
Patch:
@@ -179,9 +179,9 @@ void sourceUriIsReturnedWhenSupplied() {
 		URI containerSourceUri = URI.create("other://container");
 		DynamicContainer container = dynamicContainer("bar", containerSourceUri, Stream.of(test));
 
-		assertThat(test.getTestSourceUri().get()).isSameAs(testSourceUri);
+		assertThat(test.getTestSourceUri()).containsSame(testSourceUri);
 		assertThat(test.toString()).isEqualTo("DynamicTest [displayName = 'foo', testSourceUri = any://test]");
-		assertThat(container.getTestSourceUri().get()).isSameAs(containerSourceUri);
+		assertThat(container.getTestSourceUri()).containsSame(containerSourceUri);
 		assertThat(container.toString()).isEqualTo(
 			"DynamicContainer [displayName = 'bar', testSourceUri = other://container]");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TimeoutConfigurationTests.java
Patch:
@@ -139,7 +139,7 @@ void logsInvalidValues(LogRecordListener logRecordListener) {
 	void specificThreadModeIsUsed() {
 		when(extensionContext.getConfigurationParameter(DEFAULT_TIMEOUT_THREAD_MODE_PROPERTY_NAME)).thenReturn(
 			Optional.of("SEPARATE_THREAD"));
-		assertThat(config.getDefaultTimeoutThreadMode()).isEqualTo(Optional.of(SEPARATE_THREAD));
+		assertThat(config.getDefaultTimeoutThreadMode()).contains(SEPARATE_THREAD);
 	}
 
 	@Test
@@ -148,7 +148,7 @@ void logsInvalidThreadModeValueAndReturnEmpty(LogRecordListener logRecordListene
 		when(extensionContext.getConfigurationParameter(DEFAULT_TIMEOUT_THREAD_MODE_PROPERTY_NAME)).thenReturn(
 			Optional.of("invalid"));
 
-		assertThat(config.getDefaultTimeoutThreadMode()).isEqualTo(Optional.empty());
+		assertThat(config.getDefaultTimeoutThreadMode()).isNotPresent();
 		assertThat(logRecordListener.stream(Level.WARNING).map(LogRecord::getMessage)) //
 				.containsExactly(
 					"Invalid timeout thread mode 'invalid' set via the 'junit.jupiter.execution.timeout.thread.mode.default' configuration parameter.");

File: platform-tests/src/test/java/org/junit/platform/AbstractEqualsAndHashCodeTests.java
Patch:
@@ -26,7 +26,7 @@ protected final <T> void assertEqualsAndHashCode(T equal1, T equal2, T different
 		assertThat(different).isNotNull();
 
 		assertThat(equal1).isNotSameAs(equal2);
-		assertThat(equal1).isNotEqualTo(null);
+		assertThat(equal1).isNotNull();
 		assertThat(equal1).isNotEqualTo(new Object());
 		assertThat(equal1).isNotEqualTo(different);
 		assertThat(different).isNotEqualTo(equal1);

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -269,7 +269,7 @@ void propagatesMethodSelectors() {
 		assertThat(methodSelectors).hasSize(2);
 		assertThat(methodSelectors.get(0).getClassName()).isEqualTo("com.acme.Foo");
 		assertThat(methodSelectors.get(0).getMethodName()).isEqualTo("m");
-		assertThat(methodSelectors.get(0).getMethodParameterTypes()).isEqualTo("");
+		assertThat(methodSelectors.get(0).getMethodParameterTypes()).isEmpty();
 		assertThat(methodSelectors.get(1).getClassName()).isEqualTo("com.example.Bar");
 		assertThat(methodSelectors.get(1).getMethodName()).isEqualTo("method");
 		assertThat(methodSelectors.get(1).getMethodParameterTypes()).isEqualTo("java.lang.Object");

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TreeNodeTests.java
Patch:
@@ -51,7 +51,7 @@ void childrenCanBeAddedConcurrently() throws Exception {
 			}
 		});
 
-		assertThat(treeNode.children.size()).isEqualTo(NUM_THREADS * ITEMS_PER_THREAD);
+		assertThat(treeNode.children).hasSize(NUM_THREADS * ITEMS_PER_THREAD);
 	}
 
 	@Test
@@ -64,7 +64,7 @@ void reportEntriesCanBeAddedConcurrently() throws Exception {
 			}
 		});
 
-		assertThat(treeNode.reports.size()).isEqualTo(NUM_THREADS * ITEMS_PER_THREAD);
+		assertThat(treeNode.reports).hasSize(NUM_THREADS * ITEMS_PER_THREAD);
 	}
 
 	private void runConcurrently(Runnable action) throws InterruptedException {

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/CompositeTestSourceTests.java
Patch:
@@ -53,12 +53,12 @@ void createCompositeTestSourceFromClassAndFileSources() {
 		var sources = new ArrayList<>(List.of(fileSource, classSource));
 		var compositeTestSource = CompositeTestSource.from(sources);
 
-		assertThat(compositeTestSource.getSources().size()).isEqualTo(2);
+		assertThat(compositeTestSource.getSources()).hasSize(2);
 		assertThat(compositeTestSource.getSources()).contains(fileSource, classSource);
 
 		// Ensure the supplied sources list was defensively copied.
 		sources.remove(1);
-		assertThat(compositeTestSource.getSources().size()).isEqualTo(2);
+		assertThat(compositeTestSource.getSources()).hasSize(2);
 
 		// Ensure the returned sources list is immutable.
 		assertThrows(UnsupportedOperationException.class, () -> compositeTestSource.getSources().add(fileSource));

File: platform-tests/src/test/java/org/junit/platform/launcher/TagFilterTests.java
Patch:
@@ -172,12 +172,12 @@ private void excludeSingleTag(PostDiscoveryFilter filter) {
 
 	private void assertIncluded(FilterResult filterResult, String expectedReason) {
 		assertTrue(filterResult.included());
-		assertThat(filterResult.getReason()).isPresent().contains(expectedReason);
+		assertThat(filterResult.getReason()).contains(expectedReason);
 	}
 
 	private void assertExcluded(FilterResult filterResult, String expectedReason) {
 		assertTrue(filterResult.excluded());
-		assertThat(filterResult.getReason()).isPresent().contains(expectedReason);
+		assertThat(filterResult.getReason()).contains(expectedReason);
 	}
 
 	// -------------------------------------------------------------------------

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -403,7 +403,7 @@ void withoutConfigurationParameters_LauncherPassesEmptyConfigurationParametersIn
 		launcher.execute(request().build());
 
 		var configurationParameters = engine.requestForExecution.getConfigurationParameters();
-		assertThat(configurationParameters.get("key").isPresent()).isFalse();
+		assertThat(configurationParameters.get("key")).isNotPresent();
 		assertThat(configurationParameters.size()).isEqualTo(0);
 	}
 
@@ -417,8 +417,8 @@ void withConfigurationParameters_LauncherPassesPopulatedConfigurationParametersI
 
 		var configurationParameters = engine.requestForExecution.getConfigurationParameters();
 		assertThat(configurationParameters.size()).isEqualTo(1);
-		assertThat(configurationParameters.get("key").isPresent()).isTrue();
-		assertThat(configurationParameters.get("key").get()).isEqualTo("value");
+		assertThat(configurationParameters.get("key")).isPresent();
+		assertThat(configurationParameters.get("key")).contains("value");
 	}
 
 	@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -152,4 +152,6 @@
 	 */
 	String name() default SHORT_DISPLAY_NAME;
 
+	int failureThreshold() default Integer.MAX_VALUE;
+
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TempDirectory.java
Patch:
@@ -319,6 +319,7 @@ private void resetPermissionsAndTryToDeleteAgain(Path path, IOException exceptio
 						}
 						catch (Exception suppressed) {
 							exception.addSuppressed(suppressed);
+							failures.put(path, exception);
 						}
 					}
 					else {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -13,10 +13,12 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.junit.jupiter.params.provider.MockCsvAnnotationBuilder.csvSource;
+import static org.mockito.Mockito.mock;
 
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.PreconditionViolationException;
 
@@ -378,7 +380,7 @@ void throwsExceptionIfColumnCountExceedsHeaderCount() {
 	private Stream<Object[]> provideArguments(CsvSource annotation) {
 		var provider = new CsvArgumentsProvider();
 		provider.accept(annotation);
-		return provider.provideArguments(null).map(Arguments::get);
+		return provider.provideArguments(mock(ExtensionContext.class)).map(Arguments::get);
 	}
 
 	@SuppressWarnings("unchecked")

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/ValueArgumentsProviderTests.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.PreconditionViolationException;
 
 /**
@@ -160,7 +161,7 @@ private static Stream<Object[]> provideArguments(short[] shorts, byte[] bytes, i
 
 		var provider = new ValueArgumentsProvider();
 		provider.accept(annotation);
-		return provider.provideArguments(null).map(Arguments::get);
+		return provider.provideArguments(mock(ExtensionContext.class)).map(Arguments::get);
 	}
 
 	private static Object[] array(Object... objects) {

File: junit-platform-testkit/src/module/org.junit.platform.testkit/module-info.java
Patch:
@@ -19,7 +19,7 @@
 	requires transitive org.assertj.core;
 	requires org.junit.platform.commons;
 	requires transitive org.junit.platform.engine;
-	requires org.junit.platform.launcher;
+	requires transitive org.junit.platform.launcher;
 	requires transitive org.opentest4j;
 
 	// exports org.junit.platform.testkit; empty package

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/conditions/IgnoreCondition.java
Patch:
@@ -38,6 +38,9 @@ public class IgnoreCondition implements ExecutionCondition {
 	private static final ConditionEvaluationResult ENABLED = //
 		ConditionEvaluationResult.enabled("@org.junit.Ignore is not present");
 
+	public IgnoreCondition() {
+	}
+
 	/**
 	 * Containers/tests are disabled if {@link Ignore @Ignore} is present on
 	 * the test class or method.

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -46,6 +46,9 @@ public class ExpectedExceptionSupport implements AfterEachCallback, TestExecutio
 
 	private final TestRuleSupport support = new TestRuleSupport(ExpectedExceptionAdapter::new, ExpectedException.class);
 
+	public ExpectedExceptionSupport() {
+	}
+
 	@Override
 	public void handleTestExecutionException(ExtensionContext context, Throwable throwable) throws Throwable {
 		getStore(context).put(EXCEPTION_WAS_HANDLED, TRUE);

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -43,6 +43,9 @@ public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCal
 
 	private final TestRuleSupport support = new TestRuleSupport(ExternalResourceAdapter::new, ExternalResource.class);
 
+	public ExternalResourceSupport() {
+	}
+
 	@Override
 	public void beforeEach(ExtensionContext context) throws Exception {
 		this.support.beforeEach(context);

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -42,6 +42,9 @@ public class VerifierSupport implements AfterEachCallback {
 
 	private final TestRuleSupport support = new TestRuleSupport(VerifierAdapter::new, Verifier.class);
 
+	public VerifierSupport() {
+	}
+
 	@Override
 	public void afterEach(ExtensionContext context) throws Exception {
 		this.support.afterEach(context);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -28,6 +28,9 @@
 @API(status = STABLE, since = "5.7")
 public abstract class SimpleArgumentConverter implements ArgumentConverter {
 
+	public SimpleArgumentConverter() {
+	}
+
 	@Override
 	public final Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
 		return convert(source, context.getParameter().getType());

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -31,6 +31,7 @@
  */
 @Deprecated
 @API(status = DEPRECATED, since = "1.2")
+@SuppressWarnings("missing-explicit-ctor")
 public class SingleTestExecutor {
 
 	/**

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/ExecutionRecorder.java
Patch:
@@ -37,6 +37,9 @@ public class ExecutionRecorder implements EngineExecutionListener {
 
 	private final List<Event> events = new CopyOnWriteArrayList<>();
 
+	public ExecutionRecorder() {
+	}
+
 	/**
 	 * Record an {@link Event} for a dynamically registered container
 	 * or test.

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GraalVmStarterTests.java
Patch:
@@ -46,7 +46,7 @@ void runsTestsInNativeImage() {
 		assertFalse(result.isTimedOut(), () -> "tool timed out: " + result);
 
 		assumeFalse(
-			result.getOutputLines("err").stream().anyMatch(line -> line.contains("No compatible toolchains found")),
+			result.getOutputLines("err").stream().anyMatch(line -> line.contains("No matching toolchains found")),
 			"Abort test if GraalVM is not installed");
 
 		assertEquals(0, result.getExitCode());

File: platform-tests/src/test/java/org/junit/platform/commons/support/ReflectionSupportTests.java
Patch:
@@ -64,7 +64,8 @@ void tryToLoadClassDelegates() {
 			ReflectionSupport.tryToLoadClass("-").toOptional());
 		assertEquals(ReflectionUtils.tryToLoadClass("A").toOptional(),
 			ReflectionSupport.tryToLoadClass("A").toOptional());
-		assertEquals(ReflectionUtils.tryToLoadClass("java.nio.Bits"), ReflectionSupport.tryToLoadClass("java.nio.Bits"));
+		assertEquals(ReflectionUtils.tryToLoadClass("java.nio.Bits"),
+			ReflectionSupport.tryToLoadClass("java.nio.Bits"));
 	}
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/commons/support/ReflectionSupportTests.java
Patch:
@@ -48,7 +48,7 @@ class ReflectionSupportTests {
 	void loadClassDelegates() {
 		assertEquals(ReflectionUtils.loadClass("-"), ReflectionSupport.loadClass("-"));
 		assertEquals(ReflectionUtils.loadClass("A"), ReflectionSupport.loadClass("A"));
-		assertEquals(ReflectionUtils.loadClass("java.io.Bits"), ReflectionSupport.loadClass("java.io.Bits"));
+		assertEquals(ReflectionUtils.loadClass("java.nio.Bits"), ReflectionSupport.loadClass("java.nio.Bits"));
 	}
 
 	@Test
@@ -64,7 +64,7 @@ void tryToLoadClassDelegates() {
 			ReflectionSupport.tryToLoadClass("-").toOptional());
 		assertEquals(ReflectionUtils.tryToLoadClass("A").toOptional(),
 			ReflectionSupport.tryToLoadClass("A").toOptional());
-		assertEquals(ReflectionUtils.tryToLoadClass("java.io.Bits"), ReflectionSupport.tryToLoadClass("java.io.Bits"));
+		assertEquals(ReflectionUtils.tryToLoadClass("java.nio.Bits"), ReflectionSupport.tryToLoadClass("java.nio.Bits"));
 	}
 
 	@Test

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/session/CompositeLauncherSessionListener.java
Patch:
@@ -10,6 +10,8 @@
 
 package org.junit.platform.launcher.listeners.session;
 
+import static org.junit.platform.commons.util.CollectionUtils.forEachInReverseOrder;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -36,6 +38,6 @@ public void launcherSessionOpened(LauncherSession session) {
 
 	@Override
 	public void launcherSessionClosed(LauncherSession session) {
-		listeners.forEach(delegate -> delegate.launcherSessionClosed(session));
+		forEachInReverseOrder(listeners, delegate -> delegate.launcherSessionClosed(session));
 	}
 }

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -929,7 +929,7 @@ public static String[] parseFullyQualifiedMethodName(String fullyQualifiedMethod
 	 * @param qualifiedMethodName a qualified method name, never {@code null} or blank
 	 * @return a 2-element array of strings containing the parsed values
 	 */
-	@API(status = INTERNAL, since = "1.9")
+	@API(status = INTERNAL, since = "1.9.2")
 	public static String[] parseQualifiedMethodName(String qualifiedMethodName) {
 		String methodName = qualifiedMethodName;
 		String methodParameters = "";

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/CyclicSuite.java
Patch:
@@ -13,12 +13,13 @@
 import org.junit.platform.suite.api.IncludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
+import org.junit.platform.suite.engine.testcases.SingleTestTestCase;
 
 /**
  * @since 1.8
  */
 @Suite
 @IncludeClassNamePatterns(".*")
-@SelectClasses(CyclicSuite.class)
+@SelectClasses({ CyclicSuite.class, SingleTestTestCase.class })
 public class CyclicSuite {
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -15,8 +15,8 @@
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.TOP_DOWN;
-import static org.junit.platform.commons.util.ReflectionUtils.findFields;
 import static org.junit.platform.commons.util.ReflectionUtils.getDeclaredConstructor;
+import static org.junit.platform.commons.util.ReflectionUtils.streamFields;
 import static org.junit.platform.commons.util.ReflectionUtils.tryToReadFieldValue;
 
 import java.lang.reflect.AnnotatedElement;
@@ -93,7 +93,7 @@ static void registerExtensionsFromFields(ExtensionRegistrar registrar, Class<?>
 
 		Predicate<Field> predicate = (instance == null ? ReflectionUtils::isStatic : ReflectionUtils::isNotStatic);
 
-		findFields(clazz, predicate, TOP_DOWN).stream()//
+		streamFields(clazz, predicate, TOP_DOWN)//
 				.sorted(orderComparator)//
 				.forEach(field -> {
 					List<Class<? extends Extension>> extensionTypes = streamExtensionTypes(field).collect(toList());

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/ClassSelectorResolver.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.function.Predicate.isEqual;
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.jupiter.engine.discovery.predicates.IsTestClassWithTests.isTestOrTestFactoryOrTestTemplateMethod;
-import static org.junit.platform.commons.support.ReflectionSupport.findNestedClasses;
+import static org.junit.platform.commons.support.ReflectionSupport.streamNestedClasses;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
@@ -135,7 +135,7 @@ private Resolution toResolution(Optional<? extends ClassBasedTestDescriptor> tes
 			return Resolution.match(Match.exact(it, () -> {
 				Stream<DiscoverySelector> methods = findMethods(testClass, isTestOrTestFactoryOrTestTemplateMethod).stream()
 						.map(method -> selectMethod(testClasses, method));
-				Stream<NestedClassSelector> nestedClasses = findNestedClasses(testClass, isNestedTestClass).stream()
+				Stream<NestedClassSelector> nestedClasses = streamNestedClasses(testClass, isNestedTestClass)
 						.map(nestedClass -> DiscoverySelectors.selectNestedClass(testClasses, nestedClass));
 				return Stream.concat(methods, nestedClasses).collect(toCollection((Supplier<Set<DiscoverySelector>>) LinkedHashSet::new));
 			}));

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunListenerAdapter.java
Patch:
@@ -93,7 +93,7 @@ public void testSuiteFinished(Description description) {
 		RunnerTestDescriptor runnerTestDescriptor = testRun.getRunnerTestDescriptor();
 		// runnerTestDescriptor is reported in testRunFinished
 		if (!runnerTestDescriptor.getDescription().equals(description)) {
-			reportContainerFinished(lookupOrRegisterNextTestDescriptor(description));
+			reportContainerFinished(lookupOrRegisterCurrentTestDescriptor(description));
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/SeparateThreadTimeoutInvocationTest.java
Patch:
@@ -47,8 +47,7 @@ void throwsTimeoutException() {
 
 		assertThatThrownBy(invocation::proceed) //
 				.hasMessage("method() timed out after " + PREEMPTIVE_TIMEOUT_MILLIS + " milliseconds") //
-				.isInstanceOf(TimeoutException.class) //
-				.hasRootCauseMessage("Execution timed out in thread " + threadName.get());
+				.isInstanceOf(TimeoutException.class);
 	}
 
 	@Test

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -159,7 +159,7 @@ public static boolean isConvertibleToStream(Class<?> type) {
 	 * @return the resulting stream
 	 * @throws PreconditionViolationException if the supplied object is {@code null}
 	 * or not one of the supported types
-	 * @see #isConvertibleToStream(Object)
+	 * @see #isConvertibleToStream(Class)
 	 */
 	public static Stream<?> toStream(Object object) {
 		Preconditions.notNull(object, "Object must not be null");

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -95,6 +95,7 @@ private Stream<Arguments> parseValueArray() {
 				// Lazily retrieve headers if necessary.
 				if (useHeadersInDisplayName && headers == null) {
 					headers = getHeaders(this.csvParser);
+					continue;
 				}
 				Preconditions.notNull(csvRecord,
 					() -> "Record at index " + index + " contains invalid CSV: \"" + input + "\"");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/InvalidLifecycleMethodConfigurationTests.java
Patch:
@@ -116,7 +116,7 @@ static class TestCaseWithInvalidPrivateBeforeAllMethod {
 
 		// must not be private
 		@BeforeAll
-        private static void beforeAll() {
+		private static void beforeAll() {
 		}
 
 		@Test
@@ -138,8 +138,8 @@ void test() {
 
 	static class TestCaseWithInvalidPrivateAfterAllMethod {
 
-        // must not be private
-        @AfterAll
+		// must not be private
+		@AfterAll
 		private static void afterAll() {
 		}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayNameGenerator.java
Patch:
@@ -36,7 +36,7 @@
  * <p>A {@link DisplayNameGenerator} can be configured <em>globally</em> for the
  * entire test suite via the {@value #DEFAULT_GENERATOR_PROPERTY_NAME}
  * configuration parameter (see the User Guide for details) or <em>locally</em>
- * for a test class via the {@link TestClassOrder @DisplayNameGeneration}
+ * for a test class via the {@link DisplayNameGeneration @DisplayNameGeneration}
  * annotation.
  *
  * <h2>Built-in Implementations</h2>

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/SameThreadTimeoutInvocationTests.java
Patch:
@@ -27,14 +27,14 @@
 /**
  * @since 5.5
  */
-class TimeoutInvocationTests {
+class SameThreadTimeoutInvocationTests {
 
 	@Test
 	void resetsInterruptFlag() {
 		var exception = assertThrows(TimeoutException.class, () -> withExecutor(executor -> {
 			var delegate = new EventuallyInterruptibleInvocation();
 			var duration = new TimeoutDuration(1, NANOSECONDS);
-			var timeoutInvocation = new TimeoutInvocation<>(delegate, duration, executor, () -> "execution");
+			var timeoutInvocation = new SameThreadTimeoutInvocation<>(delegate, duration, executor, () -> "execution");
 			timeoutInvocation.proceed();
 		}));
 		assertFalse(Thread.currentThread().isInterrupted());

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -115,7 +115,7 @@ public enum HierarchyTraversalMode {
 	private static final Pattern VM_INTERNAL_PRIMITIVE_ARRAY_PATTERN = Pattern.compile("^(\\[+)(\\[[ZBCDFIJS])$");
 
 	// Pattern: "java.lang.String[]", "int[]", "int[][][][]", etc.
-	private static final Pattern SOURCE_CODE_SYNTAX_ARRAY_PATTERN = Pattern.compile("^([^\\[\\]]+)((\\[\\])+)+$");
+	private static final Pattern SOURCE_CODE_SYNTAX_ARRAY_PATTERN = Pattern.compile("^([^\\[\\]]+)((?>\\[\\])++)$");
 
 	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];
 

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.platform.suite.api.Suite;
 
 /**
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -27,7 +27,7 @@
  * <p>In contrast to {@link AfterEach @AfterEach} methods, {@code @AfterAll}
  * methods are only executed once for a given test class.
  *
- * <h3>Method Signatures</h3>
+ * <h2>Method Signatures</h2>
  *
  * <p>{@code @AfterAll} methods must have a {@code void} return type, must not
  * be {@code private}, and must be {@code static} by default. Consequently,
@@ -40,7 +40,7 @@
  * methods may optionally declare parameters to be resolved by
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}.
  *
- * <h3>Inheritance and Execution Order</h3>
+ * <h2>Inheritance and Execution Order</h2>
  *
  * <p>{@code @AfterAll} methods are inherited from superclasses as long as
  * they are not <em>hidden</em> or <em>overridden</em>. Furthermore,
@@ -73,7 +73,7 @@
  * dependencies between the {@code @BeforeAll} methods or between the
  * {@code @AfterAll} methods.
  *
- * <h3>Composition</h3>
+ * <h2>Composition</h2>
  *
  * <p>{@code @AfterAll} may be used as a meta-annotation in order to create
  * a custom <em>composed annotation</em> that inherits the semantics of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -26,14 +26,14 @@
  * {@code @RepeatedTest}, {@code @ParameterizedTest}, {@code @TestFactory},
  * and {@code @TestTemplate} method in the current test class.
  *
- * <h3>Method Signatures</h3>
+ * <h2>Method Signatures</h2>
  *
  * <p>{@code @AfterEach} methods must have a {@code void} return type,
  * must not be {@code private}, and must not be {@code static}.
  * They may optionally declare parameters to be resolved by
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}.
  *
- * <h3>Inheritance and Execution Order</h3>
+ * <h2>Inheritance and Execution Order</h2>
  *
  * <p>{@code @AfterEach} methods are inherited from superclasses as long as
  * they are not overridden. Furthermore, {@code @AfterEach} methods from
@@ -65,7 +65,7 @@
  * no dependencies between the {@code @BeforeEach} methods or between the
  * {@code @AfterEach} methods.
  *
- * <h3>Composition</h3>
+ * <h2>Composition</h2>
  *
  * <p>{@code @AfterEach} may be used as a meta-annotation in order to create
  * a custom <em>composed annotation</em> that inherits the semantics of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -27,7 +27,7 @@
  * <p>In contrast to {@link BeforeEach @BeforeEach} methods, {@code @BeforeAll}
  * methods are only executed once for a given test class.
  *
- * <h3>Method Signatures</h3>
+ * <h2>Method Signatures</h2>
  *
  * <p>{@code @BeforeAll} methods must have a {@code void} return type, must not
  * be {@code private}, and must be {@code static} by default. Consequently,
@@ -40,7 +40,7 @@
  * methods may optionally declare parameters to be resolved by
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}.
  *
- * <h3>Inheritance and Execution Order</h3>
+ * <h2>Inheritance and Execution Order</h2>
  *
  * <p>{@code @BeforeAll} methods are inherited from superclasses as long as
  * they are not <em>hidden</em> or <em>overridden</em>. Furthermore,
@@ -73,7 +73,7 @@
  * dependencies between the {@code @BeforeAll} methods or between the
  * {@code @AfterAll} methods.
  *
- * <h3>Composition</h3>
+ * <h2>Composition</h2>
  *
  * <p>{@code @BeforeAll} may be used as a meta-annotation in order to create
  * a custom <em>composed annotation</em> that inherits the semantics of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -26,14 +26,14 @@
  * {@code @RepeatedTest}, {@code @ParameterizedTest}, {@code @TestFactory},
  * and {@code @TestTemplate} method in the current test class.
  *
- * <h3>Method Signatures</h3>
+ * <h2>Method Signatures</h2>
  *
  * <p>{@code @BeforeEach} methods must have a {@code void} return type,
  * must not be {@code private}, and must not be {@code static}.
  * They may optionally declare parameters to be resolved by
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}.
  *
- * <h3>Inheritance and Execution Order</h3>
+ * <h2>Inheritance and Execution Order</h2>
  *
  * <p>{@code @BeforeEach} methods are inherited from superclasses as long as
  * they are not overridden. Furthermore, {@code @BeforeEach} methods from
@@ -65,7 +65,7 @@
  * no dependencies between the {@code @BeforeEach} methods or between the
  * {@code @AfterEach} methods.
  *
- * <h3>Composition</h3>
+ * <h2>Composition</h2>
  *
  * <p>{@code @BeforeEach} may be used as a meta-annotation in order to create
  * a custom <em>composed annotation</em> that inherits the semantics of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/ClassOrderer.java
Patch:
@@ -41,7 +41,7 @@
  * {@link Nested @Nested} test classes via the {@link TestClassOrder @TestClassOrder}
  * annotation.
  *
- * <h4>Built-in Implementations</h4>
+ * <h2>Built-in Implementations</h2>
  *
  * <p>JUnit Jupiter provides the following built-in {@code ClassOrderer}
  * implementations.
@@ -183,7 +183,7 @@ private static int getOrder(ClassDescriptor descriptor) {
 	/**
 	 * {@code ClassOrderer} that orders classes pseudo-randomly.
 	 *
-	 * <h4>Custom Seed</h4>
+	 * <h2>Custom Seed</h2>
 	 *
 	 * <p>By default, the random <em>seed</em> used for ordering classes is the
 	 * value returned by {@link System#nanoTime()} during static initialization

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayNameGenerator.java
Patch:
@@ -39,7 +39,7 @@
  * for a test class via the {@link TestClassOrder @DisplayNameGeneration}
  * annotation.
  *
- * <h4>Built-in Implementations</h4>
+ * <h2>Built-in Implementations</h2>
  * <ul>
  * <li>{@link Standard}</li>
  * <li>{@link Simple}</li>

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -39,7 +39,7 @@
  * parameter (see the User Guide for details) or <em>locally</em> for a test
  * class via the {@link TestMethodOrder @TestMethodOrder} annotation.
  *
- * <h4>Built-in Implementations</h4>
+ * <h2>Built-in Implementations</h2>
  *
  * <p>JUnit Jupiter provides the following built-in {@code MethodOrderer}
  * implementations.
@@ -246,7 +246,7 @@ private static int getOrder(MethodDescriptor descriptor) {
 	/**
 	 * {@code MethodOrderer} that orders methods pseudo-randomly.
 	 *
-	 * <h4>Custom Seed</h4>
+	 * <h2>Custom Seed</h2>
 	 *
 	 * <p>By default, the random <em>seed</em> used for ordering methods is the
 	 * value returned by {@link System#nanoTime()} during static initialization

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -31,7 +31,7 @@
  * <p>{@code @Nested} test classes may be ordered via
  * {@link TestClassOrder @TestClassOrder} or a global {@link ClassOrderer}.
  *
- * <h3>Test Instance Lifecycle</h3>
+ * <h2>Test Instance Lifecycle</h2>
  *
  * <ul>
  * <li>A {@code @Nested} test class <em>can</em> be configured with its own

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -43,7 +43,7 @@
  * create a custom <em>composed annotation</em> that inherits the semantics
  * of {@code @RepeatedTest}.
  *
- * <h3>Test Execution Order</h3>
+ * <h2>Test Execution Order</h2>
  *
  * <p>By default, test methods will be ordered using an algorithm that is
  * deterministic but intentionally nonobvious. This ensures that subsequent runs

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -32,7 +32,7 @@
  * list of tags to be included in or excluded from the current test plan,
  * potentially dependent on the current environment.
  *
- * <h3>Syntax Rules for Tags</h3>
+ * <h2>Syntax Rules for Tags</h2>
  * <ul>
  * <li>A tag must not be blank.</li>
  * <li>A <em>trimmed</em> tag must not contain whitespace.</li>

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -36,7 +36,7 @@
  * a custom <em>composed annotation</em> that inherits the semantics of
  * {@code @Test}.
  *
- * <h3>Test Execution Order</h3>
+ * <h2>Test Execution Order</h2>
  *
  * <p>By default, test methods will be ordered using an algorithm that is
  * deterministic but intentionally nonobvious. This ensures that subsequent runs

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestClassOrder.java
Patch:
@@ -37,7 +37,7 @@
  * the User Guide for details. Note, however, that a {@code @TestClassOrder}
  * declaration always overrides a global {@code ClassOrderer}.
  *
- * <h4>Example Usage</h4>
+ * <h2>Example Usage</h2>
  *
  * <p>The following demonstrates how to guarantee that {@code @Nested} test classes
  * are executed in the order specified via the {@link Order @Order} annotation.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -43,7 +43,7 @@
  * resolved by {@link org.junit.jupiter.api.extension.ParameterResolver
  * ParameterResolvers}.
  *
- * <h3>Test Execution Order</h3>
+ * <h2>Test Execution Order</h2>
  *
  * <p>By default, test methods will be ordered using an algorithm that is
  * deterministic but intentionally nonobvious. This ensures that subsequent runs

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInstance.java
Patch:
@@ -37,7 +37,7 @@
  * configuration file (i.e., a file named {@code junit-platform.properties} in
  * the root of the class path). Consult the User Guide for further information.
  *
- * <h3>Use Cases</h3>
+ * <h2>Use Cases</h2>
  * <p>Setting the test instance lifecycle mode to {@link Lifecycle#PER_CLASS
  * PER_CLASS} enables the following features.
  * <ul>

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java
Patch:
@@ -41,7 +41,7 @@
  * the User Guide for details. Note, however, that a {@code @TestClassOrder}
  * declaration always overrides a global {@code ClassOrderer}.
  *
- * <h4>Example Usage</h4>
+ * <h2>Example Usage</h2>
  *
  * <p>The following demonstrates how to guarantee that test methods are executed
  * in the order specified via the {@link Order @Order} annotation.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -49,7 +49,7 @@
  * create a custom <em>composed annotation</em> that inherits the semantics
  * of {@code @TestTemplate}.
  *
- * <h3>Test Execution Order</h3>
+ * <h2>Test Execution Order</h2>
  *
  * <p>By default, test methods will be ordered using an algorithm that is
  * deterministic but intentionally nonobvious. This ensures that subsequent runs

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Timeout.java
Patch:
@@ -35,7 +35,7 @@
  * {@link Test @Test}, {@link TestFactory @TestFactory}, or
  * {@link TestTemplate @TestTemplate}, but not to its lifecycle methods.
  *
- * <h3>Default Timeouts</h3>
+ * <h2>Default Timeouts</h2>
  *
  * <p>If this annotation is not present, no timeout will be used unless a
  * default timeout is defined via one of the following configuration parameters:
@@ -75,6 +75,7 @@
  * unit may be omitted. Specifying no unit is equivalent to using seconds.
  *
  * <table class="plain">
+ * <caption>Timeout configuration via configuration parameter vs. annotation</caption>
  * <tr><th> Value         </th><th> Equivalent annotation                             </th></tr>
  * <tr><td> {@code 42}    </td><td> {@code @Timeout(42)}                              </td></tr>
  * <tr><td> {@code 42 ns} </td><td> {@code @Timeout(value = 42, unit = NANOSECONDS)}  </td></tr>
@@ -86,7 +87,7 @@
  * <tr><td> {@code 42 d}  </td><td> {@code @Timeout(value = 42, unit = DAYS)}         </td></tr>
  * </table>
  *
- * <h3>Disabling Timeouts</h3>
+ * <h2>Disabling Timeouts</h2>
  *
  * <p>You may use the {@value #TIMEOUT_MODE_PROPERTY_NAME} configuration
  * parameter to explicitly enable or disable timeouts.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledForJreRange.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>This annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * This annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnJre.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>As of JUnit Jupiter 5.1, this annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnOs.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>As of JUnit Jupiter 5.1, this annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledForJreRange.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>This annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIf.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * This annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnJre.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>As of JUnit Jupiter 5.1, this annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnOs.java
Patch:
@@ -38,7 +38,7 @@
  * custom <em>composed annotation</em> that inherits the semantics of this
  * annotation.
  *
- * <h4>Warning</h4>
+ * <h2>Warning</h2>
  *
  * <p>As of JUnit Jupiter 5.1, this annotation can only be declared once on an
  * {@link java.lang.reflect.AnnotatedElement AnnotatedElement} (i.e., test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -24,12 +24,12 @@
  * <p>Extensions that implement {@code AfterAllCallback} must be registered at
  * the class level.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -27,12 +27,12 @@
  * {@link AfterTestExecutionCallback} instead of {@link BeforeEachCallback} and
  * {@link AfterEachCallback}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -28,12 +28,12 @@
  * {@link AfterEachCallback} instead of {@link BeforeTestExecutionCallback} and
  * {@link AfterTestExecutionCallback}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -24,12 +24,12 @@
  * <p>Extensions that implement {@code BeforeAllCallback} must be registered at
  * the class level.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -27,12 +27,12 @@
  * {@link AfterTestExecutionCallback} instead of {@link BeforeEachCallback} and
  * {@link AfterEachCallback}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -28,12 +28,12 @@
  * {@link AfterEachCallback} instead of {@link BeforeTestExecutionCallback} and
  * {@link AfterTestExecutionCallback}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * <h3>Wrapping Behavior</h3>
+ * <h2>Wrapping Behavior</h2>
  *
  * <p>JUnit Jupiter guarantees <em>wrapping behavior</em> for multiple
  * registered extensions that implement lifecycle callbacks such as

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -29,7 +29,7 @@
  * method-level lifecycle callbacks such as {@code @BeforeEach} methods,
  * {@code @AfterEach} methods, and corresponding extension APIs.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -33,14 +33,14 @@
  *
  * <p>{@code @ExtendWith} fields may be either {@code static} or non-static.
  *
- * <h3>Inheritance</h3>
+ * <h2>Inheritance</h2>
  *
  * <p>{@code @ExtendWith} fields are inherited from superclasses as long as they
  * are not <em>hidden</em> or <em>overridden</em>. Furthermore, {@code @ExtendWith}
  * fields from superclasses will be registered before {@code @ExtendWith} fields
  * in subclasses.
  *
- * <h3>Registration Order</h3>
+ * <h2>Registration Order</h2>
  *
  * <p>When {@code @ExtendWith} is present on a test class, test interface, or
  * test method or on a parameter in a test method or lifecycle method, the
@@ -63,7 +63,7 @@
  * {@code @Order}, relative to {@code @ExtendWith} fields and other
  * {@code @RegisterExtension} fields.
  *
- * <h3>Supported Extension APIs</h3>
+ * <h2>Supported Extension APIs</h2>
  *
  * <ul>
  * <li>{@link ExecutionCondition}</li>

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -23,7 +23,7 @@
  * the {@link java.util.ServiceLoader} mechanism. For details on the latter,
  * consult the User Guide.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Extension implementations must have a <em>default constructor</em> if
  * registered via {@code @ExtendWith} or the {@code ServiceLoader}. When

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/InvocationInterceptor.java
Patch:
@@ -30,7 +30,7 @@
  * {@code InvocationInterceptor} defines the API for {@link Extension
  * Extensions} that wish to intercept calls to test code.
  *
- * <h3>Invocation Contract</h3>
+ * <h2>Invocation Contract</h2>
  *
  * <p>Each method in this class must call {@link Invocation#proceed()} or {@link
  * Invocation#skip()} exactly once on the supplied invocation. Otherwise, the
@@ -39,7 +39,7 @@
  * <p>The default implementation calls {@link Invocation#proceed()
  * proceed()} on the supplied {@linkplain Invocation invocation}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/LifecycleMethodExecutionExceptionHandler.java
Patch:
@@ -28,12 +28,12 @@
  * to be handled. When registered at the test level, only exceptions thrown from
  * {@code @BeforeEach} or {@code @AfterEach} methods will be handled.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on constructor
  * requirements.
  *
- * <h3 id="implementation-guidelines">Implementation Guidelines</h3>
+ * <h2 id="implementation-guidelines">Implementation Guidelines</h2>
  *
  * <p>An implementation of an exception handler method defined in this API must
  * perform one of the following.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -30,7 +30,7 @@
  * an argument for the parameter must be resolved at runtime by a
  * {@code ParameterResolver}.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -25,7 +25,7 @@
  * <p>Common use cases include swallowing an exception if it's anticipated
  * or rolling back a transaction in certain error scenarios.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstanceFactory.java
Patch:
@@ -25,7 +25,7 @@
  * <p>Extensions that implement {@code TestInstanceFactory} must be registered
  * at the class level.
  *
- * <h3>Warning</h3>
+ * <h2>Warning</h2>
  *
  * <p>Only one {@code TestInstanceFactory} is allowed to be registered for any
  * given test class. Registering multiple factories for any single test class
@@ -37,7 +37,7 @@
  * user's responsibility to ensure that only a single {@code TestInstanceFactory}
  * is registered for any specific test class.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -25,7 +25,7 @@
  * <p>Extensions that implement {@code TestInstancePostProcessor} must be
  * registered at the class level.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePreConstructCallback.java
Patch:
@@ -32,7 +32,7 @@
  * class level or at the method level. In the latter case, the extension will
  * only be applied to the test method for which it is registered.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on constructor
  * requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePreDestroyCallback.java
Patch:
@@ -44,7 +44,7 @@
  * <p>A symmetric {@link TestInstancePreConstructCallback} extension defines a callback
  * hook that is invoked prior to any test class instances being constructed.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on constructor
  * requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -41,7 +41,7 @@
  * the test template method will be invoked using the contexts of all active
  * providers.
  *
- * <h3>Constructor Requirements</h3>
+ * <h2>Constructor Requirements</h2>
  *
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestWatcher.java
Patch:
@@ -35,7 +35,7 @@
  *
  * <p>Extensions implementing this API can be registered at any level.
  *
- * <h3>Exception Handling</h3>
+ * <h2>Exception Handling</h2>
  *
  * <p>In contrast to other {@link Extension} APIs, a {@code TestWatcher} is not
  * permitted to adversely influence the execution of tests. Consequently, any

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -22,7 +22,7 @@
  * <p>The {@code Executable} interface is similar to {@link java.lang.Runnable},
  * except that an {@code Executable} can throw any kind of exception.
  *
- * <h4>Rationale for throwing {@code Throwable} instead of {@code Exception}</h4>
+ * <h2>Rationale for throwing {@code Throwable} instead of {@code Exception}</h2>
  *
  * <p>Although Java applications typically throw exceptions that are instances
  * of {@link java.lang.Exception}, {@link java.lang.RuntimeException},

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -23,7 +23,7 @@
  * {@link java.util.function.Consumer}, except that a {@code ThrowingConsumer}
  * can throw any kind of exception, including checked exceptions.
  *
- * <h4>Rationale for throwing {@code Throwable} instead of {@code Exception}</h4>
+ * <h2>Rationale for throwing {@code Throwable} instead of {@code Exception}</h2>
  *
  * <p>Although Java applications typically throw exceptions that are instances
  * of {@link java.lang.Exception}, {@link java.lang.RuntimeException},

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -23,7 +23,7 @@
  * {@link java.util.function.Supplier}, except that a {@code ThrowingSupplier}
  * can throw any kind of exception, including checked exceptions.
  *
- * <h4>Rationale for throwing {@code Throwable} instead of {@code Exception}</h4>
+ * <h2>Rationale for throwing {@code Throwable} instead of {@code Exception}</h2>
  *
  * <p>Although Java applications typically throw exceptions that are instances
  * of {@link Exception}, {@link RuntimeException},

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Execution.java
Patch:
@@ -27,7 +27,7 @@
  * <p>Since JUnit Jupiter 5.4, this annotation is {@linkplain Inherited inherited}
  * within class hierarchies.
  *
- * <h3>Default Execution Mode</h3>
+ * <h2>Default Execution Mode</h2>
  *
  * <p>If this annotation is not present, {@link ExecutionMode#SAME_THREAD} is
  * used unless a default execution mode is defined via one of the following

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * {@link TestDescriptor} for tests based on Java classes.
  *
- * <h3>Default Display Names</h3>
+ * <h2>Default Display Names</h2>
  *
  * <p>The default display name for a top-level or nested static test class is
  * the fully qualified name of the class with the package name and leading dot

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * {@link TestDescriptor} for tests based on nested (but not static) Java classes.
  *
- * <h3>Default Display Names</h3>
+ * <h2>Default Display Names</h2>
  *
  * <p>The default display name for a non-static nested test class is the simple
  * name of the class.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * {@link TestDescriptor} for {@link org.junit.jupiter.api.Test @Test} methods.
  *
- * <h3>Default Display Names</h3>
+ * <h2>Default Display Names</h2>
  *
  * <p>The default display name for a test method is the name of the method
  * concatenated with a comma-separated list of parameter types in parentheses.

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/JupiterTestSuite.java
Patch:
@@ -19,7 +19,7 @@
  * Test suite for the JUnit Jupiter programming model, extension model, and
  * {@code TestEngine} implementation.
  *
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/JupiterMigrationSupportTestSuite.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Test suite for JUnit Jupiter migration support.
  *
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/FallbackStringToObjectConverter.java
Patch:
@@ -35,7 +35,7 @@
  * {@link String} to a given target type by invoking a static factory method
  * or factory constructor defined in the target type.
  *
- * <h3>Search Algorithm</h3>
+ * <h2>Search Algorithm</h2>
  *
  * <ol>
  * <li>Search for a single, non-private static factory method in the target

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EmptySource.java
Patch:
@@ -24,7 +24,7 @@
  * {@code @EmptySource} is an {@link ArgumentsSource} which provides a single
  * <em>empty</em> argument to the annotated {@code @ParameterizedTest} method.
  *
- * <h3>Supported Parameter Types</h3>
+ * <h2>Supported Parameter Types</h2>
  *
  * <p>This argument source will only provide an empty argument for the following
  * method parameter types. Subtypes of the supported types are not supported.

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -62,12 +62,13 @@
  * {@code @ParameterizedTest} methods for those factories accept individual
  * {@code int[][]} and {@code Object[][]} arguments, respectively.
  *
- * <h3>Examples</h3>
+ * <h2>Examples</h2>
  *
  * <p>The following table displays compatible method signatures for parameterized
  * test methods and their corresponding factory methods.
  *
  * <table class="plain">
+ * <caption>Compatible method signatures and factory methods</caption>
  * <tr><th>{@code @ParameterizedTest} method</th><th>Factory method</th></tr>
  * <tr><td>{@code void test(int)}</td><td>{@code static int[] factory()}</td></tr>
  * <tr><td>{@code void test(int)}</td><td>{@code static IntStream factory()}</td></tr>

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestSuite.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Test suite for JUnit Jupiter parameterized test support.
  *
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Internal <em>logging</em> package.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These classes are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common APIs and support utilities for the JUnit Platform.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>Any API annotated with {@code @API(status = INTERNAL)} is intended solely
  * for usage within the JUnit framework itself. <strong>Any usage of internal

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * Collection of utilities for working with {@linkplain Annotation annotations}.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>
@@ -393,13 +393,13 @@ private static boolean isRepeatableAnnotationContainer(Class<? extends Annotatio
 	 * annotations directly on a {@link Parameter} will fail for inner class
 	 * constructors.
 	 *
-	 * <h4>Bug in {@code javac} on JDK versions prior to JDK 9</h4>
+	 * <h3>Bug in {@code javac} on JDK versions prior to JDK 9</h3>
 	 *
 	 * <p>The parameter annotations array in the compiled byte code for the user's
 	 * class excludes an entry for the implicit <em>enclosing instance</em>
 	 * parameter for an inner class constructor.
 	 *
-	 * <h4>Workaround</h4>
+	 * <h3>Workaround</h3>
 	 *
 	 * <p>This method provides a workaround for this off-by-one error by helping
 	 * JUnit maintainers and extension authors to access annotations on the preceding

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/BlacklistedExceptions.java
Patch:
@@ -20,12 +20,12 @@
  * <p><em>Unrecoverable</em> exceptions are those that should always terminate
  * test plan execution immediately.
  *
- * <h4>Currently Unrecoverable Exceptions</h4>
+ * <h2>Currently Unrecoverable Exceptions</h2>
  * <ul>
  * <li>{@link OutOfMemoryError}</li>
  * </ul>
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassFilter.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Class-related predicate used by reflection utilities.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassLoaderUtils.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Collection of utilities for working with {@linkplain ClassLoader} and associated tasks.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNamePatternFilterUtils.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Collection of utilities for creating filters based on class names.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Collection of utilities for working with {@link Class classes}.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -39,7 +39,7 @@
 import org.junit.platform.commons.logging.LoggerFactory;
 
 /**
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Collection of utilities for working with {@link Collection Collections}.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Collection of utilities for working with exceptions.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Collection of utilities for working with {@link Function Functions},
  * {@link Predicate Predicates}, etc.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ModuleUtils.java
Patch:
@@ -26,7 +26,7 @@
  * Collection of utilities for working with {@code java.lang.Module}
  * and friends.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PackageUtils.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Collection of utilities for working with {@linkplain Package packages}.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -27,7 +27,7 @@
  * <p>Each method in this class throws a {@link PreconditionViolationException}
  * if the precondition is violated.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -61,7 +61,7 @@
 /**
  * Collection of utilities for working with the Java reflection APIs.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/RuntimeUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Collection of utilities for working with {@link Runtime},
  * {@link java.lang.management.RuntimeMXBean}, etc.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -22,7 +22,7 @@
  * Collection of utilities for working with {@link String Strings},
  * {@link CharSequence CharSequences}, etc.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -22,7 +22,7 @@
  * Simple builder for generating strings in custom implementations of
  * {@link Object#toString toString()}.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/UnrecoverableExceptions.java
Patch:
@@ -20,12 +20,12 @@
  * <p><em>Unrecoverable</em> exceptions are those that should always terminate
  * test plan execution immediately.
  *
- * <h4>Currently Unrecoverable Exceptions</h4>
+ * <h2>Currently Unrecoverable Exceptions</h2>
  * <ul>
  * <li>{@link OutOfMemoryError}</li>
  * </ul>
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Internal common utilities for JUnit.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-commons/src/main/java9/org/junit/platform/commons/util/ModuleUtils.java
Patch:
@@ -40,7 +40,7 @@
  * Collection of utilities for working with {@code java.lang.Module}
  * and friends.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-console/src/main/java/org/junit/platform/console/options/ConsoleUtils.java
Patch:
@@ -20,7 +20,7 @@
  * Collection of utilities for working with {@code java.io.Console}
  * and friends.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-console/src/main/java17/org/junit/platform/console/options/ConsoleUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Collection of utilities for working with {@code java.io.Console}
  * and friends.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>These utilities are intended solely for usage within the JUnit framework
  * itself. <strong>Any usage by external parties is not supported.</strong>

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -414,9 +414,8 @@ public static ClassSelector selectClass(String className) {
 	 * <em>source code syntax</em> (e.g., {@code int[][]}, {@code java.lang.String[]},
 	 * etc.).
 	 *
-	 * <h4>Examples</h4>
-	 *
 	 * <table class="plain">
+	 * <caption>Examples</caption>
 	 * <tr><th>Method</th><th>Fully Qualified Method Name</th></tr>
 	 * <tr><td>{@code java.lang.String.chars()}</td><td>{@code java.lang.String#chars}</td></tr>
 	 * <tr><td>{@code java.lang.String.chars()}</td><td>{@code java.lang.String#chars()}</td></tr>

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherConfig.java
Patch:
@@ -30,7 +30,7 @@
  * {@code LauncherConfig} defines the configuration API for creating
  * {@link Launcher} instances via the {@link LauncherFactory}.
  *
- * <h4>Example</h4>
+ * <h2>Example</h2>
  *
  * <pre class="code">
  * LauncherConfig launcherConfig = LauncherConfig.builder()

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -38,7 +38,7 @@
  * The {@code LauncherDiscoveryRequestBuilder} provides a light-weight DSL for
  * generating a {@link LauncherDiscoveryRequest}.
  *
- * <h4>Example</h4>
+ * <h2>Example</h2>
  *
  * <pre class="code">
  * import static org.junit.platform.engine.discovery.DiscoverySelectors.*;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/UniqueIdTrackingListener.java
Patch:
@@ -49,7 +49,7 @@
  * order to rerun the exact same tests from a standard JVM test run within a
  * native image.
  *
- * <h3>Configuration and Defaults</h3>
+ * <h2>Configuration and Defaults</h2>
  *
  * <p>The {@code OUTPUT_DIR} is the directory in which this listener generates
  * the output file. The exact path of the generated file is

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -26,15 +26,15 @@
  * {@linkplain #value tags or tag expressions} to be excluded when running a
  * test suite on the JUnit Platform.
  *
- * <h3>Tag Expressions</h3>
+ * <h2>Tag Expressions</h2>
  *
  * <p>Tag expressions are boolean expressions with the following allowed
  * operators: {@code !} (not), {@code &} (and) and {@code |} (or). Parentheses
  * can be used to adjust for operator precedence. Please refer to the
  * <a href="https://junit.org/junit5/docs/current/user-guide/#running-tests-tag-expressions">JUnit 5 User Guide</a>
  * for usage examples.
  *
- * <h3>Syntax Rules for Tags</h3>
+ * <h2>Syntax Rules for Tags</h2>
  * <ul>
  * <li>A tag must not be blank.</li>
  * <li>A trimmed tag must not contain whitespace.</li>

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -26,15 +26,15 @@
  * {@linkplain #value tags or tag expressions} to be included when running a
  * test suite on the JUnit Platform.
  *
- * <h3>Tag Expressions</h3>
+ * <h2>Tag Expressions</h2>
  *
  * <p>Tag expressions are boolean expressions with the following allowed
  * operators: {@code !} (not), {@code &} (and) and {@code |} (or). Parentheses
  * can be used to adjust for operator precedence. Please refer to the
  * <a href="https://junit.org/junit5/docs/current/user-guide/#running-tests-tag-expressions">JUnit 5 User Guide</a>
  * for usage examples.
  *
- * <h3>Syntax Rules for Tags</h3>
+ * <h2>Syntax Rules for Tags</h2>
  * <ul>
  * <li>A tag must not be blank.</li>
  * <li>A trimmed tag must not contain whitespace.</li>

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SuiteDisplayName.java
Patch:
@@ -28,11 +28,11 @@
  * <p>Display names are typically used for test reporting in IDEs and build
  * tools and may contain spaces, special characters, and even emoji.
  *
- * <h4>JUnit 4 Suite Support</h4>
+ * <h2>JUnit 4 Suite Support</h2>
  * <p>Test suites can be run on the JUnit Platform in a JUnit 4 environment via
  * {@code @RunWith(JUnitPlatform.class)}.
  *
- * <h4>JUnit 5 Suite Support</h4>
+ * <h2>JUnit 5 Suite Support</h2>
  * <p>Test suites can be run on the JUnit Platform in a JUnit 5 environment via
  * the {@code junit-platform-suite-engine} module.
  *

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/UseTechnicalNames.java
Patch:
@@ -37,7 +37,7 @@
  * <p>Note that the presence of {@code @UseTechnicalNames} overrides any custom
  * display name configured for the suite via {@link SuiteDisplayName @SuiteDisplayName}.
  *
- * <h4>JUnit 4 Suite Support</h4>
+ * <h2>JUnit 4 Suite Support</h2>
  * <p>Test suites can be run on the JUnit Platform in a JUnit 4 environment via
  * {@code @RunWith(JUnitPlatform.class)}.
  *

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java
Patch:
@@ -1,11 +1,11 @@
 /**
  * Annotations for configuring a <em>test suite</em> on the JUnit Platform.
  *
- * <h4>JUnit 4 Suite Support</h4>
+ * <h2>JUnit 4 Suite Support</h2>
  * <p>Test suites can be run on the JUnit Platform in a JUnit 4 environment via
  * {@code @RunWith(JUnitPlatform.class)} with the {@code junit-platform-runner}.
  *
- * <h4>JUnit 5 Suite Support</h4>
+ * <h2>JUnit 5 Suite Support</h2>
  * <p>Test suites can be run on the JUnit Platform in a JUnit 5 environment via
  * {@link Suite @Suite} with the {@code junit-platform-suite-engine}.
  */

File: junit-platform-suite-commons/src/main/java/org/junit/platform/suite/commons/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common support utilities for executing test suites on the JUnit Platform.
  *
- * <h3>DISCLAIMER</h3>
+ * <h2>DISCLAIMER</h2>
  *
  * <p>Any API annotated with {@code @API(status = INTERNAL)} is intended solely
  * for usage within the JUnit framework itself. <strong>Any usage of internal

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * {@link TestDescriptor} for tests based on the JUnit Platform Suite API.
  *
- * <h3>Default Display Names</h3>
+ * <h2>Default Display Names</h2>
  *
  * <p>The default display name is the simple name of the class.
  *

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineTestSuite.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Test suite for the {@link VintageTestEngine}.
  *
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Test suite for the JUnit Platform.
  *
- * <h3>Logging Configuration</h3>
+ * <h2>Logging Configuration</h2>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
  * set the following system property before running any tests &mdash; for

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/DefaultParallelExecutionConfigurationStrategy.java
Patch:
@@ -13,6 +13,7 @@
 import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.math.BigDecimal;
+import java.util.Locale;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
@@ -133,7 +134,8 @@ public ParallelExecutionConfiguration createConfiguration(ConfigurationParameter
 	public static final String CONFIG_CUSTOM_CLASS_PROPERTY_NAME = "custom.class";
 
 	static ParallelExecutionConfigurationStrategy getStrategy(ConfigurationParameters configurationParameters) {
-		return valueOf(configurationParameters.get(CONFIG_STRATEGY_PROPERTY_NAME).orElse("dynamic").toUpperCase());
+		return valueOf(
+			configurationParameters.get(CONFIG_STRATEGY_PROPERTY_NAME).orElse("dynamic").toUpperCase(Locale.ROOT));
 	}
 
 }

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/OutputDir.java
Patch:
@@ -24,7 +24,7 @@
 import org.apiguardian.api.API;
 import org.junit.platform.commons.util.StringUtils;
 
-@API(status = INTERNAL, since = "1.8")
+@API(status = INTERNAL, since = "1.9")
 public class OutputDir {
 
 	public static OutputDir create(Optional<String> customDir) {

File: platform-tests/src/test/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListenerTests.java
Patch:
@@ -70,7 +70,7 @@ void writesValidXmlReport() throws Exception {
 				        <operatingSystem>${xmlunit.ignore}</operatingSystem>
 				        <cpuCores>${xmlunit.ignore}</cpuCores>
 				        <java:javaVersion>${xmlunit.ignore}</java:javaVersion>
-				        <java:fileEncoding>UTF-8</java:fileEncoding>
+				        <java:fileEncoding>${xmlunit.ignore}</java:fileEncoding>
 				        <java:heapSize max="${xmlunit.isNumber}"/>
 				    </infrastructure>
 				    <e:started id="1" name="dummy" time="${xmlunit.isDateTime}">

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ArchUnitTests.java
Patch:
@@ -20,6 +20,7 @@
 import static com.tngtech.archunit.core.domain.JavaModifier.PUBLIC;
 import static com.tngtech.archunit.core.domain.properties.HasModifiers.Predicates.modifier;
 import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.name;
+import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.nameContaining;
 import static com.tngtech.archunit.lang.conditions.ArchPredicates.are;
 import static com.tngtech.archunit.lang.conditions.ArchPredicates.have;
 import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;
@@ -73,7 +74,8 @@ void avoidJavaUtilLogging(JavaClasses classes) {
 	@ArchTest
 	void avoidThrowingGenericExceptions(JavaClasses classes) {
 		// LoggerFactory.java:155 -> new Throwable()
-		var subset = classes.that(are(not(name("org.junit.platform.commons.logging.LoggerFactory$DelegatingLogger"))));
+		var subset = classes.that(are(not(
+			name("org.junit.platform.commons.logging.LoggerFactory$DelegatingLogger").or(nameContaining(".shadow.")))));
 		GeneralCodingRules.NO_CLASSES_SHOULD_THROW_GENERIC_EXCEPTIONS.check(subset);
 	}
 

File: junit-platform-reporting/src/module/org.junit.platform.reporting/module-info.java
Patch:
@@ -19,6 +19,7 @@
 	requires org.junit.platform.commons;
 	requires transitive org.junit.platform.engine;
 	requires transitive org.junit.platform.launcher;
+	requires org.opentest4j.reporting;
 
 	// exports org.junit.platform.reporting; empty package
 	exports org.junit.platform.reporting.legacy;

File: junit-platform-reporting/src/main/java/org/junit/platform/reporting/open/xml/OpenTestReportGeneratingListener.java
Patch:
@@ -75,7 +75,7 @@ public void executionStarted(TestIdentifier testIdentifier) {
                 metadata.addChild(CoreFactory.tags(), tags -> //
                         testIdentifier.getTags().forEach(tag -> tags.addChild(CoreFactory.tag(tag.getName()))));
                 metadata.addChild(JUnitFactory.legacyReportingName(testIdentifier.getLegacyReportingName()));
-                metadata.addChild(JUnitFactory.type(testIdentifier.getType().toString()));
+                metadata.addChild(JUnitFactory.type(testIdentifier.getType()));
             });
             testIdentifier.getSource().ifPresent(source -> started.addChild(CoreFactory.sources(), sources -> {
                 if (source instanceof ClassSource) {

File: platform-tests/src/test/java/org/junit/platform/suite/engine/SuiteTestDescriptorTests.java
Patch:
@@ -59,7 +59,7 @@ void suiteIsEmptyBeforeDiscovery() {
 	}
 
 	@Test
-	void suitDiscoversTestsFromClass() {
+	void suiteDiscoversTestsFromClass() {
 		suite.addDiscoveryRequestFrom(SelectClassesSuite.class);
 		suite.discover();
 		assertEquals(Set.of(jupiterEngineId, testClassId, methodId),

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -51,7 +51,7 @@ public Stream<Arguments> provideArguments(ExtensionContext context) {
 
 	private Method getMethod(ExtensionContext context, String factoryMethodName) {
 		if (StringUtils.isNotBlank(factoryMethodName)) {
-			if (factoryMethodName.contains("#")) {
+			if (factoryMethodName.contains(".") || factoryMethodName.contains("#")) {
 				return getMethodByFullyQualifiedName(factoryMethodName);
 			}
 			else {

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -17,7 +17,6 @@
 import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
-import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -46,7 +45,7 @@ public class CommandLineOptions {
 
 	static final String DEFAULT_DETAILS_NAME = "tree";
 	static final Details DEFAULT_DETAILS = Details.valueOf(DEFAULT_DETAILS_NAME.toUpperCase(Locale.ROOT));
-	static final Theme DEFAULT_THEME = Theme.valueOf(Charset.defaultCharset());
+	static final Theme DEFAULT_THEME = Theme.valueOf(ConsoleUtils.charset());
 
 	private boolean displayHelp;
 	private boolean ansiColorOutputDisabled;

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreePrintingListener.java
Patch:
@@ -31,8 +31,8 @@ class TreePrintingListener implements TestExecutionListener {
 	private TreeNode root;
 	private final TreePrinter treePrinter;
 
-	TreePrintingListener(PrintWriter out, boolean disableAnsiColors, Theme theme) {
-		this.treePrinter = new TreePrinter(out, theme, disableAnsiColors);
+	TreePrintingListener(PrintWriter out, ColorPalette colorPalette, Theme theme) {
+		this.treePrinter = new TreePrinter(out, theme, colorPalette);
 	}
 
 	private TreeNode addNode(TestIdentifier testIdentifier, Supplier<TreeNode> nodeSupplier) {

File: platform-tests/src/test/java/org/junit/platform/console/tasks/VerboseTreeListenerTests.java
Patch:
@@ -81,7 +81,7 @@ void failureMessageWithFormatSpecifier() {
 	}
 
 	private VerboseTreePrintingListener listener(StringWriter stringWriter) {
-		return new VerboseTreePrintingListener(new PrintWriter(stringWriter), true, 16, Theme.ASCII);
+		return new VerboseTreePrintingListener(new PrintWriter(stringWriter), ColorPalette.NONE, 16, Theme.ASCII);
 	}
 
 	private static TestIdentifier newTestIdentifier() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultExecutionModeTests.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.platform.engine.support.hierarchical.Node.ExecutionMode;
 import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
 
-class DefaultExecutionCleanupModeTests extends AbstractJupiterTestEngineTests {
+class DefaultExecutionModeTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void defaultExecutionModeIsReadFromConfigurationParameter() {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/ClassOrderer.java
Patch:
@@ -205,7 +205,7 @@ class Random implements ClassOrderer {
 		 * <p>The same property is used by {@link MethodOrderer.Random} for
 		 * consistency between the two random orderers.
 		 *
-		 * <h3>Supported Values</h3>
+		 * <h4>Supported Values</h4>
 		 *
 		 * <p>Supported values include any string that can be converted to a
 		 * {@link Long} via {@link Long#valueOf(String)}.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -264,7 +264,7 @@ class Random implements MethodOrderer {
 		 * <p>The same property is used by {@link ClassOrderer.Random} for
 		 * consistency between the two random orderers.
 		 *
-		 * <h3>Supported Values</h3>
+		 * <h4>Supported Values</h4>
 		 *
 		 * <p>Supported values include any string that can be converted to a
 		 * {@link Long} via {@link Long#valueOf(String)}.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -48,7 +48,7 @@ public interface TestInfo {
 	 * <p>The display name is either a default name or a custom name configured
 	 * via {@link DisplayName @DisplayName}.
 	 *
-	 * <h3>Default Display Names</h3>
+	 * <h4>Default Display Names</h4>
 	 *
 	 * <p>If the context in which {@code TestInfo} is used is at the container
 	 * level, the default display name is generated based on the name of the

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -45,7 +45,7 @@ private ExceptionUtils() {
 	 * the Java compiler into believing that the thrown exception is an
 	 * unchecked exception even if it is a checked exception.
 	 *
-	 * <h3>Warning</h3>
+	 * <h4>Warning</h4>
 	 *
 	 * <p>This method should be used sparingly.
 	 *

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -58,7 +58,7 @@ public final class TestTag implements Serializable {
 	 * Determine if the supplied tag name is valid with regard to the supported
 	 * syntax for tags.
 	 *
-	 * <h3>Syntax Rules for Tags</h3>
+	 * <h4>Syntax Rules for Tags</h4>
 	 * <ul>
 	 * <li>A tag must not be {@code null}.</li>
 	 * <li>A tag must not be blank.</li>

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -414,7 +414,7 @@ public static ClassSelector selectClass(String className) {
 	 * <em>source code syntax</em> (e.g., {@code int[][]}, {@code java.lang.String[]},
 	 * etc.).
 	 *
-	 * <h3>Examples</h3>
+	 * <h4>Examples</h4>
 	 *
 	 * <table class="plain">
 	 * <tr><th>Method</th><th>Fully Qualified Method Name</th></tr>

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherConstants.java
Patch:
@@ -94,7 +94,7 @@ public class LauncherConstants {
 	 * Property name used to provide patterns for deactivating listeners registered
 	 * via the {@link java.util.ServiceLoader ServiceLoader} mechanism: {@value}
 	 *
-	 * <h3>Pattern Matching Syntax</h3>
+	 * <h4>Pattern Matching Syntax</h4>
 	 *
 	 * <p>If the property value consists solely of an asterisk ({@code *}), all
 	 * listeners will be deactivated. Otherwise, the property value will be treated
@@ -105,7 +105,7 @@ public class LauncherConstants {
 	 * against one or more characters in a FQCN. All other characters in a pattern
 	 * will be matched one-to-one against a FQCN.
 	 *
-	 * <h3>Examples</h3>
+	 * <h4>Examples</h4>
 	 *
 	 * <ul>
 	 * <li>{@code *}: deactivates all listeners.

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -88,7 +88,7 @@ public final class LauncherDiscoveryRequestBuilder {
 	/**
 	 * Property name used to set the default discovery listener that is added to all : {@value}
 	 *
-	 * <h3>Supported Values</h3>
+	 * <h4>Supported Values</h4>
 	 *
 	 * <p>Supported values are {@code "logging"} and {@code "abortOnFailure"}.
 	 *

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EngineTestKit.java
Patch:
@@ -73,7 +73,7 @@ public final class EngineTestKit {
 	 * mechanism, analogous to the manner in which test engines are loaded in
 	 * the JUnit Platform Launcher API.
 	 *
-	 * <h3>Example Usage</h3>
+	 * <h4>Example Usage</h4>
 	 *
 	 * <pre class="code">
 	 * EngineTestKit
@@ -102,7 +102,7 @@ public static Builder engine(String engineId) {
 	/**
 	 * Create an execution {@link Builder} for the supplied {@link TestEngine}.
 	 *
-	 * <h3>Example Usage</h3>
+	 * <h4>Example Usage</h4>
 	 *
 	 * <pre class="code">
 	 * EngineTestKit

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/JupiterConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.ExecutionCondition;
+import org.junit.jupiter.api.io.CleanupMode;
 import org.junit.jupiter.api.parallel.ExecutionMode;
 import org.junit.platform.commons.util.ClassNamePatternFilterUtils;
 
@@ -42,7 +43,6 @@ public interface JupiterConfiguration {
 	String DEFAULT_TEST_METHOD_ORDER_PROPERTY_NAME = "junit.jupiter.testmethod.order.default";
 	String DEFAULT_TEST_CLASS_ORDER_PROPERTY_NAME = "junit.jupiter.testclass.order.default";
 	String TEMP_DIR_SCOPE_PROPERTY_NAME = "junit.jupiter.tempdir.scope";
-
 	String DEFAULT_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.default";
 	String DEFAULT_TESTABLE_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.testable.method.default";
 	String DEFAULT_TEST_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.test.method.default";
@@ -77,4 +77,6 @@ public interface JupiterConfiguration {
 
 	Optional<ClassOrderer> getDefaultTestClassOrderer();
 
+	CleanupMode getDefaultTempDirCleanupMode();
+
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultExecutionCleanupModeTests.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.platform.engine.support.hierarchical.Node.ExecutionMode;
 import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
 
-class DefaultExecutionModeTests extends AbstractJupiterTestEngineTests {
+class DefaultExecutionCleanupModeTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void defaultExecutionModeIsReadFromConfigurationParameter() {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java
Patch:
@@ -24,7 +24,6 @@ class CsvParserFactory {
 
 	private static final String DEFAULT_DELIMITER = ",";
 	private static final String LINE_SEPARATOR = "\n";
-	private static final char DOUBLE_QUOTE = '"';
 	private static final char EMPTY_CHAR = '\0';
 	private static final boolean COMMENT_PROCESSING_FOR_CSV_FILE_SOURCE = true;
 
@@ -37,7 +36,7 @@ static CsvParser createParserFor(CsvSource annotation) {
 
 	static CsvParser createParserFor(CsvFileSource annotation) {
 		String delimiter = selectDelimiter(annotation, annotation.delimiter(), annotation.delimiterString());
-		return createParser(delimiter, annotation.lineSeparator(), DOUBLE_QUOTE, annotation.emptyValue(),
+		return createParser(delimiter, annotation.lineSeparator(), annotation.quoteCharacter(), annotation.emptyValue(),
 			annotation.maxCharsPerColumn(), COMMENT_PROCESSING_FOR_CSV_FILE_SOURCE,
 			annotation.ignoreLeadingAndTrailingWhitespace());
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/JupiterTestEngineBasicTests.java
Patch:
@@ -12,7 +12,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,9 +40,8 @@ void artifactId() {
 	}
 
 	@Test
-	@Disabled("started failing after introducing java-test-fixtures")
 	void version() {
-		assertEquals("DEVELOPMENT", jupiter.getVersion().get());
+		assertEquals(System.getProperty("developmentVersion"), jupiter.getVersion().get());
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/JupiterTestEngineBasicTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -40,6 +41,7 @@ void artifactId() {
 	}
 
 	@Test
+	@Disabled("started failing after introducing java-test-fixtures")
 	void version() {
 		assertEquals("DEVELOPMENT", jupiter.getVersion().get());
 	}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JavaVersionsTests.java
Patch:
@@ -54,7 +54,7 @@ List<String> execute(String version, Path javaHome) {
 				.setProject("java-versions") //
 				.setWorkspace("java-versions-" + version) //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
-				.addArguments("--debug", "--batch-mode", "verify") //
+				.addArguments("--update-snapshots", "--batch-mode", "verify") //
 				.setTimeout(TOOL_TIMEOUT) //
 				.setJavaHome(javaHome) //
 				.build().run();

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/MavenStarterTests.java
Patch:
@@ -34,7 +34,7 @@ void verifyMavenStarterProject() {
 				.setTool(Request.maven()) //
 				.setProject("maven-starter") //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
-				.addArguments("--debug", "--batch-mode", "verify") //
+				.addArguments("--update-snapshots", "--batch-mode", "verify") //
 				.setTimeout(TOOL_TIMEOUT) //
 				.setJavaHome(Helper.getJavaHome("8").orElseThrow(TestAbortedException::new)) //
 				.build() //

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/MultiReleaseJarTests.java
Patch:
@@ -84,7 +84,8 @@ private Result mvn(String variant) {
 				.setTool(Request.maven()) //
 				.setProject("multi-release-jar") //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
-				.addArguments("--show-version", "--errors", "--batch-mode", "--file", variant, "test") //
+				.addArguments("--update-snapshots", "--show-version", "--errors", "--batch-mode", "--file", variant,
+					"test") //
 				.setTimeout(TOOL_TIMEOUT) //
 				.build() //
 				.run();

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/VintageMavenIntegrationTests.java
Patch:
@@ -59,7 +59,7 @@ private Result run(String version) {
 				.setJavaHome(Helper.getJavaHome("8").orElseThrow(TestAbortedException::new)) //
 				.setProject("vintage") //
 				.setWorkspace("vintage-maven-" + version) //
-				.addArguments("clean", "test", "--debug", "--batch-mode") //
+				.addArguments("clean", "test", "--update-snapshots", "--batch-mode") //
 				.addArguments("-Dmaven.repo=" + MavenRepo.dir()) //
 				.addArguments("-Djunit4Version=" + version) //
 				.setTimeout(TOOL_TIMEOUT) //

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -301,6 +301,7 @@ private static class SerializedForm implements Serializable {
 		private final String displayName;
 		private final String legacyReportingName;
 		private final TestSource source;
+		@SuppressWarnings({ "serial", "RedundantSuppression" }) // always used with serializable implementation (see TestIdentifier#copyOf())
 		private final Set<TestTag> tags;
 		private final Type type;
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -138,6 +138,9 @@ private static void junit(Path temp, Writer out, Writer err) throws Exception {
 
 		command.add("--scan-modules");
 
+		command.add("--config");
+		command.add("enableHttpServer=true");
+
 		command.add("--fail-if-no-tests");
 		command.add("--include-classname");
 		command.add(".*Tests");

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueIdFormat.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -63,7 +62,7 @@ private static String encode(char c) {
 	private final char segmentDelimiter;
 	private final char typeValueSeparator;
 	private final Pattern segmentPattern;
-	private final Map<Character, String> encodedCharacterMap = new HashMap<>();
+	private final HashMap<Character, String> encodedCharacterMap = new HashMap<>();
 
 	UniqueIdFormat(char openSegment, char typeValueSeparator, char closeSegment, char segmentDelimiter) {
 		this.openSegment = openSegment;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
+import static java.util.Collections.unmodifiableList;
 import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 import org.apiguardian.api.API;
@@ -49,12 +49,13 @@ public static CompositeTestSource from(Collection<? extends TestSource> sources)
 		return new CompositeTestSource(sources);
 	}
 
+	@SuppressWarnings({ "serial", "RedundantSuppression" }) // always used with serializable implementation (unmodifiableList())
 	private final List<TestSource> sources;
 
 	private CompositeTestSource(Collection<? extends TestSource> sources) {
 		Preconditions.notEmpty(sources, "TestSource collection must not be null or empty");
 		Preconditions.containsNoNullElements(sources, "individual TestSources must not be null");
-		this.sources = Collections.unmodifiableList(new ArrayList<>(sources));
+		this.sources = unmodifiableList(new ArrayList<>(sources));
 	}
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -84,7 +84,7 @@
 	 *     "apple,         1",
 	 *     "banana,        2",
 	 *     "'lemon, lime', 0xF1",
-	 *     "strawberry,    700_000",
+	 *     "strawberry,    700_000"
 	 * })
 	 * void test(String fruit, int rank) {
 	 *     // ...
@@ -116,7 +116,7 @@
 	 *     banana,        2
 	 *     'lemon, lime', 0xF1
 	 *     strawberry,    700_000
-	 * """)
+	 *     """)
 	 * void test(String fruit, int rank) {
 	 *     // ...
 	 * }</pre>

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -16,7 +16,7 @@
 import java.lang.annotation.Annotation;
 import java.util.Arrays;
 import java.util.Set;
-import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Pattern;
 import java.util.stream.Stream;
 
@@ -62,10 +62,10 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 			lines = this.annotation.value();
 		}
 
-		AtomicLong index = new AtomicLong(0);
+		AtomicInteger index = new AtomicInteger();
 		// @formatter:off
 		return Arrays.stream(lines)
-				.map(line -> parseLine(index.getAndIncrement(), line))
+				.map(line -> parseLine(index.incrementAndGet(), line))
 				.map(Arguments::of);
 		// @formatter:on
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -31,7 +31,7 @@ void throwsExceptionForInvalidCsv() {
 
 		assertThatExceptionOfType(JUnitException.class)//
 				.isThrownBy(() -> provideArguments(annotation).toArray())//
-				.withMessage("Line at index 2 contains invalid CSV: \"\"");
+				.withMessage("Line at index 3 contains invalid CSV: \"\"");
 	}
 
 	@Test

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java
Patch:
@@ -24,15 +24,14 @@ class CsvParserFactory {
 
 	private static final String DEFAULT_DELIMITER = ",";
 	private static final String LINE_SEPARATOR = "\n";
-	private static final char SINGLE_QUOTE = '\'';
 	private static final char DOUBLE_QUOTE = '"';
 	private static final char EMPTY_CHAR = '\0';
 	private static final boolean COMMENT_PROCESSING_FOR_CSV_SOURCE = false;
 	private static final boolean COMMENT_PROCESSING_FOR_CSV_FILE_SOURCE = true;
 
 	static CsvParser createParserFor(CsvSource annotation) {
 		String delimiter = selectDelimiter(annotation, annotation.delimiter(), annotation.delimiterString());
-		return createParser(delimiter, LINE_SEPARATOR, SINGLE_QUOTE, annotation.emptyValue(),
+		return createParser(delimiter, LINE_SEPARATOR, annotation.quoteCharacter(), annotation.emptyValue(),
 			annotation.maxCharsPerColumn(), COMMENT_PROCESSING_FOR_CSV_SOURCE,
 			annotation.ignoreLeadingAndTrailingWhitespace());
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -91,10 +91,10 @@
 class ParameterizedTestIntegrationTests {
 
 	@ParameterizedTest
-	@CsvSource(textBlock = """
+	@CsvSource(quoteCharacter = '"', textBlock = """
 				apple,         1
 				banana,        2
-				'lemon, lime', 0xF1
+				"lemon, lime", 0xF1
 				strawberry,    700_000
 			""")
 	void executesLinesFromTextBlock(String fruit, int rank) {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MockCsvAnnotationBuilder.java
Patch:
@@ -115,6 +115,7 @@ CsvSource build() {
 			// @CsvSource
 			when(annotation.value()).thenReturn(this.lines);
 			when(annotation.textBlock()).thenReturn(this.textBlock);
+			when(annotation.quoteCharacter()).thenReturn('\'');
 
 			return annotation;
 		}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/ClassOrderer.java
Patch:
@@ -174,7 +174,7 @@ private static int getOrder(ClassDescriptor descriptor) {
 	 * default random seed is logged at {@code CONFIG} level. In addition, a
 	 * custom seed (potentially the default seed from the previous test plan
 	 * execution) may be specified via the {@link Random#RANDOM_SEED_PROPERTY_NAME
-	 * junit.jupiter.execution.class.order.random.seed} <em>configuration parameter</em>
+	 * junit.jupiter.execution.order.random.seed} <em>configuration parameter</em>
 	 * which can be supplied via the {@code Launcher} API, build tools (e.g.,
 	 * Gradle and Maven), a JVM system property, or the JUnit Platform configuration
 	 * file (i.e., a file named {@code junit-platform.properties} in the root of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -68,9 +68,9 @@ default void publishEntry(String key, String value) {
 	 * argument as the value.
 	 *
 	 * @param value the value to be published; never {@code null} or blank
+	 * @since 5.3
 	 * @see #publishEntry(Map)
 	 * @see #publishEntry(String, String)
-	 * @since 5.3
 	 */
 	@API(status = STABLE, since = "5.3")
 	default void publishEntry(String value) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/LifecycleMethodExecutionExceptionHandler.java
Patch:
@@ -50,8 +50,8 @@
  * {@code LifecycleMethodExecutionExceptionHandler} (if there is one) will be
  * invoked with any {@link Throwable} thrown by the previous handler.
  *
- * @see TestExecutionExceptionHandler
  * @since 5.5
+ * @see TestExecutionExceptionHandler
  */
 @API(status = EXPERIMENTAL, since = "5.5")
 public interface LifecycleMethodExecutionExceptionHandler extends Extension {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -30,8 +30,8 @@
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
- * @see LifecycleMethodExecutionExceptionHandler
  * @since 5.0
+ * @see LifecycleMethodExecutionExceptionHandler
  */
 @FunctionalInterface
 @API(status = STABLE, since = "5.0")

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -46,9 +46,9 @@
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
+ * @since 5.0
  * @see org.junit.jupiter.api.TestTemplate
  * @see TestTemplateInvocationContext
- * @since 5.0
  */
 @API(status = STABLE, since = "5.0")
 public interface TestTemplateInvocationContextProvider extends Extension {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -32,8 +32,8 @@
  * explicitly throw a {@code Throwable}. In order to support such specialized
  * use cases, {@link #accept} is declared to throw {@code Throwable}.
  *
- * @since 5.0
  * @param <T> the type of argument consumed
+ * @since 5.0
  * @see java.util.function.Consumer
  * @see org.junit.jupiter.api.DynamicTest#stream
  * @see Executable

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -32,8 +32,8 @@
  * explicitly throw a {@code Throwable}. In order to support such specialized
  * use cases, {@link #get} is declared to throw {@code Throwable}.
  *
- * @since 5.0
  * @param <T> the type of argument supplied
+ * @since 5.0
  * @see java.util.function.Supplier
  * @see org.junit.jupiter.api.Assertions#assertTimeout(java.time.Duration, ThrowingSupplier)
  * @see org.junit.jupiter.api.Assertions#assertTimeoutPreemptively(java.time.Duration, ThrowingSupplier)

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/ResourceAccessMode.java
Patch:
@@ -17,8 +17,8 @@
 /**
  * The access mode required by a test class or method for a given resource.
  *
- * @see ResourceLock
  * @since 5.3
+ * @see ResourceLock
  */
 @API(status = EXPERIMENTAL, since = "5.3")
 public enum ResourceAccessMode {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Resources.java
Patch:
@@ -17,8 +17,8 @@
 /**
  * Common resource names for synchronizing test execution.
  *
- * @see ResourceLock
  * @since 5.3
+ * @see ResourceLock
  */
 @API(status = EXPERIMENTAL, since = "5.3")
 public class Resources {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/LruCache.java
Patch:
@@ -22,9 +22,9 @@
  *
  * <p>This class is not thread-safe.
  *
- * @since 1.6
  * @param <K> the type of keys maintained by this cache
  * @param <V> the type of values maintained by this cache
+ * @since 1.6
  */
 @API(status = INTERNAL, since = "1.6")
 public class LruCache<K, V> extends LinkedHashMap<K, V> {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -30,10 +30,10 @@
  * implementations of the {@link org.junit.platform.launcher.TestExecutionListener}
  * API via the {@link org.junit.platform.launcher.TestPlan}.
  *
+ * @since 1.0
  * @see TestEngine
  * @see EngineDiscoveryRequest
  * @see ExecutionRequest
- * @since 1.0
  */
 @API(status = STABLE, since = "1.0")
 public interface ConfigurationParameters {
@@ -109,10 +109,10 @@ public interface ConfigurationParameters {
 	 * @return an {@code Optional} containing the value; never {@code null}
 	 * but potentially empty
 	 *
+	 * @since 1.3
 	 * @see #getBoolean(String)
 	 * @see System#getProperty(String)
 	 * @see #CONFIG_FILE_NAME
-	 * @since 1.3
 	 */
 	@API(status = STABLE, since = "1.3")
 	default <T> Optional<T> get(String key, Function<String, T> transformer) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryListener.java
Patch:
@@ -26,8 +26,8 @@
  * each {@link TestEngine} during test discovery. However, since this interface
  * was only added in 1.6, older engines might not yet do so.
  *
- * @see EngineDiscoveryRequest#getDiscoveryListener()
  * @since 1.6
+ * @see EngineDiscoveryRequest#getDiscoveryListener()
  */
 @API(status = EXPERIMENTAL, since = "1.6")
 public interface EngineDiscoveryListener {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -30,12 +30,12 @@
  * <p>In addition, the supplied {@linkplain ConfigurationParameters
  * configuration parameters} can be used to influence the discovery process.
  *
+ * @since 1.0
  * @see TestEngine
  * @see TestDescriptor
  * @see DiscoverySelector
  * @see DiscoveryFilter
  * @see ConfigurationParameters
- * @since 1.0
  */
 @API(status = STABLE, since = "1.0")
 public interface EngineDiscoveryRequest {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -24,8 +24,8 @@
  * {@link ConfigurationParameters} that the engine may use to influence test
  * execution.
  *
- * @see TestEngine
  * @since 1.0
+ * @see TestEngine
  */
 @API(status = STABLE, since = "1.0")
 public class ExecutionRequest {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -24,8 +24,8 @@
  * Mutable descriptor for a test or container that has been discovered by a
  * {@link TestEngine}.
  *
- * @see TestEngine
  * @since 1.0
+ * @see TestEngine
  */
 @API(status = STABLE, since = "1.0")
 public interface TestDescriptor {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -39,10 +39,10 @@
  * Jupiter are meta-annotated with {@code @Testable}. Consult the Javadoc for
  * {@code @Testable} for further details.
  *
+ * @since 1.0
  * @see org.junit.platform.engine.EngineDiscoveryRequest
  * @see org.junit.platform.engine.ExecutionRequest
  * @see org.junit.platform.commons.annotation.Testable
- * @since 1.0
  */
 @API(status = STABLE, since = "1.0")
 public interface TestEngine {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -203,9 +203,9 @@ public boolean hasPrefix(UniqueId potentialPrefix) {
 	 *
 	 * <p>This {@code UniqueId} will not be modified.
 	 *
+	 * @return a new {@code UniqueId}; never {@code null}
 	 * @throws org.junit.platform.commons.PreconditionViolationException
 	 * if this {@code UniqueId} contains a single segment
-	 * @return a new {@code UniqueId}; never {@code null}
 	 * @since 1.5
 	 */
 	@API(status = STABLE, since = "1.5")

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/discovery/EngineDiscoveryRequestResolver.java
Patch:
@@ -44,9 +44,9 @@
  * {@link org.junit.platform.engine.DiscoverySelector DiscoverySelectors}.
  *
  * @param <T> the type of the engine's descriptor
+ * @since 1.5
  * @see #builder()
  * @see #resolve(EngineDiscoveryRequest, TestDescriptor)
- * @since 1.5
  */
 @API(status = EXPERIMENTAL, since = "1.5")
 public class EngineDiscoveryRequestResolver<T extends TestDescriptor> {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/discovery/SelectorResolver.java
Patch:
@@ -331,8 +331,8 @@ default Resolution resolve(DiscoverySelector selector, Context context) {
 	 * adding a filter and returning a {@linkplain Match#partial(TestDescriptor)
 	 * partial match}).
 	 *
-	 * @see SelectorResolver
 	 * @since 1.5
+	 * @see SelectorResolver
 	 */
 	@API(status = EXPERIMENTAL, since = "1.5")
 	interface Context {
@@ -422,8 +422,8 @@ <T extends TestDescriptor> Optional<T> addToParent(Supplier<DiscoverySelector> p
 	 * {@linkplain #match match} or multiple {@linkplain #matches}, or a set of
 	 * {@linkplain #selectors selectors}.
 	 *
-	 * @see SelectorResolver
 	 * @since 1.5
+	 * @see SelectorResolver
 	 */
 	@API(status = EXPERIMENTAL, since = "1.5")
 	class Resolution {
@@ -540,10 +540,10 @@ public Set<? extends DiscoverySelector> getSelectors() {
 	 * TestDescriptor} with the same {@linkplain TestDescriptor#getUniqueId()
 	 * unique ID}.
 	 *
+	 * @since 1.5
 	 * @see SelectorResolver
 	 * @see Resolution#match(Match)
 	 * @see Resolution#matches(Set)
-	 * @since 1.5
 	 */
 	@API(status = EXPERIMENTAL, since = "1.5")
 	class Match {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java
Patch:
@@ -24,8 +24,8 @@
  * An exclusive resource identified by a key with a lock mode that is used to
  * synchronize access to shared resources when executing nodes in parallel.
  *
- * @see Node#getExecutionMode()
  * @since 1.3
+ * @see Node#getExecutionMode()
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public class ExclusiveResource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ForkJoinPoolHierarchicalTestExecutorService.java
Patch:
@@ -40,9 +40,9 @@
  * {@linkplain HierarchicalTestExecutorService executor service} that executes
  * {@linkplain TestTask test tasks} with the configured parallelism.
  *
+ * @since 1.3
  * @see ForkJoinPool
  * @see DefaultParallelExecutionConfigurationStrategy
- * @since 1.3
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public class ForkJoinPoolHierarchicalTestExecutorService implements HierarchicalTestExecutorService {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -71,9 +71,9 @@ public final void execute(ExecutionRequest request) {
 	 * {@link SameThreadHierarchicalTestExecutorService}.
 	 *
 	 * @param request the request about to be executed
+	 * @since 1.3
 	 * @see ForkJoinPoolHierarchicalTestExecutorService
 	 * @see SameThreadHierarchicalTestExecutorService
-	 * @since 1.3
 	 */
 	@API(status = EXPERIMENTAL, since = "1.3")
 	protected HierarchicalTestExecutorService createExecutorService(ExecutionRequest request) {
@@ -94,9 +94,9 @@ protected HierarchicalTestExecutorService createExecutorService(ExecutionRequest
 	 * {@link OpenTest4JAwareThrowableCollector}.
 	 *
 	 * @param request the request about to be executed
+	 * @since 1.3
 	 * @see OpenTest4JAwareThrowableCollector
 	 * @see ThrowableCollector
-	 * @since 1.3
 	 */
 	@API(status = EXPERIMENTAL, since = "1.3")
 	protected ThrowableCollector.Factory createThrowableCollectorFactory(ExecutionRequest request) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorService.java
Patch:
@@ -22,10 +22,10 @@
 /**
  * A closeable service that executes {@linkplain TestTask test tasks}.
  *
+ * @since 1.3
  * @see HierarchicalTestEngine#createExecutorService(ExecutionRequest)
  * @see SameThreadHierarchicalTestExecutorService
  * @see ForkJoinPoolHierarchicalTestExecutorService
- * @since 1.3
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public interface HierarchicalTestExecutorService extends AutoCloseable {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -298,8 +298,8 @@ interface DynamicTestExecutor {
 		 * @param executionListener the executionListener to be notified; never
 		 * {@code null}
 		 * @return a future to cancel or wait for the execution
-		 * @see EngineExecutionListener#NOOP
 		 * @since 5.7
+		 * @see EngineExecutionListener#NOOP
 		 */
 		@API(status = EXPERIMENTAL, since = "5.7")
 		Future<?> execute(TestDescriptor testDescriptor, EngineExecutionListener executionListener);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/OpenTest4JAwareThrowableCollector.java
Patch:
@@ -19,8 +19,8 @@
  * Specialization of {@link ThrowableCollector} that treats instances of
  * {@link TestAbortedException} as <em>aborting</em>.
  *
- * @see ThrowableCollector
  * @since 1.3
+ * @see ThrowableCollector
  */
 @API(status = MAINTAINED, since = "1.3")
 public class OpenTest4JAwareThrowableCollector extends ThrowableCollector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionConfiguration.java
Patch:
@@ -24,11 +24,10 @@
  * implementations may use all of the properties in this class or
  * only a subset.
  *
+ * @since 1.3
  * @see ForkJoinPoolHierarchicalTestExecutorService
  * @see ParallelExecutionConfigurationStrategy
  * @see DefaultParallelExecutionConfigurationStrategy
- *
- * @since 1.3
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public interface ParallelExecutionConfiguration {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionConfigurationStrategy.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * A strategy to use for configuring parallel test execution.
  *
- * @see DefaultParallelExecutionConfigurationStrategy
  * @since 1.3
+ * @see DefaultParallelExecutionConfigurationStrategy
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public interface ParallelExecutionConfigurationStrategy {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ResourceLock.java
Patch:
@@ -17,9 +17,8 @@
 /**
  * A lock for a one or more resources.
  *
- * @see HierarchicalTestExecutorService.TestTask#getResourceLock()
- *
  * @since 1.3
+ * @see HierarchicalTestExecutorService.TestTask#getResourceLock()
  */
 @API(status = EXPERIMENTAL, since = "1.3")
 public interface ResourceLock extends AutoCloseable {

File: junit-platform-jfr/src/main/java/org/junit/platform/jfr/FlightRecordingDiscoveryListener.java
Patch:
@@ -33,8 +33,8 @@
  * A {@link LauncherDiscoveryListener} that generates Java Flight Recorder
  * events.
  *
- * @see <a href="https://openjdk.java.net/jeps/328">JEP 328: Flight Recorder</a>
  * @since 1.8
+ * @see <a href="https://openjdk.java.net/jeps/328">JEP 328: Flight Recorder</a>
  */
 @API(status = EXPERIMENTAL, since = "1.8")
 public class FlightRecordingDiscoveryListener implements LauncherDiscoveryListener {

File: junit-platform-jfr/src/main/java/org/junit/platform/jfr/FlightRecordingExecutionListener.java
Patch:
@@ -35,8 +35,8 @@
  * A {@link TestExecutionListener} that generates Java Flight Recorder
  * events.
  *
- * @see <a href="https://openjdk.java.net/jeps/328">JEP 328: Flight Recorder</a>
  * @since 1.8
+ * @see <a href="https://openjdk.java.net/jeps/328">JEP 328: Flight Recorder</a>
  */
 @API(status = EXPERIMENTAL, since = "1.8")
 public class FlightRecordingExecutionListener implements TestExecutionListener {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherConstants.java
Patch:
@@ -19,8 +19,8 @@
 /**
  * Collection of constants related to {@link Launcher}.
  *
- * @see org.junit.platform.engine.ConfigurationParameters
  * @since 1.3
+ * @see org.junit.platform.engine.ConfigurationParameters
  */
 @API(status = STABLE, since = "1.7")
 public class LauncherConstants {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryListener.java
Patch:
@@ -33,10 +33,10 @@
  * created via the {@link org.junit.platform.launcher.core.LauncherFactory}
  * during test discovery.
  *
+ * @since 1.6
  * @see org.junit.platform.launcher.listeners.discovery.LauncherDiscoveryListeners
  * @see LauncherDiscoveryRequest#getDiscoveryListener()
  * @see org.junit.platform.launcher.core.LauncherConfig.Builder#addLauncherDiscoveryListeners
- * @since 1.6
  */
 @API(status = EXPERIMENTAL, since = "1.6")
 public interface LauncherDiscoveryListener extends EngineDiscoveryListener {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherSession.java
Patch:
@@ -20,10 +20,10 @@
  * wishes to repeatedly <em>discover</em> and <em>execute</em> tests using one
  * or more {@linkplain org.junit.platform.engine.TestEngine test engines}.
  *
+ * @since 1.8
  * @see Launcher
  * @see LauncherSessionListener
  * @see LauncherFactory
- * @since 1.8
  */
 @API(status = EXPERIMENTAL, since = "1.8")
 public interface LauncherSession extends AutoCloseable {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherSessionListener.java
Patch:
@@ -34,10 +34,10 @@
  * <p>The methods declared in this interface are called by the {@link Launcher}
  * or {@link LauncherSession} created via the {@link LauncherFactory}.
  *
+ * @since 1.8
  * @see LauncherSession
  * @see LauncherConfig.Builder#addLauncherSessionListeners
  * @see LauncherFactory
- * @since 1.8
  */
 @API(status = EXPERIMENTAL, since = "1.8")
 public interface LauncherSessionListener {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherConfig.java
Patch:
@@ -45,10 +45,10 @@
  * launcher.execute(discoveryRequest);
  * </pre>
  *
+ * @since 1.3
  * @see #builder()
  * @see Launcher
  * @see LauncherFactory
- * @since 1.3
  */
 @API(status = STABLE, since = "1.7")
 public interface LauncherConfig {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -208,9 +208,9 @@ public LauncherDiscoveryRequestBuilder configurationParameters(Map<String, Strin
 	 * @param configurationParameters the parent instance to be used for looking
 	 * up configuration parameters that have not been explicitly configured;
 	 * never {@code null}
+	 * @since 1.8
 	 * @see #configurationParameter(String, String)
 	 * @see #configurationParameters(Map)
-	 * @since 1.8
 	 */
 	@API(status = EXPERIMENTAL, since = "1.8")
 	public LauncherDiscoveryRequestBuilder parentConfigurationParameters(
@@ -232,10 +232,10 @@ public LauncherDiscoveryRequestBuilder parentConfigurationParameters(
 	 * @param listeners the {@code LauncherDiscoveryListeners} to add; never
 	 * {@code null}
 	 * @return this builder for method chaining
+	 * @since 1.6
 	 * @see LauncherDiscoveryListener
 	 * @see LauncherDiscoveryListeners
 	 * @see LauncherDiscoveryRequestBuilder#DEFAULT_DISCOVERY_LISTENER_CONFIGURATION_PROPERTY_NAME
-	 * @since 1.6
 	 */
 	@API(status = EXPERIMENTAL, since = "1.6")
 	public LauncherDiscoveryRequestBuilder listeners(LauncherDiscoveryListener... listeners) {
@@ -254,9 +254,9 @@ public LauncherDiscoveryRequestBuilder listeners(LauncherDiscoveryListener... li
 	 * Passing {@code false} to this method, disables the latter two sources so
 	 * that only explicit configuration parameters are taken into account.
 	 *
+	 * @since 1.7
 	 * @see #configurationParameter(String, String)
 	 * @see #configurationParameters(Map)
-	 * @since 1.7
 	 */
 	@API(status = EXPERIMENTAL, since = "1.7")
 	public LauncherDiscoveryRequestBuilder enableImplicitConfigurationParameters(boolean enabled) {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -74,8 +74,8 @@ private LauncherFactory() {
 	 * {@linkplain LauncherConfig#DEFAULT default} {@link LauncherConfig}.
 	 *
 	 * @throws PreconditionViolationException if no test engines are detected
-	 * @see #openSession(LauncherConfig)
 	 * @since 1.8
+	 * @see #openSession(LauncherConfig)
 	 */
 	@API(status = EXPERIMENTAL, since = "1.8")
 	public static LauncherSession openSession() throws PreconditionViolationException {
@@ -90,8 +90,8 @@ public static LauncherSession openSession() throws PreconditionViolationExceptio
 	 * {@code null}
 	 * @throws PreconditionViolationException if the supplied configuration is
 	 * {@code null}, or if no test engines are detected
-	 * @see #openSession()
 	 * @since 1.8
+	 * @see #openSession()
 	 */
 	@API(status = EXPERIMENTAL, since = "1.8")
 	public static LauncherSession openSession(LauncherConfig config) throws PreconditionViolationException {
@@ -117,8 +117,8 @@ public static Launcher create() throws PreconditionViolationException {
 	 * @throws PreconditionViolationException if the supplied configuration is
 	 * {@code null}, or if no test engines are detected
 	 * registered
-	 * @see #create()
 	 * @since 1.3
+	 * @see #create()
 	 */
 	@API(status = EXPERIMENTAL, since = "1.3")
 	public static Launcher create(LauncherConfig config) throws PreconditionViolationException {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -147,9 +147,9 @@ public interface TestExecutionSummary {
 	 * @param writer the {@code PrintWriter} to which to print; never {@code null}
 	 * @param maxStackTraceLines the maximum number of lines to print for exception
 	 * stack traces; must be a positive value
+	 * @since 1.6
 	 * @see #printTo(PrintWriter)
 	 * @see #printFailuresTo(PrintWriter)
-	 * @since 1.6
 	 */
 	@API(status = MAINTAINED, since = "1.6")
 	default void printFailuresTo(PrintWriter writer, int maxStackTraceLines) {

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Events.java
Patch:
@@ -287,11 +287,11 @@ public final void assertEventsMatchExactly(Condition<? super Event>... condition
 	 * </pre>
 	 *
 	 * @param conditions the conditions to match against; never {@code null}
+	 * @since 1.7
 	 * @see #assertEventsMatchExactly(Condition...)
 	 * @see #assertEventsMatchLooselyInOrder(Condition...)
 	 * @see EventConditions
 	 * @see TestExecutionResultConditions
-	 * @since 1.7
 	 */
 	@SafeVarargs
 	@SuppressWarnings("varargs")
@@ -322,11 +322,11 @@ public final void assertEventsMatchLoosely(Condition<? super Event>... condition
 	 * </pre>
 	 *
 	 * @param conditions the conditions to match against; never {@code null}
+	 * @since 1.7
 	 * @see #assertEventsMatchExactly(Condition...)
 	 * @see #assertEventsMatchLoosely(Condition...)
 	 * @see EventConditions
 	 * @see TestExecutionResultConditions
-	 * @since 1.7
 	 */
 	@SafeVarargs
 	@SuppressWarnings("varargs")

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Suite.java
Patch:
@@ -63,7 +63,7 @@
  * @see ConfigurationParameter
  * @see DisableParentConfigurationParameters
  * @see org.junit.platform.launcher.LauncherDiscoveryRequest
- * @see org.junit.platform.launcher.LauncherDiscoveryRequestBuilder
+ * @see org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder
  * @see org.junit.platform.launcher.Launcher
  */
 @Retention(RetentionPolicy.RUNTIME)

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -53,6 +53,7 @@ class ModularUserGuideTests {
 		"  requires java.desktop;", //
 		"  requires java.logging;", //
 		"  requires java.scripting;", //
+		"  requires jdk.httpserver;", //
 		"}", //
 		"" //
 	);
@@ -166,7 +167,7 @@ void runTestsFromUserGuideWithinModularBoundaries(@TempDir Path temp) throws Exc
 		var args = compile(temp, out, err);
 		// args.forEach(System.out::println);
 
-		assertTrue(err.toString().isBlank(), () -> err.toString() + "\n\n" + String.join("\n", args));
+		assertTrue(err.toString().isBlank(), () -> err + "\n\n" + String.join("\n", args));
 		var listing = Helper.treeWalk(temp);
 		assertLinesMatch(List.of( //
 			"destination", //

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertAll.java
Patch:
@@ -62,8 +62,8 @@ static void assertAll(String heading, Stream<Executable> executables) {
 		Preconditions.notNull(executables, "executables stream must not be null");
 
 		List<Throwable> failures = executables //
-				.peek(executable -> Preconditions.notNull(executable, "individual executables must not be null"))//
 				.map(executable -> {
+					Preconditions.notNull(executable, "individual executables must not be null");
 					try {
 						executable.execute();
 						return null;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TempDirectory.java
Patch:
@@ -272,7 +272,7 @@ private static void resetPermissions(Path path) {
 		private IOException createIOExceptionWithAttachedFailures(SortedMap<Path, IOException> failures) {
 			// @formatter:off
 			String joinedPaths = failures.keySet().stream()
-					.peek(this::tryToDeleteOnExit)
+					.map(this::tryToDeleteOnExit)
 					.map(this::relativizeSafely)
 					.map(String::valueOf)
 					.collect(joining(", "));
@@ -284,12 +284,13 @@ private IOException createIOExceptionWithAttachedFailures(SortedMap<Path, IOExce
 			return exception;
 		}
 
-		private void tryToDeleteOnExit(Path path) {
+		private Path tryToDeleteOnExit(Path path) {
 			try {
 				path.toFile().deleteOnExit();
 			}
 			catch (UnsupportedOperationException ignore) {
 			}
+			return path;
 		}
 
 		private Path relativizeSafely(Path path) {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -138,9 +138,8 @@ private static List<String> validateAndTrim(List<String> engineIds) {
 
 		// @formatter:off
 		return engineIds.stream()
+				.map(id -> Preconditions.notBlank(id, "engine ID must not be null or blank").trim())
 				.distinct()
-				.peek(id -> Preconditions.notBlank(id, "engine ID must not be null or blank"))
-				.map(String::trim)
 				.collect(toList());
 		// @formatter:on
 	}

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Assertions.java
Patch:
@@ -38,8 +38,8 @@ static void assertAll(String heading, Stream<Executable> executables) {
 		Preconditions.notNull(executables, "executables stream must not be null");
 
 		List<Throwable> failures = executables //
-				.peek(executable -> Preconditions.notNull(executable, "individual executables must not be null"))//
 				.map(executable -> {
+					Preconditions.notNull(executable, "individual executables must not be null");
 					try {
 						executable.execute();
 						return null;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/TestRun.java
Patch:
@@ -193,7 +193,9 @@ TestExecutionResult getStoredResultOrSuccessful(TestDescriptor testDescriptor) {
 				.map(Optional::get)
 				.collect(toList());
 		// @formatter:on
-		return failed(new MultipleFailuresError("", failures));
+		MultipleFailuresError multipleFailuresError = new MultipleFailuresError("", failures);
+		failures.forEach(multipleFailuresError::addSuppressed);
+		return failed(multipleFailuresError);
 	}
 
 	private static class VintageDescriptors {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/RegisterExtension.java
Patch:
@@ -81,7 +81,9 @@
  * {@code @RegisterExtension} fields with {@link org.junit.jupiter.api.Order @Order}.
  * Any {@code @RegisterExtension} field not annotated with {@code @Order} will be
  * ordered using the {@link org.junit.jupiter.api.Order#DEFAULT default} order
- * value.
+ * value. Note that {@code @ExtendWith} fields can also be ordered with
+ * {@code @Order}, relative to {@code @RegisterExtension} fields and other
+ * {@code @ExtendWith} fields.
  *
  * <h3>Example Usage</h3>
  *

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -76,8 +76,8 @@ static MutableExtensionRegistry populateNewExtensionRegistryFromExtendWithAnnota
 
 	/**
 	 * Register extensions using the supplied registrar from fields in the supplied
-	 * class that are meta-annotated with {@link ExtendWith @ExtendWith} or
-	 * annotated with {@link RegisterExtension @RegisterExtension}.
+	 * class that are annotated with {@link ExtendWith @ExtendWith} or
+	 * {@link RegisterExtension @RegisterExtension}.
 	 *
 	 * <p>The extensions will be sorted according to {@link Order @Order} semantics
 	 * prior to registration.
@@ -141,7 +141,7 @@ static void registerExtensionsFromConstructorParameters(ExtensionRegistrar regis
 	/**
 	 * Register extensions using the supplied registrar from parameters in the
 	 * supplied {@link Executable} (i.e., a {@link java.lang.reflect.Constructor}
-	 * or {@link java.lang.reflect.Method}) that are meta-annotated with
+	 * or {@link java.lang.reflect.Method}) that are annotated with
 	 * {@link ExtendWith @ExtendWith}.
 	 *
 	 * @param registrar the registrar with which to register the extensions; never {@code null}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/MutableExtensionRegistry.java
Patch:
@@ -95,7 +95,7 @@ private static void registerAutoDetectedExtensions(MutableExtensionRegistry exte
 	 * @return a new {@code ExtensionRegistry}; never {@code null}
 	 */
 	public static MutableExtensionRegistry createRegistryFrom(MutableExtensionRegistry parentRegistry,
-			List<Class<? extends Extension>> extensionTypes) {
+			Stream<Class<? extends Extension>> extensionTypes) {
 
 		Preconditions.notNull(parentRegistry, "parentRegistry must not be null");
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -164,7 +164,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		this.beforeAllMethods.forEach(method -> registerExtensionsFromExecutableParameters(registry, method));
 		// Since registerBeforeEachMethodAdapters() and registerAfterEachMethodAdapters() also
 		// invoke registerExtensionsFromExecutableParameters(), we invoke those methods before
-		// invoking registerExtensionsFromExecutableParameters() for @BeforeAll methods,
+		// invoking registerExtensionsFromExecutableParameters() for @AfterAll methods,
 		// thereby ensuring proper registration order for extensions registered via @ExtendWith
 		// on parameters in lifecycle methods.
 		registerBeforeEachMethodAdapters(registry);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -148,7 +148,8 @@ static void registerExtensionsFromConstructorParameters(ExtensionRegistrar regis
 	/**
 	 * Register extensions using the supplied registrar from parameters in the
 	 * supplied {@link Executable} (i.e., a {@link java.lang.reflect.Constructor}
-	 * or {@link java.lang.reflect.Method}) that are annotated with{@link ExtendWith @ExtendWith}.
+	 * or {@link java.lang.reflect.Method}) that are meta-annotated with
+	 * {@link ExtendWith @ExtendWith}.
 	 *
 	 * @param registrar the registrar with which to register the extensions; never {@code null}
 	 * @param executable the constructor or method whose parameters should be searched; never {@code null}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -85,7 +85,8 @@ static MutableExtensionRegistry populateNewExtensionRegistryFromExtendWithAnnota
 
 	/**
 	 * Register extensions using the supplied registrar from fields in the supplied
-	 * class that are annotated with {@link RegisterExtension @RegisterExtension}.
+	 * class that are meta-annotated with {@link ExtendWith @ExtendWith} or
+	 * annotated with {@link RegisterExtension @RegisterExtension}.
 	 *
 	 * <p>The extensions will be sorted according to {@link Order @Order} semantics
 	 * prior to registration.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/ClassOrderer.java
Patch:
@@ -183,7 +183,7 @@ class Random implements ClassOrderer {
 
 		static {
 			DEFAULT_SEED = System.nanoTime();
-			logger.info(() -> "ClassOrderer.Random default seed: " + DEFAULT_SEED);
+			logger.config(() -> "ClassOrderer.Random default seed: " + DEFAULT_SEED);
 		}
 
 		/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -253,7 +253,7 @@ class Random implements MethodOrderer {
 
 		static {
 			DEFAULT_SEED = System.nanoTime();
-			logger.info(() -> "MethodOrderer.Random default seed: " + DEFAULT_SEED);
+			logger.config(() -> "MethodOrderer.Random default seed: " + DEFAULT_SEED);
 		}
 
 		/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/EnumConfigurationParameterConverter.java
Patch:
@@ -53,7 +53,7 @@ public E get(String key, Function<String, Optional<String>> lookup, E defaultVal
 			try {
 				constantName = value.get().trim().toUpperCase(Locale.ROOT);
 				E result = Enum.valueOf(enumType, constantName);
-				logger.info(() -> String.format("Using %s '%s' set via the '%s' configuration parameter.",
+				logger.config(() -> String.format("Using %s '%s' set via the '%s' configuration parameter.",
 					enumDisplayName, result, key));
 				return result;
 			}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/InstantiatingConfigurationParameterConverter.java
Patch:
@@ -60,7 +60,7 @@ private void logFailureMessage(String className, String key, Exception cause) {
 	}
 
 	private void logSuccessMessage(String className, String key) {
-		logger.info(() -> String.format("Using default %s '%s' set via the '%s' configuration parameter.", name,
+		logger.config(() -> String.format("Using default %s '%s' set via the '%s' configuration parameter.", name,
 			className, key));
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/config/InstantiatingConfigurationParameterConverterTests.java
Patch:
@@ -46,7 +46,7 @@ void shouldInstantiateConfiguredClass(LogRecordListener listener) {
 		DisplayNameGenerator displayNameGenerator = converter.get(configurationParameters, KEY).orElseThrow();
 
 		assertThat(displayNameGenerator).isInstanceOf(CustomDisplayNameGenerator.class);
-		assertExpectedLogMessage(listener, Level.INFO,
+		assertExpectedLogMessage(listener, Level.CONFIG,
 			"Using default display name generator "
 					+ "'org.junit.jupiter.engine.descriptor.CustomDisplayNameGenerator' set via the "
 					+ "'junit.jupiter.displayname.generator.default' configuration parameter.");
@@ -87,7 +87,7 @@ void shouldTrimAndInstantiateConfiguredClass(LogRecordListener listener) {
 		DisplayNameGenerator displayNameGenerator = converter.get(configurationParameters, KEY).orElseThrow();
 
 		assertThat(displayNameGenerator).isInstanceOf(CustomDisplayNameGenerator.class);
-		assertExpectedLogMessage(listener, Level.INFO,
+		assertExpectedLogMessage(listener, Level.CONFIG,
 			"Using default display name generator "
 					+ "'org.junit.jupiter.engine.descriptor.CustomDisplayNameGenerator' set via the "
 					+ "'junit.jupiter.displayname.generator.default' configuration parameter.");

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java
Patch:
@@ -195,7 +195,7 @@ private void logTestDescriptorExclusionReasons(Map<String, List<TestDescriptor>>
 			String displayNames = testDescriptors.stream().map(TestDescriptor::getDisplayName).collect(joining(", "));
 			long containerCount = testDescriptors.stream().filter(TestDescriptor::isContainer).count();
 			long methodCount = testDescriptors.stream().filter(TestDescriptor::isTest).count();
-			logger.info(() -> String.format("%d containers and %d tests were %s", containerCount, methodCount,
+			logger.config(() -> String.format("%d containers and %d tests were %s", containerCount, methodCount,
 				exclusionReason));
 			logger.debug(
 				() -> String.format("The following containers and tests were %s: %s", exclusionReason, displayNames));

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherConfigurationParameters.java
Patch:
@@ -236,7 +236,7 @@ private static Properties loadClasspathResource(String configFileName) {
 				}
 
 				URL configFileUrl = resources.iterator().next(); // same as List#get(0)
-				logger.info(() -> String.format(
+				logger.config(() -> String.format(
 					"Loading JUnit Platform configuration parameters from classpath resource [%s].", configFileUrl));
 				URLConnection urlConnection = configFileUrl.openConnection();
 				urlConnection.setUseCaches(false);

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ConfigurationParameter.java
Patch:
@@ -28,6 +28,7 @@
  * a test suite on the JUnit Platform.
  *
  * @since 1.8
+ * @see DisableParentConfigurationParameters
  * @see Suite
  * @see org.junit.platform.runner.JUnitPlatform
  * @see org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder#configurationParameter(String, String)

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/MultipleSuite.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.platform.suite.engine.testsuites;
 
-import org.junit.platform.suite.api.IncludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
 import org.junit.platform.suite.engine.testcases.MultipleTestsTestCase;
@@ -19,7 +18,6 @@
  * @since 1.8
  */
 @Suite
-@IncludeClassNamePatterns(".*TestCase$")
 @SelectClasses(MultipleTestsTestCase.class)
 public class MultipleSuite {
 }

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/SelectClassesSuite.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.platform.suite.engine.testsuites;
 
-import org.junit.platform.suite.api.IncludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
 import org.junit.platform.suite.engine.testcases.SingleTestTestCase;
@@ -19,7 +18,6 @@
  * @since 1.8
  */
 @Suite
-@IncludeClassNamePatterns(".*TestCase$")
 @SelectClasses(SingleTestTestCase.class)
 public class SelectClassesSuite {
 }

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteDisplayNameSuite.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.platform.suite.engine.testsuites;
 
-import org.junit.platform.suite.api.IncludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
 import org.junit.platform.suite.api.SuiteDisplayName;
@@ -20,7 +19,6 @@
  * @since 1.8
  */
 @Suite
-@IncludeClassNamePatterns(".*TestCase$")
 @SelectClasses(SingleTestTestCase.class)
 @SuiteDisplayName("Suite Display Name")
 public class SuiteDisplayNameSuite {

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -347,7 +347,7 @@ protected ToLengthArgumentConverter() {
 
 		@Override
 		protected Integer convert(String source) {
-			return source.length();
+			return (source != null ? source.length() : 0);
 		}
 
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/TypedArgumentConverter.java
Patch:
@@ -34,7 +34,7 @@ public abstract class TypedArgumentConverter<S, T> implements ArgumentConverter
 	private final Class<T> targetType;
 
 	/**
-	 * Create a new {@codeTypedArgumentConverter}.
+	 * Create a new {@code TypedArgumentConverter}.
 	 *
 	 * @param sourceType the type of the argument to convert; never {@code null}
 	 * @param targetType the type of the target object to create from the source;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/TypedArgumentConverter.java
Patch:
@@ -40,6 +40,9 @@ protected TypedArgumentConverter(Class<S> sourceType, Class<T> targetType) {
 
 	@Override
 	public final Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
+		if (source == null) {
+			return convert(null);
+		}
 		if (!this.sourceType.isAssignableFrom(source.getClass())) {
 			throw new ArgumentConversionException("Can only convert objects of type " + this.sourceType.getName());
 		}

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectClasspathResources.java
Patch:
@@ -39,7 +39,8 @@
 public @interface SelectClasspathResources {
 
 	/**
-	 * An array of one or more {@link SelectClasspathResource SelectClasspathResources}.
+	 * An array of one or more {@link SelectClasspathResource @SelectClasspathResource}
+	 * declarations.
 	 */
 	SelectClasspathResource[] value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectDirectories.java
Patch:
@@ -21,8 +21,8 @@
 import org.apiguardian.api.API.Status;
 
 /**
- * {@code @SelectDirectories} specifies the directories to
- * <em>select</em> when running a test suite on the JUnit Platform.
+ * {@code @SelectDirectories} specifies the directories to <em>select</em> when
+ * running a test suite on the JUnit Platform.
  *
  * @since 1.8
  * @see Suite

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectFiles.java
Patch:
@@ -39,7 +39,7 @@
 public @interface SelectFiles {
 
 	/**
-	 * An array of one or more {@link SelectFile SelectFiles}.
+	 * An array of one or more {@link SelectFile @SelectFile} declarations.
 	 */
 	SelectFile[] value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectModules.java
Patch:
@@ -22,8 +22,8 @@
 import org.apiguardian.api.API.Status;
 
 /**
- * {@code @SelectModules} specifies the modules to
- * <em>select</em> when running a test suite on the JUnit Platform.
+ * {@code @SelectModules} specifies the modules to <em>select</em> when running
+ * a test suite on the JUnit Platform.
  *
  * @since 1.8
  * @see Suite

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectUris.java
Patch:
@@ -21,8 +21,8 @@
 import org.apiguardian.api.API.Status;
 
 /**
- * {@code @SelectUris} specifies the uris to
- * <em>select</em> when running a test suite on the JUnit Platform.
+ * {@code @SelectUris} specifies the URIs to <em>select</em> when running a test
+ * suite on the JUnit Platform.
  *
  * @since 1.8
  * @see Suite
@@ -37,7 +37,7 @@
 public @interface SelectUris {
 
 	/**
-	 * One or more uris to select.
+	 * One or more URIs to select.
 	 */
 	String[] value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Suite.java
Patch:
@@ -22,7 +22,8 @@
 import org.junit.platform.commons.annotation.Testable;
 
 /**
- * {@code @Suite} marks class as a test suite on the JUnit Platform.
+ * {@code @Suite} marks a class as a test suite on the JUnit Platform.
+ *
  * <p>Selector and filter annotations are used to control the contents of the
  * suite. Additionally configuration can be passed to the suite via the
  * configuration annotations.

File: junit-platform-suite-commons/src/main/java/org/junit/platform/suite/commons/AdditionalDiscoverySelectors.java
Patch:
@@ -27,6 +27,9 @@
 import org.junit.platform.engine.discovery.PackageSelector;
 import org.junit.platform.engine.discovery.UriSelector;
 
+/**
+ * @since 1.8
+ */
 class AdditionalDiscoverySelectors {
 
 	static List<UriSelector> selectUris(String... uris) {

File: junit-platform-suite-commons/src/main/java/org/junit/platform/suite/commons/SuiteLauncherDiscoveryRequestBuilder.java
Patch:
@@ -53,6 +53,9 @@
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.SelectUris;
 
+/**
+ * @since 1.8
+ */
 @API(status = Status.INTERNAL, since = "1.8", consumers = { "org.junit.platform.suite.engine",
 		"org.junit.platform.runner" })
 public final class SuiteLauncherDiscoveryRequestBuilder {

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java
Patch:
@@ -24,6 +24,9 @@
 import org.junit.platform.engine.discovery.UniqueIdSelector;
 import org.junit.platform.engine.support.discovery.SelectorResolver;
 
+/**
+ * @since 1.8
+ */
 final class ClassSelectorResolver implements SelectorResolver {
 
 	private static final IsSuiteClass isSuiteClass = new IsSuiteClass();

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java
Patch:
@@ -14,6 +14,9 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolver;
 
+/**
+ * @since 1.8
+ */
 final class DiscoverySelectorResolver {
 
 	// @formatter:off

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/IsPotentialTestContainer.java
Patch:
@@ -16,6 +16,9 @@
 
 import java.util.function.Predicate;
 
+/**
+ * @since 1.8
+ */
 final class IsPotentialTestContainer implements Predicate<Class<?>> {
 
 	@Override

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/IsSuiteClass.java
Patch:
@@ -15,6 +15,9 @@
 import org.junit.platform.commons.support.AnnotationSupport;
 import org.junit.platform.suite.api.Suite;
 
+/**
+ * @since 1.8
+ */
 final class IsSuiteClass implements Predicate<Class<?>> {
 
 	private static final IsPotentialTestContainer isPotentialTestContainer = new IsPotentialTestContainer();

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteEngineDescriptor.java
Patch:
@@ -13,6 +13,9 @@
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 
+/**
+ * @since 1.8
+ */
 final class SuiteEngineDescriptor extends EngineDescriptor {
 
 	static final String ENGINE_ID = "junit-platform-suite";

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java
Patch:
@@ -26,6 +26,9 @@
 import org.junit.platform.launcher.core.LauncherDiscoveryResult;
 import org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry;
 
+/**
+ * @since 1.8
+ */
 class SuiteLauncher {
 
 	private final EngineExecutionOrchestrator executionOrchestrator = new EngineExecutionOrchestrator();

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.platform.suite.commons.SuiteLauncherDiscoveryRequestBuilder;
 
 /**
- * {@link TestDescriptor} for tests based on the JUnit Platform Launcher API.
+ * {@link TestDescriptor} for tests based on the JUnit Platform Suite API.
  *
  * <h3>Default Display Names</h3>
  *

File: junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java
Patch:
@@ -26,9 +26,9 @@
 /**
  * The JUnit Platform Suite {@link org.junit.platform.engine.TestEngine TestEngine}.
  *
- * @since 5.8
+ * @since 1.8
  */
-@API(status = INTERNAL, since = "5.8")
+@API(status = INTERNAL, since = "1.8")
 public final class SuiteTestEngine implements TestEngine {
 
 	@Override

File: platform-tests/src/test/java/org/junit/platform/suite/engine/SuiteTestDescriptorTests.java
Patch:
@@ -30,6 +30,9 @@
 import org.junit.platform.suite.engine.testsuites.CyclicSuite;
 import org.junit.platform.suite.engine.testsuites.SelectClassesSuite;
 
+/**
+ * @since 1.8
+ */
 class SuiteTestDescriptorTests {
 
 	UniqueId engineId = UniqueId.forEngine(SuiteEngineDescriptor.ENGINE_ID);

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/CyclicSuite.java
Patch:
@@ -14,9 +14,11 @@
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
 
+/**
+ * @since 1.8
+ */
 @Suite
 @IncludeClassNamePatterns(".*")
 @SelectClasses(CyclicSuite.class)
 public class CyclicSuite {
-
 }

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/DynamicSuite.java
Patch:
@@ -14,9 +14,11 @@
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.Suite;
 
+/**
+ * @since 1.8
+ */
 @Suite
 @IncludeClassNamePatterns(".*TestCase$")
 @SelectPackages("org.junit.platform.suite.engine.testcases")
 public class DynamicSuite {
-
 }

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java
Patch:
@@ -14,9 +14,11 @@
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.Suite;
 
+/**
+ * @since 1.8
+ */
 @Suite
 @IncludeClassNamePatterns(".*")
 @SelectClasses(SelectClassesSuite.class)
 public class SuiteSuite {
-
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/converter/TypedArgumentConverterTests.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @since 5.7
  */
-public class TypedArgumentConverterTest {
+class TypedArgumentConverterTests {
 
 	@Test
 	void convertsSourceToTarget() {

File: platform-tests/src/test/java/org/junit/platform/suite/commons/SuiteLauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -60,7 +60,7 @@
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.SelectUris;
 
-class SuiteLauncherDiscoveryRequestBuilderTest {
+class SuiteLauncherDiscoveryRequestBuilderTests {
 
 	SuiteLauncherDiscoveryRequestBuilder builder = SuiteLauncherDiscoveryRequestBuilder.request();
 

File: platform-tests/src/test/java/org/junit/platform/suite/engine/SuiteTestDescriptorTests.java
Patch:
@@ -26,16 +26,16 @@
 import org.junit.platform.commons.PreconditionViolationException;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.suite.engine.testcases.SimpleTest;
+import org.junit.platform.suite.engine.testcases.SingleTestTestCase;
 import org.junit.platform.suite.engine.testsuites.CyclicSuite;
 import org.junit.platform.suite.engine.testsuites.SelectClassesSuite;
 
-class SuiteTestDescriptorTest {
+class SuiteTestDescriptorTests {
 
 	UniqueId engineId = UniqueId.forEngine(SuiteEngineDescriptor.ENGINE_ID);
 	UniqueId suiteId = engineId.append(SuiteTestDescriptor.SEGMENT_TYPE, "test");
 	UniqueId jupiterEngineId = suiteId.append("engine", JupiterEngineDescriptor.ENGINE_ID);
-	UniqueId testClassId = jupiterEngineId.append(ClassTestDescriptor.SEGMENT_TYPE, SimpleTest.class.getName());
+	UniqueId testClassId = jupiterEngineId.append(ClassTestDescriptor.SEGMENT_TYPE, SingleTestTestCase.class.getName());
 	UniqueId methodId = testClassId.append(TestMethodTestDescriptor.SEGMENT_TYPE, "test()");
 
 	SuiteTestDescriptor suite = new SuiteTestDescriptor(suiteId, Object.class);

File: platform-tests/src/test/java/org/junit/platform/suite/engine/testsuites/DynamicSuite.java
Patch:
@@ -10,10 +10,12 @@
 
 package org.junit.platform.suite.engine.testsuites;
 
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.Suite;
 
 @Suite
+@IncludeClassNamePatterns(".*TestCase$")
 @SelectPackages("org.junit.platform.suite.engine.testcases")
 public class DynamicSuite {
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -468,7 +468,7 @@ private void registerAfterEachMethodAdapters(ExtensionRegistrar registrar) {
 	private void registerMethodsAsExtensions(List<Method> methods, ExtensionRegistrar registrar,
 			Function<Method, Extension> extensionSynthesizer) {
 
-		methods.forEach(method -> registrar.registerExtension(extensionSynthesizer.apply(method), method));
+		methods.forEach(method -> registrar.registerSyntheticExtension(extensionSynthesizer.apply(method), method));
 	}
 
 	private BeforeEachMethodAdapter synthesizeBeforeEachMethodAdapter(Method method) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/IndicativeSentencesNestedTestCase.java
Patch:
@@ -17,6 +17,7 @@
  * that is nested directly within a top-level test class.
  *
  * @see IndicativeSentencesTopLevelTestCase
+ * @since 5.8
  */
 class IndicativeSentencesNestedTestCase {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/IndicativeSentencesTopLevelTestCase.java
Patch:
@@ -17,6 +17,7 @@
  * test class that contains a nested test class.
  *
  * @see IndicativeSentencesNestedTestCase
+ * @since 5.8
  */
 @IndicativeSentencesGeneration(separator = " -> ", generator = ReplaceUnderscores.class)
 class IndicativeSentencesTopLevelTestCase {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/JupiterUniqueIdBuilder.java
Patch:
@@ -10,13 +10,14 @@
 
 package org.junit.jupiter.engine.discovery;
 
+import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;
+
 import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.descriptor.NestedClassTestDescriptor;
 import org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor;
 import org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor;
 import org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor;
-import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.UniqueId;
 
 /**
@@ -30,7 +31,7 @@ public class JupiterUniqueIdBuilder {
 
 	public static UniqueId uniqueIdForClass(Class<?> clazz) {
 		UniqueId containerId = engineId();
-		if (clazz.getEnclosingClass() != null && !ReflectionUtils.isStatic(clazz)) {
+		if (isInnerClass(clazz)) {
 			containerId = uniqueIdForClass(clazz.getEnclosingClass());
 			return containerId.append(NestedClassTestDescriptor.SEGMENT_TYPE, clazz.getSimpleName());
 		}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DisplayNameUtils.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.jupiter.api.DisplayNameGenerator.IndicativeSentences;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 
 import java.lang.reflect.AnnotatedElement;
@@ -21,6 +20,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.DisplayNameGeneration;
 import org.junit.jupiter.api.DisplayNameGenerator;
+import org.junit.jupiter.api.DisplayNameGenerator.IndicativeSentences;
 import org.junit.jupiter.api.DisplayNameGenerator.ReplaceUnderscores;
 import org.junit.jupiter.api.DisplayNameGenerator.Simple;
 import org.junit.jupiter.api.DisplayNameGenerator.Standard;
@@ -128,7 +128,7 @@ private static DisplayNameGenerator getDisplayNameGenerator(Class<?> testClass,
 
 	/**
 	 * Find the first {@code DisplayNameGeneration} annotation that is either
-	 * <em>directly present</em>, <em>meta-present</em>, <em>indirectly present</em>
+	 * <em>directly present</em>, <em>meta-present</em>, or <em>indirectly present</em>
 	 * on the supplied {@code testClass} or on an enclosing class.
 	 */
 	private static Optional<DisplayNameGeneration> getDisplayNameGeneration(Class<?> testClass) {
@@ -142,4 +142,5 @@ private static Optional<DisplayNameGeneration> getDisplayNameGeneration(Class<?>
 		} while (candidate != null);
 		return Optional.empty();
 	}
+
 }

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -115,8 +115,7 @@ else if (rejectedExclusions.containsAll(getDescription().getChildren())) {
 	private void logIncompleteFiltering() {
 		if (runner instanceof Filterable) {
 			logger.warn(() -> "Runner " + getRunnerToReport().getClass().getName() //
-					+ " (used on class " + getDescription().getTestClass().getName()
-					+ ") was not able to satisfy all filter requests.");
+					+ " (used on class " + getLegacyReportingName() + ") was not able to satisfy all filter requests.");
 		}
 		else {
 			warnAboutUnfilterableRunner();
@@ -125,7 +124,7 @@ private void logIncompleteFiltering() {
 
 	private void warnAboutUnfilterableRunner() {
 		logger.warn(() -> "Runner " + getRunnerToReport().getClass().getName() //
-				+ " (used on class " + getDescription().getTestClass().getName() + ") does not support filtering" //
+				+ " (used on class " + getLegacyReportingName() + ") does not support filtering" //
 				+ " and will therefore be run completely.");
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/ClassDescriptor.java
Patch:
@@ -35,7 +35,7 @@ public interface ClassDescriptor {
 	Class<?> getTestClass();
 
 	/**
-	 * Get the display name for this descriptor's {@link #getClass() class}.
+	 * Get the display name for this descriptor's {@link #getTestClass() class}.
 	 *
 	 * @return the display name for this descriptor's class; never {@code null}
 	 * or blank

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.platform.launcher.listeners;
 
 import static java.lang.String.join;
+import static java.util.Collections.synchronizedList;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -54,7 +55,7 @@ class MutableTestExecutionSummary implements TestExecutionSummary {
 	final AtomicLong testsFailed = new AtomicLong();
 
 	private final TestPlan testPlan;
-	private final List<Failure> failures = new ArrayList<>();
+	private final List<Failure> failures = synchronizedList(new ArrayList<>());
 	private final long timeStarted;
 	long timeFinished;
 

File: junit-platform-engine/src/testFixtures/java/org/junit/platform/engine/support/hierarchical/DemoEngineExecutionContext.java
Patch:
@@ -13,5 +13,5 @@
 /**
  * @since 1.0
  */
-class DemoEngineExecutionContext implements EngineExecutionContext {
+public class DemoEngineExecutionContext implements EngineExecutionContext {
 }

File: junit-platform-engine/src/testFixtures/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalTestDescriptor.java
Patch:
@@ -26,7 +26,7 @@ public class DemoHierarchicalTestDescriptor extends AbstractTestDescriptor imple
 	private String skippedReason;
 	private boolean skipped;
 
-	DemoHierarchicalTestDescriptor(UniqueId uniqueId, String displayName, Runnable executeBlock) {
+	public DemoHierarchicalTestDescriptor(UniqueId uniqueId, String displayName, Runnable executeBlock) {
 		this(uniqueId, displayName, null, executeBlock);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -36,6 +36,7 @@ public class DiscoverySelectorResolver {
 			.addClassContainerSelectorResolver(new IsTestClassWithTests())
 			.addSelectorResolver(context -> new ClassSelectorResolver(context.getClassNameFilter(), context.getEngineDescriptor().getConfiguration()))
 			.addSelectorResolver(context -> new MethodSelectorResolver(context.getEngineDescriptor().getConfiguration()))
+			.addTestDescriptorVisitor(context -> new ClassOrderingVisitor(context.getEngineDescriptor().getConfiguration()))
 			.addTestDescriptorVisitor(context -> new MethodOrderingVisitor(context.getEngineDescriptor().getConfiguration()))
 			.addTestDescriptorVisitor(context -> TestDescriptor::prune)
 			.build();

File: platform-tests/src/test/resources/modules-2500/foo.bar/FooBar.java
Patch:
@@ -0,0 +1,3 @@
+package foo.bar;
+
+public class FooBar {}

File: platform-tests/src/test/resources/modules-2500/foo.bar/module-info.java
Patch:
@@ -0,0 +1,3 @@
+open module foo.bar {
+  requires foo;
+}

File: platform-tests/src/test/resources/modules-2500/foo/Foo.java
Patch:
@@ -0,0 +1,3 @@
+package foo;
+
+public class Foo {}

File: platform-tests/src/test/resources/modules-2500/foo/module-info.java
Patch:
@@ -0,0 +1,3 @@
+module foo {
+  exports foo;
+}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JavacModulesTests.java
Patch:
@@ -100,6 +100,7 @@ private static List<String> compileModules(Path temp, Writer out, Writer err, Fu
 		try (var walk = Files.walk(base)) {
 			var projects = walk.filter(path -> path.endsWith("module-info.java")) //
 					.map(base::relativize) //
+					.filter(path -> !path.startsWith("platform-tests")) //
 					.filter(path -> !path.startsWith("platform-tooling-support-tests")) //
 					.map(base::resolve) //
 					.map(Project::new) //

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClassNamePatternFilterUtilsTests.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Unit tests for {@link ClassNamePatternFilterUtils}.
  *
- * @since 5.7
+ * @since 1.7
  */
 @TestInstance(Lifecycle.PER_CLASS)
 class ClassNamePatternFilterUtilsTests {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNamePatternFilterUtils.java
Patch:
@@ -31,9 +31,9 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.7
+ * @since 1.7
  */
-@API(status = INTERNAL, since = "5.7")
+@API(status = INTERNAL, since = "1.7")
 public class ClassNamePatternFilterUtils {
 
 	private ClassNamePatternFilterUtils() {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryListener.java
Patch:
@@ -35,6 +35,7 @@
  *
  * @see org.junit.platform.launcher.listeners.discovery.LauncherDiscoveryListeners
  * @see LauncherDiscoveryRequest#getDiscoveryListener()
+ * @see org.junit.platform.launcher.core.LauncherConfig.Builder#addLauncherDiscoveryListeners
  * @since 1.6
  */
 @API(status = EXPERIMENTAL, since = "1.6")

File: junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java
Patch:
@@ -32,6 +32,7 @@
 
 	uses org.junit.platform.engine.TestEngine;
 	uses org.junit.platform.launcher.LauncherDiscoveryListener;
+	uses org.junit.platform.launcher.LauncherSessionListener;
 	uses org.junit.platform.launcher.PostDiscoveryFilter;
 	uses org.junit.platform.launcher.TestExecutionListener;
 }

File: documentation/src/test/java/example/testkit/EngineTestKitAllEventsDemo.java
Patch:
@@ -41,7 +41,7 @@ class EngineTestKitAllEventsDemo {
 	void verifyAllJupiterEvents() {
 		Writer writer = // create a java.io.Writer for debug output
 		// end::user_guide[]
-				// For the demo, we are simply swallowing the debug output.
+				// For the demo, we are swallowing the debug output.
 				new StringWriter();
 		// tag::user_guide[]
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertLinesMatch.java
Patch:
@@ -127,7 +127,7 @@ void assertLinesMatchWithFastForward() {
 				}
 
 				String actualLine = actualDeque.peek();
-				// trivial case: take the fast path when they simply match
+				// trivial case: take the fast path when they match
 				if (matches(expectedLine, actualLine)) {
 					actualDeque.pop();
 					continue; // main

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -3002,7 +3002,7 @@ public static void assertAll(String heading, Stream<Executable> executables) thr
 	 * thrown, this method will fail.
 	 *
 	 * <p>If you do not want to perform additional checks on the exception instance,
-	 * simply ignore the return value.
+	 * ignore the return value.
 	 */
 	public static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable executable) {
 		return AssertThrows.assertThrows(expectedType, executable);
@@ -3016,7 +3016,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Execut
 	 * thrown, this method will fail.
 	 *
 	 * <p>If you do not want to perform additional checks on the exception instance,
-	 * simply ignore the return value.
+	 * ignore the return value.
 	 *
 	 * <p>Fails with the supplied failure {@code message}.
 	 */
@@ -3035,7 +3035,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Execut
 	 * supplied {@code messageSupplier}.
 	 *
 	 * <p>If you do not want to perform additional checks on the exception instance,
-	 * simply ignore the return value.
+	 * ignore the return value.
 	 */
 	public static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable executable,
 			Supplier<String> messageSupplier) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariableCondition.java
Patch:
@@ -64,7 +64,7 @@ protected ConditionEvaluationResult evaluate(DisabledIfEnvironmentVariable annot
 	/**
 	 * Get the value of the named environment variable.
 	 *
-	 * <p>The default implementation simply delegates to
+	 * <p>The default implementation delegates to
 	 * {@link System#getenv(String)}. Can be overridden in a subclass for
 	 * testing purposes.
 	 */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableCondition.java
Patch:
@@ -63,7 +63,7 @@ protected ConditionEvaluationResult evaluate(EnabledIfEnvironmentVariable annota
 	/**
 	 * Get the value of the named environment variable.
 	 *
-	 * <p>The default implementation simply delegates to
+	 * <p>The default implementation delegates to
 	 * {@link System#getenv(String)}. Can be overridden in a subclass for
 	 * testing purposes.
 	 */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/InvocationInterceptor.java
Patch:
@@ -36,7 +36,7 @@
  * Invocation#skip()} exactly once on the supplied invocation. Otherwise, the
  * enclosing test or container will be reported as failed.
  *
- * <p>The default implementation simply calls {@link Invocation#proceed()
+ * <p>The default implementation calls {@link Invocation#proceed()
  * proceed()} on the supplied {@linkplain Invocation invocation}.
  *
  * <h3>Constructor Requirements</h3>

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstanceFactoryTests.java
Patch:
@@ -642,7 +642,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte
 	}
 
 	/**
-	 * This does not actually create a proxy. Rather, it simply simulates what
+	 * This does not actually create a proxy. Rather, it simulates what
 	 * a proxy-based implementation might do, by loading the class from a
 	 * different {@link ClassLoader}.
 	 */

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -177,8 +177,8 @@ public static <A extends Annotation> List<A> findRepeatableAnnotations(Optional<
 	 * discovered within the class hierarchy, this method will additionally
 	 * search on interfaces implemented by each class in the hierarchy.
 	 *
-	 * <p>If the supplied {@code element} is {@code null}, this method simply
-	 * returns an empty list.
+	 * <p>If the supplied {@code element} is {@code null}, this method returns
+	 * an empty list.
 	 *
 	 * <p>As of JUnit Platform 1.5, the search algorithm will also find
 	 * repeatable annotations used as meta-annotations on other repeatable

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -60,7 +60,7 @@ public interface TestDescriptor {
 	 * reporting infrastructure &mdash; for example, for reporting systems built
 	 * on the Ant-based XML reporting format for JUnit 4.
 	 *
-	 * <p>The default implementation simply delegates to {@link #getDisplayName()}.
+	 * <p>The default implementation delegates to {@link #getDisplayName()}.
 	 *
 	 * @return the legacy reporting name; never {@code null} or blank
 	 */

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -91,7 +91,7 @@ public interface TestEngine {
 	 *
 	 * <p>This information is used solely for debugging and reporting purposes.
 	 *
-	 * <p>The default implementation simply returns an empty {@link Optional},
+	 * <p>The default implementation returns an empty {@link Optional},
 	 * signaling that the group ID is unknown.
 	 *
 	 * <p>Concrete test engine implementations may override this method in
@@ -121,7 +121,7 @@ default Optional<String> getGroupId() {
 	 * {@link Package} instance with the attributes from the manifest.
 	 *
 	 * <p>If the implementation title cannot be queried from the package
-	 * attributes, the default implementation simply returns an empty
+	 * attributes, the default implementation returns an empty
 	 * {@link Optional}.
 	 *
 	 * <p>Concrete test engine implementations may override this method in

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -32,7 +32,7 @@
  * <p>If a Java {@link Method} is provided, the selector will return that
  * {@linkplain #getJavaMethod() method} and its method name, class name, and
  * parameter types accordingly. If a {@link Class} and method name, a class name
- * and method name, or simply a <em>fully qualified method name</em> is provided,
+ * and method name, or a <em>fully qualified method name</em> is provided,
  * this selector will only attempt to lazily load the {@link Class} and
  * {@link Method} if {@link #getJavaClass()} or {@link #getJavaMethod()} is
  * invoked.

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -181,7 +181,7 @@ public String getDisplayName() {
 	 * reporting infrastructure &mdash; for example, for reporting systems built
 	 * on the Ant-based XML reporting format for JUnit 4.
 	 *
-	 * <p>The default implementation simply delegates to {@link #getDisplayName()}.
+	 * <p>The default implementation delegates to {@link #getDisplayName()}.
 	 *
 	 * @return the legacy reporting name; never {@code null} or blank
 	 * @see org.junit.platform.engine.TestDescriptor#getLegacyReportingName()

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Resources.java
Patch:
@@ -72,7 +72,7 @@ public class Resources {
 	 *
 	 * @since 5.8
 	 * @see Isolated
-	 * @see ExclusiveResource
+	 * @see org.junit.platform.engine.support.hierarchical.ExclusiveResource
 	 */
 	@API(status = EXPERIMENTAL, since = "5.8")
 	public static final String GLOBAL = "org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY";

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java
Patch:
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 @Inherited
-@ResourceLock("org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY")
+@ResourceLock(Resources.GLOBAL)
 public @interface Isolated {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java
Patch:
@@ -32,7 +32,8 @@ public class ExclusiveResource {
 
 	/**
 	 * Key of the global resource lock that all direct children of the engine
-	 * descriptor acquire in {@linkplain LockMode#READ read mode} by default.
+	 * descriptor acquire in {@linkplain LockMode#READ read mode} by default:
+	 * {@value}
 	 *
 	 * <p>If any node {@linkplain Node#getExclusiveResources() requires} an
 	 * exclusive resource with the same key in

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryListener.java
Patch:
@@ -46,6 +46,9 @@ public abstract class LauncherDiscoveryListener implements EngineDiscoveryListen
 	public static final LauncherDiscoveryListener NOOP = new LauncherDiscoveryListener() {
 	};
 
+	public LauncherDiscoveryListener() {
+	}
+
 	/**
 	 * Called when test discovery is about to be started for an engine.
 	 *

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -274,7 +274,8 @@ private LauncherDiscoveryListener getLauncherDiscoveryListener(ConfigurationPara
 		if (discoveryListeners.contains(defaultDiscoveryListener)) {
 			return LauncherDiscoveryListeners.composite(discoveryListeners);
 		}
-		List<LauncherDiscoveryListener> allDiscoveryListeners = new ArrayList<>(discoveryListeners);
+		List<LauncherDiscoveryListener> allDiscoveryListeners = new ArrayList<>(discoveryListeners.size() + 1);
+		allDiscoveryListeners.addAll(discoveryListeners);
 		allDiscoveryListeners.add(defaultDiscoveryListener);
 		return LauncherDiscoveryListeners.composite(allDiscoveryListeners);
 	}

File: junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java
Patch:
@@ -15,6 +15,7 @@
  *
  * @since 1.0
  * @uses org.junit.platform.engine.TestEngine
+ * @uses org.junit.platform.launcher.LauncherDiscoveryListener
  * @uses org.junit.platform.launcher.PostDiscoveryFilter
  * @uses org.junit.platform.launcher.TestExecutionListener
  */
@@ -30,6 +31,7 @@
 	exports org.junit.platform.launcher.listeners.discovery;
 
 	uses org.junit.platform.engine.TestEngine;
+	uses org.junit.platform.launcher.LauncherDiscoveryListener;
 	uses org.junit.platform.launcher.PostDiscoveryFilter;
 	uses org.junit.platform.launcher.TestExecutionListener;
 }

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EngineTestKit.java
Patch:
@@ -265,7 +265,7 @@ private static void executeDirectly(TestEngine testEngine, EngineDiscoveryReques
 	private static void executeUsingLauncherOrchestration(TestEngine testEngine,
 			LauncherDiscoveryRequest discoveryRequest, EngineExecutionListener listener) {
 		TestDescriptor engineTestDescriptor;
-		LauncherDiscoveryResult discoveryResult = new EngineDiscoveryOrchestrator(singleton(testEngine),
+		LauncherDiscoveryResult discoveryResult = new EngineDiscoveryOrchestrator(singleton(testEngine), emptySet(),
 			emptySet()).discover(discoveryRequest, "testing");
 		engineTestDescriptor = discoveryResult.getEngineTestDescriptor(testEngine);
 		Preconditions.notNull(engineTestDescriptor, "TestEngine did not yield a TestDescriptor");

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java
Patch:
@@ -100,7 +100,7 @@ public Predicate<ExecutionCondition> getExecutionConditionFilter() {
 	@Override
 	public DisplayNameGenerator getDefaultDisplayNameGenerator() {
 		return displayNameGeneratorConverter.get(configurationParameters, DEFAULT_DISPLAY_NAME_GENERATOR_PROPERTY_NAME) //
-				.orElseGet(DisplayNameGenerator.Standard::new);
+				.orElseGet(() -> DisplayNameGenerator.getDisplayNameGenerator(DisplayNameGenerator.Standard.class));
 	}
 
 	@Override

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -29,6 +29,9 @@
 @API(status = MAINTAINED, since = "1.0")
 public abstract class HierarchicalTestEngine<C extends EngineExecutionContext> implements TestEngine {
 
+	public HierarchicalTestEngine() {
+	}
+
 	/**
 	 * Create an {@linkplain #createExecutorService(ExecutionRequest) executor
 	 * service}; create an initial {@linkplain #createExecutionContext execution

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SameThreadHierarchicalTestExecutorService.java
Patch:
@@ -27,6 +27,9 @@
 @API(status = EXPERIMENTAL, since = "1.3")
 public class SameThreadHierarchicalTestExecutorService implements HierarchicalTestExecutorService {
 
+	public SameThreadHierarchicalTestExecutorService() {
+	}
+
 	@Override
 	public Future<Void> submit(TestTask testTask) {
 		testTask.execute();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/extension/ExtensionComposabilityTests.java
Patch:
@@ -67,12 +67,13 @@ void ensureJupiterExtensionApisAreComposable() {
 
 		// 3) Dynamically implement all Extension APIs
 		Object dynamicKitchenSinkExtension = Proxy.newProxyInstance(getClass().getClassLoader(),
-			extensionApis.toArray(new Class<?>[extensionApis.size()]), (proxy, method, args) -> null);
+			extensionApis.toArray(Class[]::new), (proxy, method, args) -> null);
 
 		// 4) Determine what ended up in the kitchen sink...
 
 		// @formatter:off
 		List<Method> actualMethods = Arrays.stream(dynamicKitchenSinkExtension.getClass().getDeclaredMethods())
+				.filter(ReflectionUtils::isNotStatic)
 				.collect(toList());
 
 		List<String> actualMethodSignatures = actualMethods.stream()

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/InvocationInterceptor.java
Patch:
@@ -119,7 +119,9 @@ default void interceptTestMethod(Invocation<Void> invocation, ReflectiveInvocati
 	}
 
 	/**
-	 * Intercept the invocation of a {@link TestFactory @TestFactory} method.
+	 * Intercept the invocation of a {@link TestFactory @TestFactory} method,
+	 * such as a {@link org.junit.jupiter.api.RepeatedTest @RepeatedTest} or
+	 * {@code @ParameterizedTest} method.
 	 *
 	 * @param invocation the invocation that is being intercepted; never
 	 * {@code null}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JarDescribeModuleTests.java
Patch:
@@ -25,8 +25,6 @@
 
 import de.sormuras.bartholdy.jdk.Jar;
 
-import org.junit.jupiter.api.condition.DisabledOnJre;
-import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -40,7 +38,6 @@ class JarDescribeModuleTests {
 
 	@ParameterizedTest
 	@MethodSource("platform.tooling.support.Helper#loadModuleDirectoryNames")
-	@DisabledOnJre(JRE.JAVA_16)
 	void describeModule(String module) throws Exception {
 		var modulePath = createJarPath(module);
 		var result = Request.builder() //

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSourceTests.java
Patch:
@@ -77,7 +77,7 @@ void resourceWithPosition() {
 	}
 
 	@Test
-	void resourcefromUriWithoutPosition() {
+	void resourceFromUriWithoutPosition() {
 		var source = ClasspathResourceSource.from(FOO_RESOURCE_URI);
 
 		assertThat(source).isNotNull();

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -273,7 +273,7 @@ public void execute(ExecutionRequest request) {
 	}
 
 	@Test
-	void reportsEngineExecutionFailuresForSucessfullyFinishedEngine() {
+	void reportsEngineExecutionFailuresForSuccessfullyFinishedEngine() {
 		var rootCause = new RuntimeException("something went horribly wrong");
 		var engine = new TestEngineStub() {
 			@Override

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/MethodSourceTests.java
Patch:
@@ -151,7 +151,7 @@ void twoEqualMethodsWithEqualParametersShouldHaveEqualMethodSourceHashCodes() {
 	@Test
 	void twoEqualMethodsWithUnequalParametersShouldHaveUnequalMethodSourceHashCodes() {
 		assertNotEquals(MethodSource.from("TestClass1", "testMethod1", "int, String").hashCode(),
-			MethodSource.from("TestClass1", "testMethod1", "float, int, String"));
+			MethodSource.from("TestClass1", "testMethod1", "float, int, String").hashCode());
 	}
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/engine/UniqueIdTests.java
Patch:
@@ -153,7 +153,7 @@ void ensureDefaultUniqueIdFormatDecodingEncodesSegmentParts() {
 		@Test
 		void ensureDefaultUniqueIdFormatCanHandleAllCharacters() {
 			for (char c = 0; c < Character.MAX_VALUE; c++) {
-				String value = "foo " + String.valueOf(c) + " bar";
+				String value = "foo " + c + " bar";
 				UniqueId uniqueId = UniqueId.parse(UniqueId.root("type", value).toString());
 				Segment segment = uniqueId.getSegments().get(0);
 				assertEquals(value, segment.getValue());

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/VintageMavenIntegrationTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import de.sormuras.bartholdy.Result;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
@@ -27,7 +26,6 @@
 import platform.tooling.support.Helper;
 import platform.tooling.support.Request;
 
-@Disabled("needs to consume maven.repo system property instead of downloading from Sonatype snapshot repo or Maven local repo")
 class VintageMavenIntegrationTests {
 
 	@Test

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -103,7 +103,7 @@ private Object[] makeReadable(MessageFormat format, Object[] arguments) {
 	}
 
 	private String truncateIfExceedsMaxLength(String argument) {
-		if (argument.length() > argumentMaxLength) {
+		if (argument != null && argument.length() > argumentMaxLength) {
 			return argument.substring(0, argumentMaxLength - 1) + ELLIPSIS;
 		}
 		return argument;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Execution.java
Patch:
@@ -27,6 +27,7 @@
  * <p>Since JUnit Jupiter 5.4, this annotation is {@linkplain Inherited inherited}
  * within class hierarchies.
  *
+ * @see Isolated
  * @see ResourceLock
  * @since 5.3
  */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/ResourceLock.java
Patch:
@@ -40,6 +40,7 @@
  * <p>Since JUnit Jupiter 5.4, this annotation is {@linkplain Inherited inherited}
  * within class hierarchies.
  *
+ * @see Isolated
  * @see Resources
  * @see ResourceAccessMode
  * @see ResourceLocks

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineExecutionOrchestrator.java
Patch:
@@ -45,6 +45,7 @@ public EngineExecutionOrchestrator() {
 	}
 
 	void execute(InternalTestPlan internalTestPlan, TestExecutionListener... listeners) {
+		internalTestPlan.markStarted();
 		LauncherDiscoveryResult discoveryResult = internalTestPlan.getDiscoveryResult();
 		ConfigurationParameters configurationParameters = discoveryResult.getConfigurationParameters();
 		TestExecutionListenerRegistry listenerRegistry = buildListenerRegistryForExecution(listeners);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -31,7 +31,7 @@ public final Object convert(Object source, ParameterContext context) throws Argu
 	}
 
 	/**
-	 * Convert the supplied {@code source} object into to the supplied
+	 * Convert the supplied {@code source} object into the supplied
 	 * {@code targetType}.
 	 *
 	 * @param source the source object to convert; may be {@code null}

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EngineTestKit.java
Patch:
@@ -180,10 +180,10 @@ public static EngineExecutionResults execute(String engineId, EngineDiscoveryReq
 	 * @return the results of the execution
 	 * @throws PreconditionViolationException for invalid arguments or if the
 	 * {@code TestEngine} with the supplied ID cannot be loaded
+	 * @since 1.7
 	 * @see #execute(TestEngine, LauncherDiscoveryRequest)
 	 * @see #engine(String)
 	 * @see #engine(TestEngine)
-	 * @since 1.7
 	 */
 	public static EngineExecutionResults execute(String engineId, LauncherDiscoveryRequest discoveryRequest) {
 		Preconditions.notBlank(engineId, "TestEngine ID must not be null or blank");
@@ -239,10 +239,10 @@ public static EngineExecutionResults execute(TestEngine testEngine, EngineDiscov
 	 * not be {@code null}
 	 * @return the recorded {@code EngineExecutionResults}
 	 * @throws PreconditionViolationException for invalid arguments
+	 * @since 1.7
 	 * @see #execute(String, LauncherDiscoveryRequest)
 	 * @see #engine(String)
 	 * @see #engine(TestEngine)
-	 * @since 1.7
 	 */
 	public static EngineExecutionResults execute(TestEngine testEngine, LauncherDiscoveryRequest discoveryRequest) {
 		Preconditions.notNull(testEngine, "TestEngine must not be null");
@@ -391,11 +391,11 @@ public Builder filters(DiscoveryFilter<?>... filters) {
 		 *
 		 * @param filters the filters to add; never {@code null}
 		 * @return this builder for method chaining
+		 * @since 1.7
 		 * @see #selectors(DiscoverySelector...)
 		 * @see #configurationParameter(String, String)
 		 * @see #configurationParameters(Map)
 		 * @see #execute()
-		 * @since 1.7
 		 */
 		@API(status = EXPERIMENTAL, since = "1.7")
 		public Builder filters(Filter<?>... filters) {

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Event.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 
 import java.time.Instant;
@@ -31,7 +31,7 @@
  * @since 1.4
  * @see EventType
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public class Event {
 
 	// --- Factories -----------------------------------------------------------

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventStatistics.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 import static org.junit.platform.testkit.engine.Assertions.assertEquals;
 
 import java.util.ArrayList;
@@ -33,7 +33,7 @@
  * @see Event
  * @see Events
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public class EventStatistics {
 
 	private final List<Executable> executables = new ArrayList<>();

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventType.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import org.apiguardian.api.API;
 import org.junit.platform.engine.TestDescriptor;
@@ -23,7 +23,7 @@
  * @since 1.4
  * @see Event
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public enum EventType {
 
 	/**

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Events.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.sort;
 import static java.util.function.Predicate.isEqual;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 import static org.junit.platform.testkit.engine.Event.byPayload;
 import static org.junit.platform.testkit.engine.Event.byType;
@@ -49,7 +49,7 @@
  *
  * @since 1.4
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public final class Events {
 
 	private final List<Event> events;

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Execution.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.time.Duration;
 import java.time.Instant;
@@ -27,7 +27,7 @@
  *
  * @since 1.4
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public class Execution {
 
 	// --- Factories -----------------------------------------------------------

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Executions.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.testkit.engine;
 
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.io.OutputStream;
 import java.io.PrintWriter;
@@ -39,7 +39,7 @@
  *
  * @since 1.4
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public final class Executions {
 
 	private final List<Execution> executions;

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/TerminationInfo.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
@@ -25,7 +25,7 @@
  * @since 1.4
  * @see Execution#getTerminationInfo()
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public class TerminationInfo {
 
 	// --- Factories -----------------------------------------------------------

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/TestExecutionResultConditions.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.function.Predicate.isEqual;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 
 import java.util.Arrays;
@@ -32,7 +32,7 @@
  * @since 1.4
  * @see EventConditions
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = MAINTAINED, since = "1.7")
 public final class TestExecutionResultConditions {
 
 	private TestExecutionResultConditions() {

File: junit-platform-reporting/src/main/java/org/junit/platform/reporting/legacy/xml/LegacyXmlReportGeneratingListener.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.reporting.legacy.xml;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -43,7 +43,7 @@
  * @see org.junit.platform.launcher.listeners.LoggingListener
  * @see org.junit.platform.launcher.listeners.SummaryGeneratingListener
  */
-@API(status = EXPERIMENTAL, since = "1.4")
+@API(status = STABLE, since = "1.7")
 public class LegacyXmlReportGeneratingListener implements TestExecutionListener {
 
 	private final Path reportsDir;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherConstants.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ClassNamePatternFilterUtils;
@@ -22,7 +22,7 @@
  * @see org.junit.platform.engine.ConfigurationParameters
  * @since 1.3
  */
-@API(status = EXPERIMENTAL, since = "1.3")
+@API(status = STABLE, since = "1.7")
 public class LauncherConstants {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherConfig.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.platform.launcher.core;
 
 import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -47,7 +48,7 @@
  * @see LauncherFactory
  * @since 1.3
  */
-@API(status = EXPERIMENTAL, since = "1.3")
+@API(status = STABLE, since = "1.7")
 public interface LauncherConfig {
 
 	/**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/EnableJUnit4MigrationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -50,7 +50,7 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 @EnableRuleMigrationSupport
 @ExtendWith(IgnoreCondition.class)
 public @interface EnableJUnit4MigrationSupport {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/conditions/IgnoreCondition.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.conditions;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 
 import java.lang.reflect.AnnotatedElement;
@@ -33,7 +33,7 @@
  * @see #evaluateExecutionCondition(ExtensionContext)
  * @see org.junit.jupiter.migrationsupport.EnableJUnit4MigrationSupport
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public class IgnoreCondition implements ExecutionCondition {
 
 	private static final ConditionEvaluationResult ENABLED = //

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -39,7 +39,7 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 @ExtendWith(ExternalResourceSupport.class)
 @ExtendWith(VerifierSupport.class)
 @ExtendWith(ExpectedExceptionSupport.class)

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.lang.Boolean.FALSE;
 import static java.lang.Boolean.TRUE;
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
@@ -39,7 +39,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public class ExpectedExceptionSupport implements AfterEachCallback, TestExecutionExceptionHandler {
 
 	private static final String EXCEPTION_WAS_HANDLED = "exceptionWasHandled";

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
@@ -38,7 +38,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCallback {
 
 	private final TestRuleSupport support = new TestRuleSupport(ExternalResourceAdapter::new, ExternalResource.class);

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
@@ -37,7 +37,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public class VerifierSupport implements AfterEachCallback {
 
 	private final TestRuleSupport support = new TestRuleSupport(VerifierAdapter::new, Verifier.class);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestWatcher.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 
@@ -45,7 +45,7 @@
  *
  * @since 5.4
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface TestWatcher extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.AnnotatedElement;
@@ -196,7 +195,7 @@ default Object getRequiredTestInstance() {
 	 *
 	 * @since 5.4
 	 */
-	@API(status = EXPERIMENTAL, since = "5.4")
+	@API(status = STABLE, since = "5.7")
 	Optional<TestInstances> getTestInstances();
 
 	/**
@@ -212,7 +211,7 @@ default Object getRequiredTestInstance() {
 	 *
 	 * @since 5.4
 	 */
-	@API(status = EXPERIMENTAL, since = "5.4")
+	@API(status = STABLE, since = "5.7")
 	default TestInstances getRequiredTestInstances() {
 		return Preconditions.notNull(getTestInstances().orElse(null),
 			"Illegal state: required test instances are not present in the current ExtensionContext");

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstances.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 import java.util.Optional;
@@ -27,7 +27,7 @@
  * @see ExtensionContext#getTestInstances()
  * @see ExtensionContext#getRequiredTestInstances()
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface TestInstances {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePreDestroyCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 
@@ -44,7 +44,7 @@
  * @see ParameterResolver
  */
 @FunctionalInterface
-@API(status = EXPERIMENTAL, since = "5.6")
+@API(status = STABLE, since = "5.7")
 public interface TestInstancePreDestroyCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstanceFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 
@@ -50,7 +50,7 @@
  * @see ParameterResolver
  */
 @FunctionalInterface
-@API(status = EXPERIMENTAL, since = "5.3")
+@API(status = STABLE, since = "5.7")
 public interface TestInstanceFactory extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstanceFactoryContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 
@@ -24,7 +24,7 @@
  * @since 5.3
  * @see TestInstanceFactory
  */
-@API(status = EXPERIMENTAL, since = "5.3")
+@API(status = STABLE, since = "5.7")
 public interface TestInstanceFactoryContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Timeout.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -90,7 +90,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@API(status = EXPERIMENTAL, since = "5.5")
+@API(status = STABLE, since = "5.7")
 public @interface Timeout {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayNameGeneration.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -33,7 +33,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public @interface DisplayNameGeneration {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayNameGenerator.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.api;
 
 import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;
 
 import java.lang.reflect.Method;
@@ -34,7 +35,7 @@
  * @see DisplayName @DisplayName
  * @see DisplayNameGeneration @DisplayNameGeneration
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface DisplayNameGenerator {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodDescriptor.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.api;
 
 import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -25,7 +26,7 @@
  * @since 5.4
  * @see MethodOrdererContext
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface MethodDescriptor {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -13,6 +13,7 @@
 import static java.util.Comparator.comparingInt;
 import static org.apiguardian.api.API.Status.DEPRECATED;
 import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 import java.util.Collections;
@@ -49,7 +50,7 @@
  * @see MethodOrdererContext
  * @see #orderMethods(MethodOrdererContext)
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface MethodOrderer {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrdererContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 import java.util.Optional;
@@ -25,7 +25,7 @@
  * @see MethodOrderer
  * @see MethodDescriptor
  */
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public interface MethodOrdererContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -65,7 +65,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 public @interface TestMethodOrder {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/AggregateWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.aggregator;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -40,7 +40,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })
 @Documented
-@API(status = EXPERIMENTAL, since = "5.2")
+@API(status = STABLE, since = "5.7")
 public @interface AggregateWith {
 
 	Class<? extends ArgumentsAggregator> value();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentAccessException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.aggregator;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
@@ -23,7 +23,7 @@
  * @since 5.2
  * @see ArgumentsAccessor
  */
-@API(status = EXPERIMENTAL, since = "5.2")
+@API(status = STABLE, since = "5.7")
 public class ArgumentAccessException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentsAccessor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.aggregator;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
@@ -42,7 +42,7 @@
  * @see ArgumentsAggregator
  * @see org.junit.jupiter.params.ParameterizedTest
  */
-@API(status = EXPERIMENTAL, since = "5.2")
+@API(status = STABLE, since = "5.7")
 public interface ArgumentsAccessor {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentsAggregationException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.aggregator;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
@@ -23,7 +23,7 @@
  * @since 5.2
  * @see ArgumentsAggregator
  */
-@API(status = EXPERIMENTAL, since = "5.2")
+@API(status = STABLE, since = "5.7")
 public class ArgumentsAggregationException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentsAggregator.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.aggregator;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ParameterContext;
@@ -43,7 +43,7 @@
  * @see ArgumentsAccessor
  * @see org.junit.jupiter.params.ParameterizedTest
  */
-@API(status = EXPERIMENTAL, since = "5.2")
+@API(status = STABLE, since = "5.7")
 public interface ArgumentsAggregator {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
@@ -23,7 +23,7 @@
  * @since 5.0
  * @see ArgumentConverter
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public class ArgumentConversionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ParameterContext;
@@ -39,7 +39,7 @@
  * @see org.junit.jupiter.params.converter.ConvertWith
  * @see org.junit.jupiter.params.support.AnnotationConsumer
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public interface ArgumentConverter {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -35,7 +35,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public @interface ConvertWith {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -33,7 +33,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 @ConvertWith(JavaTimeArgumentConverter.class)
 public @interface JavaTimeConversionPattern {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ParameterContext;
@@ -22,7 +22,7 @@
  * @since 5.0
  * @see ArgumentConverter
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public abstract class SimpleArgumentConverter implements ArgumentConverter {
 
 	@Override

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
@@ -48,7 +48,7 @@
  * @see org.junit.jupiter.params.provider.ArgumentsProvider
  * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public interface Arguments {
 
 	/**
@@ -89,7 +89,6 @@ static Arguments of(Object... arguments) {
 	 * @return an instance of {@code Arguments}; never {@code null}
 	 * @since 5.3
 	 */
-	@API(status = EXPERIMENTAL, since = "5.3")
 	static Arguments arguments(Object... arguments) {
 		return of(arguments);
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.stream.Stream;
 
@@ -33,7 +33,7 @@
  * @see org.junit.jupiter.params.provider.Arguments
  * @see org.junit.jupiter.params.support.AnnotationConsumer
  */
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public interface ArgumentsProvider {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Repeatable(ArgumentsSources.class)
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public @interface ArgumentsSource {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public @interface ArgumentsSources {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParsingException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
@@ -22,7 +22,7 @@
  * @see CsvSource
  * @see CsvFileSource
  */
-@API(status = EXPERIMENTAL, since = "5.3")
+@API(status = STABLE, since = "5.7")
 public class CsvParsingException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EmptySource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -47,7 +47,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 @ArgumentsSource(EmptyArgumentsProvider.class)
 public @interface EmptySource {
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.params.provider;
 
 import static java.util.stream.Collectors.toSet;
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -48,7 +48,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 @ArgumentsSource(EnumArgumentsProvider.class)
 public @interface EnumSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -99,7 +99,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 @ArgumentsSource(MethodArgumentsProvider.class)
 public @interface MethodSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/NullAndEmptySource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 @NullSource
 @EmptySource
 public @interface NullAndEmptySource {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/NullEnum.java
Patch:
@@ -10,6 +10,8 @@
 
 package org.junit.jupiter.params.provider;
 
+import static org.apiguardian.api.API.Status.INTERNAL;
+
 import org.apiguardian.api.API;
 
 /**
@@ -19,6 +21,6 @@
  * @since 5.6
  * @see EnumSource#value()
  */
-@API(status = API.Status.EXPERIMENTAL, since = "5.6")
+@API(status = INTERNAL, since = "5.7")
 public enum NullEnum {
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/NullSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -36,7 +36,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.4")
+@API(status = STABLE, since = "5.7")
 @ArgumentsSource(NullArgumentsProvider.class)
 public @interface NullSource {
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -40,7 +40,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 @ArgumentsSource(ValueArgumentsProvider.class)
 public @interface ValueSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.apiguardian.api.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Annotation;
 import java.util.function.Consumer;
@@ -29,6 +29,6 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = EXPERIMENTAL, since = "5.0")
+@API(status = STABLE, since = "5.7")
 public interface AnnotationConsumer<A extends Annotation> extends Consumer<A> {
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/JupiterConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.DisplayNameGenerator;
+import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.ExecutionCondition;
 import org.junit.jupiter.api.parallel.ExecutionMode;
@@ -36,6 +37,7 @@ public interface JupiterConfiguration {
 	String DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME = "junit.jupiter.testinstance.lifecycle.default";
 	String DEACTIVATE_ALL_CONDITIONS_PATTERN = ClassNamePatternFilterUtils.DEACTIVATE_ALL_PATTERN;
 	String DEFAULT_DISPLAY_NAME_GENERATOR_PROPERTY_NAME = "junit.jupiter.displayname.generator.default";
+	String DEFAULT_TEST_METHOD_ORDER_PROPERTY_NAME = "junit.jupiter.testmethod.order.default";
 
 	String DEFAULT_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.default";
 	String DEFAULT_TESTABLE_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.testable.method.default";
@@ -65,4 +67,5 @@ public interface JupiterConfiguration {
 
 	DisplayNameGenerator getDefaultDisplayNameGenerator();
 
+	Optional<MethodOrderer> getDefaultTestMethodOrderer();
 }

File: junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java
Patch:
@@ -23,7 +23,6 @@
 	requires transitive org.apiguardian.api;
 	requires transitive org.junit.platform.commons;
 	requires transitive org.junit.platform.engine;
-	requires jdk.jfr;
 
 	exports org.junit.platform.launcher;
 	exports org.junit.platform.launcher.core;

File: junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/package-info.java
Patch:
@@ -0,0 +1,2 @@
+
+package org.junit.platform.launcher.listeners;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -114,7 +114,7 @@ public static Launcher create(LauncherConfig config) throws PreconditionViolatio
 
 	private static Stream<TestExecutionListener> loadAndFilterTestExecutionListeners() {
 		Iterable<TestExecutionListener> listeners = new ServiceLoaderTestExecutionListenerRegistry().loadListeners();
-		ConfigurationParameters configurationParameters = new LauncherConfigurationParameters();
+		ConfigurationParameters configurationParameters = LauncherConfigurationParameters.builder().build();
 		String deactivatedListenersPattern = configurationParameters.get(
 			DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME).orElse(null);
 		// @formatter:off

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -65,7 +65,7 @@ public interface BeforeTestExecutionCallback extends Extension {
 
 	/**
 	 * Callback that is invoked <em>immediately before</em> an individual test is
-	 * executed but after any user-defined teardown methods have been executed
+	 * executed but after any user-defined setup methods have been executed
 	 * for that test.
 	 *
 	 * @param context the current extension context; never {@code null}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -18,7 +18,7 @@
  * {@code BeforeTestExecutionCallback} defines the API for {@link Extension
  * Extensions} that wish to provide additional behavior to tests
  * <strong>immediately</strong> before an individual test is executed but after
- * any user-defined teardown methods (e.g.,
+ * any user-defined setup methods (e.g.,
  * {@link org.junit.jupiter.api.BeforeEach @BeforeEach} methods) have been
  * executed for that test.
  *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariableCondition.java
Patch:
@@ -54,7 +54,7 @@ protected ConditionEvaluationResult evaluate(DisabledIfEnvironmentVariable annot
 
 		if (actual.matches(regex)) {
 			return disabled(format("Environment variable [%s] with value [%s] matches regular expression [%s]", name,
-				actual, regex));
+				actual, regex), annotation.disabledReason());
 		}
 		// else
 		return enabled(format("Environment variable [%s] with value [%s] does not match regular expression [%s]", name,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfSystemPropertyCondition.java
Patch:
@@ -53,7 +53,8 @@ protected ConditionEvaluationResult evaluate(DisabledIfSystemProperty annotation
 
 		if (actual.matches(regex)) {
 			return disabled(
-				format("System property [%s] with value [%s] matches regular expression [%s]", name, actual, regex));
+				format("System property [%s] with value [%s] matches regular expression [%s]", name, actual, regex),
+				annotation.disabledReason());
 		}
 		// else
 		return enabled(

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableCondition.java
Patch:
@@ -50,14 +50,14 @@ protected ConditionEvaluationResult evaluate(EnabledIfEnvironmentVariable annota
 
 		// Nothing to match against?
 		if (actual == null) {
-			return disabled(format("Environment variable [%s] does not exist", name));
+			return disabled(format("Environment variable [%s] does not exist", name), annotation.disabledReason());
 		}
 		if (actual.matches(regex)) {
 			return enabled(format("Environment variable [%s] with value [%s] matches regular expression [%s]", name,
 				actual, regex));
 		}
 		return disabled(format("Environment variable [%s] with value [%s] does not match regular expression [%s]", name,
-			actual, regex));
+			actual, regex), annotation.disabledReason());
 	}
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfSystemPropertyCondition.java
Patch:
@@ -49,14 +49,15 @@ protected ConditionEvaluationResult evaluate(EnabledIfSystemProperty annotation)
 
 		// Nothing to match against?
 		if (actual == null) {
-			return disabled(format("System property [%s] does not exist", name));
+			return disabled(format("System property [%s] does not exist", name), annotation.disabledReason());
 		}
 		if (actual.matches(regex)) {
 			return enabled(
 				format("System property [%s] with value [%s] matches regular expression [%s]", name, actual, regex));
 		}
 		return disabled(
-			format("System property [%s] with value [%s] does not match regular expression [%s]", name, actual, regex));
+			format("System property [%s] with value [%s] does not match regular expression [%s]", name, actual, regex),
+			annotation.disabledReason());
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledForJreRangeConditionTests.java
Patch:
@@ -80,6 +80,7 @@ void java8() {
 	void java8to11() {
 		evaluateCondition();
 		assertDisabledOnCurrentJreIf(onJava8() || onJava9() || onJava10() || onJava11());
+		assertCustomDisabledReasonIs("Disabled on some JRE");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledForJreRangeIntegrationTests.java
Patch:
@@ -56,7 +56,7 @@ void java8() {
 	}
 
 	@Test
-	@DisabledForJreRange(min = JAVA_8, max = JAVA_11)
+	@DisabledForJreRange(min = JAVA_8, max = JAVA_11, disabledReason = "Disabled on some JRE")
 	void java8to11() {
 		assertFalse(onJava8() || onJava9() || onJava10() || onJava11());
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfConditionTests.java
Patch:
@@ -51,7 +51,7 @@ void enabledBecauseAnnotationIsNotPresent() {
 	void disabledBecauseStaticConditionMethodReturnsTrue() {
 		evaluateCondition();
 		assertDisabled();
-		assertReasonContains("Condition provided in @DisabledIf evaluates to true");
+		assertReasonContains("Disabled for some reason");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariableConditionTests.java
Patch:
@@ -88,6 +88,7 @@ void disabledBecauseEnvironmentVariableMatchesExactly() {
 		evaluateCondition();
 		assertDisabled();
 		assertReasonContains("matches regular expression");
+		assertCustomDisabledReasonIs("That's an enigma");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariableIntegrationTests.java
Patch:
@@ -54,7 +54,7 @@ void blankMatchesAttribute() {
 	}
 
 	@Test
-	@DisabledIfEnvironmentVariable(named = KEY1, matches = ENIGMA)
+	@DisabledIfEnvironmentVariable(named = KEY1, matches = ENIGMA, disabledReason = "That's an enigma")
 	void disabledBecauseEnvironmentVariableMatchesExactly() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfIntegrationTests.java
Patch:
@@ -29,7 +29,7 @@ void enabledBecauseAnnotationIsNotPresent() {
 	}
 
 	@Test
-	@DisabledIf("staticMethodThatReturnsTrue")
+	@DisabledIf(value = "staticMethodThatReturnsTrue", disabledReason = "Disabled for some reason")
 	void disabledBecauseStaticConditionMethodReturnsTrue() {
 		fail("Should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfSystemPropertyConditionTests.java
Patch:
@@ -85,6 +85,7 @@ void disabledBecauseSystemPropertyMatchesExactly() {
 		evaluateCondition();
 		assertDisabled();
 		assertReasonContains("matches regular expression");
+		assertCustomDisabledReasonIs("That's an enigma");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfSystemPropertyIntegrationTests.java
Patch:
@@ -68,7 +68,7 @@ void blankMatchesAttribute() {
 	}
 
 	@Test
-	@DisabledIfSystemProperty(named = KEY1, matches = ENIGMA)
+	@DisabledIfSystemProperty(named = KEY1, matches = ENIGMA, disabledReason = "That's an enigma")
 	void disabledBecauseSystemPropertyMatchesExactly() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledOnJreConditionTests.java
Patch:
@@ -71,6 +71,7 @@ void missingJreDeclaration() {
 	void disabledOnAllJavaVersions() {
 		evaluateCondition();
 		assertDisabledOnCurrentJreIf(true);
+		assertCustomDisabledReasonIs("Disabled on every JRE");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledOnJreIntegrationTests.java
Patch:
@@ -53,7 +53,8 @@ void missingJreDeclaration() {
 	}
 
 	@Test
-	@DisabledOnJre({ JAVA_8, JAVA_9, JAVA_10, JAVA_11, JAVA_12, JAVA_13, JAVA_14, JAVA_15, OTHER })
+	@DisabledOnJre(value = { JAVA_8, JAVA_9, JAVA_10, JAVA_11, JAVA_12, JAVA_13, JAVA_14, JAVA_15,
+			OTHER }, disabledReason = "Disabled on every JRE")
 	void disabledOnAllJavaVersions() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledOnOsIntegrationTests.java
Patch:
@@ -50,7 +50,7 @@ void missingOsDeclaration() {
 	}
 
 	@Test
-	@DisabledOnOs({ LINUX, MAC, WINDOWS, SOLARIS, OTHER })
+	@DisabledOnOs(value = { LINUX, MAC, WINDOWS, SOLARIS, OTHER }, disabledReason = "Disabled on every OS")
 	void disabledOnEveryOs() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledForJreRangeConditionTests.java
Patch:
@@ -80,6 +80,7 @@ void java8() {
 	void java8to11() {
 		evaluateCondition();
 		assertEnabledOnCurrentJreIf(onJava8() || onJava9() || onJava10() || onJava11());
+		assertCustomDisabledReasonIs("Disabled on some JRE");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledForJreRangeIntegrationTests.java
Patch:
@@ -57,7 +57,7 @@ void java8() {
 	}
 
 	@Test
-	@EnabledForJreRange(min = JAVA_8, max = JAVA_11)
+	@EnabledForJreRange(min = JAVA_8, max = JAVA_11, disabledReason = "Disabled on some JRE")
 	void java8to11() {
 		assertTrue(onJava8() || onJava9() || onJava10() || onJava11());
 		assertFalse(onJava12());

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfConditionTests.java
Patch:
@@ -61,7 +61,7 @@ void enabledBecauseStaticConditionMethodReturnsTrue() {
 	void disabledBecauseStaticConditionMethodReturnsFalse() {
 		evaluateCondition();
 		assertDisabled();
-		assertReasonContains("Condition provided in @EnabledIf evaluates to false");
+		assertReasonContains("Disabled for some reason");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableConditionTests.java
Patch:
@@ -130,6 +130,7 @@ void disabledBecauseEnvironmentVariableDoesNotMatch() {
 		evaluateCondition();
 		assertDisabled();
 		assertReasonContains("does not match regular expression");
+		assertCustomDisabledReasonIs("Not bogus");
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableIntegrationTests.java
Patch:
@@ -74,7 +74,7 @@ void enabledBecauseEnvironmentVariableMatchesPattern() {
 	}
 
 	@Test
-	@EnabledIfEnvironmentVariable(named = KEY1, matches = BOGUS)
+	@EnabledIfEnvironmentVariable(named = KEY1, matches = BOGUS, disabledReason = "Not bogus")
 	void disabledBecauseEnvironmentVariableDoesNotMatch() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfIntegrationTests.java
Patch:
@@ -34,7 +34,7 @@ void enabledBecauseStaticConditionMethodReturnsTrue() {
 	}
 
 	@Test
-	@EnabledIf("staticMethodThatReturnsFalse")
+	@EnabledIf(value = "staticMethodThatReturnsFalse", disabledReason = "Disabled for some reason")
 	void disabledBecauseStaticConditionMethodReturnsFalse() {
 		fail("Should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfSystemPropertyConditionTests.java
Patch:
@@ -115,6 +115,7 @@ void disabledBecauseSystemPropertyDoesNotMatch() {
 		evaluateCondition();
 		assertDisabled();
 		assertReasonContains("does not match regular expression");
+		assertCustomDisabledReasonIs("Not bogus");
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfSystemPropertyIntegrationTests.java
Patch:
@@ -86,7 +86,7 @@ void enabledBecauseSystemPropertyMatchesPattern() {
 	}
 
 	@Test
-	@EnabledIfSystemProperty(named = KEY1, matches = BOGUS)
+	@EnabledIfSystemProperty(named = KEY1, matches = BOGUS, disabledReason = "Not bogus")
 	void disabledBecauseSystemPropertyDoesNotMatch() {
 		fail("should be disabled");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnJreConditionTests.java
Patch:
@@ -153,6 +153,7 @@ void other() {
 		evaluateCondition();
 		assertEnabledOnCurrentJreIf(!(onJava8() || onJava9() || onJava10() || onJava11() || onJava12() || onJava13()
 				|| onJava14() || onJava15()));
+		assertCustomDisabledReasonIs("Disabled on almost every JRE");
 	}
 
 	private void assertEnabledOnCurrentJreIf(boolean condition) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnJreIntegrationTests.java
Patch:
@@ -99,7 +99,7 @@ void java15() {
 	}
 
 	@Test
-	@EnabledOnJre(OTHER)
+	@EnabledOnJre(value = OTHER, disabledReason = "Disabled on almost every JRE")
 	void other() {
 		assertFalse(
 			onJava8() || onJava9() || onJava10() || onJava11() || onJava12() || onJava13() || onJava14() || onJava15());

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnOsIntegrationTests.java
Patch:
@@ -83,7 +83,7 @@ void solaris() {
 	}
 
 	@Test
-	@EnabledOnOs(OTHER)
+	@EnabledOnOs(value = OTHER, disabledReason = "Disabled on almost every OS")
 	void other() {
 		assertFalse(onLinux() || onMac() || onSolaris() || onWindows());
 	}

File: platform-tests/src/test/java/org/junit/platform/testkit/engine/EventsTests.java
Patch:
@@ -10,7 +10,9 @@
 
 package org.junit.platform.testkit.engine;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.testkit.engine.EventConditions.engine;
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedSuccessfully;

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Events.java
Patch:
@@ -288,6 +288,7 @@ public final void assertEventsMatchExactly(Condition<? super Event>... condition
 	 * @see TestExecutionResultConditions
 	 */
 	@SafeVarargs
+	@SuppressWarnings("varargs")
 	public final void assertEventsMatchLoosely(Condition<? super Event>... conditions) {
 		Preconditions.notNull(conditions, "conditions must not be null");
 		Preconditions.containsNoNullElements(conditions, "conditions must not contain null elements");
@@ -318,6 +319,7 @@ public final void assertEventsMatchLoosely(Condition<? super Event>... condition
 	 * @see TestExecutionResultConditions
 	 */
 	@SafeVarargs
+	@SuppressWarnings("varargs")
 	public final void assertEventsMatchLooselyInOrder(Condition<? super Event>... conditions) {
 		Preconditions.notNull(conditions, "conditions must not be null");
 		Preconditions.containsNoNullElements(conditions, "conditions must not contain null elements");

File: platform-tests/src/test/java/org/junit/platform/testkit/engine/EventsTests.java
Patch:
@@ -269,7 +269,7 @@ void assertEventsMatchLooselyInOrderWithSecondAndLastEventInBadOrderFails() {
 
 	@Test
 	@DisplayName("assertEventsMatchLooselyInOrder: too many events -> fail")
-	void assertEventsMatchLooselyInOrderWithTooEventsFails() {
+	void assertEventsMatchLooselyInOrderWithTooManyEventsFails() {
 		Executable willFail = () -> events.assertEventsMatchLooselyInOrder( //
 			event(engine(), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()), //

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/MethodSelectorResolver.java
Patch:
@@ -15,7 +15,6 @@
 import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;
 import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.SEGMENT_TYPE_RUNNER;
 
-import java.lang.reflect.Method;
 import java.util.Optional;
 import java.util.function.Function;
 
@@ -74,8 +73,8 @@ private Resolution toResolution(RunnerTestDescriptor parent) {
 
 	private Filter toMethodFilter(MethodSelector methodSelector) {
 		Class<?> testClass = methodSelector.getJavaClass();
-		Method testMethod = methodSelector.getJavaMethod();
-		return matchMethodDescription(Description.createTestDescription(testClass, testMethod.getName()));
+		String methodName = methodSelector.getMethodName();
+		return matchMethodDescription(Description.createTestDescription(testClass, methodName));
 	}
 
 	private Filter toUniqueIdFilter(RunnerTestDescriptor runnerTestDescriptor, UniqueId uniqueId) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestTemplateInvocationTests.java
Patch:
@@ -154,8 +154,8 @@ void legacyReportingNames() {
 
 		events.assertStatistics(stats -> stats.dynamicallyRegistered(2));
 		//  events.dynamicallyRegistered().debug();
-		//  results.tests().dynamicallyRegistered().debug();
-		//  results.containers().dynamicallyRegistered().debug();
+		//  results.testEvents().dynamicallyRegistered().debug();
+		//  results.containerEvents().dynamicallyRegistered().debug();
 
 		// @formatter:off
 		Stream<String> legacyReportingNames = events.dynamicallyRegistered()

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/conditions/IgnoreConditionTests.java
Patch:
@@ -69,8 +69,8 @@ void ignoredAndNotIgnoredTestMethods() {
 		Events containers = executionResults.containerEvents();
 		Events tests = executionResults.testEvents();
 
-		// executionResults.all().debug();
-		// executionResults.all().debug(System.err);
+		// executionResults.allEvents().debug();
+		// executionResults.allEvents().debug(System.err);
 
 		// containers.debug();
 
@@ -80,7 +80,7 @@ void ignoredAndNotIgnoredTestMethods() {
 		// tests.started().debug();
 		// tests.succeeded().debug();
 
-		// executionResults.all().executions().debug();
+		// executionResults.allEvents().executions().debug();
 		// containers.executions().debug();
 		// tests.executions().debug();
 

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EngineTestKit.java
Patch:
@@ -70,7 +70,7 @@ public final class EngineTestKit {
 	 *     .engine("junit-jupiter")
 	 *     .selectors(selectClass(MyTests.class))
 	 *     .execute()
-	 *     .tests()
+	 *     .testEvents()
 	 *     .assertStatistics(stats -&gt; stats.started(2).finished(2));
 	 * </pre>
 	 *
@@ -99,7 +99,7 @@ public static Builder engine(String engineId) {
 	 *     .engine(new MyTestEngine())
 	 *     .selectors(selectClass(MyTests.class))
 	 *     .execute()
-	 *     .tests()
+	 *     .testEvents()
 	 *     .assertStatistics(stats -&gt; stats.started(2).finished(2));
 	 * </pre>
 	 *

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Events.java
Patch:
@@ -243,7 +243,7 @@ public Events assertStatistics(Consumer<EventStatistics> statisticsConsumer) {
 	 * <h4>Example</h4>
 	 *
 	 * <pre class="code">
-	 * executionResults.tests().assertEventsMatchExactly(
+	 * executionResults.testEvents().assertEventsMatchExactly(
 	 *     event(test("exampleTestMethod"), started()),
 	 *     event(test("exampleTestMethod"), finishedSuccessfully())
 	 * );

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -55,7 +55,8 @@ public VintageTestDescriptor(UniqueId uniqueId, Description description, TestSou
 	}
 
 	private static String generateDisplayName(Description description) {
-		return description.getMethodName() != null ? description.getMethodName() : description.getDisplayName();
+		String methodName = description.getMethodName();
+		return isNotBlank(methodName) ? methodName : description.getDisplayName();
 	}
 
 	public Description getDescription() {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -75,7 +75,7 @@
 import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithExceptionThrowingRunner;
 import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithFailingDescriptionThatIsNotReportedAsFinished;
 import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithIndistinguishableOverloadedMethod;
-import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithRunnerWithCustomUniqueIds;
+import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithRunnerWithCustomUniqueIdsAndDisplayNames;
 import org.junit.vintage.engine.samples.junit4.JUnit4TestCaseWithRunnerWithDuplicateChangingChildDescriptions;
 import org.junit.vintage.engine.samples.junit4.MalformedJUnit4TestCase;
 import org.junit.vintage.engine.samples.junit4.ParameterizedTestCase;
@@ -610,7 +610,7 @@ void ignoreEventsForUnknownDescriptionsByMisbehavingChildlessRunner() {
 
 	@Test
 	void executesJUnit4TestCaseWithRunnerWithCustomUniqueIds() {
-		Class<?> testClass = JUnit4TestCaseWithRunnerWithCustomUniqueIds.class;
+		Class<?> testClass = JUnit4TestCaseWithRunnerWithCustomUniqueIdsAndDisplayNames.class;
 
 		execute(testClass).allEvents().assertEventsMatchExactly( //
 			event(engine(), started()), //

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/JUnit4VersionCheck.java
Patch:
@@ -36,9 +36,9 @@ static void checkSupported() {
 		}
 		catch (NoClassDefFoundError e) {
 			throw new JUnitException(
-				"Invalid classpath/module path: junit-vintage-engine is present but junit:junit is not. "
-						+ "Please remove the former, add the latter, or use an excludeEngines(\"" + ENGINE_ID
-						+ "\") filter.");
+				"Invalid class/module path: junit-vintage-engine is present but junit:junit is not. "
+						+ "Please either remove junit-vintage-engine or add junit:junit, or "
+						+ "alternatively use an excludeEngines(\"" + ENGINE_ID + "\") filter.");
 		}
 	}
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4VersionCheckTests.java
Patch:
@@ -78,9 +78,9 @@ void handlesErrorsParsingVersion() {
 	void handlesMissingJUnit() {
 		JUnitException exception = assertThrows(JUnitException.class, JUnit4VersionCheck::checkSupported);
 
-		assertEquals(
-			"Invalid classpath/module path: junit-vintage-engine is present but junit:junit is not. "
-					+ "Please remove the former, add the latter, or use an excludeEngines(\"junit-vintage\") filter.",
+		assertEquals("Invalid class/module path: junit-vintage-engine is present but junit:junit is not. "
+				+ "Please either remove junit-vintage-engine or add junit:junit, or alternatively use "
+				+ "an excludeEngines(\"junit-vintage\") filter.",
 			exception.getMessage());
 	}
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -429,7 +429,7 @@ private void invokeTestInstancePreDestroyCallbacks(JupiterEngineExecutionContext
 		ExtensionContext extensionContext = context.getExtensionContext();
 		ThrowableCollector throwableCollector = context.getThrowableCollector();
 
-		context.getExtensionRegistry().stream(TestInstancePreDestroyCallback.class).forEach(
+		context.getExtensionRegistry().getReversedExtensions(TestInstancePreDestroyCallback.class).forEach(
 			extension -> throwableCollector.execute(() -> extension.preDestroyTestInstance(extensionContext)));
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -71,7 +71,7 @@ public interface TestTemplateInvocationContextProvider extends Extension {
 	 *
 	 * <p>This method is only called by the framework if {@link #supportsTestTemplate}
 	 * previously returned {@code true} for the same {@link ExtensionContext};
-	 * this method is allowed to return an empty {@code Stream}, but not {@code null}.
+	 * this method is allowed to return an empty {@code Stream} but not {@code null}.
 	 *
 	 * <p>The returned {@code Stream} will be properly closed by calling
 	 * {@link Stream#close()}, making it safe to use a resource such as

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -141,11 +141,12 @@ private void execute(DynamicTestExecutor dynamicTestExecutor, TestDescriptor tes
 
 	private void validateWasAtLeastInvokedOnce(int invocationIndex,
 			List<TestTemplateInvocationContextProvider> providers) {
+
 		Preconditions.condition(invocationIndex > 0,
-			() -> "None of the " + TestTemplateInvocationContextProvider.class.getSimpleName() + "s "
+			() -> "None of the supporting " + TestTemplateInvocationContextProvider.class.getSimpleName() + "s "
 					+ providers.stream().map(provider -> provider.getClass().getSimpleName()).collect(
 						joining(", ", "[", "]"))
-					+ " has provided a non-empty stream");
+					+ " provided a non-empty stream");
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestTemplateInvocationTests.java
Patch:
@@ -355,9 +355,9 @@ void templateWithSupportingProviderButNoInvocationsReportsFailure() {
 			wrappedInContainerEvents(MyTestTemplateTestCase.class, //
 				event(container("templateWithSupportingProviderButNoInvocations"), started()), //
 				event(container("templateWithSupportingProviderButNoInvocations"),
-					finishedWithFailure(message("None of the TestTemplateInvocationContextProviders ["
+					finishedWithFailure(message("None of the supporting TestTemplateInvocationContextProviders ["
 							+ InvocationContextProviderThatSupportsEverythingButProvidesNothing.class.getSimpleName()
-							+ "] has provided a non-empty stream")))));
+							+ "] provided a non-empty stream")))));
 	}
 
 	@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -70,8 +70,8 @@ public interface TestTemplateInvocationContextProvider extends Extension {
 	 * for the test template method represented by the supplied {@code context}.
 	 *
 	 * <p>This method is only called by the framework if {@link #supportsTestTemplate}
-	 * previously returned {@code true} for the same {@link ExtensionContext}.
-	 * Thus, this method must not return an empty {@code Stream}.
+	 * previously returned {@code true} for the same {@link ExtensionContext};
+	 * this method is allowed to return an empty {@code Stream}, but not {@code null}.
 	 *
 	 * <p>The returned {@code Stream} will be properly closed by calling
 	 * {@link Stream#close()}, making it safe to use a resource such as
@@ -81,7 +81,6 @@ public interface TestTemplateInvocationContextProvider extends Extension {
 	 * to be invoked; never {@code null}
 	 * @return a {@code Stream} of {@code TestTemplateInvocationContext}
 	 * instances for the invocation of the test template method; never {@code null}
-	 * or empty
 	 * @see #supportsTestTemplate
 	 * @see ExtensionContext
 	 */

File: junit-jupiter-engine/src/module/org.junit.jupiter.engine/module-info.java
Patch:
@@ -10,7 +10,8 @@
  */
 
 /**
- * Provides the JUnit Jupiter {@linkplain TestEngine} implementation.
+ * Provides the JUnit Jupiter {@linkplain org.junit.platform.engine.TestEngine}
+ * implementation.
  *
  * @moduleGraph
  * @since 5.0.0

File: junit-vintage-engine/src/module/org.junit.vintage.engine/module-info.java
Patch:
@@ -9,7 +9,8 @@
  */
 
 /**
- * JUnit Vintage provides a {@linkplain TestEngine} for running JUnit 3 and 4 based tests on the platform.
+ * JUnit Vintage provides a {@linkplain org.junit.platform.engine.TestEngine}
+ * for running JUnit 3 and 4 based tests on the platform.
  *
  * @moduleGraph
  * @since 5.5.0

File: platform-tests/src/test/java/org/junit/platform/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -45,6 +45,7 @@
 
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.EngineExecutionListener;
@@ -97,6 +98,7 @@
  *
  * @since 1.0
  */
+@Tag("junit4")
 class JUnitPlatformRunnerTests {
 
 	@Nested

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TempDirectory.java
Patch:
@@ -280,7 +280,7 @@ private static class UndeletableFileException extends JUnitException {
 		}
 
 		@Override
-		public Throwable fillInStackTrace() {
+		public synchronized Throwable fillInStackTrace() {
 			return this; // Make the output smaller by omitting the stacktrace
 		}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledOnJreIntegrationTests.java
Patch:
@@ -103,7 +103,7 @@ void java14() {
 	@Test
 	@DisabledOnJre(JAVA_15)
 	void java15() {
-		assertFalse(onJava14());
+		assertFalse(onJava15());
 	}
 
 	@Test

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JavacModulesTests.java
Patch:
@@ -79,8 +79,10 @@ private Stream<Path> getMainOutputDirs() {
 	private static List<String> compileModules(Path temp, Writer out, Writer err, Function<Project, Stream<Path>> patch)
 			throws Exception {
 		var args = new ArrayList<String>();
-		args.add("-Xlint:all,-requires-automatic,-requires-transitive-automatic,-path");
+		args.add("-Xlint:all,-requires-automatic,-requires-transitive-automatic");
 		args.add("-proc:none"); // disable annotation processing
+		args.add("-cp");
+		args.add(""); // set empty class path, otherwise system property "java.class.path" is read
 
 		args.add("-d");
 		args.add(temp.resolve("destination").toString());

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -60,8 +60,10 @@ private static List<String> compile(Path temp, Writer out, Writer err) throws Ex
 		Files.write(documentation.resolve("module-info.java"), DOCUMENTATION_MODULE_DESCRIPTOR);
 
 		var args = new ArrayList<String>();
-		args.add("-Xlint:-path"); // ignore path-related warnings for the time being
+		args.add("-Xlint"); // enable all default warnings
 		args.add("-proc:none"); // disable annotation processing
+		args.add("-cp");
+		args.add(""); // set empty class path, otherwise system property "java.class.path" is read
 
 		args.add("-d");
 		args.add(temp.resolve("destination").toString());

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ThrowableCollector.java
Patch:
@@ -170,8 +170,10 @@ public void assertEmpty() {
 	 * {@linkplain TestExecutionResult#failed failed} if it <em>failed</em>
 	 * execution; and {@linkplain TestExecutionResult#successful successful}
 	 * otherwise
+	 * @since 1.6
 	 */
-	TestExecutionResult toTestExecutionResult() {
+	@API(status = MAINTAINED, since = "1.6")
+	public TestExecutionResult toTestExecutionResult() {
 		if (isEmpty()) {
 			return successful();
 		}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -2940,7 +2940,7 @@ public static void assertAll(String heading, Stream<Executable> executables) thr
 
 	/**
 	 * <em>Assert</em> that execution of the supplied {@code executable} throws
-	 * an exception of the {@code expectedType} and returns the exception.
+	 * an exception of the {@code expectedType} and return the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is
 	 * thrown, this method will fail.
@@ -2954,7 +2954,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Execut
 
 	/**
 	 * <em>Assert</em> that execution of the supplied {@code executable} throws
-	 * an exception of the {@code expectedType} and returns the exception.
+	 * an exception of the {@code expectedType} and return the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is
 	 * thrown, this method will fail.
@@ -2970,7 +2970,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Execut
 
 	/**
 	 * <em>Assert</em> that execution of the supplied {@code executable} throws
-	 * an exception of the {@code expectedType} and returns the exception.
+	 * an exception of the {@code expectedType} and return the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is
 	 * thrown, this method will fail.

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -411,7 +411,7 @@ void testWithCustomAggregatorAnnotation(@CsvToPerson Person person) {
 
 	// tag::custom_display_names[]
 	@DisplayName("Display name of container")
-	@ParameterizedTest(name = "{index} ==> fruit=''{0}'', rank={1}")
+	@ParameterizedTest(name = "{index} ==> the rank of ''{0}'' is {1}")
 	@CsvSource({ "apple, 1", "banana, 2", "'lemon, lime', 3" })
 	void testWithCustomDisplayNames(String fruit, int rank) {
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/support/OpenTest4JAndJUnit4AwareThrowableCollectorTests.java
Patch:
@@ -70,7 +70,7 @@ void simulateHamcrestNotInTheClasspath(LogRecordListener listener) throws Throwa
 			assertNotNull(ReflectionUtils.newInstance(clazz));
 
 			// @formatter:off
-			assertThat(listener.stream(Level.INFO).map(LogRecord::getMessage).findFirst().orElse("<not found>"))
+			assertThat(listener.stream(Level.FINE).map(LogRecord::getMessage).findFirst().orElse("<not found>"))
 				.isEqualTo(
 					"Failed to load class org.junit.internal.AssumptionViolatedException: " +
 					"only supporting org.opentest4j.TestAbortedException for aborted execution. " +

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledForJreRangeCondition.java
Patch:
@@ -36,6 +36,8 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 				.map(disabledForJreRange -> {
 					JRE min = disabledForJreRange.min();
 					JRE max = disabledForJreRange.max();
+					Preconditions.condition((min != JRE.JAVA_8 || max != JRE.OTHER),
+						"You must declare a non-default value for min or max in @DisabledForJreRange");
 					Preconditions.condition(max.compareTo(min) >= 0,
 						"@DisabledForJreRange.min must be less than or equal to @DisabledForJreRange.max");
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledForJreRangeCondition.java
Patch:
@@ -36,6 +36,8 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 				.map(enabledForJreRange -> {
 					JRE min = enabledForJreRange.min();
 					JRE max = enabledForJreRange.max();
+					Preconditions.condition((min != JRE.JAVA_8 || max != JRE.OTHER),
+						"You must declare a non-default value for min or max in @EnabledForJreRange");
 					Preconditions.condition(max.compareTo(min) >= 0,
 						"@EnabledForJreRange.min must be less than or equal to @EnabledForJreRange.max");
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -279,6 +279,8 @@ private int numberOfCommonFrames(StackTraceElement[] currentTrace, StackTraceEle
 
 	private static class DefaultFailure implements Failure {
 
+		private static final long serialVersionUID = 1L;
+
 		private final TestIdentifier testIdentifier;
 		private final Throwable exception;
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -13,6 +13,7 @@
 import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.io.PrintWriter;
+import java.io.Serializable;
 import java.util.List;
 
 import org.apiguardian.api.API;
@@ -163,7 +164,7 @@ default void printFailuresTo(PrintWriter writer, int maxStackTraceLines) {
 	/**
 	 * Failure of a test or container.
 	 */
-	interface Failure {
+	interface Failure extends Serializable {
 
 		/**
 		 * Get the identifier of the failed test or container.

File: junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java
Patch:
@@ -16,6 +16,7 @@
 	exports org.junit.platform.launcher;
 	exports org.junit.platform.launcher.core;
 	exports org.junit.platform.launcher.listeners;
+	exports org.junit.platform.launcher.listeners.discovery;
 
 	uses org.junit.platform.engine.TestEngine;
 	uses org.junit.platform.launcher.TestExecutionListener;

File: platform-tests/src/test/java/org/junit/platform/launcher/core/StreamInterceptingTestExecutionListenerIntegrationTests.java
Patch:
@@ -73,7 +73,7 @@ void interceptsStream(String configParam, Supplier<PrintStream> printStreamSuppl
 			return null;
 		}).when(listener).executionStarted(any());
 
-		DefaultLauncher launcher = createLauncher(engine);
+		var launcher = createLauncher(engine);
 		LauncherDiscoveryRequest discoveryRequest = request()//
 				.selectors(selectUniqueId(test.getUniqueId()))//
 				.configurationParameter(configParam, String.valueOf(true))//
@@ -106,7 +106,7 @@ void doesNotInterceptStreamWhenAlreadyBeingIntercepted(String configParam,
 		assertThat(StreamInterceptor.registerStdout(1)).isPresent();
 		assertThat(StreamInterceptor.registerStderr(1)).isPresent();
 
-		DefaultLauncher launcher = createLauncher(engine);
+		var launcher = createLauncher(engine);
 		LauncherDiscoveryRequest discoveryRequest = request()//
 				.selectors(selectUniqueId(test.getUniqueId()))//
 				.configurationParameter(configParam, String.valueOf(true))//

File: junit-jupiter-api/src/testFixtures/java/org/junit/jupiter/api/fixtures/TrackLogRecords.java
Patch:
@@ -8,7 +8,7 @@
  * https://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.jupiter.engine;
+package org.junit.jupiter.api.fixtures;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/MultipleTestableAnnotationsTests.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.RepetitionInfo;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 
 /**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/config/DisplayNameGeneratorParameterConverterTests.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.junit.jupiter.api.DisplayNameGenerator;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.engine.descriptor.CustomDisplayNameGenerator;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.engine.ConfigurationParameters;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/DisplayNameUtilsTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.DisplayNameGenerator;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.platform.commons.logging.LogRecordListener;
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -55,8 +55,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestFactory;
 import org.junit.jupiter.api.TestTemplate;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.api.parallel.ExecutionMode;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.descriptor.DynamicDescendantFilter;
 import org.junit.jupiter.engine.descriptor.Filterable;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContextTests.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.commons.logging.LogRecordListener;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java
Patch:
@@ -46,8 +46,8 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestMethodOrder;
 import org.junit.jupiter.api.TestReporter;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.engine.JupiterTestEngine;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.testkit.engine.EngineTestKit;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestWatcherTests.java
Patch:
@@ -40,8 +40,8 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestWatcher;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.logging.LogRecordListener;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TimeoutConfigurationTests.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 
 /**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/support/OpenTest4JAndJUnit4AwareThrowableCollectorTests.java
Patch:
@@ -21,8 +21,8 @@
 
 import org.junit.internal.AssumptionViolatedException;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.api.function.Executable;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageLauncherIntegrationTests.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.launcher.Launcher;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessorTests.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.TestDescriptor;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscovererTests.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.EngineDiscoveryRequest;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/support/UniqueIdReaderTests.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.runner.Description;
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -34,8 +34,8 @@
 import java.util.stream.Collectors;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.PreconditionViolationException;
 import org.junit.platform.commons.function.Try;
 import org.junit.platform.commons.logging.LogRecordListener;

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -48,8 +48,8 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.PreconditionViolationException;
 import org.junit.platform.commons.logging.LogRecordListener;

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/SameThreadExecutionIntegrationTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.jupiter.api.MethodOrderer.Alphanumeric;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.testkit.engine.EngineTestKit;
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
 import org.junit.platform.commons.JUnitException;

File: platform-tests/src/test/java/org/junit/platform/launcher/core/TestExecutionListenerRegistryTests.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.TrackLogRecords;
+import org.junit.jupiter.api.fixtures.TrackLogRecords;
 import org.junit.platform.commons.logging.LogRecordListener;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestExecutionResult;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -125,7 +125,7 @@ static void registerExtensionsFromFields(ExtensionRegistrar registrar, Class<?>
 	 * @since 5.4
 	 */
 	private static int getOrder(Field field) {
-		return findAnnotation(field, Order.class).map(Order::value).orElse(Integer.MAX_VALUE);
+		return findAnnotation(field, Order.class).map(Order::value).orElse(Order.DEFAULT);
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoveryTests.java
Patch:
@@ -16,6 +16,7 @@
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectNestedMethod;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
@@ -132,7 +133,7 @@ void discoverTestTemplateMethodByMethodSelector() {
 
 	@Test
 	void discoverDeeplyNestedTestMethodByNestedMethodSelector() throws Exception {
-		var selector = new NestedMethodSelector(
+		var selector = selectNestedMethod(
 			List.of(TestCaseWithExtendedNested.class, TestCaseWithExtendedNested.ConcreteInner1.class),
 			AbstractSuperClass.NestedInAbstractClass.class,
 			AbstractSuperClass.NestedInAbstractClass.class.getDeclaredMethod("test"));

File: documentation/src/test/java/example/ConditionalTestExecutionDemo.java
Patch:
@@ -114,7 +114,7 @@ void notFromJava9to11() {
 
 	@Test
 	@DisabledForJreRange(min = JAVA_9)
-	void notFromJava9toCurrentJavaFeatureNumber()() {
+	void notFromJava9toCurrentJavaFeatureNumber() {
 		// ...
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -44,6 +44,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.extension.ExecutionCondition

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariable.java
Patch:
@@ -60,6 +60,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.Disabled

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfSystemProperty.java
Patch:
@@ -60,6 +60,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.Disabled

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnJre.java
Patch:
@@ -52,6 +52,8 @@
  * @since 5.1
  * @see JRE
  * @see org.junit.jupiter.api.condition.EnabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnOs.java
Patch:
@@ -54,6 +54,8 @@
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariable.java
Patch:
@@ -59,6 +59,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.Disabled

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfSystemProperty.java
Patch:
@@ -59,6 +59,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.Disabled

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnJre.java
Patch:
@@ -52,6 +52,8 @@
  * @since 5.1
  * @see JRE
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnOs.java
Patch:
@@ -54,6 +54,8 @@
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/JRE.java
Patch:
@@ -39,6 +39,8 @@
  * @see #OTHER
  * @see EnabledOnJre
  * @see DisabledOnJre
+ * @see EnabledForJreRange
+ * @see DisabledForJreRange
  */
 @API(status = STABLE, since = "5.1")
 public enum JRE {
@@ -96,7 +98,7 @@ public enum JRE {
 
 	private static final Logger logger = LoggerFactory.getLogger(JRE.class);
 
-	private static final JRE CURRENT_VERSION = determineCurrentVersion();
+	static final JRE CURRENT_VERSION = determineCurrentVersion();
 
 	private static JRE determineCurrentVersion() {
 		String javaVersion = System.getProperty("java.version");

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -42,6 +42,8 @@
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.EnabledOnJre
  * @see org.junit.jupiter.api.condition.DisabledOnJre
+ * @see org.junit.jupiter.api.condition.EnabledForJreRange
+ * @see org.junit.jupiter.api.condition.DisabledForJreRange
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/JupiterConfiguration.java
Patch:
@@ -46,6 +46,7 @@ public interface JupiterConfiguration {
 	String DEFAULT_BEFORE_EACH_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.beforeeach.method.default";
 	String DEFAULT_AFTER_EACH_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.aftereach.method.default";
 	String DEFAULT_AFTER_ALL_METHOD_TIMEOUT_PROPERTY_NAME = "junit.jupiter.execution.timeout.afterall.method.default";
+	String TIMEOUT_MODE_PROPERTY_NAME = "junit.jupiter.execution.timeout.mode";
 
 	Optional<String> getRawConfigurationParameter(String key);
 

File: junit-platform-commons/src/module/org.junit.platform.commons/module-info.java
Patch:
@@ -9,7 +9,8 @@
  */
 
 module org.junit.platform.commons {
-	requires java.logging; // TODO Is "requires transitive java.logging" needed here?
+	requires java.logging;
+	requires java.management; // needed by RuntimeUtils to determine input arguments
 	requires transitive org.apiguardian.api;
 
 	exports org.junit.platform.commons;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/execution/TestRunTests.java
Patch:
@@ -41,7 +41,7 @@ void returnsEmptyOptionalForUnknownDescriptions() throws Exception {
 		Description unknownDescription = createTestDescription(testClass, "dynamicTest");
 
 		TestRun testRun = new TestRun(runnerTestDescriptor);
-		Optional<VintageTestDescriptor> testDescriptor = testRun.lookupTestDescriptor(unknownDescription);
+		Optional<VintageTestDescriptor> testDescriptor = testRun.lookupNextTestDescriptor(unknownDescription);
 
 		assertThat(testDescriptor).isEmpty();
 	}
@@ -60,7 +60,7 @@ void registersDynamicTestDescriptors() throws Exception {
 		TestRun testRun = new TestRun(runnerTestDescriptor);
 		testRun.registerDynamicTest(dynamicTestDescriptor);
 
-		assertThat(testRun.lookupTestDescriptor(dynamicDescription)).contains(dynamicTestDescriptor);
+		assertThat(testRun.lookupNextTestDescriptor(dynamicDescription)).contains(dynamicTestDescriptor);
 		assertTrue(testRun.isDescendantOfRunnerTestDescriptor(dynamicTestDescriptor));
 	}
 

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherIntegrationTests.java
Patch:
@@ -16,8 +16,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.commons.util.StringUtils.isBlank;
 
-import java.nio.charset.StandardCharsets;
-
 import org.junit.jupiter.api.Test;
 
 /**
@@ -47,7 +45,6 @@ void executeWithExcludeClassnameOptionExcludesClasses() {
 		ConsoleLauncherWrapperResult result = new ConsoleLauncherWrapper().execute(args);
 		assertAll("all subpackage test classes are excluded by the class name filter", //
 			() -> assertArrayEquals(args, result.args), //
-			() -> assertEquals(StandardCharsets.UTF_8, result.charset), //
 			() -> assertEquals(0, result.code), //
 			() -> assertEquals(0, result.getTestsFoundCount()), //
 			() -> assertTrue(isBlank(result.err)) //

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -249,9 +249,10 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {
 		CsvFileSource annotation = CsvFileSourceMock.builder()//
 				.lineSeparator("\n")//
 				.delimiter(',')//
-				.nullValues(new String[] { "empty" }).build();
+				.nullValues("NIL")//
+				.build();
 
-		Stream<Object[]> arguments = provideArguments("vacio , , empty , ''\nempty, empty, foo, bar", annotation);
+		Stream<Object[]> arguments = provideArguments("vacio, , NIL, ''\nNIL, NIL, foo, bar", annotation);
 
 		assertThat(arguments).containsExactly(new Object[] { "vacio", null, null, "''" },
 			new Object[] { null, null, "foo", "bar" });

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileSourceMock.java
Patch:
@@ -25,7 +25,7 @@ class CsvFileSourceMock {
 	private String delimiterString = "";
 	private String emptyValue = "";
 	private int numLinesToSkip = 0;
-	private String[] nullValues = new String[] {};
+	private String[] nullValues = new String[0];
 
 	private CsvFileSourceMock() {
 	}
@@ -73,7 +73,7 @@ CsvFileSourceMock numLinesToSkip(int numLinesToSkip) {
 		return this;
 	}
 
-	CsvFileSourceMock nullValues(String[] nullValues) {
+	CsvFileSourceMock nullValues(String... nullValues) {
 		this.nullValues = nullValues;
 		return this;
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -124,6 +124,6 @@
 	 * @since 5.6
 	 */
 	@API(status = EXPERIMENTAL, since = "5.6")
-	String[] nullSymbols() default {};
+	String[] nullValues() default {};
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -97,6 +97,6 @@
 	 * @since 5.6
 	 */
 	@API(status = EXPERIMENTAL, since = "5.6")
-	String[] nullSymbols() default {};
+	String[] nullValues() default {};
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -122,7 +122,7 @@ void throwsExceptionIfBothDelimitersAreSimultaneouslySet() {
 	}
 
 	@Test
-	void emptyValueIsAnEmptyWithCustomNullSymbolString() {
+	void emptyValueIsAnEmptyWithCustomNullValueString() {
 		Stream<Object[]> arguments = provideArguments("", ',', "", new String[] { "N/A", "NIL" }, "apple, , NIL, ''");
 
 		assertThat(arguments).containsExactly(new String[] { "apple", null, null, "" });
@@ -137,14 +137,14 @@ private Stream<Object[]> provideArguments(String delimiterString, String emptyVa
 	}
 
 	private Stream<Object[]> provideArguments(String delimiterString, char delimiter, String emptyValue,
-			String[] nullSymbols, String... value) {
+			String[] nullValues, String... value) {
 
 		CsvSource annotation = mock(CsvSource.class);
 		when(annotation.value()).thenReturn(value);
 		when(annotation.delimiter()).thenReturn(delimiter);
 		when(annotation.delimiterString()).thenReturn(delimiterString);
 		when(annotation.emptyValue()).thenReturn(emptyValue);
-		when(annotation.nullSymbols()).thenReturn(nullSymbols);
+		when(annotation.nullValues()).thenReturn(nullValues);
 
 		CsvArgumentsProvider provider = new CsvArgumentsProvider();
 		provider.accept(annotation);

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -245,11 +245,11 @@ void throwsExceptionForInvalidCsvFormat() {
 	}
 
 	@Test
-	void emptyValueIsAnEmptyWithCustomNullSymbolString() {
+	void emptyValueIsAnEmptyWithCustomNullValueString() {
 		CsvFileSource annotation = CsvFileSourceMock.builder()//
 				.lineSeparator("\n")//
 				.delimiter(',')//
-				.nullSymbols(new String[] { "empty" }).build();
+				.nullValues(new String[] { "empty" }).build();
 
 		Stream<Object[]> arguments = provideArguments("vacio , , empty , ''\nempty, empty, foo, bar", annotation);
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -183,7 +183,7 @@ private TestDescriptor discoverEngineRoot(TestEngine testEngine, LauncherDiscove
 			String message = String.format("TestEngine with ID '%s' failed to discover tests", testEngine.getId());
 			logger.error(throwable, () -> message);
 			JUnitException cause = new JUnitException(message, throwable);
-			return new EngineDiscoveryErrorDescriptor(uniqueEngineId, testEngine.getId(), cause);
+			return new EngineDiscoveryErrorDescriptor(uniqueEngineId, testEngine, cause);
 		}
 	}
 

File: junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java
Patch:
@@ -9,6 +9,7 @@
  */
 
 module org.junit.platform.launcher {
+	requires java.logging;
 	requires transitive org.apiguardian.api;
 	requires transitive org.junit.platform.engine;
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/support/OpenTest4JAndJUnit4AwareThrowableCollectorTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link OpenTest4JAndJUnit4AwareThrowableCollector}.
  *
- * @since 5.6
+ * @since 5.5.2
  */
 class OpenTest4JAndJUnit4AwareThrowableCollectorTests {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/support/OpenTest4JAndJUnit4AwareThrowableCollectorTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link OpenTest4JAndJUnit4AwareThrowableCollector}.
  *
- * @since 5.6
+ * @since 5.5.2
  */
 class OpenTest4JAndJUnit4AwareThrowableCollectorTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DefaultParallelExecutionConfigurationStrategyTests.java
Patch:
@@ -82,7 +82,7 @@ void customStrategyCreatesValidConfiguration() {
 	}
 
 	@ParameterizedTest
-	@EnumSource(DefaultParallelExecutionConfigurationStrategy.class)
+	@EnumSource
 	void createsStrategyFromConfigParam(DefaultParallelExecutionConfigurationStrategy strategy) {
 		when(configParams.get("strategy")).thenReturn(Optional.of(strategy.name().toLowerCase()));
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicExtensionContext.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.platform.engine.EngineExecutionListener;
 
-public class DynamicExtensionContext extends AbstractExtensionContext<DynamicNodeTestDescriptor> {
+class DynamicExtensionContext extends AbstractExtensionContext<DynamicNodeTestDescriptor> {
 
 	DynamicExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener,
 			DynamicNodeTestDescriptor testDescriptor, JupiterConfiguration configuration) {

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ArchUnitTests.java
Patch:
@@ -63,6 +63,8 @@ void avoidAccessingStandardStreams(JavaClasses classes) {
 				.that(are(not(name("org.junit.platform.console.ConsoleLauncher")))) //
 				.that(are(not(name("org.junit.platform.launcher.core.StreamInterceptor")))) //
 				.that(are(not(name("org.junit.platform.runner.JUnitPlatformRunnerListener")))) //
+				.that(are(not(name("org.junit.platform.testkit.engine.Events")))) //
+				.that(are(not(name("org.junit.platform.testkit.engine.Executions")))) //
 				.that(are(not(resideInAPackage("org.junit.platform.console.shadow.picocli")))) //
 				.that(are(not(resideInAPackage("org.junit.platform.console.shadow.picocli.groovy"))));
 		GeneralCodingRules.NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(subset);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -26,8 +26,8 @@
  * resources}.
  *
  * <p>The lines of these CSV files will be provided as arguments to the
- * annotated {@code @ParameterizedTest} method. If some lines are commented
- * out with a # symbol at the beginning of the line, they will be ignored.
+ * annotated {@code @ParameterizedTest} method. Any line beginning with a
+ * {@code #} symbol will be interpreted as a comment and will be ignored.
  *
  * @since 5.0
  * @see CsvSource

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -44,7 +44,8 @@
 	 * The CSV lines to use as source of arguments; must not be empty.
 	 *
 	 * <p>Each value corresponds to a line in a CSV file and will be split using
-	 * the specified {@link #delimiter delimiter}.
+	 * the specified {@link #delimiter delimiter}. Any line beginning with a
+	 * {@code #} symbol will be interpreted as a comment and will be ignored.
 	 */
 	String[] value();
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -33,6 +33,7 @@ class MutableTestExecutionSummary implements TestExecutionSummary {
 
 	private static final String TAB = "  ";
 	private static final String DOUBLE_TAB = TAB + TAB;
+	private static final int DEFAULT_MAX_STACKTRACE_LINES = 10;
 
 	private static final String CAUSED_BY = "Caused by: ";
 	private static final String SUPPRESSED = "Suppressed: ";
@@ -186,12 +187,12 @@ public void printTo(PrintWriter writer) {
 
 	@Override
 	public void printFailuresTo(PrintWriter writer) {
-		printFailuresTo(writer, 10);
+		printFailuresTo(writer, DEFAULT_MAX_STACKTRACE_LINES);
 	}
 
 	@Override
 	public void printFailuresTo(PrintWriter writer, int maxStackTraceLines) {
-		Preconditions.notNull(writer, "Writer must not be null");
+		Preconditions.notNull(writer, "PrintWriter must not be null");
 		Preconditions.condition(maxStackTraceLines >= 0, "maxStackTraceLines must be a positive number");
 
 		if (getTotalFailureCount() > 0) {

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherWrapperResult.java
Patch:
@@ -142,7 +142,8 @@ public void printTo(PrintWriter writer) {
 
 	@Override
 	public void printFailuresTo(PrintWriter writer) {
-		printFailuresTo(writer, 10);
+		checkTestExecutionSummaryState();
+		summary.printFailuresTo(writer);
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -104,6 +104,8 @@ public final Class<?> getTestClass() {
 		return this.testClass;
 	}
 
+	public abstract List<Class<?>> getEnclosingTestClasses();
+
 	@Override
 	public Type getType() {
 		return Type.CONTAINER;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedTestDescriptor.java
Patch:
@@ -104,6 +104,8 @@ public final Class<?> getTestClass() {
 		return this.testClass;
 	}
 
+	public abstract List<Class<?>> getEnclosingTestClasses();
+
 	@Override
 	public Type getType() {
 		return Type.CONTAINER;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -38,8 +38,6 @@
  *
  * @since 5.0
  * @see #value
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariable.java
Patch:
@@ -62,8 +62,6 @@
  * @see org.junit.jupiter.api.condition.DisabledOnJre
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIfSystemProperty.java
Patch:
@@ -62,8 +62,6 @@
  * @see org.junit.jupiter.api.condition.DisabledOnJre
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnJre.java
Patch:
@@ -58,8 +58,6 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledOnOs.java
Patch:
@@ -58,8 +58,6 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariable.java
Patch:
@@ -61,8 +61,6 @@
  * @see org.junit.jupiter.api.condition.DisabledOnJre
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfSystemProperty.java
Patch:
@@ -61,8 +61,6 @@
  * @see org.junit.jupiter.api.condition.DisabledOnJre
  * @see org.junit.jupiter.api.condition.EnabledOnOs
  * @see org.junit.jupiter.api.condition.DisabledOnOs
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnJre.java
Patch:
@@ -58,8 +58,6 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledOnOs.java
Patch:
@@ -58,8 +58,6 @@
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty
  * @see org.junit.jupiter.api.condition.DisabledIfSystemProperty
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.Disabled
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -36,8 +36,6 @@
  *
  * @since 5.0
  * @see org.junit.jupiter.api.Disabled
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  * @see org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
  * @see org.junit.jupiter.api.condition.EnabledIfSystemProperty

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ScriptEvaluationException.java
Patch:
@@ -19,8 +19,6 @@
  * {@link ExecutionCondition}.
  *
  * @since 5.1
- * @see org.junit.jupiter.api.condition.EnabledIf
- * @see org.junit.jupiter.api.condition.DisabledIf
  */
 @API(status = EXPERIMENTAL, since = "5.1")
 public class ScriptEvaluationException extends ExtensionConfigurationException {

File: junit-jupiter-engine/src/module/org.junit.jupiter.engine/module-info.java
Patch:
@@ -10,7 +10,6 @@
  */
 
 module org.junit.jupiter.engine {
-	requires static java.scripting; // for evaluating @EnabledIf/@DisabledIf
 	requires transitive org.apiguardian.api;
 	requires transitive org.junit.jupiter.api;
 	requires transitive org.junit.platform.engine;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExtensionRegistryTests.java
Patch:
@@ -41,7 +41,7 @@
  */
 class ExtensionRegistryTests {
 
-	private static final int NUM_DEFAULT_EXTENSIONS = 7;
+	private static final int NUM_DEFAULT_EXTENSIONS = 6;
 
 	private final JupiterConfiguration configuration = mock(JupiterConfiguration.class);
 
@@ -161,7 +161,6 @@ private void assertDefaultGlobalExtensionsAreRegistered() {
 
 	private void assertDefaultGlobalExtensionsAreRegistered(long bacCount) {
 		assertExtensionRegistered(registry, DisabledCondition.class);
-		assertExtensionRegistered(registry, ScriptExecutionCondition.class);
 		assertExtensionRegistered(registry, TempDirectory.class);
 		assertExtensionRegistered(registry, TimeoutExtension.class);
 		assertExtensionRegistered(registry, RepeatedTestExtension.class);
@@ -171,7 +170,7 @@ private void assertDefaultGlobalExtensionsAreRegistered(long bacCount) {
 		assertEquals(bacCount, countExtensions(registry, BeforeAllCallback.class));
 		assertEquals(2, countExtensions(registry, BeforeEachCallback.class));
 		assertEquals(3, countExtensions(registry, ParameterResolver.class));
-		assertEquals(2, countExtensions(registry, ExecutionCondition.class));
+		assertEquals(1, countExtensions(registry, ExecutionCondition.class));
 		assertEquals(1, countExtensions(registry, TestTemplateInvocationContextProvider.class));
 		assertEquals(1, countExtensions(registry, InvocationInterceptor.class));
 	}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/StandaloneTests.java
Patch:
@@ -111,7 +111,7 @@ void testWithJarredTestClasses() {
 		var jar = root.resolve(Helper.createJarPath("junit-platform-console-standalone"));
 		var path = new ArrayList<String>();
 		// path.add("bin"); // "exploded" test classes are found, see also test() above
-		path.add(Request.WORKSPACE.resolve("standalone/jar/tests.jar").toString());
+		path.add(Request.WORKSPACE.resolve("standalone/jar/tests.jar").toAbsolutePath().toString());
 		path.add(jar.toString());
 		var result = Request.builder() //
 				.setTool(new Java()) //

File: documentation/src/test/java/example/TimeoutDemo.java
Patch:
@@ -27,7 +27,7 @@ void setUp() {
 
 	@Test
 	@Timeout(value = 100, unit = TimeUnit.MILLISECONDS)
-	void failsIfExecutionTimeExceedsFiveSeconds() {
+	void failsIfExecutionTimeExceeds100Milliseconds() {
 		// fails if execution time exceeds 100 milliseconds
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -169,7 +169,7 @@ private static int getOrder(MethodDescriptor descriptor) {
 	 * <p>By default, the random <em>seed</em> used for ordering methods is the
 	 * value returned by {@link System#nanoTime()} during static initialization
 	 * of this class. In order to support repeatable builds, the value of the
-	 * default random seed is logged at {@code CONFIG} level. In addition, a
+	 * default random seed is logged at {@code INFO} level. In addition, a
 	 * custom seed (potentially the default seed from the previous test plan
 	 * execution) may be specified via the {@link Random#RANDOM_SEED_PROPERTY_NAME
 	 * junit.jupiter.execution.order.random.seed} <em>configuration parameter</em>
@@ -193,7 +193,7 @@ class Random implements MethodOrderer {
 
 		static {
 			DEFAULT_SEED = System.nanoTime();
-			logger.config(() -> "MethodOrderer.Random default seed: " + DEFAULT_SEED);
+			logger.info(() -> "MethodOrderer.Random default seed: " + DEFAULT_SEED);
 		}
 
 		/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.extension.TestInstances;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
+import org.junit.jupiter.engine.extension.ExtensionRegistrar;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
@@ -65,7 +66,7 @@ public ExecutionMode getExecutionMode() {
 
 	@Override
 	protected TestInstances instantiateTestClass(JupiterEngineExecutionContext parentExecutionContext,
-			ExtensionRegistry registry, ExtensionContext extensionContext) {
+			ExtensionRegistry registry, ExtensionRegistrar registrar, ExtensionContext extensionContext) {
 		return instantiateTestClass(Optional.empty(), registry, extensionContext);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -12,13 +12,12 @@
 
 import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.toExecutionMode;
-import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
@@ -49,7 +48,8 @@ public ExecutionMode getExecutionMode() {
 
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {
-		ExtensionRegistry extensionRegistry = createRegistryWithDefaultExtensions(context.getConfiguration());
+		MutableExtensionRegistry extensionRegistry = MutableExtensionRegistry.createRegistryWithDefaultExtensions(
+			context.getConfiguration());
 		EngineExecutionListener executionListener = context.getExecutionListener();
 		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this,
 			context.getConfiguration());

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.ExecutableInvoker.ReflectiveInterceptorCall;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.hierarchical.ExclusiveResource;
@@ -63,8 +63,8 @@ public String getLegacyReportingName() {
 	}
 
 	@Override
-	protected ExtensionRegistry populateNewExtensionRegistry(JupiterEngineExecutionContext context) {
-		ExtensionRegistry registry = super.populateNewExtensionRegistry(context);
+	protected MutableExtensionRegistry populateNewExtensionRegistry(JupiterEngineExecutionContext context) {
+		MutableExtensionRegistry registry = super.populateNewExtensionRegistry(context);
 		invocationContext.getAdditionalExtensions().forEach(
 			extension -> registry.registerExtension(extension, invocationContext));
 		return registry;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
@@ -71,7 +72,7 @@ public boolean mayRegisterTests() {
 
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
-		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(
+		MutableExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(
 			context.getExtensionRegistry(), getTestMethod());
 
 		// The test instance should be properly maintained by the enclosing class's ExtensionContext.

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClasspathResourceSource;
@@ -144,7 +144,7 @@ void before() throws Exception {
 					.extend() //
 					.withThrowableCollector(new OpenTest4JAwareThrowableCollector()) //
 					.withExtensionContext(extensionContext) //
-					.withExtensionRegistry(mock(ExtensionRegistry.class)) //
+					.withExtensionRegistry(mock(MutableExtensionRegistry.class)) //
 					.build();
 
 			Method testMethod = CustomStreamTestCase.class.getDeclaredMethod("customStream");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExecutableInvokerTests.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.jupiter.api.extension.ParameterResolver;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.execution.ExecutableInvoker.ReflectiveInterceptorCall;
-import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.jupiter.engine.extension.MutableExtensionRegistry;
 import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
@@ -53,7 +53,8 @@ class ExecutableInvokerTests {
 
 	private final JupiterConfiguration configuration = mock(JupiterConfiguration.class);
 
-	private ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(configuration);
+	private MutableExtensionRegistry extensionRegistry = MutableExtensionRegistry.createRegistryWithDefaultExtensions(
+		configuration);
 
 	@Test
 	void constructorInjection() {

File: junit-jupiter-engine/src/module/org.junit.jupiter.engine/module-info.java
Patch:
@@ -18,6 +18,8 @@
 
 	// exports org.junit.jupiter.engine; // Constants...
 
+	uses org.junit.jupiter.api.extension.Extension;
+
 	provides org.junit.platform.engine.TestEngine
 			with org.junit.jupiter.engine.JupiterTestEngine;
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledOnJreIntegrationTests.java
Patch:
@@ -95,7 +95,7 @@ void java13() {
 	@Test
 	@DisabledOnJre(JAVA_14)
 	void java14() {
-		assertFalse(onJava13());
+		assertFalse(onJava14());
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextStoreConcurrencyTests.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 5.0
  */
-class ExtensionStoreConcurrencyTests {
+class ExtensionContextStoreConcurrencyTests {
 
 	private final AtomicInteger count = new AtomicInteger();
 

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java
Patch:
@@ -69,9 +69,9 @@ private static List<String> compile(Path temp, Writer out, Writer err) throws Ex
 		var lib = Files.createDirectories(temp.resolve("lib"));
 		Helper.load(lib, "junit", "junit", Helper.version("junit4", "4.12"));
 		Helper.load(lib, "org.assertj", "assertj-core", Helper.version("assertJ", "3.12.2"));
-		Helper.load(lib, "org.apiguardian", "apiguardian-api", Helper.version("apiGuardian", "1.0.0"));
+		Helper.load(lib, "org.apiguardian", "apiguardian-api", "1.0.0"); // TODO Helper.version("apiGuardian", "1.1.0"));
 		Helper.load(lib, "org.hamcrest", "hamcrest", Helper.version("hamcrest", "2.1"));
-		Helper.load(lib, "org.opentest4j", "opentest4j", "1.1.1"); // TODO Helper.version("ota4j", "1.1.1")
+		Helper.load(lib, "org.opentest4j", "opentest4j", "1.1.1"); // TODO Helper.version("ota4j", "1.2.0")
 		Helper.loadAllJUnitModules(lib);
 		args.add("--module-path");
 		args.add(lib.toString());

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -30,6 +30,8 @@
  * <p>Consult the documentation in {@link Extension} for details on
  * constructor requirements.
  *
+ * @see LifecycleMethodExecutionExceptionHandler
+ *
  * @since 5.0
  */
 @FunctionalInterface

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/JupiterConfiguration.java
Patch:
@@ -30,6 +30,7 @@ public interface JupiterConfiguration {
 	String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = "junit.jupiter.conditions.deactivate";
 	String PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME = "junit.jupiter.execution.parallel.enabled";
 	String DEFAULT_EXECUTION_MODE_PROPERTY_NAME = "junit.jupiter.execution.parallel.mode.default";
+	String DEFAULT_CLASSES_EXECUTION_MODE_PROPERTY_NAME = "junit.jupiter.execution.parallel.mode.classes.default";
 	String EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME = "junit.jupiter.extensions.autodetection.enabled";
 	String DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME = "junit.jupiter.testinstance.lifecycle.default";
 	String DEACTIVATE_ALL_CONDITIONS_PATTERN = ClassNamePatternParameterConverter.DEACTIVATE_ALL_PATTERN;
@@ -54,6 +55,8 @@ public interface JupiterConfiguration {
 
 	ExecutionMode getDefaultExecutionMode();
 
+	ExecutionMode getDefaultClassesExecutionMode();
+
 	TestInstance.Lifecycle getDefaultTestInstanceLifecycle();
 
 	Predicate<ExecutionCondition> getExecutionConditionFilter();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -98,7 +98,7 @@ protected static Set<TestTag> getTags(AnnotatedElement element) {
 	// --- Node ----------------------------------------------------------------
 
 	@Override
-	public final ExecutionMode getExecutionMode() {
+	public ExecutionMode getExecutionMode() {
 		Optional<ExecutionMode> executionMode = getExplicitExecutionMode();
 		if (executionMode.isPresent()) {
 			return executionMode.get();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/MethodSelectorResolver.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.stream.Stream;
 
 import org.junit.jupiter.engine.config.JupiterConfiguration;
-import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
+import org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor;
 import org.junit.jupiter.engine.descriptor.Filterable;
 import org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor;
 import org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor;
@@ -177,7 +177,7 @@ private Optional<TestDescriptor> resolveUniqueIdIntoTestDescriptor(UniqueId uniq
 			if (segmentType.equals(lastSegment.getType())) {
 				return context.addToParent(() -> selectUniqueId(uniqueId.removeLastSegment()), parent -> {
 					String methodSpecPart = lastSegment.getValue();
-					Class<?> testClass = ((ClassTestDescriptor) parent).getTestClass();
+					Class<?> testClass = ((ClassBasedTestDescriptor) parent).getTestClass();
 					// @formatter:off
 					return methodFinder.findMethod(methodSpecPart, testClass)
 							.filter(methodPredicate)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -55,6 +55,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestFactory;
 import org.junit.jupiter.api.TestTemplate;
+import org.junit.jupiter.api.parallel.ExecutionMode;
 import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.jupiter.engine.config.JupiterConfiguration;
 import org.junit.jupiter.engine.descriptor.DynamicDescendantFilter;
@@ -90,6 +91,7 @@ class DiscoverySelectorResolverTests {
 	@BeforeEach
 	void setUp() {
 		when(configuration.getDefaultDisplayNameGenerator()).thenReturn(new DisplayNameGenerator.Standard());
+		when(configuration.getDefaultExecutionMode()).thenReturn(ExecutionMode.SAME_THREAD);
 	}
 
 	@Test

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -54,6 +54,7 @@ public class ExtensionRegistry {
 		new DisabledCondition(), //
 		newScriptExecutionCondition(), //
 		new TempDirectory(), //
+		new TimeoutExtension(), //
 		new RepeatedTestExtension(), //
 		new TestInfoParameterResolver(), //
 		new TestReporterParameterResolver()));

File: junit-jupiter-engine/src/module/org.junit.jupiter.engine/module-info.java
Patch:
@@ -20,4 +20,6 @@
 
 	provides org.junit.platform.engine.TestEngine
 			with org.junit.jupiter.engine.JupiterTestEngine;
+
+	opens org.junit.jupiter.engine.extension to org.junit.platform.commons;
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -80,7 +80,7 @@ class AvailableOptions {
 	private List<Path> additionalClasspathEntries2 = new ArrayList<>();
 
 	@Option(names = "--fail-if-no-tests", description = "Fail and return exit status code 2 if no tests are found.")
-	private boolean failIfNoTests; // no single-dash equivelent: was introduced in 5.3-M1
+	private boolean failIfNoTests; // no single-dash equivalent: was introduced in 5.3-M1
 
 	// --- Reports ---------------------------------------------------------
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -95,7 +95,7 @@ public class ClassTestDescriptor extends JupiterTestDescriptor {
 	private List<Method> afterAllMethods;
 
 	public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass, JupiterConfiguration configuration) {
-		this(uniqueId, testClass, createDisplayNameSupplierForClass(testClass), configuration);
+		this(uniqueId, testClass, createDisplayNameSupplierForClass(testClass, configuration), configuration);
 	}
 
 	ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass, Supplier<String> displayNameSupplier,

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestDescriptor.java
Patch:
@@ -47,7 +47,8 @@ public abstract class MethodBasedTestDescriptor extends JupiterTestDescriptor {
 
 	MethodBasedTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method testMethod,
 			JupiterConfiguration configuration) {
-		this(uniqueId, determineDisplayNameForMethod(testClass, testMethod), testClass, testMethod, configuration);
+		this(uniqueId, determineDisplayNameForMethod(testClass, testMethod, configuration), testClass, testMethod,
+			configuration);
 	}
 
 	MethodBasedTestDescriptor(UniqueId uniqueId, String displayName, Class<?> testClass, Method testMethod,

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -47,7 +47,7 @@ public class NestedClassTestDescriptor extends ClassTestDescriptor {
 	private final Set<TestTag> tags;
 
 	public NestedClassTestDescriptor(UniqueId uniqueId, Class<?> testClass, JupiterConfiguration configuration) {
-		super(uniqueId, testClass, createDisplayNameSupplierForNestedClass(testClass), configuration);
+		super(uniqueId, testClass, createDisplayNameSupplierForNestedClass(testClass, configuration), configuration);
 
 		this.tags = getTags(testClass);
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptorTests.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.reflect.Method;
 
+import org.junit.jupiter.api.DisplayNameGenerator;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestTemplate;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
@@ -31,6 +32,7 @@ void invocationsDoNotDeclareExclusiveResources() throws Exception {
 		Class<MyTestCase> testClass = MyTestCase.class;
 		Method testTemplateMethod = testClass.getDeclaredMethod("testTemplate");
 		JupiterConfiguration configuration = mock(JupiterConfiguration.class);
+		when(configuration.getDefaultDisplayNameGenerator()).thenReturn(new DisplayNameGenerator.Standard());
 		TestTemplateTestDescriptor parent = new TestTemplateTestDescriptor(UniqueId.root("segment", "template"),
 			testClass, testTemplateMethod, configuration);
 		TestTemplateInvocationContext invocationContext = mock(TestTemplateInvocationContext.class);

File: junit-jupiter-api/src/module/org.junit.jupiter.api/module-info.java
Patch:
@@ -19,4 +19,6 @@
 	exports org.junit.jupiter.api.function;
 	exports org.junit.jupiter.api.io;
 	exports org.junit.jupiter.api.parallel;
+
+	opens org.junit.jupiter.api.condition to org.junit.platform.commons;
 }

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/GradleStarterTests.java
Patch:
@@ -39,7 +39,7 @@ void gradle_wrapper() {
 
 		assumeFalse(result.isTimedOut(), () -> "tool timed out: " + result);
 
-		assertEquals(0, result.getExitCode());
+		assertEquals(0, result.getExitCode(), result.toString());
 		assertTrue(result.getOutputLines("out").stream().anyMatch(line -> line.contains("BUILD SUCCESSFUL")));
 	}
 }

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/JarDescribeModuleTests.java
Patch:
@@ -58,7 +58,8 @@ void describeModule(String module) throws Exception {
 			fail("No such file: " + expected);
 		}
 		var expectedLines = Files.lines(expected).map(Helper::replaceVersionPlaceholders).collect(Collectors.toList());
-		assertLinesMatch(expectedLines, result.getOutputLines("out"));
+		var origin = Path.of("projects", "jar-describe-module", module + ".expected.txt").toUri();
+		assertLinesMatch(expectedLines, result.getOutputLines("out"), () -> String.format("%s\nError", origin));
 	}
 
 	@ParameterizedTest

File: platform-tests/src/test/java/org/junit/platform/commons/util/ModuleUtilsTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -22,6 +23,7 @@
 class ModuleUtilsTests {
 
 	@Test
+	@Disabled("modules")
 	void isJavaPlatformModuleSystemAvailable() {
 		boolean expected;
 		try {

File: platform-tooling-support-tests/projects/multi-release-jar/no-scripting/src/test/java/integration/module-info.java
Patch:
@@ -4,4 +4,5 @@
 	requires org.junit.platform.commons;
 	requires org.junit.platform.engine;
 	requires org.junit.platform.launcher;
+	requires org.junit.platform.reporting;
 }

File: platform-tooling-support-tests/src/main/java/platform/tooling/support/Helper.java
Patch:
@@ -77,7 +77,6 @@ public static List<String> loadModuleDirectoryNames() {
 				.map(matcher -> matcher.group(1)) //
 				.filter(name -> name.startsWith("junit-")) //
 				.filter(name -> !name.equals("junit-bom")) //
-				.filter(name -> !name.equals("junit-platform-commons-java-9")) //
 				.filter(name -> !name.equals("junit-platform-console-standalone"))) {
 			return stream.collect(Collectors.toList());
 		}

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ManifestTests.java
Patch:
@@ -43,7 +43,7 @@ void manifestEntriesAdhereToConventions(String module) throws Exception {
 			assertValue(attributes, "Implementation-Title", module);
 			assertValue(attributes, "Implementation-Version", version);
 			assertValue(attributes, "Implementation-Vendor", "junit.org");
-			assertValue(attributes, "Automatic-Module-Name", "org." + module.replace('-', '.'));
+			assertValue(attributes, "Automatic-Module-Name", null);
 			switch (module) {
 				case "junit-platform-commons":
 					assertValue(attributes, "Multi-Release", "true");

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/PackageCyclesDetectionTests.java
Patch:
@@ -15,6 +15,7 @@
 import de.sormuras.bartholdy.Configuration;
 import de.sormuras.bartholdy.tool.CyclesDetector;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 import platform.tooling.support.Helper;
@@ -26,6 +27,7 @@ class PackageCyclesDetectionTests {
 
 	@ParameterizedTest
 	@MethodSource("platform.tooling.support.Helper#loadModuleDirectoryNames")
+	@Disabled("Need to pass --module-path...")
 	void moduleDoesNotContainCyclicPackageReferences(String module) {
 		var jar = Helper.createJarPath(module);
 		var result = new CyclesDetector(jar, this::ignore).run(Configuration.of());

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -45,7 +45,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		settings.getFormat().setLineSeparator(LINE_SEPARATOR);
 		settings.getFormat().setQuote('\'');
 		settings.getFormat().setQuoteEscape('\'');
-		settings.setEmptyValue("");
+		settings.setEmptyValue(this.annotation.emptyValue());
 		settings.setAutoConfigurationEnabled(false);
 		CsvParser csvParser = new CsvParser(settings);
 		AtomicLong index = new AtomicLong(0);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -72,7 +72,7 @@ public void accept(CsvFileSource annotation) {
 		settings.getFormat().setLineSeparator(annotation.lineSeparator());
 		settings.getFormat().setQuote('"');
 		settings.getFormat().setQuoteEscape('"');
-		settings.setEmptyValue("");
+		settings.setEmptyValue(annotation.emptyValue());
 		settings.setAutoConfigurationEnabled(false);
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -73,7 +73,7 @@ private String prepareMessageFormatPattern(int invocationIndex, Object[] argumen
 
 	private Object[] makeReadable(MessageFormat format, Object[] arguments) {
 		Format[] formats = format.getFormatsByArgumentIndex();
-		Object[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length));
+		Object[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length), Object[].class);
 		for (int i = 0; i < result.length; i++) {
 			if (formats[i] == null) {
 				result[i] = StringUtils.nullSafeToString(arguments[i]);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -73,7 +73,7 @@ private String prepareMessageFormatPattern(int invocationIndex, Object[] argumen
 
 	private Object[] makeReadable(MessageFormat format, Object[] arguments) {
 		Format[] formats = format.getFormatsByArgumentIndex();
-		Object[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length));
+		Object[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length), Object[].class);
 		for (int i = 0; i < result.length; i++) {
 			if (formats[i] == null) {
 				result[i] = StringUtils.nullSafeToString(arguments[i]);

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/VerboseTreePrintingListener.java
Patch:
@@ -120,7 +120,7 @@ public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		printVerticals(theme.entry());
 		printf(Color.DYNAMIC, " %s", testIdentifier.getDisplayName());
-		printf(NONE, "%s", " dynamically registered%n");
+		printf(NONE, "%s%n", " dynamically registered");
 	}
 
 	@Override

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/VerboseTreePrintingListener.java
Patch:
@@ -120,7 +120,7 @@ public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		printVerticals(theme.entry());
 		printf(Color.DYNAMIC, " %s", testIdentifier.getDisplayName());
-		printf(NONE, "%s", " dynamically registered%n");
+		printf(NONE, "%s%n", " dynamically registered");
 	}
 
 	@Override

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/ClassSelectorResolver.java
Patch:
@@ -78,4 +78,5 @@ private RunnerTestDescriptor createRunnerTestDescriptor(TestDescriptor parent, C
 		UniqueId uniqueId = parent.getUniqueId().append(SEGMENT_TYPE_RUNNER, testClass.getName());
 		return new RunnerTestDescriptor(uniqueId, testClass, runner);
 	}
+
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java
Patch:
@@ -37,13 +37,13 @@ static void assertFalse(boolean condition) {
 
 	static void assertFalse(boolean condition, String message) {
 		if (condition) {
-			fail(buildPrefix(message) + EXPECTED_FALSE);
+			fail(buildPrefix(message) + EXPECTED_FALSE, false, true);
 		}
 	}
 
 	static void assertFalse(boolean condition, Supplier<String> messageSupplier) {
 		if (condition) {
-			fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_FALSE);
+			fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_FALSE, false, true);
 		}
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java
Patch:
@@ -37,13 +37,13 @@ static void assertTrue(boolean condition) {
 
 	static void assertTrue(boolean condition, String message) {
 		if (!condition) {
-			fail(buildPrefix(message) + EXPECTED_TRUE);
+			fail(buildPrefix(message) + EXPECTED_TRUE, true, false);
 		}
 	}
 
 	static void assertTrue(boolean condition, Supplier<String> messageSupplier) {
 		if (!condition) {
-			fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_TRUE);
+			fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_TRUE, true, false);
 		}
 	}
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/StringUtilsTests.java
Patch:
@@ -108,7 +108,7 @@ void replaceControlCharacters() {
 	}
 
 	@Test
-	void replacWhitespaceCharacters() {
+	void replaceWhitespaces() {
 		assertNull(replaceWhitespaceCharacters(null, ""));
 		assertEquals("", replaceWhitespaceCharacters("", "."));
 		assertEquals("", replaceWhitespaceCharacters("\t\n\r", ""));

File: platform-tests/src/test/java/org/junit/platform/commons/util/StringUtilsTests.java
Patch:
@@ -108,7 +108,7 @@ void replaceControlCharacters() {
 	}
 
 	@Test
-	void replacWhitespaceCharacters() {
+	void replaceWhitespaces() {
 		assertNull(replaceWhitespaceCharacters(null, ""));
 		assertEquals("", replaceWhitespaceCharacters("", "."));
 		assertEquals("", replaceWhitespaceCharacters("\t\n\r", ""));

File: documentation/src/test/java/example/callbacks/AbstractDatabaseTests.java
Patch:
@@ -10,6 +10,8 @@
 
 package example.callbacks;
 
+// tag::user_guide[]
+
 import static example.callbacks.Logger.afterAllMethod;
 import static example.callbacks.Logger.afterEachMethod;
 import static example.callbacks.Logger.beforeAllMethod;
@@ -46,3 +48,4 @@ static void destroyDatabase() {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/callbacks/BrokenLifecycleMethodConfigDemo.java
Patch:
@@ -10,6 +10,8 @@
 
 package example.callbacks;
 
+// tag::user_guide[]
+
 import static example.callbacks.Logger.afterEachMethod;
 import static example.callbacks.Logger.beforeEachMethod;
 import static example.callbacks.Logger.testMethod;
@@ -55,3 +57,4 @@ void disconnectFromDatabase() {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/callbacks/DatabaseTestsDemo.java
Patch:
@@ -10,6 +10,8 @@
 
 package example.callbacks;
 
+// tag::user_guide[]
+
 import static example.callbacks.Logger.afterEachMethod;
 import static example.callbacks.Logger.beforeAllMethod;
 import static example.callbacks.Logger.beforeEachMethod;
@@ -56,3 +58,4 @@ static void afterAll() {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/callbacks/Extension1.java
Patch:
@@ -10,6 +10,8 @@
 
 package example.callbacks;
 
+// tag::user_guide[]
+
 import static example.callbacks.Logger.afterEachCallback;
 import static example.callbacks.Logger.beforeEachCallback;
 
@@ -30,3 +32,4 @@ public void afterEach(ExtensionContext context) {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/callbacks/Extension2.java
Patch:
@@ -10,6 +10,8 @@
 
 package example.callbacks;
 
+// tag::user_guide[]
+
 import static example.callbacks.Logger.afterEachCallback;
 import static example.callbacks.Logger.beforeEachCallback;
 
@@ -30,3 +32,4 @@ public void afterEach(ExtensionContext context) {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/callbacks/BrokenLifecycleMethodConfigDemo.java
Patch:
@@ -45,8 +45,8 @@ void testDatabaseFunctionality() {
 	}
 
 	@AfterEach
-	void deleteTestDataInDatabase() {
-		afterEachMethod(getClass().getSimpleName() + ".deleteTestDataInDatabase()");
+	void deleteTestDataFromDatabase() {
+		afterEachMethod(getClass().getSimpleName() + ".deleteTestDataFromDatabase()");
 	}
 
 	@AfterEach

File: documentation/src/test/java/example/callbacks/DatabaseTestsDemo.java
Patch:
@@ -46,13 +46,13 @@ void testDatabaseFunctionality() {
 	}
 
 	@AfterEach
-	void deleteTestDataInDatabase() {
-		afterEachMethod(getClass().getSimpleName() + ".deleteTestDataInDatabase()");
+	void deleteTestDataFromDatabase() {
+		afterEachMethod(getClass().getSimpleName() + ".deleteTestDataFromDatabase()");
 	}
 
 	@AfterAll
 	static void afterAll() {
-		beforeAllMethod(DatabaseTestsDemo.class.getSimpleName() + ".beforeAll()");
+		beforeAllMethod(DatabaseTestsDemo.class.getSimpleName() + ".afterAll()");
 	}
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -42,7 +42,7 @@
  *
  * <p>{@code @AfterAll} methods are inherited from superclasses as long as
  * they are not <em>hidden</em> or <em>overridden</em>. Furthermore,
- * {@code @AfterAll} methods from superclasses will be executed before
+ * {@code @AfterAll} methods from superclasses will be executed after
  * {@code @AfterAll} methods in subclasses.
  *
  * <h3>Composition</h3>

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TempDirectoryTests.java
Patch:
@@ -257,8 +257,9 @@ void onlySupportsParametersOfTypePathAndFile() {
 			TempDirectoryTests.assertSingleFailedTest(results,
 				instanceOf(ParameterResolutionException.class),
 				message(m -> m.matches("Failed to resolve parameter \\[java.lang.String .+\\] in method \\[.+\\]: .+")),
-					cause(instanceOf(ExtensionConfigurationException.class)),
-					cause(message("Can only resolve @TempDir parameter of type java.nio.file.Path or java.io.File but was: java.lang.String")));
+				cause(
+					instanceOf(ExtensionConfigurationException.class),
+					message("Can only resolve @TempDir parameter of type java.nio.file.Path or java.io.File but was: java.lang.String")));
 			// @formatter:on
 		}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TempDirectoryTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.jupiter.api.support.io;
+package org.junit.jupiter.engine.extension;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/io/TempDir.java
Patch:
@@ -57,8 +57,8 @@
  * the test method or class has finished execution, JUnit will attempt to
  * recursively delete all files and directories in the temporary directory
  * and, finally, the temporary directory itself. In case deletion of a file or
- * directory fails, this extension will throw an {@link IOException} that will
- * cause the test or test class to fail.
+ * directory fails, an {@link IOException} will be thrown that will cause the
+ * test or test class to fail.
  *
  * @since 5.4
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -53,6 +53,7 @@ public class ExtensionRegistry {
 	private static final List<Extension> DEFAULT_EXTENSIONS = Collections.unmodifiableList(Arrays.asList(//
 		new DisabledCondition(), //
 		new ScriptExecutionCondition(), //
+		new TempDirectory(), //
 		new RepeatedTestExtension(), //
 		new TestInfoParameterResolver(), //
 		new TestReporterParameterResolver()));

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -34,9 +34,7 @@
 import java.util.stream.Collectors;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.api.support.io.TempDirectory;
 import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.function.Try;
 import org.junit.platform.commons.logging.LogRecordListener;
@@ -268,7 +266,6 @@ void findAllClassesInDefaultPackageInClasspathRoot() throws Exception {
 	}
 
 	@Test
-	@ExtendWith(TempDirectory.class)
 	void doesNotLoopInfinitelyWithCircularSymlinks(@TempDir Path tempDir) throws Exception {
 
 		// Abort if running on Microsoft Windows since we are testing symbolic links

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -48,9 +48,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.api.support.io.TempDirectory;
 import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.logging.LogRecordListener;
@@ -611,7 +609,6 @@ void getOutermostInstance() {
 	}
 
 	@Test
-	@ExtendWith(TempDirectory.class)
 	void getAllClasspathRootDirectories(@TempDir Path tempDirectory) throws Exception {
 		Path root1 = tempDirectory.resolve("root1").toAbsolutePath();
 		Path root2 = tempDirectory.resolve("root2").toAbsolutePath();

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java
Patch:
@@ -39,9 +39,7 @@
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.api.support.io.TempDirectory;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
@@ -574,7 +572,6 @@ void selectClasspathRootsWithNonExistingJarFile() {
 	}
 
 	@Test
-	@ExtendWith(TempDirectory.class)
 	void selectClasspathRootsWithExistingDirectory(@TempDir Path tempDir) {
 		List<ClasspathRootSelector> selectors = selectClasspathRoots(singleton(tempDir));
 

File: platform-tests/src/test/java/org/junit/platform/reporting/legacy/xml/LegacyXmlReportGeneratingListenerTests.java
Patch:
@@ -41,9 +41,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
-import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
-import org.junit.jupiter.api.support.io.TempDirectory;
 import org.junit.platform.engine.TestEngine;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
@@ -62,7 +60,6 @@
  *
  * @since 1.0
  */
-@ExtendWith(TempDirectory.class)
 class LegacyXmlReportGeneratingListenerTests {
 
 	@Test

File: documentation/src/test/java/example/TempDirectoryDemo.java
Patch:
@@ -21,8 +21,8 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.support.io.TempDirectory;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
 
 class TempDirectoryDemo {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -47,7 +47,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.ExtensionConfigurationException;
 import org.junit.jupiter.api.extension.ParameterResolutionException;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.platform.testkit.engine.EngineExecutionResults;
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -35,8 +35,8 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.support.io.TempDirectory;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
 import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.function.Try;
 import org.junit.platform.commons.logging.LogRecordListener;

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -49,8 +49,8 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.support.io.TempDirectory;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
 import org.junit.jupiter.engine.TrackLogRecords;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.logging.LogRecordListener;

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java
Patch:
@@ -40,8 +40,8 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.support.io.TempDirectory;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;

File: platform-tests/src/test/java/org/junit/platform/reporting/legacy/xml/LegacyXmlReportGeneratingListenerTests.java
Patch:
@@ -42,8 +42,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.support.io.TempDirectory;
-import org.junit.jupiter.api.support.io.TempDirectory.TempDir;
 import org.junit.platform.engine.TestEngine;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -353,7 +353,7 @@ void erroneousParentDirProviderMakesTestFail() {
 		@Test
 		@DisplayName("when @TempDir is used on constructor parameter")
 		@Order(8)
-		void resolvesSharedTempDirWhenAnnotationIsUsedOnConstructorParameter() {
+		void doesNotSupportTempDirAnnotationOnConstructorParameter() {
 			var results = executeTestsForClass(AnnotationOnConstructorParameterTestCase.class);
 
 			assertSingleFailedTest(results, ParameterResolutionException.class,
@@ -363,7 +363,7 @@ void resolvesSharedTempDirWhenAnnotationIsUsedOnConstructorParameter() {
 		@Test
 		@DisplayName("when @TempDir is used on constructor parameter with @TestInstance(PER_CLASS)")
 		@Order(9)
-		void resolvesSharedTempDirWhenAnnotationIsUsedOnConstructorParameterWithTestInstancePerClass() {
+		void doesNotSupportTempDirAnnotationOnConstructorParameterWithTestInstancePerClass() {
 			var results = executeTestsForClass(AnnotationOnConstructorParameterWithTestInstancePerClassTestCase.class);
 
 			assertSingleFailedContainer(results, ParameterResolutionException.class,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/support/io/TempDirectory.java
Patch:
@@ -394,11 +394,12 @@ private void assertValidFieldCandidate(Field field) {
 	 */
 	@Override
 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
-		if (parameterContext.getDeclaringExecutable() instanceof Constructor) {
+		boolean annotated = parameterContext.isAnnotated(TempDir.class);
+		if (annotated && parameterContext.getDeclaringExecutable() instanceof Constructor) {
 			throw new ParameterResolutionException(
 				"@TempDir is not supported on constructor parameters. Please use field injection instead.");
 		}
-		return parameterContext.isAnnotated(TempDir.class);
+		return annotated;
 	}
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -225,15 +225,15 @@ public static List<Object> findAnnotatedFieldValues(Object object, Class<? exten
 	 * or <em>meta-annotated</em> with the specified {@code annotationType}.
 	 *
 	 * @param object the instance in which to find the fields; never {@code null}
-	 * @param fieldType the type of field to find; never {@code null}
 	 * @param annotationType the annotation type to search for; never {@code null}
+	 * @param fieldType the type of field to find; never {@code null}
 	 * @return the list of all such field values found; neither {@code null} nor mutable
 	 * @since 1.4
 	 * @see Class#getFields()
 	 */
 	@API(status = MAINTAINED, since = "1.4")
-	public static <T> List<T> findAnnotatedFieldValues(Object object, Class<T> fieldType,
-			Class<? extends Annotation> annotationType) {
+	public static <T> List<T> findAnnotatedFieldValues(Object object, Class<? extends Annotation> annotationType,
+			Class<T> fieldType) {
 
 		return ReflectionUtils.getFieldValues(findAnnotatedFields(object.getClass(), annotationType), object,
 			fieldType);

File: documentation/src/test/java/example/TempDirectoryDemo.java
Patch:
@@ -43,7 +43,7 @@ void writeItemsToFile(@TempDir Path tempDir) throws IOException {
 	// end::user_guide_field_injection[]
 	static
 	// tag::user_guide_field_injection[]
-	class FieldInjection {
+	class SharedTempDirectoryDemo {
 
 		@TempDir
 		static Path sharedTempDir;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -494,7 +494,7 @@ static class ParentDirFromProviderTestCase extends BaseSeparateTempDirsTestCase
 
 		@RegisterExtension
 		@SuppressWarnings("unused")
-		Extension tempDirectory = TempDirectory.createInCustomDirectory((parameterContext, extensionContext) -> {
+		Extension tempDirectory = TempDirectory.createInCustomDirectory((tempDirContext, extensionContext) -> {
 			Store store = extensionContext.getRoot().getStore(Namespace.GLOBAL);
 			FileSystem fileSystem = store.getOrComputeIfAbsent("jimfs.fileSystem", key -> new JimfsFileSystemResource(),
 				JimfsFileSystemResource.class).get();

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -556,7 +556,7 @@ public static Try<Object> tryToReadFieldValue(Field field) {
 	 */
 	@API(status = DEPRECATED, since = "1.4")
 	@Deprecated
-	public static <T> Optional<Object> readFieldValue(Field field, T instance) {
+	public static Optional<Object> readFieldValue(Field field, Object instance) {
 		return tryToReadFieldValue(field, instance).toOptional();
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -167,7 +167,8 @@ class Failures {
 		void onlySupportsParametersOfTypeFileForDefaultFileSystem() {
 			var results = executeTests(selectClass(InvalidFileInjection.class));
 
-			assertSingleFailedTest(results, ParameterResolutionException.class, "Unsupported FileSystem");
+			assertSingleFailedTest(results, ParameterResolutionException.class,
+				"The configured FileSystem does not support conversion to a java.io.File; declare a java.nio.file.Path instead.");
 		}
 
 		@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -167,8 +167,7 @@ class Failures {
 		void onlySupportsParametersOfTypeFileForDefaultFileSystem() {
 			var results = executeTests(selectClass(InvalidFileInjection.class));
 
-			assertSingleFailedTest(results, ParameterResolutionException.class,
-				"Unsupported FileSystem in tempDirProvider: org.junit.jupiter.api.support.io.TempDirectory"/*lambda*/);
+			assertSingleFailedTest(results, ParameterResolutionException.class, "Unsupported FileSystem");
 		}
 
 		@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/support/io/TempDirectory.java
Patch:
@@ -70,7 +70,7 @@
  * {@link java.nio.file.FileSystem FileSystem} to create temporary directories
  * in the default location. However, you may instantiate this extension using
  * the {@link TempDirectory#createInCustomDirectory(ParentDirProvider)}
- * or {@link TempDirectory#createInCustomDirectory(Callable)}} factory methods
+ * or {@link TempDirectory#createInCustomDirectory(Callable)} factory methods
  * and register it via {@link org.junit.jupiter.api.extension.RegisterExtension @RegisterExtension}
  * to pass a custom provider to configure the parent directory for all temporary
  * directories created by this extension. This allows the use of this extension

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -189,9 +189,8 @@ private void execute(InternalTestPlan internalTestPlan, TestExecutionListener[]
 		ConfigurationParameters configurationParameters = root.getConfigurationParameters();
 		TestExecutionListenerRegistry listenerRegistry = buildListenerRegistryForExecution(listeners);
 		withInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -> {
-			TestPlan testPlan = internalTestPlan.getDelegate();
 			testExecutionListener.testPlanExecutionStarted(internalTestPlan);
-			ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan,
+			ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(internalTestPlan,
 				testExecutionListener);
 			for (TestEngine testEngine : root.getTestEngines()) {
 				TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ExecutionListenerAdapter.java
Patch:
@@ -26,18 +26,18 @@
  */
 class ExecutionListenerAdapter implements EngineExecutionListener {
 
-	private final TestPlan testPlan;
+	private final InternalTestPlan testPlan;
 	private final TestExecutionListener testExecutionListener;
 
-	ExecutionListenerAdapter(TestPlan testPlan, TestExecutionListener testExecutionListener) {
+	ExecutionListenerAdapter(InternalTestPlan testPlan, TestExecutionListener testExecutionListener) {
 		this.testPlan = testPlan;
 		this.testExecutionListener = testExecutionListener;
 	}
 
 	@Override
 	public void dynamicTestRegistered(TestDescriptor testDescriptor) {
 		TestIdentifier testIdentifier = TestIdentifier.from(testDescriptor);
-		this.testPlan.add(testIdentifier);
+		this.testPlan.addInternal(testIdentifier);
 		this.testExecutionListener.dynamicTestRegistered(testIdentifier);
 	}
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -517,6 +517,7 @@ void launcherCanExecuteTestPlan() {
 	}
 
 	@Test
+	@SuppressWarnings("deprecation")
 	void testPlanWarnsWhenModified(LogRecordListener listener) {
 		TestEngine engine = new TestEngineSpy();
 		DefaultLauncher launcher = createLauncher(engine);

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/SummaryGenerationTests.java
Patch:
@@ -182,13 +182,15 @@ public Optional<TestSource> getSource() {
 		);
 	}
 
+	@SuppressWarnings("deprecation")
 	private TestIdentifier createTestIdentifier(String uniqueId) {
 		TestIdentifier identifier = TestIdentifier.from(
 			new TestDescriptorStub(UniqueId.root("test", uniqueId), uniqueId));
 		testPlan.add(identifier);
 		return identifier;
 	}
 
+	@SuppressWarnings("deprecation")
 	private TestIdentifier createContainerIdentifier(String uniqueId) {
 		TestIdentifier identifier = TestIdentifier.from(
 			new TestDescriptorStub(UniqueId.root("container", uniqueId), uniqueId) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestWatcher.java
Patch:
@@ -27,7 +27,7 @@
  * methods in this API are invoked.
  *
  * <p>Please note that this API is currently only used to report the results of
- * method-based tests.
+ * {@link org.junit.jupiter.api.Test @Test} methods.
  *
  * <p>Extensions implementing this API can be registered at any level.
  *
@@ -36,7 +36,7 @@
  * <p>In contrast to other {@link Extension} APIs, a {@code TestWatcher} is not
  * permitted to adversely influence the execution of tests. Consequently, any
  * exception thrown by a {@code TestWatcher} will be logged at {@code WARNING}
- * level and will not allowed to propagate or fail test execution.
+ * level and will not be allowed to propagate or fail test execution.
  *
  * @since 5.4
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -104,6 +104,9 @@ static void registerExtensionsFromFields(ExtensionRegistry registry, Class<?> cl
 
 		fields.forEach(field -> {
 			tryToReadFieldValue(field, instance).ifSuccess(value -> {
+				Preconditions.notNull(value, () -> String.format(
+					"Failed to register extension via @RegisterExtension field [%s]: field must not be null when evaluated.",
+					field));
 				Extension extension = (Extension) value;
 				registry.registerExtension(extension, field);
 			});

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContext.java
Patch:
@@ -60,7 +60,7 @@ default String getDisplayName(int invocationIndex) {
 	 * <p>The default implementation returns an empty list.
 	 *
 	 * @return the additional extensions for this invocation; never {@code null}
-	 * but potentially empty
+	 * or containing {@code null} elements, but potentially empty
 	 */
 	default List<Extension> getAdditionalExtensions() {
 		return emptyList();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EmptySource.java
Patch:
@@ -41,6 +41,8 @@
  * @since 5.4
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.ParameterizedTest
+ * @see NullSource
+ * @see NullAndEmptySource
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/NullSource.java
Patch:
@@ -30,6 +30,8 @@
  * @since 5.4
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.ParameterizedTest
+ * @see EmptySource
+ * @see NullAndEmptySource
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -48,6 +48,7 @@
  * via {@link RegisterExtension @RegisterExtension} in the {@link JupiterTestEngine}.
  *
  * @since 5.1
+ * @see OrderedProgrammaticExtensionRegistrationTests
  */
 class ProgrammaticExtensionRegistrationTests extends AbstractJupiterTestEngineTests {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -48,6 +48,7 @@
  * via {@link RegisterExtension @RegisterExtension} in the {@link JupiterTestEngine}.
  *
  * @since 5.1
+ * @see OrderedProgrammaticExtensionRegistrationTests
  */
 class ProgrammaticExtensionRegistrationTests extends AbstractJupiterTestEngineTests {
 

File: documentation/src/test/java/example/SharedResourcesDemo.java
Patch:
@@ -50,16 +50,17 @@ void customPropertyIsNotSetByDefault() {
 
 	@Test
 	@ResourceLock(value = SYSTEM_PROPERTIES, mode = READ_WRITE)
-	void canSetCustomPropertyToFoo() {
+	void canSetCustomPropertyToApple() {
 		System.setProperty("my.prop", "apple");
 		assertEquals("apple", System.getProperty("my.prop"));
 	}
 
 	@Test
 	@ResourceLock(value = SYSTEM_PROPERTIES, mode = READ_WRITE)
-	void canSetCustomPropertyToBar() {
+	void canSetCustomPropertyToBanana() {
 		System.setProperty("my.prop", "banana");
 		assertEquals("banana", System.getProperty("my.prop"));
 	}
+
 }
 // end::user_guide[]

File: documentation/src/test/java/example/TestingAStackDemo.java
Patch:
@@ -53,13 +53,13 @@ void isEmpty() {
 		@Test
 		@DisplayName("throws EmptyStackException when popped")
 		void throwsExceptionWhenPopped() {
-			assertThrows(EmptyStackException.class, () -> stack.pop());
+			assertThrows(EmptyStackException.class, stack::pop);
 		}
 
 		@Test
 		@DisplayName("throws EmptyStackException when peeked")
 		void throwsExceptionWhenPeeked() {
-			assertThrows(EmptyStackException.class, () -> stack.peek());
+			assertThrows(EmptyStackException.class, stack::peek);
 		}
 
 		@Nested

File: documentation/src/test/java/example/HamcrestAssertionsDemo.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class HamcrestAssertionDemo {
+class HamcrestAssertionsDemo {
 
 	private final Calculator calculator = new Calculator();
 

File: documentation/src/main/java/example/util/Calculator.java
Patch:
@@ -25,9 +25,6 @@ public int multiply(int a, int b) {
 	}
 
 	public int divide(int a, int b) {
-		if (b == 0) {
-			throw new IllegalArgumentException("Division by zero is not allowed!");
-		}
 		return a / b;
 	}
 

File: documentation/src/main/java/example/util/Calculator.java
Patch:
@@ -25,6 +25,9 @@ public int multiply(int a, int b) {
 	}
 
 	public int divide(int a, int b) {
+		if (b == 0) {
+			throw new IllegalArgumentException("Division by zero is not allowed!");
+		}
 		return a / b;
 	}
 

File: documentation/src/test/java/example/AssertionsDemo.java
Patch:
@@ -85,9 +85,9 @@ void dependentAssertions() {
 	@Test
 	void exceptionTesting() {
 		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
-			throw new IllegalArgumentException("a message");
+			calculator.divide(1, 0);
 		});
-		assertEquals("a message", exception.getMessage());
+		assertEquals("Division by zero is not allowed!", exception.getMessage());
 	}
 
 	@Test

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Executions.java
Patch:
@@ -56,7 +56,7 @@ private Executions(Stream<Execution> executions, String category) {
 		Preconditions.notNull(events, "Event list must not be null");
 		Preconditions.containsNoNullElements(events, "Event list must not contain null elements");
 
-		this.executions = createExecutions(events);
+		this.executions = Collections.unmodifiableList(createExecutions(events));
 		this.category = category;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.jupiter.api.support.io;
 
-import static org.assertj.core.api.Assertions.allOf;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -195,7 +194,7 @@ private void assertSingleFailedTest(EngineExecutionResults results, Class<? exte
 				String message) {
 			results.tests().assertStatistics(stats -> stats.started(1).failed(1).succeeded(0));
 			results.tests().assertThatEvents().haveExactly(1,
-				finishedWithFailure(allOf(instanceOf(clazz), message(actual -> actual.contains(message)))));
+				finishedWithFailure(instanceOf(clazz), message(actual -> actual.contains(message))));
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestExecutionExceptionHandlerTests.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.jupiter.engine.extension;
 
-import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -70,7 +69,7 @@ void exceptionHandlerRethrowsException() {
 			event(engine(), started()), //
 			event(container(ATestCase.class), started()), //
 			event(test("testRethrow"), started()), //
-			event(test("testRethrow"), finishedWithFailure(allOf(instanceOf(IOException.class), message("checked")))), //
+			event(test("testRethrow"), finishedWithFailure(instanceOf(IOException.class), message("checked"))), //
 			event(container(ATestCase.class), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()));
 	}
@@ -104,7 +103,7 @@ void exceptionHandlerConvertsException() {
 			event(engine(), started()), //
 			event(container(ATestCase.class), started()), //
 			event(test("testConvert"), started()), //
-			event(test("testConvert"), finishedWithFailure(allOf(instanceOf(IOException.class), message("checked")))), //
+			event(test("testConvert"), finishedWithFailure(instanceOf(IOException.class), message("checked"))), //
 			event(container(ATestCase.class), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()));
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorIntegrationTests.java
Patch:
@@ -11,7 +11,6 @@
 package org.junit.jupiter.params.aggregator;
 
 import static java.util.stream.Collectors.toMap;
-import static org.assertj.core.api.Assertions.allOf;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.entry;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
@@ -181,8 +180,8 @@ void reportsExceptionForErroneousAggregator() {
 			selectMethod(ErroneousTestCases.class, "testWithErroneousAggregator", Object.class.getName()));
 
 		results.tests().assertThatEvents()//
-				.haveExactly(1, event(test(), finishedWithFailure(allOf(instanceOf(ParameterResolutionException.class), //
-					message("Error aggregating arguments for parameter at index 0: something went horribly wrong")))));
+				.haveExactly(1, event(test(), finishedWithFailure(instanceOf(ParameterResolutionException.class), //
+					message("Error aggregating arguments for parameter at index 0: something went horribly wrong"))));
 	}
 
 	private void testPersonAggregator(Person person) {

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventConditions.java
Patch:
@@ -204,7 +204,7 @@ public static Condition<Event> uniqueIdSubstring(String uniqueIdSubstring) {
 
 	/**
 	 * Create a new {@link Condition} that matches if and only if the
-	 * {@linkplain TestDescriptor#getDisplayName()} display name} of an
+	 * {@linkplain TestDescriptor#getDisplayName() display name} of an
 	 * {@link Event}'s {@linkplain Event#getTestDescriptor() test descriptor}
 	 * is equal to the supplied {@link String}.
 	 */
@@ -243,8 +243,6 @@ public static Condition<Event> skippedWithReason(Predicate<String> predicate) {
 	 * Create a new {@link Condition} that matches if and only if an
 	 * {@link Event}'s {@linkplain Event#getType() type} is
 	 * {@link EventType#STARTED}.
-	 *
-	 * @see #reason(Predicate)
 	 */
 	public static Condition<Event> started() {
 		return type(STARTED);

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Theme.java
Patch:
@@ -129,7 +129,7 @@ public final String status(TestExecutionResult result) {
 	}
 
 	/**
-	 * Return lower case {@link #name} for easier usage in help text for
+	 * Return lower case {@link #name()} for easier usage in help text for
 	 * available options.
 	 */
 	@Override

File: documentation/src/test/java/example/testkit/EngineTestKitAllEventsDemo.java
Patch:
@@ -61,8 +61,8 @@ void verifyAllJupiterEvents() {
 					abortedWithReason(instanceOf(TestAbortedException.class),
 						message(m -> m.contains("abc does not contain Z")))),
 				event(test("failingTest"), started()),
-				event(test("failingTest"),
-					finishedWithFailure(instanceOf(ArithmeticException.class), message("/ by zero"))),
+				event(test("failingTest"), finishedWithFailure(
+					instanceOf(ArithmeticException.class), message("/ by zero"))),
 				event(container(ExampleTestCase.class), finishedSuccessfully()),
 				event(engine(), finishedSuccessfully()));
 	}

File: documentation/src/test/java/example/testkit/EngineTestKitFailedMethodDemo.java
Patch:
@@ -35,7 +35,8 @@ void verifyJupiterMethodFailed() {
 			.tests() // <4>
 			.assertThatEvents().haveExactly(1, // <5>
 				event(test("failingTest"),
-					finishedWithFailure(instanceOf(ArithmeticException.class), message("/ by zero"))));
+					finishedWithFailure(
+						instanceOf(ArithmeticException.class), message("/ by zero"))));
 	}
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertDoesNotThrow.java
Patch:
@@ -76,12 +76,12 @@ private static <T> T assertDoesNotThrow(ThrowingSupplier<T> supplier, Object mes
 
 	private static AssertionFailedError createAssertionFailedError(Object messageOrSupplier, Throwable t) {
 		String message = buildPrefix(nullSafeGet(messageOrSupplier)) + "Unexpected exception thrown: "
-				+ t.getClass().getName() + addThrowableMessage(t);
+				+ t.getClass().getName() + buildSuffix(t.getLocalizedMessage());
 		return new AssertionFailedError(message, t);
 	}
 
-	private static String addThrowableMessage(Throwable t) {
-		return StringUtils.isBlank(t.getMessage()) ? "" : ": " + t.getMessage();
+	private static String buildSuffix(String message) {
+		return StringUtils.isNotBlank(message) ? ": " + message : "";
 	}
 
 }

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/Events.java
Patch:
@@ -217,11 +217,13 @@ public Events dynamicallyRegistered() {
 	 * <p>{@code events.assertStatistics(stats -> stats.started(1).succeeded(1).failed(0));}
 	 *
 	 * @param statisticsConsumer a consumer of {@link EventStatistics}
+	 * @return this {@code Events} object for method chaining; never {@code null}
 	 */
-	public void assertStatistics(Consumer<EventStatistics> statisticsConsumer) {
+	public Events assertStatistics(Consumer<EventStatistics> statisticsConsumer) {
 		EventStatistics eventStatistics = new EventStatistics(this, this.category);
 		statisticsConsumer.accept(eventStatistics);
 		eventStatistics.assertAll();
+		return this;
 	}
 
 	/**

File: documentation/src/test/java/example/testkit/EngineTestKitAllEventsDemo.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.skippedWithReason;
 import static org.junit.platform.testkit.engine.EventConditions.started;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import example.ExampleTestCase;
@@ -49,11 +49,11 @@ void verifyAllJupiterEvents() {
 				event(test("succeedingTest"), finishedSuccessfully()),
 				event(test("abortedTest"), started()),
 				event(test("abortedTest"),
-					abortedWithReason(isA(TestAbortedException.class),
+					abortedWithReason(instanceOf(TestAbortedException.class),
 						message(m -> m.contains("abc does not contain Z")))),
 				event(test("failingTest"), started()),
 				event(test("failingTest"),
-					finishedWithFailure(isA(ArithmeticException.class), message("/ by zero"))),
+					finishedWithFailure(instanceOf(ArithmeticException.class), message("/ by zero"))),
 				event(container(ExampleTestCase.class), finishedSuccessfully()),
 				event(engine(), finishedSuccessfully()));
 	}

File: documentation/src/test/java/example/testkit/EngineTestKitFailedMethodDemo.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import example.ExampleTestCase;
@@ -35,7 +35,7 @@ void verifyJupiterMethodFailed() {
 			.tests() // <4>
 			.assertThatEvents().haveExactly(1, // <5>
 				event(test("failingTest"),
-					finishedWithFailure(isA(ArithmeticException.class), message("/ by zero"))));
+					finishedWithFailure(instanceOf(ArithmeticException.class), message("/ by zero"))));
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/support/io/TempDirectoryTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
@@ -195,7 +195,7 @@ private void assertSingleFailedTest(EngineExecutionResults results, Class<? exte
 				String message) {
 			results.tests().assertStatistics(stats -> stats.started(1).failed(1).succeeded(0));
 			results.tests().assertThatEvents().haveExactly(1,
-				finishedWithFailure(allOf(isA(clazz), message(actual -> actual.contains(message)))));
+				finishedWithFailure(allOf(instanceOf(clazz), message(actual -> actual.contains(message)))));
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DynamicNodeGenerationTests.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.started;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.util.Arrays;
@@ -328,7 +328,8 @@ void dynamicContainersAreExecutedFromExceptionThrowingStream() {
 			event(dynamicTestRegistered("dynamic-test:#2")), //
 			event(test("dynamic-test:#2", "failingTest"), started()), //
 			event(test("dynamic-test:#2", "failingTest"), finishedWithFailure(message("failing"))), //
-			event(container("dynamic-container:#1"), finishedWithFailure(isA(ArrayIndexOutOfBoundsException.class))), //
+			event(container("dynamic-container:#1"),
+				finishedWithFailure(instanceOf(ArrayIndexOutOfBoundsException.class))), //
 			event(container("dynamicContainerWithExceptionThrowingStream"), finishedSuccessfully()), //
 			event(container(MyDynamicTestCase.class), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ParameterResolverTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.lang.reflect.Method;
@@ -114,7 +114,7 @@ void executeTestsForNullValuedMethodInjectionCases() {
 		tests.failed().assertEventsMatchExactly(
 			event(
 				test("injectPrimitive"),
-				finishedWithFailure(allOf(isA(ParameterResolutionException.class), message(expectations)))
+				finishedWithFailure(allOf(instanceOf(ParameterResolutionException.class), message(expectations)))
 			));
 		// @formatter:on
 	}
@@ -156,7 +156,7 @@ void executeTestsForPotentiallyIncompatibleTypeMethodInjectionCases() {
 		tests.failed().assertEventsMatchExactly(
 			event(
 				test("doubleParameterInjection"),
-				finishedWithFailure(allOf(isA(ParameterResolutionException.class), message(expectations)
+				finishedWithFailure(allOf(instanceOf(ParameterResolutionException.class), message(expectations)
 			))));
 		// @formatter:on
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ScriptExecutionConditionTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.lang.reflect.AnnotatedElement;
@@ -55,7 +55,7 @@ void executeSimpleTestCases() {
 			event(test("syntaxError"), //
 				finishedWithFailure( //
 					allOf( //
-						isA(JUnitException.class), //
+						instanceOf(JUnitException.class), //
 						message(value -> value.contains("syntax error")) //
 					))));
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestExecutionExceptionHandlerTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.started;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.io.IOException;
@@ -70,7 +70,7 @@ void exceptionHandlerRethrowsException() {
 			event(engine(), started()), //
 			event(container(ATestCase.class), started()), //
 			event(test("testRethrow"), started()), //
-			event(test("testRethrow"), finishedWithFailure(allOf(isA(IOException.class), message("checked")))), //
+			event(test("testRethrow"), finishedWithFailure(allOf(instanceOf(IOException.class), message("checked")))), //
 			event(container(ATestCase.class), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()));
 	}
@@ -104,7 +104,7 @@ void exceptionHandlerConvertsException() {
 			event(engine(), started()), //
 			event(container(ATestCase.class), started()), //
 			event(test("testConvert"), started()), //
-			event(test("testConvert"), finishedWithFailure(allOf(isA(IOException.class), message("checked")))), //
+			event(test("testConvert"), finishedWithFailure(allOf(instanceOf(IOException.class), message("checked")))), //
 			event(container(ATestCase.class), finishedSuccessfully()), //
 			event(engine(), finishedSuccessfully()));
 	}

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupportTests.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.finishedSuccessfully;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.io.IOException;
@@ -52,11 +52,11 @@ void expectedExceptionIsProcessedCorrectly() {
 						finishedWithFailure(message("no exception expected")))) //
 				.haveExactly(1, //
 					event(test("exceptionExpectedButNotThrown"), //
-						finishedWithFailure(allOf(isA(AssertionError.class), //
+						finishedWithFailure(allOf(instanceOf(AssertionError.class), //
 							message("Expected test to throw an instance of java.lang.RuntimeException"))))) //
 				.haveExactly(1, //
 					event(test("wrongExceptionExpected"), //
-						finishedWithFailure(allOf(isA(AssertionError.class), //
+						finishedWithFailure(allOf(instanceOf(AssertionError.class), //
 							message(value -> value.contains("Expected: an instance of java.io.IOException"))))));
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorIntegrationTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
 import static org.junit.platform.testkit.engine.EventConditions.test;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 
 import java.lang.annotation.ElementType;
@@ -181,7 +181,7 @@ void reportsExceptionForErroneousAggregator() {
 			selectMethod(ErroneousTestCases.class, "testWithErroneousAggregator", Object.class.getName()));
 
 		results.tests().assertThatEvents()//
-				.haveExactly(1, event(test(), finishedWithFailure(allOf(isA(ParameterResolutionException.class), //
+				.haveExactly(1, event(test(), finishedWithFailure(allOf(instanceOf(ParameterResolutionException.class), //
 					message("Error aggregating arguments for parameter at index 0: something went horribly wrong")))));
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java
Patch:
@@ -38,9 +38,10 @@ private void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {
 		}
 		else {
 			Set<ExclusiveResource> allResources = new HashSet<>(exclusiveResources);
+			advisor.forceDescendantExecutionMode(testDescriptor, SAME_THREAD);
 			doForChildrenRecursively(testDescriptor, child -> {
 				allResources.addAll(getExclusiveResources(child));
-				advisor.forceExecutionMode(child, SAME_THREAD);
+				advisor.forceDescendantExecutionMode(child, SAME_THREAD);
 			});
 			advisor.useResourceLock(testDescriptor, lockManager.getLockForResources(allResources));
 		}

File: documentation/src/test/java/example/testkit/EngineTestKitFailedMethodDemo.java
Patch:
@@ -13,7 +13,6 @@
 // @formatter:off
 // tag::user_guide[]
 
-import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.testkit.engine.EventConditions.event;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
@@ -36,8 +35,7 @@ void verifyJupiterMethodFailed() {
 			.tests() // <4>
 			.assertThatEvents().haveExactly(1, // <5>
 				event(test("failingTest"),
-					finishedWithFailure(
-						allOf(isA(ArithmeticException.class), message("/ by zero")))));
+					finishedWithFailure(isA(ArithmeticException.class), message("/ by zero"))));
 	}
 
 }

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventConditions.java
Patch:
@@ -140,7 +140,7 @@ private static Condition<Event> finishedWithCause(Status expectedStatus,
 			Condition<? super Throwable> causeCondition) {
 
 		return finished(Assertions.allOf(TestExecutionResultConditions.status(expectedStatus),
-			TestExecutionResultConditions.cause(causeCondition)));
+			TestExecutionResultConditions.throwable(causeCondition)));
 	}
 
 	public static Condition<Event> finishedWithFailure() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -15,9 +15,9 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;
 import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
-import static org.junit.platform.testkit.engine.TestExecutionResultConditions.hasCause;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
+import static org.junit.platform.testkit.engine.TestExecutionResultConditions.nestedCause;
 
 import java.lang.reflect.Field;
 import java.util.function.Predicate;
@@ -84,13 +84,13 @@ void classLevelFromInterface() {
 	@Test
 	void propagatesCheckedExceptionThrownDuringInitializationOfStaticField() {
 		assertClassFails(ClassLevelExplosiveCheckedExceptionTestCase.class,
-			allOf(isA(ExceptionInInitializerError.class), hasCause(allOf(isA(Exception.class), message("boom")))));
+			allOf(isA(ExceptionInInitializerError.class), nestedCause(allOf(isA(Exception.class), message("boom")))));
 	}
 
 	@Test
 	void propagatesUncheckedExceptionThrownDuringInitializationOfStaticField() {
 		assertClassFails(ClassLevelExplosiveUncheckedExceptionTestCase.class, allOf(
-			isA(ExceptionInInitializerError.class), hasCause(allOf(isA(RuntimeException.class), message("boom")))));
+			isA(ExceptionInInitializerError.class), nestedCause(allOf(isA(RuntimeException.class), message("boom")))));
 	}
 
 	@Test

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventConditions.java
Patch:
@@ -39,9 +39,10 @@
  * Collection of AssertJ {@linkplain Condition conditions} for {@link Event}.
  *
  * @since 1.4
+ * @see TestExecutionResultConditions
  */
 @API(status = EXPERIMENTAL, since = "1.4")
-public class EventConditions {
+public final class EventConditions {
 
 	private EventConditions() {
 		/* no-op */

File: documentation/src/test/java/example/testkit/EngineTestKitFailedMethodDemo.java
Patch:
@@ -10,6 +10,9 @@
 
 package example.testkit;
 
+// @formatter:off
+// tag::user_guide[]
+
 import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.testkit.engine.EventConditions.event;

File: documentation/src/test/java/example/testkit/EngineTestKitStatisticsDemo.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.testkit.engine.EngineTestKit;
 
-class EngineTestKitDemo {
+class EngineTestKitStatisticsDemo {
 
 	@Test
 	void verifyJupiterContainerStats() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -61,7 +61,8 @@ public Optional<String> getArtifactId() {
 
 	@Override
 	public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {
-		JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(uniqueId);
+		JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(uniqueId,
+			discoveryRequest.getConfigurationParameters());
 		new DiscoverySelectorResolver().resolveSelectors(discoveryRequest, engineDescriptor);
 		return engineDescriptor;
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -92,7 +92,7 @@ public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass, ConfigurationP
 
 	ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass, Supplier<String> displayNameSupplier,
 			ConfigurationParameters configurationParameters) {
-		super(uniqueId, testClass, displayNameSupplier, ClassSource.from(testClass));
+		super(uniqueId, testClass, displayNameSupplier, ClassSource.from(testClass), configurationParameters);
 
 		this.testClass = testClass;
 		this.tags = getTags(testClass);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -77,9 +77,9 @@ private JavaElementsResolver createJavaElementsResolver(ConfigurationParameters
 		Set<ElementResolver> resolvers = new LinkedHashSet<>();
 		resolvers.add(new TestContainerResolver(configurationParameters));
 		resolvers.add(new NestedTestsResolver(configurationParameters));
-		resolvers.add(new TestMethodResolver());
-		resolvers.add(new TestFactoryMethodResolver());
-		resolvers.add(new TestTemplateMethodResolver());
+		resolvers.add(new TestMethodResolver(configurationParameters));
+		resolvers.add(new TestFactoryMethodResolver(configurationParameters));
+		resolvers.add(new TestTemplateMethodResolver(configurationParameters));
 
 		return new JavaElementsResolver(engineDescriptor, configurationParameters, classFilter, resolvers);
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestDescriptorBuilder.java
Patch:
@@ -57,7 +57,7 @@ public static class JupiterEngineDescriptorBuilder extends TestDescriptorBuilder
 
 		@Override
 		JupiterEngineDescriptor buildDescriptor() {
-			return new JupiterEngineDescriptor(UniqueId.forEngine("junit-jupiter"));
+			return new JupiterEngineDescriptor(UniqueId.forEngine("junit-jupiter"), configParams);
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.jupiter.api.TestFactory;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
+import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClasspathResourceSource;
@@ -125,7 +126,7 @@ void before() throws Exception {
 
 			Method testMethod = CustomStreamTestCase.class.getDeclaredMethod("customStream");
 			descriptor = new TestFactoryTestDescriptor(UniqueId.forEngine("engine"), CustomStreamTestCase.class,
-				testMethod);
+				testMethod, mock(ConfigurationParameters.class));
 			when(extensionContext.getTestMethod()).thenReturn(Optional.of(testMethod));
 		}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptorTests.java
Patch:
@@ -12,12 +12,14 @@
 
 import static java.util.Collections.singleton;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 import java.util.Set;
 
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestTemplate;
+import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;
@@ -38,7 +40,7 @@ void inheritsTagsFromParent() throws Exception {
 
 		TestTemplateTestDescriptor testDescriptor = new TestTemplateTestDescriptor(
 			parentUniqueId.append("tmp", "testTemplate()"), MyTestCase.class,
-			MyTestCase.class.getDeclaredMethod("testTemplate"));
+			MyTestCase.class.getDeclaredMethod("testTemplate"), mock(ConfigurationParameters.class));
 		parent.addChild(testDescriptor);
 
 		assertThat(testDescriptor.getTags()).containsExactlyInAnyOrder(TestTag.create("foo"), TestTag.create("bar"),

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -76,7 +76,7 @@
  */
 class DiscoverySelectorResolverTests {
 
-	private final JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(engineId());
+	private final JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(engineId(), null);
 	private final DiscoverySelectorResolver resolver = new DiscoverySelectorResolver();
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java
Patch:
@@ -14,6 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.DynamicTest.dynamicTest;
 import static org.junit.jupiter.api.MethodOrderer.Random.RANDOM_SEED_PROPERTY_NAME;
+import static org.junit.jupiter.engine.Constants.DEFAULT_PARALLEL_EXECUTION_MODE;
 import static org.junit.jupiter.engine.Constants.PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 
@@ -229,6 +230,7 @@ private Events executeTestsInParallel(Class<?> testClass) {
 		return EngineTestKit
 				.engine("junit-jupiter")
 				.configurationParameter(PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME, "true")
+				.configurationParameter(DEFAULT_PARALLEL_EXECUTION_MODE, "concurrent")
 				.selectors(selectClass(testClass))
 				.execute()
 				.tests();

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionIntegrationTests.java
Patch:
@@ -18,6 +18,7 @@
 import static org.junit.jupiter.api.DynamicTest.dynamicTest;
 import static org.junit.jupiter.api.parallel.ExecutionMode.CONCURRENT;
 import static org.junit.jupiter.api.parallel.ExecutionMode.SAME_THREAD;
+import static org.junit.jupiter.engine.Constants.DEFAULT_PARALLEL_EXECUTION_MODE;
 import static org.junit.jupiter.engine.Constants.PARALLEL_CONFIG_FIXED_PARALLELISM_PROPERTY_NAME;
 import static org.junit.jupiter.engine.Constants.PARALLEL_CONFIG_STRATEGY_PROPERTY_NAME;
 import static org.junit.jupiter.engine.Constants.PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME;
@@ -184,6 +185,7 @@ private List<Event> execute(int parallelism, Class<?>... testClasses) {
 		LauncherDiscoveryRequest discoveryRequest = request()
 				.selectors(Arrays.stream(testClasses).map(DiscoverySelectors::selectClass).collect(toList()))
 				.configurationParameter(PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME, String.valueOf(true))
+				.configurationParameter(DEFAULT_PARALLEL_EXECUTION_MODE, "concurrent")
 				.configurationParameter(PARALLEL_CONFIG_STRATEGY_PROPERTY_NAME, "fixed")
 				.configurationParameter(PARALLEL_CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, String.valueOf(parallelism))
 				.build();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -119,7 +119,7 @@ private Stream<DynamicNode> toDynamicNodeStream(Object testFactoryMethodResult)
 
 	private JUnitException invalidReturnTypeException(Throwable cause) {
 		String message = String.format(
-			"@TestFactory method [%s] must return a Stream, Collection, Iterable, or Iterator of %s.",
+			"@TestFactory method [%s] must return a single %2$s or a Stream, Collection, Iterable, Iterator, or array of %2$s.",
 			getTestMethod().toGenericString(), DynamicNode.class.getName());
 		return new JUnitException(message, cause);
 	}

File: documentation/src/test/java/example/AssumptionsDemo.java
Patch:
@@ -47,7 +47,7 @@ void testInAllEnvironments() {
 			});
 
 		// perform these assertions in all environments
-		assertEquals("a string", "a string");
+		assertEquals(42, calculator.multiply(6, 7));
 	}
 
 }

File: documentation/src/test/java/example/JUnitPlatformClassDemo.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
-public class JUnit4ClassDemo {
+public class JUnitPlatformClassDemo {
 
 	@Test
 	void succeedingTest() {

File: documentation/src/test/java/example/JUnitPlatformSuiteDemo.java
Patch:
@@ -17,11 +17,11 @@
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
-@SuiteDisplayName("JUnit 4 Suite Demo")
+@SuiteDisplayName("JUnit Platform Suite Demo")
 @SelectPackages("example")
 //end::user_guide[]
 @org.junit.platform.suite.api.ExcludeTags("exclude")
 //tag::user_guide[]
-public class JUnit4SuiteDemo {
+public class JUnitPlatformSuiteDemo {
 }
 //end::user_guide[]

File: documentation/src/test/java/example/defaultmethods/StringTests.java
Patch:
@@ -15,17 +15,17 @@ class StringTests implements ComparableContract<String>, EqualsContract<String>
 
 	@Override
 	public String createValue() {
-		return "foo";
+		return "banana";
 	}
 
 	@Override
 	public String createSmallerValue() {
-		return "bar"; // 'b' < 'f' in "foo"
+		return "apple"; // 'a' < 'b' in "banana"
 	}
 
 	@Override
 	public String createNotEqualValue() {
-		return "baz";
+		return "cherry";
 	}
 
 }

File: documentation/src/test/java/example/DisabledClassDemo.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-@Disabled
+@Disabled("Disabled until bug #99 has been fixed")
 class DisabledClassDemo {
 
 	@Test

File: documentation/src/test/java/example/DisabledTestsDemo.java
Patch:
@@ -16,7 +16,7 @@
 
 class DisabledTestsDemo {
 
-	@Disabled
+	@Disabled("Disabled until bug #42 has been resolved")
 	@Test
 	void testWillBeSkipped() {
 	}

File: documentation/src/test/java/example/AssertionsDemo.java
Patch:
@@ -38,7 +38,8 @@ class AssertionsDemo {
 	@Test
 	void standardAssertions() {
 		assertEquals(2, calculator.add(1, 1));
-		assertEquals(4, calculator.multiply(2, 2), "The optional assertion message is now the last parameter.");
+		assertEquals(4, calculator.multiply(2, 2),
+				"The optional failure message is now the last parameter");
 		assertTrue('a' < 'b', () -> "Assertion messages can be lazily evaluated -- "
 				+ "to avoid constructing complex messages unnecessarily.");
 	}

File: documentation/src/test/java/example/DisabledClassDemo.java
Patch:
@@ -16,8 +16,10 @@
 
 @Disabled
 class DisabledClassDemo {
+
 	@Test
 	void testWillBeSkipped() {
 	}
+
 }
 // end::user_guide[]

File: documentation/src/test/java/example/DisabledTestsDemo.java
Patch:
@@ -24,5 +24,6 @@ void testWillBeSkipped() {
 	@Test
 	void testWillBeExecuted() {
 	}
+
 }
 // end::user_guide[]

File: documentation/src/test/java/example/testinterface/TestInterfaceDemo.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.jupiter.api.Test;
 
 // @formatter:off
-//tag::user_guide[]
+// tag::user_guide[]
 class TestInterfaceDemo implements TestLifecycleLogger,
 		TimeExecutionLogger, TestInterfaceDynamicTestsDemo {
 
@@ -25,5 +25,5 @@ void isEqualValue() {
 	}
 
 }
-//end::user_guide[]
+// end::user_guide[]
 // @formatter:on

File: documentation/src/main/java/example/domain/Person.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package example;
+package example.domain;
 
 import java.time.LocalDate;
 

File: documentation/src/test/java/example/AssertionsDemo.java
Patch:
@@ -22,6 +22,7 @@
 import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import example.domain.Person;
 import example.util.Calculator;
 
 import org.junit.jupiter.api.Test;

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -31,7 +31,8 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-import example.Person.Gender;
+import example.domain.Person;
+import example.domain.Person.Gender;
 import example.util.StringUtils;
 
 import org.junit.jupiter.api.AfterEach;

File: documentation/src/test/java/example/JUnit4Tests.java
Patch:
@@ -15,7 +15,8 @@
 public class JUnit4Tests {
 
 	@Test
-	public void standardJUnit4Test() throws Exception {
-		/* no-op */
+	public void standardJUnit4Test() {
+		// perform assertions
 	}
+
 }

File: documentation/src/test/java/example/MyFirstJUnitJupiterTests.java
Patch:
@@ -11,19 +11,18 @@
 package example;
 
 // tag::user_guide[]
-
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import example.util.Calculator;
 
 import org.junit.jupiter.api.Test;
 
-class FirstJUnit5Tests {
+class MyFirstJUnitJupiterTests {
 
 	private final Calculator calculator = new Calculator();
 
 	@Test
-	void myFirstTest() {
+	void addition() {
 		assertEquals(2, calculator.add(1, 1));
 	}
 

File: documentation/src/main/java/example/util/StringUtils.java
Patch:
@@ -11,6 +11,7 @@
 package example.util;
 
 public class StringUtils {
+
 	public static boolean isPalindrome(String candidate) {
 		int length = candidate.length();
 		for (int i = 0; i < length / 2; i++) {
@@ -20,4 +21,5 @@ public static boolean isPalindrome(String candidate) {
 		}
 		return true;
 	}
+
 }

File: documentation/src/test/java/example/testinterface/TestInterfaceDemo.java
Patch:
@@ -21,7 +21,7 @@ class TestInterfaceDemo implements TestLifecycleLogger,
 
 	@Test
 	void isEqualValue() {
-		assertEquals(1, 1, "is always equal");
+		assertEquals(1, "a".length(), "is always equal");
 	}
 
 }

File: documentation/src/test/java/example/UsingTheLauncherDemo.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
 import org.junit.platform.launcher.core.LauncherFactory;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
-import org.junit.platform.reporting.legacy.xml.XmlReportsWritingListener;
+import org.junit.platform.reporting.legacy.xml.LegacyXmlReportGeneratingListener;
 // end::imports[]
 
 /**
@@ -92,7 +92,7 @@ void launcherConfig() {
 			.enableTestEngineAutoRegistration(false)
 			.enableTestExecutionListenerAutoRegistration(false)
 			.addTestEngines(new CustomTestEngine())
-			.addTestExecutionListeners(new XmlReportsWritingListener(reportsDir, out))
+			.addTestExecutionListeners(new LegacyXmlReportGeneratingListener(reportsDir, out))
 			.addTestExecutionListeners(new CustomTestExecutionListener())
 			.build();
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.platform.launcher.core.LauncherFactory;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
-import org.junit.platform.reporting.legacy.xml.XmlReportsWritingListener;
+import org.junit.platform.reporting.legacy.xml.LegacyXmlReportGeneratingListener;
 
 /**
  * @since 1.0
@@ -123,7 +123,7 @@ private Optional<TestExecutionListener> createDetailsPrintingListener(PrintWrite
 	}
 
 	private Optional<TestExecutionListener> createXmlWritingListener(PrintWriter out) {
-		return options.getReportsDir().map(reportsDir -> new XmlReportsWritingListener(reportsDir, out));
+		return options.getReportsDir().map(reportsDir -> new LegacyXmlReportGeneratingListener(reportsDir, out));
 	}
 
 	private void printSummary(TestExecutionSummary summary, PrintWriter out) {

File: platform-tests/src/test/java/org/junit/platform/reporting/legacy/xml/XmlReportAssertions.java
Patch:
@@ -46,7 +46,7 @@ private enum CachedSchema {
 		private final Schema schema;
 
 		CachedSchema(String resourcePath) {
-			URL schemaFile = XmlReportsWritingListener.class.getResource(resourcePath);
+			URL schemaFile = LegacyXmlReportGeneratingListener.class.getResource(resourcePath);
 			SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
 			try {
 				this.schema = schemaFactory.newSchema(schemaFile);

File: documentation/src/test/java/example/UsingTheLauncherDemo.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
 import org.junit.platform.launcher.core.LauncherFactory;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
-import org.junit.platform.reporting.xml.XmlReportsWritingListener;
+import org.junit.platform.reporting.legacy.xml.XmlReportsWritingListener;
 // end::imports[]
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.platform.launcher.core.LauncherFactory;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
-import org.junit.platform.reporting.xml.XmlReportsWritingListener;
+import org.junit.platform.reporting.legacy.xml.XmlReportsWritingListener;
 
 /**
  * @since 1.0

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -194,6 +194,7 @@ public static List<Field> findPublicAnnotatedFields(Class<?> clazz, Class<?> fie
 	 */
 	public static List<Method> findAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationType,
 			HierarchyTraversalMode traversalMode) {
+
 		Preconditions.notNull(traversalMode, "HierarchyTraversalMode must not be null");
 
 		return AnnotationUtils.findAnnotatedMethods(clazz, annotationType,

File: platform-tests/src/test/java/org/junit/platform/commons/support/AnnotationSupportTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.platform.commons.support.PreconditionViolationChecker.assertPreconditionViolationException;
+import static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -157,10 +157,10 @@ void findPublicAnnotatedFieldsDelegates() {
 	static class Probe {
 
 		@FieldMarker
-		public static String publicStaticAnnotatedField = "static";
+		public static String publicAnnotatedStaticField = "static";
 
 		@FieldMarker
-		public String publicNormalAnnotatedField = "normal";
+		public String publicAnnotatedInstanceField = "instance";
 
 		@Tag("method-tag")
 		void aMethod() {

File: platform-tests/src/test/java/org/junit/platform/commons/support/ClassSupportTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.support;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.commons.support.PreconditionViolationChecker.assertPreconditionViolationException;
+import static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;
 
 import java.util.List;
 import java.util.function.Function;

File: platform-tests/src/test/java/org/junit/platform/commons/support/ModifierSupportTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.support;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.commons.support.PreconditionViolationChecker.assertPreconditionViolationException;
+import static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: platform-tests/src/test/java/org/junit/platform/commons/support/PreconditionAssertions.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**
- * @since 5.4
+ * @since 1.4
  */
-class PreconditionViolationChecker {
+class PreconditionAssertions {
 
 	static void assertPreconditionViolationException(String name, Executable executable) {
 		PreconditionViolationException exception = assertThrows(PreconditionViolationException.class, executable);

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apiguardian.api.API;
 import org.junit.platform.commons.util.AnnotationUtils;
+import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
@@ -193,6 +194,7 @@ public static List<Field> findPublicAnnotatedFields(Class<?> clazz, Class<?> fie
 	 */
 	public static List<Method> findAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationType,
 			HierarchyTraversalMode traversalMode) {
+		Preconditions.notNull(traversalMode, "HierarchyTraversalMode must not be null");
 
 		return AnnotationUtils.findAnnotatedMethods(clazz, annotationType,
 			ReflectionUtils.HierarchyTraversalMode.valueOf(traversalMode.name()));

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ModuleUtils.java
Patch:
@@ -84,13 +84,13 @@ public static Optional<String> getModuleVersion(Class<?> type) {
 	 * Find all classes for the given module name.
 	 *
 	 * @param moduleName the name of the module to scan; never {@code null} or
-	 * <em>blank</em>
+	 * <em>empty</em>
 	 * @param filter the class filter to apply; never {@code null}
 	 * @return an immutable list of all such classes found; never {@code null}
 	 * but potentially empty
 	 */
 	public static List<Class<?>> findAllClassesInModule(String moduleName, ClassFilter filter) {
-		Preconditions.notBlank(moduleName, "Module name must not be null or blank");
+		Preconditions.notBlank(moduleName, "Module name must not be null or empty");
 		Preconditions.notNull(filter, "Class filter must not be null");
 
 		logger.config(() -> "Basic version of findAllClassesInModule() always returns an empty list!");

File: platform-tests/src/test/java/org/junit/platform/commons/support/ClassSupportTests.java
Patch:
@@ -25,7 +25,7 @@
 class ClassSupportTests {
 
 	@Test
-	void nullSafeToString_argument1IsValidated() {
+	void nullSafeToStringPreconditions() {
 		Function<? super Class<?>, ? extends String> mapper = null;
 		assertPreconditionViolationException("Mapping function",
 			() -> ClassSupport.nullSafeToString(mapper, String.class, List.class));

File: platform-tests/src/test/java/org/junit/platform/commons/support/ReflectionSupportTests.java
Patch:
@@ -127,8 +127,9 @@ void findAllClassesInModuleDelegates() {
 
 	@Test
 	void findAllClassesInModulePreconditions() {
-		assertPreconditionViolationExceptionForString("Module name",
+		PreconditionViolationException exception = assertThrows(PreconditionViolationException.class,
 			() -> ReflectionSupport.findAllClassesInModule(null, allTypes, allNames));
+		assertEquals("Module name must not be null or empty", exception.getMessage());
 		assertPreconditionViolationException("class predicate",
 			() -> ReflectionSupport.findAllClassesInModule("org.junit.platform.commons", null, allNames));
 		assertPreconditionViolationException("name predicate",

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -33,6 +33,7 @@
 import org.junit.platform.launcher.core.LauncherFactory;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
+import org.junit.platform.reporting.xml.XmlReportsWritingListener;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/reporting/xml/IncrementingClock.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.console.tasks;
+package org.junit.platform.reporting.xml;
 
 import java.time.Clock;
 import java.time.Duration;
@@ -25,11 +25,11 @@ final class IncrementingClock extends Clock {
 
 	private int counter;
 
-	public IncrementingClock(int start, Duration duration) {
+	IncrementingClock(int start, Duration duration) {
 		this(start, duration, ZoneId.systemDefault());
 	}
 
-	public IncrementingClock(int start, Duration duration, ZoneId zone) {
+	private IncrementingClock(int start, Duration duration, ZoneId zone) {
 		this.counter = start;
 		this.duration = duration;
 		this.zone = zone;

File: platform-tests/src/test/java/org/junit/platform/reporting/xml/XmlReportAssertions.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.console.tasks;
+package org.junit.platform.reporting.xml;
 
 import static org.junit.jupiter.api.Assertions.fail;
 

File: platform-tests/src/test/java/org/junit/platform/reporting/xml/XmlReportDataTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.console.tasks;
+package org.junit.platform.reporting.xml;
 
 import static java.util.Collections.singleton;
 import static org.assertj.core.api.Assertions.assertThat;

File: platform-tests/src/test/java/org/junit/platform/reporting/xml/XmlReportWriterTests.java
Patch:
@@ -8,16 +8,16 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.console.tasks;
+package org.junit.platform.reporting.xml;
 
 import static java.util.Collections.singleton;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
-import static org.junit.platform.console.tasks.XmlReportAssertions.assertValidAccordingToJenkinsSchema;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.platform.launcher.LauncherConstants.STDERR_REPORT_ENTRY_KEY;
 import static org.junit.platform.launcher.LauncherConstants.STDOUT_REPORT_ENTRY_KEY;
+import static org.junit.platform.reporting.xml.XmlReportAssertions.assertValidAccordingToJenkinsSchema;
 
 import java.io.StringWriter;
 import java.time.Clock;

File: platform-tests/src/test/java/org/junit/platform/reporting/xml/XmlReportsWritingListenerTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.console.tasks;
+package org.junit.platform.reporting.xml;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Collections.emptySet;
@@ -17,11 +17,11 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.jupiter.api.Assumptions.assumeFalse;
-import static org.junit.platform.console.tasks.XmlReportAssertions.assertValidAccordingToJenkinsSchema;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;
+import static org.junit.platform.reporting.xml.XmlReportAssertions.assertValidAccordingToJenkinsSchema;
 
 import java.io.File;
 import java.io.PrintWriter;

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/HelperTests.java
Patch:
@@ -38,6 +38,7 @@ void loadModuleDirectoryNames() {
 			"junit-platform-console", //
 			"junit-platform-engine", //
 			"junit-platform-launcher", //
+			"junit-platform-reporting", //
 			"junit-platform-runner", //
 			"junit-platform-suite-api", //
 			"junit-platform-testkit", //

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -253,7 +253,7 @@ void tryToReadFieldValueOfExistingInstanceField() throws Exception {
 
 		Field field = MyClass.class.getDeclaredField("instanceField");
 		assertThat(tryToReadFieldValue(field, instance).get()).isEqualTo(42);
-		assertThrows(NullPointerException.class, () -> tryToReadFieldValue(field, null).get());
+		assertThrows(PreconditionViolationException.class, () -> tryToReadFieldValue(field, null).get());
 	}
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -77,7 +77,7 @@ void providesArgumentsUsingIntStream() {
 	}
 
 	/**
-	 * @since 5.4
+	 * @since 5.3.2
 	 */
 	@Test
 	void providesArgumentsUsingStreamOfIntArrays() {
@@ -90,7 +90,7 @@ void providesArgumentsUsingStreamOfIntArrays() {
 	}
 
 	/**
-	 * @since 5.4
+	 * @since 5.3.2
 	 */
 	@Test
 	void providesArgumentsUsingStreamOfTwoDimensionalIntArrays() {
@@ -110,7 +110,7 @@ void providesArgumentsUsingStreamOfObjectArrays() {
 	}
 
 	/**
-	 * @since 5.4
+	 * @since 5.3.2
 	 */
 	@Test
 	void providesArgumentsUsingStreamOfTwoDimensionalObjectArrays() {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -297,9 +297,9 @@ public static boolean isArray(Object obj) {
 	 *
 	 * @param obj the object to test; potentially {@code null}
 	 * @return {@code true} if the object is a multidimensional array
-	 * @since 1.4
+	 * @since 1.3.2
 	 */
-	@API(status = INTERNAL, since = "1.4")
+	@API(status = INTERNAL, since = "1.3.2")
 	public static boolean isMultidimensionalArray(Object obj) {
 		return (obj != null && obj.getClass().isArray() && obj.getClass().getComponentType().isArray());
 	}

File: platform-tests/src/test/java/org/junit/platform/console/tasks/VerboseTreeListenerTests.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.platform.launcher.TestIdentifier;
 
 /**
- * @since 1.4
+ * @since 1.3.2
  */
 class VerboseTreeListenerTests {
 

File: junit-platform-commons-java-9/src/test/java/integration/JupiterIntegrationTests.java
Patch:
@@ -38,8 +38,8 @@
 class JupiterIntegrationTests {
 
 	@Test
-	void version() {
-		assertEquals("9", ModuleUtils.VERSION);
+	void javaPlatformModuleSystemIsAvailable() {
+		assertTrue(ModuleUtils.isJavaPlatformModuleSystemAvailable());
 	}
 
 	@Test
@@ -50,7 +50,7 @@ void packageName() {
 	@Test
 	void moduleIsNamed() {
 		assumeTrue(getClass().getModule().isNamed(), "not running on the module-path");
-		assertTrue(getClass().getModule().isNamed());
+		assertEquals("integration", getClass().getModule().getName());
 	}
 
 	@Test

File: junit-platform-commons-java-9/src/test/java/org/junit/platform/commons/util/ModuleUtilsTests.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -29,8 +28,8 @@
 class ModuleUtilsTests {
 
 	@Test
-	void version() {
-		assertEquals("9", ModuleUtils.VERSION);
+	void javaPlatformModuleSystemIsAvailable() {
+		assertTrue(ModuleUtils.isJavaPlatformModuleSystemAvailable());
 	}
 
 	@Test

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/config/PrefixedConfigurationParameters.java
Patch:
@@ -37,11 +37,12 @@ public class PrefixedConfigurationParameters implements ConfigurationParameters
 	 *
 	 * @param delegate the {@link ConfigurationParameters} to delegate to; never
 	 * {@code null}
-	 * @param prefix the prefix to apply to all queries; never {@code null}
+	 * @param prefix the prefix to apply to all queries; never {@code null} or
+	 * blank
 	 */
 	public PrefixedConfigurationParameters(ConfigurationParameters delegate, String prefix) {
 		this.delegate = Preconditions.notNull(delegate, "delegate must not be null");
-		this.prefix = Preconditions.notNull(prefix, "prefix must not be null");
+		this.prefix = Preconditions.notBlank(prefix, "prefix must not be null or blank");
 	}
 
 	@Override

File: junit-platform-commons-java-9/src/main/java/org/junit/platform/commons/util/ModuleUtils.java
Patch:
@@ -100,8 +100,9 @@ public static Optional<String> getModuleVersion(Class<?> type) {
 	/**
 	 * Find all classes for the given module name.
 	 *
-	 * @param moduleName the name of the module to scan
-	 * @param filter the class filter to apply
+	 * @param moduleName the name of the module to scan; never {@code null} or
+	 * <em>empty</em>
+	 * @param filter the class filter to apply; never {@code null}
 	 * @return an immutable list of all such classes found; never {@code null}
 	 * but potentially empty
 	 */

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ClassSupport.java
Patch:
@@ -61,7 +61,7 @@ public static String nullSafeToString(Class<?>... classes) {
 	 * a class reference is {@code null} in which case it will be mapped to
 	 * {@code "null"}.
 	 *
-	 * @param mapper the mapper to use
+	 * @param mapper the mapper to use; never {@code null}
 	 * @param classes the classes to map
 	 * @return a comma-separated list of mapped values, or an empty string if
 	 * the supplied class array is {@code null} or empty

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -76,14 +76,16 @@ public static String nullSafeToString(Class<?>... classes) {
 	 * a class reference is {@code null} in which case it will be mapped to
 	 * {@code "null"}.
 	 *
-	 * @param mapper the mapper to use
+	 * @param mapper the mapper to use; never {@code null}
 	 * @param classes the classes to map
 	 * @return a comma-separated list of mapped values, or an empty string if
 	 * the supplied class array is {@code null} or empty
 	 * @see #nullSafeToString(Class...)
 	 * @see StringUtils#nullSafeToString(Object)
 	 */
 	public static String nullSafeToString(Function<? super Class<?>, ? extends String> mapper, Class<?>... classes) {
+		Preconditions.notNull(mapper, "Mapping function must not be null");
+
 		if (classes == null || classes.length == 0) {
 			return "";
 		}

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -1074,6 +1074,8 @@ public static Try<Method> tryToGetMethod(Class<?> clazz, String methodName, Clas
 	 * @see org.junit.platform.commons.support.ReflectionSupport#findMethod(Class, String, String)
 	 */
 	public static Optional<Method> findMethod(Class<?> clazz, String methodName, String parameterTypeNames) {
+		Preconditions.notNull(clazz, "Class must not be null");
+		Preconditions.notBlank(methodName, "Method name must not be null or blank");
 		return findMethod(clazz, methodName, resolveParameterTypes(clazz, methodName, parameterTypeNames));
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -62,6 +62,7 @@ private ReflectionSupport() {
 	 */
 	@API(status = DEPRECATED, since = "1.4")
 	@Deprecated
+	@SuppressWarnings("deprecation")
 	public static Optional<Class<?>> loadClass(String name) {
 		return ReflectionUtils.loadClass(name);
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ExtensionUtils.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 import static org.junit.platform.commons.util.ReflectionUtils.isStatic;
-import static org.junit.platform.commons.util.ReflectionUtils.readFieldValue;
+import static org.junit.platform.commons.util.ReflectionUtils.tryToReadFieldValue;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Field;
@@ -90,7 +90,7 @@ static void registerExtensionsFromFields(ExtensionRegistry registry, Class<?> cl
 		Predicate<Field> predicate = (instance == null) ? isStaticExtension : isNonStaticExtension;
 
 		findAnnotatedFields(clazz, RegisterExtension.class, predicate).forEach(field -> {
-			readFieldValue(field, instance).ifPresent(value -> {
+			tryToReadFieldValue(field, instance).ifSuccess(value -> {
 				Extension extension = (Extension) value;
 				registry.registerExtension(extension, field);
 			});

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/TestContainerResolver.java
Patch:
@@ -65,7 +65,7 @@ public Optional<TestDescriptor> resolveUniqueId(UniqueId.Segment segment, TestDe
 
 		String className = getClassName(parent, segment.getValue());
 
-		Optional<Class<?>> optionalContainerClass = ReflectionUtils.loadClass(className);
+		Optional<Class<?>> optionalContainerClass = ReflectionUtils.tryToLoadClass(className).toOptional();
 		if (!optionalContainerClass.isPresent()) {
 			return Optional.empty();
 		}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/support/OpenTest4JAndJUnit4AwareThrowableCollector.java
Patch:
@@ -37,7 +37,8 @@ private static Predicate<? super Throwable> createAbortedExecutionPredicate() {
 		Predicate<Throwable> otaPredicate = TestAbortedException.class::isInstance;
 
 		// Additionally support JUnit 4's AssumptionViolatedException?
-		Class<?> clazz = ReflectionUtils.loadClass("org.junit.internal.AssumptionViolatedException").orElse(null);
+		Class<?> clazz = ReflectionUtils.tryToLoadClass(
+			"org.junit.internal.AssumptionViolatedException").toOptional().orElse(null);
 		if (clazz != null) {
 			return otaPredicate.or(clazz::isInstance);
 		}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -431,7 +431,7 @@ void packageResolutionUsingExplicitBasePackage() {
 	}
 
 	@Test
-	void packageResolutionUsingDefaultPackage() {
+	void packageResolutionUsingDefaultPackage() throws Exception {
 		resolver.resolveSelectors(request().selectors(selectPackage("")).build(), engineDescriptor);
 
 		// 150 is completely arbitrary. The actual number is likely much higher.
@@ -442,7 +442,7 @@ void packageResolutionUsingDefaultPackage() {
 		List<UniqueId> uniqueIds = uniqueIds();
 		assertThat(uniqueIds)//
 				.describedAs("Failed to pick up DefaultPackageTestCase via classpath scanning")//
-				.contains(uniqueIdForClass(ReflectionUtils.loadClass("DefaultPackageTestCase").get()));
+				.contains(uniqueIdForClass(ReflectionUtils.tryToLoadClass("DefaultPackageTestCase").get()));
 		assertThat(uniqueIds).contains(uniqueIdForClass(Class1WithTestCases.class));
 		assertThat(uniqueIds).contains(uniqueIdForMethod(Class1WithTestCases.class, "test1()"));
 		assertThat(uniqueIds).contains(uniqueIdForClass(Class2WithTestCases.class));
@@ -466,7 +466,7 @@ void classpathResolution() throws Exception {
 		List<UniqueId> uniqueIds = uniqueIds();
 		assertThat(uniqueIds)//
 				.describedAs("Failed to pick up DefaultPackageTestCase via classpath scanning")//
-				.contains(uniqueIdForClass(ReflectionUtils.loadClass("DefaultPackageTestCase").get()));
+				.contains(uniqueIdForClass(ReflectionUtils.tryToLoadClass("DefaultPackageTestCase").get()));
 		assertThat(uniqueIds).contains(uniqueIdForClass(Class1WithTestCases.class));
 		assertThat(uniqueIds).contains(uniqueIdForMethod(Class1WithTestCases.class, "test1()"));
 		assertThat(uniqueIds).contains(uniqueIdForClass(Class2WithTestCases.class));

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -251,9 +251,9 @@ public Object convert(String source, Class<?> targetType) throws Exception {
 		private static Class<?> toClass(String type) {
 			//@formatter:off
 			return ReflectionUtils
-					.loadClass(type)
-					.orElseThrow(() -> new ArgumentConversionException(
-							"Failed to convert String \"" + type + "\" to type " + Class.class.getName()));
+					.tryToLoadClass(type)
+					.getOrThrow(cause -> new ArgumentConversionException(
+							"Failed to convert String \"" + type + "\" to type " + Class.class.getName(), cause));
 			//@formatter:on
 		}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -74,8 +74,8 @@ private Method getMethodByFullyQualifiedName(String fullyQualifiedMethodName) {
 	}
 
 	private Class<?> loadRequiredClass(String className) {
-		return ReflectionUtils.loadClass(className).orElseThrow(
-			() -> new JUnitException(format("Could not load class [%s]", className)));
+		return ReflectionUtils.tryToLoadClass(className).getOrThrow(
+			cause -> new JUnitException(format("Could not load class [%s]", className), cause));
 	}
 
 	private Method getMethod(Class<?> clazz, String methodName) {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -249,10 +249,10 @@ else if (candidateAnnotationType.equals(containerType)) {
 					// Note: it's not a legitimate containing annotation type if it doesn't declare
 					// a 'value' attribute that returns an array of the contained annotation type.
 					// See https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.6.3
-					Method method = ReflectionUtils.getMethod(containerType, "value").orElseThrow(
-						() -> new JUnitException(String.format(
+					Method method = ReflectionUtils.tryToGetMethod(containerType, "value").getOrThrow(
+						cause -> new JUnitException(String.format(
 							"Container annotation type '%s' must declare a 'value' attribute of type %s[].",
-							containerType, annotationType)));
+							containerType, annotationType), cause));
 
 					Annotation[] containedAnnotations = (Annotation[]) ReflectionUtils.invokeMethod(method, candidate);
 					found.addAll((Collection<? extends A>) asList(containedAnnotations));

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -71,8 +71,9 @@ public String getClassName() {
 	 */
 	public Class<?> getJavaClass() {
 		if (this.javaClass == null) {
-			this.javaClass = ReflectionUtils.loadClass(this.className).orElseThrow(
-				() -> new PreconditionViolationException("Could not load class with name: " + this.className));
+			this.javaClass = ReflectionUtils.tryToLoadClass(this.className).getOrThrow(
+				cause -> new PreconditionViolationException("Could not load class with name: " + this.className,
+					cause));
 		}
 		return this.javaClass;
 	}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClassSource.java
Patch:
@@ -129,8 +129,9 @@ public final String getClassName() {
 	 */
 	public final Class<?> getJavaClass() {
 		if (this.javaClass == null) {
-			this.javaClass = ReflectionUtils.loadClass(this.className).orElseThrow(
-				() -> new PreconditionViolationException("Could not load class with name: " + this.className));
+			this.javaClass = ReflectionUtils.tryToLoadClass(this.className).getOrThrow(
+				cause -> new PreconditionViolationException("Could not load class with name: " + this.className,
+					cause));
 		}
 		return this.javaClass;
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AtypicalJvmMethodNameTests.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.engine.kotlin.ArbitraryNamingKotlinTestCase;
 import org.junit.platform.engine.TestDescriptor;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests for JVM languages that allow special characters
@@ -31,7 +31,7 @@ class AtypicalJvmMethodNameTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void kotlinTestWithMethodNameContainingSpecialCharacters() {
-		ExecutionResults executionResults = executeTestsForClass(ArbitraryNamingKotlinTestCase.class);
+		EngineExecutionResults executionResults = executeTestsForClass(ArbitraryNamingKotlinTestCase.class);
 		assertThat(executionResults.tests().started().count()).isEqualTo(2);
 
 		TestDescriptor testDescriptor1 = executionResults.tests().succeeded().list().get(0).getTestDescriptor();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for {@link BeforeAll} and {@link AfterAll}
@@ -36,7 +36,7 @@ class BeforeAllAndAfterAllComposedAnnotationTests extends AbstractJupiterTestEng
 
 	@Test
 	void beforeAllAndAfterAllAsMetaAnnotations() {
-		ExecutionResults executionResults = executeTestsForClass(TestCase.class);
+		EngineExecutionResults executionResults = executeTestsForClass(TestCase.class);
 
 		assertEquals(1, executionResults.tests().started().count(), "# tests started");
 		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for {@link BeforeEach} and {@link AfterEach}
@@ -36,7 +36,7 @@ class BeforeEachAndAfterEachComposedAnnotationTests extends AbstractJupiterTestE
 
 	@Test
 	void beforeEachAndAfterEachAsMetaAnnotations() {
-		ExecutionResults executionResults = executeTestsForClass(TestCase.class);
+		EngineExecutionResults executionResults = executeTestsForClass(TestCase.class);
 
 		assertEquals(1, executionResults.tests().started().count(), "# tests started");
 		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DisabledTests.java
Patch:
@@ -16,8 +16,8 @@
 
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests that verify support for {@link Disabled @Disabled} in the {@link JupiterTestEngine}.
@@ -28,7 +28,7 @@ class DisabledTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void executeTestsWithDisabledTestClass() {
-		ExecutionResults results = executeTestsForClass(DisabledTestClassTestCase.class);
+		EngineExecutionResults results = executeTestsForClass(DisabledTestClassTestCase.class);
 
 		results.containers().assertStatistics(stats -> stats.skipped(1));
 		results.tests().assertStatistics(stats -> stats.started(0));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/FailedAssumptionsTests.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.jupiter.api.Assumptions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for failed assumptions in the
@@ -26,15 +26,15 @@ class FailedAssumptionsTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void testAbortedExceptionInBeforeAll() {
-		ExecutionResults results = executeTestsForClass(TestAbortedExceptionInBeforeAllTestCase.class);
+		EngineExecutionResults results = executeTestsForClass(TestAbortedExceptionInBeforeAllTestCase.class);
 
 		results.containers().assertStatistics(stats -> stats.aborted(1));
 		results.tests().assertStatistics(stats -> stats.started(0));
 	}
 
 	@Test
 	void assumptionViolatedExceptionInBeforeAll() {
-		ExecutionResults results = executeTestsForClass(AssumptionViolatedExceptionInBeforeAllTestCase.class);
+		EngineExecutionResults results = executeTestsForClass(AssumptionViolatedExceptionInBeforeAllTestCase.class);
 
 		results.containers().assertStatistics(stats -> stats.aborted(1));
 		results.tests().assertStatistics(stats -> stats.started(0));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/InvalidLifecycleMethodConfigurationTests.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests that very proper handling of invalid configuration for
@@ -54,7 +54,8 @@ void executeValidTestCaseAlongsideTestCaseWithInvalidAfterEachDeclaration() {
 	}
 
 	private void assertExecutionResults(Class<?> invalidTestClass) {
-		ExecutionResults executionResults = executeTests(selectClass(TestCase.class), selectClass(invalidTestClass));
+		EngineExecutionResults executionResults = executeTests(selectClass(TestCase.class),
+			selectClass(invalidTestClass));
 		Events containers = executionResults.containers();
 		Events tests = executionResults.tests();
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleConfigurationTests.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.jupiter.api.TestInstance;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.launcher.Launcher;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests for {@link TestInstance @TestInstance} lifecycle
@@ -125,7 +125,7 @@ private void performAssertions(Class<?> testClass, Map<String, String> configPar
 			int numFailedContainers, int numTests, String... methods) {
 
 		// @formatter:off
-		ExecutionResults executionResults = executeTests(
+		EngineExecutionResults executionResults = executeTests(
 			request()
 				.selectors(selectClass(testClass))
 				.configurationParameters(configParams)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleKotlinTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.engine.kotlin.InstancePerClassKotlinTestCase;
 import org.junit.jupiter.engine.kotlin.InstancePerMethodKotlinTestCase;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Kotlin-specific integration tests for {@link TestInstance @TestInstance}
@@ -37,7 +37,7 @@ void instancePerClassCanBeUsedForKotlinTestClasses() {
 		Class<?> testClass = InstancePerClassKotlinTestCase.class;
 		InstancePerClassKotlinTestCase.TEST_INSTANCES.clear();
 
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 
 		assertThat(executionResults.tests().finished().count()).isEqualTo(2);
 		assertThat(InstancePerClassKotlinTestCase.TEST_INSTANCES.keySet()).hasSize(1);
@@ -54,7 +54,7 @@ void instancePerMethodIsDefaultForKotlinTestClasses() {
 		Class<?> testClass = InstancePerMethodKotlinTestCase.class;
 		InstancePerMethodKotlinTestCase.TEST_INSTANCES.clear();
 
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 
 		assertThat(executionResults.tests().finished().count()).isEqualTo(2);
 		List<Object> instances = new ArrayList<>(InstancePerMethodKotlinTestCase.TEST_INSTANCES.keySet());

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -54,7 +54,7 @@
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
 import org.junit.platform.commons.util.ReflectionUtils;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests for {@link TestInstance @TestInstance} lifecycle support.
@@ -528,7 +528,7 @@ void instancePerMethodOnOuterTestClassWithInstancePerClassOnNestedTestClass() {
 	private void performAssertions(Class<?> testClass, int numContainers, int numTests,
 			Map.Entry<Class<?>, Integer>[] instanceCountEntries, int allMethods, int eachMethods) {
 
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 
 		executionResults.containers().assertStatistics(stats -> stats.started(numContainers).finished(numContainers));
 		executionResults.tests().assertStatistics(stats -> stats.started(numTests).finished(numTests));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/BridgeMethodTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.jupiter.engine.bridge.NumberTestGroup.ByteTestCase;
 import org.junit.jupiter.engine.bridge.NumberTestGroup.ShortTestCase;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * @since 5.0
@@ -96,7 +96,7 @@ void inheritedNonGenericMethodsAreExecuted() {
 
 	private String execute(int expectedTestFinishedCount, Class<?> testClass) {
 		sequence.clear();
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 		assertEquals(expectedTestFinishedCount, executionResults.tests().started().count());
 		return sequence.toString();
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/UniqueIdParsingForArrayParameterIntegrationTests.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.jupiter.engine.execution.injection.sample.PrimitiveArrayParameterResolver;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.Event;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests for {@link UniqueId#parse(String)} for methods
@@ -36,7 +36,7 @@ class UniqueIdParsingForArrayParameterIntegrationTests extends AbstractJupiterTe
 
 	@Test
 	void executeTestsForPrimitiveArrayMethodInjectionCases() {
-		ExecutionResults executionResults = executeTestsForClass(PrimitiveArrayMethodInjectionTestCase.class);
+		EngineExecutionResults executionResults = executeTestsForClass(PrimitiveArrayMethodInjectionTestCase.class);
 
 		assertEquals(1, executionResults.tests().started().count(), "# tests started");
 		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.jupiter.engine.JupiterTestEngine;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for {@link BeforeAll}, {@link AfterAll},
@@ -171,7 +171,7 @@ private void assertBeforeAllAndAfterAllCallbacks(Class<?> testClass, int testsSt
 
 		callSequence.clear();
 
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 
 		assertEquals(testsStarted, executionResults.tests().started().count(), "# tests started");
 		assertEquals(testsSuccessful, executionResults.tests().succeeded().count(), "# tests succeeded");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExecutionConditionTests.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.jupiter.engine.extension.sub.SystemPropertyCondition;
 import org.junit.jupiter.engine.extension.sub.SystemPropertyCondition.SystemProperty;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests that verify support for the {@link ExecutionCondition}
@@ -52,7 +52,7 @@ public void tearDown() {
 
 	@Test
 	void conditionWorksOnContainer() {
-		ExecutionResults executionResults = executeTestsForClass(TestCaseWithExecutionConditionOnClass.class);
+		EngineExecutionResults executionResults = executeTestsForClass(TestCaseWithExecutionConditionOnClass.class);
 
 		executionResults.containers().assertStatistics(stats -> stats.skipped(1));
 		executionResults.tests().assertStatistics(stats -> stats.started(0));
@@ -112,7 +112,7 @@ private void assertExecutionConditionOverride(String deactivatePattern, int test
 				.build();
 		// @formatter:on
 
-		ExecutionResults executionResults = executeTests(request);
+		EngineExecutionResults executionResults = executeTests(request);
 		Events containers = executionResults.containers();
 		Events tests = executionResults.tests();
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExtensionContextExecutionTests.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.extension.ParameterResolutionException;
 import org.junit.jupiter.api.extension.ParameterResolver;
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 class ExtensionContextExecutionTests extends AbstractJupiterTestEngineTests {
 
@@ -64,7 +64,7 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
 	void twoTestClassesCanShareStateViaEngineExtensionContext() {
 		Parent.counter.set(0);
 
-		ExecutionResults executionResults = executeTests(selectClass(A.class), selectClass(B.class));
+		EngineExecutionResults executionResults = executeTests(selectClass(A.class), selectClass(B.class));
 
 		assertThat(executionResults.tests().started().count()).isEqualTo(2);
 		assertThat(Parent.counter).hasValue(1);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -35,7 +35,7 @@
 import org.junit.platform.commons.util.AnnotationUtils;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for programmatic extension registration
@@ -76,7 +76,7 @@ void classLevelFromInterface() {
 	}
 
 	private void assertOneTestSucceeded(Class<?> testClass) {
-		ExecutionResults executionResults = executeTestsForClass(testClass);
+		EngineExecutionResults executionResults = executeTestsForClass(testClass);
 		assertAll(//
 			() -> assertEquals(1, executionResults.tests().started().count(), "# tests started"), //
 			() -> assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded"), //

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.extension.TestInstancePostProcessor;
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
-import org.junit.platform.testkit.engine.ExecutionResults;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 
 /**
  * Integration tests that verify support for {@link TestInstancePostProcessor}.
@@ -46,7 +46,7 @@ void resetCallSequence() {
 	void instancePostProcessorsInNestedClasses() {
 		LauncherDiscoveryRequest request = request().selectors(selectClass(OuterTestCase.class)).build();
 
-		ExecutionResults executionResults = executeTests(request);
+		EngineExecutionResults executionResults = executeTests(request);
 
 		assertEquals(2, executionResults.tests().started().count(), "# tests started");
 		assertEquals(2, executionResults.tests().succeeded().count(), "# tests succeeded");
@@ -76,7 +76,7 @@ void testSpecificTestInstancePostProcessorIsCalled() {
 		LauncherDiscoveryRequest request = request().selectors(
 			selectClass(TestCaseWithTestSpecificTestInstancePostProcessor.class)).build();
 
-		ExecutionResults executionResults = executeTests(request);
+		EngineExecutionResults executionResults = executeTests(request);
 
 		assertEquals(1, executionResults.tests().started().count(), "# tests started");
 		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/conditions/IgnoreConditionTests.java
Patch:
@@ -24,9 +24,9 @@
 import org.junit.Ignore;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests for JUnit 4's {@link Ignore @Ignore} support in JUnit
@@ -65,7 +65,7 @@ void ignoredTestClassWithCustomMessage() {
 
 	@Test
 	void ignoredAndNotIgnoredTestMethods() {
-		ExecutionResults executionResults = executeTestsForClass(IgnoredMethodsTestCase.class);
+		EngineExecutionResults executionResults = executeTestsForClass(IgnoredMethodsTestCase.class);
 		Events containers = executionResults.containers();
 		Events tests = executionResults.tests();
 
@@ -100,7 +100,7 @@ void ignoredAndNotIgnoredTestMethods() {
 		// @formatter:on
 	}
 
-	private ExecutionResults executeTestsForClass(Class<?> testClass) {
+	private EngineExecutionResults executeTestsForClass(Class<?> testClass) {
 		return EngineTestKit.execute("junit-jupiter", request().selectors(selectClass(testClass)).build());
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorIntegrationTests.java
Patch:
@@ -49,8 +49,8 @@
 import org.junit.jupiter.params.provider.ValueSource;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoverySelector;
+import org.junit.platform.testkit.engine.EngineExecutionResults;
 import org.junit.platform.testkit.engine.EngineTestKit;
-import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
  * Integration tests for {@link ArgumentsAccessor}, {@link AggregateWith},
@@ -205,7 +205,7 @@ private void testAddressAggegator(Address address) {
 		assertEquals(30318, address.zipCode);
 	}
 
-	private ExecutionResults execute(DiscoverySelector... selectors) {
+	private EngineExecutionResults execute(DiscoverySelector... selectors) {
 		return EngineTestKit.execute("junit-jupiter", request().selectors(selectors).build());
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -132,7 +132,7 @@ protected Optional<ExecutionMode> getExecutionModeFromAnnotation(AnnotatedElemen
 		// @formatter:on
 	}
 
-	private static ExecutionMode toExecutionMode(org.junit.jupiter.api.parallel.ExecutionMode mode) {
+	public static ExecutionMode toExecutionMode(org.junit.jupiter.api.parallel.ExecutionMode mode) {
 		switch (mode) {
 			case CONCURRENT:
 				return ExecutionMode.CONCURRENT;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -73,13 +73,15 @@ private void pruneTree(TestDescriptor rootDescriptor) {
 
 	private JavaElementsResolver createJavaElementsResolver(ConfigurationParameters configurationParameters,
 			TestDescriptor engineDescriptor, ClassFilter classFilter) {
+
 		Set<ElementResolver> resolvers = new LinkedHashSet<>();
 		resolvers.add(new TestContainerResolver(configurationParameters));
 		resolvers.add(new NestedTestsResolver(configurationParameters));
 		resolvers.add(new TestMethodResolver());
 		resolvers.add(new TestFactoryMethodResolver());
 		resolvers.add(new TestTemplateMethodResolver());
-		return new JavaElementsResolver(engineDescriptor, classFilter, resolvers);
+
+		return new JavaElementsResolver(engineDescriptor, configurationParameters, classFilter, resolvers);
 	}
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java
Patch:
@@ -222,6 +222,9 @@ public void orderMethods(MethodOrdererContext context) {
 				try {
 					seed = Long.valueOf(value);
 					this.usingCustomSeed = true;
+					logger.config(
+						() -> String.format("Using custom seed for configuration parameter [%s] with value [%s].",
+							RANDOM_SEED_PROPERTY_NAME, value));
 				}
 				catch (NumberFormatException ex) {
 					logger.warn(ex,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrdererContext.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Optional;
 
 import org.apiguardian.api.API;
-import org.junit.jupiter.api.MethodOrderer.MethodDescriptor;
 
 /**
  * {@code MethodOrdererContext} encapsulates the <em>context</em> in which

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DefaultMethodDescriptor.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.jupiter.api.MethodOrderer.MethodDescriptor;
+import org.junit.jupiter.api.MethodDescriptor;
 import org.junit.jupiter.engine.descriptor.MethodBasedTestDescriptor;
 import org.junit.platform.commons.util.AnnotationUtils;
 import org.junit.platform.commons.util.Preconditions;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DefaultMethodOrdererContext.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.jupiter.api.MethodOrderer.MethodDescriptor;
+import org.junit.jupiter.api.MethodDescriptor;
 import org.junit.jupiter.api.MethodOrdererContext;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.ConfigurationParameters;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -299,7 +299,6 @@ private void orderContainedMethods(ClassTestDescriptor classTestDescriptor, Clas
 				.ifPresent(methodOrderer -> {
 
 					ExecutionMode defaultExecutionMode = toExecutionMode(methodOrderer.getDefaultExecutionMode());
-					// TODO Decide if we should set the default ExecutionMode for the class or individual methods.
 					classTestDescriptor.setDefaultChildExecutionMode(defaultExecutionMode);
 
 					List<DefaultMethodDescriptor> methodDescriptors = classTestDescriptor.getChildren().stream()//

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.DynamicTest;
+import org.junit.jupiter.api.MethodDescriptor;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.MethodOrderer.Alphanumeric;
 import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -73,13 +73,15 @@ private void pruneTree(TestDescriptor rootDescriptor) {
 
 	private JavaElementsResolver createJavaElementsResolver(ConfigurationParameters configurationParameters,
 			TestDescriptor engineDescriptor, ClassFilter classFilter) {
+
 		Set<ElementResolver> resolvers = new LinkedHashSet<>();
 		resolvers.add(new TestContainerResolver(configurationParameters));
 		resolvers.add(new NestedTestsResolver(configurationParameters));
 		resolvers.add(new TestMethodResolver());
 		resolvers.add(new TestFactoryMethodResolver());
 		resolvers.add(new TestTemplateMethodResolver());
-		return new JavaElementsResolver(engineDescriptor, classFilter, resolvers);
+
+		return new JavaElementsResolver(engineDescriptor, configurationParameters, classFilter, resolvers);
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -132,7 +132,7 @@ protected Optional<ExecutionMode> getExecutionModeFromAnnotation(AnnotatedElemen
 		// @formatter:on
 	}
 
-	private static ExecutionMode toExecutionMode(org.junit.jupiter.api.parallel.ExecutionMode mode) {
+	public static ExecutionMode toExecutionMode(org.junit.jupiter.api.parallel.ExecutionMode mode) {
 		switch (mode) {
 			case CONCURRENT:
 				return ExecutionMode.CONCURRENT;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java
Patch:
@@ -29,7 +29,7 @@
 @Documented
 @Inherited
 @API(status = EXPERIMENTAL, since = "5.4")
-public @interface MethodOrdering {
+public @interface TestMethodOrder {
 
 	Class<? extends MethodOrderer> value();
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.jupiter.api.MethodOrdering;
+import org.junit.jupiter.api.TestMethodOrder;
 import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
 import org.junit.jupiter.engine.descriptor.Filterable;
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
@@ -286,8 +286,8 @@ private void resolveChildren(TestDescriptor descriptor) {
 	 * @since 5.4
 	 */
 	private void orderContainedMethods(ClassTestDescriptor classTestDescriptor, Class<?> testClass) {
-		findAnnotation(testClass, MethodOrdering.class)//
-				.map(MethodOrdering::value)//
+		findAnnotation(testClass, TestMethodOrder.class)//
+				.map(TestMethodOrder::value)//
 				.map(ReflectionUtils::newInstance)//
 				.ifPresent(methodOrderer -> {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.MethodOrderer.Alphanumeric;
 import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
-import org.junit.jupiter.api.MethodOrdering;
+import org.junit.jupiter.api.TestMethodOrder;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
@@ -67,7 +67,7 @@ void orderAnnotation() {
 
 	// -------------------------------------------------------------------------
 
-	@MethodOrdering(Alphanumeric.class)
+	@TestMethodOrder(Alphanumeric.class)
 	static class AlphanumericTestCase {
 
 		@BeforeEach
@@ -110,7 +110,7 @@ void zzz() {
 		}
 	}
 
-	@MethodOrdering(OrderAnnotation.class)
+	@TestMethodOrder(OrderAnnotation.class)
 	static class OrderAnnotationTestCase {
 
 		@BeforeEach

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
@@ -42,7 +42,7 @@ protected ExecutionResults executeTests(DiscoverySelector... selectors) {
 	}
 
 	protected ExecutionResults executeTests(LauncherDiscoveryRequest request) {
-		return ExecutionRecorder.execute(this.engine, request);
+		return EngineTestKit.execute(this.engine, request);
 	}
 
 	protected TestDescriptor discoverTests(DiscoverySelector... selectors) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/RepeatedTestTests.java
Patch:
@@ -28,8 +28,8 @@
 import org.junit.jupiter.api.RepetitionInfo;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.engine.JupiterTestEngine;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 
 /**
  * Integration tests for {@link RepeatedTest @RepeatedTest} and supporting
@@ -154,7 +154,7 @@ void failsContainerOnZeroRepeatCount() {
 	}
 
 	private Events executeTest(String methodName) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(),
+		return EngineTestKit.execute(new JupiterTestEngine(),
 			request().selectors(selectMethod(TestCase.class, methodName)).build()).all();
 	}
 

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/conditions/IgnoreConditionTests.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.engine.JupiterTestEngine;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
@@ -101,7 +101,7 @@ void ignoredAndNotIgnoredTestMethods() {
 	}
 
 	private ExecutionResults executeTestsForClass(Class<?> testClass) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(), request().selectors(selectClass(testClass)).build());
+		return EngineTestKit.execute(new JupiterTestEngine(), request().selectors(selectClass(testClass)).build());
 	}
 
 	// -------------------------------------------------------------------------

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupportTests.java
Patch:
@@ -27,8 +27,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.engine.JupiterTestEngine;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 import org.junit.rules.ExpectedException;
 
 /**
@@ -75,7 +75,7 @@ void expectedExceptionSupportWithoutExpectedExceptionRule() {
 	}
 
 	private Events executeTestsForClass(Class<?> testClass) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(),
+		return EngineTestKit.execute(new JupiterTestEngine(),
 			request().selectors(selectClass(testClass)).build()).tests();
 	}
 

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/rules/LauncherBasedEnableRuleMigrationSupportTests.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.engine.JupiterTestEngine;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 import org.junit.rules.ErrorCollector;
 import org.junit.rules.ExternalResource;
 import org.junit.rules.Verifier;
@@ -50,7 +50,7 @@ void verifierSupportForErrorCollectorFieldFailsTheTest() {
 	}
 
 	private Events executeTestsForClass(Class<?> testClass) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(),
+		return EngineTestKit.execute(new JupiterTestEngine(),
 			request().selectors(selectClass(testClass)).build()).tests();
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -56,8 +56,8 @@
 import org.junit.jupiter.params.provider.ValueSource;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Event;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 import org.opentest4j.TestAbortedException;
 
 /**
@@ -256,7 +256,7 @@ void reportsContainerWithAssumptionFailureInMethodSourceAsAborted() {
 	}
 
 	private List<Event> execute(DiscoverySelector... selectors) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
+		return EngineTestKit.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
 	}
 
 	static class TestCase {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorIntegrationTests.java
Patch:
@@ -49,8 +49,8 @@
 import org.junit.jupiter.params.provider.ValueSource;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoverySelector;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Event;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 
 /**
  * Integration tests for {@link ArgumentsAccessor}, {@link AggregateWith},
@@ -199,7 +199,7 @@ private void testAddressAggegator(Address address) {
 	}
 
 	private List<Event> execute(DiscoverySelector... selectors) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
+		return EngineTestKit.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
 	}
 
 	// -------------------------------------------------------------------------

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -41,8 +41,8 @@
 import org.junit.platform.engine.reporting.ReportEntry;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
 import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 import org.junit.runner.Description;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;
@@ -552,7 +552,7 @@ void executesJUnit4TestCaseWithErrorCollectorStoringMultipleFailures() {
 	}
 
 	private static Events execute(Class<?> testClass) {
-		return ExecutionRecorder.execute(new VintageTestEngine(), request(testClass)).all();
+		return EngineTestKit.execute(new VintageTestEngine(), request(testClass)).all();
 	}
 
 	private static void execute(Class<?> testClass, EngineExecutionListener listener) {

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionIntegrationTests.java
Patch:
@@ -61,8 +61,8 @@
 import org.junit.platform.engine.discovery.DiscoverySelectors;
 import org.junit.platform.engine.reporting.ReportEntry;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
+import org.junit.platform.testkit.engine.EngineTestKit;
 import org.junit.platform.testkit.engine.Event;
-import org.junit.platform.testkit.engine.ExecutionRecorder;
 
 /**
  * @since 1.3
@@ -466,7 +466,7 @@ private List<Event> execute(int parallelism, Class<?>... testClasses) {
 				.configurationParameter(PARALLEL_CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, String.valueOf(parallelism))
 				.build();
 		// @formatter:on
-		return ExecutionRecorder.execute(new JupiterTestEngine(), discoveryRequest).all().list();
+		return EngineTestKit.execute(new JupiterTestEngine(), discoveryRequest).all().list();
 	}
 
 	static class ThreadReporter implements AfterTestExecutionCallback {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/OverloadedTestMethodTests.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.testkit.engine.Event;
 import org.junit.platform.testkit.engine.Events;
-import org.junit.platform.testkit.engine.ExecutionEvent;
 
 /**
  * Integration tests for support of overloaded test methods in conjunction with
@@ -36,7 +36,7 @@ void executeTestCaseWithOverloadedMethodsAndThenRerunOnlyOneOfTheMethodsSelected
 
 		tests.assertStatistics(stats -> stats.started(2).succeeded(2).failed(0));
 
-		Optional<ExecutionEvent> first = tests.succeeded().filter(
+		Optional<Event> first = tests.succeeded().filter(
 			event -> event.getTestDescriptor().getUniqueId().toString().contains(TestInfo.class.getName())).findFirst();
 		assertTrue(first.isPresent());
 		TestIdentifier testIdentifier = TestIdentifier.from(first.get().getTestDescriptor());
@@ -58,7 +58,7 @@ void executeTestCaseWithOverloadedMethodsWithSingleMethodThatAcceptsArgumentsSel
 
 		tests.assertStatistics(stats -> stats.started(1).succeeded(1).failed(0));
 
-		Optional<ExecutionEvent> first = tests.succeeded().stream().filter(
+		Optional<Event> first = tests.succeeded().stream().filter(
 			event -> event.getTestDescriptor().getUniqueId().toString().contains(TestInfo.class.getName())).findFirst();
 		assertTrue(first.isPresent());
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/UniqueIdParsingForArrayParameterIntegrationTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.engine.execution.injection.sample.PrimitiveArrayParameterResolver;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.testkit.engine.ExecutionEvent;
+import org.junit.platform.testkit.engine.Event;
 import org.junit.platform.testkit.engine.ExecutionResults;
 
 /**
@@ -44,7 +44,7 @@ void executeTestsForPrimitiveArrayMethodInjectionCases() {
 
 		// @formatter:off
 		UniqueId uniqueId = executionResults.all()
-				.map(ExecutionEvent::getTestDescriptor)
+				.map(Event::getTestDescriptor)
 				.distinct()
 				.skip(2)
 				.map(TestDescriptor::getUniqueId)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ParameterResolverTests.java
Patch:
@@ -17,9 +17,9 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.event;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.finishedWithFailure;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.test;
+import static org.junit.platform.testkit.engine.EventConditions.event;
+import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
+import static org.junit.platform.testkit.engine.EventConditions.test;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ScriptExecutionConditionTests.java
Patch:
@@ -17,9 +17,9 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.event;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.finishedWithFailure;
-import static org.junit.platform.testkit.engine.ExecutionEventConditions.test;
+import static org.junit.platform.testkit.engine.EventConditions.event;
+import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
+import static org.junit.platform.testkit.engine.EventConditions.test;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.isA;
 import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;
 

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventStatistics.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * {@code EventStatistics} provides a fluent API for asserting statistics
- * for {@linkplain ExecutionEvent execution events}.
+ * for {@linkplain Event events}.
  *
  * <p>{@code EventStatistics} is used in conjunction with
  * {@link Events#assertStatistics(java.util.function.Consumer)} as in the
@@ -30,7 +30,7 @@
  * <p>{@code events.assertStatistics(stats -> stats.started(1).succeeded(1).failed(0));}
  *
  * @since 1.4
- * @see ExecutionEvent
+ * @see Event
  * @see Events
  */
 @API(status = EXPERIMENTAL, since = "1.4")

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/engine/EventType.java
Patch:
@@ -18,10 +18,10 @@
 import org.junit.platform.engine.reporting.ReportEntry;
 
 /**
- * Enumeration of the different possible {@link ExecutionEvent} types.
+ * Enumeration of the different possible {@link Event} types.
  *
  * @since 1.4
- * @see ExecutionEvent
+ * @see Event
  */
 @API(status = EXPERIMENTAL, since = "1.4")
 public enum EventType {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Resources.java
Patch:
@@ -48,7 +48,7 @@ public class Resources {
 	public static final String SYSTEM_ERR = "java.lang.System.err";
 
 	/**
-	 * Represents the locale.
+	 * Represents the default locale for the current instance of the JVM.
 	 *
 	 * @since 5.4
 	 * @see java.util.Locale#setDefault(java.util.Locale)
@@ -57,7 +57,7 @@ public class Resources {
 	public static final String LOCALE = "java.util.Locale.default";
 
 	/**
-	 * Represents the time zone.
+	 * Represents the default time zone for the current instance of the JVM.
 	 *
 	 * @since 5.4
 	 * @see java.util.TimeZone#setDefault(java.util.TimeZone)
@@ -68,4 +68,5 @@ public class Resources {
 	private Resources() {
 		/* no-op */
 	}
+
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AtypicalJvmMethodNameTests.java
Patch:
@@ -32,14 +32,14 @@ class AtypicalJvmMethodNameTests extends AbstractJupiterTestEngineTests {
 	@Test
 	void kotlinTestWithMethodNameContainingSpecialCharacters() {
 		ExecutionResults executionResults = executeTestsForClass(ArbitraryNamingKotlinTestCase.class);
-		assertThat(executionResults.getTestsStartedCount()).isEqualTo(2);
+		assertThat(executionResults.tests().started().count()).isEqualTo(2);
 
-		TestDescriptor testDescriptor1 = executionResults.getTestsSuccessfulEvents().get(0).getTestDescriptor();
+		TestDescriptor testDescriptor1 = executionResults.tests().succeeded().list().get(0).getTestDescriptor();
 		assertAll(//
 			() -> assertEquals(METHOD_NAME + "()", testDescriptor1.getDisplayName()), //
 			() -> assertEquals(METHOD_NAME + "()", testDescriptor1.getLegacyReportingName()));
 
-		TestDescriptor testDescriptor2 = executionResults.getTestsSuccessfulEvents().get(1).getTestDescriptor();
+		TestDescriptor testDescriptor2 = executionResults.tests().succeeded().list().get(1).getTestDescriptor();
 		assertAll(//
 			() -> assertEquals("test name ends with parentheses()()", testDescriptor2.getDisplayName()), //
 			() -> assertEquals("test name ends with parentheses()()", testDescriptor2.getLegacyReportingName()));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -38,8 +38,8 @@ class BeforeAllAndAfterAllComposedAnnotationTests extends AbstractJupiterTestEng
 	void beforeAllAndAfterAllAsMetaAnnotations() {
 		ExecutionResults executionResults = executeTestsForClass(TestCase.class);
 
-		assertEquals(1, executionResults.getTestsStartedCount(), "# tests started");
-		assertEquals(1, executionResults.getTestsSuccessfulCount(), "# tests succeeded");
+		assertEquals(1, executionResults.tests().started().count(), "# tests started");
+		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");
 		assertEquals(asList("beforeAll", "test", "afterAll"), methodsInvoked);
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -38,8 +38,8 @@ class BeforeEachAndAfterEachComposedAnnotationTests extends AbstractJupiterTestE
 	void beforeEachAndAfterEachAsMetaAnnotations() {
 		ExecutionResults executionResults = executeTestsForClass(TestCase.class);
 
-		assertEquals(1, executionResults.getTestsStartedCount(), "# tests started");
-		assertEquals(1, executionResults.getTestsSuccessfulCount(), "# tests succeeded");
+		assertEquals(1, executionResults.tests().started().count(), "# tests started");
+		assertEquals(1, executionResults.tests().succeeded().count(), "# tests succeeded");
 		assertEquals(asList("beforeEach", "test", "afterEach"), methodsInvoked);
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleKotlinTests.java
Patch:
@@ -39,7 +39,7 @@ void instancePerClassCanBeUsedForKotlinTestClasses() {
 
 		ExecutionResults executionResults = executeTestsForClass(testClass);
 
-		assertThat(executionResults.getTestsFinishedCount()).isEqualTo(2);
+		assertThat(executionResults.tests().finished().count()).isEqualTo(2);
 		assertThat(InstancePerClassKotlinTestCase.TEST_INSTANCES.keySet()).hasSize(1);
 		assertThat(getOnlyElement(InstancePerClassKotlinTestCase.TEST_INSTANCES.values())) //
 				.containsEntry("beforeAll", 1) //
@@ -56,7 +56,7 @@ void instancePerMethodIsDefaultForKotlinTestClasses() {
 
 		ExecutionResults executionResults = executeTestsForClass(testClass);
 
-		assertThat(executionResults.getTestsFinishedCount()).isEqualTo(2);
+		assertThat(executionResults.tests().finished().count()).isEqualTo(2);
 		List<Object> instances = new ArrayList<>(InstancePerMethodKotlinTestCase.TEST_INSTANCES.keySet());
 		assertThat(instances) //
 				.hasSize(3) //

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/BridgeMethodTests.java
Patch:
@@ -97,7 +97,7 @@ void inheritedNonGenericMethodsAreExecuted() {
 	private String execute(int expectedTestFinishedCount, Class<?> testClass) {
 		sequence.clear();
 		ExecutionResults executionResults = executeTestsForClass(testClass);
-		assertEquals(expectedTestFinishedCount, executionResults.getTestsStartedCount());
+		assertEquals(expectedTestFinishedCount, executionResults.tests().started().count());
 		return sequence.toString();
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -173,8 +173,8 @@ private void assertBeforeAllAndAfterAllCallbacks(Class<?> testClass, int testsSt
 
 		ExecutionResults executionResults = executeTestsForClass(testClass);
 
-		assertEquals(testsStarted, executionResults.getTestsStartedCount(), "# tests started");
-		assertEquals(testsSuccessful, executionResults.getTestsSuccessfulCount(), "# tests succeeded");
+		assertEquals(testsStarted, executionResults.tests().started().count(), "# tests started");
+		assertEquals(testsSuccessful, executionResults.tests().succeeded().count(), "# tests succeeded");
 
 		assertEquals(asList(expectedCalls), callSequence, () -> "wrong call sequence for " + testClass.getName());
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExtensionContextExecutionTests.java
Patch:
@@ -66,7 +66,7 @@ void twoTestClassesCanShareStateViaEngineExtensionContext() {
 
 		ExecutionResults executionResults = executeTests(selectClass(A.class), selectClass(B.class));
 
-		assertThat(executionResults.getTestsStartedCount()).isEqualTo(2);
+		assertThat(executionResults.tests().started().count()).isEqualTo(2);
 		assertThat(Parent.counter).hasValue(1);
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
-import static org.junit.platform.testkit.ExecutionEvent.Type.DYNAMIC_TEST_REGISTERED;
+import static org.junit.platform.testkit.EventType.DYNAMIC_TEST_REGISTERED;
 import static org.junit.platform.testkit.ExecutionEventConditions.abortedWithReason;
 import static org.junit.platform.testkit.ExecutionEventConditions.container;
 import static org.junit.platform.testkit.ExecutionEventConditions.displayName;
@@ -259,8 +259,7 @@ void reportsContainerWithAssumptionFailureInMethodSourceAsAborted() {
 	}
 
 	private List<ExecutionEvent> execute(DiscoverySelector... selectors) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(),
-			request().selectors(selectors).build()).getExecutionEvents();
+		return ExecutionRecorder.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
 	}
 
 	static class TestCase {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorIntegrationTests.java
Patch:
@@ -199,8 +199,7 @@ private void testAddressAggegator(Address address) {
 	}
 
 	private List<ExecutionEvent> execute(DiscoverySelector... selectors) {
-		return ExecutionRecorder.execute(new JupiterTestEngine(),
-			request().selectors(selectors).build()).getExecutionEvents();
+		return ExecutionRecorder.execute(new JupiterTestEngine(), request().selectors(selectors).build()).all().list();
 	}
 
 	// -------------------------------------------------------------------------

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/TestExecutionResultConditions.java
Patch:
@@ -30,6 +30,7 @@
 public class TestExecutionResultConditions {
 
 	private TestExecutionResultConditions() {
+		/* no-op */
 	}
 
 	public static Condition<TestExecutionResult> status(Status expectedStatus) {
@@ -54,7 +55,6 @@ public static Condition<Throwable> suppressed(int index, Condition<Throwable> ch
 		return new Condition<>(
 			throwable -> throwable.getSuppressed().length > index && checked.matches(throwable.getSuppressed()[index]),
 			"suppressed at index %d matches %s", index, checked);
-
 	}
 
 	public static Condition<TestExecutionResult> cause(Condition<? super Throwable> condition) {

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionIntegrationTests.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.jupiter.engine.Constants.PARALLEL_CONFIG_STRATEGY_PROPERTY_NAME;
 import static org.junit.jupiter.engine.Constants.PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
-import static org.junit.platform.testkit.ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED;
+import static org.junit.platform.testkit.EventType.REPORTING_ENTRY_PUBLISHED;
 import static org.junit.platform.testkit.ExecutionEventConditions.event;
 import static org.junit.platform.testkit.ExecutionEventConditions.finishedSuccessfully;
 import static org.junit.platform.testkit.ExecutionEventConditions.finishedWithFailure;
@@ -467,7 +467,7 @@ private List<ExecutionEvent> execute(int parallelism, Class<?>... testClasses) {
 				.configurationParameter(PARALLEL_CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, String.valueOf(parallelism))
 				.build();
 		// @formatter:on
-		return ExecutionRecorder.execute(new JupiterTestEngine(), discoveryRequest).getExecutionEvents();
+		return ExecutionRecorder.execute(new JupiterTestEngine(), discoveryRequest).all().list();
 	}
 
 	static class ThreadReporter implements AfterTestExecutionCallback {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertAll.java
Patch:
@@ -77,7 +77,9 @@ static void assertAll(String heading, Stream<Executable> executables) {
 				.collect(Collectors.toList());
 
 		if (!failures.isEmpty()) {
-			throw new MultipleFailuresError(heading, failures);
+			MultipleFailuresError multipleFailuresError = new MultipleFailuresError(heading, failures);
+			failures.forEach(multipleFailuresError::addSuppressed);
+			throw multipleFailuresError;
 		}
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -100,6 +100,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 			catch (ClassCastException ex) {
 				throw invalidReturnTypeException(ex);
 			}
+			dynamicTestExecutor.awaitFinished();
 		});
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -28,6 +28,7 @@
  *
  * @since 1.0
  * @see ClassSupport
+ * @see ModifierSupport
  * @see ReflectionSupport
  */
 @API(status = MAINTAINED, since = "1.0")

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ClassSupport.java
Patch:
@@ -22,6 +22,7 @@
  *
  * @since 1.1
  * @see AnnotationSupport
+ * @see ModifierSupport
  * @see ReflectionSupport
  */
 @API(status = MAINTAINED, since = "1.1")

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -28,6 +28,7 @@
  * @since 1.0
  * @see AnnotationSupport
  * @see ClassSupport
+ * @see ModifierSupport
  */
 @API(status = MAINTAINED, since = "1.0")
 public final class ReflectionSupport {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertLinesMatch.java
Patch:
@@ -167,7 +167,7 @@ static boolean matches(String expectedLine, String actualLine) {
 			return true;
 		}
 		try {
-			return actualLine.matches(expectedLine);
+			return (actualLine != null) && actualLine.matches(expectedLine);
 		}
 		catch (PatternSyntaxException ignore) {
 			return false;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -35,6 +35,7 @@
  * @see ExternalResourceSupport
  * @see VerifierSupport
  * @see ExpectedExceptionSupport
+ * @see org.junit.jupiter.migrationsupport.EnableJUnit4MigrationSupport
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -176,7 +176,7 @@ static Stream<Arguments> stringIntAndListProvider() {
 
 	// tag::CsvSource_example[]
 	@ParameterizedTest
-	@CsvSource({ "foo, 1", "bar, 2", "'baz, qux', 3" })
+	@CsvSource({ "foo, 1", "bar, 2", "'baz, qux', 0xF1" })
 	void testWithCsvSource(String first, int second) {
 		assertNotNull(first);
 		assertNotEquals(0, second);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -28,6 +28,8 @@
 @API(status = INTERNAL, since = "5.0")
 public class JupiterEngineDescriptor extends EngineDescriptor implements Node<JupiterEngineExecutionContext> {
 
+	public static final String ENGINE_ID = "junit-jupiter";
+
 	public JupiterEngineDescriptor(UniqueId uniqueId) {
 		super(uniqueId, "JUnit Jupiter");
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestInstanceLifecycleUtils.java
Patch:
@@ -10,8 +10,6 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;
-
 import java.util.Optional;
 
 import org.junit.jupiter.api.TestInstance;
@@ -29,7 +27,9 @@
  * @see TestInstance
  * @see TestInstance.Lifecycle
  */
-final class TestInstanceLifecycleUtils {
+public final class TestInstanceLifecycleUtils {
+
+	public static final String DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME = "junit.jupiter.testinstance.lifecycle.default";
 
 	private static final Logger logger = LoggerFactory.getLogger(TestInstanceLifecycleUtils.class);
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -33,9 +33,9 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
 import org.junit.jupiter.engine.descriptor.Filterable;
+import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.discovery.predicates.IsInnerClass;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
@@ -167,7 +167,7 @@ void resolveUniqueId(UniqueIdSelector selector) {
 		UniqueId uniqueId = selector.getUniqueId();
 
 		// Ignore Unique IDs from other test engines.
-		if (JupiterTestEngine.ENGINE_ID.equals(uniqueId.getEngineId().orElse(null))) {
+		if (JupiterEngineDescriptor.ENGINE_ID.equals(uniqueId.getEngineId().orElse(null))) {
 			try {
 				Deque<TestDescriptor> resolvedDescriptors = resolveAllSegments(uniqueId);
 				handleResolvedDescriptorsForUniqueId(uniqueId, resolvedDescriptors);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -14,7 +14,6 @@
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Stream.concat;
 import static org.apiguardian.api.API.Status.INTERNAL;
-import static org.junit.jupiter.engine.Constants.EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -28,7 +27,6 @@
 
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.Extension;
-import org.junit.jupiter.engine.Constants;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
 import org.junit.platform.commons.util.ClassLoaderUtils;
@@ -50,6 +48,8 @@
 @API(status = INTERNAL, since = "5.0")
 public class ExtensionRegistry {
 
+	public static final String EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME = "junit.jupiter.extensions.autodetection.enabled";
+
 	private static final Logger logger = LoggerFactory.getLogger(ExtensionRegistry.class);
 
 	private static final List<Extension> DEFAULT_EXTENSIONS = Collections.unmodifiableList(Arrays.asList(//
@@ -63,7 +63,7 @@ public class ExtensionRegistry {
 	 * Factory for creating and populating a new root registry with the default
 	 * extensions.
 	 *
-	 * <p>If the {@link Constants#EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME}
+	 * <p>If the {@link org.junit.jupiter.engine.Constants#EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME}
 	 * configuration parameter has been set to {@code true}, extensions will be
 	 * auto-detected using Java's {@link ServiceLoader} mechanism and automatically
 	 * registered after the default extensions.

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/JupiterUniqueIdBuilder.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery;
 
-import org.junit.jupiter.engine.JupiterTestEngine;
+import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.UniqueId;
 
@@ -49,7 +49,7 @@ public static UniqueId uniqueIdForTestTemplateMethod(Class<?> clazz, String meth
 	}
 
 	public static UniqueId engineId() {
-		return UniqueId.forEngine(JupiterTestEngine.ENGINE_ID);
+		return UniqueId.forEngine(JupiterEngineDescriptor.ENGINE_ID);
 	}
 
 }

File: junit-platform-commons-java-9/src/test/java/integration/JupiterIntegrationTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIf;
-import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.discovery.DiscoverySelectorResolver;
 import org.junit.platform.commons.util.ModuleUtils;
@@ -61,7 +60,7 @@ void resolve() {
 		ModuleSelector selector = DiscoverySelectors.selectModule(getClass().getModule().getName());
 		assertEquals(getClass().getModule().getName(), selector.getModuleName());
 
-		EngineDescriptor engine = new JupiterEngineDescriptor(UniqueId.forEngine(JupiterTestEngine.ENGINE_ID));
+		EngineDescriptor engine = new JupiterEngineDescriptor(UniqueId.forEngine(JupiterEngineDescriptor.ENGINE_ID));
 		DiscoverySelectorResolver resolver = new DiscoverySelectorResolver();
 
 		resolver.resolveSelectors(request().selectors(selector).build(), engine);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/BridgeMethodTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.jupiter.engine.bridge.NumberTestGroup.ByteTestCase;
 import org.junit.jupiter.engine.bridge.NumberTestGroup.ShortTestCase;
-import org.junit.platform.engine.test.event.ExecutionEventRecorder;
+import org.junit.platform.testkit.ExecutionsResult;
 
 /**
  * @since 5.0
@@ -96,8 +96,8 @@ void inheritedNonGenericMethodsAreExecuted() {
 
 	private String execute(int expectedTestFinishedCount, Class<?> testClass) {
 		sequence.clear();
-		ExecutionEventRecorder recorder = executeTestsForClass(testClass);
-		assertEquals(expectedTestFinishedCount, recorder.getTestFinishedCount());
+		ExecutionsResult executionsResult = executeTestsForClass(testClass).getExecutionsResult();
+		assertEquals(expectedTestFinishedCount, executionsResult.getTestStartedCount());
 		return sequence.toString();
 	}
 

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/TestDescriptorStub.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.engine.test;
+package org.junit.platform.testkit;
 
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/TestEngineSpy.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.engine.test;
+package org.junit.platform.testkit;
 
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.ExecutionRequest;

File: junit-platform-testkit/src/main/java/org/junit/platform/testkit/TestEngineStub.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.platform.engine.test;
+package org.junit.platform.testkit;
 
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.ExecutionRequest;

File: platform-tests/src/test/java/org/junit/platform/console/tasks/FlatPrintingListenerTests.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TreePrinterTests.java
Patch:
@@ -31,8 +31,8 @@
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 class TreePrinterTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/VerboseTreeListenerTests.java
Patch:
@@ -21,8 +21,8 @@
 import org.junit.platform.console.options.Theme;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.4

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportDataTests.java
Patch:
@@ -22,8 +22,8 @@
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestPlan;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportWriterTests.java
Patch:
@@ -27,9 +27,9 @@
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -50,11 +50,11 @@
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestDescriptor;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestEngine;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.Launcher;
 import org.junit.platform.launcher.TestExecutionListener;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
+import org.junit.platform.testkit.TestDescriptorStub;
 import org.opentest4j.AssertionFailedError;
 
 /**

File: platform-tests/src/test/java/org/junit/platform/engine/TestDescriptorTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import org.junit.jupiter.api.Test;
-import org.junit.platform.engine.test.TestDescriptorStub;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClassSource;
-import org.junit.platform.engine.test.TestDescriptorStub;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -45,15 +45,15 @@
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestDescriptor;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestEngine;
-import org.junit.platform.engine.test.TestDescriptorStub;
-import org.junit.platform.engine.test.TestEngineSpy;
-import org.junit.platform.engine.test.TestEngineStub;
 import org.junit.platform.launcher.PostDiscoveryFilter;
 import org.junit.platform.launcher.PostDiscoveryFilterStub;
 import org.junit.platform.launcher.TestExecutionListener;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
+import org.junit.platform.testkit.TestDescriptorStub;
+import org.junit.platform.testkit.TestEngineSpy;
+import org.junit.platform.testkit.TestEngineStub;
 import org.mockito.ArgumentCaptor;
 import org.mockito.InOrder;
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/EngineDiscoveryResultValidatorTests.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.test.TestDescriptorStub;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.3

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherConfigTests.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.engine.TestEngine;
-import org.junit.platform.engine.test.TestEngineStub;
 import org.junit.platform.launcher.TestExecutionListener;
+import org.junit.platform.testkit.TestEngineStub;
 
 /**
  * Unit tests for {@link LauncherConfig} and {@link LauncherConfig.Builder}.

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -41,12 +41,12 @@
 import org.junit.platform.engine.discovery.ModuleSelector;
 import org.junit.platform.engine.discovery.PackageSelector;
 import org.junit.platform.engine.discovery.UniqueIdSelector;
-import org.junit.platform.engine.test.TestEngineStub;
 import org.junit.platform.launcher.DiscoveryFilterStub;
 import org.junit.platform.launcher.EngineFilter;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
 import org.junit.platform.launcher.PostDiscoveryFilter;
 import org.junit.platform.launcher.PostDiscoveryFilterStub;
+import org.junit.platform.testkit.TestEngineStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/SummaryGenerationTests.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClassSource;
-import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
+import org.junit.platform.testkit.TestDescriptorStub;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/platform/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -66,8 +66,6 @@
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalContainerDescriptor;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestDescriptor;
 import org.junit.platform.engine.support.hierarchical.DemoHierarchicalTestEngine;
-import org.junit.platform.engine.test.TestDescriptorStub;
-import org.junit.platform.engine.test.TestEngineStub;
 import org.junit.platform.launcher.EngineFilter;
 import org.junit.platform.launcher.Launcher;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
@@ -85,6 +83,8 @@
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.SuiteDisplayName;
 import org.junit.platform.suite.api.UseTechnicalNames;
+import org.junit.platform.testkit.TestDescriptorStub;
+import org.junit.platform.testkit.TestEngineStub;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunListener;

File: platform-tooling-support-tests/src/test/java/platform/tooling/support/HelperTests.java
Patch:
@@ -31,6 +31,7 @@ void loadModuleDirectoryNames() {
 			"junit-platform-commons", //
 			"junit-platform-console", //
 			"junit-platform-engine", //
+			"junit-platform-testkit", //
 			"junit-platform-launcher", //
 			"junit-platform-runner", //
 			"junit-platform-suite-api", //

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/OS.java
Patch:
@@ -100,7 +100,7 @@ private static OS determineCurrentOs() {
 		if (osName.contains("mac")) {
 			return MAC;
 		}
-		if (osName.contains("solaris")) {
+		if (osName.contains("sunos") || osName.contains("solaris")) {
 			return SOLARIS;
 		}
 		if (osName.contains("win")) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.discovery.DiscoverySelectorResolver;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.execution.OpenTest4JAndJUnit4AwareThrowableCollector;
+import org.junit.jupiter.engine.support.JupiterThrowableCollectorFactory;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.ExecutionRequest;
@@ -91,7 +91,7 @@ protected JupiterEngineExecutionContext createExecutionContext(ExecutionRequest
 	 */
 	@Override
 	protected ThrowableCollector.Factory createThrowableCollectorFactory(ExecutionRequest request) {
-		return OpenTest4JAndJUnit4AwareThrowableCollector::new;
+		return JupiterThrowableCollectorFactory::createThrowableCollector;
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeAllMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeEachMethods;
 import static org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils.getTestInstanceLifecycle;
+import static org.junit.jupiter.engine.support.JupiterThrowableCollectorFactory.createThrowableCollector;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -44,7 +45,6 @@
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.execution.OpenTest4JAndJUnit4AwareThrowableCollector;
 import org.junit.jupiter.engine.execution.TestInstanceProvider;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.JUnitException;
@@ -161,7 +161,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		registerBeforeEachMethodAdapters(registry);
 		registerAfterEachMethodAdapters(registry);
 
-		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
+		ThrowableCollector throwableCollector = createThrowableCollector();
 		ClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, this.lifecycle, context.getConfigurationParameters(),
 			throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.descriptor.ExtensionUtils.populateNewExtensionRegistryFromExtendWithAnnotation;
+import static org.junit.jupiter.engine.support.JupiterThrowableCollectorFactory.createThrowableCollector;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -30,7 +31,6 @@
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.execution.OpenTest4JAndJUnit4AwareThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -81,7 +81,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
 
-		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
+		ThrowableCollector throwableCollector = createThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,
 			throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.engine.execution;
 
 import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.junit.jupiter.engine.support.JupiterThrowableCollectorFactory.createThrowableCollector;
 import static org.junit.platform.commons.util.ReflectionUtils.getWrapperType;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
@@ -51,7 +52,7 @@ public ExtensionValuesStore(ExtensionValuesStore parentStore) {
 	 * does not close values in parent stores.
 	 */
 	public void closeAllStoredCloseableValues() {
-		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
+		ThrowableCollector throwableCollector = createThrowableCollector();
 		for (Supplier<Object> supplier : storedValues.values()) {
 			Object value = supplier.get();
 			if (value instanceof ExtensionContext.Store.CloseableResource) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -44,6 +44,7 @@
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
+import org.junit.jupiter.engine.execution.OpenTest4JAndJUnit4AwareThrowableCollector;
 import org.junit.jupiter.engine.execution.TestInstanceProvider;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.JUnitException;
@@ -57,7 +58,6 @@
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.platform.engine.support.hierarchical.ExclusiveResource;
-import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
@@ -161,7 +161,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		registerBeforeEachMethodAdapters(registry);
 		registerAfterEachMethodAdapters(registry);
 
-		ThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();
+		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
 		ClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, this.lifecycle, context.getConfigurationParameters(),
 			throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -30,11 +30,11 @@
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
+import org.junit.jupiter.engine.execution.OpenTest4JAndJUnit4AwareThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector.Executable;
 
@@ -81,7 +81,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
 
-		ThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();
+		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,
 			throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContextException;
-import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
@@ -52,7 +51,7 @@ public ExtensionValuesStore(ExtensionValuesStore parentStore) {
 	 * does not close values in parent stores.
 	 */
 	public void closeAllStoredCloseableValues() {
-		ThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();
+		ThrowableCollector throwableCollector = new OpenTest4JAndJUnit4AwareThrowableCollector();
 		for (Supplier<Object> supplier : storedValues.values()) {
 			Object value = supplier.get();
 			if (value instanceof ExtensionContext.Store.CloseableResource) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ThrowableCollector.java
Patch:
@@ -35,6 +35,7 @@
  * of the first {@code Throwable} that failed execution.
  *
  * @since 1.3
+ * @see OpenTest4JAwareThrowableCollector
  */
 @API(status = MAINTAINED, since = "1.3")
 public class ThrowableCollector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/OpenTest4JAwareThrowableCollector.java
Patch:
@@ -20,9 +20,9 @@
  * {@link TestAbortedException} as <em>aborting</em>.
  *
  * @see ThrowableCollector
- * @since 5.3
+ * @since 1.3
  */
-@API(status = MAINTAINED, since = "5.3")
+@API(status = MAINTAINED, since = "1.3")
 public class OpenTest4JAwareThrowableCollector extends ThrowableCollector {
 
 	public OpenTest4JAwareThrowableCollector() {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ThrowableCollector.java
Patch:
@@ -34,9 +34,9 @@
  * {@linkplain Throwable#addSuppressed(Throwable) suppressed} {@code Throwables}
  * of the first {@code Throwable} that failed execution.
  *
- * @since 5.3
+ * @since 1.3
  */
-@API(status = MAINTAINED, since = "5.3")
+@API(status = MAINTAINED, since = "1.3")
 public class ThrowableCollector {
 
 	private final Predicate<? super Throwable> abortedExecutionPredicate;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertThrowsAssertionsTests.java
Patch:
@@ -79,6 +79,9 @@ void assertThrowsWithMethodReferenceForVoidReturnType() {
 		// Explicitly as an Executable
 		exception = assertThrows(IllegalMonitorStateException.class, (Executable) object::notify);
 		assertNotNull(exception);
+
+		exception = assertThrows(IllegalMonitorStateException.class, (Executable) object::wait);
+		assertNotNull(exception);
 	}
 
 	// --- executable ----------------------------------------------------------

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/MemoryLeakTests.java
Patch:
@@ -26,14 +26,14 @@
 @TestInstance(Lifecycle.PER_METHOD)
 class MemoryLeakTests {
 
-	// Allocate 1 GB of memory per test method.
+	// Allocate 500 MB of memory per test method.
 	//
 	// If the test instance is garbage collected, this should not cause any
 	// problems for the JUnit 5 build; however, if the instances of this test
 	// class are NOT garbage collected, we should run out of memory pretty
-	// quickly since the instances of this test class would consume 10GB of
+	// quickly since the instances of this test class would consume 5GB of
 	// heap space.
-	final byte[] gigabyte = new byte[1_073_741_824];
+	final byte[] state = new byte[524_288_000];
 
 	@Test
 	void test01() {

File: documentation/src/test/java/example/defaultmethods/ComparableContract.java
Patch:
@@ -34,7 +34,7 @@ default void returnsPositiveNumberComparedToSmallerValue() {
 	}
 
 	@Test
-	default void returnsNegativeNumberComparedToSmallerValue() {
+	default void returnsNegativeNumberComparedToLargerValue() {
 		T value = createValue();
 		T smallerValue = createSmallerValue();
 		assertTrue(smallerValue.compareTo(value) < 0);

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -42,7 +42,7 @@ private ReflectionSupport() {
 	 *
 	 * <p>Class names for arrays may be specified using either the JVM's internal
 	 * String representation (e.g., {@code [[I} for {@code int[][]},
-	 * {@code [Lava.lang.String;} for {@code java.lang.String[]}, etc.) or
+	 * {@code [Ljava.lang.String;} for {@code java.lang.String[]}, etc.) or
 	 * <em>source code syntax</em> (e.g., {@code int[][]}, {@code java.lang.String[]},
 	 * etc.).
 	 *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -36,6 +36,7 @@
  * <li>{@link AfterEachCallback}</li>
  * <li>{@link BeforeTestExecutionCallback}</li>
  * <li>{@link AfterTestExecutionCallback}</li>
+ * <li>{@link TestInstanceFactory}</li>
  * <li>{@link TestInstancePostProcessor}</li>
  * <li>{@link ParameterResolver}</li>
  * <li>{@link TestExecutionExceptionHandler}</li>

File: platform-tooling-support-tests/src/main/java/platform/tooling/support/Request.java
Patch:
@@ -34,7 +34,7 @@ public class Request {
 
 	private static final Path projects = Paths.get("projects");
 	private static final Path toolPath = Paths.get("build", "test-tools");
-	private static final Path workPath = Paths.get("build", "test-workspace");
+	public static final Path WORKSPACE = Paths.get("build", "test-workspace");
 
 	public static Builder builder() {
 		return new Builder();
@@ -81,10 +81,10 @@ public Result run() {
 			}
 
 			Files.createDirectories(toolPath);
-			Files.createDirectories(workPath);
+			Files.createDirectories(WORKSPACE);
 
 			// prepare workspace
-			var workspace = workPath.resolve(getWorkspace());
+			var workspace = WORKSPACE.resolve(getWorkspace());
 			FileUtils.deleteQuietly(workspace.toFile());
 			var project = projects.resolve(getProject());
 			if (Files.isDirectory(project)) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContextTests.java
Patch:
@@ -45,7 +45,7 @@ void executionListenerIsHandedOnWhenContextIsExtended() {
 	@Test
 	void extendWithAllAttributes() {
 		UniqueId uniqueId = UniqueId.parse("[engine:junit-jupiter]/[class:MyClass]");
-		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(uniqueId, getClass());
+		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(uniqueId, getClass(), configParams);
 		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, classTestDescriptor,
 			configParams, null);
 		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(configParams);
@@ -64,7 +64,7 @@ void extendWithAllAttributes() {
 	@Test
 	void canOverrideAttributeWhenContextIsExtended() {
 		UniqueId uniqueId = UniqueId.parse("[engine:junit-jupiter]/[class:MyClass]");
-		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(uniqueId, getClass());
+		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(uniqueId, getClass(), configParams);
 		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, classTestDescriptor,
 			configParams, null);
 		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(configParams);

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/TestMethodFilterTests.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
 import org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor;
+import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.FilterResult;
 import org.junit.platform.engine.UniqueId;
 
@@ -38,6 +39,7 @@
  */
 class TestMethodFilterTests {
 
+	private static final ConfigurationParameters configParams = mock(ConfigurationParameters.class);
 	private final TestListResolver resolver = mock(TestListResolver.class);
 
 	private final TestMethodFilter filter = new TestMethodFilter(this.resolver);
@@ -79,7 +81,7 @@ private static TestMethodTestDescriptor newTestMethodDescriptor() throws Excepti
 
 	private static ClassTestDescriptor newClassTestDescriptor() throws Exception {
 		UniqueId uniqueId = UniqueId.forEngine("class");
-		return new ClassTestDescriptor(uniqueId, TestClass.class);
+		return new ClassTestDescriptor(uniqueId, TestClass.class, configParams);
 	}
 
 	public static class TestClass {

File: documentation/src/test/java/example/TestReporterDemo.java
Patch:
@@ -17,7 +17,6 @@
 import org.junit.jupiter.api.parallel.Execution;
 import org.junit.jupiter.api.parallel.ExecutionMode;
 
-// end::user_guide[]
 @Execution(ExecutionMode.SAME_THREAD)
 // tag::user_guide[]
 class TestReporterDemo {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -34,7 +34,8 @@
 /**
  * Default implementation of the {@link Launcher} API.
  *
- * <p>External clients can obtain an instance by invoking {@link LauncherFactory#create()}.
+ * <p>External clients can obtain an instance by invoking
+ * {@link LauncherFactory#create()}.
  *
  * @since 1.0
  * @see Launcher

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -70,7 +70,9 @@ default void publishEntry(String key, String value) {
 	 * @param value the value to be published; never {@code null} or blank
 	 * @see #publishEntry(Map)
 	 * @see #publishEntry(String, String)
+	 * @since 5.3
 	 */
+	@API(status = STABLE, since = "5.3")
 	default void publishEntry(String value) {
 		this.publishEntry("value", value);
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -295,7 +295,9 @@ default void publishReportEntry(String key, String value) {
 	 * @see #publishReportEntry(Map)
 	 * @see #publishReportEntry(String, String)
 	 * @see org.junit.platform.engine.EngineExecutionListener#reportingEntryPublished
+	 * @since 5.3
 	 */
+	@API(status = STABLE, since = "5.3")
 	default void publishReportEntry(String value) {
 		this.publishReportEntry("value", value);
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextTests.java
Patch:
@@ -185,7 +185,7 @@ void reportEntriesArePublishedToExecutionContext() {
 		extensionContext.publishReportEntry(map1);
 		extensionContext.publishReportEntry(map2);
 		extensionContext.publishReportEntry("3rd key", "third value");
-		extensionContext.publishReportMessage("status message");
+		extensionContext.publishReportEntry("status message");
 
 		ArgumentCaptor<ReportEntry> entryCaptor = ArgumentCaptor.forClass(ReportEntry.class);
 		Mockito.verify(engineExecutionListener, Mockito.times(4)).reportingEntryPublished(
@@ -199,7 +199,7 @@ void reportEntriesArePublishedToExecutionContext() {
 		assertEquals(map1, reportEntry1.getKeyValuePairs());
 		assertEquals(map2, reportEntry2.getKeyValuePairs());
 		assertEquals("third value", reportEntry3.getKeyValuePairs().get("3rd key"));
-		assertEquals("status message", reportEntry4.getKeyValuePairs().get("message"));
+		assertEquals("status message", reportEntry4.getKeyValuePairs().get("value"));
 	}
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleDetailsTests.java
Patch:
@@ -159,13 +159,13 @@ static class ReportTestCase {
 
 		@Test
 		void reportSingleMessage(TestReporter reporter) {
-			reporter.publishMessage("foo");
+			reporter.publishEntry("foo");
 		}
 
 		@Test
 		void reportMultipleMessages(TestReporter reporter) {
-			reporter.publishMessage("foo");
-			reporter.publishMessage("bar");
+			reporter.publishEntry("foo");
+			reporter.publishEntry("bar");
 		}
 
 		@Test

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java
Patch:
@@ -612,7 +612,7 @@ default void myTest() {
 		}
 	}
 
-	static class TestCaseWithDefaultMethod implements TestInterface {
+	private static class TestCaseWithDefaultMethod implements TestInterface {
 	}
 
 	void myTest() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestDescriptor.java
Patch:
@@ -42,7 +42,7 @@ abstract class MethodBasedTestDescriptor extends JupiterTestDescriptor {
 	}
 
 	MethodBasedTestDescriptor(UniqueId uniqueId, String displayName, Class<?> testClass, Method testMethod) {
-		super(uniqueId, displayName, MethodSource.from(Preconditions.notNull(testMethod, "Method must not be null")));
+		super(uniqueId, displayName, MethodSource.from(testClass, testMethod));
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -152,7 +152,7 @@ private static MethodSource toMethodSource(Class<?> testClass, String methodName
 		}
 		else {
 			List<Method> methods = findMethods(testClass, where(Method::getName, isEqual(methodName)));
-			return (methods.size() == 1) ? MethodSource.from(getOnlyElement(methods)) : null;
+			return (methods.size() == 1) ? MethodSource.from(testClass, getOnlyElement(methods)) : null;
 		}
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -34,7 +34,7 @@
  * translates to a {@link java.util.stream.Stream Stream} of {@link Arguments}
  * (i.e., {@code Stream<Arguments>}); however, the actual concrete return type
  * can take on many forms. In this context, a "stream" is anything that JUnit
- * can reliably covert into a {@code Stream}, such as
+ * can reliably convert into a {@code Stream}, such as
  * {@link java.util.stream.Stream Stream},
  * {@link java.util.stream.DoubleStream DoubleStream},
  * {@link java.util.stream.LongStream LongStream},

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -99,6 +99,7 @@ public static <T> T getOnlyElement(Collection<T> collection) {
 	 * <li>{@link Iterable}</li>
 	 * <li>{@link Iterator}</li>
 	 * <li>{@link Object} array</li>
+	 * <li>primitive array</li>
 	 * </ul>
 	 *
 	 * @param object the object to convert into a stream; never {@code null}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ForkJoinPoolHierarchicalTestExecutorService.java
Patch:
@@ -70,7 +70,7 @@ private ForkJoinPool createForkJoinPool(ConfigurationParameters configurationPar
 				Integer.TYPE, Integer.TYPE, Predicate.class, Long.TYPE, TimeUnit.class);
 			return constructor.newInstance(configuration.getParallelism(), defaultForkJoinWorkerThreadFactory, null,
 				false, configuration.getCorePoolSize(), configuration.getMaxPoolSize(),
-				configuration.getMinimumRunnable(), null, configuration.getKeepAlive(), TimeUnit.SECONDS);
+				configuration.getMinimumRunnable(), null, configuration.getKeepAliveSeconds(), TimeUnit.SECONDS);
 		}
 		catch (Exception e) {
 			// Fallback for Java 8

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ParallelExecutionConfiguration.java
Patch:
@@ -56,9 +56,9 @@ public interface ParallelExecutionConfiguration {
 	int getCorePoolSize();
 
 	/**
-	 * Get the number of milliseconds for which inactive threads should be kept
-	 * alive before terminating them and shrinking the thread pool.
+	 * Get the number of seconds for which inactive threads should be kept alive
+	 * before terminating them and shrinking the thread pool.
 	 */
-	int getKeepAlive();
+	int getKeepAliveSeconds();
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -34,6 +34,7 @@
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
+import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector.Executable;
 
@@ -80,7 +81,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
 
-		ThrowableCollector throwableCollector = new ThrowableCollector();
+		ThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,
 			throwableCollector);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContextException;
+import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
@@ -51,7 +52,7 @@ public ExtensionValuesStore(ExtensionValuesStore parentStore) {
 	 * does not close values in parent stores.
 	 */
 	public void closeAllStoredCloseableValues() {
-		ThrowableCollector throwableCollector = new ThrowableCollector();
+		ThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();
 		for (Supplier<Object> supplier : storedValues.values()) {
 			Object value = supplier.get();
 			if (value instanceof ExtensionContext.Store.CloseableResource) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -36,7 +36,7 @@
 import org.junit.platform.engine.support.descriptor.FileSource;
 import org.junit.platform.engine.support.descriptor.UriSource;
 import org.junit.platform.engine.support.hierarchical.Node;
-import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
+import org.junit.platform.engine.support.hierarchical.OpenTest4JAwareThrowableCollector;
 
 /**
  * Unit tests for {@link TestFactoryTestDescriptor}.
@@ -121,7 +121,7 @@ void before() throws Exception {
 			isClosed = false;
 
 			context = new JupiterEngineExecutionContext(null, null).extend().withThrowableCollector(
-				new ThrowableCollector()).withExtensionContext(extensionContext).build();
+				new OpenTest4JAwareThrowableCollector()).withExtensionContext(extensionContext).build();
 
 			Method testMethod = CustomStreamTestCase.class.getDeclaredMethod("customStream");
 			descriptor = new TestFactoryTestDescriptor(UniqueId.forEngine("engine"), CustomStreamTestCase.class,

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -650,7 +650,8 @@ public Type getType() {
 	private static class MyExecutor extends HierarchicalTestExecutor<MyEngineExecutionContext> {
 
 		MyExecutor(ExecutionRequest request, MyEngineExecutionContext rootContext) {
-			super(request, rootContext, new SameThreadHierarchicalTestExecutorService());
+			super(request, rootContext, new SameThreadHierarchicalTestExecutorService(),
+				OpenTest4JAwareThrowableCollector::new);
 		}
 	}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/NodeTestTaskWalkerIntegrationTests.java
Patch:
@@ -73,7 +73,8 @@ private NodeTestTask<?> prepareNodeTestTaskTree(Class<?> testClass) {
 		TestDescriptor testDescriptor = new JupiterTestEngine().discover(discoveryRequest,
 			UniqueId.forEngine("junit-jupiter"));
 		ExecutionRequest executionRequest = new ExecutionRequest(testDescriptor, null, null);
-		HierarchicalTestExecutor<?> executor = new HierarchicalTestExecutor<>(executionRequest, null, null);
+		HierarchicalTestExecutor<?> executor = new HierarchicalTestExecutor<>(executionRequest, null, null,
+			() -> new ThrowableCollector(t -> false));
 		return executor.prepareNodeTestTaskTree();
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -19,9 +19,9 @@
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.EngineExecutionListener;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
  * @since 5.0

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -19,9 +19,9 @@
 import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.EngineExecutionListener;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
  * @since 5.0

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -26,16 +26,16 @@
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;
-import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.engine.execution.AfterEachMethodAdapter;
 import org.junit.jupiter.engine.execution.BeforeEachMethodAdapter;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector.Executable;
 
 /**
  * {@link TestDescriptor} for tests based on Java methods.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContextException;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
  * {@code ExtensionValuesStore} is used inside implementations of

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.support.hierarchical.EngineExecutionContext;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
  * @since 5.0

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.TestFactory;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClasspathResourceSource;
@@ -37,6 +36,7 @@
 import org.junit.platform.engine.support.descriptor.FileSource;
 import org.junit.platform.engine.support.descriptor.UriSource;
 import org.junit.platform.engine.support.hierarchical.Node;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 
 /**
  * Unit tests for {@link TestFactoryTestDescriptor}.

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextTests.java
Patch:
@@ -43,6 +43,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.reporting.ReportEntry;
+import org.junit.platform.engine.support.hierarchical.ThrowableCollector;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mockito;
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutorTests.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * @since 1.0
  */
+@SuppressWarnings("deprecation")
 class SingleTestExecutorTests {
 
 	@Test

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -87,6 +87,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 	}
 
 	private InputStream openInputStream(ExtensionContext context, String resource) {
+		Preconditions.notBlank(resource, "Classpath resource [" + resource + "] must not be null or blank");
 		Class<?> testClass = context.getRequiredTestClass();
 		return Preconditions.notNull(inputStreamProvider.apply(testClass, resource),
 			() -> "Classpath resource [" + resource + "] does not exist");

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -130,7 +130,7 @@ void throwsExceptionForBlankClasspathResource() {
 		PreconditionViolationException exception = assertThrows(PreconditionViolationException.class,
 			() -> provide(new CsvFileArgumentsProvider(), annotation).toArray());
 
-		assertThat(exception).hasMessageContaining("Classpath resource [    ] does not exist");
+		assertThat(exception).hasMessageContaining("Classpath resource [    ] must not be null or blank");
 	}
 
 	@Test

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -68,8 +68,7 @@ protected Object instantiateTestClass(JupiterEngineExecutionContext parentExecut
 		Optional<ExtensionRegistry> childExtensionRegistryForOuterInstance = Optional.empty();
 		Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(
 			childExtensionRegistryForOuterInstance);
-		ExtensionRegistry parentRegistry = parentExecutionContext.getExtensionRegistry();
-		return instantiateTestClass(Optional.of(outerInstance), registry, parentRegistry, extensionContext);
+		return instantiateTestClass(Optional.of(outerInstance), registry, extensionContext);
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -270,10 +270,11 @@ private TestInstanceFactory resolveTestInstanceFactory(ExtensionRegistry registr
 		}
 
 		if (factories.size() > 1) {
-			String factoryNames = factories.stream().map(factory -> factory.getClass().getName()).collect(joining(","));
+			String factoryNames = factories.stream().map(factory -> factory.getClass().getName()).collect(
+				joining(", "));
 
 			String errorMessage = String.format(
-				"Discovered multiple TestInstanceFactory extensions registered for test class [%s], but only one is permitted: %s",
+				"The following TestInstanceFactory extensions were registered for test class [%s], but only one is permitted: %s",
 				testClass.getName(), factoryNames);
 
 			throw new ExtensionConfigurationException(errorMessage);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstanceFactory.java
Patch:
@@ -41,6 +41,7 @@
  * @see TestInstanceFactoryContext
  * @see TestInstancePostProcessor
  */
+@FunctionalInterface
 @API(status = EXPERIMENTAL, since = "5.3")
 public interface TestInstanceFactory extends Extension {
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstantiationException.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.platform.commons.JUnitException;
 
 /**
- * Thrown if an error is encountered with the invocation of
- * any {@link TestInstanceFactory}.
+ * Thrown if an error is encountered during the execution of
+ * a {@link TestInstanceFactory}.
  *
  * @since 5.3
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -10,6 +10,7 @@
 
 package org.junit.jupiter.engine.extension;
 
+import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Stream.concat;
 import static org.apiguardian.api.API.Status.INTERNAL;
@@ -172,7 +173,7 @@ private <E extends Extension> Stream<E> streamLocal(Class<E> extensionType) {
 	 * @see #stream(Class)
 	 */
 	public <E extends Extension> List<E> getExtensions(Class<E> extensionType) {
-		return stream(extensionType).collect(toList());
+		return stream(extensionType).collect(toCollection(ArrayList::new));
 	}
 
 	/**

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -41,7 +41,7 @@ public class RunnerTestDescriptor extends VintageTestDescriptor {
 	private boolean wasFiltered;
 
 	public RunnerTestDescriptor(UniqueId uniqueId, Class<?> testClass, Runner runner) {
-		super(uniqueId, runner.getDescription(), testClass.getName(), ClassSource.from(testClass));
+		super(uniqueId, runner.getDescription(), testClass.getSimpleName(), ClassSource.from(testClass));
 		this.runner = runner;
 	}
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -378,7 +378,7 @@ public void reportingEntryPublished(TestDescriptor testDescriptor, ReportEntry e
 		// @formatter:off
 		assertThat(PlainJUnit4TestCaseWithLifecycleMethods.EVENTS).containsExactly(
 			"executionStarted:JUnit Vintage",
-				"executionStarted:" + testClass.getName(),
+				"executionStarted:" + testClass.getSimpleName(),
 					"beforeClass",
 						"executionStarted:failingTest",
 							"before",
@@ -392,7 +392,7 @@ public void reportingEntryPublished(TestDescriptor testDescriptor, ReportEntry e
 							"after",
 						"executionFinished:succeedingTest",
 					"afterClass",
-				"executionFinished:" + testClass.getName(),
+				"executionFinished:" + testClass.getSimpleName(),
 			"executionFinished:JUnit Vintage"
 		);
 		// @formatter:on

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestExtensionTests.java
Patch:
@@ -103,7 +103,7 @@ void throwsExceptionWhenParameterizedTestIsNotInvokedAtLeastOnce() {
 		JUnitException exception = assertThrows(JUnitException.class, stream::close);
 
 		assertThat(exception).hasMessage(
-			"Configuration error: You must provide at least one argument for this @ParameterizedTest");
+			"Configuration error: You must configure at least one set of arguments for this @ParameterizedTest");
 	}
 
 	private ExtensionContext getExtensionContextReturningSingleMethod(Object testCase) {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -76,7 +76,7 @@ public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContex
 				.peek(invocationContext -> invocationCount.incrementAndGet())
 				.onClose(() ->
 						Preconditions.condition(invocationCount.get() > 0,
-								"Configuration error: You must provide at least one argument for this @ParameterizedTest"));
+								"Configuration error: You must configure at least one set of arguments for this @ParameterizedTest"));
 		// @formatter:on
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -381,7 +381,9 @@ interface CloseableResource {
 		 * @see #getOrComputeIfAbsent(Object, Function)
 		 * @see #getOrComputeIfAbsent(Object, Function, Class)
 		 * @see CloseableResource
+		 * @since 5.1
 		 */
+		@API(status = STABLE, since = "5.1")
 		default <V> V getOrComputeIfAbsent(Class<V> type) {
 			return getOrComputeIfAbsent(type, ReflectionSupport::newInstance, type);
 		}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/ResourceLocks.java
Patch:
@@ -38,6 +38,6 @@
 	/**
 	 * An array of one or more {@linkplain ResourceLock @ResourceLock} declarations.
 	 */
-	ResourceLock[] value() default {};
+	ResourceLock[] value();
 
 }

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DefaultParallelExecutionConfigurationStrategyTests.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @since 1.3
  */
-class DefaultParallelExecutionConfigurationStrategyTest {
+class DefaultParallelExecutionConfigurationStrategyTests {
 
 	private ConfigurationParameters configParams = mock(ConfigurationParameters.class);
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreePrinter.java
Patch:
@@ -105,7 +105,8 @@ private String colorCaption(TreeNode node) {
 		if (node.reason().isPresent()) {
 			return color(SKIPPED, caption);
 		}
-		return color(Color.valueOf(node.identifier().orElseThrow(AssertionError::new)), caption);
+		Color color = node.identifier().map(Color::valueOf).orElse(Color.NONE);
+		return color(color, caption);
 	}
 
 	private void printThrowable(String indent, TestExecutionResult result) {

File: platform-tests/src/test/java/org/junit/jupiter/extensions/Heavyweight.java
Patch:
@@ -45,6 +45,8 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
 	}
 
 	interface Resource {
+		String ID = "org.junit.jupiter.extensions.Heavyweight.Resource";
+
 		int usages();
 	}
 

File: platform-tests/src/test/java/org/junit/jupiter/extensions/HeavyweightAlphaTests.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestFactory;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.parallel.ResourceLock;
 
 /**
  * Unit tests for {@link org.junit.jupiter.api.extension.ExtensionContext.Store.CloseableResource}
@@ -30,6 +31,7 @@
  * @since 1.1
  */
 @ExtendWith(Heavyweight.class)
+@ResourceLock(Heavyweight.Resource.ID)
 class HeavyweightAlphaTests {
 
 	private static int mark;

File: platform-tests/src/test/java/org/junit/jupiter/extensions/HeavyweightBetaTests.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.parallel.ResourceLock;
 
 /**
  * Unit tests for {@link org.junit.jupiter.api.extension.ExtensionContext.Store.CloseableResource}
@@ -28,6 +29,7 @@
  */
 @ExtendWith(Heavyweight.class)
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@ResourceLock(Heavyweight.Resource.ID)
 class HeavyweightBetaTests {
 
 	private int mark;

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -130,8 +130,7 @@ private void assertDebugMessageLogged(LogRecordListener listener, String regex)
 		assertThat(listener.stream(ClasspathScanner.class, Level.FINE)
 				.map(LogRecord::getMessage)
 				.filter(m -> m.matches(regex))
-				.count()
-		).isEqualTo(1);
+		).hasSize(1);
 		// @formatter:on
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicNode.java
Patch:
@@ -32,7 +32,7 @@ public abstract class DynamicNode {
 
 	private final String displayName;
 
-	/** Custom test source {@link URI} instance associated with this node; potentially {@code null}. */
+	/** Custom test source {@link URI} associated with this node; potentially {@code null}. */
 	private final URI testSourceUri;
 
 	DynamicNode(String displayName, URI testSourceUri) {
@@ -50,9 +50,9 @@ public String getDisplayName() {
 	}
 
 	/**
-	 * Get the optional test source {@link URI} of this {@code DynamicNode}.
+	 * Get the custom test source {@link URI} of this {@code DynamicNode}.
 	 *
-	 * @return an {@code Optional} containing the test source {@link URI};
+	 * @return an {@code Optional} containing the custom test source {@link URI};
 	 * never {@code null} but potentially empty
 	 * @since 5.3
 	 */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicContainer.java
Patch:
@@ -71,13 +71,13 @@ public static DynamicContainer dynamicContainer(String displayName, Stream<? ext
 
 	/**
 	 * Factory for creating a new {@code DynamicContainer} for the supplied display
-	 * name, the test source uri, and stream of dynamic nodes.
+	 * name, the test source {@link URI}, and stream of dynamic nodes.
 	 *
 	 * <p>The stream of dynamic nodes must not contain {@code null} elements.
 	 *
 	 * @param displayName the display name for the dynamic container; never
 	 * {@code null} or blank
-	 * @param testSourceUri the test source uri for the dynamic test; can be {@code null}
+	 * @param testSourceUri the test source URI for the dynamic test; can be {@code null}
 	 * @param dynamicNodes stream of dynamic nodes to execute;
 	 * never {@code null}
 	 * @since 5.3

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicTest.java
Patch:
@@ -65,11 +65,11 @@ public static DynamicTest dynamicTest(String displayName, Executable executable)
 
 	/**
 	 * Factory for creating a new {@code DynamicTest} for the supplied display
-	 * name, the test source uri, and executable code block.
+	 * name, the test source {@link URI}, and executable code block.
 	 *
 	 * @param displayName the display name for the dynamic test; never
 	 * {@code null} or blank
-	 * @param testSourceUri the test source uri for the dynamic test; can be {@code null}
+	 * @param testSourceUri the test source URI for the dynamic test; can be {@code null}
 	 * @param executable the executable code block for the dynamic test;
 	 * never {@code null}
 	 * @since 5.3

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DefaultUriSource.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**
- * Default uri-based test source implementation.
+ * Default implementation of {@link UriSource}.
  *
  * @since 1.3
  */
@@ -32,7 +32,7 @@ class DefaultUriSource implements UriSource {
 	private final URI uri;
 
 	DefaultUriSource(URI uri) {
-		this.uri = Preconditions.notNull(uri, "uri must not be null");
+		this.uri = Preconditions.notNull(uri, "URI must not be null");
 	}
 
 	@Override

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptorTests.java
Patch:
@@ -34,7 +34,7 @@
  */
 class AbstractTestDescriptorTests {
 
-	EngineDescriptor engineDescriptor;
+	private EngineDescriptor engineDescriptor;
 
 	@BeforeEach
 	void initTree() {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -790,7 +790,7 @@ private static void findNestedClasses(Class<?> clazz, Set<Class<?>> candidates)
 			Collections.addAll(candidates, clazz.getDeclaredClasses());
 		}
 		catch (NoClassDefFoundError error) {
-			logger.warn(error, () -> "Failed to retrieve declared classes for " + clazz.getName());
+			logger.debug(error, () -> "Failed to retrieve declared classes for " + clazz.getName());
 		}
 
 		// Search class hierarchy

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -609,7 +609,7 @@ void findNestedClassesWithInvalidNestedClassFile(LogRecordListener listener) thr
 
 			assertThat(ReflectionUtils.findNestedClasses(classWithInvalidNestedClassFile, clazz -> true)).isEmpty();
 			// @formatter:off
-			String logMessage = listener.stream(ReflectionUtils.class, Level.WARNING)
+			String logMessage = listener.stream(ReflectionUtils.class, Level.FINE)
 					.findFirst()
 					.map(LogRecord::getMessage)
 					.orElse("didn't find log record");

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -972,6 +972,7 @@ private static Class<?>[] resolveParameterTypes(Class<?> clazz, String methodNam
 
 		// @formatter:off
 		return Arrays.stream(parameterTypeNames.split(","))
+				.map(String::trim)
 				.map(typeName -> loadRequiredParameterType(clazz, methodName, typeName))
 				.toArray(Class[]::new);
 		// @formatter:on

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java
Patch:
@@ -82,7 +82,7 @@ ConsoleLauncherExecutionResult execute(String... args) {
 	private ConsoleLauncherExecutionResult executeTests(CommandLineOptions options, PrintWriter out) {
 		try {
 			TestExecutionSummary testExecutionSummary = new ConsoleTestExecutor(options).execute(out);
-			return ConsoleLauncherExecutionResult.forSummary(testExecutionSummary);
+			return ConsoleLauncherExecutionResult.forSummary(testExecutionSummary, options);
 		}
 		catch (Exception exception) {
 			exception.printStackTrace(errStream);

File: platform-tooling-support-tests/src/main/java/platform/tooling/support/Tool.java
Patch:
@@ -30,7 +30,7 @@ public enum Tool {
 	// Downloadable Tools
 
 	ANT("bin/ant", "bin/ant.bat", //
-			"https://www.apache.org/dist/ant/binaries/${ARCHIVE}", "apache-ant-${VERSION}-bin.zip"),
+			"http://mirror.netcologne.de/apache.org/ant/binaries/${ARCHIVE}", "apache-ant-${VERSION}-bin.zip"),
 
 	GRADLE("bin/gradle", "bin/gradle.bat", //
 			"https://services.gradle.org/distributions/${ARCHIVE}", "gradle-${VERSION}-bin.zip"),

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnJreIntegrationTests.java
Patch:
@@ -67,7 +67,7 @@ void java10() {
 	@Test
 	@EnabledOnJre(JAVA_11)
 	void java11() {
-		assertTrue(onJava10());
+		assertTrue(onJava11());
 	}
 
 	@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1206,7 +1206,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Execut
 	// --- supplier ---
 
 	/**
-	 * <em>Asserts</em> that execution of the supplied {@code executable} throws
+	 * <em>Asserts</em> that execution of the given {@code supplier} throws
 	 * an exception of the {@code expectedType} and returns the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is
@@ -1223,7 +1223,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Throwi
 	}
 
 	/**
-	 * <em>Asserts</em> that execution of the supplied {@code executable} throws
+	 * <em>Asserts</em> that execution of the given {@code supplier} throws
 	 * an exception of the {@code expectedType} and returns the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is
@@ -1242,7 +1242,7 @@ public static <T extends Throwable> T assertThrows(Class<T> expectedType, Throwi
 	}
 
 	/**
-	 * <em>Asserts</em> that execution of the supplied {@code executable} throws
+	 * <em>Asserts</em> that execution of the given {@code supplier} throws
 	 * an exception of the {@code expectedType} and returns the exception.
 	 *
 	 * <p>If no exception is thrown, or if an exception of a different type is

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/VerboseTreePrintingListener.java
Patch:
@@ -94,14 +94,14 @@ public void executionStarted(TestIdentifier testIdentifier) {
 
 	@Override
 	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+		testExecutionResult.getThrowable().ifPresent(t -> printDetail(Color.FAILED, "caught", readStackTrace(t)));
 		if (testIdentifier.isContainer()) {
 			Long creationMillis = frames.pop();
 			printVerticals(theme.end());
 			printf(Color.CONTAINER, " %s", testIdentifier.getDisplayName());
 			printf(NONE, " finished after %d ms.%n", System.currentTimeMillis() - creationMillis);
 			return;
 		}
-		testExecutionResult.getThrowable().ifPresent(t -> printDetail(Color.FAILED, "caught", readStackTrace(t)));
 		printDetail(NONE, "duration", "%d ms%n", System.currentTimeMillis() - executionStartedMillis);
 		String status = theme.status(testExecutionResult) + " " + testExecutionResult.getStatus();
 		printDetail(Color.valueOf(testExecutionResult), "status", "%s%n", status);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentsAccessor.java
Patch:
@@ -32,6 +32,8 @@
  * In addition, {@link ArgumentsAggregator} implementations are given access to
  * an {@code ArgumentsAccessor}.
  *
+ * <p>This interface is not intended to be implemented by clients.
+ *
  * @since 5.2
  * @see ArgumentsAggregator
  * @see org.junit.jupiter.params.ParameterizedTest

File: platform-tests/src/test/java/org/junit/AutomaticModuleNameTests.java
Patch:
@@ -68,6 +68,7 @@ private static List<String> moduleDirectoryNames() throws IOException {
 				.filter(line -> line.startsWith(startOfModuleLine))
 				.map(line -> line.substring(startOfModuleLine.length(), line.length() - 1))
 				.filter(name -> !name.equals("junit-platform-console-standalone"))
+				.filter(name -> !name.equals("junit-bom"))
 				.filter(name -> !name.endsWith("-java-9"))
 				.filter(name -> name.startsWith("junit-"))) {
 			return stream.collect(Collectors.toList());

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/ArgumentsAccessor.java
Patch:
@@ -178,7 +178,7 @@ public interface ArgumentsAccessor {
 	Object[] toArray();
 
 	/**
-	 * Get all arguments in this accessor as a list.
+	 * Get all arguments in this accessor as an immutable list.
 	 */
 	List<Object> toList();
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/aggregator/DefaultArgumentsAccessor.java
Patch:
@@ -13,8 +13,8 @@
 import static java.lang.String.format;
 import static org.apiguardian.api.API.Status.INTERNAL;
 
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import org.apiguardian.api.API;
@@ -120,8 +120,7 @@ public Object[] toArray() {
 
 	@Override
 	public List<Object> toList() {
-		// Must return a copy since Arrays.asList returns a write-through list.
-		return new ArrayList<>(Arrays.asList(this.arguments));
+		return Collections.unmodifiableList(Arrays.asList(this.arguments));
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -10,6 +10,7 @@
 
 package org.junit.jupiter.params;
 
+import static org.junit.jupiter.params.aggregator.AggregationUtils.hasAggregator;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
@@ -22,7 +23,6 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
-import org.junit.jupiter.params.aggregator.AggregationUtils;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ArgumentsSource;
@@ -87,9 +87,8 @@ protected static Stream<? extends Arguments> arguments(ArgumentsProvider provide
 	}
 
 	private Object[] consumedArguments(Object[] arguments, Method templateMethod) {
-		boolean hasAggregate = AggregationUtils.hasAggregate(templateMethod);
 		int parameterCount = templateMethod.getParameterCount();
-		return hasAggregate ? arguments
+		return hasAggregator(templateMethod) ? arguments
 				: (arguments.length > parameterCount ? Arrays.copyOf(arguments, parameterCount) : arguments);
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/aggregator/AggregatorTests.java
Patch:
@@ -14,14 +14,14 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.entry;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.time.LocalDate;
 import java.util.Map;
 import java.util.stream.IntStream;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -70,11 +70,11 @@ void argumentsAccessorAsArgumentToMethod(ArgumentsAccessor accessor) {
 		assertEquals(55, IntStream.range(0, accessor.size()).map(i -> accessor.getInteger(i)).sum());
 	}
 
-	@ParameterizedTest
+	@ParameterizedTest(name = "[ArgumentsAccessor with TestInfo: {arguments}")
 	@CsvSource({ "1, 2, 3, 4, 5, 6, 7, 8, 9, 10" })
-	@Disabled("Disabled since aggregating argument consumers currently conflict with other ParameterResolvers")
 	void argumentsAccessorAsArgumentToMethodAlongsideTestInfo(ArgumentsAccessor accessor, TestInfo testInfo) {
 		assertEquals(55, IntStream.range(0, accessor.size()).map(i -> accessor.getInteger(i)).sum());
+		assertTrue(testInfo.getDisplayName().contains("ArgumentsAccessor with TestInfo"));
 	}
 
 	enum Gender {

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -170,7 +170,7 @@ class AvailableOptions {
 		includeClassNamePattern = parser.acceptsAll(asList("n", "include-classname"),
 			"Provide a regular expression to include only classes whose fully qualified names match. " //
 					+ "To avoid loading classes unnecessarily, the default pattern only includes class " //
-					+ "names that end with \"Test\" or \"Tests\". " //
+					+ "names that begin with \"Test\" or end with \"Test\" or \"Tests\". " //
 					+ "When this option is repeated, all patterns will be combined using OR semantics.") //
 				.withRequiredArg() //
 				.defaultsTo(ClassNameFilter.STANDARD_INCLUDE_PATTERN);

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeClassNamePatterns.java
Patch:
@@ -60,9 +60,9 @@
 	/**
 	 * Regular expressions used to match against fully qualified class names.
 	 *
-	 * <p>Defaults to {@code "^.*Tests?$"} which matches against class names
-	 * ending in {@code Test} or {@code Tests} (in any package).
+	 * <p>The default pattern matches against classes whose names either begin
+	 * with {@code Test} or end with {@code Test} or {@code Tests} (in any package).
 	 */
-	String[] value() default "^.*Tests?$";
+	String[] value() default "^(Test.*|.+[.$]Test.*|.*Tests?)$";
 
 }

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleLauncherIntegrationTests.java
Patch:
@@ -35,9 +35,9 @@ void executeWithoutArgumentsFailsAndPrintsHelpInformation() {
 	}
 
 	@Test
-	void executeWithoutExcludeClassnameOptionDoesNotExcludeClasses() {
+	void executeWithoutExcludeClassnameOptionDoesNotExcludeClassesAndMustIncludeAllClassesMatchingTheStandardClassnamePattern() {
 		String[] args = { "-e", "junit-jupiter", "-p", "org.junit.platform.console.subpackage" };
-		assertEquals(2, new ConsoleLauncherWrapper().execute(args).getTestsFoundCount());
+		assertEquals(9, new ConsoleLauncherWrapper().execute(args).getTestsFoundCount());
 	}
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -89,7 +89,6 @@
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
-import org.junit.runners.model.InitializationError;
 import org.mockito.ArgumentCaptor;
 import org.mockito.InOrder;
 
@@ -745,8 +744,7 @@ private TestDescriptor testDescriptorWithTags(String... tag) {
 		return testDescriptor;
 	}
 
-	private LauncherDiscoveryRequest instantiateRunnerAndCaptureGeneratedRequest(Class<?> testClass)
-			throws InitializationError {
+	private LauncherDiscoveryRequest instantiateRunnerAndCaptureGeneratedRequest(Class<?> testClass) {
 		Launcher launcher = mock(Launcher.class);
 		ArgumentCaptor<LauncherDiscoveryRequest> captor = ArgumentCaptor.forClass(LauncherDiscoveryRequest.class);
 		when(launcher.discover(captor.capture())).thenReturn(TestPlan.from(emptySet()));

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -61,7 +61,6 @@
 import org.junit.runner.manipulation.Filterable;
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;
-import org.junit.runners.model.InitializationError;
 
 /**
  * JUnit 4 based {@link Runner} which runs tests on the JUnit Platform in a
@@ -116,12 +115,12 @@ public class JUnitPlatform extends Runner implements Filterable {
 	private LauncherDiscoveryRequest discoveryRequest;
 	private JUnitPlatformTestTree testTree;
 
-	public JUnitPlatform(Class<?> testClass) throws InitializationError {
+	public JUnitPlatform(Class<?> testClass) {
 		this(testClass, LauncherFactory.create());
 	}
 
 	// For testing only
-	JUnitPlatform(Class<?> testClass, Launcher launcher) throws InitializationError {
+	JUnitPlatform(Class<?> testClass, Launcher launcher) {
 		this.launcher = launcher;
 		this.testClass = testClass;
 		this.discoveryRequest = createDiscoveryRequest();

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -738,8 +738,8 @@ public static List<Class<?>> findAllClassesInPackage(String basePackageName, Cla
 	}
 
 	/**
-	 * @see org.junit.platform.commons.support.ReflectionSupport#findAllClassesInModule(String, Predicate, Predicate)
 	 * @since 1.1.1
+	 * @see org.junit.platform.commons.support.ReflectionSupport#findAllClassesInModule(String, Predicate, Predicate)
 	 */
 	public static List<Class<?>> findAllClassesInModule(String moduleName, Predicate<Class<?>> classFilter,
 			Predicate<String> classNameFilter) {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -72,6 +72,9 @@ public static <A extends Annotation> Optional<A> findAnnotation(Optional<? exten
 	 * present</em> nor <em>meta-present</em> on the class, this method will
 	 * additionally search on interfaces implemented by the class before
 	 * finding an annotation that is <em>indirectly present</em> on the class.
+	 *
+	 * @return an {@code Optional} containing the annotation; never {@code null} but
+	 * potentially empty
 	 */
 	public static <A extends Annotation> Optional<A> findAnnotation(AnnotatedElement element, Class<A> annotationType) {
 		return AnnotationUtils.findAnnotation(element, annotationType);

File: platform-tests/src/test/java/org/junit/jupiter/extensions/TempDirectory.java
Patch:
@@ -44,8 +44,7 @@ public class TempDirectory implements AfterEachCallback, ParameterResolver {
 
 	@Override
 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
-		return parameterContext.getParameter().isAnnotationPresent(Root.class)
-				&& parameterContext.getParameter().getType() == Path.class;
+		return parameterContext.isAnnotated(Root.class) && parameterContext.getParameter().getType() == Path.class;
 	}
 
 	@Override

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.IdentityHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -195,7 +196,7 @@ public enum HierarchyTraversalMode {
 
 		classNameToTypeMap = Collections.unmodifiableMap(classNamesToTypes);
 
-		Map<Class<?>, Class<?>> primitivesToWrappers = new HashMap<>(8);
+		Map<Class<?>, Class<?>> primitivesToWrappers = new IdentityHashMap<>(8);
 
 		primitivesToWrappers.put(boolean.class, Boolean.class);
 		primitivesToWrappers.put(byte.class, Byte.class);

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -19,7 +19,6 @@
 
 import joptsimple.BuiltinHelpFormatter;
 import joptsimple.OptionDescriptor;
-import joptsimple.OptionException;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 
@@ -40,7 +39,7 @@ public CommandLineOptions parse(String... arguments) {
 			OptionSet detectedOptions = parser.parse(arguments);
 			return availableOptions.toCommandLineOptions(detectedOptions);
 		}
-		catch (OptionException | IllegalStateException e) {
+		catch (Exception e) {
 			throw new JUnitException("Error parsing command-line arguments", e);
 		}
 	}

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -497,11 +497,12 @@ void parseInvalidConfigurationParameters() {
 	}
 
 	@Test
-	void parseInvalidConfigurationParametersSpecifiedTwice() {
+	void parseInvalidConfigurationParametersWithDuplicateKey() {
 		Exception e = assertThrows(JUnitException.class, () -> parseArgLine("--config foo=bar --config foo=baz"));
 
 		assertThat(e.getMessage()).isEqualTo("Error parsing command-line arguments");
-		assertThat(e.getCause().getMessage()).contains("Duplicate key foo", "bar", "baz");
+		assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
+		assertThat(e.getCause().getMessage()).isEqualTo("Duplicate key 'foo' in: [foo=bar, foo=baz]");
 	}
 
 	@Test

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/TestExecutionResultConditions.java
Patch:
@@ -45,7 +45,8 @@ public static Condition<Throwable> isA(Class<? extends Throwable> expectedClass)
 	}
 
 	public static Condition<Throwable> suppressed(int index, Condition<Throwable> checked) {
-		return new Condition<>(throwable -> checked.matches(throwable.getSuppressed()[index]),
+		return new Condition<>(
+			throwable -> throwable.getSuppressed().length > index && checked.matches(throwable.getSuppressed()[index]),
 			"suppressed at index %d matches %s", index, checked);
 
 	}

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -40,7 +40,7 @@ public CommandLineOptions parse(String... arguments) {
 			OptionSet detectedOptions = parser.parse(arguments);
 			return availableOptions.toCommandLineOptions(detectedOptions);
 		}
-		catch (OptionException e) {
+		catch (OptionException | IllegalStateException e) {
 			throw new JUnitException("Error parsing command-line arguments", e);
 		}
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/AbstractExecutionConditionTests.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.api.condition;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -50,11 +51,11 @@ protected void evaluateCondition() {
 	}
 
 	protected void assertEnabled() {
-		assertThat(this.result.isDisabled()).isFalse();
+		assertTrue(!this.result.isDisabled(), "Should be enabled");
 	}
 
 	protected void assertDisabled() {
-		assertThat(this.result.isDisabled()).isTrue();
+		assertTrue(this.result.isDisabled(), "Should be disabled");
 	}
 
 	protected void assertReasonContains(String text) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/OS.java
Patch:
@@ -62,9 +62,9 @@ public enum OS {
 
 	private static final Logger logger = LoggerFactory.getLogger(OS.class);
 
-	private static final OS CURRENT_OS = determineCurrentfOs();
+	private static final OS CURRENT_OS = determineCurrentOs();
 
-	private static OS determineCurrentfOs() {
+	private static OS determineCurrentOs() {
 		String osName = System.getProperty("os.name");
 
 		if (StringUtils.isBlank(osName)) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariable.java
Patch:
@@ -30,9 +30,8 @@
  * <p>When declared at the class level, the result will apply to all test methods
  * within that class as well.
  *
- * <p>If the specified environment variable is undefined, the presence of this
- * annotation will have no effect on whether or not the class or method
- * is enabled.
+ * <p>If the specified environment variable is undefined, the annotated class or
+ * method will be disabled.
  *
  * @since 5.1
  * @see DisabledIfEnvironmentVariable

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableCondition.java
Patch:
@@ -51,14 +51,12 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 
 		// Nothing to match against?
 		if (actual == null) {
-			return enabled(format("Environment variable [%s] does not exist", name));
+			return disabled(format("Environment variable [%s] does not exist", name));
 		}
-
 		if (actual.matches(regex)) {
 			return enabled(format("Environment variable [%s] with value [%s] matches regular expression [%s]", name,
 				actual, regex));
 		}
-		// else
 		return disabled(format("Environment variable [%s] with value [%s] does not match regular expression [%s]", name,
 			actual, regex));
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfSystemProperty.java
Patch:
@@ -30,9 +30,8 @@
  * <p>When declared at the class level, the result will apply to all test methods
  * within that class as well.
  *
- * <p>If the specified system property is undefined, the presence of this
- * annotation will have no effect on whether or not the class or method
- * is enabled.
+ * <p>If the specified system property is undefined, the annotated class or
+ * method will be disabled.
  *
  * @since 5.1
  * @see DisabledIfSystemProperty

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/EnabledIfSystemPropertyCondition.java
Patch:
@@ -51,14 +51,12 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 
 		// Nothing to match against?
 		if (actual == null) {
-			return enabled(format("System property [%s] does not exist", name));
+			return disabled(format("System property [%s] does not exist", name));
 		}
-
 		if (actual.matches(regex)) {
 			return enabled(
 				format("System property [%s] with value [%s] matches regular expression [%s]", name, actual, regex));
 		}
-		// else
 		return disabled(
 			format("System property [%s] with value [%s] does not match regular expression [%s]", name, actual, regex));
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableIntegrationTests.java
Patch:
@@ -11,7 +11,6 @@
 package org.junit.jupiter.api.condition;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.fail;
 
 import org.junit.jupiter.api.Disabled;
@@ -52,7 +51,7 @@ void environmentVariableDoesNotMatch() {
 	@Test
 	@EnabledIfEnvironmentVariable(named = BOGUS, matches = "doesn't matter")
 	void environmentVariableDoesNotExist() {
-		assertNull(System.getenv(BOGUS));
+		fail("should be disabled");
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfEnvironmentVariableIntegrationTests.java
Patch:
@@ -18,14 +18,14 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link DisabledIfEnvironmentVariable}.
+ * Integration tests for {@link DisabledIfEnvironmentVariable}.
  *
  * @since 5.1
  */
 @Disabled("Disabled since the required environment variable is not set")
 // Tests will pass if you set the following environment variable:
 // DisabledIfEnvironmentVariableTests.key = DisabledIfEnvironmentVariableTests.enigma
-class DisabledIfEnvironmentVariableTests {
+class DisabledIfEnvironmentVariableIntegrationTests {
 
 	private static final String KEY = "DisabledIfEnvironmentVariableTests.key";
 	private static final String ENIGMA = "DisabledIfEnvironmentVariableTests.enigma";

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/DisabledIfSystemPropertyIntegrationTests.java
Patch:
@@ -19,11 +19,11 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link DisabledIfSystemProperty}.
+ * Integration tests for {@link DisabledIfSystemProperty}.
  *
  * @since 5.1
  */
-class DisabledIfSystemPropertyTests {
+class DisabledIfSystemPropertyIntegrationTests {
 
 	private static final String KEY = "DisabledIfSystemPropertyTests.key";
 	private static final String ENIGMA = "DisabledIfSystemPropertyTests.enigma";

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfEnvironmentVariableIntegrationTests.java
Patch:
@@ -18,14 +18,14 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link EnabledIfEnvironmentVariable}.
+ * Integration tests for {@link EnabledIfEnvironmentVariable}.
  *
  * @since 5.1
  */
 @Disabled("Disabled since the required environment variable is not set")
 // Tests will pass if you set the following environment variable:
 // EnabledIfEnvironmentVariableTests.key = EnabledIfEnvironmentVariableTests.enigma
-class EnabledIfEnvironmentVariableTests {
+class EnabledIfEnvironmentVariableIntegrationTests {
 
 	private static final String KEY = "EnabledIfEnvironmentVariableTests.key";
 	private static final String ENIGMA = "EnabledIfEnvironmentVariableTests.enigma";

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledIfSystemPropertyIntegrationTests.java
Patch:
@@ -19,11 +19,11 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link EnabledIfSystemProperty}.
+ * Integration tests for {@link EnabledIfSystemProperty}.
  *
  * @since 5.1
  */
-class EnabledIfSystemPropertyTests {
+class EnabledIfSystemPropertyIntegrationTests {
 
 	private static final String KEY = "EnabledIfSystemPropertyTests.key";
 	private static final String ENIGMA = "EnabledIfSystemPropertyTests.enigma";

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnJreIntegrationTests.java
Patch:
@@ -20,12 +20,12 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link EnabledOnJre}.
+ * Integration tests for {@link EnabledOnJre}.
  *
  * @since 5.1
  */
 @EnabledOnJre({ JAVA_8, JAVA_9, JAVA_10, JAVA_11, OTHER })
-class EnabledOnJreTests {
+class EnabledOnJreIntegrationTests {
 
 	private static final String JAVA_VERSION = System.getProperty("java.version");
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/condition/EnabledOnOsIntegrationTests.java
Patch:
@@ -27,12 +27,12 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Unit tests for {@link EnabledOnOs}.
+ * Integration tests for {@link EnabledOnOs}.
  *
  * @since 5.1
  */
 @EnabledOnOs({ LINUX, MAC, WINDOWS, OTHER })
-class EnabledOnOsTests {
+class EnabledOnOsIntegrationTests {
 
 	private static final String OS_NAME = System.getProperty("os.name").toLowerCase(Locale.ENGLISH);
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/script/ScriptTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v20.html
  */
 
-package org.junit.jupiter.engine.extension;
+package org.junit.jupiter.engine.script;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -525,13 +525,10 @@ private static Optional<Class<?>> loadArrayType(ClassLoader classLoader, String
 	 * Build the <em>fully qualified method name</em> for the method described by the
 	 * supplied class, method name, and parameter types.
 	 *
-	 * <p>See {@link #loadMethod(String)} for details on the format.
-	 *
 	 * @param clazz the class that declares the method; never {@code null}
 	 * @param methodName the name of the method; never {@code null} or blank
 	 * @param parameterTypes the parameter types of the method; may be {@code null} or empty
 	 * @return fully qualified method name; never {@code null}
-	 * @see #loadMethod(String)
 	 */
 	public static String getFullyQualifiedMethodName(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
 		Preconditions.notNull(clazz, "Class must not be null");

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -37,8 +37,9 @@ public Stream<Arguments> provideArguments(ExtensionContext context) {
 		Object testInstance = context.getTestInstance().orElse(null);
 		// @formatter:off
 		return Arrays.stream(methodNames)
+				.map(methodName -> methodName.isEmpty() && context.getTestMethod().isPresent() ? context.getRequiredTestMethod().getName() : methodName)
 				.map(methodName -> ReflectionUtils.findMethod(testClass, methodName)
-					.orElseThrow(() -> new JUnitException("Could not find method: " + methodName)))
+					.orElseThrow(() -> new JUnitException("Could not find method on " + testClass + ": " + methodName)))
 				.map(method -> ReflectionUtils.invokeMethod(method, testInstance))
 				.flatMap(CollectionUtils::toStream)
 				.map(MethodArgumentsProvider::toArguments);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -45,9 +45,9 @@
 public @interface MethodSource {
 
 	/**
-	 * The names of the test class methods to use as sources for arguments; must
-	 * not be empty.
+	 * The names of the test class methods to use as sources for arguments;
+	 * leave empty if the source method has the same name as the test method.
 	 */
-	String[] value();
+	String[] value() default "";
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertArrayEqualsAssertionsTests.java
Patch:
@@ -1557,6 +1557,8 @@ void assertArrayEqualsObjectArrays() {
 		assertArrayEquals(array, array);
 
 		assertArrayEquals(new Object[] {}, new Object[] {});
+		assertArrayEquals(new Object[] {}, new Object[] {}, () -> "should not fail");
+
 		assertArrayEquals(new Object[] { "abc" }, new Object[] { "abc" });
 		assertArrayEquals(new Object[] { "abc", 1, 2L, 3D }, new Object[] { "abc", 1, 2L, 3D });
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertIterableEqualsAssertionsTests.java
Patch:
@@ -34,6 +34,7 @@ class AssertIterableEqualsAssertionsTests {
 	void assertIterableEqualsEqualToSelf() {
 		List<Object> list = listOf("a", 'b', 1, 2);
 		assertIterableEquals(list, list);
+		assertIterableEquals(list, list, () -> "should not fail");
 
 		Set<Object> set = setOf("a", 'b', 1, 2);
 		assertIterableEquals(set, set);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertSameAssertionsTests.java
Patch:
@@ -28,12 +28,14 @@ class AssertSameAssertionsTests {
 	@Test
 	void assertSameWithTwoNulls() {
 		assertSame(null, null);
+		assertSame(null, null, () -> "should not fail");
 	}
 
 	@Test
 	void assertSameWithSameObject() {
 		Object foo = new Object();
 		assertSame(foo, foo);
+		assertSame(foo, foo, () -> "should not fail");
 	}
 
 	@Test

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -143,6 +143,8 @@ void executesEnclosedJUnit4TestCase() {
 			event(engine(), started()), //
 			event(container(testClass), started()), //
 			event(container(nestedClass), started()), //
+			event(test("successfulTest"), started()), //
+			event(test("successfulTest"), finishedSuccessfully()), //
 			event(test("failingTest"), started()), //
 			event(test("failingTest"),
 				finishedWithFailure(allOf(isA(AssertionError.class), message("this test should fail")))), //

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/Categories.java
Patch:
@@ -27,4 +27,6 @@ public interface Skipped {
 	public interface SkippedWithReason extends Skipped {
 	}
 
+	public interface Successful {
+	}
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithExceptionThrowingRunner.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples.junit4;
 
 import org.junit.runner.RunWith;
-import org.junit.vintage.engine.samples.junit4.ExceptionThrowingRunner.ChildCount;
+import org.junit.vintage.engine.samples.junit4.ConfigurableRunner.ChildCount;
 
 /**
  * @since 4.12

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithExceptionThrowingRunner.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples.junit4;
 
 import org.junit.runner.RunWith;
-import org.junit.vintage.engine.samples.junit4.ExceptionThrowingRunner.ChildCount;
+import org.junit.vintage.engine.samples.junit4.ConfigurableRunner.ChildCount;
 
 /**
  * @since 4.12

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithTwoTestMethods.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 
 /**
  * @since 4.12
@@ -29,6 +30,7 @@ public void failingTest() {
 	}
 
 	@Test
+	@Category(Categories.Successful.class)
 	public void successfulTest() {
 		assertEquals(3, 1 + 2);
 	}

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -144,7 +144,7 @@ public static PostDiscoveryFilter excludeTags(List<String> tagExpressions) throw
 	private static PostDiscoveryFilter includeMatching(String infixTagExpression) {
 		TagExpression tagExpression = TagExpression.parseFrom(infixTagExpression).tagExpressionOrThrow(
 			(message) -> new PreconditionViolationException(
-				"Unable to parse tag expression [" + infixTagExpression + "]: " + message));
+				"Unable to parse tag expression \"" + infixTagExpression + "\": " + message));
 		logger.config(() -> "parsed tag expression: " + tagExpression);
 		return descriptor -> FilterResult.includedIf(tagExpression.evaluate(descriptor.getTags()));
 	}

File: platform-tests/src/test/java/org/junit/platform/launcher/TagFilterTests.java
Patch:
@@ -134,7 +134,7 @@ void rejectUnParsableTagExpressions() {
 		String brokenTagExpression = "tag & ";
 		RuntimeException expected = assertThrows(PreconditionViolationException.class,
 			() -> TagFilter.includeTags(brokenTagExpression));
-		assertThat(expected).hasMessageStartingWith("Unable to parse tag expression [" + brokenTagExpression + "]");
+		assertThat(expected).hasMessageStartingWith("Unable to parse tag expression \"" + brokenTagExpression + "\"");
 	}
 
 	private void includeSingleTag(PostDiscoveryFilter filter) {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/tagexpression/ParseStatus.java
Patch:
@@ -74,6 +74,6 @@ public boolean isError() {
 	}
 
 	private boolean isSuccess() {
-		return null == errorMessage;
+		return errorMessage == null;
 	}
 }

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/tagexpression/Tokenizer.java
Patch:
@@ -20,7 +20,7 @@
 class Tokenizer {
 
 	List<Token> tokenize(String infixTagExpression) {
-		if (null == infixTagExpression) {
+		if (infixTagExpression == null) {
 			return emptyList();
 		}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/tagexpression/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * The tag expression language parser and related support classes for.
+ * The tag expression language parser and related support classes.
  */
 
 package org.junit.platform.launcher.tagexpression;

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -159,8 +159,8 @@ void convertsPackageOptions() {
 	@Test
 	void convertsTagOptions() {
 		options.setScanClasspath(true);
-		options.setIncludedTags(asList("fast", "medium", "slow"));
-		options.setExcludedTags(asList("slow"));
+		options.setIncludedTagExpressions(asList("fast", "medium", "slow"));
+		options.setExcludedTagExpressions(asList("slow"));
 
 		LauncherDiscoveryRequest request = convert();
 		List<PostDiscoveryFilter> postDiscoveryFilters = request.getPostDiscoveryFilters();

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -43,6 +43,7 @@
  * </ul>
  *
  * @since 5.0
+ * @see RegisterExtension
  * @see Extension
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.junit.jupiter.engine.descriptor.ExtensionUtils.populateNewExtensionRegistryFromExtendWithAnnotation;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -78,6 +79,7 @@ public Type getType() {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
+
 		ThrowableCollector throwableCollector = new ThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,
@@ -93,7 +95,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 	}
 
 	protected ExtensionRegistry populateNewExtensionRegistry(JupiterEngineExecutionContext context) {
-		return populateNewExtensionRegistryFromExtendWith(getTestMethod(), context.getExtensionRegistry());
+		return populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), getTestMethod());
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.junit.jupiter.engine.descriptor.ExtensionUtils.populateNewExtensionRegistryFromExtendWithAnnotation;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -66,8 +67,8 @@ public boolean mayRegisterTests() {
 
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
-		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(getTestMethod(),
-			context.getExtensionRegistry());
+		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(
+			context.getExtensionRegistry(), getTestMethod());
 
 		// The test instance should be properly maintained by the enclosing class's ExtensionContext.
 		Object testInstance = context.getExtensionContext().getTestInstance().orElse(null);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.junit.jupiter.engine.descriptor.ExtensionUtils.populateNewExtensionRegistryFromExtendWithAnnotation;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -94,7 +95,7 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 	}
 
 	protected ExtensionRegistry populateNewExtensionRegistry(JupiterEngineExecutionContext context) {
-		return populateNewExtensionRegistryFromExtendWith(getTestMethod(), context.getExtensionRegistry());
+		return populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), getTestMethod());
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -12,6 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.junit.jupiter.engine.descriptor.ExtensionUtils.populateNewExtensionRegistryFromExtendWithAnnotation;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -66,8 +67,8 @@ public boolean mayRegisterTests() {
 
 	@Override
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
-		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(getTestMethod(),
-			context.getExtensionRegistry());
+		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(
+			context.getExtensionRegistry(), getTestMethod());
 
 		// The test instance should be properly maintained by the enclosing class's ExtensionContext.
 		Object testInstance = context.getExtensionContext().getTestInstance().orElse(null);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -119,7 +119,7 @@ void afterEach(String wisdom) {
 	static class InstanceLevelExtensionRegistrationWithInjectedExtensionTestCase {
 
 		@RegisterExtension
-		private CrystalBall crystalBall; // Injected by ExtensionInjector.
+		protected CrystalBall crystalBall; // Injected by ExtensionInjector.
 
 		@BeforeEach
 		void beforeEach(String wisdom) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -79,8 +79,6 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
 
-		registerExtensionsFromFields(getTestClass(), registry, testInstance);
-
 		ThrowableCollector throwableCollector = new ThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -78,6 +78,9 @@ public Type getType() {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry registry = populateNewExtensionRegistry(context);
 		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
+
+		registerExtensionsFromFields(getTestClass(), registry, testInstance);
+
 		ThrowableCollector throwableCollector = new ThrowableCollector();
 		ExtensionContext extensionContext = new MethodExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, context.getConfigurationParameters(), testInstance,

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ProgrammaticExtensionRegistrationTests.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
@@ -36,7 +35,6 @@
  */
 class ProgrammaticExtensionRegistrationTests extends AbstractJupiterTestEngineTests {
 
-	@Disabled("Disabled until feature is completed")
 	@Test
 	void instanceLevel() {
 		assertOneTestSucceeded(InstanceLevelExtensionRegistrationTestCase.class);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -43,6 +43,7 @@
  * </ul>
  *
  * @since 5.0
+ * @see RegisterExtension
  * @see Extension
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ParameterResolverTests.java
Patch:
@@ -221,7 +221,6 @@ static class ConstructorInjectionTestCase {
 		private final TestInfo outerTestInfo;
 		private final CustomType outerCustomType;
 
-		@SuppressWarnings("unused")
 		ConstructorInjectionTestCase(TestInfo testInfo, CustomType customType) {
 			this.outerTestInfo = testInfo;
 			this.outerCustomType = customType;
@@ -239,7 +238,6 @@ class NestedTestCase {
 			private final TestInfo innerTestInfo;
 			private final CustomType innerCustomType;
 
-			@SuppressWarnings("unused")
 			NestedTestCase(TestInfo testInfo, CustomType customType) {
 				this.innerTestInfo = testInfo;
 				this.innerCustomType = customType;

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/TestPlanScannerFilterTests.java
Patch:
@@ -101,7 +101,6 @@ public void test2() {
 
 	static class ClassWithNestedTestClass {
 
-		@SuppressWarnings("unused")
 		void method() {
 		}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Set;
 
 import org.apiguardian.api.API;
-import org.junit.jupiter.engine.discovery.predicates.IsScannableTestClass;
+import org.junit.jupiter.engine.discovery.predicates.IsTestClassWithTests;
 import org.junit.platform.commons.util.ClassFilter;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.TestDescriptor;
@@ -43,10 +43,10 @@
 @API(status = INTERNAL, since = "5.0")
 public class DiscoverySelectorResolver {
 
-	private static final IsScannableTestClass isScannableTestClass = new IsScannableTestClass();
+	private static final IsTestClassWithTests isTestClassWithTests = new IsTestClassWithTests();
 
 	public void resolveSelectors(EngineDiscoveryRequest request, TestDescriptor engineDescriptor) {
-		ClassFilter classFilter = buildClassFilter(request, isScannableTestClass);
+		ClassFilter classFilter = buildClassFilter(request, isTestClassWithTests);
 		resolve(request, engineDescriptor, classFilter);
 		filter(engineDescriptor, classFilter);
 		pruneTree(engineDescriptor);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -43,7 +43,7 @@ void beforeAllAndAfterAllAsMetaAnnotations() {
 		assertEquals(asList("beforeAll", "test", "afterAll"), methodsInvoked);
 	}
 
-	private static class TestCase {
+	static class TestCase {
 
 		@CustomBeforeAll
 		static void beforeAll() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -43,7 +43,7 @@ void beforeEachAndAfterEachAsMetaAnnotations() {
 		assertEquals(asList("beforeEach", "test", "afterEach"), methodsInvoked);
 	}
 
-	private static class TestCase {
+	static class TestCase {
 
 		@CustomBeforeEach
 		void beforeEach() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DisabledTests.java
Patch:
@@ -53,15 +53,15 @@ void executeTestsWithDisabledTestMethods() throws Exception {
 	// -------------------------------------------------------------------
 
 	@Disabled
-	private static class DisabledTestClassTestCase {
+	static class DisabledTestClassTestCase {
 
 		@Test
 		void disabledTest() {
 			fail("this should be @Disabled");
 		}
 	}
 
-	private static class DisabledTestMethodsTestCase {
+	static class DisabledTestMethodsTestCase {
 
 		@Test
 		void enabledTest() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ExceptionHandlingTests.java
Patch:
@@ -190,7 +190,7 @@ public void cleanUpExceptions() {
 		FailureTestCase.exceptionToThrowInAfterEach = Optional.empty();
 	}
 
-	private static class FailureTestCase {
+	static class FailureTestCase {
 
 		static Optional<Throwable> exceptionToThrowInBeforeAll = Optional.empty();
 		static Optional<Throwable> exceptionToThrowInAfterAll = Optional.empty();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/MultipleTestableAnnotationsTests.java
Patch:
@@ -45,7 +45,7 @@ void testAndRepeatedTest(LogRecordListener listener) {
 		// @formatter:on
 	}
 
-	private static class TestCase {
+	static class TestCase {
 
 		@Test
 		@RepeatedTest(1)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/NestedTestClassesTests.java
Patch:
@@ -95,7 +95,7 @@ void inheritedNestedTestsAreExecuted() {
 
 	// -------------------------------------------------------------------
 
-	private static class TestCaseWithNesting {
+	static class TestCaseWithNesting {
 
 		@Test
 		void someTest() {
@@ -115,7 +115,7 @@ void failing() {
 		}
 	}
 
-	private static class TestCaseWithDoubleNesting {
+	static class TestCaseWithDoubleNesting {
 
 		static int beforeTopCount = 0;
 		static int beforeNestedCount = 0;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/OverloadedTestMethodTests.java
Patch:
@@ -86,7 +86,7 @@ void executeTestCaseWithOverloadedMethodsWithSingleMethodThatAcceptsArgumentsSel
 		assertTrue(first.isPresent());
 	}
 
-	private static class TestCase {
+	static class TestCase {
 
 		@Test
 		void test() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoveryTests.java
Patch:
@@ -135,7 +135,7 @@ void abstractTest() {
 		}
 	}
 
-	private static class LocalTestCase {
+	static class LocalTestCase {
 
 		@Test
 		void test1() {
@@ -169,11 +169,12 @@ void customTestAnnotation() {
 	@interface CustomTestAnnotation {
 	}
 
-	private static class TestTemplateClass {
+	static class TestTemplateClass {
 
 		@TestTemplate
 		void testTemplate() {
 		}
 
 	}
+
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/UniqueIdParsingForArrayParameterIntegrationTests.java
Patch:
@@ -56,7 +56,7 @@ void executeTestsForPrimitiveArrayMethodInjectionCases() {
 	}
 
 	@ExtendWith(PrimitiveArrayParameterResolver.class)
-	private static class PrimitiveArrayMethodInjectionTestCase {
+	static class PrimitiveArrayMethodInjectionTestCase {
 
 		@Test
 		void primitiveArray(int... ints) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExecutionConditionTests.java
Patch:
@@ -144,7 +144,7 @@ private void assertExecutionConditionOverride(String deactivatePattern, int star
 	// -------------------------------------------------------------------
 
 	@SystemProperty(key = FOO, value = BOGUS)
-	private static class TestCaseWithExecutionConditionOnClass {
+	static class TestCaseWithExecutionConditionOnClass {
 
 		@Test
 		void disabledTest() {
@@ -158,7 +158,7 @@ void atDisabledTest() {
 		}
 	}
 
-	private static class TestCaseWithExecutionConditionOnMethods {
+	static class TestCaseWithExecutionConditionOnMethods {
 
 		@Test
 		void enabledTest() {

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupportTests.java
Patch:
@@ -97,7 +97,7 @@ private ExecutionEventRecorder executeTestsForClass(Class<?> testClass) {
 	}
 
 	@ExtendWith(ExpectedExceptionSupport.class)
-	private static class ExpectedExceptionTestCase {
+	static class ExpectedExceptionTestCase {
 
 		@Rule
 		public ExpectedException thrown = ExpectedException.none();
@@ -127,7 +127,7 @@ void correctExceptionExpectedThrown() {
 	}
 
 	@ExtendWith(ExpectedExceptionSupport.class)
-	private static class ExpectedExceptionSupportWithoutExpectedExceptionRuleTestCase {
+	static class ExpectedExceptionSupportWithoutExpectedExceptionRuleTestCase {
 
 		@Test
 		void success() {

File: junit-jupiter-migrationsupport/src/test/java/org/junit/jupiter/migrationsupport/rules/LauncherBasedEnableRuleMigrationSupportTests.java
Patch:
@@ -78,7 +78,7 @@ private TestDescriptor discoverTests(LauncherDiscoveryRequest request) {
 	}
 
 	@EnableRuleMigrationSupport
-	private static class EnableRuleMigrationSupportWithBothRuleTypesTestCase {
+	static class EnableRuleMigrationSupportWithBothRuleTypesTestCase {
 
 		static boolean afterOfRule1WasExecuted = false;
 
@@ -119,7 +119,7 @@ void beforeMethodOfBothRule2WasExecuted() {
 	}
 
 	@ExtendWith(VerifierSupport.class)
-	private static class VerifierSupportForErrorCollectorTestCase {
+	static class VerifierSupportForErrorCollectorTestCase {
 
 		static boolean survivedBothErrors = false;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicNodeTestDescriptor.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Base {@link TestDescriptor} for a {@link DynamicNode}.
  *
- * @since 5.1
+ * @since 5.0.3
  */
 abstract class DynamicNodeTestDescriptor extends JupiterTestDescriptor {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LegacyReportingUtils.java
Patch:
@@ -22,9 +22,9 @@
  * Utility methods for dealing with legacy reporting infrastructure, such as
  * reporting systems built on the Ant-based XML reporting format for JUnit 4.
  *
- * @since 1.1
+ * @since 1.0.3
  */
-@API(status = MAINTAINED, since = "1.1")
+@API(status = MAINTAINED, since = "1.0.3")
 public class LegacyReportingUtils {
 
 	///CLOVER:OFF

File: platform-tests/src/test/java/org/junit/platform/launcher/listeners/LegacyReportingUtilsTest.java
Patch:
@@ -22,6 +22,9 @@
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 import org.junit.platform.launcher.TestPlan;
 
+/**
+ * @since 1.0.3
+ */
 class LegacyReportingUtilsTest {
 
 	private TestDescriptor engineDescriptor = new EngineDescriptor(UniqueId.forEngine("foo"), "Foo");

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/XmlReportWriter.java
Patch:
@@ -158,7 +158,7 @@ private String getName(TestIdentifier testIdentifier) {
 	}
 
 	private String getClassName(TestIdentifier testIdentifier) {
-		return LegacyReportingUtils.getLegacyReportingClassName(this.reportData.getTestPlan(), testIdentifier);
+		return LegacyReportingUtils.getClassName(this.reportData.getTestPlan(), testIdentifier);
 	}
 
 	private void writeSkippedOrErrorOrFailureElement(TestIdentifier testIdentifier, XMLStreamWriter writer)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -130,6 +130,7 @@ public String getDisplayName() {
 	 *
 	 * @return the legacy reporting name; never {@code null} or blank
 	 * @see org.junit.platform.engine.TestDescriptor#getLegacyReportingName()
+	 * @see org.junit.platform.launcher.listeners.LegacyReportingUtils
 	 */
 	public String getLegacyReportingName() {
 		return this.legacyReportingName;

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/RunListenerAdapter.java
Patch:
@@ -176,7 +176,7 @@ private String getLegacyReportingName(TestIdentifier testIdentifier) {
 	}
 
 	private String getLegacyReportingClassName(TestIdentifier testIdentifier) {
-		return LegacyReportingUtils.getLegacyReportingClassName(testPlan, testIdentifier);
+		return LegacyReportingUtils.getClassName(testPlan, testIdentifier);
 	}
 
 	private StackTraceWriter getStackTraceWriter(TestIdentifier testIdentifier,

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
Patch:
@@ -221,7 +221,7 @@ void notifiedWithCorrectNamesWhenClassExecutionSkipped() throws Exception {
 
 		ReportEntry entry = entryCaptor.getValue();
 		assertTrue(MyTestClass.class.getTypeName().contains(entry.getName()));
-		assertEquals("engine", entry.getSourceName());
+		assertEquals(MyTestClass.class.getTypeName(), entry.getSourceName());
 	}
 
 	@Test
@@ -265,7 +265,7 @@ void notifiedWithCorrectNamesWhenClassExecutionFailed() throws Exception {
 		verify(listener).testFailed(entryCaptor.capture());
 
 		ReportEntry entry = entryCaptor.getValue();
-		assertEquals("engine", entry.getSourceName());
+		assertEquals(MyTestClass.class.getTypeName(), entry.getSourceName());
 		assertNotNull(entry.getStackTraceWriter());
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicContainerTestDescriptor.java
Patch:
@@ -33,8 +33,9 @@ class DynamicContainerTestDescriptor extends DynamicNodeTestDescriptor {
 	private final DynamicContainer dynamicContainer;
 	private final TestSource testSource;
 
-	DynamicContainerTestDescriptor(UniqueId uniqueId, DynamicContainer dynamicContainer, TestSource testSource) {
-		super(uniqueId, dynamicContainer, testSource);
+	DynamicContainerTestDescriptor(UniqueId uniqueId, int index, DynamicContainer dynamicContainer,
+			TestSource testSource) {
+		super(uniqueId, index, dynamicContainer, testSource);
 		this.dynamicContainer = dynamicContainer;
 		this.testSource = testSource;
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicTestTestDescriptor.java
Patch:
@@ -25,8 +25,8 @@ class DynamicTestTestDescriptor extends DynamicNodeTestDescriptor {
 
 	private final DynamicTest dynamicTest;
 
-	DynamicTestTestDescriptor(UniqueId uniqueId, DynamicTest dynamicTest, TestSource source) {
-		super(uniqueId, dynamicTest, source);
+	DynamicTestTestDescriptor(UniqueId uniqueId, int index, DynamicTest dynamicTest, TestSource source) {
+		super(uniqueId, index, dynamicTest, source);
 		this.dynamicTest = dynamicTest;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -102,12 +102,12 @@ static JupiterTestDescriptor createDynamicDescriptor(JupiterTestDescriptor paren
 		if (node instanceof DynamicTest) {
 			DynamicTest test = (DynamicTest) node;
 			UniqueId uniqueId = parent.getUniqueId().append(DYNAMIC_TEST_SEGMENT_TYPE, "#" + index);
-			descriptor = new DynamicTestTestDescriptor(uniqueId, test, source);
+			descriptor = new DynamicTestTestDescriptor(uniqueId, index, test, source);
 		}
 		else {
 			DynamicContainer container = (DynamicContainer) node;
 			UniqueId uniqueId = parent.getUniqueId().append(DYNAMIC_CONTAINER_SEGMENT_TYPE, "#" + index);
-			descriptor = new DynamicContainerTestDescriptor(uniqueId, container, source);
+			descriptor = new DynamicContainerTestDescriptor(uniqueId, index, container, source);
 		}
 		parent.addChild(descriptor);
 		return descriptor;

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -69,7 +69,7 @@ void palindromes(String candidate) {
 	@ParameterizedTest
 	@ValueSource(ints = { 1, 2, 3 })
 	void testWithValueSource(int argument) {
-		assertNotNull(argument);
+		assertTrue(argument > 0 && argument < 4);
 	}
 	// end::ValueSource_example[]
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.Instant;
@@ -216,6 +217,7 @@ private static class StringToCommonJavaTypesConverter implements StringToObjectC
 
 			// java.io and java.nio
 			converters.put(File.class, File::new);
+			converters.put(Charset.class, Charset::forName);
 			converters.put(Path.class, Paths::get);
 			// java.net
 			converters.put(URI.class, URI::create);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -73,7 +73,7 @@ public class DefaultArgumentConverter extends SimpleArgumentConverter {
 		new StringToEnumConverter(), //
 		new StringToJavaTimeConverter(), //
 		new StringToCommonJavaTypesConverter(), //
-		new GenericStringToObjectConverter() //
+		new FallbackStringToObjectConverter() //
 	));
 
 	private DefaultArgumentConverter() {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/FallbackStringToObjectConverter.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.platform.commons.util.Preconditions;
 
 /**
- * {@code GenericStringToObjectConverter} is a {@link StringToObjectConverter}
+ * {@code FallbackStringToObjectConverter} is a {@link StringToObjectConverter}
  * that provides a fallback conversion strategy for converting from a
  * {@link String} to a given target type by invoking a static factory method
  * or factory constructor defined in the target type.
@@ -52,7 +52,7 @@
  * @since 5.1
  * @see DefaultArgumentConverter
  */
-class GenericStringToObjectConverter implements StringToObjectConverter {
+class FallbackStringToObjectConverter implements StringToObjectConverter {
 
 	/**
 	 * Implementation of the NULL Object Pattern.

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportAssertions.java
Patch:
@@ -28,10 +28,9 @@ class XmlReportAssertions {
 
 	private static Validator schemaValidator;
 
-	static String ensureValidAccordingToJenkinsSchema(String content) throws Exception {
+	static void assertValidAccordingToJenkinsSchema(String content) throws Exception {
 		try {
 			getSchemaValidator().validate(new StreamSource(new StringReader(content)));
-			return content;
 		}
 		catch (SAXException e) {
 			throw new AssertionFailedError("Invalid XML document: " + content, e);

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.jupiter.api.Assumptions.assumeFalse;
-import static org.junit.platform.console.tasks.XmlReportAssertions.ensureValidAccordingToJenkinsSchema;
+import static org.junit.platform.console.tasks.XmlReportAssertions.assertValidAccordingToJenkinsSchema;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
@@ -422,7 +422,8 @@ private void executeTests(TestEngine engine, Path tempDirectory, Clock clock) {
 	private String readValidXmlFile(Path xmlFile) throws Exception {
 		assertTrue(Files.exists(xmlFile), () -> "File does not exist: " + xmlFile);
 		String content = new String(Files.readAllBytes(xmlFile), UTF_8);
-		return ensureValidAccordingToJenkinsSchema(content);
+		assertValidAccordingToJenkinsSchema(content);
+		return content;
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -44,7 +44,6 @@ private JupiterEngineExecutionContext(State state) {
 		this.state = state;
 	}
 
-	@Override
 	public void close() throws Exception {
 		ExtensionContext extensionContext = getExtensionContext();
 		if (extensionContext instanceof AutoCloseable) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutor.java
Patch:
@@ -78,7 +78,9 @@ void execute(C parentContext, ExecutionTracker tracker) {
 			if (executionErrors.isEmpty() && !skipResult.isSkipped()) {
 				executeRecursively(tracker);
 			}
-			cleanUp();
+			if (context != null) {
+				cleanUp();
+			}
 			reportDone();
 		}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestInstanceLifecycleUtils.java
Patch:
@@ -50,7 +50,6 @@ static TestInstance.Lifecycle getTestInstanceLifecycle(Class<?> testClass, Confi
 		// @formatter:on
 	}
 
-	// TODO Consider looking up the default test instance lifecycle mode once per test plan execution.
 	static TestInstance.Lifecycle getDefaultTestInstanceLifecycle(ConfigurationParameters configParams) {
 		Preconditions.notNull(configParams, "ConfigurationParameters must not be null");
 		String propertyName = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -27,6 +27,8 @@
  * Common annotation support.
  *
  * @since 1.0
+ * @see ClassSupport
+ * @see ReflectionSupport
  */
 @API(status = MAINTAINED, since = "1.0")
 public final class AnnotationSupport {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ClassSupport.java
Patch:
@@ -21,6 +21,8 @@
  * Common class support.
  *
  * @since 1.1
+ * @see AnnotationSupport
+ * @see ReflectionSupport
  */
 @API(status = MAINTAINED, since = "1.1")
 public final class ClassSupport {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -26,6 +26,8 @@
  * Common reflection and classpath scanning support.
  *
  * @since 1.0
+ * @see AnnotationSupport
+ * @see ClassSupport
  */
 @API(status = MAINTAINED, since = "1.0")
 public final class ReflectionSupport {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -23,6 +23,9 @@
  *
  * <p>Implementations must provide a no-args constructor.
  *
+ * <p>Extensions that implement {@code AfterAllCallback} must be registered at
+ * the class level.
+ *
  * @since 5.0
  * @see org.junit.jupiter.api.AfterAll
  * @see BeforeAllCallback

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -23,6 +23,9 @@
  *
  * <p>Implementations must provide a no-args constructor.
  *
+ * <p>Extensions that implement {@code BeforeAllCallback} must be registered at
+ * the class level.
+ *
  * @since 5.0
  * @see org.junit.jupiter.api.BeforeAll
  * @see AfterAllCallback

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -24,6 +24,9 @@
  *
  * <p>Implementations must provide a no-args constructor.
  *
+ * <p>Extensions that implement {@code TestInstancePostProcessor} must be
+ * registered at the class level.
+ *
  * @since 5.0
  * @see #postProcessTestInstance(Object, ExtensionContext)
  */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -56,6 +57,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Inherited
 @Repeatable(Tags.class)
 @API(status = STABLE, since = "5.0")
 public @interface Tag {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -34,6 +35,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Inherited
 @API(status = STABLE, since = "5.0")
 public @interface Tags {
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1076,7 +1076,7 @@ public static void assertAll(String heading, Executable... executables) throws M
 	 * @see #assertAll(Stream)
 	 * @see #assertAll(String, Stream)
 	 */
-	public static void assertAll(Collection<Executable> executables) {
+	public static void assertAll(Collection<Executable> executables) throws MultipleFailuresError {
 		AssertAll.assertAll(executables);
 	}
 
@@ -1093,7 +1093,7 @@ public static void assertAll(Collection<Executable> executables) {
 	 * @see #assertAll(Stream)
 	 * @see #assertAll(String, Stream)
 	 */
-	public static void assertAll(String heading, Collection<Executable> executables) {
+	public static void assertAll(String heading, Collection<Executable> executables) throws MultipleFailuresError {
 		AssertAll.assertAll(heading, executables);
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(status = MAINTAINED, since = "5.0")
+@API(status = MAINTAINED, since = "1.0")
 public final class AnnotationSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ClassSupport.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 1.1
  */
-@API(status = MAINTAINED, since = "5.1")
+@API(status = MAINTAINED, since = "1.1")
 public final class ClassSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/HierarchyTraversalMode.java
Patch:
@@ -22,7 +22,7 @@
  * @see #TOP_DOWN
  * @see #BOTTOM_UP
  */
-@API(status = MAINTAINED, since = "5.0")
+@API(status = MAINTAINED, since = "1.0")
 public enum HierarchyTraversalMode {
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @since 1.0
  */
-@API(status = MAINTAINED, since = "5.0")
+@API(status = MAINTAINED, since = "1.0")
 public final class ReflectionSupport {
 
 	///CLOVER:OFF

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -59,7 +59,7 @@ void resolveClass(Class<?> testClass) {
 		resolvedDescriptors.forEach(this::resolveChildren);
 
 		if (resolvedDescriptors.isEmpty()) {
-			logger.warn(() -> format("Class '%s' could not be resolved.", testClass.getName()));
+			logger.debug(() -> format("Class '%s' could not be resolved.", testClass.getName()));
 		}
 	}
 
@@ -68,7 +68,7 @@ void resolveMethod(Class<?> testClass, Method testMethod) {
 		Set<TestDescriptor> resolvedDescriptors = resolveForAllParents(testMethod, potentialParents);
 
 		if (resolvedDescriptors.isEmpty()) {
-			logger.warn(() -> format("Method '%s' could not be resolved.", testMethod.toGenericString()));
+			logger.debug(() -> format("Method '%s' could not be resolved.", testMethod.toGenericString()));
 		}
 
 		logMultipleTestDescriptorsForSingleElement(testMethod, resolvedDescriptors);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -104,9 +104,9 @@
 	 *
 	 * <h4>Supported placeholders</h4>
 	 * <ul>
-	 * <li>{@value #DISPLAY_NAME_PLACEHOLDER}</li>
-	 * <li>{@value #CURRENT_REPETITION_PLACEHOLDER}</li>
-	 * <li>{@value #TOTAL_REPETITIONS_PLACEHOLDER}</li>
+	 * <li>{@link #DISPLAY_NAME_PLACEHOLDER}</li>
+	 * <li>{@link #CURRENT_REPETITION_PLACEHOLDER}</li>
+	 * <li>{@link #TOTAL_REPETITIONS_PLACEHOLDER}</li>
 	 * </ul>
 	 *
 	 * <p>Defaults to {@link #SHORT_DISPLAY_NAME}, resulting in

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -37,6 +37,8 @@
 
 import org.apache.maven.surefire.providerapi.AbstractProvider;
 import org.apache.maven.surefire.providerapi.ProviderParameters;
+import org.apache.maven.surefire.report.ConsoleOutputCapture;
+import org.apache.maven.surefire.report.ConsoleOutputReceiver;
 import org.apache.maven.surefire.report.ReporterException;
 import org.apache.maven.surefire.report.ReporterFactory;
 import org.apache.maven.surefire.report.RunListener;
@@ -120,6 +122,7 @@ private RunResult invokeAllTests(TestsToRun testsToRun) {
 		ReporterFactory reporterFactory = parameters.getReporterFactory();
 		try {
 			RunListener runListener = reporterFactory.createReporter();
+			ConsoleOutputCapture.startCapture((ConsoleOutputReceiver) runListener);
 
 			for (Class<?> testClass : testsToRun) {
 				invokeSingleClass(testClass, runListener);

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/JUnitPlatformProviderTests.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.maven.surefire.booter.ForkingRunListener;
 import org.apache.maven.surefire.providerapi.ProviderParameters;
 import org.apache.maven.surefire.report.ReportEntry;
 import org.apache.maven.surefire.report.ReporterFactory;
@@ -234,7 +235,7 @@ private static ProviderParameters providerParametersMock(Class<?>... testClasses
 		when(runOrderCalculator.orderTestClasses(any())).thenReturn(testsToRun);
 
 		ReporterFactory reporterFactory = mock(ReporterFactory.class);
-		RunListener runListener = mock(RunListener.class);
+		RunListener runListener = mock(ForkingRunListener.class);
 		when(reporterFactory.createReporter()).thenReturn(runListener);
 
 		ProviderParameters providerParameters = mock(ProviderParameters.class);

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -120,7 +120,6 @@ private RunResult invokeAllTests(TestsToRun testsToRun) {
 		ReporterFactory reporterFactory = parameters.getReporterFactory();
 		try {
 			RunListener runListener = reporterFactory.createReporter();
-			launcher.registerTestExecutionListeners(new RunListenerAdapter(runListener));
 
 			for (Class<?> testClass : testsToRun) {
 				invokeSingleClass(testClass, runListener);
@@ -141,7 +140,7 @@ private void invokeSingleClass(Class<?> testClass, RunListener runListener) {
 				.filters(includeAndExcludeFilters) //
 				.configurationParameters(configurationParameters) //
 				.build();
-		launcher.execute(discoveryRequest);
+		launcher.execute(discoveryRequest, new RunListenerAdapter(testClass, runListener));
 
 		runListener.testSetCompleted(classEntry);
 	}

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;
 import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectModules;
 import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;
 import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
@@ -23,7 +24,6 @@
 
 import java.nio.file.Path;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
@@ -60,8 +60,7 @@ private List<? extends DiscoverySelector> createDiscoverySelectors(CommandLineOp
 		if (options.isScanModulepath()) {
 			Preconditions.condition(!options.hasExplicitSelectors(),
 				"Scanning the module-path and using explicit selectors at the same time is not supported");
-			return Collections.singletonList(DiscoverySelectors.selectModule(ModuleUtils.ALL_MODULES));
-
+			return selectModules(ModuleUtils.findAllNonSystemBootModuleNames());
 		}
 		return createExplicitDiscoverySelectors(options);
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -303,7 +303,7 @@ interface Store {
 		 * the type of object we wish to retrieve from the store.
 		 *
 		 * <pre style="code">
-		 * X x = store.getOrComputeIfAbsent(X.class, key -> new X(), X.class);
+		 * X x = store.getOrComputeIfAbsent(X.class, key -&gt; new X(), X.class);
 		 * // Equivalent to:
 		 * // X x = store.getOrComputeIfAbsent(X.class);
 		 * </pre>

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TrackLogRecords.java
Patch:
@@ -71,8 +71,7 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
 		}
 
 		private LogRecordListener getListener(ExtensionContext context) {
-			return getStore(context).getOrComputeIfAbsent(LogRecordListener.class, k -> new LogRecordListener(),
-				LogRecordListener.class);
+			return getStore(context).getOrComputeIfAbsent(LogRecordListener.class);
 		}
 
 		private Store getStore(ExtensionContext context) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -76,7 +76,7 @@
 	String TOTAL_REPETITIONS_PLACEHOLDER = "{totalRepetitions}";
 
 	/**
-	 * <em>Short</em> display name pattern for a repeated test: {@value #SHORT_DISPLAY_NAME}
+	 * <em>Short</em> display name pattern for a repeated test: {@value}
 	 *
 	 * @see #CURRENT_REPETITION_PLACEHOLDER
 	 * @see #TOTAL_REPETITIONS_PLACEHOLDER
@@ -85,7 +85,7 @@
 	String SHORT_DISPLAY_NAME = "repetition " + CURRENT_REPETITION_PLACEHOLDER + " of " + TOTAL_REPETITIONS_PLACEHOLDER;
 
 	/**
-	 * <em>Long</em> display name pattern for a repeated test: {@value #LONG_DISPLAY_NAME}
+	 * <em>Long</em> display name pattern for a repeated test: {@value}
 	 *
 	 * @see #DISPLAY_NAME_PLACEHOLDER
 	 * @see #SHORT_DISPLAY_NAME

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -27,8 +27,9 @@ public interface ClassNameFilter extends DiscoveryFilter<String> {
 	/**
 	 * Standard include pattern in the form of a regular expression that is
 	 * used to match against fully qualified class names:
-	 * {@value #STANDARD_INCLUDE_PATTERN} which matches against class names
-	 * ending in {@code Test} or {@code Tests} (in any package).
+	 * {@value org.junit.platform.engine.discovery.ClassNameFilter#STANDARD_INCLUDE_PATTERN}
+	 * which matches against class names ending in {@code Test} or
+	 * {@code Tests} (in any package).
 	 */
 	String STANDARD_INCLUDE_PATTERN = "^.*Tests?$";
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java
Patch:
@@ -11,6 +11,8 @@
 package org.junit.jupiter.api;
 
 import static org.junit.jupiter.api.AssertionUtils.fail;
+import static org.junit.jupiter.api.AssertionUtils.format;
+import static org.junit.jupiter.api.AssertionUtils.nullSafeGet;
 
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
@@ -51,7 +53,7 @@ static void assertFalse(BooleanSupplier booleanSupplier, String message) {
 
 	static void assertFalse(BooleanSupplier booleanSupplier, Supplier<String> messageSupplier) {
 		if (booleanSupplier.getAsBoolean()) {
-			fail(messageSupplier);
+			fail(format(false, true, nullSafeGet(messageSupplier)));
 		}
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java
Patch:
@@ -11,6 +11,8 @@
 package org.junit.jupiter.api;
 
 import static org.junit.jupiter.api.AssertionUtils.fail;
+import static org.junit.jupiter.api.AssertionUtils.format;
+import static org.junit.jupiter.api.AssertionUtils.nullSafeGet;
 
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
@@ -51,7 +53,7 @@ static void assertTrue(boolean condition, String message) {
 
 	static void assertTrue(BooleanSupplier booleanSupplier, Supplier<String> messageSupplier) {
 		if (!booleanSupplier.getAsBoolean()) {
-			fail(messageSupplier);
+			fail(format(true, false, nullSafeGet(messageSupplier)));
 		}
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -188,7 +188,7 @@ private void handleThrowable(Path classFile, Throwable throwable) {
 
 	private void logMalformedClassName(Path classFile, String fullyQualifiedClassName, InternalError ex) {
 		try {
-			logger.warn(ex, () -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",
+			logger.debug(ex, () -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",
 				classFile.toAbsolutePath(), fullyQualifiedClassName));
 		}
 		catch (Throwable t) {
@@ -198,7 +198,7 @@ private void logMalformedClassName(Path classFile, String fullyQualifiedClassNam
 	}
 
 	private void logGenericFileProcessingException(Path classFile, Throwable throwable) {
-		logger.warn(throwable, () -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",
+		logger.debug(throwable, () -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",
 			classFile.toAbsolutePath()));
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -130,7 +130,7 @@ private void processClassFileSafely(Path baseDir, String basePackageName, ClassF
 				try {
 					// @formatter:off
 					loadClass.apply(fullyQualifiedClassName, getClassLoader())
-							.filter(classFilter)
+							.filter(classFilter) // Always use ".filter(classFilter)" to include future predicates.
 							.ifPresent(classConsumer);
 					// @formatter:on
 				}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/MultipleTestableAnnotationsTests.java
Patch:
@@ -36,7 +36,7 @@ void testAndRepeatedTest(LogRecordListener listener) {
 		discoverTests(request().selectors(selectClass(TestCase.class)).build());
 
 		// @formatter:off
-		assertThat(listener.getLogRecords().stream()
+		assertThat(listener.getLogRecords()
 			.filter(logRecord -> logRecord.getLevel() == Level.WARNING)
 			.map(LogRecord::getMessage)
 			.filter(m -> m.matches("Possible configuration error: method .+ resulted in multiple TestDescriptors .+"))

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/TestClassRequestResolverTests.java
Patch:
@@ -67,7 +67,7 @@ void logsWarningOnNonFilterableRunner(LogRecordListener listener) {
 		resolve(new TestClassRequest(testClass, asList(filter)));
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(TestClassRequestResolver.class, Level.WARNING).stream()
+		assertThat(listener.getLogRecords(TestClassRequestResolver.class, Level.WARNING)
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Runner " + IgnoredClassRunner.class.getName() //
 				+ " (used on " + testClass.getName() + ") does not support filtering" //

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -91,7 +91,7 @@ void logsWarningOnUnexpectedTestDescriptor(LogRecordListener listener) {
 
 	private void assertLoggedWarning(LogRecordListener listener, String expectedMessage) {
 		// @formatter:off
-		assertThat(listener.getLogRecords(UniqueIdSelectorResolver.class, Level.WARNING).stream()
+		assertThat(listener.getLogRecords(UniqueIdSelectorResolver.class, Level.WARNING)
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals(expectedMessage))
 			.count()

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscovererTests.java
Patch:
@@ -55,7 +55,7 @@ void logsDebugMessageWhenFilterExcludesClass(LogRecordListener listener) {
 		assertThat(testDescriptor.getChildren()).hasSize(1);
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(VintageDiscoverer.class, Level.FINE).stream()
+		assertThat(listener.getLogRecords(VintageDiscoverer.class, Level.FINE)
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Class " + Bar.class.getName() + " was excluded by a class filter: no match"))
 			.count()

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/support/UniqueIdReaderTests.java
Patch:
@@ -51,7 +51,7 @@ void returnsDisplayNameWhenUniqueIdCannotBeRead(LogRecordListener listener) {
 		assertEquals(description.getDisplayName(), uniqueId);
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(UniqueIdReader.class, Level.WARNING).stream()
+		assertThat(listener.getLogRecords(UniqueIdReader.class, Level.WARNING)
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Could not read unique ID for Description; using display name instead: "
 					+ description.getDisplayName()))

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/TestClassRequestResolverTests.java
Patch:
@@ -67,8 +67,7 @@ void logsWarningOnNonFilterableRunner(LogRecordListener listener) {
 		resolve(new TestClassRequest(testClass, asList(filter)));
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(TestClassRequestResolver.class).stream()
-			.filter(logRecord -> logRecord.getLevel() == Level.WARNING)
+		assertThat(listener.getLogRecords(TestClassRequestResolver.class, Level.WARNING).stream()
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Runner " + IgnoredClassRunner.class.getName() //
 				+ " (used on " + testClass.getName() + ") does not support filtering" //

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -91,8 +91,7 @@ void logsWarningOnUnexpectedTestDescriptor(LogRecordListener listener) {
 
 	private void assertLoggedWarning(LogRecordListener listener, String expectedMessage) {
 		// @formatter:off
-		assertThat(listener.getLogRecords(UniqueIdSelectorResolver.class).stream()
-			.filter(logRecord -> logRecord.getLevel() == Level.WARNING)
+		assertThat(listener.getLogRecords(UniqueIdSelectorResolver.class, Level.WARNING).stream()
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals(expectedMessage))
 			.count()

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscovererTests.java
Patch:
@@ -38,7 +38,7 @@
 class VintageDiscovererTests {
 
 	@Test
-	void logsWarningWhenFilterExcludesClass(LogRecordListener listener) {
+	void logsDebugMessageWhenFilterExcludesClass(LogRecordListener listener) {
 		ClassNameFilter fooFilter = className -> includedIf(Foo.class.getName().equals(className), () -> "match",
 			() -> "no match");
 
@@ -55,8 +55,7 @@ void logsWarningWhenFilterExcludesClass(LogRecordListener listener) {
 		assertThat(testDescriptor.getChildren()).hasSize(1);
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(VintageDiscoverer.class).stream()
-			.filter(logRecord -> logRecord.getLevel() == Level.FINE)
+		assertThat(listener.getLogRecords(VintageDiscoverer.class, Level.FINE).stream()
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Class " + Bar.class.getName() + " was excluded by a class filter: no match"))
 			.count()

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/support/UniqueIdReaderTests.java
Patch:
@@ -51,8 +51,7 @@ void returnsDisplayNameWhenUniqueIdCannotBeRead(LogRecordListener listener) {
 		assertEquals(description.getDisplayName(), uniqueId);
 
 		// @formatter:off
-		assertThat(listener.getLogRecords(UniqueIdReader.class).stream()
-			.filter(logRecord -> logRecord.getLevel() == Level.WARNING)
+		assertThat(listener.getLogRecords(UniqueIdReader.class, Level.WARNING).stream()
 			.map(LogRecord::getMessage)
 			.filter(m -> m.equals("Could not read unique ID for Description; using display name instead: "
 					+ description.getDisplayName()))

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunListenerAdapter.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.function.Function;
 
 import org.junit.Ignore;
-import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestExecutionResult;
@@ -39,10 +38,10 @@ class RunListenerAdapter extends RunListener {
 	private final EngineExecutionListener listener;
 	private final Function<Description, String> uniqueIdExtractor;
 
-	RunListenerAdapter(TestRun testRun, Logger logger, EngineExecutionListener listener) {
+	RunListenerAdapter(TestRun testRun, EngineExecutionListener listener) {
 		this.testRun = testRun;
 		this.listener = listener;
-		this.uniqueIdExtractor = new UniqueIdReader(logger).andThen(new UniqueIdStringifier());
+		this.uniqueIdExtractor = new UniqueIdReader().andThen(new UniqueIdStringifier());
 	}
 
 	@Override

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/LogRecordListener.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 1.1
  */
-@API(status = INTERNAL, since = "1.0")
+@API(status = INTERNAL, since = "1.1")
 public class LogRecordListener {
 
 	private final List<LogRecord> logRecords = new ArrayList<>();

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -124,7 +124,7 @@ class AvailableOptions {
 		selectedUris = parser.acceptsAll(asList("u", "select-uri"), //
 			"Select a URI for test discovery. This option can be repeated.") //
 				.withRequiredArg() //
-				.withValuesConvertedBy(new URIConverter());
+				.withValuesConvertedBy(new UriConverter());
 
 		selectedFiles = parser.acceptsAll(asList("f", "select-file"), //
 			"Select a file for test discovery. This option can be repeated.") //

File: junit-platform-console/src/main/java/org/junit/platform/console/options/URIConverter.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @since 1.0
  */
-class URIConverter implements ValueConverter<URI> {
+class UriConverter implements ValueConverter<URI> {
 
 	@Override
 	public URI convert(String value) {

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeEngines.java
Patch:
@@ -43,7 +43,7 @@
 public @interface ExcludeEngines {
 
 	/**
-	 * One or more Engine IDs to be excluded from the test plan.
+	 * One or more TestEngine IDs to be excluded from the test plan.
 	 */
 	String[] value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeEngines.java
Patch:
@@ -43,7 +43,7 @@
 public @interface IncludeEngines {
 
 	/**
-	 * One or more Engine IDs to be included in the test plan.
+	 * One or more TestEngine IDs to be included in the test plan.
 	 */
 	String[] value();
 

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -13,9 +13,11 @@
 //tag::user_guide[]
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.suite.api.SelectPackages;
+import org.junit.platform.suite.api.SuiteDisplayName;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
+@SuiteDisplayName("JUnit 4 Suite Demo")
 @SelectPackages("example")
 //end::user_guide[]
 @org.junit.platform.suite.api.ExcludeTags("exclude")

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -51,6 +51,7 @@
 import org.junit.platform.suite.api.IncludeTags;
 import org.junit.platform.suite.api.SelectClasses;
 import org.junit.platform.suite.api.SelectPackages;
+import org.junit.platform.suite.api.SuiteDisplayName;
 import org.junit.platform.suite.api.UseTechnicalNames;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
@@ -87,6 +88,7 @@
  * ClassNameFilter#STANDARD_INCLUDE_PATTERN}).
  *
  * @since 1.0
+ * @see SuiteDisplayName
  * @see SelectPackages
  * @see SelectClasses
  * @see IncludeClassNamePatterns

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SuiteDisplayName.java
Patch:
@@ -33,6 +33,7 @@
  * {@code @RunWith(JUnitPlatform.class)}.
  *
  * @since 1.1
+ * @see UseTechnicalNames
  * @see org.junit.platform.runner.JUnitPlatform
  */
 @Retention(RUNTIME)

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -35,7 +35,7 @@ public static TestRuleAnnotatedMember from(Object testInstance, Member member) {
 		if (member instanceof Method) {
 			return new TestRuleAnnotatedMethod(testInstance, (Method) member);
 		}
-		else if (member instanceof Field) {
+		if (member instanceof Field) {
 			return new TestRuleAnnotatedField(testInstance, (Field) member);
 		}
 		throw new PreconditionViolationException(

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -35,7 +35,7 @@ public static TestRuleAnnotatedMember from(Object testInstance, Member member) {
 		if (member instanceof Method) {
 			return new TestRuleAnnotatedMethod(testInstance, (Method) member);
 		}
-		else if (member instanceof Field) {
+		if (member instanceof Field) {
 			return new TestRuleAnnotatedField(testInstance, (Field) member);
 		}
 		throw new PreconditionViolationException(

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -96,7 +96,7 @@ public boolean equals(Object o) {
 			return false;
 		}
 		FilePosition that = (FilePosition) o;
-		return this.line == that.line && this.column == that.column;
+		return (this.line == that.line) && Objects.equals(this.column, that.column);
 	}
 
 	@Override

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @AfterAll} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @AfterEach} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.time.Duration;
 import java.util.Arrays;
@@ -20,7 +20,7 @@
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.api.function.ThrowingSupplier;
 import org.opentest4j.MultipleFailuresError;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assumptions.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.StringUtils;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @BeforeAll} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @BeforeEach} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Disabled} is used to signal that the annotated test class or

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayName.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @DisplayName} is used to declare a {@linkplain #value custom display

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicContainer.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicNode.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicTest.java
Patch:
@@ -12,14 +12,14 @@
 
 import static java.util.Spliterator.ORDERED;
 import static java.util.Spliterators.spliteratorUnknownSize;
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.Iterator;
 import java.util.function.Function;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.api.function.ThrowingConsumer;
 import org.junit.platform.commons.util.Preconditions;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Nested} is used to signal that the annotated class is a nested,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @RepeatedTest} is used to signal that the annotated method is a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepetitionInfo.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code RepetitionInfo} is used to inject information about the current

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Tag} is a {@linkplain Repeatable repeatable} annotation that is

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Tags} is a container for one or more {@code @Tag} declarations.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.annotation.Testable;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.annotation.Testable;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 import java.util.Optional;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code TestInfo} is used to inject information about the current test or

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInstance.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @TestInstance} is a type-level annotation that is used to configure

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.Map;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Parameters of type {@code TestReporter} can be injected into methods of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.annotation.Testable;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code AfterAllCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code AfterEachCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code AfterTestExecutionCallback} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code BeforeAllCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code BeforeEachCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code BeforeTestExecutionCallback} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code ExecutionCondition} defines the {@link Extension} API for

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -20,7 +20,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ExtendWith} is a {@linkplain Repeatable repeatable} annotation

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Marker interface for all extensions.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionConfigurationException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContextException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
 import org.junit.platform.commons.JUnitException;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Extensions} is a container for one or more {@code @ExtendWith}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.Executable;
 import java.lang.reflect.Parameter;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code ParameterContext} encapsulates the <em>context</em> in which an

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolutionException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.Parameter;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code ParameterResolver} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code TestExecutionExceptionHandler} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code TestInstancePostProcessor} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContext.java
Patch:
@@ -11,11 +11,11 @@
 package org.junit.jupiter.api.extension;
 
 import static java.util.Collections.emptyList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code TestTemplateInvocationContext} represents the <em>context</em> of a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code TestTemplateInvocationContextProvider} defines the API for

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code Executable} is a functional interface that can be used to

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code ThrowingConsumer} is a functional interface that can be used to

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code ThrowingSupplier} is a functional interface that can be used to

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of constants related to the {@link JupiterTestEngine}.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.engine;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.discovery.DiscoverySelectorResolver;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.EngineExecutionListener;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findAfterAllMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findAfterEachMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeAllMethods;
@@ -25,7 +25,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineExtensionContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.EngineExecutionListener;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 
@@ -24,7 +24,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.EngineExecutionListener;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Constructor;
 import java.util.Optional;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.Iterator;
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.DynamicContainer;
 import org.junit.jupiter.api.DynamicNode;
 import org.junit.jupiter.api.DynamicTest;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.BiFunction;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.AfterTestExecutionCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -11,13 +11,13 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -19,7 +19,7 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.engine.discovery.predicates.IsScannableTestClass;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.TestDescriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsInnerClass.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Test if a class is a non-private inner class (i.e., a non-static nested class).

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
 
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.Nested;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsPotentialTestContainer.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;
 import static org.junit.platform.commons.util.ReflectionUtils.isStatic;
 
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Test if a class is a potential top-level JUnit Jupiter test container, even if

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Test if a class is a JUnit Jupiter test class which should be included in

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestFactoryMethod.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestFactory;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.Test;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestTemplateMethod.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestTemplate;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluator.java
Patch:
@@ -11,15 +11,15 @@
 package org.junit.jupiter.engine.execution;
 
 import static java.lang.String.format;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_ALL_CONDITIONS_PATTERN;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME;
 
 import java.util.function.Predicate;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;
 import org.junit.jupiter.api.extension.ExecutionCondition;
 import org.junit.jupiter.api.extension.ExtensionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExecutableInvoker.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
 import java.lang.reflect.Constructor;
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolutionException;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.getWrapperType;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
@@ -22,7 +22,7 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContextException;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.JUnitException;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/NamespaceAwareStore.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
 import org.junit.platform.commons.util.Preconditions;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ThrowableCollector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.Preconditions;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Stream.concat;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.Constants.EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME;
 
 import java.util.ArrayList;
@@ -25,7 +25,7 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.engine.Constants;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -12,11 +12,11 @@
 
 import static java.lang.Boolean.FALSE;
 import static java.lang.Boolean.TRUE;
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/AbstractTestRuleAdapter.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethod;
 import static org.junit.platform.commons.util.ReflectionUtils.invokeMethod;
 
 import java.lang.reflect.Method;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.ClassUtils;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExpectedExceptionAdapter.java
Patch:
@@ -11,9 +11,9 @@
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
 import static java.lang.Boolean.TRUE;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.rules.ExpectedException;
 

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExternalResourceAdapter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.rules.ExternalResource;
 

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/GenericBeforeAndAfterAdvice.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * @since 5.0

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/VerifierAdapter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.rules.Verifier;
 

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMember.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.rules.TestRule;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.TestTemplate;
 import org.junit.jupiter.api.extension.ExtendWith;
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ParameterContext;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ConvertWith} is an annotation that allows one to specify an explicit

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.time.Instant;
 import java.time.LocalDate;
@@ -31,7 +31,7 @@
 import java.util.Optional;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.params.ParameterizedTest;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ParameterContext;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ArgumentsSource} is a {@linkplain Repeatable repeatable} annotation

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ArgumentsSources} is a simple container for one or more

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @CsvFileSource} is an {@link ArgumentsSource} which is used to

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @CsvSource} is an {@link ArgumentsSource} which reads

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toSet;
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -25,7 +25,7 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @MethodSource} is an {@link ArgumentsSource} which provides access

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ValueSource} is an {@link ArgumentsSource} which provides

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Annotation;
 import java.util.function.Consumer;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @AnnotationConsumer} is a {@code @FunctionalInterface} for consuming

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumerInitializer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
 
@@ -19,7 +19,7 @@
 import java.lang.reflect.Method;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.AnnotationUtils;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.commons;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Base class for all {@link RuntimeException RuntimeExceptions} thrown

File: junit-platform-commons/src/main/java/org/junit/platform/commons/annotation/Testable.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.annotation;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @Testable} is used to signal to IDEs and tooling vendors that the

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/Logger.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * The {@code Logger} API serves as a simple logging facade for

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/LoggerFactory.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.support;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.AnnotationUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/HierarchyTraversalMode.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.commons.support;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Modes in which a hierarchy can be traversed &mdash; for example, when

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.commons.support;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.reflect.Method;
 import java.net.URI;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.util;
 
 import static java.util.Arrays.asList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.lang.annotation.Annotation;
@@ -33,7 +33,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/BlacklistedExceptions.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Collections;
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Internal utilities for working with <em>blacklisted</em> exceptions.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassLoaderUtils.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.net.URL;
 import java.security.CodeSource;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@linkplain ClassLoader} and associated tasks.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -12,11 +12,11 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.joining;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@link Class classes}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -15,7 +15,7 @@
 import static java.util.stream.Collectors.collectingAndThen;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;
@@ -29,7 +29,7 @@
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@link Collection Collections}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with exceptions.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@link Function Functions},

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PackageUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.File;
 import java.net.URL;
@@ -25,7 +25,7 @@
 
 import javax.lang.model.SourceVersion;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@linkplain Package packages}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PreconditionViolationException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for asserting preconditions for method and

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.TOP_DOWN;
@@ -47,7 +47,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.commons.util;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Arrays;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Collection of utilities for working with {@link String Strings},

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -11,12 +11,12 @@
 package org.junit.platform.commons.util;
 
 import static java.lang.String.join;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Simple builder for generating strings in custom implementations of

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.platform.console;
 
-import static org.apiguardian.API.Status.INTERNAL;
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.io.BufferedWriter;
 import java.io.OutputStreamWriter;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.nio.charset.Charset;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.console.options.CommandLineOptions;
 import org.junit.platform.console.options.CommandLineOptionsParser;
 import org.junit.platform.console.options.JOptSimpleCommandLineOptionsParser;

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncherExecutionResult.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.console;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.emptyList;
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
 import java.net.URI;
@@ -26,7 +26,7 @@
 import java.util.Optional;
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.console.options;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.Writer;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Details.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.console.options;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.options;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -23,7 +23,7 @@
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Theme.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.console.options;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestExecutionResult;
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.tasks;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.net.URL;
@@ -21,7 +21,7 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.console.options.CommandLineOptions;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Configuration parameters that {@link TestEngine TestEngines} may use to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * A {@link DiscoveryFilter} is applied during test discovery to determine if

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * A selector defines what a {@link TestEngine} can use to discover tests

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code EngineDiscoveryRequest} provides a {@link TestEngine} access to the

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineExecutionListener.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestExecutionResult.Status;
 import org.junit.platform.engine.reporting.ReportEntry;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.INTERNAL;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Provides a single {@link TestEngine} access to the information necessary to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -11,15 +11,15 @@
 package org.junit.platform.engine;
 
 import static java.util.Arrays.asList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.CompositeFilter.alwaysIncluded;
 
 import java.util.Collection;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/FilterResult.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Optional;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Mutable descriptor for a test or container that has been discovered by a

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PackageUtils;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestExecutionResult.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.engine.TestExecutionResult.Status.ABORTED;
 import static org.junit.platform.engine.TestExecutionResult.Status.FAILED;
 import static org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.Serializable;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Representation of the source of a test or container used to navigate to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -12,15 +12,15 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Collections.unmodifiableList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.DiscoveryFilter;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.commons.util.ToStringBuilder;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DirectorySelector.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.io.File;
@@ -25,7 +25,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.ReflectionUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageNameFilter.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.DiscoveryFilter;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UniqueIdSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.UniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UriSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.reporting;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.time.LocalDateTime;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -11,14 +11,14 @@
 package org.junit.platform.engine.support.descriptor;
 
 import static java.util.Collections.emptySet;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Optional;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClassSource.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DirectorySource.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.UniqueId;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.File;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestSource;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/MethodSource.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.commons.util.ClassUtils.nullSafeToString;
 
 import java.lang.reflect.Method;
 import java.util.Objects;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/PackageSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Objects;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/UriSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestSource;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ClasspathScanningSupport.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.composeFilters;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.DiscoveryFilter;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.discovery.ClassNameFilter;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ExclusionReasonConsumingFilter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.util.Optional;
 import java.util.function.BiConsumer;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * Marker interface for an execution context used by a concrete implementation

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.ExecutionRequest;
 import org.junit.platform.engine.TestEngine;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestDescriptor;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.platform.engine.TestExecutionResult.aborted;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestExecutionResult;
 import org.opentest4j.TestAbortedException;
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -11,13 +11,13 @@
 package org.junit.platform.launcher;
 
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.engine.FilterResult.includedIf;
 
 import java.util.Arrays;
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * The {@code Launcher} API is the main entry point for client code that

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryRequest.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.launcher;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.DiscoveryFilter;
 import org.junit.platform.engine.DiscoverySelector;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/PostDiscoveryFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestEngine;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -12,11 +12,11 @@
 
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.TestExecutionResult.Status;
 import org.junit.platform.engine.reporting.ReportEntry;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -11,16 +11,16 @@
 package org.junit.platform.launcher;
 
 import static java.util.Collections.unmodifiableSet;
-import static org.apiguardian.API.Status.INTERNAL;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.LinkedHashSet;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestDescriptor;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Collections.emptySet;
 import static java.util.Collections.unmodifiableSet;
-import static org.apiguardian.API.Status.INTERNAL;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -24,7 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoveryFilter;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.launcher.Launcher;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LoggingListener.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.util.function.BiConsumer;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -11,11 +11,11 @@
 package org.junit.platform.launcher.listeners;
 
 import static java.util.stream.Stream.concat;
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.util.stream.Stream;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.io.PrintWriter;
 import java.util.List;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.launcher.TestIdentifier;
 
 /**

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
-import static org.apiguardian.API.Status.STABLE;
+import static org.apiguardian.api.API.Status.STABLE;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;
 import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
@@ -31,7 +31,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.discovery.DiscoverySelectors;

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ExcludeClassNamePatterns} specifies regular expressions that are used

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ExcludeEngines} specifies the {@linkplain #value IDs} of

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ExcludePackages} specifies the {@linkplain #value packages} to be

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @ExcludeTags} specifies the {@linkplain #value tags} to be excluded

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @IncludeClassNamePatterns} specifies regular expressions that are used

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @IncludeEngines} specifies the {@linkplain #value IDs} of

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @IncludePackages} specifies the {@linkplain #value packages} to be

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @IncludeTags} specifies the {@linkplain #value tags} to be included

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectClasses.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @SelectClasses} specifies the classes to <em>select</em> when running

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectPackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @SelectPackages} specifies the names of packages to <em>select</em>

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/UseTechnicalNames.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.apiguardian.API.Status.MAINTAINED;
+import static org.apiguardian.api.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * {@code @UseTechnicalNames} specifies that <em>technical names</em> should be

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -17,7 +17,7 @@
 package org.junit.platform.surefire.provider;
 
 import static java.util.Collections.emptyMap;
-import static org.apiguardian.API.Status.EXPERIMENTAL;
+import static org.apiguardian.api.API.Status.EXPERIMENTAL;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
@@ -44,7 +44,7 @@
 import org.apache.maven.surefire.suite.RunResult;
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.launcher.Launcher;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.vintage.engine;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.ENGINE_ID;
 
 import java.util.Optional;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
 import org.junit.platform.engine.EngineDiscoveryRequest;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.vintage.engine.descriptor;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.runner.Request;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.function.Predicate.isEqual;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.experimental.categories.Category;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/VintageDiscoverer.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.discovery;
 
 import static java.util.Arrays.asList;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.adaptFilter;
 import static org.junit.platform.engine.Filter.composeFilters;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -20,7 +20,7 @@
 import java.util.Objects;
 import java.util.function.Predicate;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.Filter;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.vintage.engine.execution;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestExecutionResult;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdReader.java
Patch:
@@ -11,14 +11,14 @@
 package org.junit.vintage.engine.support;
 
 import static java.lang.String.format;
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.readFieldValue;
 
 import java.io.Serializable;
 import java.util.Optional;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.runner.Description;
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdStringifier.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.support;
 
-import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.api.API.Status.INTERNAL;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -23,7 +23,7 @@
 import java.util.Locale;
 import java.util.function.Function;
 
-import org.apiguardian.API;
+import org.apiguardian.api.API;
 
 /**
  * @since 4.12

File: platform-tests/src/test/java/org/junit/api/tools/AbstractApiReportWriter.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.EnumSet;
 import java.util.List;
 
-import org.apiguardian.API.Status;
+import org.apiguardian.api.API.Status;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/api/tools/ApiReport.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apiguardian.API.Status;
+import org.apiguardian.api.API.Status;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/api/tools/ApiReportGenerator.java
Patch:
@@ -21,8 +21,8 @@
 import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
 import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
 
-import org.apiguardian.API;
-import org.apiguardian.API.Status;
+import org.apiguardian.api.API;
+import org.apiguardian.api.API.Status;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
 

File: platform-tests/src/test/java/org/junit/api/tools/ApiReportWriter.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.PrintWriter;
 import java.util.EnumSet;
 
-import org.apiguardian.API.Status;
+import org.apiguardian.api.API.Status;
 
 /**
  * @since 1.0

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @AfterAll} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @AfterEach} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.time.Duration;
 import java.util.Arrays;
@@ -20,9 +20,9 @@
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.api.function.ThrowingSupplier;
-import org.junit.platform.commons.meta.API;
 import org.opentest4j.MultipleFailuresError;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assumptions.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.function.Executable;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.StringUtils;
 import org.opentest4j.TestAbortedException;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @BeforeAll} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @BeforeEach} is used to signal that the annotated method should be

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Disabled} is used to signal that the annotated test class or

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayName.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @DisplayName} is used to declare a {@linkplain #value custom display

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicContainer.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicNode.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicTest.java
Patch:
@@ -12,16 +12,16 @@
 
 import static java.util.Spliterator.ORDERED;
 import static java.util.Spliterators.spliteratorUnknownSize;
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.Iterator;
 import java.util.function.Function;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.api.function.ThrowingConsumer;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Nested} is used to signal that the annotated class is a nested,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @RepeatedTest} is used to signal that the annotated method is a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepetitionInfo.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code RepetitionInfo} is used to inject information about the current

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Tag} is a {@linkplain Repeatable repeatable} annotation that is

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Tags} is a container for one or more {@code @Tag} declarations.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.annotation.Testable;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Test} is used to signal that the annotated method is a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.annotation.Testable;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @TestFactory} is used to signal that the annotated method is a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code TestInfo} is used to inject information about the current test or

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInstance.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @TestInstance} is a type-level annotation that is used to configure

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.Map;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Parameters of type {@code TestReporter} can be injected into methods of

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.annotation.Testable;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @TestTemplate} is used to signal that the annotated method is a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code AfterAllCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code AfterEachCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code AfterTestExecutionCallback} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code BeforeAllCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code BeforeEachCallback} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code BeforeTestExecutionCallback} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code ExecutionCondition} defines the {@link Extension} API for

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -20,7 +20,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ExtendWith} is a {@linkplain Repeatable repeatable} annotation

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Marker interface for all extensions.

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionConfigurationException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if an error is encountered regarding the configuration of an

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContextException.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if an error is encountered regarding the use of an

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Extensions} is a container for one or more {@code @ExtendWith}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.reflect.Executable;
 import java.lang.reflect.Parameter;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code ParameterContext} encapsulates the <em>context</em> in which an

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolutionException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if an error is encountered in the configuration or execution of a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.reflect.Parameter;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code ParameterResolver} defines the API for {@link Extension Extensions}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code TestExecutionExceptionHandler} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code TestInstancePostProcessor} defines the API for {@link Extension

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContext.java
Patch:
@@ -11,11 +11,11 @@
 package org.junit.jupiter.api.extension;
 
 import static java.util.Collections.emptyList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code TestTemplateInvocationContext} represents the <em>context</em> of a

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.stream.Stream;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code TestTemplateInvocationContextProvider} defines the API for

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code Executable} is a functional interface that can be used to

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code ThrowingConsumer} is a functional interface that can be used to

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code ThrowingSupplier} is a functional interface that can be used to

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of constants related to the {@link JupiterTestEngine}.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.jupiter.engine.descriptor.JupiterEngineDescriptor;
 import org.junit.jupiter.engine.discovery.DiscoverySelectorResolver;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.ExecutionRequest;
 import org.junit.platform.engine.TestDescriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineExecutionListener;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.descriptor;
 
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findAfterAllMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findAfterEachMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeAllMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeEachMethods;
 import static org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils.getTestInstanceLifecycle;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -25,6 +25,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
@@ -39,7 +40,6 @@
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineExtensionContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.EngineExecutionListener;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 
@@ -24,6 +24,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;
@@ -35,7 +36,6 @@
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.engine.TestSource;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineExecutionListener;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -10,17 +10,17 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Constructor;
 import java.util.Optional;
 import java.util.Set;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -10,20 +10,20 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.Iterator;
 import java.util.stream.Stream;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.DynamicContainer;
 import org.junit.jupiter.api.DynamicNode;
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.CollectionUtils;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.engine.TestSource;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -10,13 +10,14 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.BiFunction;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.AfterTestExecutionCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
@@ -31,7 +32,6 @@
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -11,18 +11,18 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -19,8 +19,8 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
+import org.apiguardian.API;
 import org.junit.jupiter.engine.discovery.predicates.IsScannableTestClass;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.discovery.ClassSelector;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsInnerClass.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Test if a class is a non-private inner class (i.e., a non-static nested class).

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
 
 import java.util.function.Predicate;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.Nested;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Test if a class is a JUnit Jupiter {@link Nested @Nested} test class.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsPotentialTestContainer.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;
 import static org.junit.platform.commons.util.ReflectionUtils.isStatic;
 
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Test if a class is a potential top-level JUnit Jupiter test container, even if

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Test if a class is a JUnit Jupiter test class which should be included in

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestFactoryMethod.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.TestFactory;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Test if a method is a JUnit Jupiter {@link TestFactory @TestFactory} method.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.Test;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Test if a method is a JUnit Jupiter {@link Test @Test} method.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestTemplateMethod.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.TestTemplate;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Test if a method is a JUnit Jupiter {@link TestTemplate @TestTemplate} method.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Functional interface for registering an {@link AfterEach @AfterEach} method

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Functional interface for registering a {@link BeforeEach @BeforeEach} method

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluator.java
Patch:
@@ -11,22 +11,22 @@
 package org.junit.jupiter.engine.execution;
 
 import static java.lang.String.format;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_ALL_CONDITIONS_PATTERN;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Predicate;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;
 import org.junit.jupiter.api.extension.ExecutionCondition;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.Constants;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.engine.ConfigurationParameters;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExecutableInvoker.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
 import java.lang.reflect.Constructor;
@@ -22,14 +22,14 @@
 import java.util.List;
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolutionException;
 import org.junit.jupiter.api.extension.ParameterResolver;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.getWrapperType;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
@@ -22,10 +22,10 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContextException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ExtensionValuesStore} is used inside implementations of

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.support.hierarchical.EngineExecutionContext;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/NamespaceAwareStore.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ThrowableCollector.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.function.Executable;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.Preconditions;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Stream.concat;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.jupiter.engine.Constants.EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -25,12 +25,12 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.engine.Constants;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.junit.platform.commons.meta.API;
 
 /**
  * This class-level annotation enables native JUnit 4 rule support

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -12,10 +12,11 @@
 
 import static java.lang.Boolean.FALSE;
 import static java.lang.Boolean.TRUE;
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
@@ -24,7 +25,6 @@
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;
 import org.junit.jupiter.migrationsupport.rules.adapter.ExpectedExceptionAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.ExpectedException;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -10,17 +10,17 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;
 import org.junit.jupiter.migrationsupport.rules.adapter.ExternalResourceAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.ExternalResource;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;
 import org.junit.jupiter.migrationsupport.rules.adapter.VerifierAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.Verifier;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/AbstractTestRuleAdapter.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethod;
 import static org.junit.platform.commons.util.ReflectionUtils.invokeMethod;
 
 import java.lang.reflect.Method;
 
+import org.apiguardian.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.rules.TestRule;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExpectedExceptionAdapter.java
Patch:
@@ -11,10 +11,10 @@
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
 import static java.lang.Boolean.TRUE;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.ExpectedException;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExternalResourceAdapter.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.ExternalResource;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/GenericBeforeAndAfterAdvice.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * @since 5.0

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/VerifierAdapter.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
-import org.junit.platform.commons.meta.API;
 import org.junit.rules.Verifier;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMember.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.rules.TestRule;
 
 /**

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -10,17 +10,17 @@
 
 package org.junit.jupiter.params;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.TestTemplate;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @ParameterizedTest} is used to signal that the annotated method is a

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ArgumentConversionException} is an exception that can

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ParameterContext;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ArgumentConverter} is an abstraction that allows an input object to

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ConvertWith} is an annotation that allows one to specify an explicit

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.time.Instant;
 import java.time.LocalDate;
@@ -31,7 +31,7 @@
 import java.util.Optional;
 import java.util.function.Function;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apiguardian.API;
 import org.junit.jupiter.params.ParameterizedTest;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @JavaTimeConversionPattern} is an annotation that allows a date/time

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ParameterContext;
-import org.junit.platform.commons.meta.API;
 
 /**
  * {@code SimpleArgumentConverter} is an abstract base class for {@link ArgumentConverter}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 
+import org.apiguardian.API;
 import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.platform.commons.meta.API;
 
 /**
  * An {@code ArgumentsProvider} is responsible for {@linkplain #provideArguments

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ArgumentsSource} is a {@linkplain Repeatable repeatable} annotation

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ArgumentsSources} is a simple container for one or more

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @CsvFileSource} is an {@link ArgumentsSource} which is used to

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @CsvSource} is an {@link ArgumentsSource} which reads

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -25,7 +25,7 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @MethodSource} is an {@link ArgumentsSource} which provides access

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ValueSource} is an {@link ArgumentsSource} which provides

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Annotation;
 import java.util.function.Consumer;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @AnnotationConsumer} is a {@code @FunctionalInterface} for consuming

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumerInitializer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
 
@@ -19,8 +19,8 @@
 import java.lang.reflect.Method;
 import java.util.function.Predicate;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.AnnotationUtils;
 
 /**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.commons;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Base class for all {@link RuntimeException RuntimeExceptions} thrown

File: junit-platform-commons/src/main/java/org/junit/platform/commons/annotation/Testable.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.annotation;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @Testable} is used to signal to IDEs and tooling vendors that the

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/Logger.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * The {@code Logger} API serves as a simple logging facade for

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/LoggerFactory.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Factory for the {@link Logger} facade for JUL.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.AnnotationUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/HierarchyTraversalMode.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Modes in which a hierarchy can be traversed &mdash; for example, when

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.reflect.Method;
 import java.net.URI;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.util;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.lang.annotation.Annotation;
@@ -33,8 +33,8 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode;
 
 /**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/BlacklistedExceptions.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Collections;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Internal utilities for working with <em>blacklisted</em> exceptions.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassLoaderUtils.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.net.URL;
 import java.security.CodeSource;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@linkplain ClassLoader} and associated tasks.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -12,11 +12,11 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.joining;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@link Class classes}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -15,7 +15,7 @@
 import static java.util.stream.Collectors.collectingAndThen;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;
@@ -29,7 +29,7 @@
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@link Collection Collections}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with exceptions.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@link Function Functions},

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PackageUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.File;
 import java.net.URL;
@@ -25,7 +25,7 @@
 
 import javax.lang.model.SourceVersion;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@linkplain Package packages}.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PreconditionViolationException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if a <em>precondition</em> is violated.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Supplier;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for asserting preconditions for method and

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.TOP_DOWN;
@@ -47,8 +47,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with the Java reflection APIs.

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Arrays;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Collection of utilities for working with {@link String Strings},

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -11,12 +11,12 @@
 package org.junit.platform.commons.util;
 
 import static java.lang.String.join;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Simple builder for generating strings in custom implementations of

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.platform.console;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.io.BufferedWriter;
 import java.io.OutputStreamWriter;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.nio.charset.Charset;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.console.options.CommandLineOptions;
 import org.junit.platform.console.options.CommandLineOptionsParser;
 import org.junit.platform.console.options.JOptSimpleCommandLineOptionsParser;

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncherExecutionResult.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.console;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.emptyList;
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
 import java.net.URI;
@@ -26,7 +26,7 @@
 import java.util.Optional;
 import java.util.stream.Stream;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.Writer;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Details.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -23,8 +23,8 @@
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 
 /**
  * @since 1.0

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Theme.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestExecutionResult;
 
 /**

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.tasks;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.net.URL;
@@ -21,8 +21,8 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.console.options.CommandLineOptions;
 import org.junit.platform.console.options.Details;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Configuration parameters that {@link TestEngine TestEngines} may use to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * A {@link DiscoveryFilter} is applied during test discovery to determine if

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * A selector defines what a {@link TestEngine} can use to discover tests

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code EngineDiscoveryRequest} provides a {@link TestEngine} access to the

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineExecutionListener.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestExecutionResult.Status;
 import org.junit.platform.engine.reporting.ReportEntry;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Provides a single {@link TestEngine} access to the information necessary to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -11,15 +11,15 @@
 package org.junit.platform.engine;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.CompositeFilter.alwaysIncluded;
 
 import java.util.Collection;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/FilterResult.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Mutable descriptor for a test or container that has been discovered by a

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PackageUtils;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestExecutionResult.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.engine.TestExecutionResult.Status.ABORTED;
 import static org.junit.platform.engine.TestExecutionResult.Status.FAILED;
 import static org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.Serializable;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Representation of the source of a test or container used to navigate to

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -12,16 +12,16 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Collections.unmodifiableList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.DiscoveryFilter;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.commons.util.ToStringBuilder;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DirectorySelector.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.io.File;
@@ -25,7 +25,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.ReflectionUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageNameFilter.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.DiscoveryFilter;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UniqueIdSelector.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.UniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UriSelector.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.DiscoverySelector;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.reporting;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.time.LocalDateTime;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -11,15 +11,15 @@
 package org.junit.platform.engine.support.descriptor;
 
 import static java.util.Collections.emptySet;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Optional;
 import java.util.Set;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClassSource.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DirectorySource.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.UniqueId;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSource.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 import java.util.Objects;
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.JUnitException;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.File;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestSource;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/MethodSource.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.commons.util.ClassUtils.nullSafeToString;
 
 import java.lang.reflect.Method;
 import java.util.Objects;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/PackageSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Objects;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestSource;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/UriSource.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.net.URI;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestSource;
 
 /**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ClasspathScanningSupport.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.composeFilters;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.DiscoveryFilter;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.discovery.ClassNameFilter;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ExclusionReasonConsumingFilter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.util.Optional;
 import java.util.function.BiConsumer;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * Marker interface for an execution context used by a concrete implementation

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.ExecutionRequest;
 import org.junit.platform.engine.TestEngine;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.util.Optional;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestDescriptor;
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.platform.engine.TestExecutionResult.aborted;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestExecutionResult;
 import org.opentest4j.TestAbortedException;
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -11,13 +11,13 @@
 package org.junit.platform.launcher;
 
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.engine.FilterResult.includedIf;
 
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * The {@code Launcher} API is the main entry point for client code that

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryRequest.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.ConfigurationParameters;
 import org.junit.platform.engine.DiscoveryFilter;
 import org.junit.platform.engine.DiscoverySelector;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/PostDiscoveryFilter.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestEngine;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -12,11 +12,11 @@
 
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.FilterResult;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.TestExecutionResult.Status;
 import org.junit.platform.engine.reporting.ReportEntry;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -11,16 +11,16 @@
 package org.junit.platform.launcher;
 
 import static java.util.Collections.unmodifiableSet;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.LinkedHashSet;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 import org.junit.platform.engine.TestDescriptor;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Collections.emptySet;
 import static java.util.Collections.unmodifiableSet;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -24,7 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Predicate;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoveryFilter;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.launcher.Launcher;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LoggingListener.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.util.function.BiConsumer;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -11,11 +11,11 @@
 package org.junit.platform.launcher.listeners;
 
 import static java.util.stream.Stream.concat;
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.util.stream.Stream;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.launcher.TestExecutionListener;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.io.PrintWriter;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.launcher.TestIdentifier;
 
 /**

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Status.STABLE;
+import static org.apiguardian.API.Status.STABLE;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;
 import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
@@ -31,7 +31,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.discovery.DiscoverySelectors;

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ExcludeClassNamePatterns} specifies regular expressions that are used

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ExcludeEngines} specifies the {@linkplain #value IDs} of

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ExcludePackages} specifies the {@linkplain #value packages} to be

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @ExcludeTags} specifies the {@linkplain #value tags} to be excluded

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @IncludeClassNamePatterns} specifies regular expressions that are used

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @IncludeEngines} specifies the {@linkplain #value IDs} of

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @IncludePackages} specifies the {@linkplain #value packages} to be

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @IncludeTags} specifies the {@linkplain #value tags} to be included

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectClasses.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @SelectClasses} specifies the classes to <em>select</em> when running

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectPackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @SelectPackages} specifies the names of packages to <em>select</em>

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/UseTechnicalNames.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
+import static org.apiguardian.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * {@code @UseTechnicalNames} specifies that <em>technical names</em> should be

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -17,7 +17,7 @@
 package org.junit.platform.surefire.provider;
 
 import static java.util.Collections.emptyMap;
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
+import static org.apiguardian.API.Status.EXPERIMENTAL;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
@@ -44,7 +44,7 @@
 import org.apache.maven.surefire.suite.RunResult;
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.launcher.Launcher;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.vintage.engine;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.ENGINE_ID;
 
 import java.util.Optional;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.ExecutionRequest;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.vintage.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.runner.Request;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.function.Predicate.isEqual;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
@@ -23,8 +23,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apiguardian.API;
 import org.junit.experimental.categories.Category;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestSource;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/VintageDiscoverer.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.discovery;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.adaptFilter;
 import static org.junit.platform.engine.Filter.composeFilters;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -20,8 +20,8 @@
 import java.util.Objects;
 import java.util.function.Predicate;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.logging.Logger;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.engine.TestDescriptor;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.vintage.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.logging.Logger;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.runner.JUnitCore;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdReader.java
Patch:
@@ -11,15 +11,15 @@
 package org.junit.vintage.engine.support;
 
 import static java.lang.String.format;
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.readFieldValue;
 
 import java.io.Serializable;
 import java.util.Optional;
 import java.util.function.Function;
 
+import org.apiguardian.API;
 import org.junit.platform.commons.logging.Logger;
-import org.junit.platform.commons.meta.API;
 import org.junit.runner.Description;
 
 /**

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdStringifier.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.support;
 
-import static org.junit.platform.commons.meta.API.Status.INTERNAL;
+import static org.apiguardian.API.Status.INTERNAL;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -23,7 +23,7 @@
 import java.util.Locale;
 import java.util.function.Function;
 
-import org.junit.platform.commons.meta.API;
+import org.apiguardian.API;
 
 /**
  * @since 4.12

File: platform-tests/src/test/java/org/junit/api/tools/AbstractApiReportWriter.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.EnumSet;
 import java.util.List;
 
-import org.junit.platform.commons.meta.API.Status;
+import org.apiguardian.API.Status;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/api/tools/ApiReport.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.junit.platform.commons.meta.API.Status;
+import org.apiguardian.API.Status;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/api/tools/ApiReportGenerator.java
Patch:
@@ -21,10 +21,10 @@
 import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
 import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
 
+import org.apiguardian.API;
+import org.apiguardian.API.Status;
 import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.logging.LoggerFactory;
-import org.junit.platform.commons.meta.API;
-import org.junit.platform.commons.meta.API.Status;
 
 /**
  * @since 1.0

File: platform-tests/src/test/java/org/junit/api/tools/ApiReportWriter.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.PrintWriter;
 import java.util.EnumSet;
 
-import org.junit.platform.commons.meta.API.Status;
+import org.apiguardian.API.Status;
 
 /**
  * @since 1.0

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -62,6 +62,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface AfterAll {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -58,6 +58,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface AfterEach {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.time.Duration;
@@ -37,7 +36,7 @@
  * @see org.opentest4j.AssertionFailedError
  * @see Assumptions
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public final class Assertions {
 
 	///CLOVER:OFF
@@ -1089,7 +1088,6 @@ public static void assertAll(String heading, Executable... executables) throws M
 	 * @see #assertAll(String, Executable...)
 	 * @see #assertAll(Stream)
 	 */
-	@API(status = EXPERIMENTAL)
 	public static void assertAll(String heading, Stream<Executable> executables) throws MultipleFailuresError {
 		AssertAll.assertAll(heading, executables);
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assumptions.java
Patch:
@@ -38,7 +38,7 @@
  * @see TestAbortedException
  * @see Assertions
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public final class Assumptions {
 
 	///CLOVER:OFF

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -62,6 +62,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface BeforeAll {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -58,6 +58,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface BeforeEach {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -32,7 +32,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface Disabled {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayName.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface DisplayName {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicContainer.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class DynamicContainer extends DynamicNode {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicNode.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public abstract class DynamicNode {
 
 	private final String displayName;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicTest.java
Patch:
@@ -44,7 +44,7 @@
  * @see TestFactory
  * @see Executable
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class DynamicTest extends DynamicNode {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -29,6 +29,6 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface Nested {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -53,7 +53,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 @TestTemplate
 public @interface RepeatedTest {
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepetitionInfo.java
Patch:
@@ -33,7 +33,7 @@
  * @see RepeatedTest
  * @see TestInfo
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface RepetitionInfo {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -46,7 +46,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Repeatable(Tags.class)
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface Tag {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface Tags {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -47,7 +47,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 @Testable
 public @interface Test {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -52,7 +52,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @Testable
 public @interface TestFactory {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -31,7 +31,7 @@
  * @see Test
  * @see DisplayName
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestInfo {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -28,7 +28,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestReporter {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -57,7 +57,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 @Testable
 public @interface TestTemplate {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -32,7 +32,7 @@
  * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface AfterAllCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -37,7 +37,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface AfterEachCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -36,7 +36,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface AfterTestExecutionCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -32,7 +32,7 @@
  * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface BeforeAllCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -35,7 +35,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface BeforeEachCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -36,7 +36,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface BeforeTestExecutionCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public class ConditionEvaluationResult {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -29,7 +29,7 @@
  * @see org.junit.jupiter.api.Disabled
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ExecutionCondition extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -49,7 +49,7 @@
 @Documented
 @Inherited
 @Repeatable(Extensions.class)
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface ExtendWith {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -22,6 +22,6 @@
  *
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface Extension {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionConfigurationException.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public class ExtensionConfigurationException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -38,7 +38,7 @@
  * @see Store
  * @see Namespace
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ExtensionContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContextException.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public class ExtensionContextException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public @interface Extensions {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterContext.java
Patch:
@@ -33,7 +33,7 @@
  * @see java.lang.reflect.Method
  * @see java.lang.reflect.Constructor
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ParameterContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolutionException.java
Patch:
@@ -22,7 +22,7 @@
  * @since 5.0
  * @see ParameterResolver
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public class ParameterResolutionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -37,7 +37,7 @@
  * @see #resolveParameter(ParameterContext, ExtensionContext)
  * @see ParameterContext
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ParameterResolver extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -30,7 +30,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestExecutionExceptionHandler extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * @since 5.0
  * @see #postProcessTestInstance(Object, ExtensionContext)
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestInstancePostProcessor extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContext.java
Patch:
@@ -28,7 +28,7 @@
  * @see org.junit.jupiter.api.TestTemplate
  * @see TestTemplateInvocationContextProvider
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestTemplateInvocationContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -47,7 +47,7 @@
  * @see TestTemplateInvocationContext
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface TestTemplateInvocationContextProvider extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -40,7 +40,7 @@
  * @see ThrowingConsumer
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface Executable {
 
 	void execute() throws Throwable;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -38,7 +38,7 @@
  * @see Executable
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ThrowingConsumer<T> {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -39,7 +39,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public interface ThrowingSupplier<T> {
 
 	/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @since 5.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "5.0")
 public final class Constants {
 
 	/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class JupiterTestEngine extends HierarchicalTestEngine<JupiterEngineExecutionContext> {
 
 	public static final String ENGINE_ID = "junit-jupiter";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class ClassExtensionContext extends AbstractExtensionContext<ClassTestDescriptor> {
 
 	private final ThrowableCollector throwableCollector;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -58,7 +58,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ClassTestDescriptor extends JupiterTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class JupiterEngineDescriptor extends EngineDescriptor implements Node<JupiterEngineExecutionContext> {
 
 	public JupiterEngineDescriptor(UniqueId uniqueId) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineExtensionContext.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class JupiterEngineExtensionContext extends AbstractExtensionContext<JupiterEngineDescriptor> {
 
 	public JupiterEngineExtensionContext(EngineExecutionListener engineExecutionListener,

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -47,7 +47,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public abstract class JupiterTestDescriptor extends AbstractTestDescriptor
 		implements Node<JupiterEngineExecutionContext> {
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class MethodExtensionContext extends AbstractExtensionContext<TestMethodTestDescriptor> {
 
 	private final Object testInstance;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class NestedClassTestDescriptor extends ClassTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class TestFactoryTestDescriptor extends TestMethodTestDescriptor {
 
 	public static final String DYNAMIC_CONTAINER_SEGMENT_TYPE = "dynamic-container";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -54,7 +54,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class TestMethodTestDescriptor extends MethodBasedTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class TestTemplateInvocationTestDescriptor extends TestMethodTestDescriptor {
 
 	public static final String SEGMENT_TYPE = "test-template-invocation";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class TestTemplateTestDescriptor extends MethodBasedTestDescriptor {
 
 	public TestTemplateTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method templateMethod) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -38,7 +38,7 @@
  * @since 5.0
  * @see JavaElementsResolver
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class DiscoverySelectorResolver {
 
 	private static final IsScannableTestClass isScannableTestClass = new IsScannableTestClass();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsInnerClass.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsInnerClass implements Predicate<Class<?>> {
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsNestedTestClass implements Predicate<Class<?>> {
 
 	private static final IsInnerClass isInnerClass = new IsInnerClass();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsPotentialTestContainer.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsPotentialTestContainer implements Predicate<Class<?>> {
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsScannableTestClass implements Predicate<Class<?>> {
 
 	private static final IsTestClassWithTests isTestClassWithTests = new IsTestClassWithTests();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestFactoryMethod.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsTestFactoryMethod extends IsTestableMethod {
 
 	public IsTestFactoryMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsTestMethod extends IsTestableMethod {
 
 	public IsTestMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestTemplateMethod.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class IsTestTemplateMethod extends IsTestableMethod {
 
 	public IsTestTemplateMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -25,7 +25,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public interface AfterEachMethodAdapter extends Extension {
 
 	void invokeAfterEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -25,7 +25,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public interface BeforeEachMethodAdapter extends Extension {
 
 	void invokeBeforeEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluator.java
Patch:
@@ -36,7 +36,7 @@
  * @since 5.0
  * @see ExecutionCondition
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ConditionEvaluator {
 
 	private static final Logger logger = LoggerFactory.getLogger(ConditionEvaluator.class);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExecutableInvoker.java
Patch:
@@ -41,7 +41,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ExecutableInvoker {
 
 	private static final Logger logger = LoggerFactory.getLogger(ExecutableInvoker.class);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ExtensionValuesStore {
 
 	private final ExtensionValuesStore parentStore;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class JupiterEngineExecutionContext implements EngineExecutionContext {
 
 	private final State state;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/NamespaceAwareStore.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class NamespaceAwareStore implements Store {
 
 	private final ExtensionValuesStore valuesStore;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -21,7 +21,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public interface TestInstanceProvider {
 
 	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ThrowableCollector.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ThrowableCollector {
 
 	private Throwable throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -47,7 +47,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ExtensionRegistry {
 
 	private static final Logger logger = LoggerFactory.getLogger(ExtensionRegistry.class);

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -38,7 +38,7 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ExtendWith(ExternalResourceSupport.class)
 @ExtendWith(VerifierSupport.class)
 @ExtendWith(ExpectedExceptionSupport.class)

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -43,7 +43,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class ExpectedExceptionSupport implements AfterEachCallback, TestExecutionExceptionHandler {
 
 	private static final String EXCEPTION_WAS_HANDLED = "exceptionWasHandled";

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -42,7 +42,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCallback {
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = ExternalResourceAdapter::new;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -41,7 +41,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class VerifierSupport implements AfterEachCallback {
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = VerifierAdapter::new;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/AbstractTestRuleAdapter.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public abstract class AbstractTestRuleAdapter implements GenericBeforeAndAfterAdvice {
 
 	private final TestRule target;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExpectedExceptionAdapter.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ExpectedExceptionAdapter extends AbstractTestRuleAdapter {
 
 	public ExpectedExceptionAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExternalResourceAdapter.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class ExternalResourceAdapter extends AbstractTestRuleAdapter {
 
 	public ExternalResourceAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/GenericBeforeAndAfterAdvice.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public interface GenericBeforeAndAfterAdvice {
 
 	default void before() {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/VerifierAdapter.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class VerifierAdapter extends AbstractTestRuleAdapter {
 
 	public VerifierAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMember.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public interface TestRuleAnnotatedMember {
 
 	TestRule getTestRule();

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class TestRuleAnnotatedMemberFactory {
 
 	///CLOVER:OFF

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -60,7 +60,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @TestTemplate
 @ExtendWith(ParameterizedTestExtension.class)
 public @interface ParameterizedTest {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -23,7 +23,7 @@
  * @since 5.0
  * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public class ArgumentConversionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -35,7 +35,7 @@
  * @see org.junit.jupiter.params.ParameterizedTest
  * @see org.junit.jupiter.params.converter.ConvertWith
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public interface ArgumentConverter {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -35,7 +35,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public @interface ConvertWith {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -50,7 +50,7 @@
  * @since 5.0
  * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public class DefaultArgumentConverter extends SimpleArgumentConverter {
 
 	public static final DefaultArgumentConverter INSTANCE = new DefaultArgumentConverter();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -33,7 +33,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ConvertWith(JavaTimeArgumentConverter.class)
 public @interface JavaTimeConversionPattern {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -22,7 +22,7 @@
  * @since 5.0
  * @see ArgumentConverter
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public abstract class SimpleArgumentConverter implements ArgumentConverter {
 
 	@Override

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -27,7 +27,7 @@
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.ArgumentsProvider
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public interface Arguments {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -32,7 +32,7 @@
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.Arguments
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public interface ArgumentsProvider {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Repeatable(ArgumentsSources.class)
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public @interface ArgumentsSource {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -34,7 +34,7 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public @interface ArgumentsSources {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ArgumentsSource(CsvFileArgumentsProvider.class)
 public @interface CsvFileSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ArgumentsSource(CsvArgumentsProvider.class)
 public @interface CsvSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -46,7 +46,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ArgumentsSource(EnumArgumentsProvider.class)
 public @interface EnumSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -39,7 +39,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ArgumentsSource(MethodArgumentsProvider.class)
 public @interface MethodSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -38,7 +38,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 @ArgumentsSource(ValueArgumentsProvider.class)
 public @interface ValueSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -28,6 +28,6 @@
  *
  * @since 5.0
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "5.0")
 public interface AnnotationConsumer<A extends Annotation> extends Consumer<A> {
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumerInitializer.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "5.0")
 public final class AnnotationConsumerInitializer {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class JUnitException extends RuntimeException {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/annotation/Testable.java
Patch:
@@ -74,6 +74,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public @interface Testable {
 }

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/Logger.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public interface Logger {
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/LoggerFactory.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class LoggerFactory {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "5.0")
 public final class AnnotationSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/HierarchyTraversalMode.java
Patch:
@@ -22,7 +22,7 @@
  * @see #TOP_DOWN
  * @see #BOTTOM_UP
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "5.0")
 public enum HierarchyTraversalMode {
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @since 1.0
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "5.0")
 public final class ReflectionSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -54,7 +54,7 @@
  * @see AnnotatedElement
  * @see org.junit.platform.commons.support.AnnotationSupport
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class AnnotationUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/BlacklistedExceptions.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class BlacklistedExceptions {
 
 	private static final List<Class<? extends Throwable>> blacklist = Collections.singletonList(OutOfMemoryError.class);

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassLoaderUtils.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class ClassLoaderUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class ClassUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -42,7 +42,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class CollectionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class ExceptionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class FunctionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PackageUtils.java
Patch:
@@ -38,7 +38,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class PackageUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PreconditionViolationException.java
Patch:
@@ -21,7 +21,7 @@
  * @since 1.0
  * @see Preconditions
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class PreconditionViolationException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class Preconditions {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -65,7 +65,7 @@
  * @since 1.0
  * @see org.junit.platform.commons.support.ReflectionSupport
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class ReflectionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class StringUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class ToStringBuilder {
 
 	private final Class<?> type;

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java
Patch:
@@ -32,16 +32,15 @@
  *
  * @since 1.0
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public class ConsoleLauncher {
 
-	@API(status = MAINTAINED)
 	public static void main(String... args) {
 		int exitCode = execute(System.out, System.err, args).getExitCode();
 		System.exit(exitCode);
 	}
 
-	@API(status = INTERNAL)
+	@API(status = INTERNAL, since = "1.0")
 	public static ConsoleLauncherExecutionResult execute(PrintStream out, PrintStream err, String... args) {
 		CommandLineOptionsParser parser = new JOptSimpleCommandLineOptionsParser();
 		ConsoleLauncher consoleLauncher = new ConsoleLauncher(parser, out, err);

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncherExecutionResult.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class ConsoleLauncherExecutionResult {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class CommandLineOptions {
 
 	static final Details DEFAULT_DETAILS = Details.TREE;

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public interface CommandLineOptionsParser {
 
 	CommandLineOptions parse(String... arguments);

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Details.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public enum Details {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class JOptSimpleCommandLineOptionsParser implements CommandLineOptionsParser {
 
 	@Override

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Theme.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public enum Theme {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class ConsoleTestExecutor {
 
 	private final CommandLineOptions options;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -28,7 +28,7 @@
  * @see ExecutionRequest
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface ConfigurationParameters {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -25,6 +25,6 @@
  * @see EngineDiscoveryRequest
  * @see TestEngine
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface DiscoveryFilter<T> extends Filter<T> {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -22,6 +22,6 @@
  * @since 1.0
  * @see EngineDiscoveryRequest
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface DiscoverySelector {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -36,7 +36,7 @@
  * @see ConfigurationParameters
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface EngineDiscoveryRequest {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineExecutionListener.java
Patch:
@@ -28,7 +28,7 @@
  * @see TestEngine
  * @see ExecutionRequest
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface EngineExecutionListener {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -27,7 +27,7 @@
  * @see TestEngine
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ExecutionRequest {
 
 	private final TestDescriptor rootTestDescriptor;
@@ -36,7 +36,7 @@ public class ExecutionRequest {
 
 	private final ConfigurationParameters configurationParameters;
 
-	@API(status = INTERNAL)
+	@API(status = INTERNAL, since = "1.0")
 	public ExecutionRequest(TestDescriptor rootTestDescriptor, EngineExecutionListener engineExecutionListener,
 			ConfigurationParameters configurationParameters) {
 		this.rootTestDescriptor = rootTestDescriptor;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -36,7 +36,7 @@
  * @see DiscoveryFilter
  */
 @FunctionalInterface
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface Filter<T> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/FilterResult.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class FilterResult {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -26,7 +26,7 @@
  * @see TestEngine
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface TestDescriptor {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -43,7 +43,7 @@
  * @see org.junit.platform.commons.annotation.Testable
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface TestEngine {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestExecutionResult.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class TestExecutionResult {
 
 	private static final TestExecutionResult SUCCESSFUL_RESULT = new TestExecutionResult(SUCCESSFUL, null);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -29,6 +29,6 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface TestSource extends Serializable {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -28,7 +28,7 @@
  * @see #isValid(String)
  * @see #create(String)
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class TestTag implements Serializable {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class UniqueId implements Cloneable, Serializable {
 
 	private static final long serialVersionUID = 1L;
@@ -181,7 +181,7 @@ public String toString() {
 	 * A segment of a {@link UniqueId} comprises a <em>type</em> and a
 	 * <em>value</em>.
 	 */
-	@API(status = STABLE)
+	@API(status = STABLE, since = "1.0")
 	public static class Segment implements Serializable {
 
 		private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -21,7 +21,7 @@
  * @since 1.0
  * @see #includeClassNamePatterns
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface ClassNameFilter extends DiscoveryFilter<String> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -35,7 +35,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.ClassSource
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ClassSelector implements DiscoverySelector {
 
 	private final String className;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java
Patch:
@@ -32,7 +32,7 @@
  * @see ClasspathRootSelector
  * @see #getClasspathResourceName()
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ClasspathResourceSelector implements DiscoverySelector {
 
 	private final String classpathResourceName;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -34,7 +34,7 @@
  * @see ClasspathResourceSelector
  * @see Thread#getContextClassLoader()
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ClasspathRootSelector implements DiscoverySelector {
 
 	private final URI classpathRoot;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DirectorySelector.java
Patch:
@@ -34,7 +34,7 @@
  * @see #getPath()
  * @see #getRawPath()
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class DirectorySelector implements DiscoverySelector {
 
 	private final String path;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -43,7 +43,7 @@
  * @see MethodSelector
  * @see PackageSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class DiscoverySelectors {
 
 	private static final Pattern fullyQualifiedMethodNamePattern = Pattern.compile("([^#]+)#([^(]+)(?:\\((.*)\\))?");

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java
Patch:
@@ -34,7 +34,7 @@
  * @see #getPath()
  * @see #getRawPath()
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class FileSelector implements DiscoverySelector {
 
 	private final String path;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -43,7 +43,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.MethodSource
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class MethodSelector implements DiscoverySelector {
 
 	private final String className;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageNameFilter.java
Patch:
@@ -23,7 +23,7 @@
  * @since 1.0
  * @see #includePackageNames
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface PackageNameFilter extends DiscoveryFilter<String> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageSelector.java
Patch:
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.PackageSource
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class PackageSelector implements DiscoverySelector {
 
 	private final String packageName;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UniqueIdSelector.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class UniqueIdSelector implements DiscoverySelector {
 
 	private final UniqueId uniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UriSelector.java
Patch:
@@ -28,7 +28,7 @@
  * @see DirectorySelector
  * @see org.junit.platform.engine.support.descriptor.UriSource
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class UriSelector implements DiscoverySelector {
 
 	private final URI uri;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -29,7 +29,7 @@
  * @see #from(Map)
  * @see #from(String, String)
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class ReportEntry {
 
 	private final LocalDateTime timestamp = LocalDateTime.now();

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public abstract class AbstractTestDescriptor implements TestDescriptor {
 
 	private final UniqueId uniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClassSource.java
Patch:
@@ -30,7 +30,7 @@
  * @since 1.0
  * @see ClassSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ClassSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java
Patch:
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.ClasspathResourceSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class ClasspathResourceSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class CompositeTestSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DirectorySource.java
Patch:
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.DirectorySelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class DirectorySource implements FileSystemSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class EngineDescriptor extends AbstractTestDescriptor {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class FilePosition implements Serializable {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSource.java
Patch:
@@ -30,7 +30,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.FileSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class FileSource implements FileSystemSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @since 1.0
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface FileSystemSource extends UriSource {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/MethodSource.java
Patch:
@@ -31,7 +31,7 @@
  * @since 1.0
  * @see MethodSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class MethodSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/PackageSource.java
Patch:
@@ -29,7 +29,7 @@
  * @since 1.0
  * @see PackageSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class PackageSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/UriSource.java
Patch:
@@ -23,7 +23,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.UriSelector
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface UriSource extends TestSource {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ClasspathScanningSupport.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public final class ClasspathScanningSupport {
 
 	///CLOVER:OFF

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ExclusionReasonConsumingFilter.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @since 1.0
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "1.0")
 public class ExclusionReasonConsumingFilter<T> implements Filter<T> {
 
 	private final Filter<T> filter;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -21,6 +21,6 @@
  * @since 1.0
  * @see HierarchicalTestEngine
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public interface EngineExecutionContext {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see Node
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public abstract class HierarchicalTestEngine<C extends EngineExecutionContext> implements TestEngine {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -26,7 +26,7 @@
  * @since 1.0
  * @see HierarchicalTestEngine
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public interface Node<C extends EngineExecutionContext> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see #executeSafely(Executable)
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public class SingleTestExecutor {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -38,7 +38,7 @@
  * @see #excludeEngines(String...)
  * @see LauncherDiscoveryRequest
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class EngineFilter implements Filter<TestEngine> {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -53,7 +53,7 @@
  * @see org.junit.platform.launcher.core.LauncherFactory
  * @see org.junit.platform.engine.TestEngine
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface Launcher {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryRequest.java
Patch:
@@ -53,7 +53,7 @@
  * @see #getEngineFilters()
  * @see #getPostDiscoveryFilters()
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface LauncherDiscoveryRequest extends EngineDiscoveryRequest {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/PostDiscoveryFilter.java
Patch:
@@ -31,6 +31,6 @@
  * @see LauncherDiscoveryRequest
  * @see TestEngine
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface PostDiscoveryFilter extends Filter<TestDescriptor> {
 }

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -30,7 +30,7 @@
  * @see #includeTags(String...)
  * @see #excludeTags(String...)
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class TagFilter {
 
 	///CLOVER:OFF

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -43,7 +43,7 @@
  * @see TestPlan
  * @see TestIdentifier
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public interface TestExecutionListener {
 	///CLOVER:OFF
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -35,7 +35,7 @@
  * @since 1.0
  * @see TestPlan
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class TestIdentifier implements Serializable {
 
 	private static final long serialVersionUID = 1L;
@@ -51,7 +51,7 @@ public final class TestIdentifier implements Serializable {
 	/**
 	 * Factory for creating a new {@link TestIdentifier} from a {@link TestDescriptor}.
 	 */
-	@API(status = INTERNAL)
+	@API(status = INTERNAL, since = "1.0")
 	public static TestIdentifier from(TestDescriptor testDescriptor) {
 		Preconditions.notNull(testDescriptor, "TestDescriptor must not be null");
 		String uniqueId = testDescriptor.getUniqueId().toString();

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java
Patch:
@@ -51,7 +51,7 @@
  * @see Launcher
  * @see TestExecutionListener
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class TestPlan {
 
 	private final Set<TestIdentifier> roots = Collections.synchronizedSet(new LinkedHashSet<>(4));
@@ -73,7 +73,7 @@ public final class TestPlan {
 	 * plan should be created; never {@code null}
 	 * @return a new test plan
 	 */
-	@API(status = INTERNAL)
+	@API(status = INTERNAL, since = "1.0")
 	public static TestPlan from(Collection<TestDescriptor> engineDescriptors) {
 		Preconditions.notNull(engineDescriptors, "Cannot create TestPlan from a null collection of TestDescriptors");
 		TestPlan testPlan = new TestPlan(engineDescriptors.stream().anyMatch(TestDescriptor::containsTests));

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -76,7 +76,7 @@
  * @see org.junit.platform.launcher.EngineFilter
  * @see org.junit.platform.launcher.TagFilter
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public final class LauncherDiscoveryRequestBuilder {
 
 	private List<DiscoverySelector> selectors = new ArrayList<>();

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -37,7 +37,7 @@
  * @since 1.0
  * @see Launcher
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class LauncherFactory {
 
 	///CLOVER:OFF

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LoggingListener.java
Patch:
@@ -34,7 +34,7 @@
  * @see #forJavaUtilLogging(Level)
  * @see LoggingListener#LoggingListener(BiConsumer)
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public class LoggingListener implements TestExecutionListener {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -29,7 +29,7 @@
  * @since 1.0
  * @see #getSummary()
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public class SummaryGeneratingListener implements TestExecutionListener {
 
 	private TestPlan testPlan;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see SummaryGeneratingListener
  */
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public interface TestExecutionSummary {
 
 	/**

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -97,7 +97,7 @@
  * @see ExcludeEngines
  * @see UseTechnicalNames
  */
-@API(status = STABLE)
+@API(status = STABLE, since = "1.0")
 public class JUnitPlatform extends Runner implements Filterable {
 
 	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeClassNamePatterns.java
Patch:
@@ -42,7 +42,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface ExcludeClassNamePatterns {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeEngines.java
Patch:
@@ -39,7 +39,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface ExcludeEngines {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludePackages.java
Patch:
@@ -37,7 +37,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface ExcludePackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -45,7 +45,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface ExcludeTags {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeClassNamePatterns.java
Patch:
@@ -43,7 +43,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface IncludeClassNamePatterns {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeEngines.java
Patch:
@@ -39,7 +39,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface IncludeEngines {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludePackages.java
Patch:
@@ -37,7 +37,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface IncludePackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -45,7 +45,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface IncludeTags {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectClasses.java
Patch:
@@ -38,7 +38,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface SelectClasses {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectPackages.java
Patch:
@@ -38,7 +38,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface SelectPackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/UseTechnicalNames.java
Patch:
@@ -45,6 +45,6 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(status = MAINTAINED)
+@API(status = MAINTAINED, since = "1.0")
 public @interface UseTechnicalNames {
 }

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -55,7 +55,7 @@
 /**
  * @since 1.0
  */
-@API(status = EXPERIMENTAL)
+@API(status = EXPERIMENTAL, since = "1.0")
 public class JUnitPlatformProvider extends AbstractProvider {
 
 	// Parameter names processed to determine which @Tags should be executed.

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public final class VintageTestEngine implements TestEngine {
 
 	private static final Logger logger = LoggerFactory.getLogger(VintageTestEngine.class);

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class RunnerTestDescriptor extends VintageTestDescriptor {
 
 	private final Runner runner;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class VintageTestDescriptor extends AbstractTestDescriptor {
 
 	public static final String ENGINE_ID = "junit-vintage";

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/VintageDiscoverer.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class VintageDiscoverer {
 
 	private static final IsPotentialJUnit4TestClass isPotentialJUnit4TestClass = new IsPotentialJUnit4TestClass();

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class RunnerExecutor {
 
 	private final EngineExecutionListener engineExecutionListener;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdReader.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class UniqueIdReader implements Function<Description, Serializable> {
 
 	private final Logger logger;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdStringifier.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * @since 4.12
  */
-@API(status = INTERNAL)
+@API(status = INTERNAL, since = "4.12")
 public class UniqueIdStringifier implements Function<Serializable, String> {
 
 	static final Charset CHARSET = StandardCharsets.UTF_8;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -62,6 +62,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface AfterAll {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -58,6 +58,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface AfterEach {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assumptions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
@@ -38,7 +38,7 @@
  * @see TestAbortedException
  * @see Assertions
  */
-@API(Stable)
+@API(status = STABLE)
 public final class Assumptions {
 
 	///CLOVER:OFF

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -62,6 +62,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface BeforeAll {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -58,6 +58,6 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface BeforeEach {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -32,7 +32,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface Disabled {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DisplayName.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface DisplayName {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicContainer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class DynamicContainer extends DynamicNode {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicNode.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public abstract class DynamicNode {
 
 	private final String displayName;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/DynamicTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Spliterator.ORDERED;
 import static java.util.Spliterators.spliteratorUnknownSize;
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.Iterator;
 import java.util.function.Function;
@@ -44,7 +44,7 @@
  * @see TestFactory
  * @see Executable
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class DynamicTest extends DynamicNode {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -29,6 +29,6 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface Nested {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -53,7 +53,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 @TestTemplate
 public @interface RepeatedTest {
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepetitionInfo.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -33,7 +33,7 @@
  * @see RepeatedTest
  * @see TestInfo
  */
-@API(Stable)
+@API(status = STABLE)
 public interface RepetitionInfo {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -46,7 +46,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Repeatable(Tags.class)
-@API(Stable)
+@API(status = STABLE)
 public @interface Tag {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface Tags {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -47,7 +47,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 @Testable
 public @interface Test {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -52,7 +52,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @Testable
 public @interface TestFactory {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 import java.util.Optional;
@@ -31,7 +31,7 @@
  * @see Test
  * @see DisplayName
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestInfo {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.Map;
@@ -28,7 +28,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface TestReporter {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -57,7 +57,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Stable)
+@API(status = STABLE)
 @Testable
 public @interface TestTemplate {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -32,7 +32,7 @@
  * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface AfterAllCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -37,7 +37,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface AfterEachCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -36,7 +36,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface AfterTestExecutionCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -32,7 +32,7 @@
  * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface BeforeAllCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -35,7 +35,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface BeforeEachCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -36,7 +36,7 @@
  * @see AfterAllCallback
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface BeforeTestExecutionCallback extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Optional;
 
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class ConditionEvaluationResult {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExecutionCondition.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -29,7 +29,7 @@
  * @see org.junit.jupiter.api.Disabled
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface ExecutionCondition extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -49,7 +49,7 @@
 @Documented
 @Inherited
 @Repeatable(Extensions.class)
-@API(Stable)
+@API(status = STABLE)
 public @interface ExtendWith {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -22,6 +22,6 @@
  *
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface Extension {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionConfigurationException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
@@ -21,7 +21,7 @@
  *
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class ExtensionConfigurationException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -38,7 +38,7 @@
  * @see Store
  * @see Namespace
  */
-@API(Stable)
+@API(status = STABLE)
 public interface ExtensionContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContextException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
 import org.junit.platform.commons.JUnitException;
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class ExtensionContextException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@API(Stable)
+@API(status = STABLE)
 public @interface Extensions {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.reflect.Executable;
 import java.lang.reflect.Parameter;
@@ -33,7 +33,7 @@
  * @see java.lang.reflect.Method
  * @see java.lang.reflect.Constructor
  */
-@API(Stable)
+@API(status = STABLE)
 public interface ParameterContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolutionException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
@@ -22,7 +22,7 @@
  * @since 5.0
  * @see ParameterResolver
  */
-@API(Stable)
+@API(status = STABLE)
 public class ParameterResolutionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.reflect.Parameter;
 
@@ -37,7 +37,7 @@
  * @see #resolveParameter(ParameterContext, ExtensionContext)
  * @see ParameterContext
  */
-@API(Stable)
+@API(status = STABLE)
 public interface ParameterResolver extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -30,7 +30,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface TestExecutionExceptionHandler extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -27,7 +27,7 @@
  * @since 5.0
  * @see #postProcessTestInstance(Object, ExtensionContext)
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestInstancePostProcessor extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContext.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.api.extension;
 
 import static java.util.Collections.emptyList;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.List;
 
@@ -28,7 +28,7 @@
  * @see org.junit.jupiter.api.TestTemplate
  * @see TestTemplateInvocationContextProvider
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestTemplateInvocationContext {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.stream.Stream;
 
@@ -47,7 +47,7 @@
  * @see TestTemplateInvocationContext
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestTemplateInvocationContextProvider extends Extension {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -40,7 +40,7 @@
  * @see ThrowingConsumer
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface Executable {
 
 	void execute() throws Throwable;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingConsumer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -38,7 +38,7 @@
  * @see Executable
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface ThrowingConsumer<T> {
 
 	/**

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/ThrowingSupplier.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.function;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -39,7 +39,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface ThrowingSupplier<T> {
 
 	/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -19,7 +19,7 @@
  *
  * @since 5.0
  */
-@API(Stable)
+@API(status = STABLE)
 public final class Constants {
 
 	/**

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Optional;
 
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class JupiterTestEngine extends HierarchicalTestEngine<JupiterEngineExecutionContext> {
 
 	public static final String ENGINE_ID = "junit-jupiter";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -24,7 +24,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ClassExtensionContext extends AbstractExtensionContext<ClassTestDescriptor> {
 
 	private final ThrowableCollector throwableCollector;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeAllMethods;
 import static org.junit.jupiter.engine.descriptor.LifecycleMethodUtils.findBeforeEachMethods;
 import static org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils.getTestInstanceLifecycle;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -58,7 +58,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ClassTestDescriptor extends JupiterTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
@@ -25,7 +25,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class JupiterEngineDescriptor extends EngineDescriptor implements Node<JupiterEngineExecutionContext> {
 
 	public JupiterEngineDescriptor(UniqueId uniqueId) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class JupiterEngineExtensionContext extends AbstractExtensionContext<JupiterEngineDescriptor> {
 
 	public JupiterEngineExtensionContext(EngineExecutionListener engineExecutionListener,

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.platform.commons.util.AnnotationUtils.findRepeatableAnnotations;
 
@@ -47,7 +47,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public abstract class JupiterTestDescriptor extends AbstractTestDescriptor
 		implements Node<JupiterEngineExecutionContext> {
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
@@ -24,7 +24,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class MethodExtensionContext extends AbstractExtensionContext<TestMethodTestDescriptor> {
 
 	private final Object testInstance;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Constructor;
 import java.util.Optional;
@@ -36,7 +36,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class NestedClassTestDescriptor extends ClassTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.Iterator;
@@ -35,7 +35,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class TestFactoryTestDescriptor extends TestMethodTestDescriptor {
 
 	public static final String DYNAMIC_CONTAINER_SEGMENT_TYPE = "dynamic-container";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -54,7 +54,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class TestMethodTestDescriptor extends MethodBasedTestDescriptor {
 
 	private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 
@@ -27,7 +27,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class TestTemplateInvocationTestDescriptor extends TestMethodTestDescriptor {
 
 	public static final String SEGMENT_TYPE = "test-template-invocation";

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.engine.descriptor;
 
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -33,7 +33,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class TestTemplateTestDescriptor extends MethodBasedTestDescriptor {
 
 	public TestTemplateTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method templateMethod) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -38,7 +38,7 @@
  * @since 5.0
  * @see JavaElementsResolver
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class DiscoverySelectorResolver {
 
 	private static final IsScannableTestClass isScannableTestClass = new IsScannableTestClass();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsInnerClass.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsInnerClass implements Predicate<Class<?>> {
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
 
 import java.util.function.Predicate;
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsNestedTestClass implements Predicate<Class<?>> {
 
 	private static final IsInnerClass isInnerClass = new IsInnerClass();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsPotentialTestContainer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;
 import static org.junit.platform.commons.util.ReflectionUtils.isStatic;
 
@@ -24,7 +24,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsPotentialTestContainer implements Predicate<Class<?>> {
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;
 
 import java.util.function.Predicate;
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsScannableTestClass implements Predicate<Class<?>> {
 
 	private static final IsTestClassWithTests isTestClassWithTests = new IsTestClassWithTests();

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestFactoryMethod.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.TestFactory;
 import org.junit.platform.commons.meta.API;
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsTestFactoryMethod extends IsTestableMethod {
 
 	public IsTestFactoryMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.Test;
 import org.junit.platform.commons.meta.API;
@@ -20,7 +20,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsTestMethod extends IsTestableMethod {
 
 	public IsTestMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestTemplateMethod.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.TestTemplate;
 import org.junit.platform.commons.meta.API;
@@ -20,7 +20,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class IsTestTemplateMethod extends IsTestableMethod {
 
 	public IsTestTemplateMethod() {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
@@ -25,7 +25,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Internal)
+@API(status = INTERNAL)
 public interface AfterEachMethodAdapter extends Extension {
 
 	void invokeAfterEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
@@ -25,7 +25,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Internal)
+@API(status = INTERNAL)
 public interface BeforeEachMethodAdapter extends Extension {
 
 	void invokeBeforeEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluator.java
Patch:
@@ -13,7 +13,7 @@
 import static java.lang.String.format;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_ALL_CONDITIONS_PATTERN;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Predicate;
 import java.util.regex.Matcher;
@@ -36,7 +36,7 @@
  * @since 5.0
  * @see ExecutionCondition
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ConditionEvaluator {
 
 	private static final Logger logger = LoggerFactory.getLogger(ConditionEvaluator.class);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExecutableInvoker.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
 import java.lang.reflect.Constructor;
@@ -41,7 +41,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExecutableInvoker {
 
 	private static final Logger logger = LoggerFactory.getLogger(ExecutableInvoker.class);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.getWrapperType;
 import static org.junit.platform.commons.util.ReflectionUtils.isAssignableTo;
 
@@ -33,7 +33,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExtensionValuesStore {
 
 	private final ExtensionValuesStore parentStore;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/JupiterEngineExecutionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
@@ -23,7 +23,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class JupiterEngineExecutionContext implements EngineExecutionContext {
 
 	private final State state;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/NamespaceAwareStore.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class NamespaceAwareStore implements Store {
 
 	private final ExtensionValuesStore valuesStore;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Optional;
 
@@ -21,7 +21,7 @@
  * @since 5.0
  */
 @FunctionalInterface
-@API(Internal)
+@API(status = INTERNAL)
 public interface TestInstanceProvider {
 
 	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ThrowableCollector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.api.function.Executable;
 import org.junit.platform.commons.meta.API;
@@ -23,7 +23,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ThrowableCollector {
 
 	private Throwable throwable;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Stream.concat;
 import static org.junit.jupiter.engine.Constants.EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -47,7 +47,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExtensionRegistry {
 
 	private static final Logger logger = LoggerFactory.getLogger(ExtensionRegistry.class);

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/EnableRuleMigrationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -38,7 +38,7 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ExtendWith(ExternalResourceSupport.class)
 @ExtendWith(VerifierSupport.class)
 @ExtendWith(ExpectedExceptionSupport.class)

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExpectedExceptionSupport.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.lang.Boolean.FALSE;
 import static java.lang.Boolean.TRUE;
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
@@ -43,7 +43,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class ExpectedExceptionSupport implements AfterEachCallback, TestExecutionExceptionHandler {
 
 	private static final String EXCEPTION_WAS_HANDLED = "exceptionWasHandled";

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
@@ -42,7 +42,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCallback {
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = ExternalResourceAdapter::new;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.function.Function;
 
@@ -41,7 +41,7 @@
  * @see org.junit.rules.TestRule
  * @see org.junit.Rule
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class VerifierSupport implements AfterEachCallback {
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = VerifierAdapter::new;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/AbstractTestRuleAdapter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethod;
 import static org.junit.platform.commons.util.ReflectionUtils.invokeMethod;
 
@@ -26,7 +26,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public abstract class AbstractTestRuleAdapter implements GenericBeforeAndAfterAdvice {
 
 	private final TestRule target;

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExpectedExceptionAdapter.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
 import static java.lang.Boolean.TRUE;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.meta.API;
@@ -20,7 +20,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExpectedExceptionAdapter extends AbstractTestRuleAdapter {
 
 	public ExpectedExceptionAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/ExternalResourceAdapter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.meta.API;
@@ -19,7 +19,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExternalResourceAdapter extends AbstractTestRuleAdapter {
 
 	public ExternalResourceAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/GenericBeforeAndAfterAdvice.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public interface GenericBeforeAndAfterAdvice {
 
 	default void before() {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/VerifierAdapter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules.adapter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.meta.API;
@@ -19,7 +19,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class VerifierAdapter extends AbstractTestRuleAdapter {
 
 	public VerifierAdapter(TestRuleAnnotatedMember annotatedMember) {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMember.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.rules.TestRule;
 
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public interface TestRuleAnnotatedMember {
 
 	TestRule getTestRule();

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/member/TestRuleAnnotatedMemberFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.migrationsupport.rules.member;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Member;
@@ -22,7 +22,7 @@
 /**
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class TestRuleAnnotatedMemberFactory {
 
 	///CLOVER:OFF

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -60,7 +60,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @TestTemplate
 @ExtendWith(ParameterizedTestExtension.class)
 public @interface ParameterizedTest {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
@@ -23,7 +23,7 @@
  * @since 5.0
  * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class ArgumentConversionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.platform.commons.meta.API;
@@ -35,7 +35,7 @@
  * @see org.junit.jupiter.params.ParameterizedTest
  * @see org.junit.jupiter.params.converter.ConvertWith
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public interface ArgumentConverter {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -35,7 +35,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public @interface ConvertWith {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/DefaultArgumentConverter.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.time.Instant;
 import java.time.LocalDate;
@@ -50,7 +50,7 @@
  * @since 5.0
  * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class DefaultArgumentConverter extends SimpleArgumentConverter {
 
 	public static final DefaultArgumentConverter INSTANCE = new DefaultArgumentConverter();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -33,7 +33,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ConvertWith(JavaTimeArgumentConverter.class)
 public @interface JavaTimeConversionPattern {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.converter;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.platform.commons.meta.API;
@@ -22,7 +22,7 @@
  * @since 5.0
  * @see ArgumentConverter
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public abstract class SimpleArgumentConverter implements ArgumentConverter {
 
 	@Override

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
@@ -27,7 +27,7 @@
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.ArgumentsProvider
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public interface Arguments {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.util.stream.Stream;
 
@@ -32,7 +32,7 @@
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.Arguments
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public interface ArgumentsProvider {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Repeatable(ArgumentsSources.class)
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public @interface ArgumentsSource {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public @interface ArgumentsSources {
 
 	/**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ArgumentsSource(CsvFileArgumentsProvider.class)
 public @interface CsvFileSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +34,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ArgumentsSource(CsvArgumentsProvider.class)
 public @interface CsvSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -46,7 +46,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ArgumentsSource(EnumArgumentsProvider.class)
 public @interface EnumSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -39,7 +39,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ArgumentsSource(MethodArgumentsProvider.class)
 public @interface MethodSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.provider;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -38,7 +38,7 @@
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 @ArgumentsSource(ValueArgumentsProvider.class)
 public @interface ValueSource {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 
 import java.lang.annotation.Annotation;
 import java.util.function.Consumer;
@@ -28,6 +28,6 @@
  *
  * @since 5.0
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public interface AnnotationConsumer<A extends Annotation> extends Consumer<A> {
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumerInitializer.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.params.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
 
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class AnnotationConsumerInitializer {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.meta.API;
 
@@ -20,7 +20,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class JUnitException extends RuntimeException {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/annotation/Testable.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.annotation;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -74,6 +74,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@API(Stable)
+@API(status = STABLE)
 public @interface Testable {
 }

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/Logger.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 
@@ -22,7 +22,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public interface Logger {
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/logging/LoggerFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.logging;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Supplier;
 import java.util.logging.Level;
@@ -24,7 +24,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class LoggerFactory {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/AnnotationSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public final class AnnotationSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/HierarchyTraversalMode.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import org.junit.platform.commons.meta.API;
 
@@ -22,7 +22,7 @@
  * @see #TOP_DOWN
  * @see #BOTTOM_UP
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public enum HierarchyTraversalMode {
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.reflect.Method;
 import java.net.URI;
@@ -27,7 +27,7 @@
  *
  * @since 1.0
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public final class ReflectionSupport {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.util;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.lang.annotation.Annotation;
@@ -54,7 +54,7 @@
  * @see AnnotatedElement
  * @see org.junit.platform.commons.support.AnnotationSupport
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class AnnotationUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/BlacklistedExceptions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Collections;
 import java.util.List;
@@ -36,7 +36,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class BlacklistedExceptions {
 
 	private static final List<Class<? extends Throwable>> blacklist = Collections.singletonList(OutOfMemoryError.class);

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassLoaderUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.net.URL;
 import java.security.CodeSource;
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ClassLoaderUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassUtils.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.joining;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Function;
 
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ClassUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -15,7 +15,7 @@
 import static java.util.stream.Collectors.collectingAndThen;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;
@@ -42,7 +42,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class CollectionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ExceptionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class FunctionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PackageUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.File;
 import java.net.URL;
@@ -38,7 +38,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class PackageUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PreconditionViolationException.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
@@ -21,7 +21,7 @@
  * @since 1.0
  * @see Preconditions
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class PreconditionViolationException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -33,7 +33,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class Preconditions {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.BOTTOM_UP;
 import static org.junit.platform.commons.util.ReflectionUtils.HierarchyTraversalMode.TOP_DOWN;
@@ -65,7 +65,7 @@
  * @since 1.0
  * @see org.junit.platform.commons.support.ReflectionSupport
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ReflectionUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.commons.util;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Arrays;
 
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class StringUtils {
 
 	///CLOVER:OFF

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.util;
 
 import static java.lang.String.join;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -30,7 +30,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ToStringBuilder {
 
 	private final Class<?> type;

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncherExecutionResult.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Optional;
 
@@ -20,7 +20,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ConsoleLauncherExecutionResult {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.emptyList;
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
 import java.net.URI;
@@ -31,7 +31,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class CommandLineOptions {
 
 	static final Details DEFAULT_DETAILS = Details.TREE;

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.Writer;
 
@@ -19,7 +19,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public interface CommandLineOptionsParser {
 
 	CommandLineOptions parse(String... arguments);

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Details.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.meta.API;
 
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public enum Details {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -29,7 +29,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class JOptSimpleCommandLineOptionsParser implements CommandLineOptionsParser {
 
 	@Override

File: junit-platform-console/src/main/java/org/junit/platform/console/options/Theme.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.options;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
@@ -21,7 +21,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public enum Theme {
 
 	/**

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.console.tasks;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.PrintWriter;
 import java.net.URL;
@@ -37,7 +37,7 @@
 /**
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ConsoleTestExecutor {
 
 	private final CommandLineOptions options;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Optional;
 
@@ -28,7 +28,7 @@
  * @see ExecutionRequest
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface ConfigurationParameters {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -25,6 +25,6 @@
  * @see EngineDiscoveryRequest
  * @see TestEngine
  */
-@API(Stable)
+@API(status = STABLE)
 public interface DiscoveryFilter<T> extends Filter<T> {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -22,6 +22,6 @@
  * @since 1.0
  * @see EngineDiscoveryRequest
  */
-@API(Stable)
+@API(status = STABLE)
 public interface DiscoverySelector {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.List;
 
@@ -36,7 +36,7 @@
  * @see ConfigurationParameters
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface EngineDiscoveryRequest {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineExecutionListener.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.TestExecutionResult.Status;
@@ -28,7 +28,7 @@
  * @see TestEngine
  * @see ExecutionRequest
  */
-@API(Stable)
+@API(status = STABLE)
 public interface EngineExecutionListener {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.engine;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.CompositeFilter.alwaysIncluded;
 
@@ -36,7 +36,7 @@
  * @see DiscoveryFilter
  */
 @FunctionalInterface
-@API(Stable)
+@API(status = STABLE)
 public interface Filter<T> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/FilterResult.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Optional;
 import java.util.function.Supplier;
@@ -23,7 +23,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class FilterResult {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
@@ -26,7 +26,7 @@
  * @see TestEngine
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestDescriptor {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Optional;
 
@@ -43,7 +43,7 @@
  * @see org.junit.platform.commons.annotation.Testable
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestEngine {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestExecutionResult.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.engine.TestExecutionResult.Status.ABORTED;
 import static org.junit.platform.engine.TestExecutionResult.Status.FAILED;
 import static org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL;
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class TestExecutionResult {
 
 	private static final TestExecutionResult SUCCESSFUL_RESULT = new TestExecutionResult(SUCCESSFUL, null);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.Serializable;
 
@@ -29,6 +29,6 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestSource extends Serializable {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
@@ -28,7 +28,7 @@
  * @see #isValid(String)
  * @see #create(String)
  */
-@API(Stable)
+@API(status = STABLE)
 public final class TestTag implements Serializable {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.DiscoveryFilter;
@@ -21,7 +21,7 @@
  * @since 1.0
  * @see #includeClassNamePatterns
  */
-@API(Stable)
+@API(status = STABLE)
 public interface ClassNameFilter extends DiscoveryFilter<String> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
@@ -35,7 +35,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.ClassSource
  */
-@API(Stable)
+@API(status = STABLE)
 public class ClassSelector implements DiscoverySelector {
 
 	private final String className;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ToStringBuilder;
@@ -32,7 +32,7 @@
  * @see ClasspathRootSelector
  * @see #getClasspathResourceName()
  */
-@API(Stable)
+@API(status = STABLE)
 public class ClasspathResourceSelector implements DiscoverySelector {
 
 	private final String classpathResourceName;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.net.URI;
 
@@ -34,7 +34,7 @@
  * @see ClasspathResourceSelector
  * @see Thread#getContextClassLoader()
  */
-@API(Stable)
+@API(status = STABLE)
 public class ClasspathRootSelector implements DiscoverySelector {
 
 	private final URI classpathRoot;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DirectorySelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
@@ -34,7 +34,7 @@
  * @see #getPath()
  * @see #getRawPath()
  */
-@API(Stable)
+@API(status = STABLE)
 public class DirectorySelector implements DiscoverySelector {
 
 	private final String path;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.commons.util.CollectionUtils.toUnmodifiableList;
 
 import java.io.File;
@@ -43,7 +43,7 @@
  * @see MethodSelector
  * @see PackageSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public final class DiscoverySelectors {
 
 	private static final Pattern fullyQualifiedMethodNamePattern = Pattern.compile("([^#]+)#([^(]+)(?:\\((.*)\\))?");

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.File;
 import java.nio.file.FileSystem;
@@ -34,7 +34,7 @@
  * @see #getPath()
  * @see #getRawPath()
  */
-@API(Stable)
+@API(status = STABLE)
 public class FileSelector implements DiscoverySelector {
 
 	private final String path;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.lang.reflect.Method;
 
@@ -43,7 +43,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.MethodSource
  */
-@API(Stable)
+@API(status = STABLE)
 public class MethodSelector implements DiscoverySelector {
 
 	private final String className;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageNameFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.List;
 
@@ -23,7 +23,7 @@
  * @since 1.0
  * @see #includePackageNames
  */
-@API(Stable)
+@API(status = STABLE)
 public interface PackageNameFilter extends DiscoveryFilter<String> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ToStringBuilder;
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.support.descriptor.PackageSource
  */
-@API(Stable)
+@API(status = STABLE)
 public class PackageSelector implements DiscoverySelector {
 
 	private final String packageName;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UniqueIdSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ToStringBuilder;
@@ -24,7 +24,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class UniqueIdSelector implements DiscoverySelector {
 
 	private final UniqueId uniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UriSelector.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.net.URI;
 
@@ -28,7 +28,7 @@
  * @see DirectorySelector
  * @see org.junit.platform.engine.support.descriptor.UriSource
  */
-@API(Stable)
+@API(status = STABLE)
 public class UriSelector implements DiscoverySelector {
 
 	private final URI uri;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.reporting;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.time.LocalDateTime;
 import java.util.Collections;
@@ -29,7 +29,7 @@
  * @see #from(Map)
  * @see #from(String, String)
  */
-@API(Stable)
+@API(status = STABLE)
 public final class ReportEntry {
 
 	private final LocalDateTime timestamp = LocalDateTime.now();

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.engine.support.descriptor;
 
 import static java.util.Collections.emptySet;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Collections;
 import java.util.LinkedHashSet;
@@ -35,7 +35,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public abstract class AbstractTestDescriptor implements TestDescriptor {
 
 	private final UniqueId uniqueId;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClassSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -30,7 +30,7 @@
  * @since 1.0
  * @see ClassSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class ClassSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.ClasspathResourceSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class ClasspathResourceSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -29,7 +29,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class CompositeTestSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DirectorySource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.DirectorySelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class DirectorySource implements FileSystemSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.UniqueId;
@@ -21,7 +21,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class EngineDescriptor extends AbstractTestDescriptor {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.Serializable;
 import java.util.Objects;
@@ -26,7 +26,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public class FilePosition implements Serializable {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.File;
 import java.io.IOException;
@@ -30,7 +30,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.FileSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class FileSource implements FileSystemSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.io.File;
 
@@ -25,7 +25,7 @@
  *
  * @since 1.0
  */
-@API(Stable)
+@API(status = STABLE)
 public interface FileSystemSource extends UriSource {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/MethodSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.commons.util.ClassUtils.nullSafeToString;
 
 import java.lang.reflect.Method;
@@ -31,7 +31,7 @@
  * @since 1.0
  * @see MethodSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class MethodSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/PackageSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.Objects;
 
@@ -29,7 +29,7 @@
  * @since 1.0
  * @see PackageSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public class PackageSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/UriSource.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.net.URI;
 
@@ -23,7 +23,7 @@
  * @since 1.0
  * @see org.junit.platform.engine.discovery.UriSelector
  */
-@API(Stable)
+@API(status = STABLE)
 public interface UriSource extends TestSource {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ClasspathScanningSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.composeFilters;
 
 import java.util.ArrayList;
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class ClasspathScanningSupport {
 
 	///CLOVER:OFF

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ExclusionReasonConsumingFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.filter;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.util.Optional;
 import java.util.function.BiConsumer;
@@ -26,7 +26,7 @@
  *
  * @since 1.0
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class ExclusionReasonConsumingFilter<T> implements Filter<T> {
 
 	private final Filter<T> filter;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import org.junit.platform.commons.meta.API;
 
@@ -21,6 +21,6 @@
  * @since 1.0
  * @see HierarchicalTestEngine
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public interface EngineExecutionContext {
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.ExecutionRequest;
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see Node
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public abstract class HierarchicalTestEngine<C extends EngineExecutionContext> implements TestEngine {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.util.Optional;
 
@@ -26,7 +26,7 @@
  * @since 1.0
  * @see HierarchicalTestEngine
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public interface Node<C extends EngineExecutionContext> {
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 import static org.junit.platform.commons.util.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.platform.engine.TestExecutionResult.aborted;
 import static org.junit.platform.engine.TestExecutionResult.failed;
@@ -27,7 +27,7 @@
  * @since 1.0
  * @see #executeSafely(Executable)
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public class SingleTestExecutor {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.launcher;
 
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.engine.FilterResult.includedIf;
 
 import java.util.Arrays;
@@ -38,7 +38,7 @@
  * @see #excludeEngines(String...)
  * @see LauncherDiscoveryRequest
  */
-@API(Stable)
+@API(status = STABLE)
 public class EngineFilter implements Filter<TestEngine> {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 
@@ -53,7 +53,7 @@
  * @see org.junit.platform.launcher.core.LauncherFactory
  * @see org.junit.platform.engine.TestEngine
  */
-@API(Stable)
+@API(status = STABLE)
 public interface Launcher {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/LauncherDiscoveryRequest.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.List;
 
@@ -53,7 +53,7 @@
  * @see #getEngineFilters()
  * @see #getPostDiscoveryFilters()
  */
-@API(Stable)
+@API(status = STABLE)
 public interface LauncherDiscoveryRequest extends EngineDiscoveryRequest {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/PostDiscoveryFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.Filter;
@@ -31,6 +31,6 @@
  * @see LauncherDiscoveryRequest
  * @see TestEngine
  */
-@API(Stable)
+@API(status = STABLE)
 public interface PostDiscoveryFilter extends Filter<TestDescriptor> {
 }

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.List;
 
@@ -30,7 +30,7 @@
  * @see #includeTags(String...)
  * @see #excludeTags(String...)
  */
-@API(Stable)
+@API(status = STABLE)
 public final class TagFilter {
 
 	///CLOVER:OFF

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.TestExecutionResult;
@@ -43,7 +43,7 @@
  * @see TestPlan
  * @see TestIdentifier
  */
-@API(Stable)
+@API(status = STABLE)
 public interface TestExecutionListener {
 	///CLOVER:OFF
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -76,7 +76,7 @@
  * @see org.junit.platform.launcher.EngineFilter
  * @see org.junit.platform.launcher.TagFilter
  */
-@API(Stable)
+@API(status = STABLE)
 public final class LauncherDiscoveryRequestBuilder {
 
 	private List<DiscoverySelector> selectors = new ArrayList<>();

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher.core;
 
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.PreconditionViolationException;
@@ -37,7 +37,7 @@
  * @since 1.0
  * @see Launcher
  */
-@API(Stable)
+@API(status = STABLE)
 public class LauncherFactory {
 
 	///CLOVER:OFF

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LoggingListener.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.util.function.BiConsumer;
 import java.util.function.Supplier;
@@ -34,7 +34,7 @@
  * @see #forJavaUtilLogging(Level)
  * @see LoggingListener#LoggingListener(BiConsumer)
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public class LoggingListener implements TestExecutionListener {
 
 	/**

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.launcher.listeners;
 
 import static java.util.stream.Stream.concat;
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.util.stream.Stream;
 
@@ -29,7 +29,7 @@
  * @since 1.0
  * @see #getSummary()
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public class SummaryGeneratingListener implements TestExecutionListener {
 
 	private TestPlan testPlan;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.launcher.listeners;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.io.PrintWriter;
 import java.util.List;
@@ -24,7 +24,7 @@
  * @since 1.0
  * @see SummaryGeneratingListener
  */
-@API(Maintained)
+@API(status = MAINTAINED)
 public interface TestExecutionSummary {
 
 	/**

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Status.STABLE;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;
 import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
@@ -97,7 +97,7 @@
  * @see ExcludeEngines
  * @see UseTechnicalNames
  */
-@API(Stable)
+@API(status = STABLE)
 public class JUnitPlatform extends Runner implements Filterable {
 
 	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -42,7 +42,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface ExcludeClassNamePatterns {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -39,7 +39,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface ExcludeEngines {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface ExcludePackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -45,7 +45,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface ExcludeTags {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeClassNamePatterns.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -43,7 +43,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface IncludeClassNamePatterns {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeEngines.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -39,7 +39,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface IncludeEngines {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludePackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -37,7 +37,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface IncludePackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -45,7 +45,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface IncludeTags {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectClasses.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -38,7 +38,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface SelectClasses {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/SelectPackages.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -38,7 +38,7 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface SelectPackages {
 
 	/**

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/UseTechnicalNames.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.suite.api;
 
-import static org.junit.platform.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Status.MAINTAINED;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -45,6 +45,6 @@
 @Target(ElementType.TYPE)
 @Inherited
 @Documented
-@API(Maintained)
+@API(status = MAINTAINED)
 public @interface UseTechnicalNames {
 }

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -17,7 +17,7 @@
 package org.junit.platform.surefire.provider;
 
 import static java.util.Collections.emptyMap;
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Status.EXPERIMENTAL;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
@@ -55,7 +55,7 @@
 /**
  * @since 1.0
  */
-@API(Experimental)
+@API(status = EXPERIMENTAL)
 public class JUnitPlatformProvider extends AbstractProvider {
 
 	// Parameter names processed to determine which @Tags should be executed.

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.successful;
 import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.ENGINE_ID;
 
@@ -34,7 +34,7 @@
  *
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public final class VintageTestEngine implements TestEngine {
 
 	private static final Logger logger = LoggerFactory.getLogger(VintageTestEngine.class);

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.descriptor;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.UniqueId;
@@ -21,7 +21,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class RunnerTestDescriptor extends VintageTestDescriptor {
 
 	private final Runner runner;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.function.Predicate.isEqual;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.commons.util.FunctionUtils.where;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
@@ -38,7 +38,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class VintageTestDescriptor extends AbstractTestDescriptor {
 
 	public static final String ENGINE_ID = "junit-vintage";

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/VintageDiscoverer.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.discovery;
 
 import static java.util.Arrays.asList;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.engine.Filter.adaptFilter;
 import static org.junit.platform.engine.Filter.composeFilters;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
@@ -33,7 +33,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class VintageDiscoverer {
 
 	private static final IsPotentialJUnit4TestClass isPotentialJUnit4TestClass = new IsPotentialJUnit4TestClass();

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.execution;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 
 import org.junit.platform.commons.logging.Logger;
@@ -23,7 +23,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class RunnerExecutor {
 
 	private final EngineExecutionListener engineExecutionListener;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdReader.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.support;
 
 import static java.lang.String.format;
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 import static org.junit.platform.commons.util.ReflectionUtils.readFieldValue;
 
 import java.io.Serializable;
@@ -25,7 +25,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class UniqueIdReader implements Function<Description, Serializable> {
 
 	private final Logger logger;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdStringifier.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.support;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Status.INTERNAL;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -28,7 +28,7 @@
 /**
  * @since 4.12
  */
-@API(Internal)
+@API(status = INTERNAL)
 public class UniqueIdStringifier implements Function<Serializable, String> {
 
 	static final Charset CHARSET = StandardCharsets.UTF_8;

File: platform-tests/src/test/java/org/junit/api/tools/ApiReportWriter.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.PrintWriter;
 import java.util.EnumSet;
 
-import org.junit.platform.commons.meta.API.Usage;
+import org.junit.platform.commons.meta.API.Status;
 
 /**
  * @since 1.0
@@ -22,6 +22,6 @@ interface ApiReportWriter {
 
 	void printReportHeader(PrintWriter out);
 
-	void printDeclarationInfo(PrintWriter out, EnumSet<Usage> usages);
+	void printDeclarationInfo(PrintWriter out, EnumSet<Status> statuses);
 
 }

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -16,9 +16,10 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.ServiceLoader;
-import java.util.logging.Logger;
 import java.util.stream.Stream;
 
+import org.junit.platform.commons.logging.Logger;
+import org.junit.platform.commons.logging.LoggerFactory;
 import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.commons.util.CollectionUtils;
 import org.junit.platform.engine.TestEngine;
@@ -28,7 +29,7 @@
  */
 class ServiceLoaderTestEngineRegistry {
 
-	private static final Logger logger = Logger.getLogger(ServiceLoaderTestEngineRegistry.class.getName());
+	private static final Logger logger = LoggerFactory.getLogger(ServiceLoaderTestEngineRegistry.class);
 
 	public Iterable<TestEngine> loadTestEngines() {
 		Iterable<TestEngine> testEngines = ServiceLoader.load(TestEngine.class,

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestExecutionListenerRegistry.java
Patch:
@@ -14,8 +14,9 @@
 import static java.util.stream.StreamSupport.stream;
 
 import java.util.ServiceLoader;
-import java.util.logging.Logger;
 
+import org.junit.platform.commons.logging.Logger;
+import org.junit.platform.commons.logging.LoggerFactory;
 import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.launcher.TestExecutionListener;
 
@@ -24,7 +25,7 @@
  */
 class ServiceLoaderTestExecutionListenerRegistry {
 
-	private static final Logger logger = Logger.getLogger(ServiceLoaderTestExecutionListenerRegistry.class.getName());
+	private static final Logger logger = LoggerFactory.getLogger(ServiceLoaderTestExecutionListenerRegistry.class);
 
 	Iterable<TestExecutionListener> loadListeners() {
 		Iterable<TestExecutionListener> listeners = ServiceLoader.load(TestExecutionListener.class,

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -15,8 +15,9 @@
 import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.ENGINE_ID;
 
 import java.util.Optional;
-import java.util.logging.Logger;
 
+import org.junit.platform.commons.logging.Logger;
+import org.junit.platform.commons.logging.LoggerFactory;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.EngineExecutionListener;
@@ -36,7 +37,7 @@
 @API(Internal)
 public final class VintageTestEngine implements TestEngine {
 
-	private static final Logger logger = Logger.getLogger(VintageTestEngine.class.getName());
+	private static final Logger logger = LoggerFactory.getLogger(VintageTestEngine.class);
 
 	@Override
 	public String getId() {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassRequestResolver.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.function.IntFunction;
-import java.util.logging.Logger;
 
+import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.engine.UniqueId;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
@@ -68,7 +68,7 @@ private RunnerTestDescriptor determineRunnerTestDescriptor(Class<?> testClass, R
 				runnerTestDescriptor = createCompleteRunnerTestDescriptor(testClass, filteredRunner, engineId);
 			}
 			else {
-				logger.warning(() -> "Runner " + runner.getClass().getName() //
+				logger.warn(() -> "Runner " + runner.getClass().getName() //
 						+ " (used on " + testClass.getName() + ") does not support filtering" //
 						+ " and will therefore be run completely.");
 			}

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/VintageDiscoverer.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
-import java.util.logging.Logger;
 
+import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.Filter;
@@ -81,7 +81,7 @@ private Predicate<Class<?>> createTestClassPredicate(EngineDiscoveryRequest disc
 		List<ClassNameFilter> allClassNameFilters = discoveryRequest.getFiltersByType(ClassNameFilter.class);
 		Filter<Class<?>> adaptedFilter = adaptFilter(composeFilters(allClassNameFilters), Class::getName);
 		Filter<Class<?>> classFilter = new ExclusionReasonConsumingFilter<>(adaptedFilter,
-			(testClass, reason) -> logger.fine(() -> String.format("Class %s was excluded by a class filter: %s",
+			(testClass, reason) -> logger.debug(() -> String.format("Class %s was excluded by a class filter: %s",
 				testClass.getName(), reason.orElse("<unknown reason>"))));
 		return classFilter.toPredicate().and(isPotentialJUnit4TestClass);
 	}

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunListenerAdapter.java
Patch:
@@ -14,9 +14,9 @@
 
 import java.util.Optional;
 import java.util.function.Function;
-import java.util.logging.Logger;
 
 import org.junit.Ignore;
+import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestExecutionResult;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -13,8 +13,7 @@
 import static org.junit.platform.commons.meta.API.Usage.Internal;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 
-import java.util.logging.Logger;
-
+import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestExecutionResult;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/support/UniqueIdReader.java
Patch:
@@ -17,8 +17,8 @@
 import java.io.Serializable;
 import java.util.Optional;
 import java.util.function.Function;
-import java.util.logging.Logger;
 
+import org.junit.platform.commons.logging.Logger;
 import org.junit.platform.commons.meta.API;
 import org.junit.runner.Description;
 
@@ -45,7 +45,7 @@ public UniqueIdReader(Logger logger) {
 	public Serializable apply(Description description) {
 		Optional<Object> result = readFieldValue(Description.class, fieldName, description);
 		return result.map(Serializable.class::cast).orElseGet(() -> {
-			logger.warning(() -> format("Could not read unique id for Description, using display name instead: %s",
+			logger.warn(() -> format("Could not read unique id for Description, using display name instead: %s",
 				description.toString()));
 			return description.getDisplayName();
 		});

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -78,7 +78,7 @@ protected ClassTestDescriptor(UniqueId uniqueId, Function<Class<?>, String> defa
 			Class<?> testClass) {
 
 		super(uniqueId, determineDisplayName(Preconditions.notNull(testClass, "Class must not be null"),
-			defaultDisplayNameGenerator), new ClassSource(testClass));
+			defaultDisplayNameGenerator), ClassSource.from(testClass));
 
 		this.testClass = testClass;
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestDescriptor.java
Patch:
@@ -34,7 +34,7 @@ abstract class MethodBasedTestDescriptor extends JupiterTestDescriptor {
 	}
 
 	MethodBasedTestDescriptor(UniqueId uniqueId, String displayName, Class<?> testClass, Method testMethod) {
-		super(uniqueId, displayName, new MethodSource(Preconditions.notNull(testMethod, "Method must not be null")));
+		super(uniqueId, displayName, MethodSource.from(Preconditions.notNull(testMethod, "Method must not be null")));
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -27,7 +27,7 @@ public class RunnerTestDescriptor extends VintageTestDescriptor {
 	private final Runner runner;
 
 	public RunnerTestDescriptor(UniqueId uniqueId, Class<?> testClass, Runner runner) {
-		super(uniqueId, runner.getDescription(), testClass.getName(), new ClassSource(testClass));
+		super(uniqueId, runner.getDescription(), testClass.getName(), ClassSource.from(testClass));
 		this.runner = runner;
 	}
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/VintageTestDescriptor.java
Patch:
@@ -107,7 +107,7 @@ private static TestSource toTestSource(Description description) {
 					return methodSource;
 				}
 			}
-			return new ClassSource(testClass);
+			return ClassSource.from(testClass);
 		}
 		return null;
 	}
@@ -119,7 +119,7 @@ private static MethodSource toMethodSource(Class<?> testClass, String methodName
 		}
 		else {
 			List<Method> methods = findMethods(testClass, where(Method::getName, isEqual(methodName)));
-			return (methods.size() == 1) ? new MethodSource(getOnlyElement(methods)) : null;
+			return (methods.size() == 1) ? MethodSource.from(getOnlyElement(methods)) : null;
 		}
 	}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/AbstractTestSourceTests.java
Patch:
@@ -20,13 +20,14 @@
 import org.junit.platform.engine.TestSource;
 
 /**
- * Abstract base class for unit tests involving {@link TestSource TestSources}.
+ * Abstract base class for unit tests involving {@link TestSource TestSources}
+ * and {@link FilePosition FilePositions}.
  *
  * @since 1.0
  */
 abstract class AbstractTestSourceTests {
 
-	protected void assertEqualsAndHashCode(TestSource equal1, TestSource equal2, TestSource different) {
+	protected <T> void assertEqualsAndHashCode(T equal1, T equal2, T different) {
 		assertNotNull(equal1);
 		assertNotNull(equal2);
 		assertNotNull(different);

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoClassTestDescriptor.java
Patch:
@@ -33,7 +33,7 @@ public class DemoClassTestDescriptor extends AbstractTestDescriptor {
 
 	public DemoClassTestDescriptor(UniqueId uniqueId, Class<?> testClass) {
 		super(uniqueId, Preconditions.notNull(testClass, "Class must not be null").getSimpleName(),
-			new ClassSource(testClass));
+			ClassSource.from(testClass));
 		this.testClass = testClass;
 	}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoMethodTestDescriptor.java
Patch:
@@ -38,7 +38,7 @@ public DemoMethodTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method te
 		super(uniqueId,
 			String.format("%s(%s)", Preconditions.notNull(testMethod, "Method must not be null").getName(),
 				ClassUtils.nullSafeToString(Class::getSimpleName, testMethod.getParameterTypes())),
-			new MethodSource(testMethod));
+			MethodSource.from(testMethod));
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalTestEngine.java
Patch:
@@ -51,7 +51,7 @@ public DemoHierarchicalTestDescriptor addTest(String uniqueName, Runnable execut
 
 	public DemoHierarchicalTestDescriptor addTest(Method testMethod, Runnable executeBlock) {
 		UniqueId uniqueId = engineDescriptor.getUniqueId().append("test", testMethod.getName());
-		MethodSource source = new MethodSource(testMethod);
+		MethodSource source = MethodSource.from(testMethod);
 		DemoHierarchicalTestDescriptor child = new DemoHierarchicalTestDescriptor(uniqueId, testMethod.getName(),
 			source, executeBlock);
 		engineDescriptor.addChild(child);

File: platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
Patch:
@@ -56,13 +56,13 @@ void inheritsTypeFromDescriptor() {
 	@Test
 	void serialization() throws Exception {
 		TestIdentifier identifier = serializeAndDeserialize(//
-			new TestIdentifier("uniqueId", "displayName", new ClassSource(TestIdentifierTests.class),
+			new TestIdentifier("uniqueId", "displayName", ClassSource.from(TestIdentifierTests.class),
 				singleton(TestTag.create("aTag")), TestDescriptor.Type.TEST, "parentId", "reportingName"));
 
 		assertEquals("uniqueId", identifier.getUniqueId());
 		assertEquals("displayName", identifier.getDisplayName());
 		assertEquals("reportingName", identifier.getLegacyReportingName());
-		assertThat(identifier.getSource()).contains(new ClassSource(TestIdentifierTests.class));
+		assertThat(identifier.getSource()).contains(ClassSource.from(TestIdentifierTests.class));
 		assertEquals(singleton(TestTag.create("aTag")), identifier.getTags());
 		assertEquals(TestDescriptor.Type.TEST, identifier.getType());
 		assertTrue(identifier.isTest());

File: platform-tests/src/test/java/org/junit/platform/launcher/listener/SummaryGenerationTests.java
Patch:
@@ -134,9 +134,10 @@ void reportingCorrectCounts() throws Exception {
 	void canGetListOfFailures() {
 		RuntimeException failedException = new RuntimeException("Pow!");
 		TestDescriptorStub testDescriptor = new TestDescriptorStub(UniqueId.root("root", "1"), "failingTest") {
+
 			@Override
 			public Optional<TestSource> getSource() {
-				return Optional.of(new ClassSource(Object.class));
+				return Optional.of(ClassSource.from(Object.class));
 			}
 		};
 		TestIdentifier failingTest = TestIdentifier.from(testDescriptor);
@@ -158,7 +159,7 @@ void reportingCorrectFailures() throws Exception {
 
 			@Override
 			public Optional<TestSource> getSource() {
-				return Optional.of(new ClassSource(Object.class));
+				return Optional.of(ClassSource.from(Object.class));
 			}
 		};
 		TestIdentifier failed = TestIdentifier.from(testDescriptor);

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassCollector.java
Patch:
@@ -39,7 +39,7 @@ void addFiltered(Class<?> testClass, RunnerTestDescriptorAwareFilter filter) {
 	}
 
 	Stream<TestClassRequest> toRequests() {
-		return concat(completeRequests(), filteredRequests()).distinct();
+		return concat(completeRequests(), filteredRequests());
 	}
 
 	private Stream<TestClassRequest> completeRequests() {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -45,6 +45,7 @@ LauncherDiscoveryRequest toDiscoveryRequest(CommandLineOptions options) {
 		LauncherDiscoveryRequestBuilder requestBuilder = request();
 		requestBuilder.selectors(createDiscoverySelectors(options));
 		addFilters(requestBuilder, options);
+		requestBuilder.configurationParameters(options.getConfigurationParameters());
 		return requestBuilder.build();
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -142,9 +142,7 @@ public <E extends Extension> Stream<E> stream(Class<E> extensionType) {
 		if (this.parent == null) {
 			return streamLocal(extensionType);
 		}
-		else {
-			return concat(this.parent.stream(extensionType), streamLocal(extensionType));
-		}
+		return concat(this.parent.stream(extensionType), streamLocal(extensionType));
 	}
 
 	/**

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static java.util.stream.Collectors.joining;
+import static java.lang.String.join;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -27,7 +27,6 @@
 import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -617,7 +616,7 @@ private static String concat(Class<?> c1, Class<?> c2) {
 	}
 
 	private static String concat(String... args) {
-		return Arrays.stream(args).collect(joining("."));
+		return join(".", args);
 	}
 
 	// -------------------------------------------------------------------------

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -335,9 +335,7 @@ public static MethodSelector selectMethod(String fullyQualifiedMethodName) throw
 		if (StringUtils.isNotBlank(methodParameters)) {
 			return selectMethod(className, methodName, methodParameters);
 		}
-		else {
-			return selectMethod(className, methodName);
-		}
+		return selectMethod(className, methodName);
 	}
 
 	/**

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/TestExecutionResultConditions.java
Patch:
@@ -51,7 +51,7 @@ public static Condition<Throwable> suppressed(int index, Condition<Throwable> ch
 	}
 
 	public static Condition<TestExecutionResult> cause(Condition<? super Throwable> condition) {
-		return new Condition<TestExecutionResult>(where(TestExecutionResult::getThrowable, throwable -> {
+		return new Condition<>(where(TestExecutionResult::getThrowable, throwable -> {
 			return throwable.isPresent() && condition.matches(throwable.get());
 		}), "cause where %s", condition);
 	}

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -10,6 +10,8 @@
 
 package org.junit.platform.launcher.listeners;
 
+import static java.lang.String.join;
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -198,7 +200,7 @@ public List<Failure> getFailures() {
 	private String describeTest(TestIdentifier testIdentifier) {
 		List<String> descriptionParts = new ArrayList<>();
 		collectTestDescription(Optional.of(testIdentifier), descriptionParts);
-		return String.join(":", descriptionParts);
+		return join(":", descriptionParts);
 	}
 
 	private void collectTestDescription(Optional<TestIdentifier> optionalIdentifier, List<String> descriptionParts) {

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -106,9 +106,7 @@ else if (source instanceof MethodSource) {
 				if (StringUtils.isBlank(methodParameterTypes)) {
 					return methodSource.getMethodName();
 				}
-				else {
-					return String.format("%s(%s)", methodSource.getMethodName(), methodParameterTypes);
-				}
+				return String.format("%s(%s)", methodSource.getMethodName(), methodParameterTypes);
 			}
 		}
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/VintageTestEngine.java
Patch:
@@ -77,9 +77,9 @@ public void execute(ExecutionRequest request) {
 	private void executeAllChildren(RunnerExecutor runnerExecutor, TestDescriptor engineTestDescriptor) {
 		// @formatter:off
 		engineTestDescriptor.getChildren()
-			.stream()
-			.map(RunnerTestDescriptor.class::cast)
-			.forEach(runnerExecutor::execute);
+				.stream()
+				.map(RunnerTestDescriptor.class::cast)
+				.forEach(runnerExecutor::execute);
 		// @formatter:on
 	}
 }

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -68,9 +68,9 @@ private void resolveIntoFilteredTestClass(UniqueId uniqueId, Predicate<Class<?>>
 			TestClassCollector collector) {
 		// @formatter:off
 		determineTestClassName(uniqueId)
-			.flatMap(testClassName -> loadTestClass(testClassName, uniqueId))
-			.filter(classFilter)
-			.ifPresent(testClass -> collector.addFiltered(testClass, new UniqueIdFilter(uniqueId)));
+				.flatMap(testClassName -> loadTestClass(testClassName, uniqueId))
+				.filter(classFilter)
+				.ifPresent(testClass -> collector.addFiltered(testClass, new UniqueIdFilter(uniqueId)));
 		// @formatter:on
 	}
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/TestRun.java
Patch:
@@ -54,8 +54,9 @@ class TestRun {
 		runnerDescendants = new LinkedHashSet<>(runnerTestDescriptor.getDescendants());
 		// @formatter:off
 		descriptionToDescriptors = concat(Stream.of(runnerTestDescriptor), runnerDescendants.stream())
-			.map(VintageTestDescriptor.class::cast)
-			.collect(groupingBy(VintageTestDescriptor::getDescription, HashMap::new, toCollection(ArrayList::new)));
+				.map(VintageTestDescriptor.class::cast)
+				.collect(groupingBy(
+						VintageTestDescriptor::getDescription, HashMap::new, toCollection(ArrayList::new)));
 		// @formatter:on
 	}
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -10,6 +10,7 @@
 
 package org.junit.platform.commons.util;
 
+import static java.lang.String.join;
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -477,7 +478,7 @@ private static String fqmnWithParamNames(Class<?> clazz, String methodName, Stri
 		Preconditions.notNull(methodName, "methodName must not be null");
 		Preconditions.notNull(params, "params must not be null");
 
-		return String.format("%s#%s(%s)", clazz.getName(), methodName, String.join(", ", params));
+		return String.format("%s#%s(%s)", clazz.getName(), methodName, join(", ", params));
 	}
 
 	private static void assertFqmn(String fqmn) {

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java
Patch:
@@ -10,6 +10,7 @@
 
 package org.junit.platform.engine.discovery;
 
+import static java.lang.String.join;
 import static java.util.Collections.singleton;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -484,7 +485,7 @@ private static String fqmn(Class<?> clazz, String methodName, Class<?>... params
 	}
 
 	private static String fqmnWithParamNames(String... params) {
-		return String.format("%s#%s(%s)", DiscoverySelectorsTests.class.getName(), "myTest", String.join(", ", params));
+		return String.format("%s#%s(%s)", DiscoverySelectorsTests.class.getName(), "myTest", join(", ", params));
 	}
 
 	interface TestInterface {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assumptions.java
Patch:
@@ -42,9 +42,11 @@
 @API(Maintained)
 public final class Assumptions {
 
+	///CLOVER:OFF
 	private Assumptions() {
 		/* no-op */
 	}
+	///CLOVER:ON
 
 	// --- assumeTrue ----------------------------------------------------
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -41,7 +41,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		settings.getFormat().setDelimiter(delimiter);
 		settings.getFormat().setQuote('\'');
 		settings.getFormat().setQuoteEscape('\'');
-		settings.setEmptyValue(null); // see https://github.com/junit-team/junit5/issues/1014
+		settings.setEmptyValue("");
 		settings.setAutoConfigurationEnabled(false);
 		CsvParser csvParser = new CsvParser(settings);
 		AtomicLong index = new AtomicLong(0);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -55,6 +55,9 @@ public void accept(CsvFileSource annotation) {
 		settings = new CsvParserSettings();
 		settings.getFormat().setDelimiter(annotation.delimiter());
 		settings.getFormat().setLineSeparator(annotation.lineSeparator());
+		settings.getFormat().setQuote('"');
+		settings.getFormat().setQuoteEscape('"');
+		settings.setEmptyValue("");
 		settings.setAutoConfigurationEnabled(false);
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -69,10 +69,10 @@ void throwsExceptionOnInvalidCsv() {
 	}
 
 	@Test
-	void emptyValueIsNull() {
+	void emptyValueIsAnEmptyString() {
 		Stream<Object[]> arguments = provideArguments(',', "null , , empty , ''");
 
-		assertThat(arguments).containsExactly(new String[] { "null", null, "empty", null });
+		assertThat(arguments).containsExactly(new String[] { "null", null, "empty", "" });
 	}
 
 	private Stream<Object[]> provideArguments(char delimiter, String... value) {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -71,7 +71,7 @@ void readsFromSingleClasspathResource() {
 		Stream<Object[]> arguments = provide(new CsvFileArgumentsProvider(), annotation);
 
 		assertThat(arguments).containsExactly(new Object[] { "foo" }, new Object[] { "bar" }, new Object[] { "baz" },
-			new Object[] { "qux" });
+			new Object[] { "qux" }, new Object[] { "" });
 	}
 
 	@Test
@@ -80,7 +80,7 @@ void readsFromMultipleClasspathResources() {
 
 		Stream<Object[]> arguments = provide(new CsvFileArgumentsProvider(), annotation);
 
-		assertThat(arguments).hasSize(8);
+		assertThat(arguments).hasSize(10);
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -63,6 +63,7 @@
  * Integration tests for {@link TestInstance @TestInstance} lifecycle support.
  *
  * @since 5.0
+ * @see TestInstanceLifecycleConfigurationTests
  */
 class TestInstanceLifecycleTests extends AbstractJupiterTestEngineTests {
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionStoreConcurrencyTests.java
Patch:
@@ -46,7 +46,7 @@ private String newValue(String key) {
 
 	private Store reset() {
 		count.set(0);
-		return new NamespaceAwareStore(new ExtensionValuesStore(null), Namespace.DEFAULT);
+		return new NamespaceAwareStore(new ExtensionValuesStore(null), Namespace.GLOBAL);
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExtensionContextExecutionTests.java
Patch:
@@ -90,7 +90,8 @@ static class B extends Parent {
 	static class OnlyIncrementCounterOnce implements BeforeAllCallback {
 		@Override
 		public void beforeAll(ExtensionContext context) throws Exception {
-			getRoot(context).getStore().getOrComputeIfAbsent("counter", key -> Parent.counter.incrementAndGet());
+			ExtensionContext.Store store = getRoot(context).getStore(ExtensionContext.Namespace.GLOBAL);
+			store.getOrComputeIfAbsent("counter", key -> Parent.counter.incrementAndGet());
 		}
 
 		private ExtensionContext getRoot(ExtensionContext context) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -52,7 +52,7 @@ public final class Constants {
 	 * @see #DEACTIVATE_ALL_CONDITIONS_PATTERN
 	 * @see org.junit.jupiter.api.extension.ExecutionCondition
 	 */
-	public static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = "junit.conditions.deactivate";
+	public static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = "junit.jupiter.conditions.deactivate";
 
 	/**
 	 * Wildcard pattern which signals that all conditions should be deactivated: {@value}
@@ -68,7 +68,7 @@ public final class Constants {
 	 *
 	 * <p>The default behavior is not to perform auto-detection.
 	 */
-	public static final String EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME = "junit.extensions.autodetection.enabled";
+	public static final String EXTENSIONS_AUTODETECTION_ENABLED_PROPERTY_NAME = "junit.jupiter.extensions.autodetection.enabled";
 
 	private Constants() {
 		/* no-op */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -41,7 +41,6 @@
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.AnnotationUtils;
-import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -296,7 +295,7 @@ private static TestInstance.Lifecycle getTestInstanceLifecycle(Class<?> testClas
 		// @formatter:off
 		return AnnotationUtils.findAnnotation(testClass, TestInstance.class)
 				.map(TestInstance::value)
-				.orElseGet(() -> ClassUtils.isKotlinClass(testClass) ? Lifecycle.PER_CLASS : Lifecycle.PER_METHOD);
+				.orElse(Lifecycle.PER_METHOD);
 		// @formatter:on
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/DoubleParameterResolver.java
Patch:
@@ -28,8 +28,8 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon
 	}
 
 	@Override
-	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
-		return new Double(42.0);
+	public Double resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
+		return 42.0;
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/LongParameterResolver.java
Patch:
@@ -56,8 +56,8 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon
 	}
 
 	@Override
-	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
-		return Long.valueOf(42);
+	public Long resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
+		return 42L;
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -41,6 +41,7 @@
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.AnnotationUtils;
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -295,7 +296,7 @@ private static TestInstance.Lifecycle getTestInstanceLifecycle(Class<?> testClas
 		// @formatter:off
 		return AnnotationUtils.findAnnotation(testClass, TestInstance.class)
 				.map(TestInstance::value)
-				.orElse(Lifecycle.PER_METHOD);
+				.orElseGet(() -> ClassUtils.isKotlinClass(testClass) ? Lifecycle.PER_CLASS : Lifecycle.PER_METHOD);
 		// @formatter:on
 	}
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -10,6 +10,7 @@
 
 package org.junit.platform.commons.util;
 
+import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertAll;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -34,11 +34,12 @@ public void accept(MethodSource annotation) {
 	@Override
 	public Stream<Arguments> provideArguments(ExtensionContext context) {
 		Class<?> testClass = context.getRequiredTestClass();
+		Object testInstance = context.getTestInstance().orElse(null);
 		// @formatter:off
 		return Arrays.stream(methodNames)
 				.map(methodName -> ReflectionUtils.findMethod(testClass, methodName)
                         .orElseThrow(() -> new JUnitException("Could not find method: " + methodName)))
-				.map(method -> ReflectionUtils.invokeMethod(method, null))
+				.map(method -> ReflectionUtils.invokeMethod(method, testInstance))
 				.flatMap(CollectionUtils::toStream)
 				.map(MethodArgumentsProvider::toArguments);
 		// @formatter:on

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -41,8 +41,9 @@
  * <h3>Inheritance</h3>
  *
  * <p>{@code @AfterAll} methods are inherited from superclasses as long as
- * they are not shadowed. Furthermore, {@code @AfterAll} methods from
- * superclasses will be executed after {@code @AfterAll} methods in subclasses.
+ * they are not <em>hidden</em> or <em>overridden</em>. Furthermore,
+ * {@code @AfterAll} methods from superclasses will be executed before
+ * {@code @AfterAll} methods in subclasses.
  *
  * <h3>Composition</h3>
  *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -41,8 +41,9 @@
  * <h3>Inheritance</h3>
  *
  * <p>{@code @BeforeAll} methods are inherited from superclasses as long as
- * they are not shadowed. Furthermore, {@code @BeforeAll} methods from
- * superclasses will be executed before {@code @BeforeAll} methods in subclasses.
+ * they are not <em>hidden</em> or <em>overridden</em>. Furthermore,
+ * {@code @BeforeAll} methods from superclasses will be executed before
+ * {@code @BeforeAll} methods in subclasses.
  *
  * <h3>Composition</h3>
  *

File: junit-platform-commons/src/main/java/org/junit/platform/commons/support/ReflectionSupport.java
Patch:
@@ -161,6 +161,9 @@ public static Optional<Method> findMethod(Class<?> clazz, String methodName, Cla
 	 * Find all {@linkplain Method methods} of the supplied class or interface
 	 * that match the specified {@code predicate}.
 	 *
+	 * <p>The results will not contain instance methods that are <em>overridden</em>
+	 * or {@code static} methods that are <em>hidden</em>.
+	 *
 	 * <p>If you're are looking for methods annotated with a certain annotation
 	 * type, consider using {@linkplain AnnotationSupport#findAnnotatedMethods(Class, Class, HierarchyTraversalMode)}.
 	 *

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -805,6 +805,9 @@ private static Optional<Method> findMethod(Class<?> clazz, Predicate<Method> pre
 	 * that match the specified {@code predicate}, using top-down search semantics
 	 * within the type hierarchy.
 	 *
+	 * <p>The results will not contain instance methods that are <em>overridden</em>
+	 * or {@code static} methods that are <em>hidden</em>.
+	 *
 	 * @param clazz the class or interface in which to find the methods; never {@code null}
 	 * @param predicate the method filter; never {@code null}
 	 * @return an immutable list of all such methods found; never {@code null}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestClassWithTests.java
Patch:
@@ -46,7 +46,7 @@ public boolean test(Class<?> candidate) {
 	}
 
 	private boolean hasTestOrTestFactoryOrTestTemplateMethods(Class<?> candidate) {
-		return !ReflectionUtils.findMethods(candidate, isTestOrTestFactoryOrTestTemplateMethod).isEmpty();
+		return ReflectionUtils.isMethodPresent(candidate, isTestOrTestFactoryOrTestTemplateMethod);
 	}
 
 	private boolean hasNestedTests(Class<?> candidate) {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/DefensiveAllDefaultPossibilitiesBuilder.java
Patch:
@@ -82,7 +82,7 @@ public Runner buildRunner(Class<? extends Runner> runnerClass, Class<?> testClas
 	 */
 	private static class DefensiveJUnit4Builder extends JUnit4Builder {
 
-		private static final Predicate<Method> hasTestAnnotation = new IsPotentialJUnit4TestMethod();
+		private static final Predicate<Method> isPotentialJUnit4TestMethod = new IsPotentialJUnit4TestMethod();
 
 		@Override
 		public Runner runnerForClass(Class<?> testClass) throws Throwable {
@@ -93,7 +93,7 @@ public Runner runnerForClass(Class<?> testClass) throws Throwable {
 		}
 
 		private boolean containsTestMethods(Class<?> testClass) {
-			return !ReflectionUtils.findMethods(testClass, hasTestAnnotation).isEmpty();
+			return ReflectionUtils.isMethodPresent(testClass, isPotentialJUnit4TestMethod);
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultMethodTests.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
@@ -132,8 +131,6 @@ void executeTestCaseWithOverloadedMethodNextToGenericDefaultMethodSelectedByClas
 		// @formatter:on
 	}
 
-	// TODO [#978] Enable failing @Disabled test.
-	@Disabled("Disabled until #978 is resolved")
 	@Test
 	void executeTestCaseWithOverriddenGenericDefaultMethodSelectedByClass() throws Exception {
 		Class<?> clazz = GenericTestCaseWithOverriddenDefaultMethod.class;

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.extensions.TempDirectory;
@@ -916,8 +915,6 @@ void findMethodsReturnsAllOverloadedMethodsThatAreNotShadowed() throws Exception
 		assertThat(toMethodSignatures(methods)).containsExactly("foo(java.lang.Number)", "foo(java.lang.Double)");
 	}
 
-	// TODO [#978] Enable failing @Disabled test.
-	@Disabled("Disabled until #978 is resolved")
 	@Test
 	void findMethodsDoesNotReturnOverriddenDefaultMethods() throws Exception {
 		Class<?> clazz = InterfaceWithOverriddenGenericDefaultMethodImpl.class;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultMethodTests.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.TestInstance.Lifecycle;
@@ -111,8 +110,6 @@ void executeTestCaseWithOverloadedMethodNextToGenericDefaultMethodSelectedByFull
 		// @formatter:on
 	}
 
-	// TODO [#976] Enable failing @Disabled test.
-	@Disabled("Disabled until #976 is resolved")
 	@Test
 	void executeTestCaseWithOverloadedMethodNextToGenericDefaultMethodSelectedByClass() throws Exception {
 		Class<?> clazz = GenericTestCaseWithDefaultMethod.class;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/LifecycleMethodUtils.java
Patch:
@@ -78,7 +78,7 @@ private static void assertVoid(Class<? extends Annotation> annotationType, Metho
 
 	private static List<Method> findMethodsAndAssertStatic(Class<?> testClass, boolean requireStatic,
 			Class<? extends Annotation> annotationType, HierarchyTraversalMode traversalMode) {
-		List<Method> methods = findMethodsAndCheckVoidReturntype(testClass, annotationType, traversalMode);
+		List<Method> methods = findMethodsAndCheckVoidReturnType(testClass, annotationType, traversalMode);
 		if (requireStatic) {
 			methods.forEach(method -> assertStatic(annotationType, method));
 		}
@@ -87,12 +87,12 @@ private static List<Method> findMethodsAndAssertStatic(Class<?> testClass, boole
 
 	private static List<Method> findMethodsAndAssertNonStatic(Class<?> testClass,
 			Class<? extends Annotation> annotationType, HierarchyTraversalMode traversalMode) {
-		List<Method> methods = findMethodsAndCheckVoidReturntype(testClass, annotationType, traversalMode);
+		List<Method> methods = findMethodsAndCheckVoidReturnType(testClass, annotationType, traversalMode);
 		methods.forEach(method -> assertNonStatic(annotationType, method));
 		return methods;
 	}
 
-	private static List<Method> findMethodsAndCheckVoidReturntype(Class<?> testClass,
+	private static List<Method> findMethodsAndCheckVoidReturnType(Class<?> testClass,
 			Class<? extends Annotation> annotationType, HierarchyTraversalMode traversalMode) {
 		List<Method> methods = findAnnotatedMethods(testClass, annotationType, traversalMode);
 		methods.forEach(method -> assertVoid(annotationType, method));

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.junit.platform.surefire.provider;
 
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
@@ -36,6 +37,7 @@
 import org.apache.maven.surefire.suite.RunResult;
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
+import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.Filter;
 import org.junit.platform.launcher.Launcher;
@@ -46,6 +48,7 @@
 /**
  * @since 1.0
  */
+@API(Experimental)
 public class JUnitPlatformProvider extends AbstractProvider {
 
 	// Parameter names processed to determine which @Tags should be executed.

File: junit-platform-console/src/main/java/org/junit/platform/console/options/URIConverter.java
Patch:
@@ -17,6 +17,9 @@
 import joptsimple.ValueConversionException;
 import joptsimple.ValueConverter;
 
+/**
+ * @since 1.0
+ */
 class URIConverter implements ValueConverter<URI> {
 
 	@Override

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreePrinter.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.platform.console.tasks;
 
-import static org.junit.platform.commons.meta.API.Usage.Internal;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.console.tasks.Color.CONTAINER;
 import static org.junit.platform.console.tasks.Color.FAILED;
@@ -24,7 +23,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.console.options.Theme;
 import org.junit.platform.engine.TestExecutionResult;
@@ -34,7 +32,6 @@
 /**
  * @since 1.0
  */
-@API(Internal)
 class TreePrinter {
 
 	private final PrintWriter out;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassFileVisitor.java
Patch:
@@ -21,6 +21,9 @@
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 
+/**
+ * @since 1.0
+ */
 class ClassFileVisitor extends SimpleFileVisitor<Path> {
 
 	private static final Logger LOG = Logger.getLogger(ClassFileVisitor.class.getName());

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -13,7 +13,6 @@
 import static java.lang.String.format;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.platform.commons.meta.API.Usage.Experimental;
 import static org.junit.platform.commons.util.ReflectionUtils.findMethods;
 import static org.junit.platform.commons.util.ReflectionUtils.findNestedClasses;
 
@@ -31,15 +30,13 @@
 
 import org.junit.jupiter.engine.descriptor.ClassTestDescriptor;
 import org.junit.jupiter.engine.discovery.predicates.IsInnerClass;
-import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
 
 /**
  * @since 5.0
  */
-@API(Experimental)
 class JavaElementsResolver {
 
 	private static final Logger LOG = Logger.getLogger(JavaElementsResolver.class.getName());

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/DefaultParameterContext.java
Patch:
@@ -17,6 +17,9 @@
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ToStringBuilder;
 
+/**
+ * @since 5.0
+ */
 class DefaultParameterContext implements ParameterContext {
 
 	private final Parameter parameter;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/meta/API.java
Patch:
@@ -58,8 +58,8 @@ enum Usage {
 		 * Intended for new, experimental features where the JUnit team is
 		 * looking for feedback.
 		 *
-		 * <p>Use with caution. Might be promoted to {@link Maintained} or
-		 * {@link Stable} in the future, but might also be removed without
+		 * <p>Use with caution. Might be promoted to {@link #Maintained} or
+		 * {@link #Stable} in the future, but might also be removed without
 		 * prior notice.
 		 */
 		Experimental,
@@ -68,7 +68,7 @@ enum Usage {
 		 * Intended for features that will not be changed in a backwards-
 		 * incompatible way for at least the next minor release of the current
 		 * major version. If scheduled for removal, such a feature will be
-		 * demoted to {@link Deprecated} first.
+		 * demoted to {@link #Deprecated} first.
 		 */
 		Maintained,
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -55,7 +55,7 @@
 	 * <p>Note: the tag will first be {@linkplain String#trim() trimmed}. If the
 	 * supplied tag is syntactically invalid after trimming, the error will be
 	 * logged as a warning, and the invalid tag will be effectively ignored. See
-	 * {@linkplain #Tag Syntax Rules for Tags}.
+	 * {@linkplain Tag Syntax Rules for Tags}.
 	 */
 	String value();
 

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -35,10 +35,10 @@ void init(TestInfo testInfo) {
 
 	@Test
 	@DisplayName("TEST 1")
-	@Tag("my tag")
+	@Tag("my-tag")
 	void test1(TestInfo testInfo) {
 		assertEquals("TEST 1", testInfo.getDisplayName());
-		assertTrue(testInfo.getTags().contains("my tag"));
+		assertTrue(testInfo.getTags().contains("my-tag"));
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptorTests.java
Patch:
@@ -88,7 +88,7 @@ void constructFromMethodWithCustomTestAnnotation() throws Exception {
 
 		assertEquals(testMethod, descriptor.getTestMethod());
 		assertEquals("custom name", descriptor.getDisplayName(), "display name:");
-		assertThat(descriptor.getTags()).containsExactly(TestTag.create("custom tag"));
+		assertThat(descriptor.getTags()).containsExactly(TestTag.create("custom-tag"));
 	}
 
 	@Test
@@ -181,6 +181,7 @@ void test(String[][][][][] info) {
 		@DisplayName("custom test name")
 		@Tag("methodTag1")
 		@Tag("methodTag2")
+		@Tag("tag containing whitespace")
 		void foo() {
 		}
 
@@ -192,7 +193,7 @@ void customTestAnnotation() {
 
 	@Test
 	@DisplayName("custom name")
-	@Tag("custom tag")
+	@Tag("  custom-tag  ")
 	@Target(ElementType.METHOD)
 	@Retention(RetentionPolicy.RUNTIME)
 	@interface CustomTestAnnotation {

File: junit-jupiter-engine/src/test/java/DefaultPackageTestCase.java
Patch:
@@ -8,6 +8,7 @@
  *
  * http://www.eclipse.org/legal/epl-v10.html
  */
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -16,7 +17,8 @@
  *
  * @since 5.0
  */
-public class DefaultPackageTestCase {
+@Disabled("Only used reflectively by other tests")
+class DefaultPackageTestCase {
 
 	@Test
 	void test() {

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -183,7 +183,7 @@ void scanForClassesInDefaultPackage() throws Exception {
 
 		assertThat(classes.size()).as("number of classes found in default package").isGreaterThanOrEqualTo(1);
 		assertTrue(classes.stream().allMatch(this::inDefaultPackage));
-		assertTrue(classes.stream().anyMatch(clazz -> "DefaultPackageTests".equals(clazz.getName())));
+		assertTrue(classes.stream().anyMatch(clazz -> "DefaultPackageTestCase".equals(clazz.getName())));
 	}
 
 	@Test
@@ -245,7 +245,7 @@ void findAllClassesInDefaultPackageInClasspathRoot() throws Exception {
 		assertEquals(1, classes.size(), "number of classes found in default package");
 		Class<?> testClass = classes.get(0);
 		assertTrue(inDefaultPackage(testClass));
-		assertEquals("DefaultPackageTests", testClass.getName());
+		assertEquals("DefaultPackageTestCase", testClass.getName());
 	}
 
 	@Test

File: platform-tests/src/test/java/DefaultPackageTests.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @since 1.0
  */
-public class DefaultPackageTestCase {
+class DefaultPackageTests {
 
 	@Test
 	void test() {
@@ -28,7 +28,7 @@ void test() {
 
 	@Test
 	void getAttributeFromDefaultPackageMemberIsEmpty() {
-		assertFalse(PackageUtils.getAttribute(DefaultPackageTestCase.class, Object::toString).isPresent());
+		assertFalse(PackageUtils.getAttribute(DefaultPackageTests.class, Package::getSpecificationTitle).isPresent());
 	}
 
 }

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -182,8 +182,8 @@ void scanForClassesInDefaultPackage() throws Exception {
 			className -> true);
 
 		assertThat(classes.size()).as("number of classes found in default package").isGreaterThanOrEqualTo(1);
-		assertTrue(classes.stream().allMatch(clazz -> inDefaultPackage(clazz)));
-		assertTrue(classes.stream().anyMatch(clazz -> "DefaultPackageTestCase".equals(clazz.getName())));
+		assertTrue(classes.stream().allMatch(this::inDefaultPackage));
+		assertTrue(classes.stream().anyMatch(clazz -> "DefaultPackageTests".equals(clazz.getName())));
 	}
 
 	@Test
@@ -245,7 +245,7 @@ void findAllClassesInDefaultPackageInClasspathRoot() throws Exception {
 		assertEquals(1, classes.size(), "number of classes found in default package");
 		Class<?> testClass = classes.get(0);
 		assertTrue(inDefaultPackage(testClass));
-		assertEquals("DefaultPackageTestCase", testClass.getName());
+		assertEquals("DefaultPackageTests", testClass.getName());
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethodTests.java
Patch:
@@ -83,11 +83,11 @@ private Method findMethodOfAbstractClass(String name) {
 class ClassWithTestMethods {
 
 	@Test
-	void publicTestMethod() {
+	public void publicTestMethod() {
 	}
 
 	@Test
-	void publicTestMethodWithArgument(TestInfo info) {
+	public void publicTestMethodWithArgument(TestInfo info) {
 	}
 
 	@Test

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -44,6 +44,9 @@
 
 	/**
 	 * The <em>tag</em>.
+	 *
+	 * <p>Note: the tag will be {@linkplain String#trim() trimmed},
+	 * and a blank value will be ignored.
 	 */
 	String value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ExcludeTags.java
Patch:
@@ -43,6 +43,8 @@
 
 	/**
 	 * One or more tags to exclude.
+	 *
+	 * <p>Note: each tag will be {@linkplain String#trim() trimmed}.
 	 */
 	String[] value();
 

File: junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/IncludeTags.java
Patch:
@@ -43,6 +43,8 @@
 
 	/**
 	 * One or more tags to include.
+	 *
+	 * <p>Note: each tag will be {@linkplain String#trim() trimmed}.
 	 */
 	String[] value();
 

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/TestExecutionResultConditions.java
Patch:
@@ -37,7 +37,7 @@ public static Condition<Throwable> message(String expectedMessage) {
 	}
 
 	public static Condition<Throwable> message(Predicate<String> predicate) {
-		return new Condition<>(where(Throwable::getMessage, predicate), "message is \"%s\"");
+		return new Condition<>(where(Throwable::getMessage, predicate), "message is \"%s\"", predicate);
 	}
 
 	public static Condition<Throwable> isA(Class<? extends Throwable> expectedClass) {

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -34,12 +34,12 @@ public class TimingExtension implements BeforeTestExecutionCallback, AfterTestEx
 
 	@Override
 	public void beforeTestExecution(ExtensionContext context) throws Exception {
-		getStore(context).put(context.getTestMethod().get(), System.currentTimeMillis());
+		getStore(context).put(context.getRequiredTestMethod(), System.currentTimeMillis());
 	}
 
 	@Override
 	public void afterTestExecution(ExtensionContext context) throws Exception {
-		Method testMethod = context.getTestMethod().get();
+		Method testMethod = context.getRequiredTestMethod();
 		long start = getStore(context).remove(testMethod, long.class);
 		long duration = System.currentTimeMillis() - start;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/RepeatedTestExtension.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
 import org.junit.platform.commons.util.AnnotationUtils;
-import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;
 
 /**
@@ -42,8 +41,7 @@ public boolean supportsTestTemplate(ExtensionContext context) {
 
 	@Override
 	public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {
-
-		Method testMethod = Preconditions.notNull(context.getTestMethod().orElse(null), "test method must not be null");
+		Method testMethod = context.getRequiredTestMethod();
 		String displayName = context.getDisplayName();
 		RepeatedTest repeatedTest = AnnotationUtils.findAnnotation(testMethod, RepeatedTest.class).get();
 		int totalRepetitions = totalRepetitions(repeatedTest, testMethod);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TestInfoParameterResolver.java
Patch:
@@ -59,7 +59,7 @@ public String getDisplayName() {
 
 		@Override
 		public Set<String> getTags() {
-			return tags;
+			return this.tags;
 		}
 
 		@Override

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/FullLogging.java
Patch:
@@ -53,7 +53,7 @@ class Extension implements BeforeAllCallback, AfterAllCallback {
 
 		@Override
 		public void beforeAll(ExtensionContext context) throws Exception {
-			Class<?> testClass = context.getTestClass().get();
+			Class<?> testClass = context.getRequiredTestClass();
 
 			// @formatter:off
 			Class<?>[] loggerClasses = findAnnotation(testClass, FullLogging.class)

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -161,7 +161,7 @@ private static class FooInstancePostProcessor implements TestInstancePostProcess
 		@Override
 		public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {
 			if (testInstance instanceof Named) {
-				((Named) testInstance).setName("foo:" + context.getTestClass().get().getSimpleName());
+				((Named) testInstance).setName("foo:" + context.getRequiredTestClass().getSimpleName());
 			}
 			callSequence.add("fooPostProcessTestInstance:" + testInstance.getClass().getSimpleName());
 		}
@@ -172,7 +172,7 @@ private static class BarInstancePostProcessor implements TestInstancePostProcess
 		@Override
 		public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {
 			if (testInstance instanceof Named) {
-				((Named) testInstance).setName("bar:" + context.getTestClass().get().getSimpleName());
+				((Named) testInstance).setName("bar:" + context.getRequiredTestClass().getSimpleName());
 			}
 			callSequence.add("barPostProcessTestInstance:" + testInstance.getClass().getSimpleName());
 		}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -46,9 +46,7 @@ public boolean supportsTestTemplate(ExtensionContext context) {
 
 	@Override
 	public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {
-
-		Method templateMethod = Preconditions.notNull(context.getTestMethod().orElse(null),
-			"test method must not be null");
+		Method templateMethod = context.getRequiredTestMethod();
 		ParameterizedTestNameFormatter formatter = createNameFormatter(templateMethod);
 		AtomicLong invocationCount = new AtomicLong(0);
 		// @formatter:off

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -27,7 +27,6 @@
 
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
-import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 
 /**
@@ -70,8 +69,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 	}
 
 	private InputStream openInputStream(ExtensionContext context, String resource) {
-		Class<?> testClass = context.getTestClass().orElseThrow(
-			() -> new JUnitException("Cannot load classpath resource without test class"));
+		Class<?> testClass = context.getRequiredTestClass();
 		return Preconditions.notNull(inputStreamProvider.apply(testClass, resource),
 			() -> "Classpath resource does not exist: " + resource);
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -33,8 +33,7 @@ public void accept(MethodSource annotation) {
 
 	@Override
 	public Stream<Arguments> provideArguments(ExtensionContext context) {
-		Class<?> testClass = context.getTestClass() //
-				.orElseThrow(() -> new JUnitException("Cannot invoke method without test class"));
+		Class<?> testClass = context.getRequiredTestClass();
 		// @formatter:off
 		return Arrays.stream(methodNames)
 				.map(methodName -> ReflectionUtils.findMethod(testClass, methodName)

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -13,6 +13,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.mockito.Mockito.doCallRealMethod;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -120,6 +121,7 @@ private Stream<Object[]> provide(CsvFileArgumentsProvider provider, CsvFileSourc
 		provider.accept(annotation);
 		ExtensionContext context = mock(ExtensionContext.class);
 		when(context.getTestClass()).thenReturn(Optional.of(CsvFileArgumentsProviderTests.class));
+		doCallRealMethod().when(context).getRequiredTestClass();
 		return provider.provideArguments(context).map(Arguments::get);
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -63,7 +63,7 @@ void understandsEscapeCharacters() {
 	@Test
 	void throwsExceptionOnInvalidCsv() {
 		JUnitException exception = assertThrows(JUnitException.class,
-			() -> provideArguments(',', "foo", "bar", "").count());
+			() -> provideArguments(',', "foo", "bar", "").toArray());
 
 		assertThat(exception).hasMessage("Line at index 2 contains invalid CSV: \"\"");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestTemplateInvocationTests.java
Patch:
@@ -18,7 +18,6 @@
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
-import static org.junit.platform.engine.test.event.ExecutionEventConditions.abortedWithReason;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.displayName;
@@ -303,7 +302,7 @@ void extensionIsAskedForSupportBeforeItMustProvide() {
 	}
 
 	@Test
-	void templateWithSupportingProviderButNoInvocationsReportsAbortedTest() {
+	void templateWithSupportingProviderButNoInvocationsReportsFailure() {
 		LauncherDiscoveryRequest request = request().selectors(
 			selectMethod(MyTestTemplateTestCase.class, "templateWithSupportingProviderButNoInvocations")).build();
 
@@ -312,7 +311,7 @@ void templateWithSupportingProviderButNoInvocationsReportsAbortedTest() {
 		assertRecordedExecutionEventsContainsExactly(eventRecorder.getExecutionEvents(), //
 			wrappedInContainerEvents(MyTestTemplateTestCase.class, //
 				event(container("templateWithSupportingProviderButNoInvocations"), started()), //
-				event(container("templateWithSupportingProviderButNoInvocations"), abortedWithReason(
+				event(container("templateWithSupportingProviderButNoInvocations"), finishedWithFailure(
 					message("No supporting TestTemplateInvocationContextProvider provided an invocation context")))));
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -134,7 +134,7 @@ public interface ExtensionContext {
 	 * @throws PreconditionViolationException if the test class is not present
 	 * in this {@code ExtensionContext}
 	 */
-	default Object getRequiredTestClass() {
+	default Class<?> getRequiredTestClass() {
 		return Preconditions.notNull(getTestClass().orElse(null),
 			"Illegal state: required test class is not present in the current ExtensionContext");
 	}
@@ -185,7 +185,7 @@ default Object getRequiredTestInstance() {
 	 * @throws PreconditionViolationException if the test method is not present
 	 * in this {@code ExtensionContext}
 	 */
-	default Object getRequiredTestMethod() {
+	default Method getRequiredTestMethod() {
 		return Preconditions.notNull(getTestMethod().orElse(null),
 			"Illegal state: required test method is not present in the current ExtensionContext");
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -286,7 +286,7 @@ private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(Method method) {
 
 	private void invokeMethodInExtensionContext(Method method, ExtensionContext context, ExtensionRegistry registry) {
 
-		Object testInstance = getRequiredTestInstance(context);
+		Object testInstance = context.getRequiredTestInstance();
 		testInstance = ReflectionUtils.getOutermostInstance(testInstance, method.getDeclaringClass()).orElseThrow(
 			() -> new JUnitException("Failed to find instance for method: " + method.toGenericString()));
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -163,7 +163,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		throwableCollector.execute(() -> {
 			try {
 				Method testMethod = getTestMethod();
-				Object instance = getRequiredTestInstance(extensionContext);
+				Object instance = extensionContext.getRequiredTestInstance();
 				executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());
 			}
 			catch (Throwable throwable) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -66,7 +66,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		ExtensionContext extensionContext = context.getExtensionContext();
 
 		context.getThrowableCollector().execute(() -> {
-			Object instance = getRequiredTestInstance(extensionContext);
+			Object instance = extensionContext.getRequiredTestInstance();
 			Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,
 				context.getExtensionRegistry());
 			TestSource source = getSource().orElseThrow(

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -76,7 +76,7 @@ void streamsFromTestFactoriesShouldBeClosedWhenTheyThrow() {
 
 	private void prepareMockForTestInstanceWithCustomStream(Stream<?> stream) {
 		Stream<?> mockStream = stream.onClose(() -> isClosed = true);
-		when(extensionContext.getTestInstance()).thenReturn(Optional.of(new CustomStreamTestCase(mockStream)));
+		when(extensionContext.getRequiredTestInstance()).thenReturn(new CustomStreamTestCase(mockStream));
 	}
 
 	private static class CustomStreamTestCase {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/AbstractTestRuleSupport.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.jupiter.migrationsupport.rules.adapter.GenericBeforeAndAfterAdvice;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMemberFactory;
-import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.rules.TestRule;
 
@@ -73,8 +72,7 @@ public void afterEach(ExtensionContext context) throws Exception {
 	private void invokeAppropriateMethodOnRuleAnnotatedMembers(ExtensionContext context,
 			Consumer<GenericBeforeAndAfterAdvice> methodCaller) {
 
-		Object testInstance = context.getTestInstance().orElseThrow(
-			() -> new JUnitException("Illegal state: test instance not present for rule: " + getRuleType().getName()));
+		Object testInstance = context.getRequiredTestInstance();
 		List<T> members = findRuleAnnotatedMembers(testInstance);
 
 		// @formatter:off

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -45,7 +45,7 @@ public interface ExtensionContext {
 	 *
 	 * @return an {@code Optional} containing the parent; never {@code null} but
 	 * potentially empty
-	* @see #getRoot()
+	 * @see #getRoot()
 	 */
 	Optional<ExtensionContext> getParent();
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/DiscoveryFilterApplier.java
Patch:
@@ -32,8 +32,8 @@ class DiscoveryFilterApplier {
 	 * Apply all filters. Currently only {@link ClassNameFilter} is considered.
 	 */
 	void applyAllFilters(EngineDiscoveryRequest discoveryRequest, TestDescriptor engineDescriptor) {
-		applyClassNameFilters(discoveryRequest.getDiscoveryFiltersByType(ClassNameFilter.class), engineDescriptor);
-		applyPackageNameFilters(discoveryRequest.getDiscoveryFiltersByType(PackageNameFilter.class), engineDescriptor);
+		applyClassNameFilters(discoveryRequest.getFiltersByType(ClassNameFilter.class), engineDescriptor);
+		applyPackageNameFilters(discoveryRequest.getFiltersByType(PackageNameFilter.class), engineDescriptor);
 	}
 
 	private void applyPackageNameFilters(List<PackageNameFilter> packageNameFilters, TestDescriptor engineDescriptor) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -58,7 +58,7 @@ public interface EngineDiscoveryRequest {
 	 * @param filterType the type of {@link DiscoveryFilter} to filter by
 	 * @return all filters of this request that are instances of {@code filterType}
 	 */
-	<T extends DiscoveryFilter<?>> List<T> getDiscoveryFiltersByType(Class<T> filterType);
+	<T extends DiscoveryFilter<?>> List<T> getFiltersByType(Class<T> filterType);
 
 	/**
 	 * Get the {@link ConfigurationParameters} for this request.

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ClasspathScanningSupport.java
Patch:
@@ -39,8 +39,8 @@ public class ClasspathScanningSupport {
 	 */
 	public static Predicate<String> buildClassNamePredicate(EngineDiscoveryRequest request) {
 		List<DiscoveryFilter<String>> filters = new ArrayList<>();
-		filters.addAll(request.getDiscoveryFiltersByType(ClassNameFilter.class));
-		filters.addAll(request.getDiscoveryFiltersByType(PackageNameFilter.class));
+		filters.addAll(request.getFiltersByType(ClassNameFilter.class));
+		filters.addAll(request.getFiltersByType(PackageNameFilter.class));
 		return composeFilters(filters).toPredicate();
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultDiscoveryRequest.java
Patch:
@@ -69,7 +69,7 @@ public List<EngineFilter> getEngineFilters() {
 	}
 
 	@Override
-	public <T extends DiscoveryFilter<?>> List<T> getDiscoveryFiltersByType(Class<T> filterType) {
+	public <T extends DiscoveryFilter<?>> List<T> getFiltersByType(Class<T> filterType) {
 		Preconditions.notNull(filterType, "filterType must not be null");
 		return this.discoveryFilters.stream().filter(filterType::isInstance).map(filterType::cast).collect(toList());
 	}

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -70,7 +70,7 @@ private List<DiscoverySelectorResolver> getAllDiscoverySelectorResolvers(EngineD
 
 	private Set<TestClassRequest> filterAndConvertToTestClassRequests(EngineDiscoveryRequest discoveryRequest,
 			TestClassCollector collector) {
-		List<ClassNameFilter> allClassNameFilters = discoveryRequest.getDiscoveryFiltersByType(ClassNameFilter.class);
+		List<ClassNameFilter> allClassNameFilters = discoveryRequest.getFiltersByType(ClassNameFilter.class);
 		Filter<Class<?>> adaptedFilter = adaptFilter(composeFilters(allClassNameFilters), Class::getName);
 		Filter<Class<?>> classFilter = new ExclusionReasonConsumingFilter<>(adaptedFilter,
 			(testClass, reason) -> logger.fine(() -> String.format("Class %s was excluded by a class filter: %s",

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -193,7 +193,7 @@ public void discoveryFiltersAreStoredInDiscoveryRequest() throws Exception {
 					).build();
 			// @formatter:on
 
-			List<String> filterStrings = discoveryRequest.getDiscoveryFiltersByType(DiscoveryFilter.class).stream().map(
+			List<String> filterStrings = discoveryRequest.getFiltersByType(DiscoveryFilter.class).stream().map(
 				DiscoveryFilter::toString).collect(toList());
 			assertThat(filterStrings).hasSize(2);
 			assertThat(filterStrings).contains("filter1", "filter2");

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/JupiterTestEngine.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.jupiter.engine.discovery.DiscoverySelectorResolver;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.platform.commons.meta.API;
-import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.ExecutionRequest;
 import org.junit.platform.engine.TestDescriptor;
@@ -58,7 +57,6 @@ public Optional<String> getArtifactId() {
 
 	@Override
 	public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {
-		Preconditions.notNull(discoveryRequest, "discovery request must not be null");
 		JupiterEngineDescriptor engineDescriptor = new JupiterEngineDescriptor(uniqueId);
 		resolveDiscoveryRequest(discoveryRequest, engineDescriptor);
 		return engineDescriptor;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -70,9 +70,9 @@ public static <V> V fail(String message) {
 	 * return statement, this method never actually returns a value to its caller.
 	 * The following example demonstrates how this may be used in practice.
 	 *
-	 * <pre class="code">
+	 * <pre>{@code
 	 * Stream.of().map(entry -> fail("should not be called"));
-	 * </pre>
+	 * }</pre>
 	 */
 	public static <V> V fail(String message, Throwable cause) {
 		AssertionUtils.fail(message, cause);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInstance.java
Patch:
@@ -43,7 +43,6 @@
  * programming language.</li>
  * </ul>
  *
- * @author Sam Brannen
  * @since 5.0
  */
 @Target(ElementType.TYPE)

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -290,9 +290,7 @@ private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(Method method) {
 
 	private void invokeMethodInExtensionContext(Method method, ExtensionContext context, ExtensionRegistry registry) {
 
-		Object testInstance = context.getTestInstance().orElseThrow(() -> new JUnitException(
-			"Illegal state: test instance not present for method: " + method.toGenericString()));
-
+		Object testInstance = getRequiredTestInstance(context);
 		testInstance = ReflectionUtils.getOutermostInstance(testInstance, method.getDeclaringClass()).orElseThrow(
 			() -> new JUnitException("Failed to find instance for method: " + method.toGenericString()));
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -31,7 +31,6 @@
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
-import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -164,8 +163,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		throwableCollector.execute(() -> {
 			try {
 				Method testMethod = getTestMethod();
-				Object instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(
-					"Illegal state: test instance not present for method: " + testMethod.toGenericString()));
+				Object instance = getRequiredTestInstance(extensionContext);
 				executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());
 			}
 			catch (Throwable throwable) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -66,8 +66,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		ExtensionContext extensionContext = context.getExtensionContext();
 
 		context.getThrowableCollector().execute(() -> {
-			Object instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(
-				"Illegal state: test instance not present for method: " + getTestMethod().toGenericString()));
+			Object instance = getRequiredTestInstance(extensionContext);
 			Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,
 				context.getExtensionRegistry());
 			TestSource source = getSource().orElseThrow(

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -299,9 +299,9 @@ private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(Method method) {
 		return (extensionContext, registry) -> invokeMethodInExtensionContext(method, extensionContext, registry);
 	}
 
-	private void invokeMethodInExtensionContext(Method method, ExtensionContext context, ExtensionRegistry registry) {
-		Object testInstance = context.getTestInstance().orElseThrow(() -> new JUnitException(
-			"Illegal state: test instance not present for method: " + method.toGenericString()));
+	private void invokeMethodInExtensionContext(Method method, AbstractExtensionContext<?> context,
+			ExtensionRegistry registry) {
+		Object testInstance = context.getRequiredTestInstance();
 
 		testInstance = ReflectionUtils.getOutermostInstance(testInstance, method.getDeclaringClass()).orElseThrow(
 			() -> new JUnitException("Failed to find instance for method: " + method.toGenericString()));

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
-import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
@@ -28,6 +27,6 @@
 @API(Internal)
 public interface AfterEachMethodAdapter extends Extension {
 
-	void invokeAfterEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;
+	void invokeAfterEachMethod(AbstractExtensionContext<?> context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
-import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
@@ -28,6 +27,6 @@
 @API(Internal)
 public interface BeforeEachMethodAdapter extends Extension {
 
-	void invokeBeforeEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;
+	void invokeBeforeEachMethod(AbstractExtensionContext<?> context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -76,7 +76,7 @@ void streamsFromTestFactoriesShouldBeClosedWhenTheyThrow() {
 
 	private void prepareMockForTestInstanceWithCustomStream(Stream<?> stream) {
 		Stream<?> mockStream = stream.onClose(() -> isClosed = true);
-		when(extensionContext.getTestInstance()).thenReturn(Optional.of(new CustomStreamTestCase(mockStream)));
+		when(extensionContext.getRequiredTestInstance()).thenReturn(new CustomStreamTestCase(mockStream));
 	}
 
 	private static class CustomStreamTestCase {

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/AbstractTestRuleSupport.java
Patch:
@@ -74,7 +74,7 @@ private void invokeAppropriateMethodOnRuleAnnotatedMembers(ExtensionContext cont
 			Consumer<GenericBeforeAndAfterAdvice> methodCaller) {
 
 		Object testInstance = context.getTestInstance().orElseThrow(
-			() -> new JUnitException("Illegal state: test instance not present for rule: " + getRuleType().getName()));
+			() -> new JUnitException("Illegal state: required test instance is not present"));
 		List<T> members = findRuleAnnotatedMembers(testInstance);
 
 		// @formatter:off

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -24,7 +24,8 @@
 class TestInfoDemo {
 
 	TestInfoDemo(TestInfo testInfo) {
-		assertEquals("TestInfo Demo", testInfo.getDisplayName());
+		String displayName = testInfo.getDisplayName();
+		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2()"));
 	}
 
 	@BeforeEach

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
 import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
@@ -36,7 +36,7 @@ public JupiterEngineDescriptor(UniqueId uniqueId) {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry extensionRegistry = createRegistryWithDefaultExtensions(context.getConfigurationParameters());
 		EngineExecutionListener executionListener = context.getExecutionListener();
-		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this);
+		AbstractExtensionContext<?> extensionContext = new JupiterEngineExtensionContext(executionListener, this);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
@@ -58,11 +58,11 @@ public final Set<TestTag> getTags() {
 
 	@Override
 	protected Object instantiateTestClass(JupiterEngineExecutionContext parentExecutionContext,
-			ExtensionRegistry registry, ExtensionContext extensionContext) {
+			ExtensionRegistry registry, AbstractExtensionContext<?> extensionContext) {
 
 		// Extensions registered for nested classes and below are not to be used for instantiating outer classes
 		Optional<ExtensionRegistry> childExtensionRegistryForOuterInstance = Optional.empty();
-		Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(
+		Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(extensionContext,
 			childExtensionRegistryForOuterInstance);
 		Constructor<?> constructor = ReflectionUtils.getDeclaredConstructor(getTestClass());
 		return executableInvoker.invoke(constructor, outerInstance, extensionContext, registry);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -24,6 +24,7 @@
 @API(Internal)
 public interface TestInstanceProvider {
 
-	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);
+	Object getTestInstance(AbstractExtensionContext<?> childExtensionContext,
+			Optional<ExtensionRegistry> childExtensionRegistry);
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/extension/KitchenSinkExtension.java
Patch:
@@ -85,7 +85,7 @@ public void afterAll(ExtensionContext context) throws Exception {
 	// --- Dependency Injection ------------------------------------------------
 
 	@Override
-	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {
+	public void postProcessTestInstance(ExtensionContext context) throws Exception {
 	}
 
 	@Override
@@ -118,7 +118,6 @@ public boolean supportsTestTemplate(ExtensionContext context) {
 
 	@Override
 	public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {
-
 		return null;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestFactory;
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.UniqueId;
@@ -36,13 +36,13 @@
 class TestFactoryTestDescriptorTests {
 
 	private JupiterEngineExecutionContext context;
-	private ExtensionContext extensionContext;
+	private AbstractExtensionContext<?> extensionContext;
 	private TestFactoryTestDescriptor descriptor;
 	private boolean isClosed;
 
 	@BeforeEach
 	void before() throws Exception {
-		extensionContext = mock(ExtensionContext.class);
+		extensionContext = mock(AbstractExtensionContext.class);
 		isClosed = false;
 
 		context = new JupiterEngineExecutionContext(null, null).extend().withThrowableCollector(

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -912,7 +912,6 @@ public void postProcessTestInstance(ExtensionContext context) {
 			});
 			String key = postProcessTestInstanceKey(testInstance.getClass(), context.getTestClass().get(),
 				context.getTestMethod().map(Method::getName).orElse(null));
-			System.out.println(testInstance.getClass() + " : " + key);
 			instanceMap.put(key, testInstance);
 		}
 

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -24,7 +24,8 @@
 class TestInfoDemo {
 
 	TestInfoDemo(TestInfo testInfo) {
-		assertEquals("TestInfo Demo", testInfo.getDisplayName());
+		String displayName = testInfo.getDisplayName();
+		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2()"));
 	}
 
 	@BeforeEach

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
 import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
@@ -36,7 +36,7 @@ public JupiterEngineDescriptor(UniqueId uniqueId) {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry extensionRegistry = createRegistryWithDefaultExtensions(context.getConfigurationParameters());
 		EngineExecutionListener executionListener = context.getExecutionListener();
-		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this);
+		AbstractExtensionContext<?> extensionContext = new JupiterEngineExtensionContext(executionListener, this);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
@@ -58,11 +58,11 @@ public final Set<TestTag> getTags() {
 
 	@Override
 	protected Object instantiateTestClass(JupiterEngineExecutionContext parentExecutionContext,
-			ExtensionRegistry registry, ExtensionContext extensionContext) {
+			ExtensionRegistry registry, AbstractExtensionContext<?> extensionContext) {
 
 		// Extensions registered for nested classes and below are not to be used for instantiating outer classes
 		Optional<ExtensionRegistry> childExtensionRegistryForOuterInstance = Optional.empty();
-		Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(
+		Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(extensionContext,
 			childExtensionRegistryForOuterInstance);
 		Constructor<?> constructor = ReflectionUtils.getDeclaredConstructor(getTestClass());
 		return executableInvoker.invoke(constructor, outerInstance, extensionContext, registry);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -24,6 +24,7 @@
 @API(Internal)
 public interface TestInstanceProvider {
 
-	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);
+	Object getTestInstance(AbstractExtensionContext<?> childExtensionContext,
+			Optional<ExtensionRegistry> childExtensionRegistry);
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestFactory;
-import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.engine.execution.AbstractExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.engine.UniqueId;
@@ -36,13 +36,13 @@
 class TestFactoryTestDescriptorTests {
 
 	private JupiterEngineExecutionContext context;
-	private ExtensionContext extensionContext;
+	private AbstractExtensionContext<?> extensionContext;
 	private TestFactoryTestDescriptor descriptor;
 	private boolean isClosed;
 
 	@BeforeEach
 	void before() throws Exception {
-		extensionContext = mock(ExtensionContext.class);
+		extensionContext = mock(AbstractExtensionContext.class);
 		isClosed = false;
 
 		context = new JupiterEngineExecutionContext(null, null).extend().withThrowableCollector(

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -287,7 +287,6 @@ private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(Method method) {
 	}
 
 	private void invokeMethodInExtensionContext(Method method, ExtensionContext context, ExtensionRegistry registry) {
-
 		Object testInstance = context.getTestInstance().orElseThrow(() -> new JUnitException(
 			"Illegal state: test instance not present for method: " + method.toGenericString()));
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.TestDescriptor;
@@ -59,7 +60,8 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 			context.getExtensionRegistry());
 
 		// The test instance should be properly maintained by the enclosing class's ExtensionContext.
-		Object testInstance = context.getExtensionContext().getTestInstance().orElse(null);
+		Object testInstance = context.getExtensionContext().getTestInstance().orElseThrow(() -> new JUnitException(
+			"Illegal state: test instance not present for method: " + getTestMethod().toGenericString()));
 
 		ExtensionContext extensionContext = new TestTemplateExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, testInstance);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/extension/KitchenSinkExtension.java
Patch:
@@ -85,7 +85,7 @@ public void afterAll(ExtensionContext context) throws Exception {
 	// --- Dependency Injection ------------------------------------------------
 
 	@Override
-	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {
+	public void postProcessTestInstance(ExtensionContext context) throws Exception {
 	}
 
 	@Override
@@ -118,7 +118,6 @@ public boolean supportsTestTemplate(ExtensionContext context) {
 
 	@Override
 	public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {
-
 		return null;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -877,9 +877,8 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con
 		}
 
 		@Override
-		public void postProcessTestInstance(Object testInstance, ExtensionContext context) {
-			assertNotNull(testInstance);
-			context.getTestInstance().ifPresent(instance -> assertSame(testInstance, instance));
+		public void postProcessTestInstance(ExtensionContext context) {
+			Object testInstance = context.getTestInstance().orElse(null);
 			instanceMap.put(postProcessTestInstanceKey(context.getTestClass().get()), testInstance);
 		}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInstance.java
Patch:
@@ -28,7 +28,7 @@
  * a test class hierarchy.
  *
  * <h3>Use Cases</h3>
- * <p>Setting the test instance lifecycle mode to {@link Lifecycle.PER_CLASS
+ * <p>Setting the test instance lifecycle mode to {@link Lifecycle#PER_CLASS
  * PER_CLASS} enables the following features.
  * <ul>
  * <li>Shared test instance state between test methods in a given test class

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -48,7 +48,7 @@ public interface TestExecutionExceptionHandler extends Extension {
 	 * the next registered {@code TestExecutionExceptionHandler} (if there is
 	 * one) will be invoked with any {@link Throwable} thrown by this handler.
 	 *
-	 * <p>Note that the {@link ExtensionContext#getTestException() test
+	 * <p>Note that the {@link ExtensionContext#getExecutionException() execution
 	 * exception} in the supplied {@code ExtensionContext} will <em>not</em>
 	 * contain the {@code Throwable} thrown during invocation of the corresponding
 	 * {@code @Test} method.

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassExtensionContext.java
Patch:
@@ -62,7 +62,7 @@ public Optional<Method> getTestMethod() {
 	}
 
 	@Override
-	public Optional<Throwable> getTestException() {
+	public Optional<Throwable> getExecutionException() {
 		return Optional.ofNullable(this.throwableCollector.getThrowable());
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineExtensionContext.java
Patch:
@@ -51,7 +51,7 @@ public Optional<Method> getTestMethod() {
 	}
 
 	@Override
-	public Optional<Throwable> getTestException() {
+	public Optional<Throwable> getExecutionException() {
 		return Optional.empty();
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodExtensionContext.java
Patch:
@@ -61,7 +61,7 @@ public Optional<Object> getTestInstance() {
 	}
 
 	@Override
-	public Optional<Throwable> getTestException() {
+	public Optional<Throwable> getExecutionException() {
 		return Optional.ofNullable(this.throwableCollector.getThrowable());
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateExtensionContext.java
Patch:
@@ -56,7 +56,7 @@ public Optional<Method> getTestMethod() {
 	}
 
 	@Override
-	public Optional<Throwable> getTestException() {
+	public Optional<Throwable> getExecutionException() {
 		return Optional.empty();
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -269,7 +269,7 @@ public void beforeAll(ExtensionContext context) {
 		@Override
 		public void afterAll(ExtensionContext context) {
 			callSequence.add("fooAfterAllCallback");
-			actualExceptionInAfterAllCallback = context.getTestException();
+			actualExceptionInAfterAllCallback = context.getExecutionException();
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterEachTests.java
Patch:
@@ -497,7 +497,7 @@ public void beforeEach(ExtensionContext context) {
 		@Override
 		public void afterEach(ExtensionContext context) {
 			callSequence.add("fooAfterEachCallback");
-			actualExceptionInAfterEachCallback = context.getTestException();
+			actualExceptionInAfterEachCallback = context.getExecutionException();
 		}
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterTestExecutionCallbackTests.java
Patch:
@@ -433,7 +433,7 @@ public void beforeTestExecution(ExtensionContext context) {
 		@Override
 		public void afterTestExecution(ExtensionContext context) {
 			callSequence.add("fooAfterTestExecutionCallback");
-			actualExceptionInAfterTestExecution = context.getTestException();
+			actualExceptionInAfterTestExecution = context.getExecutionException();
 		}
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestExtensionTests.java
Patch:
@@ -134,7 +134,7 @@ public java.util.Optional<Object> getTestInstance() {
 			}
 
 			@Override
-			public Optional<Throwable> getTestException() {
+			public Optional<Throwable> getExecutionException() {
 				return Optional.empty();
 			}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -131,15 +131,16 @@ public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext conte
 		registerBeforeEachMethodAdapters(registry);
 		registerAfterEachMethodAdapters(registry);
 
+		ThrowableCollector throwableCollector = new ThrowableCollector();
 		ClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),
-			context.getExecutionListener(), this);
+			context.getExecutionListener(), this, throwableCollector);
 
 		// @formatter:off
 		return context.extend()
 				.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))
 				.withExtensionRegistry(registry)
 				.withExtensionContext(extensionContext)
-				.withThrowableCollector(new ThrowableCollector())
+				.withThrowableCollector(throwableCollector)
 				.build();
 		// @formatter:on
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/JUnit5EngineExecutionContextTests.java
Patch:
@@ -47,7 +47,7 @@ void executionListenerIsHandedOnWhenContextIsExtended() {
 
 	@Test
 	void extendWithAllAttributes() {
-		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, null);
+		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, null, null);
 		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(configParams);
 		TestInstanceProvider testInstanceProvider = mock(TestInstanceProvider.class);
 		JupiterEngineExecutionContext newContext = originalContext.extend() //
@@ -63,10 +63,10 @@ void extendWithAllAttributes() {
 
 	@Test
 	void canOverrideAttributeWhenContextIsExtended() {
-		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, null);
+		ClassExtensionContext extensionContext = new ClassExtensionContext(null, null, null, null);
 		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(configParams);
 		TestInstanceProvider testInstanceProvider = mock(TestInstanceProvider.class);
-		ClassExtensionContext newExtensionContext = new ClassExtensionContext(extensionContext, null, null);
+		ClassExtensionContext newExtensionContext = new ClassExtensionContext(extensionContext, null, null, null);
 
 		JupiterEngineExecutionContext newContext = originalContext.extend() //
 				.withExtensionContext(extensionContext) //

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -18,8 +18,7 @@
 import org.junit.platform.commons.util.ToStringBuilder;
 
 /**
- * The result of evaluating a {@link ContainerExecutionCondition} or
- * {@linkplain TestExecutionCondition}.
+ * The result of evaluating an {@linkplain ExecutionCondition}.
  *
  * @since 5.0
  */

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -29,8 +29,7 @@
  *
  * <h3>Supported Extension APIs</h3>
  * <ul>
- * <li>{@link ContainerExecutionCondition}</li>
- * <li>{@link TestExecutionCondition}</li>
+ * <li>{@link ExecutionCondition}</li>
  * <li>{@link BeforeAllCallback}</li>
  * <li>{@link AfterAllCallback}</li>
  * <li>{@link BeforeEachCallback}</li>

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestReporter;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.converter.ConvertWith;
 import org.junit.jupiter.params.converter.JavaTimeConversionPattern;
@@ -161,7 +161,7 @@ void testWithArgumentsSource(String argument) {
 	static class MyArgumentsProvider implements ArgumentsProvider {
 
 		@Override
-		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
+		public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 			return Stream.of("foo", "bar").map(Arguments::of);
 		}
 	}

File: documentation/src/test/java/example/exception/IgnoreIOExceptionExtension.java
Patch:
@@ -12,15 +12,15 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;
-import org.junit.jupiter.api.extension.TestExtensionContext;
 
 // @formatter:off
 // tag::user_guide[]
 public class IgnoreIOExceptionExtension implements TestExecutionExceptionHandler {
 
 	@Override
-	public void handleTestExecutionException(TestExtensionContext context, Throwable throwable)
+	public void handleTestExecutionException(ExtensionContext context, Throwable throwable)
 			throws Throwable {
 
 		if (throwable instanceof IOException) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -41,6 +41,6 @@ public interface AfterAllCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void afterAll(ContainerExtensionContext context) throws Exception;
+	void afterAll(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -45,6 +45,6 @@ public interface AfterEachCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void afterEach(TestExtensionContext context) throws Exception;
+	void afterEach(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -44,6 +44,6 @@ public interface AfterTestExecutionCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void afterTestExecution(TestExtensionContext context) throws Exception;
+	void afterTestExecution(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -41,6 +41,6 @@ public interface BeforeAllCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void beforeAll(ContainerExtensionContext context) throws Exception;
+	void beforeAll(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -43,6 +43,6 @@ public interface BeforeEachCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void beforeEach(TestExtensionContext context) throws Exception;
+	void beforeEach(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -44,6 +44,6 @@ public interface BeforeTestExecutionCallback extends Extension {
 	 *
 	 * @param context the current extension context; never {@code null}
 	 */
-	void beforeTestExecution(TestExtensionContext context) throws Exception;
+	void beforeTestExecution(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -130,7 +130,7 @@ public interface ExtensionContext {
 
 	/**
 	 * Get the exception that was thrown during execution of the test associated
-	 * with this {@code TestExtensionContext}, if available.
+	 * with this {@code ExtensionContext}, if available.
 	 *
 	 * <p>This method is typically used for logging and tracing purposes. If you
 	 * wish to actually <em>handle</em> an exception thrown during test execution,

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -48,14 +48,14 @@ public interface TestExecutionExceptionHandler extends Extension {
 	 * the next registered {@code TestExecutionExceptionHandler} (if there is
 	 * one) will be invoked with any {@link Throwable} thrown by this handler.
 	 *
-	 * <p>Note that the {@link TestExtensionContext#getTestException() test
-	 * exception} in the supplied {@code TestExtensionContext} will <em>not</em>
+	 * <p>Note that the {@link ExtensionContext#getTestException() test
+	 * exception} in the supplied {@code ExtensionContext} will <em>not</em>
 	 * contain the {@code Throwable} thrown during invocation of the corresponding
 	 * {@code @Test} method.
 	 *
 	 * @param context the current extension context; never {@code null}
 	 * @param throwable the {@code Throwable} to handle; never {@code null}
 	 */
-	void handleTestExecutionException(TestExtensionContext context, Throwable throwable) throws Throwable;
+	void handleTestExecutionException(ExtensionContext context, Throwable throwable) throws Throwable;
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterEngineDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.engine.extension.ExtensionRegistry.createRegistryWithDefaultExtensions;
 import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
@@ -36,7 +36,7 @@ public JupiterEngineDescriptor(UniqueId uniqueId) {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry extensionRegistry = createRegistryWithDefaultExtensions(context.getConfigurationParameters());
 		EngineExecutionListener executionListener = context.getExecutionListener();
-		ContainerExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this);
+		ExtensionContext extensionContext = new JupiterEngineExtensionContext(executionListener, this);
 
 		// @formatter:off
 		return context.extend()

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
-import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
@@ -28,6 +28,6 @@
 @API(Internal)
 public interface AfterEachMethodAdapter extends Extension {
 
-	void invokeAfterEachMethod(TestExtensionContext context, ExtensionRegistry registry) throws Throwable;
+	void invokeAfterEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
-import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
@@ -28,6 +28,6 @@
 @API(Internal)
 public interface BeforeEachMethodAdapter extends Extension {
 
-	void invokeBeforeEachMethod(TestExtensionContext context, ExtensionRegistry registry) throws Throwable;
+	void invokeBeforeEachMethod(ExtensionContext context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/FullLogging.java
Patch:
@@ -24,8 +24,8 @@
 
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**
@@ -52,7 +52,7 @@ class Extension implements BeforeAllCallback, AfterAllCallback {
 		private final Map<String, Level> previouslyActiveLogLevels = new HashMap<>();
 
 		@Override
-		public void beforeAll(ContainerExtensionContext context) throws Exception {
+		public void beforeAll(ExtensionContext context) throws Exception {
 			Class<?> testClass = context.getTestClass().get();
 
 			// @formatter:off
@@ -72,7 +72,7 @@ public void beforeAll(ContainerExtensionContext context) throws Exception {
 		}
 
 		@Override
-		public void afterAll(ContainerExtensionContext context) throws Exception {
+		public void afterAll(ExtensionContext context) throws Exception {
 			previouslyActiveLogLevels.forEach(
 				(loggerName, previousLogLevel) -> Logger.getLogger(loggerName).setLevel(previousLogLevel));
 		}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ServiceLoaderExtension.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.engine.extension;
 
 import org.junit.jupiter.api.extension.BeforeAllCallback;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 
 /**
  * Demo extension for auto-detection of extensions loaded via Java's
@@ -22,7 +22,7 @@
 public class ServiceLoaderExtension implements BeforeAllCallback {
 
 	@Override
-	public void beforeAll(ContainerExtensionContext context) throws Exception {
+	public void beforeAll(ExtensionContext context) throws Exception {
 	}
 
 }

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
-import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;
 import org.junit.jupiter.migrationsupport.rules.adapter.ExternalResourceAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
@@ -53,13 +53,13 @@ public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCal
 		ExternalResource.class);
 
 	@Override
-	public void beforeEach(TestExtensionContext context) throws Exception {
+	public void beforeEach(ExtensionContext context) throws Exception {
 		this.fieldSupport.beforeEach(context);
 		this.methodSupport.beforeEach(context);
 	}
 
 	@Override
-	public void afterEach(TestExtensionContext context) throws Exception {
+	public void afterEach(ExtensionContext context) throws Exception {
 		this.methodSupport.afterEach(context);
 		this.fieldSupport.afterEach(context);
 	}

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.function.Function;
 
 import org.junit.jupiter.api.extension.AfterEachCallback;
-import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.migrationsupport.rules.adapter.AbstractTestRuleAdapter;
 import org.junit.jupiter.migrationsupport.rules.adapter.VerifierAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
@@ -51,7 +51,7 @@ public class VerifierSupport implements AfterEachCallback {
 		Verifier.class);
 
 	@Override
-	public void afterEach(TestExtensionContext context) throws Exception {
+	public void afterEach(ExtensionContext context) throws Exception {
 		this.fieldSupport.afterEach(context);
 		this.methodSupport.afterEach(context);
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.stream.Stream;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.meta.API;
 
 /**
@@ -42,6 +42,6 @@ public interface ArgumentsProvider {
 	 * @param context the current extension context; never {@code null}
 	 * @return a stream of arguments; never {@code null}
 	 */
-	Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) throws Exception;
+	Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception;
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -16,7 +16,7 @@
 import com.univocity.parsers.csv.CsvParser;
 import com.univocity.parsers.csv.CsvParserSettings;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 
 /**
@@ -34,7 +34,7 @@ public void accept(CsvSource annotation) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		CsvParserSettings settings = new CsvParserSettings();
 		settings.getFormat().setDelimiter(delimiter);
 		settings.getFormat().setQuote('\'');

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -25,7 +25,7 @@
 import com.univocity.parsers.csv.CsvParser;
 import com.univocity.parsers.csv.CsvParserSettings;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
@@ -60,7 +60,7 @@ public void accept(CsvFileSource annotation) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		// @formatter:off
 		return Arrays.stream(resources)
 				.map(resource -> openInputStream(context, resource))
@@ -69,7 +69,7 @@ public Stream<? extends Arguments> provideArguments(ContainerExtensionContext co
 		// @formatter:on
 	}
 
-	private InputStream openInputStream(ContainerExtensionContext context, String resource) {
+	private InputStream openInputStream(ExtensionContext context, String resource) {
 		Class<?> testClass = context.getTestClass().orElseThrow(
 			() -> new JUnitException("Cannot load classpath resource without test class"));
 		return Preconditions.notNull(inputStreamProvider.apply(testClass, resource),

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumArgumentsProvider.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Set;
 import java.util.stream.Stream;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 import org.junit.platform.commons.util.Preconditions;
 
@@ -46,7 +46,7 @@ public void accept(EnumSource enumSource) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		return constants.stream().map(Arguments::of);
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Arrays;
 import java.util.stream.Stream;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.CollectionUtils;
@@ -32,7 +32,7 @@ public void accept(MethodSource annotation) {
 	}
 
 	@Override
-	public Stream<Arguments> provideArguments(ContainerExtensionContext context) {
+	public Stream<Arguments> provideArguments(ExtensionContext context) {
 		Class<?> testClass = context.getTestClass() //
 				.orElseThrow(() -> new JUnitException("Cannot invoke method without test class"));
 		// @formatter:off

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 import org.junit.platform.commons.util.Preconditions;
 
@@ -43,7 +43,7 @@ public void accept(ValueSource source) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
 		return Arrays.stream(arguments).map(Arguments::of);
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.jupiter.params.converter.ArgumentConversionException;
@@ -217,7 +217,7 @@ static Stream<String> providerMethod() {
 	private static class TwoSingleStringArgumentsProvider implements ArgumentsProvider {
 
 		@Override
-		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) throws Exception {
+		public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
 			return Stream.of(Arguments.of("foo"), Arguments.of("bar"));
 		}
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**
@@ -118,7 +118,7 @@ private Stream<Object[]> provideArguments(InputStream inputStream, String lineSe
 
 	private Stream<Object[]> provide(CsvFileArgumentsProvider provider, CsvFileSource annotation) {
 		provider.accept(annotation);
-		ContainerExtensionContext context = mock(ContainerExtensionContext.class);
+		ExtensionContext context = mock(ExtensionContext.class);
 		when(context.getTestClass()).thenReturn(Optional.of(CsvFileArgumentsProviderTests.class));
 		return provider.provideArguments(context).map(Arguments::get);
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ContainerExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
@@ -135,7 +135,7 @@ private Stream<Object[]> provideArguments(Class<?> testClass, String... methodNa
 		MethodSource annotation = mock(MethodSource.class);
 		when(annotation.value()).thenReturn(methodNames);
 
-		ContainerExtensionContext context = mock(ContainerExtensionContext.class);
+		ExtensionContext context = mock(ExtensionContext.class);
 		when(context.getTestClass()).thenReturn(Optional.ofNullable(testClass));
 
 		MethodArgumentsProvider provider = new MethodArgumentsProvider();

File: platform-tests/src/test/java/org/junit/jupiter/extensions/TempDirectory.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolutionException;
 import org.junit.jupiter.api.extension.ParameterResolver;
-import org.junit.jupiter.api.extension.TestExtensionContext;
 
 /**
  * @since 1.0
@@ -55,7 +54,7 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
 	}
 
 	@Override
-	public void afterEach(TestExtensionContext context) throws Exception {
+	public void afterEach(ExtensionContext context) throws Exception {
 		Path tempDirectory = (Path) getLocalStore(context).get(KEY);
 		if (tempDirectory != null) {
 			delete(tempDirectory);

File: documentation/src/test/java/example/testinterface/TestLifecycleLogger.java
Patch:
@@ -19,18 +19,18 @@
 import org.junit.jupiter.api.TestInfo;
 
 // tag::user_guide[]
-public interface TestLifecycleLogger {
+interface TestLifecycleLogger {
 
 	static final Logger LOG = Logger.getLogger(TestLifecycleLogger.class.getName());
 
 	@BeforeAll
 	static void beforeAllTests() {
-		LOG.info("beforeAllTests");
+		LOG.info("Before all tests");
 	}
 
 	@AfterAll
 	static void afterAllTests() {
-		LOG.info("afterAllTests");
+		LOG.info("After all tests");
 	}
 
 	@BeforeEach

File: documentation/src/test/java/example/testinterface/TimeExecutionLogger.java
Patch:
@@ -18,6 +18,6 @@
 //tag::user_guide[]
 @Tag("timed")
 @ExtendWith(TimingExtension.class)
-public interface TimeExecutionLogger {
+interface TimeExecutionLogger {
 }
 //end::user_guide[]

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -168,7 +169,8 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		throwableCollector.execute(() -> {
 			try {
 				Method testMethod = getTestMethod();
-				Object instance = testExtensionContext.getTestInstance();
+				Object instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(
+					"Illegal state: test instance not present for method: " + testMethod.toGenericString()));
 				executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());
 			}
 			catch (Throwable throwable) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -24,6 +24,6 @@
 @API(Internal)
 public interface TestInstanceProvider {
 
-	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry) throws Exception;
+	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/NestedTestClassesTests.java
Patch:
@@ -115,7 +115,7 @@ void failing() {
 		}
 	}
 
-	static private class TestCaseWithDoubleNesting {
+	private static class TestCaseWithDoubleNesting {
 
 		static int beforeTopCount = 0;
 		static int beforeNestedCount = 0;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -76,7 +76,7 @@ void streamsFromTestFactoriesShouldBeClosedWhenTheyThrow() {
 
 	private void prepareMockForTestInstanceWithCustomStream(Stream<?> stream) {
 		Stream<?> mockStream = stream.onClose(() -> isClosed = true);
-		when(testExtensionContext.getTestInstance()).thenReturn(new CustomStreamTestCase(mockStream));
+		when(testExtensionContext.getTestInstance()).thenReturn(Optional.of(new CustomStreamTestCase(mockStream)));
 	}
 
 	private static class CustomStreamTestCase {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextTests.java
Patch:
@@ -114,7 +114,7 @@ void fromMethodTestDescriptor() {
 			() -> assertThat(testExtensionContext.getTestClass()).contains(OuterClass.class), //
 			() -> assertThat(testExtensionContext.getDisplayName()).isEqualTo(methodTestDescriptor.getDisplayName()), //
 			() -> assertThat(testExtensionContext.getParent()).contains(classExtensionContext), //
-			() -> assertThat(testExtensionContext.getTestInstance()).isExactlyInstanceOf(OuterClass.class) //
+			() -> assertThat(testExtensionContext.getTestInstance().get()).isExactlyInstanceOf(OuterClass.class) //
 		);
 	}
 
@@ -187,8 +187,9 @@ private ClassTestDescriptor nestedClassDescriptor() {
 	private ClassTestDescriptor outerClassDescriptor(TestDescriptor child) {
 		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(UniqueId.root("class", "OuterClass"),
 			OuterClass.class);
-		if (child != null)
+		if (child != null) {
 			classTestDescriptor.addChild(child);
+		}
 		return classTestDescriptor;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -72,6 +72,7 @@ protected TestInstanceProvider testInstanceProvider(JupiterEngineExecutionContex
 			Constructor<?> constructor = ReflectionUtils.getDeclaredConstructor(getTestClass());
 			Object instance = executableInvoker.invoke(constructor, outerInstance, extensionContext, registryToUse);
 
+			updateTestInstanceInContainerExtensionContext(extensionContext, instance);
 			invokeTestInstancePostProcessors(instance, registryToUse, extensionContext);
 
 			return instance;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestExtensionContext.java
Patch:
@@ -35,7 +35,9 @@ public final class MethodBasedTestExtensionContext extends AbstractExtensionCont
 
 	public MethodBasedTestExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener,
 			MethodTestDescriptor testDescriptor, Object testInstance, ThrowableCollector throwableCollector) {
+
 		super(parent, engineExecutionListener, testDescriptor);
+
 		this.testInstance = testInstance;
 		this.throwableCollector = throwableCollector;
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestInstanceLifecycleTests.java
Patch:
@@ -124,6 +124,8 @@ private void performAssertions(Class<?> testClass, int containers, int tests, in
 
 		ExecutionEventRecorder eventRecorder = executeTestsForClass(testClass);
 
+		// eventRecorder.eventStream().forEach(System.out::println);
+
 		// @formatter:off
 		assertAll(
 			() -> assertEquals(containers, eventRecorder.getContainerStartedCount(), "# containers started"),

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.platform.engine.TestDescriptor;
@@ -168,7 +169,8 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		throwableCollector.execute(() -> {
 			try {
 				Method testMethod = getTestMethod();
-				Object instance = testExtensionContext.getTestInstance().get();
+				Object instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(
+					"Illegal state: test instance not present for method: " + testMethod.toGenericString()));
 				executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());
 			}
 			catch (Throwable throwable) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -66,7 +66,8 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();
 
 		context.getThrowableCollector().execute(() -> {
-			Object instance = testExtensionContext.getTestInstance().get();
+			Object instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(
+				"Illegal state: test instance not present for method: " + getTestMethod().toGenericString()));
 			Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,
 				context.getExtensionRegistry());
 			TestSource source = getSource().orElseThrow(() -> new JUnitException("Test source must be present"));

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/AbstractTestRuleSupport.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.jupiter.migrationsupport.rules.adapter.GenericBeforeAndAfterAdvice;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMemberFactory;
+import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.ExceptionUtils;
 import org.junit.rules.TestRule;
 
@@ -72,7 +73,8 @@ public void afterEach(TestExtensionContext context) throws Exception {
 	private void invokeAppropriateMethodOnRuleAnnotatedMembers(TestExtensionContext context,
 			Consumer<GenericBeforeAndAfterAdvice> methodCaller) {
 
-		Object testInstance = context.getTestInstance().get();
+		Object testInstance = context.getTestInstance().orElseThrow(
+			() -> new JUnitException("Illegal state: test instance not present for rule: " + getRuleType().getName()));
 		List<T> members = findRuleAnnotatedMembers(testInstance);
 
 		// @formatter:off

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -282,7 +282,7 @@ private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(Method method) {
 	private void invokeMethodInTestExtensionContext(Method method, TestExtensionContext context,
 			ExtensionRegistry registry) {
 
-		Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance(),
+		Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance().get(),
 			method.getDeclaringClass()).orElseThrow(
 				() -> new JUnitException("Failed to find instance for method: " + method.toGenericString()));
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestExtensionContext.java
Patch:
@@ -56,8 +56,8 @@ public Optional<Method> getTestMethod() {
 	}
 
 	@Override
-	public Object getTestInstance() {
-		return this.testInstance;
+	public Optional<Object> getTestInstance() {
+		return Optional.of(this.testInstance);
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -168,7 +168,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		throwableCollector.execute(() -> {
 			try {
 				Method testMethod = getTestMethod();
-				Object instance = testExtensionContext.getTestInstance();
+				Object instance = testExtensionContext.getTestInstance().get();
 				executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());
 			}
 			catch (Throwable throwable) {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -66,7 +66,7 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 		TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();
 
 		context.getThrowableCollector().execute(() -> {
-			Object instance = testExtensionContext.getTestInstance();
+			Object instance = testExtensionContext.getTestInstance().get();
 			Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,
 				context.getExtensionRegistry());
 			TestSource source = getSource().orElseThrow(() -> new JUnitException("Test source must be present"));

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptorTests.java
Patch:
@@ -76,7 +76,7 @@ void streamsFromTestFactoriesShouldBeClosedWhenTheyThrow() {
 
 	private void prepareMockForTestInstanceWithCustomStream(Stream<?> stream) {
 		Stream<?> mockStream = stream.onClose(() -> isClosed = true);
-		when(testExtensionContext.getTestInstance()).thenReturn(new CustomStreamTestCase(mockStream));
+		when(testExtensionContext.getTestInstance()).thenReturn(Optional.of(new CustomStreamTestCase(mockStream)));
 	}
 
 	private static class CustomStreamTestCase {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextTests.java
Patch:
@@ -114,7 +114,7 @@ void fromMethodTestDescriptor() {
 			() -> assertThat(testExtensionContext.getTestClass()).contains(OuterClass.class), //
 			() -> assertThat(testExtensionContext.getDisplayName()).isEqualTo(methodTestDescriptor.getDisplayName()), //
 			() -> assertThat(testExtensionContext.getParent()).contains(classExtensionContext), //
-			() -> assertThat(testExtensionContext.getTestInstance()).isExactlyInstanceOf(OuterClass.class) //
+			() -> assertThat(testExtensionContext.getTestInstance().get()).isExactlyInstanceOf(OuterClass.class) //
 		);
 	}
 
@@ -187,8 +187,9 @@ private ClassTestDescriptor nestedClassDescriptor() {
 	private ClassTestDescriptor outerClassDescriptor(TestDescriptor child) {
 		ClassTestDescriptor classTestDescriptor = new ClassTestDescriptor(UniqueId.root("class", "OuterClass"),
 			OuterClass.class);
-		if (child != null)
+		if (child != null) {
 			classTestDescriptor.addChild(child);
+		}
 		return classTestDescriptor;
 	}
 

File: junit-jupiter-migrationsupport/src/main/java/org/junit/jupiter/migrationsupport/rules/AbstractTestRuleSupport.java
Patch:
@@ -72,11 +72,12 @@ public void afterEach(TestExtensionContext context) throws Exception {
 	private void invokeAppropriateMethodOnRuleAnnotatedMembers(TestExtensionContext context,
 			Consumer<GenericBeforeAndAfterAdvice> methodCaller) {
 
-		List<T> members = findRuleAnnotatedMembers(context.getTestInstance());
+		Object testInstance = context.getTestInstance().get();
+		List<T> members = findRuleAnnotatedMembers(testInstance);
 
 		// @formatter:off
 		members.stream()
-				.map(member -> TestRuleAnnotatedMemberFactory.from(context.getTestInstance(), member))
+				.map(member -> TestRuleAnnotatedMemberFactory.from(testInstance, member))
 				.map(this.adapterGenerator)
 				.forEach(methodCaller::accept);
 		// @formatter:on

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -24,6 +24,6 @@
 @API(Internal)
 public interface TestInstanceProvider {
 
-	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry) throws Exception;
+	Object getTestInstance(Optional<ExtensionRegistry> childExtensionRegistry);
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/NestedTestClassesTests.java
Patch:
@@ -115,7 +115,7 @@ void failing() {
 		}
 	}
 
-	static private class TestCaseWithDoubleNesting {
+	private static class TestCaseWithDoubleNesting {
 
 		static int beforeTopCount = 0;
 		static int beforeNestedCount = 0;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -60,8 +60,9 @@ public final Set<TestTag> getTags() {
 	@Override
 	protected TestInstanceProvider testInstanceProvider(JupiterEngineExecutionContext parentExecutionContext,
 			ExtensionRegistry registry, ExtensionContext extensionContext) {
+
 		return childExtensionRegistry -> {
-			// Extensions registered for nested classes and below are not to be used for instancing outer classes
+			// Extensions registered for nested classes and below are not to be used for instantiating outer classes
 			Optional<ExtensionRegistry> childExtensionRegistryForOuterInstance = Optional.empty();
 			Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance(
 				childExtensionRegistryForOuterInstance);

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/TestEngineSpy.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class TestEngineSpy implements TestEngine {
 
-	private static final String ID = TestEngineSpy.class.getSimpleName();
+	public static final String ID = TestEngineSpy.class.getSimpleName();
 
 	public EngineDiscoveryRequest discoveryRequestForDiscovery;
 	public UniqueId uniqueIdForDiscovery;

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/ExecutionEventRecorder.java
Patch:
@@ -103,7 +103,7 @@ public long getReportingEntryPublishedCount() {
 	}
 
 	public long getDynamicTestRegisteredCount() {
-		return testEventsByType(DYNAMIC_TEST_REGISTERED).count();
+		return eventsByTypeAndTestDescriptor(DYNAMIC_TEST_REGISTERED, descriptor -> true).count();
 	}
 
 	public long getTestFinishedCount() {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -40,14 +40,14 @@ public EngineDescriptor(UniqueId uniqueId, String displayName) {
 	}
 
 	/**
-	 * Always returns {@link org.junit.platform.engine.TestDescriptor.Type#ENGINE}.
+	 * Returns {@link org.junit.platform.engine.TestDescriptor.Type#CONTAINER}.
 	 *
 	 * @see org.junit.platform.engine.TestDescriptor#isContainer()
 	 * @see org.junit.platform.engine.TestDescriptor#isTest()
 	 */
 	@Override
-	public final Type getType() {
-		return Type.ENGINE;
+	public Type getType() {
+		return Type.CONTAINER;
 	}
 
 }

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TreePrinterTests.java
Patch:
@@ -86,7 +86,7 @@ private TestIdentifier createEngineId(String uniqueId, String displayName) {
 		return TestIdentifier.from(new AbstractTestDescriptor(UniqueId.forEngine(uniqueId), displayName) {
 			@Override
 			public Type getType() {
-				return Type.ENGINE;
+				return Type.CONTAINER;
 			}
 		});
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -71,9 +71,9 @@
 	 *
 	 * <p>You may use the following placeholders:
 	 * <ul>
-	 * <li>{@code {index}}: the current invocation index (1-based)</li>
-	 * <li>{@code {arguments}}: the complete, comma-separated arguments list</li>
-	 * <li>{@code {0}}, {@code {1}}, etc.: an individual argument</li>
+	 * <li><code>{index}</code>: the current invocation index (1-based)</li>
+	 * <li><code>{arguments}</code>: the complete, comma-separated arguments list</li>
+	 * <li><code>{0}</code>, <code>{1}</code>, etc.: an individual argument</li>
 	 * </ul>
 	 *
 	 * <p>For the latter, you may use {@link java.text.MessageFormat} patterns

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -118,6 +118,7 @@ private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phas
 			engineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));
 		}
 		root.applyPostDiscoveryFilters(discoveryRequest);
+		root.prune();
 		return root;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -55,7 +55,7 @@ public Type getType() {
 	}
 
 	@Override
-	public boolean hasTests() {
+	public boolean mayRegisterTests() {
 		return true;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -47,7 +47,7 @@ public Type getType() {
 	}
 
 	@Override
-	public boolean hasTests() {
+	public boolean mayRegisterTests() {
 		return true;
 	}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalContainerDescriptor.java
Patch:
@@ -47,7 +47,7 @@ public Type getType() {
 	}
 
 	@Override
-	public boolean hasTests() {
+	public boolean mayRegisterTests() {
 		return true;
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -118,7 +118,6 @@ private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phas
 			engineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));
 		}
 		root.applyPostDiscoveryFilters(discoveryRequest);
-		root.prune();
 		return root;
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationInitializer.java
Patch:
@@ -24,7 +24,8 @@
 import org.junit.platform.commons.util.AnnotationUtils;
 
 /**
- * {@code @AnnotationInitializer} is an internal helper class for initializing annotations.
+ * {@code @AnnotationInitializer} is an internal helper class for initializing
+ * annotations.
  *
  * @since 5.0
  */

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -38,6 +38,8 @@
 public @interface JavaTimeConversionPattern {
 
 	/**
+	 * The time conversion pattern.
+	 *
 	 * @see java.time.format.DateTimeFormatterBuilder#appendPattern(String)
 	 */
 	String value();

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -225,8 +225,8 @@ public Stream<? extends Arguments> provideArguments(ContainerExtensionContext co
 	private static class StringLengthConverter implements ArgumentConverter {
 
 		@Override
-		public Object convert(Object input, ParameterContext context) throws ArgumentConversionException {
-			return String.valueOf(input).length();
+		public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
+			return String.valueOf(source).length();
 		}
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -41,7 +41,9 @@ String format(int invocationIndex, Object... arguments) {
 		}
 
 		// Convert arguments to human readable formats
-		String[] humanReadableArguments = new String[arguments.length];
+		// Note: humanReadableArguments must be an Object[] in order to
+		// avoid varargs issues with non-Eclipse compilers.
+		Object[] humanReadableArguments = new String[arguments.length];
 		for (int i = 0; i < arguments.length; i++) {
 			humanReadableArguments[i] = StringUtils.nullSafeToString(arguments[i]);
 		}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -41,7 +41,7 @@ public Stream<? extends Arguments> provideArguments(ContainerExtensionContext co
 		settings.getFormat().setQuoteEscape('\'');
 		settings.setAutoConfigurationEnabled(false);
 		CsvParser csvParser = new CsvParser(settings);
-		return Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::arguments);
+		return Arrays.stream(lines).map(csvParser::parseLine).map(Arguments::of);
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Spliterators.spliteratorUnknownSize;
 import static java.util.stream.StreamSupport.stream;
-import static org.junit.jupiter.params.provider.ObjectArrayArguments.arguments;
+import static org.junit.jupiter.params.provider.Arguments.of;
 
 import java.io.InputStream;
 import java.nio.charset.Charset;
@@ -105,7 +105,7 @@ public boolean hasNext() {
 
 		@Override
 		public Arguments next() {
-			Arguments result = arguments(this.nextCsvRecord);
+			Arguments result = of(this.nextCsvRecord);
 			advance();
 			return result;
 		}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumArgumentsProvider.java
Patch:
@@ -47,7 +47,7 @@ public void accept(EnumSource enumSource) {
 
 	@Override
 	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
-		return constants.stream().map(ObjectArrayArguments::arguments);
+		return constants.stream().map(Arguments::of);
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -44,7 +44,7 @@ public void accept(ValueSource source) {
 
 	@Override
 	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
-		return Arrays.stream(arguments).map(ObjectArrayArguments::arguments);
+		return Arrays.stream(arguments).map(Arguments::of);
 	}
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestExtensionTests.java
Patch:
@@ -32,7 +32,6 @@
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ArgumentsSource;
-import org.junit.jupiter.params.provider.ObjectArrayArguments;
 
 class ParameterizedTestExtensionTests {
 
@@ -170,8 +169,7 @@ static class ArgumentsProviderWithCloseHandler implements ArgumentsProvider {
 
 		@Override
 		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
-			Stream<ObjectArrayArguments> argumentsStream = Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
-
+			Stream<Arguments> argumentsStream = Stream.of("foo", "bar").map(Arguments::of);
 			return argumentsStream.onClose(() -> streamWasClosed = true);
 		}
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -12,7 +12,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static org.junit.jupiter.params.provider.ObjectArrayArguments.arguments;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.displayName;
@@ -219,7 +218,7 @@ private static class TwoSingleStringArgumentsProvider implements ArgumentsProvid
 
 		@Override
 		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) throws Exception {
-			return Stream.of(arguments("foo"), arguments("bar"));
+			return Stream.of(Arguments.of("foo"), Arguments.of("bar"));
 		}
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -118,8 +118,8 @@ static Object providerWithIllegalReturnType() {
 			return -1;
 		}
 
-		static Stream<ObjectArrayArguments> argumentsStreamProvider() {
-			return Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
+		static Stream<Arguments> argumentsStreamProvider() {
+			return Stream.of("foo", "bar").map(Arguments::of);
 		}
 
 		static Iterable<Object[]> objectArrayProvider() {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -41,11 +41,12 @@ String format(int invocationIndex, Object... arguments) {
 		}
 
 		// Convert arguments to human readable formats
+		Object[] humanReadableArguments = new Object[arguments.length];
 		for (int i = 0; i < arguments.length; i++) {
-			arguments[i] = StringUtils.nullSafeToString(arguments[i]);
+			humanReadableArguments[i] = StringUtils.nullSafeToString(arguments[i]);
 		}
 
-		return MessageFormat.format(result, arguments);
+		return MessageFormat.format(result, humanReadableArguments);
 	}
 
 }

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -64,7 +64,7 @@ void testWithEnumSource(TimeUnit timeUnit) {
 
 	// tag::simple_MethodSource_example[]
 	@ParameterizedTest
-	@MethodSource(names = "stringProvider")
+	@MethodSource("stringProvider")
 	void testWithSimpleMethodSource(String argument) {
 		assertNotNull(argument);
 	}
@@ -76,7 +76,7 @@ static Stream<String> stringProvider() {
 
 	// tag::multi_arg_MethodSource_example[]
 	@ParameterizedTest
-	@MethodSource(names = "stringAndIntProvider")
+	@MethodSource("stringAndIntProvider")
 	void testWithMultiArgMethodSource(String first, int second) {
 		assertNotNull(first);
 		assertNotEquals(0, second);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -30,7 +30,7 @@ class MethodArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<M
 
 	@Override
 	public void accept(MethodSource annotation) {
-		methodNames = annotation.names();
+		methodNames = annotation.value();
 	}
 
 	@Override

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * {@code @MethodSource} is an {@link ArgumentsSource} which provides access
- * to values returned by {@linkplain #names() static methods} of the class in
+ * to values returned by {@linkplain #value() static methods} of the class in
  * which this annotation is declared.
  *
  * <p>The values returned by such methods will be provided as arguments to the
@@ -39,7 +39,7 @@
 @ArgumentsSource(MethodArgumentsProvider.class)
 public @interface MethodSource {
 
-	// TODO [#830] Document names().
-	String[] names();
+	// TODO [#830] Document value().
+	String[] value();
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -182,13 +182,13 @@ void afterEach(String argument, TestInfo testInfo) {
 		}
 
 		@ParameterizedTest
-		@MethodSource(names = "providerMethod")
+		@MethodSource("providerMethod")
 		void test1(String argument, TestInfo testInfo) {
 			performTest(argument, testInfo);
 		}
 
 		@ParameterizedTest
-		@MethodSource(names = "providerMethod")
+		@MethodSource("providerMethod")
 		void test2(String argument, TestInfo testInfo) {
 			performTest(argument, testInfo);
 		}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -133,7 +133,7 @@ private Stream<Object[]> provideArguments(String... methodNames) {
 
 	private Stream<Object[]> provideArguments(Class<?> testClass, String... methodNames) {
 		MethodSource annotation = mock(MethodSource.class);
-		when(annotation.names()).thenReturn(methodNames);
+		when(annotation.value()).thenReturn(methodNames);
 
 		ContainerExtensionContext context = mock(ContainerExtensionContext.class);
 		when(context.getTestClass()).thenReturn(Optional.ofNullable(testClass));

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * @since 1.0
  */
-public class DiscoveryRequestCreatorTests {
+class DiscoveryRequestCreatorTests {
 
 	private final CommandLineOptions options = new CommandLineOptions();
 
@@ -240,7 +240,7 @@ public void convertsMethodSelectors() {
 		assertThat(methodSelectors).hasSize(2);
 		assertThat(methodSelectors.get(0).getClassName()).isEqualTo("com.acme.Foo");
 		assertThat(methodSelectors.get(0).getMethodName()).isEqualTo("m");
-		assertThat(methodSelectors.get(0).getMethodParameterTypes()).isNull();
+		assertThat(methodSelectors.get(0).getMethodParameterTypes()).isEqualTo("");
 		assertThat(methodSelectors.get(1).getClassName()).isEqualTo("com.example.Bar");
 		assertThat(methodSelectors.get(1).getMethodName()).isEqualTo("method");
 		assertThat(methodSelectors.get(1).getMethodParameterTypes()).isEqualTo("java.lang.Object");

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -24,12 +24,11 @@
  * {@code @CsvFileSource} is a special {@link ArgumentsSource} which is used to
  * declare comma-separated values (CSV) files from one or more classpath resources.
  *
- * <p>The lines of these CSV files are then provided as arguments to
- * {@code @ParameterizedTest} methods using a {@code CsvFileArgumentsProvider}.
+ * <p>The lines of these CSV files will be provided as arguments to the
+ * annotated {@code @ParameterizedTest} method.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
- * @see org.junit.jupiter.params.provider.CsvFileArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -24,12 +24,11 @@
  * {@code @CsvSource} is a special {@link ArgumentsSource} which reads
  * comma-separated values (CSV) from its {@link #value} attribute.
  *
- * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code CsvArgumentsProvider}.
+ * <p>The supplied values will be provided as arguments to the
+ * annotated {@code @ParameterizedTest} method.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
- * @see org.junit.jupiter.params.provider.CsvArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -24,15 +24,14 @@
  * {@code @EnumSource} is an {@link ArgumentsSource} for constants of a
  * specified {@linkplain #value Enum}.
  *
- * <p>The enum constants will be provided as arguments to a {@code @ParameterizedTest}
- * method using an {@code EnumArgumentsProvider}.
+ * <p>The enum constants will be provided as arguments to the annotated
+ * {@code @ParameterizedTest} method.
  *
  * <p>The set of enum constants can be restricted by listing the desired values
  * via the {@link #names} attribute.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
- * @see org.junit.jupiter.params.provider.EnumArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -25,12 +25,11 @@
  * access to the values returned by static methods of the class in which the
  * annotation is used.
  *
- * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code MethodArgumentsProvider}.
+ * <p>The values returned by such methods will be provided as arguments to the
+ * annotated {@code @ParameterizedTest} method.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
- * @see org.junit.jupiter.params.provider.MethodArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -27,12 +27,11 @@
  * <p>Supported primitive types include {@link #strings}, {@link #ints},
  * {@link #longs}, and {@link #doubles}.
  *
- * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code ValueArgumentsProvider}.
+ * <p>The supplied literal values will be provided as arguments to the
+ * annotated {@code @ParameterizedTest} method.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
- * @see org.junit.jupiter.params.provider.ValueArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicTestTestDescriptor.java
Patch:
@@ -25,7 +25,7 @@ class DynamicTestTestDescriptor extends JupiterTestDescriptor {
 
 	private final DynamicTest dynamicTest;
 
-	public DynamicTestTestDescriptor(UniqueId uniqueId, DynamicTest dynamicTest, TestSource source) {
+	DynamicTestTestDescriptor(UniqueId uniqueId, DynamicTest dynamicTest, TestSource source) {
 		super(uniqueId, dynamicTest.getDisplayName());
 		this.dynamicTest = dynamicTest;
 		setSource(source);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -66,11 +66,10 @@
 public @interface ParameterizedTest {
 
 	/**
-	 * TODO Document name().
-	 *
 	 * @return a custom display name; never blank or consisting solely of
 	 * whitespace
 	 */
+	// TODO [#830] Document name().
 	String name() default "[{index}] {arguments}";
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -39,8 +39,10 @@
 @ArgumentsSource(CsvArgumentsProvider.class)
 public @interface CsvSource {
 
+	// TODO [#830] Document value().
 	String[] value();
 
+	// TODO [#830] Document delimiter().
 	char delimiter() default ',';
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -40,6 +40,7 @@
 @ArgumentsSource(MethodArgumentsProvider.class)
 public @interface MethodSource {
 
+	// TODO [#830] Document names().
 	String[] names();
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -46,4 +46,5 @@ public void accept(ValueSource source) {
 	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 		return Arrays.stream(arguments).map(ObjectArrayArguments::arguments);
 	}
+
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestDescriptor.java
Patch:
@@ -13,8 +13,8 @@
 import java.lang.reflect.Method;
 import java.util.Set;
 
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
-import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
@@ -64,7 +64,7 @@ public String getLegacyReportingName() {
 
 	private static String generateDefaultDisplayName(Method testMethod) {
 		return String.format("%s(%s)", testMethod.getName(),
-			StringUtils.nullSafeToString(Class::getSimpleName, testMethod.getParameterTypes()));
+			ClassUtils.nullSafeToString(Class::getSimpleName, testMethod.getParameterTypes()));
 	}
 
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/extension/ExtensionComposabilityTests.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
-import org.junit.platform.commons.util.StringUtils;
 
 /**
  * Unit tests for extension composability in JUnit Jupiter.
@@ -109,7 +109,7 @@ private boolean isExtensionApi(Class<?> candidate) {
 
 	private String methodSignature(Method method) {
 		return String.format("%s(%s)", method.getName(),
-			StringUtils.nullSafeToString(Class::getSimpleName, method.getParameterTypes()));
+			ClassUtils.nullSafeToString(Class::getSimpleName, method.getParameterTypes()));
 	}
 
 }

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/AbstractTestRuleAdapter.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.jupiter.migrationsupport.rules.member.TestRuleAnnotatedMember;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
-import org.junit.platform.commons.util.StringUtils;
 import org.junit.rules.TestRule;
 
 /**
@@ -44,7 +44,7 @@ protected Object executeMethod(String name) {
 	protected Object executeMethod(String methodName, Class<?>[] parameterTypes, Object... arguments) {
 		Method method = findMethod(this.target.getClass(), methodName, parameterTypes).orElseThrow(
 			() -> new JUnitException(String.format("Failed to find method %s(%s) in class %s", methodName,
-				StringUtils.nullSafeToString(parameterTypes), this.target.getClass().getName())));
+				ClassUtils.nullSafeToString(parameterTypes), this.target.getClass().getName())));
 
 		return invokeMethod(method, this.target, arguments);
 	}

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -420,7 +420,7 @@ public static String getFullyQualifiedMethodName(Class<?> clazz, String methodNa
 		Preconditions.notNull(methodName, "methodName must not be null");
 		Preconditions.notNull(params, "params must not be null");
 
-		return String.format("%s#%s(%s)", clazz.getName(), methodName, StringUtils.nullSafeToString(params));
+		return String.format("%s#%s(%s)", clazz.getName(), methodName, ClassUtils.nullSafeToString(params));
 	}
 
 	private static Optional<Object> getOuterInstance(Object inner) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/MethodSource.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.engine.support.descriptor;
 
 import static org.junit.platform.commons.meta.API.Usage.Experimental;
-import static org.junit.platform.commons.util.StringUtils.nullSafeToString;
+import static org.junit.platform.commons.util.ClassUtils.nullSafeToString;
 
 import java.lang.reflect.Method;
 import java.util.Objects;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineDiscoveryTests.java
Patch:
@@ -41,7 +41,7 @@
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-import org.junit.platform.commons.util.StringUtils;
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
@@ -704,10 +704,11 @@ private static void assertMethodSource(Method expectedMethod, TestDescriptor tes
 		assertThat(methodSource.getClassName()).isEqualTo(expectedMethod.getDeclaringClass().getName());
 		assertThat(methodSource.getMethodName()).isEqualTo(expectedMethod.getName());
 		assertThat(methodSource.getMethodParameterTypes()).isEqualTo(
-			StringUtils.nullSafeToString(expectedMethod.getParameterTypes()));
+			ClassUtils.nullSafeToString(expectedMethod.getParameterTypes()));
 	}
 
 	private static LauncherDiscoveryRequest discoveryRequestForClass(Class<?> testClass) {
 		return request().selectors(selectClass(testClass)).build();
 	}
+
 }

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoMethodTestDescriptor.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Set;
 
 import org.junit.jupiter.api.Tag;
+import org.junit.platform.commons.util.ClassUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.engine.TestTag;
@@ -33,7 +34,7 @@ public class DemoMethodTestDescriptor extends AbstractTestDescriptor {
 
 	public DemoMethodTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method testMethod) {
 		super(uniqueId, String.format("%s(%s)", Preconditions.notNull(testMethod, "Method must not be null").getName(),
-			StringUtils.nullSafeToString(Class::getSimpleName, testMethod.getParameterTypes())));
+			ClassUtils.nullSafeToString(Class::getSimpleName, testMethod.getParameterTypes())));
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/extension/ExtensionComposabilityTests.java
Patch:
@@ -62,11 +62,13 @@ void ensureJupiterExtensionApisAreComposable() {
 
 		List<String> actualMethodSignatures = actualMethods.stream()
 				.map(this::methodSignature)
+				.distinct()
 				.sorted()
 				.collect(toList());
 
 		List<String> actualMethodNames = actualMethods.stream()
 				.map(Method::getName)
+				.distinct()
 				.sorted()
 				.collect(toList());
 		// @formatter:on
@@ -79,8 +81,8 @@ void ensureJupiterExtensionApisAreComposable() {
 		actualMethodNames.remove("hashCode");
 		actualMethodNames.remove("toString");
 
-		assertThat(actualMethodNames).isEqualTo(expectedMethodNames);
 		assertThat(actualMethodSignatures).isEqualTo(expectedMethodSignatures);
+		assertThat(actualMethodNames).isEqualTo(expectedMethodNames);
 	}
 
 	public boolean isExtensionApi(Class<?> candidate) {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ContainerExecutionCondition.java
Patch:
@@ -18,7 +18,8 @@
  * {@code ContainerExecutionCondition} defines the {@link Extension} API for
  * programmatic, <em>conditional container execution</em>.
  *
- * <p>A {@code ContainerExecutionCondition} is {@linkplain #evaluate evaluated}
+ * <p>A {@code ContainerExecutionCondition} is
+ * {@linkplain #evaluateContainerExecutionCondition(ContainerExtensionContext) evaluated}
  * to determine if all tests in a given container should be executed based
  * on the supplied {@link ContainerExtensionContext}.
  *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionCondition.java
Patch:
@@ -18,7 +18,8 @@
  * {@code TestExecutionCondition} defines the {@link Extension} API for
  * programmatic, <em>conditional test execution</em>.
  *
- * <p>A {@code TestExecutionCondition} is {@linkplain #evaluate evaluated}
+ * <p>A {@code TestExecutionCondition} is
+ * {@linkplain #evaluateTestExecutionCondition(TestExtensionContext) evaluated}
  * to determine if a given test should be executed based on the supplied
  * {@link TestExtensionContext}.
  *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ContainerExecutionCondition.java
Patch:
@@ -43,6 +43,6 @@ public interface ContainerExecutionCondition extends Extension {
 	 * @param context the current extension context; never {@code null}
 	 * @return the result of evaluating this condition; never {@code null}
 	 */
-	ConditionEvaluationResult evaluate(ContainerExtensionContext context);
+	ConditionEvaluationResult evaluateContainerExecutionCondition(ContainerExtensionContext context);
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionCondition.java
Patch:
@@ -43,6 +43,6 @@ public interface TestExecutionCondition extends Extension {
 	 * @param context the current extension context; never {@code null}
 	 * @return the result of evaluating this condition; never {@code null}
 	 */
-	ConditionEvaluationResult evaluate(TestExtensionContext context);
+	ConditionEvaluationResult evaluateTestExecutionCondition(TestExtensionContext context);
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -88,7 +88,7 @@ public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext conte
 		AtomicInteger invocationIndex = new AtomicInteger();
 		// @formatter:off
 		providers.stream()
-				.flatMap(provider -> provider.provide(containerExtensionContext))
+				.flatMap(provider -> provider.provideTestTemplateInvocationContexts(containerExtensionContext))
 				.map(invocationContext -> createInvocationTestDescriptor(invocationContext, invocationIndex.incrementAndGet()))
 				.forEach(invocationTestDescriptor -> execute(dynamicTestExecutor, invocationTestDescriptor));
 		// @formatter:on
@@ -101,7 +101,7 @@ private List<TestTemplateInvocationContextProvider> validateProviders(
 
 		// @formatter:off
 		List<TestTemplateInvocationContextProvider> providers = extensionRegistry.stream(TestTemplateInvocationContextProvider.class)
-				.filter(provider -> provider.supports(containerExtensionContext))
+				.filter(provider -> provider.supportsTestTemplate(containerExtensionContext))
 				.collect(toList());
 		// @formatter:on
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluator.java
Patch:
@@ -112,7 +112,7 @@ private ConditionEvaluationResult evaluate(ContainerExecutionCondition condition
 			ContainerExtensionContext context) {
 
 		try {
-			ConditionEvaluationResult result = condition.evaluate(context);
+			ConditionEvaluationResult result = condition.evaluateContainerExecutionCondition(context);
 			logResult(condition.getClass(), result);
 			return result;
 		}
@@ -123,7 +123,7 @@ private ConditionEvaluationResult evaluate(ContainerExecutionCondition condition
 
 	private ConditionEvaluationResult evaluate(TestExecutionCondition condition, TestExtensionContext context) {
 		try {
-			ConditionEvaluationResult result = condition.evaluate(context);
+			ConditionEvaluationResult result = condition.evaluateTestExecutionCondition(context);
 			logResult(condition.getClass(), result);
 			return result;
 		}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/ExecutableInvoker.java
Patch:
@@ -181,7 +181,7 @@ private Object resolveParameter(ParameterContext parameterContext, Executable ex
 		try {
 			// @formatter:off
 			List<ParameterResolver> matchingResolvers = extensionRegistry.stream(ParameterResolver.class)
-					.filter(resolver -> resolver.supports(parameterContext, extensionContext))
+					.filter(resolver -> resolver.supportsParameter(parameterContext, extensionContext))
 					.collect(toList());
 			// @formatter:on
 
@@ -203,7 +203,7 @@ private Object resolveParameter(ParameterContext parameterContext, Executable ex
 			}
 
 			ParameterResolver resolver = matchingResolvers.get(0);
-			Object value = resolver.resolve(parameterContext, extensionContext);
+			Object value = resolver.resolveParameter(parameterContext, extensionContext);
 			validateResolvedType(parameterContext.getParameter(), value, executable, resolver);
 
 			LOG.finer(() -> String.format(

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java
Patch:
@@ -41,15 +41,15 @@ class DisabledCondition implements ContainerExecutionCondition, TestExecutionCon
 	 * Containers are disabled if {@code @Disabled} is present on the test class.
 	 */
 	@Override
-	public ConditionEvaluationResult evaluate(ContainerExtensionContext context) {
+	public ConditionEvaluationResult evaluateContainerExecutionCondition(ContainerExtensionContext context) {
 		return evaluate(context.getElement());
 	}
 
 	/**
 	 * Tests are disabled if {@code @Disabled} is present on the test method.
 	 */
 	@Override
-	public ConditionEvaluationResult evaluate(TestExtensionContext context) {
+	public ConditionEvaluationResult evaluateTestExecutionCondition(TestExtensionContext context) {
 		return evaluate(context.getElement());
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/RepetitionInfoParameterResolver.java
Patch:
@@ -33,12 +33,12 @@ public RepetitionInfoParameterResolver(int currentRepetition, int totalRepetitio
 	}
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return (parameterContext.getParameter().getType() == RepetitionInfo.class);
 	}
 
 	@Override
-	public RepetitionInfo resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public RepetitionInfo resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return new DefaultRepetitionInfo(this.currentRepetition, this.totalRepetitions);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TestInfoParameterResolver.java
Patch:
@@ -29,12 +29,12 @@
 class TestInfoParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return (parameterContext.getParameter().getType() == TestInfo.class);
 	}
 
 	@Override
-	public TestInfo resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public TestInfo resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return new DefaultTestInfo(extensionContext);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/TestReporterParameterResolver.java
Patch:
@@ -23,12 +23,12 @@
 class TestReporterParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return (parameterContext.getParameter().getType() == TestReporter.class);
 	}
 
 	@Override
-	public TestReporter resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public TestReporter resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return extensionContext::publishReportEntry;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/NumberResolver.java
Patch:
@@ -21,14 +21,14 @@
 class NumberResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext)
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
 			throws ParameterResolutionException {
 
 		return Number.class.isAssignableFrom(parameterContext.getParameter().getType());
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext)
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
 			throws ParameterResolutionException {
 
 		Class<?> type = parameterContext.getParameter().getType();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/CustomAnnotationParameterResolver.java
Patch:
@@ -21,12 +21,12 @@
 public class CustomAnnotationParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return parameterContext.getParameter().isAnnotationPresent(CustomAnnotation.class);
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return ReflectionUtils.newInstance(parameterContext.getParameter().getType());
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/CustomTypeParameterResolver.java
Patch:
@@ -20,12 +20,12 @@
 public class CustomTypeParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return parameterContext.getParameter().getType().equals(CustomType.class);
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return new CustomType();
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/NullIntegerParameterResolver.java
Patch:
@@ -23,13 +23,13 @@
 public class NullIntegerParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return Integer.class == parameterContext.getParameter().getType()
 				|| int.class == parameterContext.getParameter().getType();
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return null;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/NumberParameterResolver.java
Patch:
@@ -37,12 +37,12 @@
 public class NumberParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return Number.class.isAssignableFrom(parameterContext.getParameter().getType());
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return 42;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/PrimitiveArrayParameterResolver.java
Patch:
@@ -22,12 +22,12 @@
 public class PrimitiveArrayParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return int[].class == parameterContext.getParameter().getType();
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return new int[] { 1, 2, 3 };
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/PrimitiveIntegerParameterResolver.java
Patch:
@@ -22,12 +22,12 @@
 public class PrimitiveIntegerParameterResolver implements ParameterResolver {
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return int.class == parameterContext.getParameter().getType();
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return 42;
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestReporterParameterResolverTests.java
Patch:
@@ -35,17 +35,17 @@ class TestReporterParameterResolverTests {
 	@Test
 	void supports() {
 		Parameter parameter1 = findParameterOfMethod("methodWithTestReporterParameter", TestReporter.class);
-		assertTrue(this.resolver.supports(parameterContext(parameter1), null));
+		assertTrue(this.resolver.supportsParameter(parameterContext(parameter1), null));
 
 		Parameter parameter2 = findParameterOfMethod("methodWithoutTestReporterParameter", String.class);
-		assertFalse(this.resolver.supports(parameterContext(parameter2), null));
+		assertFalse(this.resolver.supportsParameter(parameterContext(parameter2), null));
 	}
 
 	@Test
 	void resolve() {
 		Parameter parameter = findParameterOfMethod("methodWithTestReporterParameter", TestReporter.class);
 
-		TestReporter testReporter = this.resolver.resolve(parameterContext(parameter),
+		TestReporter testReporter = this.resolver.resolveParameter(parameterContext(parameter),
 			Mockito.mock(ExtensionContext.class));
 		assertNotNull(testReporter);
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestParameterResolver.java
Patch:
@@ -36,12 +36,12 @@ class ParameterizedTestParameterResolver implements ParameterResolver {
 	}
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return parameterContext.getIndex() < arguments.length;
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext)
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
 			throws ParameterResolutionException {
 		Object argument = arguments[parameterContext.getIndex()];
 		Parameter parameter = parameterContext.getParameter();

File: platform-tests/src/test/java/org/junit/jupiter/extensions/TempDirectory.java
Patch:
@@ -44,13 +44,13 @@ public class TempDirectory implements AfterEachCallback, ParameterResolver {
 	private static final String KEY = "tempDirectory";
 
 	@Override
-	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {
+	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
 		return parameterContext.getParameter().isAnnotationPresent(Root.class)
 				&& parameterContext.getParameter().getType() == Path.class;
 	}
 
 	@Override
-	public Object resolve(ParameterContext parameterContext, ExtensionContext context) {
+	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext context) {
 		return getLocalStore(context).getOrComputeIfAbsent(KEY, key -> createTempDirectory(context));
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -48,7 +48,7 @@ private StringUtils() {
 	 * @see #isNotBlank(String)
 	 */
 	public static boolean isBlank(String str) {
-		return (str == null || str.trim().length() == 0);
+		return (str == null || str.trim().isEmpty());
 	}
 
 	/**

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -251,7 +251,7 @@ public static ClasspathResourceSelector selectClasspathResource(String classpath
 	 */
 	public static PackageSelector selectPackage(String packageName) {
 		Preconditions.notNull(packageName, "Package name must not be null");
-		Preconditions.condition(packageName.equals("") || packageName.trim().length() != 0,
+		Preconditions.condition(packageName.isEmpty() || !packageName.trim().isEmpty(),
 			"Package name must not contain only whitespace");
 		return new PackageSelector(packageName.trim());
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/ExtensionRegistry.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.engine.Constants;
 import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.platform.engine.ConfigurationParameters;
@@ -88,7 +89,7 @@ public static ExtensionRegistry createRegistryWithDefaultExtensions(Configuratio
 	}
 
 	private static void registerAutoDetectedExtensions(ExtensionRegistry extensionRegistry) {
-		Iterable<Extension> extensions = ServiceLoader.load(Extension.class, ReflectionUtils.getDefaultClassLoader());
+		Iterable<Extension> extensions = ServiceLoader.load(Extension.class, ClassLoaderUtils.getDefaultClassLoader());
 
 		// @formatter:off
 		LOG.config(() -> "Registering auto-detected extensions: "

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTestExecutor.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
-import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.console.options.CommandLineOptions;
 import org.junit.platform.console.options.Details;
 import org.junit.platform.console.options.Theme;
@@ -74,7 +74,7 @@ private Optional<ClassLoader> createCustomClassLoader() {
 		List<Path> additionalClasspathEntries = options.getAdditionalClasspathEntries();
 		if (!additionalClasspathEntries.isEmpty()) {
 			URL[] urls = additionalClasspathEntries.stream().map(this::toURL).toArray(URL[]::new);
-			ClassLoader parentClassLoader = ReflectionUtils.getDefaultClassLoader();
+			ClassLoader parentClassLoader = ClassLoaderUtils.getDefaultClassLoader();
 			ClassLoader customClassLoader = URLClassLoader.newInstance(urls, parentClassLoader);
 			return Optional.of(customClassLoader);
 		}

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ServiceLoader;
 import java.util.logging.Logger;
 
-import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.engine.TestEngine;
 
 /**
@@ -27,7 +27,7 @@ class ServiceLoaderTestEngineRegistry {
 
 	public Iterable<TestEngine> loadTestEngines() {
 		Iterable<TestEngine> testEngines = ServiceLoader.load(TestEngine.class,
-			ReflectionUtils.getDefaultClassLoader());
+			ClassLoaderUtils.getDefaultClassLoader());
 		LOG.config(() -> createDiscoveredTestEnginesMessage(testEngines));
 		return testEngines;
 	}
@@ -48,6 +48,7 @@ private List<String> computeAttributes(TestEngine engine) {
 		engine.getGroupId().ifPresent(groupId -> attributes.add("group ID: " + groupId));
 		engine.getArtifactId().ifPresent(artifactId -> attributes.add("artifact ID: " + artifactId));
 		engine.getVersion().ifPresent(version -> attributes.add("version: " + version));
+		ClassLoaderUtils.getLocation(engine).ifPresent(location -> attributes.add("location: " + location));
 		return attributes;
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestExecutionListenerRegistry.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ServiceLoader;
 import java.util.logging.Logger;
 
-import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.commons.util.ClassLoaderUtils;
 import org.junit.platform.launcher.TestExecutionListener;
 
 /**
@@ -28,7 +28,7 @@ class ServiceLoaderTestExecutionListenerRegistry {
 
 	Iterable<TestExecutionListener> loadListeners() {
 		Iterable<TestExecutionListener> listeners = ServiceLoader.load(TestExecutionListener.class,
-			ReflectionUtils.getDefaultClassLoader());
+			ClassLoaderUtils.getDefaultClassLoader());
 		LOG.config(() -> "Loaded TestExecutionListener instances: "
 				+ stream(listeners.spliterator(), false).map(Object::toString).collect(toList()));
 		return listeners;

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -51,7 +51,7 @@ class ClasspathScannerTests {
 		loadedClass.ifPresent(loadedClasses::add);
 		return loadedClass;
 	};
-	private final ClasspathScanner classpathScanner = new ClasspathScanner(ReflectionUtils::getDefaultClassLoader,
+	private final ClasspathScanner classpathScanner = new ClasspathScanner(ClassLoaderUtils::getDefaultClassLoader,
 		trackingClassLoader);
 
 	@Test

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -58,7 +58,7 @@ void getDefaultClassLoaderWithExplicitContextClassLoader() {
 		ClassLoader mock = mock(ClassLoader.class);
 		Thread.currentThread().setContextClassLoader(mock);
 		try {
-			assertSame(mock, ReflectionUtils.getDefaultClassLoader());
+			assertSame(mock, ClassLoaderUtils.getDefaultClassLoader());
 		}
 		finally {
 			Thread.currentThread().setContextClassLoader(original);
@@ -70,7 +70,7 @@ void getDefaultClassLoaderWithNullContextClassLoader() {
 		ClassLoader original = Thread.currentThread().getContextClassLoader();
 		Thread.currentThread().setContextClassLoader(null);
 		try {
-			assertSame(ClassLoader.getSystemClassLoader(), ReflectionUtils.getDefaultClassLoader());
+			assertSame(ClassLoader.getSystemClassLoader(), ClassLoaderUtils.getDefaultClassLoader());
 		}
 		finally {
 			Thread.currentThread().setContextClassLoader(original);

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ConsoleTestExecutorTests.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotSame;
 import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.junit.platform.commons.util.ReflectionUtils.getDefaultClassLoader;
+import static org.junit.platform.commons.util.ClassLoaderUtils.getDefaultClassLoader;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;
 
 import java.io.PrintWriter;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * {@code @CsvSource} is a special {@link ArgumentsSource} which reads
- * comma-separated values (CSV) from its {@link value} attribute.
+ * comma-separated values (CSV) from its {@link #value} attribute.
  *
  * <p>These values are then provided as arguments to {@code @ParameterizedTest}
  * methods using a {@code CsvArgumentsProvider}.

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -25,7 +25,7 @@
  * declare comma-separated values (CSV) files from one or more classpath resources.
  *
  * <p>The lines of these CSV files are then provided as arguments to
- * {@code @ParameterizedTest} methods using a {@code @CsvFileArgumentsProvider}.
+ * {@code @ParameterizedTest} methods using a {@code CsvFileArgumentsProvider}.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -25,7 +25,7 @@
  * comma-separated values (CSV) from its {@link value} attribute.
  *
  * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code @CsvArgumentsProvider}.
+ * methods using a {@code CsvArgumentsProvider}.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -26,7 +26,7 @@
  * annotation is used.
  *
  * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code @MethodArgumentsProvider}.
+ * methods using a {@code MethodArgumentsProvider}.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -28,7 +28,7 @@
  * {@link #longs}, and {@link #doubles}.
  *
  * <p>These values are then provided as arguments to {@code @ParameterizedTest}
- * methods using a {@code @ValueArgumentsProvider}.
+ * methods using a {@code ValueArgumentsProvider}.
  *
  * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource

File: documentation/src/test/java/example/ParameterizedTestDemo.java
Patch:
@@ -115,7 +115,7 @@ void testWithArgumentsSource(String argument) {
 	static class MyArgumentsProvider implements ArgumentsProvider {
 
 		@Override
-		public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 			return Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
 		}
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -79,7 +79,7 @@ private ParameterizedTestNameFormatter createNameFormatter(Method templateMethod
 	protected static Stream<? extends Arguments> arguments(ArgumentsProvider provider,
 			ContainerExtensionContext context) {
 		try {
-			return provider.arguments(context);
+			return provider.provideArguments(context);
 		}
 		catch (Exception e) {
 			throw ExceptionUtils.throwAsUncheckedException(e);

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -34,7 +34,7 @@ public void accept(CsvSource annotation) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 		CsvParserSettings settings = new CsvParserSettings();
 		settings.getFormat().setDelimiter(delimiter);
 		settings.getFormat().setQuote('\'');

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -12,6 +12,7 @@
 
 import static java.util.Spliterators.spliteratorUnknownSize;
 import static java.util.stream.StreamSupport.stream;
+import static org.junit.jupiter.params.provider.ObjectArrayArguments.arguments;
 
 import java.io.InputStream;
 import java.nio.charset.Charset;
@@ -59,7 +60,7 @@ public void accept(CsvFileSource annotation) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 		// @formatter:off
 		return Arrays.stream(resources)
 				.map(resource -> openInputStream(context, resource))
@@ -104,7 +105,7 @@ public boolean hasNext() {
 
 		@Override
 		public Arguments next() {
-			Arguments result = ObjectArrayArguments.arguments(this.nextCsvRecord);
+			Arguments result = arguments(this.nextCsvRecord);
 			advance();
 			return result;
 		}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumArgumentsProvider.java
Patch:
@@ -47,7 +47,7 @@ public void accept(EnumSource enumSource) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 		return stream(enumClass.getEnumConstants()).filter(this::select).map(ObjectArrayArguments::arguments);
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -43,7 +43,7 @@ public void accept(ValueSource source) {
 	}
 
 	@Override
-	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+	public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 		return Arrays.stream(arguments).map(ObjectArrayArguments::arguments);
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestExtensionTests.java
Patch:
@@ -168,7 +168,7 @@ void method(String parameter) {
 	static class ArgumentsProviderWithCloseHandler implements ArgumentsProvider {
 
 		@Override
-		public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
+		public Stream<? extends Arguments> provideArguments(ContainerExtensionContext context) {
 			Stream<ObjectArrayArguments> argumentsStream = Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
 
 			return argumentsStream.onClose(() -> streamWasClosed = true);

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -65,7 +65,7 @@ private Stream<Object[]> provideArguments(char delimiter, String... value) {
 
 		CsvArgumentsProvider provider = new CsvArgumentsProvider();
 		provider.accept(annotation);
-		return provider.arguments(null).map(Arguments::get);
+		return provider.provideArguments(null).map(Arguments::get);
 	}
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java
Patch:
@@ -120,7 +120,7 @@ private Stream<Object[]> provide(CsvFileArgumentsProvider provider, CsvFileSourc
 		provider.accept(annotation);
 		ContainerExtensionContext context = mock(ContainerExtensionContext.class);
 		when(context.getTestClass()).thenReturn(Optional.of(CsvFileArgumentsProviderTests.class));
-		return provider.arguments(context).map(Arguments::get);
+		return provider.provideArguments(context).map(Arguments::get);
 	}
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/EnumArgumentsProviderTests.java
Patch:
@@ -76,7 +76,7 @@ private Stream<Object[]> provideArguments(Class<? extends Enum<?>> enumClass, St
 
 		EnumArgumentsProvider provider = new EnumArgumentsProvider();
 		provider.accept(annotation);
-		return provider.arguments(null).map(Arguments::get);
+		return provider.provideArguments(null).map(Arguments::get);
 	}
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -140,6 +140,6 @@ private Stream<Object[]> provideArguments(Class<?> testClass, String... methodNa
 
 		MethodArgumentsProvider provider = new MethodArgumentsProvider();
 		provider.accept(annotation);
-		return provider.arguments(context).map(Arguments::get);
+		return provider.provideArguments(context).map(Arguments::get);
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/ValueArgumentsProviderTests.java
Patch:
@@ -80,7 +80,7 @@ private Stream<Object[]> provideArguments(String[] strings, int[] ints, long[] l
 
 		ValueArgumentsProvider provider = new ValueArgumentsProvider();
 		provider.accept(annotation);
-		return provider.arguments(null).map(Arguments::get);
+		return provider.provideArguments(null).map(Arguments::get);
 	}
 
 }

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -22,6 +22,8 @@
 
 class TestInfoDemo {
 
+	// TODO Add example with constructor injection.
+
 	@BeforeEach
 	void init(TestInfo testInfo) {
 		String displayName = testInfo.getDisplayName();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -41,7 +41,7 @@ public Stream<? extends Arguments> arguments(ContainerExtensionContext context)
 		settings.getFormat().setQuoteEscape('\'');
 		settings.setAutoConfigurationEnabled(false);
 		CsvParser csvParser = new CsvParser(settings);
-		return Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create);
+		return Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::arguments);
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -104,7 +104,7 @@ public boolean hasNext() {
 
 		@Override
 		public Arguments next() {
-			Arguments result = ObjectArrayArguments.create(nextArguments);
+			Arguments result = ObjectArrayArguments.arguments(nextArguments);
 			advance();
 			return result;
 		}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumArgumentsProvider.java
Patch:
@@ -48,7 +48,7 @@ public void accept(EnumSource enumSource) {
 
 	@Override
 	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
-		return stream(enumClass.getEnumConstants()).filter(this::select).map(ObjectArrayArguments::create);
+		return stream(enumClass.getEnumConstants()).filter(this::select).map(ObjectArrayArguments::arguments);
 	}
 
 	private boolean select(Enum<?> constant) {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java
Patch:
@@ -50,9 +50,9 @@ private static Arguments toArguments(Object item) {
 			return (Arguments) item;
 		}
 		if (item instanceof Object[]) {
-			return ObjectArrayArguments.create((Object[]) item);
+			return ObjectArrayArguments.arguments((Object[]) item);
 		}
-		return ObjectArrayArguments.create(item);
+		return ObjectArrayArguments.arguments(item);
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -44,6 +44,6 @@ public void accept(ValueSource source) {
 
 	@Override
 	public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
-		return Arrays.stream(arguments).map(ObjectArrayArguments::create);
+		return Arrays.stream(arguments).map(ObjectArrayArguments::arguments);
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestExtensionTests.java
Patch:
@@ -169,7 +169,7 @@ static class ArgumentsProviderWithCloseHandler implements ArgumentsProvider {
 
 		@Override
 		public Stream<? extends Arguments> arguments(ContainerExtensionContext context) {
-			Stream<ObjectArrayArguments> argumentsStream = Stream.of("foo", "bar").map(ObjectArrayArguments::create);
+			Stream<ObjectArrayArguments> argumentsStream = Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
 
 			return argumentsStream.onClose(() -> streamWasClosed = true);
 		}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -116,7 +116,7 @@ private static class TwoSingleStringArgumentsProvider implements ArgumentsProvid
 
 		@Override
 		public Stream<? extends Arguments> arguments(ContainerExtensionContext context) throws Exception {
-			return Stream.of(ObjectArrayArguments.create("foo"), ObjectArrayArguments.create("bar"));
+			return Stream.of(ObjectArrayArguments.arguments("foo"), ObjectArrayArguments.arguments("bar"));
 		}
 	}
 

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -119,7 +119,7 @@ static Object providerWithIllegalReturnType() {
 		}
 
 		static Stream<ObjectArrayArguments> argumentsStreamProvider() {
-			return Stream.of("foo", "bar").map(ObjectArrayArguments::create);
+			return Stream.of("foo", "bar").map(ObjectArrayArguments::arguments);
 		}
 
 		static Iterable<Object[]> objectArrayProvider() {

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/ObjectArrayArgumentsTests.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.params.provider.ObjectArrayArguments.arguments;
 
 import org.junit.jupiter.api.Test;
 
@@ -22,7 +23,7 @@ class ObjectArrayArgumentsTests {
 
 	@Test
 	void supportsVarargs() {
-		ObjectArrayArguments arguments = ObjectArrayArguments.create(1, "2", 3.0);
+		ObjectArrayArguments arguments = arguments(1, "2", 3.0);
 
 		assertArrayEquals(new Object[] { 1, "2", 3.0 }, arguments.get());
 	}
@@ -31,7 +32,7 @@ void supportsVarargs() {
 	void returnsSameArrayUsedForCreating() {
 		Object[] input = { 1, "2", 3.0 };
 
-		ObjectArrayArguments arguments = ObjectArrayArguments.create(input);
+		ObjectArrayArguments arguments = arguments(input);
 
 		assertThat(arguments.get()).isSameAs(input);
 	}

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -37,7 +37,7 @@
  * {@link org.junit.jupiter.api.extension.ParameterResolver ParameterResolvers}
  * at the end of the method's parameter list.
  *
- * <p>Method parameters may use the
+ * <p>Method parameters may use
  * {@link org.junit.jupiter.params.converter.ConvertWith @ConvertWith}
  * or a corresponding composed annotation to specify an explicit
  * {@link org.junit.jupiter.params.converter.ArgumentConverter}.
@@ -48,14 +48,14 @@
  *
  * <p>{@code @ParameterizedTest} methods must not be {@code private} or {@code static}.
  *
+ * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.CsvFileSource
  * @see org.junit.jupiter.params.provider.CsvSource
  * @see org.junit.jupiter.params.provider.EnumSource
  * @see org.junit.jupiter.params.provider.MethodSource
  * @see org.junit.jupiter.params.provider.ValueSource
  * @see org.junit.jupiter.params.converter.ConvertWith
- * @since 5.0
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -16,12 +16,12 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * {@code @ArgumentConversionException} is an exception that can
+ * {@code ArgumentConversionException} is an exception that can
  * occur when an object is converted to another object by an implementation
  * of an {@code org.junit.jupiter.params.converter.ArgumentConverter}.
  *
- * @see org.junit.jupiter.params.converter.ArgumentConverter
  * @since 5.0
+ * @see org.junit.jupiter.params.converter.ArgumentConverter
  */
 @API(Experimental)
 public class ArgumentConversionException extends JUnitException {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -26,9 +26,9 @@
  * conversion pattern to be specified on a method parameter of a
  * {@link ParameterizedTest} method.
  *
+ * @since 5.0
  * @see org.junit.jupiter.params.ParameterizedTest
  * @see java.time.format.DateTimeFormatterBuilder#appendPattern(String)
- * @since 5.0
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/SimpleArgumentConverter.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * {@code @ArgumentConverter} is an abtract base class for {@code @ArgumentConverter}
+ * {@code SimpleArgumentConverter} is an abstract base class for {@link ArgumentConverter}
  * implementations.
  *
- * @see org.junit.jupiter.params.converter.ArgumentConverter
  * @since 5.0
+ * @see ArgumentConverter
  */
 @API(Experimental)
 public abstract class SimpleArgumentConverter implements ArgumentConverter {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -18,13 +18,13 @@
  * {@code Arguments} is an abstraction that provides access to an array of
  * objects to be used for invoking a {@code @ParameterizedTest} method.
  *
- * A {@link java.util.stream.Stream} of such {@code Arguments} will
- * typically be accessed via {@linkplain ArgumentsProvider providers}.
+ * <p>A {@link java.util.stream.Stream} of such {@code Arguments} will
+ * typically be provided by an {@link ArgumentsProvider}.
  *
+ * @since 5.0
  * @see org.junit.jupiter.params.ParameterizedTest
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.ArgumentsProvider
- * @since 5.0
  */
 @API(Experimental)
 public interface Arguments {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -26,8 +26,8 @@
  * that is used to register {@linkplain ArgumentsProvider providers} for the
  * annotated test class or test method.
  *
- * @see org.junit.jupiter.params.provider.ArgumentsProvider
  * @since 5.0
+ * @see org.junit.jupiter.params.provider.ArgumentsProvider
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -22,15 +22,15 @@
 
 /**
  * {@code @CsvSource} is a special {@link ArgumentsSource} which reads
- * comma-separated values (CSV) from its {@code value} field.
+ * comma-separated values (CSV) from its {@link value} attribute.
  *
- * These values are then provided as arguments to {@code @ParameterizedTest}
+ * <p>These values are then provided as arguments to {@code @ParameterizedTest}
  * methods using a {@code @CsvArgumentsProvider}.
  *
+ * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.CsvArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
- * @since 5.0
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -25,13 +25,13 @@
  * access to the values returned by static methods of the class in which the
  * annotation is used.
  *
- * These values are then provided as arguments to {@code @ParameterizedTest}
+ * <p>These values are then provided as arguments to {@code @ParameterizedTest}
  * methods using a {@code @MethodArgumentsProvider}.
  *
+ * @since 5.0
  * @see org.junit.jupiter.params.provider.ArgumentsSource
  * @see org.junit.jupiter.params.provider.MethodArgumentsProvider
  * @see org.junit.jupiter.params.ParameterizedTest
- * @since 5.0
  */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -21,8 +21,8 @@
  * {@code @AnnotationConsumer} is a {@code @FunctionalInterface} for consuming
  * {@code Annotation}s.
  *
- * It is typically implemented by implementations of {@code ArgumentsProvider}
- * signalling that they can {@code accept} a certain annotation.
+ * <p>It is typically implemented by implementations of {@code ArgumentsProvider}
+ * in order to signal that they can {@code accept} a certain annotation.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExecutableInvokerTests.java
Patch:
@@ -46,7 +46,7 @@ class ExecutableInvokerTests {
 	private Method method;
 
 	private final ExtensionContext extensionContext = mock(ExtensionContext.class);
-	private ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions();
+	private ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(false);
 
 	@Test
 	void constructorInjection() throws Exception {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/JUnit5EngineExecutionContextTests.java
Patch:
@@ -48,7 +48,7 @@ void executionListenerIsHandedOnWhenContextIsExtended() {
 	void extendWithAllAttributes() {
 		ClassBasedContainerExtensionContext extensionContext = new ClassBasedContainerExtensionContext(null, null,
 			null);
-		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions();
+		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(false);
 		TestInstanceProvider testInstanceProvider = mock(TestInstanceProvider.class);
 		JupiterEngineExecutionContext newContext = originalContext.extend() //
 				.withExtensionContext(extensionContext) //
@@ -65,7 +65,7 @@ void extendWithAllAttributes() {
 	void canOverrideAttributeWhenContextIsExtended() {
 		ClassBasedContainerExtensionContext extensionContext = new ClassBasedContainerExtensionContext(null, null,
 			null);
-		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions();
+		ExtensionRegistry extensionRegistry = ExtensionRegistry.createRegistryWithDefaultExtensions(false);
 		TestInstanceProvider testInstanceProvider = mock(TestInstanceProvider.class);
 		ClassBasedContainerExtensionContext newExtensionContext = new ClassBasedContainerExtensionContext(
 			extensionContext, null, null);

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
Patch:
@@ -222,12 +222,13 @@ private static TestIdentifier newSourcelessIdentifierWithParent(TestPlan testPla
 		when(parent.getUniqueId()).thenReturn(newId());
 		when(parent.getDisplayName()).thenReturn(parentDisplay);
 		when(parent.getLegacyReportingName()).thenReturn(parentDisplay);
+		when(parent.getType()).thenReturn(TestDescriptor.Type.CONTAINER);
 		TestIdentifier parentId = TestIdentifier.from(parent);
 
 		// The (child) test case that is to be executed as part of a test plan.
 		TestDescriptor child = mock(TestDescriptor.class);
 		when(child.getUniqueId()).thenReturn(newId());
-		when(child.isTest()).thenReturn(true);
+		when(child.getType()).thenReturn(TestDescriptor.Type.TEST);
 
 		// Ensure the child source is null yet that there is a parent -- the special case to be tested.
 		when(child.getSource()).thenReturn(Optional.empty());

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/RepeatedTest.java
Patch:
@@ -95,7 +95,7 @@
 	/**
 	 * The number of repetitions.
 	 *
-	 * <p>Any value less than {@code 1} will be treated as {@code 1}.
+	 * @return the number of repetitions; must be greater than zero
 	 */
 	int value();
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptor.java
Patch:
@@ -77,7 +77,7 @@ protected static <E extends AnnotatedElement> String determineDisplayName(E elem
 		Optional<DisplayName> displayNameAnnotation = findAnnotation(element, DisplayName.class);
 		if (displayNameAnnotation.isPresent()) {
 			String displayName = displayNameAnnotation.get().value().trim();
-			// TODO Replace logging with precondition check once we have a proper mechanism for
+			// TODO [#242] Replace logging with precondition check once we have a proper mechanism for
 			// handling exceptions during the TestEngine discovery phase. Otherwise, the entire
 			// TestEngine dies without executing anything.
 			//

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/RepeatedTestExtension.java
Patch:
@@ -64,7 +64,7 @@ private RepeatedTestDisplayNameFormatter displayNameFormatter(RepeatedTest repea
 
 		String pattern = repeatedTest.name().trim();
 
-		// TODO Replace logging with precondition check once we have a proper mechanism for
+		// TODO [#242] Replace logging with precondition check once we have a proper mechanism for
 		// handling exceptions during the TestEngine discovery phase.
 		//
 		// Preconditions.notBlank(name, () -> String.format(

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -65,7 +65,7 @@ private ParameterizedTestNameFormatter createNameFormatter(Method templateMethod
 		ParameterizedTest parameterizedTest = findAnnotation(templateMethod, ParameterizedTest.class).get();
 		String name = parameterizedTest.name().trim();
 
-		// TODO Replace logging with precondition check once we have a proper mechanism for
+		// TODO [#242] Replace logging with precondition check once we have a proper mechanism for
 		// handling exceptions during the TestEngine discovery phase.
 		//
 		// Preconditions.notBlank(name, () -> String.format(

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -87,7 +87,7 @@ private List<ExecutionEvent> execute(DiscoverySelector... selectors) {
 
 	static class TestCase {
 
-		@ParameterizedTest
+		@ParameterizedTest(name = "  \t   ")
 		@ArgumentsSource(TwoSingleStringArgumentsProvider.class)
 		void testWithTwoSingleStringArgumentsProvider(String argument) {
 			fail(argument);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -59,7 +59,7 @@ public abstract class AbstractTestDescriptor implements TestDescriptor {
 	 */
 	protected AbstractTestDescriptor(UniqueId uniqueId, String displayName) {
 		this.uniqueId = Preconditions.notNull(uniqueId, "UniqueId must not be null");
-		this.displayName = Preconditions.notNull(displayName, "displayName must not be null or blank");
+		this.displayName = Preconditions.notBlank(displayName, "displayName must not be null or blank");
 	}
 
 	@Override

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -101,9 +101,6 @@ private List<TestTemplateInvocationContextProvider> validateProviders(
 
 		List<TestTemplateInvocationContextProvider> providers = extensionRegistry.getExtensions(
 			TestTemplateInvocationContextProvider.class);
-		Preconditions.notEmpty(providers,
-			() -> String.format("You must register at least one %s for @TestTemplate method [%s]",
-				TestTemplateInvocationContextProvider.class.getSimpleName(), getTestMethod()));
 		// @formatter:off
 		providers = providers.stream()
 				.filter(provider -> provider.supports(containerExtensionContext))

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTest.java
Patch:
@@ -22,6 +22,9 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.platform.commons.meta.API;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestExtension.java
Patch:
@@ -28,6 +28,9 @@
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.commons.util.ReflectionUtils;
 
+/**
+ * @since 5.0
+ */
 class ParameterizedTestExtension implements TestTemplateInvocationContextProvider {
 
 	@Override

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestInvocationContext.java
Patch:
@@ -17,6 +17,9 @@
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
 
+/**
+ * @since 5.0
+ */
 class ParameterizedTestInvocationContext implements TestTemplateInvocationContext {
 
 	private final ParameterizedTestNameFormatter formatter;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java
Patch:
@@ -15,6 +15,9 @@
 import java.text.MessageFormat;
 import java.util.stream.IntStream;
 
+/**
+ * @since 5.0
+ */
 class ParameterizedTestNameFormatter {
 
 	private final String namePattern;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestParameterResolver.java
Patch:
@@ -24,6 +24,9 @@
 import org.junit.platform.commons.util.AnnotationUtils;
 import org.junit.platform.commons.util.ReflectionUtils;
 
+/**
+ * @since 5.0
+ */
 class ParameterizedTestParameterResolver implements ParameterResolver {
 
 	private final Object[] arguments;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConversionException.java
Patch:
@@ -12,6 +12,9 @@
 
 import org.junit.platform.commons.JUnitException;
 
+/**
+ * @since 5.0
+ */
 public class ArgumentConversionException extends JUnitException {
 
 	private static final long serialVersionUID = 1L;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ArgumentConverter.java
Patch:
@@ -12,6 +12,9 @@
 
 import org.junit.jupiter.api.extension.ParameterContext;
 
+/**
+ * @since 5.0
+ */
 public interface ArgumentConverter {
 
 	Object convert(Object input, ParameterContext context) throws ArgumentConversionException;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/ConvertWith.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeArgumentConverter.java
Patch:
@@ -29,6 +29,9 @@
 
 import org.junit.jupiter.params.support.AnnotationConsumer;
 
+/**
+ * @since 5.0
+ */
 class JavaTimeArgumentConverter extends SimpleArgumentConverter
 		implements AnnotationConsumer<JavaTimeConversionPattern> {
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeConversionPattern.java
Patch:
@@ -16,14 +16,16 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @ConvertWith(JavaTimeArgumentConverter.class)
 public @interface JavaTimeConversionPattern {
 
 	/**
-	 *
 	 * @see java.time.format.DateTimeFormatterBuilder#appendPattern(String)
 	 */
 	String value();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/Arguments.java
Patch:
@@ -10,6 +10,9 @@
 
 package org.junit.jupiter.params.provider;
 
+/**
+ * @since 5.0
+ */
 public interface Arguments {
 
 	Object[] get();

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsProvider.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 
+/**
+ * @since 5.0
+ */
 public interface ArgumentsProvider {
 
 	Stream<? extends Arguments> arguments(ContainerExtensionContext context) throws Exception;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSource.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.junit.platform.commons.meta.API;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ArgumentsSources.java
Patch:
@@ -20,6 +20,9 @@
 
 import org.junit.platform.commons.meta.API;
 
+/**
+ * @since 5.0
+ */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvArgumentsProvider.java
Patch:
@@ -19,6 +19,9 @@
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.params.support.AnnotationConsumer;
 
+/**
+ * @since 5.0
+ */
 class CsvArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<CsvSource> {
 
 	private String[] lines;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java
Patch:
@@ -29,6 +29,9 @@
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.Preconditions;
 
+/**
+ * @since 5.0
+ */
 class CsvFileArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<CsvFileSource> {
 
 	private final BiFunction<Class<?>, String, InputStream> inputStreamProvider;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumSource.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodSource.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ObjectArrayArguments.java
Patch:
@@ -10,6 +10,9 @@
 
 package org.junit.jupiter.params.provider;
 
+/**
+ * @since 5.0
+ */
 public class ObjectArrayArguments implements Arguments {
 
 	private final Object[] arguments;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueArgumentsProvider.java
Patch:
@@ -22,6 +22,9 @@
 import org.junit.jupiter.params.support.AnnotationConsumer;
 import org.junit.platform.commons.util.Preconditions;
 
+/**
+ * @since 5.0
+ */
 class ValueArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<ValueSource> {
 
 	private Object[] arguments;

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/ValueSource.java
Patch:
@@ -16,6 +16,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/AnnotationConsumer.java
Patch:
@@ -13,5 +13,8 @@
 import java.lang.annotation.Annotation;
 import java.util.function.Consumer;
 
+/**
+ * @since 5.0
+ */
 public interface AnnotationConsumer<A extends Annotation> extends Consumer<A> {
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestNameFormatterTests.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.jupiter.api.Test;
 
+/**
+ * @since 5.0
+ */
 class ParameterizedTestNameFormatterTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/converter/DefaultArgumentConverterTests.java
Patch:
@@ -26,6 +26,9 @@
 
 import org.junit.jupiter.api.Test;
 
+/**
+ * @since 5.0
+ */
 class DefaultArgumentConverterTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/converter/JavaTimeArgumentConverterTests.java
Patch:
@@ -32,6 +32,9 @@
 
 import org.junit.jupiter.api.Test;
 
+/**
+ * @since 5.0
+ */
 class JavaTimeArgumentConverterTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java
Patch:
@@ -18,6 +18,9 @@
 
 import org.junit.jupiter.api.Test;
 
+/**
+ * @since 5.0
+ */
 class CsvArgumentsProviderTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java
Patch:
@@ -26,6 +26,9 @@
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
+/**
+ * @since 5.0
+ */
 class MethodArgumentsProviderTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/ObjectArrayArgumentsTests.java
Patch:
@@ -15,6 +15,9 @@
 
 import org.junit.jupiter.api.Test;
 
+/**
+ * @since 5.0
+ */
 class ObjectArrayArgumentsTests {
 
 	@Test

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/ValueArgumentsProviderTests.java
Patch:
@@ -20,6 +20,9 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.commons.util.PreconditionViolationException;
 
+/**
+ * @since 5.0
+ */
 class ValueArgumentsProviderTests {
 
 	@Test

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -198,7 +198,7 @@ default boolean hasTests() {
 	/**
 	 * Remove this descriptor from the hierarchy unless it is a root or has tests.
 	 *
-	 * <p>An concrete {@link TestEngine} may override this method in order to implement
+	 * <p>A concrete {@link TestEngine} may override this method in order to implement
 	 * a different algorithm or to skip pruning altogether.
 	 *
 	 * @see #isRoot()

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -188,7 +188,7 @@ default boolean isTest() {
 	 * Determine if this descriptor or any of its descendants describes a test.
 	 *
 	 * <p>The default implementation returns {@code true} if {@link #isTest()}
-	 * returns {@code true} and otherwise recurses through this descriptors
+	 * returns {@code true} and otherwise recurses through this descriptor's
 	 * {@linkplain #getChildren() children} to determine if they have tests.
 	 */
 	default boolean hasTests() {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -59,7 +59,7 @@ public static TestIdentifier from(TestDescriptor testDescriptor) {
 		Optional<TestSource> source = testDescriptor.getSource();
 		Set<TestTag> tags = testDescriptor.getTags();
 		boolean test = testDescriptor.isTest();
-		boolean container = !test || !testDescriptor.getChildren().isEmpty();
+		boolean container = testDescriptor.isContainer();
 		Optional<String> parentId = testDescriptor.getParent().map(
 			parentDescriptor -> parentDescriptor.getUniqueId().toString());
 		String legacyReportingName = testDescriptor.getLegacyReportingName();

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package example;
 
-import org.junit.platform.runner.ExcludeTags;
-import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.ExcludeTags;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -12,13 +12,13 @@
 
 //tag::user_guide[]
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
 @SelectPackages("example")
 //end::user_guide[]
-@org.junit.platform.runner.ExcludeTags("exclude")
+@org.junit.platform.suite.api.ExcludeTags("exclude")
 //tag::user_guide[]
 public class JUnit4SuiteDemo {
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/JupiterTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-jupiter-migration-support/src/test/java/org/junit/jupiter/migrationsupport/JupiterMigrationSupportTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.migrationsupport;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.params;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.platform.engine.support.descriptor.MethodSource;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
+import org.junit.platform.suite.api.UseTechnicalNames;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/SurefireProviderTestSuite.java
Patch:
@@ -16,10 +16,10 @@
 
 package org.junit.platform.surefire.provider;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.vintage.engine;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/TestCaseRunWithJUnitPlatformRunner.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples.junit4;
 
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectClasses;
+import org.junit.platform.suite.api.SelectClasses;
 import org.junit.runner.RunWith;
 
 /**

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.platform;
 
-import org.junit.platform.runner.IncludeClassNamePatterns;
-import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
-import org.junit.platform.runner.SelectPackages;
+import org.junit.platform.suite.api.IncludeClassNamePatterns;
+import org.junit.platform.suite.api.IncludeEngines;
+import org.junit.platform.suite.api.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/EnumArgumentsProvider.java
Patch:
@@ -30,6 +30,7 @@ class EnumArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<Enu
 	private Set<String> names = Collections.emptySet();
 
 	@Override
+	@SuppressWarnings("rawtypes")
 	public void accept(EnumSource enumSource) {
 		enumClass = enumSource.value();
 		if (enumSource.names().length > 0) {

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/ArgumentConverter.java
Patch:
@@ -14,6 +14,6 @@
 
 public interface ArgumentConverter {
 
-	Object convert(Object source, ParameterContext context) throws ArgumentConversionException;
+	Object convert(Object input, ParameterContext context) throws ArgumentConversionException;
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/converter/JavaTimeArgumentConverter.java
Patch:
@@ -61,13 +61,13 @@ public void initialize(JavaTimeConversionPattern annotation) {
 	}
 
 	@Override
-	public Object convert(Object source, Class<?> targetClass) throws ArgumentConversionException {
+	public Object convert(Object input, Class<?> targetClass) throws ArgumentConversionException {
 		if (!TEMPORAL_QUERIES.containsKey(targetClass)) {
-			throw new ArgumentConversionException("Cannot convert to " + targetClass.getName() + ": " + source);
+			throw new ArgumentConversionException("Cannot convert to " + targetClass.getName() + ": " + input);
 		}
 		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
 		TemporalQuery<?> temporalQuery = TEMPORAL_QUERIES.get(targetClass);
-		return formatter.parse(source.toString(), temporalQuery);
+		return formatter.parse(input.toString(), temporalQuery);
 	}
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/SimpleArgumentConverter.java
Patch:
@@ -17,10 +17,10 @@
 public abstract class SimpleArgumentConverter implements ArgumentConverter {
 
 	@Override
-	public final Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
-		return convert(source, context.getParameter().getType());
+	public final Object convert(Object input, ParameterContext context) throws ArgumentConversionException {
+		return convert(input, context.getParameter().getType());
 	}
 
-	protected abstract Object convert(Object source, Class<?> targetType);
+	protected abstract Object convert(Object input, Class<?> targetType);
 
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -111,8 +111,8 @@ public Stream<? extends Arguments> arguments(ContainerExtensionContext context)
 
 	private static class StringLengthConverter implements ArgumentConverter {
 		@Override
-		public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
-			return String.valueOf(source).length();
+		public Object convert(Object input, ParameterContext context) throws ArgumentConversionException {
+			return String.valueOf(input).length();
 		}
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParamsApiPlayground.java
Patch:
@@ -39,7 +39,7 @@ void testWithParametersFromEnumWithNamedSubset(TimeUnit unit) {
 
 	@ParameterizedTest
 	@ValueSource(longs = { 1_000, 2_000 })
-	void testWithParametersFromLongArray(Long number) {
+	void testWithParametersFromLongArray(long number) {
 	}
 
 	@ParameterizedTest

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/AnnotationInitialized.java
Patch:
@@ -14,6 +14,6 @@
 
 public interface AnnotationInitialized<A extends Annotation> {
 
-	void initialize(A annotation);
+	void initialize(A annotation) throws Exception;
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/Arguments.java
Patch:
@@ -12,6 +12,6 @@
 
 public interface Arguments {
 
-	Object[] getArguments();
+	Object[] get();
 
 }

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/sources/EnumArgumentsProvider.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.Arrays;
 import java.util.Iterator;
 
+import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.params.AnnotationInitialized;
 import org.junit.jupiter.params.Arguments;
 import org.junit.jupiter.params.ArgumentsProvider;
@@ -29,7 +30,7 @@ public void initialize(EnumSource annotation) {
 	}
 
 	@Override
-	public Iterator<? extends Arguments> arguments() throws IOException {
+	public Iterator<? extends Arguments> arguments(ContainerExtensionContext context) throws IOException {
 		return Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create).iterator();
 	}
 

File: junit-jupiter-params/src/main/java/org/junit/jupiter/params/support/ObjectArrayArguments.java
Patch:
@@ -25,7 +25,7 @@ private ObjectArrayArguments(Object... arguments) {
 	}
 
 	@Override
-	public Object[] getArguments() {
+	public Object[] get() {
 		return arguments;
 	}
 }

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.engine.JupiterTestEngine;
 import org.junit.jupiter.params.sources.StringSource;
 import org.junit.jupiter.params.support.ObjectArrayArguments;
@@ -87,7 +88,7 @@ void testWithCustomName(String argument, int i) {
 
 	private static class TwoSingleStringArgumentsProvider implements ArgumentsProvider {
 		@Override
-		public Iterator<? extends Arguments> arguments() throws Exception {
+		public Iterator<? extends Arguments> arguments(ContainerExtensionContext context) throws Exception {
 			return asList(ObjectArrayArguments.create("foo"), ObjectArrayArguments.create("bar")).iterator();
 		}
 	}

File: junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParamsApiPlayground.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
+import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.params.converter.JavaTimeConversionPattern;
 import org.junit.jupiter.params.sources.EnumSource;
 import org.junit.jupiter.params.sources.FileSource;
@@ -79,7 +80,7 @@ static Iterable<String> second() {
 
 	static class MyArgumentsProvider implements ArgumentsProvider {
 		@Override
-		public Iterator<? extends Arguments> arguments() {
+		public Iterator<? extends Arguments> arguments(ContainerExtensionContext context) {
 			return Stream.of("foo", "bar").map(ObjectArrayArguments::create).iterator();
 		}
 	}

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CloseablePath.java
Patch:
@@ -43,7 +43,7 @@ static CloseablePath create(URI uri) throws IOException, URISyntaxException {
 			return createForJarFileSystem(new URI(jarUri), fileSystem -> fileSystem.getPath(jarEntry));
 		}
 		if (uri.getScheme().equals(FILE_URI_SCHEME) && uri.getPath().endsWith(JAR_FILE_EXTENSION)) {
-			return createForJarFileSystem(new URI(JAR_URI_SCHEME, uri.toString(), null),
+			return createForJarFileSystem(new URI(JAR_URI_SCHEME + ':' + uri),
 				fileSystem -> fileSystem.getRootDirectories().iterator().next());
 		}
 		return new CloseablePath(Paths.get(uri), NULL_CLOSEABLE);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/NumberResolver.java
Patch:
@@ -32,6 +32,9 @@ public Object resolve(ParameterContext parameterContext, ExtensionContext extens
 			throws ParameterResolutionException {
 
 		Class<?> type = parameterContext.getParameter().getType();
+		if (type == Number.class) {
+			return 42;
+		}
 		try {
 			return type.getMethod("valueOf", String.class).invoke(null, "123");
 		}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/JavaElementsResolver.java
Patch:
@@ -147,7 +147,7 @@ private void resolveContainedNestedClasses(TestDescriptor containerDescriptor, C
 
 	private void resolveContainedMethods(TestDescriptor containerDescriptor, Class<?> testClass) {
 		List<Method> testMethodCandidates = findMethods(testClass, method -> !ReflectionUtils.isPrivate(method),
-			ReflectionUtils.MethodSortOrder.HierarchyDown);
+			ReflectionUtils.HierarchyTraversalMode.TOP_DOWN);
 		testMethodCandidates.forEach(method -> resolve(method, containerDescriptor));
 	}
 

File: junit-platform-console-standalone/src/test/java/standalone/JupiterIntegration.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package integration;
+package standalone;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Assumptions;

File: junit-platform-console-standalone/src/test/java/standalone/VintageIntegration.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package integration;
+package standalone;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalTestDescriptor.java
Patch:
@@ -13,9 +13,6 @@
 import static org.junit.platform.engine.support.hierarchical.Node.SkipResult.doNotSkip;
 import static org.junit.platform.engine.support.hierarchical.Node.SkipResult.skip;
 
-import java.util.function.Consumer;
-
-import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -25,13 +25,10 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-import java.util.function.Consumer;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.ExecutionRequest;
-import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -312,7 +312,7 @@ public static MethodSelector selectMethod(String fullyQualifiedMethodName) throw
 
 		Matcher matcher = fullyQualifiedMethodNamePattern.matcher(fullyQualifiedMethodName);
 		Preconditions.condition(matcher.matches(),
-			"fullyQualifiedMethodName is not a valid fully qualified method name");
+			fullyQualifiedMethodName + " is not a valid fully qualified method name");
 
 		String className = matcher.group(1);
 		String methodName = matcher.group(2);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -81,9 +81,10 @@ protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTe
 			Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,
 				context.getExtensionRegistry());
 
-			try {
+			try (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,
+				testFactoryMethodResult)) {
 				AtomicInteger index = new AtomicInteger();
-				toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(
+				dynamicTestStream.forEach(
 					dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));
 			}
 			catch (ClassCastException ex) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertionsAssertAllTests.java
Patch:
@@ -90,7 +90,7 @@ void assertAllWithExecutablesThatThrowAssertionErrors() {
 		// @formatter:on
 
 		assertTrue(multipleFailuresError != null);
-		List<AssertionError> failures = multipleFailuresError.getFailures();
+		List<Throwable> failures = multipleFailuresError.getFailures();
 		assertTrue(failures.size() == 2);
 		assertTrue(failures.get(0).getClass().equals(AssertionFailedError.class));
 	}
@@ -104,7 +104,7 @@ void assertAllWithStreamOfExecutablesThatThrowAssertionErrors() {
 		// @formatter:on
 
 		assertTrue(multipleFailuresError != null);
-		List<AssertionError> failures = multipleFailuresError.getFailures();
+		List<Throwable> failures = multipleFailuresError.getFailures();
 		assertTrue(failures.size() == 2);
 		assertTrue(failures.get(0).getClass().equals(AssertionFailedError.class));
 	}

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -28,7 +28,7 @@ class ServiceLoaderTestEngineRegistry {
 	public Iterable<TestEngine> loadTestEngines() {
 		Iterable<TestEngine> testEngines = ServiceLoader.load(TestEngine.class,
 			ReflectionUtils.getDefaultClassLoader());
-		LOG.info(() -> createDiscoveredTestEnginesMessage(testEngines));
+		LOG.config(() -> createDiscoveredTestEnginesMessage(testEngines));
 		return testEngines;
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateContainerExtensionContext.java
Patch:
@@ -35,7 +35,7 @@ final class TestTemplateContainerExtensionContext extends AbstractExtensionConte
 
 	@Override
 	public Optional<AnnotatedElement> getElement() {
-		return Optional.of(getTestDescriptor().getTemplateMethod());
+		return Optional.of(getTestDescriptor().getTestMethod());
 	}
 
 	@Override
@@ -45,7 +45,7 @@ public Optional<Class<?>> getTestClass() {
 
 	@Override
 	public Optional<Method> getTestMethod() {
-		return Optional.of(getTestDescriptor().getTemplateMethod());
+		return Optional.of(getTestDescriptor().getTestMethod());
 	}
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestTemplate.java
Patch:
@@ -31,7 +31,8 @@
  * org.junit.jupiter.api.extension.TestTemplateInvocationContext invocation
  * contexts} returned by the registered {@linkplain
  * org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider
- * providers}.
+ * providers}. Must be used together with at least one provider. Otherwise,
+ * execution will fail.
  *
  * <p>Each invocation of a test template method, behaves like the execution of
  * a regular {@link Test @Test} method, i.e. it supports the same lifecycle

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/DynamicTestTestDescriptor.java
Patch:
@@ -10,8 +10,6 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import java.util.function.Consumer;
-
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.platform.engine.TestDescriptor;
@@ -45,7 +43,7 @@ public boolean isContainer() {
 
 	@Override
 	public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context,
-			Consumer<TestDescriptor> dynamicTestExecutor) throws Exception {
+			DynamicTestExecutor dynamicTestExecutor) throws Exception {
 		executeAndMaskThrowable(dynamicTest.getExecutable());
 		return context;
 	}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateContainerExtensionContext.java
Patch:
@@ -25,11 +25,11 @@
  * @since 5.0
  */
 @API(Internal)
-public final class TestTemplateContainerExtensionContext extends AbstractExtensionContext<TestTemplateTestDescriptor>
+final class TestTemplateContainerExtensionContext extends AbstractExtensionContext<TestTemplateTestDescriptor>
 		implements ContainerExtensionContext {
 
-	public TestTemplateContainerExtensionContext(ExtensionContext parent,
-			EngineExecutionListener engineExecutionListener, TestTemplateTestDescriptor testDescriptor) {
+	TestTemplateContainerExtensionContext(ExtensionContext parent, EngineExecutionListener engineExecutionListener,
+			TestTemplateTestDescriptor testDescriptor) {
 		super(parent, engineExecutionListener, testDescriptor);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Consumer;
 
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
@@ -116,7 +115,7 @@ public SkipResult shouldBeSkipped(JupiterEngineExecutionContext context) throws
 
 	@Override
 	public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context,
-			Consumer<TestDescriptor> dynamicTestExecutor) throws Exception {
+			DynamicTestExecutor dynamicTestExecutor) throws Exception {
 		ContainerExtensionContext containerExtensionContext = (ContainerExtensionContext) context.getExtensionContext();
 		List<TestTemplateInvocationContextProvider> providers = validateProviders(containerExtensionContext,
 			context.getExtensionRegistry());
@@ -127,7 +126,7 @@ public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext conte
 				int index = invocationIndex.incrementAndGet();
 				TestDescriptor invocationTestDescriptor = createInvocationTestDescriptor(invocationContext, index);
 				addChild(invocationTestDescriptor);
-				dynamicTestExecutor.accept(invocationTestDescriptor);
+				dynamicTestExecutor.execute(invocationTestDescriptor);
 			});
 		});
 		validateWasAtLeastInvokedOnce(invocationIndex);

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalTestDescriptor.java
Patch:
@@ -69,7 +69,7 @@ public SkipResult shouldBeSkipped(DemoEngineExecutionContext context) throws Exc
 
 	@Override
 	public DemoEngineExecutionContext execute(DemoEngineExecutionContext context,
-			Consumer<TestDescriptor> dynamicTestExecutor) {
+			DynamicTestExecutor dynamicTestExecutor) {
 		if (this.executeBlock != null) {
 			this.executeBlock.run();
 		}

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -28,9 +28,9 @@
  * @since 5.0
  */
 @API(Internal)
-class TestTemplateInvocationTestDescriptor extends MethodTestDescriptor {
+public class TestTemplateInvocationTestDescriptor extends MethodTestDescriptor {
 
-	static final String SEGMENT_TYPE = "test-template-invocation";
+	public static final String SEGMENT_TYPE = "test-template-invocation";
 
 	private TestTemplateInvocationContext invocationContext;
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateInvocationTestDescriptor.java
Patch:
@@ -30,7 +30,7 @@
 @API(Internal)
 class TestTemplateInvocationTestDescriptor extends MethodTestDescriptor {
 
-	static final String SEGMENT_TYPE = "template-invocation";
+	static final String SEGMENT_TYPE = "test-template-invocation";
 
 	private TestTemplateInvocationContext invocationContext;
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestTemplateInvocationContextProvider.java
Patch:
@@ -19,6 +19,8 @@
 @API(Experimental)
 public interface TestTemplateInvocationContextProvider extends Extension {
 
+	boolean supports(ContainerExtensionContext context);
+
 	Iterator<TestTemplateInvocationContext> provide(ContainerExtensionContext context);
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -126,7 +126,7 @@ public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext conte
 			contextIterator.forEachRemaining(invocationContext -> {
 				int index = invocationIndex.incrementAndGet();
 				UniqueId uniqueId = getUniqueId().append("template-invocation", "#" + index);
-				String displayName = "[" + index + "]";
+				String displayName = invocationContext.getDisplayName(index);
 				TestDescriptor invocationTestDescriptor = new MethodTestDescriptor(uniqueId, displayName,
 					this.testClass, this.templateMethod);
 				addChild(invocationTestDescriptor);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -128,6 +128,7 @@ public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext conte
 					"#" + invocationIndex.incrementAndGet());
 				TestDescriptor invocationTestDescriptor = new MethodTestDescriptor(uniqueId, this.testClass,
 					this.templateMethod);
+				addChild(invocationTestDescriptor);
 				dynamicTestExecutor.accept(invocationTestDescriptor);
 			});
 		});

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestTemplateTestDescriptor.java
Patch:
@@ -126,7 +126,7 @@ public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext conte
 			Iterator<TestTemplateInvocationContext> contextIterator = provider.provide(containerExtensionContext);
 			contextIterator.forEachRemaining(invocationContext -> {
 				UniqueId uniqueId = getUniqueId().append("template-invocation",
-					"#" + invocationIndex.getAndIncrement());
+					"#" + invocationIndex.incrementAndGet());
 				MethodTestDescriptor methodTestDescriptor = new MethodTestDescriptor(uniqueId, this.testClass,
 					this.templateMethod);
 				context.getExecutionListener().dynamicTestRegistered(methodTestDescriptor);

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -73,6 +73,7 @@ private JavaElementsResolver createJavaElementsResolver(TestDescriptor engineDes
 		resolvers.add(new NestedTestsResolver());
 		resolvers.add(new TestMethodResolver());
 		resolvers.add(new TestFactoryMethodResolver());
+		resolvers.add(new TestTemplateMethodResolver());
 		return new JavaElementsResolver(engineDescriptor, resolvers);
 	}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/AbstractNumberTests.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 /**
@@ -21,6 +22,7 @@
 @ExtendWith(NumberResolver.class)
 abstract class AbstractNumberTests<N extends Number> {
 
+	@Test
 	void test(N number) {
 		BridgeMethodTests.sequence.add("test(N)");
 		assertNotNull(number);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/ChildWithBridges.java
Patch:
@@ -19,16 +19,16 @@ public class ChildWithBridges extends PackagePrivateParent {
 
 	@BeforeEach
 	public void anotherBeforeEach() {
-		bridgeMethodSequence.add("child.anotherBeforeEach()");
+		BridgeTests.sequence.add("child.anotherBeforeEach()");
 	}
 
 	@Test
 	public void test() {
-		bridgeMethodSequence.add("child.test()");
+		BridgeTests.sequence.add("child.test()");
 	}
 
 	@AfterEach
 	public void anotherAfterEach() {
-		bridgeMethodSequence.add("child.anotherAfterEach()");
+		BridgeTests.sequence.add("child.anotherAfterEach()");
 	}
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/bridge/ChildWithoutBridges.java
Patch:
@@ -19,16 +19,16 @@ class ChildWithoutBridges extends PackagePrivateParent {
 
 	@BeforeEach
 	public void anotherBeforeEach() {
-		bridgeMethodSequence.add("child.anotherBeforeEach()");
+		BridgeTests.sequence.add("child.anotherBeforeEach()");
 	}
 
 	@Test
 	public void test() {
-		bridgeMethodSequence.add("child.test()");
+		BridgeTests.sequence.add("child.test()");
 	}
 
 	@AfterEach
 	public void anotherAfterEach() {
-		bridgeMethodSequence.add("child.anotherAfterEach()");
+		BridgeTests.sequence.add("child.anotherAfterEach()");
 	}
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -80,6 +80,7 @@ class AvailableOptions {
 					+ ". If '" + Details.NONE + "' is selected, then only the summary and test failures are shown.") //
 				.withRequiredArg() //
 				.ofType(Details.class) //
+				.withValuesConvertedBy(new DetailsConverter()) //
 				.defaultsTo(CommandLineOptions.DEFAULT_DETAILS);
 
 		additionalClasspathEntries = parser.acceptsAll(asList(CP_OPTION, "classpath", "class-path"), //

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -23,7 +23,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -53,7 +53,7 @@ public interface TestInfo {
 	 * default display names for the following test classes are
 	 * {@code TopLevelTests}, {@code NestedTests}, and {@code TopLevelTests$StaticTests}.
 	 *
-	 * <pre style="code">
+	 * <pre class="code">
 	 *   class TopLevelTests {
 	 *
 	 *      {@literal @}Nested
@@ -69,7 +69,7 @@ public interface TestInfo {
 	 * of the parameter types in parentheses. For example, the default display
 	 * name for the following test method is {@code testUser(TestInfo, User)}.
 	 *
-	 * <pre style="code">
+	 * <pre class="code">
 	 *   {@literal @}Test
 	 *   void testUser(TestInfo testInfo, {@literal @}Mock User user) {}
 	 * </pre>

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -54,7 +54,7 @@
  * For example, the default display name for the following test method is
  * {@code testUser(TestInfo, User)}.
  *
- * <pre style="code">
+ * <pre class="code">
  *   {@literal @}Test
  *   void testUser(TestInfo testInfo, {@literal @}Mock User user) { ... }
  * </pre>

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/JupiterTestSuite.java
Patch:
@@ -26,7 +26,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/FullLogging.java
Patch:
@@ -33,7 +33,7 @@
  * for all specified classes for the duration of the current test container.
  *
  * <h3>Example Usage</h3>
- * <pre style="code">
+ * <pre class="code">
  * {@literal @}FullLogging(ExecutableInvoker.class)
  * class MyTestClass { ... }
  * </pre>

File: junit-jupiter-migration-support/src/test/java/org/junit/jupiter/migrationsupport/JupiterMigrationSupportTestSuite.java
Patch:
@@ -25,7 +25,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreePrintingListener.java
Patch:
@@ -148,7 +148,7 @@ enum Theme {
 		/**
 		 * ASCII 7-bit characters form the tree branch.
 		 *
-		 * <pre style="code">
+		 * <pre class="code">
 		 * +-- JUnit Vintage
 		 * | +-- example.JUnit4Tests
 		 * | | +-- standardJUnit4Test [OK]
@@ -167,7 +167,7 @@ enum Theme {
 		/**
 		 * Extended ASCII characters are used to display the test execution tree.
 		 *
-		 * <pre style="code">
+		 * <pre class="code">
 		 * .
 		 * ├─ JUnit Vintage
 		 * │  ├─ example.JUnit4Tests

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -34,7 +34,7 @@
  *
  * <h4>Example</h4>
  *
- * <pre style="code">
+ * <pre class="code">
  * import static org.junit.platform.engine.discovery.DiscoverySelectors.*;
  * import static org.junit.platform.engine.discovery.ClassNameFilter.*;
  * import static org.junit.platform.launcher.EngineFilter.*;

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/SurefireProviderTestSuite.java
Patch:
@@ -31,7 +31,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineTestSuite.java
Patch:
@@ -25,7 +25,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -25,7 +25,7 @@
  * set the following system property before running any tests &mdash; for
  * example, in <em>Run Configurations</em> in Eclipse.
  *
- * <pre style="code">
+ * <pre class="code">
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -49,7 +49,7 @@ public void parseNoArguments() {
 		assertAll(
 			() -> assertFalse(options.isAnsiColorOutputDisabled()),
 			() -> assertFalse(options.isDisplayHelp()),
-			() -> assertFalse(options.isHideDetails()),
+			() -> assertEquals(CommandLineOptions.DEFAULT_DETAILS, options.getDetails()),
 			() -> assertFalse(options.isScanClasspath()),
 			() -> assertEquals(singletonList(STANDARD_INCLUDE_PATTERN), options.getIncludedClassNamePatterns()),
 			() -> assertEquals(emptyList(), options.getIncludedPackages()),
@@ -72,7 +72,6 @@ public void parseSwitches() {
 		assertAll(
 				() -> assertParses("disable ansi", CommandLineOptions::isAnsiColorOutputDisabled, "--disable-ansi-colors"),
 				() -> assertParses("help", CommandLineOptions::isDisplayHelp, "-h", "--help"),
-			() -> assertParses("hide details", CommandLineOptions::isHideDetails, "--hide-details"),
 			() -> assertParses("scan class path", CommandLineOptions::isScanClasspath, "--scan-class-path")
 		);
 		// @formatter:on

File: documentation/src/test/java/example/JUnit4ClassDemo.java
Patch:
@@ -11,7 +11,6 @@
 package example;
 
 // tag::user_guide[]
-
 import static org.junit.jupiter.api.Assertions.fail;
 
 import org.junit.jupiter.api.Test;

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -66,8 +66,9 @@
  *
  * <p>When used on a class that serves as a test suite and the
  * {@link IncludeClassNamePatterns @IncludeClassNamePatterns} annotation is not
- * present, the default include pattern {@code "^.*Tests?$"} will be used in order
- * to avoid loading classes unnecessarily (see {@link
+ * present, the default include pattern
+ * {@value org.junit.platform.engine.discovery.ClassNameFilter#STANDARD_INCLUDE_PATTERN}
+ * will be used in order to avoid loading classes unnecessarily (see {@link
  * org.junit.platform.engine.discovery.ClassNameFilter#STANDARD_INCLUDE_PATTERN
  * ClassNameFilter#STANDARD_INCLUDE_PATTERN}).
  *

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.lang.reflect.Method;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
 import java.util.function.BiFunction;
 
@@ -117,7 +118,7 @@ protected static String generateDefaultDisplayName(Method testMethod) {
 	public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) throws Exception {
 		ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testMethod,
 			context.getExtensionRegistry());
-		Object testInstance = context.getTestInstanceProvider().getTestInstance();
+		Object testInstance = context.getTestInstanceProvider().getTestInstance(Optional.of(registry));
 		ThrowableCollector throwableCollector = new ThrowableCollector();
 		TestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),
 			context.getExecutionListener(), this, testInstance, throwableCollector);

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -57,11 +57,11 @@ private List<? extends DiscoverySelector> createDiscoverySelectors(CommandLineOp
 	}
 
 	private List<ClasspathRootSelector> createClasspathRootSelectors(CommandLineOptions options) {
-		Set<Path> rootDirectoriesToScan = determineClasspathRootDirectories(options);
-		return selectClasspathRoots(rootDirectoriesToScan);
+		Set<Path> classpathRoots = determineClasspathRoots(options);
+		return selectClasspathRoots(classpathRoots);
 	}
 
-	private Set<Path> determineClasspathRootDirectories(CommandLineOptions options) {
+	private Set<Path> determineClasspathRoots(CommandLineOptions options) {
 		if (options.getSelectedClasspathEntries().isEmpty()) {
 			Set<Path> rootDirs = new LinkedHashSet<>(ReflectionUtils.getAllClasspathRootDirectories());
 			rootDirs.addAll(options.getAdditionalClasspathEntries());

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/ClasspathRootSelectorResolver.java
Patch:
@@ -12,7 +12,6 @@
 
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 
-import java.nio.file.Paths;
 import java.util.function.Predicate;
 
 import org.junit.platform.engine.discovery.ClasspathRootSelector;
@@ -31,7 +30,7 @@ class ClasspathRootSelectorResolver extends DiscoverySelectorResolver<ClasspathR
 
 	@Override
 	void resolve(ClasspathRootSelector selector, TestClassCollector collector) {
-		findAllClassesInClasspathRoot(Paths.get(selector.getClasspathRoot()), classTester, classNamePredicate).forEach(
+		findAllClassesInClasspathRoot(selector.getClasspathRoot(), classTester, classNamePredicate).forEach(
 			collector::addCompletely);
 	}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -15,7 +15,6 @@
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 import static org.junit.platform.engine.support.filter.ClasspathScanningSupport.buildClassNamePredicate;
 
-import java.nio.file.Paths;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.function.Predicate;
@@ -49,7 +48,7 @@ public void resolveSelectors(EngineDiscoveryRequest request, TestDescriptor engi
 		Predicate<String> classNamePredicate = buildClassNamePredicate(request);
 
 		request.getSelectorsByType(ClasspathRootSelector.class).forEach(selector -> {
-			findAllClassesInClasspathRoot(Paths.get(selector.getClasspathRoot()), isScannableTestClass,
+			findAllClassesInClasspathRoot(selector.getClasspathRoot(), isScannableTestClass,
 				classNamePredicate).forEach(javaElementsResolver::resolveClass);
 		});
 		request.getSelectorsByType(PackageSelector.class).forEach(selector -> {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrows.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.jupiter.api;
 
 import static org.junit.jupiter.api.AssertionUtils.format;
+import static org.junit.jupiter.api.AssertionUtils.getCanonicalName;
 
 import org.junit.jupiter.api.function.Executable;
 import org.opentest4j.AssertionFailedError;
@@ -33,13 +34,12 @@ static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable ex
 				return (T) actualException;
 			}
 			else {
-				String message = format(expectedType.getName(), actualException.getClass().getName(),
-					"Unexpected exception type thrown");
+				String message = format(expectedType, actualException.getClass(), "Unexpected exception type thrown");
 				throw new AssertionFailedError(message, actualException);
 			}
 		}
 		throw new AssertionFailedError(
-			String.format("Expected %s to be thrown, but nothing was thrown.", expectedType.getName()));
+			String.format("Expected %s to be thrown, but nothing was thrown.", getCanonicalName(expectedType)));
 	}
 
 }

File: documentation/src/test/java/example/testinterface/TestInterfaceDemo.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.jupiter.api.Test;
 
 //tag::user_guide[]
-public class TestInterfaceDemo implements TestConsoleLogger, TimeExecutionLogger, TestInterfaceDynamicTestsDemo {
+class TestInterfaceDemo implements TestLifecycleLogger, TimeExecutionLogger, TestInterfaceDynamicTestsDemo {
 
 	@Test
 	void isEqualValue() {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.commons.util;
 
 import static java.util.Arrays.asList;
-import static java.util.stream.Collectors.toList;
+import static java.util.stream.Collectors.toCollection;
 import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.lang.annotation.Annotation;
@@ -291,7 +291,7 @@ public static List<Field> findPublicAnnotatedFields(Class<?> clazz, Class<?> fie
 		// @formatter:off
 		return Arrays.stream(clazz.getFields())
 				.filter(field -> fieldType.isAssignableFrom(field.getType()) && isAnnotated(field, annotationType))
-				.collect(toList());
+				.collect(toCollection(ArrayList::new));
 		// @formatter:on
 	}
 

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -47,9 +47,9 @@ public class ExternalResourceSupport implements BeforeEachCallback, AfterEachCal
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = ExternalResourceAdapter::new;
 
-	private final AbstractTestRuleSupport fieldSupport = new TestRuleFieldSupport(this.adapterGenerator,
+	private final TestRuleFieldSupport fieldSupport = new TestRuleFieldSupport(this.adapterGenerator,
 		ExternalResource.class);
-	private final AbstractTestRuleSupport methodSupport = new TestRuleMethodSupport(this.adapterGenerator,
+	private final TestRuleMethodSupport methodSupport = new TestRuleMethodSupport(this.adapterGenerator,
 		ExternalResource.class);
 
 	@Override

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -46,8 +46,9 @@ public class VerifierSupport implements AfterEachCallback {
 
 	private final Function<TestRuleAnnotatedMember, AbstractTestRuleAdapter> adapterGenerator = VerifierAdapter::new;
 
-	private AbstractTestRuleSupport fieldSupport = new TestRuleFieldSupport(this.adapterGenerator, Verifier.class);
-	private AbstractTestRuleSupport methodSupport = new TestRuleMethodSupport(this.adapterGenerator, Verifier.class);
+	private final TestRuleFieldSupport fieldSupport = new TestRuleFieldSupport(this.adapterGenerator, Verifier.class);
+	private final TestRuleMethodSupport methodSupport = new TestRuleMethodSupport(this.adapterGenerator,
+		Verifier.class);
 
 	@Override
 	public void afterEach(TestExtensionContext context) throws Exception {

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrows.java
Patch:
@@ -24,7 +24,7 @@
 class AssertThrows {
 
 	@SuppressWarnings("unchecked")
-	static <T extends Throwable> T assertThrows(Class<? extends Throwable> expectedType, Executable executable) {
+	static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable executable) {
 		try {
 			executable.execute();
 		}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1023,7 +1023,7 @@ public static void assertAll(String heading, Stream<Executable> executables) thr
 	 * <p>If you do not want to perform additional checks on the exception instance,
 	 * simply ignore the return value.
 	 */
-	public static <T extends Throwable> T assertThrows(Class<? extends Throwable> expectedType, Executable executable) {
+	public static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable executable) {
 		return AssertThrows.assertThrows(expectedType, executable);
 	}
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/PackageUtilsTests.java
Patch:
@@ -14,6 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assumptions.assumeFalse;
 
 import java.util.function.Supplier;
 
@@ -49,12 +50,14 @@ void getAttributeWithFunctionReturningNullIsEmpty() {
 
 	@Test
 	void vendorFromObjectClassIsPresent() {
+		assumeFalse(System.getProperty("java.version").startsWith("9"), "Java 9 not supported, yet");
 		assertTrue(PackageUtils.getAttribute(Object.class, Package::getSpecificationVendor).isPresent());
 		assertTrue(PackageUtils.getAttribute(Object.class, Package::getImplementationVendor).isPresent());
 	}
 
 	@Test
 	void versionSystemPropertyEqualsRuntimeClassImplementationVersion() {
+		assumeFalse(System.getProperty("java.version").startsWith("9"), "Java 9 not supported, yet");
 		Supplier<AssertionError> error = () -> new AssertionError("implementation version not available");
 		String actual = PackageUtils.getAttribute(Runtime.class, Package::getImplementationVersion).orElseThrow(error);
 		assertEquals(System.getProperty("java.version"), actual);

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineBasicTests.java
Patch:
@@ -18,7 +18,7 @@
  * Basic assertions regarding {@link org.junit.platform.engine.TestEngine}
  * functionality.
  *
- * @since 5.0
+ * @since 4.12
  */
 class VintageTestEngineBasicTests {
 

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -55,11 +55,9 @@ public class JUnitPlatformProvider extends AbstractProvider {
 	static final String INCLUDE_TAGS = "includeTags";
 
 	static final String EXCEPTION_MESSAGE_BOTH_NOT_ALLOWED = "The " + INCLUDE_GROUPS + " and " + INCLUDE_TAGS
-			+ " parameters (or the " + EXCLUDE_GROUPS + " and " + EXCLUDE_TAGS + " pararameters) are synonyms - "
+			+ " parameters (or the " + EXCLUDE_GROUPS + " and " + EXCLUDE_TAGS + " parameters) are synonyms - "
 			+ "only one of each is allowed (though neither is required).";
 
-	static final String EXCEPTION_MESSAGE_NO_ENGINE = "JUnit Platform Precondition Violation - No engines were specified.";
-
 	private final ProviderParameters parameters;
 	private final Launcher launcher;
 	final Filter<?>[] includeAndExcludeFilters;

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/TestRuleFieldSupport.java
Patch:
@@ -47,7 +47,6 @@ protected List<Member> findRuleAnnotatedMembers(Object testInstance) {
 			Collectors.toList());
 	}
 
-	// TODO: decide whether this should be promoted to AnnotationUtils
 	private static Stream<Field> findAnnotatedFields(Object instance, Class<?> fieldType,
 			Class<? extends Annotation> annotationType) {
 		Field[] fields = instance.getClass().getFields();

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/adapter/GenericBeforeAndAfterAdvice.java
Patch:
@@ -20,6 +20,9 @@ public interface GenericBeforeAndAfterAdvice {
 	default void before() {
 	}
 
+	default void handleTestExecutionException(Throwable cause) throws Throwable {
+	}
+
 	default void after() {
 	}
 

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/ExternalResourceSupport.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.jupiter.migrationsupport.rules.member.RuleAnnotatedMember;
 import org.junit.platform.commons.meta.API;
 import org.junit.rules.TestRule;
-import org.junit.rules.Verifier;
 
 /**
  * This {@code Extension} provides native support for subclasses of
@@ -40,7 +39,7 @@
  *
  *
  * @since 5.0
- * @see Verifier
+ * @see org.junit.rules.ExternalResource
  * @see TestRule
  * @see Rule
  */

File: junit-jupiter-migration-support/src/main/java/org/junit/jupiter/migrationsupport/rules/VerifierSupport.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.jupiter.migrationsupport.rules.adapter.VerifierAdapter;
 import org.junit.jupiter.migrationsupport.rules.member.RuleAnnotatedMember;
 import org.junit.platform.commons.meta.API;
-import org.junit.rules.ExternalResource;
 import org.junit.rules.TestRule;
 
 /**
@@ -39,7 +38,7 @@
  *
  *
  * @since 5.0
- * @see ExternalResource
+ * @see org.junit.rules.Verifier
  * @see TestRule
  * @see Rule
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/vintage/rulesupport/RuleAnnotatedMember.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.jupiter.engine.vintage.rulesupport;
 
-import org.junit.rules.ExternalResource;
+import org.junit.rules.TestRule;
 
 interface RuleAnnotatedMember {
-	public ExternalResource getTestRuleInstance();
+	TestRule getTestRuleInstance();
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/vintage/rulesupport/ExternalResourceSupportForMultipleFieldRulesTests.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.rules.ExternalResource;
 
-@ExtendWith(ExternalResourceFieldSupport.class)
+@ExtendWith(ExternalResourceSupport.class)
 public class ExternalResourceSupportForMultipleFieldRulesTests {
 
 	private static boolean beforeOfRule1WasExecuted = false;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/vintage/rulesupport/ExternalResourceSupportForMultipleMethodRulesTests.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.rules.ExternalResource;
 
-@ExtendWith(ExternalResourceMethodSupport.class)
+@ExtendWith(ExternalResourceSupport.class)
 public class ExternalResourceSupportForMultipleMethodRulesTests {
 
 	private static boolean beforeOfRule1WasExecuted = false;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/vintage/rulesupport/ExternalResourceSupportForTemporaryFolderFieldTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.rules.TemporaryFolder;
 
-@ExtendWith(ExternalResourceFieldSupport.class)
+@ExtendWith(ExternalResourceSupport.class)
 public class ExternalResourceSupportForTemporaryFolderFieldTests {
 
 	private File file;

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -621,7 +621,7 @@ private static List<Method> getInterfaceMethods(Class<?> clazz, MethodSortOrder
 		List<Method> allInterfaceMethods = new ArrayList<>();
 		for (Class<?> ifc : clazz.getInterfaces()) {
 
-			List<Method> localMethods = Arrays.stream(ifc.getDeclaredMethods()).filter(Method::isDefault).collect(
+			List<Method> localMethods = Arrays.stream(ifc.getDeclaredMethods()).filter(m -> !isAbstract(m)).collect(
 				toList());
 
 			// @formatter:off

File: junit-platform-commons/src/main/java/org/junit/platform/commons/meta/API.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 1.0
  */
-@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })
+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(Experimental)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -191,7 +191,7 @@ public void printFailuresTo(PrintWriter writer) {
 	}
 
 	@Override
-	public List<TestExecutionSummary.Failure> getFailures() {
+	public List<Failure> getFailures() {
 		return new ArrayList<>(failures);
 	}
 
@@ -208,7 +208,7 @@ private void collectTestDescription(Optional<TestIdentifier> optionalIdentifier,
 		});
 	}
 
-	private static class DefaultFailure implements TestExecutionSummary.Failure {
+	private static class DefaultFailure implements Failure {
 
 		private final TestIdentifier testIdentifier;
 		private final Throwable exception;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -45,10 +45,10 @@
  * conditions in tests.
  *
  * <p>Unless otherwise noted, a <em>failed</em> assertion will throw an
- * {@link AssertionFailedError} or a subclass thereof.
+ * {@link org.opentest4j.AssertionFailedError} or a subclass thereof.
  *
  * @since 5.0
- * @see AssertionFailedError
+ * @see org.opentest4j.AssertionFailedError
  * @see Assumptions
  */
 @API(Maintained)

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -83,6 +83,8 @@ private LauncherDiscoveryRequestBuilder createNameBasedBuilder(CommandLineOption
 		options.getSelectedPackages().stream().map(DiscoverySelectors::selectPackage).forEach(selectors::add);
 		options.getSelectedClasses().stream().map(DiscoverySelectors::selectClass).forEach(selectors::add);
 		options.getSelectedMethods().stream().map(DiscoverySelectors::selectMethod).forEach(selectors::add);
+		options.getSelectedClasspathResources().stream().map(DiscoverySelectors::selectClasspathResource).forEach(
+			selectors::add);
 		Preconditions.condition(!selectors.isEmpty() || !options.getArguments().isEmpty(),
 			"No arguments were supplied to the ConsoleLauncher");
 		options.getArguments().stream().map(DiscoveryRequestCreator::selectName).forEach(selectors::add);

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -80,6 +80,9 @@ private LauncherDiscoveryRequestBuilder createNameBasedBuilder(CommandLineOption
 		options.getSelectedUris().stream().map(DiscoverySelectors::selectUri).forEach(selectors::add);
 		options.getSelectedFiles().stream().map(DiscoverySelectors::selectFile).forEach(selectors::add);
 		options.getSelectedDirectories().stream().map(DiscoverySelectors::selectDirectory).forEach(selectors::add);
+		options.getSelectedPackages().stream().map(DiscoverySelectors::selectPackage).forEach(selectors::add);
+		options.getSelectedClasses().stream().map(DiscoverySelectors::selectClass).forEach(selectors::add);
+		options.getSelectedMethods().stream().map(DiscoverySelectors::selectMethod).forEach(selectors::add);
 		Preconditions.condition(!selectors.isEmpty() || !options.getArguments().isEmpty(),
 			"No arguments were supplied to the ConsoleLauncher");
 		options.getArguments().stream().map(DiscoveryRequestCreator::selectName).forEach(selectors::add);

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -78,6 +78,8 @@ private Set<Path> determineClasspathRootDirectories(CommandLineOptions options)
 	private LauncherDiscoveryRequestBuilder createNameBasedBuilder(CommandLineOptions options) {
 		List<DiscoverySelector> selectors = new LinkedList<>();
 		options.getSelectedUris().stream().map(DiscoverySelectors::selectUri).forEach(selectors::add);
+		options.getSelectedFiles().stream().map(DiscoverySelectors::selectFile).forEach(selectors::add);
+		options.getSelectedDirectories().stream().map(DiscoverySelectors::selectDirectory).forEach(selectors::add);
 		Preconditions.condition(!selectors.isEmpty() || !options.getArguments().isEmpty(),
 			"No arguments were supplied to the ConsoleLauncher");
 		options.getArguments().stream().map(DiscoveryRequestCreator::selectName).forEach(selectors::add);

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -122,6 +122,9 @@ public LauncherDiscoveryRequestBuilder selectors(List<? extends DiscoverySelecto
 	/**
 	 * Add all of the supplied {@code filters} to the request.
 	 *
+	 * <p>The {@code filters} are combined using AND semantics, i.e. all of them
+	 * have to include a resource for it to end up in the test plan.
+	 *
 	 * <p><strong>Warning</strong>: be cautious when registering multiple competing
 	 * {@link EngineFilter#includeEngines include} {@code EngineFilters} or multiple
 	 * competing {@link EngineFilter#excludeEngines exclude} {@code EngineFilters}

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/JUnitPlatformProviderTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/OrFilterTests.java
Patch:
@@ -16,8 +16,8 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -11,7 +11,7 @@
 package example;
 
 import org.junit.platform.runner.ExcludeTags;
-import org.junit.platform.runner.IncludeClassNamePattern;
+import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.runner.SelectPackages;
 import org.junit.runner.RunWith;
@@ -31,7 +31,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("example")
-@IncludeClassNamePattern(".+(Tests|Demo)$")
+@IncludeClassNamePatterns(".+(Tests|Demo)$")
 @ExcludeTags("exclude")
 public class DocumentationTestSuite {
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/JupiterTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter;
 
-import org.junit.platform.runner.IncludeClassNamePattern;
+import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.runner.SelectPackages;
@@ -34,7 +34,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.jupiter")
-@IncludeClassNamePattern(".*Tests?")
+@IncludeClassNamePatterns(".*Tests?")
 @IncludeEngines("junit-jupiter")
 public class JupiterTestSuite {
 }

File: junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/SurefireProviderTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import org.junit.platform.runner.IncludeClassNamePattern;
+import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.runner.SelectPackages;
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.platform.surefire.provider")
-@IncludeClassNamePattern(".*Tests?")
+@IncludeClassNamePatterns(".*Tests?")
 @IncludeEngines("junit-jupiter")
 public class SurefireProviderTestSuite {
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine;
 
-import org.junit.platform.runner.IncludeClassNamePattern;
+import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.runner.SelectPackages;
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.vintage.engine")
-@IncludeClassNamePattern(".*Tests?")
+@IncludeClassNamePatterns(".*Tests?")
 @IncludeEngines("junit-jupiter")
 public class VintageTestEngineTestSuite {
 }

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform;
 
-import org.junit.platform.runner.IncludeClassNamePattern;
+import org.junit.platform.runner.IncludeClassNamePatterns;
 import org.junit.platform.runner.IncludeEngines;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.platform.runner.SelectPackages;
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.platform")
-@IncludeClassNamePattern(".*Tests?")
+@IncludeClassNamePatterns(".*Tests?")
 @IncludeEngines("junit-jupiter")
 public class JUnitPlatformTestSuite {
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java
Patch:
@@ -47,7 +47,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.descriptor.JavaClassSource;
+import org.junit.platform.engine.support.descriptor.ClassSource;
 
 /**
  * {@link TestDescriptor} for tests based on Java classes.
@@ -90,7 +90,7 @@ protected ClassTestDescriptor(UniqueId uniqueId, Function<Class<?>, String> defa
 		this.beforeEachMethods = findBeforeEachMethods(testClass);
 		this.afterEachMethods = findAfterEachMethods(testClass);
 
-		setSource(new JavaClassSource(testClass));
+		setSource(new ClassSource(testClass));
 	}
 
 	// --- TestDescriptor ------------------------------------------------------

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.descriptor.JavaMethodSource;
+import org.junit.platform.engine.support.descriptor.MethodSource;
 
 /**
  * {@link TestDescriptor} for tests based on Java methods.
@@ -76,7 +76,7 @@ public MethodTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method testMe
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;
 
-		setSource(new JavaMethodSource(testMethod));
+		setSource(new MethodSource(testMethod));
 	}
 
 	// --- TestDescriptor ------------------------------------------------------

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import org.junit.platform.engine.ExecutionRequest;
@@ -29,7 +29,7 @@ public abstract class AbstractJupiterTestEngineTests {
 	private final JupiterTestEngine engine = new JupiterTestEngine();
 
 	protected ExecutionEventRecorder executeTestsForClass(Class<?> testClass) {
-		return executeTests(request().selectors(selectJavaClass(testClass)).build());
+		return executeTests(request().selectors(selectClass(testClass)).build());
 	}
 
 	protected ExecutionEventRecorder executeTests(LauncherDiscoveryRequest request) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultMethodTests.java
Patch:
@@ -12,10 +12,9 @@
 
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.test.event.ExecutionEventRecorder;
 import org.junit.platform.launcher.LauncherDiscoveryRequest;
@@ -31,7 +30,7 @@ public class DefaultMethodTests extends AbstractJupiterTestEngineTests {
 	@Test
 	void executeTestCaseWithDefaultMethodFromInterfaceSelectedByFullyQualifedMethodName() {
 		String fqmn = TestCaseWithDefaultMethod.class.getName() + "#test";
-		LauncherDiscoveryRequest request = request().selectors(selectJavaMethod(fqmn)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectMethod(fqmn)).build();
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 
 		// @formatter:off

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ReportingTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
@@ -32,7 +32,7 @@ public class ReportingTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void threeReportEntriesArePublished() {
-		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(MyReportingTestCase.class)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectClass(MyReportingTestCase.class)).build();
 
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
@@ -132,7 +132,7 @@ private void assertBeforeAllAndAfterAllCallbacks(Class<?> testClass, int testsSt
 			String... expectedCalls) {
 
 		callSequence.clear();
-		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(testClass)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectClass(testClass)).build();
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 
 		assertEquals(testsStarted, eventRecorder.getTestStartedCount(), "# tests started");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
@@ -39,7 +39,7 @@ public class TestInstancePostProcessorTests extends AbstractJupiterTestEngineTes
 
 	@Test
 	public void instancePostProcessorsInNestedClasses() {
-		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(OuterTestCase.class)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectClass(OuterTestCase.class)).build();
 
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectClasses.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.annotation.Target;
 
 import org.junit.platform.commons.meta.API;
+import org.junit.platform.engine.discovery.ClassSelector;
 
 /**
  * {@code @SelectClasses} specifies the classes to <em>select</em> when running
@@ -28,7 +29,7 @@
  * @since 1.0
  * @see JUnitPlatform
  * @see SelectPackages
- * @see org.junit.platform.engine.discovery.JavaClassSelector
+ * @see ClassSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectPackages.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.annotation.Target;
 
 import org.junit.platform.commons.meta.API;
+import org.junit.platform.engine.discovery.PackageSelector;
 
 /**
  * {@code @SelectPackages} specifies the names of packages to <em>select</em>
@@ -28,7 +29,7 @@
  * @since 1.0
  * @see JUnitPlatform
  * @see SelectClasses
- * @see org.junit.platform.engine.discovery.JavaPackageSelector
+ * @see PackageSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
@@ -97,7 +97,7 @@ private void invokeSingleClass(Class<?> testClass, RunListener runListener) {
 		SimpleReportEntry classEntry = new SimpleReportEntry(getClass().getName(), testClass.getName());
 		runListener.testSetStarting(classEntry);
 
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
 		launcher.execute(discoveryRequest);
 
 		runListener.testSetCompleted(classEntry);

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/TestPlanScannerFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.function.Predicate;
@@ -38,7 +38,7 @@ public TestPlanScannerFilter(Launcher launcher) {
 	@Override
 	@SuppressWarnings("rawtypes")
 	public boolean accept(Class testClass) {
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
 		TestPlan testPlan = launcher.discover(discoveryRequest);
 		return testPlan.countTestIdentifiers(hasTests) > 0;
 	}

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.TestDescriptor;
-import org.junit.platform.engine.support.descriptor.JavaClassSource;
+import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
 
@@ -31,7 +31,7 @@ public class RunnerTestDescriptor extends VintageTestDescriptor {
 
 	public RunnerTestDescriptor(TestDescriptor parent, Class<?> testClass, Runner runner) {
 		super(parent, SEGMENT_TYPE_RUNNER, testClass.getName(), runner.getDescription(), testClass.getName(),
-			Optional.of(new JavaClassSource(testClass)));
+			Optional.of(new ClassSource(testClass)));
 		this.testClass = testClass;
 		this.runner = runner;
 	}

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine;
 
 import static org.assertj.core.api.Assertions.allOf;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.abortedWithReason;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;
@@ -456,7 +456,7 @@ public void executesJUnit4TestCaseWithRunnerWithCustomUniqueIds() {
 
 	private static List<ExecutionEvent> execute(Class<?> testClass) {
 		VintageTestEngine engine = new VintageTestEngine();
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
 		return ExecutionEventRecorder.execute(engine, discoveryRequest);
 	}
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscoveryRequestResolverTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.FilterResult.includedIf;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 
@@ -41,7 +41,7 @@ void logsWarningWhenFilterExcludesClass() {
 			() -> "no match");
 		// @formatter:off
 		EngineDiscoveryRequest request = request()
-				.selectors(selectJavaClass(Foo.class), selectJavaClass(Bar.class))
+				.selectors(selectClass(Foo.class), selectClass(Bar.class))
 				.filters(filter)
 				.build();
 		// @formatter:on

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/CompositeTestSourceTests.java
Patch:
@@ -43,7 +43,7 @@ void createCompositeTestSourceFromEmptyList() {
 	@Test
 	void createCompositeTestSourceFromClassAndFileSources() {
 		FileSource fileSource = new FileSource(new File("example.test"));
-		JavaClassSource classSource = new JavaClassSource(getClass());
+		ClassSource classSource = new ClassSource(getClass());
 		List<TestSource> sources = new ArrayList<>(Arrays.asList(fileSource, classSource));
 		CompositeTestSource compositeTestSource = new CompositeTestSource(sources);
 
@@ -60,8 +60,8 @@ void createCompositeTestSourceFromClassAndFileSources() {
 
 	@Test
 	void equalsAndHashCode() {
-		List<TestSource> sources1 = Arrays.asList(new JavaClassSource(Number.class));
-		List<TestSource> sources2 = Arrays.asList(new JavaClassSource(String.class));
+		List<TestSource> sources1 = Arrays.asList(new ClassSource(Number.class));
+		List<TestSource> sources2 = Arrays.asList(new ClassSource(String.class));
 		assertEqualsAndHashCode(new CompositeTestSource(sources1), new CompositeTestSource(sources1),
 			new CompositeTestSource(sources2));
 	}

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoClassTestDescriptor.java
Patch:
@@ -31,7 +31,7 @@ public class DemoClassTestDescriptor extends AbstractTestDescriptor {
 
 	public DemoClassTestDescriptor(UniqueId uniqueId, Class<?> testClass) {
 		super(uniqueId, Preconditions.notNull(testClass, "Class must not be null").getSimpleName());
-		setSource(new JavaClassSource(testClass));
+		setSource(new ClassSource(testClass));
 		this.testClass = testClass;
 	}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoMethodTestDescriptor.java
Patch:
@@ -38,7 +38,7 @@ public DemoMethodTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method te
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.testMethod = testMethod;
 
-		setSource(new JavaMethodSource(testMethod));
+		setSource(new MethodSource(testMethod));
 	}
 
 	@Override

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DemoHierarchicalTestEngine.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.descriptor.JavaMethodSource;
+import org.junit.platform.engine.support.descriptor.MethodSource;
 
 /**
  * @since 1.0
@@ -51,7 +51,7 @@ public DemoHierarchicalTestDescriptor addTest(String uniqueName, Runnable execut
 
 	public DemoHierarchicalTestDescriptor addTest(Method testMethod, Runnable executeBlock) {
 		UniqueId uniqueId = engineDescriptor.getUniqueId().append("test", testMethod.getName());
-		JavaMethodSource source = new JavaMethodSource(testMethod);
+		MethodSource source = new MethodSource(testMethod);
 		DemoHierarchicalTestDescriptor child = new DemoHierarchicalTestDescriptor(uniqueId, testMethod.getName(),
 			source, executeBlock);
 		engineDescriptor.addChild(child);

File: platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.descriptor.JavaClassSource;
+import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.platform.engine.test.TestDescriptorStub;
 
 /**
@@ -43,12 +43,12 @@ void inheritsIdAndNamesFromDescriptor() {
 	@Test
 	void serialization() throws Exception {
 		TestIdentifier identifier = serializeAndDeserialize(//
-			new TestIdentifier("uniqueId", "displayName", Optional.of(new JavaClassSource(TestIdentifierTests.class)),
+			new TestIdentifier("uniqueId", "displayName", Optional.of(new ClassSource(TestIdentifierTests.class)),
 				singleton(TestTag.create("aTag")), true, false, Optional.of("parentId")));
 
 		assertEquals("uniqueId", identifier.getUniqueId());
 		assertEquals("displayName", identifier.getDisplayName());
-		assertThat(identifier.getSource()).contains(new JavaClassSource(TestIdentifierTests.class));
+		assertThat(identifier.getSource()).contains(new ClassSource(TestIdentifierTests.class));
 		assertEquals(singleton(TestTag.create("aTag")), identifier.getTags());
 		assertTrue(identifier.isTest());
 		assertFalse(identifier.isContainer());

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaPackage;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
@@ -134,7 +134,7 @@ void discoverTestPlanForSingleEngine() {
 
 		DefaultLauncher launcher = createLauncher(engine);
 
-		TestPlan testPlan = launcher.discover(request().selectors(selectJavaPackage("any")).build());
+		TestPlan testPlan = launcher.discover(request().selectors(selectPackage("any")).build());
 
 		assertThat(testPlan.getRoots()).hasSize(1);
 		TestIdentifier rootIdentifier = testPlan.getRoots().iterator().next();
@@ -286,7 +286,7 @@ void launcherAppliesPostDiscoveryFilters() {
 
 		TestPlan testPlan = launcher.discover( //
 			request() //
-					.selectors(selectJavaPackage("any")) //
+					.selectors(selectPackage("any")) //
 					.filters(includeWithUniqueIdContainsTest, includeWithUniqueIdContains1) //
 					.build());
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.List;
@@ -56,8 +56,8 @@ void testCreate() {
 	private LauncherDiscoveryRequest createLauncherDiscoveryRequestForBothStandardEngineExampleClasses() {
 		// @formatter:off
 		return request()
-				.selectors(selectJavaClass(JUnit4Example.class))
-				.selectors(selectJavaClass(JUnit5Example.class))
+				.selectors(selectClass(JUnit4Example.class))
+				.selectors(selectClass(JUnit5Example.class))
 				.build();
 		// @formatter:on
 	}

File: platform-tests/src/test/java/org/junit/platform/launcher/listener/SummaryGenerationTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.platform.engine.TestExecutionResult;
 import org.junit.platform.engine.TestSource;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.support.descriptor.JavaClassSource;
+import org.junit.platform.engine.support.descriptor.ClassSource;
 import org.junit.platform.engine.test.TestDescriptorStub;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
@@ -135,7 +135,7 @@ void reportingCorrectFailures() throws Exception {
 
 			@Override
 			public Optional<TestSource> getSource() {
-				return Optional.of(new JavaClassSource(Object.class));
+				return Optional.of(new ClassSource(Object.class));
 			}
 		};
 		TestIdentifier failed = TestIdentifier.from(testDescriptor);

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineDiscoveryTests.java
Patch:
@@ -40,6 +40,7 @@
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.commons.util.StringUtils;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
@@ -678,7 +679,8 @@ private static void assertMethodSource(Method expectedMethod, TestDescriptor tes
 		JavaMethodSource methodSource = (JavaMethodSource) testDescriptor.getSource().get();
 		assertThat(methodSource.getClassName()).isEqualTo(expectedMethod.getDeclaringClass().getName());
 		assertThat(methodSource.getMethodName()).isEqualTo(expectedMethod.getName());
-		assertThat(methodSource.getMethodParameterTypes()).containsExactly(expectedMethod.getParameterTypes());
+		assertThat(methodSource.getMethodParameterTypes()).isEqualTo(
+			StringUtils.nullSafeToString(expectedMethod.getParameterTypes()));
 	}
 
 	private static LauncherDiscoveryRequest discoveryRequestForClass(Class<?> testClass) {

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/JavaSourceTests.java
Patch:
@@ -105,7 +105,7 @@ void methodSource() throws Exception {
 
 		assertThat(source.getClassName()).isEqualTo(getClass().getName());
 		assertThat(source.getMethodName()).isEqualTo(testMethod.getName());
-		assertThat(source.getMethodParameterTypes()).containsExactly(String.class);
+		assertThat(source.getMethodParameterTypes()).isEqualTo(String.class.getName());
 	}
 
 	@Test

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -102,12 +102,12 @@ private String getTechnicalName(TestIdentifier testIdentifier) {
 			}
 			else if (source instanceof JavaMethodSource) {
 				JavaMethodSource javaMethodSource = (JavaMethodSource) source;
-				List<Class<?>> parameterTypes = javaMethodSource.getJavaMethodParameterTypes();
+				List<Class<?>> parameterTypes = javaMethodSource.getMethodParameterTypes();
 				if (parameterTypes.size() == 0) {
-					return javaMethodSource.getJavaMethodName();
+					return javaMethodSource.getMethodName();
 				}
 				else {
-					return String.format("%s(%s)", javaMethodSource.getJavaMethodName(), StringUtils.nullSafeToString(
+					return String.format("%s(%s)", javaMethodSource.getMethodName(), StringUtils.nullSafeToString(
 						Class::getName, parameterTypes.toArray(new Class<?>[parameterTypes.size()])));
 				}
 			}

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/RunListenerAdapter.java
Patch:
@@ -74,8 +74,8 @@ private SimpleReportEntry createReportEntry(TestIdentifier testIdentifier, Optio
 		}
 		else if (testSource instanceof JavaMethodSource) {
 			JavaMethodSource javaMethodSource = (JavaMethodSource) testSource;
-			String className = javaMethodSource.getJavaClass().getName();
-			String methodName = javaMethodSource.getJavaMethodName();
+			String className = javaMethodSource.getClassName();
+			String methodName = javaMethodSource.getMethodName();
 			StackTraceWriter stackTraceWriter = new PojoStackTraceWriter(className, methodName, throwable.orElse(null));
 			return new SimpleReportEntry(className, testIdentifier.getDisplayName(), stackTraceWriter, null);
 		}
@@ -93,7 +93,7 @@ private String getClassNameOrUniqueId(TestIdentifier testIdentifier) {
 		}
 		else if (testSource instanceof JavaMethodSource) {
 			JavaMethodSource javaMethodSource = (JavaMethodSource) testSource;
-			return javaMethodSource.getJavaClass().getName();
+			return javaMethodSource.getClassName();
 		}
 		else {
 			return testIdentifier.getUniqueId();

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineDiscoveryTests.java
Patch:
@@ -676,9 +676,9 @@ private static void assertClassSource(Class<?> expectedClass, TestDescriptor tes
 	private static void assertMethodSource(Method expectedMethod, TestDescriptor testDescriptor) {
 		assertThat(testDescriptor.getSource()).containsInstanceOf(JavaMethodSource.class);
 		JavaMethodSource methodSource = (JavaMethodSource) testDescriptor.getSource().get();
-		assertThat(methodSource.getJavaClass()).isEqualTo(expectedMethod.getDeclaringClass());
-		assertThat(methodSource.getJavaMethodName()).isEqualTo(expectedMethod.getName());
-		assertThat(methodSource.getJavaMethodParameterTypes()).containsExactly(expectedMethod.getParameterTypes());
+		assertThat(methodSource.getClassName()).isEqualTo(expectedMethod.getDeclaringClass().getName());
+		assertThat(methodSource.getMethodName()).isEqualTo(expectedMethod.getName());
+		assertThat(methodSource.getMethodParameterTypes()).containsExactly(expectedMethod.getParameterTypes());
 	}
 
 	private static LauncherDiscoveryRequest discoveryRequestForClass(Class<?> testClass) {

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java
Patch:
@@ -210,7 +210,8 @@ void selectMethodByFullyQualifiedNameForSpockSpec() {
 		String spockFullyQualifiedMethodName = spockClassName + "#" + spockMethodName;
 
 		JavaMethodSelector selector = selectJavaMethod(spockFullyQualifiedMethodName);
-		assertEquals(spockFullyQualifiedMethodName, selector.getMethodName());
+		assertEquals(spockClassName, selector.getClassName());
+		assertEquals(spockMethodName, selector.getMethodName());
 	}
 
 	@Test

File: documentation/src/test/java/example/UsingTheLauncherDemo.java
Patch:
@@ -11,7 +11,7 @@
 package example;
 
 // tag::imports[]
-import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaPackage;
 
@@ -40,7 +40,7 @@ void discovery() {
 				selectJavaPackage("com.example.mytests"),
 				selectJavaClass(MyTestClass.class)
 			)
-			.filters(includeClassNamePattern(".*Test"))
+			.filters(includeClassNamePatterns(".*Test"))
 			.build();
 
 		TestPlan plan = LauncherFactory.create().discover(request);
@@ -57,7 +57,7 @@ void execution() {
 				selectJavaPackage("com.example.mytests"),
 				selectJavaClass(MyTestClass.class)
 			)
-			.filters(includeClassNamePattern(".*Test"))
+			.filters(includeClassNamePatterns(".*Test"))
 			.build();
 
 		Launcher launcher = LauncherFactory.create();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DiscoveryFilterApplierTests.java
Patch:
@@ -39,7 +39,7 @@ class DiscoveryFilterApplierTests {
 	void nonMatchingClassesAreExcluded() {
 
 		EngineDiscoveryRequest request = request().filters(
-			ClassNameFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
+			ClassNameFilter.includeClassNamePatterns(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()
@@ -61,7 +61,7 @@ void nonMatchingClassesAreExcluded() {
 	@Test
 	void nestedTestClassesAreAlwaysIncludedWhenTheirParentIs() {
 		EngineDiscoveryRequest request = request().filters(
-			ClassNameFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
+			ClassNameFilter.includeClassNamePatterns(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaMethod;
@@ -81,7 +81,7 @@ private LauncherDiscoveryRequestBuilder createNameBasedBuilder(CommandLineOption
 	}
 
 	private void addFilters(LauncherDiscoveryRequestBuilder requestBuilder, CommandLineOptions options) {
-		requestBuilder.filters(includeClassNamePattern(options.getIncludeClassNamePattern()));
+		requestBuilder.filters(includeClassNamePatterns(options.getIncludeClassNamePattern()));
 
 		if (!options.getIncludedTags().isEmpty()) {
 			requestBuilder.filters(includeTags(options.getIncludedTags()));

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -62,8 +62,8 @@
  *        // excludeEngines("junit-vintage"),
  *        includeTags("fast"),
  *        // excludeTags("slow"),
- *        includeClassNamePattern(".*Test[s]?")
- *        // includeClassNamePattern("org\.example\.tests.*")
+ *        includeClassNamePatterns(".*Test[s]?")
+ *        // includeClassNamePatterns("org\.example\.tests.*")
  *     )
  *     .configurationParameter("key1", "value1")
  *     .configurationParameters(configParameterMap)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeClassNamePattern.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @since 1.0
  * @see JUnitPlatform
- * @see org.junit.platform.engine.discovery.ClassNameFilter#includeClassNamePattern
+ * @see org.junit.platform.engine.discovery.ClassNameFilter#includeClassNamePatterns
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -14,7 +14,7 @@
 import static java.util.stream.Collectors.toList;
 import static org.junit.platform.commons.meta.API.Usage.Maintained;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
-import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
@@ -160,7 +160,7 @@ private <T> List<DiscoverySelector> transform(T[] sourceElements, Function<T, Di
 	private void addIncludeClassNamePatternFilter(LauncherDiscoveryRequestBuilder requestBuilder, boolean isSuite) {
 		String pattern = getIncludeClassNamePattern(isSuite);
 		if (!pattern.isEmpty()) {
-			requestBuilder.filters(includeClassNamePattern(pattern));
+			requestBuilder.filters(includeClassNamePatterns(pattern));
 		}
 	}
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineDiscoveryTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.commons.util.FunctionUtils.where;
-import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaMethod;
@@ -229,7 +229,7 @@ void resolvesApplyingClassNameFilters() throws Exception {
 		Path root = getClasspathRoot(PlainJUnit4TestCaseWithSingleTestWhichFails.class);
 
 		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClasspathRoots(singleton(root))).filters(
-			includeClassNamePattern(".*JUnit4.*"), includeClassNamePattern(".*Plain.*")).build();
+			includeClassNamePatterns(".*JUnit4.*"), includeClassNamePatterns(".*Plain.*")).build();
 
 		TestDescriptor engineDescriptor = discoverTests(discoveryRequest);
 
@@ -528,7 +528,7 @@ void doesNotResolveMethodOfClassNotAcceptedByClassNameFilter() throws Exception
 		// @formatter:off
 		LauncherDiscoveryRequest request = request()
 				.selectors(selectJavaMethod(testClass, testClass.getMethod("failingTest")))
-				.filters(includeClassNamePattern("Foo"))
+				.filters(includeClassNamePatterns("Foo"))
 				.build();
 		// @formatter:on
 

File: platform-tests/src/test/java/org/junit/platform/engine/FilterCompositionTests.java
Patch:
@@ -42,15 +42,15 @@ void composingNoFiltersCreatesFilterThatIncludesEverything() {
 
 	@Test
 	void composingSingleFilterWillReturnTheOriginalOne() {
-		Filter<?> singleFilter = ClassNameFilter.includeClassNamePattern(".*ring.*");
+		Filter<?> singleFilter = ClassNameFilter.includeClassNamePatterns(".*ring.*");
 		Filter<?> composed = Filter.composeFilters(singleFilter);
 		assertSame(singleFilter, composed);
 	}
 
 	@Test
 	void composingMultipleFiltersIsAConjunctionOfFilters() {
-		Filter<String> firstFilter = ClassNameFilter.includeClassNamePattern(".*ring.*");
-		Filter<String> secondFilter = ClassNameFilter.includeClassNamePattern(".*Join.*");
+		Filter<String> firstFilter = ClassNameFilter.includeClassNamePatterns(".*ring.*");
+		Filter<String> secondFilter = ClassNameFilter.includeClassNamePatterns(".*Join.*");
 
 		Filter<String> composed = Filter.composeFilters(firstFilter, secondFilter);
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/annotation/Testable.java
Patch:
@@ -40,7 +40,7 @@
  * <p>{@code @Testable} will typically be used as a meta-annotation in order to
  * create a custom <em>composed annotation</em> that inherits the semantics
  * of {@code @Testable}. For example, the {@code @Test} and {@code @TestFactory}
- * annotations in JUnit Jupiter are meta-annotated with {@code Testable}.
+ * annotations in JUnit Jupiter are meta-annotated with {@code @Testable}.
  * <p>For test programming models that do not rely on annotations, test classes
  * or test methods may be directly annotated with {@code @Testable}. Alternatively,
  * if concrete test classes extend from a base class, the base class can be

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
 /**
@@ -27,6 +28,6 @@
 @API(Internal)
 public interface AfterEachMethodAdapter extends Extension {
 
-	void invokeAfterEachMethod(TestExtensionContext context) throws Throwable;
+	void invokeAfterEachMethod(TestExtensionContext context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
 
 /**
@@ -27,6 +28,6 @@
 @API(Internal)
 public interface BeforeEachMethodAdapter extends Extension {
 
-	void invokeBeforeEachMethod(TestExtensionContext context) throws Throwable;
+	void invokeBeforeEachMethod(TestExtensionContext context, ExtensionRegistry registry) throws Throwable;
 
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -18,6 +18,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.junit.platform.commons.annotation.Testable;
 import org.junit.platform.commons.meta.API;
 
 /**
@@ -46,5 +47,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(Stable)
+@Testable
 public @interface Test {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -18,6 +18,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.junit.platform.commons.annotation.Testable;
 import org.junit.platform.commons.meta.API;
 
 /**
@@ -45,5 +46,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @API(Experimental)
+@Testable
 public @interface TestFactory {
 }

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1034,7 +1034,7 @@ public static void assertAll(Stream<Executable> executables) throws MultipleFail
 	 */
 	@API(Experimental)
 	public static void assertAll(String heading, Executable... executables) throws MultipleFailuresError {
-		Preconditions.notNull(executables, "executables array must not be null");
+		Preconditions.notEmpty(executables, "executables array must not be null or empty");
 		Preconditions.containsNoNullElements(executables, "individual executables must not be null");
 		assertAll(heading, Arrays.stream(executables));
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -314,7 +314,7 @@ class Namespace {
 		 * <p>Internally the {@code parts} are compared using {@link Object#equals(Object)}.
 		 */
 		public static Namespace create(Object... parts) {
-			Preconditions.notNull(parts, "parts array must not be null");
+			Preconditions.notEmpty(parts, "parts array must not be null or empty");
 			Preconditions.containsNoNullElements(parts, "individual parts must not be null");
 			return new Namespace(parts);
 		}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertionsTests.java
Patch:
@@ -3342,7 +3342,7 @@ void assertAllWithNullInExecutableArray() {
 			// @formatter:on
 		}
 		catch (PreconditionViolationException ex) {
-			assertMessageEquals(ex, "executables array must not be null");
+			assertMessageEquals(ex, "individual executables must not be null");
 		}
 	}
 
@@ -3352,7 +3352,7 @@ void assertAllWithNullExecutableArray() {
 			assertAll((Executable[]) null);
 		}
 		catch (PreconditionViolationException ex) {
-			assertMessageEquals(ex, "executables array must not be null");
+			assertMessageEquals(ex, "executables array must not be null or empty");
 		}
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -49,6 +49,7 @@ public class CompositeTestSource implements TestSource {
 	 */
 	public CompositeTestSource(Collection<? extends TestSource> sources) {
 		Preconditions.notEmpty(sources, "TestSource collection must not be null or empty");
+		Preconditions.containsNoNullElements(sources, "individual TestSources must not be null");
 		this.sources = Collections.unmodifiableList(new ArrayList<>(sources));
 	}
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -56,7 +56,7 @@ public interface Launcher {
 	 * Register one or more listeners for test execution.
 	 *
 	 * @param listeners the listeners to be notified of test execution events;
-	 * never {@code null}
+	 * never {@code null} or empty
 	 */
 	void registerTestExecutionListeners(TestExecutionListener... listeners);
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -68,7 +68,7 @@ private static Iterable<TestEngine> validateUniqueIds(Iterable<TestEngine> testE
 
 	@Override
 	public void registerTestExecutionListeners(TestExecutionListener... listeners) {
-		Preconditions.notNull(listeners, "listeners array must not be null");
+		Preconditions.notEmpty(listeners, "listeners array must not be null or empty");
 		Preconditions.containsNoNullElements(listeners, "individual listeners must not be null");
 		this.listenerRegistry.registerListeners(listeners);
 	}

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1034,7 +1034,8 @@ public static void assertAll(Stream<Executable> executables) throws MultipleFail
 	 */
 	@API(Experimental)
 	public static void assertAll(String heading, Executable... executables) throws MultipleFailuresError {
-		Preconditions.notNull(executables, "executables must not be null");
+		Preconditions.notNull(executables, "executables array must not be null");
+		Preconditions.containsNoNullElements(executables, "individual executables must not be null");
 		assertAll(heading, Arrays.stream(executables));
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ExtensionContext.java
Patch:
@@ -311,10 +311,11 @@ class Namespace {
 		 *
 		 * <p>The order of the {@code parts} is not significant.
 		 *
-		 * <p>Internally the {@code parts} are compared using {@code Object.equals(Object)}.
+		 * <p>Internally the {@code parts} are compared using {@link Object#equals(Object)}.
 		 */
 		public static Namespace create(Object... parts) {
-			Preconditions.notNull(parts, "There must be at least one reference object to create a namespace");
+			Preconditions.notNull(parts, "parts array must not be null");
+			Preconditions.containsNoNullElements(parts, "individual parts must not be null");
 			return new Namespace(parts);
 		}
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertionsTests.java
Patch:
@@ -3342,7 +3342,7 @@ void assertAllWithNullInExecutableArray() {
 			// @formatter:on
 		}
 		catch (PreconditionViolationException ex) {
-			assertMessageEquals(ex, "executables must not be null");
+			assertMessageEquals(ex, "executables array must not be null");
 		}
 	}
 
@@ -3352,7 +3352,7 @@ void assertAllWithNullExecutableArray() {
 			assertAll((Executable[]) null);
 		}
 		catch (PreconditionViolationException ex) {
-			assertMessageEquals(ex, "executables must not be null");
+			assertMessageEquals(ex, "executables array must not be null");
 		}
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -230,7 +230,8 @@ public static Class<?> getWrapperType(Class<?> type) {
 	 */
 	public static <T> T newInstance(Class<T> clazz, Object... args) {
 		Preconditions.notNull(clazz, "class must not be null");
-		Preconditions.notNull(args, "none of the arguments may be null");
+		Preconditions.notNull(args, "argument array must not be null");
+		Preconditions.containsNoNullElements(args, "individual arguments must not be null");
 
 		try {
 			Class<?>[] parameterTypes = Arrays.stream(args).map(Object::getClass).toArray(Class[]::new);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -52,7 +52,8 @@ public interface Filter<T> {
 	@SafeVarargs
 	@SuppressWarnings("varargs")
 	static <T> Filter<T> composeFilters(Filter<T>... filters) {
-		Preconditions.notNull(filters, "Filters must not be null");
+		Preconditions.notNull(filters, "filters array must not be null");
+		Preconditions.containsNoNullElements(filters, "individual filters must not be null");
 
 		if (filters.length == 0) {
 			return alwaysIncluded();

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -68,7 +68,8 @@ private static Iterable<TestEngine> validateUniqueIds(Iterable<TestEngine> testE
 
 	@Override
 	public void registerTestExecutionListeners(TestExecutionListener... listeners) {
-		Preconditions.notNull(listeners, "listeners must not be null");
+		Preconditions.notNull(listeners, "listeners array must not be null");
+		Preconditions.containsNoNullElements(listeners, "individual listeners must not be null");
 		this.listenerRegistry.registerListeners(listeners);
 	}
 

File: documentation/src/test/java/example/AssertionsDemo.java
Patch:
@@ -16,10 +16,10 @@
 import static java.time.Duration.ofMinutes;
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTimeout;
 import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ void groupedAssertions() {
 
 	@Test
 	void exceptionTesting() {
-		Throwable exception = expectThrows(IllegalArgumentException.class, () -> {
+		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
 			throw new IllegalArgumentException("a message");
 		});
 		assertEquals("a message", exception.getMessage());

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/DynamicTestTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.api;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.jupiter.api.Assertions.expectThrows;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import java.util.Arrays;
 import java.util.LinkedList;
@@ -40,7 +40,7 @@ void streamFromIterator() throws Throwable {
 		dynamicTests.get(1).getExecutable().execute();
 		assertThat(assertedValues).containsExactly("foo", "bar");
 
-		Throwable t = expectThrows(Throwable.class, () -> dynamicTests.get(2).getExecutable().execute());
+		Throwable t = assertThrows(Throwable.class, () -> dynamicTests.get(2).getExecutable().execute());
 		assertThat(t).hasMessage("Baz!");
 		assertThat(assertedValues).containsExactly("foo", "bar");
 	}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -14,8 +14,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.junit.jupiter.engine.discovery.JupiterUniqueIdBuilder.engineId;
 import static org.junit.jupiter.engine.discovery.JupiterUniqueIdBuilder.uniqueIdForClass;
 import static org.junit.jupiter.engine.discovery.JupiterUniqueIdBuilder.uniqueIdForMethod;
@@ -233,14 +233,14 @@ public void methodResolutionByUniqueIdWithMissingParameters() {
 	public void methodResolutionByUniqueIdWithBogusParameters() {
 		UniqueIdSelector selector = selectUniqueId(
 			uniqueIdForMethod(getClass(), "methodName(java.lang.String, junit.foo.Enigma)"));
-		Exception exception = expectThrows(JUnitException.class,
+		Exception exception = assertThrows(JUnitException.class,
 			() -> resolver.resolveSelectors(request().selectors(selector).build(), engineDescriptor));
 		assertThat(exception).hasMessageStartingWith("Failed to load parameter type");
 		assertThat(exception).hasMessageContaining("junit.foo.Enigma");
 	}
 
 	private void assertMethodDoesNotMatchPattern(UniqueIdSelector selector) {
-		Exception exception = expectThrows(PreconditionViolationException.class,
+		Exception exception = assertThrows(PreconditionViolationException.class,
 			() -> resolver.resolveSelectors(request().selectors(selector).build(), engineDescriptor));
 		assertThat(exception).hasMessageStartingWith("Method");
 		assertThat(exception).hasMessageContaining("does not match pattern");

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/OrFilterTests.java
Patch:
@@ -14,8 +14,8 @@
 import static java.util.Collections.emptyList;
 import static java.util.Collections.singleton;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.mock;
@@ -34,7 +34,7 @@ class OrFilterTests {
 
 	@Test
 	void exceptionWithoutAnyFilters() {
-		PreconditionViolationException actual = expectThrows(PreconditionViolationException.class, () -> {
+		PreconditionViolationException actual = assertThrows(PreconditionViolationException.class, () -> {
 			new OrFilter(emptyList());
 		});
 		assertEquals("filters must not be empty", actual.getMessage());

File: platform-tests/src/test/java/org/junit/platform/commons/util/FunctionUtilsTests.java
Patch:
@@ -13,8 +13,8 @@
 import static java.util.function.Predicate.isEqual;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 
 import java.util.function.Predicate;
 
@@ -29,15 +29,15 @@ class FunctionUtilsTests {
 
 	@Test
 	void whereWithNullFunction() {
-		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class, () -> {
+		PreconditionViolationException exception = assertThrows(PreconditionViolationException.class, () -> {
 			FunctionUtils.where(null, o -> true);
 		});
 		assertEquals("function must not be null", exception.getMessage());
 	}
 
 	@Test
 	void whereWithNullPredicate() {
-		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class, () -> {
+		PreconditionViolationException exception = assertThrows(PreconditionViolationException.class, () -> {
 			FunctionUtils.where(o -> o, null);
 		});
 		assertEquals("predicate must not be null", exception.getMessage());

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.junit.platform.engine.discovery.ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
 import java.io.File;
@@ -239,7 +238,7 @@ public void close() {
 		};
 
 		CommandLineOptionsParser parser = createParser();
-		RuntimeException exception = expectThrows(RuntimeException.class, () -> parser.printHelp(writer));
+		RuntimeException exception = assertThrows(RuntimeException.class, () -> parser.printHelp(writer));
 
 		assertThat(exception).hasCauseInstanceOf(IOException.class);
 		assertThat(exception.getCause()).hasMessage("Something went wrong");

File: platform-tests/src/test/java/org/junit/platform/engine/UniqueIdFormatTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.platform.engine;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
@@ -114,7 +114,7 @@ interface ParsingTest {
 
 		@Test
 		default void parseMalformedUid() {
-			Throwable throwable = expectThrows(JUnitException.class, () -> getFormat().parse("malformed UID"));
+			Throwable throwable = assertThrows(JUnitException.class, () -> getFormat().parse("malformed UID"));
 			assertTrue(throwable.getMessage().contains("malformed UID"));
 		}
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.platform.engine.support.hierarchical;
 
 import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doThrow;
@@ -335,7 +335,7 @@ public void outOfMemoryErrorInShouldBeSkipped() throws Exception {
 		stub(child.shouldBeSkipped(rootContext)).toThrow(outOfMemoryError);
 		root.addChild(child);
 
-		Throwable actualException = expectThrows(OutOfMemoryError.class, () -> executor.execute());
+		Throwable actualException = assertThrows(OutOfMemoryError.class, () -> executor.execute());
 		assertSame(outOfMemoryError, actualException);
 	}
 
@@ -349,7 +349,7 @@ public void outOfMemoryErrorInLeafExecution() throws Exception {
 		stub(child.execute(rootContext)).toThrow(outOfMemoryError);
 		root.addChild(child);
 
-		Throwable actualException = expectThrows(OutOfMemoryError.class, () -> executor.execute());
+		Throwable actualException = assertThrows(OutOfMemoryError.class, () -> executor.execute());
 		assertSame(outOfMemoryError, actualException);
 	}
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -13,8 +13,8 @@
 import static java.util.Collections.singleton;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.junit.platform.engine.FilterResult.excluded;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
@@ -254,7 +254,7 @@ public void postDiscoveryFiltersAreStoredInDiscoveryRequest() throws Exception {
 
 		@Test
 		public void exceptionForIllegalFilterClass() throws Exception {
-			Exception exception = expectThrows(PreconditionViolationException.class,
+			Exception exception = assertThrows(PreconditionViolationException.class,
 				() -> request().filters(o -> excluded("reason")));
 
 			assertThat(exception).hasMessageStartingWith("Filter");

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeClassNamePattern.java
Patch:
@@ -43,6 +43,9 @@
 
 	/**
 	 * Regular expression used to match against fully qualified class names.
+	 *
+	 * <p>Defaults to {@code "^.*Tests?$"} which matches against class names
+	 * ending in {@code Test} or {@code Tests} (in any package).
 	 */
 	String value() default ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 

File: documentation/src/test/java/example/TestingAStackDemo.java
Patch:
@@ -75,7 +75,7 @@ void pushAnElement() {
 
 			@Test
 			@DisplayName("it is no longer empty")
-			void isEmpty() {
+			void isNotEmpty() {
 				assertFalse(stack.isEmpty());
 			}
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java
Patch:
@@ -57,7 +57,7 @@ private ConditionEvaluationResult evaluate(Optional<AnnotatedElement> element) {
 		Optional<Disabled> disabled = findAnnotation(element, Disabled.class);
 		if (disabled.isPresent()) {
 			String reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(
-				() -> element + " is @Disabled");
+				() -> element.get() + " is @Disabled");
 			return ConditionEvaluationResult.disabled(reason);
 		}
 

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeClassNamePattern.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.annotation.Target;
 
 import org.junit.platform.commons.meta.API;
+import org.junit.platform.engine.discovery.ClassNameFilter;
 
 /**
  * {@code @IncludeClassNamePattern} specifies a regular expression that is used
@@ -43,6 +44,6 @@
 	/**
 	 * Regular expression used to match against fully qualified class names.
 	 */
-	String value();
+	String value() default ClassNameFilter.STANDARD_INCLUDE_PATTERN;
 
 }

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -34,7 +34,7 @@ public class CommandLineOptions {
 	private boolean scanClasspath;
 	private List<String> arguments = emptyList();
 
-	private String includeClassNamePattern;
+	private String includeClassNamePattern = "^.*Tests?$";
 	private List<String> includedEngines = emptyList();
 	private List<String> excludedEngines = emptyList();
 	private List<String> includedTags = emptyList();
@@ -76,8 +76,8 @@ public void setHideDetails(boolean hideDetails) {
 		this.hideDetails = hideDetails;
 	}
 
-	public Optional<String> getIncludeClassNamePattern() {
-		return Optional.ofNullable(this.includeClassNamePattern);
+	public String getIncludeClassNamePattern() {
+		return this.includeClassNamePattern;
 	}
 
 	public void setIncludeClassNamePattern(String includeClassNamePattern) {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -81,8 +81,7 @@ private LauncherDiscoveryRequestBuilder createNameBasedBuilder(CommandLineOption
 	}
 
 	private void addFilters(LauncherDiscoveryRequestBuilder requestBuilder, CommandLineOptions options) {
-		options.getIncludeClassNamePattern().ifPresent(
-			pattern -> requestBuilder.filters(includeClassNamePattern(pattern)));
+		requestBuilder.filters(includeClassNamePattern(options.getIncludeClassNamePattern()));
 
 		if (!options.getIncludedTags().isEmpty()) {
 			requestBuilder.filters(includeTags(options.getIncludedTags()));

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java
Patch:
@@ -24,6 +24,8 @@
 @API(Experimental)
 public interface ClassNameFilter extends DiscoveryFilter<String> {
 
+	String STANDARD_INCLUDE_PATTERN = "^.*Tests?$";
+
 	/**
 	 * Create a new <em>include</em> {@link ClassNameFilter} based on the supplied
 	 * pattern.

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/ClassNameFilterTests.java
Patch:
@@ -29,7 +29,9 @@ void classNameMatches() {
 
 		assertEquals("Includes class names with regular expression: " + regex, filter.toString());
 		assertTrue(filter.apply("java.lang.String").included());
+		assertTrue(filter.toPredicate().test("java.lang.String"));
 		assertFalse(filter.apply("java.util.Collection").included());
+		assertFalse(filter.toPredicate().test("java.util.Collection"));
 	}
 
 }

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -451,11 +451,11 @@ public static Set<Path> getAllClasspathRootDirectories() {
 	}
 
 	public static List<Class<?>> findAllClassesInClasspathRoot(Path root, Predicate<Class<?>> classTester) {
-		return classpathScanner.scanForClassesInClasspathRoot(root, classTester);
+		return classpathScanner.scanForClassesInClasspathRoot(root, classTester, className -> true);
 	}
 
 	public static List<Class<?>> findAllClassesInPackage(String basePackageName, Predicate<Class<?>> classTester) {
-		return classpathScanner.scanForClassesInPackage(basePackageName, classTester);
+		return classpathScanner.scanForClassesInPackage(basePackageName, classTester, className -> true);
 	}
 
 	public static List<Class<?>> findNestedClasses(Class<?> clazz, Predicate<Class<?>> predicate) {

File: documentation/src/test/java/example/UsingTheLauncherDemo.java
Patch:
@@ -11,7 +11,7 @@
 package example;
 
 // tag::imports[]
-import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaPackage;
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DiscoveryFilterApplierTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.UniqueId;
-import org.junit.platform.engine.discovery.ClassFilter;
+import org.junit.platform.engine.discovery.ClassNameFilter;
 
 /**
  * Microtests for {@link DiscoveryFilterApplier}.
@@ -39,7 +39,7 @@ class DiscoveryFilterApplierTests {
 	void nonMatchingClassesAreExcluded() {
 
 		EngineDiscoveryRequest request = request().filters(
-			ClassFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
+			ClassNameFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()
@@ -61,7 +61,7 @@ void nonMatchingClassesAreExcluded() {
 	@Test
 	void nestedTestClassesAreAlwaysIncludedWhenTheirParentIs() {
 		EngineDiscoveryRequest request = request().filters(
-			ClassFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
+			ClassNameFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
-import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaMethod;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilder.java
Patch:
@@ -36,7 +36,7 @@
  *
  * <pre style="code">
  * import static org.junit.platform.engine.discovery.DiscoverySelectors.*;
- * import static org.junit.platform.engine.discovery.ClassFilter.*;
+ * import static org.junit.platform.engine.discovery.ClassNameFilter.*;
  * import static org.junit.platform.launcher.EngineFilter.*;
  * import static org.junit.platform.launcher.TagFilter.*;
  *
@@ -72,7 +72,7 @@
  *
  * @since 1.0
  * @see org.junit.platform.engine.discovery.DiscoverySelectors
- * @see org.junit.platform.engine.discovery.ClassFilter
+ * @see org.junit.platform.engine.discovery.ClassNameFilter
  * @see org.junit.platform.launcher.EngineFilter
  * @see org.junit.platform.launcher.TagFilter
  */

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeClassNamePattern.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @since 1.0
  * @see JUnitPlatform
- * @see org.junit.platform.engine.discovery.ClassFilter#includeClassNamePattern
+ * @see org.junit.platform.engine.discovery.ClassNameFilter#includeClassNamePattern
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
 import static org.junit.platform.commons.meta.API.Usage.Maintained;
-import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineDiscoveryTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.commons.util.FunctionUtils.where;
-import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePattern;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaMethod;
@@ -225,7 +225,7 @@ void resolvesClasspathSelector() throws Exception {
 	}
 
 	@Test
-	void resolvesApplyingClassFilters() throws Exception {
+	void resolvesApplyingClassNameFilters() throws Exception {
 		Path root = getClasspathRoot(PlainJUnit4TestCaseWithSingleTestWhichFails.class);
 
 		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClasspathRoots(singleton(root))).filters(
@@ -523,7 +523,7 @@ void ignoresRedundantSelector() throws Exception {
 	}
 
 	@Test
-	void doesNotResolveMethodOfClassNotAcceptedByClassFilter() throws Exception {
+	void doesNotResolveMethodOfClassNotAcceptedByClassNameFilter() throws Exception {
 		Class<?> testClass = PlainJUnit4TestCaseWithFiveTestMethods.class;
 		// @formatter:off
 		LauncherDiscoveryRequest request = request()

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscoveryRequestResolverTests.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.EngineDiscoveryRequest;
-import org.junit.platform.engine.discovery.ClassFilter;
+import org.junit.platform.engine.discovery.ClassNameFilter;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 import org.junit.vintage.engine.RecordCollectingLogger;
 
@@ -37,7 +37,8 @@ void logsWarningWhenFilterExcludesClass() {
 		EngineDescriptor engineDescriptor = new EngineDescriptor(engineId(), "JUnit Vintage");
 		RecordCollectingLogger logger = new RecordCollectingLogger();
 
-		ClassFilter filter = testClass -> includedIf(Foo.class.equals(testClass), () -> "match", () -> "no match");
+		ClassNameFilter filter = className -> includedIf(Foo.class.getName().equals(className), () -> "match",
+			() -> "no match");
 		// @formatter:off
 		EngineDiscoveryRequest request = request()
 				.selectors(selectJavaClass(Foo.class), selectJavaClass(Bar.class))

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.platform.console.options.CommandLineOptions;
-import org.junit.platform.engine.discovery.ClassFilter;
+import org.junit.platform.engine.discovery.ClassNameFilter;
 import org.junit.platform.engine.discovery.ClasspathRootSelector;
 import org.junit.platform.engine.discovery.JavaClassSelector;
 import org.junit.platform.engine.discovery.JavaMethodSelector;
@@ -126,7 +126,7 @@ public void convertsIncludeClassNamePatternOption() {
 
 		LauncherDiscoveryRequest request = convert();
 
-		List<ClassFilter> filter = request.getDiscoveryFiltersByType(ClassFilter.class);
+		List<ClassNameFilter> filter = request.getDiscoveryFiltersByType(ClassNameFilter.class);
 		assertThat(filter).hasSize(1);
 		assertThat(filter.get(0).toString()).contains(".*Test");
 	}

File: documentation/src/test/java/example/DynamicTestsDemo.java
Patch:
@@ -20,14 +20,14 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
-import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.TestFactory;
+import org.junit.jupiter.api.function.ThrowingConsumer;
 
 class DynamicTestsDemo {
 
@@ -139,7 +139,7 @@ public Integer next() {
 		Function<Integer, String> displayNameGenerator = (input) -> "input:" + input;
 
 		// Executes tests based on the current input value.
-		Consumer<Integer> testExecutor = (input) -> assertTrue(input % 7 != 0);
+		ThrowingConsumer<Integer> testExecutor = (input) -> assertTrue(input % 7 != 0);
 
 		// Returns a stream of dynamic tests.
 		return DynamicTest.stream(inputGenerator, displayNameGenerator, testExecutor);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/function/Executable.java
Patch:
@@ -37,6 +37,7 @@
  * @see org.junit.jupiter.api.Assertions#assertThrows(Class, Executable)
  * @see org.junit.jupiter.api.Assumptions#assumingThat(java.util.function.BooleanSupplier, Executable)
  * @see org.junit.jupiter.api.DynamicTest#dynamicTest(String, Executable)
+ * @see ThrowingConsumer
  */
 @FunctionalInterface
 @API(Stable)

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -366,7 +366,7 @@ void getAllClasspathRootDirectories(@Root Path tempDirectory) throws Exception {
 		try {
 			createDirectories(root1, root2);
 
-			assertThat(ReflectionUtils.getAllClasspathRootDirectories()).containsOnly(root1.toFile(), root2.toFile());
+			assertThat(ReflectionUtils.getAllClasspathRootDirectories()).containsOnly(root1, root2);
 		}
 		finally {
 			System.setProperty("java.class.path", originalClassPath);

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -19,9 +19,9 @@
 import static org.junit.platform.commons.util.ReflectionUtils.getDefaultClassLoader;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;
 
-import java.io.File;
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.nio.file.Paths;
 
 import org.junit.jupiter.api.Test;
 import org.junit.platform.console.options.CommandLineOptions;
@@ -125,7 +125,7 @@ public void hasStatusCode1ForFailingContainer() throws Exception {
 
 	@Test
 	public void usesCustomClassLoaderIfAdditionalClassPathEntriesArePresent() throws Exception {
-		options.setAdditionalClasspathEntries(singletonList(new File(".")));
+		options.setAdditionalClasspathEntries(singletonList(Paths.get(".")));
 
 		ClassLoader oldClassLoader = getDefaultClassLoader();
 		dummyTestEngine.addTest("failingTest",

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -130,7 +130,7 @@ void findAllClassesInPackageWithinJarFile() throws Exception {
 
 		List<Class<?>> classes = classpathScanner.scanForClassesInPackage("org.junit.platform.jartest.included",
 			clazz -> true);
-		assertThat(classes.size()).isEqualTo(2);
+		assertThat(classes).hasSize(2);
 		List<String> classNames = classes.stream().map(Class::getSimpleName).collect(Collectors.toList());
 		assertTrue(classNames.contains("Included"));
 		assertTrue(classNames.contains("RecursivelyIncluded"));

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -14,6 +14,7 @@
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 
+import java.nio.file.Paths;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -45,7 +46,7 @@ public void resolveSelectors(EngineDiscoveryRequest request, TestDescriptor engi
 		JavaElementsResolver javaElementsResolver = createJavaElementsResolver(engineDescriptor);
 
 		request.getSelectorsByType(ClasspathRootSelector.class).forEach(selector -> {
-			findAllClassesInClasspathRoot(selector.getClasspathRoot(), isScannableTestClass).forEach(
+			findAllClassesInClasspathRoot(Paths.get(selector.getClasspathRoot()), isScannableTestClass).forEach(
 				javaElementsResolver::resolveClass);
 		});
 		request.getSelectorsByType(JavaPackageSelector.class).forEach(selector -> {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -23,6 +23,7 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -448,7 +449,7 @@ public static Set<File> getAllClasspathRootDirectories() {
 		// @formatter:on
 	}
 
-	public static List<Class<?>> findAllClassesInClasspathRoot(File root, Predicate<Class<?>> classTester) {
+	public static List<Class<?>> findAllClassesInClasspathRoot(Path root, Predicate<Class<?>> classTester) {
 		return classpathScanner.scanForClassesInClasspathRoot(root, classTester);
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java
Patch:
@@ -188,6 +188,7 @@ public static List<ClasspathRootSelector> selectClasspathRoots(Set<File> directo
 		// @formatter:off
 		return directories.stream()
 				.filter(File::isDirectory)
+				.map(File::toURI)
 				.map(ClasspathRootSelector::new)
 				.collect(toList());
 		// @formatter:on

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherDiscoveryRequestBuilderTests.java
Patch:
@@ -166,7 +166,8 @@ public void availableFoldersAreStoredInDiscoveryRequest() throws Exception {
 				// @formatter:on
 
 				List<String> folders = discoveryRequest.getSelectorsByType(ClasspathRootSelector.class).stream().map(
-					ClasspathRootSelector::getClasspathRoot).map(File::getAbsolutePath).collect(toList());
+					ClasspathRootSelector::getClasspathRoot).map(File::new).map(File::getAbsolutePath).collect(
+						toList());
 
 				assertThat(folders).contains(temporaryFolder.getAbsolutePath());
 			}

File: junit-jupiter-engine/src/test/java/DefaultPackageTestCase.java
Patch:
@@ -8,7 +8,6 @@
  *
  * http://www.eclipse.org/legal/epl-v10.html
  */
-
 import org.junit.jupiter.api.Test;
 
 /**

File: platform-tests/src/test/java/DefaultPackageTestCase.java
Patch:
@@ -1,3 +1,4 @@
+
 /*
  * Copyright 2015-2016 the original author or authors.
  *
@@ -7,6 +8,7 @@
  *
  * http://www.eclipse.org/legal/epl-v10.html
  */
+import org.junit.jupiter.api.Test;
 
 /**
  * Simple test case that is used to verify proper support for classpath scanning
@@ -16,6 +18,7 @@
  */
 public class DefaultPackageTestCase {
 
+	@Test
 	void test() {
 		// do nothing
 	}

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -72,7 +72,7 @@ class AvailableOptions {
 
 		// --- Selectors -------------------------------------------------------
 
-		scanClasspath = parser.acceptsAll(asList("scan-class-path", "a", "all"), //
+		scanClasspath = parser.accepts("scan-class-path", //
 			"Scan entire classpath or explicit classpath roots.");
 
 		arguments = parser.nonOptions("If --scan-class-path has been specified, non-option arguments represent "

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -64,7 +64,7 @@ public void parseSwitches() {
 			() -> assertParses("disable ansi", CommandLineOptions::isAnsiColorOutputDisabled, "--disable-ansi-colors"),
 			() -> assertParses("help", CommandLineOptions::isDisplayHelp, "-h", "--help"),
 			() -> assertParses("hide details", CommandLineOptions::isHideDetails, "--hide-details"),
-			() -> assertParses("scan class path", CommandLineOptions::isScanClasspath, "--scan-class-path", "-a", "--all")
+			() -> assertParses("scan class path", CommandLineOptions::isScanClasspath, "--scan-class-path")
 		);
 		// @formatter:on
 	}

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -54,13 +54,13 @@ LauncherDiscoveryRequest toDiscoveryRequest(CommandLineOptions options) {
 	}
 
 	private LauncherDiscoveryRequestBuilder createRequestBuilder(CommandLineOptions options) {
-		if (options.isRunAllTests()) {
-			return createBuilderForAllTests(options);
+		if (options.isScanClasspath()) {
+			return createBuilderForClasspathScanning(options);
 		}
 		return createNameBasedBuilder(options);
 	}
 
-	private LauncherDiscoveryRequestBuilder createBuilderForAllTests(CommandLineOptions options) {
+	private LauncherDiscoveryRequestBuilder createBuilderForClasspathScanning(CommandLineOptions options) {
 		Set<File> rootDirectoriesToScan = determineClasspathRootDirectories(options);
 		return request().selectors(selectClasspathRoots(rootDirectoriesToScan));
 	}

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -47,7 +47,7 @@ public void parseNoArguments() {
 			() -> assertFalse(options.isAnsiColorOutputDisabled()),
 			() -> assertFalse(options.isDisplayHelp()),
 			() -> assertFalse(options.isHideDetails()),
-			() -> assertFalse(options.isRunAllTests()),
+			() -> assertFalse(options.isScanClasspath()),
 			() -> assertEquals(Optional.empty(), options.getIncludeClassNamePattern()),
 			() -> assertEquals(emptyList(), options.getIncludedTags()),
 			() -> assertEquals(emptyList(), options.getAdditionalClasspathEntries()),
@@ -64,7 +64,7 @@ public void parseSwitches() {
 			() -> assertParses("disable ansi", CommandLineOptions::isAnsiColorOutputDisabled, "--disable-ansi-colors"),
 			() -> assertParses("help", CommandLineOptions::isDisplayHelp, "-h", "--help"),
 			() -> assertParses("hide details", CommandLineOptions::isHideDetails, "--hide-details"),
-			() -> assertParses("run all tests", CommandLineOptions::isRunAllTests, "-a", "--all")
+			() -> assertParses("scan class path", CommandLineOptions::isScanClasspath, "--scan-class-path", "-a", "--all")
 		);
 		// @formatter:on
 	}

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ExecuteTestsTask.java
Patch:
@@ -94,9 +94,8 @@ private SummaryGeneratingListener registerListeners(PrintWriter out, Launcher la
 			launcher.registerTestExecutionListeners(
 				new ColoredPrintingTestListener(out, options.isAnsiColorOutputDisabled()));
 		}
-		if (options.getXmlReportsDir().isPresent()) {
-			launcher.registerTestExecutionListeners(
-				new XmlReportsWritingListener(options.getXmlReportsDir().get(), out));
+		if (options.getReportsDir().isPresent()) {
+			launcher.registerTestExecutionListeners(new XmlReportsWritingListener(options.getReportsDir().get(), out));
 		}
 		return summaryListener;
 	}

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -345,14 +345,14 @@ void getOuterInstance() {
 	@Test
 	void isPackage() {
 		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.isPackage(null));
-		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.isPackage(""));
 		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.isPackage("     "));
 
 		assertFalse(ReflectionUtils.isPackage("org.non.existing.package"));
 
 		assertTrue(ReflectionUtils.isPackage("org.junit.platform.commons.util"));
 		assertTrue(ReflectionUtils.isPackage("org.junit.platform.commons"));
 		assertTrue(ReflectionUtils.isPackage("org.junit.platform"));
+		assertTrue(ReflectionUtils.isPackage("")); // default package
 	}
 
 	@Test

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import org.junit.platform.engine.ExecutionRequest;
@@ -29,7 +29,7 @@ public abstract class AbstractJupiterTestEngineTests {
 	private final JupiterTestEngine engine = new JupiterTestEngine();
 
 	protected ExecutionEventRecorder executeTestsForClass(Class<?> testClass) {
-		return executeTests(request().selectors(selectClass(testClass)).build());
+		return executeTests(request().selectors(selectJavaClass(testClass)).build());
 	}
 
 	protected ExecutionEventRecorder executeTests(LauncherDiscoveryRequest request) {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ReportingTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
@@ -32,7 +32,7 @@ public class ReportingTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void threeReportEntriesArePublished() {
-		LauncherDiscoveryRequest request = request().selectors(selectClass(MyReportingTestCase.class)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(MyReportingTestCase.class)).build();
 
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
@@ -132,7 +132,7 @@ private void assertBeforeAllAndAfterAllCallbacks(Class<?> testClass, int testsSt
 			String... expectedCalls) {
 
 		callSequence.clear();
-		LauncherDiscoveryRequest request = request().selectors(selectClass(testClass)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(testClass)).build();
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 
 		assertEquals(testsStarted, eventRecorder.getTestStartedCount(), "# tests started");

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
@@ -39,7 +39,7 @@ public class TestInstancePostProcessorTests extends AbstractJupiterTestEngineTes
 
 	@Test
 	public void instancePostProcessorsInNestedClasses() {
-		LauncherDiscoveryRequest request = request().selectors(selectClass(OuterTestCase.class)).build();
+		LauncherDiscoveryRequest request = request().selectors(selectJavaClass(OuterTestCase.class)).build();
 
 		ExecutionEventRecorder eventRecorder = executeTests(request);
 

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
@@ -97,7 +97,7 @@ private void invokeSingleClass(Class<?> testClass, RunListener runListener) {
 		SimpleReportEntry classEntry = new SimpleReportEntry(getClass().getName(), testClass.getName());
 		runListener.testSetStarting(classEntry);
 
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
 		launcher.execute(discoveryRequest);
 
 		runListener.testSetCompleted(classEntry);

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/TestPlanScannerFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.function.Predicate;
@@ -38,7 +38,7 @@ public TestPlanScannerFilter(Launcher launcher) {
 	@Override
 	@SuppressWarnings("rawtypes")
 	public boolean accept(Class testClass) {
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
 		TestPlan testPlan = launcher.discover(discoveryRequest);
 		return testPlan.countTestIdentifiers(hasTests) > 0;
 	}

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine;
 
 import static org.assertj.core.api.Assertions.allOf;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.abortedWithReason;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;
@@ -456,7 +456,7 @@ public void executesJUnit4TestCaseWithRunnerWithCustomUniqueIds() {
 
 	private static List<ExecutionEvent> execute(Class<?> testClass) {
 		VintageTestEngine engine = new VintageTestEngine();
-		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
+		LauncherDiscoveryRequest discoveryRequest = request().selectors(selectJavaClass(testClass)).build();
 		return ExecutionEventRecorder.execute(engine, discoveryRequest);
 	}
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscoveryRequestResolverTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.FilterResult.includedIf;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 
@@ -40,7 +40,7 @@ void logsWarningWhenFilterExcludesClass() {
 		ClassFilter filter = testClass -> includedIf(Foo.class.equals(testClass), () -> "match", () -> "no match");
 		// @formatter:off
 		EngineDiscoveryRequest request = request()
-				.selectors(selectClass(Foo.class), selectClass(Bar.class))
+				.selectors(selectJavaClass(Foo.class), selectJavaClass(Bar.class))
 				.filters(filter)
 				.build();
 		// @formatter:on

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.expectThrows;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaPackage;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
@@ -103,7 +103,7 @@ void discoverTestPlanForSingleEngine() {
 
 		DefaultLauncher launcher = createLauncher(engine);
 
-		TestPlan testPlan = launcher.discover(request().selectors(selectPackage("any")).build());
+		TestPlan testPlan = launcher.discover(request().selectors(selectJavaPackage("any")).build());
 
 		assertThat(testPlan.getRoots()).hasSize(1);
 		TestIdentifier rootIdentifier = testPlan.getRoots().iterator().next();
@@ -255,7 +255,7 @@ void launcherAppliesPostDiscoveryFilters() {
 
 		TestPlan testPlan = launcher.discover( //
 			request() //
-					.selectors(selectPackage("any")) //
+					.selectors(selectJavaPackage("any")) //
 					.filters(includeWithUniqueIdContainsTest, includeWithUniqueIdContains1) //
 					.build());
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectJavaClass;
 import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;
 
 import java.util.List;
@@ -56,8 +56,8 @@ void testCreate() {
 	private LauncherDiscoveryRequest createLauncherDiscoveryRequestForBothStandardEngineExampleClasses() {
 		// @formatter:off
 		return request()
-				.selectors(selectClass(JUnit4Example.class))
-				.selectors(selectClass(JUnit5Example.class))
+				.selectors(selectJavaClass(JUnit4Example.class))
+				.selectors(selectJavaClass(JUnit5Example.class))
 				.build();
 		// @formatter:on
 	}

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -131,7 +131,6 @@ private void collectClassesRecursively(String packageName, File sourceDir, Predi
 		}
 
 		for (File file : files) {
-			System.err.println("file: " + file);
 			if (isClassFile(file)) {
 				processClassFileSafely(packageName, file, classFilter, classes);
 			}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/JavaClassSelector.java
Patch:
@@ -22,13 +22,14 @@
  * tests or containers based on Java classes.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.support.descriptor.JavaClassSource
  */
 @API(Experimental)
-public class ClassSelector implements DiscoverySelector {
+public class JavaClassSelector implements DiscoverySelector {
 
 	private final Class<?> javaClass;
 
-	ClassSelector(Class<?> javaClass) {
+	JavaClassSelector(Class<?> javaClass) {
 		this.javaClass = javaClass;
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/JavaMethodSelector.java
Patch:
@@ -24,14 +24,15 @@
  * tests or containers based on Java methods.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.support.descriptor.JavaMethodSource
  */
 @API(Experimental)
-public class MethodSelector implements DiscoverySelector {
+public class JavaMethodSelector implements DiscoverySelector {
 
 	private final Class<?> clazz;
 	private final Method method;
 
-	MethodSelector(Class<?> clazz, Method method) {
+	JavaMethodSelector(Class<?> clazz, Method method) {
 		this.clazz = clazz;
 		this.method = method;
 	}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/JavaPackageSelector.java
Patch:
@@ -22,13 +22,14 @@
  * tests or containers based on packages.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.support.descriptor.JavaPackageSource
  */
 @API(Experimental)
-public class PackageSelector implements DiscoverySelector {
+public class JavaPackageSelector implements DiscoverySelector {
 
 	private final String packageName;
 
-	PackageSelector(String packageName) {
+	JavaPackageSelector(String packageName) {
 		this.packageName = packageName;
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaClassSource.java
Patch:
@@ -24,6 +24,7 @@
  * {@linkplain FilePosition position}.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.discovery.JavaClassSelector
  */
 @API(Experimental)
 public class JavaClassSource implements JavaSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaMethodSource.java
Patch:
@@ -30,6 +30,7 @@
  * {@link Method} does not implement {@link java.io.Serializable}.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.discovery.JavaMethodSelector
  */
 @API(Experimental)
 public class JavaMethodSource implements JavaSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaPackageSource.java
Patch:
@@ -25,6 +25,7 @@
  * implement {@link java.io.Serializable}.
  *
  * @since 1.0
+ * @see org.junit.platform.engine.discovery.JavaPackageSelector
  */
 @API(Experimental)
 public class JavaPackageSource implements JavaSource {

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectClasses.java
Patch:
@@ -28,7 +28,7 @@
  * @since 1.0
  * @see JUnitPlatform
  * @see SelectPackages
- * @see org.junit.platform.engine.discovery.ClassSelector
+ * @see org.junit.platform.engine.discovery.JavaClassSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectPackages.java
Patch:
@@ -28,7 +28,7 @@
  * @since 1.0
  * @see JUnitPlatform
  * @see SelectClasses
- * @see org.junit.platform.engine.discovery.PackageSelector
+ * @see org.junit.platform.engine.discovery.JavaPackageSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DirectorySelector.java
Patch:
@@ -57,7 +57,7 @@ public File getDirectory() {
 	 * Get the selected directory as a {@link java.nio.file.Path} using the
 	 * {@linkplain FileSystems#getDefault default} {@link FileSystem}.
 	 *
-	 * @see #getFile()
+	 * @see #getDirectory()
 	 * @see #getRawPath()
 	 */
 	public Path getPath() {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -81,7 +81,7 @@ public static <A extends Annotation> Optional<A> findAnnotation(Optional<? exten
 			return Optional.empty();
 		}
 
-		return findAnnotation(element.get(), annotationType, new HashSet<Annotation>());
+		return findAnnotation(element.get(), annotationType, new HashSet<>());
 	}
 
 	/**

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -59,7 +59,7 @@ private ExceptionUtils() {
 	 */
 	public static RuntimeException throwAsUncheckedException(Throwable t) {
 		Preconditions.notNull(t, "Throwable must not be null");
-		ExceptionUtils.<RuntimeException> throwAs(t);
+		ExceptionUtils.throwAs(t);
 
 		// Appeasing the compiler: the following line will never be executed.
 		return null;

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -61,7 +61,7 @@ class AvailableOptions {
 		runAllTests = parser.acceptsAll(asList("a", "all"), //
 			"Run all tests.");
 
-		additionalClasspathEntries = parser.acceptsAll(asList("cp", "classpath"), //
+		additionalClasspathEntries = parser.acceptsAll(asList("cp", "classpath", "class-path"), //
 			"Provide additional classpath entries -- for example, for adding engines and their dependencies. "
 					+ "This option can be repeated.") //
 				.withRequiredArg().ofType(File.class).withValuesSeparatedBy(File.pathSeparatorChar).describedAs(

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -33,7 +33,7 @@ class AvailableOptions {
 	private final OptionSpec<File> additionalClasspathEntries;
 
 	// Reports
-	private final OptionSpec<String> xmlReportsDir;
+	private final OptionSpec<File> xmlReportsDir;
 
 	// Selectors
 	private final OptionSpec<String> arguments;
@@ -70,7 +70,7 @@ class AvailableOptions {
 
 		xmlReportsDir = parser.acceptsAll(asList("r", "xml-reports-dir"), //
 			"Enable XML report output into a specified local directory (will be created if it does not exist).") //
-				.withRequiredArg();
+				.withRequiredArg().ofType(File.class);
 
 		// --- Selectors -------------------------------------------------------
 

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -41,7 +41,7 @@ public class CommandLineOptions {
 
 	private List<File> additionalClasspathEntries = emptyList();
 
-	private String xmlReportsDir;
+	private File xmlReportsDir;
 
 	private List<String> arguments = emptyList();
 
@@ -127,11 +127,11 @@ public void setAdditionalClasspathEntries(List<File> additionalClasspathEntries)
 		this.additionalClasspathEntries.removeIf(f -> !f.exists());
 	}
 
-	public Optional<String> getXmlReportsDir() {
+	public Optional<File> getXmlReportsDir() {
 		return Optional.ofNullable(this.xmlReportsDir);
 	}
 
-	public void setXmlReportsDir(String xmlReportsDir) {
+	public void setXmlReportsDir(File xmlReportsDir) {
 		this.xmlReportsDir = xmlReportsDir;
 	}
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -68,9 +68,7 @@ private LauncherDiscoveryRequestBuilder createBuilderForAllTests(CommandLineOpti
 	private Set<File> determineClasspathRootDirectories(CommandLineOptions options) {
 		if (options.getArguments().isEmpty()) {
 			Set<File> rootDirs = new LinkedHashSet<>(ReflectionUtils.getAllClasspathRootDirectories());
-			if (!options.getAdditionalClasspathEntries().isEmpty()) {
-				rootDirs.addAll(new ClasspathEntriesParser().toDirectories(options.getAdditionalClasspathEntries()));
-			}
+			rootDirs.addAll(options.getAdditionalClasspathEntries());
 			return rootDirs;
 		}
 		return options.getArguments().stream().map(File::new).collect(toCollection(LinkedHashSet::new));

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -106,7 +106,7 @@ public void convertsAllOptionWithExplicitRootDirectories() {
 	@Test
 	public void convertsAllOptionWithAdditionalClasspathEntries() {
 		options.setRunAllTests(true);
-		options.setAdditionalClasspathEntries(asList(".", ".."));
+		options.setAdditionalClasspathEntries(asList(new File("."), new File("..")));
 
 		LauncherDiscoveryRequest request = convert();
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.platform.commons.util.ReflectionUtils.getDefaultClassLoader;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;
 
+import java.io.File;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
@@ -152,7 +153,7 @@ public void usesCustomClassLoaderIfAdditionalClassPathEntriesArePresent() throws
 		StringWriter stringWriter = new StringWriter();
 		CommandLineOptions options = new CommandLineOptions();
 		options.setRunAllTests(true);
-		options.setAdditionalClasspathEntries(singletonList("."));
+		options.setAdditionalClasspathEntries(singletonList(new File(".")));
 
 		ClassLoader oldClassLoader = getDefaultClassLoader();
 		DemoHierarchicalTestEngine dummyTestEngine = new DemoHierarchicalTestEngine();

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -24,6 +24,7 @@
  * scan for test classes.
  *
  * @since 1.0
+ * @see ClasspathResourceSelector
  */
 @API(Experimental)
 public class ClasspathRootSelector implements DiscoverySelector {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.platform.engine.EngineDiscoveryRequest;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.discovery.ClassSelector;
-import org.junit.platform.engine.discovery.ClasspathSelector;
+import org.junit.platform.engine.discovery.ClasspathRootSelector;
 import org.junit.platform.engine.discovery.MethodSelector;
 import org.junit.platform.engine.discovery.PackageSelector;
 import org.junit.platform.engine.discovery.UniqueIdSelector;
@@ -44,7 +44,7 @@ public class DiscoverySelectorResolver {
 	public void resolveSelectors(EngineDiscoveryRequest request, TestDescriptor engineDescriptor) {
 		JavaElementsResolver javaElementsResolver = createJavaElementsResolver(engineDescriptor);
 
-		request.getSelectorsByType(ClasspathSelector.class).forEach(selector -> {
+		request.getSelectorsByType(ClasspathRootSelector.class).forEach(selector -> {
 			findAllClassesInClasspathRoot(selector.getClasspathRoot(), isScannableTestClass).forEach(
 				javaElementsResolver::resolveClass);
 		});

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathRootSelector.java
Patch:
@@ -18,19 +18,19 @@
 import org.junit.platform.engine.DiscoverySelector;
 
 /**
- * A {@link DiscoverySelector} that selects classpath <em>roots</em> so that
+ * A {@link DiscoverySelector} that selects a classpath <em>root</em> so that
  * {@link org.junit.platform.engine.TestEngine TestEngines} can search for class
  * files or resources within the physical classpath &mdash; for example, to
  * scan for test classes.
  *
  * @since 1.0
  */
 @API(Experimental)
-public class ClasspathSelector implements DiscoverySelector {
+public class ClasspathRootSelector implements DiscoverySelector {
 
 	private final File classpathRoot;
 
-	ClasspathSelector(File classpathRoot) {
+	ClasspathRootSelector(File classpathRoot) {
 		this.classpathRoot = classpathRoot;
 	}
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -56,7 +56,7 @@ private TestClassCollector collectTestClasses(EngineDiscoveryRequest discoveryRe
 
 	private List<DiscoverySelectorResolver<?>> getAllDiscoverySelectorResolvers() {
 		return asList( //
-			new ClasspathSelectorResolver(), //
+			new ClasspathRootSelectorResolver(), //
 			new PackageNameSelectorResolver(), //
 			new ClassSelectorResolver(), //
 			new MethodSelectorResolver(), //

File: platform-tests/src/test/java/org/junit/platform/commons/util/AnnotationUtilsTests.java
Patch:
@@ -548,7 +548,8 @@ static class MultiComposedExtensionClass {
 	static class SubMultiComposedExtensionClass extends MultiComposedExtensionClass {
 	}
 
-	@Extensions({ @ExtendWith("x"), @ExtendWith("y"), @ExtendWith("z") })
+	@ExtendWith("x")
+	@Extensions({ @ExtendWith("y"), @ExtendWith("z") })
 	@ExtendWithBar
 	static class ContainerPlusSubMultiComposedExtensionClass extends MultiComposedExtensionClass {
 	}

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutor.java
Patch:
@@ -65,8 +65,7 @@ private void execute(TestDescriptor testDescriptor, C parentContext) {
 		}
 		catch (Throwable throwable) {
 			rethrowIfBlacklisted(throwable);
-
-			// TODO [#336] Decide if exceptions thrown during preparation should result in the node being marked as "started".
+			// We call executionStarted first to comply with the contract of EngineExecutionListener
 			this.listener.executionStarted(testDescriptor);
 			this.listener.executionFinished(testDescriptor, TestExecutionResult.failed(throwable));
 			return;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java
Patch:
@@ -1066,7 +1066,7 @@ public static void assertTimeout(Duration timeout, Executable executable, Suppli
 
 		long timeElapsed = System.currentTimeMillis() - start;
 		if (timeElapsed > timeoutInMillis) {
-			fail(buildPrefix(nullSafeGet(messageSupplier)) + "executable exceeded timeout of " + timeoutInMillis
+			fail(buildPrefix(nullSafeGet(messageSupplier)) + "execution exceeded timeout of " + timeoutInMillis
 					+ " ms by " + (timeElapsed - timeoutInMillis) + " ms");
 		}
 	}
@@ -1142,8 +1142,8 @@ public static void assertTimeoutPreemptively(Duration timeout, Executable execut
 				throwable = future.get(timeoutInMillis, TimeUnit.MILLISECONDS);
 			}
 			catch (TimeoutException ex) {
-				fail(buildPrefix(nullSafeGet(messageSupplier)) + "executable timed out after " + timeoutInMillis
-						+ " ms");
+				fail(
+					buildPrefix(nullSafeGet(messageSupplier)) + "execution timed out after " + timeoutInMillis + " ms");
 			}
 			catch (ExecutionException ex) {
 				throwable = ex.getCause();

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -107,7 +107,9 @@ private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phas
 			UniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());
 			TestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);
 			Preconditions.notNull(engineRoot,
-				"The discover() method must return at least the engine's TestDescriptor.");
+				() -> String.format(
+					"The discover() method for TestEngine with ID '%s' must return a non-null root TestDescriptor.",
+					testEngine.getId()));
 			root.add(testEngine, engineRoot);
 		}
 		root.applyPostDiscoveryFilters(discoveryRequest);

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -193,7 +193,7 @@ public static class Segment {
 		 * Create a new {@code Segment} using the supplied {@code type} and
 		 * {@code value}.
 		 *
-		 * @param type the type of the segment
+		 * @param type the type of this segment
 		 * @param value the value of this segment
 		 */
 		Segment(String type, String value) {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractTestDescriptor implements TestDescriptor {
 
 	private TestSource source;
 
-	private final Set<TestDescriptor> children = new LinkedHashSet<>();
+	private final Set<TestDescriptor> children = Collections.synchronizedSet(new LinkedHashSet<>(16));
 
 	/**
 	 * Create a new {@code AbstractTestDescriptor} with the supplied

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/Root.java
Patch:
@@ -35,7 +35,7 @@ class Root {
 		}
 	};
 
-	private final Map<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();
+	private final Map<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>(4);
 
 	/**
 	 * Add an {@code engine}'s root {@link TestDescriptor}.

File: platform-tests/src/test/java/org/junit/platform/commons/util/StringUtilsTests.java
Patch:
@@ -36,7 +36,7 @@ void nullSafeToString() {
 		assertEquals("", StringUtils.nullSafeToString());
 		assertEquals("java.lang.String", StringUtils.nullSafeToString(String.class));
 		assertEquals("java.lang.String, java.lang.Integer", StringUtils.nullSafeToString(String.class, Integer.class));
-		assertEquals("java.lang.String, , java.lang.Integer",
+		assertEquals("java.lang.String, null, java.lang.Integer",
 			StringUtils.nullSafeToString(String.class, null, Integer.class));
 	}
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -93,7 +93,7 @@ public static String nullSafeToString(Function<? super Class<?>, ? extends Strin
 		if (classes == null || classes.length == 0) {
 			return "";
 		}
-		return stream(classes).map(mapper).collect(joining(", "));
+		return stream(classes).map(v -> v == null ? "" : mapper.apply(v)).collect(joining(", "));
 	}
 
 }

File: platform-tests/src/test/java/org/junit/platform/commons/util/StringUtilsTests.java
Patch:
@@ -36,6 +36,8 @@ void nullSafeToString() {
 		assertEquals("", StringUtils.nullSafeToString());
 		assertEquals("java.lang.String", StringUtils.nullSafeToString(String.class));
 		assertEquals("java.lang.String, java.lang.Integer", StringUtils.nullSafeToString(String.class, Integer.class));
+		assertEquals("java.lang.String, , java.lang.Integer",
+			StringUtils.nullSafeToString(String.class, null, Integer.class));
 	}
 
 }

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.platform.engine.support.hierarchical.BlacklistedExceptions.rethrowIfBlacklisted;
+import static org.junit.platform.commons.util.BlacklistedExceptions.rethrowIfBlacklisted;
 
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.ExecutionRequest;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -11,10 +11,10 @@
 package org.junit.platform.engine.support.hierarchical;
 
 import static org.junit.platform.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.util.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.platform.engine.TestExecutionResult.aborted;
 import static org.junit.platform.engine.TestExecutionResult.failed;
 import static org.junit.platform.engine.TestExecutionResult.successful;
-import static org.junit.platform.engine.support.hierarchical.BlacklistedExceptions.rethrowIfBlacklisted;
 
 import org.junit.platform.commons.meta.API;
 import org.junit.platform.engine.TestExecutionResult;

File: documentation/src/test/java/example/TestingAStackDemo.java
Patch:
@@ -28,7 +28,6 @@
 class TestingAStackDemo {
 
 	Stack<Object> stack;
-	boolean isRun = false;
 
 	@Test
 	@DisplayName("is instantiated with new Stack()")

File: documentation/src/test/java/example/TestingAStackDemo.java
Patch:
@@ -50,13 +50,13 @@ void isEmpty() {
 		@Test
 		@DisplayName("throws EmptyStackException when popped")
 		void throwsExceptionWhenPopped() {
-			Assertions.expectThrows(EmptyStackException.class, () -> stack.pop());
+			Assertions.assertThrows(EmptyStackException.class, () -> stack.pop());
 		}
 
 		@Test
 		@DisplayName("throws EmptyStackException when peeked")
 		void throwsExceptionWhenPeeked() {
-			Assertions.expectThrows(EmptyStackException.class, () -> stack.peek());
+			Assertions.assertThrows(EmptyStackException.class, () -> stack.peek());
 		}
 
 		@Nested

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/XmlReportWriter.java
Patch:
@@ -66,7 +66,7 @@ private void writeXmlReport(TestIdentifier testIdentifier, List<TestIdentifier>
 			throws XMLStreamException {
 		XMLOutputFactory factory = XMLOutputFactory.newInstance();
 		XMLStreamWriter xmlWriter = factory.createXMLStreamWriter(out);
-		xmlWriter.writeStartDocument();
+		xmlWriter.writeStartDocument("UTF-8", "1.0");
 		newLine(xmlWriter);
 		writeTestsuite(testIdentifier, tests, xmlWriter);
 		xmlWriter.writeEndDocument();

File: junit-platform-commons/src/main/java/org/junit/platform/commons/meta/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal meta-annotations.
+ * Internal <em>meta</em> package.
  *
  * <h3>DISCLAIMER</h3>
  *

File: junit-platform-console/src/main/java/org/junit/platform/console/options/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Configuration options for JUnit's console runner.
+ * Configuration options for JUnit's console launcher.
  */
 
 package org.junit.platform.console.options;

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal execution tasks for JUnit's console runner.
+ * Internal execution tasks for JUnit's console launcher.
  */
 
 package org.junit.platform.console.tasks;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Public API for JUnit test engines.
+ * Public API for test engines.
  */
 
 package org.junit.platform.engine;

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common {@link org.junit.platform.launcher.TestExecutionListener
  * TestExecutionListener} implementations and related support classes for
- * the JUnit {@link org.junit.platform.launcher.Launcher Launcher}.
+ * the {@link org.junit.platform.launcher.Launcher Launcher}.
  */
 
 package org.junit.platform.launcher.listeners;

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -59,6 +59,7 @@ private void buildDescriptionTree(Description suiteDescription, TestPlan testPla
 
 	void addDynamicDescription(TestIdentifier newIdentifier, String parentId) {
 		Description parent = getDescription(this.plan.getTestIdentifier(parentId));
+		this.plan.add(newIdentifier);
 		buildDescription(newIdentifier, parent, this.plan);
 	}
 

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -47,7 +47,7 @@ public interface ParameterResolver extends Extension {
 	 * in which the parameter is declared can be retrieved via
 	 * {@link ParameterContext#getDeclaringExecutable()}.
 	 *
-	 * @param parameterContext the parameter context to be resolved; never
+	 * @param parameterContext the context for the parameter to be resolved; never
 	 * {@code null}
 	 * @param extensionContext the extension context for the {@code Executable}
 	 * about to be invoked; never {@code null}
@@ -70,7 +70,7 @@ boolean supports(ParameterContext parameterContext, ExtensionContext extensionCo
 	 * in which the parameter is declared can be retrieved via
 	 * {@link ParameterContext#getDeclaringExecutable()}.
 	 *
-	 * @param parameterContext the parameter context to be resolved; never
+	 * @param parameterContext the context for the parameter to be resolved; never
 	 * {@code null}
 	 * @param extensionContext the extension context for the {@code Executable}
 	 * about to be invoked; never {@code null}

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DiscoveryTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
-import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.Retention;
@@ -76,6 +76,7 @@ public void discoverCompositeSpec() {
 	// -------------------------------------------------------------------
 
 	private static abstract class AbstractTestCase {
+
 		@Test
 		void abstractTest() {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
-import static org.junit.platform.engine.discovery.ClasspathSelector.selectClasspathRoots;
-import static org.junit.platform.engine.discovery.NameBasedSelectors.selectNames;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectNames;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
 import static org.junit.platform.launcher.TagFilter.excludeTags;

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -31,7 +31,6 @@
 import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.DiscoverySelector;
 import org.junit.platform.engine.discovery.DiscoverySelectors;
-import org.junit.platform.engine.discovery.UniqueIdSelector;
 import org.junit.platform.launcher.Launcher;
 import org.junit.platform.launcher.TestDiscoveryRequest;
 import org.junit.platform.launcher.TestIdentifier;
@@ -234,7 +233,7 @@ private TestDiscoveryRequest createDiscoveryRequestForUniqueIds(Set<TestIdentifi
 		// @formatter:off
 		List<DiscoverySelector> selectors = testIdentifiers.stream()
 				.map(TestIdentifier::getUniqueId)
-				.map(UniqueIdSelector::selectUniqueId)
+				.map(DiscoverySelectors::selectUniqueId)
 				.collect(toList());
 		// @formatter:on
 		return request().selectors(selectors).build();

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -19,7 +19,7 @@
 import static org.junit.jupiter.api.Assumptions.assumeFalse;
 import static org.junit.platform.console.tasks.XmlReportAssertions.ensureValidAccordingToJenkinsSchema;
 import static org.junit.platform.engine.TestExecutionResult.successful;
-import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.expectThrows;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
-import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.EngineFilter.excludeEngines;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
 import static org.junit.platform.launcher.core.LauncherFactoryForTestingPurposesOnly.createLauncher;

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DiscoveryRequestTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectName;
-import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.Test;

File: platform-tests/src/test/java/org/junit/platform/launcher/core/TestDiscoveryRequestBuilderTests.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
-import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectUniqueId;
 import static org.junit.platform.launcher.EngineFilter.includeEngines;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 

File: documentation/src/test/java/example/UsingTheLauncherDemo.java
Patch:
@@ -12,8 +12,8 @@
 
 // tag::imports[]
 import static org.junit.platform.engine.discovery.ClassFilter.includeClassNamePattern;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
-import static org.junit.platform.engine.discovery.PackageSelector.selectPackage;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
 
 import org.junit.jupiter.api.Test;
 import org.junit.platform.launcher.Launcher;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.platform.engine.ExecutionRequest;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DisabledTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.Disabled;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DynamicTestGenerationTests.java
Patch:
@@ -15,8 +15,8 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.jupiter.api.DynamicTest.dynamicTest;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
-import static org.junit.platform.engine.discovery.MethodSelector.selectMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.dynamicTestRegistered;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/NestedTestClassesTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.AfterEach;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ReportingTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.HashMap;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/StandardTestClassTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.AfterEach;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestCaseWithInheritanceTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
-import static org.junit.platform.engine.discovery.MethodSelector.selectMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.AfterEach;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterAllTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterEachTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterTestExecutionCallbackTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/ExecutionConditionTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.junit.jupiter.engine.Constants.DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.junit.jupiter.api.AfterEach;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestExecutionExceptionHandlerTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.platform.engine.discovery.MethodSelector.selectMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.engine;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathSelector.java
Patch:
@@ -39,6 +39,7 @@ public class ClasspathSelector implements DiscoverySelector {
 	 * never {@code null}
 	 * @return a list of selectors for the supplied directories; directories which
 	 * do not physically exist in the filesystem will be filtered out
+	 * @see ClasspathSelector
 	 */
 	public static List<DiscoverySelector> selectClasspathRoots(Set<File> directories) {
 		Preconditions.notNull(directories, "directories must not be null");
@@ -53,7 +54,7 @@ public static List<DiscoverySelector> selectClasspathRoots(Set<File> directories
 
 	private final File classpathRoot;
 
-	private ClasspathSelector(File classpathRoot) {
+	ClasspathSelector(File classpathRoot) {
 		this.classpathRoot = classpathRoot;
 	}
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/NameBasedSelectors.java
Patch:
@@ -14,9 +14,9 @@
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
 import static org.junit.platform.commons.meta.API.Usage.Experimental;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
-import static org.junit.platform.engine.discovery.MethodSelector.selectMethod;
-import static org.junit.platform.engine.discovery.PackageSelector.selectPackage;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;
 
 import java.lang.reflect.Method;
 import java.util.Collection;

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/TestPlanScannerFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.platform.surefire.provider;
 
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import org.apache.maven.surefire.util.ScannerFilter;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine;
 
 import static org.assertj.core.api.Assertions.allOf;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.abortedWithReason;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.assertRecordedExecutionEventsContainsExactly;
 import static org.junit.platform.engine.test.event.ExecutionEventConditions.container;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscoveryRequestResolverTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.platform.engine.FilterResult.includedIf;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DiscoveryRequestTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.platform.engine.discovery.NameBasedSelectors.selectName;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectName;
 import static org.junit.platform.engine.discovery.UniqueIdSelector.selectUniqueId;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/BeforeAndAfterEachTests.java
Patch:
@@ -162,7 +162,7 @@ public void beforeEachCallbackThrowsAnException() {
 			"exceptionThrowingBeforeEachCallback", // throws an exception.
 			// barBeforeCallback should not get invoked.
 				// beforeMethod should not get invoked.
-					// test() should not get invoked.
+					// test should not get invoked.
 				// afterMethod should not get invoked.
 			"barAfterCallback",
 			"fooAfterCallback"
@@ -187,7 +187,7 @@ public void beforeEachMethodThrowsAnException() {
 		assertEquals(asList(
 			"fooBeforeCallback",
 				"beforeMethod", // throws an exception.
-					// test() should not get invoked.
+					// test should not get invoked.
 				"afterMethod",
 			"fooAfterCallback"
 		), callSequence, "wrong call sequence");

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -208,7 +208,7 @@ public void exceptionInContainerBeforeAll() throws Exception {
 		inOrder.verify(root).shouldBeSkipped(rootContext);
 		inOrder.verify(listener).executionStarted(root);
 		inOrder.verify(root).before(rootContext);
-		inOrder.verify(root, never()).after(rootContext);
+		inOrder.verify(root).after(rootContext);
 		inOrder.verify(listener).executionFinished(eq(root), rootExecutionResult.capture());
 
 		assertTrue(rootExecutionResult.getValue().getStatus() == TestExecutionResult.Status.FAILED,
@@ -289,7 +289,7 @@ public void abortInContainerBeforeAll() throws Exception {
 		inOrder.verify(root).shouldBeSkipped(rootContext);
 		inOrder.verify(listener).executionStarted(root);
 		inOrder.verify(root).before(rootContext);
-		inOrder.verify(root, never()).after(rootContext);
+		inOrder.verify(root).after(rootContext);
 		inOrder.verify(listener).executionFinished(eq(root), rootExecutionResult.capture());
 
 		assertTrue(rootExecutionResult.getValue().getStatus() == TestExecutionResult.Status.ABORTED,

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/execution/ExtensionContextTests.java
Patch:
@@ -40,6 +40,7 @@
  * {@linkplain MethodBasedTestExtensionContext}
  *
  * @since 5.0
+ * @see ExtensionValuesStoreTests
  */
 public class ExtensionContextTests {
 
@@ -164,6 +165,7 @@ public void usingStore() {
 		final Object parentKey = "parent key";
 		final String parentValue = "parent value";
 		parentStore.put(parentKey, parentValue);
+		assertEquals(parentValue, childStore.getOrComputeIfAbsent(parentKey, k -> "a different value"));
 		assertEquals(parentValue, childStore.get(parentKey));
 	}
 

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -40,7 +40,7 @@ public void beforeTestExecution(TestExtensionContext context) throws Exception {
 	@Override
 	public void afterTestExecution(TestExtensionContext context) throws Exception {
 		Method testMethod = context.getTestMethod().get();
-		long start = (long) getStore(context).remove(testMethod);
+		long start = getStore(context).remove(testMethod, long.class);
 		long duration = System.currentTimeMillis() - start;
 
 		LOG.info(() -> String.format("Method [%s] took %s ms.", testMethod.getName(), duration));

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/AbstractExtensionContext.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ExtensionValuesStore;
 import org.junit.jupiter.engine.execution.NamespaceAwareStore;
+import org.junit.platform.commons.util.Preconditions;
 import org.junit.platform.engine.EngineExecutionListener;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
@@ -67,6 +68,7 @@ protected T getTestDescriptor() {
 
 	@Override
 	public Store getStore(Namespace namespace) {
+		Preconditions.notNull(namespace, "Namespace must not be null");
 		return new NamespaceAwareStore(valuesStore, namespace);
 	}
 

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -24,7 +24,6 @@ class AvailableOptions {
 	private final OptionParser parser = new OptionParser();
 
 	private final OptionSpec<Void> help;
-	private final OptionSpec<Void> enableExitCode;
 	private final OptionSpec<Void> disableAnsiColors;
 	private final OptionSpec<Void> runAllTests;
 	private final OptionSpec<Void> hideDetails;
@@ -69,7 +68,7 @@ class AvailableOptions {
 			"Enable XML report output into a specified local directory (will be created if it does not exist).") //
 				.withRequiredArg();
 
-		enableExitCode = parser.acceptsAll(asList("x", "enable-exit-code"), //
+		parser.acceptsAll(asList("x", "enable-exit-code"), //
 			"Exit process with number of failing tests as exit code.");
 		disableAnsiColors = parser.acceptsAll(asList("C", "disable-ansi-colors"),
 			"Disable colored output (not supported by all terminals).");
@@ -91,7 +90,6 @@ CommandLineOptions toCommandLineOptions(OptionSet detectedOptions) {
 		CommandLineOptions result = new CommandLineOptions();
 
 		result.setDisplayHelp(detectedOptions.has(this.help));
-		result.setExitCodeEnabled(detectedOptions.has(this.enableExitCode));
 		result.setAnsiColorOutputDisabled(detectedOptions.has(this.disableAnsiColors));
 		result.setRunAllTests(detectedOptions.has(this.runAllTests));
 		result.setHideDetails(detectedOptions.has(this.hideDetails));

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -46,7 +46,6 @@ public void parseNoArguments() {
 		assertAll(
 			() -> assertFalse(options.isAnsiColorOutputDisabled()),
 			() -> assertFalse(options.isDisplayHelp()),
-			() -> assertFalse(options.isExitCodeEnabled()),
 			() -> assertFalse(options.isHideDetails()),
 			() -> assertFalse(options.isRunAllTests()),
 			() -> assertEquals(Optional.empty(), options.getIncludeClassNamePattern()),
@@ -64,7 +63,6 @@ public void parseSwitches() {
 		assertAll(
 			() -> assertParses("disable ansi", CommandLineOptions::isAnsiColorOutputDisabled, "-C", "--disable-ansi-colors"),
 			() -> assertParses("help", CommandLineOptions::isDisplayHelp, "-h", "--help"),
-			() -> assertParses("exit code", CommandLineOptions::isExitCodeEnabled, "-x", "--enable-exit-code"),
 			() -> assertParses("hide details", CommandLineOptions::isHideDetails, "-D", "--hide-details"),
 			() -> assertParses("run all tests", CommandLineOptions::isRunAllTests, "-a", "--all")
 		);

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * JUnit 5 API for writing extensions.
+ * JUnit Jupiter API for writing extensions.
  */
 
 package org.junit.jupiter.api.extension;

File: junit-jupiter-api/src/main/java/org/junit/jupiter/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * JUnit 5 API for writing tests.
+ * JUnit Jupiter API for writing tests.
  */
 
 package org.junit.jupiter.api;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * Test if a class is a JUnit 5 {@link Nested @Nested} test class.
+ * Test if a class is a JUnit Jupiter {@link Nested @Nested} test class.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsPotentialTestContainer.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * Test if a class is a potential top-level JUnit 5 test container, even if
+ * Test if a class is a potential top-level JUnit Jupiter test container, even if
  * it does not contain tests.
  *
  * @since 5.0

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -18,7 +18,8 @@
 import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
- * Test if a class is a JUnit 5 test class which should be included in package and classpath scanning.
+ * Test if a class is a JUnit Jupiter test class which should be included in
+ * package and classpath scanning.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestClassWithTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
- * Test if a class is a JUnit 5 test class containing executable tests,
+ * Test if a class is a JUnit Jupiter test class containing executable tests,
  * test factories, or nested tests.
  *
  * @since 5.0

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestFactoryMethod.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * Test if a method is a JUnit 5 test factory method.
+ * Test if a method is a JUnit Jupiter test factory method.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * Test if a method is a JUnit 5 test method.
+ * Test if a method is a JUnit Jupiter test method.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertionsTests.java
Patch:
@@ -35,7 +35,7 @@
 import org.opentest4j.ValueWrapper;
 
 /**
- * Unit tests for JUnit 5 {@link Assertions}.
+ * Unit tests for JUnit Jupiter {@link Assertions}.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssumptionsTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.opentest4j.TestAbortedException;
 
 /**
- * Unit tests for JUnit 5 {@link Assumptions}.
+ * Unit tests for JUnit Jupiter {@link Assumptions}.
  *
  * @since 5.0
  */

File: junit-platform-commons/src/main/java/org/junit/platform/commons/meta/API.java
Patch:
@@ -19,7 +19,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotates public types within JUnit 5 to indicate their level of stability
+ * Annotates public types within JUnit to indicate their level of stability
  * and how they are intended to be used.
  *
  * <p>If the annotation is present on a type, it is considered to hold for

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -20,8 +20,8 @@
  * Configuration parameters that {@link TestEngine TestEngines} may use to
  * influence test discovery and execution.
  *
- * <p>For example, the JUnit 5 engine uses a configuration parameter to enable
- * IDEs and build tools to deactivate conditional test execution.
+ * <p>For example, the JUnit Jupiter engine uses a configuration parameter to
+ * enable IDEs and build tools to deactivate conditional test execution.
  *
  * @see TestEngine
  * @see EngineDiscoveryRequest

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -18,8 +18,8 @@
  * A {@code TestEngine} facilitates <em>discovery</em> and <em>execution</em> of
  * tests for a particular programming model.
  *
- * <p>For example, JUnit 5 provides a {@code TestEngine} that discovers and
- * executes tests written using the JUnit 5 programming model.
+ * <p>For example, JUnit provides a {@code TestEngine} that discovers and
+ * executes tests written using the JUnit Jupiter programming model.
  *
  * <p>Every {@code TestEngine} must {@linkplain #getId provide an ID},
  * {@linkplain #discover discover tests} from

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -34,9 +34,9 @@
  * <p>Contrary to JUnit 4, {@linkplain org.junit.platform.engine.TestEngine test engines}
  * are supposed to report events not only for {@linkplain TestIdentifier identifiers}
  * that represent executable leaves in the {@linkplain TestPlan test plan} but also
- * for all intermediate containers. However, while both the JUnit 4 and JUnit 5 engines
- * comply with this contract, there is no way to guarantee this for third-party
- * engines.
+ * for all intermediate containers. However, while both the JUnit Vintage and JUnit
+ * Jupiter engines comply with this contract, there is no way to guarantee this for
+ * third-party engines.
  *
  * @since 1.0
  * @see Launcher

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -58,7 +58,7 @@
  *
  * <p>If you do not use any configuration annotations from this package, you
  * can simply use this runner on a test class whose programming model is
- * supported on the JUnit Platform &mdash; for example, a JUnit 5 test class.
+ * supported on the JUnit Platform &mdash; for example, a JUnit Jupiter test class.
  * Note, however, that any test class run with this runner must be {@code public}
  * in order to be picked up by IDEs and build tools.
  *

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Test descriptors used within the JUnit 5 test engine.
+ * Test descriptors used within the JUnit Jupiter test engine.
  */
 
 package org.junit.jupiter.engine.descriptor;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal classes for test discovery within the JUnit 5 test engine.
+ * Internal classes for test discovery within the JUnit Jupiter test engine.
  * Contains resolvers for Java Elements.
  */
 

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal predicate classes used by test discovery within the JUnit 5 test engine.
+ * Internal predicate classes used by test discovery within the JUnit Jupiter test engine.
  */
 
 package org.junit.jupiter.engine.discovery.predicates;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/execution/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal classes for test execution within the JUnit 5 test engine.
+ * Internal classes for test execution within the JUnit Jupiter test engine.
  */
 
 package org.junit.jupiter.engine.execution;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Test extensions specific to the JUnit 5 test engine.
+ * Test extensions specific to the JUnit Jupiter test engine.
  */
 
 package org.junit.jupiter.engine.extension;

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Core package for the JUnit 5 test engine.
+ * Core package for the JUnit Jupiter test engine.
  */
 
 package org.junit.jupiter.engine;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -24,7 +24,7 @@
  * @since 4.12
  */
 @API(Internal)
-public class RunnerTestDescriptor extends JUnit4TestDescriptor {
+public class RunnerTestDescriptor extends VintageTestDescriptor {
 
 	private final Runner runner;
 	private final Class<?> testClass;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Test descriptors used within the JUnit 4 test engine.
+ * Test descriptors used within the JUnit Vintage test engine.
  */
 
 package org.junit.vintage.engine.descriptor;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassRequestResolver.java
Patch:
@@ -28,8 +28,8 @@
 import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.Filterable;
 import org.junit.runners.model.RunnerBuilder;
-import org.junit.vintage.engine.descriptor.JUnit4TestDescriptor;
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
+import org.junit.vintage.engine.descriptor.VintageTestDescriptor;
 
 /**
  * @since 4.12
@@ -95,7 +95,7 @@ private RunnerTestDescriptor createCompleteRunnerTestDescriptor(Class<?> testCla
 		return runnerTestDescriptor;
 	}
 
-	private void addChildrenRecursively(JUnit4TestDescriptor parent) {
+	private void addChildrenRecursively(VintageTestDescriptor parent) {
 		List<Description> children = parent.getDescription().getChildren();
 		// Use LinkedHashMap to preserve order, ArrayList for fast access by index
 		Map<String, List<Description>> childrenByUniqueId = children.stream().collect(
@@ -107,7 +107,7 @@ private void addChildrenRecursively(JUnit4TestDescriptor parent) {
 			for (int index = 0; index < childrenWithSameUniqueId.size(); index++) {
 				String reallyUniqueId = uniqueIdGenerator.apply(index);
 				Description description = childrenWithSameUniqueId.get(index);
-				JUnit4TestDescriptor child = new JUnit4TestDescriptor(parent, JUnit4TestDescriptor.SEGMENT_TYPE_TEST,
+				VintageTestDescriptor child = new VintageTestDescriptor(parent, VintageTestDescriptor.SEGMENT_TYPE_TEST,
 					reallyUniqueId, description);
 				parent.addChild(child);
 				addChildrenRecursively(child);

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.discovery;
 
 import static java.lang.String.format;
-import static org.junit.vintage.engine.descriptor.JUnit4TestDescriptor.ENGINE_ID;
+import static org.junit.vintage.engine.descriptor.VintageTestDescriptor.ENGINE_ID;
 
 import java.util.List;
 import java.util.Optional;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal classes for test discovery within the JUnit 4 test engine.
+ * Internal classes for test discovery within the JUnit Vintage test engine.
  */
 
 package org.junit.vintage.engine.discovery;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Internal classes for test execution within the JUnit 4 test engine.
+ * Internal classes for test execution within the JUnit Vintage test engine.
  */
 
 package org.junit.vintage.engine.execution;

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Core package for the JUnit 4 test engine.
+ * Core package for the JUnit Vintage test engine.
  */
 
 package org.junit.vintage.engine;

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineExecutionTests.java
Patch:
@@ -46,7 +46,7 @@
 /**
  * @since 4.12
  */
-class JUnit4TestEngineExecutionTests {
+class VintageTestEngineExecutionTests {
 
 	@Test
 	void executesPlainJUnit4TestCaseWithSingleTestWhichFails() {
@@ -455,7 +455,7 @@ public void executesJUnit4TestCaseWithRunnerWithCustomUniqueIds() {
 	}
 
 	private static List<ExecutionEvent> execute(Class<?> testClass) {
-		JUnit4TestEngine engine = new JUnit4TestEngine();
+		VintageTestEngine engine = new VintageTestEngine();
 		TestDiscoveryRequest discoveryRequest = request().selectors(selectClass(testClass)).build();
 		return ExecutionEventRecorder.execute(engine, discoveryRequest);
 	}

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/VintageTestEngineTestSuite.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * Test suite for the {@link JUnit4TestEngine}.
+ * Test suite for the {@link VintageTestEngine}.
  *
  * <h3>Logging Configuration</h3>
  *
@@ -35,5 +35,5 @@
 @SelectPackages("org.junit.vintage.engine")
 @IncludeClassNamePattern(".*Tests?")
 @IncludeEngines("junit-jupiter")
-public class JUnit4TestEngineTestSuite {
+public class VintageTestEngineTestSuite {
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/TestClassRequestResolverTests.java
Patch:
@@ -27,8 +27,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
-import org.junit.vintage.engine.JUnit4UniqueIdBuilder;
 import org.junit.vintage.engine.RecordCollectingLogger;
+import org.junit.vintage.engine.VintageUniqueIdBuilder;
 import org.junit.vintage.engine.samples.junit4.IgnoredJUnit4TestCase;
 import org.junit.vintage.engine.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods;
 
@@ -77,7 +77,7 @@ void logsWarningOnNonFilterableRunner() {
 	}
 
 	private List<LogRecord> resolve(TestClassRequest request) {
-		TestDescriptor engineDescriptor = new EngineDescriptor(JUnit4UniqueIdBuilder.engineId(), "JUnit 4");
+		TestDescriptor engineDescriptor = new EngineDescriptor(VintageUniqueIdBuilder.engineId(), "JUnit 4");
 		RecordCollectingLogger logger = new RecordCollectingLogger();
 
 		TestClassRequestResolver resolver = new TestClassRequestResolver(engineDescriptor, logger);

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
-import static org.junit.vintage.engine.JUnit4UniqueIdBuilder.engineId;
+import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 
 import java.util.Set;
 import java.util.logging.Level;
@@ -22,8 +22,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.UniqueId;
 import org.junit.platform.engine.discovery.UniqueIdSelector;
-import org.junit.vintage.engine.JUnit4UniqueIdBuilder;
 import org.junit.vintage.engine.RecordCollectingLogger;
+import org.junit.vintage.engine.VintageUniqueIdBuilder;
 
 /**
  * @since 4.12
@@ -32,7 +32,7 @@ class UniqueIdSelectorResolverTests {
 
 	@Test
 	void logsWarningOnUnloadableTestClass() {
-		UniqueId uniqueId = JUnit4UniqueIdBuilder.uniqueIdForClass("foo.bar.UnknownClass");
+		UniqueId uniqueId = VintageUniqueIdBuilder.uniqueIdForClass("foo.bar.UnknownClass");
 		RecordCollectingLogger logger = new RecordCollectingLogger();
 		UniqueIdSelector selector = UniqueIdSelector.selectUniqueId(uniqueId);
 		TestClassCollector collector = new TestClassCollector();

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/VintageDiscoveryRequestResolverTests.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.platform.engine.FilterResult.includedIf;
 import static org.junit.platform.engine.discovery.ClassSelector.selectClass;
 import static org.junit.platform.launcher.core.TestDiscoveryRequestBuilder.request;
-import static org.junit.vintage.engine.JUnit4UniqueIdBuilder.engineId;
+import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
@@ -30,11 +30,11 @@
 /**
  * @since 4.12
  */
-class JUnit4DiscoveryRequestResolverTests {
+class VintageDiscoveryRequestResolverTests {
 
 	@Test
 	void logsWarningWhenFilterExcludesClass() {
-		EngineDescriptor engineDescriptor = new EngineDescriptor(engineId(), "JUnit 4");
+		EngineDescriptor engineDescriptor = new EngineDescriptor(engineId(), "JUnit Vintage");
 		RecordCollectingLogger logger = new RecordCollectingLogger();
 
 		ClassFilter filter = testClass -> includedIf(Foo.class.equals(testClass), () -> "match", () -> "no match");

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/execution/RunListenerAdapterTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.runner.Description.createTestDescription;
-import static org.junit.vintage.engine.JUnit4UniqueIdBuilder.engineId;
+import static org.junit.vintage.engine.VintageUniqueIdBuilder.engineId;
 
 import java.util.Optional;
 import java.util.logging.Level;

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -131,7 +131,7 @@ public void parseValidIncludedEngines() {
 		// @formatter:off
 		assertAll(
 			() -> assertEquals(asList("junit-jupiter"), parseArgLine("-e junit-jupiter").getIncludedEngines()),
-			() -> assertEquals(asList("junit4"), parseArgLine("--include-engine junit4").getIncludedEngines()),
+			() -> assertEquals(asList("junit-vintage"), parseArgLine("--include-engine junit-vintage").getIncludedEngines()),
 			() -> assertEquals(emptyList(), parseArgLine("").getIncludedEngines())
 		);
 		// @formatter:on
@@ -147,7 +147,7 @@ public void parseValidExcludedEngines() {
 		// @formatter:off
 		assertAll(
 			() -> assertEquals(asList("junit-jupiter"), parseArgLine("-E junit-jupiter").getExcludedEngines()),
-			() -> assertEquals(asList("junit4"), parseArgLine("--exclude-engine junit4").getExcludedEngines()),
+			() -> assertEquals(asList("junit-vintage"), parseArgLine("--exclude-engine junit-vintage").getExcludedEngines()),
 			() -> assertEquals(emptyList(), parseArgLine("").getExcludedEngines())
 		);
 		// @formatter:on

File: platform-tests/src/test/java/org/junit/platform/engine/UniqueIdTests.java
Patch:
@@ -130,7 +130,7 @@ void sameEnginesAreEqual() {
 
 		@Test
 		void differentEnginesAreNotEqual() {
-			UniqueId id1 = UniqueId.root("engine", "junit4");
+			UniqueId id1 = UniqueId.root("engine", "junit-vintage");
 			UniqueId id2 = UniqueId.root("engine", "junit-jupiter");
 
 			Assertions.assertFalse(id1.equals(id2));

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -46,7 +46,7 @@ void testCreate() {
 		// @formatter:on
 
 		if (junitVintageEngineIsPresent()) {
-			assertThat(ids).containsOnly("[engine:junit4]", "[engine:junit-jupiter]");
+			assertThat(ids).containsOnly("[engine:junit-vintage]", "[engine:junit-jupiter]");
 		}
 		else {
 			assertThat(ids).containsOnly("[engine:junit-jupiter]");
@@ -79,7 +79,7 @@ void testJ5() {
 	}
 
 	private static boolean junitVintageEngineIsPresent() {
-		return ReflectionUtils.loadClass("org.junit.vintage.engine.JUnit4TestEngine").isPresent();
+		return ReflectionUtils.loadClass("org.junit.vintage.engine.VintageTestEngine").isPresent();
 	}
 
 }

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/Constants.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.jupiter.engine;
 
 /**
- * Collection of constants related to the {@link JUnit5TestEngine}.
+ * Collection of constants related to the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
-import org.junit.jupiter.engine.execution.JUnit5EngineExecutionContext;
+import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.TestInstanceProvider;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
 import org.junit.platform.commons.meta.API;
@@ -62,7 +62,7 @@ protected String generateDefaultDisplayName() {
 	// --- Node ----------------------------------------------------------------
 
 	@Override
-	protected TestInstanceProvider testInstanceProvider(JUnit5EngineExecutionContext parentExecutionContext,
+	protected TestInstanceProvider testInstanceProvider(JupiterEngineExecutionContext parentExecutionContext,
 			ExtensionRegistry registry, ExtensionContext extensionContext) {
 
 		return () -> {

File: junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.DynamicTest;
 import org.junit.jupiter.api.extension.TestExtensionContext;
 import org.junit.jupiter.engine.execution.ExecutableInvoker;
-import org.junit.jupiter.engine.execution.JUnit5EngineExecutionContext;
+import org.junit.jupiter.engine.execution.JupiterEngineExecutionContext;
 import org.junit.jupiter.engine.execution.ThrowableCollector;
 import org.junit.platform.commons.JUnitException;
 import org.junit.platform.commons.meta.API;
@@ -77,7 +77,7 @@ public boolean isLeaf() {
 	}
 
 	@Override
-	protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,
+	protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,
 			ThrowableCollector throwableCollector) {
 
 		EngineExecutionListener listener = context.getExecutionListener();

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/JupiterTestSuite.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * Test suite for the JUnit 5 programming model, extension model, and
+ * Test suite for the JUnit Jupiter programming model, extension model, and
  * {@code TestEngine} implementation.
  *
  * <h3>Logging Configuration</h3>
@@ -35,6 +35,6 @@
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.jupiter")
 @IncludeClassNamePattern(".*Tests?")
-@IncludeEngines("junit5")
-public class JUnit5TestSuite {
+@IncludeEngines("junit-jupiter")
+public class JupiterTestSuite {
 }

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java
Patch:
@@ -20,13 +20,13 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * Abstract base class for tests involving the {@link JUnit5TestEngine}.
+ * Abstract base class for tests involving the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public abstract class AbstractJUnit5TestEngineTests {
+public abstract class AbstractJupiterTestEngineTests {
 
-	private final JUnit5TestEngine engine = new JUnit5TestEngine();
+	private final JupiterTestEngine engine = new JupiterTestEngine();
 
 	protected ExecutionEventRecorder executeTestsForClass(Class<?> testClass) {
 		return executeTests(request().selectors(selectClass(testClass)).build());

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -25,12 +25,12 @@
 
 /**
  * Integration tests that verify support for {@link BeforeAll} and {@link AfterAll}
- * when used as meta-annotations in the {@link JUnit5TestEngine}.
+ * when used as meta-annotations in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  * @see BeforeEachAndAfterEachComposedAnnotationTests
  */
-class BeforeAllAndAfterAllComposedAnnotationTests extends AbstractJUnit5TestEngineTests {
+class BeforeAllAndAfterAllComposedAnnotationTests extends AbstractJupiterTestEngineTests {
 
 	private static final List<String> methodsInvoked = new ArrayList<>();
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -25,12 +25,12 @@
 
 /**
  * Integration tests that verify support for {@link BeforeEach} and {@link AfterEach}
- * when used as meta-annotations in the {@link JUnit5TestEngine}.
+ * when used as meta-annotations in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  * @see BeforeAllAndAfterAllComposedAnnotationTests
  */
-class BeforeEachAndAfterEachComposedAnnotationTests extends AbstractJUnit5TestEngineTests {
+class BeforeEachAndAfterEachComposedAnnotationTests extends AbstractJupiterTestEngineTests {
 
 	private static final List<String> methodsInvoked = new ArrayList<>();
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DisabledTests.java
Patch:
@@ -21,11 +21,11 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * Integration tests that verify support for {@link Disabled @Disabled} in the {@link JUnit5TestEngine}.
+ * Integration tests that verify support for {@link Disabled @Disabled} in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public class DisabledTests extends AbstractJUnit5TestEngineTests {
+public class DisabledTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	public void executeTestsWithDisabledTestClass() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DynamicTestGenerationTests.java
Patch:
@@ -47,7 +47,7 @@
  *
  * @since 5.0
  */
-class DynamicTestGenerationTests extends AbstractJUnit5TestEngineTests {
+class DynamicTestGenerationTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void testFactoryMethodsAreCorrectlyDiscoveredForClassSelector() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ExceptionHandlingTests.java
Patch:
@@ -41,11 +41,11 @@
 import org.opentest4j.AssertionFailedError;
 
 /**
- * Integration tests that verify correct exception handling in the {@link JUnit5TestEngine}.
+ * Integration tests that verify correct exception handling in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public class ExceptionHandlingTests extends AbstractJUnit5TestEngineTests {
+public class ExceptionHandlingTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	public void failureInTestMethodIsRegistered() throws NoSuchMethodException {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/NestedTestClassesTests.java
Patch:
@@ -26,11 +26,11 @@
 
 /**
  * Integration tests that verify support for {@linkplain Nested nested contexts}
- * in the {@link JUnit5TestEngine}.
+ * in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public class NestedTestClassesTests extends AbstractJUnit5TestEngineTests {
+public class NestedTestClassesTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	public void nestedTestsAreCorrectlyDiscovered() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/ReportingTests.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * @since 5.0
  */
-public class ReportingTests extends AbstractJUnit5TestEngineTests {
+public class ReportingTests extends AbstractJupiterTestEngineTests {
 
 	@Test
 	void threeReportEntriesArePublished() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/StandardTestClassTests.java
Patch:
@@ -25,11 +25,11 @@
 import org.opentest4j.TestAbortedException;
 
 /**
- * Testing execution in standard test cases {@link JUnit5TestEngine}.
+ * Testing execution in standard test cases {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public class StandardTestClassTests extends AbstractJUnit5TestEngineTests {
+public class StandardTestClassTests extends AbstractJupiterTestEngineTests {
 
 	@BeforeEach
 	public void init() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/TestCaseWithInheritanceTests.java
Patch:
@@ -23,11 +23,11 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * Integration tests for test class hierarchy support in the {@link JUnit5TestEngine}.
+ * Integration tests for test class hierarchy support in the {@link JupiterTestEngine}.
  *
  * @since 5.0
  */
-public class TestCaseWithInheritanceTests extends AbstractJUnit5TestEngineTests {
+public class TestCaseWithInheritanceTests extends AbstractJupiterTestEngineTests {
 
 	@BeforeEach
 	void initStatics() {

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/descriptor/JupiterTestDescriptorTests.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.engine.descriptor.JUnit5TestDescriptorTests.StaticTestCase.StaticTestCaseLevel2;
+import org.junit.jupiter.engine.descriptor.JupiterTestDescriptorTests.StaticTestCase.StaticTestCaseLevel2;
 import org.junit.platform.engine.TestTag;
 import org.junit.platform.engine.UniqueId;
 
@@ -37,7 +37,7 @@
  *
  * @since 5.0
  */
-public class JUnit5TestDescriptorTests {
+public class JupiterTestDescriptorTests {
 
 	private static final UniqueId uniqueId = UniqueId.root("enigma", "foo");
 
@@ -54,7 +54,7 @@ public void constructFromMethod() throws Exception {
 
 	@Test
 	public void constructFromMethodWithAnnotations() throws Exception {
-		JUnit5TestDescriptor classDescriptor = new ClassTestDescriptor(uniqueId, ASampleTestCase.class);
+		JupiterTestDescriptor classDescriptor = new ClassTestDescriptor(uniqueId, ASampleTestCase.class);
 		Method testMethod = ASampleTestCase.class.getDeclaredMethod("foo");
 		MethodTestDescriptor methodDescriptor = new MethodTestDescriptor(uniqueId, ASampleTestCase.class, testMethod);
 		classDescriptor.addChild(methodDescriptor);

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestExecutionExceptionHandlerTests.java
Patch:
@@ -37,7 +37,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;
 import org.junit.jupiter.api.extension.TestExtensionContext;
-import org.junit.jupiter.engine.AbstractJUnit5TestEngineTests;
+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.platform.engine.test.event.ExecutionEventRecorder;
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
@@ -46,7 +46,7 @@
  *
  * @since 5.0
  */
-class TestExecutionExceptionHandlerTests extends AbstractJUnit5TestEngineTests {
+class TestExecutionExceptionHandlerTests extends AbstractJupiterTestEngineTests {
 
 	static List<String> handlerCalls = new ArrayList<>();
 

File: junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/TestInstancePostProcessorTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestInstancePostProcessor;
-import org.junit.jupiter.engine.AbstractJUnit5TestEngineTests;
+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
 import org.junit.platform.engine.test.event.ExecutionEventRecorder;
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
@@ -33,7 +33,7 @@
  *
  * @since 5.0
  */
-public class TestInstancePostProcessorTests extends AbstractJUnit5TestEngineTests {
+public class TestInstancePostProcessorTests extends AbstractJupiterTestEngineTests {
 
 	private static final List<String> callSequence = new ArrayList<>();
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4TestEngineTestSuite.java
Patch:
@@ -34,6 +34,6 @@
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.vintage.engine")
 @IncludeClassNamePattern(".*Tests?")
-@IncludeEngines("junit5")
+@IncludeEngines("junit-jupiter")
 public class JUnit4TestEngineTestSuite {
 }

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -34,6 +34,6 @@
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.platform")
 @IncludeClassNamePattern(".*Tests?")
-@IncludeEngines("junit5")
+@IncludeEngines("junit-jupiter")
 public class JUnitPlatformTestSuite {
 }

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -130,7 +130,7 @@ public void parseInvalidExcludedTags() {
 	public void parseValidIncludedEngines() {
 		// @formatter:off
 		assertAll(
-			() -> assertEquals(asList("junit5"), parseArgLine("-e junit5").getIncludedEngines()),
+			() -> assertEquals(asList("junit-jupiter"), parseArgLine("-e junit-jupiter").getIncludedEngines()),
 			() -> assertEquals(asList("junit4"), parseArgLine("--include-engine junit4").getIncludedEngines()),
 			() -> assertEquals(emptyList(), parseArgLine("").getIncludedEngines())
 		);
@@ -146,7 +146,7 @@ public void parseInvalidIncludedEngines() throws Exception {
 	public void parseValidExcludedEngines() {
 		// @formatter:off
 		assertAll(
-			() -> assertEquals(asList("junit5"), parseArgLine("-E junit5").getExcludedEngines()),
+			() -> assertEquals(asList("junit-jupiter"), parseArgLine("-E junit-jupiter").getExcludedEngines()),
 			() -> assertEquals(asList("junit4"), parseArgLine("--exclude-engine junit4").getExcludedEngines()),
 			() -> assertEquals(emptyList(), parseArgLine("").getExcludedEngines())
 		);

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -46,10 +46,10 @@ void testCreate() {
 		// @formatter:on
 
 		if (junitVintageEngineIsPresent()) {
-			assertThat(ids).containsOnly("[engine:junit4]", "[engine:junit5]");
+			assertThat(ids).containsOnly("[engine:junit4]", "[engine:junit-jupiter]");
 		}
 		else {
-			assertThat(ids).containsOnly("[engine:junit5]");
+			assertThat(ids).containsOnly("[engine:junit-jupiter]");
 		}
 	}
 

File: platform-tests/src/test/java/org/junit/platform/JUnitPlatformTestSuite.java
Patch:
@@ -29,7 +29,7 @@
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *
- * @since 5.0
+ * @since 1.0
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.platform")

File: platform-tests/src/test/java/org/junit/platform/commons/util/AnnotationUtilsTests.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Unit tests for {@link AnnotationUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class AnnotationUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ClasspathScannerTests.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Unit tests for {@link ClasspathScanner}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class ClasspathScannerTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/CollectionUtilsTests.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Unit tests for {@link CollectionUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class CollectionUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ExceptionUtilsTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link ExceptionUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class ExceptionUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/FunctionUtilsTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link FunctionUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class FunctionUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/PreconditionsTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link Preconditions}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class PreconditionsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ReflectionUtilsTests.java
Patch:
@@ -47,7 +47,7 @@
 /**
  * Unit tests for {@link ReflectionUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class ReflectionUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/StringUtilsTests.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Unit tests for {@link StringUtils}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class StringUtilsTests {
 

File: platform-tests/src/test/java/org/junit/platform/commons/util/ToStringBuilderTests.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Unit tests for {@link ToStringBuilder}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class ToStringBuilderTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/ConsoleRunnerTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.platform.console.tasks.ExecuteTestsTask;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class ConsoleRunnerTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class JOptSimpleCommandLineOptionsParserTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ClasspathEntriesParserTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class ClasspathEntriesParserTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ColoredPrintingTestListenerTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.launcher.TestIdentifier;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class ColoredPrintingTestListenerTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ConsoleTaskExecutorTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class ConsoleTaskExecutorTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/CustomContextClassLoaderExecutorTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class CustomContextClassLoaderExecutorTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DiscoveryRequestCreatorTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.engine.support.hierarchical.DummyTestEngine;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class ExecuteTestsTaskTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/IncrementingClock.java
Patch:
@@ -16,7 +16,7 @@
 import java.time.ZoneId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 final class IncrementingClock extends Clock {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/TempDirectory.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.jupiter.api.extension.TestExtensionContext;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TempDirectory implements AfterEachCallback, ParameterResolver {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportAssertions.java
Patch:
@@ -22,7 +22,7 @@
 import org.xml.sax.SAXException;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportAssertions {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportDataTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportDataTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportWriterTests.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportWriterTests {
 

File: platform-tests/src/test/java/org/junit/platform/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -56,7 +56,7 @@
 import org.opentest4j.AssertionFailedError;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @ExtendWith(TempDirectory.class)
 class XmlReportsWritingListenerTests {

File: platform-tests/src/test/java/org/junit/platform/engine/FilterCompositionTests.java
Patch:
@@ -28,7 +28,7 @@
  *
  * {@link Filter#composeFilters} will delegate to {@linkplain CompositeFilter} under the hood.
  *
- * @since 5.0
+ * @since 1.0
  */
 class FilterCompositionTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/TestDescriptorTests.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.test.TestDescriptorStub;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TestDescriptorTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/TestTagTests.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class TestTagTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/UniqueIdFormatTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.platform.engine.UniqueId.Segment;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class UniqueIdFormatTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/UniqueIdTests.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Microtests for class {@link UniqueId}
  *
- * @since 5.0
+ * @since 1.0
  */
 class UniqueIdTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/discovery/ClassFilterTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class ClassFilterTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptorTests.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Unit tests for {@link AbstractTestDescriptor} and {@link EngineDescriptor}.
  *
- * @since 5.0
+ * @since 1.0
  */
 public class AbstractTestDescriptorTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/AbstractTestSourceTests.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Abstract base class for unit tests involving {@link TestSource TestSources}.
  *
- * @since 5.0
+ * @since 1.0
  */
 abstract class AbstractTestSourceTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/CompositeTestSourceTests.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Unit tests for {@link CompositeTestSource}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class CompositeTestSourceTests extends AbstractTestSourceTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoClassTestDescriptor.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.platform.engine.UniqueId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DemoClassTestDescriptor extends AbstractTestDescriptor {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/DemoMethodTestDescriptor.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.platform.engine.UniqueId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DemoMethodTestDescriptor extends AbstractTestDescriptor {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/FileSystemSourceTests.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Unit tests for {@link FileSource} and {@link DirectorySource}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class FileSystemSourceTests extends AbstractTestSourceTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/descriptor/JavaSourceTests.java
Patch:
@@ -23,7 +23,7 @@
  * Unit tests for {@link JavaPackageSource}, {@link JavaClassSource}, and
  * {@link JavaMethodSource}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class JavaSourceTests extends AbstractTestSourceTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DummyEngineDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DummyEngineDescriptor extends EngineDescriptor implements Node<DummyEngineExecutionContext> {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DummyEngineExecutionContext.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.platform.engine.support.hierarchical;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class DummyEngineExecutionContext implements EngineExecutionContext {
 }

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DummyTestDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DummyTestDescriptor extends AbstractTestDescriptor implements Node<DummyEngineExecutionContext> {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/DummyTestEngine.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.platform.engine.UniqueId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public final class DummyTestEngine extends HierarchicalTestEngine<DummyEngineExecutionContext> {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Micro-tests that verify behavior of {@link HierarchicalTestExecutor}.
  *
- * @since 5.0
+ * @since 1.0
  */
 public class HierarchicalTestExecutorTests {
 

File: platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutorTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.opentest4j.TestAbortedException;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class SingleTestExecutorTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/DiscoveryFilterStub.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.FilterResult;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class DiscoveryFilterStub<T> extends FilterStub<T> implements DiscoveryFilter<T> {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/FilterStub.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.FilterResult;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class FilterStub<T> implements Filter<T> {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/PostDiscoveryFilterStub.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.TestDescriptor;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class PostDiscoveryFilterStub extends FilterStub<TestDescriptor> implements PostDiscoveryFilter {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/TagFilterTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Unit tests for {@link TagFilter}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class TagFilterTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.platform.engine.test.TestDescriptorStub;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class TestIdentifierTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DefaultLauncherTests.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class DefaultLauncherTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/DiscoveryRequestTests.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Unit tests for {@link DiscoveryRequest}.
  *
- * @since 5.0
+ * @since 1.0
  */
 public class DiscoveryRequestTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/ExecutionListenerAdapterTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 // TODO Test other adapter methods.
 class ExecutionListenerAdapterTests {

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryForTestingPurposesOnly.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.platform.engine.TestEngine;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class LauncherFactoryForTestingPurposesOnly {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class LauncherFactoryTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/core/TestDiscoveryRequestBuilderTests.java
Patch:
@@ -50,7 +50,7 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TestDiscoveryRequestBuilderTests {
 

File: platform-tests/src/test/java/org/junit/platform/launcher/listener/SummaryGenerationTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class SummaryGenerationTests {
 

File: platform-tests/src/test/java/org/junit/platform/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -68,7 +68,7 @@
 /**
  * Tests for the {@link JUnitPlatform} runner.
  *
- * @since 5.0
+ * @since 1.0
  */
 class JUnitPlatformRunnerTests {
 

File: junit-platform-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -18,7 +18,7 @@
  * Base class for all {@link RuntimeException RuntimeExceptions} thrown
  * by JUnit.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class JUnitException extends RuntimeException {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/meta/API.java
Patch:
@@ -26,7 +26,7 @@
  * all public members of the type as well. A member is allowed to declare a
  * different {@link Usage} of lower stability.
  *
- * @since 5.0
+ * @since 1.0
  */
 @Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })
 @Retention(RetentionPolicy.CLASS)

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java
Patch:
@@ -43,7 +43,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  * @see Annotation
  * @see AnnotatedElement
  */

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -33,7 +33,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 class ClasspathScanner {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -25,7 +25,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class CollectionUtils {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -26,7 +26,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class ExceptionUtils {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -27,7 +27,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class FunctionUtils {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/PreconditionViolationException.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Thrown if a <em>precondition</em> is violated.
  *
- * @since 5.0
+ * @since 1.0
  * @see Preconditions
  */
 @API(Internal)

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -31,7 +31,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class Preconditions {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -44,7 +44,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class ReflectionUtils {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -28,7 +28,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public final class StringUtils {

File: junit-platform-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -30,7 +30,7 @@
  * itself. <strong>Any usage by external parties is not supported.</strong>
  * Use at your own risk!
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class ToStringBuilder {

File: junit-platform-console/src/main/java/org/junit/platform/console/ConsoleRunner.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.platform.console.tasks.ExecuteTestsTask;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Maintained)
 public class ConsoleRunner {

File: junit-platform-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -17,7 +17,7 @@
 import joptsimple.OptionSpec;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class AvailableOptions {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class CommandLineOptions {

File: junit-platform-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public interface CommandLineOptionsParser {

File: junit-platform-console/src/main/java/org/junit/platform/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class JOptSimpleCommandLineOptionsParser implements CommandLineOptionsParser {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ClasspathEntriesParser.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.platform.commons.JUnitException;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class ClasspathEntriesParser {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ColoredPrintingTestListener.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class ColoredPrintingTestListener implements TestExecutionListener {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTask.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * A task to be executed from the console,
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public interface ConsoleTask {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ConsoleTaskExecutor.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.commons.meta.API;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class ConsoleTaskExecutor {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/CustomContextClassLoaderExecutor.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.concurrent.Callable;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class CustomContextClassLoaderExecutor {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.platform.launcher.TestDiscoveryRequest;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class DiscoveryRequestCreator {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/DisplayHelpTask.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.platform.console.options.CommandLineOptionsParser;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class DisplayHelpTask implements ConsoleTask {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/ExecuteTestsTask.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.platform.launcher.listeners.TestExecutionSummary;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class ExecuteTestsTask implements ConsoleTask {

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/XmlReportData.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportData {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/XmlReportWriter.java
Patch:
@@ -38,7 +38,7 @@
 import org.junit.platform.launcher.TestIdentifier;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportWriter {
 

File: junit-platform-console/src/main/java/org/junit/platform/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class XmlReportsWritingListener implements TestExecutionListener {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/CompositeFilter.java
Patch:
@@ -21,7 +21,7 @@
  * include elements if and only if all of the filters in the specified collection
  * include it.
  *
- * @since 5.0
+ * @since 1.0
  */
 class CompositeFilter<T> implements Filter<T> {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -26,7 +26,7 @@
  * @see TestEngine
  * @see EngineDiscoveryRequest
  * @see ExecutionRequest
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface ConfigurationParameters {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -21,7 +21,7 @@
  * <p>{@link TestEngine TestEngines} should apply {@code DiscoveryFilters}
  * during the test discovery phase.
  *
- * @since 5.0
+ * @since 1.0
  * @see EngineDiscoveryRequest
  * @see TestEngine
  */

File: junit-platform-engine/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -19,7 +19,7 @@
  * &mdash; for example, the name of a Java class, the path to a file or
  * directory, etc.
  *
- * @since 5.0
+ * @since 1.0
  * @see EngineDiscoveryRequest
  */
 @API(Experimental)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -31,7 +31,7 @@
  * @see TestEngine
  * @see DiscoverySelector
  * @see DiscoveryFilter
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface EngineDiscoveryRequest {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/EngineExecutionListener.java
Patch:
@@ -24,7 +24,7 @@
  * must report events not only for {@linkplain TestDescriptor test descriptors}
  * that represent executable leaves but also for all intermediate containers.
  *
- * @since 5.0
+ * @since 1.0
  * @see TestEngine
  * @see ExecutionRequest
  */

File: junit-platform-engine/src/main/java/org/junit/platform/engine/ExecutionRequest.java
Patch:
@@ -25,7 +25,7 @@
  * execution.
  *
  * @see TestEngine
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class ExecutionRequest {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/Filter.java
Patch:
@@ -31,7 +31,7 @@
  * <p>Clients should not implement this interface directly but rather one of
  * its subinterfaces.
  *
- * @since 5.0
+ * @since 1.0
  * @see DiscoveryFilter
  */
 @FunctionalInterface

File: junit-platform-engine/src/main/java/org/junit/platform/engine/FilterResult.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * The result of applying a {@link Filter}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class FilterResult {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestDescriptor.java
Patch:
@@ -23,7 +23,7 @@
  * {@link TestEngine}.
  *
  * @see TestEngine
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface TestDescriptor {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @see EngineDiscoveryRequest
  * @see ExecutionRequest
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface TestEngine {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestExecutionResult.java
Patch:
@@ -27,7 +27,7 @@
  * <p>A {@code TestExecutionResult} consists of a mandatory {@link Status} and
  * an optional {@link Throwable}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class TestExecutionResult {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -27,7 +27,7 @@
  * <em>serializable</em> and <em>immutable</em> since they may be used as data
  * transfer objects.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface TestSource extends Serializable {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/TestTag.java
Patch:
@@ -22,7 +22,7 @@
  * Immutable value object for a <em>tag</em> that is assigned to a test or
  * container.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public final class TestTag implements Serializable {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java
Patch:
@@ -28,7 +28,7 @@
  *
  * <p>Instances of this class have value semantics and are immutable.</p>
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class UniqueId implements Cloneable {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueIdFormat.java
Patch:
@@ -26,7 +26,7 @@
  * Used to {@linkplain #parse parse} a {@link UniqueId} from a string representation
  * or to {@linkplain #format format} a {@link UniqueId} into a string representation.
  *
- * @since 5.0
+ * @since 1.0
  */
 class UniqueIdFormat {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassFilter.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * {@link DiscoveryFilter} that is applied to a {@link Class}.
  *
- * @since 5.0
+ * @since 1.0
  * @see #includeClassNamePattern(String)
  */
 @API(Experimental)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassSelector.java
Patch:
@@ -23,7 +23,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} can discover
  * tests or containers based on Java classes.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class ClassSelector implements DiscoverySelector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathSelector.java
Patch:
@@ -27,7 +27,7 @@
  * files or resources within the physical classpath &mdash; for example, to
  * scan for test classes.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class ClasspathSelector implements DiscoverySelector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/IncludeClassNameFilter.java
Patch:
@@ -24,7 +24,7 @@
  * <p>If the fully qualified name of a class matches against the pattern, the
  * class will be included.
  *
- * @since 5.0
+ * @since 1.0
  */
 class IncludeClassNameFilter implements ClassFilter {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/MethodSelector.java
Patch:
@@ -25,7 +25,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} can discover
  * tests or containers based on Java methods.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class MethodSelector implements DiscoverySelector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/NameBasedSelectors.java
Patch:
@@ -36,7 +36,7 @@
  * <p>Consult the documentation for {@link #selectName(String)} for details
  * on what types of names are supported.
  *
- * @since 5.0
+ * @since 1.0
  * @see ClassSelector
  * @see MethodSelector
  * @see PackageSelector

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/PackageSelector.java
Patch:
@@ -21,7 +21,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} can discover
  * tests or containers based on packages.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class PackageSelector implements DiscoverySelector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/UniqueIdSelector.java
Patch:
@@ -22,7 +22,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} can discover
  * tests or containers based on unique IDs.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class UniqueIdSelector implements DiscoverySelector {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/reporting/ReportEntry.java
Patch:
@@ -25,7 +25,7 @@
  * {@code ReportEntry} encapsulates a time-stamped map of {@code String}-based
  * key-value pairs to be published to the reporting infrastructure.
  *
- * @since 5.0
+ * @since 1.0
  * @see #from(Map)
  * @see #from(String, String)
  */

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -33,7 +33,7 @@
  * <p>Subclasses should call {@link #setSource} in their constructor, if
  * possible, and override {@link #getTags}, if appropriate.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public abstract class AbstractTestDescriptor implements TestDescriptor {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/CompositeTestSource.java
Patch:
@@ -27,7 +27,7 @@
  *
  * <p>{@code CompositeTestSource} and its {@link #getSources sources} are immutable.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class CompositeTestSource implements TestSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/DirectorySource.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Directory based {@link org.junit.platform.engine.TestSource}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class DirectorySource implements FileSystemSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -22,7 +22,7 @@
  * An {@code EngineDescriptor} is a {@link TestDescriptor} for a specific
  * {@link TestEngine}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class EngineDescriptor extends AbstractTestDescriptor {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java
Patch:
@@ -22,7 +22,7 @@
  * Position inside a file represented by {@linkplain #getLine line} and
  * {@linkplain #getColumn column}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class FilePosition implements Serializable {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSource.java
Patch:
@@ -27,7 +27,7 @@
  * File based {@link org.junit.platform.engine.TestSource} with an optional
  * {@linkplain FilePosition position}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class FileSource implements FileSystemSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -23,7 +23,7 @@
  * <p>This interface uses {@link File} instead of {@link java.nio.file.Path}
  * because the latter does not implement {@link java.io.Serializable}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface FileSystemSource extends UriSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaClassSource.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Java class based {@link org.junit.platform.engine.TestSource}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class JavaClassSource implements JavaSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaMethodSource.java
Patch:
@@ -29,7 +29,7 @@
  * <p>This class stores the method name along with its parameter types because
  * {@link Method} does not implement {@link java.io.Serializable}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class JavaMethodSource implements JavaSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaPackageSource.java
Patch:
@@ -24,7 +24,7 @@
  * <p>This class stores the package name because {@link Package} does not
  * implement {@link java.io.Serializable}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public class JavaPackageSource implements JavaSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/JavaSource.java
Patch:
@@ -19,7 +19,7 @@
  * Marker interface for {@link TestSource TestSources} that are based on
  * elements of the Java language.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface JavaSource extends TestSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/UriSource.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * A {@link TestSource} that can be represented as a {@link URI}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface UriSource extends TestSource {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/filter/ExclusionReasonConsumingFilter.java
Patch:
@@ -24,7 +24,7 @@
  * Decorator for a {@link Filter} that passes the <em>object</em> and the
  * <em>reason</em> to a {@link BiConsumer} in case it is <em>excluded</em>.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Internal)
 public class ExclusionReasonConsumingFilter<T> implements Filter<T> {

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/BlacklistedExceptions.java
Patch:
@@ -26,7 +26,7 @@
  * <li>{@link OutOfMemoryError}</li>
  * </ul>
  *
- * @since 5.0
+ * @since 1.0
  */
 final class BlacklistedExceptions {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -18,7 +18,7 @@
  * Marker interface for an execution context used by a concrete implementation
  * of {@link HierarchicalTestEngine} and its collaborators.
  *
- * @since 5.0
+ * @since 1.0
  * @see HierarchicalTestEngine
  */
 @API(Experimental)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -21,7 +21,7 @@
  * to organize test suites hierarchically based on the {@link Node} abstraction.
  *
  * @param <C> the type of {@code EngineExecutionContext} used by this engine
- * @since 5.0
+ * @since 1.0
  * @see Node
  */
 @API(Experimental)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutor.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @param <C> the type of {@code EngineExecutionContext} used by the
  * {@code HierarchicalTestEngine}
- * @since 5.0
+ * @since 1.0
  */
 class HierarchicalTestExecutor<C extends EngineExecutionContext> {
 

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @param <C> the type of {@code EngineExecutionContext} used by the
  * {@code HierarchicalTestEngine}
- * @since 5.0
+ * @since 1.0
  * @see HierarchicalTestEngine
  */
 @API(Experimental)

File: junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -24,7 +24,7 @@
  * {@code SingleTestExecutor} encapsulates the execution of a single test
  * wrapped in an {@link Executable}.
  *
- * @since 5.0
+ * @since 1.0
  * @see #executeSafely(Executable)
  */
 @API(Experimental)

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/TestDescriptorStub.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TestDescriptorStub extends AbstractTestDescriptor {
 

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/TestEngineSpy.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.UniqueId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TestEngineSpy implements TestEngine {
 

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/TestEngineStub.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.platform.engine.UniqueId;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class TestEngineStub implements TestEngine {
 

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/ExecutionEvent.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Represents an event collected by {@link ExecutionEventRecorder}.
  *
- * @since 5.0
+ * @since 1.0
  * @see ExecutionEventConditions
  */
 public class ExecutionEvent {

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/ExecutionEventConditions.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * Collection of AssertJ conditions for {@link ExecutionEvent}.
  *
- * @since 5.0
+ * @since 1.0
  */
 public class ExecutionEventConditions {
 

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/ExecutionEventRecorder.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * {@link EngineExecutionListener} that records all events and makes them available to tests.
  *
- * @since 5.0
+ * @since 1.0
  * @see ExecutionEvent
  */
 public class ExecutionEventRecorder implements EngineExecutionListener {

File: junit-platform-engine/src/test/java/org/junit/platform/engine/test/event/TestExecutionResultConditions.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Collection of AssertJ conditions for {@link TestExecutionResult}.
  *
- * @since 5.0
+ * @since 1.0
  */
 public class TestExecutionResultConditions {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/EngineFilter.java
Patch:
@@ -33,7 +33,7 @@
  * request since doing so will likely lead to undesirable results (i.e., zero
  * engines being active).
  *
- * @since 5.0
+ * @since 1.0
  * @see #includeEngines(String...)
  * @see #excludeEngines(String...)
  * @see TestDiscoveryRequest

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/Launcher.java
Patch:
@@ -42,7 +42,7 @@
  * progress and results of test execution. Listeners will be notified of events
  * in the order in which they were registered.
  *
- * @since 5.0
+ * @since 1.0
  * @see TestDiscoveryRequest
  * @see TestPlan
  * @see TestExecutionListener

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/PostDiscoveryFilter.java
Patch:
@@ -24,7 +24,7 @@
  * <p>{@link TestEngine TestEngines} must <strong>not</strong> apply
  * {@code PostDiscoveryFilters} during the test discovery phase.
  *
- * @since 5.0
+ * @since 1.0
  * @see TestDiscoveryRequest
  * @see TestEngine
  */

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TagFilter.java
Patch:
@@ -26,7 +26,7 @@
  * Factory methods for creating {@link PostDiscoveryFilter PostDiscoveryFilters}
  * based on <em>included</em> and <em>excluded</em> tags.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public final class TagFilter {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestDiscoveryRequest.java
Patch:
@@ -28,7 +28,7 @@
  * <p>Moreover, the {@code add*()} methods can be used by external clients that do
  * not want to use the {@link org.junit.platform.launcher.core.TestDiscoveryRequestBuilder}.
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public interface TestDiscoveryRequest extends EngineDiscoveryRequest {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestExecutionListener.java
Patch:
@@ -38,7 +38,7 @@
  * comply with this contract, there is no way to guarantee this for third-party
  * engines.
  *
- * @since 5.0
+ * @since 1.0
  * @see Launcher
  * @see TestPlan
  * @see TestIdentifier

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
Patch:
@@ -31,7 +31,7 @@
  * Immutable data transfer object that represents a test or container which is
  * usually part of a {@link TestPlan}.
  *
- * @since 5.0
+ * @since 1.0
  * @see TestPlan
  */
 @API(Experimental)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java
Patch:
@@ -46,7 +46,7 @@
  * test is registered at runtime, it is added to the original test plan and
  * reported to {@link TestExecutionListener} implementations.
  *
- * @since 5.0
+ * @since 1.0
  * @see Launcher
  * @see TestExecutionListener
  */

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java
Patch:
@@ -32,7 +32,7 @@
  *
  * <p>External clients can obtain an instance by invoking {@link LauncherFactory#create()}.
  *
- * @since 5.0
+ * @since 1.0
  * @see Launcher
  * @see LauncherFactory
  */

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DiscoveryRequest.java
Patch:
@@ -45,7 +45,7 @@
  * launcher after {@code TestEngines} have performed test discovery</li>
  * </ul>
  *
- * @since 5.0
+ * @since 1.0
  * @see DiscoverySelector
  * @see EngineFilter
  * @see DiscoveryFilter

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ExecutionListenerAdapter.java
Patch:
@@ -22,7 +22,7 @@
  * An {@code ExecutionListenerAdapter} adapts a {@link TestPlan} and a corresponding
  * {@link TestExecutionListener} to the {@link EngineExecutionListener} API.
  *
- * @since 5.0
+ * @since 1.0
  */
 class ExecutionListenerAdapter implements EngineExecutionListener {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherConfigurationParameters.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.platform.engine.ConfigurationParameters;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class LauncherConfigurationParameters implements ConfigurationParameters {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherFactory.java
Patch:
@@ -26,7 +26,7 @@
  * of the implementation class of the {@link org.junit.platform.engine.TestEngine}
  * interface is declared.
  *
- * @since 5.0
+ * @since 1.0
  * @see Launcher
  */
 @API(Experimental)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/Root.java
Patch:
@@ -25,7 +25,7 @@
  * Represents the root of all discovered {@link TestEngine TestEngines} and
  * their {@link TestDescriptor TestDescriptors}.
  *
- * @since 5.0
+ * @since 1.0
  */
 class Root {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.platform.engine.TestEngine;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class ServiceLoaderTestEngineRegistry {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/TestDiscoveryRequestBuilder.java
Patch:
@@ -61,7 +61,7 @@
  *     .build();
  * </pre>
  *
- * @since 5.0
+ * @since 1.0
  */
 @API(Experimental)
 public final class TestDiscoveryRequestBuilder {

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/TestExecutionListenerRegistry.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class TestExecutionListenerRegistry {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/LoggingListener.java
Patch:
@@ -29,7 +29,7 @@
  * for all events via a {@link BiConsumer} that consumes {@code Throwable}
  * and {@code Supplier<String>}.
  *
- * @since 5.0
+ * @since 1.0
  * @see #forJavaUtilLogging()
  * @see #forJavaUtilLogging(Level)
  * @see LoggingListener#LoggingListener(BiConsumer)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Mutable, internal implementation of the {@link TestExecutionSummary} API.
  *
- * @since 5.0
+ * @since 1.0
  */
 class MutableTestExecutionSummary implements TestExecutionSummary {
 

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -28,7 +28,7 @@
  * Simple {@link TestExecutionListener} that generates a
  * {@linkplain TestExecutionSummary summary} of the test execution.
  *
- * @since 5.0
+ * @since 1.0
  * @see #getSummary()
  */
 @API(Experimental)

File: junit-platform-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Summary of test plan execution.
  *
- * @since 5.0
+ * @since 1.0
  * @see SummaryGeneratingListener
  */
 @API(Experimental)

File: junit-platform-runner/src/main/java/org/junit/platform/runner/ExcludeEngines.java
Patch:
@@ -26,7 +26,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} to be excluded
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see IncludeEngines
  * @see org.junit.platform.launcher.EngineFilter#excludeEngines

File: junit-platform-runner/src/main/java/org/junit/platform/runner/ExcludeTags.java
Patch:
@@ -25,7 +25,7 @@
  * {@code @ExcludeTags} specifies the {@linkplain #value tags} to be excluded
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see IncludeTags
  * @see org.junit.platform.launcher.TagFilter#excludeTags

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeClassNamePattern.java
Patch:
@@ -29,7 +29,7 @@
  * <p>If the fully qualified name of a class matches against the pattern, the
  * class will be included in the test plan.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see org.junit.platform.engine.discovery.ClassFilter#includeClassNamePattern
  */

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeEngines.java
Patch:
@@ -26,7 +26,7 @@
  * {@link org.junit.platform.engine.TestEngine TestEngines} to be included
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see ExcludeEngines
  * @see org.junit.platform.launcher.EngineFilter#includeEngines

File: junit-platform-runner/src/main/java/org/junit/platform/runner/IncludeTags.java
Patch:
@@ -25,7 +25,7 @@
  * {@code @IncludeTags} specifies the {@linkplain #value tags} to be included
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see ExcludeTags
  * @see org.junit.platform.launcher.TagFilter#includeTags

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java
Patch:
@@ -62,7 +62,7 @@
  * Note, however, that any test class run with this runner must be {@code public}
  * in order to be picked up by IDEs and build tools.
  *
- * @since 5.0
+ * @since 1.0
  * @see SelectPackages
  * @see SelectClasses
  * @see IncludeClassNamePattern

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformRunnerListener.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.runner.notification.RunNotifier;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class JUnitPlatformRunnerListener implements TestExecutionListener {
 

File: junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.runner.manipulation.Filter;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 class JUnitPlatformTestTree {
 

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectClasses.java
Patch:
@@ -25,7 +25,7 @@
  * {@code @SelectClasses} specifies the classes to <em>select</em> when running
  * a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see SelectPackages
  * @see org.junit.platform.engine.discovery.ClassSelector

File: junit-platform-runner/src/main/java/org/junit/platform/runner/SelectPackages.java
Patch:
@@ -25,7 +25,7 @@
  * {@code @SelectPackages} specifies the names of packages to <em>select</em>
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
- * @since 5.0
+ * @since 1.0
  * @see JUnitPlatform
  * @see SelectClasses
  * @see org.junit.platform.engine.discovery.PackageSelector

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.platform.launcher.core.LauncherFactory;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 public class JUnitPlatformProvider extends AbstractProvider {
 

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/RunListenerAdapter.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.platform.launcher.TestIdentifier;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 final class RunListenerAdapter implements TestExecutionListener {
 

File: junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/TestPlanScannerFilter.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.platform.launcher.TestPlan;
 
 /**
- * @since 5.0
+ * @since 1.0
  */
 final class TestPlanScannerFilter implements ScannerFilter {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/JUnit4TestEngine.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.vintage.engine.execution.RunnerExecutor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @API(Experimental)
 public class JUnit4TestEngine implements TestEngine {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/JUnit4TestDescriptor.java
Patch:
@@ -37,7 +37,7 @@
 import org.junit.runner.Description;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @API(Internal)
 public class JUnit4TestDescriptor extends AbstractTestDescriptor {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerRequest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.runner.Runner;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class RunnerRequest extends Request {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/RunnerTestDescriptor.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.runner.Runner;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @API(Internal)
 public class RunnerTestDescriptor extends JUnit4TestDescriptor {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/ClassSelectorResolver.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.platform.engine.discovery.ClassSelector;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class ClassSelectorResolver extends DiscoverySelectorResolver<ClassSelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/ClasspathSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.platform.engine.discovery.ClasspathSelector;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class ClasspathSelectorResolver extends DiscoverySelectorResolver<ClasspathSelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/DefensiveAllDefaultPossibilitiesBuilder.java
Patch:
@@ -25,7 +25,7 @@
  * ignore certain classes that would otherwise be reported as errors or cause
  * infinite recursion.
  *
- * @since 5.0
+ * @since 4.12
  * @see DefensiveAnnotatedBuilder
  * @see DefensiveJUnit4Builder
  */

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.platform.engine.DiscoverySelector;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 abstract class DiscoverySelectorResolver<T extends DiscoverySelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.function.Predicate;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class IsPotentialJUnit4TestClass implements Predicate<Class<?>> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestMethod.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class IsPotentialJUnit4TestMethod implements Predicate<Method> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.platform.engine.support.filter.ExclusionReasonConsumingFilter;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @API(Internal)
 public class JUnit4DiscoveryRequestResolver {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/MethodSelectorResolver.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.runner.Description;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class MethodSelectorResolver extends DiscoverySelectorResolver<MethodSelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/OrFilter.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.runner.manipulation.Filter;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class OrFilter extends Filter {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/PackageNameSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.platform.engine.discovery.PackageSelector;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class PackageNameSelectorResolver extends DiscoverySelectorResolver<PackageSelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorAwareFilter.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 abstract class RunnerTestDescriptorAwareFilter extends Filter {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassCollector.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.stream.Stream;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class TestClassCollector {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassRequest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class TestClassRequest {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassRequestResolver.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class TestClassRequestResolver {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdFilter.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdFilter extends RunnerTestDescriptorAwareFilter {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdReader.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.runner.Description;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdReader implements Function<Description, Serializable> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.platform.engine.discovery.UniqueIdSelector;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdSelectorResolver extends DiscoverySelectorResolver<UniqueIdSelector> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdStringifier.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.function.Function;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdStringifier implements Function<Serializable, String> {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunListenerAdapter.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class RunListenerAdapter extends RunListener {
 

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/RunnerExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @API(Internal)
 public class RunnerExecutor {

File: junit-vintage-engine/src/main/java/org/junit/vintage/engine/execution/TestRun.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class TestRun {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -69,7 +69,7 @@
 import org.junit.vintage.engine.samples.junit4.TestCaseRunWithJUnitPlatformRunner;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class JUnit4TestEngineDiscoveryTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4TestEngineExecutionTests.java
Patch:
@@ -44,7 +44,7 @@
 import org.junit.vintage.engine.samples.junit4.*;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class JUnit4TestEngineExecutionTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4TestEngineTestSuite.java
Patch:
@@ -29,7 +29,7 @@
  * -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
  * </pre>
  *
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.vintage.engine")

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/JUnit4UniqueIdBuilder.java
Patch:
@@ -18,7 +18,7 @@
  *
  * Used to decouple tests from concrete unique ID strings.
  *
- * @since 5.0
+ * @since 4.12
  */
 public class JUnit4UniqueIdBuilder {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/RecordCollectingLogger.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.logging.Logger;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class RecordCollectingLogger extends Logger {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/JUnit4DiscoveryRequestResolverTests.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.vintage.engine.RecordCollectingLogger;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class JUnit4DiscoveryRequestResolverTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/OrFilterTests.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.runner.manipulation.Filter;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class OrFilterTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/TestClassRequestResolverTests.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.vintage.engine.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class TestClassRequestResolverTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdReaderTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.vintage.engine.RecordCollectingLogger;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdReaderTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.vintage.engine.RecordCollectingLogger;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdSelectorResolverTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdStringifierTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class UniqueIdStringifierTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/execution/RunListenerAdapterTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.vintage.engine.samples.junit4.PlainJUnit4TestCaseWithSingleTestWhichFails;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 class RunListenerAdapterTests {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/PlainOldJavaClassWithoutAnyTest.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class PlainOldJavaClassWithoutAnyTest {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit3/JUnit3SuiteWithSingleTestCaseWithSingleTestWhichFails.java
Patch:
@@ -14,7 +14,7 @@
 import junit.framework.TestSuite;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class JUnit3SuiteWithSingleTestCaseWithSingleTestWhichFails extends TestCase {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit3/PlainJUnit3TestCaseWithSingleTestWhichFails.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Assert;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class PlainJUnit3TestCaseWithSingleTestWhichFails extends TestCase {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/Categories.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples.junit4;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class Categories {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/EnclosedJUnit4TestCase.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Enclosed.class)
 public class EnclosedJUnit4TestCase {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/ExceptionThrowingRunner.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.runner.notification.RunNotifier;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class ExceptionThrowingRunner extends Runner {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/IgnoredJUnit4TestCase.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @Ignore("complete class is ignored")
 public class IgnoredJUnit4TestCase {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteOfSuiteWithIgnoredJUnit4TestCase.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit4SuiteWithIgnoredJUnit4TestCase.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteOfSuiteWithJUnit4TestCaseWithAssumptionFailureInBeforeClass.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit4SuiteWithJUnit4TestCaseWithAssumptionFailureInBeforeClass.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteOfSuiteWithJUnit4TestCaseWithErrorInBeforeClass.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit4SuiteWithJUnit4TestCaseWithErrorInBeforeClass.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithExceptionThrowingRunner.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.vintage.engine.samples.junit4.ExceptionThrowingRunner.ChildCount;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(ExceptionThrowingRunner.class)
 @ChildCount(1)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithIgnoredJUnit4TestCase.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(IgnoredJUnit4TestCase.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithJUnit3SuiteWithSingleTestCase.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.vintage.engine.samples.junit3.JUnit3SuiteWithSingleTestCaseWithSingleTestWhichFails;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit3SuiteWithSingleTestCaseWithSingleTestWhichFails.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithJUnit4TestCaseWithAssumptionFailureInBeforeClass.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit4TestCaseWithAssumptionFailureInBeforeClass.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithJUnit4TestCaseWithErrorInBeforeClass.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(JUnit4TestCaseWithErrorInBeforeClass.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithPlainJUnit4TestCaseWithSingleTestWhichIsIgnored.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses(PlainJUnit4TestCaseWithSingleTestWhichIsIgnored.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithTwoTestCases.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Suite.class)
 @SuiteClasses({ PlainJUnit4TestCaseWithTwoTestMethods.class, PlainJUnit4TestCaseWithSingleTestWhichFails.class })

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithAssumptionFailureInBeforeClass.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class JUnit4TestCaseWithAssumptionFailureInBeforeClass {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithErrorInAfterClass.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @FixMethodOrder(NAME_ASCENDING)
 public class JUnit4TestCaseWithErrorInAfterClass {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithErrorInBeforeClass.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class JUnit4TestCaseWithErrorInBeforeClass {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithExceptionThrowingRunner.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.vintage.engine.samples.junit4.ExceptionThrowingRunner.ChildCount;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(ExceptionThrowingRunner.class)
 @ChildCount(0)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithOverloadedMethod.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Theories.class)
 public class JUnit4TestCaseWithOverloadedMethod {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/JUnit4TestCaseWithRunnerWithCustomUniqueIds.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(RunnerWithCustomUniqueIds.class)
 public class JUnit4TestCaseWithRunnerWithCustomUniqueIds {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/MalformedJUnit4TestCase.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class MalformedJUnit4TestCase {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/ParameterizedTestCase.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.runners.Parameterized.Parameters;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Parameterized.class)
 public class ParameterizedTestCase {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithFiveTestMethods.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.vintage.engine.samples.junit4.Categories.SkippedWithReason;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @FixMethodOrder(NAME_ASCENDING)
 @Category(Plain.class)

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithSingleInheritedTestWhichFails.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.samples.junit4;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class PlainJUnit4TestCaseWithSingleInheritedTestWhichFails extends PlainJUnit4TestCaseWithSingleTestWhichFails {
 }

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithSingleTestWhichFails.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class PlainJUnit4TestCaseWithSingleTestWhichFails {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithSingleTestWhichIsIgnored.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class PlainJUnit4TestCaseWithSingleTestWhichIsIgnored {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/PlainJUnit4TestCaseWithTwoTestMethods.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.Test;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @FixMethodOrder(NAME_ASCENDING)
 public class PlainJUnit4TestCaseWithTwoTestMethods {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/RunnerWithCustomUniqueIds.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.runners.model.InitializationError;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 public class RunnerWithCustomUniqueIds extends BlockJUnit4ClassRunner {
 

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/SingleFailingTheoryTestCase.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(Theories.class)
 public class SingleFailingTheoryTestCase {

File: junit-vintage-engine/src/test/java/org/junit/vintage/engine/samples/junit4/TestCaseRunWithJUnitPlatformRunner.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * @since 5.0
+ * @since 4.12
  */
 @RunWith(JUnitPlatform.class)
 @SelectClasses(PlainJUnit4TestCaseWithSingleTestWhichFails.class)

File: documentation/src/test/java/example/JUnit4ClassDemo.java
Patch:
@@ -14,8 +14,8 @@
 
 import static org.junit.jupiter.api.Assertions.fail;
 
-import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -11,14 +11,14 @@
 package example;
 
 //tag::user_guide[]
-import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.SelectPackages;
+import org.junit.platform.runner.JUnitPlatform;
+import org.junit.platform.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
 @SelectPackages("example")
 //end::user_guide[]
-@org.junit.gen5.junit4.runner.ExcludeTags("exclude")
+@org.junit.platform.runner.ExcludeTags("exclude")
 //tag::user_guide[]
 public class JUnit4SuiteDemo {
 }

File: junit-commons/src/main/java/org/junit/platform/commons/JUnitException.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons;
+package org.junit.platform.commons;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Base class for all {@link RuntimeException RuntimeExceptions} thrown

File: junit-commons/src/main/java/org/junit/platform/commons/meta/API.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.meta;
+package org.junit.platform.commons.meta;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: junit-commons/src/main/java/org/junit/platform/commons/meta/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Use at your own risk!
  */
 
-package org.junit.gen5.commons.meta;
+package org.junit.platform.commons.meta;

File: junit-commons/src/main/java/org/junit/platform/commons/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Use at your own risk!
  */
 
-package org.junit.gen5.commons;
+package org.junit.platform.commons;

File: junit-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.File;
 import java.io.IOException;
@@ -24,7 +24,7 @@
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * <h3>DISCLAIMER</h3>

File: junit-commons/src/main/java/org/junit/platform/commons/util/CollectionUtils.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.Collection;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with {@link Collection Collections}.

File: junit-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java
Patch:
@@ -8,14 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with exceptions.

File: junit-commons/src/main/java/org/junit/platform/commons/util/FunctionUtils.java
Patch:
@@ -8,14 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with {@link Function Functions},

File: junit-commons/src/main/java/org/junit/platform/commons/util/Preconditions.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Supplier;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for asserting preconditions for method and

File: junit-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.File;
 import java.lang.reflect.AccessibleObject;
@@ -33,7 +33,7 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with the Java reflection APIs.

File: junit-commons/src/main/java/org/junit/platform/commons/util/StringUtils.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.joining;
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.function.Function;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Collection of utilities for working with {@link String Strings},

File: junit-commons/src/main/java/org/junit/platform/commons/util/ToStringBuilder.java
Patch:
@@ -8,17 +8,17 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static java.util.stream.Collectors.joining;
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Simple builder for generating strings in custom implementations of

File: junit-commons/src/main/java/org/junit/platform/commons/util/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Use at your own risk!
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;

File: junit-console/src/main/java/org/junit/platform/console/options/AvailableOptions.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.options;
+package org.junit.platform.console.options;
 
 import static java.util.Arrays.asList;
 

File: junit-console/src/main/java/org/junit/platform/console/options/CommandLineOptions.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.options;
+package org.junit.platform.console.options;
 
 import static java.util.Collections.emptyList;
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit-console/src/main/java/org/junit/platform/console/options/CommandLineOptionsParser.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.options;
+package org.junit.platform.console.options;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.Writer;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit-console/src/main/java/org/junit/platform/console/options/package-info.java
Patch:
@@ -2,4 +2,4 @@
  * Configuration options for JUnit's console runner.
  */
 
-package org.junit.gen5.console.options;
+package org.junit.platform.console.options;

File: junit-console/src/main/java/org/junit/platform/console/package-info.java
Patch:
@@ -2,4 +2,4 @@
  * Support for running JUnit from the console.
  */
 
-package org.junit.gen5.console;
+package org.junit.platform.console;

File: junit-console/src/main/java/org/junit/platform/console/tasks/ClasspathEntriesParser.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.tasks;
+package org.junit.platform.console.tasks;
 
 import static java.util.stream.Collectors.toCollection;
 
@@ -21,7 +21,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Stream;
 
-import org.junit.gen5.commons.JUnitException;
+import org.junit.platform.commons.JUnitException;
 
 /**
  * @since 5.0

File: junit-console/src/main/java/org/junit/platform/console/tasks/ConsoleTask.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.tasks;
+package org.junit.platform.console.tasks;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.PrintWriter;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A task to be executed from the console,

File: junit-console/src/main/java/org/junit/platform/console/tasks/ConsoleTaskExecutor.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.tasks;
+package org.junit.platform.console.tasks;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.util.function.Consumer;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit-console/src/main/java/org/junit/platform/console/tasks/CustomContextClassLoaderExecutor.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.console.tasks;
+package org.junit.platform.console.tasks;
 
 import java.util.Optional;
 import java.util.concurrent.Callable;

File: junit-console/src/main/java/org/junit/platform/console/tasks/package-info.java
Patch:
@@ -2,4 +2,4 @@
  * Internal execution tasks for JUnit's console runner.
  */
 
-package org.junit.gen5.console.tasks;
+package org.junit.platform.console.tasks;

File: junit-engine-api/src/main/java/org/junit/platform/engine/CompositeFilter.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
 import static java.lang.String.format;
 import static java.util.stream.Collectors.joining;
-import static org.junit.gen5.engine.FilterResult.included;
+import static org.junit.platform.engine.FilterResult.included;
 
 import java.util.Collection;
 

File: junit-engine-api/src/main/java/org/junit/platform/engine/ConfigurationParameters.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Configuration parameters that {@link TestEngine TestEngines} may use to

File: junit-engine-api/src/main/java/org/junit/platform/engine/DiscoveryFilter.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A {@link DiscoveryFilter} is applied during test discovery to determine if

File: junit-engine-api/src/main/java/org/junit/platform/engine/DiscoverySelector.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A selector defines what a {@link TestEngine} can use to discover tests

File: junit-engine-api/src/main/java/org/junit/platform/engine/EngineDiscoveryRequest.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.util.List;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Provides {@link TestEngine TestEngines} access to the information necessary

File: junit-engine-api/src/main/java/org/junit/platform/engine/TestEngine.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A {@code TestEngine} facilitates <em>discovery</em> and <em>execution</em> of

File: junit-engine-api/src/main/java/org/junit/platform/engine/TestSource.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.io.Serializable;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Representation of the source of a test or container used to navigate to

File: junit-engine-api/src/main/java/org/junit/platform/engine/package-info.java
Patch:
@@ -2,4 +2,4 @@
  * Public API for JUnit test engines.
  */
 
-package org.junit.gen5.engine;
+package org.junit.platform.engine;

File: junit-engine-api/src/main/java/org/junit/platform/engine/reporting/package-info.java
Patch:
@@ -3,4 +3,4 @@
  * listeners.
  */
 
-package org.junit.gen5.engine.reporting;
+package org.junit.platform.engine.reporting;

File: junit-engine-api/src/main/java/org/junit/platform/engine/support/hierarchical/BlacklistedExceptions.java
Patch:
@@ -8,12 +8,12 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.hierarchical;
+package org.junit.platform.engine.support.hierarchical;
 
 import java.util.Collections;
 import java.util.List;
 
-import org.junit.gen5.commons.util.ExceptionUtils;
+import org.junit.platform.commons.util.ExceptionUtils;
 
 /**
  * Internal utilities for working with <em>blacklisted</em> exceptions.

File: junit-engine-api/src/main/java/org/junit/platform/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.hierarchical;
+package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Marker interface for an execution context used by a concrete implementation

File: junit-engine-api/src/main/java/org/junit/platform/engine/support/hierarchical/Node.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.hierarchical;
+package org.junit.platform.engine.support.hierarchical;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A <em>node</em> within the execution hierarchy.

File: junit-engine-api/src/test/java/org/junit/platform/engine/test/TestDescriptorStub.java
Patch:
@@ -8,10 +8,10 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.test;
+package org.junit.platform.engine.test;
 
-import org.junit.gen5.engine.UniqueId;
-import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
+import org.junit.platform.engine.UniqueId;
+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit-launcher/src/main/java/org/junit/platform/launcher/core/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -8,16 +8,16 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher.core;
+package org.junit.platform.launcher.core;
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
 
 import java.util.ServiceLoader;
 import java.util.logging.Logger;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.TestEngine;
+import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.engine.TestEngine;
 
 /**
  * @since 5.0

File: junit-launcher/src/main/java/org/junit/platform/launcher/listeners/MutableTestExecutionSummary.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher.listeners;
+package org.junit.platform.launcher.listeners;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -17,8 +17,8 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.stream.Collectors;
 
-import org.junit.gen5.launcher.TestIdentifier;
-import org.junit.gen5.launcher.TestPlan;
+import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.launcher.TestPlan;
 
 /**
  * Mutable, internal implementation of the {@link TestExecutionSummary} API.

File: junit-launcher/src/main/java/org/junit/platform/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -8,13 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher.listeners;
+package org.junit.platform.launcher.listeners;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.io.PrintWriter;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Summary of test plan execution.

File: junit-launcher/src/main/java/org/junit/platform/launcher/package-info.java
Patch:
@@ -4,4 +4,4 @@
  * <p>This API is typically used by IDEs and build tools.
  */
 
-package org.junit.gen5.launcher;
+package org.junit.platform.launcher;

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/ClassSelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.discovery;
 
-import org.junit.gen5.engine.discovery.ClassSelector;
+import org.junit.platform.engine.discovery.ClassSelector;
 
 /**
  * @since 5.0

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/ClasspathSelectorResolver.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.vintage.engine.discovery;
 
-import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
+import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 
-import org.junit.gen5.engine.discovery.ClasspathSelector;
+import org.junit.platform.engine.discovery.ClasspathSelector;
 
 /**
  * @since 5.0

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/DefensiveAllDefaultPossibilitiesBuilder.java
Patch:
@@ -13,10 +13,10 @@
 import java.lang.reflect.Method;
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.internal.builders.AllDefaultPossibilitiesBuilder;
 import org.junit.internal.builders.AnnotatedBuilder;
 import org.junit.internal.builders.JUnit4Builder;
+import org.junit.platform.commons.util.ReflectionUtils;
 import org.junit.runner.Runner;
 import org.junit.runners.model.RunnerBuilder;
 
@@ -63,7 +63,7 @@ public DefensiveAnnotatedBuilder(RunnerBuilder suiteBuilder) {
 		@Override
 		public Runner buildRunner(Class<? extends Runner> runnerClass, Class<?> testClass) throws Exception {
 			// Referenced by name because it might not be available at runtime.
-			if ("org.junit.gen5.junit4.runner.JUnitPlatform".equals(runnerClass.getName())) {
+			if ("org.junit.platform.runner.JUnitPlatform".equals(runnerClass.getName())) {
 				return null;
 			}
 			return super.buildRunner(runnerClass, testClass);

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/DiscoverySelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine.discovery;
 
-import org.junit.gen5.engine.DiscoverySelector;
+import org.junit.platform.engine.DiscoverySelector;
 
 /**
  * @since 5.0

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.vintage.engine.discovery;
 
-import static org.junit.gen5.commons.util.ReflectionUtils.isAbstract;
-import static org.junit.gen5.commons.util.ReflectionUtils.isPublic;
+import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;
+import static org.junit.platform.commons.util.ReflectionUtils.isPublic;
 
 import java.util.function.Predicate;
 

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/MethodSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.engine.discovery.MethodSelector;
+import org.junit.platform.engine.discovery.MethodSelector;
 import org.junit.runner.Description;
 
 /**

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/OrFilter.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.Collection;
 
-import org.junit.gen5.commons.util.Preconditions;
+import org.junit.platform.commons.util.Preconditions;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/PackageNameSelectorResolver.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.vintage.engine.discovery;
 
-import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInPackage;
+import static org.junit.platform.commons.util.ReflectionUtils.findAllClassesInPackage;
 
-import org.junit.gen5.engine.discovery.PackageSelector;
+import org.junit.platform.engine.discovery.PackageSelector;
 
 /**
  * @since 5.0

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassCollector.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Stream.concat;
-import static org.junit.gen5.commons.util.FunctionUtils.where;
+import static org.junit.platform.commons.util.FunctionUtils.where;
 
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/TestClassRequestResolver.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.function.IntFunction;
 import java.util.logging.Logger;
 
-import org.junit.gen5.engine.TestDescriptor;
+import org.junit.platform.engine.TestDescriptor;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdFilter.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.UniqueId;
+import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.engine.UniqueId;
 import org.junit.runner.Description;
 import org.junit.vintage.engine.descriptor.JUnit4TestDescriptor;
 import org.junit.vintage.engine.descriptor.RunnerTestDescriptor;

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdReader.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.vintage.engine.discovery;
 
 import static java.lang.String.format;
-import static org.junit.gen5.commons.util.ReflectionUtils.readFieldValue;
+import static org.junit.platform.commons.util.ReflectionUtils.readFieldValue;
 
 import java.io.Serializable;
 import java.util.Optional;

File: junit4-engine/src/main/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -17,9 +17,9 @@
 import java.util.Optional;
 import java.util.logging.Logger;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.UniqueId;
-import org.junit.gen5.engine.discovery.UniqueIdSelector;
+import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.engine.UniqueId;
+import org.junit.platform.engine.discovery.UniqueIdSelector;
 
 /**
  * @since 5.0

File: junit4-engine/src/main/java/org/junit/vintage/engine/execution/RunListenerAdapter.java
Patch:
@@ -14,9 +14,9 @@
 import java.util.function.Function;
 
 import org.junit.Ignore;
-import org.junit.gen5.engine.EngineExecutionListener;
-import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.TestExecutionResult;
+import org.junit.platform.engine.EngineExecutionListener;
+import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.engine.TestExecutionResult;
 import org.junit.runner.Description;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;

File: junit4-engine/src/test/java/org/junit/vintage/engine/JUnit4UniqueIdBuilder.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.vintage.engine;
 
-import org.junit.gen5.engine.UniqueId;
+import org.junit.platform.engine.UniqueId;
 import org.junit.vintage.engine.descriptor.JUnit4TestDescriptor;
 
 /**

File: junit4-engine/src/test/java/org/junit/vintage/engine/discovery/OrFilterTests.java
Patch:
@@ -22,8 +22,8 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.commons.util.PreconditionViolationException;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 

File: junit4-engine/src/test/java/org/junit/vintage/engine/discovery/TestClassRequestResolverTests.java
Patch:
@@ -23,10 +23,10 @@
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
-import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.internal.builders.IgnoredClassRunner;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 import org.junit.vintage.engine.JUnit4UniqueIdBuilder;
 import org.junit.vintage.engine.RecordCollectingLogger;
 import org.junit.vintage.engine.samples.junit4.IgnoredJUnit4TestCase;

File: junit4-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdReaderTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.vintage.engine.discovery;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.runner.Description.createTestDescription;
 
 import java.io.Serializable;

File: junit4-engine/src/test/java/org/junit/vintage/engine/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -11,17 +11,17 @@
 package org.junit.vintage.engine.discovery;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.vintage.engine.JUnit4UniqueIdBuilder.engineId;
 
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
-import org.junit.gen5.engine.UniqueId;
-import org.junit.gen5.engine.discovery.UniqueIdSelector;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.engine.UniqueId;
+import org.junit.platform.engine.discovery.UniqueIdSelector;
 import org.junit.vintage.engine.JUnit4UniqueIdBuilder;
 import org.junit.vintage.engine.RecordCollectingLogger;
 

File: junit4-engine/src/test/java/org/junit/vintage/engine/execution/RunListenerAdapterTests.java
Patch:
@@ -11,18 +11,18 @@
 package org.junit.vintage.engine.execution;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement;
 import static org.junit.runner.Description.createTestDescription;
 import static org.junit.vintage.engine.JUnit4UniqueIdBuilder.engineId;
 
 import java.util.Optional;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
-import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.engine.support.descriptor.EngineDescriptor;
 import org.junit.runner.Description;
 import org.junit.runners.BlockJUnit4ClassRunner;
 import org.junit.vintage.engine.RecordCollectingLogger;

File: junit4-engine/src/test/java/org/junit/vintage/engine/samples/junit4/TestCaseRunWithJUnitPlatformRunner.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.vintage.engine.samples.junit4;
 
-import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.SelectClasses;
+import org.junit.platform.runner.JUnitPlatform;
+import org.junit.platform.runner.SelectClasses;
 import org.junit.runner.RunWith;
 
 /**

File: junit4-runner/src/main/java/org/junit/platform/runner/JUnitPlatformTestTree.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.junit4.runner;
+package org.junit.platform.runner;
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toSet;
@@ -20,8 +20,8 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
-import org.junit.gen5.launcher.TestIdentifier;
-import org.junit.gen5.launcher.TestPlan;
+import org.junit.platform.launcher.TestIdentifier;
+import org.junit.platform.launcher.TestPlan;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 

File: junit4-runner/src/main/java/org/junit/platform/runner/package-info.java
Patch:
@@ -3,4 +3,4 @@
  * JUnit Platform in a JUnit 4 environment.
  */
 
-package org.junit.gen5.junit4.runner;
+package org.junit.platform.runner;

File: junit5-api/src/main/java/org/junit/jupiter/api/AfterAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Usage.Maintained;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @AfterAll} is used to signal that the annotated method should be

File: junit5-api/src/main/java/org/junit/jupiter/api/AfterEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Usage.Stable;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @AfterEach} is used to signal that the annotated method should be

File: junit5-api/src/main/java/org/junit/jupiter/api/BeforeAll.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Usage.Maintained;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @BeforeAll} is used to signal that the annotated method should be

File: junit5-api/src/main/java/org/junit/jupiter/api/BeforeEach.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Usage.Stable;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @BeforeEach} is used to signal that the annotated method should be

File: junit5-api/src/main/java/org/junit/jupiter/api/Disabled.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Usage.Stable;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Disabled} is used to signal that the annotated test class or

File: junit5-api/src/main/java/org/junit/jupiter/api/DisplayName.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @DisplayName} is used to declare a custom display name for the

File: junit5-api/src/main/java/org/junit/jupiter/api/Executable.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Usage.Stable;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code Executable} is a functional interface that can be used to

File: junit5-api/src/main/java/org/junit/jupiter/api/Nested.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Nested} is used to signal that the annotated class is a nested,

File: junit5-api/src/main/java/org/junit/jupiter/api/Tag.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Usage.Maintained;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Tag} is a {@linkplain Repeatable repeatable} annotation that is

File: junit5-api/src/main/java/org/junit/jupiter/api/Tags.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Maintained;
+import static org.junit.platform.commons.meta.API.Usage.Maintained;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Tags} is a container for one or more {@code @Tag} declarations.

File: junit5-api/src/main/java/org/junit/jupiter/api/Test.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Stable;
+import static org.junit.platform.commons.meta.API.Usage.Stable;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Test} is used to signal that the annotated method is a

File: junit5-api/src/main/java/org/junit/jupiter/api/TestFactory.java
Patch:
@@ -10,15 +10,15 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @TestFactory} is used to signal that the annotated method is a

File: junit5-api/src/main/java/org/junit/jupiter/api/TestInfo.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.reflect.Method;
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code TestInfo} is used to inject information about the current test or

File: junit5-api/src/main/java/org/junit/jupiter/api/TestReporter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.util.Collections;
 import java.util.Map;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Parameters of type {@code TestReporter} can be injected into methods of

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/AfterAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code AfterAllCallback} defines the API for {@link Extension Extensions}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/AfterEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code AfterEachCallback} defines the API for {@link Extension Extensions}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code AfterTestExecutionCallback} defines the API for {@link Extension

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/BeforeAllCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code BeforeAllCallback} defines the API for {@link Extension Extensions}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/BeforeEachCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code BeforeEachCallback} defines the API for {@link Extension Extensions}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code BeforeTestExecutionCallback} defines the API for {@link Extension

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.commons.util.ToStringBuilder;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.ToStringBuilder;
 
 /**
  * The result of evaluating a {@link ContainerExecutionCondition} or

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ContainerExecutionCondition.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ContainerExecutionCondition} defines the {@link Extension} API for

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ContainerExtensionContext.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ContainerExtensionContext} encapsulates the <em>context</em> in which

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ExtendWith.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -20,7 +20,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @ExtendWith} is a {@linkplain Repeatable repeatable} annotation

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/Extension.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Marker interface for all extensions.

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ExtensionConfigurationException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.JUnitException;
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.JUnitException;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if an error is encountered regarding the configuration of an

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/Extensions.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code @Extensions} is a container for one or more {@code @ExtendWith}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ParameterContext.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.reflect.Executable;
 import java.lang.reflect.Parameter;
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * A parameter and its context to support parameter resolution.

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolutionException.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.JUnitException;
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.JUnitException;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Thrown if an error is encountered in the configuration or execution of a

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/ParameterResolver.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code ParameterResolver} defines the API for {@link Extension Extensions}

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionCondition.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code TestExecutionCondition} defines the {@link Extension} API for

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code TestExecutionExceptionHandler} defines the API for {@link Extension

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/TestExtensionContext.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code TestExtensionContext} encapsulates the <em>context</em> in which

File: junit5-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePostProcessor.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.api.extension;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.platform.commons.meta.API.Usage.Experimental;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * {@code TestInstancePostProcessor} defines the API for {@link Extension

File: junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassBasedContainerExtensionContext.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.engine.EngineExecutionListener;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodBasedTestExtensionContext.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.engine.descriptor;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.engine.EngineExecutionListener;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsNestedTestClass.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
-import static org.junit.gen5.commons.util.AnnotationUtils.isAnnotated;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;
 
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.meta.API;
 import org.junit.jupiter.api.Nested;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Test if a class is a JUnit 5 {@link Nested @Nested} test class.

File: junit5-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsScannableTestClass.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.commons.util.ReflectionUtils;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
  * Test if a class is a JUnit 5 test class which should be included in package and classpath scanning.

File: junit5-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestClassWithTests.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.discovery.predicates;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.lang.reflect.Method;
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.commons.util.ReflectionUtils;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
  * Test if a class is a JUnit 5 test class containing executable tests,

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/AfterEachMethodAdapter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.gen5.commons.meta.API;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Functional interface for registering an {@link AfterEach @AfterEach} method

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/BeforeEachMethodAdapter.java
Patch:
@@ -10,12 +10,12 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.gen5.commons.meta.API;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.Extension;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.platform.commons.meta.API;
 
 /**
  * Functional interface for registering a {@link BeforeEach @BeforeEach} method

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/ConditionEvaluationException.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import org.junit.gen5.commons.JUnitException;
 import org.junit.jupiter.api.extension.ContainerExecutionCondition;
 import org.junit.jupiter.api.extension.TestExecutionCondition;
+import org.junit.platform.commons.JUnitException;
 
 /**
  * Thrown if an error is encountered while evaluating a {@link ContainerExecutionCondition}

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/DefaultParameterContext.java
Patch:
@@ -13,9 +13,9 @@
 import java.lang.reflect.Parameter;
 import java.util.Optional;
 
-import org.junit.gen5.commons.util.Preconditions;
-import org.junit.gen5.commons.util.ToStringBuilder;
 import org.junit.jupiter.api.extension.ParameterContext;
+import org.junit.platform.commons.util.Preconditions;
+import org.junit.platform.commons.util.ToStringBuilder;
 
 class DefaultParameterContext implements ParameterContext {
 

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/ExtensionValuesStore.java
Patch:
@@ -10,16 +10,16 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Function;
 
-import org.junit.gen5.commons.meta.API;
-import org.junit.gen5.commons.util.Preconditions;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
+import org.junit.platform.commons.meta.API;
+import org.junit.platform.commons.util.Preconditions;
 
 /**
  * {@code ExtensionValuesStore} is used inside implementations of

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/NamespaceAwareStore.java
Patch:
@@ -10,13 +10,13 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
 import java.util.function.Function;
 
-import org.junit.gen5.commons.meta.API;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 import org.junit.jupiter.api.extension.ExtensionContext.Store;
+import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/jupiter/engine/execution/TestInstanceProvider.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.platform.commons.meta.API.Usage.Internal;
 
-import org.junit.gen5.commons.meta.API;
+import org.junit.platform.commons.meta.API;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java
Patch:
@@ -10,18 +10,18 @@
 
 package org.junit.jupiter.engine.extension;
 
-import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 
 import java.lang.reflect.AnnotatedElement;
 import java.util.Optional;
 
-import org.junit.gen5.commons.util.StringUtils;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;
 import org.junit.jupiter.api.extension.ContainerExecutionCondition;
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.api.extension.TestExecutionCondition;
 import org.junit.jupiter.api.extension.TestExtensionContext;
+import org.junit.platform.commons.util.StringUtils;
 
 /**
  * Composite {@link ContainerExecutionCondition} and {@link TestExecutionCondition}

File: junit5-engine/src/main/java/org/junit/jupiter/engine/extension/RegisteredExtension.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.extension;
 
-import org.junit.gen5.commons.util.Preconditions;
-import org.junit.gen5.commons.util.ToStringBuilder;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.Extension;
+import org.junit.platform.commons.util.Preconditions;
+import org.junit.platform.commons.util.ToStringBuilder;
 
 /**
  * Represents an {@link Extension} registered in an {@link ExtensionRegistry}.

File: junit5-engine/src/main/java/org/junit/jupiter/engine/extension/TestInfoParameterResolver.java
Patch:
@@ -14,11 +14,11 @@
 import java.util.Optional;
 import java.util.Set;
 
-import org.junit.gen5.commons.util.ToStringBuilder;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolver;
+import org.junit.platform.commons.util.ToStringBuilder;
 
 /**
  * {@link ParameterResolver} that resolves the {@link TestInfo} for

File: junit5-engine/src/test/java/org/junit/jupiter/engine/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.engine.test.event.ExecutionEventRecorder;
 
 /**
  * Integration tests that verify support for {@link BeforeAll} and {@link AfterAll}

File: junit5-engine/src/test/java/org/junit/jupiter/engine/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.platform.engine.test.event.ExecutionEventRecorder;
 
 /**
  * Integration tests that verify support for {@link BeforeEach} and {@link AfterEach}

File: junit5-engine/src/test/java/org/junit/jupiter/engine/FullLogging.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine;
 
-import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -22,11 +22,11 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
 import org.junit.jupiter.api.extension.ContainerExtensionContext;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.platform.commons.util.PreconditionViolationException;
 
 /**
  * Class-level extension that turns on full logging (i.e., {@link Level#ALL})

File: junit5-engine/src/test/java/org/junit/jupiter/engine/descriptor/JUnit5TestDescriptorTests.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.junit.gen5.engine.TestTag;
-import org.junit.gen5.engine.UniqueId;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.engine.descriptor.JUnit5TestDescriptorTests.StaticTestCase.StaticTestCaseLevel2;
+import org.junit.platform.engine.TestTag;
+import org.junit.platform.engine.UniqueId;
 
 /**
  * Unit tests for {@link ClassTestDescriptor}, {@link NestedClassTestDescriptor},

File: junit5-engine/src/test/java/org/junit/jupiter/engine/descriptor/TestDescriptorBuilder.java
Patch:
@@ -14,8 +14,8 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.UniqueId;
+import org.junit.platform.engine.TestDescriptor;
+import org.junit.platform.engine.UniqueId;
 
 /**
  * @since 5.0

File: junit5-engine/src/test/java/org/junit/jupiter/engine/discovery/JUnit5UniqueIdBuilder.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.jupiter.engine.discovery;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.UniqueId;
 import org.junit.jupiter.engine.JUnit5TestEngine;
+import org.junit.platform.commons.util.ReflectionUtils;
+import org.junit.platform.engine.UniqueId;
 
 /**
  * Test data builder for unique IDs for JUnit5TestEngine.

File: junit5-engine/src/test/java/org/junit/jupiter/engine/execution/ExecutableInvokerTests.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolutionException;
 import org.junit.jupiter.api.extension.ParameterResolver;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
  * Unit tests for {@link ExecutableInvoker}.

File: junit5-engine/src/test/java/org/junit/jupiter/engine/execution/JUnit5EngineExecutionContextTests.java
Patch:
@@ -13,12 +13,12 @@
 import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.mockito.Mockito.mock;
 
-import org.junit.gen5.engine.ConfigurationParameters;
-import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.engine.descriptor.ClassBasedContainerExtensionContext;
 import org.junit.jupiter.engine.extension.ExtensionRegistry;
+import org.junit.platform.engine.ConfigurationParameters;
+import org.junit.platform.engine.EngineExecutionListener;
 
 /**
  * Microtests for {@link JUnit5EngineExecutionContext}.

File: junit5-engine/src/test/java/org/junit/jupiter/engine/execution/injection/sample/CustomAnnotationParameterResolver.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.jupiter.engine.execution.injection.sample;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
 import org.junit.jupiter.api.extension.ParameterResolver;
+import org.junit.platform.commons.util.ReflectionUtils;
 
 /**
  * @since 5.0

File: junit5-engine/src/test/java/org/junit/jupiter/engine/extension/TestReporterParameterResolverTests.java
Patch:
@@ -18,11 +18,11 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestReporter;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ParameterContext;
+import org.junit.platform.commons.util.ReflectionUtils;
 import org.mockito.Mockito;
 
 /**

File: junit5-engine/src/test/java/org/junit/jupiter/engine/extension/sub/SystemPropertyCondition.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.jupiter.engine.extension.sub;
 
-import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: platform-tests/src/test/java/org/junit/platform/commons/util/CollectionUtilsTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptySet;

File: platform-tests/src/test/java/org/junit/platform/commons/util/FunctionUtilsTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static java.util.function.Predicate.isEqual;
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: platform-tests/src/test/java/org/junit/platform/commons/util/PreconditionsTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util;
+package org.junit.platform.commons.util;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertSame;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Maven Surefire plug-in for JUnit 5.
+ * Maven Surefire provider for the JUnit Platform.
  */
 
 package org.junit.gen5.surefire;

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -193,7 +193,7 @@ public void methodOfInnerClassByUniqueId() {
 
 	@Test
 	public void resolvingUniqueIdWithUnknownSegmentTypeResolvesNothing() {
-		UniqueIdSelector selector = UniqueIdSelector.selectUniqueId(engineId().append("poops", "machine").toString());
+		UniqueIdSelector selector = UniqueIdSelector.selectUniqueId(engineId().append("bogus", "enigma").toString());
 		EngineDiscoveryRequest request = request().selectors(selector).build();
 
 		resolver.resolveSelectors(request, engineDescriptor);

File: platform-tests/src/test/java/org/junit/gen5/AllJUnitPlatformTestsTestSuite.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.gen5;
 
-import org.junit.gen5.engine.junit5.JUnit5TestEngine;
 import org.junit.gen5.junit4.runner.IncludeClassNamePattern;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
@@ -38,12 +37,12 @@
 	"org.junit.gen5.api",
 	"org.junit.gen5.commons",
 	"org.junit.gen5.console",
-	"org.junit.gen5.engine", // This actually picks up test classes in other modules within the IDE!
+	"org.junit.gen5.engine", // This actually picks up test classes in other modules within Eclipse!
 	"org.junit.gen5.junit4.runner",
 	"org.junit.gen5.launcher"
 })
 //@formatter:on
 @IncludeClassNamePattern(".*Tests?")
-@IncludeEngines(JUnit5TestEngine.ENGINE_ID)
+@IncludeEngines("junit5")
 public class AllJUnitPlatformTestsTestSuite {
 }

File: platform-tests/src/test/java/org/junit/gen5/launcher/TagFilterTests.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.UniqueId;
-import org.junit.gen5.engine.junit5.descriptor.ClassTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.DemoClassTestDescriptor;
 
 /**
  * Unit tests for {@link TagFilter}.
@@ -93,7 +93,8 @@ private static class ATestWithNoTags {
 	}
 
 	private static TestDescriptor classTestDescriptor(String uniqueId, Class<?> testClass) {
-		return new ClassTestDescriptor(UniqueId.root("class", uniqueId), testClass);
+		UniqueId rootUniqueId = UniqueId.root("class", uniqueId);
+		return new DemoClassTestDescriptor(rootUniqueId, testClass);
 	}
 
 }

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -11,7 +11,7 @@
 package example;
 
 import org.junit.gen5.junit4.runner.ExcludeTags;
-import org.junit.gen5.junit4.runner.FilterClassName;
+import org.junit.gen5.junit4.runner.IncludeClassNamePattern;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
@@ -31,7 +31,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("example")
-@FilterClassName(".+(Tests|Demo)$")
+@IncludeClassNamePattern(".+(Tests|Demo)$")
 @ExcludeTags("exclude")
 public class DocumentationTestSuite {
 }

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.gen5.console.tasks;
 
 import static java.util.stream.Collectors.toCollection;
+import static org.junit.gen5.engine.discovery.ClassFilter.includeClassNamePattern;
 import static org.junit.gen5.engine.discovery.ClasspathSelector.selectClasspathRoots;
 import static org.junit.gen5.engine.discovery.NameBasedSelectors.selectNames;
 import static org.junit.gen5.launcher.EngineFilter.excludeEngines;
@@ -26,7 +27,6 @@
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
-import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**
@@ -69,8 +69,8 @@ private TestDiscoveryRequest buildNameBasedDiscoveryRequest(CommandLineOptions o
 	}
 
 	private void applyFilters(TestDiscoveryRequest discoveryRequest, CommandLineOptions options) {
-		options.getClassnameFilter().ifPresent(
-			regex -> discoveryRequest.addFilter(ClassFilter.byClassNamePattern(regex)));
+		options.getIncludeClassNamePattern().ifPresent(
+			pattern -> discoveryRequest.addFilter(includeClassNamePattern(pattern)));
 
 		if (!options.getIncludedTags().isEmpty()) {
 			discoveryRequest.addPostFilter(includeTags(options.getIncludedTags()));

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit4;
 
-import org.junit.gen5.junit4.runner.FilterClassName;
+import org.junit.gen5.junit4.runner.IncludeClassNamePattern;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.SelectPackages;
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.gen5.engine.junit4")
-@FilterClassName(".*Tests?")
+@IncludeClassNamePattern(".*Tests?")
 @IncludeEngines("junit5")
 public class JUnit4TestEngineTestSuite {
 }

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/DiscoveryFilterApplierTests.java
Patch:
@@ -39,7 +39,7 @@ class DiscoveryFilterApplierTests {
 	void nonMatchingClassesAreExcluded() {
 
 		EngineDiscoveryRequest request = request().filters(
-			ClassFilter.byClassNamePattern(".*\\$MatchingClass")).build();
+			ClassFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()
@@ -61,7 +61,7 @@ void nonMatchingClassesAreExcluded() {
 	@Test
 	void nestedTestClassesAreAlwaysIncludedWhenTheirParentIs() {
 		EngineDiscoveryRequest request = request().filters(
-			ClassFilter.byClassNamePattern(".*\\$MatchingClass")).build();
+			ClassFilter.includeClassNamePattern(".*\\$MatchingClass")).build();
 
 		// @formatter:off
 		TestDescriptor engineDescriptor = engineDescriptor()

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/JUnit5TestEngineTestSuite.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit5;
 
-import org.junit.gen5.junit4.runner.FilterClassName;
+import org.junit.gen5.junit4.runner.IncludeClassNamePattern;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.SelectPackages;
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnitPlatform.class)
 @SelectPackages("org.junit.gen5.engine.junit5")
-@FilterClassName(".*Tests?")
+@IncludeClassNamePattern(".*Tests?")
 @IncludeEngines("junit5")
 public class JUnit5TestEngineTestSuite {
 }

File: platform-tests/src/test/java/org/junit/gen5/AllJUnitPlatformTestsTestSuite.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5;
 
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
-import org.junit.gen5.junit4.runner.FilterClassName;
+import org.junit.gen5.junit4.runner.IncludeClassNamePattern;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.SelectPackages;
@@ -43,7 +43,7 @@
 	"org.junit.gen5.launcher"
 })
 //@formatter:on
-@FilterClassName(".*Tests?")
+@IncludeClassNamePattern(".*Tests?")
 @IncludeEngines(JUnit5TestEngine.ENGINE_ID)
 public class AllJUnitPlatformTestsTestSuite {
 }

File: platform-tests/src/test/java/org/junit/gen5/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -118,9 +118,9 @@ public void convertsAllOptionWithAdditionalClasspathEntries() {
 	}
 
 	@Test
-	public void convertsClassnameFilterOption() {
+	public void convertsIncludeClassNamePatternOption() {
 		options.setRunAllTests(true);
-		options.setClassnameFilter(".*Test");
+		options.setIncludeClassNamePattern(".*Test");
 
 		TestDiscoveryRequest request = convert();
 

File: platform-tests/src/test/java/org/junit/gen5/engine/FilterCompositionTests.java
Patch:
@@ -42,15 +42,15 @@ void composingNoFiltersCreatesFilterThatIncludesEverything() {
 
 	@Test
 	void composingSingleFilterWillReturnTheOriginalOne() {
-		Filter<Class<?>> singleFilter = ClassFilter.byClassNamePattern(".*ring.*");
+		Filter<Class<?>> singleFilter = ClassFilter.includeClassNamePattern(".*ring.*");
 		Filter<Class<?>> composed = Filter.composeFilters(singleFilter);
 		assertSame(singleFilter, composed);
 	}
 
 	@Test
 	void composingMultipleFiltersIsAConjunctionOfFilters() {
-		Filter<Class<?>> firstFilter = ClassFilter.byClassNamePattern(".*ring.*");
-		Filter<Class<?>> secondFilter = ClassFilter.byClassNamePattern(".*Join.*");
+		Filter<Class<?>> firstFilter = ClassFilter.includeClassNamePattern(".*ring.*");
+		Filter<Class<?>> secondFilter = ClassFilter.includeClassNamePattern(".*Join.*");
 
 		Filter<Class<?>> composed = Filter.composeFilters(firstFilter, secondFilter);
 

File: platform-tests/src/test/java/org/junit/gen5/engine/discovery/ClassFilterTests.java
Patch:
@@ -27,9 +27,9 @@ class ClassFilterTests {
 	void classNameMatches() {
 		String regex = "^java\\.lang\\..*";
 
-		ClassFilter filter = ClassFilter.byClassNamePattern(regex);
+		ClassFilter filter = ClassFilter.includeClassNamePattern(regex);
 
-		assertEquals("Filter class names with regular expression: " + regex, filter.toString());
+		assertEquals("Includes class names with regular expression: " + regex, filter.toString());
 		assertTrue(filter.apply(String.class).included());
 		assertFalse(filter.apply(Collection.class).included());
 	}

File: platform-tests/src/test/java/org/junit/gen5/junit4/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -188,7 +188,7 @@ class TestCase {
 		@Test
 		void addsClassFilterToRequestWhenFilterClassNameAnnotationIsPresent() throws Exception {
 
-			@FilterClassName(".*Foo")
+			@IncludeClassNamePattern(".*Foo")
 			class TestCase {
 			}
 			class Foo {

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/ExcludeTags.java
Patch:
@@ -23,11 +23,12 @@
 
 /**
  * {@code @ExcludeTags} specifies the {@linkplain #value tags} to be excluded
- * from the test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
- * is run.
+ * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
  * @since 5.0
+ * @see JUnitPlatform
  * @see IncludeTags
+ * @see org.junit.gen5.launcher.TagFilter#excludeTags
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/IncludeTags.java
Patch:
@@ -23,11 +23,12 @@
 
 /**
  * {@code @IncludeTags} specifies the {@linkplain #value tags} to be included
- * in the test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
- * is run.
+ * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
  * @since 5.0
+ * @see JUnitPlatform
  * @see ExcludeTags
+ * @see org.junit.gen5.launcher.TagFilter#includeTags
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnitPlatform.java
Patch:
@@ -62,9 +62,9 @@
  * in order to be picked up by IDEs and build tools.
  *
  * @since 5.0
+ * @see SelectPackages
  * @see SelectClasses
  * @see FilterClassName
- * @see SelectPackages
  * @see IncludeTags
  * @see ExcludeTags
  * @see IncludeEngines

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/SelectClasses.java
Patch:
@@ -26,8 +26,9 @@
  * a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
  * @since 5.0
- * @see org.junit.gen5.engine.discovery.ClassSelector
+ * @see JUnitPlatform
  * @see SelectPackages
+ * @see org.junit.gen5.engine.discovery.ClassSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/SelectPackages.java
Patch:
@@ -26,8 +26,9 @@
  * when running a test suite via {@code @RunWith(JUnitPlatform.class)}.
  *
  * @since 5.0
- * @see org.junit.gen5.engine.discovery.PackageSelector
+ * @see JUnitPlatform
  * @see SelectClasses
+ * @see org.junit.gen5.engine.discovery.PackageSelector
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/samples/junit4/TestCaseRunWithJUnitPlatformRunner.java
Patch:
@@ -10,14 +10,14 @@
 
 package org.junit.gen5.engine.junit4.samples.junit4;
 
-import org.junit.gen5.junit4.runner.Classes;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
+import org.junit.gen5.junit4.runner.SelectClasses;
 import org.junit.runner.RunWith;
 
 /**
  * @since 5.0
  */
 @RunWith(JUnitPlatform.class)
-@Classes(PlainJUnit4TestCaseWithSingleTestWhichFails.class)
+@SelectClasses(PlainJUnit4TestCaseWithSingleTestWhichFails.class)
 public class TestCaseRunWithJUnitPlatformRunner {
 }

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnitPlatform.java
Patch:
@@ -62,7 +62,7 @@
  * in order to be picked up by IDEs and build tools.
  *
  * @since 5.0
- * @see Classes
+ * @see SelectClasses
  * @see FilterClassName
  * @see SelectPackages
  * @see IncludeTags
@@ -185,7 +185,7 @@ private void addExcludedEnginesFilter(TestDiscoveryRequest discoveryRequest) {
 	}
 
 	private Class<?>[] getSelectedClasses() {
-		return getValueFromAnnotation(Classes.class, Classes::value, EMPTY_CLASS_ARRAY);
+		return getValueFromAnnotation(SelectClasses.class, SelectClasses::value, EMPTY_CLASS_ARRAY);
 	}
 
 	private String[] getSelectedPackageNames() {

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/SelectPackages.java
Patch:
@@ -27,6 +27,7 @@
  *
  * @since 5.0
  * @see org.junit.gen5.engine.discovery.PackageSelector
+ * @see SelectClasses
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: platform-tests/src/test/java/org/junit/gen5/junit4/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -89,9 +89,9 @@ class TestCase {
 		}
 
 		@Test
-		void requestsClassSelectorsWhenClassesAnnotationIsPresent() throws Exception {
+		void requestsClassSelectorsWhenSelectClassesAnnotationIsPresent() throws Exception {
 
-			@Classes({ Short.class, Byte.class })
+			@SelectClasses({ Short.class, Byte.class })
 			class TestCase {
 			}
 

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.junit4.runner.ExcludeTags;
 import org.junit.gen5.junit4.runner.FilterClassName;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.Packages;
+import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**
@@ -30,7 +30,7 @@
  * @since 5.0
  */
 @RunWith(JUnitPlatform.class)
-@Packages("example")
+@SelectPackages("example")
 @FilterClassName(".+(Tests|Demo)$")
 @ExcludeTags("exclude")
 public class DocumentationTestSuite {

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -12,11 +12,11 @@
 
 //tag::user_guide[]
 import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.Packages;
+import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnitPlatform.class)
-@Packages("example")
+@SelectPackages("example")
 //end::user_guide[]
 @org.junit.gen5.junit4.runner.ExcludeTags("exclude")
 //tag::user_guide[]

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineTestSuite.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.junit4.runner.FilterClassName;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.Packages;
+import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**
@@ -32,7 +32,7 @@
  * @since 5.0
  */
 @RunWith(JUnitPlatform.class)
-@Packages("org.junit.gen5.engine.junit4")
+@SelectPackages("org.junit.gen5.engine.junit4")
 @FilterClassName(".*Tests?")
 @IncludeEngines("junit5")
 public class JUnit4TestEngineTestSuite {

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/JUnit5TestEngineTestSuite.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.junit4.runner.FilterClassName;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.Packages;
+import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**
@@ -32,7 +32,7 @@
  * @since 5.0
  */
 @RunWith(JUnitPlatform.class)
-@Packages("org.junit.gen5.engine.junit5")
+@SelectPackages("org.junit.gen5.engine.junit5")
 @FilterClassName(".*Tests?")
 @IncludeEngines("junit5")
 public class JUnit5TestEngineTestSuite {

File: platform-tests/src/test/java/org/junit/gen5/AllJUnitPlatformTestsTestSuite.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.gen5.junit4.runner.FilterClassName;
 import org.junit.gen5.junit4.runner.IncludeEngines;
 import org.junit.gen5.junit4.runner.JUnitPlatform;
-import org.junit.gen5.junit4.runner.Packages;
+import org.junit.gen5.junit4.runner.SelectPackages;
 import org.junit.runner.RunWith;
 
 /**
@@ -34,7 +34,7 @@
  */
 @RunWith(JUnitPlatform.class)
 //@formatter:off
-@Packages({
+@SelectPackages({
 	"org.junit.gen5.api",
 	"org.junit.gen5.commons",
 	"org.junit.gen5.console",

File: platform-tests/src/test/java/org/junit/gen5/junit4/runner/JUnitPlatformRunnerTests.java
Patch:
@@ -106,7 +106,7 @@ class TestCase {
 		@Test
 		void requestsPackageSelectorsWhenPackagesAnnotationIsPresent() throws Exception {
 
-			@Packages({ "foo", "bar" })
+			@SelectPackages({ "foo", "bar" })
 			class TestCase {
 			}
 

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/discovery/DiscoverySelectorResolverTests.java
Patch:
@@ -370,7 +370,9 @@ public void classpathResolution() {
 
 		resolver.resolveSelectors(request().selectors(selectors).build(), engineDescriptor);
 
-		assertTrue(engineDescriptor.getAllDescendants().size() > 500, "Too few test descriptors in classpath");
+		// 150 is completely arbitrary. At this very second in time, the number is actually 213.
+		assertThat(engineDescriptor.getAllDescendants().size()).isGreaterThan(150).as(
+			"Too few test descriptors in classpath");
 
 		List<UniqueId> uniqueIds = uniqueIds();
 		assertTrue(uniqueIds.contains(

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/RecordCollectingLogger.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.logging;
+package org.junit.gen5.engine.junit4;
 
 import java.util.LinkedList;
 import java.util.List;

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolverTests.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.logging.LogRecord;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.commons.logging.RecordCollectingLogger;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.discovery.ClassFilter;
+import org.junit.gen5.engine.junit4.RecordCollectingLogger;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 
 /**

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/discovery/TestClassRequestResolverTests.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.logging.LogRecord;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.commons.logging.RecordCollectingLogger;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.junit4.JUnit4UniqueIdBuilder;
+import org.junit.gen5.engine.junit4.RecordCollectingLogger;
 import org.junit.gen5.engine.junit4.samples.junit4.IgnoredJUnit4TestCase;
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/discovery/UniqueIdReaderTests.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.logging.LogRecord;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.commons.logging.RecordCollectingLogger;
+import org.junit.gen5.engine.junit4.RecordCollectingLogger;
 import org.junit.runner.Description;
 
 /**

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/discovery/UniqueIdSelectorResolverTests.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.logging.LogRecord;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.commons.logging.RecordCollectingLogger;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.discovery.UniqueIdSelector;
 import org.junit.gen5.engine.junit4.JUnit4UniqueIdBuilder;
+import org.junit.gen5.engine.junit4.RecordCollectingLogger;
 
 /**
  * @since 5.0

File: junit4-engine/src/test/java/org/junit/gen5/engine/junit4/execution/RunListenerAdapterTests.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.logging.LogRecord;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.commons.logging.RecordCollectingLogger;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.junit4.RecordCollectingLogger;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithSingleTestWhichFails;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;

File: documentation/src/test/java/example/DocumentationTestSuite.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.gen5.junit4.runner.ExcludeTags;
 import org.junit.gen5.junit4.runner.FilterClassName;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.Packages;
 import org.junit.runner.RunWith;
 
@@ -29,7 +29,7 @@
  *
  * @since 5.0
  */
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 @Packages("example")
 @FilterClassName(".+(Tests|Demo)$")
 @ExcludeTags("exclude")

File: documentation/src/test/java/example/JUnit4ClassDemo.java
Patch:
@@ -14,10 +14,10 @@
 import static org.junit.gen5.api.Assertions.fail;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 public class JUnit4ClassDemo {
 
 	@Test

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -11,11 +11,11 @@
 package example;
 
 //tag::user_guide[]
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.Packages;
 import org.junit.runner.RunWith;
 
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 @Packages("example")
 //end::user_guide[]
 @org.junit.gen5.junit4.runner.ExcludeTags("exclude")

File: junit-tests/src/test/java/org/junit/gen5/AllJUnit5TestsTestSuite.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
 import org.junit.gen5.junit4.runner.FilterClassName;
 import org.junit.gen5.junit4.runner.IncludeEngines;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.gen5.junit4.runner.Packages;
 import org.junit.runner.RunWith;
 
@@ -32,7 +32,7 @@
  *
  * @since 5.0
  */
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 @Packages("org.junit.gen5")
 @FilterClassName(".*Tests?")
 @IncludeEngines(JUnit5TestEngine.ENGINE_ID)

File: junit-tests/src/test/java/org/junit/gen5/console/options/JOptSimpleCommandLineOptionsParserTests.java
Patch:
@@ -31,13 +31,13 @@
 import joptsimple.OptionException;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
 /**
  * @since 5.0
  */
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 public class JOptSimpleCommandLineOptionsParserTests {
 
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -64,7 +64,7 @@
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithSingleTestWhichIsIgnored;
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithTwoTestMethods;
 import org.junit.gen5.engine.junit4.samples.junit4.SingleFailingTheoryTestCase;
-import org.junit.gen5.engine.junit4.samples.junit4.TestCaseRunWithJUnit5;
+import org.junit.gen5.engine.junit4.samples.junit4.TestCaseRunWithJUnitPlatformRunner;
 import org.junit.gen5.engine.support.descriptor.JavaClassSource;
 import org.junit.gen5.engine.support.descriptor.JavaMethodSource;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
@@ -201,8 +201,8 @@ void doesNotResolvePlainOldJavaClassesWithoutAnyTest() {
 	}
 
 	@Test
-	void doesNotResolveClassRunWithJUnit5() {
-		assertYieldsNoDescriptors(TestCaseRunWithJUnit5.class);
+	void doesNotResolveClassRunWithJUnitPlatform() {
+		assertYieldsNoDescriptors(TestCaseRunWithJUnitPlatformRunner.class);
 	}
 
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/samples/junit4/TestCaseRunWithJUnitPlatformRunner.java
Patch:
@@ -11,13 +11,13 @@
 package org.junit.gen5.engine.junit4.samples.junit4;
 
 import org.junit.gen5.junit4.runner.Classes;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
 /**
  * @since 5.0
  */
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 @Classes(PlainJUnit4TestCaseWithSingleTestWhichFails.class)
-public class TestCaseRunWithJUnit5 {
+public class TestCaseRunWithJUnitPlatformRunner {
 }

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/DefensiveAllDefaultPossibilitiesBuilder.java
Patch:
@@ -52,7 +52,7 @@ protected JUnit4Builder junit4Builder() {
 
 	/**
 	 * Customization of {@link AnnotatedBuilder} that ignores classes annotated
-	 * with {@code @RunWith(JUnit5.class)} to avoid infinite recursion.
+	 * with {@code @RunWith(JUnitPlatform.class)} to avoid infinite recursion.
 	 */
 	private static class DefensiveAnnotatedBuilder extends AnnotatedBuilder {
 
@@ -63,7 +63,7 @@ public DefensiveAnnotatedBuilder(RunnerBuilder suiteBuilder) {
 		@Override
 		public Runner buildRunner(Class<? extends Runner> runnerClass, Class<?> testClass) throws Exception {
 			// Referenced by name because it might not be available at runtime.
-			if ("org.junit.gen5.junit4.runner.JUnit5".equals(runnerClass.getName())) {
+			if ("org.junit.gen5.junit4.runner.JUnitPlatform".equals(runnerClass.getName())) {
 				return null;
 			}
 			return super.buildRunner(runnerClass, testClass);

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/Classes.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@code @Classes} specifies the test classes to be run when a class
- * annotated with {@code @RunWith(JUnit5.class)} is run.
+ * annotated with {@code @RunWith(JUnitPlatform.class)} is run.
  *
  * @since 5.0
  */

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/ExcludeEngines.java
Patch:
@@ -24,7 +24,8 @@
 /**
  * {@code @ExcludeEngines} specifies the {@linkplain #value IDs} of
  * {@link org.junit.gen5.engine.TestEngine TestEngines} to be excluded from the
- * test plan when a class annotated with {@code @RunWith(JUnit5.class)} is run.
+ * test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
+ * is run.
  *
  * @since 5.0
  * @see IncludeEngines

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/ExcludeTags.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@code @ExcludeTags} specifies the {@linkplain #value tags} to be excluded
- * from the test plan when a class annotated with {@code @RunWith(JUnit5.class)}
+ * from the test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
  * is run.
  *
  * @since 5.0

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/FilterClassName.java
Patch:
@@ -22,9 +22,9 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code @FilterClassName} specifies a regular expression that is used
- * to match against fully qualified class names
- * when a test class annotated with {@code @RunWith(JUnit5.class)} is executed.
+ * {@code @FilterClassName} specifies a regular expression that is used to
+ * match against fully qualified class names when a test class annotated with
+ * {@code @RunWith(JUnitPlatform.class)} is run.
  *
  * @since 5.0
  */

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/IncludeEngines.java
Patch:
@@ -24,7 +24,8 @@
 /**
  * {@code @IncludeEngines} specifies the {@linkplain #value IDs} of
  * {@link org.junit.gen5.engine.TestEngine TestEngines} to be included in the
- * test plan when a class annotated with {@code @RunWith(JUnit5.class)} is run.
+ * test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
+ * is run.
  *
  * @since 5.0
  * @see ExcludeEngines

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/IncludeTags.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@code @IncludeTags} specifies the {@linkplain #value tags} to be included
- * in the test plan when a class annotated with {@code @RunWith(JUnit5.class)}
+ * in the test plan when a class annotated with {@code @RunWith(JUnitPlatform.class)}
  * is run.
  *
  * @since 5.0

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnitPlatformTestTree.java
Patch:
@@ -28,13 +28,13 @@
 /**
  * @since 5.0
  */
-class JUnit5TestTree {
+class JUnitPlatformTestTree {
 
 	private final Map<TestIdentifier, Description> descriptions = new HashMap<>();
 	private final TestPlan plan;
 	private final Description suiteDescription;
 
-	JUnit5TestTree(TestPlan plan, Class<?> testClass) {
+	JUnitPlatformTestTree(TestPlan plan, Class<?> testClass) {
 		this.plan = plan;
 		this.suiteDescription = generateDescription(plan, testClass);
 	}

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/Packages.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@code @Packages} specifies the names of packages to be run when a class
- * annotated with {@code @RunWith(JUnit5.class)} is run.
+ * annotated with {@code @RunWith(JUnitPlatform.class)} is run.
  *
  * @since 5.0
  */

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/UniqueIds.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@code @UniqueIds} specifies the unique IDs of test classes or methods to be
- * run when a class annotated with {@code @RunWith(JUnit5.class)} is run.
+ * run when a class annotated with {@code @RunWith(JUnitPlatform.class)} is run.
  *
  * @since 5.0
  */

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
- * {@code Runner} and annotations for configuring and executing tests that
- * use the JUnit 5 programming and extension models in a JUnit 4 environment.
+ * {@code Runner} and annotations for configuring and executing tests on the
+ * JUnit Platform in a JUnit 4 environment.
  */
 
 package org.junit.gen5.junit4.runner;

File: src/test/java/org/junit/gen5/meta/DependencyTests.java
Patch:
@@ -18,7 +18,7 @@
 import de.schauderhaft.degraph.configuration.NamedPattern;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
 /**
@@ -30,7 +30,7 @@
  * {@code org.junit.gen5.console.ConsoleRunner} belongs to the {@code console}
  * module.
  */
-@RunWith(JUnit5.class)
+@RunWith(JUnitPlatform.class)
 public class DependencyTests {
 
 	@Test

File: junit-engine-api/src/test/java/org/junit/gen5/engine/test/event/TestExecutionResultConditions.java
Patch:
@@ -8,14 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.test.event;
 
 import static java.util.function.Predicate.isEqual;
 import static org.junit.gen5.commons.util.FunctionUtils.where;
 
 import java.util.function.Predicate;
 
 import org.assertj.core.api.Condition;
+import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.TestExecutionResult.Status;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -13,10 +13,10 @@
 import static org.junit.gen5.engine.discovery.ClassSelector.selectClass;
 import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.UniqueId;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/BeforeAllAndAfterAllComposedAnnotationTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.gen5.api.AfterAll;
 import org.junit.gen5.api.BeforeAll;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 
 /**
  * Integration tests that verify support for {@link BeforeAll} and {@link AfterAll}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/BeforeEachAndAfterEachComposedAnnotationTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 
 /**
  * Integration tests that verify support for {@link BeforeEach} and {@link AfterEach}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.gen5.api.Disabled;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.TestReporter;
 import org.junit.gen5.commons.util.PreconditionViolationException;
-import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 import org.opentest4j.TestAbortedException;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/BeforeAndAfterAllTests.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.gen5.api.extension.BeforeAllCallback;
 import org.junit.gen5.api.extension.ContainerExtensionContext;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit5.AbstractJUnit5TestEngineTests;
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/BeforeAndAfterEachTests.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.gen5.api.extension.BeforeEachCallback;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.TestExtensionContext;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit5.AbstractJUnit5TestEngineTests;
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/BeforeAndAfterTestExecutionCallbackTests.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.gen5.api.extension.BeforeTestExecutionCallback;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.TestExtensionContext;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit5.AbstractJUnit5TestEngineTests;
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/ExecutionConditionTests.java
Patch:
@@ -22,11 +22,11 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ContainerExecutionCondition;
 import org.junit.gen5.api.extension.TestExecutionCondition;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit5.AbstractJUnit5TestEngineTests;
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
 import org.junit.gen5.engine.junit5.extension.sub.SystemPropertyCondition;
 import org.junit.gen5.engine.junit5.extension.sub.SystemPropertyCondition.SystemProperty;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/TestInstancePostProcessorTests.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.api.extension.TestInstancePostProcessor;
-import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit5.AbstractJUnit5TestEngineTests;
+import org.junit.gen5.engine.test.event.ExecutionEventRecorder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**

File: junit-engine-api/src/test/java/org/junit/gen5/engine/test/TestDescriptorStub.java
Patch:
@@ -8,8 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.test;
 
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
 /**

File: junit-engine-api/src/test/java/org/junit/gen5/engine/test/TestEngineSpy.java
Patch:
@@ -8,12 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.junit5.stubs;
+package org.junit.gen5.engine.test;
 
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.UniqueId;
 

File: junit-engine-api/src/test/java/org/junit/gen5/engine/test/TestEngineStub.java
Patch:
@@ -8,12 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.junit5.stubs;
+package org.junit.gen5.engine.test;
 
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.UniqueId;
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ColoredPrintingTestListenerTests.java
Patch:
@@ -20,9 +20,9 @@
 import java.io.StringWriter;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.reporting.ReportEntry;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 import org.junit.gen5.launcher.TestIdentifier;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportDataTests.java
Patch:
@@ -19,10 +19,10 @@
 import java.util.Optional;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 import org.junit.gen5.launcher.TestPlan;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportWriterTests.java
Patch:
@@ -21,10 +21,10 @@
 import java.time.Clock;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.reporting.ReportEntry;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -43,13 +43,13 @@
 import org.junit.gen5.api.TestReporter;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.console.tasks.TempDirectory.Root;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.reporting.ReportEntry;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;

File: junit-tests/src/test/java/org/junit/gen5/engine/TestDescriptorTests.java
Patch:
@@ -14,6 +14,7 @@
 import static org.junit.gen5.api.Assertions.assertTrue;
 
 import org.junit.gen5.api.Test;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 
 /**
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/junit4/runner/JUnit5RunnerTests.java
Patch:
@@ -41,17 +41,17 @@
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.engine.discovery.ClassSelector;
 import org.junit.gen5.engine.discovery.PackageSelector;
 import org.junit.gen5.engine.discovery.UniqueIdSelector;
-import org.junit.gen5.engine.junit5.stubs.TestEngineStub;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
+import org.junit.gen5.engine.test.TestDescriptorStub;
+import org.junit.gen5.engine.test.TestEngineStub;
 import org.junit.gen5.launcher.EngineFilter;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.PostDiscoveryFilter;

File: junit-tests/src/test/java/org/junit/gen5/launcher/TestIdentifierTests.java
Patch:
@@ -21,10 +21,10 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.support.descriptor.JavaClassSource;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 
 /**
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/launcher/listener/SummaryGenerationTests.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Optional;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.TestDescriptorStub;
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.TestSource;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.support.descriptor.JavaClassSource;
+import org.junit.gen5.engine.test.TestDescriptorStub;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DefaultLauncherTests.java
Patch:
@@ -30,9 +30,9 @@
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.discovery.PackageSelector;
-import org.junit.gen5.engine.junit5.stubs.TestEngineSpy;
 import org.junit.gen5.engine.support.hierarchical.DummyTestDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
+import org.junit.gen5.engine.test.TestEngineSpy;
 import org.junit.gen5.launcher.PostDiscoveryFilter;
 import org.junit.gen5.launcher.PostDiscoveryFilterStub;
 import org.junit.gen5.launcher.TagFilter;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/TestDiscoveryRequestBuilderTests.java
Patch:
@@ -42,7 +42,7 @@
 import org.junit.gen5.engine.discovery.MethodSelector;
 import org.junit.gen5.engine.discovery.PackageSelector;
 import org.junit.gen5.engine.discovery.UniqueIdSelector;
-import org.junit.gen5.engine.junit5.stubs.TestEngineStub;
+import org.junit.gen5.engine.test.TestEngineStub;
 import org.junit.gen5.launcher.DiscoveryFilterStub;
 import org.junit.gen5.launcher.EngineFilter;
 import org.junit.gen5.launcher.PostDiscoveryFilter;

File: junit-tests/src/test/java/org/junit/gen5/AllJUnit5TestsTestSuite.java
Patch:
@@ -18,6 +18,8 @@
 import org.junit.runner.RunWith;
 
 /**
+ * Test suite for all JUnit 5 tests.
+ *
  * <h3>Logging Configuration</h3>
  *
  * <p>In order for our log4j2 configuration to be used in an IDE, you must
@@ -34,5 +36,5 @@
 @Packages("org.junit.gen5")
 @FilterClassName(".*Tests?")
 @IncludeEngines(JUnit5TestEngine.ENGINE_ID)
-public class AllJUnit5Tests {
+public class AllJUnit5TestsTestSuite {
 }

File: junit-tests/src/test/java/org/junit/gen5/junit4/runner/JUnit5RunnerTests.java
Patch:
@@ -70,7 +70,7 @@
  *
  * @since 5.0
  */
-class JUnit5Tests {
+class JUnit5RunnerTests {
 
 	@Nested
 	class Discovery {

File: junit-tests/src/test/java/org/junit/gen5/engine/ExecutionEventConditions.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.util.List;
 
+import org.assertj.core.api.Assertions;
 import org.assertj.core.api.Condition;
 import org.assertj.core.api.SoftAssertions;
 import org.junit.gen5.engine.ExecutionEvent.Type;
@@ -55,7 +56,7 @@ public static void assertRecordedExecutionEventsContainsExactly(List<ExecutionEv
 
 	@SafeVarargs
 	public static Condition<ExecutionEvent> event(Condition<? super ExecutionEvent>... conditions) {
-		return allOf(conditions);
+		return Assertions.<ExecutionEvent> allOf(conditions);
 	}
 
 	public static Condition<ExecutionEvent> engine() {

File: documentation/src/test/java/example/timing/TimingExtensionTests.java
Patch:
@@ -18,6 +18,7 @@
  *
  * @since 5.0
  */
+// tag::user_guide[]
 @ExtendWith(TimingExtension.class)
 class TimingExtensionTests {
 
@@ -32,3 +33,4 @@ void sleep50ms() throws Exception {
 	}
 
 }
+// end::user_guide[]

File: documentation/src/test/java/example/timing/TimingExtensionTests.java
Patch:
@@ -18,6 +18,7 @@
  *
  * @since 5.0
  */
+// tag::user_guide[]
 @ExtendWith(TimingExtension.class)
 class TimingExtensionTests {
 
@@ -32,3 +33,4 @@ void sleep50ms() throws Exception {
 	}
 
 }
+// end::user_guide[]

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/ExecutableInvoker.java
Patch:
@@ -169,7 +169,7 @@ private Object[] resolveParameters(Executable executable, Optional<Object> targe
 
 		// Resolve remaining parameters dynamically
 		for (int i = start; i < parameters.length; i++) {
-			ParameterContext parameterContext = new DefaultParameterContext(parameters[i], target);
+			ParameterContext parameterContext = new DefaultParameterContext(parameters[i], i, target);
 			values[i] = resolveParameter(parameterContext, executable, extensionContext, extensionRegistry);
 		}
 		return values;

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllCallback.java
Patch:
@@ -39,7 +39,7 @@ public interface AfterAllCallback extends Extension {
 	 * Callback that is invoked once <em>after</em> all tests in the current
 	 * container.
 	 *
-	 * @param context the current container extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void afterAll(ContainerExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachCallback.java
Patch:
@@ -43,7 +43,7 @@ public interface AfterEachCallback extends Extension {
 	/**
 	 * Callback that is invoked <em>after</em> each test has been invoked.
 	 *
-	 * @param context the current test extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void afterEach(TestExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterTestExecutionCallback.java
Patch:
@@ -42,7 +42,7 @@ public interface AfterTestExecutionCallback extends Extension {
 	/**
 	 * Callback that is invoked <em>immediately after</em> each test has been executed.
 	 *
-	 * @param context the current test extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void afterTestExecution(TestExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeAllCallback.java
Patch:
@@ -39,7 +39,7 @@ public interface BeforeAllCallback extends Extension {
 	 * Callback that is invoked once <em>before</em> all tests in the current
 	 * container.
 	 *
-	 * @param context the current container extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void beforeAll(ContainerExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachCallback.java
Patch:
@@ -41,7 +41,7 @@ public interface BeforeEachCallback extends Extension {
 	/**
 	 * Callback that is invoked <em>before</em> each test is invoked.
 	 *
-	 * @param context the current test extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void beforeEach(TestExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -42,7 +42,7 @@ public interface BeforeTestExecutionCallback extends Extension {
 	/**
 	 * Callback that is invoked <em>immediately before</em> each test is executed.
 	 *
-	 * @param context the current test extension context
+	 * @param context the current extension context; never {@code null}
 	 */
 	void beforeTestExecution(TestExtensionContext context) throws Exception;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ContainerExecutionCondition.java
Patch:
@@ -40,7 +40,8 @@ public interface ContainerExecutionCondition extends Extension {
 	 * {@linkplain ConditionEvaluationResult#disabled disabled} result indicates
 	 * that the container should not be executed.
 	 *
-	 * @param context the current {@code ContainerExtensionContext}
+	 * @param context the current extension context; never {@code null}
+	 * @return the result of evaluating this condition; never {@code null}
 	 */
 	ConditionEvaluationResult evaluate(ContainerExtensionContext context);
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionCondition.java
Patch:
@@ -40,7 +40,8 @@ public interface TestExecutionCondition extends Extension {
 	 * {@linkplain ConditionEvaluationResult#disabled disabled} result
 	 * indicates that the test should not be executed.
 	 *
-	 * @param context the current {@code TestExtensionContext}
+	 * @param context the current extension context; never {@code null}
+	 * @return the result of evaluating this condition; never {@code null}
 	 */
 	ConditionEvaluationResult evaluate(TestExtensionContext context);
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionExceptionHandler.java
Patch:
@@ -43,6 +43,9 @@ public interface TestExecutionExceptionHandler extends Extension {
 	 * {@code TestExecutionExceptionHandlers} will not be invoked; otherwise,
 	 * the next registered {@code TestExecutionExceptionHandler} (if there is
 	 * one) will be invoked with any {@link Throwable} thrown by this handler.
+	 *
+	 * @param context the current extension context; never {@code null}
+	 * @param throwable the {@code Throwable} to handle; never {@code null}
 	 */
 	void handleTestExecutionException(TestExtensionContext context, Throwable throwable) throws Throwable;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestInstancePostProcessor.java
Patch:
@@ -32,8 +32,8 @@ public interface TestInstancePostProcessor extends Extension {
 	/**
 	 * Callback for post-processing the supplied test instance.
 	 *
-	 * @param testInstance the instance to post-process
-	 * @param context the current extension context
+	 * @param testInstance the instance to post-process; never {@code null}
+	 * @param context the current extension context; never {@code null}
 	 */
 	void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/Root.java
Patch:
@@ -59,7 +59,7 @@ TestDescriptor getTestDescriptorFor(TestEngine testEngine) {
 	void applyPostDiscoveryFilters(TestDiscoveryRequest discoveryRequest) {
 		Filter<TestDescriptor> postDiscoveryFilter = composeFilters(discoveryRequest.getPostDiscoveryFilters());
 		TestDescriptor.Visitor removeExcludedTestDescriptors = descriptor -> {
-			if (isExcluded(descriptor, postDiscoveryFilter)) {
+			if (!descriptor.isRoot() && isExcluded(descriptor, postDiscoveryFilter)) {
 				descriptor.removeFromHierarchy();
 			}
 		};

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ColoredPrintingTestListenerTests.java
Patch:
@@ -56,7 +56,7 @@ public void reportingEntryPublishedMessageIndented() {
 
 		assertEquals(2, split.length);
 		assertAll("lines in the message", () -> assertEquals("Reported:    failingTest [[engine:junit]]", split[0]),
-			() -> assertTrue(split[1].startsWith(INDENTATION + "=> Reported values: ReportEntry [creationTimestamp =")),
+			() -> assertTrue(split[1].startsWith(INDENTATION + "=> Reported values: ReportEntry [timestamp =")),
 			() -> assertTrue(split[1].endsWith(", foo = 'bar']")));
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportWriterTests.java
Patch:
@@ -73,7 +73,7 @@ void writesReportEntry() throws Exception {
 		//@formatter:off
 		assertThat(content)
 			.containsSequence(
-				"<system-out>Report Entry #1 (creation timestamp: ",
+				"<system-out>Report Entry #1 (timestamp: ",
 				"- myKey: myValue",
 				"</system-out>");
 		//@formatter:on

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -375,9 +375,9 @@ void writesReportEntriesToSystemOutElement(@Root Path tempDirectory, TestReporte
 				"<testsuite",
 				"<testcase",
 				"<system-out>",
-				"Report Entry #1 (creation timestamp: " + Year.now(),
+				"Report Entry #1 (timestamp: " + Year.now(),
 				"- foo: bar\n",
-				"Report Entry #2 (creation timestamp: " + Year.now(),
+				"Report Entry #2 (timestamp: " + Year.now(),
 				"- bar: baz\n",
 				"- qux: foo\n",
 				"</system-out>",

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.gen5.engine.discovery.ClasspathSelector.selectClasspathRoots;
 import static org.junit.gen5.engine.discovery.NameBasedSelectors.selectNames;
-import static org.junit.gen5.launcher.EngineIdFilter.requireEngineId;
+import static org.junit.gen5.launcher.EngineFilter.requireEngines;
 import static org.junit.gen5.launcher.TagFilter.excludeTags;
 import static org.junit.gen5.launcher.TagFilter.requireTags;
 import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
@@ -77,7 +77,7 @@ private void applyFilters(TestDiscoveryRequest discoveryRequest, CommandLineOpti
 			discoveryRequest.addPostFilter(excludeTags(options.getExcludedTagsFilter()));
 		}
 		options.getRequiredEngineFilter().ifPresent(
-			engineId -> discoveryRequest.addEngineIdFilter(requireEngineId(engineId)));
+			engineId -> discoveryRequest.addEngineFilter(requireEngines(engineId)));
 	}
 
 }

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ColoredPrintingTestListener.java
Patch:
@@ -82,7 +82,7 @@ public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult
 	public void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {
 		printlnTestDescriptor(PURPLE, "Reported:", testIdentifier);
 		StringBuilder stringBuilder = new StringBuilder();
-		entry.appendDescription(stringBuilder, "");
+		entry.appendDescription(stringBuilder);
 		printlnMessage(PURPLE, "Reported values", stringBuilder.toString());
 	}
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportWriter.java
Patch:
@@ -193,7 +193,7 @@ private void writeReportEntriesToSystemOutElement(TestIdentifier test, XMLStream
 			for (int i = 0; i < entries.size(); i++) {
 				ReportEntry reportEntry = entries.get(i);
 				StringBuilder stringBuilder = new StringBuilder();
-				reportEntry.appendDescription(stringBuilder, " #" + String.valueOf(i + 1));
+				reportEntry.appendDescription(stringBuilder, "#" + (i + 1));
 				writer.writeCharacters(stringBuilder.toString());
 			}
 			writer.writeEndElement();

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5RunnerListener.java
Patch:
@@ -81,7 +81,7 @@ else if (status == FAILED) {
 
 	@Override
 	public void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {
-		entry.appendDescription(System.out, "");
+		entry.appendDescription(System.out);
 	}
 
 	private Failure toFailure(TestExecutionResult testExecutionResult, Description description) {

File: documentation/src/test/java/example/DynamicTestsDemo.java
Patch:
@@ -10,6 +10,7 @@
 
 package example;
 
+//tag::user_guide[]
 import static org.junit.gen5.api.Assertions.assertTrue;
 import static org.junit.gen5.api.Assertions.fail;
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.gen5.engine.discovery.ClasspathSelector.selectClasspathRoots;
-import static org.junit.gen5.engine.discovery.NameBasedSelector.selectNames;
+import static org.junit.gen5.engine.discovery.NameBasedSelectors.selectNames;
 import static org.junit.gen5.launcher.EngineIdFilter.requireEngineId;
 import static org.junit.gen5.launcher.TagFilter.excludeTags;
 import static org.junit.gen5.launcher.TagFilter.requireTags;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DiscoveryRequestTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.assertNotNull;
-import static org.junit.gen5.engine.discovery.NameBasedSelector.selectName;
+import static org.junit.gen5.engine.discovery.NameBasedSelectors.selectName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.selectUniqueId;
 import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/ClasspathSelector.java
Patch:
@@ -24,7 +24,8 @@
 /**
  * A {@link DiscoverySelector} that selects classpath <em>roots</em> so that
  * {@link org.junit.gen5.engine.TestEngine TestEngines} can search for class
- * files or resources within the physical classpath.
+ * files or resources within the physical classpath &mdash; for example, to
+ * scan for test classes.
  *
  * @since 5.0
  */
@@ -56,7 +57,7 @@ private ClasspathSelector(File classpathRoot) {
 	}
 
 	/**
-	 * Get the classpath root stored in this selector.
+	 * Get the selected classpath root.
 	 */
 	public File getClasspathRoot() {
 		return this.classpathRoot;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoverySelector.java
Patch:
@@ -15,7 +15,9 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * A selector defines location(s) a {@link TestEngine} should lookup tests at.
+ * A selector defines what a {@link TestEngine} can use to discover tests
+ * &mdash; for example, the name of a Java class, the path to a file or
+ * directory, etc.
  *
  * @since 5.0
  * @see EngineDiscoveryRequest

File: junit-engine-api/src/main/java/org/junit/gen5/engine/ExecutionRequest.java
Patch:
@@ -20,7 +20,7 @@
  * execute its tests.
  *
  * <p>A request contains an engine's root {@link TestDescriptor}, the
- * {@link EngineExecutionListener} to be notified of test execution, and
+ * {@link EngineExecutionListener} to be notified of test execution events, and
  * {@link ConfigurationParameters} that the engine may use to influence test
  * execution.
  *
@@ -53,7 +53,8 @@ public TestDescriptor getRootTestDescriptor() {
 	}
 
 	/**
-	 * Get the {@link EngineExecutionListener} to be notified of test execution.
+	 * Get the {@link EngineExecutionListener} to be notified of test execution
+	 * events.
 	 */
 	public EngineExecutionListener getEngineExecutionListener() {
 		return this.engineExecutionListener;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -30,6 +30,8 @@ public interface FileSystemSource extends UriSource {
 
 	/**
 	 * Get the source file or directory.
+	 *
+	 * @return the source file or directory; never {@code null}
 	 */
 	File getFile();
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/JavaClassSource.java
Patch:
@@ -32,7 +32,7 @@ public class JavaClassSource implements JavaSource {
 	 * Create a new {@code JavaClassSource} using the supplied
 	 * {@link Class javaClass}.
 	 *
-	 * @param javaClass the Java class; must not be null
+	 * @param javaClass the Java class; must not be {@code null}
 	 */
 	public JavaClassSource(Class<?> javaClass) {
 		this.javaClass = Preconditions.notNull(javaClass, "class must not be null");

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/JavaMethodSource.java
Patch:
@@ -44,7 +44,7 @@ public class JavaMethodSource implements JavaSource {
 	 * Create a new {@code JavaMethodSource} using the supplied
 	 * {@link Method method}.
 	 *
-	 * @param method the Java method; must not be null
+	 * @param method the Java method; must not be {@code null}
 	 */
 	public JavaMethodSource(Method method) {
 		Preconditions.notNull(method, "method must not be null");
@@ -72,7 +72,7 @@ public final String getJavaMethodName() {
 	}
 
 	/**
-	 * Get the method's parameter types of this source.
+	 * Get the method parameter types of this source.
 	 *
 	 * @see Method#getParameterTypes()
 	 */

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/JavaPackageSource.java
Patch:
@@ -37,7 +37,7 @@ public class JavaPackageSource implements JavaSource {
 	 * Create a new {@code JavaPackageSource} using the supplied
 	 * {@link Package javaPackage}.
 	 *
-	 * @param javaPackage the Java package; must not be null
+	 * @param javaPackage the Java package; must not be {@code null}
 	 */
 	public JavaPackageSource(Package javaPackage) {
 		this(Preconditions.notNull(javaPackage, "package must not be null").getName());
@@ -47,7 +47,7 @@ public JavaPackageSource(Package javaPackage) {
 	 * Create a new {@code JavaPackageSource} using the supplied
 	 * {@code packageName}.
 	 *
-	 * @param packageName the Java package name; must not be null or empty
+	 * @param packageName the Java package name; must not be {@code null} or empty
 	 */
 	public JavaPackageSource(String packageName) {
 		this.packageName = Preconditions.notBlank(packageName, "package name must not be null or empty");

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/UriSource.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.gen5.engine.TestSource;
 
 /**
- * A {@link TestSource} that can be represented as an {@link URI}.
+ * A {@link TestSource} that can be represented as a {@link URI}.
  *
  * @since 5.0
  */
@@ -27,6 +27,8 @@ public interface UriSource extends TestSource {
 
 	/**
 	 * Get the {@link URI} that represents this source.
+	 *
+	 * @return the source {@code URI}; never {@code null}
 	 */
 	URI getUri();
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -60,7 +60,7 @@ protected String determineDisplayName(AnnotatedElement element) {
 		return findAnnotation(element, DisplayName.class)
 				.map(DisplayName::value)
 				.filter(StringUtils::isNotBlank)
-				.orElse(generateDefaultDisplayName());
+				.orElseGet(() -> generateDefaultDisplayName());
 		// @formatter:on
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyEngineDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.dontSkip;
+import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.doNotSkip;
 import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.skip;
 
 import org.junit.gen5.engine.UniqueId;
@@ -41,7 +41,7 @@ public void setBeforeAllBehavior(Runnable beforeAllBehavior) {
 
 	@Override
 	public SkipResult shouldBeSkipped(DummyEngineExecutionContext context) {
-		return skipped ? skip(skippedReason) : dontSkip();
+		return skipped ? skip(skippedReason) : doNotSkip();
 	}
 
 	@Override

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.dontSkip;
+import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.doNotSkip;
 import static org.junit.gen5.engine.support.hierarchical.Node.SkipResult.skip;
 
 import org.junit.gen5.engine.UniqueId;
@@ -59,7 +59,7 @@ public void markSkipped(String reason) {
 
 	@Override
 	public SkipResult shouldBeSkipped(DummyEngineExecutionContext context) throws Exception {
-		return skipped ? skip(skippedReason) : dontSkip();
+		return skipped ? skip(skippedReason) : doNotSkip();
 	}
 
 	@Override

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -143,7 +143,7 @@ public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws E
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}
-		return SkipResult.dontSkip();
+		return SkipResult.doNotSkip();
 	}
 
 	@Override

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -134,7 +134,7 @@ public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws E
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}
-		return SkipResult.dontSkip();
+		return SkipResult.doNotSkip();
 	}
 
 	@Override

File: junit-engine-api/src/main/java/org/junit/gen5/engine/FilterResult.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.gen5.commons.util.ToStringBuilder;
 
 /**
- * The result of evaluating a {@link Filter}.
+ * The result of applying a {@link Filter}.
  *
  * @since 5.0
  */

File: junit-engine-api/src/main/java/org/junit/gen5/engine/UniqueIdFormat.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.gen5.engine.UniqueId.Segment;
 
 /**
- * Used to {@linkplain #parse parse} an {@link UniqueId} from a string representation
- * or to {@linkplain #format format} an {@link UniqueId} into a string representation.
+ * Used to {@linkplain #parse parse} a {@link UniqueId} from a string representation
+ * or to {@linkplain #format format} a {@link UniqueId} into a string representation.
  *
  * @since 5.0
  */

File: junit-launcher/src/main/java/org/junit/gen5/launcher/PostDiscoveryFilter.java
Patch:
@@ -21,8 +21,8 @@
  * A {@code PostDiscoveryFilter} is applied to {@link TestDescriptor TestDescriptors}
  * after test discovery.
  *
- * <p>A {@code PostDiscoveryFilter} must not be applied by a {@link TestEngine}
- * during test discovery.
+ * <p>{@link TestEngine TestEngines} must <strong>not</strong> apply
+ * {@code PostDiscoveryFilters} during the test discovery phase.
  *
  * @since 5.0
  * @see TestDiscoveryRequest

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/TestDiscoveryRequestBuilderTests.java
Patch:
@@ -231,7 +231,7 @@ public void exceptionForIllegalFilterClass() throws Exception {
 			PreconditionViolationException exception = expectThrows(PreconditionViolationException.class,
 				() -> request().filter(o -> excluded("reason")));
 
-			assertEquals("Filter must implement EngineIdFilter, PostDiscoveryFilter or DiscoveryFilter.",
+			assertEquals("Filter must implement EngineIdFilter, PostDiscoveryFilter, or DiscoveryFilter.",
 				exception.getMessage());
 		}
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java
Patch:
@@ -68,7 +68,7 @@ private static Iterable<TestEngine> validateUniqueIds(Iterable<TestEngine> testE
 
 	@Override
 	public void registerTestExecutionListeners(TestExecutionListener... listeners) {
-		listenerRegistry.registerListeners(listeners);
+		this.listenerRegistry.registerListeners(listeners);
 	}
 
 	@Override
@@ -108,7 +108,7 @@ private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {
 
 	private void execute(Root root, ConfigurationParameters configurationParameters) {
 		TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());
-		TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();
+		TestExecutionListener testExecutionListener = this.listenerRegistry.getCompositeTestExecutionListener();
 		testExecutionListener.testPlanExecutionStarted(testPlan);
 		ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan,
 			testExecutionListener);

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -16,6 +16,7 @@
 import static org.junit.gen5.engine.junit5.descriptor.LifecycleMethodUtils.findBeforeAllMethods;
 import static org.junit.gen5.engine.junit5.descriptor.LifecycleMethodUtils.findBeforeEachMethods;
 
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Set;
@@ -171,7 +172,8 @@ public JUnit5EngineExecutionContext afterAll(JUnit5EngineExecutionContext contex
 	protected TestInstanceProvider testInstanceProvider(JUnit5EngineExecutionContext parentExecutionContext,
 			ExtensionRegistry registry, ExtensionContext extensionContext) {
 		return () -> {
-			Object instance = ReflectionUtils.newInstance(this.testClass);
+			Constructor<?> constructor = ReflectionUtils.getDeclaredConstructor(this.testClass);
+			Object instance = new ExecutableInvoker(extensionContext, registry).invoke(constructor);
 			invokeTestInstancePostProcessors(instance, registry, extensionContext);
 			return instance;
 		};

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/FullLogging.java
Patch:
@@ -34,7 +34,7 @@
  *
  * <h3>Example Usage</h3>
  * <pre style="code">
- * {@literal @}FullLogging(MethodInvoker.class)
+ * {@literal @}FullLogging(ExecutableInvoker.class)
  * class MyTestClass { ... }
  * </pre>
  *

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/ExtensionRegistryTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ContainerExecutionCondition;
 import org.junit.gen5.api.extension.Extension;
-import org.junit.gen5.api.extension.MethodParameterResolver;
+import org.junit.gen5.api.extension.ParameterResolver;
 import org.junit.gen5.api.extension.TestExecutionCondition;
 
 /**
@@ -39,7 +39,7 @@ void newRegistryWithoutParentHasDefaultExtensions() {
 		assertExtensionRegistered(registry, TestInfoParameterResolver.class);
 		assertExtensionRegistered(registry, TestReporterParameterResolver.class);
 
-		assertEquals(2, countExtensions(registry, MethodParameterResolver.class));
+		assertEquals(2, countExtensions(registry, ParameterResolver.class));
 		assertEquals(1, countExtensions(registry, ContainerExecutionCondition.class));
 		assertEquals(1, countExtensions(registry, TestExecutionCondition.class));
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/AfterEach.java
Patch:
@@ -32,8 +32,8 @@
  * <p>{@code @AfterEach} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @AfterEach} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see BeforeEach

File: junit5-api/src/main/java/org/junit/gen5/api/BeforeEach.java
Patch:
@@ -32,8 +32,8 @@
  * <p>{@code @BeforeEach} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @BeforeEach} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see AfterEach

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -31,8 +31,8 @@
  * <p>{@code @Test} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @Test} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see TestInfo

File: junit5-api/src/main/java/org/junit/gen5/api/TestFactory.java
Patch:
@@ -34,8 +34,8 @@
  * <p>{@code @TestFactory} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @TestFactory} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see Test

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -38,7 +38,7 @@
  * <li>{@link BeforeTestExecutionCallback}</li>
  * <li>{@link AfterTestExecutionCallback}</li>
  * <li>{@link TestInstancePostProcessor}</li>
- * <li>{@link MethodParameterResolver}</li>
+ * <li>{@link ParameterResolver}</li>
  * <li>{@link TestExecutionExceptionHandler}</li>
  * </ul>
  *

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ParameterResolutionException.java
Patch:
@@ -17,10 +17,10 @@
 
 /**
  * Thrown if an error is encountered in the configuration or execution of a
- * {@link MethodParameterResolver}.
+ * {@link ParameterResolver}.
  *
  * @since 5.0
- * @see MethodParameterResolver
+ * @see ParameterResolver
  */
 @API(Experimental)
 public class ParameterResolutionException extends JUnitException {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.gen5.api.extension.BeforeEachCallback;
 import org.junit.gen5.api.extension.BeforeTestExecutionCallback;
 import org.junit.gen5.api.extension.ConditionEvaluationResult;
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.TestExecutionExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.meta.API;
@@ -37,6 +36,7 @@
 import org.junit.gen5.engine.junit5.execution.BeforeEachMethodAdapter;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
+import org.junit.gen5.engine.junit5.execution.MethodInvocationContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.ThrowableCollector;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.stream.StreamSupport;
 
 import org.junit.gen5.api.DynamicTest;
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.JUnitException;
 import org.junit.gen5.commons.meta.API;
@@ -32,6 +31,7 @@
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
+import org.junit.gen5.engine.junit5.execution.MethodInvocationContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.ThrowableCollector;
 import org.junit.gen5.engine.support.hierarchical.SingleTestExecutor;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvocationContext.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.api.extension;
+package org.junit.gen5.engine.junit5.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.gen5.commons.meta.API.Usage.Internal;
 
 import java.lang.reflect.Method;
 
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(Experimental)
+@API(Internal)
 public interface MethodInvocationContext {
 
 	Object getInstance();

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvocationContextFactory.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.commons.meta.API;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/ExtensionRegistryTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ContainerExecutionCondition;
 import org.junit.gen5.api.extension.Extension;
-import org.junit.gen5.api.extension.MethodParameterResolver;
+import org.junit.gen5.api.extension.ParameterResolver;
 import org.junit.gen5.api.extension.TestExecutionCondition;
 
 /**
@@ -39,7 +39,7 @@ void newRegistryWithoutParentHasDefaultExtensions() {
 		assertExtensionRegistered(registry, TestInfoParameterResolver.class);
 		assertExtensionRegistered(registry, TestReporterParameterResolver.class);
 
-		assertEquals(2, countExtensions(registry, MethodParameterResolver.class));
+		assertEquals(2, countExtensions(registry, ParameterResolver.class));
 		assertEquals(1, countExtensions(registry, ContainerExecutionCondition.class));
 		assertEquals(1, countExtensions(registry, TestExecutionCondition.class));
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/AfterEach.java
Patch:
@@ -32,8 +32,8 @@
  * <p>{@code @AfterEach} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @AfterEach} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see BeforeEach

File: junit5-api/src/main/java/org/junit/gen5/api/BeforeEach.java
Patch:
@@ -32,8 +32,8 @@
  * <p>{@code @BeforeEach} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @BeforeEach} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see AfterEach

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -31,8 +31,8 @@
  * <p>{@code @Test} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @Test} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see TestInfo

File: junit5-api/src/main/java/org/junit/gen5/api/TestFactory.java
Patch:
@@ -34,8 +34,8 @@
  * <p>{@code @TestFactory} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @TestFactory} methods may optionally declare parameters to be
- * resolved by {@link org.junit.gen5.api.extension.MethodParameterResolver
- * MethodParameterResolvers}.
+ * resolved by {@link org.junit.gen5.api.extension.ParameterResolver
+ * ParameterResolvers}.
  *
  * @since 5.0
  * @see Test

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -38,7 +38,7 @@
  * <li>{@link BeforeTestExecutionCallback}</li>
  * <li>{@link AfterTestExecutionCallback}</li>
  * <li>{@link TestInstancePostProcessor}</li>
- * <li>{@link MethodParameterResolver}</li>
+ * <li>{@link ParameterResolver}</li>
  * <li>{@link TestExecutionExceptionHandler}</li>
  * </ul>
  *

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ParameterResolutionException.java
Patch:
@@ -17,10 +17,10 @@
 
 /**
  * Thrown if an error is encountered in the configuration or execution of a
- * {@link MethodParameterResolver}.
+ * {@link ParameterResolver}.
  *
  * @since 5.0
- * @see MethodParameterResolver
+ * @see ParameterResolver
  */
 @API(Experimental)
 public class ParameterResolutionException extends JUnitException {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.gen5.api.extension.BeforeEachCallback;
 import org.junit.gen5.api.extension.BeforeTestExecutionCallback;
 import org.junit.gen5.api.extension.ConditionEvaluationResult;
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.TestExecutionExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.meta.API;
@@ -37,6 +36,7 @@
 import org.junit.gen5.engine.junit5.execution.BeforeEachMethodAdapter;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
+import org.junit.gen5.engine.junit5.execution.MethodInvocationContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.ThrowableCollector;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.stream.StreamSupport;
 
 import org.junit.gen5.api.DynamicTest;
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.JUnitException;
 import org.junit.gen5.commons.meta.API;
@@ -32,6 +31,7 @@
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
+import org.junit.gen5.engine.junit5.execution.MethodInvocationContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.ThrowableCollector;
 import org.junit.gen5.engine.support.hierarchical.SingleTestExecutor;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvocationContext.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.api.extension;
+package org.junit.gen5.engine.junit5.execution;
 
-import static org.junit.gen5.commons.meta.API.Usage.Experimental;
+import static org.junit.gen5.commons.meta.API.Usage.Internal;
 
 import java.lang.reflect.Method;
 
@@ -22,7 +22,7 @@
  *
  * @since 5.0
  */
-@API(Experimental)
+@API(Internal)
 public interface MethodInvocationContext {
 
 	Object getInstance();

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvocationContextFactory.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.commons.meta.API;
 
 /**

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -13,7 +13,7 @@
 import java.lang.reflect.Method;
 import java.util.logging.Logger;
 
-import org.junit.gen5.api.extension.AfterTestMethodCallback;
+import org.junit.gen5.api.extension.AfterTestExecutionCallback;
 import org.junit.gen5.api.extension.BeforeTestExecutionCallback;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
@@ -25,7 +25,7 @@
  *
  * @since 5.0
  */
-public class TimingExtension implements BeforeTestExecutionCallback, AfterTestMethodCallback {
+public class TimingExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {
 
 	private static final Logger LOG = Logger.getLogger(TimingExtension.class.getName());
 
@@ -35,7 +35,7 @@ public void beforeTestExecution(TestExtensionContext context) throws Exception {
 	}
 
 	@Override
-	public void afterTestMethod(TestExtensionContext context) throws Exception {
+	public void afterTestExecution(TestExtensionContext context) throws Exception {
 		Method testMethod = context.getTestMethod().get();
 		long start = (long) getStore(context).remove(testMethod);
 		long duration = System.currentTimeMillis() - start;

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllCallback.java
Patch:
@@ -29,7 +29,7 @@
  * @see BeforeEachCallback
  * @see AfterEachCallback
  * @see BeforeTestExecutionCallback
- * @see AfterTestMethodCallback
+ * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
 @API(Experimental)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachCallback.java
Patch:
@@ -32,7 +32,7 @@
  * @see org.junit.gen5.api.AfterEach
  * @see BeforeEachCallback
  * @see BeforeTestExecutionCallback
- * @see AfterTestMethodCallback
+ * @see AfterTestExecutionCallback
  * @see BeforeAllCallback
  * @see AfterAllCallback
  */

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeAllCallback.java
Patch:
@@ -29,7 +29,7 @@
  * @see BeforeEachCallback
  * @see AfterEachCallback
  * @see BeforeTestExecutionCallback
- * @see AfterTestMethodCallback
+ * @see AfterTestExecutionCallback
  */
 @FunctionalInterface
 @API(Experimental)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachCallback.java
Patch:
@@ -30,7 +30,7 @@
  * @see org.junit.gen5.api.BeforeEach
  * @see AfterEachCallback
  * @see BeforeTestExecutionCallback
- * @see AfterTestMethodCallback
+ * @see AfterTestExecutionCallback
  * @see BeforeAllCallback
  * @see AfterAllCallback
  */

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeTestExecutionCallback.java
Patch:
@@ -22,13 +22,14 @@
  * <p>Such callbacks will be invoked after any user defined setup methods (e.g.,
  * {@link org.junit.gen5.api.BeforeEach @BeforeEach} methods).
  *
- * <p>Concrete implementations often implement {@link AfterTestMethodCallback} as well.
+ * <p>Concrete implementations often implement {@link AfterTestExecutionCallback}
+ * as well.
  *
  * <p>Implementations must provide a no-args constructor.
  *
  * @since 5.0
  * @see org.junit.gen5.api.Test
- * @see AfterTestMethodCallback
+ * @see AfterTestExecutionCallback
  * @see BeforeEachCallback
  * @see AfterEachCallback
  * @see BeforeAllCallback

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -36,7 +36,7 @@
  * <li>{@link BeforeEachCallback}</li>
  * <li>{@link AfterEachCallback}</li>
  * <li>{@link BeforeTestExecutionCallback}</li>
- * <li>{@link AfterTestMethodCallback}</li>
+ * <li>{@link AfterTestExecutionCallback}</li>
  * <li>{@link TestInstancePostProcessor}</li>
  * <li>{@link MethodParameterResolver}</li>
  * <li>{@link TestExecutionExceptionHandler}</li>

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.logging.Logger;
 
 import org.junit.gen5.api.extension.AfterTestMethodCallback;
-import org.junit.gen5.api.extension.BeforeTestMethodCallback;
+import org.junit.gen5.api.extension.BeforeTestExecutionCallback;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
 import org.junit.gen5.api.extension.TestExtensionContext;
@@ -25,12 +25,12 @@
  *
  * @since 5.0
  */
-public class TimingExtension implements BeforeTestMethodCallback, AfterTestMethodCallback {
+public class TimingExtension implements BeforeTestExecutionCallback, AfterTestMethodCallback {
 
 	private static final Logger LOG = Logger.getLogger(TimingExtension.class.getName());
 
 	@Override
-	public void beforeTestMethod(TestExtensionContext context) throws Exception {
+	public void beforeTestExecution(TestExtensionContext context) throws Exception {
 		getStore(context).put(context.getTestMethod().get(), System.currentTimeMillis());
 	}
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllCallback.java
Patch:
@@ -28,7 +28,7 @@
  * @see BeforeAllCallback
  * @see BeforeEachCallback
  * @see AfterEachCallback
- * @see BeforeTestMethodCallback
+ * @see BeforeTestExecutionCallback
  * @see AfterTestMethodCallback
  */
 @FunctionalInterface

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachCallback.java
Patch:
@@ -31,7 +31,7 @@
  * @since 5.0
  * @see org.junit.gen5.api.AfterEach
  * @see BeforeEachCallback
- * @see BeforeTestMethodCallback
+ * @see BeforeTestExecutionCallback
  * @see AfterTestMethodCallback
  * @see BeforeAllCallback
  * @see AfterAllCallback

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterTestMethodCallback.java
Patch:
@@ -22,13 +22,13 @@
  * <p>Such callbacks will be invoked before any user defined teardown methods (e.g.,
  * {@link org.junit.gen5.api.AfterEach @AfterEach} methods).
  *
- * <p>Concrete implementations often implement {@link BeforeTestMethodCallback} as well.
+ * <p>Concrete implementations often implement {@link BeforeTestExecutionCallback} as well.
  *
  * <p>Implementations must provide a no-args constructor.
  *
  * @since 5.0
  * @see org.junit.gen5.api.Test
- * @see BeforeTestMethodCallback
+ * @see BeforeTestExecutionCallback
  * @see BeforeEachCallback
  * @see AfterEachCallback
  * @see BeforeAllCallback

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeAllCallback.java
Patch:
@@ -28,7 +28,7 @@
  * @see AfterAllCallback
  * @see BeforeEachCallback
  * @see AfterEachCallback
- * @see BeforeTestMethodCallback
+ * @see BeforeTestExecutionCallback
  * @see AfterTestMethodCallback
  */
 @FunctionalInterface

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachCallback.java
Patch:
@@ -29,7 +29,7 @@
  * @since 5.0
  * @see org.junit.gen5.api.BeforeEach
  * @see AfterEachCallback
- * @see BeforeTestMethodCallback
+ * @see BeforeTestExecutionCallback
  * @see AfterTestMethodCallback
  * @see BeforeAllCallback
  * @see AfterAllCallback

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -35,7 +35,7 @@
  * <li>{@link AfterAllCallback}</li>
  * <li>{@link BeforeEachCallback}</li>
  * <li>{@link AfterEachCallback}</li>
- * <li>{@link BeforeTestMethodCallback}</li>
+ * <li>{@link BeforeTestExecutionCallback}</li>
  * <li>{@link AfterTestMethodCallback}</li>
  * <li>{@link TestInstancePostProcessor}</li>
  * <li>{@link MethodParameterResolver}</li>

File: documentation/src/test/java/example/exception/IgnoreIOExceptionExtension.java
Patch:
@@ -12,15 +12,15 @@
 
 import java.io.IOException;
 
-import org.junit.gen5.api.extension.ExceptionHandler;
+import org.junit.gen5.api.extension.TestExecutionExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
 // @formatter:off
 // tag::user_guide[]
-public class IgnoreIOExceptionExtension implements ExceptionHandler {
+public class IgnoreIOExceptionExtension implements TestExecutionExceptionHandler {
 
 	@Override
-	public void handleException(TestExtensionContext context, Throwable throwable)
+	public void handleTestExecutionException(TestExtensionContext context, Throwable throwable)
 			throws Throwable {
 
 		if (throwable instanceof IOException) {

File: documentation/src/test/java/extensions/ExpectToFailExtension.java
Patch:
@@ -13,15 +13,15 @@
 import static org.junit.gen5.api.Assertions.assertNotNull;
 
 import org.junit.gen5.api.extension.AfterEachCallback;
-import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
+import org.junit.gen5.api.extension.TestExecutionExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class ExpectToFailExtension implements ExceptionHandler, AfterEachCallback {
+public class ExpectToFailExtension implements TestExecutionExceptionHandler, AfterEachCallback {
 
 	@Override
-	public void handleException(TestExtensionContext context, Throwable throwable) throws Throwable {
+	public void handleTestExecutionException(TestExtensionContext context, Throwable throwable) throws Throwable {
 		getExceptionStore(context).put("exception", throwable);
 	}
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -39,7 +39,7 @@
  * <li>{@link AfterTestMethodCallback}</li>
  * <li>{@link TestInstancePostProcessor}</li>
  * <li>{@link MethodParameterResolver}</li>
- * <li>{@link ExceptionHandler}</li>
+ * <li>{@link TestExecutionExceptionHandler}</li>
  * </ul>
  *
  * @since 5.0

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -37,7 +37,7 @@
  * <li>{@link AfterEachCallback}</li>
  * <li>{@link BeforeTestMethodCallback}</li>
  * <li>{@link AfterTestMethodCallback}</li>
- * <li>{@link InstancePostProcessor}</li>
+ * <li>{@link TestInstancePostProcessor}</li>
  * <li>{@link MethodParameterResolver}</li>
  * <li>{@link ExceptionHandler}</li>
  * </ul>

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestInstancePostProcessor.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code InstancePostProcessor} defines the API for {@link Extension
+ * {@code TestInstancePostProcessor} defines the API for {@link Extension
  * Extensions} that wish to <em>post-process</em> test instances.
  *
  * <p>Common use cases include injecting dependencies into the test
@@ -27,7 +27,7 @@
  * @since 5.0
  */
 @API(Experimental)
-public interface InstancePostProcessor extends Extension {
+public interface TestInstancePostProcessor extends Extension {
 
 	/**
 	 * Callback for post-processing the supplied test instance.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -49,7 +49,7 @@ protected TestInstanceProvider testInstanceProvider(JUnit5EngineExecutionContext
 		return () -> {
 			Object outerInstance = parentExecutionContext.getTestInstanceProvider().getTestInstance();
 			Object instance = ReflectionUtils.newInstance(getTestClass(), outerInstance);
-			invokeInstancePostProcessors(instance, registry, extensionContext);
+			invokeTestInstancePostProcessors(instance, registry, extensionContext);
 			return instance;
 		};
 	}

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -25,7 +25,7 @@ class TestInfoDemo {
 	@BeforeEach
 	void init(TestInfo testInfo) {
 		String displayName = testInfo.getDisplayName();
-		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2"));
+		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2()"));
 	}
 
 	@Test

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -31,12 +31,12 @@ public class TimingExtension implements BeforeTestMethodCallback, AfterTestMetho
 
 	@Override
 	public void beforeTestMethod(TestExtensionContext context) throws Exception {
-		getStore(context).put(context.getTestMethod(), System.currentTimeMillis());
+		getStore(context).put(context.getTestMethod().get(), System.currentTimeMillis());
 	}
 
 	@Override
 	public void afterTestMethod(TestExtensionContext context) throws Exception {
-		Method testMethod = context.getTestMethod();
+		Method testMethod = context.getTestMethod().get();
 		long start = (long) getStore(context).remove(testMethod);
 		long duration = System.currentTimeMillis() - start;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -32,7 +32,7 @@
 @API(Experimental)
 public abstract class AbstractTestDescriptor implements TestDescriptor {
 
-	private UniqueId uniqueId;
+	private final UniqueId uniqueId;
 
 	private TestDescriptor parent;
 
@@ -41,7 +41,7 @@ public abstract class AbstractTestDescriptor implements TestDescriptor {
 	private final Set<TestDescriptor> children = new LinkedHashSet<>();
 
 	protected AbstractTestDescriptor(UniqueId uniqueId) {
-		this.uniqueId = Preconditions.notNull(uniqueId, "uniqueId must not be null");
+		this.uniqueId = Preconditions.notNull(uniqueId, "UniqueId must not be null");
 	}
 
 	@Override

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -613,7 +613,6 @@ private static void assertRunnerTestDescriptor(TestDescriptor runnerDescriptor,
 		assertTrue(runnerDescriptor.isContainer());
 		assertFalse(runnerDescriptor.isTest());
 		assertEquals(testClass.getName(), runnerDescriptor.getDisplayName());
-		assertEquals(testClass.getName(), runnerDescriptor.getName());
 		assertEquals(uniqueIdForClass(testClass), runnerDescriptor.getUniqueId());
 		assertClassSource(testClass, runnerDescriptor);
 	}
@@ -623,7 +622,6 @@ private static void assertTestMethodDescriptor(TestDescriptor testMethodDescript
 		assertTrue(testMethodDescriptor.isTest());
 		assertFalse(testMethodDescriptor.isContainer());
 		assertEquals(methodName, testMethodDescriptor.getDisplayName());
-		assertEquals(methodName + "(" + testClass.getName() + ")", testMethodDescriptor.getName());
 		assertEquals(uniqueIdForMethod(uniqueContainerId, testClass, methodName), testMethodDescriptor.getUniqueId());
 		assertThat(testMethodDescriptor.getChildren()).isEmpty();
 		assertMethodSource(testClass.getMethod(methodName), testMethodDescriptor);
@@ -634,7 +632,6 @@ private static void assertContainerTestDescriptor(TestDescriptor containerDescri
 		assertTrue(containerDescriptor.isContainer());
 		assertFalse(containerDescriptor.isTest());
 		assertEquals(testClass.getName(), containerDescriptor.getDisplayName());
-		assertEquals(testClass.getName(), containerDescriptor.getName());
 		assertEquals(uniqueIdForClasses(suiteClass, testClass), containerDescriptor.getUniqueId());
 		assertClassSource(testClass, containerDescriptor);
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExtensionContext.java
Patch:
@@ -12,8 +12,6 @@
 
 import static org.junit.gen5.commons.meta.API.Usage.Experimental;
 
-import java.lang.reflect.Method;
-
 import org.junit.gen5.commons.meta.API;
 
 /**
@@ -27,5 +25,4 @@ public interface TestExtensionContext extends ExtensionContext {
 
 	Object getTestInstance();
 
-	Method getTestMethod();
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -69,7 +69,7 @@ protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtens
 
 		throwableCollector.execute(() -> {
 			MethodInvocationContext methodInvocationContext = methodInvocationContext(
-				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());
+				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());
 
 			MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());
 			Object testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java
Patch:
@@ -69,7 +69,7 @@ protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtens
 
 		throwableCollector.execute(() -> {
 			MethodInvocationContext methodInvocationContext = methodInvocationContext(
-				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());
+				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());
 
 			MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());
 			Object testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);

File: documentation/src/test/java/example/TestInfoDemo.java
Patch:
@@ -25,7 +25,7 @@ class TestInfoDemo {
 	@BeforeEach
 	void init(TestInfo testInfo) {
 		String displayName = testInfo.getDisplayName();
-		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2"));
+		assertTrue(displayName.equals("TEST 1") || displayName.equals("test2()"));
 	}
 
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptorTests.java
Patch:
@@ -45,7 +45,7 @@ public void constructFromMethod() throws Exception {
 
 		assertEquals(UniqueId.root("method", "a method id"), descriptor.getUniqueId());
 		assertEquals(testMethod, descriptor.getTestMethod());
-		assertEquals("test", descriptor.getDisplayName(), "display name:");
+		assertEquals("test()", descriptor.getDisplayName(), "display name:");
 	}
 
 	@Test
@@ -98,7 +98,7 @@ public void constructFromMethodWithParameters() throws Exception {
 			ASampleTestCase.class, testMethod);
 
 		assertEquals(testMethod, descriptor.getTestMethod());
-		assertEquals("test", descriptor.getDisplayName(), "display name:");
+		assertEquals("test(String, BigDecimal)", descriptor.getDisplayName(), "display name:");
 	}
 
 	@Tag("classTag1")

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -74,7 +74,7 @@ public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass) {
 		super(uniqueId);
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
-		this.displayName = determineDisplayName(testClass, testClass.getName());
+		this.displayName = determineDisplayName(testClass, () -> testClass.getName());
 
 		this.beforeAllMethods = findBeforeAllMethods(testClass);
 		this.afterAllMethods = findAfterAllMethods(testClass);

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.function.Supplier;
 
 import org.junit.gen5.api.DisplayName;
 import org.junit.gen5.api.Executable;
@@ -55,12 +56,12 @@ protected Set<TestTag> getTags(AnnotatedElement element) {
 		// @formatter:on
 	}
 
-	protected String determineDisplayName(AnnotatedElement element, String defaultName) {
+	protected String determineDisplayName(AnnotatedElement element, Supplier<String> defaultNameGenerator) {
 		// @formatter:off
 		return findAnnotation(element, DisplayName.class)
 				.map(DisplayName::value)
 				.filter(StringUtils::isNotBlank)
-				.orElse(defaultName);
+				.orElse(defaultNameGenerator.get());
 		// @formatter:on
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -613,7 +613,6 @@ private static void assertRunnerTestDescriptor(TestDescriptor runnerDescriptor,
 		assertTrue(runnerDescriptor.isContainer());
 		assertFalse(runnerDescriptor.isTest());
 		assertEquals(testClass.getName(), runnerDescriptor.getDisplayName());
-		assertEquals(testClass.getName(), runnerDescriptor.getName());
 		assertEquals(uniqueIdForClass(testClass), runnerDescriptor.getUniqueId());
 		assertClassSource(testClass, runnerDescriptor);
 	}
@@ -623,7 +622,6 @@ private static void assertTestMethodDescriptor(TestDescriptor testMethodDescript
 		assertTrue(testMethodDescriptor.isTest());
 		assertFalse(testMethodDescriptor.isContainer());
 		assertEquals(methodName, testMethodDescriptor.getDisplayName());
-		assertEquals(methodName + "(" + testClass.getName() + ")", testMethodDescriptor.getName());
 		assertEquals(uniqueIdForMethod(uniqueContainerId, testClass, methodName), testMethodDescriptor.getUniqueId());
 		assertThat(testMethodDescriptor.getChildren()).isEmpty();
 		assertMethodSource(testClass.getMethod(methodName), testMethodDescriptor);
@@ -634,7 +632,6 @@ private static void assertContainerTestDescriptor(TestDescriptor containerDescri
 		assertTrue(containerDescriptor.isContainer());
 		assertFalse(containerDescriptor.isTest());
 		assertEquals(testClass.getName(), containerDescriptor.getDisplayName());
-		assertEquals(testClass.getName(), containerDescriptor.getName());
 		assertEquals(uniqueIdForClasses(suiteClass, testClass), containerDescriptor.getUniqueId());
 		assertClassSource(testClass, containerDescriptor);
 	}

File: junit-tests/src/test/java/org/junit/gen5/launcher/TestIdentifierTests.java
Patch:
@@ -24,9 +24,7 @@ class TestIdentifierTests {
 
 	@Test
 	void inheritsIdAndNamesFromDescriptor() {
-		TestDescriptor testDescriptor = new TestDescriptorStub(UniqueId.root("aType", "uniqueId"), "name",
-			"displayName");
-
+		TestDescriptor testDescriptor = new TestDescriptorStub(UniqueId.root("aType", "uniqueId"), "displayName");
 		TestIdentifier testIdentifier = TestIdentifier.from(testDescriptor);
 
 		assertEquals("[aType:uniqueId]", testIdentifier.getUniqueId());

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -31,12 +31,12 @@ public class TimingExtension implements BeforeTestMethodCallback, AfterTestMetho
 
 	@Override
 	public void beforeTestMethod(TestExtensionContext context) throws Exception {
-		getStore(context).put(context.getTestMethod(), System.currentTimeMillis());
+		getStore(context).put(context.getTestMethod().get(), System.currentTimeMillis());
 	}
 
 	@Override
 	public void afterTestMethod(TestExtensionContext context) throws Exception {
-		Method testMethod = context.getTestMethod();
+		Method testMethod = context.getTestMethod().get();
 		long start = (long) getStore(context).remove(testMethod);
 		long duration = System.currentTimeMillis() - start;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExtensionContext.java
Patch:
@@ -12,8 +12,6 @@
 
 import static org.junit.gen5.commons.meta.API.Usage.Experimental;
 
-import java.lang.reflect.Method;
-
 import org.junit.gen5.commons.meta.API;
 
 /**
@@ -27,5 +25,4 @@ public interface TestExtensionContext extends ExtensionContext {
 
 	Object getTestInstance();
 
-	Method getTestMethod();
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -180,7 +180,7 @@ protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtens
 
 		throwableCollector.execute(() -> {
 			MethodInvocationContext methodInvocationContext = methodInvocationContext(
-				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());
+				testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());
 			try {
 				new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);
 			}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/JavaMethodSource.java
Patch:
@@ -68,7 +68,7 @@ public boolean equals(Object o) {
 
 	@Override
 	public int hashCode() {
-		return Objects.hash(javaClass, javaMethodName, javaMethodParameterTypes);
+		return Objects.hash(this.javaClass, this.javaMethodName) + Arrays.hashCode(this.javaMethodParameterTypes);
 	}
 
 	@Override

File: junit-tests/src/test/java/org/junit/gen5/engine/support/descriptor/JavaSourceTests.java
Patch:
@@ -108,6 +108,7 @@ void equalsAndHashCodeForJavaMethodSource(TestInfo testInfo) throws Exception {
 
 		assertNotSame(source1, source2);
 		assertEquals(source1, source2);
+		assertEquals(source1.hashCode(), source2.hashCode());
 	}
 
 	void exampleMethod(String text) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -55,7 +55,8 @@ private void applyDiscoveryFilters(EngineDiscoveryRequest discoveryRequest,
 
 	@Override
 	protected JUnit5EngineExecutionContext createExecutionContext(ExecutionRequest request) {
-		return new JUnit5EngineExecutionContext(request.getEngineExecutionListener());
+		return new JUnit5EngineExecutionContext(request.getEngineExecutionListener(),
+			request.getConfigurationParameters());
 	}
 
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -136,7 +136,8 @@ public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context
 	@Override
 	public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception {
 		ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(
-			context.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());
+			context.getExtensionRegistry(), context.getConfigurationParameters(),
+			(ContainerExtensionContext) context.getExtensionContext());
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -132,7 +132,7 @@ public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context
 	@Override
 	public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception {
 		ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForTest(context.getExtensionRegistry(),
-			(TestExtensionContext) context.getExtensionContext());
+			context.getConfigurationParameters(), (TestExtensionContext) context.getExtensionContext());
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -55,7 +55,8 @@ private void applyDiscoveryFilters(EngineDiscoveryRequest discoveryRequest,
 
 	@Override
 	protected JUnit5EngineExecutionContext createExecutionContext(ExecutionRequest request) {
-		return new JUnit5EngineExecutionContext(request.getEngineExecutionListener());
+		return new JUnit5EngineExecutionContext(request.getEngineExecutionListener(),
+			request.getConfigurationParameters());
 	}
 
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -136,7 +136,8 @@ public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context
 	@Override
 	public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception {
 		ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(
-			context.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());
+			context.getExtensionRegistry(), context.getConfigurationParameters(),
+			(ContainerExtensionContext) context.getExtensionContext());
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -132,7 +132,7 @@ public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context
 	@Override
 	public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception {
 		ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForTest(context.getExtensionRegistry(),
-			(TestExtensionContext) context.getExtensionContext());
+			context.getConfigurationParameters(), (TestExtensionContext) context.getExtensionContext());
 		if (evaluationResult.isDisabled()) {
 			return SkipResult.skip(evaluationResult.getReason().orElse("<unknown>"));
 		}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestInstanceProvider.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.gen5.commons.meta.API;
 
+/**
+ * @since 5.0
+ */
 @FunctionalInterface
 @API(Internal)
 public interface TestInstanceProvider {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestInstanceProvider.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.gen5.commons.meta.API;
 
+/**
+ * @since 5.0
+ */
 @FunctionalInterface
 @API(Internal)
 public interface TestInstanceProvider {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/UniqueId.java
Patch:
@@ -38,8 +38,10 @@ public class UniqueId implements Cloneable {
 	 * Parse a {@code UniqueId} from the supplied string representation using the
 	 * default format.
 	 *
+	 * <p>Throws a {@link org.junit.gen5.commons.JUnitException JUnitException}
+	 * if the string cannot be parsed.
+	 *
 	 * @return a properly constructed {@code UniqueId}
-	 * @throws org.junit.gen5.commons.JUnitException if the string cannot be parsed
 	 */
 	public static UniqueId parse(String uniqueIdString) {
 		return UniqueIdFormat.getDefault().parse(uniqueIdString);

File: documentation/src/test/java/example/exception/IgnoreIOExceptionExtension.java
Patch:
@@ -12,12 +12,12 @@
 
 import java.io.IOException;
 
-import org.junit.gen5.api.extension.ExceptionHandlerExtensionPoint;
+import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
 // @formatter:off
 // tag::user_guide[]
-public class IgnoreIOExceptionExtension implements ExceptionHandlerExtensionPoint {
+public class IgnoreIOExceptionExtension implements ExceptionHandler {
 
 	@Override
 	public void handleException(TestExtensionContext context, Throwable throwable)

File: documentation/src/test/java/extensions/ExpectToFailExtension.java
Patch:
@@ -12,13 +12,13 @@
 
 import static org.junit.gen5.api.Assertions.assertNotNull;
 
-import org.junit.gen5.api.extension.AfterEachExtensionPoint;
-import org.junit.gen5.api.extension.ExceptionHandlerExtensionPoint;
+import org.junit.gen5.api.extension.AfterEachCallback;
+import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class ExpectToFailExtension implements ExceptionHandlerExtensionPoint, AfterEachExtensionPoint {
+public class ExpectToFailExtension implements ExceptionHandler, AfterEachCallback {
 
 	@Override
 	public void handleException(TestExtensionContext context, Throwable throwable) throws Throwable {

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/TempDirectory.java
Patch:
@@ -23,15 +23,15 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 
-import org.junit.gen5.api.extension.AfterEachExtensionPoint;
+import org.junit.gen5.api.extension.AfterEachCallback;
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.api.extension.ParameterResolutionException;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class TempDirectory implements AfterEachExtensionPoint, MethodParameterResolver {
+public class TempDirectory implements AfterEachCallback, MethodParameterResolver {
 
 	@Target(ElementType.PARAMETER)
 	@Retention(RetentionPolicy.RUNTIME)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ContainerExecutionCondition.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code ContainerExecutionCondition} defines an {@link ExtensionPoint} for
+ * {@code ContainerExecutionCondition} defines the {@link Extension} API for
  * programmatic, <em>conditional container execution</em>.
  *
  * <p>A {@code ContainerExecutionCondition} is {@linkplain #evaluate evaluated}
@@ -30,7 +30,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface ContainerExecutionCondition extends ExtensionPoint {
+public interface ContainerExecutionCondition extends Extension {
 
 	/**
 	 * Evaluate this condition for the supplied {@link ContainerExtensionContext}.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/InstancePostProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * @since 5.0
  */
 @API(Experimental)
-public interface InstancePostProcessor extends ExtensionPoint {
+public interface InstancePostProcessor extends Extension {
 
 	/**
 	 * Callback for post-processing the test instance in the supplied

File: junit5-api/src/main/java/org/junit/gen5/api/extension/MethodParameterResolver.java
Patch:
@@ -32,7 +32,7 @@
  * @since 5.0
  */
 @API(Experimental)
-public interface MethodParameterResolver extends ExtensionPoint {
+public interface MethodParameterResolver extends Extension {
 
 	/**
 	 * Determine if this resolver supports resolution of the given {@link Parameter}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionCondition.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code TestExecutionCondition} defines an {@link ExtensionPoint} for
+ * {@code TestExecutionCondition} defines the {@link Extension} API for
  * programmatic, <em>conditional test execution</em>.
  *
  * <p>A {@code TestExecutionCondition} is {@linkplain #evaluate evaluated}
@@ -30,7 +30,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface TestExecutionCondition extends ExtensionPoint {
+public interface TestExecutionCondition extends Extension {
 
 	/**
 	 * Evaluate this condition for the supplied {@link TestExtensionContext}.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;
-import org.junit.gen5.engine.junit5.extension.RegisteredExtensionPoint;
 
 /**
  * {@code MethodInvoker} encapsulates the invocation of a method, including
@@ -76,8 +75,7 @@ private Object resolveParameter(Parameter parameter, MethodInvocationContext met
 		try {
 			// @formatter:off
 			List<MethodParameterResolver> matchingResolvers = extensionRegistry.stream(MethodParameterResolver.class)
-					.map(RegisteredExtensionPoint::getExtensionPoint)
-					.filter(extensionPoint -> extensionPoint.supports(parameter, methodInvocationContext, extensionContext))
+					.filter(extension -> extension.supports(parameter, methodInvocationContext, extensionContext))
 					.collect(toList());
 			// @formatter:on
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/Extension.java
Patch:
@@ -18,11 +18,9 @@
  * Marker interface for all extensions.
  *
  * <p>An {@code Extension} can be registered declaratively via
- * {@link ExtendWith @ExtendWith} or programmatically via an
- * {@link ExtensionRegistrar}.
+ * {@link ExtendWith @ExtendWith}.
  *
  * @since 5.0
- * @see ExtensionRegistrar
  */
 @API(Experimental)
 public interface Extension {

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllCallback.java
Patch:
@@ -31,7 +31,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface AfterAllCallback extends ExtensionPoint {
+public interface AfterAllCallback extends Extension {
 
 	/**
 	 * Callback that is invoked once <em>after</em> all tests in the current

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachCallback.java
Patch:
@@ -36,7 +36,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface AfterEachCallback extends ExtensionPoint {
+public interface AfterEachCallback extends Extension {
 
 	/**
 	 * Callback that is invoked <em>after</em> each test has been invoked.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterTestMethodCallback.java
Patch:
@@ -36,7 +36,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface AfterTestMethodCallback extends ExtensionPoint {
+public interface AfterTestMethodCallback extends Extension {
 
 	/**
 	 * Callback that is invoked <em>after</em> each test method has been invoked.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeAllCallback.java
Patch:
@@ -31,7 +31,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface BeforeAllCallback extends ExtensionPoint {
+public interface BeforeAllCallback extends Extension {
 
 	/**
 	 * Callback that is invoked once <em>before</em> all tests in the current

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachCallback.java
Patch:
@@ -34,7 +34,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface BeforeEachCallback extends ExtensionPoint {
+public interface BeforeEachCallback extends Extension {
 
 	/**
 	 * Callback that is invoked <em>before</em> each test is invoked.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeTestMethodCallback.java
Patch:
@@ -36,7 +36,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface BeforeTestMethodCallback extends ExtensionPoint {
+public interface BeforeTestMethodCallback extends Extension {
 
 	/**
 	 * Callback that is invoked <em>before</em> each test method is invoked.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ContainerExecutionCondition.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code ContainerExecutionCondition} defines an {@link ExtensionPoint} for
+ * {@code ContainerExecutionCondition} defines an {@link Extension} for
  * programmatic, <em>conditional container execution</em>.
  *
  * <p>A {@code ContainerExecutionCondition} is {@linkplain #evaluate evaluated}
@@ -30,7 +30,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface ContainerExecutionCondition extends ExtensionPoint {
+public interface ContainerExecutionCondition extends Extension {
 
 	/**
 	 * Evaluate this condition for the supplied {@link ContainerExtensionContext}.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExceptionHandler.java
Patch:
@@ -27,7 +27,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface ExceptionHandler extends ExtensionPoint {
+public interface ExceptionHandler extends Extension {
 
 	/**
 	 * Handle the supplied {@link Throwable throwable}.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/Extension.java
Patch:
@@ -22,7 +22,6 @@
  * {@link ExtensionRegistrar}.
  *
  * @since 5.0
- * @see ExtensionPoint
  * @see ExtensionRegistrar
  */
 @API(Experimental)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * Interface to be implemented by {@linkplain Extension extensions} that
- * wish to programmatically register {@link ExtensionPoint} implementations
+ * wish to programmatically register {@code Extension} implementations
  * in the {@link ExtensionPointRegistry} &mdash; for example, if a
  * {@link ExtensionPointRegistry.Position Position} other than
  * {@link ExtensionPointRegistry.Position#DEFAULT DEFAULT} is desired.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/InstancePostProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * @since 5.0
  */
 @API(Experimental)
-public interface InstancePostProcessor extends ExtensionPoint {
+public interface InstancePostProcessor extends Extension {
 
 	/**
 	 * Callback for post-processing the test instance in the supplied

File: junit5-api/src/main/java/org/junit/gen5/api/extension/MethodParameterResolver.java
Patch:
@@ -32,7 +32,7 @@
  * @since 5.0
  */
 @API(Experimental)
-public interface MethodParameterResolver extends ExtensionPoint {
+public interface MethodParameterResolver extends Extension {
 
 	/**
 	 * Determine if this resolver supports resolution of the given {@link Parameter}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionCondition.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.gen5.commons.meta.API;
 
 /**
- * {@code TestExecutionCondition} defines an {@link ExtensionPoint} for
+ * {@code TestExecutionCondition} defines an {@link Extension} for
  * programmatic, <em>conditional test execution</em>.
  *
  * <p>A {@code TestExecutionCondition} is {@linkplain #evaluate evaluated}
@@ -30,7 +30,7 @@
  */
 @FunctionalInterface
 @API(Experimental)
-public interface TestExecutionCondition extends ExtensionPoint {
+public interface TestExecutionCondition extends Extension {
 
 	/**
 	 * Evaluate this condition for the supplied {@link TestExtensionContext}.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -30,8 +30,8 @@
 import org.junit.gen5.api.extension.BeforeEachCallback;
 import org.junit.gen5.api.extension.ConditionEvaluationResult;
 import org.junit.gen5.api.extension.ContainerExtensionContext;
+import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.api.extension.ExtensionConfigurationException;
-import org.junit.gen5.api.extension.ExtensionPoint;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.commons.util.Preconditions;
@@ -195,13 +195,13 @@ private void registerAfterEachMethods(ExtensionRegistry extensionRegistry) {
 	private void registerAnnotatedMethodsAsExtensions(ExtensionRegistry extensionRegistry,
 			Class<? extends Annotation> annotationType, Class<?> extensionType,
 			BiConsumer<Class<?>, Method> methodValidator,
-			BiFunction<ExtensionRegistry, Method, ExtensionPoint> extensionPointSynthesizer) {
+			BiFunction<ExtensionRegistry, Method, Extension> extensionSynthesizer) {
 
 		// @formatter:off
 		findAnnotatedMethods(testClass, annotationType, MethodSortOrder.HierarchyDown).stream()
 			.peek(method -> methodValidator.accept(extensionType, method))
 			.forEach(method ->
-				extensionRegistry.registerExtensionPoint(extensionPointSynthesizer.apply(extensionRegistry, method), method));
+				extensionRegistry.registerExtension(extensionSynthesizer.apply(extensionRegistry, method), method));
 		// @formatter:on
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -75,7 +75,7 @@ private Object resolveParameter(Parameter parameter, MethodInvocationContext met
 		try {
 			// @formatter:off
 			List<MethodParameterResolver> matchingResolvers = extensionRegistry.stream(MethodParameterResolver.class)
-					.filter(extensionPoint -> extensionPoint.supports(parameter, methodInvocationContext, extensionContext))
+					.filter(extension -> extension.supports(parameter, methodInvocationContext, extensionContext))
 					.collect(toList());
 			// @formatter:on
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/BeforeAndAfterEachTests.java
Patch:
@@ -226,8 +226,7 @@ private static class InnermostAndOutermost implements ExtensionRegistrar {
 
 		@Override
 		public void registerExtensions(ExtensionPointRegistry registry) {
-			registry.register((BeforeEachCallback) ctx -> callSequence.add("innermostBefore"),
-				Position.INNERMOST);
+			registry.register((BeforeEachCallback) ctx -> callSequence.add("innermostBefore"), Position.INNERMOST);
 			registry.register((AfterEachCallback) this::innermostAfter, Position.INNERMOST);
 			registry.register((BeforeEachCallback) this::outermostBefore, Position.OUTERMOST);
 			registry.register((AfterEachCallback) this::outermostAfter, Position.OUTERMOST);

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;
-import org.junit.gen5.engine.junit5.extension.RegisteredExtensionPoint;
 
 /**
  * {@code MethodInvoker} encapsulates the invocation of a method, including
@@ -76,7 +75,6 @@ private Object resolveParameter(Parameter parameter, MethodInvocationContext met
 		try {
 			// @formatter:off
 			List<MethodParameterResolver> matchingResolvers = extensionRegistry.stream(MethodParameterResolver.class)
-					.map(RegisteredExtensionPoint::getExtensionPoint)
 					.filter(extensionPoint -> extensionPoint.supports(parameter, methodInvocationContext, extensionContext))
 					.collect(toList());
 			// @formatter:on

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllCallback.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * {@code AfterAllCallback} defines the API for {@link Extension Extensions}
- * that wish to provide additional behavior to tests after all test methods
+ * that wish to provide additional behavior to test containers after all tests
  * have been invoked.
  *
  * <p>Concrete implementations often implement {@link BeforeAllCallback} as well.
@@ -34,7 +34,8 @@
 public interface AfterAllCallback extends ExtensionPoint {
 
 	/**
-	 * Callback that is invoked <em>after</em> all test methods have been invoked.
+	 * Callback that is invoked once <em>after</em> all tests in the current
+	 * container.
 	 *
 	 * @param context the current container extension context
 	 */

File: documentation/src/test/java/example/timing/TimingExtension.java
Patch:
@@ -15,8 +15,8 @@
 import java.lang.reflect.Method;
 import java.util.logging.Logger;
 
-import org.junit.gen5.api.extension.AfterEachExtensionPoint;
-import org.junit.gen5.api.extension.BeforeEachExtensionPoint;
+import org.junit.gen5.api.extension.AfterEachCallback;
+import org.junit.gen5.api.extension.BeforeEachCallback;
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
@@ -38,7 +38,7 @@ public void registerExtensions(ExtensionPointRegistry registry) {
 		registry.register(new TestMethodInvocationWrapper(), INNERMOST);
 	}
 
-	private static class TestMethodInvocationWrapper implements BeforeEachExtensionPoint, AfterEachExtensionPoint {
+	private static class TestMethodInvocationWrapper implements BeforeEachCallback, AfterEachCallback {
 
 		@Override
 		public void beforeEach(TestExtensionContext context) throws Exception {

File: documentation/src/test/java/extensions/ExpectToFailExtension.java
Patch:
@@ -12,13 +12,13 @@
 
 import static org.junit.gen5.api.Assertions.assertNotNull;
 
-import org.junit.gen5.api.extension.AfterEachExtensionPoint;
+import org.junit.gen5.api.extension.AfterEachCallback;
 import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class ExpectToFailExtension implements ExceptionHandler, AfterEachExtensionPoint {
+public class ExpectToFailExtension implements ExceptionHandler, AfterEachCallback {
 
 	@Override
 	public void handleException(TestExtensionContext context, Throwable throwable) throws Throwable {

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/TempDirectory.java
Patch:
@@ -23,15 +23,15 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 
-import org.junit.gen5.api.extension.AfterEachExtensionPoint;
+import org.junit.gen5.api.extension.AfterEachCallback;
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.api.extension.ParameterResolutionException;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class TempDirectory implements AfterEachExtensionPoint, MethodParameterResolver {
+public class TempDirectory implements AfterEachCallback, MethodParameterResolver {
 
 	@Target(ElementType.PARAMETER)
 	@Retention(RetentionPolicy.RUNTIME)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPointRegistry.java
Patch:
@@ -53,7 +53,7 @@
  *
  * <pre style="code">
  * public void registerExtensions(ExtensionPointRegistry registry) {
- *     registry.register((BeforeEachExtensionPoint) context -&gt; { &#47;* ... *&#47; });
+ *     registry.register((BeforeEachCallback) context -&gt; { &#47;* ... *&#47; });
  * }
  * </pre>
  *
@@ -66,7 +66,7 @@
  *
  * <pre style="code">
  * public void registerExtensions(ExtensionPointRegistry registry) {
- *     registry.register((BeforeEachExtensionPoint) this::beforeEach);
+ *     registry.register((BeforeEachCallback) this::beforeEach);
  * }
  *
  * void beforeEach(TestExtensionContext context) {

File: documentation/src/test/java/example/exception/IgnoreIOExceptionExtension.java
Patch:
@@ -12,12 +12,12 @@
 
 import java.io.IOException;
 
-import org.junit.gen5.api.extension.ExceptionHandlerExtensionPoint;
+import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
 // @formatter:off
 // tag::user_guide[]
-public class IgnoreIOExceptionExtension implements ExceptionHandlerExtensionPoint {
+public class IgnoreIOExceptionExtension implements ExceptionHandler {
 
 	@Override
 	public void handleException(TestExtensionContext context, Throwable throwable)

File: documentation/src/test/java/extensions/ExpectToFailExtension.java
Patch:
@@ -13,12 +13,12 @@
 import static org.junit.gen5.api.Assertions.assertNotNull;
 
 import org.junit.gen5.api.extension.AfterEachExtensionPoint;
-import org.junit.gen5.api.extension.ExceptionHandlerExtensionPoint;
+import org.junit.gen5.api.extension.ExceptionHandler;
 import org.junit.gen5.api.extension.ExtensionContext.Namespace;
 import org.junit.gen5.api.extension.ExtensionContext.Store;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
-public class ExpectToFailExtension implements ExceptionHandlerExtensionPoint, AfterEachExtensionPoint {
+public class ExpectToFailExtension implements ExceptionHandler, AfterEachExtensionPoint {
 
 	@Override
 	public void handleException(TestExtensionContext context, Throwable throwable) throws Throwable {

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -33,6 +33,7 @@
  * <li>{@link TestExecutionCondition}</li>
  * <li>{@link InstancePostProcessor}</li>
  * <li>{@link MethodParameterResolver}</li>
+ * <li>{@link ExceptionHandler}</li>
  * <li>{@link BeforeEachExtensionPoint}</li>
  * <li>{@link AfterEachExtensionPoint}</li>
  * <li>{@link BeforeAllExtensionPoint}</li>

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPoint.java
Patch:
@@ -25,7 +25,7 @@
  * @see ContainerExecutionCondition
  * @see TestExecutionCondition
  * @see InstancePostProcessor
- * @see ExceptionHandlerExtensionPoint
+ * @see ExceptionHandler
  * @see MethodParameterResolver
  * @see BeforeEachExtensionPoint
  * @see AfterEachExtensionPoint

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/RegisteredExtensionPoint.java
Patch:
@@ -68,7 +68,7 @@ public E getExtensionPoint() {
 	 * <h4>Semantics for Source</h4>
 	 * <p>If an extension point is registered declaratively via
 	 * {@link org.junit.gen5.api.extension.ExtendWith @ExtendWith},
-	 * {@link #getExtensionPoint()} and this method will return the same
+	 * {@link #getExtensionPoint()} this method will return the same
 	 * object. However, if an extension point is registered programmatically
 	 * &mdash; for example, as a lambda expression or method reference by
 	 * an {@link org.junit.gen5.api.extension.ExtensionRegistrar ExtensionRegistrar}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/DiscoverySelectorResolver.java
Patch:
@@ -62,9 +62,9 @@ private JavaElementsResolver createJavaElementsResolver(TestDescriptor engineDes
 	}
 
 	private void pruneTree(TestDescriptor root) {
-		TestDescriptor.Visitor removeChildrenWithoutTests = (descriptor, remove) -> {
+		TestDescriptor.Visitor removeChildrenWithoutTests = (descriptor) -> {
 			if (!descriptor.isRoot() && !descriptor.hasTests())
-				remove.run();
+				descriptor.removeFromHierarchy();
 		};
 		root.accept(removeChildrenWithoutTests);
 	}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/discoveryNEW/DiscoverySelectorResolverTests.java
Patch:
@@ -34,7 +34,7 @@
 @RunWith(JUnit5.class)
 public class DiscoverySelectorResolverTests {
 
-	private final JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(JUnit5TestEngine.ENGINE_ID);
+	private final JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(engineId());
 	private DiscoverySelectorResolver resolver = new DiscoverySelectorResolver(engineDescriptor);
 
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/discovery/JUnit5UniqueIdBuilder.java
Patch:
@@ -25,13 +25,13 @@ public static UniqueId uniqueIdForClass(Class<?> clazz) {
 		UniqueId containerId = engineId();
 		if (clazz.getEnclosingClass() != null && !ReflectionUtils.isStatic(clazz)) {
 			containerId = uniqueIdForClass(clazz.getEnclosingClass());
-			return containerId.append(JUnit5TestableFactory.TYPE_NESTED_CLASS, clazz.getSimpleName());
+			return containerId.append(NestedTestsResolver.SEGMENT_TYPE, clazz.getSimpleName());
 		}
-		return containerId.append(JUnit5TestableFactory.TYPE_CLASS, clazz.getName());
+		return containerId.append(TestContainerResolver.SEGMENT_TYPE, clazz.getName());
 	}
 
 	public static UniqueId uniqueIdForMethod(Class<?> clazz, String methodPart) {
-		return uniqueIdForClass(clazz).append(JUnit5TestableFactory.TYPE_METHOD, methodPart);
+		return uniqueIdForClass(clazz).append(TestMethodResolver.SEGMENT_TYPE, methodPart);
 	}
 
 	public static UniqueId engineId() {

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/discoveryNEW/DiscoverySelectorResolverTests.java
Patch:
@@ -34,7 +34,7 @@
 @RunWith(JUnit5.class)
 public class DiscoverySelectorResolverTests {
 
-	private final JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(JUnit5TestEngine.ENGINE_ID);
+	private final JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(engineId());
 	private DiscoverySelectorResolver resolver = new DiscoverySelectorResolver(engineDescriptor);
 
 	@Test

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportWriter.java
Patch:
@@ -73,7 +73,7 @@ private void writeTestsuite(TestIdentifier testIdentifier, List<TestIdentifier>
 
 		writer.writeStartElement("testsuite");
 		writeAttributes(testIdentifier, tests, numberFormat, writer);
-		writer.writeComment("Unique ID: " + testIdentifier.getUniqueId().toString());
+		writer.writeComment("Unique ID: " + testIdentifier.getUniqueId());
 		writeSystemProperties(writer);
 		for (TestIdentifier test : tests) {
 			writeTestcase(test, numberFormat, writer);
@@ -117,7 +117,7 @@ private void writeTestcase(TestIdentifier test, NumberFormat numberFormat, XMLSt
 		Optional<TestIdentifier> parent = reportData.getTestPlan().getParent(test);
 		writer.writeAttribute("classname", parent.map(TestIdentifier::getName).orElse("<unrooted>"));
 		writer.writeAttribute("time", getTime(test, numberFormat));
-		writer.writeComment("Unique ID: " + test.getUniqueId().toString());
+		writer.writeComment("Unique ID: " + test.getUniqueId());
 
 		writeSkippedOrErrorOrFailureElement(test, writer);
 		writeReportEntriesToSystemOutElement(test, writer);

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -86,7 +86,7 @@ public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult
 
 	private void writeXmlReportInCaseOfRoot(TestIdentifier testIdentifier) {
 		if (isARoot(testIdentifier)) {
-			String rootName = UniqueId.parse(testIdentifier.getUniqueId().toString()).getSegments().get(0).getValue();
+			String rootName = UniqueId.parse(testIdentifier.getUniqueId()).getSegments().get(0).getValue();
 			writeXmlReportSafely(testIdentifier, rootName);
 		}
 	}

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -84,7 +84,7 @@ private StackTraceWriter getStackTraceWriter(Class<?> sourceClass, Optional<Stri
 	}
 
 	private String getClassNameOrUniqueId(TestIdentifier testIdentifier) {
-		return getClassName(testIdentifier).orElse(testIdentifier.getUniqueId().toString());
+		return getClassName(testIdentifier).orElse(testIdentifier.getUniqueId());
 	}
 
 	private Optional<String> getClassName(TestIdentifier testIdentifier) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/TestInfoParameterResolver.java
Patch:
@@ -75,6 +75,7 @@ public String toString() {
 			return new ToStringBuilder(this)
 				.append("name", this.name)
 				.append("displayName", this.displayName)
+				.append("tags", this.tags)
 				.toString();
 			// @formatter:on
 		}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/extension/BeforeAndAfterEachTests.java
Patch:
@@ -109,7 +109,8 @@ public void inheritedBeforeEachAndAfterEachCallbacks() {
 		assertEquals(0L, eventRecorder.getTestAbortedCount(), "# tests aborted");
 		assertEquals(0L, eventRecorder.getTestFailedCount(), "# tests failed");
 
-		assertEquals(asList("fooBefore", "testChild", "fooAfter"), callSequence, "wrong call sequence");
+		assertEquals(asList("fooBefore", "barBefore", "testChild", "barAfter", "fooAfter"), callSequence,
+			"wrong call sequence");
 	}
 
 	// -------------------------------------------------------------------
@@ -120,6 +121,7 @@ public void inheritedBeforeEachAndAfterEachCallbacks() {
 	private static class ParentTestCase {
 	}
 
+	@ExtendWith(BarMethodLevelCallbacks.class)
 	private static class ChildTestCase extends ParentTestCase {
 
 		@Test

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5TestableFactory.java
Patch:
@@ -61,7 +61,7 @@ JUnit5Testable fromClass(Class<?> clazz, UniqueId engineId) {
 			return createNestedClassTestable(clazz, clazz.getEnclosingClass(), engineId);
 		}
 		LOG.warning(() -> {
-			String classDescription = clazz.getDeclaringClass().getName();
+			String classDescription = clazz.getName();
 			return format("Class '%s' is not a test container", classDescription);
 		});
 		return JUnit5Testable.doNothing();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/ExecutionListenerAdapter.java
Patch:
@@ -15,7 +15,6 @@
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.reporting.ReportEntry;
 import org.junit.gen5.launcher.TestExecutionListener;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 
@@ -57,7 +56,7 @@ public void reportingEntryPublished(TestDescriptor testDescriptor, ReportEntry e
 	}
 
 	private TestIdentifier getTestIdentifier(TestDescriptor testDescriptor) {
-		return testPlan.getTestIdentifier(new TestId(testDescriptor.getUniqueId()));
+		return testPlan.getTestIdentifier(testDescriptor.getUniqueId());
 	}
 
 }

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -51,7 +51,6 @@
 import org.junit.gen5.engine.support.hierarchical.DummyTestDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 import org.junit.gen5.launcher.Launcher;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 import org.opentest4j.AssertionFailedError;
@@ -354,15 +353,15 @@ void writesReportEntriesToSystemOutElement(@Root Path tempDirectory, TestReporte
 			new PrintWriter(out));
 
 		listener.testPlanExecutionStarted(testPlan);
-		TestIdentifier testIdentifier = testPlan.getTestIdentifier(new TestId("test"));
+		TestIdentifier testIdentifier = testPlan.getTestIdentifier("test");
 		listener.executionStarted(testIdentifier);
 		listener.reportingEntryPublished(testIdentifier, ReportEntry.from("foo", "bar"));
 		Map<String, String> map = new LinkedHashMap<>();
 		map.put("bar", "baz");
 		map.put("qux", "foo");
 		listener.reportingEntryPublished(testIdentifier, ReportEntry.from(map));
 		listener.executionFinished(testIdentifier, successful());
-		listener.executionFinished(testPlan.getTestIdentifier(new TestId("[engine:engine]")), successful());
+		listener.executionFinished(testPlan.getTestIdentifier("[engine:engine]"), successful());
 
 		String content = readValidXmlFile(tempDirectory.resolve("TEST-engine.xml"));
 		//testReporter.publishEntry("xml", content);

File: junit-tests/src/test/java/org/junit/gen5/junit4/runner/JUnit5Tests.java
Patch:
@@ -52,7 +52,6 @@
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.PostDiscoveryFilter;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestPlan;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.NoTestsRemainException;
@@ -342,11 +341,11 @@ void reportsIgnoredEventsForLeafsWhenContainerIsSkipped() throws Exception {
 	}
 
 	private static Description suiteDescription(String uniqueId) {
-		return createSuiteDescription(uniqueId, new TestId(uniqueId));
+		return createSuiteDescription(uniqueId, uniqueId);
 	}
 
 	private static Description testDescription(String uniqueId) {
-		return createTestDescription(uniqueId, uniqueId, new TestId(uniqueId));
+		return createTestDescription(uniqueId, uniqueId, uniqueId);
 	}
 
 	private TestDescriptor testDescriptorWithTag(String tag) {

File: junit-tests/src/test/java/org/junit/gen5/launcher/TestIdentifierTests.java
Patch:
@@ -24,7 +24,7 @@ public void inheritsIdAndNamesFromDescriptor() {
 
 		TestIdentifier testIdentifier = TestIdentifier.from(testDescriptor);
 
-		assertEquals(new TestId("uniqueId"), testIdentifier.getUniqueId());
+		assertEquals("uniqueId", testIdentifier.getUniqueId());
 		assertEquals("displayName", testIdentifier.getDisplayName());
 		assertEquals("name", testIdentifier.getName());
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/ExecutionListenerAdapter.java
Patch:
@@ -15,7 +15,6 @@
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.reporting.ReportEntry;
 import org.junit.gen5.launcher.TestExecutionListener;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 
@@ -57,7 +56,7 @@ public void reportingEntryPublished(TestDescriptor testDescriptor, ReportEntry e
 	}
 
 	private TestIdentifier getTestIdentifier(TestDescriptor testDescriptor) {
-		return testPlan.getTestIdentifier(new TestId(testDescriptor.getUniqueId()));
+		return testPlan.getTestIdentifier(testDescriptor.getUniqueId());
 	}
 
 }

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -51,7 +51,6 @@
 import org.junit.gen5.engine.support.hierarchical.DummyTestDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 import org.junit.gen5.launcher.Launcher;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
 import org.opentest4j.AssertionFailedError;
@@ -354,15 +353,15 @@ void writesReportEntriesToSystemOutElement(@Root Path tempDirectory, TestReporte
 			new PrintWriter(out));
 
 		listener.testPlanExecutionStarted(testPlan);
-		TestIdentifier testIdentifier = testPlan.getTestIdentifier(new TestId("test"));
+		TestIdentifier testIdentifier = testPlan.getTestIdentifier("test");
 		listener.executionStarted(testIdentifier);
 		listener.reportingEntryPublished(testIdentifier, ReportEntry.from("foo", "bar"));
 		Map<String, String> map = new LinkedHashMap<>();
 		map.put("bar", "baz");
 		map.put("qux", "foo");
 		listener.reportingEntryPublished(testIdentifier, ReportEntry.from(map));
 		listener.executionFinished(testIdentifier, successful());
-		listener.executionFinished(testPlan.getTestIdentifier(new TestId("[engine:engine]")), successful());
+		listener.executionFinished(testPlan.getTestIdentifier("[engine:engine]"), successful());
 
 		String content = readValidXmlFile(tempDirectory.resolve("TEST-engine.xml"));
 		//testReporter.publishEntry("xml", content);

File: junit-tests/src/test/java/org/junit/gen5/junit4/runner/JUnit5Tests.java
Patch:
@@ -52,7 +52,6 @@
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.PostDiscoveryFilter;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
-import org.junit.gen5.launcher.TestId;
 import org.junit.gen5.launcher.TestPlan;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.NoTestsRemainException;
@@ -342,11 +341,11 @@ void reportsIgnoredEventsForLeafsWhenContainerIsSkipped() throws Exception {
 	}
 
 	private static Description suiteDescription(String uniqueId) {
-		return createSuiteDescription(uniqueId, new TestId(uniqueId));
+		return createSuiteDescription(uniqueId, uniqueId);
 	}
 
 	private static Description testDescription(String uniqueId) {
-		return createTestDescription(uniqueId, uniqueId, new TestId(uniqueId));
+		return createTestDescription(uniqueId, uniqueId, uniqueId);
 	}
 
 	private TestDescriptor testDescriptorWithTag(String tag) {

File: junit-tests/src/test/java/org/junit/gen5/launcher/TestIdentifierTests.java
Patch:
@@ -24,7 +24,7 @@ public void inheritsIdAndNamesFromDescriptor() {
 
 		TestIdentifier testIdentifier = TestIdentifier.from(testDescriptor);
 
-		assertEquals(new TestId("uniqueId"), testIdentifier.getUniqueId());
+		assertEquals("uniqueId", testIdentifier.getUniqueId());
 		assertEquals("displayName", testIdentifier.getDisplayName());
 		assertEquals("name", testIdentifier.getName());
 	}

File: junit-commons/src/main/java/org/junit/gen5/commons/util/ReflectionUtils.java
Patch:
@@ -124,7 +124,8 @@ public static boolean isStatic(Member member) {
 	 * {@code true} if the supplied type represents a primitive type whose
 	 * wrapper matches the supplied object's type.
 	 *
-	 * <p>Returns {@code false} if the supplied object is {@code null}.
+	 * <p>Returns {@code true} if the supplied object is {@code null} and the
+	 * supplied type does not represent a primitive type.
 	 *
 	 * @param obj the object to test for assignment compatibility; potentially {@code null}
 	 * @param type the type to check against; never {@code null}
@@ -136,7 +137,7 @@ public static boolean isAssignableTo(Object obj, Class<?> type) {
 		Preconditions.notNull(type, "type must not be null");
 
 		if (obj == null) {
-			return false;
+			return !type.isPrimitive();
 		}
 
 		if (type.isInstance(obj)) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -13,6 +13,7 @@
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
 import static org.junit.gen5.commons.meta.API.Usage.Internal;
+import static org.junit.gen5.commons.util.ReflectionUtils.isAssignableTo;
 
 import java.lang.reflect.Parameter;
 import java.util.Arrays;
@@ -101,7 +102,7 @@ private Object resolveParameter(Parameter parameter, MethodInvocationContext met
 			Object value = resolver.resolve(parameter, methodInvocationContext, extensionContext);
 
 			// Note: null is permissible as a resolved value.
-			if (value != null && !parameter.getType().isInstance(value)) {
+			if (value != null && !isAssignableTo(value, parameter.getType())) {
 				throw new ParameterResolutionException(String.format(
 					"MethodParameterResolver [%s] resolved a value of type [%s] for parameter [%s] "
 							+ "in method [%s], but a value assignment compatible with [%s] is required.",

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/TestDiscoveryRequestBuilder.java
Patch:
@@ -100,7 +100,7 @@ else if (filter instanceof DiscoveryFilter<?>) {
 		else {
 			throw new PreconditionViolationException("Filter must implement " + EngineIdFilter.class.getSimpleName()
 					+ ", " + PostDiscoveryFilter.class.getSimpleName() //
-					+ ", or " + DiscoveryFilter.class.getSimpleName() + ".");
+					+ " or " + DiscoveryFilter.class.getSimpleName() + ".");
 		}
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/TestDiscoveryRequestBuilderTests.java
Patch:
@@ -223,7 +223,7 @@ public void exceptionForIllegalFilterClass() throws Exception {
 		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class,
 			() -> request().filter(o -> excluded("reason")));
 
-		assertEquals("Filter must implement EngineIdFilter, PostDiscoveryFilter, or DiscoveryFilter.",
+		assertEquals("Filter must implement EngineIdFilter, PostDiscoveryFilter or DiscoveryFilter.",
 			exception.getMessage());
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/UniqueId.java
Patch:
@@ -80,7 +80,7 @@ public List<Segment> getSegments() {
 	 * <p>The current instance is left unchanged.</p>
 	 *
 	 * <p>Both {@code segmentType} and {@code segmentType} must not contain any of the special characters used
-	 * fot constructing the string representation. This allows more robust parsing.</p>
+	 * for constructing the string representation. This allows more robust parsing.</p>
 	 */
 	public UniqueId append(String segmentType, String value) {
 		UniqueId clone = new UniqueId(segments);

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.discovery.MethodSelector;
+import org.junit.gen5.engine.junit5.discovery.UniqueIdBuilder;
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 
 /**
@@ -41,7 +42,7 @@ public void discoverTestClass() {
 	@Test
 	public void discoverByUniqueId() {
 		TestDiscoveryRequest request = request().select(
-			forUniqueId("junit5:org.junit.gen5.engine.junit5.DiscoveryTests$LocalTestCase#test1()")).build();
+			forUniqueId(UniqueIdBuilder.uniqueIdForMethod(LocalTestCase.class, "test1()").getUniqueString())).build();
 		TestDescriptor engineDescriptor = discoverTests(request);
 		assertEquals(2, engineDescriptor.allDescendants().size(), "# resolved test descriptors");
 	}
@@ -59,7 +60,7 @@ public void discoverByMethod() throws NoSuchMethodException {
 	@Test
 	public void discoverCompositeSpec() {
 		TestDiscoveryRequest spec = request().select(
-			forUniqueId("junit5:org.junit.gen5.engine.junit5.DiscoveryTests$LocalTestCase#test2()"),
+			forUniqueId(UniqueIdBuilder.uniqueIdForMethod(LocalTestCase.class, "test2()").getUniqueString()),
 			forClass(LocalTestCase.class)).build();
 
 		TestDescriptor engineDescriptor = discoverTests(spec);

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/TestDescriptorBuilder.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.discovery.JUnit5EngineDescriptor;
 
 public abstract class TestDescriptorBuilder {
@@ -66,7 +67,7 @@ public ClassTestDescriptorBuilder(String uniqueId, Class<?> testClass) {
 
 		@Override
 		TestDescriptor buildDescriptor() {
-			return new ClassTestDescriptor(uniqueId, testClass);
+			return new ClassTestDescriptor(UniqueId.root("class", uniqueId), testClass);
 		}
 	}
 
@@ -78,7 +79,7 @@ public NestedClassTestDescriptorBuilder(String uniqueId, Class<?> testClass) {
 
 		@Override
 		TestDescriptor buildDescriptor() {
-			return new NestedClassTestDescriptor(uniqueId, testClass);
+			return new NestedClassTestDescriptor(UniqueId.root("nested-class", uniqueId), testClass);
 		}
 	}
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/subpackage/ClassWithStaticInnerTestCases.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class ClassWithStaticInnerTestCases {
 
-	static class ShouldBeDiscovered {
+	public static class ShouldBeDiscovered {
 
 		@Test
 		void test1() {

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/ExecutionListenerAdapterTests.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.commons.util.*;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.descriptor.*;
 import org.junit.gen5.engine.reporting.*;
 import org.junit.gen5.launcher.*;
@@ -46,7 +47,7 @@ void testReportingEntryPublished() {
 
 	private MethodTestDescriptor getSampleMethodTestDescriptor() {
 		Method localMethodNamedNothing = ReflectionUtils.findMethod(this.getClass(), "nothing", new Class[] {}).get();
-		return new MethodTestDescriptor("unique_id", this.getClass(), localMethodNamedNothing);
+		return new MethodTestDescriptor(UniqueId.root("method", "unique_id"), this.getClass(), localMethodNamedNothing);
 	}
 
 	//for reflection purposes only

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/LauncherFactoryTests.java
Patch:
@@ -38,7 +38,7 @@ void testCreate() {
 				.collect(toList());
 		// @formatter:on
 
-		assertThat(ids).containsOnly("junit4", "junit5");
+		assertThat(ids).containsOnly("[engine:junit4]", "[engine:junit5]");
 	}
 
 	private TestDiscoveryRequest createTestDiscoveryRequestForBothStandardEngineExampleClasses() {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 import org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver;
 import org.junit.gen5.engine.junit4.execution.RunnerExecutor;
@@ -39,7 +40,8 @@ public String getId() {
 
 	@Override
 	public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest) {
-		EngineDescriptor engineDescriptor = new EngineDescriptor(ENGINE_ID, "JUnit 4");
+		EngineDescriptor engineDescriptor = new EngineDescriptor(UniqueId.forEngine(ENGINE_ID).getUniqueString(),
+			"JUnit 4");
 		new JUnit4DiscoveryRequestResolver(engineDescriptor, LOG).resolve(discoveryRequest);
 		return engineDescriptor;
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -17,6 +17,7 @@
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver;
 import org.junit.gen5.engine.junit5.discovery.JUnit5EngineDescriptor;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassBasedContainerExtensionContext.java
Patch:
@@ -30,7 +30,7 @@ public ClassBasedContainerExtensionContext(ExtensionContext parent, EngineExecut
 
 	@Override
 	public String getUniqueId() {
-		return getTestDescriptor().getUniqueId();
+		return getTestDescriptor().getUniqueIdObject().getUniqueString();
 	}
 
 	@Override

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -40,6 +40,7 @@
 import org.junit.gen5.commons.util.ReflectionUtils.MethodSortOrder;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestTag;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
@@ -54,7 +55,7 @@
  * {@link TestDescriptor} for tests based on Java classes.
  *
  * <p>The pattern of the {@link #getUniqueId unique ID} takes the form of
- * <code>{parent unique id}:{fully qualified class name}</code>.
+ * <code>{parent unique id}/[class:{fully qualified class name}]</code>.
  *
  * @since 5.0
  */
@@ -65,7 +66,7 @@ public class ClassTestDescriptor extends JUnit5TestDescriptor implements Contain
 
 	private final Class<?> testClass;
 
-	public ClassTestDescriptor(String uniqueId, Class<?> testClass) {
+	public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass) {
 		super(uniqueId);
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.gen5.commons.util.ExceptionUtils;
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.TestTag;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;
 import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
@@ -40,7 +41,7 @@
 @API(Internal)
 public abstract class JUnit5TestDescriptor extends AbstractTestDescriptor {
 
-	protected JUnit5TestDescriptor(String uniqueId) {
+	protected JUnit5TestDescriptor(UniqueId uniqueId) {
 		super(uniqueId);
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodBasedTestExtensionContext.java
Patch:
@@ -48,7 +48,7 @@ public Class<?> getTestClass() {
 
 	@Override
 	public String getUniqueId() {
-		return getTestDescriptor().getUniqueId();
+		return getTestDescriptor().getUniqueIdObject().getUniqueString();
 	}
 
 	@Override

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestTag;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
@@ -56,7 +57,7 @@ public class MethodTestDescriptor extends JUnit5TestDescriptor implements Leaf<J
 
 	private final Method testMethod;
 
-	public MethodTestDescriptor(String uniqueId, Class<?> testClass, Method testMethod) {
+	public MethodTestDescriptor(UniqueId uniqueId, Class<?> testClass, Method testMethod) {
 		super(uniqueId);
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -18,21 +18,22 @@
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestTag;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.TestInstanceProvider;
 
 /**
  * {@link TestDescriptor} for tests based on nested (but not static) Java classes.
  *
  * <p>The pattern of the {@link #getUniqueId unique ID} takes the form of
- * <code>{parent unique id}:{fully qualified class name of parent}@{simple class name}</code>.
+ * <code>{parent unique id}/[class:{fully qualified class name}]/[nested-class:{simple class name}]</code>.
  *
  * @since 5.0
  */
 @API(Internal)
 public class NestedClassTestDescriptor extends ClassTestDescriptor {
 
-	public NestedClassTestDescriptor(String uniqueId, Class<?> testClass) {
+	public NestedClassTestDescriptor(UniqueId uniqueId, Class<?> testClass) {
 		super(uniqueId, testClass);
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5Class.java
Patch:
@@ -10,11 +10,13 @@
 
 package org.junit.gen5.engine.junit5.discovery;
 
+import org.junit.gen5.engine.UniqueId;
+
 class JUnit5Class extends JUnit5Testable {
 
 	private final Class<?> javaClass;
 
-	JUnit5Class(String uniqueId, Class<?> javaClass) {
+	JUnit5Class(UniqueId uniqueId, Class<?> javaClass) {
 		super(uniqueId);
 		this.javaClass = javaClass;
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5EngineDescriptor.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.gen5.commons.meta.API.Usage.Internal;
 
 import org.junit.gen5.commons.meta.API;
+import org.junit.gen5.engine.UniqueId;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
@@ -25,7 +26,7 @@
 public class JUnit5EngineDescriptor extends EngineDescriptor implements Container<JUnit5EngineExecutionContext> {
 
 	public JUnit5EngineDescriptor(String uniqueId) {
-		super(uniqueId, "JUnit 5");
+		super(UniqueId.forEngine(uniqueId), "JUnit 5");
 	}
 
 	@Override

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5Method.java
Patch:
@@ -12,13 +12,15 @@
 
 import java.lang.reflect.Method;
 
+import org.junit.gen5.engine.UniqueId;
+
 class JUnit5Method extends JUnit5Testable {
 
 	private final Class<?> containerClass;
 
 	private final Method javaMethod;
 
-	JUnit5Method(String uniqueId, Method javaElement, Class<?> containerClass) {
+	JUnit5Method(UniqueId uniqueId, Method javaElement, Class<?> containerClass) {
 		super(uniqueId);
 		this.javaMethod = javaElement;
 		this.containerClass = containerClass;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5NestedClass.java
Patch:
@@ -10,11 +10,13 @@
 
 package org.junit.gen5.engine.junit5.discovery;
 
+import org.junit.gen5.engine.UniqueId;
+
 class JUnit5NestedClass extends JUnit5Class {
 
 	private final Class<?> containerClass;
 
-	JUnit5NestedClass(String uniqueId, Class<?> javaClass, Class<?> containerClass) {
+	JUnit5NestedClass(UniqueId uniqueId, Class<?> javaClass, Class<?> containerClass) {
 		super(uniqueId, javaClass);
 		this.containerClass = containerClass;
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5Testable.java
Patch:
@@ -27,7 +27,7 @@ void accept(Visitor visitor) {
 
 	@Deprecated
 	static JUnit5Testable fromUniqueId(String uniqueId, String engineId) {
-		return fromUniqueId(UniqueId.parse(uniqueId), UniqueId.forEngine("engine", engineId));
+		return fromUniqueId(UniqueId.parse(uniqueId), UniqueId.forEngine(engineId));
 	}
 
 	static JUnit5Testable fromUniqueId(UniqueId uniqueId, UniqueId engineId) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java
Patch:
@@ -44,7 +44,7 @@ class DefaultLauncher implements Launcher {
 		this.testEngines = validateUniqueIds(testEngines);
 	}
 
-	private Iterable<TestEngine> validateUniqueIds(Iterable<TestEngine> testEngines) {
+	private static Iterable<TestEngine> validateUniqueIds(Iterable<TestEngine> testEngines) {
 		Set<String> ids = new HashSet<>();
 		for (TestEngine testEngine : testEngines) {
 			if (!ids.add(testEngine.getId())) {
@@ -73,7 +73,7 @@ public void execute(TestDiscoveryRequest discoveryRequest) {
 	private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {
 		Root root = new Root();
 
-		for (TestEngine testEngine : testEngines) {
+		for (TestEngine testEngine : this.testEngines) {
 			final String engineId = testEngine.getId();
 
 			if (discoveryRequest.getEngineIdFilters().stream().map(

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DefaultLauncherTests.java
Patch:
@@ -46,10 +46,8 @@ void discoverEmptyTestPlanWithoutAnyEngines() {
 
 	@Test
 	void constructLauncherWithMultipleTestEnginesWithDuplicateIds() {
-		DefaultLauncher launcher = createLauncher(new DummyTestEngine(), new DummyTestEngine());
-
 		JUnitException exception = expectThrows(JUnitException.class,
-			() -> launcher.discover(request().select(forUniqueId("foo")).build()));
+			() -> createLauncher(new DummyTestEngine("dummy id"), new DummyTestEngine("dummy id")));
 
 		assertThat(exception).hasMessageContaining("multiple engines with the same ID");
 	}

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DefaultLauncherTests.java
Patch:
@@ -46,10 +46,8 @@ void discoverEmptyTestPlanWithoutAnyEngines() {
 
 	@Test
 	void constructLauncherWithMultipleTestEnginesWithDuplicateIds() {
-		DefaultLauncher launcher = createLauncher(new DummyTestEngine(), new DummyTestEngine());
-
 		JUnitException exception = expectThrows(JUnitException.class,
-			() -> launcher.discover(request().select(forUniqueId("foo")).build()));
+			() -> createLauncher(new DummyTestEngine("dummy id"), new DummyTestEngine("dummy id")));
 
 		assertThat(exception).hasMessageContaining("multiple engines with the same ID");
 	}

File: junit-tests/src/test/java/org/junit/gen5/commons/util/AnnotationUtilsTests.java
Patch:
@@ -140,7 +140,7 @@ private void assertTagsFound(Class<?> clazz, String... tags) throws Exception {
 	@Retention(RetentionPolicy.RUNTIME)
 	@interface Tags {
 
-		Tag[]value();
+		Tag[] value();
 	}
 
 	@Target({ ElementType.TYPE, ElementType.METHOD })

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -480,7 +480,7 @@ void resolvesCombinationOfMethodAndUniqueIdSelector() throws Exception {
 			MethodSelector.forMethod(testClass, testClass.getMethod("failingTest")), //
 			forUniqueId("junit4:org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods"
 					+ "/abortedTest(org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods)" //
-		)).build();
+			)).build();
 
 		TestDescriptor engineDescriptor = engine.discover(discoveryRequest);
 
@@ -502,7 +502,7 @@ void ignoresRedundantSelector() throws Exception {
 			MethodSelector.forMethod(testClass, testClass.getMethod("failingTest")), //
 			forUniqueId("junit4:org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods"
 					+ "/failingTest(org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithFiveTestMethods)" //
-		)).build();
+			)).build();
 
 		TestDescriptor engineDescriptor = engine.discover(discoveryRequest);
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/samples/junit4/MalformedJUnit4TestCase.java
Patch:
@@ -17,7 +17,8 @@
 public class MalformedJUnit4TestCase {
 
 	@Test
-	/* not public */ void nonPublicTest() {
+	/* intentionally not public */
+	void nonPublicTest() {
 		fail("this should never be called");
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/launcher/DiscoveryFilterStub.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @since 5.0
  */
-public class DiscoveryFilterStub<T> extends FilterStub<T>implements DiscoveryFilter<T> {
+public class DiscoveryFilterStub<T> extends FilterStub<T> implements DiscoveryFilter<T> {
 
 	public DiscoveryFilterStub(String toString) {
 		super(toString);

File: junit-tests/src/test/java/org/junit/gen5/launcher/PostDiscoveryFilterStub.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.TestDescriptor;
 
-public class PostDiscoveryFilterStub extends FilterStub<TestDescriptor>implements PostDiscoveryFilter {
+public class PostDiscoveryFilterStub extends FilterStub<TestDescriptor> implements PostDiscoveryFilter {
 	public PostDiscoveryFilterStub(String toString) {
 		super(toString);
 	}

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DefaultLauncherTests.java
Patch:
@@ -130,9 +130,9 @@ void launcherAppliesPostDiscoveryFilters() {
 
 		TestPlan testPlan = launcher.discover( //
 			request() //
-			.select(PackageSelector.forPackageName("any")) //
-			.filter(includeWithUniqueIdContainsTest, includeWithUniqueIdContains1) //
-			.build());
+					.select(PackageSelector.forPackageName("any")) //
+					.filter(includeWithUniqueIdContainsTest, includeWithUniqueIdContains1) //
+					.build());
 
 		assertThat(testPlan.getChildren(new TestId("myEngine"))).hasSize(1);
 		assertThat(testPlan.getTestIdentifier(new TestId(test1.getUniqueId()))).isNotNull();

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/Classes.java
Patch:
@@ -37,6 +37,6 @@
 	/**
 	 * One or more test classes.
 	 */
-	Class<?>[]value();
+	Class<?>[] value();
 
 }

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/ExcludeTags.java
Patch:
@@ -37,6 +37,6 @@
 	/**
 	 * One or more tags to exclude.
 	 */
-	String[]value();
+	String[] value();
 
 }

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/Packages.java
Patch:
@@ -37,6 +37,6 @@
 	/**
 	 * One or more package names.
 	 */
-	String[]value();
+	String[] value();
 
 }

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/RequireTags.java
Patch:
@@ -37,6 +37,6 @@
 	/**
 	 * One or more tags to be required.
 	 */
-	String[]value();
+	String[] value();
 
 }

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/UniqueIds.java
Patch:
@@ -37,6 +37,6 @@
 	/**
 	 * One or more unique IDs of test classes or test methods.
 	 */
-	String[]value();
+	String[] value();
 
 }

File: junit5-api/src/main/java/org/junit/gen5/api/Tags.java
Patch:
@@ -40,6 +40,6 @@
 	/**
 	 * An array of one or more {@link Tag Tags}.
 	 */
-	Tag[]value();
+	Tag[] value();
 
 }

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -51,6 +51,6 @@
 @API(Experimental)
 public @interface ExtendWith {
 
-	Class<? extends Extension>[]value();
+	Class<? extends Extension>[] value();
 
 }

File: junit5-api/src/main/java/org/junit/gen5/api/extension/Extensions.java
Patch:
@@ -43,6 +43,6 @@
 	/**
 	 * An array of one or more {@link ExtendWith @ExtendWith} declarations.
 	 */
-	ExtendWith[]value();
+	ExtendWith[] value();
 
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -174,7 +174,7 @@ private void invokeBeforeAllExtensionPoints(ExtensionRegistry newExtensionRegist
 
 	private void invokeAfterAllExtensionPoints(ExtensionRegistry newExtensionRegistry,
 			ContainerExtensionContext containerExtensionContext, ThrowableCollector throwableCollector)
-					throws Exception {
+			throws Exception {
 
 		Consumer<RegisteredExtensionPoint<AfterAllExtensionPoint>> applyAfterAll = registeredExtensionPoint -> throwableCollector.execute(
 			() -> registeredExtensionPoint.getExtensionPoint().afterAll(containerExtensionContext));

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -214,7 +214,7 @@ private void executeExceptionHandlers(Throwable throwable, List<ExceptionHandler
 
 	private void executeFirstExceptionHandler(Throwable throwable,
 			List<ExceptionHandlerExtensionPoint> exceptionHandlers, TestExtensionContext testExtensionContext)
-					throws Throwable {
+			throws Throwable {
 		ExceptionHandlerExtensionPoint exceptionHandler = exceptionHandlers.remove(0);
 		exceptionHandler.handleException(testExtensionContext, throwable);
 	}

File: documentation/src/test/java/example/JUnit4SuiteDemo.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)
-@Packages({ "example" })
+@Packages("example")
 public class JUnit4SuiteDemo {
 }
 // end::user_guide[]

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/AbstractExtensionContext.java
Patch:
@@ -16,6 +16,7 @@
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.junit5.execution.ExtensionValuesStore;
 import org.junit.gen5.engine.junit5.execution.NamespaceAwareStore;
 import org.junit.gen5.engine.reporting.ReportEntry;
@@ -67,6 +68,6 @@ public Store getStore(Namespace namespace) {
 
 	@Override
 	public Set<String> getTags() {
-		return testDescriptor.getTags().stream().map(tag -> tag.getName()).collect(Collectors.toSet());
+		return testDescriptor.getTags().stream().map(TestTag::getName).collect(Collectors.toSet());
 	}
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/discovery/JUnit5TestableFactory.java
Patch:
@@ -99,7 +99,7 @@ private List<String> split(String uniqueId) {
 	private JUnit5Testable createTestable(String uniqueId, String engineId, List<String> parts, JUnit5Testable last) {
 		if (parts.isEmpty())
 			return last;
-		JUnit5Testable next = null;
+		JUnit5Testable next;
 		String head = parts.remove(0);
 		switch (head.charAt(0)) {
 			case ':':

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/ConditionEvaluator.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.engine.junit5.extension.ExtensionRegistry;
+import org.junit.gen5.engine.junit5.extension.RegisteredExtensionPoint;
 
 /**
  * {@code ConditionEvaluator} evaluates {@link ContainerExecutionCondition}
@@ -51,7 +52,7 @@ public ConditionEvaluationResult evaluateForContainer(ExtensionRegistry extensio
 			ContainerExtensionContext context) {
 		// @formatter:off
 		return extensionRegistry.stream(ContainerExecutionCondition.class, ExtensionRegistry.ApplicationOrder.FORWARD)
-				.map(extensionPoint -> extensionPoint.getExtensionPoint())
+				.map(RegisteredExtensionPoint::getExtensionPoint)
 				.map(condition -> evaluate(condition, context))
 				.filter(ConditionEvaluationResult::isDisabled)
 				.findFirst()
@@ -72,7 +73,7 @@ public ConditionEvaluationResult evaluateForTest(ExtensionRegistry extensionRegi
 			TestExtensionContext context) {
 		// @formatter:off
 		return extensionRegistry.stream(TestExecutionCondition.class, ExtensionRegistry.ApplicationOrder.FORWARD)
-				.map(extensionPoint -> extensionPoint.getExtensionPoint())
+				.map(RegisteredExtensionPoint::getExtensionPoint)
 				.map(condition -> evaluate(condition, context))
 				.filter(ConditionEvaluationResult::isDisabled)
 				.findFirst()

File: junit-engine-api/src/main/java/org/junit/gen5/engine/FilterResult.java
Patch:
@@ -40,7 +40,7 @@ public static FilterResult included(String reason) {
 	 * Factory for creating <em>excluded</em> results.
 	 *
 	 * @param reason the reason why the result was excluded
-	 * @return a excluded {@code FilterResult} with the given reason
+	 * @return an excluded {@code FilterResult} with the given reason
 	 */
 	public static FilterResult excluded(String reason) {
 		return new FilterResult(false, reason);

File: junit-console/src/main/java/org/junit/gen5/console/options/AvailableOptions.java
Patch:
@@ -41,8 +41,9 @@ class AvailableOptions {
 			.withRequiredArg();
 
 		classnameFilter = parser.acceptsAll(asList("n", "filter-classname"),
-			"Give a regular expression to include only classes whose fully qualified names match.") //
-			.withRequiredArg();
+			"Give a regular expression to include only classes whose fully qualified names match. " //
+					+ "By default any class name is accepted and thus all classes with tests are included.") //
+					.withRequiredArg();
 		requiredTagsFilter = parser.acceptsAll(asList("t", "require-tag"),
 			"Give a tag to be required in the test run. This option can be repeated.") //
 			.withRequiredArg();

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -53,7 +53,7 @@
  *
  * <p>Consult the various annotations in this package for configuration options.
  *
- * <p>If you don't use any annotations, you can simply us this runner on a JUnit 5 test class.
+ * <p>If you don't use any annotations, you can simply use this runner on a JUnit 5 test class.
  * Contrary to standard JUnit 5 test classes, the test class must be {@code public} in order
  * to be picked up by IDEs and build tools.
  *

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -53,7 +53,7 @@
  *
  * <p>Consult the various annotations in this package for configuration options.
  *
- * <p>If you don't use any annotations, you can simply us this runner on a JUnit 5 test class.
+ * <p>If you don't use any annotations, you can simply use this runner on a JUnit 5 test class.
  * Contrary to standard JUnit 5 test classes, the test class must be {@code public} in order
  * to be picked up by IDEs and build tools.
  *

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -51,10 +51,10 @@ public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult
 		if (testExecutionResult.getStatus() == ABORTED) {
 			runListener.testAssumptionFailure(createReportEntry(testIdentifier, testExecutionResult.getThrowable()));
 		}
-		if (testExecutionResult.getStatus() == FAILED) {
+		else if (testExecutionResult.getStatus() == FAILED) {
 			runListener.testFailed(createReportEntry(testIdentifier, testExecutionResult.getThrowable()));
 		}
-		if (testIdentifier.isTest()) {
+		else if (testIdentifier.isTest()) {
 			runListener.testSucceeded(createReportEntry(testIdentifier));
 		}
 	}

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -364,7 +364,7 @@ void writesReportEntriesToSystemOutElement(@Root Path tempDirectory, TestReporte
 		listener.executionFinished(testPlan.getTestIdentifier(new TestId("engine")), successful());
 
 		String content = readValidXmlFile(tempDirectory.resolve("TEST-engine.xml"));
-		testReporter.publishEntry("xml", content);
+		//testReporter.publishEntry("xml", content);
 		//@formatter:off
 		assertThat(content)
 			.containsSequence(

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/TestDiscoveryRequestBuilder.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The {@code DiscoveryRequestBuilder} provides a light-weight DSL for
- * generating a {@link DiscoveryRequest}.
+ * generating a {@link TestDiscoveryRequest}.
  *
  * <h4>Example</h4>
  *

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -364,7 +364,7 @@ void printsExceptionWhenReportCouldNotBeWritten() throws Exception {
 		listener.testPlanExecutionStarted(TestPlan.from(singleton(engineDescriptor)));
 		listener.executionFinished(TestIdentifier.from(engineDescriptor), successful());
 
-		assertThat(out.toString()).containsSequence("Could not write XML report", "FileNotFoundException", "at ");
+		assertThat(out.toString()).containsSequence("Could not write XML report", "Exception", "at ");
 	}
 
 	private void executeTests(TestEngine engine) {

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -55,7 +55,7 @@ public void testPlanExecutionStarted(TestPlan testPlan) {
 			Files.createDirectories(reportsDir.toPath());
 		}
 		catch (IOException e) {
-			printException("Could not create report directory: " + reportsDir, e);
+			printException("Could not create reports directory: " + reportsDir, e);
 		}
 	}
 
@@ -93,7 +93,7 @@ private void writeXmlReportSafely(TestIdentifier testIdentifier) {
 			new XmlReportWriter(reportData).writeXmlReport(testIdentifier, fileWriter);
 		}
 		catch (XMLStreamException | IOException e) {
-			printException("Could not write file: " + xmlFile, e);
+			printException("Could not write XML report: " + xmlFile, e);
 		}
 	}
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -84,7 +84,7 @@ private void writeXmlReportInCaseOfRoot(TestIdentifier testIdentifier) {
 	private void writeXmlReportSafely(TestIdentifier testIdentifier) {
 		File xmlFile = new File(reportsDir, "TEST-" + testIdentifier.getUniqueId() + ".xml");
 		try {
-			new XmlReportWriter(reportData).writeXmlReport(testIdentifier, xmlFile);
+			new XmlReportWriter(reportData, clock).writeXmlReport(testIdentifier, xmlFile);
 		}
 		catch (XMLStreamException | IOException e) {
 			printException("Could not write file: " + xmlFile, e);

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -151,7 +151,7 @@ void writesFileForSingleSkippedTest() throws Exception {
 				"</testsuite>")
 			.doesNotContain("<failure")
 			.doesNotContain("<error");
-		//@formatter:off
+		//@formatter:on
 	}
 
 	@Test
@@ -176,7 +176,7 @@ void writesFileForSingleAbortedTest() throws Exception {
 				"</testsuite>")
 			.doesNotContain("<failure")
 			.doesNotContain("<error");
-		//@formatter:off
+		//@formatter:on
 	}
 
 	private void executeTests(DummyTestEngine engine) {

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -67,8 +67,8 @@ public void testPlanExecutionStarted(TestPlan testPlan) {
 
 	@Override
 	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
-		// TODO #86 write file for roots
 		skippedTests.put(testIdentifier, reason == null ? "" : reason);
+		// TODO #86 write file for roots
 	}
 
 	@Override
@@ -207,6 +207,7 @@ private void writeFailureAttributesAndContent(Throwable throwable, XMLStreamWrit
 		writer.writeCharacters(readStackTrace(throwable));
 	}
 
+	// TODO #86 Move to ExceptionUtils
 	private String readStackTrace(Throwable throwable) {
 		StringWriter stringWriter = new StringWriter();
 		try (PrintWriter printWriter = new PrintWriter(stringWriter)) {

File: junit-console/src/main/java/org/junit/gen5/console/tasks/XmlReportsWritingListener.java
Patch:
@@ -133,8 +133,7 @@ private void writeTestcase(TestIdentifier test, XMLStreamWriter writer) throws X
 		writer.writeAttribute("name", test.getDisplayName());
 		Optional<TestIdentifier> parent = testPlan.getParent(test);
 		if (parent.isPresent()) {
-			// TODO #86 use getName()
-			writer.writeAttribute("classname", parent.get().getUniqueId().toString());
+			writer.writeAttribute("classname", parent.get().getName());
 		}
 		// TODO #86 measure time
 		writer.writeAttribute("time", "0.0");

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/XmlReportsWritingListenerTests.java
Patch:
@@ -75,7 +75,7 @@ void writesFileForSingleSucceedingTest() throws Exception {
 		//@formatter:off
 		assertThat(content)
 			.contains("<testsuite name=\"dummy\" tests=\"1\" skipped=\"0\" failures=\"0\" errors=\"0\"")
-			.contains("<testcase name=\"succeedingTest\"")
+			.contains("<testcase name=\"succeedingTest\" classname=\"dummy\"")
 			.doesNotContain("<skipped")
 			.doesNotContain("<failure")
 			.doesNotContain("<error");

File: documentation/src/test/java/example/StandardTests.java
Patch:
@@ -10,13 +10,14 @@
 
 package example;
 
+import extensions.ExpectToFail;
+
 import org.junit.gen5.api.AfterAll;
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.Assertions;
 import org.junit.gen5.api.BeforeAll;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import extensions.ExpectToFail;
 
 // tag::user_guide[]
 class StandardTests {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -46,7 +46,7 @@ public void execute(ExecutionRequest request) {
 		EngineExecutionListener engineExecutionListener = request.getEngineExecutionListener();
 		TestDescriptor engineTestDescriptor = request.getRootTestDescriptor();
 		engineExecutionListener.executionStarted(engineTestDescriptor);
-		RunnerExecutor runnerExecutor = new RunnerExecutor(engineExecutionListener);
+		RunnerExecutor runnerExecutor = new RunnerExecutor(engineExecutionListener, LOG);
 		executeAllChildren(runnerExecutor, engineTestDescriptor);
 		engineExecutionListener.executionFinished(engineTestDescriptor, successful());
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -80,7 +80,9 @@ default void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	 * Called when the execution of a leaf or subtree of the {@link TestPlan}
 	 * has been skipped.
 	 *
-	 * <p>The {@link TestIdentifier} may represent a test or a container.
+	 * <p>The {@link TestIdentifier} may represent a test or a container. In
+	 * the case of a container, no listener methods will be called for any of
+	 * its descendants.
 	 *
 	 * <p>A skipped test or subtree of tests will never be reported as
 	 * {@linkplain #executionStarted started} or

File: junit-tests/src/test/java/org/junit/gen5/engine/TestDescriptorStub.java
Patch:
@@ -30,11 +30,11 @@ public String getDisplayName() {
 
 	@Override
 	public boolean isTest() {
-		return false;
+		return getChildren().isEmpty();
 	}
 
 	@Override
 	public boolean isContainer() {
-		return false;
+		return !isTest();
 	}
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolverTests.java
Patch:
@@ -48,7 +48,7 @@ void logsWarningWhenFilterExcludesClass() {
 
 		assertThat(logger.getLogRecords()).hasSize(1);
 		LogRecord logRecord = getOnlyElement(logger.getLogRecords());
-		assertEquals(Level.WARNING, logRecord.getLevel());
+		assertEquals(Level.INFO, logRecord.getLevel());
 		assertEquals("Class " + Bar.class.getName() + " was excluded by a class filter: no match",
 			logRecord.getMessage());
 	}

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -73,7 +73,7 @@ private Set<TestClassRequest> filterAndConvertToTestClassRequests(EngineDiscover
 		List<ClassFilter> allClassFilters = discoveryRequest.getDiscoveryFiltersByType(ClassFilter.class);
 		Filter<Class<?>> classFilter = new ExclusionReasonConsumingFilter<>(combine(allClassFilters),
 			(testClass, reason) -> {
-				logger.warning(String.format("Class %s was excluded by a class filter: %s", testClass.getName(),
+				logger.info(String.format("Class %s was excluded by a class filter: %s", testClass.getName(),
 					reason.orElse("<unknown reason>")));
 			});
 		return collector.toRequests(classFilter.toPredicate());

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestEngine.java
Patch:
@@ -26,15 +26,15 @@ public DummyTestEngine() {
 
 	public DummyTestEngine(String engineId) {
 		this.engineId = engineId;
-		this.root = new EngineDescriptor(engineId, "Dummy Engine: " + engineId);
+		this.root = new EngineDescriptor(engineId, engineId);
 	}
 
 	@Override
 	public String getId() {
 		return engineId;
 	}
 
-	public TestDescriptor addTest(String uniqueName, Runnable runnable) {
+	public DummyTestDescriptor addTest(String uniqueName, Runnable runnable) {
 		DummyTestDescriptor child = new DummyTestDescriptor(engineId + ":" + uniqueName, uniqueName, runnable);
 		root.addChild(child);
 		return child;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -10,7 +10,8 @@
 
 package org.junit.gen5.engine.junit5;
 
-import static org.junit.gen5.api.Assertions.*;
+import static org.junit.gen5.api.Assertions.assertEquals;
+import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ConditionEvaluationResult.java
Patch:
@@ -58,7 +58,7 @@ public String toString() {
 		// @formatter:off
 		return new ToStringBuilder(this)
 			.append("enabled", this.enabled)
-			.append("reason", this.reason)
+			.append("reason", this.reason.orElse("<unknown>"))
 			.toString();
 		// @formatter:on
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/DisabledCondition.java
Patch:
@@ -56,7 +56,8 @@ public ConditionEvaluationResult evaluate(TestExtensionContext context) {
 	private ConditionEvaluationResult evaluate(AnnotatedElement element) {
 		Optional<Disabled> disabled = findAnnotation(element, Disabled.class);
 		if (disabled.isPresent()) {
-			String reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElse("Test is @Disabled");
+			String reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(
+				() -> element + " is @Disabled");
 			return ConditionEvaluationResult.disabled(reason);
 		}
 

File: junit5-api/src/main/java/org/junit/gen5/api/Assertions.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * @since 5.0
+ * @see AssertionFailedError
+ * @see Assumptions
  */
 public final class Assertions {
 

File: junit5-api/src/main/java/org/junit/gen5/api/Assertions.java
Patch:
@@ -254,7 +254,7 @@ private static void failNotNull(Object actual, String message) {
 	}
 
 	private static void failSame(Object actual, String message) {
-		fail(buildPrefix(message) + "expected: not equal but was: <" + actual + ">");
+		fail(buildPrefix(message) + "expected: not same but was: <" + actual + ">");
 	}
 
 	private static void failNotSame(Object expected, Object actual, String message) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/EngineIdFilter.java
Patch:
@@ -10,8 +10,10 @@
 
 package org.junit.gen5.launcher;
 
+import static org.junit.gen5.commons.meta.API.Usage.Experimental;
 import static org.junit.gen5.engine.FilterResult.includedIf;
 
+import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.engine.Filter;
 import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.TestEngine;
@@ -24,6 +26,7 @@
  * @since 5.0
  * @see TestDiscoveryRequest
  */
+@API(Experimental)
 public class EngineIdFilter implements Filter<String> {
 
 	public static EngineIdFilter byEngineId(String engineId) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TagFilter.java
Patch:
@@ -11,9 +11,11 @@
 package org.junit.gen5.launcher;
 
 import static java.util.Arrays.asList;
+import static org.junit.gen5.commons.meta.API.Usage.Experimental;
 
 import java.util.List;
 
+import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.TestTag;
 
@@ -23,6 +25,7 @@
  *
  * @since 5.0
  */
+@API(Experimental)
 public final class TagFilter {
 
 	private TagFilter() {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestPlan.java
Patch:
@@ -12,6 +12,7 @@
 
 import static java.util.Collections.emptySet;
 import static java.util.Collections.unmodifiableSet;
+import static org.junit.gen5.commons.meta.API.Usage.Experimental;
 
 import java.util.Collection;
 import java.util.LinkedHashMap;
@@ -21,10 +22,10 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
+import org.junit.gen5.commons.meta.API;
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.launcher.Launcher;
 
 /**
  * {@code TestPlan} describes the tree of tests and containers as discovered
@@ -47,6 +48,7 @@
  * @see Launcher
  * @see TestExecutionListener
  */
+@API(Experimental)
 public final class TestPlan {
 
 	private final Set<TestIdentifier> roots = new LinkedHashSet<>();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java
Patch:
@@ -33,7 +33,6 @@
  * @see Launcher
  * @see LauncherFactory
  */
-
 class DefaultLauncher implements Launcher {
 
 	private static final Logger LOG = Logger.getLogger(DefaultLauncher.class.getName());

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/LauncherFactoryForTestingPurposesOnly.java
Patch:
@@ -24,7 +24,7 @@ public static DefaultLauncher createLauncher(TestEngine... engines) {
 	}
 
 	public static DefaultLauncher createLauncher(Iterable<TestEngine> engines) {
-		return new DefaultLauncher(() -> engines);
+		return new DefaultLauncher(engines);
 	}
 
 }

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;
 import org.junit.gen5.launcher.listeners.TestExecutionSummary;
-import org.junit.gen5.launcher.main.DefaultLauncher;
+import org.junit.gen5.launcher.main.LauncherFactory;
 
 /**
  * @since 5.0
@@ -34,7 +34,7 @@ public class ExecuteTestsTask implements ConsoleTask {
 	private final Supplier<Launcher> launcherSupplier;
 
 	public ExecuteTestsTask(CommandLineOptions options) {
-		this(options, DefaultLauncher::create);
+		this(options, LauncherFactory::create);
 	}
 
 	// for tests only

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -17,7 +17,8 @@
  *
  * <p>Implementations of this interface are responsible for determining
  * the set of test engines to delegate to at runtime. For example, the
- * {@link org.junit.gen5.launcher.main.DefaultLauncher DefaultLauncher}
+ * default implementation as returned by
+ * {@link org.junit.gen5.launcher.main.LauncherFactory#create LauncherFactory.create()}
  * dynamically registers test engines via Java's
  * {@link java.util.ServiceLoader ServiceLoader} mechanism.
  *
@@ -39,7 +40,7 @@
  * @see TestDiscoveryRequest
  * @see TestPlan
  * @see TestExecutionListener
- * @see org.junit.gen5.launcher.main.DefaultLauncher
+ * @see org.junit.gen5.launcher.main.LauncherFactory
  * @see org.junit.gen5.engine.TestEngine
  */
 public interface Launcher {

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.launcher.main.LauncherFactory.createLauncher;
+import static org.junit.gen5.launcher.main.LauncherFactoryForTestingPurposesOnly.createLauncher;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DefaultLauncherTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.expectThrows;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
 import static org.junit.gen5.launcher.EngineIdFilter.byEngineId;
-import static org.junit.gen5.launcher.main.LauncherFactory.createLauncher;
+import static org.junit.gen5.launcher.main.LauncherFactoryForTestingPurposesOnly.createLauncher;
 import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.assertj.core.api.Assertions;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/LauncherFactoryForTestingPurposesOnly.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @since 5.0
  */
-public class LauncherFactory {
+public class LauncherFactoryForTestingPurposesOnly {
 
 	public static DefaultLauncher createLauncher(TestEngine... engines) {
 		return createLauncher(asList(engines));

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.gen5.launcher.TestDiscoveryRequest;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
-import org.junit.gen5.launcher.main.DefaultLauncher;
+import org.junit.gen5.launcher.main.*;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -69,7 +69,7 @@ public class JUnit5 extends Runner implements Filterable {
 	private static final String[] EMPTY_STRING_ARRAY = new String[0];
 	private static final String EMPTY_STRING = "";
 
-	private final Launcher launcher = DefaultLauncher.create();
+	private final Launcher launcher = LauncherFactory.create();
 	private final Class<?> testClass;
 	private TestDiscoveryRequest discoveryRequest;
 	private JUnit5TestTree testTree;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.launcher.*;
-import org.junit.gen5.launcher.main.DefaultLauncher;
+import org.junit.gen5.launcher.main.LauncherFactory;
 
 public class JUnitGen5Provider extends AbstractProvider {
 
@@ -52,7 +52,7 @@ public RunResult invoke(Object forkTestSet)
 			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
-		Launcher launcher = DefaultLauncher.create();
+		Launcher launcher = LauncherFactory.create();
 		TestsToRun testsToRun = scanClasspath(launcher);
 		return invokeAllTests(testsToRun, launcher);
 	}

File: junit-tests/src/test/java/org/junit/gen5/engine/TestDescriptorStub.java
Patch:
@@ -12,9 +12,9 @@
 
 import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
-final class TestDescriptorStub extends AbstractTestDescriptor {
+public final class TestDescriptorStub extends AbstractTestDescriptor {
 
-	TestDescriptorStub(String uniqueId) {
+	public TestDescriptorStub(String uniqueId) {
 		super(uniqueId);
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.api.extension.ParameterResolutionException;
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry.ApplicationOrder;
+import org.junit.gen5.engine.junit5.execution.ExtensionRegistry.ApplicationOrder;
 
 /**
  * {@code MethodInvoker} encapsulates the invocation of a method, including
@@ -35,9 +35,9 @@ public class MethodInvoker {
 
 	private final ExtensionContext extensionContext;
 
-	private final TestExtensionRegistry extensionRegistry;
+	private final ExtensionRegistry extensionRegistry;
 
-	public MethodInvoker(ExtensionContext extensionContext, TestExtensionRegistry extensionRegistry) {
+	public MethodInvoker(ExtensionContext extensionContext, ExtensionRegistry extensionRegistry) {
 		this.extensionContext = extensionContext;
 		this.extensionRegistry = extensionRegistry;
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/RegisteredExtensionPoint.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.gen5.commons.util.ToStringBuilder;
 
 /**
- * Represents an {@link ExtensionPoint} registered in a {@link TestExtensionRegistry}.
+ * Represents an {@link ExtensionPoint} registered in an {@link ExtensionRegistry}.
  *
  * @param <E> the type of registered {@link ExtensionPoint}
  * @since 5.0
@@ -68,7 +68,7 @@ public E getExtensionPoint() {
 	 * object. However, if an extension point is registered programmatically
 	 * &mdash; for example, as a lambda expression or method reference by
 	 * an {@link org.junit.gen5.api.extension.ExtensionRegistrar ExtensionRegistrar}
-	 * or by the framework via the {@link TestExtensionRegistry} &mdash;
+	 * or by the framework via the {@link ExtensionRegistry} &mdash;
 	 * the {@code source} object may be the {@code ExtensionRegistrar} that
 	 * registered the extension point, the underlying
 	 * {@link java.lang.reflect.Method} that implements the extension point

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java
Patch:
@@ -28,7 +28,7 @@
  * Default implementation of the {@link Launcher} API using dynamically
  * registered test engines.
  *
- * <p>External clients can obtain an instance by invoking {@link #get}.
+ * <p>External clients can obtain an instance by invoking {@link #create()}.
  *
  * <p>Test engines are registered at runtime using the
  * {@link java.util.ServiceLoader ServiceLoader} facility. For that purpose, a

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -20,8 +20,9 @@
  * {@code @Test} is used to signal that the annotated method is a
  * <em>test</em> method.
  *
- * <p>{@code @Test} may also be used on an annotation in order to create a
- * custom test annotation, effectively acting as a meta-annotation.
+ * <p>{@code @Test} may also be used as a meta-annotation in order to
+ * create a custom <em>composed annotation</em> that inherits the semantics
+ * of {@code @Test}.
  *
  * <p>{@code @Test} methods must not be {@code private} or {@code static}.
  *

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/LauncherFactory.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.gen5.engine.TestEngine;
 
+/**
+ * @since 5.0
+ */
 public class LauncherFactory {
 
 	public static DefaultLauncher createLauncher(TestEngine... engines) {

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -34,7 +34,7 @@ public class ExecuteTestsTask implements ConsoleTask {
 	private final Supplier<Launcher> launcherSupplier;
 
 	public ExecuteTestsTask(CommandLineOptions options) {
-		this(options, DefaultLauncher::get);
+		this(options, DefaultLauncher::create);
 	}
 
 	// for tests only

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -69,7 +69,7 @@ public class JUnit5 extends Runner implements Filterable {
 	private static final String[] EMPTY_STRING_ARRAY = new String[0];
 	private static final String EMPTY_STRING = "";
 
-	private final Launcher launcher = DefaultLauncher.get();
+	private final Launcher launcher = DefaultLauncher.create();
 	private final Class<?> testClass;
 	private TestDiscoveryRequest discoveryRequest;
 	private JUnit5TestTree testTree;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -52,7 +52,7 @@ public RunResult invoke(Object forkTestSet)
 			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
-		Launcher launcher = DefaultLauncher.get();
+		Launcher launcher = DefaultLauncher.create();
 		TestsToRun testsToRun = scanClasspath(launcher);
 		return invokeAllTests(testsToRun, launcher);
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/Nested.java
Patch:
@@ -17,8 +17,8 @@
 import java.lang.annotation.Target;
 
 /**
- * {@code @Nested} is used to signal that the annotated class is a nested
- * test class.
+ * {@code @Nested} is used to signal that the annotated class is a nested,
+ * non-static test class.
  *
  * @since 5.0
  */

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.gen5.engine.discovery.ClasspathSelector.forPaths;
 import static org.junit.gen5.engine.discovery.NameBasedSelector.forNames;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.util.LinkedHashSet;

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestDiscoveryRequest.java
Patch:
@@ -17,11 +17,11 @@
 /**
  * This class extends the {@link EngineDiscoveryRequest}
  * by providing access to filters which are applied by the
- * {@link org.junit.gen5.launcher.main.Launcher} itself
+ * {@link Launcher} itself
  *
  * <p>Moreover, the add*-methods can be used by external clients
  * that do not want to use the
- * {@link org.junit.gen5.launcher.main.DiscoveryRequestBuilder}.
+ * {@link org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder}.
  *
  * @since 5.0
  */

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.commons.reporting.ReportingEntry;
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.TestExecutionResult.Status;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.Launcher;
 
 /**
  * Register an instance of this class with a {@link Launcher} to be notified of

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestPlan.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.Launcher;
 
 /**
  * {@code TestPlan} describes the tree of tests and containers as discovered

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common {@link org.junit.gen5.launcher.TestExecutionListener
  * TestExecutionListener} implementations and related support classes for
- * the JUnit {@link org.junit.gen5.launcher.main.Launcher Launcher}.
+ * the JUnit {@link org.junit.gen5.launcher.Launcher Launcher}.
  */
 
 package org.junit.gen5.launcher.listeners;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.gen5.engine.discovery.ClasspathSelector.forPaths;
 import static org.junit.gen5.engine.discovery.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.ExecutionEventRecorder;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryFilterApplierTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.engine.junit5.descriptor.TestDescriptorBuilder.*;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
 import static org.junit.gen5.engine.TestExecutionResultConditions.suppressed;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.IOException;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.Assertions;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.assertTrue;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/DiscoverySelectorTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.assertSame;
 import static org.junit.gen5.api.Assertions.assertThrows;
 import static org.junit.gen5.api.Assertions.assertTrue;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DiscoveryRequestBuilderTests.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.gen5.engine.discovery.MethodSelector.forMethod;
 import static org.junit.gen5.engine.discovery.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DiscoveryRequestTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.gen5.api.Assertions.assertNotNull;
 import static org.junit.gen5.engine.discovery.NameBasedSelector.forName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.Arrays;
 import java.util.List;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.surefire;
 
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -27,7 +27,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.launcher.*;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.main.DefaultLauncher;
 
 public class JUnitGen5Provider extends AbstractProvider {
 
@@ -52,7 +52,7 @@ public RunResult invoke(Object forkTestSet)
 			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
-		Launcher launcher = new Launcher();
+		Launcher launcher = DefaultLauncher.get();
 		TestsToRun testsToRun = scanClasspath(launcher);
 		return invokeAllTests(testsToRun, launcher);
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
- * The {@link org.junit.gen5.launcher.main.JUnit5Launcher JUnit5Launcher} class is the
- * main starting point for running all JUnit tests.
+ * The {@link org.junit.gen5.launcher.main.DefaultLauncher DefaultLauncher}
+ * class is the main starting point for running all JUnit tests.
  *
  * <p>The {@link org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder
  * TestDiscoveryRequestBuilder} serves as a small DSL for creating

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.launcher.*;
-import org.junit.gen5.launcher.main.JUnit5Launcher;
+import org.junit.gen5.launcher.main.DefaultLauncher;
 
 public class JUnitGen5Provider extends AbstractProvider {
 
@@ -52,7 +52,7 @@ public RunResult invoke(Object forkTestSet)
 			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
-		Launcher launcher = JUnit5Launcher.get();
+		Launcher launcher = DefaultLauncher.get();
 		TestsToRun testsToRun = scanClasspath(launcher);
 		return invokeAllTests(testsToRun, launcher);
 	}

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toCollection;
 import static org.junit.gen5.engine.discovery.ClasspathSelector.forPaths;
 import static org.junit.gen5.engine.discovery.NameBasedSelector.forNames;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.util.LinkedHashSet;

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.gen5.launcher.*;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;
 import org.junit.gen5.launcher.listeners.TestExecutionSummary;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.main.JUnit5Launcher;
 
 /**
  * @since 5.0
@@ -33,7 +33,7 @@ public class ExecuteTestsTask implements ConsoleTask {
 	private final Supplier<Launcher> launcherSupplier;
 
 	public ExecuteTestsTask(CommandLineOptions options) {
-		this(options, Launcher::new);
+		this(options, JUnit5Launcher::get);
 	}
 
 	// for tests only

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestDiscoveryRequest.java
Patch:
@@ -17,11 +17,11 @@
 /**
  * This class extends the {@link EngineDiscoveryRequest}
  * by providing access to filters which are applied by the
- * {@link org.junit.gen5.launcher.main.Launcher} itself
+ * {@link Launcher} itself
  *
  * <p>Moreover, the add*-methods can be used by external clients
  * that do not want to use the
- * {@link org.junit.gen5.launcher.main.DiscoveryRequestBuilder}.
+ * {@link org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder}.
  *
  * @since 5.0
  */

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.commons.reporting.ReportingEntry;
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.TestExecutionResult.Status;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.Launcher;
 
 /**
  * Register an instance of this class with a {@link Launcher} to be notified of

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestPlan.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.Launcher;
 
 /**
  * {@code TestPlan} describes the tree of tests and containers as discovered

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common {@link org.junit.gen5.launcher.TestExecutionListener
  * TestExecutionListener} implementations and related support classes for
- * the JUnit {@link org.junit.gen5.launcher.main.Launcher Launcher}.
+ * the JUnit {@link org.junit.gen5.launcher.Launcher Launcher}.
  */
 
 package org.junit.gen5.launcher.listeners;

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/package-info.java
Patch:
@@ -1,9 +1,9 @@
 /**
- * The {@link org.junit.gen5.launcher.main.Launcher Launcher} class is the
+ * The {@link org.junit.gen5.launcher.main.JUnit5Launcher JUnit5Launcher} class is the
  * main starting point for running all JUnit tests.
  *
- * <p>The {@link org.junit.gen5.launcher.main.DiscoveryRequestBuilder
- * DiscoveryRequestBuilder} serves as a small DSL for creating
+ * <p>The {@link org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder
+ * TestDiscoveryRequestBuilder} serves as a small DSL for creating
  * {@link org.junit.gen5.launcher.TestDiscoveryRequest TestDiscoveryRequests}.
  */
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.gen5.engine.discovery.ClasspathSelector.forPaths;
 import static org.junit.gen5.engine.discovery.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.ExecutionEventRecorder;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryFilterApplierTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.engine.junit5.descriptor.TestDescriptorBuilder.*;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
 import static org.junit.gen5.engine.TestExecutionResultConditions.suppressed;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.IOException;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.Assertions;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.assertTrue;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/DiscoverySelectorTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.assertSame;
 import static org.junit.gen5.api.Assertions.assertThrows;
 import static org.junit.gen5.api.Assertions.assertTrue;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DiscoveryRequestBuilderTests.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.gen5.engine.discovery.MethodSelector.forMethod;
 import static org.junit.gen5.engine.discovery.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/DiscoveryRequestTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.gen5.api.Assertions.assertNotNull;
 import static org.junit.gen5.engine.discovery.NameBasedSelector.forName;
 import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.util.Arrays;
 import java.util.List;

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
@@ -28,7 +28,7 @@
 import org.junit.gen5.engine.discovery.PackageSelector;
 import org.junit.gen5.engine.discovery.UniqueIdSelector;
 import org.junit.gen5.launcher.*;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.main.JUnit5Launcher;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -63,7 +63,7 @@ public class JUnit5 extends Runner implements Filterable {
 	private static final String[] EMPTY_STRING_ARRAY = new String[0];
 	private static final String EMPTY_STRING = "";
 
-	private final Launcher launcher = new Launcher();
+	private final Launcher launcher = JUnit5Launcher.get();
 	private final Class<?> testClass;
 	private TestDiscoveryRequest discoveryRequest;
 	private JUnit5TestTree testTree;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.surefire;
 
 import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
-import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.main.TestDiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -27,7 +27,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.launcher.*;
-import org.junit.gen5.launcher.main.Launcher;
+import org.junit.gen5.launcher.main.JUnit5Launcher;
 
 public class JUnitGen5Provider extends AbstractProvider {
 
@@ -52,7 +52,7 @@ public RunResult invoke(Object forkTestSet)
 			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
-		Launcher launcher = new Launcher();
+		Launcher launcher = JUnit5Launcher.get();
 		TestsToRun testsToRun = scanClasspath(launcher);
 		return invokeAllTests(testsToRun, launcher);
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionContext.java
Patch:
@@ -79,7 +79,7 @@ public interface ExtensionContext {
 	 *
 	 * <p>For example, if the current extension context encapsulates a test
 	 * class or test method, the annotated element will be the corresponding
-	 * {@link #getClass() Class} or {@link java.lang.reflect.Method Method}
+	 * {@link #getTestClass() Class} or {@link java.lang.reflect.Method Method}
 	 * reference.
 	 *
 	 * <p>Favor this method over more specific methods whenever the

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPointRegistry.java
Patch:
@@ -49,7 +49,7 @@
  *
  * <pre style="code">
  * public void registerExtensions(ExtensionPointRegistry registry) {
- *     registry.register((BeforeEachExtensionPoint) context -> { &#47;* ... *&#47; });
+ *     registry.register((BeforeEachExtensionPoint) context -&gt; { &#47;* ... *&#47; });
  * }
  * </pre>
  *
@@ -82,7 +82,7 @@ public interface ExtensionPointRegistry {
 	 * extension points of the same type.
 	 *
 	 * <p>The position can be specified when programmatically
-	 * {@linkplain ExtensionPointRegistry#register(ExtensionPoint, Class, Position)
+	 * {@linkplain ExtensionPointRegistry#register(ExtensionPoint, Position)
 	 * registering} an extension point. Possible values include
 	 * {@link #OUTERMOST OUTERMOST}, {@link #OUTSIDE_DEFAULT OUTSIDE_DEFAULT},
 	 * {@link #DEFAULT DEFAULT}, {@link #INSIDE_DEFAULT INSIDE_DEFAULT}, and

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistryTests.java
Patch:
@@ -245,8 +245,8 @@ class MyExtensionRegistrar implements ExtensionRegistrar {
 
 	@Override
 	public void registerExtensions(ExtensionPointRegistry registry) {
-		registry.register(this::doNothing, MyExtensionPoint.class);
-		registry.register(this::doMore, AnotherExtensionPoint.class);
+		registry.register((MyExtensionPoint) this::doNothing);
+		registry.register((AnotherExtensionPoint) this::doMore);
 	}
 
 	private void doMore() {

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionContext.java
Patch:
@@ -151,9 +151,9 @@ interface Store {
 	class Namespace {
 
 		/**
-		 * Get default namespace which allows access to stored data from all extensions.
+		 * The default namespace which allows access to stored data from all extensions.
 		 */
-		public static Namespace DEFAULT = Namespace.of(new Object());
+		public static final Namespace DEFAULT = Namespace.of(new Object());
 
 		/**
 		 * Create a namespace which restricts access to data to all users which use the same

File: junit-launcher/src/main/java/org/junit/gen5/launcher/EngineIdFilter.java
Patch:
@@ -39,10 +39,10 @@ private EngineIdFilter(String engineId) {
 	@Override
 	public FilterResult filter(String engineId) {
 		if (this.engineId.equals(engineId)) {
-			return included("EngineId matches");
+			return included("Engine ID matches");
 		}
 		else {
-			return excluded("EngineId matches");
+			return excluded("Engine ID does not match");
 		}
 	}
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -61,7 +61,7 @@ public class ClassTestDescriptor extends JUnit5TestDescriptor implements Contain
 
 	private final Class<?> testClass;
 
-	ClassTestDescriptor(String uniqueId, Class<?> testClass) {
+	public ClassTestDescriptor(String uniqueId, Class<?> testClass) {
 		super(uniqueId);
 
 		this.testClass = Preconditions.notNull(testClass, "Class must not be null");

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/NestedClassTestDescriptor.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class NestedClassTestDescriptor extends ClassTestDescriptor {
 
-	NestedClassTestDescriptor(String uniqueId, Class<?> testClass) {
+	public NestedClassTestDescriptor(String uniqueId, Class<?> testClass) {
 		super(uniqueId, testClass);
 	}
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -20,9 +20,9 @@
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
 import org.junit.gen5.launcher.DiscoveryRequest;
-import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;
 import org.junit.gen5.launcher.listeners.TestExecutionSummary;
+import org.junit.gen5.launcher.main.Launcher;
 
 /**
  * @since 5.0

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -14,6 +14,9 @@
 
 import org.junit.gen5.engine.TestExecutionResult;
 import org.junit.gen5.engine.TestExecutionResult.Status;
+import org.junit.gen5.launcher.TestIdentifier;
+import org.junit.gen5.launcher.TestPlan;
+import org.junit.gen5.launcher.main.Launcher;
 
 /**
  * Register an instance of this class with a {@link Launcher} to be notified of

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestId.java
Patch:
@@ -25,7 +25,7 @@ public final class TestId implements Serializable {
 
 	private final String uniqueId;
 
-	TestId(String uniqueId) {
+	public TestId(String uniqueId) {
 		this.uniqueId = Preconditions.notBlank(uniqueId, "uniqueId must not be null or empty");
 	}
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestIdentifier.java
Patch:
@@ -40,7 +40,7 @@ public final class TestIdentifier implements Serializable {
 	private final boolean container;
 	private final TestId parentId;
 
-	static TestIdentifier from(TestDescriptor testDescriptor) {
+	public static TestIdentifier from(TestDescriptor testDescriptor) {
 		// TODO Use Flyweight Pattern for TestId?
 		TestId uniqueId = new TestId(testDescriptor.getUniqueId());
 		String displayName = testDescriptor.getDisplayName();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Common {@link org.junit.gen5.launcher.TestExecutionListener
  * TestExecutionListener} implementations and related support classes for
- * the JUnit {@link org.junit.gen5.launcher.Launcher Launcher}.
+ * the JUnit {@link org.junit.gen5.launcher.main.Launcher Launcher}.
  */
 
 package org.junit.gen5.launcher.listeners;

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/ServiceLoaderTestEngineRegistry.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher;
+package org.junit.gen5.launcher.main;
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;

File: junit-launcher/src/main/java/org/junit/gen5/launcher/main/TestEngineRegistry.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher;
+package org.junit.gen5.launcher.main;
 
 import org.junit.gen5.engine.TestEngine;
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.launcher.LauncherFactory.createLauncher;
+import static org.junit.gen5.launcher.main.LauncherFactory.createLauncher;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: junit-tests/src/test/java/org/junit/gen5/launcher/main/LauncherFactory.java
Patch:
@@ -8,11 +8,12 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.launcher;
+package org.junit.gen5.launcher.main;
 
 import static java.util.Arrays.asList;
 
 import org.junit.gen5.engine.TestEngine;
+import org.junit.gen5.launcher.main.Launcher;
 
 public class LauncherFactory {
 	public static Launcher createLauncher(TestEngine... engines) {

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -29,11 +29,11 @@
 import org.junit.gen5.engine.discovery.UniqueIdSelector;
 import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.gen5.launcher.EngineIdFilter;
-import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.PostDiscoveryFilter;
 import org.junit.gen5.launcher.TagFilter;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
+import org.junit.gen5.launcher.main.Launcher;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.launcher.DiscoveryRequest;
-import org.junit.gen5.launcher.Launcher;
+import org.junit.gen5.launcher.main.Launcher;
 
 public class JUnitGen5Provider extends AbstractProvider {
 

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -15,9 +15,9 @@
 
 import org.apache.maven.surefire.util.ScannerFilter;
 import org.junit.gen5.launcher.DiscoveryRequest;
-import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
+import org.junit.gen5.launcher.main.Launcher;
 
 final class TestPlanScannerFilter implements ScannerFilter {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoverySelector.java
Patch:
@@ -17,6 +17,5 @@
  * @see EngineDiscoveryRequest
  */
 public interface DiscoverySelector {
-
 	void accept(DiscoverySelectorVisitor visitor);
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TagFilter.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.gen5.engine.TestTag;
 
 public class TagFilter {
-
 	public static PostDiscoveryFilter includeTags(String... tagNames) {
 		return includeTags(asList(tagNames));
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestEngineRegistry.java
Patch:
@@ -16,7 +16,5 @@
  * @since 5.0
  */
 interface TestEngineRegistry {
-
 	Iterable<TestEngine> getTestEngines();
-
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -42,7 +42,6 @@
  * @see TestIdentifier
  */
 public interface TestExecutionListener {
-
 	/**
 	 * Called when additional test reporting data has been published for
 	 * the supplied {@link TestIdentifier}. Can be called at all times.
@@ -146,5 +145,4 @@ default void executionStarted(TestIdentifier testIdentifier) {
 	 */
 	default void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 	}
-
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListenerRegistry.java
Patch:
@@ -20,7 +20,6 @@
  * @since 5.0
  */
 class TestExecutionListenerRegistry {
-
 	private final List<TestExecutionListener> testExecutionListeners = new LinkedList<>();
 
 	void registerListener(TestExecutionListener... listeners) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestId.java
Patch:
@@ -21,7 +21,6 @@
  * @since 5.0
  */
 public final class TestId implements Serializable {
-
 	private static final long serialVersionUID = 1L;
 
 	private final String uniqueId;
@@ -48,5 +47,4 @@ public int hashCode() {
 	public String toString() {
 		return this.uniqueId;
 	}
-
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestPlan.java
Patch:
@@ -46,7 +46,6 @@
  * @see TestExecutionListener
  */
 public final class TestPlan {
-
 	private final Set<TestIdentifier> roots = new LinkedHashSet<>();
 	private final Map<TestId, LinkedHashSet<TestIdentifier>> children = new LinkedHashMap<>();
 	private final Map<TestId, TestIdentifier> allIdentifiers = new LinkedHashMap<>();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/LoggingListener.java
Patch:
@@ -31,7 +31,6 @@
  * @see LoggingListener#LoggingListener(BiConsumer)
  */
 public class LoggingListener implements TestExecutionListener {
-
 	/**
 	 * Create a {@code LoggingListener} which delegates to a
 	 * {@link java.util.logging.Logger} using a log level of
@@ -107,5 +106,4 @@ private void log(String message, Object... args) {
 	private void logWithThrowable(String message, Throwable t, Object... args) {
 		logger.accept(t, () -> String.format(message, args));
 	}
-
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/SummaryGeneratingListener.java
Patch:
@@ -30,9 +30,7 @@
  * @see #getSummary()
  */
 public class SummaryGeneratingListener implements TestExecutionListener {
-
 	private TestPlan testPlan;
-
 	private TestExecutionSummary summary;
 
 	/**
@@ -92,5 +90,4 @@ else if (testExecutionResult.getStatus() == FAILED) {
 		}
 		testExecutionResult.getThrowable().ifPresent(throwable -> summary.addFailure(testIdentifier, throwable));
 	}
-
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -213,7 +213,7 @@ void resolvesClasspathSelector() throws Exception {
 	void resolvesApplyingClassFilters() throws Exception {
 		File root = getClasspathRoot(PlainJUnit4TestCaseWithSingleTestWhichFails.class);
 
-		DiscoveryRequest discoveryRequest = request().select(forPaths(singleton(root))).filterBy(
+		DiscoveryRequest discoveryRequest = request().select(forPaths(singleton(root))).filter(
 			ClassFilter.byNamePattern(".*JUnit4.*"), ClassFilter.byNamePattern(".*Plain.*")).build();
 
 		TestDescriptor engineDescriptor = engine.discoverTests(discoveryRequest);
@@ -514,7 +514,7 @@ void doesNotResolveMethodOfClassNotAcceptedByClassFilter() throws Exception {
 		// @formatter:off
 		DiscoveryRequest request = request()
 				.select(MethodSelector.forMethod(testClass, testClass.getMethod("failingTest")))
-				.filterBy(ClassFilter.byNamePattern("Foo"))
+				.filter(ClassFilter.byNamePattern("Foo"))
 				.build();
 		// @formatter:on
 

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherFactory.java
Patch:
@@ -15,13 +15,11 @@
 import org.junit.gen5.engine.TestEngine;
 
 public class LauncherFactory {
-
 	public static Launcher createLauncher(TestEngine... engines) {
 		return createLauncher(asList(engines));
 	}
 
 	public static Launcher createLauncher(Iterable<TestEngine> engines) {
 		return new Launcher(() -> engines);
 	}
-
 }

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -82,7 +82,7 @@ public void launcherWillNotCallEnginesThatAreFilterByAnEngineIdFilter() {
 		Launcher launcher = createLauncher(firstEngine, secondEngine);
 
 		TestPlan testPlan = launcher.discover(
-			request().select(forUniqueId(test1.getUniqueId()), forUniqueId(test2.getUniqueId())).filterBy(
+			request().select(forUniqueId(test1.getUniqueId()), forUniqueId(test2.getUniqueId())).filter(
 				byEngineId("first")).build());
 
 		assertThat(testPlan.getRoots()).hasSize(1);

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -14,11 +14,12 @@
  * @since 5.0
  */
 public interface TestEngine {
+
 	default String getId() {
 		return getClass().getCanonicalName();
 	}
 
-	EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest);
+	TestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest);
 
 	void execute(ExecutionRequest request);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -10,13 +10,12 @@
 
 package org.junit.gen5.engine.support.descriptor;
 
-import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.TestEngine;
 
 /**
  * @since 5.0
  */
-public class EngineDescriptor extends AbstractTestDescriptor implements EngineAwareTestDescriptor {
+public class EngineDescriptor extends AbstractTestDescriptor {
 
 	private final TestEngine engine;
 
@@ -45,7 +44,6 @@ public boolean isContainer() {
 		return true;
 	}
 
-	@Override
 	public TestEngine getEngine() {
 		return engine;
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.Map;
 import java.util.logging.Logger;
 
-import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.FilterResult;
@@ -114,7 +113,7 @@ private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {
 
 			LOG.fine(() -> String.format("Discovering tests during launcher %s phase in engine '%s'.", phase,
 				testEngine.getId()));
-			EngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);
+			TestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);
 			root.add(testEngine, engineRoot);
 		}
 		root.applyFilters(discoveryRequest);

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/stubs/TestEngineStub.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.gen5.engine.junit5.stubs;
 
-import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
+import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
 
 /**
@@ -28,7 +28,7 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
+	public TestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		return null;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/AbstractTestDescriptorTests.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
@@ -37,7 +36,7 @@ public void initTree() {
 		engineDescriptor = new EngineDescriptor(new TestEngine() {
 
 			@Override
-			public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
+			public TestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 				return engineDescriptor;
 			}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestEngine.java
Patch:
@@ -10,12 +10,10 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
-import org.junit.gen5.engine.support.hierarchical.HierarchicalTestEngine;
 
 public final class DummyTestEngine extends HierarchicalTestEngine<DummyEngineExecutionContext> {
 
@@ -43,7 +41,7 @@ public TestDescriptor addTest(String uniqueName, Runnable runnable) {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
+	public TestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		return root;
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -36,7 +36,7 @@ public String getId() {
 	}
 
 	@Override
-	public JUnit5EngineDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
+	public TestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		Preconditions.notNull(discoveryRequest, "discovery request must not be null");
 		JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(this);
 		resolveDiscoveryRequest(discoveryRequest, engineDescriptor);

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestPlan.java
Patch:
@@ -10,7 +10,8 @@
 
 package org.junit.gen5.launcher;
 
-import static java.util.Collections.*;
+import static java.util.Collections.emptySet;
+import static java.util.Collections.unmodifiableSet;
 
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
@@ -50,7 +51,7 @@ public final class TestPlan {
 	private final Map<TestId, LinkedHashSet<TestIdentifier>> children = new LinkedHashMap<>();
 	private final Map<TestId, TestIdentifier> allIdentifiers = new LinkedHashMap<>();
 
-	static TestPlan from(TestDescriptor root) {
+	static TestPlan from(Root root) {
 		TestPlan testPlan = new TestPlan();
 		root.accept(new Visitor() {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/AbstractTestDescriptor.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.discovery;
+package org.junit.gen5.engine.support.descriptor;
 
 import static java.util.Collections.emptySet;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/EngineDescriptor.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.discovery;
+package org.junit.gen5.engine.support.descriptor;
 
 import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.TestEngine;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/FileSystemSource.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.discovery;
+package org.junit.gen5.engine.support.descriptor;
 
 import java.io.File;
 import java.io.Serializable;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/descriptor/JavaSource.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.support.discovery;
+package org.junit.gen5.engine.support.descriptor;
 
 import static org.junit.gen5.commons.util.StringUtils.nullSafeToString;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Container.java
Patch:
@@ -10,8 +10,6 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.EngineExecutionContext;
-
 public interface Container<C extends EngineExecutionContext> extends Node<C> {
 
 	default C beforeAll(C context) throws Exception {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/EngineExecutionContext.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
 
 public interface EngineExecutionContext {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/HierarchicalTestEngine.java
Patch:
@@ -10,7 +10,6 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.EngineExecutionContext;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestEngine;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/HierarchicalTestExecutor.java
Patch:
@@ -12,7 +12,6 @@
 
 import static org.junit.gen5.engine.support.hierarchical.BlacklistedExceptions.rethrowIfBlacklisted;
 
-import org.junit.gen5.engine.EngineExecutionContext;
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Leaf.java
Patch:
@@ -10,8 +10,6 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.EngineExecutionContext;
-
 public interface Leaf<C extends EngineExecutionContext> extends Node<C> {
 	C execute(C context) throws Exception;
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Node.java
Patch:
@@ -12,8 +12,6 @@
 
 import java.util.Optional;
 
-import org.junit.gen5.engine.EngineExecutionContext;
-
 public interface Node<C extends EngineExecutionContext> {
 
 	default C prepare(C context) throws Exception {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/RootTestDescriptor.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.*;
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/engine/ExecutionEventConditions.java
Patch:
@@ -25,7 +25,7 @@
 import org.assertj.core.api.SoftAssertions;
 import org.junit.gen5.engine.ExecutionEvent.Type;
 import org.junit.gen5.engine.TestExecutionResult.Status;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 
 /**
  * Collection of AssertJ conditions for {@link ExecutionEvent}.

File: junit-tests/src/test/java/org/junit/gen5/engine/TestDescriptorStub.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
 final class TestDescriptorStub extends AbstractTestDescriptor {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -55,7 +55,7 @@
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithTwoTestMethods;
 import org.junit.gen5.engine.junit4.samples.junit4.SingleFailingTheoryTestCase;
 import org.junit.gen5.engine.junit4.samples.junit4.TestCaseRunWithJUnit5;
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.runner.manipulation.Filter;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.*;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.discovery.MethodSelector;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.engine.ExecutionEventRecorder;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.ExecutionEventRecorder;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.launcher.DiscoveryRequest;
 import org.opentest4j.TestAbortedException;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestableTests.java
Patch:
@@ -16,7 +16,7 @@
 import java.math.BigDecimal;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 
 public class JUnit5TestableTests {

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/AbstractTestDescriptorTests.java
Patch:
@@ -25,6 +25,8 @@
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 
 public class AbstractTestDescriptorTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/FileSystemSourceTests.java
Patch:
@@ -22,7 +22,8 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.commons.util.PreconditionViolationException;
-import org.junit.gen5.engine.support.discovery.FileSystemSource.FilePosition;
+import org.junit.gen5.engine.support.descriptor.FileSystemSource;
+import org.junit.gen5.engine.support.descriptor.FileSystemSource.FilePosition;
 
 class FileSystemSourceTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/JavaSourceTests.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.TestInfo;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 
 class JavaSourceTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyEngineExecutionContext.java
Patch:
@@ -10,7 +10,5 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.EngineExecutionContext;
-
 class DummyEngineExecutionContext implements EngineExecutionContext {
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestDescriptor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 import org.junit.gen5.engine.support.hierarchical.Leaf;
 
 class DummyTestDescriptor extends AbstractTestDescriptor implements Leaf<DummyEngineExecutionContext> {

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestEngine.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.engine.support.hierarchical.HierarchicalTestEngine;
 
 public final class DummyTestEngine extends HierarchicalTestEngine<DummyEngineExecutionContext> {

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/HierarchicalTestExecutorTests.java
Patch:
@@ -24,11 +24,10 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.EngineExecutionContext;
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestExecutionResult;
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 import org.mockito.ArgumentCaptor;
 import org.mockito.InOrder;
 import org.mockito.Mockito;

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 import org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver;
 import org.junit.gen5.engine.junit4.execution.RunnerExecutor;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 
 public class JUnit4TestEngine implements TestEngine {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/JUnit4TestDescriptor.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestSource;
 import org.junit.gen5.engine.TestTag;
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 import org.junit.runner.Description;
 
 /**

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/JavaSourceExtractor.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.runner.Description;
 
 class JavaSourceExtractor {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/RunnerTestDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Optional;
 
 import org.junit.gen5.engine.TestDescriptor;
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.discovery.ClassFilter;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 
 public class JUnit4DiscoveryRequestResolver {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/TestClassRequestResolver.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -44,7 +44,7 @@
 import org.junit.gen5.engine.junit5.execution.RegisteredExtensionPoint;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
 import org.junit.gen5.engine.junit5.execution.TestInstanceProvider;
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.gen5.engine.support.hierarchical.Container;
 
 /**

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DiscoverySelectorResolver.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.gen5.engine.junit5.discovery.IsNestedTestClass;
 import org.junit.gen5.engine.junit5.discovery.IsScannableTestClass;
 import org.junit.gen5.engine.junit5.discovery.IsTestMethod;
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5EngineDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
-import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.descriptor.EngineDescriptor;
 import org.junit.gen5.engine.support.hierarchical.Container;
 
 public class JUnit5EngineDescriptor extends EngineDescriptor implements Container<JUnit5EngineExecutionContext> {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
-import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+import org.junit.gen5.engine.support.descriptor.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.RegisteredExtensionPoint;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.gen5.engine.support.hierarchical.Leaf;
 
 /**

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/JUnit5EngineExecutionContext.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.commons.JUnitException;
-import org.junit.gen5.engine.EngineExecutionContext;
 import org.junit.gen5.engine.EngineExecutionListener;
+import org.junit.gen5.engine.support.hierarchical.EngineExecutionContext;
 
 /**
  * @since 5.0

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.maven.surefire.report.SimpleReportEntry;
 import org.apache.maven.surefire.report.StackTraceWriter;
 import org.junit.gen5.engine.TestExecutionResult;
-import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.descriptor.JavaSource;
 import org.junit.gen5.launcher.TestExecutionListener;
 import org.junit.gen5.launcher.TestIdentifier;
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.console.tasks;
 
 import static java.util.stream.Collectors.toSet;
-import static org.junit.gen5.engine.ClasspathSelector.forPaths;
-import static org.junit.gen5.engine.NameBasedSelector.forNames;
+import static org.junit.gen5.engine.discovery.ClasspathSelector.forPaths;
+import static org.junit.gen5.engine.discovery.NameBasedSelector.forNames;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.File;
@@ -21,7 +21,7 @@
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
-import org.junit.gen5.engine.ClassFilter;
+import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.gen5.launcher.TagFilter;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/ClassFilter.java
Patch:
@@ -8,7 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
+
+import org.junit.gen5.engine.DiscoveryFilter;
 
 public interface ClassFilter extends DiscoveryFilter<Class<?>> {
 	static ClassFilter byNamePattern(String pattern) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/ClassNameFilter.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
 
 import static org.junit.gen5.engine.FilterResult.excluded;
 import static org.junit.gen5.engine.FilterResult.included;
 
 import java.util.regex.Pattern;
 
-import org.junit.gen5.engine.ClassFilter;
 import org.junit.gen5.engine.FilterResult;
+import org.junit.gen5.engine.discovery.ClassFilter;
 
 /**
  * @since 5.0

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/ClassSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
 
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.ReflectionUtils;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/ClasspathSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
 
 import static java.util.Collections.singleton;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discovery/MethodSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
 
 import java.lang.reflect.Method;
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.console.options.CommandLineOptions;
 import org.junit.gen5.engine.*;
+import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.launcher.DiscoveryRequest;
 
 public class DiscoveryRequestCreatorTests {

File: junit-tests/src/test/java/org/junit/gen5/engine/discovery/ClassFilterTests.java
Patch:
@@ -8,13 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discovery;
 
 import static org.junit.gen5.api.Assertions.*;
 
 import java.util.Collection;
 
 import org.junit.gen5.api.Test;
+import org.junit.gen5.engine.discovery.ClassFilter;
 
 class ClassFilterTests {
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -11,10 +11,10 @@
 package org.junit.gen5.engine.junit4;
 
 import static org.assertj.core.api.Assertions.allOf;
-import static org.junit.gen5.engine.ClassSelector.forClass;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit5;
 
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -13,8 +13,8 @@
 import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
-import static org.junit.gen5.engine.MethodSelector.forMethod;
 import static org.junit.gen5.engine.TestExecutionResultConditions.*;
+import static org.junit.gen5.engine.discovery.MethodSelector.forMethod;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.IOException;
@@ -23,7 +23,7 @@
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.engine.ExecutionEventRecorder;
-import org.junit.gen5.engine.MethodSelector;
+import org.junit.gen5.engine.discovery.MethodSelector;
 import org.junit.gen5.launcher.DiscoveryRequest;
 import org.opentest4j.AssertionFailedError;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.*;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.HashMap;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
-import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;

File: junit-tests/src/test/java/org/junit/gen5/launcher/DiscoveryFilterMock.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.launcher;
 
 import java.util.function.Function;
 import java.util.function.Supplier;

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.launcher;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.engine.discovery.UniqueIdSelector.forUniqueId;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.launcher.EngineIdFilter.byEngineId;
 import static org.junit.gen5.launcher.LauncherFactory.createLauncher;

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClassSelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit4.discovery;
 
-import org.junit.gen5.engine.ClassSelector;
+import org.junit.gen5.engine.discovery.ClassSelector;
 
 class ClassSelectorResolver extends DiscoverySelectorResolver<ClassSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClasspathSelectorResolver.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 
-import org.junit.gen5.engine.ClasspathSelector;
+import org.junit.gen5.engine.discovery.ClasspathSelector;
 
 class ClasspathSelectorResolver extends DiscoverySelectorResolver<ClasspathSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -15,10 +15,10 @@
 import java.util.List;
 import java.util.Set;
 
-import org.junit.gen5.engine.ClassFilter;
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.FilterResult;
+import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 public class JUnit4DiscoveryRequestResolver {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/MethodSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.engine.MethodSelector;
+import org.junit.gen5.engine.discovery.MethodSelector;
 import org.junit.runner.Description;
 
 class MethodSelectorResolver extends DiscoverySelectorResolver<MethodSelector> {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/PackageNameSelectorResolver.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInPackage;
 
-import org.junit.gen5.engine.PackageSelector;
+import org.junit.gen5.engine.discovery.PackageSelector;
 
 class PackageNameSelectorResolver extends DiscoverySelectorResolver<PackageSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Optional;
 
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.UniqueIdSelector;
+import org.junit.gen5.engine.discovery.UniqueIdSelector;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 
 class UniqueIdSelectorResolver extends DiscoverySelectorResolver<UniqueIdSelector> {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -13,12 +13,12 @@
 import java.util.List;
 
 import org.junit.gen5.commons.util.Preconditions;
-import org.junit.gen5.engine.ClassFilter;
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.discovery.ClassFilter;
 import org.junit.gen5.engine.junit5.descriptor.ClassTestDescriptor;
 import org.junit.gen5.engine.junit5.descriptor.DiscoverySelectorResolver;
 import org.junit.gen5.engine.junit5.descriptor.JUnit5EngineDescriptor;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.discovery.ClassSelector.forClass;
 import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.apache.maven.surefire.util.ScannerFilter;

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.stream.Collectors.toSet;
 import static org.junit.gen5.engine.ClasspathSelector.forPaths;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.NameBasedSelector.forNames;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.util.Set;
@@ -22,8 +22,8 @@
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
 import org.junit.gen5.engine.ClassFilter;
-import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.TagFilter;
+import org.junit.gen5.launcher.DiscoveryRequest;
+import org.junit.gen5.launcher.TagFilter;
 
 class DiscoveryRequestCreator {
 	DiscoveryRequest toDiscoveryRequest(CommandLineOptions options) {

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
-import org.junit.gen5.engine.DiscoveryRequest;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;
 import org.junit.gen5.launcher.listeners.TestExecutionSummary;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/CommonFilter.java
Patch:
@@ -17,11 +17,12 @@
 import java.util.Collection;
 
 /**
- * A collection of common builders for {@link DiscoveryRequest} elements.
+ * A collection of common builders for {@link EngineDiscoveryRequest} elements.
  *
  * @since 5.0
  */
 class CommonFilter {
+
 	@SafeVarargs
 	public static <T> DiscoveryFilter<T> combine(DiscoveryFilter<T>... filters) {
 		if (filters == null) {
@@ -49,6 +50,7 @@ private static <T> DiscoveryFilter<T> alwaysIncluded() {
 	}
 
 	private static class AndAllDiscoveryFilter<T> implements DiscoveryFilter<T> {
+
 		private final Collection<DiscoveryFilter<T>> filters;
 
 		public AndAllDiscoveryFilter(Collection<DiscoveryFilter<T>> filters) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoveryFilter.java
Patch:
@@ -16,7 +16,7 @@
  * discovery.
  *
  * @since 5.0
- * @see DiscoveryRequest
+ * @see EngineDiscoveryRequest
  * @see TestEngine
  */
 public interface DiscoveryFilter<T> extends GenericFilter<T> {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoverySelector.java
Patch:
@@ -14,8 +14,9 @@
  * A selector defines location(s) a {@link TestEngine} should lookup tests at.
  *
  * @since 5.0
- * @see DiscoveryRequest
+ * @see EngineDiscoveryRequest
  */
 public interface DiscoverySelector {
+
 	void accept(DiscoverySelectorVisitor visitor);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -18,7 +18,7 @@ default String getId() {
 		return getClass().getCanonicalName();
 	}
 
-	EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest);
+	EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest);
 
 	void execute(ExecutionRequest request);
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/RootTestDescriptor.java
Patch:
@@ -16,7 +16,6 @@
 
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.*;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/DiscoveryRequestCreatorTests.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.console.options.CommandLineOptions;
 import org.junit.gen5.engine.*;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 public class DiscoveryRequestCreatorTests {
 	private CommandLineOptions options = new CommandLineOptions();

File: junit-tests/src/test/java/org/junit/gen5/engine/DiscoveryRequestBuilderTests.java
Patch:
@@ -14,16 +14,17 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.gen5.engine.ClassSelector.forClass;
 import static org.junit.gen5.engine.ClassSelector.forClassName;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;
 import java.util.List;
 
 import org.assertj.core.util.Files;
 import org.junit.gen5.api.Test;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 public class DiscoveryRequestBuilderTests {
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/DiscoveryRequestTests.java
Patch:
@@ -13,14 +13,15 @@
 import static java.util.stream.Collectors.toList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.assertNotNull;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.NameBasedSelector.forName;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.Arrays;
 import java.util.List;
 
 import org.junit.gen5.api.Test;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Unit tests for {@link DiscoveryRequest}.
@@ -55,7 +56,7 @@ public void forNameWithPackage() {
 	@Test
 	public void buildDiscoveryRequest() throws Exception {
 		// @formatter:off
-		DiscoveryRequest spec = request().select(
+		EngineDiscoveryRequest spec = request().select(
 		forUniqueId("junit5:org.example.UserTests#fullname()"),
 			forName(MyTestClass.class.getName()),
 			forName("org.junit.gen5"),

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -21,10 +21,10 @@
 import static org.junit.gen5.commons.util.FunctionUtils.where;
 import static org.junit.gen5.engine.ClassSelector.forClass;
 import static org.junit.gen5.engine.ClasspathSelector.forPaths;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.MethodSelector.forMethod;
 import static org.junit.gen5.engine.PackageSelector.forPackageName;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.File;
 import java.lang.reflect.Method;
@@ -54,6 +54,7 @@
 import org.junit.gen5.engine.junit4.samples.junit4.SingleFailingTheoryTestCase;
 import org.junit.gen5.engine.junit4.samples.junit4.TestCaseRunWithJUnit5;
 import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.runner.manipulation.Filter;
 
 class JUnit4TestEngineDiscoveryTests {

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -12,20 +12,20 @@
 
 import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.List;
 
 import org.junit.AssumptionViolatedException;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEvent;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.junit4.samples.junit3.PlainJUnit3TestCaseWithSingleTestWhichFails;
 import org.junit.gen5.engine.junit4.samples.junit4.*;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 class JUnit4TestEngineExecutionTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -11,11 +11,12 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.*;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Abstract base class for tests involving the {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -28,8 +28,8 @@
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
 import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Integration tests that verify support of {@link BeforeAll}, {@link AfterAll},

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -31,8 +31,8 @@
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.TestExecutionCondition;
 import org.junit.gen5.api.extension.TestExtensionContext;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Integration tests that verify support for {@link Disabled @Disabled} and

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -12,18 +12,18 @@
 
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.MethodSelector.forMethod;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.Method;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.MethodSelector;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Test correct test discovery in simple test classes for the {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -12,19 +12,19 @@
 
 import static org.assertj.core.api.Assertions.allOf;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.MethodSelector.forMethod;
 import static org.junit.gen5.engine.TestExecutionResultConditions.*;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.Optional;
 
 import org.junit.gen5.api.*;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.MethodSelector;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.opentest4j.AssertionFailedError;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -24,8 +24,8 @@
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.InstancePostProcessor;
 import org.junit.gen5.api.extension.TestExtensionContext;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Integration tests that verify support for {@link org.junit.gen5.api.extension.InstancePostProcessor}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -29,8 +29,8 @@
 import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
 import org.junit.gen5.api.extension.TestExtensionContext;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Integration tests that verify support for {@link BeforeEach}, {@link AfterEach}, {@link BeforeEachExtensionPoint},

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -13,12 +13,12 @@
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.*;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Integration tests that verify support for {@linkplain Nested nested contexts}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -12,16 +12,16 @@
 
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.TestReporter;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 public class ReportingTest extends AbstractJUnit5TestEngineTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -12,14 +12,14 @@
 
 import static org.junit.gen5.api.Assertions.*;
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.opentest4j.TestAbortedException;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -13,14 +13,14 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.launcher.DiscoveryRequest;
 
 /**
  * Testing execution in test case hierarchy {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/stubs/TestEngineStub.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit5.stubs;
 
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.EngineAwareTestDescriptor;
+import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestEngine;
 
@@ -28,7 +28,7 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
+	public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		return null;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/AbstractTestDescriptorTests.java
Patch:
@@ -20,8 +20,8 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.EngineAwareTestDescriptor;
+import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
@@ -35,7 +35,7 @@ public void initTree() {
 		engineDescriptor = new EngineDescriptor(new TestEngine() {
 
 			@Override
-			public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
+			public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 				return engineDescriptor;
 			}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyTestEngine.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.support.hierarchical;
 
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.EngineAwareTestDescriptor;
+import org.junit.gen5.engine.EngineDiscoveryRequest;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.support.discovery.EngineDescriptor;
@@ -43,7 +43,7 @@ public TestDescriptor addTest(String uniqueName, Runnable runnable) {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
+	public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		return root;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -11,9 +11,9 @@
 package org.junit.gen5.launcher;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
-import static org.junit.gen5.engine.EngineIdFilter.byEngineId;
 import static org.junit.gen5.engine.UniqueIdSelector.forUniqueId;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.EngineIdFilter.byEngineId;
 import static org.junit.gen5.launcher.LauncherFactory.createLauncher;
 
 import org.junit.gen5.api.Test;

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -13,7 +13,6 @@
 import static org.junit.gen5.engine.TestExecutionResult.successful;
 
 import org.junit.gen5.engine.*;
-import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 import org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver;
 import org.junit.gen5.engine.junit4.execution.RunnerExecutor;
@@ -27,7 +26,7 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
+	public EngineAwareTestDescriptor discoverTests(EngineDiscoveryRequest discoveryRequest) {
 		EngineDescriptor engineDescriptor = new EngineDescriptor(this);
 		new JUnit4DiscoveryRequestResolver(engineDescriptor).resolve(discoveryRequest);
 		return engineDescriptor;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.surefire;
 
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -26,7 +26,7 @@
 import org.apache.maven.surefire.suite.RunResult;
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
-import org.junit.gen5.engine.DiscoveryRequest;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.gen5.launcher.Launcher;
 
 public class JUnitGen5Provider extends AbstractProvider {

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -11,10 +11,10 @@
 package org.junit.gen5.surefire;
 
 import static org.junit.gen5.engine.ClassSelector.forClass;
-import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request;
 
 import org.apache.maven.surefire.util.ScannerFilter;
-import org.junit.gen5.engine.DiscoveryRequest;
+import org.junit.gen5.launcher.DiscoveryRequest;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/discovery/FileSystemSource.java
Patch:
@@ -8,13 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.discovery;
 
 import java.io.File;
 import java.io.Serializable;
 import java.util.Optional;
 
 import org.junit.gen5.commons.util.Preconditions;
+import org.junit.gen5.engine.TestSource;
 
 public class FileSystemSource implements TestSource {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/discovery/JavaSource.java
Patch:
@@ -8,13 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.discovery;
 
 import static org.junit.gen5.commons.util.StringUtils.nullSafeToString;
 
 import java.lang.reflect.Method;
 import java.util.Optional;
 
+import org.junit.gen5.engine.TestSource;
+
 public class JavaSource implements TestSource {
 
 	private static final long serialVersionUID = 1L;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/BlacklistedExceptions.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
 
 import java.util.Collections;
 import java.util.List;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Container.java
Patch:
@@ -8,7 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
+
+import org.junit.gen5.engine.EngineExecutionContext;
 
 public interface Container<C extends EngineExecutionContext> extends Node<C> {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Leaf.java
Patch:
@@ -8,7 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
+
+import org.junit.gen5.engine.EngineExecutionContext;
 
 public interface Leaf<C extends EngineExecutionContext> extends Node<C> {
 	C execute(C context) throws Exception;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/Node.java
Patch:
@@ -8,10 +8,12 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
 
 import java.util.Optional;
 
+import org.junit.gen5.engine.EngineExecutionContext;
+
 public interface Node<C extends EngineExecutionContext> {
 
 	default C prepare(C context) throws Exception {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/support/hierarchical/SingleTestExecutor.java
Patch:
@@ -8,13 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
 
-import static org.junit.gen5.engine.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.gen5.engine.TestExecutionResult.aborted;
 import static org.junit.gen5.engine.TestExecutionResult.failed;
 import static org.junit.gen5.engine.TestExecutionResult.successful;
+import static org.junit.gen5.engine.support.hierarchical.BlacklistedExceptions.rethrowIfBlacklisted;
 
+import org.junit.gen5.engine.TestExecutionResult;
 import org.opentest4j.TestAbortedException;
 
 /**

File: junit-launcher/src/main/java/org/junit/gen5/launcher/RootTestDescriptor.java
Patch:
@@ -17,6 +17,7 @@
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.*;
 import org.junit.gen5.engine.DiscoveryRequest;
+import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ExecuteTestsTaskTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
-import org.junit.gen5.engine.DummyTestEngine;
+import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 
 public class ExecuteTestsTaskTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/ExecutionEventConditions.java
Patch:
@@ -25,6 +25,7 @@
 import org.assertj.core.api.SoftAssertions;
 import org.junit.gen5.engine.ExecutionEvent.Type;
 import org.junit.gen5.engine.TestExecutionResult.Status;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 /**
  * Collection of AssertJ conditions for {@link ExecutionEvent}.

File: junit-tests/src/test/java/org/junit/gen5/engine/TestDescriptorStub.java
Patch:
@@ -10,6 +10,8 @@
 
 package org.junit.gen5.engine;
 
+import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
+
 final class TestDescriptorStub extends AbstractTestDescriptor {
 
 	TestDescriptorStub(String uniqueId) {

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -53,6 +53,7 @@
 import org.junit.gen5.engine.junit4.samples.junit4.PlainJUnit4TestCaseWithTwoTestMethods;
 import org.junit.gen5.engine.junit4.samples.junit4.SingleFailingTheoryTestCase;
 import org.junit.gen5.engine.junit4.samples.junit4.TestCaseRunWithJUnit5;
+import org.junit.gen5.engine.support.discovery.JavaSource;
 import org.junit.runner.manipulation.Filter;
 
 class JUnit4TestEngineDiscoveryTests {

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.*;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 /**
  * Abstract base class for tests involving the {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DiscoveryTests.java
Patch:
@@ -22,8 +22,8 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.MethodSelector;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 /**
  * Test correct test discovery in simple test classes for the {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 /**
  * Integration tests that verify support for {@linkplain Nested nested contexts}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.ExecutionEventRecorder;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 import org.opentest4j.TestAbortedException;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/DiscoverySelectorTests.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.engine.*;
+import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 
 public class DiscoverySelectorTests {
 	private final JUnit5EngineDescriptor engineDescriptor = new JUnit5EngineDescriptor(

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestableTests.java
Patch:
@@ -16,8 +16,8 @@
 import java.math.BigDecimal;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DummyTestEngine;
-import org.junit.gen5.engine.EngineDescriptor;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 
 public class JUnit5TestableTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/FileSystemSourceTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.discovery;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.gen5.api.Assertions.assertEquals;
@@ -22,7 +22,7 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.commons.util.PreconditionViolationException;
-import org.junit.gen5.engine.FileSystemSource.FilePosition;
+import org.junit.gen5.engine.support.discovery.FileSystemSource.FilePosition;
 
 class FileSystemSourceTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/support/discovery/JavaSourceTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.discovery;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.gen5.api.Assertions.assertEquals;

File: junit-tests/src/test/java/org/junit/gen5/engine/support/hierarchical/DummyEngineExecutionContext.java
Patch:
@@ -8,7 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.support.hierarchical;
+
+import org.junit.gen5.engine.EngineExecutionContext;
 
 class DummyEngineExecutionContext implements EngineExecutionContext {
 }

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -17,8 +17,8 @@
 import static org.junit.gen5.launcher.LauncherFactory.createLauncher;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.DummyTestEngine;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.support.hierarchical.DummyTestEngine;
 
 public class LauncherTests {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -17,6 +17,7 @@
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 import org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver;
 import org.junit.gen5.engine.junit4.execution.RunnerExecutor;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 public class JUnit4TestEngine implements TestEngine {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/JUnit4TestDescriptor.java
Patch:
@@ -20,10 +20,10 @@
 
 import org.junit.experimental.categories.Category;
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.AbstractTestDescriptor;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestSource;
 import org.junit.gen5.engine.TestTag;
+import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
 import org.junit.runner.Description;
 
 /**

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/JavaSourceExtractor.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.junit.gen5.engine.JavaSource;
+import org.junit.gen5.engine.support.discovery.JavaSource;
 import org.junit.runner.Description;
 
 class JavaSourceExtractor {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/RunnerTestDescriptor.java
Patch:
@@ -12,8 +12,8 @@
 
 import java.util.Optional;
 
-import org.junit.gen5.engine.JavaSource;
 import org.junit.gen5.engine.TestDescriptor;
+import org.junit.gen5.engine.support.discovery.JavaSource;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Set;
 
 import org.junit.gen5.engine.*;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 
 public class JUnit4DiscoveryRequestResolver {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/TestClassRequestResolver.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.Set;
 import java.util.function.IntFunction;
 
-import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.gen5.engine.junit5.descriptor.DiscoverySelectorResolver;
 import org.junit.gen5.engine.junit5.descriptor.JUnit5EngineDescriptor;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
+import org.junit.gen5.engine.support.hierarchical.HierarchicalTestEngine;
 
 public class JUnit5TestEngine extends HierarchicalTestEngine<JUnit5EngineExecutionContext> {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -36,8 +36,6 @@
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.commons.util.ReflectionUtils.MethodSortOrder;
-import org.junit.gen5.engine.Container;
-import org.junit.gen5.engine.JavaSource;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
@@ -46,6 +44,8 @@
 import org.junit.gen5.engine.junit5.execution.RegisteredExtensionPoint;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
 import org.junit.gen5.engine.junit5.execution.TestInstanceProvider;
+import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.hierarchical.Container;
 
 /**
  * {@link TestDescriptor} for tests based on Java classes.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DiscoverySelectorResolver.java
Patch:
@@ -18,13 +18,13 @@
 import java.util.Optional;
 
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.AbstractTestDescriptor;
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.DiscoverySelectorVisitor;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.junit5.discovery.IsNestedTestClass;
 import org.junit.gen5.engine.junit5.discovery.IsScannableTestClass;
 import org.junit.gen5.engine.junit5.discovery.IsTestMethod;
+import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5EngineDescriptor.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.gen5.engine.junit5.descriptor;
 
-import org.junit.gen5.engine.Container;
-import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
+import org.junit.gen5.engine.support.discovery.EngineDescriptor;
+import org.junit.gen5.engine.support.hierarchical.Container;
 
 public class JUnit5EngineDescriptor extends EngineDescriptor implements Container<JUnit5EngineExecutionContext> {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -28,9 +28,9 @@
 import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.commons.util.ExceptionUtils;
 import org.junit.gen5.commons.util.StringUtils;
-import org.junit.gen5.engine.AbstractTestDescriptor;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
+import org.junit.gen5.engine.support.discovery.AbstractTestDescriptor;
 
 /**
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java
Patch:
@@ -24,15 +24,15 @@
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.StringUtils;
-import org.junit.gen5.engine.JavaSource;
-import org.junit.gen5.engine.Leaf;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestTag;
 import org.junit.gen5.engine.junit5.execution.ConditionEvaluator;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 import org.junit.gen5.engine.junit5.execution.MethodInvoker;
 import org.junit.gen5.engine.junit5.execution.RegisteredExtensionPoint;
 import org.junit.gen5.engine.junit5.execution.TestExtensionRegistry;
+import org.junit.gen5.engine.support.discovery.JavaSource;
+import org.junit.gen5.engine.support.hierarchical.Leaf;
 
 /**
  * {@link TestDescriptor} for tests based on Java methods.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * A {@code TestExtensionRegistry} holds all registered extensions (i.e.
  * instances of {@link ExtensionPoint}) for a given
- * {@link org.junit.gen5.engine.Container} or {@link org.junit.gen5.engine.Leaf}.
+ * {@link org.junit.gen5.engine.support.hierarchical.Container} or {@link org.junit.gen5.engine.support.hierarchical.Leaf}.
  *
  * <p>A registry has a reference to its parent registry, and all lookups are
  * performed first in the current registry itself and then in its parent and

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.maven.surefire.report.RunListener;
 import org.apache.maven.surefire.report.SimpleReportEntry;
 import org.apache.maven.surefire.report.StackTraceWriter;
-import org.junit.gen5.engine.JavaSource;
 import org.junit.gen5.engine.TestExecutionResult;
+import org.junit.gen5.engine.support.discovery.JavaSource;
 import org.junit.gen5.launcher.TestExecutionListener;
 import org.junit.gen5.launcher.TestIdentifier;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/ClassFilter.java
Patch:
@@ -11,4 +11,7 @@
 package org.junit.gen5.engine;
 
 public interface ClassFilter extends DiscoveryFilter<Class<?>> {
+	static ClassFilter byNamePattern(String pattern) {
+		return new ClassNameFilter(pattern);
+	}
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/DiscoveryFilterMock.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.discoveryrequest.dsl;
+package org.junit.gen5.engine;
 
 import java.util.function.Function;
 import java.util.function.Supplier;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -11,11 +11,11 @@
 package org.junit.gen5.engine.junit4;
 
 import static org.assertj.core.api.Assertions.allOf;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.List;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit5;
 
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.*;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -13,8 +13,8 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.engine.DiscoveryRequest;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClassSelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit4.discovery;
 
-import org.junit.gen5.engine.discoveryrequest.ClassSelector;
+import org.junit.gen5.engine.ClassSelector;
 
 class ClassSelectorResolver extends DiscoverySelectorResolver<ClassSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClasspathSelectorResolver.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 
-import org.junit.gen5.engine.discoveryrequest.ClasspathSelector;
+import org.junit.gen5.engine.ClasspathSelector;
 
 class ClasspathSelectorResolver extends DiscoverySelectorResolver<ClasspathSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/MethodSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.engine.discoveryrequest.MethodSelector;
+import org.junit.gen5.engine.MethodSelector;
 import org.junit.runner.Description;
 
 class MethodSelectorResolver extends DiscoverySelectorResolver<MethodSelector> {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Optional;
 
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.discoveryrequest.UniqueIdSelector;
+import org.junit.gen5.engine.UniqueIdSelector;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
 
 class UniqueIdSelectorResolver extends DiscoverySelectorResolver<UniqueIdSelector> {

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.ClassSelector.forClass;
+import static org.junit.gen5.engine.DiscoveryRequestBuilder.request;
 
 import org.apache.maven.surefire.util.ScannerFilter;
 import org.junit.gen5.engine.DiscoveryRequest;

File: junit-tests/src/test/java/org/junit/gen5/engine/discoveryrequest/dsl/ClassFilterBuilderTests.java
Patch:
@@ -8,13 +8,14 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import static org.junit.gen5.api.Assertions.*;
 
 import java.util.Collection;
 
 import org.junit.gen5.api.Test;
+import org.junit.gen5.engine.ClassFilter;
 import org.junit.gen5.engine.discoveryrequest.dsl.ClassFilterBuilder;
 
 class ClassFilterBuilderTests {

File: junit-tests/src/test/java/org/junit/gen5/engine/discoveryrequest/dsl/CommonBuilderTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import static org.junit.gen5.api.Assertions.*;
 import static org.junit.gen5.engine.FilterResult.excluded;
@@ -17,8 +17,7 @@
 import java.util.StringJoiner;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.discoveryrequest.dsl.ClassFilterBuilder;
-import org.junit.gen5.engine.discoveryrequest.dsl.CommonBuilder;
+import org.junit.gen5.engine.DiscoveryFilter;
 
 public class CommonBuilderTests {
 	@Test

File: junit-console/src/main/java/org/junit/gen5/console/tasks/DiscoveryRequestCreator.java
Patch:
@@ -11,7 +11,6 @@
 package org.junit.gen5.console.tasks;
 
 import static java.util.stream.Collectors.toSet;
-import static org.junit.gen5.engine.discoveryrequest.dsl.ClassFilters.classNameMatches;
 import static org.junit.gen5.engine.discoveryrequest.dsl.ClasspathSelectorBuilder.byPaths;
 import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.discoveryrequest.dsl.NameBasedSelectorBuilder.byNames;
@@ -23,6 +22,7 @@
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
 import org.junit.gen5.engine.DiscoveryRequest;
+import org.junit.gen5.engine.discoveryrequest.dsl.ClassFilterBuilder;
 import org.junit.gen5.engine.discoveryrequest.dsl.TagFilterBuilder;
 
 class DiscoveryRequestCreator {
@@ -57,7 +57,7 @@ private DiscoveryRequest buildNameBasedDiscoveryRequest(CommandLineOptions optio
 	}
 
 	private void applyFilters(DiscoveryRequest discoveryRequest, CommandLineOptions options) {
-		options.getClassnameFilter().ifPresent(regex -> discoveryRequest.addFilter(classNameMatches(regex)));
+		options.getClassnameFilter().ifPresent(regex -> discoveryRequest.addFilter(ClassFilterBuilder.pattern(regex)));
 		if (!options.getTagsFilter().isEmpty()) {
 			discoveryRequest.addPostFilter(TagFilterBuilder.includeTags(options.getTagsFilter()));
 		}

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -53,8 +53,8 @@ private int executeTests(PrintWriter out) {
 
 		SummaryGeneratingListener summaryListener = registerListeners(out, launcher);
 
-		DiscoveryRequest specification = new TestPlanSpecificationCreator().toTestPlanSpecification(options);
-		launcher.execute(specification);
+		DiscoveryRequest discoveryRequest = new DiscoveryRequestCreator().toDiscoveryRequest(options);
+		launcher.execute(discoveryRequest);
 
 		TestExecutionSummary summary = summaryListener.getSummary();
 		printSummary(summary, out);

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -18,7 +18,7 @@ default String getId() {
 		return getClass().getCanonicalName();
 	}
 
-	EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification);
+	EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest);
 
 	void execute(ExecutionRequest request);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/AllClassFilters.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import static java.util.stream.Collectors.joining;
 import static org.junit.gen5.engine.FilterResult.included;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/ClassNameFilter.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import static org.junit.gen5.engine.FilterResult.excluded;
 import static org.junit.gen5.engine.FilterResult.included;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/ClassSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.DiscoverySelectorVisitor;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/ClasspathSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import java.io.File;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/MethodSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import java.lang.reflect.Method;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/PackageNameSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.DiscoverySelectorVisitor;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/PredicateBasedClassFilter.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import static org.junit.gen5.engine.FilterResult.excluded;
 import static org.junit.gen5.engine.FilterResult.included;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/UniqueIdSelector.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification;
+package org.junit.gen5.engine.discoveryrequest;
 
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.DiscoverySelectorVisitor;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/ClassFilterBuilder.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
-import org.junit.gen5.engine.specification.ClassNameFilter;
+import org.junit.gen5.engine.discoveryrequest.ClassNameFilter;
 
 public class ClassFilterBuilder {
 	public static ClassNameFilter pattern(String pattern) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/ClassSelectorBuilder.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.specification.ClassSelector;
+import org.junit.gen5.engine.discoveryrequest.ClassSelector;
 
 /**
  * @since 5.0

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/ClasspathSelectorBuilder.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import static java.util.Collections.singleton;
 
@@ -18,7 +18,7 @@
 import java.util.stream.Collectors;
 
 import org.junit.gen5.engine.DiscoverySelector;
-import org.junit.gen5.engine.specification.ClasspathSelector;
+import org.junit.gen5.engine.discoveryrequest.ClasspathSelector;
 
 /**
  * @since 5.0

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/DiscoveryRequestBuilder.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import java.util.Arrays;
 import java.util.LinkedList;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/EngineFilterBuilder.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import org.junit.gen5.engine.EngineIdFilter;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/MethodSelectorBuilder.java
Patch:
@@ -8,12 +8,12 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import java.lang.reflect.Method;
 
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.specification.MethodSelector;
+import org.junit.gen5.engine.discoveryrequest.MethodSelector;
 
 /**
  * @since 5.0

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/PackageSelectorBuilder.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import static java.util.stream.Collectors.toList;
 
 import java.util.Collection;
 import java.util.List;
 
 import org.junit.gen5.engine.DiscoverySelector;
-import org.junit.gen5.engine.specification.PackageNameSelector;
+import org.junit.gen5.engine.discoveryrequest.PackageNameSelector;
 
 /**
  * @since 5.0

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/TagFilterBuilder.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import static java.util.Arrays.asList;
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/discoveryrequest/dsl/UniqueIdSelectorBuilder.java
Patch:
@@ -8,10 +8,10 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.specification.dsl;
+package org.junit.gen5.engine.discoveryrequest.dsl;
 
 import org.junit.gen5.engine.DiscoverySelector;
-import org.junit.gen5.engine.specification.UniqueIdSelector;
+import org.junit.gen5.engine.discoveryrequest.UniqueIdSelector;
 
 /**
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/engine/AbstractTestDescriptorTests.java
Patch:
@@ -28,7 +28,7 @@ public void initTree() {
 		engineDescriptor = new EngineDescriptor(new TestEngine() {
 
 			@Override
-			public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
+			public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
 				return engineDescriptor;
 			}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/ClassFiltersTests.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.StringJoiner;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.engine.specification.PredicateBasedClassFilter;
-import org.junit.gen5.engine.specification.dsl.ClassFilters;
+import org.junit.gen5.engine.discoveryrequest.PredicateBasedClassFilter;
+import org.junit.gen5.engine.discoveryrequest.dsl.ClassFilters;
 
 class ClassFiltersTests {
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/DummyTestEngine.java
Patch:
@@ -36,7 +36,7 @@ public TestDescriptor addTest(String uniqueName, Runnable runnable) {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
+	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
 		return root;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -14,8 +14,8 @@
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.List;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit5;
 
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.*;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -13,8 +13,8 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -14,8 +14,8 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.*;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
-import static org.junit.gen5.engine.specification.dsl.MethodSelectorBuilder.byMethod;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.MethodSelectorBuilder.byMethod;
 
 import java.io.IOException;
 import java.lang.reflect.Method;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static org.junit.gen5.api.Assertions.assertAll;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.*;
 import org.junit.gen5.engine.DiscoveryRequest;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.ClassSelectorBuilder.forClass;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -13,8 +13,8 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.api.Assertions.fail;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
-import static org.junit.gen5.engine.specification.dsl.UniqueIdSelectorBuilder.byUniqueId;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.UniqueIdSelectorBuilder.byUniqueId;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/stubs/TestEngineStub.java
Patch:
@@ -28,7 +28,7 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
+	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
 		return null;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -11,9 +11,9 @@
 package org.junit.gen5.launcher;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
-import static org.junit.gen5.engine.specification.dsl.EngineFilterBuilder.byEngineId;
-import static org.junit.gen5.engine.specification.dsl.UniqueIdSelectorBuilder.byUniqueId;
+import static org.junit.gen5.engine.discoveryrequest.dsl.DiscoveryRequestBuilder.request;
+import static org.junit.gen5.engine.discoveryrequest.dsl.EngineFilterBuilder.byEngineId;
+import static org.junit.gen5.engine.discoveryrequest.dsl.UniqueIdSelectorBuilder.byUniqueId;
 import static org.junit.gen5.launcher.LauncherFactory.createLauncher;
 
 import org.junit.gen5.api.Test;

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -26,9 +26,9 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
+	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest discoveryRequest) {
 		EngineDescriptor engineDescriptor = new EngineDescriptor(this);
-		new JUnit4DiscoveryRequestResolver(engineDescriptor).resolve(specification);
+		new JUnit4DiscoveryRequestResolver(engineDescriptor).resolve(discoveryRequest);
 		return engineDescriptor;
 	}
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClassSelectorResolver.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.junit4.discovery;
 
-import org.junit.gen5.engine.specification.ClassSelector;
+import org.junit.gen5.engine.discoveryrequest.ClassSelector;
 
 class ClassSelectorResolver extends DiscoverySelectorResolver<ClassSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/ClasspathSelectorResolver.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInClasspathRoot;
 
-import org.junit.gen5.engine.specification.ClasspathSelector;
+import org.junit.gen5.engine.discoveryrequest.ClasspathSelector;
 
 class ClasspathSelectorResolver extends DiscoverySelectorResolver<ClasspathSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.EngineDescriptor;
-import org.junit.gen5.engine.specification.AllClassFilters;
+import org.junit.gen5.engine.discoveryrequest.AllClassFilters;
 
 public class JUnit4DiscoveryRequestResolver {
 
@@ -55,14 +55,14 @@ private List<DiscoverySelectorResolver<?>> getAllDiscoverySelectorResolvers() {
 
 	private <T extends DiscoverySelector> void resolveSelectorsOfSingleType(DiscoveryRequest discoveryRequest,
 			DiscoverySelectorResolver<T> selectorResolver, TestClassCollector collector) {
-		discoveryRequest.getSelectoryByType(selectorResolver.getSelectorClass()).forEach(
+		discoveryRequest.getSelectorsByType(selectorResolver.getSelectorClass()).forEach(
 			selector -> selectorResolver.resolve(selector, collector));
 	}
 
 	private Set<TestClassRequest> filterAndConvertToTestClassRequests(DiscoveryRequest request,
 			TestClassCollector collector) {
 		// TODO #40 Log classes that are filtered out
-		ClassFilter classFilter = new AllClassFilters(request.getFilterByType(ClassFilter.class));
+		ClassFilter classFilter = new AllClassFilters(request.getDiscoveryFiltersByType(ClassFilter.class));
 		return collector.toRequests(testClass -> classFilter.filter(testClass).included());
 	}
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/MethodSelectorResolver.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.gen5.engine.specification.MethodSelector;
+import org.junit.gen5.engine.discoveryrequest.MethodSelector;
 import org.junit.runner.Description;
 
 class MethodSelectorResolver extends DiscoverySelectorResolver<MethodSelector> {

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/PackageNameSelectorResolver.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.junit.gen5.commons.util.ReflectionUtils.findAllClassesInPackage;
 
-import org.junit.gen5.engine.specification.PackageNameSelector;
+import org.junit.gen5.engine.discoveryrequest.PackageNameSelector;
 
 class PackageNameSelectorResolver extends DiscoverySelectorResolver<PackageNameSelector> {
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/UniqueIdSelectorResolver.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.Optional;
 
 import org.junit.gen5.commons.util.ReflectionUtils;
+import org.junit.gen5.engine.discoveryrequest.UniqueIdSelector;
 import org.junit.gen5.engine.junit4.descriptor.RunnerTestDescriptor;
-import org.junit.gen5.engine.specification.UniqueIdSelector;
 
 class UniqueIdSelectorResolver extends DiscoverySelectorResolver<UniqueIdSelector> {
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoveryRequest.java
Patch:
@@ -93,7 +93,7 @@ public boolean acceptDescriptor(TestDescriptor testDescriptor) {
 		// @formatter:off
 		return this.getPostDiscoveryFilters().stream()
 				.map(filter -> filter.filter(testDescriptor))
-				.allMatch(FilterResult::isAccepted);
+				.allMatch(FilterResult::included);
 		// @formatter:on
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/TagFilterBuilder.java
Patch:
@@ -11,10 +11,10 @@
 package org.junit.gen5.engine.specification.dsl;
 
 import static java.util.Arrays.asList;
-import static org.junit.gen5.engine.FilterResult.acceptedIf;
 
 import java.util.List;
 
+import org.junit.gen5.engine.FilterResult;
 import org.junit.gen5.engine.PostDiscoveryFilter;
 import org.junit.gen5.engine.TestTag;
 
@@ -25,7 +25,7 @@ public static PostDiscoveryFilter includeTags(String... tagNames) {
 
 	public static PostDiscoveryFilter includeTags(List<String> includeTags) {
 		// @formatter:off
-        return descriptor -> acceptedIf(
+        return descriptor -> FilterResult.includedIf(
 				descriptor.getTags().stream()
 					.map(TestTag::getName)
 					.anyMatch(includeTags::contains));
@@ -38,7 +38,7 @@ public static PostDiscoveryFilter excludeTags(String... tagNames) {
 
 	public static PostDiscoveryFilter excludeTags(List<String> excludeTags) {
 		// @formatter:off
-        return descriptor -> acceptedIf(
+        return descriptor -> FilterResult.includedIf(
 				descriptor.getTags().stream()
                 	.map(TestTag::getName)
 					.noneMatch(excludeTags::contains));

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -99,7 +99,7 @@ private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification
 		RootTestDescriptor root = new RootTestDescriptor();
 		for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {
 			if (specification.getEngineIdFilters().stream().map(
-				engineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {
+				engineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {
 				LOG.fine(
 					() -> String.format("Test discovery for engine '%s' was skipped due to a filter in phase '%s'.",
 						testEngine.getId(), phase));

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -63,7 +63,7 @@ private Set<TestClassRequest> filterAndConvertToTestClassRequests(DiscoveryReque
 			TestClassCollector collector) {
 		// TODO #40 Log classes that are filtered out
 		ClassFilter classFilter = new AllClassFilters(request.getFilterByType(ClassFilter.class));
-		return collector.toRequests(testClass -> classFilter.filter(testClass).isAccepted());
+		return collector.toRequests(testClass -> classFilter.filter(testClass).included());
 	}
 
 	private void populateEngineDescriptor(Set<TestClassRequest> requests) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -58,7 +58,7 @@ private void applyEngineFilters(DiscoveryRequest specification, JUnit5EngineDesc
 				// @formatter:off
 				if (classFilters.stream()
 						.map(filter -> filter.filter(testClass))
-						.anyMatch(FilterResult::isDeclined)) {
+						.anyMatch(FilterResult::excluded)) {
 					remove.run();
 				}
 				// @formatter:on

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -49,8 +49,8 @@
 
 /**
  * {@link TestDescriptor} for tests based on Java classes.
- * <p>
- * The pattern of the {@link #getUniqueId unique ID} takes the form of
+ *
+ * <p>The pattern of the {@link #getUniqueId unique ID} takes the form of
  * <code>{parent unique id}:{fully qualified class name}</code>.
  *
  * @since 5.0
@@ -212,7 +212,7 @@ private void registerAnnotatedMethodsAsExtensions(TestExtensionRegistry extensio
 		findAnnotatedMethods(testClass, annotationType, MethodSortOrder.HierarchyDown).stream()
 			.peek(method -> methodValidator.accept(extensionType, method))
 			.forEach(method ->
-				extensionRegistry.registerExtensionPoint(extensionPointSynthesizer.apply(extensionRegistry, method)));
+				extensionRegistry.registerExtensionPoint(extensionPointSynthesizer.apply(extensionRegistry, method), method));
 		// @formatter:on
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/FilterResult.java
Patch:
@@ -74,7 +74,7 @@ public boolean isAccepted() {
 		return accepted;
 	}
 
-	public boolean isFiltered() {
+	public boolean isDeclined() {
 		return !isAccepted();
 	}
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -99,7 +99,7 @@ private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification
 		RootTestDescriptor root = new RootTestDescriptor();
 		for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {
 			if (specification.getEngineIdFilters().stream().map(
-				engineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {
+				engineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {
 				LOG.fine(
 					() -> String.format("Test discovery for engine '%s' was skipped due to a filter in phase '%s'.",
 						testEngine.getId(), phase));

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -58,7 +58,7 @@ private void applyEngineFilters(DiscoveryRequest specification, JUnit5EngineDesc
 				// @formatter:off
 				if (classFilters.stream()
 						.map(filter -> filter.filter(testClass))
-						.anyMatch(FilterResult::isFiltered)) {
+						.anyMatch(FilterResult::isDeclined)) {
 					remove.run();
 				}
 				// @formatter:on

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/DiscoveryRequestBuilder.java
Patch:
@@ -88,7 +88,6 @@ public DiscoveryRequestBuilder filterBy(DiscoveryFilter<?>... filters) {
 		return this;
 	}
 
-	@SuppressWarnings("unchecked")
 	public DiscoveryRequestBuilder filterBy(PostDiscoveryFilter... filters) {
 		if (filters != null) {
 			this.postFilters.addAll(Arrays.asList(filters));

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineIdFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-import static org.junit.gen5.engine.FilterResult.active;
+import static org.junit.gen5.engine.FilterResult.accepted;
 import static org.junit.gen5.engine.FilterResult.filtered;
 
 public class EngineIdFilter implements GenericFilter<String> {
@@ -23,7 +23,7 @@ public EngineIdFilter(String engineId) {
 	@Override
 	public FilterResult filter(String engineId) {
 		if (this.engineId.equals(engineId)) {
-			return active("EngineId matches");
+			return accepted("EngineId matches");
 		}
 		else {
 			return filtered("EngineId matches");

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/ClassNameFilter.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine.specification;
 
-import static org.junit.gen5.engine.FilterResult.active;
+import static org.junit.gen5.engine.FilterResult.accepted;
 import static org.junit.gen5.engine.FilterResult.filtered;
 
 import java.util.regex.Pattern;
@@ -28,7 +28,7 @@ public ClassNameFilter(String regex) {
 	@Override
 	public FilterResult filter(Class<?> testClass) {
 		if (pattern.matcher(testClass.getName()).matches()) {
-			return active("TestClass matches name pattern");
+			return accepted("TestClass matches name pattern");
 		}
 		else {
 			return filtered("TestClass does not match name pattern");

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/DiscoveryRequestBuilder.java
Patch:
@@ -53,7 +53,7 @@ public final class DiscoveryRequestBuilder {
 
 	private List<DiscoverySelector> selectors = new LinkedList<>();
 	private List<EngineIdFilter> engineIdFilters = new LinkedList<>();
-	private List<DiscoveryFilter> filters = new LinkedList<>();
+	private List<DiscoveryFilter<?>> filters = new LinkedList<>();
 	private List<PostDiscoveryFilter> postFilters = new LinkedList<>();
 
 	public static DiscoveryRequestBuilder request() {
@@ -81,7 +81,7 @@ public DiscoveryRequestBuilder filterBy(EngineIdFilter... filters) {
 		return this;
 	}
 
-	public DiscoveryRequestBuilder filterBy(DiscoveryFilter... filters) {
+	public DiscoveryRequestBuilder filterBy(DiscoveryFilter<?>... filters) {
 		if (filters != null) {
 			this.filters.addAll(Arrays.asList(filters));
 		}

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -63,7 +63,7 @@ private Set<TestClassRequest> filterAndConvertToTestClassRequests(DiscoveryReque
 			TestClassCollector collector) {
 		// TODO #40 Log classes that are filtered out
 		ClassFilter classFilter = new AllClassFilters(request.getFilterByType(ClassFilter.class));
-		return collector.toRequests(testClass -> !classFilter.filter(testClass).isFiltered());
+		return collector.toRequests(testClass -> classFilter.filter(testClass).isAccepted());
 	}
 
 	private void populateEngineDescriptor(Set<TestClassRequest> requests) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/NameBasedSelectorBuilder.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.stream.Collectors.toList;
 import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
 import static org.junit.gen5.engine.specification.dsl.MethodSelectorBuilder.byMethod;
-import static org.junit.gen5.engine.specification.dsl.PackageTestPlanSpecificationElementBuilder.byPackageName;
+import static org.junit.gen5.engine.specification.dsl.PackageSelectorBuilder.byPackageName;
 
 import java.lang.reflect.Method;
 import java.util.*;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/PackageSelectorBuilder.java
Patch:
@@ -21,12 +21,12 @@
 /**
  * @since 5.0
  */
-public class PackageTestPlanSpecificationElementBuilder {
+public class PackageSelectorBuilder {
 	public static DiscoverySelector byPackageName(String packageName) {
 		return new PackageNameSelector(packageName);
 	}
 
 	public static List<DiscoverySelector> byPackageNames(Collection<String> packageNames) {
-		return packageNames.stream().map(PackageTestPlanSpecificationElementBuilder::byPackageName).collect(toList());
+		return packageNames.stream().map(PackageSelectorBuilder::byPackageName).collect(toList());
 	}
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/DiscoveryRequestBuilderTests.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClassName;
 import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.specification.dsl.MethodSelectorBuilder.byMethod;
-import static org.junit.gen5.engine.specification.dsl.PackageTestPlanSpecificationElementBuilder.byPackageName;
+import static org.junit.gen5.engine.specification.dsl.PackageSelectorBuilder.byPackageName;
 import static org.junit.gen5.engine.specification.dsl.UniqueIdSelectorBuilder.byUniqueId;
 
 import java.io.File;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineDiscoveryTests.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.gen5.engine.specification.dsl.ClasspathSelectorBuilder.byPaths;
 import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 import static org.junit.gen5.engine.specification.dsl.MethodSelectorBuilder.byMethod;
-import static org.junit.gen5.engine.specification.dsl.PackageTestPlanSpecificationElementBuilder.byPackageName;
+import static org.junit.gen5.engine.specification.dsl.PackageSelectorBuilder.byPackageName;
 import static org.junit.gen5.engine.specification.dsl.UniqueIdSelectorBuilder.byUniqueId;
 
 import java.io.File;

File: junit-console/src/main/java/org/junit/gen5/console/tasks/TestPlanSpecificationCreator.java
Patch:
@@ -58,12 +58,12 @@ private DiscoveryRequest buildNameBasedSpecification(CommandLineOptions options)
 	}
 
 	private void applyFilters(DiscoveryRequest specification, CommandLineOptions options) {
-		options.getClassnameFilter().ifPresent(regex -> specification.addEngineFilter(classNameMatches(regex)));
+		options.getClassnameFilter().ifPresent(regex -> specification.addFilter(classNameMatches(regex)));
 		if (!options.getTagsFilter().isEmpty()) {
-			specification.addDescriptorFilter(TagFilterBuilder.includeTags(options.getTagsFilter()));
+			specification.addPostFilter(TagFilterBuilder.includeTags(options.getTagsFilter()));
 		}
 		if (!options.getExcludeTags().isEmpty()) {
-			specification.addDescriptorFilter(TagFilterBuilder.excludeTags(options.getExcludeTags()));
+			specification.addPostFilter(TagFilterBuilder.excludeTags(options.getExcludeTags()));
 		}
 	}
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/ClassFilter.java
Patch:
@@ -10,6 +10,5 @@
 
 package org.junit.gen5.engine;
 
-public interface ClassFilter extends EngineFilter {
-	boolean acceptClass(Class<?> testClass);
+public interface ClassFilter extends DiscoveryFilter<Class<?>> {
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/PostDiscoveryFilter.java
Patch:
@@ -10,6 +10,5 @@
 
 package org.junit.gen5.engine;
 
-public interface EngineFilter {
-	String getDescription();
+public interface PostDiscoveryFilter extends GenericFilter<TestDescriptor> {
 }

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/TestPlanSpecificationCreatorTests.java
Patch:
@@ -91,9 +91,9 @@ public void convertsClassnameFilterOption() {
 
 		DiscoveryRequest specification = convert();
 
-		List<ClassFilter> filter = specification.getEngineFiltersByType(ClassFilter.class);
+		List<ClassFilter> filter = specification.getFilterByType(ClassFilter.class);
 		assertThat(filter).hasSize(1);
-		assertThat(filter.get(0).getDescription()).contains(".*Test");
+		assertThat(filter.get(0).toString()).contains(".*Test");
 	}
 
 	@Test

File: junit-tests/src/test/java/org/junit/gen5/engine/DiscoveryRequestTests.java
Patch:
@@ -70,7 +70,7 @@ public void buildDiscoveryRequest() throws Exception {
 		assertNotNull(spec);
 		List<Class<? extends DiscoverySelector>> expected = Arrays.asList(UniqueIdSelector.class, ClassSelector.class,
 			PackageNameSelector.class, MethodSelector.class);
-		assertEquals(expected, spec.getElements().stream().map(Object::getClass).collect(toList()));
+		assertEquals(expected, spec.getSelectors().stream().map(Object::getClass).collect(toList()));
 	}
 
 	private String fullyQualifiedMethodName() throws Exception {

File: junit-tests/src/test/java/org/junit/gen5/launcher/LauncherTests.java
Patch:
@@ -86,7 +86,7 @@ public void discoverPrunesEnginesWithoutTestsFromTestPlan() {
 		Launcher launcher = createLauncher(engine);
 
 		DiscoveryRequest specification = request().select(byUniqueId(test.getUniqueId())).build();
-		specification.addDescriptorFilter(filterByEngineId("doesNotExist"));
+		specification.addPostFilter(filterByEngineId("doesNotExist"));
 
 		TestPlan testPlan = launcher.discover(specification);
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/discovery/JUnit4DiscoveryRequestResolver.java
Patch:
@@ -55,15 +55,15 @@ private List<DiscoverySelectorResolver<?>> getAllDiscoverySelectorResolvers() {
 
 	private <T extends DiscoverySelector> void resolveSelectorsOfSingleType(DiscoveryRequest discoveryRequest,
 			DiscoverySelectorResolver<T> selectorResolver, TestClassCollector collector) {
-		discoveryRequest.getElementsByType(selectorResolver.getSelectorClass()).forEach(
+		discoveryRequest.getSelectoryByType(selectorResolver.getSelectorClass()).forEach(
 			selector -> selectorResolver.resolve(selector, collector));
 	}
 
 	private Set<TestClassRequest> filterAndConvertToTestClassRequests(DiscoveryRequest request,
 			TestClassCollector collector) {
 		// TODO #40 Log classes that are filtered out
-		ClassFilter classFilter = new AllClassFilters(request.getEngineFiltersByType(ClassFilter.class));
-		return collector.toRequests(classFilter::acceptClass);
+		ClassFilter classFilter = new AllClassFilters(request.getFilterByType(ClassFilter.class));
+		return collector.toRequests(testClass -> !classFilter.filter(testClass).isFiltered());
 	}
 
 	private void populateEngineDescriptor(Set<TestClassRequest> requests) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -42,14 +42,14 @@ public JUnit5EngineDescriptor discoverTests(DiscoveryRequest specification) {
 
 	private void resolveSpecification(DiscoveryRequest specification, JUnit5EngineDescriptor engineDescriptor) {
 		DiscoverySelectorResolver resolver = new DiscoverySelectorResolver(engineDescriptor);
-		for (DiscoverySelector element : specification.getElements()) {
+		for (DiscoverySelector element : specification.getSelectors()) {
 			resolver.resolveElement(element);
 		}
 		applyEngineFilters(specification, engineDescriptor);
 	}
 
 	private void applyEngineFilters(DiscoveryRequest specification, JUnit5EngineDescriptor engineDescriptor) {
-		List<ClassFilter> classFilters = specification.getEngineFiltersByType(ClassFilter.class);
+		List<ClassFilter> classFilters = specification.getFilterByType(ClassFilter.class);
 		if (classFilters.isEmpty()) {
 			return;
 		}
@@ -58,7 +58,7 @@ private void applyEngineFilters(DiscoveryRequest specification, JUnit5EngineDesc
 			if (descriptor instanceof ClassTestDescriptor) {
 				ClassTestDescriptor classTestDescriptor = (ClassTestDescriptor) descriptor;
 				for (ClassFilter filter : classFilters) {
-					if (!filter.acceptClass(classTestDescriptor.getTestClass())) {
+					if (filter.filter(classTestDescriptor.getTestClass()).isFiltered()) {
 						remove.run();
 					}
 				}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
+import org.junit.gen5.api.TestReporter;
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
-import org.junit.gen5.engine.junit5.extension.TestReporter;
 
 public class ReportingTest extends AbstractJUnit5TestEngineTests {
 

File: junit5-api/src/main/java/org/junit/gen5/api/TestReporter.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.junit5.extension;
+package org.junit.gen5.api;
 
 import java.util.Map;
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/TestReporterParameterResolver.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.lang.reflect.Parameter;
 
+import org.junit.gen5.api.TestReporter;
 import org.junit.gen5.api.extension.ExtensionContext;
 import org.junit.gen5.api.extension.MethodInvocationContext;
 import org.junit.gen5.api.extension.MethodParameterResolver;

File: junit-tests/src/test/java/org/junit/gen5/AllFastJUnit5Tests.java
Patch:
@@ -33,7 +33,7 @@
  */
 @RunWith(JUnit5.class)
 @Packages("org.junit.gen5")
-@ClassNamePattern(".*Test[s]")
+@ClassNamePattern(".*Tests?")
 @ExcludeTags("slow")
 @OnlyEngine(JUnit5TestEngine.ENGINE_ID)
 public class AllFastJUnit5Tests {

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.gen5.api.extension.BeforeAllExtensionPoint;
 import org.junit.gen5.api.extension.ContainerExtensionContext;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.gen5.api.extension.AfterEachExtensionPoint;
 import org.junit.gen5.api.extension.BeforeEachExtensionPoint;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.engine.DiscoveryRequest;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/execution/ExtensionPointSortingTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ExtensionConfigurationException;
 import org.junit.gen5.api.extension.ExtensionPoint;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 
 /**
  * Unit tests for {@link ExtensionPointSorter}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistryTests.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.gen5.api.extension.ContainerExecutionCondition;
 import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.api.extension.ExtensionPoint;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
 import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.api.extension.TestExecutionCondition;

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -14,8 +14,8 @@
  * Interface to be implemented by {@linkplain Extension extensions} that
  * wish to programmatically register {@link ExtensionPoint} implementations
  * in the {@link ExtensionPointRegistry} &mdash; for example, if a
- * {@link ExtensionPoint.Position Position} other than
- * {@link ExtensionPoint.Position#DEFAULT DEFAULT} is desired.
+ * {@link ExtensionPointRegistry.Position Position} other than
+ * {@link ExtensionPointRegistry.Position#DEFAULT DEFAULT} is desired.
  *
  * <p>An {@code ExtensionRegistrar} can be registered via {@link ExtendWith @ExtendWith}.
  *

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/ExtensionPointSorter.java
Patch:
@@ -16,11 +16,11 @@
 
 import org.junit.gen5.api.extension.ExtensionConfigurationException;
 import org.junit.gen5.api.extension.ExtensionPoint;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 
 /**
  * Utility for sorting {@linkplain RegisteredExtensionPoint extension points}
- * according to their {@linkplain Position}:
+ * according to their {@link Position}:
  * {@link Position#OUTERMOST OUTERMOST} &raquo;
  * {@link Position#OUTSIDE_DEFAULT OUTSIDE_DEFAULT} &raquo;
  * {@link Position#DEFAULT DEFAULT} &raquo;
@@ -76,7 +76,7 @@ private static class DefaultComparator implements Comparator<RegisteredExtension
 
 		@Override
 		public int compare(RegisteredExtensionPoint<?> first, RegisteredExtensionPoint<?> second) {
-			return Integer.compare(first.getPosition().sortingOrder, second.getPosition().sortingOrder);
+			return Integer.compare(first.getPosition().ordinal(), second.getPosition().ordinal());
 		}
 
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/RegisteredExtensionPoint.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5.execution;
 
 import org.junit.gen5.api.extension.ExtensionPoint;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.commons.util.ToStringBuilder;
 
 /**

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -21,8 +21,8 @@
 
 import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.api.extension.ExtensionPoint;
-import org.junit.gen5.api.extension.ExtensionPoint.Position;
 import org.junit.gen5.api.extension.ExtensionPointRegistry;
+import org.junit.gen5.api.extension.ExtensionPointRegistry.Position;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.engine.junit5.extension.DisabledCondition;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -26,8 +26,8 @@
 import org.junit.gen5.api.extension.ContainerExtensionContext;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
-import org.junit.gen5.api.extension.ExtensionRegistry;
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 
@@ -92,7 +92,7 @@ void firstTest() {
 	private static class InnermostAndOutermost implements ExtensionRegistrar {
 
 		@Override
-		public void registerExtensions(ExtensionRegistry registry) {
+		public void registerExtensions(ExtensionPointRegistry registry) {
 			registry.register(this::innermostBefore, BeforeAllExtensionPoint.class, Position.INNERMOST);
 			registry.register(this::innermostAfter, AfterAllExtensionPoint.class, Position.INNERMOST);
 			registry.register(this::outermostBefore, BeforeAllExtensionPoint.class, Position.OUTERMOST);

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -26,8 +26,8 @@
 import org.junit.gen5.api.extension.BeforeEachExtensionPoint;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
-import org.junit.gen5.api.extension.ExtensionRegistry;
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
@@ -137,7 +137,7 @@ void afterInnerMethod() {
 	private static class InnermostAndOutermost implements ExtensionRegistrar {
 
 		@Override
-		public void registerExtensions(ExtensionRegistry registry) {
+		public void registerExtensions(ExtensionPointRegistry registry) {
 			registry.register(this::innermostBefore, BeforeEachExtensionPoint.class, Position.INNERMOST);
 			registry.register(this::innermostAfter, AfterEachExtensionPoint.class, Position.INNERMOST);
 			registry.register(this::outermostBefore, BeforeEachExtensionPoint.class, Position.OUTERMOST);

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistryTests.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.api.extension.ExtensionPoint;
 import org.junit.gen5.api.extension.ExtensionPoint.Position;
+import org.junit.gen5.api.extension.ExtensionPointRegistry;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
-import org.junit.gen5.api.extension.ExtensionRegistry;
 import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.api.extension.TestExecutionCondition;
 import org.junit.gen5.engine.junit5.extension.DisabledCondition;
@@ -228,7 +228,7 @@ public void doMore() {
 class MyExtensionRegistrar implements ExtensionRegistrar {
 
 	@Override
-	public void registerExtensions(ExtensionRegistry registry) {
+	public void registerExtensions(ExtensionPointRegistry registry) {
 		registry.register(this::doNothing, MyExtensionPoint.class);
 		registry.register(this::doMore, AnotherExtensionPoint.class);
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Interface to be implemented by {@linkplain Extension extensions} that
  * wish to programmatically register {@link ExtensionPoint} implementations
- * in the {@link ExtensionRegistry} &mdash; for example, if a
+ * in the {@link ExtensionPointRegistry} &mdash; for example, if a
  * {@link ExtensionPoint.Position Position} other than
  * {@link ExtensionPoint.Position#DEFAULT DEFAULT} is desired.
  *
@@ -23,6 +23,6 @@
  */
 public interface ExtensionRegistrar extends Extension {
 
-	void registerExtensions(ExtensionRegistry registry);
+	void registerExtensions(ExtensionPointRegistry registry);
 
 }

File: sample-extension/src/main/java/com/example/timing/TimingExtension.java
Patch:
@@ -15,8 +15,8 @@
 import org.junit.gen5.api.extension.AfterEachExtensionPoint;
 import org.junit.gen5.api.extension.BeforeEachExtensionPoint;
 import org.junit.gen5.api.extension.ExtensionPoint;
+import org.junit.gen5.api.extension.ExtensionPointRegistry;
 import org.junit.gen5.api.extension.ExtensionRegistrar;
-import org.junit.gen5.api.extension.ExtensionRegistry;
 import org.junit.gen5.api.extension.TestExtensionContext;
 
 /**
@@ -30,7 +30,7 @@ public class TimingExtension implements ExtensionRegistrar {
 	private static final String TIMING_KEY_PREFIX = "TIMING:";
 
 	@Override
-	public void registerExtensions(ExtensionRegistry registry) {
+	public void registerExtensions(ExtensionPointRegistry registry) {
 		registry.register(this::beforeEach, BeforeEachExtensionPoint.class, ExtensionPoint.Position.INNERMOST);
 		registry.register(this::afterEach, AfterEachExtensionPoint.class, ExtensionPoint.Position.INNERMOST);
 	}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @since 5.0
  */
-public interface ExtensionRegistrar extends ExtensionPoint {
+public interface ExtensionRegistrar extends Extension {
 
 	void registerExtensions(ExtensionRegistry registry);
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterAllExtensionPoint.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.api.extension;
 
 /**
- * {@code AfterAllExtensionPoint} defines the API for {@link TestExtension
- * TestExtensions} that wish to provide additional behavior to tests after
+ * {@code AfterAllExtensionPoint} defines the API for {@link Extension
+ * Extensions} that wish to provide additional behavior to tests after
  * all test methods have been invoked.
  *
  * <p>Concrete implementations often implement {@link BeforeAllExtensionPoint} as well.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachExtensionPoint.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.api.extension;
 
 /**
- * {@code AfterEachExtensionPoint} defines the API for {@link TestExtension
- * TestExtensions} that wish to provide additional behavior to tests
+ * {@code AfterEachExtensionPoint} defines the API for {@link Extension
+ * Extensions} that wish to provide additional behavior to tests
  * after each test method has been invoked.
  *
  * <p>Concrete implementations often implement {@link BeforeEachExtensionPoint}

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachExtensionPoint.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.api.extension;
 
 /**
- * {@code BeforeEachExtensionPoint} defines the API for {@link TestExtension
- * TestExtensions} that wish to provide additional behavior to tests before
+ * {@code BeforeEachExtensionPoint} defines the API for {@link Extension
+ * Extensions} that wish to provide additional behavior to tests before
  * each test method has been invoked.
  *
  * <p>Concrete implementations often implement {@link AfterEachExtensionPoint} as well.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionContext.java
Patch:
@@ -15,10 +15,10 @@
 import java.util.Optional;
 
 /**
- * {@code ExtensionContext} encapsulates the <em>context</em> in which
- * the current test or container is being executed.
+ * {@code ExtensionContext} encapsulates the <em>context</em> in which the
+ * current test or container is being executed.
  *
- * <p>{@link TestExtension TestExtensions} are provided an instance of
+ * <p>{@link Extension Extensions} are provided an instance of
  * {@code ExtensionContext} to perform their work.
  *
  * @since 5.0

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPoint.java
Patch:
@@ -26,7 +26,7 @@
  * @see AfterAllExtensionPoint
  */
 
-public interface ExtensionPoint extends TestExtension {
+public interface ExtensionPoint extends Extension {
 
 	/**
 	 * Specifies the order in which a registered extension point is applied with regard to all other registered

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -11,9 +11,9 @@
 package org.junit.gen5.api.extension;
 
 /**
- * Interface to be implemented by {@linkplain TestExtension TestExtensions}
- * that wish to manually register {@linkplain ExtensionPoint extensions} in
- * the {@link ExtensionRegistry} &mdash; for example, if a
+ * Interface to be implemented by {@linkplain Extension extensions} that
+ * wish to programmatically register {@link ExtensionPoint} implementations
+ * in the {@link ExtensionRegistry} &mdash; for example, if a
  * {@link ExtensionPoint.Position Position} other than
  * {@link ExtensionPoint.Position#DEFAULT DEFAULT} is desired.
  *

File: junit5-api/src/main/java/org/junit/gen5/api/extension/InstancePostProcessor.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.api.extension;
 
 /**
- * {@code InstancePostProcessor} defines the API for {@link TestExtension
- * TestExtensions} that wish to <em>post-process</em> test instances.
+ * {@code InstancePostProcessor} defines the API for {@link Extension
+ * Extensions} that wish to <em>post-process</em> test instances.
  *
  * <p>Common use cases include injecting dependencies into the test
  * instance, invoking custom initialization methods on the test instance,

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.gen5.api.Executable;
 import org.junit.gen5.api.Tag;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.api.extension.TestExtension;
+import org.junit.gen5.api.extension.Extension;
 import org.junit.gen5.commons.util.ExceptionUtils;
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.AbstractTestDescriptor;
@@ -63,12 +63,12 @@ protected String determineDisplayName(AnnotatedElement element, String defaultNa
 	protected TestExtensionRegistry populateNewTestExtensionRegistryFromExtendWith(AnnotatedElement annotatedElement,
 			TestExtensionRegistry existingTestExtensionRegistry) {
 		// @formatter:off
-		List<Class<? extends TestExtension>> extensionClasses = findRepeatableAnnotations(annotatedElement, ExtendWith.class).stream()
+		List<Class<? extends Extension>> extensionTypes = findRepeatableAnnotations(annotatedElement, ExtendWith.class).stream()
 				.map(ExtendWith::value)
 				.flatMap(Arrays::stream)
 				.collect(toList());
 		// @formatter:on
-		return TestExtensionRegistry.newRegistryFrom(existingTestExtensionRegistry, extensionClasses);
+		return TestExtensionRegistry.newRegistryFrom(existingTestExtensionRegistry, extensionTypes);
 	}
 
 	/**

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/UniqueIdSelector.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.DiscoverySelectorVisitor;
 
-public class UniqueIdSpecification implements DiscoverySelector {
+public class UniqueIdSelector implements DiscoverySelector {
 	private final String uniqueId;
 
-	public UniqueIdSpecification(String uniqueId) {
+	public UniqueIdSelector(String uniqueId) {
 		this.uniqueId = uniqueId;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
-import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
 import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
 import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
@@ -34,9 +34,9 @@ public class InstancePostProcessorTests extends AbstractJUnit5TestEngineTests {
 
 	@Test
 	public void instancePostProcessorInTopLevelClass() {
-		DiscoveryRequest spec = request().select(forClass(OuterTestCase.class)).build();
+		DiscoveryRequest request = request().select(forClass(OuterTestCase.class)).build();
 
-		ExecutionEventRecorder eventRecorder = executeTests(spec);
+		ExecutionEventRecorder eventRecorder = executeTests(request);
 
 		assertEquals(2L, eventRecorder.getTestStartedCount(), "# tests started");
 		assertEquals(2L, eventRecorder.getTestSuccessfulCount(), "# tests succeeded");

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ReportingTest.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder.forClass;
 import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.HashMap;
@@ -27,9 +27,9 @@ public class ReportingTest extends AbstractJUnit5TestEngineTests {
 
 	@org.junit.Test
 	public void threeReportEntriesArePublished() {
-		DiscoveryRequest discoveryRequest = request().select(forClass(MyReportingTestCase.class)).build();
+		DiscoveryRequest request = request().select(forClass(MyReportingTestCase.class)).build();
 
-		ExecutionEventRecorder eventRecorder = executeTests(discoveryRequest);
+		ExecutionEventRecorder eventRecorder = executeTests(request);
 
 		assertEquals(1L, eventRecorder.getTestStartedCount(), "# tests started");
 		assertEquals(1L, eventRecorder.getTestSuccessfulCount(), "# tests succeeded");

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.junit5.descriptor.ClassTestDescriptor;
+import org.junit.gen5.engine.junit5.descriptor.DiscoverySelectorResolver;
 import org.junit.gen5.engine.junit5.descriptor.JUnit5EngineDescriptor;
-import org.junit.gen5.engine.junit5.descriptor.SpecificationResolver;
 import org.junit.gen5.engine.junit5.execution.JUnit5EngineExecutionContext;
 
 public class JUnit5TestEngine extends HierarchicalTestEngine<JUnit5EngineExecutionContext> {
@@ -41,7 +41,7 @@ public JUnit5EngineDescriptor discoverTests(DiscoveryRequest specification) {
 	}
 
 	private void resolveSpecification(DiscoveryRequest specification, JUnit5EngineDescriptor engineDescriptor) {
-		SpecificationResolver resolver = new SpecificationResolver(engineDescriptor);
+		DiscoverySelectorResolver resolver = new DiscoverySelectorResolver(engineDescriptor);
 		for (DiscoverySelector element : specification.getElements()) {
 			resolver.resolveElement(element);
 		}

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
+import org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder;
 import org.junit.gen5.launcher.Launcher;
 
 public class JUnitGen5Provider extends AbstractProvider {
@@ -85,8 +85,7 @@ private void invokeSingleClass(Class<?> testClass, Launcher launcher, RunListene
 		SimpleReportEntry classEntry = new SimpleReportEntry(getClass().getName(), testClass.getName());
 		runListener.testSetStarting(classEntry);
 
-		DiscoveryRequest specification = request().select(
-			ClassTestPlanSpecificationElementBuilder.forClass(testClass)).build();
+		DiscoveryRequest specification = request().select(ClassSelectorBuilder.forClass(testClass)).build();
 		launcher.execute(specification);
 
 		runListener.testSetCompleted(classEntry);

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.apache.maven.surefire.util.ScannerFilter;
 import org.junit.gen5.engine.DiscoveryRequest;
-import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
+import org.junit.gen5.engine.specification.dsl.ClassSelectorBuilder;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;
@@ -30,8 +30,7 @@ public TestPlanScannerFilter(Launcher launcher) {
 	@SuppressWarnings("rawtypes")
 	@Override
 	public boolean accept(Class testClass) {
-		DiscoveryRequest specification = request().select(
-			ClassTestPlanSpecificationElementBuilder.forClass(testClass)).build();
+		DiscoveryRequest specification = request().select(ClassSelectorBuilder.forClass(testClass)).build();
 		TestPlan testPlan = launcher.discover(specification);
 		return testPlan.countTestIdentifiers(TestIdentifier::isTest) > 0;
 	}

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ExecuteTestsTask.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.console.options.CommandLineOptions;
-import org.junit.gen5.engine.TestPlanSpecification;
+import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.listeners.SummaryGeneratingListener;
 import org.junit.gen5.launcher.listeners.TestExecutionSummary;
@@ -53,7 +53,7 @@ private int executeTests(PrintWriter out) {
 
 		SummaryGeneratingListener summaryListener = registerListeners(out, launcher);
 
-		TestPlanSpecification specification = new TestPlanSpecificationCreator().toTestPlanSpecification(options);
+		DiscoveryRequest specification = new TestPlanSpecificationCreator().toTestPlanSpecification(options);
 		launcher.execute(specification);
 
 		TestExecutionSummary summary = summaryListener.getSummary();

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoverySelector.java
Patch:
@@ -10,6 +10,6 @@
 
 package org.junit.gen5.engine;
 
-public interface TestPlanSpecificationElement {
-	void accept(TestPlanSpecificationElementVisitor visitor);
+public interface DiscoverySelector {
+	void accept(DiscoverySelectorVisitor visitor);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/DiscoverySelectorVisitor.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * @since 5.0
  */
-public interface TestPlanSpecificationElementVisitor {
+public interface DiscoverySelectorVisitor {
 	default void visitUniqueId(String uniqueId) {
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -18,7 +18,7 @@ default String getId() {
 		return getClass().getCanonicalName();
 	}
 
-	EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification);
+	EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification);
 
 	void execute(ExecutionRequest request);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/ClasspathTestPlanSpecificationElementBuilder.java
Patch:
@@ -16,11 +16,11 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.junit.gen5.engine.TestPlanSpecificationElement;
+import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.specification.AllTestsSpecification;
 
 public class ClasspathTestPlanSpecificationElementBuilder {
-	public static List<TestPlanSpecificationElement> allTests(Set<File> rootDirectories) {
+	public static List<DiscoverySelector> allTests(Set<File> rootDirectories) {
 		// @formatter:off
 		return rootDirectories.stream()
 				.filter(File::exists)
@@ -29,7 +29,7 @@ public static List<TestPlanSpecificationElement> allTests(Set<File> rootDirector
 		// @formatter:on
 	}
 
-	public static List<TestPlanSpecificationElement> path(String path) {
+	public static List<DiscoverySelector> path(String path) {
 		return allTests(Collections.singleton(new File(path)));
 	}
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/PackageTestPlanSpecificationElementBuilder.java
Patch:
@@ -15,15 +15,15 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.gen5.engine.TestPlanSpecificationElement;
+import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.specification.PackageSpecification;
 
 public class PackageTestPlanSpecificationElementBuilder {
-	public static TestPlanSpecificationElement forPackage(String packageName) {
+	public static DiscoverySelector forPackage(String packageName) {
 		return new PackageSpecification(packageName);
 	}
 
-	public static List<TestPlanSpecificationElement> forPackages(Collection<String> packageNames) {
+	public static List<DiscoverySelector> forPackages(Collection<String> packageNames) {
 		return packageNames.stream().map(PackageTestPlanSpecificationElementBuilder::forPackage).collect(toList());
 	}
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/UniqueIdTestPlanSpecificationElementBuilder.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.gen5.engine.specification.dsl;
 
-import org.junit.gen5.engine.TestPlanSpecificationElement;
+import org.junit.gen5.engine.DiscoverySelector;
 import org.junit.gen5.engine.specification.UniqueIdSpecification;
 
 public class UniqueIdTestPlanSpecificationElementBuilder {
-	public static TestPlanSpecificationElement forUniqueId(String uniqueId) {
+	public static DiscoverySelector forUniqueId(String uniqueId) {
 		return new UniqueIdSpecification(uniqueId);
 	}
 }

File: junit-tests/src/test/java/org/junit/gen5/engine/AbstractTestDescriptorTests.java
Patch:
@@ -28,7 +28,7 @@ public void initTree() {
 		engineDescriptor = new EngineDescriptor(new TestEngine() {
 
 			@Override
-			public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
+			public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
 				return engineDescriptor;
 			}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/DummyTestEngine.java
Patch:
@@ -36,7 +36,7 @@ public TestDescriptor addTest(String uniqueName, Runnable runnable) {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
+	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
 		return root;
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/ExecutionEventRecorder.java
Patch:
@@ -31,8 +31,8 @@
  */
 public class ExecutionEventRecorder implements EngineExecutionListener {
 
-	public static List<ExecutionEvent> execute(TestEngine testEngine, TestPlanSpecification testPlanSpecification) {
-		TestDescriptor engineTestDescriptor = testEngine.discoverTests(testPlanSpecification);
+	public static List<ExecutionEvent> execute(TestEngine testEngine, DiscoveryRequest discoveryRequest) {
+		TestDescriptor engineTestDescriptor = testEngine.discoverTests(discoveryRequest);
 		ExecutionEventRecorder listener = new ExecutionEventRecorder();
 		testEngine.execute(new ExecutionRequest(engineTestDescriptor, listener));
 		return listener.getExecutionEvents();

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -13,7 +13,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -24,8 +24,8 @@
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.InstancePostProcessor;
 import org.junit.gen5.api.extension.TestExtensionContext;
+import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.ExecutionEventRecorder;
-import org.junit.gen5.engine.TestPlanSpecification;
 
 /**
  * Integration tests that verify support for {@link org.junit.gen5.api.extension.InstancePostProcessor}.
@@ -34,7 +34,7 @@ public class InstancePostProcessorTests extends AbstractJUnit5TestEngineTests {
 
 	@Test
 	public void instancePostProcessorInTopLevelClass() {
-		TestPlanSpecification spec = testPlanSpecification().withElements(forClass(OuterTestCase.class)).build();
+		DiscoveryRequest spec = request().select(forClass(OuterTestCase.class)).build();
 
 		ExecutionEventRecorder eventRecorder = executeTests(spec);
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/stubs/TestEngineStub.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.gen5.engine.junit5.stubs;
 
+import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestEngine;
-import org.junit.gen5.engine.TestPlanSpecification;
 
 /**
  * @since 5.0
@@ -28,7 +28,7 @@ public String getId() {
 	}
 
 	@Override
-	public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
+	public EngineAwareTestDescriptor discoverTests(DiscoveryRequest specification) {
 		return null;
 	}
 

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -25,7 +25,7 @@
 import org.apache.maven.surefire.suite.RunResult;
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
-import org.junit.gen5.engine.TestPlanSpecification;
+import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
 import org.junit.gen5.launcher.Launcher;
 
@@ -85,7 +85,7 @@ private void invokeSingleClass(Class<?> testClass, Launcher launcher, RunListene
 		SimpleReportEntry classEntry = new SimpleReportEntry(getClass().getName(), testClass.getName());
 		runListener.testSetStarting(classEntry);
 
-		TestPlanSpecification specification = testPlanSpecification().withElements(
+		DiscoveryRequest specification = request().select(
 			ClassTestPlanSpecificationElementBuilder.forClass(testClass)).build();
 		launcher.execute(specification);
 

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -10,10 +10,10 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.DiscoveryRequestBuilder.request;
 
 import org.apache.maven.surefire.util.ScannerFilter;
-import org.junit.gen5.engine.TestPlanSpecification;
+import org.junit.gen5.engine.DiscoveryRequest;
 import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
@@ -30,7 +30,7 @@ public TestPlanScannerFilter(Launcher launcher) {
 	@SuppressWarnings("rawtypes")
 	@Override
 	public boolean accept(Class testClass) {
-		TestPlanSpecification specification = testPlanSpecification().withElements(
+		DiscoveryRequest specification = request().select(
 			ClassTestPlanSpecificationElementBuilder.forClass(testClass)).build();
 		TestPlan testPlan = launcher.discover(specification);
 		return testPlan.countTestIdentifiers(TestIdentifier::isTest) > 0;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/ClassFilter.java
Patch:
@@ -11,6 +11,5 @@
 package org.junit.gen5.engine;
 
 public interface ClassFilter extends EngineFilter {
-
 	boolean acceptClass(Class<?> testClass);
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineFilter.java
Patch:
@@ -11,6 +11,5 @@
 package org.junit.gen5.engine;
 
 public interface EngineFilter {
-
 	String getDescription();
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Leaf.java
Patch:
@@ -11,7 +11,5 @@
 package org.junit.gen5.engine;
 
 public interface Leaf<C extends EngineExecutionContext> extends Node<C> {
-
 	C execute(C context) throws Exception;
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/SingleTestExecutor.java
Patch:
@@ -21,7 +21,6 @@
  * @since 5.0
  */
 class SingleTestExecutor {
-
 	interface Executable {
 
 		void execute() throws Throwable;
@@ -41,5 +40,4 @@ TestExecutionResult executeSafely(Executable executable) {
 			return failed(t);
 		}
 	}
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestDescriptor.java
Patch:
@@ -19,7 +19,6 @@
  * @since 5.0
  */
 public interface TestDescriptor {
-
 	/**
 	 * Get the unique identifier (UID) for the described test.
 	 *
@@ -93,5 +92,4 @@ interface Visitor {
 	void accept(Visitor visitor);
 
 	Optional<TestSource> getSource();
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -14,13 +14,11 @@
  * @since 5.0
  */
 public interface TestEngine {
-
 	default String getId() {
 		return getClass().getCanonicalName();
 	}
 
 	EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification);
 
 	void execute(ExecutionRequest request);
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestPlanSpecificationElement.java
Patch:
@@ -11,7 +11,5 @@
 package org.junit.gen5.engine;
 
 public interface TestPlanSpecificationElement {
-
 	void accept(TestPlanSpecificationElementVisitor visitor);
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestPlanSpecificationElementVisitor.java
Patch:
@@ -17,7 +17,6 @@
  * @since 5.0
  */
 public interface TestPlanSpecificationElementVisitor {
-
 	default void visitUniqueId(String uniqueId) {
 	}
 
@@ -32,5 +31,4 @@ default void visitMethod(Class<?> testClass, Method testMethod) {
 
 	default void visitAllTests(File rootDirectory) {
 	}
-
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/ClassNameFilter.java
Patch:
@@ -8,12 +8,13 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine;
+package org.junit.gen5.engine.specification;
 
 import java.util.regex.Pattern;
 
-public class ClassNameFilter implements ClassFilter {
+import org.junit.gen5.engine.ClassFilter;
 
+public class ClassNameFilter implements ClassFilter {
 	private final Pattern pattern;
 
 	public ClassNameFilter(String regex) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/ClassFilterBuilder.java
Patch:
@@ -8,9 +8,9 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.dsl;
+package org.junit.gen5.engine.specification.dsl;
 
-import org.junit.gen5.engine.ClassNameFilter;
+import org.junit.gen5.engine.specification.ClassNameFilter;
 
 public class ClassFilterBuilder {
 	public static ClassNameFilter pattern(String pattern) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/ClassTestPlanSpecificationElementBuilder.java
Patch:
@@ -8,11 +8,11 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.dsl;
+package org.junit.gen5.engine.specification.dsl;
 
 import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.ReflectionUtils;
-import org.junit.gen5.engine.ClassSpecification;
+import org.junit.gen5.engine.specification.ClassSpecification;
 
 public class ClassTestPlanSpecificationElementBuilder {
 	public static ClassSpecification forClass(Class<?> testClass) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/ClasspathTestPlanSpecificationElementBuilder.java
Patch:
@@ -8,17 +8,16 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.dsl;
+package org.junit.gen5.engine.specification.dsl;
 
 import java.io.File;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.junit.gen5.engine.AllTestsSpecification;
 import org.junit.gen5.engine.TestPlanSpecificationElement;
+import org.junit.gen5.engine.specification.AllTestsSpecification;
 
 public class ClasspathTestPlanSpecificationElementBuilder {
 	public static List<TestPlanSpecificationElement> allTests(Set<File> rootDirectories) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/PackageTestPlanSpecificationElementBuilder.java
Patch:
@@ -8,15 +8,15 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.dsl;
+package org.junit.gen5.engine.specification.dsl;
 
 import static java.util.stream.Collectors.toList;
 
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.gen5.engine.PackageSpecification;
 import org.junit.gen5.engine.TestPlanSpecificationElement;
+import org.junit.gen5.engine.specification.PackageSpecification;
 
 public class PackageTestPlanSpecificationElementBuilder {
 	public static TestPlanSpecificationElement forPackage(String packageName) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/specification/dsl/UniqueIdTestPlanSpecificationElementBuilder.java
Patch:
@@ -8,10 +8,10 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.dsl;
+package org.junit.gen5.engine.specification.dsl;
 
 import org.junit.gen5.engine.TestPlanSpecificationElement;
-import org.junit.gen5.engine.UniqueIdSpecification;
+import org.junit.gen5.engine.specification.UniqueIdSpecification;
 
 public class UniqueIdTestPlanSpecificationElementBuilder {
 	public static TestPlanSpecificationElement forUniqueId(String uniqueId) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.logging.Logger;
 
 import org.junit.gen5.engine.*;
+import org.junit.gen5.engine.TestPlanSpecification;
 
 /**
  * Facade for <em>discovering</em> and <em>executing</em> tests using

File: junit-tests/src/test/java/org/junit/gen5/engine/ClassFiltersTests.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.StringJoiner;
 
 import org.junit.gen5.api.Test;
+import org.junit.gen5.engine.specification.PredicateBasedClassFilter;
+import org.junit.gen5.engine.specification.dsl.ClassFilters;
 
 class ClassFiltersTests {
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/JUnit4TestEngineExecutionTests.java
Patch:
@@ -14,8 +14,8 @@
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.isA;
 import static org.junit.gen5.engine.TestExecutionResultConditions.message;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.util.List;
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/AbstractJUnit5TestEngineTests.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit5;
 
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.engine.EngineDescriptor;
@@ -20,7 +20,6 @@
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestPlanSpecification;
 import org.junit.gen5.engine.TrackingEngineExecutionListener;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
 
 /**
  * Abstract base class for tests involving the {@link JUnit5TestEngine}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -29,7 +29,6 @@
 import org.junit.gen5.api.extension.ExtensionRegistry;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
 
 /**
  * Integration tests that verify support of {@link BeforeAll}, {@link AfterAll},

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static org.junit.gen5.api.Assertions.*;
 import static org.junit.gen5.commons.util.AnnotationUtils.findAnnotation;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -32,7 +32,6 @@
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
 
 /**
  * Integration tests that verify support for {@link Disabled @Disabled} and

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/ExceptionHandlingTests.java
Patch:
@@ -14,8 +14,8 @@
 import static org.junit.gen5.api.Assertions.assertEquals;
 import static org.junit.gen5.engine.ExecutionEventConditions.*;
 import static org.junit.gen5.engine.TestExecutionResultConditions.*;
-import static org.junit.gen5.engine.dsl.MethodTestPlanSpecificationElementBuilder.forMethod;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.MethodTestPlanSpecificationElementBuilder.forMethod;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.io.IOException;
 import java.lang.reflect.Method;
@@ -29,7 +29,6 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.MethodTestPlanSpecificationElementBuilder;
 import org.opentest4j.AssertionFailedError;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/InstancePostProcessorTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -26,7 +26,6 @@
 import org.junit.gen5.api.extension.TestExtensionContext;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
 
 /**
  * Integration tests that verify support for {@link org.junit.gen5.api.extension.InstancePostProcessor}.

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -12,8 +12,8 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.gen5.api.Assertions.assertEquals;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.util.ArrayList;
 import java.util.List;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -11,8 +11,8 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.Assertions;
@@ -22,7 +22,6 @@
 import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
 
 /**
  * Integration tests that verify support for {@linkplain Nested nested contexts}

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/StandardTestClassTests.java
Patch:
@@ -11,16 +11,16 @@
 package org.junit.gen5.engine.junit5;
 
 import static org.junit.gen5.api.Assertions.*;
-import static org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder.forClass;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
+import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
 import org.opentest4j.TestAbortedException;
 
 /**

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TestCaseWithInheritanceTests.java
Patch:
@@ -12,15 +12,14 @@
 
 import static org.junit.gen5.api.Assertions.*;
 import static org.junit.gen5.api.Assumptions.assumeTrue;
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
-import static org.junit.gen5.engine.dsl.UniqueIdTestPlanSpecificationElementBuilder.forUniqueId;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.UniqueIdTestPlanSpecificationElementBuilder.forUniqueId;
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.engine.ExecutionEventRecorder;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.UniqueIdTestPlanSpecificationElementBuilder;
 
 /**
  * Testing execution in test case hierarchy {@link JUnit5TestEngine}.

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5TestEngine.java
Patch:
@@ -14,7 +14,9 @@
 
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.*;
-import org.junit.gen5.engine.dsl.ClassFilterBuilder;
+import org.junit.gen5.engine.ClassFilter;
+import org.junit.gen5.engine.TestPlanSpecification;
+import org.junit.gen5.engine.TestPlanSpecificationElement;
 import org.junit.gen5.engine.junit5.descriptor.ClassTestDescriptor;
 import org.junit.gen5.engine.junit5.descriptor.JUnit5EngineDescriptor;
 import org.junit.gen5.engine.junit5.descriptor.SpecificationResolver;

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -26,7 +26,7 @@
 import org.apache.maven.surefire.testset.TestSetFailedException;
 import org.apache.maven.surefire.util.TestsToRun;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
+import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
 import org.junit.gen5.launcher.Launcher;
 
 public class JUnitGen5Provider extends AbstractProvider {

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/TestPlanScannerFilter.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.gen5.surefire;
 
-import static org.junit.gen5.engine.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
+import static org.junit.gen5.engine.specification.dsl.TestPlanSpecificationBuilder.testPlanSpecification;
 
 import org.apache.maven.surefire.util.ScannerFilter;
 import org.junit.gen5.engine.TestPlanSpecification;
-import org.junit.gen5.engine.dsl.ClassTestPlanSpecificationElementBuilder;
+import org.junit.gen5.engine.specification.dsl.ClassTestPlanSpecificationElementBuilder;
 import org.junit.gen5.launcher.Launcher;
 import org.junit.gen5.launcher.TestIdentifier;
 import org.junit.gen5.launcher.TestPlan;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/ClassNameFilter.java
Patch:
@@ -12,11 +12,11 @@
 
 import java.util.regex.Pattern;
 
-class ClassNameFilter implements ClassFilter {
+public class ClassNameFilter implements ClassFilter {
 
 	private final Pattern pattern;
 
-	ClassNameFilter(String regex) {
+	public ClassNameFilter(String regex) {
 		this.pattern = Pattern.compile(regex);
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/TestPlanSpecificationCreatorTests.java
Patch:
@@ -93,7 +93,7 @@ public void convertsClassnameFilterOption() {
 
 		TestPlanSpecification specification = convert();
 
-		assertThat(specification.getEngineFilters(ClassFilter.class)).hasSize(1);
+		assertThat(specification.getEngineFiltersByType(ClassFilter.class)).hasSize(1);
 		assertThat(specification.getClassFilter().getDescription()).contains(".*Test");
 	}
 

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -39,7 +39,7 @@
  * @see BeforeAll
  * @see AfterAll
  */
-@Target({ ElementType.TYPE, ElementType.METHOD })
+@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 public @interface Test {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -212,8 +212,7 @@ private void registerAnnotatedMethodsAsExtensions(TestExtensionRegistry extensio
 		findAnnotatedMethods(testClass, annotationType, MethodSortOrder.HierarchyDown).stream()
 			.peek(method -> methodValidator.accept(extensionType, method))
 			.forEach(method ->
-				extensionRegistry.registerExtension(extensionPointSynthesizer.apply(extensionRegistry, method),
-					ExtensionPoint.Position.DEFAULT, method));
+				extensionRegistry.registerExtensionPoint(extensionPointSynthesizer.apply(extensionRegistry, method)));
 		// @formatter:on
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/RegisteredExtensionPoint.java
Patch:
@@ -48,6 +48,7 @@ public String getExtensionName() {
 	public String toString() {
 		// @formatter:off
 		return new ToStringBuilder(this)
+				.append("extensionName", getExtensionName())
 				.append("position", this.position)
 				.append("extensionPoint", this.extensionPoint)
 				.toString();

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -212,8 +212,7 @@ private void registerAnnotatedMethodsAsExtensions(TestExtensionRegistry extensio
 		findAnnotatedMethods(testClass, annotationType, MethodSortOrder.HierarchyDown).stream()
 			.peek(method -> methodValidator.accept(extensionType, method))
 			.forEach(method ->
-				extensionRegistry.registerExtension(extensionPointSynthesizer.apply(extensionRegistry, method),
-					ExtensionPoint.Position.DEFAULT, method));
+				extensionRegistry.registerExtensionPoint(extensionPointSynthesizer.apply(extensionRegistry, method)));
 		// @formatter:on
 	}
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/Preconditions.java
Patch:
@@ -57,7 +57,7 @@ public static <T> T notNull(T object, String message) throws PreconditionViolati
 	 * @see #notNull(Object, Supplier)
 	 */
 	public static Object[] notNull(Object[] objects, String message) throws PreconditionViolationException {
-		notNull(objects, () -> message);
+		notNull(objects, () -> "objects array must not be null");
 		for (Object object : objects) {
 			notNull(object, () -> message);
 		}

File: junit-tests/src/test/java/org/junit/gen5/commons/util/ReflectionUtilsTests.java
Patch:
@@ -63,11 +63,8 @@ void newInstance() {
 		assertThat(ReflectionUtils.newInstance(C.class, new Object[] {})).isNotNull();
 
 		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.newInstance(C.class, "one", null));
-
 		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.newInstance(C.class, null, "two"));
-
 		assertThrows(PreconditionViolationException.class, () -> ReflectionUtils.newInstance(C.class, null, null));
-
 		assertThrows(PreconditionViolationException.class, () -> {
 			ReflectionUtils.newInstance(C.class, ((Object[]) null));
 		});

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -20,8 +20,8 @@
  * {@code @Test} is used to signal that the annotated method is a
  * <em>test</em> method.
  *
- * <p>{@code @Test} may also be used on an annotation in order to create a custom test annotation,
- * effectively acting as a meta-annotation.
+ * <p>{@code @Test} may also be used on an annotation in order to create a
+ * custom test annotation, effectively acting as a meta-annotation.
  *
  * <p>{@code @Test} must not be used on a test class and will be ignored if present.
  *
@@ -32,6 +32,7 @@
  * MethodParameterResolvers}.
  *
  * @since 5.0
+ * @see TestInfo
  * @see DisplayName
  * @see BeforeEach
  * @see AfterEach

File: junit5-api/src/main/java/org/junit/gen5/api/TestInfo.java
Patch:
@@ -12,11 +12,12 @@
 
 /**
  * {@code TestInfo} is used to inject information about the current test
- * into to {@code @Test}, {@code @BeforeEach}, and {@code @AfterEach} methods.
+ * into to {@code @Test}, {@code @BeforeEach}, {@code @AfterEach},
+ * {@code @BeforeAll}, and {@code @AfterAll} methods.
  *
  * <p>If a method parameter is of type {@link TestInfo}, JUnit will supply
  * an instance of {@code TestInfo} corresponding to the current test as the
- * value for the annotated parameter.
+ * value for the parameter.
  *
  * @since 5.0
  * @see Test

File: junit5-api/src/main/java/org/junit/gen5/api/DisplayName.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @since 5.0
  * @see Test
- * @see TestName
+ * @see TestInfo
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit5-api/src/main/java/org/junit/gen5/api/Tags.java
Patch:
@@ -25,7 +25,6 @@
  *
  * @since 5.0
  * @see Tag
- * @see TestName
  * @see java.lang.annotation.Repeatable
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.gen5.api.extension.TestExtension;
 import org.junit.gen5.commons.util.ReflectionUtils;
 import org.junit.gen5.engine.junit5.extension.DisabledCondition;
-import org.junit.gen5.engine.junit5.extension.TestNameParameterResolver;
+import org.junit.gen5.engine.junit5.extension.TestInfoParameterResolver;
 
 /**
  * A {@code TestExtensionRegistry registry} serves to hold all registered extensions (i.e. instances of
@@ -58,7 +58,7 @@ public static TestExtensionRegistry newRegistryFrom(TestExtensionRegistry parent
 	}
 
 	private static final List<Class<? extends TestExtension>> defaultExtensionClasses = Collections.unmodifiableList(
-		Arrays.asList(DisabledCondition.class, TestNameParameterResolver.class));
+		Arrays.asList(DisabledCondition.class, TestInfoParameterResolver.class));
 
 	/**
 	 * @return all extension classes that are added by default to all root registries

File: sample-extension/src/test/java/com/example/mockito/MockitoExtensionInBaseClassTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.api.TestName;
+import org.junit.gen5.api.TestInfo;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
@@ -34,8 +34,8 @@ public class MockitoExtensionInBaseClassTest {
 	private NumberGenerator numberGenerator;
 
 	@BeforeEach
-	void initialize(@InjectMock MyType myType, @TestName String testName) {
-		when(myType.getName()).thenReturn(testName);
+	void initialize(@InjectMock MyType myType, TestInfo testInfo) {
+		when(myType.getName()).thenReturn(testInfo.getDisplayName());
 		when(numberGenerator.next()).thenReturn(42);
 	}
 

File: sample-project/src/test/java/com/example/SampleTestCase.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.gen5.api.DisplayName;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.api.TestName;
+import org.junit.gen5.api.TestInfo;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.opentest4j.TestSkippedException;
 
@@ -86,8 +86,8 @@ void succeedingTest() {
 
 	@Test
 	@DisplayName("Method Injection")
-	void methodInjectionTest(@TestName String testName, CustomType customType, @CustomAnnotation String value) {
-		assertEquals("Method Injection", testName);
+	void methodInjectionTest(TestInfo testInfo, CustomType customType, @CustomAnnotation String value) {
+		assertEquals("Method Injection", testInfo.getDisplayName());
 		assertNotNull(customType);
 		assertNotNull(value);
 	}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestDescriptor.java
Patch:
@@ -28,6 +28,8 @@ public interface TestDescriptor {
 	 */
 	String getUniqueId();
 
+	String getName();
+
 	String getDisplayName();
 
 	Optional<TestDescriptor> getParent();

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/AbstractExtensionContext.java
Patch:
@@ -20,7 +20,7 @@ abstract class AbstractExtensionContext implements ExtensionContext {
 
 	private final Map<String, Object> attributes = new HashMap<>();
 
-	private ExtensionContext parent;
+	private final ExtensionContext parent;
 
 	AbstractExtensionContext(ExtensionContext parent) {
 		this.parent = parent;

File: junit5-api/src/main/java/org/junit/gen5/api/DisplayName.java
Patch:
@@ -17,8 +17,8 @@
 import java.lang.annotation.Target;
 
 /**
- * {@code @Name} is used to declare a custom display name for the annotated
- * test class or test method.
+ * {@code @DisplayName} is used to declare a custom display name for the
+ * annotated test class or test method.
  *
  * <p>Display names are typically used for test reporting in IDEs and build
  * tools and may contain spaces, special characters, and even emoji.
@@ -30,7 +30,7 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-public @interface Name {
+public @interface DisplayName {
 
 	String value();
 

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -32,7 +32,7 @@
  * MethodParameterResolvers}.
  *
  * @since 5.0
- * @see Name
+ * @see DisplayName
  * @see BeforeEach
  * @see AfterEach
  * @see BeforeAll

File: junit5-api/src/main/java/org/junit/gen5/api/TestName.java
Patch:
@@ -30,11 +30,11 @@
  * will be thrown.
  *
  * <p>The display name is either the canonical name of the test or a custom
- * name configured via {@link Name @Name}.
+ * name configured via {@link DisplayName @DisplayName}.
  *
  * @since 5.0
  * @see Test
- * @see Name
+ * @see DisplayName
  */
 @Target(ElementType.PARAMETER)
 @Retention(RetentionPolicy.RUNTIME)

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.junit.gen5.api.DisplayName;
 import org.junit.gen5.api.Executable;
-import org.junit.gen5.api.Name;
 import org.junit.gen5.api.Tag;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.TestExtension;
@@ -53,8 +53,8 @@ protected Set<TestTag> getTags(AnnotatedElement element) {
 
 	protected String determineDisplayName(AnnotatedElement element, String defaultName) {
 		// @formatter:off
-		return findAnnotation(element, Name.class)
-				.map(Name::value)
+		return findAnnotation(element, DisplayName.class)
+				.map(DisplayName::value)
 				.filter(StringUtils::isNotBlank)
 				.orElse(defaultName);
 		// @formatter:on

File: sample-project/src/test/java/com/example/HierarchyTestCase.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeAll;
 import org.junit.gen5.api.BeforeEach;
-import org.junit.gen5.api.Name;
+import org.junit.gen5.api.DisplayName;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.junit4.runner.JUnit5;
@@ -86,7 +86,7 @@ void topLevelTest2() {
 	}
 
 	@Nested
-	@Name("Second Level Context")
+	@DisplayName("Second Level Context")
 	class SecondLevelTestContext {
 
 		// TODO [#88] @BeforeAll method cannot be used in @Nested class.
@@ -128,7 +128,7 @@ void secondLevelTest2() {
 		}
 
 		@Nested
-		@Name("Third Level Context")
+		@DisplayName("Third Level Context")
 		class ThirdLevelTestContext {
 
 			// TODO [#88] @BeforeAll method cannot be used in @Nested class.

File: junit-commons/src/main/java/org/junit/gen5/commons/util/ReflectionUtils.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
+import org.junit.gen5.commons.JUnitException;
+
 /**
  * Collection of utilities for working with the Java reflection APIs.
  *
@@ -180,7 +182,7 @@ public static <T> Optional<Class<T>> loadClass(String name, Class<T> requiredTyp
 				return Optional.of((Class<T>) clazz);
 			}
 			else {
-				throw new IllegalStateException(
+				throw new JUnitException(
 					String.format("Class [%s] is not of required type [%s]", name, requiredType.getName()));
 			}
 		}

File: junit-console/src/main/java/org/junit/gen5/console/options/JOptSimpleCommandLineOptionsParser.java
Patch:
@@ -17,6 +17,8 @@
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 
+import org.junit.gen5.commons.JUnitException;
+
 public class JOptSimpleCommandLineOptionsParser implements CommandLineOptionsParser {
 
 	@Override
@@ -35,7 +37,7 @@ public void printHelp(Writer writer) {
 			optionParser.printHelpOn(writer);
 		}
 		catch (IOException e) {
-			throw new RuntimeException("Error printing help", e);
+			throw new JUnitException("Error printing help", e);
 		}
 	}
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ClasspathEntriesParser.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
+import org.junit.gen5.commons.JUnitException;
+
 /**
  * @since 5.0
  */
@@ -38,7 +40,7 @@ private URL toURL(String value) {
 			return new File(value).toURI().toURL();
 		}
 		catch (Exception ex) {
-			throw new IllegalStateException("Invalid classpath entry: " + value, ex);
+			throw new JUnitException("Invalid classpath entry: " + value, ex);
 		}
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/AbstractTestDescriptor.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import org.junit.gen5.commons.JUnitException;
 import org.junit.gen5.commons.util.Preconditions;
 
 /**
@@ -60,7 +61,7 @@ public void removeChild(TestDescriptor child) {
 
 	protected void removeFromHierarchy() {
 		if (isRoot()) {
-			throw new UnsupportedOperationException("You cannot remove the root of a hierarchy.");
+			throw new JUnitException("You cannot remove the root of a hierarchy.");
 		}
 		this.parent.removeChild(this);
 		this.children.clear();

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
+import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestPlanSpecification;
@@ -82,9 +83,7 @@ public void run(RunNotifier notifier) {
 	}
 
 	private JUnit5TestTree generateTestTree(Class<?> testClass) {
-		if (this.specification == null) {
-			throw new IllegalStateException("TestPlanSpecification must not be null");
-		}
+		Preconditions.notNull(this.specification, "TestPlanSpecification must not be null");
 		TestPlan plan = this.launcher.discover(this.specification);
 		return new JUnit5TestTree(plan, testClass);
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/ConditionEvaluator.java
Patch:
@@ -78,7 +78,7 @@ private ConditionEvaluationResult evaluate(ContainerExecutionCondition condition
 			return condition.evaluate(context);
 		}
 		catch (Exception ex) {
-			throw new IllegalStateException(
+			throw new ConditionEvaluationException(
 				String.format("Failed to evaluate condition [%s]", condition.getClass().getName()), ex);
 		}
 	}
@@ -88,7 +88,7 @@ private ConditionEvaluationResult evaluate(TestExecutionCondition condition, Tes
 			return condition.evaluate(context);
 		}
 		catch (Exception ex) {
-			throw new IllegalStateException(
+			throw new ConditionEvaluationException(
 				String.format("Failed to evaluate condition [%s]", condition.getClass().getName()), ex);
 		}
 	}

File: junit-commons/src/main/java/org/junit/gen5/commons/util/PreconditionViolationException.java
Patch:
@@ -10,13 +10,15 @@
 
 package org.junit.gen5.commons.util;
 
+import org.junit.gen5.commons.JUnitException;
+
 /**
  * Thrown if a <em>precondition</em> is violated.
  *
  * @since 5.0
  * @see Preconditions
  */
-public class PreconditionViolationException extends RuntimeException {
+public class PreconditionViolationException extends JUnitException {
 
 	private static final long serialVersionUID = 5652830566059484475L;
 

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ParameterResolutionException.java
Patch:
@@ -10,14 +10,16 @@
 
 package org.junit.gen5.api.extension;
 
+import org.junit.gen5.commons.JUnitException;
+
 /**
  * Thrown if an error is encountered in the configuration or execution of a
  * {@link MethodParameterResolver}.
  *
  * @since 5.0
  * @see MethodParameterResolver
  */
-public class ParameterResolutionException extends RuntimeException {
+public class ParameterResolutionException extends JUnitException {
 
 	private static final long serialVersionUID = 5137237798019406636L;
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/CollectionUtils.java
Patch:
@@ -34,7 +34,7 @@ private CollectionUtils() {
 	 *
 	 * @param collection the collection to get the element from
 	 * @return the only element of the collection
-	 * @throws IllegalArgumentException if the collection is {@code null}
+	 * @throws PreconditionViolationException if the collection is {@code null}
 	 * or does not contain exactly one element
 	 */
 	public static <T> T getOnlyElement(Collection<T> collection) {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestPlanSpecification.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+import org.junit.gen5.commons.util.PreconditionViolationException;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.commons.util.ReflectionUtils;
 
@@ -63,7 +64,7 @@ public static TestPlanSpecificationElement forName(String anyName) {
 			return forPackage(anyName);
 		}
 
-		throw new IllegalArgumentException(
+		throw new PreconditionViolationException(
 			String.format("'%s' specifies neither a class, method, nor package.", anyName));
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/commons/util/CollectionUtilsTests.java
Patch:
@@ -23,15 +23,15 @@ class CollectionUtilsTests {
 
 	@Test
 	void getOnlyElementWithNullCollection() {
-		IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> {
+		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class, () -> {
 			CollectionUtils.getOnlyElement(null);
 		});
 		assertEquals("collection must not be null", exception.getMessage());
 	}
 
 	@Test
 	void getOnlyElementWithEmptyCollection() {
-		IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> {
+		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class, () -> {
 			CollectionUtils.getOnlyElement(emptySet());
 		});
 		assertEquals("collection must contain exactly one element: []", exception.getMessage());
@@ -46,7 +46,7 @@ void getOnlyElementWithSingleElementCollection() {
 
 	@Test
 	void getOnlyElementWithMultiElementCollection() {
-		IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> {
+		PreconditionViolationException exception = expectThrows(PreconditionViolationException.class, () -> {
 			CollectionUtils.getOnlyElement(asList("foo", "bar"));
 		});
 		assertEquals("collection must contain exactly one element: [foo, bar]", exception.getMessage());

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/SpecificationResolverTests.java
Patch:
@@ -259,7 +259,7 @@ public void testPackageResolution() {
 			"org.junit.gen5.engine.junit5.descriptor.subpackage");
 		resolver.resolveElement(specification);
 
-		assertEquals(4, engineDescriptor.allDescendants().size());
+		assertEquals(6, engineDescriptor.allDescendants().size());
 		List<String> uniqueIds = uniqueIds();
 		assertTrue(
 			uniqueIds.contains("ENGINE_ID:org.junit.gen5.engine.junit5.descriptor.subpackage.Class1WithTestCases"));
@@ -269,6 +269,8 @@ public void testPackageResolution() {
 			uniqueIds.contains("ENGINE_ID:org.junit.gen5.engine.junit5.descriptor.subpackage.Class2WithTestCases"));
 		assertTrue(uniqueIds.contains(
 			"ENGINE_ID:org.junit.gen5.engine.junit5.descriptor.subpackage.Class2WithTestCases#test2()"));
+		assertTrue(uniqueIds.contains(
+			"ENGINE_ID:org.junit.gen5.engine.junit5.descriptor.subpackage.ClassWithStaticInnerTestCases$ShouldBeDiscovered#test1()"));
 	}
 
 	@Test

File: junit5-api/src/main/java/org/junit/gen5/api/TestName.java
Patch:
@@ -26,7 +26,7 @@
  *
  * <p>If a method parameter is annotated with {@code @TestName}
  * but <em>not</em> of type {@link String},
- * this will be considered an error and a ParameterResolutionException
+ * this will be considered an error and a {@code @ParameterResolutionException}
  * will be thrown.
  *
  * <p>The display name is either the canonical name of the test or a custom

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -21,7 +21,9 @@
  * <em>test</em> method.
  *
  * <p>{@code @Test} may also be used on an annotation in order to create a custom test annotation,
- * effectivley acting as a meta-annotation.
+ * effectively acting as a meta-annotation.
+ *
+ * <p>{@code @Test} must not be used on a test class and will be ignored if present.
  *
  * <p>{@code @Test} methods must not be {@code private} or {@code static}.
  *

File: junit-commons/src/main/java/org/junit/gen5/commons/util/Preconditions.java
Patch:
@@ -56,8 +56,7 @@ public static <T> T notNull(T object, String message) throws IllegalArgumentExce
 	 * @throws IllegalArgumentException if the supplied object is {@code null}
 	 * @see #condition(boolean, Supplier)
 	 */
-	public static <T> T notNull(T object, Supplier<String> messageSupplier)
-			throws IllegalArgumentException {
+	public static <T> T notNull(T object, Supplier<String> messageSupplier) throws IllegalArgumentException {
 		condition(object != null, messageSupplier);
 		return object;
 	}

File: junit-commons/src/main/java/org/junit/gen5/commons/util/Preconditions.java
Patch:
@@ -43,7 +43,7 @@ private Preconditions() {
 	 * @throws IllegalArgumentException if the supplied object is {@code null}
 	 * @see #notNull(Object, Supplier)
 	 */
-	public static <T extends Object> T notNull(T object, String message) throws IllegalArgumentException {
+	public static <T> T notNull(T object, String message) throws IllegalArgumentException {
 		return notNull(object, () -> message);
 	}
 
@@ -56,7 +56,7 @@ public static <T extends Object> T notNull(T object, String message) throws Ille
 	 * @throws IllegalArgumentException if the supplied object is {@code null}
 	 * @see #condition(boolean, Supplier)
 	 */
-	public static <T extends Object> T notNull(T object, Supplier<String> messageSupplier)
+	public static <T> T notNull(T object, Supplier<String> messageSupplier)
 			throws IllegalArgumentException {
 		condition(object != null, messageSupplier);
 		return object;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/FileSystemSource.java
Patch:
@@ -28,8 +28,8 @@ public FileSystemSource(File sourceFileOrDirectory) {
 	}
 
 	public FileSystemSource(File sourceFileOrDirectory, FilePosition positionInFile) {
-		Preconditions.notNull(sourceFileOrDirectory, "source file or directory must not be null");
-		this.sourceFileOrDirectory = sourceFileOrDirectory;
+		this.sourceFileOrDirectory = Preconditions.notNull(sourceFileOrDirectory,
+			"source file or directory must not be null");
 		this.positionInFile = positionInFile;
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestExecutionResult.java
Patch:
@@ -44,8 +44,7 @@ public static TestExecutionResult failed(Throwable throwable) {
 	}
 
 	public TestExecutionResult(Status status, Throwable throwable) {
-		Preconditions.notNull(status, "status must not be null");
-		this.status = status;
+		this.status = Preconditions.notNull(status, "Status must not be null");
 		this.throwable = throwable;
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -64,9 +64,7 @@ public class ClassTestDescriptor extends JUnit5TestDescriptor implements Contain
 	ClassTestDescriptor(String uniqueId, Class<?> testClass) {
 		super(uniqueId);
 
-		Preconditions.notNull(testClass, "Class must not be null");
-
-		this.testClass = testClass;
+		this.testClass = Preconditions.notNull(testClass, "Class must not be null");
 		this.displayName = determineDisplayName(testClass, testClass.getName());
 
 		setSource(new JavaSource(testClass));

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestableFactory.java
Patch:
@@ -45,7 +45,7 @@ JUnit5Testable fromUniqueId(String uniqueId, String engineId) {
 	}
 
 	JUnit5Testable fromClass(Class<?> clazz, String engineId) {
-		Preconditions.notNull(clazz, "clazz must not be null");
+		Preconditions.notNull(clazz, "Class must not be null");
 		Preconditions.notBlank(engineId, "Engine ID must not be null or empty");
 		if (isPotentialTestContainer.test(clazz)) {
 			String uniqueId = engineId + ":" + clazz.getName();

File: junit5-api/src/main/java/org/junit/gen5/api/TestName.java
Patch:
@@ -25,7 +25,7 @@
  * test as the value for the annotated parameter.
  *
  * <p>If a method parameter is annotated with {@code @TestName}
- * but <em>not<em/> of type {@link String},
+ * but <em>not</em> of type {@link String},
  * this will be considered an error and a ParameterResolutionException
  * will be thrown.
  *

File: junit5-api/src/main/java/org/junit/gen5/api/Test.java
Patch:
@@ -20,6 +20,9 @@
  * {@code @Test} is used to signal that the annotated method is a
  * <em>test</em> method.
  *
+ * <p>{@code @Test} may also be used on an annotation in order to create a custom test annotation,
+ * effectivley acting as a meta-annotation.
+ *
  * <p>{@code @Test} methods must not be {@code private} or {@code static}.
  *
  * <p>{@code @Test} methods may optionally declare parameters to be

File: junit-engine-api/src/main/java/org/junit/gen5/engine/SingleTestExecutor.java
Patch:
@@ -24,7 +24,7 @@ class SingleTestExecutor {
 
 	interface Executable {
 
-		void execute() throws Exception;
+		void execute() throws Throwable;
 
 	}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit4/samples/TestCaseRunWithJUnit5.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit4.samples;
 
-import org.junit.gen5.junit4runner.JUnit5;
-import org.junit.gen5.junit4runner.JUnit5.Classes;
+import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5.Classes;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/descriptor/RunnerTestDescriptor.java
Patch:
@@ -13,6 +13,9 @@
 import org.junit.gen5.engine.TestDescriptor;
 import org.junit.runner.Runner;
 
+/**
+ * @since 5.0
+ */
 public class RunnerTestDescriptor extends JUnit4TestDescriptor {
 
 	private final Runner runner;

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.junit4runner;
+package org.junit.gen5.junit4.runner;
 
 import static java.util.Arrays.stream;
 import static java.util.stream.Collectors.toList;

File: junit4-runner/src/main/java/org/junit/gen5/junit4/runner/JUnit5TestTree.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.junit4runner;
+package org.junit.gen5.junit4.runner;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -20,6 +20,7 @@
 class JUnit5TestTree {
 
 	private final Description suiteDescription;
+
 	private final Map<TestIdentifier, Description> descriptions = new HashMap<>();
 
 	JUnit5TestTree(TestPlan plan, Class<?> testClass) {
@@ -62,4 +63,5 @@ private Description createJUnit4Description(TestIdentifier identifier, TestPlan
 			return Description.createSuiteDescription(identifier.getDisplayName(), identifier.getUniqueId());
 		}
 	}
+
 }

File: sample-extension/src/test/java/com/example/mockito/MockitoExtensionInBaseClassTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.TestName;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 

File: sample-extension/src/test/java/com/example/mockito/MockitoExtensionWithNestedTests.java
Patch:
@@ -19,15 +19,15 @@
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 
 /**
  * @since 5.0
  */
 @RunWith(JUnit5.class)
 @ExtendWith(MockitoExtension.class)
-//public to be picked up by IDE JUnit4 test runner
+// Must be public to be picked up by JUnit4 test runner in IDEs.
 public class MockitoExtensionWithNestedTests {
 
 	boolean baseClassTestRun = false;

File: sample-extension/src/test/java/com/example/timing/TimingExtensionTests.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 
 /**

File: sample-project/src/test/java/com/example/AJUnit5TestCaseRunWithJUnit4.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.gen5.api.Assertions.fail;
 
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)

File: sample-project/src/test/java/com/example/HierarchyTestCase.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.gen5.api.Name;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 
 /**

File: sample-project/src/test/java/com/example/JUnit4SamplesSuite.java
Patch:
@@ -10,9 +10,9 @@
 
 package com.example;
 
-import org.junit.gen5.junit4runner.JUnit5;
-import org.junit.gen5.junit4runner.JUnit5.Classes;
-import org.junit.gen5.junit4runner.JUnit5.ExcludeTags;
+import org.junit.gen5.junit4.runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5.Classes;
+import org.junit.gen5.junit4.runner.JUnit5.ExcludeTags;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)

File: sample-project/src/test/java/com/example/TestingAStack.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.gen5.api.Name;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
-import org.junit.gen5.junit4runner.JUnit5;
+import org.junit.gen5.junit4.runner.JUnit5;
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/execution/RunListenerAdapter.java
Patch:
@@ -50,6 +50,7 @@ public RunListenerAdapter(RunnerTestDescriptor runnerTestDescriptor, EngineExecu
 			.map(JUnit4TestDescriptor.class::cast)
 			.collect(toMap(JUnit4TestDescriptor::getDescription, identity()));
 		// @formatter:on
+		descriptionToDescriptor.put(runnerTestDescriptor.getDescription(), runnerTestDescriptor);
 	}
 
 	@Override

File: junit-engine-api/src/main/java/org/junit/gen5/engine/BlacklistedExceptions.java
Patch:
@@ -43,7 +43,7 @@ private BlacklistedExceptions() {
 	 * <p>If the supplied {@code exception} is not <em>blacklisted</em>,
 	 * this method does nothing.
 	 */
-	static void rethrowIfBlackListed(Throwable exception) {
+	static void rethrowIfBlacklisted(Throwable exception) {
 		if (blacklist.stream().anyMatch(exceptionType -> exceptionType.isInstance(exception))) {
 			ExceptionUtils.throwAsRuntimeException(exception);
 		}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/HierarchicalTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-import static org.junit.gen5.engine.BlacklistedExceptions.rethrowIfBlackListed;
+import static org.junit.gen5.engine.BlacklistedExceptions.rethrowIfBlacklisted;
 
 import org.junit.gen5.engine.Node.SkipResult;
 
@@ -62,7 +62,7 @@ private void executeAll(TestDescriptor testDescriptor, C parentContext) {
 			}
 		}
 		catch (Throwable throwable) {
-			rethrowIfBlackListed(throwable);
+			rethrowIfBlacklisted(throwable);
 
 			// TODO Is this what we want?
 			listener.executionStarted(testDescriptor);

File: junit-engine-api/src/main/java/org/junit/gen5/engine/SingleTestExecutor.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-import static org.junit.gen5.engine.BlacklistedExceptions.rethrowIfBlackListed;
+import static org.junit.gen5.engine.BlacklistedExceptions.rethrowIfBlacklisted;
 import static org.junit.gen5.engine.TestExecutionResult.aborted;
 import static org.junit.gen5.engine.TestExecutionResult.failed;
 import static org.junit.gen5.engine.TestExecutionResult.successful;
@@ -37,7 +37,7 @@ TestExecutionResult executeSafely(Executable executable) {
 			return aborted(e);
 		}
 		catch (Throwable t) {
-			rethrowIfBlackListed(t);
+			rethrowIfBlacklisted(t);
 			return failed(t);
 		}
 	}

File: junit-tests/src/test/java/org/junit/gen5/engine/TrackingEngineExecutionListener.java
Patch:
@@ -15,10 +15,9 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.gen5.engine.TestExecutionResult.Status;
-import org.junit.gen5.launcher.TestExecutionListener;
 
 /**
- * Simple {@link TestExecutionListener} that tracks the number of times that certain callbacks are invoked.
+ * Simple {@link EngineExecutionListener} that tracks the number of times that certain callbacks are invoked.
  *
  * @since 5.0
  */

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -103,7 +103,7 @@ public void execute(TestPlanSpecification specification) {
 	private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {
 		RootTestDescriptor root = new RootTestDescriptor();
 		for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {
-			LOG.info(() -> String.format("Discovering tests during launcher %s phase in engine '%s'.", phase,
+			LOG.fine(() -> String.format("Discovering tests during launcher %s phase in engine '%s'.", phase,
 				testEngine.getId()));
 			EngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);
 			root.addChild(engineRoot);

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestDescriptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.gen5.api.Tag;
 import org.junit.gen5.api.extension.ExtendWith;
 import org.junit.gen5.api.extension.TestExtension;
-import org.junit.gen5.commons.util.ReflectionUtils;
+import org.junit.gen5.commons.util.ExceptionUtils;
 import org.junit.gen5.commons.util.StringUtils;
 import org.junit.gen5.engine.AbstractTestDescriptor;
 import org.junit.gen5.engine.TestTag;
@@ -84,7 +84,7 @@ protected void executeAndMaskThrowable(Executable executable) {
 			executable.execute();
 		}
 		catch (Throwable throwable) {
-			ReflectionUtils.throwAsRuntimeException(throwable);
+			ExceptionUtils.throwAsRuntimeException(throwable);
 		}
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Container.java
Patch:
@@ -12,11 +12,11 @@
 
 public interface Container<C extends EngineExecutionContext> extends Node<C> {
 
-	default C beforeAll(C context) throws Throwable {
+	default C beforeAll(C context) throws Exception {
 		return context;
 	}
 
-	default C afterAll(C context) throws Throwable {
+	default C afterAll(C context) throws Exception {
 		return context;
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Leaf.java
Patch:
@@ -12,6 +12,6 @@
 
 public interface Leaf<C extends EngineExecutionContext> extends Node<C> {
 
-	C execute(C context) throws Throwable;
+	C execute(C context) throws Exception;
 
 }
\ No newline at end of file

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Node.java
Patch:
@@ -14,11 +14,11 @@
 
 public interface Node<C extends EngineExecutionContext> {
 
-	default C prepare(C context) throws Throwable {
+	default C prepare(C context) throws Exception {
 		return context;
 	}
 
-	default SkipResult shouldBeSkipped(C context) throws Throwable {
+	default SkipResult shouldBeSkipped(C context) throws Exception {
 		return SkipResult.dontSkip();
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestInstanceProvider.java
Patch:
@@ -13,6 +13,6 @@
 @FunctionalInterface
 public interface TestInstanceProvider {
 
-	Object getTestInstance() throws Throwable;
+	Object getTestInstance() throws Exception;
 
 }

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPoint.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Super interface for all extension points.
  *
- * <p>{@code ExtensionPoint} can be registered via {@link ExtendWith @ExtendWith}.
+ * <p>An {@code ExtensionPoint} can be registered via {@link ExtendWith @ExtendWith}.
  *
  * @since 5.0
  * @see ContainerExecutionCondition

File: junit5-api/src/main/java/org/junit/gen5/api/extension/AfterEachExtensionPoint.java
Patch:
@@ -11,7 +11,7 @@
 package org.junit.gen5.api.extension;
 
 /**
- * {@code AfterEachCallbacks} defines the API for {@link TestExtension
+ * {@code AfterEachExtensionPoint} defines the API for {@link TestExtension
  * TestExtensions} that wish to provide additional behavior to tests
  * after each test method has been invoked.
  *
@@ -35,6 +35,6 @@ public interface AfterEachExtensionPoint extends ExtensionPoint {
 	 *
 	 * @param context the current test extension context
 	 */
-	void afterEach(TestExtensionContext context) throws Throwable;
+	void afterEach(TestExtensionContext context) throws Exception;
 
 }

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestSource.java
Patch:
@@ -10,7 +10,9 @@
 
 package org.junit.gen5.engine;
 
-public interface TestSource {
+import java.io.Serializable;
+
+public interface TestSource extends Serializable {
 
 	boolean isJavaClass();
 

File: junit-tests/src/test/java/org/junit/gen5/commons/util/AnnotationUtilsTests.java
Patch:
@@ -109,7 +109,6 @@ public void findRepeatableAnnotationsWithContainer() throws Exception {
 	}
 
 	@Test
-	@Ignore("Disabled until findRepeatableAnnotations() algorithm is refined")
 	public void findRepeatableAnnotationsWithComposedTagBeforeContainer() throws Exception {
 		assertTagsFound(ContainerAfterComposedTaggedClass.class, "fast", "a", "b", "c");
 	}

File: sample-project/src/test/java/com/example/SampleTestCase.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
+import org.junit.gen5.api.Disabled;
 import org.junit.gen5.api.Name;
 import org.junit.gen5.api.Nested;
 import org.junit.gen5.api.Test;
@@ -69,6 +70,7 @@ void methodLevelCallbacks() {
 	}
 
 	@Test
+	@Disabled
 	void skippedTest() {
 		throw new TestSkippedException("This test will be skipped");
 	}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Container.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-public interface Container<C extends EngineExecutionContext> {
+public interface Container<C extends EngineExecutionContext> extends Node<C> {
 
 	default C beforeAll(C context) throws Throwable {
 		return context;

File: junit-engine-api/src/main/java/org/junit/gen5/engine/Leaf.java
Patch:
@@ -10,7 +10,7 @@
 
 package org.junit.gen5.engine;
 
-public interface Leaf<C extends EngineExecutionContext> {
+public interface Leaf<C extends EngineExecutionContext> extends Node<C> {
 
 	C execute(C context) throws Throwable;
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/AnnotationUtils.java
Patch:
@@ -152,6 +152,7 @@ private static <A extends Annotation> Optional<A> findAnnotation(AnnotatedElemen
 	 * {@code annotationType} that are either <em>present</em>,
 	 * <em>indirectly present</em>, or <em>meta-present</em> on the supplied
 	 * {@link AnnotatedElement}.
+	 *
 	 * <p>This method extends the functionality of
 	 * {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)}
 	 * with additional support for meta-annotations.

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestIdentifier.java
Patch:
@@ -22,9 +22,8 @@
 /**
  * Immutable data transfer object that describes a test or a test container.
  *
- * @see TestPlan
- *
  * @since 5.0
+ * @see TestPlan
  */
 public final class TestIdentifier {
 

File: junit-tests/src/test/java/org/junit/gen5/meta/DependencyTests.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Checks against dependency cycles on package and module level.
  *
- * Modules in that sense are defined by the package name element after org.junit.gen5,
+ * <p>Modules in that sense are defined by the package name element after org.junit.gen5,
  * so "org.junit.gen5.console.ConsoleRunner" belongs to the module "console".
  */
 public class DependencyTests {

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionRegistrar.java
Patch:
@@ -13,8 +13,8 @@
 /**
  * Interface to be implemented by more complex {@linkplain TestExtension}s that need to register
  * {@linkplain ExtensionPoint} instances with other Position than DEFAULT.
- * <p>
- * {@code ExtensionPointRegistrar} can be registered via {@link ExtendWith @ExtendWith}.
+ *
+ * <p>{@code ExtensionPointRegistrar} can be registered via {@link ExtendWith @ExtendWith}.
  *
  * @since 5.0
  */

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -47,8 +47,8 @@
 
 /**
  * {@link TestDescriptor} for tests based on Java classes.
- * <p>
- * The pattern of the {@link #getUniqueId unique ID} takes the form of
+ *
+ * <p>The pattern of the {@link #getUniqueId unique ID} takes the form of
  * <code>{parent unique id}:{fully qualified class name}</code>.
  *
  * @since 5.0

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -50,7 +50,6 @@ public Object invoke(MethodContext methodContext) {
 	/**
 	 * Resolve the array of parameters for the configured method.
 	 *
-	 * @param methodContext
 	 * @return the array of Objects to be used as parameters in the method
 	 * invocation; never {@code null} though potentially empty
 	 */

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/RegisteredExtensionPoint.java
Patch:
@@ -18,8 +18,8 @@
  * Represents an {@linkplain ExtensionPoint extension} registered in a
  * {@link TestExtensionRegistry}.
  *
- * @since 5.0
  * @param <T> the concrete subtype of {@link ExtensionPoint} to be registered
+ * @since 5.0
  */
 public class RegisteredExtensionPoint<T extends ExtensionPoint> {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -45,7 +45,7 @@ public enum ApplicationOrder {
 	/**
 	 * Used to create and populate a new registry from a list of extensions and a parent.
 	 *
-	 * @param parentRegistry
+	 * @param parentRegistry The parent registry to be used.
 	 * @param extensionClasses The extensions to be registered in the new registry
 	 * @return a new TestExtensionRegistry
 	 */
@@ -118,8 +118,8 @@ private <T extends ExtensionPoint> List<RegisteredExtensionPoint<T>> getRegister
 	/**
 	 * Apply all extension points for a given type in the right order.
 	 *
-	 * @param <T> The exact {@linkplain ExtensionPoint} for which to find all extensions
-	 * @param extensionClass
+	 * @param <T> The exact {@link ExtensionPoint} for which to find all extensions
+	 * @param extensionClass The {@link ExtensionPoint} class
 	 * @param order The order in which to apply the extension points after sorting. FORWARD or BACKWARD.
 	 * @param extensionPointApplier The code to execute for each extension point
 	 */

File: junit-tests/src/test/java/org/junit/gen5/meta/DependencyTests.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.commons.util.org.junit.gen5.meta;
+package org.junit.gen5.meta;
 
 import static de.schauderhaft.degraph.check.JCheck.*;
 import static org.hamcrest.Matchers.is;

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestableTest.java
Patch:
@@ -10,6 +10,9 @@
 
 package org.junit.gen5.engine.junit5.descriptor;
 
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 
@@ -19,9 +22,6 @@
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.junit5.JUnit5TestEngine;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
 public class JUnit5TestableTest {
 
 	private final EngineDescriptor engineDescriptor;

File: junit5-api/src/main/java/org/junit/gen5/api/Executable.java
Patch:
@@ -22,7 +22,7 @@
  * @see Assertions#assertAll(Executable...)
  * @see Assertions#assertAll(String, Executable...)
  * @see Assertions#assertThrows(Class, Executable)
- * @see Assumptions#assumingThat(boolean, Executable)
+ * @see Assumptions#assumingThat(java.util.function.BooleanSupplier, Executable)
  */
 @FunctionalInterface
 public interface Executable {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/AbstractTestDescriptor.java
Patch:
@@ -82,7 +82,7 @@ public Optional<? extends TestDescriptor> findByUniqueId(String uniqueId) {
 	}
 
 	@Override
-	public final void addChild(TestDescriptor child) {
+	public void addChild(TestDescriptor child) {
 		Preconditions.notNull(child, "child must not be null");
 		child.setParent(this);
 		this.children.add(child);

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineDescriptor.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * @since 5.0
  */
-public class EngineDescriptor extends AbstractTestDescriptor {
+public class EngineDescriptor extends AbstractTestDescriptor implements EngineAwareTestDescriptor {
 
 	private final TestEngine engine;
 
@@ -37,6 +37,7 @@ public boolean isContainer() {
 		return true;
 	}
 
+	@Override
 	public TestEngine getEngine() {
 		return engine;
 	}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngine.java
Patch:
@@ -16,7 +16,7 @@ default String getId() {
 		return getClass().getCanonicalName();
 	}
 
-	TestDescriptor discoverTests(TestPlanSpecification specification);
+	EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification);
 
 	void execute(ExecutionRequest request);
 }

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.util.logging.Logger;
 
+import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineExecutionListener;
 import org.junit.gen5.engine.ExecutionRequest;
 import org.junit.gen5.engine.TestDescriptor;
@@ -50,8 +51,8 @@ private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specific
 		RootTestDescriptor root = new RootTestDescriptor();
 		for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {
 			LOG.info("Discovering tests in engine " + testEngine.getId());
-			TestDescriptor engineRoot = testEngine.discoverTests(specification);
-			root.addTestDescriptorForEngine(testEngine, engineRoot);
+			EngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);
+			root.addChild(engineRoot);
 		}
 		root.applyFilters(specification);
 		root.prune();

File: junit-tests/src/test/java/org/junit/gen5/engine/AbstractTestDescriptorTest.java
Patch:
@@ -27,7 +27,7 @@ public void initTree() {
 		engineDescriptor = new EngineDescriptor(new TestEngine() {
 
 			@Override
-			public TestDescriptor discoverTests(TestPlanSpecification specification) {
+			public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
 				return engineDescriptor;
 			}
 

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/stubs/TestEngineStub.java
Patch:
@@ -10,8 +10,8 @@
 
 package org.junit.gen5.engine.junit5.stubs;
 
+import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.ExecutionRequest;
-import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.TestPlanSpecification;
 
@@ -28,7 +28,7 @@ public String getId() {
 	}
 
 	@Override
-	public TestDescriptor discoverTests(TestPlanSpecification specification) {
+	public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
 		return null;
 	}
 

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/JUnit4TestEngine.java
Patch:
@@ -10,9 +10,9 @@
 
 package org.junit.gen5.engine.junit4;
 
+import org.junit.gen5.engine.EngineAwareTestDescriptor;
 import org.junit.gen5.engine.EngineDescriptor;
 import org.junit.gen5.engine.ExecutionRequest;
-import org.junit.gen5.engine.TestDescriptor;
 import org.junit.gen5.engine.TestEngine;
 import org.junit.gen5.engine.TestPlanSpecification;
 
@@ -24,7 +24,7 @@ public String getId() {
 	}
 
 	@Override
-	public TestDescriptor discoverTests(TestPlanSpecification specification) {
+	public EngineAwareTestDescriptor discoverTests(TestPlanSpecification specification) {
 		return new EngineDescriptor(this);
 	}
 

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ColoredPrintingTestListener.java
Patch:
@@ -50,18 +50,18 @@ public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 		printlnTestDescriptor(YELLOW, "Test skipped:", testIdentifier);
 		printlnMessage(YELLOW, "Reason", reason);
 	}
 
 	@Override
-	public void testStarted(TestIdentifier testIdentifier) {
+	public void executionStarted(TestIdentifier testIdentifier) {
 		printlnTestDescriptor(NONE, "Test started:", testIdentifier);
 	}
 
 	@Override
-	public void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 		Color color = determineColor(testExecutionResult.getStatus());
 		printlnTestDescriptor(color, "Test finished:", testIdentifier);
 		testExecutionResult.getThrowable().ifPresent(t -> printlnException(color, t));

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineExecutionListener.java
Patch:
@@ -17,10 +17,10 @@ public interface EngineExecutionListener {
 
 	void dynamicTestRegistered(TestDescriptor testDescriptor);
 
-	void testSkipped(TestDescriptor testDescriptor, String reason);
+	void executionSkipped(TestDescriptor testDescriptor, String reason);
 
-	void testStarted(TestDescriptor testDescriptor);
+	void executionStarted(TestDescriptor testDescriptor);
 
-	void testFinished(TestDescriptor testDescriptor, TestExecutionResult testExecutionResult);
+	void executionFinished(TestDescriptor testDescriptor, TestExecutionResult testExecutionResult);
 
 }
\ No newline at end of file

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -26,13 +26,13 @@ default void testPlanExecutionFinished(TestPlan testPlan) {
 	default void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
-	default void testSkipped(TestIdentifier testIdentifier, String reason) {
+	default void executionSkipped(TestIdentifier testIdentifier, String reason) {
 	}
 
-	default void testStarted(TestIdentifier testIdentifier) {
+	default void executionStarted(TestIdentifier testIdentifier) {
 	}
 
-	default void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	default void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 	}
 
 }
\ No newline at end of file

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/LoggingListener.java
Patch:
@@ -49,17 +49,17 @@ public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testStarted(TestIdentifier testIdentifier) {
+	public void executionStarted(TestIdentifier testIdentifier) {
 		log("testStarted: %s - %s", testIdentifier.getDisplayName(), testIdentifier.getUniqueId());
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 		log("testSkipped: %s - %s - %s", testIdentifier.getDisplayName(), testIdentifier.getUniqueId(), reason);
 	}
 
 	@Override
-	public void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 		logWithThrowable("testFinished: %s - %s - %s", testExecutionResult.getThrowable().orElse(null),
 			testIdentifier.getDisplayName(), testIdentifier.getUniqueId(), testExecutionResult);
 	}

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/SummaryCreatingTestListener.java
Patch:
@@ -51,7 +51,7 @@ public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 		// @formatter:off
 		long skippedTests = concat(Stream.of(testIdentifier), testPlan.getDescendants(testIdentifier).stream())
 				.filter(TestIdentifier::isTest)
@@ -61,12 +61,12 @@ public void testSkipped(TestIdentifier testIdentifier, String reason) {
 	}
 
 	@Override
-	public void testStarted(TestIdentifier testIdentifier) {
+	public void executionStarted(TestIdentifier testIdentifier) {
 		summary.testsStarted.incrementAndGet();
 	}
 
 	@Override
-	public void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 		if (testExecutionResult.getStatus() == SUCCESSFUL) {
 			summary.testsSucceeded.incrementAndGet();
 		}

File: junit-tests/src/test/java/org/junit/gen5/engine/DummyTestEngine.java
Patch:
@@ -46,7 +46,7 @@ public void execute(ExecutionRequest request) {
 		EngineExecutionListener listener = request.getEngineExecutionListener();
 		for (TestDescriptor childDescriptor : request.getRootTestDescriptor().getChildren()) {
 			Runnable runnable = children.get(childDescriptor.getDisplayName());
-			listener.testStarted(childDescriptor);
+			listener.executionStarted(childDescriptor);
 			TestExecutionResult result;
 			try {
 				runnable.run();
@@ -55,7 +55,7 @@ public void execute(ExecutionRequest request) {
 			catch (Throwable t) {
 				result = TestExecutionResult.failed(t);
 			}
-			listener.testFinished(childDescriptor, result);
+			listener.executionFinished(childDescriptor, result);
 		}
 	}
 }
\ No newline at end of file

File: junit4-launcher-runner/src/main/java/org/junit/gen5/junit4runner/JUnit5RunnerListener.java
Patch:
@@ -49,20 +49,20 @@ public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 		Description description = findJUnit4Description(testIdentifier);
 		notifier.fireTestIgnored(description);
 		notifier.fireTestFinished(description);
 	}
 
 	@Override
-	public void testStarted(TestIdentifier testIdentifier) {
+	public void executionStarted(TestIdentifier testIdentifier) {
 		Description description = findJUnit4Description(testIdentifier);
 		notifier.fireTestStarted(description);
 	}
 
 	@Override
-	public void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 		Description description = findJUnit4Description(testIdentifier);
 		if (testExecutionResult.getStatus() == ABORTED) {
 			notifier.fireTestAssumptionFailed(toFailure(testExecutionResult, description));

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -34,18 +34,18 @@ public RunListenerAdapter(RunListener reporter) {
 	}
 
 	@Override
-	public void testStarted(TestIdentifier testIdentifier) {
+	public void executionStarted(TestIdentifier testIdentifier) {
 		runListener.testStarting(createReportEntry(testIdentifier));
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+	public void executionSkipped(TestIdentifier testIdentifier, String reason) {
 		runListener.testSkipped(
 			ignored(getClassNameOrUniqueId(testIdentifier), testIdentifier.getDisplayName(), reason));
 	}
 
 	@Override
-	public void testFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
+	public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
 		if (testExecutionResult.getStatus() == SUCCESSFUL) {
 			runListener.testSucceeded(createReportEntry(testIdentifier));
 		}

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineExecutionListener.java
Patch:
@@ -18,10 +18,10 @@ public interface EngineExecutionListener {
 	default void dynamicTestRegistered(TestDescriptor testDescriptor) {
 	}
 
-	default void testStarted(TestDescriptor testDescriptor) {
+	default void testSkipped(TestDescriptor testDescriptor, String reason) {
 	}
 
-	default void testSkipped(TestDescriptor testDescriptor, Throwable t) {
+	default void testStarted(TestDescriptor testDescriptor) {
 	}
 
 	default void testAborted(TestDescriptor testDescriptor, Throwable t) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -108,8 +108,8 @@ public void testStarted(TestDescriptor testDescriptor) {
 		}
 
 		@Override
-		public void testSkipped(TestDescriptor testDescriptor, Throwable t) {
-			testExecutionListener.testSkipped(getTestIdentifier(testDescriptor), t);
+		public void testSkipped(TestDescriptor testDescriptor, String reason) {
+			testExecutionListener.testSkipped(getTestIdentifier(testDescriptor), reason);
 		}
 
 		@Override

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -24,10 +24,10 @@ default void testPlanExecutionFinished(TestPlan testPlan) {
 	default void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
-	default void testStarted(TestIdentifier testIdentifier) {
+	default void testSkipped(TestIdentifier testIdentifier, String reason) {
 	}
 
-	default void testSkipped(TestIdentifier testIdentifier, Throwable t) {
+	default void testStarted(TestIdentifier testIdentifier) {
 	}
 
 	default void testAborted(TestIdentifier testIdentifier, Throwable t) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListenerRegistry.java
Patch:
@@ -48,8 +48,8 @@ public void testStarted(TestIdentifier testIdentifier) {
 		}
 
 		@Override
-		public void testSkipped(TestIdentifier testIdentifier, Throwable t) {
-			notifyTestExecutionListeners(listener -> listener.testSkipped(testIdentifier, t));
+		public void testSkipped(TestIdentifier testIdentifier, String reason) {
+			notifyTestExecutionListeners(listener -> listener.testSkipped(testIdentifier, reason));
 		}
 
 		@Override

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/LoggingListener.java
Patch:
@@ -48,8 +48,8 @@ public void testStarted(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, Throwable t) {
-		log("testSkipped: %s - %s - %s", testIdentifier.getDisplayName(), testIdentifier.getUniqueId(), t.getMessage());
+	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+		log("testSkipped: %s - %s - %s", testIdentifier.getDisplayName(), testIdentifier.getUniqueId(), reason);
 	}
 
 	@Override

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/SummaryCreatingTestListener.java
Patch:
@@ -54,7 +54,7 @@ public void testStarted(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, Throwable t) {
+	public void testSkipped(TestIdentifier testIdentifier, String reason) {
 		// @formatter:off
 		long skippedTests = concat(Stream.of(testIdentifier), testPlan.getDescendants(testIdentifier).stream())
 				.filter(TestIdentifier::isTest)

File: junit-tests/src/test/java/org/junit/gen5/engine/junit5/TrackingEngineExecutionListener.java
Patch:
@@ -41,7 +41,7 @@ public void testSucceeded(TestDescriptor testDescriptor) {
 	}
 
 	@Override
-	public void testSkipped(TestDescriptor testDescriptor, Throwable t) {
+	public void testSkipped(TestDescriptor testDescriptor, String reason) {
 		testSkippedCount.incrementAndGet();
 	}
 

File: junit4-launcher-runner/src/main/java/org/junit/gen5/junit4runner/JUnit5RunnerListener.java
Patch:
@@ -52,7 +52,7 @@ public void testStarted(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, Throwable t) {
+	public void testSkipped(TestIdentifier testIdentifier, String reason) {
 		Description description = findJUnit4Description(testIdentifier);
 		// TODO We call this after calling fireTestStarted. This leads to a wrong test
 		// count in Eclipse.

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/RunListenerAdapter.java
Patch:
@@ -37,8 +37,9 @@ public void testStarted(TestIdentifier testIdentifier) {
 	}
 
 	@Override
-	public void testSkipped(TestIdentifier testIdentifier, Throwable t) {
-		runListener.testSkipped(createReportEntry(testIdentifier, t));
+	public void testSkipped(TestIdentifier testIdentifier, String reason) {
+		runListener.testSkipped(
+			ignored(getClassNameOrUniqueId(testIdentifier), testIdentifier.getDisplayName(), reason));
 	}
 
 	@Override

File: junit-console/src/main/java/org/junit/gen5/console/tasks/ColoredPrintingTestListener.java
Patch:
@@ -43,7 +43,7 @@ public void testPlanExecutionFinished(TestPlan testPlan) {
 	}
 
 	@Override
-	public void dynamicTestFound(TestIdentifier testIdentifier) {
+	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		printlnTestDescriptor(BLUE, "Test found:", testIdentifier);
 	}
 

File: junit-engine-api/src/main/java/org/junit/gen5/engine/EngineExecutionListener.java
Patch:
@@ -15,7 +15,7 @@
  */
 public interface EngineExecutionListener {
 
-	default void dynamicTestFound(TestDescriptor testDescriptor) {
+	default void dynamicTestRegistered(TestDescriptor testDescriptor) {
 	}
 
 	default void testStarted(TestDescriptor testDescriptor) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListener.java
Patch:
@@ -21,7 +21,7 @@ default void testPlanExecutionStarted(TestPlan testPlan) {
 	default void testPlanExecutionFinished(TestPlan testPlan) {
 	}
 
-	default void dynamicTestFound(TestIdentifier testIdentifier) {
+	default void dynamicTestRegistered(TestIdentifier testIdentifier) {
 	}
 
 	default void testStarted(TestIdentifier testIdentifier) {

File: junit-launcher/src/main/java/org/junit/gen5/launcher/TestExecutionListenerRegistry.java
Patch:
@@ -38,8 +38,8 @@ TestExecutionListener getCompositeTestExecutionListener() {
 	private class CompositeTestExecutionListener implements TestExecutionListener {
 
 		@Override
-		public void dynamicTestFound(TestIdentifier testIdentifier) {
-			notifyTestExecutionListeners(listener -> listener.dynamicTestFound(testIdentifier));
+		public void dynamicTestRegistered(TestIdentifier testIdentifier) {
+			notifyTestExecutionListeners(listener -> listener.dynamicTestRegistered(testIdentifier));
 		}
 
 		@Override

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/LoggingListener.java
Patch:
@@ -38,7 +38,7 @@ public void testPlanExecutionFinished(TestPlan testPlan) {
 	}
 
 	@Override
-	public void dynamicTestFound(TestIdentifier testIdentifier) {
+	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		log("dynamicTestFound: %s - %s", testIdentifier.getDisplayName(), testIdentifier.getUniqueId());
 	}
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/SummaryCreatingTestListener.java
Patch:
@@ -44,7 +44,7 @@ public void testPlanExecutionFinished(TestPlan testPlan) {
 	}
 
 	@Override
-	public void dynamicTestFound(TestIdentifier testIdentifier) {
+	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		summary.testsFound.incrementAndGet();
 	}
 

File: junit4-launcher-runner/src/main/java/org/junit/gen5/junit4runner/JUnit5RunnerListener.java
Patch:
@@ -41,7 +41,7 @@ public void testPlanExecutionFinished(TestPlan testPlan) {
 	}
 
 	@Override
-	public void dynamicTestFound(TestIdentifier testIdentifier) {
+	public void dynamicTestRegistered(TestIdentifier testIdentifier) {
 		System.out.println("JUnit5 test runner cannot handle dynamic tests");
 	}
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -74,10 +74,8 @@ private void execute(RootTestDescriptor root) {
 		for (TestEngine testEngine : getAvailableEngines()) {
 			Optional<TestDescriptor> testDescriptorOptional = root.getTestDescriptorFor(testEngine);
 			testDescriptorOptional.ifPresent(testDescriptor -> {
-				testExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);
 				testEngine.execute(new ExecutionRequest(testDescriptor,
 					new ExecutionListenerAdapter(testPlan, testExecutionListener)));
-				testExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);
 			});
 		}
 		testExecutionListener.testPlanExecutionFinished(testPlan);

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestDescriptor.java
Patch:
@@ -39,7 +39,7 @@ public interface TestDescriptor {
 	boolean isContainer();
 
 	default boolean isRoot() {
-		return getParent() == null;
+		return !getParent().isPresent();
 	}
 
 	Set<TestTag> getTags();

File: junit5-api/src/main/java/org/junit/gen5/api/Assumptions.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.function.Supplier;
 
 import org.junit.gen5.commons.util.StringUtils;
-import org.opentestalliance.TestAbortedException;
+import org.opentest4j.TestAbortedException;
 
 /**
  * Collection of utility methods for conditional test execution based on

File: sample-project/src/test/java/com/example/SampleTestCase.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.TestName;
 import org.junit.gen5.api.extension.ExtendWith;
-import org.opentestalliance.TestSkippedException;
+import org.opentest4j.TestSkippedException;
 
 /**
  * Named *TestCase so Gradle will not try to run it.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtensionPointRegistry.java
Patch:
@@ -21,4 +21,7 @@ public interface ExtensionPointRegistry {
 
 	<T extends ExtensionPoint> void register(T extensionPoint, Class<T> extensionType, Position position);
 
+	default <T extends ExtensionPoint> void register(T extensionPoint, Class<T> extensionType) {
+		register(extensionPoint, extensionType, Position.DEFAULT);
+	}
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -57,7 +57,7 @@ public TestExtensionRegistry(TestExtensionRegistry parent) {
 	private void addDefaultExtensions() {
 		// @formatter:off
 		getDefaultExtensionClasses().stream()
-			.forEach(extensionClass -> addExtension(extensionClass));
+			.forEach(this::addExtension);
 		// @formatter:on
 	}
 
@@ -69,6 +69,7 @@ public Set<Class<? extends TestExtension>> getRegisteredExtensionClasses() {
 		return Collections.unmodifiableSet(allRegisteredExtensionClasses);
 	}
 
+	@SuppressWarnings("unchecked")
 	protected <T extends ExtensionPoint> List<RegisteredExtensionPoint<T>> getRegisteredExtensionPoints(
 			Class<T> extensionClass) {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodInvoker.java
Patch:
@@ -65,6 +65,7 @@ private Object resolveParameter(Parameter parameter, MethodContext methodContext
 		try {
 			// @formatter:off
 			List<MethodParameterResolver> matchingResolvers = extensionRegistry.getExtensionPoints(MethodParameterResolver.class)
+					.stream()
 					.filter(resolver -> resolver.supports(parameter, methodContext, testExtensionContext))
 					.collect(toList());
 			// @formatter:on

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeAllExtensionPoint.java
Patch:
@@ -14,18 +14,18 @@
  * {@code BeforeAllCallbacks} defines the API for {@link TestExtension TestExtensions} that wish to provide additional
  * behavior to tests before all test methods have been invoked.
  * <p>
- * Concrete implementations often implement {@link AfterAllCallback} as well.
+ * Concrete implementations often implement {@link AfterAllExtensionPoint} as well.
  * <p>
  * Implementations must provide a no-args constructor.
  *
  * @since 5.0
  * @see org.junit.gen5.api.BeforeAll
- * @see AfterAllCallback
+ * @see AfterAllExtensionPoint
  * @see BeforeEachExtensionPoint
  * @see AfterEachExtensionPoint
  */
 @FunctionalInterface
-public interface BeforeAllCallback extends ExtensionPoint {
+public interface BeforeAllExtensionPoint extends ExtensionPoint {
 
 	/**
 	 * Callback that is invoked <em>before</em> all {@code @BeforeAll} methods have been invoked.

File: junit5-api/src/main/java/org/junit/gen5/api/extension/BeforeEachExtensionPoint.java
Patch:
@@ -21,8 +21,8 @@
  * @since 5.0
  * @see org.junit.gen5.api.BeforeEach
  * @see AfterEachExtensionPoint
- * @see BeforeAllCallback
- * @see AfterAllCallback
+ * @see BeforeAllExtensionPoint
+ * @see AfterAllExtensionPoint
  */
 @FunctionalInterface
 public interface BeforeEachExtensionPoint extends ExtensionPoint {

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -30,8 +30,8 @@
  * <li>{@link MethodParameterResolver}</li>
  * <li>{@link BeforeEachExtensionPoint}</li>
  * <li>{@link AfterEachExtensionPoint}</li>
- * <li>{@link BeforeAllCallback}</li>
- * <li>{@link AfterAllCallback}</li>
+ * <li>{@link BeforeAllExtensionPoint}</li>
+ * <li>{@link AfterAllExtensionPoint}</li>
  * </ul>
  *
  * @since 5.0

File: junit-tests/src/test/java/org/junit/gen5/console/tasks/ConsoleTaskExecutorTest.java
Patch:
@@ -29,7 +29,7 @@ public void executeSuccessfulTask() {
 		int exitCode = executor.executeTask(writer -> {
 			writer.print("Test");
 			return 42;
-		} , writer -> {
+		}, writer -> {
 			fail("should not be called");
 		});
 
@@ -42,7 +42,7 @@ public void executeSuccessfulTask() {
 	public void executeFailingTask() {
 		int exitCode = executor.executeTask(writer -> {
 			throw new RuntimeException("something went wrong");
-		} , writer -> {
+		}, writer -> {
 			writer.print("Help");
 		});
 
@@ -55,7 +55,7 @@ public void executeFailingTask() {
 	public void executeWithExceptionWhilePrintingHelp() {
 		int exitCode = executor.executeTask(writer -> {
 			throw new RuntimeException("something went wrong");
-		} , writer -> {
+		}, writer -> {
 			throw new RuntimeException("could not print help");
 		});
 

File: junit-launcher/src/main/java/org/junit/gen5/launcher/listeners/TestExecutionSummary.java
Patch:
@@ -85,7 +85,8 @@ private String describeTest(TestDescriptor descriptor) {
 		return descriptionParts.stream().collect(Collectors.joining(":"));
 	}
 
-	private void collectTestDescription(Optional<TestDescriptor> optionalDescriptor, List<String> descriptionParts) {
+	private void collectTestDescription(Optional<? extends TestDescriptor> optionalDescriptor,
+			List<String> descriptionParts) {
 		optionalDescriptor.ifPresent(descriptor -> {
 			if (descriptor instanceof TestPlan) {
 			}

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/ClassLevelCallbackTests.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.gen5.api.AfterAll;
 import org.junit.gen5.api.BeforeAll;
 import org.junit.gen5.api.Test;
@@ -34,6 +35,7 @@
  * @author Sam Brannen
  * @since 5.0
  */
+@Ignore("https://github.com/junit-team/junit-lambda/issues/39")
 public class ClassLevelCallbackTests extends AbstractJUnit5TestEngineTestCase {
 
 	@org.junit.Before

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/DisabledTests.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Optional;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.gen5.api.Disabled;
 import org.junit.gen5.api.Test;
 import org.junit.gen5.api.extension.Condition;
@@ -37,6 +38,8 @@
  * @author Sam Brannen
  * @since 5.0
  */
+@Ignore("https://github.com/junit-team/junit-lambda/issues/39")
+
 public class DisabledTests extends AbstractJUnit5TestEngineTestCase {
 
 	private static final String FOO = "DisabledTests.foo";

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/MethodLevelCallbackTests.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Test;
@@ -34,6 +35,8 @@
  * @author Sam Brannen
  * @since 5.0
  */
+@Ignore("https://github.com/junit-team/junit-lambda/issues/39")
+
 public class MethodLevelCallbackTests extends AbstractJUnit5TestEngineTestCase {
 
 	@org.junit.Test

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/NestedTestClassesTests.java
Patch:
@@ -15,6 +15,7 @@
 import static org.junit.gen5.engine.TestPlanSpecification.forClass;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Nested;
@@ -28,6 +29,7 @@
  * @author Sam Brannen
  * @since 5.0
  */
+@Ignore("https://github.com/junit-team/junit-lambda/issues/39")
 public class NestedTestClassesTests extends AbstractJUnit5TestEngineTestCase {
 
 	@org.junit.Test

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/ParameterResolverTests.java
Patch:
@@ -15,6 +15,7 @@
 import static org.junit.gen5.api.Assertions.assertTrue;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.gen5.api.AfterEach;
 import org.junit.gen5.api.BeforeEach;
 import org.junit.gen5.api.Name;
@@ -35,6 +36,7 @@
  * @author Sam Brannen
  * @since 5.0
  */
+@Ignore("https://github.com/junit-team/junit-lambda/issues/39")
 public class ParameterResolverTests extends AbstractJUnit5TestEngineTestCase {
 
 	@org.junit.Test

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistryTest.java
Patch:
@@ -27,7 +27,7 @@ public class TestExtensionRegistryTest {
 
 	@Test
 	public void checkJUnit5DefaultExtensions() {
-		Assert.assertEquals(3, TestExtensionRegistry.getDefaultExtensionClasses().size());
+		Assert.assertEquals(2, TestExtensionRegistry.getDefaultExtensionClasses().size());
 
 		assertDefaultExtensionType(DisabledCondition.class);
 		assertDefaultExtensionType(TestNameParameterResolver.class);

File: junit5-api/src/main/java/org/junit/gen5/api/Assumptions.java
Patch:
@@ -16,8 +16,8 @@
 import org.opentestalliance.TestAbortedException;
 
 /**
- * Collection of utility methods for aborting test execution based on failed
- * assumptions.
+ * Collection of utility methods for conditional test execution based on
+ * <em>assumptions</em>.
  *
  * @author Sam Brannen
  * @since 5.0

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ExtendWith.java
Patch:
@@ -37,8 +37,6 @@
  * @author Sam Brannen
  * @since 5.0
  * @see TestExtension
- * @see InstancePostProcessor
- * @see MethodParameterResolver
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/InstancePostProcessor.java
Patch:
@@ -31,7 +31,7 @@ public interface InstancePostProcessor extends TestExtension {
 	 * {@link TestExecutionContext}.
 	 *
 	 * @param testExecutionContext the current test execution context
-	 * @param testInstance
+	 * @param testInstance the instance to post-process
 	 */
 	void postProcessTestInstance(TestExecutionContext testExecutionContext, Object testInstance) throws Exception;
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/TestExtensionRegistry.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.gen5.api.extension.TestExtension;
 import org.junit.gen5.commons.util.ReflectionUtils;
+import org.junit.gen5.engine.junit5.extension.DisabledCondition;
 import org.junit.gen5.engine.junit5.extension.TestNameParameterResolver;
 
 /**
@@ -28,7 +29,7 @@
 public class TestExtensionRegistry {
 
 	private static final List<Class<? extends TestExtension>> defaultExtensionClasses = Collections.unmodifiableList(
-		Arrays.asList(TestNameParameterResolver.class));
+		Arrays.asList(DisabledCondition.class, TestNameParameterResolver.class));
 
 	static List<Class<? extends TestExtension>> getDefaultExtensionClasses() {
 		return defaultExtensionClasses;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/TestNameParameterResolver.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.gen5.api.extension.TestExecutionContext;
 
 /**
- * {@code MethodParameterResolver} that resolves the name of the currently
+ * {@link MethodParameterResolver} that resolves the name of the currently
  * executing test for {@code String} method parameters annotated with
  * {@link TestName @TestName}.
  *

File: surefire-junit5/src/main/java/org/junit/gen5/surefire/JUnitGen5Provider.java
Patch:
@@ -40,15 +40,15 @@ public JUnitGen5Provider(ProviderParameters parameters) {
 	@Override
 	public Iterable<Class<?>> getSuites() {
 		// TODO Implement this.
-		throw new UnsupportedOperationException("Not yet supported.");
+		throw new UnsupportedOperationException("Forking is not yet supported.");
 	}
 
 	@Override
 	public RunResult invoke(Object forkTestSet)
 			throws TestSetFailedException, ReporterException, InvocationTargetException {
 		if (forkTestSet != null) {
 			// TODO Implement this.
-			throw new UnsupportedOperationException("Not yet supported.");
+			throw new UnsupportedOperationException("Forking is not yet supported.");
 		}
 
 		Launcher launcher = new Launcher();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -42,7 +42,7 @@ public void registerTestPlanExecutionListeners(TestExecutionListener... testList
 	public TestPlan discover(TestPlanSpecification specification) {
 		TestPlan testPlan = new TestPlan();
 		for (TestEngine testEngine : lookupAllTestEngines()) {
-			LOG.info("Discovering tests in enginge " + testEngine.getId());
+			LOG.info("Discovering tests in engine " + testEngine.getId());
 			EngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);
 			testEngine.discoverTests(specification, engineDescriptor);
 			testPlan.addEngineDescriptor(engineDescriptor);

File: junit5-api/src/main/java/org/junit/gen5/api/Conditional.java
Patch:
@@ -17,7 +17,7 @@
 import java.lang.annotation.Target;
 
 /**
- * {@code @Conditional} is used to register one or more {@link #value
+ * {@code @Conditional} is used to register one or more {@link Condition
  * Conditions} to be evaluated for <em>conditional test execution</em>.
  *
  * @author Sam Brannen
@@ -31,8 +31,8 @@
 public @interface Conditional {
 
 	/**
-	 * One or more {@link #Condition Conditions} to be evaluated for
-	 * <em>conditional test execution</em>.
+	 * The {@link Condition Conditions} to be evaluated for <em>conditional
+	 * test execution</em>.
 	 */
 	Class<? extends Condition>[]value();
 

File: sample-project/src/test/java/com/example/SucceedingTestCase.java
Patch:
@@ -11,6 +11,7 @@
 package com.example;
 
 import static org.junit.gen5.api.Assertions.fail;
+import static org.junit.gen5.api.TestInstance.Mode.PER_CLASS;
 
 import org.junit.gen5.api.After;
 import org.junit.gen5.api.AfterAll;
@@ -19,12 +20,14 @@
 import org.junit.gen5.api.Disabled;
 import org.junit.gen5.api.Name;
 import org.junit.gen5.api.Test;
+import org.junit.gen5.api.TestInstance;
 
 /**
  * Named *TestCase so Gradle will not try to run it.
  */
 @Name("A succeeding test case")
 @Fast
+@TestInstance(PER_CLASS)
 class SucceedingTestCase extends AbstractSuperTest implements InterfaceWithTestCases {
 
 	@BeforeAll

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestDecorators.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Sam Brannen
  * @since 5.0
- * @see MethodArgumentResolver
+ * @see MethodParameterResolver
  */
 @Target({ ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionContext.java
Patch:
@@ -43,6 +43,6 @@ default Optional<Throwable> getTestException() {
 
 	Optional<TestExecutionContext> getParent();
 
-	Set<MethodArgumentResolver> getArgumentResolvers();
+	Set<MethodParameterResolver> getParameterResolvers();
 
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodTestExecutionNode.java
Patch:
@@ -92,7 +92,7 @@ protected String buildTestSkippedMessage(Result result, TestExecutionContext con
 
 	private void invokeTestMethod(Method method, TestExecutionContext context) {
 		Object target = context.getTestInstance().get();
-		invokeMethodInContext(method, context, context.getArgumentResolvers(), target);
+		invokeMethodInContext(method, context, context.getParameterResolvers(), target);
 	}
 
 	private void executeBeforeMethods(TestExecutionContext context) {
@@ -101,7 +101,6 @@ private void executeBeforeMethods(TestExecutionContext context) {
 	}
 
 	private void executeAfterMethods(TestExecutionContext context, List<Throwable> exceptionsCollector) {
-
 		Object target = context.getTestInstance().get();
 		getParent().executeAfterEachTest(context, context.getParent().get(), target, exceptionsCollector);
 	}

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/execution/injection/sample/CustomAnnotationParameterResolver.java
Patch:
@@ -12,13 +12,13 @@
 
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.api.extension.MethodArgumentResolver;
+import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.commons.util.AnnotationUtils;
 
 /**
  * @since 5.0
  */
-public class CustomAnnotationBasedMethodArgumentResolver implements MethodArgumentResolver {
+public class CustomAnnotationParameterResolver implements MethodParameterResolver {
 
 	@Override
 	public boolean supports(Parameter parameter) {

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/execution/injection/sample/CustomTypeParameterResolver.java
Patch:
@@ -12,12 +12,12 @@
 
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.api.extension.MethodArgumentResolver;
+import org.junit.gen5.api.extension.MethodParameterResolver;
 
 /**
  * @since 5.0
  */
-public class CustomTypeBasedMethodArgumentResolver implements MethodArgumentResolver {
+public class CustomTypeParameterResolver implements MethodParameterResolver {
 
 	@Override
 	public boolean supports(Parameter parameter) {

File: sample-project/src/test/java/com/example/CustomAnnotationParameterResolver.java
Patch:
@@ -12,13 +12,13 @@
 
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.api.extension.MethodArgumentResolver;
+import org.junit.gen5.api.extension.MethodParameterResolver;
 import org.junit.gen5.commons.util.AnnotationUtils;
 
 /**
  * @since 5.0
  */
-public class CustomAnnotationBasedMethodArgumentResolver implements MethodArgumentResolver {
+public class CustomAnnotationParameterResolver implements MethodParameterResolver {
 
 	@Override
 	public boolean supports(Parameter parameter) {

File: sample-project/src/test/java/com/example/CustomTypeParameterResolver.java
Patch:
@@ -12,12 +12,12 @@
 
 import java.lang.reflect.Parameter;
 
-import org.junit.gen5.api.extension.MethodArgumentResolver;
+import org.junit.gen5.api.extension.MethodParameterResolver;
 
 /**
  * @since 5.0
  */
-public class CustomTypeBasedMethodArgumentResolver implements MethodArgumentResolver {
+public class CustomTypeParameterResolver implements MethodParameterResolver {
 
 	@Override
 	public boolean supports(Parameter parameter) {

File: sample-project/src/test/java/com/example/SampleTestCase.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Named *TestCase so Gradle will not try to run it.
  */
-@TestDecorators({ CustomTypeBasedMethodArgumentResolver.class, CustomAnnotationBasedMethodArgumentResolver.class })
+@TestDecorators({ CustomTypeParameterResolver.class, CustomAnnotationParameterResolver.class })
 class SampleTestCase {
 
 	static boolean staticBeforeInvoked = false;

File: junit-console/src/main/java/org/junit/gen5/console/TestSummaryReportingTestListener.java
Patch:
@@ -82,7 +82,7 @@ private void reportSummary(String msg) {
 			+ "[%10d tests successful]\n"
 			+ "[%10d tests failed    ]\n",
 			msg, (this.timeFinished - this.timeStarted), this.testsFound.get(), this.testsStarted.get(),
-			this.testsSkipped.get(), this.testsAborted.get(), this.testsFailed.get(), this.testsSucceeded.get()));
+			this.testsSkipped.get(), this.testsAborted.get(), this.testsSucceeded.get(), this.testsFailed.get()));
 		// @formatter:on
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/extension/TestNameArgumentResolver.java
Patch:
@@ -23,13 +23,14 @@
  * executing test for {@code String} method parameters annotated with
  * {@link TestName @TestName}.
  *
+ * @author Sam Brannen
  * @since 5.0
  */
 public class TestNameArgumentResolver implements MethodArgumentResolver {
 
 	@Override
 	public boolean supports(Parameter parameter) {
-		return parameter.getType().equals(String.class) && findAnnotation(parameter, TestName.class).isPresent();
+		return parameter.getType() == String.class && findAnnotation(parameter, TestName.class).isPresent();
 	}
 
 	@Override

File: junit-commons/src/test/java/org/junit/gen5/commons/util/FindClassesInPackageTest.java
Patch:
@@ -22,6 +22,7 @@ public class FindClassesInPackageTest {
 	@Test
 	public void findAllClassesInThisPackage() throws IOException, ClassNotFoundException {
 		List<Class<?>> classes = Arrays.asList(ReflectionUtils.findAllClassesInPackage("org.junit.gen5.commons"));
+		System.out.println("Number of classes found: " + classes.size());
 		for (Class<?> clazz : classes) {
 			System.out.println(clazz.getName());
 		}

File: junit-commons/src/test/java/org/junit/gen5/commons/util/FindClassesInPackageTest.java
Patch:
@@ -22,9 +22,9 @@ public class FindClassesInPackageTest {
 	@Test
 	public void findAllClassesInThisPackage() throws IOException, ClassNotFoundException {
 		List<Class<?>> classes = Arrays.asList(ReflectionUtils.findAllClassesInPackage("org.junit.gen5.commons"));
-		//		for(Class clazz : classes) {
-		//			System.out.println(clazz.getName());
-		//		}
+		for (Class<?> clazz : classes) {
+			System.out.println(clazz.getName());
+		}
 		Assert.assertTrue("Should be at least 20 classes", classes.size() >= 20);
 		Assert.assertTrue(classes.contains(NestedClassToBeFound.class));
 		Assert.assertTrue(classes.contains(MemberClassToBeFound.class));

File: junit4-engine/src/main/java/org/junit/gen5/engine/junit4/RunListenerAdapter.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
+import org.opentestalliance.TestSkippedException;
 
 class RunListenerAdapter extends RunListener {
 
@@ -40,7 +41,8 @@ public RunListenerAdapter(Map<Description, DescriptionTestDescriptor> descriptio
 	public void testIgnored(Description description) throws Exception {
 		// TODO this looks weird
 		notifyTestExecutionListener(description, testExecutionListener::testStarted);
-		notifyTestExecutionListener(description, null, testExecutionListener::testSkipped);
+		notifyTestExecutionListener(description, new TestSkippedException("ignored"),
+			testExecutionListener::testSkipped);
 	}
 
 	@Override

File: junit5-api/src/main/java/org/junit/gen5/api/extension/ArgumentResolutionException.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package org.junit.gen5.engine.junit5.execution.injection;
+package org.junit.gen5.api.extension;
 
 /**
  * @since 5.0

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/execution/injection/sample/CustomAnnotation.java
Patch:
@@ -15,6 +15,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * @since 5.0
+ */
 @Target(ElementType.PARAMETER)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface CustomAnnotation {

File: junit-engine-api/src/main/java/org/junit/gen5/engine/JavaSource.java
Patch:
@@ -15,7 +15,7 @@
 
 public class JavaSource implements TestSource {
 
-	private final Class javaClass;
+	private final Class<?> javaClass;
 
 	private final Method javaMethod;
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/ReflectionUtils.java
Patch:
@@ -92,7 +92,7 @@ public static Optional<Class<?>> loadClass(String name, ClassLoader classLoader)
 		Preconditions.notNull(classLoader, "ClassLoader must not be null");
 		try {
 			// TODO Add support for primitive types and arrays.
-			return Optional.of(classLoader.loadClass(name));
+			return Optional.of(classLoader.loadClass(name.trim()));
 		}
 		catch (ClassNotFoundException e) {
 			return Optional.empty();

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/descriptor/JUnit5TestableTest.java
Patch:
@@ -124,7 +124,7 @@ public void fromMethodWithParameters() throws NoSuchMethodException {
 		JUnit5Method testable = (JUnit5Method) JUnit5Testable.fromMethod(testMethod, BTestClass.class,
 			engineDescriptor.getUniqueId());
 		Assert.assertEquals(
-			"junit5:org.junit.gen5.engine.junit5.descriptor.BTestClass#test4(java.lang.String,java.math.BigDecimal)",
+			"junit5:org.junit.gen5.engine.junit5.descriptor.BTestClass#test4(java.lang.String, java.math.BigDecimal)",
 			testable.getUniqueId());
 		Assert.assertSame(testMethod, testable.getJavaMethod());
 	}

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/JUnit5TestEngineTests.java
Patch:
@@ -295,7 +295,7 @@ void disabledTest() {
 
 	private static class MethodParameterInjectionTestCase {
 
-//		TODO: make this work
+		//		TODO: make this work
 		//		@Test
 		//		void argumentInjectionWithCompetingResolvers(@CustomAnnotation CustomType customType) {
 		//			 //should fail

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/SimpleAnnotationBasedMethodArgumentResolver.java
Patch:
@@ -19,7 +19,7 @@
 // for a 'real' solution see: org.springframework.web.method.support.HandlerMethodArgumentResolver
 public class SimpleAnnotationBasedMethodArgumentResolver implements MethodArgumentResolver {
 
-	private final String annotationName = "com.example.CustomAnnotation";
+	private final String annotationName = "org.junit.gen5.engine.junit5.execution.injection.sample.CustomAnnotation";
 
 	@Override
 	public boolean supports(Parameter parameter) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/SimpleTypeBasedMethodArgumentResolver.java
Patch:
@@ -22,7 +22,7 @@ public boolean supports(Parameter parameter) {
 		Class<?> parameterType = parameter.getType();
 
 		//todo: check should be based on class-objects not strings
-		return (parameterType.getName().equals("com.example.CustomType"));
+		return (parameterType.getName().equals("org.junit.gen5.engine.junit5.execution.injection.sample.CustomType"));
 	}
 
 }

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/sample/CustomAnnotation.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package com.example;
+package org.junit.gen5.engine.junit5.execution.injection.sample;
 
 import java.lang.annotation.*;
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/sample/CustomType.java
Patch:
@@ -8,7 +8,7 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 
-package com.example;
+package org.junit.gen5.engine.junit5.execution.injection.sample;
 
 import java.util.*;
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/ReflectionUtils.java
Patch:
@@ -55,11 +55,11 @@ public static Object invokeMethod(Method method, Object testInstance)
 		return method.invoke(testInstance);
 	}
 
-	public static Optional<Class<?>> loadClass(String name) {
+	public static <A extends Class<?>> Optional<A> loadClass(String name) {
 		// TODO Use correct classloader
 		// TODO Add support for primitive types and arrays.
 		try {
-			return Optional.of(getClassLoader().loadClass(name));
+			return Optional.of((A) getClassLoader().loadClass(name));
 		}
 		catch (ClassNotFoundException e) {
 			return Optional.empty();

File: junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java
Patch:
@@ -63,6 +63,7 @@ protected Set<TestDescriptor> findFilteredCandidates(TestPlanSpecification speci
 	}
 
 	private Set<TestDescriptor> pruneAllWithoutConcreteTests(Set<TestDescriptor> descriptorCandidates) {
+		//Todo: pruning only works if descriptor candidates come in the right order, i.e. parents come before their children
 		Set<TestDescriptor> included = new HashSet<>();
 		descriptorCandidates.stream().filter(
 			descriptor -> descriptor.isTest() || included.contains(descriptor)).forEach(descriptor -> {

File: junit5-api/src/main/java/org/junit/gen5/api/Conditional.java
Patch:
@@ -26,6 +26,6 @@
 @Documented
 public @interface Conditional {
 
-	Class<? extends Condition>[]value() default Condition.class;
+	Class<? extends Condition>[]value();
 
 }

File: sample-project/src/test/java/com/example/JUnit4SamplesSuite.java
Patch:
@@ -11,6 +11,7 @@
 package com.example;
 
 import static org.junit.gen5.junit4runner.JUnit5.*;
+import static org.junit.gen5.junit4runner.JUnit5.Packages;
 
 import org.junit.gen5.junit4runner.JUnit5;
 import org.junit.gen5.junit4runner.JUnit5.Classes;

File: sample-project/src/test/java/com/example/JUnit4SamplesSuite.java
Patch:
@@ -17,7 +17,8 @@
 
 @RunWith(JUnit5.class)
 @Classes({ SucceedingTestCase.class })
-@UniqueIds({ "junit5:com.example.SampleTestCase#assertAllTest()", "junit5:com.example.SampleTestCase#assertAllFailingTest()" })
+@UniqueIds({ "junit5:com.example.SampleTestCase#assertAllTest()",
+	"junit5:com.example.SampleTestCase#assertAllFailingTest()" })
 //@Classes({ SampleTestCase.class, SucceedingTestCase.class, JUnit4TestCase.class })
 public class JUnit4SamplesSuite {
 

File: sample-project/src/test/java/com/example/JUnit4SamplesSuite.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.runner.RunWith;
 
 @RunWith(JUnit5.class)
+//@Classes({ SucceedingTestCase.class })
 @Classes({ SampleTestCase.class, SucceedingTestCase.class, JUnit4TestCase.class })
 public class JUnit4SamplesSuite {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/JUnit5Testable.java
Patch:
@@ -14,11 +14,9 @@
 
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
-import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 import lombok.Value;
@@ -138,7 +136,9 @@ private static <R> Class<?>[] findParameterTypes(String paramsPart, String uniqu
 	}
 
 	private static Method findMethod(Class<?> clazz, String methodName, Class<?>[] parameterTypes) {
-		return ReflectionUtils.findMethod(clazz, methodName, parameterTypes).get();
+		return ReflectionUtils.findMethod(clazz, methodName, parameterTypes).orElseThrow(
+			() -> new IllegalArgumentException(String.format("No method with 'name' %s and paramter types '%s'",
+				methodName, Arrays.toString(parameterTypes))));
 	}
 
 	private static Class<?> findNestedClass(String nameExtension, Class<?> containerClass) {

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/SimpleTypeBasedMethodArgumentResolver.java
Patch:
@@ -23,6 +23,7 @@ public Object resolveArgumentForMethodParameter(Parameter parameter)
 			throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
 		Class<?> parameterType = parameter.getType();
 
+		//todo: check should be based on class-objects not strings
 		if (parameterType.getName().equals("com.example.CustomType"))
 			return ReflectionUtils.newInstance(parameterType);
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/SimpleAnnotationBasedMethodArgumentResolver.java
Patch:
@@ -10,11 +10,11 @@
 
 package org.junit.gen5.engine.junit5.execution.injection;
 
-import org.junit.gen5.commons.util.*;
-
 import java.lang.annotation.*;
 import java.lang.reflect.*;
 
+import org.junit.gen5.commons.util.*;
+
 // for a 'real' solution see: org.springframework.web.method.support.HandlerMethodArgumentResolver
 public class SimpleAnnotationBasedMethodArgumentResolver implements MethodArgumentResolver {
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/injection/SimpleTypeBasedMethodArgumentResolver.java
Patch:
@@ -26,7 +26,6 @@ public Object resolveArgumentForMethodParameter(Parameter parameter)
 		if (parameterType.getName().equals("com.example.CustomType"))
 			return ReflectionUtils.newInstance(parameterType);
 
-
 		return null;
 	}
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.gen5.engine.junit5.descriptor;
 
 import lombok.Data;
+
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/SpecificationResolver.java
Patch:
@@ -17,6 +17,7 @@
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Set;
+
 import org.junit.gen5.commons.util.AnnotationUtils;
 import org.junit.gen5.engine.ClassNameSpecification;
 import org.junit.gen5.engine.TestDescriptor;
@@ -66,7 +67,7 @@ private void resolveUniqueIdSpecification(UniqueIdSpecification uniqueIdSpecific
 	}
 
 	private void resolveUniqueId(UniqueIdSpecification uniqueIdSpecification, TestDescriptor parent,
-		UniqueIdParts uniqueIdRest) {
+			UniqueIdParts uniqueIdRest) {
 		String idPart = uniqueIdRest.pop();
 		if (idPart.isEmpty()) {
 			return;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -25,8 +25,7 @@
  * @since 5.0
  */
 @Data
-@EqualsAndHashCode
-public class ClassTestDescriptor implements TestDescriptor {
+public class ClassTestDescriptor extends AbstractTestDescriptor {
 
 	private final TestDescriptor parent;
 	private final Class<?> testClass;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -11,6 +11,7 @@
 package org.junit.gen5.engine.junit5.descriptor;
 
 import lombok.Data;
+
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/SpecificationResolver.java
Patch:
@@ -17,6 +17,7 @@
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Set;
+
 import org.junit.gen5.commons.util.AnnotationUtils;
 import org.junit.gen5.engine.ClassNameSpecification;
 import org.junit.gen5.engine.TestDescriptor;
@@ -66,7 +67,7 @@ private void resolveUniqueIdSpecification(UniqueIdSpecification uniqueIdSpecific
 	}
 
 	private void resolveUniqueId(UniqueIdSpecification uniqueIdSpecification, TestDescriptor parent,
-		UniqueIdParts uniqueIdRest) {
+			UniqueIdParts uniqueIdRest) {
 		String idPart = uniqueIdRest.pop();
 		if (idPart.isEmpty()) {
 			return;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/execution/MethodTestExecutionNode.java
Patch:
@@ -91,15 +91,13 @@ private void invokeTestMethod(EngineExecutionContext context, Object testInstanc
 		ReflectionUtils.invokeMethod(testMethod, testInstance, arguments.toArray());
 	}
 
-
 	private List<Object> prepareArguments(MethodTestDescriptor methodTestDescriptor)
 			throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
 
 		// for a 'real' solution see: org.springframework.web.method.support.HandlerMethodArgumentResolver
 
 		Method testMethod = methodTestDescriptor.getTestMethod();
 
-
 		List<Object> arguments = new ArrayList<>();
 
 		if (testMethod.getParameterCount() > 0) {
@@ -117,7 +115,7 @@ private List<Object> prepareArguments(MethodTestDescriptor methodTestDescriptor)
 			}
 		}
 
-			return arguments;
+		return arguments;
 	}
 
 	private void executeBeforeMethods(Class<?> testClass, Object testInstance) throws Exception {

File: sample-project/src/main/java/com/example/CustomType.java
Patch:
@@ -12,12 +12,10 @@
 
 import java.util.*;
 
-
 public class CustomType {
 
 	private Date date;
 
-
 	@Override
 	public String toString() {
 		return "CustomType: " + this.date;

File: sample-project/src/test/java/com/example/SampleTestCase.java
Patch:
@@ -95,7 +95,6 @@ void argumentInjectionByAnnotation(@CustomAnnotation String value) {
 
 	}
 
-
 	@Test(name = "with succeeding assertAll")
 	void assertAllTest() {
 		Map<String, String> person = new HashMap<String, String>();

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java
Patch:
@@ -25,8 +25,7 @@
  * @since 5.0
  */
 @Data
-@EqualsAndHashCode
-public class ClassTestDescriptor implements TestDescriptor {
+public class ClassTestDescriptor extends AbstractTestDescriptor {
 
 	private final TestDescriptor parent;
 	private final Class<?> testClass;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestMethodTester.java
Patch:
@@ -19,7 +19,7 @@
  * @since 5.0
  */
 class TestMethodTester extends ReflectionObjectTester {
-	
+
 	boolean accept(Method testMethodCandidate) {
 		if (isPrivate(testMethodCandidate))
 			return false;

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JavaClassTestDescriptor.java
Patch:
@@ -19,8 +19,8 @@
 /**
  * {@link TestDescriptor} for tests based on Java classes.
  *
- * <p>The pattern of the {@link #getTestId test ID} takes the form of
- * <code>{fully qualified class name}</code>.
+ * <p>The pattern of the {@link #getUniqueId unique ID} takes the form of
+ * <code>{parent unique id}:{fully qualified class name}</code>.
  *
  * @since 5.0
  */

File: junit-console/src/main/java/org/junit/gen5/console/ColoredPrintingTestListener.java
Patch:
@@ -100,9 +100,8 @@ private void printlnException(Color color, Throwable throwable) {
 	}
 
 	void println(Color color, String format, Object... args) {
-		out.print(color);
-		out.format(format, args);
-		out.println(NONE);
+		// Use string concatenation to avoid ansi disruption on console
+		out.println(color + String.format(format, args) + NONE);
 	}
 
 

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JavaTestDescriptor.java
Patch:
@@ -19,14 +19,14 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+
 import org.junit.gen5.api.Test;
 import org.junit.gen5.commons.util.ObjectUtils;
 import org.junit.gen5.commons.util.Preconditions;
 import org.junit.gen5.engine.TestDescriptor;
 
-import lombok.Data;
-import lombok.EqualsAndHashCode;
-
 /**
  * {@link TestDescriptor} for tests based on Java classes and methods.
  *

File: junit-console/src/main/java/org/junit/gen5/console/ConsoleRunner.java
Patch:
@@ -25,8 +25,7 @@ public static void main(String... args) {
 		// TODO Configure launcher?
 		Launcher launcher = new Launcher();
 
-		launcher.registerTestPlanExecutionListeners(
-			new ColoredPrintingTestListener(System.out),
+		launcher.registerTestPlanExecutionListeners(new ColoredPrintingTestListener(System.out),
 			new TestSummaryReportingTestListener(System.out));
 
 		TestPlanSpecification testPlanSpecification = TestPlanSpecification.builder().classNames(args).build();

File: junit-engine-api/src/test/java/org/junit/gen5/engine/TestPlanSpecificationBuilderTests.java
Patch:
@@ -25,8 +25,8 @@ public class TestPlanSpecificationBuilderTests {
 	@Test
 	public void testPlanBuilderDemo() {
 		TestPlanSpecification testPlanConfiguration = TestPlanSpecification.builder()//
-			.uniqueIds("junit5:org.example.UserTests#fullname()")//
-			.build();
+		.uniqueIds("junit5:org.example.UserTests#fullname()")//
+		.build();
 
 		assertThat(testPlanConfiguration).isNotNull();
 	}

File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/TestExecutor.java
Patch:
@@ -59,9 +59,8 @@ private void executeAfterMethods(Class<?> testClass, Object testInstance) throws
 	}
 
 	private List<Method> findAnnotatedMethods(Class<?> testClass, Class<? extends Annotation> annotationType) {
-		return Arrays.stream(testClass.getDeclaredMethods())
-				.filter(method -> method.isAnnotationPresent(annotationType))
-				.collect(toList());
+		return Arrays.stream(testClass.getDeclaredMethods()).filter(
+			method -> method.isAnnotationPresent(annotationType)).collect(toList());
 	}
 
 }

File: junit5-engine/src/test/java/org/junit/gen5/engine/junit5/JavaTestDescriptorTests.java
Patch:
@@ -32,7 +32,8 @@ public class JavaTestDescriptorTests {
 
 	private static final String TEST_METHOD_STRING_BIGDECIMAL_ID = JavaTestDescriptorTests.class.getName()
 			+ "#test(java.lang.String, java.math.BigDecimal)";
-	private static final String TEST_METHOD_STRING_BIGDECIMAL_UID = JUNIT_5_ENGINE_ID + ":" + TEST_METHOD_STRING_BIGDECIMAL_ID;
+	private static final String TEST_METHOD_STRING_BIGDECIMAL_UID = JUNIT_5_ENGINE_ID + ":"
+			+ TEST_METHOD_STRING_BIGDECIMAL_ID;
 
 
 	@org.junit.Test
@@ -93,7 +94,6 @@ public void fromTestDescriptorIdForMethodWithParameters() throws Exception {
 		assertEquals(getClass().getDeclaredMethod("test", String.class, BigDecimal.class), descriptor.getTestMethod());
 	}
 
-
 	void test() {
 	}
 

File: junit-commons/src/main/java/org/junit/gen5/commons/util/ReflectionUtils.java
Patch:
@@ -22,11 +22,11 @@ public static <T extends Object> T newInstance(Class<T> clazz)
     return constructor.newInstance();
   }
 
-  public static <T extends Object> T invokeMethod(Method method, Object testInstance)
+  public static Object invokeMethod(Method method, Object testInstance)
       throws IllegalAccessException, InvocationTargetException {
     if (!method.isAccessible()) {
       method.setAccessible(true);
     }
-    return (T) method.invoke(testInstance);
+    return method.invoke(testInstance);
   }
 }
\ No newline at end of file

File: junit-engine-api/src/main/java/org/junit/gen5/engine/TestEngineRegistry.java
Patch:
@@ -1,7 +1,6 @@
 package org.junit.gen5.engine;
 
 import java.util.ServiceLoader;
-import java.util.function.Consumer;
 
 /**
  * @author Stefan Bechtold

File: junit-core/src/main/java/org/junit/core/Assumptions.java
Patch:
@@ -31,6 +31,7 @@ public static void assumingThat(boolean condition, Executable executable) {
 				executable.execute();
 			}
 			catch (Throwable e) {
+				// TODO Don't wrap Throwables such as OutOfMemoryError, etc.
 				throw new RuntimeException("Wrapped exception thrown from Executable", e);
 			}
 		}

File: junit-core/src/main/java/org/junit/core/Assertions.java
Patch:
@@ -1,7 +1,7 @@
 
-package org.junit.lambda.core;
+package org.junit.core;
 
-import org.junit.lambda.core.util.ObjectUtils;
+import org.junit.core.util.ObjectUtils;
 
 public final class Assertions {
 

File: junit-core/src/main/java/org/junit/core/Executable.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.junit.lambda.core;
+package org.junit.core;
 
 /**
  * @author Sam Brannen

File: junit-core/src/main/java/org/junit/core/TestDescriptor.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.junit.lambda.core;
+package org.junit.core;
 
 import java.util.List;
 

File: junit-core/src/main/java/org/junit/core/util/ObjectUtils.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.junit.lambda.core.util;
+package org.junit.core.util;
 
 import static java.util.Arrays.*;
 import static java.util.stream.Collectors.*;

File: junit-core/src/main/java/org/junit/core/util/Preconditions.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.junit.lambda.core.util;
+package org.junit.core.util;
 
 /**
  * @author Sam Brannen

File: junit-launch/src/main/java/org/junit/launch/TestPlan.java
Patch:
@@ -1,10 +1,10 @@
 
-package org.junit.lambda.launcher;
+package org.junit.launch;
 
 import java.nio.file.Path;
 import java.util.Map;
 
-import org.junit.lambda.core.TestDescriptor;
+import org.junit.core.TestDescriptor;
 
 /**
  * @author Sam Brannen

File: junit-launch/src/main/java/org/junit/launch/TestPlanListener.java
Patch:
@@ -1,4 +1,5 @@
-package org.junit.lambda.launcher;
+
+package org.junit.launch;
 
 /**
  * @author Sam Brannen

File: junit-launch/src/test/java/org/junit/launch/JUnit5Demo.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.junit.lambda.launcher;
+package org.junit.launch;
 
 import java.util.HashMap;
 

