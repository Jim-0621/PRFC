File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
Patch:
@@ -19,6 +19,7 @@
 import static com.github.tomakehurst.wiremock.common.Strings.isNullOrEmpty;
 import static org.xmlunit.diff.ComparisonType.*;
 
+import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.common.xml.Xml;
 import com.github.tomakehurst.wiremock.stubbing.SubEvent;
@@ -70,6 +71,7 @@ public EqualToXmlPattern(
     this(expectedValue, enablePlaceholders, null, null, null, ignoreOrderOfSameNode);
   }
 
+  @JsonCreator
   public EqualToXmlPattern(
       @JsonProperty("equalToXml") String expectedValue,
       @JsonProperty("enablePlaceholders") Boolean enablePlaceholders,

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockExtension.java
Patch:
@@ -267,7 +267,7 @@ private Options buildOptionsFromWireMockTestAnnotation(WireMockTest annotation)
   }
 
   private void stopServerIfRunning() {
-    if (wireMockServer.isRunning()) {
+    if (wireMockServer != null && wireMockServer.isRunning()) {
       wireMockServer.stop();
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -41,7 +41,6 @@
 import com.github.tomakehurst.wiremock.http.trafficlistener.DoNothingWiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.jetty.JettyHttpServerFactory;
-import com.github.tomakehurst.wiremock.jetty.QueuedThreadPoolFactory;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.security.BasicAuthenticator;
 import com.github.tomakehurst.wiremock.security.NoAuthenticator;
@@ -105,7 +104,7 @@ public class WireMockConfiguration implements Options {
   private String proxyHostHeader;
   private HttpServerFactory httpServerFactory = new JettyHttpServerFactory();
   private HttpClientFactory httpClientFactory = new ApacheHttpClientFactory();
-  private ThreadPoolFactory threadPoolFactory = new QueuedThreadPoolFactory();
+  private ThreadPoolFactory threadPoolFactory;
   private Integer jettyAcceptors;
   private Integer jettyAcceptQueueSize;
   private Integer jettyHeaderBufferSize;

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServerFactoryLoader.java
Patch:
@@ -22,11 +22,10 @@
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.extension.Extension;
 import com.github.tomakehurst.wiremock.extension.Extensions;
-import org.eclipse.jetty.util.Jetty;
-
 import java.util.List;
 import java.util.ServiceLoader;
 import java.util.function.Supplier;
+import org.eclipse.jetty.util.Jetty;
 
 public class HttpServerFactoryLoader {
 

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServerFactory.java
Patch:
@@ -23,7 +23,7 @@ public interface HttpServerFactory extends Extension {
 
   @Override
   default String getName() {
-    return "http-server-factory";
+    return "http-server-factory-" + getClass().getSimpleName();
   }
 
   HttpServer buildHttpServer(

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -103,6 +103,8 @@ enum ChunkedEncodingPolicy {
 
   HttpServerFactory httpServerFactory();
 
+  boolean hasDefaultHttpServerFactory();
+
   HttpClientFactory httpClientFactory();
 
   ThreadPoolFactory threadPoolFactory();

File: src/test/java/com/github/tomakehurst/wiremock/MultipartBodyMatchingAcceptanceTest.java
Patch:
@@ -192,7 +192,7 @@ void acceptsAMultipartRequestWithCamelcasedContentTypeInformation() throws Excep
     connection.setRequestProperty(
         "Content-Type", "Multipart/Form-Data; boundary=\"" + boundary + "\"");
     try (final OutputStream contentStream = connection.getOutputStream()) {
-      contentStream.write(getRequestBodyForCamelasedContentTypeInformationWithBoundary(boundary));
+      contentStream.write(getRequestBodyForCamelcasedContentTypeInformationWithBoundary(boundary));
     }
     assertThat(connection.getResponseCode(), is(200));
   }
@@ -208,7 +208,7 @@ private HttpURLConnection prepareUrlConnectionForCamelcasedContentTypeInformatio
     return connection;
   }
 
-  private byte[] getRequestBodyForCamelasedContentTypeInformationWithBoundary(String boundary) {
+  private byte[] getRequestBodyForCamelcasedContentTypeInformationWithBoundary(String boundary) {
     return ("--"
             + boundary
             + "\r\n"
@@ -245,7 +245,7 @@ void acceptsAMultipartRequestWithCamelcasedContentTypeInformationPrefixedWithSpa
     connection.setRequestProperty(
         "Content-Type", "    Multipart/Form-Data; boundary=\"" + boundary + "\"");
     try (final OutputStream contentStream = connection.getOutputStream()) {
-      contentStream.write(getRequestBodyForCamelasedContentTypeInformationWithBoundary(boundary));
+      contentStream.write(getRequestBodyForCamelcasedContentTypeInformationWithBoundary(boundary));
     }
     assertThat(connection.getResponseCode(), is(200));
   }

File: src/test/java/com/github/tomakehurst/wiremock/MultipartBodyMatchingAcceptanceTest.java
Patch:
@@ -192,7 +192,7 @@ void acceptsAMultipartRequestWithCamelcasedContentTypeInformation() throws Excep
     connection.setRequestProperty(
         "Content-Type", "Multipart/Form-Data; boundary=\"" + boundary + "\"");
     try (final OutputStream contentStream = connection.getOutputStream()) {
-      contentStream.write(getRequestBodyForCamelasedContentTypeInformationWithBoundary(boundary));
+      contentStream.write(getRequestBodyForCamelcasedContentTypeInformationWithBoundary(boundary));
     }
     assertThat(connection.getResponseCode(), is(200));
   }
@@ -208,7 +208,7 @@ private HttpURLConnection prepareUrlConnectionForCamelcasedContentTypeInformatio
     return connection;
   }
 
-  private byte[] getRequestBodyForCamelasedContentTypeInformationWithBoundary(String boundary) {
+  private byte[] getRequestBodyForCamelcasedContentTypeInformationWithBoundary(String boundary) {
     return ("--"
             + boundary
             + "\r\n"
@@ -245,7 +245,7 @@ void acceptsAMultipartRequestWithCamelcasedContentTypeInformationPrefixedWithSpa
     connection.setRequestProperty(
         "Content-Type", "    Multipart/Form-Data; boundary=\"" + boundary + "\"");
     try (final OutputStream contentStream = connection.getOutputStream()) {
-      contentStream.write(getRequestBodyForCamelasedContentTypeInformationWithBoundary(boundary));
+      contentStream.write(getRequestBodyForCamelcasedContentTypeInformationWithBoundary(boundary));
     }
     assertThat(connection.getResponseCode(), is(200));
   }

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -297,6 +297,7 @@ private void addPathParameterSectionWithSpacerIfPresent(
         String parameterName = entry.getKey();
         final String parameterValue = entry.getValue();
         final StringValuePattern pattern = pathParameters.get(parameterName);
+        if (pattern == null) continue;
         String operator = generateOperatorString(pattern, " = ");
         DiffLine<String> section =
             new DiffLine<>(

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -297,6 +297,7 @@ private void addPathParameterSectionWithSpacerIfPresent(
         String parameterName = entry.getKey();
         final String parameterValue = entry.getValue();
         final StringValuePattern pattern = pathParameters.get(parameterName);
+        if (pattern == null) continue;
         String operator = generateOperatorString(pattern, " = ");
         DiffLine<String> section =
             new DiffLine<>(

File: src/main/java/com/github/tomakehurst/wiremock/store/StoreEvent.java
Patch:
@@ -15,9 +15,8 @@
  */
 package com.github.tomakehurst.wiremock.store;
 
-import org.wiremock.annotations.Beta;
-
 import java.util.Objects;
+import org.wiremock.annotations.Beta;
 
 @Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class StoreEvent<K, V> {

File: src/main/java/com/github/tomakehurst/wiremock/store/StoreEventEmitter.java
Patch:
@@ -15,9 +15,8 @@
  */
 package com.github.tomakehurst.wiremock.store;
 
-import org.wiremock.annotations.Beta;
-
 import java.util.function.Consumer;
+import org.wiremock.annotations.Beta;
 
 @Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public interface StoreEventEmitter<K, V> {

File: src/main/java/com/github/tomakehurst/wiremock/matching/AbstractDateTimeMatchResult.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import java.time.LocalDateTime;
+import java.time.ZoneId;
 import java.time.ZonedDateTime;
 import java.time.temporal.ChronoUnit;
 import java.time.temporal.Temporal;
@@ -79,6 +80,8 @@ public double getDistance() {
       distance = calculateDistance(localExpected, localActual);
     } else if (isLocal && zonedActual != null) {
       distance = calculateDistance(localExpected, zonedActual.toLocalDateTime());
+    } else if (isZoned && localActual != null) {
+      distance = calculateDistance(zonedExpected, localActual.atZone(ZoneId.systemDefault()));
     }
 
     return distance;

File: src/main/java/com/github/tomakehurst/wiremock/common/NetworkAddressRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022-2023 Thomas Akehurst
+ * Copyright (C) 2022-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,13 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.Objects;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 public abstract class NetworkAddressRange {
 
   public static final NetworkAddressRange ALL = new All();
+  public static final Set<NetworkAddressRange> ALL_RANGES = Set.of(ALL);
 
   private static final Pattern SINGLE_IP =
       Pattern.compile("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplatedUrlPath.java
Patch:
@@ -18,7 +18,7 @@
 import static com.github.tomakehurst.wiremock.common.Strings.isNotEmpty;
 
 import com.github.tomakehurst.wiremock.common.Urls;
-import com.github.tomakehurst.wiremock.common.url.PathTemplate;
+import com.github.tomakehurst.wiremock.common.url.PathParams;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -27,10 +27,10 @@ public class TemplatedUrlPath extends LinkedHashMap<String, String> implements I
 
   private final String originalPath;
 
-  public TemplatedUrlPath(String url, PathTemplate pathTemplate) {
+  public TemplatedUrlPath(String url, PathParams pathParams) {
     this.originalPath = Urls.getPath(url);
     addAllPathSegments();
-    putAll(pathTemplate.parse(originalPath));
+    putAll(pathParams);
   }
 
   private void addAllPathSegments() {

File: src/main/java/com/github/tomakehurst/wiremock/http/client/ApacheHttpClientFactory.java
Patch:
@@ -29,15 +29,15 @@ public HttpClient buildHttpClient(
       boolean useSystemProperties) {
     final CloseableHttpClient apacheClient =
         com.github.tomakehurst.wiremock.http.HttpClientFactory.createClient(
-            options.getMaxProxyHttpClientConnections(),
+            options.getMaxHttpClientConnections(),
             options.proxyTimeout(),
             options.proxyVia(),
             options.httpsSettings().trustStore(),
             trustAllCertificates,
             trustedHosts,
             useSystemProperties,
             options.getProxyTargetRules(),
-            options.getDisableProxyClientConnectionReuse());
+            options.getDisableConnectionReuse());
 
     return new ApacheBackedHttpClient(apacheClient, options.shouldPreserveUserAgentProxyHeader());
   }

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -35,6 +35,7 @@
 import com.github.tomakehurst.wiremock.http.Cookie;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
+import com.github.tomakehurst.wiremock.http.RequestPathParamsDecorator;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.*;
 import java.util.function.Function;
@@ -244,6 +245,7 @@ public static RequestPattern everything() {
   }
 
   public MatchResult match(Request request, Map<String, RequestMatcherExtension> customMatchers) {
+    request = RequestPathParamsDecorator.decorate(request, this);
     final MatchResult standardMatchResult = matcher.match(request);
     if (standardMatchResult.isExactMatch() && customMatcherDefinition != null) {
       RequestMatcherExtension requestMatcher =

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePatternJsonDeserializer.java
Patch:
@@ -188,13 +188,14 @@ private EqualToXmlPattern deserializeEqualToXml(JsonNode rootNode) throws JsonMa
         fromNullableTextNode(rootNode.findValue("placeholderClosingDelimiterRegex"));
     Set<ComparisonType> exemptedComparisons =
         comparisonTypeSetFromArray(rootNode.findValue("exemptedComparisons"));
-
+    Boolean ignoreOrderOfSameNode = fromNullable(rootNode.findValue("ignoreOrderOfSameNode"));
     return new EqualToXmlPattern(
         operand.textValue(),
         enablePlaceholders,
         placeholderOpeningDelimiterRegex,
         placeholderClosingDelimiterRegex,
-        exemptedComparisons);
+        exemptedComparisons,
+        ignoreOrderOfSameNode);
   }
 
   private MatchesJsonPathPattern deserialiseMatchesJsonPathPattern(JsonNode rootNode)

File: src/main/java/com/github/tomakehurst/wiremock/store/StubMappingStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022-2023 Thomas Akehurst
+ * Copyright (C) 2022-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/FailingWebhookTest.java
Patch:
@@ -168,7 +168,7 @@ public void genericExceptionWhileMakingWebhookRequestAddsSubEvent() throws Excep
             "method", "POST",
             "scheme", "http",
             "body", "{ \"result\": \"ERROR\" }");
-    assertSubEvent(subEvents.get(0), SubEvent.INFO, expectedRequestEntries);
+    assertSubEvent(subEvents.get(0), WEBHOOK_SUB_EVENT_NAME, expectedRequestEntries);
     assertSubEvent(subEvents.get(1), SubEvent.ERROR, "Connection refused");
   }
 

File: src/test/java/com/github/tomakehurst/wiremock/WebhooksAcceptanceTest.java
Patch:
@@ -34,6 +34,7 @@
 
 public class WebhooksAcceptanceTest {
 
+  protected static final String WEBHOOK_SUB_EVENT_NAME = "WEBHOOK_REQUEST";
   protected CountDownLatch latch;
   protected TestNotifier testNotifier = new TestNotifier();
 

File: src/test/java/com/github/tomakehurst/wiremock/WebhooksAcceptanceViaPostServeActionTest.java
Patch:
@@ -159,9 +159,9 @@ public void firesASingleWebhookWhenRequested() throws Exception {
             "host", "localhost",
             "scheme", "http",
             "body", "{ \"result\": \"SUCCESS\" }");
-    assertSubEvent(subEvents.get(0), SubEvent.INFO, expectedRequestEntries);
+    assertSubEvent(subEvents.get(0), WEBHOOK_SUB_EVENT_NAME, expectedRequestEntries);
     Map<String, Object> expectedResponseEntries = Map.of("status", 200, "body", "");
-    assertSubEvent(subEvents.get(1), SubEvent.INFO, expectedResponseEntries);
+    assertSubEvent(subEvents.get(1), WEBHOOK_SUB_EVENT_NAME, expectedResponseEntries);
   }
 
   @Test
@@ -405,7 +405,7 @@ public void doesNotFireAWebhookWhenRequestedForDeniedTarget() {
             "method", "POST",
             "scheme", "http",
             "body", "{ \"result\": \"SUCCESS\" }");
-    assertSubEvent(subEvents.get(0), SubEvent.INFO, expectedRequestEntries);
+    assertSubEvent(subEvents.get(0), WEBHOOK_SUB_EVENT_NAME, expectedRequestEntries);
     assertSubEvent(subEvents.get(1), SubEvent.ERROR, expectedErrorMessage);
   }
 }

File: src/test/java/com/github/tomakehurst/wiremock/WebhooksAcceptanceViaServeEventTest.java
Patch:
@@ -174,9 +174,9 @@ public void firesASingleWebhookWhenRequested() throws Exception {
             "host", "localhost",
             "scheme", "http",
             "body", "{ \"result\": \"SUCCESS\" }");
-    assertSubEvent(subEvents.get(0), SubEvent.INFO, expectedRequestEntries);
+    assertSubEvent(subEvents.get(0), WEBHOOK_SUB_EVENT_NAME, expectedRequestEntries);
     Map<String, Object> expectedResponseEntries = Map.of("status", 200, "body", "");
-    assertSubEvent(subEvents.get(1), SubEvent.INFO, expectedResponseEntries);
+    assertSubEvent(subEvents.get(1), WEBHOOK_SUB_EVENT_NAME, expectedResponseEntries);
   }
 
   @Test
@@ -482,7 +482,7 @@ public void doesNotFireAWebhookWhenRequestedForDeniedTarget() {
             "method", "POST",
             "scheme", "http",
             "body", "{ \"result\": \"SUCCESS\" }");
-    assertSubEvent(subEvents.get(0), SubEvent.INFO, expectedRequestEntries);
+    assertSubEvent(subEvents.get(0), WEBHOOK_SUB_EVENT_NAME, expectedRequestEntries);
     assertSubEvent(subEvents.get(1), SubEvent.ERROR, expectedErrorMessage);
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/NetworkAddressRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022-2023 Thomas Akehurst
+ * Copyright (C) 2022-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,13 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.Objects;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 public abstract class NetworkAddressRange {
 
   public static final NetworkAddressRange ALL = new All();
+  public static final Set<NetworkAddressRange> ALL_RANGES = Set.of(ALL);
 
   private static final Pattern SINGLE_IP =
       Pattern.compile("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/TestNotifier.java
Patch:
@@ -66,11 +66,11 @@ public void error(String message, Throwable t) {
   }
 
   public List<String> getInfoMessages() {
-    return info;
+    return List.copyOf(info);
   }
 
   public List<String> getErrorMessages() {
-    return error;
+    return List.copyOf(error);
   }
 
   public void reset() {

File: src/main/java/com/github/tomakehurst/wiremock/http/client/ApacheBackedHttpClient.java
Patch:
@@ -88,8 +88,7 @@ private static ClassicHttpRequest createApacheRequest(
       requestBuilder.setEntity(applyGzipWrapperIfRequired(request, entity));
     }
 
-    ClassicHttpRequest apacheRequest = requestBuilder.build();
-    return apacheRequest;
+    return requestBuilder.build();
   }
 
   private static HttpEntity applyGzipWrapperIfRequired(

File: src/main/java/com/github/tomakehurst/wiremock/http/client/ApacheHttpClientFactory.java
Patch:
@@ -37,7 +37,7 @@ public HttpClient buildHttpClient(
             trustedHosts,
             useSystemProperties,
             options.getProxyTargetRules(),
-            true);
+            options.getDisableConnectionReuse());
 
     return new ApacheBackedHttpClient(apacheClient, options.shouldPreserveUserAgentProxyHeader());
   }

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -47,6 +47,7 @@ enum ChunkedEncodingPolicy {
   int DEFAULT_TIMEOUT = 300_000;
   int DEFAULT_CONTAINER_THREADS = 25;
   String DEFAULT_BIND_ADDRESS = "0.0.0.0";
+  Long DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES = 1000L;
 
   int portNumber();
 

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -143,7 +143,7 @@ public class WireMockConfiguration implements Options {
   private boolean templatingEnabled = true;
   private boolean globalTemplating = false;
   private Set<String> permittedSystemKeys = null;
-  private Long maxTemplateCacheEntries = null;
+  private Long maxTemplateCacheEntries = DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES;
   private boolean templateEscapingDisabled = true;
 
   private Set<String> supportedProxyEncodings = null;

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -988,8 +988,8 @@ public boolean getResponseTemplatingGlobal() {
   @Override
   public Long getMaxTemplateCacheEntries() {
     return optionSet.has(MAX_TEMPLATE_CACHE_ENTRIES)
-        ? Long.valueOf(optionSet.valueOf(MAX_TEMPLATE_CACHE_ENTRIES).toString())
-        : null;
+        ? Long.parseLong(optionSet.valueOf(MAX_TEMPLATE_CACHE_ENTRIES).toString())
+        : DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES;
   }
 
   @SuppressWarnings("unchecked")

File: src/main/java/com/github/tomakehurst/wiremock/store/DefaultStores.java
Patch:
@@ -76,7 +76,6 @@ public RecorderStateStore getRecorderStateStore() {
   @Override
   public BlobStore getBlobStore(String name) {
     final FileSource child = fileRoot.child(name);
-    child.createIfNecessary();
     return new FileSourceBlobStore(child);
   }
 
@@ -92,7 +91,6 @@ public ObjectStore getObjectStore(String name, PersistenceType persistenceTypeHi
       return store;
     } else {
       final FileSource child = fileRoot.child(name);
-      child.createIfNecessary();
       return new FileSourceJsonObjectStore(child);
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/store/DefaultStores.java
Patch:
@@ -76,7 +76,6 @@ public RecorderStateStore getRecorderStateStore() {
   @Override
   public BlobStore getBlobStore(String name) {
     final FileSource child = fileRoot.child(name);
-    child.createIfNecessary();
     return new FileSourceBlobStore(child);
   }
 
@@ -92,7 +91,6 @@ public ObjectStore getObjectStore(String name, PersistenceType persistenceTypeHi
       return store;
     } else {
       final FileSource child = fileRoot.child(name);
-      child.createIfNecessary();
       return new FileSourceJsonObjectStore(child);
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -292,7 +292,7 @@ private void addPathParameterSectionWithSpacerIfPresent(
 
       for (Map.Entry<String, String> entry : requestPathParameterValues.entrySet()) {
         String parameterName = entry.getKey();
-        final String parameterValue = parameterName + ": " + entry.getValue();
+        final String parameterValue = entry.getValue();
         final StringValuePattern pattern = pathParameters.get(parameterName);
         String operator = generateOperatorString(pattern, " = ");
         DiffLine<String> section =

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -292,7 +292,7 @@ private void addPathParameterSectionWithSpacerIfPresent(
 
       for (Map.Entry<String, String> entry : requestPathParameterValues.entrySet()) {
         String parameterName = entry.getKey();
-        final String parameterValue = parameterName + ": " + entry.getValue();
+        final String parameterValue = entry.getValue();
         final StringValuePattern pattern = pathParameters.get(parameterName);
         String operator = generateOperatorString(pattern, " = ");
         DiffLine<String> section =

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -47,6 +47,7 @@ enum ChunkedEncodingPolicy {
   int DEFAULT_TIMEOUT = 300_000;
   int DEFAULT_CONTAINER_THREADS = 25;
   String DEFAULT_BIND_ADDRESS = "0.0.0.0";
+  Long DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES = 1000L;
 
   int portNumber();
 

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -143,7 +143,7 @@ public class WireMockConfiguration implements Options {
   private boolean templatingEnabled = true;
   private boolean globalTemplating = false;
   private Set<String> permittedSystemKeys = null;
-  private Long maxTemplateCacheEntries = null;
+  private Long maxTemplateCacheEntries = DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES;
   private boolean templateEscapingDisabled = true;
 
   private Set<String> supportedProxyEncodings = null;

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -989,7 +989,7 @@ public boolean getResponseTemplatingGlobal() {
   public Long getMaxTemplateCacheEntries() {
     return optionSet.has(MAX_TEMPLATE_CACHE_ENTRIES)
         ? Long.parseLong(optionSet.valueOf(MAX_TEMPLATE_CACHE_ENTRIES).toString())
-        : 1000;
+        : DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES;
   }
 
   @SuppressWarnings("unchecked")

File: src/test/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptionsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KESTORE_PASSWORD;
 import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KEYSTORE_PATH;
+import static com.github.tomakehurst.wiremock.core.Options.DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES;
 import static com.github.tomakehurst.wiremock.matching.MockRequest.mockRequest;
 import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.matchesMultiLine;
 import static java.util.Arrays.asList;
@@ -465,7 +466,7 @@ public void configuresMaxTemplateCacheEntriesIfSpecified() {
   public void maxTemplateCacheEntriesDefaultsWhenNotSpecified() {
     CommandLineOptions options = new CommandLineOptions();
 
-    assertThat(options.getMaxTemplateCacheEntries(), is(1000L));
+    assertThat(options.getMaxTemplateCacheEntries(), is(DEFAULT_MAX_TEMPLATE_CACHE_ENTRIES));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -988,8 +988,8 @@ public boolean getResponseTemplatingGlobal() {
   @Override
   public Long getMaxTemplateCacheEntries() {
     return optionSet.has(MAX_TEMPLATE_CACHE_ENTRIES)
-        ? Long.valueOf(optionSet.valueOf(MAX_TEMPLATE_CACHE_ENTRIES).toString())
-        : null;
+        ? Long.parseLong(optionSet.valueOf(MAX_TEMPLATE_CACHE_ENTRIES).toString())
+        : 1000;
   }
 
   @SuppressWarnings("unchecked")

File: src/main/java/com/github/tomakehurst/wiremock/matching/AbstractDateTimeMatchResult.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import java.time.LocalDateTime;
+import java.time.ZoneId;
 import java.time.ZonedDateTime;
 import java.time.temporal.ChronoUnit;
 import java.time.temporal.Temporal;
@@ -79,6 +80,8 @@ public double getDistance() {
       distance = calculateDistance(localExpected, localActual);
     } else if (isLocal && zonedActual != null) {
       distance = calculateDistance(localExpected, zonedActual.toLocalDateTime());
+    } else if (isZoned && localActual != null) {
+      distance = calculateDistance(zonedExpected, localActual.atZone(ZoneId.systemDefault()));
     }
 
     return distance;

File: src/test/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformerTest.java
Patch:
@@ -1136,7 +1136,8 @@ void valHelperCanAssignValueToNamedVariable() {
         is("other value for myVar"));
     assertThat(transform("{{val 12 assign='myVar'}}{{myVar}}"), is("12"));
     assertThat(transform("{{val (array 1 2 3) assign='myVar'}}{{myVar}}"), is("[1, 2, 3]"));
-    assertThat(transform("{{val (array 1 2 3) assign='myVar'}}{{join '*' myVar}}"), is("1*2*3"));
+    assertThat(
+        transform("{{val (array 1 2 3) assign='myVar'}}{{arrayJoin '*' myVar}}"), is("1*2*3"));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformerTest.java
Patch:
@@ -1136,7 +1136,8 @@ void valHelperCanAssignValueToNamedVariable() {
         is("other value for myVar"));
     assertThat(transform("{{val 12 assign='myVar'}}{{myVar}}"), is("12"));
     assertThat(transform("{{val (array 1 2 3) assign='myVar'}}{{myVar}}"), is("[1, 2, 3]"));
-    assertThat(transform("{{val (array 1 2 3) assign='myVar'}}{{join '*' myVar}}"), is("1*2*3"));
+    assertThat(
+        transform("{{val (array 1 2 3) assign='myVar'}}{{arrayJoin '*' myVar}}"), is("1*2*3"));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletRequestAdapter.java
Patch:
@@ -289,7 +289,7 @@ public Collection<Part> getParts() {
   @Override
   public boolean isMultipart() {
     String header = getHeader("Content-Type");
-    return (header != null && header.contains("multipart/"));
+    return (header != null && header.matches("(?i)^\\s*multipart/.*"));
   }
 
   @Override

File: src/main/java/com/github/tomakehurst/wiremock/common/AbstractFileSource.java
Patch:
@@ -54,10 +54,9 @@ public TextFile getTextFileNamed(String name) {
 
   @Override
   public void createIfNecessary() {
-    assertWritable();
     if (rootDirectory.exists() && rootDirectory.isFile()) {
       throw new IllegalStateException(rootDirectory + " already exists and is a file");
-    } else if (!rootDirectory.exists()) {
+    } else if (!rootDirectory.exists() && !readOnly()) {
       rootDirectory.mkdirs();
     }
   }

File: src/test/java/com/github/tomakehurst/wiremock/admin/ConversionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
-public class ConversionsTest {
+class ConversionsTest {
 
   @Test
   void mapsValidFirstParameterValueAsDate() {

File: src/test/java/com/github/tomakehurst/wiremock/admin/tasks/HealthCheckTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2023 Thomas Akehurst
+ * Copyright (C) 2023-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ class HealthCheckTaskTest {
   private final HealthCheckTask healthCheckTask = new HealthCheckTask();
 
   @Test
-  public void healthy() {
+  void healthy() {
     ResponseDefinition response =
         healthCheckTask.execute(mockAdmin, ServeEvent.of(mockRequest), PathParams.empty());
 

File: src/test/java/com/github/tomakehurst/wiremock/archunit/JUnit4DetectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -64,7 +64,7 @@ class JUnit4DetectionTest {
       describe(
           "exclude WireMockJUnitRuleTest",
           clazz ->
-              !excluded.stream().anyMatch(excl -> clazz.getName().contains(excl.getSimpleName())));
+              excluded.stream().noneMatch(excl -> clazz.getName().contains(excl.getSimpleName())));
 
   private static final String REASON = "we want to migrate to JUnit Jupiter";
 

File: src/test/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,10 +22,10 @@
 import java.security.KeyStore;
 import org.junit.jupiter.api.Test;
 
-public class KeyStoreSourceTest {
+class KeyStoreSourceTest {
 
   @Test
-  public void loadsAPasswordProtectedJksKeyStore() throws Exception {
+  void loadsAPasswordProtectedJksKeyStore() throws Exception {
     KeyStoreSource keyStoreSource =
         new ReadOnlyFileOrClasspathKeyStoreSource(
             "test-keystore-pwd", "jks", "nondefaultpass".toCharArray());

File: src/test/java/com/github/tomakehurst/wiremock/NetworkTrafficListenerAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 
 public class NetworkTrafficListenerAcceptanceTest extends AcceptanceTestBase {
-  private static CollectingNetworkTrafficListener networkTrafficListener =
+  private static final CollectingNetworkTrafficListener networkTrafficListener =
       new CollectingNetworkTrafficListener();
 
   @BeforeAll
@@ -33,7 +33,7 @@ public static void setupServer() {
   }
 
   @Test
-  public void capturesRawTraffic() {
+  void capturesRawTraffic() {
     testClient.get("/a/non-registered/resource");
 
     assertThat(

File: src/test/java/com/github/tomakehurst/wiremock/NetworkTrafficListenerAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 
 public class NetworkTrafficListenerAcceptanceTest extends AcceptanceTestBase {
-  private static CollectingNetworkTrafficListener networkTrafficListener =
+  private static final CollectingNetworkTrafficListener networkTrafficListener =
       new CollectingNetworkTrafficListener();
 
   @BeforeAll
@@ -33,7 +33,7 @@ public static void setupServer() {
   }
 
   @Test
-  public void capturesRawTraffic() {
+  void capturesRawTraffic() {
     testClient.get("/a/non-registered/resource");
 
     assertThat(

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -461,9 +461,11 @@ public void removeStubMapping(MappingBuilder mappingBuilder) {
   public void removeStubMapping(StubMapping stubMapping) {
     admin.removeStubMapping(stubMapping);
   }
+
   public void removeStubMapping(UUID id) {
     admin.removeStubMapping(id);
   }
+
   public ListStubMappingsResult allStubMappings() {
     return admin.listAllStubMappings();
   }

File: src/main/java/com/github/tomakehurst/wiremock/common/url/PathTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -86,7 +86,7 @@ public String render(PathParams pathParams) {
   }
 
   public String withoutVariables() {
-    return templateString.replaceAll(SPECIAL_SYMBOL_REGEX.pattern(), "");
+    return templateString.replaceAll(SPECIAL_SYMBOL_REGEX.pattern(), "_");
   }
 
   private static String stripFormatCharacters(String parameter) {

File: src/main/java/com/github/tomakehurst/wiremock/extension/ExtensionDeclarations.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.github.tomakehurst.wiremock.extension;
 
-import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static java.util.Arrays.asList;
 
 import java.util.*;
@@ -77,7 +76,7 @@ public List<ExtensionFactory> getFactories() {
 
   private boolean removeWebhook(String className) {
     if (className.equals(Webhooks.class.getName())) {
-      notifier().info(WEBHOOK_MESSAGE);
+      System.out.println(WEBHOOK_MESSAGE);
       return false;
     }
     return true;

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/HandlebarsOptimizedTemplate.java
Patch:
@@ -19,6 +19,7 @@
 import com.github.jknack.handlebars.Handlebars;
 import com.github.jknack.handlebars.Template;
 import com.github.tomakehurst.wiremock.common.Exceptions;
+import com.github.tomakehurst.wiremock.common.RequestCache;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.io.Writer;
@@ -60,8 +61,8 @@ private static Template uncheckedCompileTemplate(Handlebars handlebars, String t
   }
 
   public String apply(Object contextData) {
-    final RenderCache renderCache = new RenderCache();
-    Context context = Context.newBuilder(contextData).combine("renderCache", renderCache).build();
+    final RequestCache requestCache = RequestCache.getCurrent();
+    Context context = Context.newBuilder(contextData).combine("requestCache", requestCache).build();
 
     return startContent + applyTemplate(context) + endContent;
   }

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2023 Thomas Akehurst
+ * Copyright (C) 2014-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.extension.Extension;
 
+@FunctionalInterface
 public interface HttpServerFactory extends Extension {
 
   @Override

File: src/main/java/com/github/tomakehurst/wiremock/http/client/HttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2023 Thomas Akehurst
+ * Copyright (C) 2023-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@ public interface HttpClient {
   List<String> FORBIDDEN_REQUEST_HEADERS =
       List.of(TRANSFER_ENCODING, CONTENT_LENGTH, "connection", USER_AGENT);
   String HOST_HEADER = "host";
+  String ACCEPT_ENCODING_HEADER = "accept-encoding";
 
   Response execute(Request request) throws IOException;
 }

File: src/main/java/com/github/tomakehurst/wiremock/jetty/JettyHttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2022 Thomas Akehurst
+ * Copyright (C) 2014-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/NotFoundHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2022 Thomas Akehurst
+ * Copyright (C) 2017-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 

File: src/main/java/com/github/tomakehurst/wiremock/junit/DslWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021-2022 Thomas Akehurst
+ * Copyright (C) 2021-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/junit/Stubbing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2021 Thomas Akehurst
+ * Copyright (C) 2013-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchResult.java
Patch:
@@ -16,12 +16,12 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import static java.util.Arrays.asList;
-import static java.util.stream.Collectors.toUnmodifiableList;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.stubbing.SubEvent;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -44,7 +44,7 @@ protected void appendSubEvent(SubEvent subEvent) {
   }
 
   public List<SubEvent> getSubEvents() {
-    return subEvents.stream().collect(toUnmodifiableList());
+    return new ArrayList<>(subEvents);
   }
 
   @JsonCreator

File: src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -711,7 +711,7 @@ public void returnsBadEntityStatusOnEqualToJsonOperand() {
         allOf(
             containsString(
                 "Unexpected character ('(' (code 40)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')"),
-            containsString("line: 1, column: 2")));
+            containsString("line: 1, column: 1")));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/RemoveStubMappingAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/common/url/PathTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -216,7 +216,7 @@ public void checkEquality() {
   @Test
   void returnsPathTemplateWithVariablesStrippedOut() {
     PathTemplate pathTemplate = new PathTemplate("/one/{first}/two/{second}/three");
-    assertThat(pathTemplate.withoutVariables(), is("/one//two//three"));
+    assertThat(pathTemplate.withoutVariables(), is("/one/_/two/_/three"));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsJsonPathHelperTest.java
Patch:
@@ -340,7 +340,7 @@ public void returnsCorrectResultWhenDifferentExpressionsUsedOnSameDocument() thr
   }
 
   @Test
-  public void helperCanBeCalledDirectlyWithoutSupplyingRenderCache() throws Exception {
+  public void helperCanBeCalledDirectlyWithoutSupplyingRequestCache() throws Exception {
     Context context = Context.newBuilder(null).build();
     Options options =
         new Options(

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/WarDeploymentAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.testsupport.TestFiles.sampleWarRootDir;

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/WarDeploymentParameterAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2021 Thomas Akehurst
+ * Copyright (C) 2014-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.testsupport.TestFiles.sampleWarRootDir;

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/archunit/UnusedCodeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021-2023 Thomas Akehurst
+ * Copyright (C) 2021-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.archunit;
+package com.github.tomakehurst.wiremock.jetty11.archunit;
 
 import static com.tngtech.archunit.base.DescribedPredicate.describe;
 import static com.tngtech.archunit.base.DescribedPredicate.not;

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/servlet/AltHttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.servlet;
+package com.github.tomakehurst.wiremock.jetty11.servlet;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.core.WireMockApp.ADMIN_CONTEXT_ROOT;
@@ -23,6 +23,7 @@
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.http.*;
+import com.github.tomakehurst.wiremock.servlet.WireMockHandlerDispatchingServlet;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/servlet/AlternativeServletContainerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.servlet;
+package com.github.tomakehurst.wiremock.jetty11.servlet;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPatternTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -320,7 +320,7 @@ void reportsErrorFromSubMatcher() {
             .match("<something>{ bad json</something>");
     checkJsonError(
         matchResult,
-        "Unexpected character ('b' (code 98)): was expecting double-quote to start field name\n at [Source: (String)\"{ bad json\"; line: 1, column: 4]");
+        "Unexpected character ('b' (code 98)): was expecting double-quote to start field name\n at [Source: (String)\"{ bad json\"; line: 1, column: 3]");
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MockRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Arrays.asList;
 
+import com.github.tomakehurst.wiremock.MultipartParserLoader;
 import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.http.*;
-import com.github.tomakehurst.wiremock.jetty11.MultipartParser;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import java.net.URI;
 import java.util.*;
@@ -292,7 +292,7 @@ public MockRequest multipartBody(String body) {
         contentTypeHeader.isPresent()
             ? contentTypeHeader.firstValue()
             : "multipart/form-data; boundary=BOUNDARY";
-    this.multiparts = MultipartParser.parse(bytesFromString(body), contentType);
+    this.multiparts = MultipartParserLoader.parts(bytesFromString(body), contentType);
 
     return this;
   }

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/CompositeNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021-2023 Thomas Akehurst
+ * Copyright (C) 2021-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/ConstantHttpHeaderWebhookTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021-2023 Thomas Akehurst
+ * Copyright (C) 2021-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/GlobalStubMappingTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/MockHttpResponder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/MockRequestBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2023 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/MockWireMockServices.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2023 Thomas Akehurst
+ * Copyright (C) 2023-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/MultipartBody.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/Network.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2021 Thomas Akehurst
+ * Copyright (C) 2015-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/NoFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/NonGlobalStubMappingTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/ServeEventChecks.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2023 Thomas Akehurst
+ * Copyright (C) 2023-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/TestHttpHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/TestNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/ThrowingWebhookTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2023 Thomas Akehurst
+ * Copyright (C) 2023-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/testFixtures/java/com/github/tomakehurst/wiremock/testsupport/WireMockResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2023 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -711,7 +711,7 @@ public void returnsBadEntityStatusOnEqualToJsonOperand() {
         allOf(
             containsString(
                 "Unexpected character ('(' (code 40)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')"),
-            containsString("line: 1, column: 2")));
+            containsString("line: 1, column: 1")));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPatternTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -320,7 +320,7 @@ void reportsErrorFromSubMatcher() {
             .match("<something>{ bad json</something>");
     checkJsonError(
         matchResult,
-        "Unexpected character ('b' (code 98)): was expecting double-quote to start field name\n at [Source: (String)\"{ bad json\"; line: 1, column: 4]");
+        "Unexpected character ('b' (code 98)): was expecting double-quote to start field name\n at [Source: (String)\"{ bad json\"; line: 1, column: 3]");
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPatternTest.java
Patch:
@@ -132,7 +132,7 @@ public void providesEventMessageWhenJsonMatchFailsDueToInvalidJson() {
     checkMessage(
         match,
         WARNING,
-        "Warning: JSON path expression '$.something' failed to match document 'Not a JSON document' because of error 'Expected to find an object with property ['something'] in path $ but found 'java.lang.String'. This is not a json object according to the JsonProvider: 'com.jayway.jsonpath.spi.json.JsonSmartJsonProvider'.'");
+        "Warning: JSON path expression failed to match document 'Not a JSON document' because of error 'Expected to find an object with property ['something'] in path $ but found 'java.lang.String'. This is not a json object according to the JsonProvider: 'com.jayway.jsonpath.spi.json.JsonSmartJsonProvider'.'");
   }
 
   private static void checkWarningMessageAndEvent(
@@ -150,7 +150,7 @@ public void providesEventMessageWhenJsonMatchFailsDueToMissingAttributeJson() {
     checkMessage(
         matchResult,
         WARNING,
-        "Warning: JSON path expression '$.something' failed to match document '{ \"nothing\": 1 }' because of error 'No results for path: $['something']'");
+        "Warning: JSON path expression failed to match document '{ \"nothing\": 1 }' because of error 'No results for path: $['something']'");
   }
 
   @Test
@@ -164,7 +164,7 @@ void notifiesWhenMatchingBeingSkippedDueToContentProbablyBeingXml() {
     checkWarningMessageAndEvent(
         notifier,
         matchResult,
-        "Warning: JSON path expression '$.something' failed to match document '<xml-stuff />' because it's not JSON but probably XML");
+        "Warning: JSON path expression failed to match document '<xml-stuff />' because it's not JSON but probably XML");
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/ServeEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2023 Thomas Akehurst
+ * Copyright (C) 2016-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Json.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2023 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ protected ObjectMapper initialValue() {
           objectMapper.configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, true);
           objectMapper.registerModule(new JavaTimeModule());
           objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+          objectMapper.enable(JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION);
           return objectMapper;
         }
       };

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenario.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2023 Thomas Akehurst
+ * Copyright (C) 2012-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -86,7 +86,7 @@ public Set<StubMapping> getMappings() {
   Scenario setState(String newState) {
     if (!getPossibleStates().contains(newState)) {
       throw new InvalidInputException(
-          Errors.single(11, "Scenario my-scenario does not support state " + newState));
+          Errors.single(11, "Scenario " + id + " does not support state " + newState));
     }
 
     return new Scenario(id, newState, stubMappings);

File: src/main/java/com/github/tomakehurst/wiremock/common/Json.java
Patch:
@@ -27,6 +27,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import java.io.IOException;
 import java.util.Map;
@@ -44,6 +45,7 @@ public static class PublicView {}
         @Override
         protected ObjectMapper initialValue() {
           ObjectMapper objectMapper = new ObjectMapper();
+          objectMapper.setNodeFactory(new JsonNodeFactory(true));
           objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
           objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
           objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);

File: src/test/java/com/github/tomakehurst/wiremock/MappingsAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2024 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -149,7 +149,8 @@ public void readsJsonMapping() {
     assertThat(response.statusCode(), is(200));
     assertThat(
         response.content(),
-        is("{\"bignumber\":1234567890.12,\"array\":[1,2,3],\"key\":\"value\"}"));
+        is(
+            "{\"bignumber\":1234567890.12,\"integer_as_float\":2.0,\"array\":[1,2,3],\"integer\":2,\"key\":\"value\"}"));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenario.java
Patch:
@@ -86,7 +86,7 @@ public Set<StubMapping> getMappings() {
   Scenario setState(String newState) {
     if (!getPossibleStates().contains(newState)) {
       throw new InvalidInputException(
-          Errors.single(11, "Scenario my-scenario does not support state " + newState));
+          Errors.single(11, "Scenario " + id + " does not support state " + newState));
     }
 
     return new Scenario(id, newState, stubMappings);

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/JsonTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 import com.fasterxml.jackson.databind.JsonNode;

File: src/test/java/com/github/tomakehurst/wiremock/admin/tasks/HealthCheckTaskTest.java
Patch:
@@ -46,5 +46,6 @@ public void healthy() {
         response.getStatusMessage(),
         equalTo(response.getReponseBody().asJson().get("message").asText()));
     assertThat(response.getReponseBody().asJson().get("status").asText(), is("healthy"));
+    assertThat(response.getReponseBody().asJson().get("version").asText(), is("X.X.X"));
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,13 +16,15 @@
 package com.github.tomakehurst.wiremock.junit5;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 @ExtendWith(WireMockExtension.class)
 public @interface WireMockTest {
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -113,6 +113,8 @@ private void initDefaultRoutes(Router router) {
     router.add(GET, "/certs/wiremock-ca.crt", new GetCaCertTask());
 
     router.add(GET, "/health", new HealthCheckTask());
+
+    router.add(GET, "/version", new GetVersionTask());
   }
 
   protected void initAdditionalRoutes(Router routeBuilder) {

File: src/main/java/com/github/tomakehurst/wiremock/common/ContentTypes.java
Patch:
@@ -38,6 +38,7 @@ private ContentTypes() {}
   public static final String OCTET_STREAM = "application/octet-stream";
   public static final String LOCATION = "Location";
   public static final String AUTHORIZATION = "Authorization";
+  public static final String ACCEPT = "Accept";
   public static final String COOKIE = "Cookie";
   public static final String APPLICATION_JSON = "application/json";
 

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -134,7 +134,7 @@ public class WireMockConfiguration implements Options {
 
   private Limit responseBodySizeLimit = UNLIMITED;
 
-  private NetworkAddressRules proxyTargetRules = DefaultNetworkAddressRules.ALLOW_ALL;
+  private NetworkAddressRules proxyTargetRules = NetworkAddressRules.ALLOW_ALL;
 
   private int proxyTimeout = DEFAULT_TIMEOUT;
 

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -23,7 +23,6 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.apache.commons.lang3.StringUtils.isEmpty;
 
-import com.github.tomakehurst.wiremock.common.DefaultNetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
@@ -241,7 +240,7 @@ public static CloseableHttpClient createClient(int maxConnections, int timeoutMi
         NO_PROXY,
         NO_STORE,
         true,
-        DefaultNetworkAddressRules.ALLOW_ALL);
+        NetworkAddressRules.ALLOW_ALL);
   }
 
   public static CloseableHttpClient createClient(int timeoutMilliseconds) {
@@ -255,7 +254,7 @@ public static CloseableHttpClient createClient(ProxySettings proxySettings) {
         proxySettings,
         NO_STORE,
         true,
-        DefaultNetworkAddressRules.ALLOW_ALL);
+        NetworkAddressRules.ALLOW_ALL);
   }
 
   public static CloseableHttpClient createClient() {

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WarConfiguration.java
Patch:
@@ -238,7 +238,7 @@ public DataTruncationSettings getDataTruncationSettings() {
 
   @Override
   public NetworkAddressRules getProxyTargetRules() {
-    return DefaultNetworkAddressRules.ALLOW_ALL;
+    return NetworkAddressRules.ALLOW_ALL;
   }
 
   @Override

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -904,7 +904,7 @@ public DataTruncationSettings getDataTruncationSettings() {
 
   @Override
   public NetworkAddressRules getProxyTargetRules() {
-    DefaultNetworkAddressRules.Builder builder = DefaultNetworkAddressRules.builder();
+    DefaultNetworkAddressRules.Builder builder = NetworkAddressRules.builder();
     if (optionSet.has(ALLOW_PROXY_TARGETS)) {
       Arrays.stream(((String) optionSet.valueOf(ALLOW_PROXY_TARGETS)).split(","))
           .forEach(builder::allow);

File: src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java
Patch:
@@ -22,7 +22,7 @@
 import static java.util.Collections.emptyList;
 
 import com.github.tomakehurst.wiremock.WireMockServer;
-import com.github.tomakehurst.wiremock.common.DefaultNetworkAddressRules;
+import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.crypto.CertificateSpecification;
 import com.github.tomakehurst.wiremock.crypto.InMemoryKeyStore;
@@ -94,7 +94,7 @@ public void startServerAndBuildClient(
             /* trustSelfSignedCertificates= */ false,
             trustedHosts,
             false,
-            DefaultNetworkAddressRules.ALLOW_ALL);
+            NetworkAddressRules.ALLOW_ALL);
   }
 
   @AfterEach

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.github.tomakehurst.wiremock.http;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
-import static com.github.tomakehurst.wiremock.common.DefaultNetworkAddressRules.ALLOW_ALL;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.crypto.X509CertificateVersion.V3;
 import static com.github.tomakehurst.wiremock.matching.MockRequest.mockRequest;
@@ -30,6 +29,7 @@
 import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.spy;
 
+import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.crypto.CertificateSpecification;
@@ -391,7 +391,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
                 true,
                 Collections.emptyList(),
                 true,
-                ALLOW_ALL));
+                NetworkAddressRules.ALLOW_ALL));
     HttpClient reverseProxyClient = new ApacheBackedHttpClient(reverseProxyApacheClient);
 
     forwardProxyApacheClient =
@@ -404,7 +404,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
                 trustAllProxyTargets,
                 Collections.emptyList(),
                 false,
-                ALLOW_ALL));
+                NetworkAddressRules.ALLOW_ALL));
     HttpClient forwardProxyClient = new ApacheBackedHttpClient(forwardProxyApacheClient);
 
     return new ProxyResponseRenderer(

File: src/main/java/com/github/tomakehurst/wiremock/common/DateTimeTruncation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@ public enum DateTimeTruncation {
   }
 
   public ZonedDateTime truncate(ZonedDateTime input) {
-    return fn.apply(input);
+    return input != null ? fn.apply(input) : null;
   }
 
   public Date truncate(Date input) {

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -34,7 +34,7 @@ public class AdminRoutes {
   private final Stores stores;
 
   public static AdminRoutes forClient() {
-    return new AdminRoutes(Collections.<AdminApiExtension>emptyList(), null);
+    return new AdminRoutes(Collections.emptyList(), null);
   }
 
   public static AdminRoutes forServer(Iterable<AdminApiExtension> apiExtensions, Stores stores) {

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -183,7 +183,7 @@ public static CloseableHttpClient createClient(
         proxySettings,
         trustStoreSettings,
         true,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         useSystemProperties,
         networkAddressRules);
   }

File: src/main/java/com/github/tomakehurst/wiremock/http/QueryParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public static QueryParameter queryParam(String key, String... values) {
   }
 
   public static QueryParameter absent(String key) {
-    return new QueryParameter(key, Collections.<String>emptyList());
+    return new QueryParameter(key, Collections.emptyList());
   }
 
   @JsonIgnore

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseDefinition.java
Patch:
@@ -178,7 +178,7 @@ public ResponseDefinition(final int statusCode, final String bodyContent) {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }
@@ -197,7 +197,7 @@ public ResponseDefinition(final int statusCode, final byte[] bodyContent) {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }
@@ -216,7 +216,7 @@ public ResponseDefinition() {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockExtension.java
Patch:
@@ -183,7 +183,7 @@ private void setAdditionalOptions(ExtensionContext extensionContext) {
               .flatMap(
                   annotatedElement ->
                       AnnotationSupport.findAnnotation(annotatedElement, WireMockTest.class))
-              .<Boolean>map(WireMockTest::proxyMode)
+              .map(WireMockTest::proxyMode)
               .orElse(false);
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/recording/SnapshotRecordResult.java
Patch:
@@ -50,7 +50,7 @@ public static SnapshotRecordResult ids(List<UUID> ids) {
   }
 
   public static SnapshotRecordResult empty() {
-    return full(Collections.<StubMapping>emptyList());
+    return full(Collections.emptyList());
   }
 
   public static class Full extends SnapshotRecordResult {
@@ -69,7 +69,7 @@ public static class Ids extends SnapshotRecordResult {
     private final List<UUID> ids;
 
     public Ids(List<UUID> ids) {
-      super(Collections.<StubMapping>emptyList());
+      super(Collections.emptyList());
       this.ids = ids;
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/verification/FindRequestsResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ public List<LoggedRequest> getRequests() {
   }
 
   public static FindRequestsResult withRequestJournalDisabled() {
-    return new FindRequestsResult(Collections.<LoggedRequest>emptyList(), true);
+    return new FindRequestsResult(Collections.emptyList(), true);
   }
 
   public static FindRequestsResult withRequests(List<LoggedRequest> requests) {

File: src/test/java/com/github/tomakehurst/wiremock/DateHeaderAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,6 @@ public void returnsNoDateHeaderIfNotStubbed() {
 
     WireMockResponse response = testClient.get("/nodateheader");
 
-    assertThat(response.headers().get("Date"), is(Matchers.<String>empty()));
+    assertThat(response.headers().get("Date"), is(Matchers.empty()));
   }
 }

File: src/test/java/com/github/tomakehurst/wiremock/StubLifecycleListenerAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -107,7 +107,7 @@ public void stubCreationCanBeVetoedWhenExceptionIsThrown() {
       wm.stubFor(get("/test").withName("Created").willReturn(ok()));
       fail("Expected an exception to be thrown");
     } catch (Exception e) {
-      assertThat(e, Matchers.<Exception>instanceOf(NotPermittedException.class));
+      assertThat(e, Matchers.instanceOf(NotPermittedException.class));
     }
 
     assertTrue(wm.listAllStubMappings().getMappings().isEmpty());

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -400,7 +400,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
         /* hostHeaderValue= */ null,
         new InMemorySettingsStore(),
         trustAllProxyTargets,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         stubCorsEnabled,
         ALLOW_ALL,
         PROXY_TIMEOUT);

File: src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -128,8 +128,7 @@ public void returnsDefaultIfGetRequestedServerNamesIsNotSupported() {
 
   @Test
   public void returnsDefaultIfThereAreNoSNIServerNames() {
-    given(extendedSslSessionMock.getRequestedServerNames())
-        .willReturn(Collections.<SNIServerName>emptyList());
+    given(extendedSslSessionMock.getRequestedServerNames()).willReturn(Collections.emptyList());
 
     String alias =
         certificateGeneratingKeyManager.chooseEngineServerAlias(

File: src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -137,8 +137,7 @@ public void returnsDefaultIfGetRequestedServerNamesIsNotSupported() {
 
   @Test
   public void returnsDefaultIfThereAreNoSNIServerNames() {
-    given(extendedSslSessionMock.getRequestedServerNames())
-        .willReturn(Collections.<SNIServerName>emptyList());
+    given(extendedSslSessionMock.getRequestedServerNames()).willReturn(Collections.emptyList());
 
     String alias =
         certificateGeneratingKeyManager.chooseServerAlias("RSA", nullPrincipals, sslSocketMock);

File: src/test/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPatternTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.mockito.Mockito;
 import org.skyscreamer.jsonassert.JSONCompareMode;
-import org.xmlunit.diff.ComparisonType;
 
 public class EqualToXmlPatternTest {
 
@@ -396,7 +395,7 @@ public void deserializesEqualToXmlWithAllParameters() {
         placeholderClosingDelimiterRegex, equalToXmlPattern.getPlaceholderClosingDelimiterRegex());
     assertThat(
         equalToXmlPattern.getExemptedComparisons(),
-        Matchers.<Set<ComparisonType>>is(Set.of(SCHEMA_LOCATION, NAMESPACE_URI, ATTR_VALUE)));
+        Matchers.is(Set.of(SCHEMA_LOCATION, NAMESPACE_URI, ATTR_VALUE)));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPatternTest.java
Patch:
@@ -273,8 +273,7 @@ public void serialisesCorrectlyWithNamspaces() throws JSONException {
 
   @Test
   public void serialisesCorrectlyWithoutNamspaces() throws JSONException {
-    MatchesXPathPattern pattern =
-        new MatchesXPathPattern("//*", Collections.<String, String>emptyMap());
+    MatchesXPathPattern pattern = new MatchesXPathPattern("//*", Collections.emptyMap());
 
     String json = Json.write(pattern);
 

File: src/test/java/com/github/tomakehurst/wiremock/matching/MultipartValuePatternBuilderTest.java
Patch:
@@ -78,7 +78,7 @@ public void testBuilderWithNameHeadersAndBody() {
     //        assertThat(headerPatterns.entrySet(),
     // everyItem(isIn(pattern.getMultipartHeaders().entrySet())));
 
-    List<ContentPattern<?>> bodyPatterns = Arrays.<ContentPattern<?>>asList(equalToXml("<xml />"));
+    List<ContentPattern<?>> bodyPatterns = Arrays.asList(equalToXml("<xml />"));
     assertThat(bodyPatterns, everyItem(is(in(pattern.getBodyPatterns()))));
   }
 

File: src/test/java/com/github/tomakehurst/wiremock/verification/diff/PlainTextDiffRendererTest.java
Patch:
@@ -56,8 +56,7 @@ public class PlainTextDiffRendererTest {
   public void init() {
     diffRenderer =
         new PlainTextDiffRenderer(
-            Collections.<String, RequestMatcherExtension>singletonMap(
-                "my-custom-matcher", new MyCustomMatcher()));
+            Collections.singletonMap("my-custom-matcher", new MyCustomMatcher()));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -34,7 +34,7 @@ public class AdminRoutes {
   private final Stores stores;
 
   public static AdminRoutes forClient() {
-    return new AdminRoutes(Collections.<AdminApiExtension>emptyList(), null);
+    return new AdminRoutes(Collections.emptyList(), null);
   }
 
   public static AdminRoutes forServer(Iterable<AdminApiExtension> apiExtensions, Stores stores) {

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -183,7 +183,7 @@ public static CloseableHttpClient createClient(
         proxySettings,
         trustStoreSettings,
         true,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         useSystemProperties,
         networkAddressRules);
   }

File: src/main/java/com/github/tomakehurst/wiremock/http/QueryParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public static QueryParameter queryParam(String key, String... values) {
   }
 
   public static QueryParameter absent(String key) {
-    return new QueryParameter(key, Collections.<String>emptyList());
+    return new QueryParameter(key, Collections.emptyList());
   }
 
   @JsonIgnore

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseDefinition.java
Patch:
@@ -178,7 +178,7 @@ public ResponseDefinition(final int statusCode, final String bodyContent) {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }
@@ -197,7 +197,7 @@ public ResponseDefinition(final int statusCode, final byte[] bodyContent) {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }
@@ -216,7 +216,7 @@ public ResponseDefinition() {
         null,
         null,
         null,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         Parameters.empty(),
         true);
   }

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockExtension.java
Patch:
@@ -183,7 +183,7 @@ private void setAdditionalOptions(ExtensionContext extensionContext) {
               .flatMap(
                   annotatedElement ->
                       AnnotationSupport.findAnnotation(annotatedElement, WireMockTest.class))
-              .<Boolean>map(WireMockTest::proxyMode)
+              .map(WireMockTest::proxyMode)
               .orElse(false);
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/recording/SnapshotRecordResult.java
Patch:
@@ -50,7 +50,7 @@ public static SnapshotRecordResult ids(List<UUID> ids) {
   }
 
   public static SnapshotRecordResult empty() {
-    return full(Collections.<StubMapping>emptyList());
+    return full(Collections.emptyList());
   }
 
   public static class Full extends SnapshotRecordResult {
@@ -69,7 +69,7 @@ public static class Ids extends SnapshotRecordResult {
     private final List<UUID> ids;
 
     public Ids(List<UUID> ids) {
-      super(Collections.<StubMapping>emptyList());
+      super(Collections.emptyList());
       this.ids = ids;
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/verification/FindRequestsResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ public List<LoggedRequest> getRequests() {
   }
 
   public static FindRequestsResult withRequestJournalDisabled() {
-    return new FindRequestsResult(Collections.<LoggedRequest>emptyList(), true);
+    return new FindRequestsResult(Collections.emptyList(), true);
   }
 
   public static FindRequestsResult withRequests(List<LoggedRequest> requests) {

File: src/test/java/com/github/tomakehurst/wiremock/DateHeaderAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,6 @@ public void returnsNoDateHeaderIfNotStubbed() {
 
     WireMockResponse response = testClient.get("/nodateheader");
 
-    assertThat(response.headers().get("Date"), is(Matchers.<String>empty()));
+    assertThat(response.headers().get("Date"), is(Matchers.empty()));
   }
 }

File: src/test/java/com/github/tomakehurst/wiremock/StubLifecycleListenerAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -107,7 +107,7 @@ public void stubCreationCanBeVetoedWhenExceptionIsThrown() {
       wm.stubFor(get("/test").withName("Created").willReturn(ok()));
       fail("Expected an exception to be thrown");
     } catch (Exception e) {
-      assertThat(e, Matchers.<Exception>instanceOf(NotPermittedException.class));
+      assertThat(e, Matchers.instanceOf(NotPermittedException.class));
     }
 
     assertTrue(wm.listAllStubMappings().getMappings().isEmpty());

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -400,7 +400,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
         /* hostHeaderValue= */ null,
         new InMemorySettingsStore(),
         trustAllProxyTargets,
-        Collections.<String>emptyList(),
+        Collections.emptyList(),
         stubCorsEnabled,
         ALLOW_ALL,
         PROXY_TIMEOUT);

File: src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -128,8 +128,7 @@ public void returnsDefaultIfGetRequestedServerNamesIsNotSupported() {
 
   @Test
   public void returnsDefaultIfThereAreNoSNIServerNames() {
-    given(extendedSslSessionMock.getRequestedServerNames())
-        .willReturn(Collections.<SNIServerName>emptyList());
+    given(extendedSslSessionMock.getRequestedServerNames()).willReturn(Collections.emptyList());
 
     String alias =
         certificateGeneratingKeyManager.chooseEngineServerAlias(

File: src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -137,8 +137,7 @@ public void returnsDefaultIfGetRequestedServerNamesIsNotSupported() {
 
   @Test
   public void returnsDefaultIfThereAreNoSNIServerNames() {
-    given(extendedSslSessionMock.getRequestedServerNames())
-        .willReturn(Collections.<SNIServerName>emptyList());
+    given(extendedSslSessionMock.getRequestedServerNames()).willReturn(Collections.emptyList());
 
     String alias =
         certificateGeneratingKeyManager.chooseServerAlias("RSA", nullPrincipals, sslSocketMock);

File: src/test/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPatternTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.mockito.Mockito;
 import org.skyscreamer.jsonassert.JSONCompareMode;
-import org.xmlunit.diff.ComparisonType;
 
 public class EqualToXmlPatternTest {
 
@@ -396,7 +395,7 @@ public void deserializesEqualToXmlWithAllParameters() {
         placeholderClosingDelimiterRegex, equalToXmlPattern.getPlaceholderClosingDelimiterRegex());
     assertThat(
         equalToXmlPattern.getExemptedComparisons(),
-        Matchers.<Set<ComparisonType>>is(Set.of(SCHEMA_LOCATION, NAMESPACE_URI, ATTR_VALUE)));
+        Matchers.is(Set.of(SCHEMA_LOCATION, NAMESPACE_URI, ATTR_VALUE)));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPatternTest.java
Patch:
@@ -273,8 +273,7 @@ public void serialisesCorrectlyWithNamspaces() throws JSONException {
 
   @Test
   public void serialisesCorrectlyWithoutNamspaces() throws JSONException {
-    MatchesXPathPattern pattern =
-        new MatchesXPathPattern("//*", Collections.<String, String>emptyMap());
+    MatchesXPathPattern pattern = new MatchesXPathPattern("//*", Collections.emptyMap());
 
     String json = Json.write(pattern);
 

File: src/test/java/com/github/tomakehurst/wiremock/matching/MultipartValuePatternBuilderTest.java
Patch:
@@ -78,7 +78,7 @@ public void testBuilderWithNameHeadersAndBody() {
     //        assertThat(headerPatterns.entrySet(),
     // everyItem(isIn(pattern.getMultipartHeaders().entrySet())));
 
-    List<ContentPattern<?>> bodyPatterns = Arrays.<ContentPattern<?>>asList(equalToXml("<xml />"));
+    List<ContentPattern<?>> bodyPatterns = Arrays.asList(equalToXml("<xml />"));
     assertThat(bodyPatterns, everyItem(is(in(pattern.getBodyPatterns()))));
   }
 

File: src/test/java/com/github/tomakehurst/wiremock/verification/diff/PlainTextDiffRendererTest.java
Patch:
@@ -56,8 +56,7 @@ public class PlainTextDiffRendererTest {
   public void init() {
     diffRenderer =
         new PlainTextDiffRenderer(
-            Collections.<String, RequestMatcherExtension>singletonMap(
-                "my-custom-matcher", new MyCustomMatcher()));
+            Collections.singletonMap("my-custom-matcher", new MyCustomMatcher()));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockExtension.java
Patch:
@@ -28,7 +28,9 @@
 /**
  * JUnit Jupiter extension that manages a WireMock server instance's lifecycle and configuration.
  *
- * <p>See http://wiremock.org/docs/junit-jupiter/ for full documentation.
+ * <p>See <a
+ * href="http://wiremock.org/docs/junit-jupiter/">http://wiremock.org/docs/junit-jupiter/</a> for
+ * full documentation.
  */
 public class WireMockExtension extends DslWrapper
     implements ParameterResolver,

File: src/main/java/com/github/tomakehurst/wiremock/common/url/PathTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.String.format;
 
+import com.github.tomakehurst.wiremock.common.Urls;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -73,11 +74,11 @@ public PathTemplate(String templateString) {
   }
 
   public boolean matches(String url) {
-    return parser.matches(url);
+    return parser.matches(Urls.getPath(url));
   }
 
   public PathParams parse(String url) {
-    return parser.parse(url);
+    return parser.parse(Urls.getPath(url));
   }
 
   public String render(PathParams pathParams) {

File: src/main/java/com/github/tomakehurst/wiremock/common/url/PathTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.String.format;
 
+import com.github.tomakehurst.wiremock.common.Urls;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -73,11 +74,11 @@ public PathTemplate(String templateString) {
   }
 
   public boolean matches(String url) {
-    return parser.matches(url);
+    return parser.matches(Urls.getPath(url));
   }
 
   public PathParams parse(String url) {
-    return parser.parse(url);
+    return parser.parse(Urls.getPath(url));
   }
 
   public String render(PathParams pathParams) {

File: src/main/java/com/github/tomakehurst/wiremock/http/multipart/FileUpload.java
Patch:
@@ -586,7 +586,7 @@ public void setHeaders(FileItemHeaders pHeaders) {
           throw new SizeLimitExceededException(
               format(
                   "the request was rejected because its size (%s) exceeds the configured maximum (%s)",
-                      requestSize, sizeMax),
+                  requestSize, sizeMax),
               requestSize,
               sizeMax);
         }
@@ -599,7 +599,7 @@ protected void raiseError(long pSizeMax, long pCount) throws IOException {
                     new SizeLimitExceededException(
                         format(
                             "the request was rejected because its size (%s) exceeds the configured maximum (%s)",
-                                pCount, pSizeMax),
+                            pCount, pSizeMax),
                         pCount,
                         pSizeMax);
                 throw new FileUploadIOException(ex);

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -967,7 +967,8 @@ public boolean getTemplateEscapingDisabled() {
   }
 
   private boolean isAsynchronousResponseEnabled() {
-    return optionSet.has(ASYNCHRONOUS_RESPONSE_ENABLED) && Boolean.parseBoolean((String) optionSet.valueOf(ASYNCHRONOUS_RESPONSE_ENABLED));
+    return optionSet.has(ASYNCHRONOUS_RESPONSE_ENABLED)
+        && Boolean.parseBoolean((String) optionSet.valueOf(ASYNCHRONOUS_RESPONSE_ENABLED));
   }
 
   private int getAsynchronousResponseThreads() {

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/Jetty11Utils.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.github.tomakehurst.wiremock.jetty11;
 
+import static org.eclipse.jetty.http.UriCompliance.UNSAFE;
+
 import com.github.tomakehurst.wiremock.common.JettySettings;
 import org.eclipse.jetty.io.NetworkTrafficListener;
 import org.eclipse.jetty.server.*;
@@ -63,6 +65,7 @@ public static HttpConfiguration createHttpConfig(JettySettings jettySettings) {
     httpConfig.setSendXPoweredBy(false);
     httpConfig.setSendServerVersion(false);
     httpConfig.addCustomizer(new SecureRequestCustomizer(false));
+    httpConfig.setUriCompliance(UNSAFE);
     return httpConfig;
   }
 }

File: src/test/java/com/github/tomakehurst/wiremock/client/WireMockClientAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/ExtensionFactoryTest.java
Patch:
@@ -84,7 +84,7 @@ void injectsCoreServicesOnConstructionByFactory() {
     assertThat(content, jsonPartEquals("requestCount", 2));
     assertThat(content, jsonPartEquals("stubCorsEnabled", true));
     assertThat(
-        content, jsonPartEquals("extensionCount", 3)); // Includes the two service loaded extensions
+        content, jsonPartEquals("extensionCount", 4)); // Includes the two service loaded extensions
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/CompositeNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package testsupport;
+package com.github.tomakehurst.wiremock.testsupport;
 
 import com.github.tomakehurst.wiremock.common.Notifier;
 import java.util.Arrays;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/ConstantHttpHeaderWebhookTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package testsupport;
+package com.github.tomakehurst.wiremock.testsupport;
 
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import org.wiremock.webhooks.WebhookDefinition;

File: src/main/java/com/github/tomakehurst/wiremock/recording/ScenarioProcessor.java
Patch:
@@ -48,7 +48,9 @@ public void putRepeatedRequestsInScenarios(List<StubMapping> stubMappings) {
     for (Map.Entry<RequestPattern, Collection<StubMapping>> entry :
         groupsWithMoreThanOneStub.entrySet()) {
       scenarioIndex++;
-      putStubsInScenario(scenarioIndex, List.copyOf(entry.getValue()));
+      final List<StubMapping> stubsInScenario = new LinkedList<>(entry.getValue());
+      Collections.reverse(stubsInScenario);
+      putStubsInScenario(scenarioIndex, stubsInScenario);
     }
   }
 

File: src/main/java/com/github/tomakehurst/wiremock/common/filemaker/FilenameMaker.java
Patch:
@@ -37,13 +37,13 @@ public class FilenameMaker {
   private final String filenameTemplate;
 
   public FilenameMaker() {
-    this.templateEngine = defaultTemplateEngine();
-    this.filenameTemplate = DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
+    this(null);
   }
 
   public FilenameMaker(String filenameTemplate) {
     this.templateEngine = defaultTemplateEngine();
-    this.filenameTemplate = filenameTemplate;
+    this.filenameTemplate =
+        filenameTemplate != null ? filenameTemplate : DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
   }
 
   public FilenameMaker(String filenameTemplate, String extension) {

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -19,7 +19,6 @@
 import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KEYSTORE_PATH;
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.common.ProxySettings.NO_PROXY;
-import static com.github.tomakehurst.wiremock.common.filemaker.FilenameMaker.DEFAULT_FILENAME_TEMPLATE;
 import static com.github.tomakehurst.wiremock.core.WireMockApp.MAPPINGS_ROOT;
 import static com.github.tomakehurst.wiremock.http.CaseInsensitiveKey.TO_CASE_INSENSITIVE_KEYS;
 
@@ -415,7 +414,8 @@ private String getFilenameTemplateOption() {
       validateFilenameTemplate(filenameTemplate);
       return filenameTemplate;
     }
-    return DEFAULT_FILENAME_TEMPLATE;
+
+    return null;
   }
 
   private void validateFilenameTemplate(String filenameTemplate) {

File: src/main/java/com/github/tomakehurst/wiremock/common/filemaker/FilenameMaker.java
Patch:
@@ -42,7 +42,8 @@ public FilenameMaker() {
 
   public FilenameMaker(String filenameTemplate) {
     this.templateEngine = defaultTemplateEngine();
-    this.filenameTemplate = filenameTemplate != null ? filenameTemplate : DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
+    this.filenameTemplate =
+        filenameTemplate != null ? filenameTemplate : DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
   }
 
   public FilenameMaker(String filenameTemplate, String extension) {

File: src/main/java/com/github/tomakehurst/wiremock/common/filemaker/FilenameMaker.java
Patch:
@@ -37,13 +37,12 @@ public class FilenameMaker {
   private final String filenameTemplate;
 
   public FilenameMaker() {
-    this.templateEngine = defaultTemplateEngine();
-    this.filenameTemplate = DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
+    this(null);
   }
 
   public FilenameMaker(String filenameTemplate) {
     this.templateEngine = defaultTemplateEngine();
-    this.filenameTemplate = filenameTemplate;
+    this.filenameTemplate = filenameTemplate != null ? filenameTemplate : DEFAULT_FILENAME_TEMPLATE + DEFAULT_EXTENSION;
   }
 
   public FilenameMaker(String filenameTemplate, String extension) {

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -19,7 +19,6 @@
 import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KEYSTORE_PATH;
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.common.ProxySettings.NO_PROXY;
-import static com.github.tomakehurst.wiremock.common.filemaker.FilenameMaker.DEFAULT_FILENAME_TEMPLATE;
 import static com.github.tomakehurst.wiremock.core.WireMockApp.MAPPINGS_ROOT;
 import static com.github.tomakehurst.wiremock.http.CaseInsensitiveKey.TO_CASE_INSENSITIVE_KEYS;
 
@@ -415,7 +414,8 @@ private String getFilenameTemplateOption() {
       validateFilenameTemplate(filenameTemplate);
       return filenameTemplate;
     }
-    return DEFAULT_FILENAME_TEMPLATE;
+
+    return null;
   }
 
   private void validateFilenameTemplate(String filenameTemplate) {

File: src/main/java/com/github/tomakehurst/wiremock/store/DefaultStores.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,9 @@
 
 import com.github.tomakehurst.wiremock.common.FileSource;
 import com.github.tomakehurst.wiremock.store.files.FileSourceBlobStore;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class DefaultStores implements Stores {
 
   private final FileSource fileRoot;

File: src/main/java/com/github/tomakehurst/wiremock/store/InMemoryRecorderStateStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,9 @@
 
 import com.github.tomakehurst.wiremock.recording.RecorderState;
 import java.util.concurrent.atomic.AtomicReference;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class InMemoryRecorderStateStore implements RecorderStateStore {
 
   private final AtomicReference<RecorderState> store;

File: src/main/java/com/github/tomakehurst/wiremock/store/InMemoryRequestJournalStore.java
Patch:
@@ -20,7 +20,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.stream.Stream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class InMemoryRequestJournalStore implements RequestJournalStore {
 
   private final Deque<UUID> deque = new ConcurrentLinkedDeque<>();

File: src/main/java/com/github/tomakehurst/wiremock/store/InMemoryScenariosStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,9 @@
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Stream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class InMemoryScenariosStore implements ScenariosStore {
 
   private final ConcurrentHashMap<String, Scenario> scenarioMap = new ConcurrentHashMap<>();

File: src/main/java/com/github/tomakehurst/wiremock/store/InMemorySettingsStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,9 @@
 
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import java.util.concurrent.atomic.AtomicReference;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class InMemorySettingsStore implements SettingsStore {
 
   private AtomicReference<GlobalSettings> holder = new AtomicReference<>(GlobalSettings.defaults());

File: src/main/java/com/github/tomakehurst/wiremock/store/InMemoryStubMappingStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,9 @@
 import java.util.Optional;
 import java.util.UUID;
 import java.util.stream.Stream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class InMemoryStubMappingStore implements StubMappingStore {
 
   private final SortedConcurrentMappingSet mappings = new SortedConcurrentMappingSet();

File: src/main/java/com/github/tomakehurst/wiremock/store/files/BlobStoreBinaryFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,9 @@
 import com.github.tomakehurst.wiremock.common.BinaryFile;
 import com.github.tomakehurst.wiremock.store.BlobStore;
 import java.io.InputStream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class BlobStoreBinaryFile extends BinaryFile {
 
   private final BlobStore blobStore;

File: src/main/java/com/github/tomakehurst/wiremock/store/files/BlobStoreFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,9 @@
 import java.net.URI;
 import java.util.List;
 import java.util.stream.Collectors;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class BlobStoreFileSource implements FileSource {
 
   private final BlobStore blobStore;

File: src/main/java/com/github/tomakehurst/wiremock/store/files/BlobStoreTextFile.java
Patch:
@@ -21,7 +21,9 @@
 import com.github.tomakehurst.wiremock.common.TextFile;
 import com.github.tomakehurst.wiremock.store.BlobStore;
 import java.io.InputStream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class BlobStoreTextFile extends TextFile {
 
   private final BlobStore blobStore;

File: src/main/java/com/github/tomakehurst/wiremock/store/files/FileSourceBlobStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,9 @@
 import java.io.InputStream;
 import java.util.Optional;
 import java.util.stream.Stream;
+import org.wiremock.annotations.Beta;
 
+@Beta(justification = "Externalized State API: https://github.com/wiremock/wiremock/issues/2144")
 public class FileSourceBlobStore implements BlobStore {
 
   private final FileSource fileSource;

File: src/test/java/com/github/tomakehurst/wiremock/HttpsBrowserProxyAcceptanceTest.java
Patch:
@@ -140,7 +140,7 @@ public void canProxyHttpsUsingHttp2InBrowserHttpsProxyMode() throws Exception {
     ProxyConfiguration proxyConfig = httpClient.getProxyConfiguration();
     HttpProxy httpProxy =
         new HttpProxy(new Origin.Address("localhost", proxy.getHttpsPort()), true);
-    proxyConfig.getProxies().add(httpProxy);
+    proxyConfig.addProxy(httpProxy);
 
     target.stubFor(get(urlEqualTo("/whatever")).willReturn(aResponse().withBody("Got it")));
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RemoveMatchingStubMappingTask.java
Patch:
@@ -22,7 +22,7 @@
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
-public class OldRemoveStubMappingTask implements AdminTask {
+public class RemoveMatchingStubMappingTask implements AdminTask {
 
   @Override
   public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RemoveStubMappingByIdTask.java
Patch:
@@ -23,7 +23,7 @@
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.UUID;
 
-public class RemoveStubMappingTask implements AdminTask {
+public class RemoveStubMappingByIdTask implements AdminTask {
 
   @Override
   public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/Jetty11HttpServer.java
Patch:
@@ -109,6 +109,7 @@ protected HandlerCollection createHandler(
         super.createHandler(options, adminRequestHandler, stubRequestHandler);
 
     if (options.browserProxySettings().enabled()) {
+      handler.prependHandler(new HttpsProxyDetectingHandler(mitmProxyConnector));
       handler.prependHandler(new ManInTheMiddleSslConnectHandler(mitmProxyConnector));
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPattern.java
Patch:
@@ -81,7 +81,6 @@ protected MatchResult isSimpleMatch(String value) {
               "Warning: JSON path expression '%s' failed to match document '%s' because %s",
               expectedValue, value, error);
 
-      notifier().info(message);
       return MatchResult.noMatch(SubEvent.warning(message));
     }
   }
@@ -108,7 +107,6 @@ protected MatchResult isAdvancedMatch(String value) {
           .min(Comparator.comparingDouble(MatchResult::getDistance))
           .orElse(MatchResult.noMatch(subEvents));
     } catch (SubExpressionException e) {
-      notifier().info(e.getMessage());
       return MatchResult.noMatch(SubEvent.warning(e.getMessage()));
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorder.java
Patch:
@@ -33,9 +33,7 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 
-/**
- * @deprecated this is the legacy recorder and will be removed before 3.x is out of beta
- */
+/** @deprecated this is the legacy recorder and will be removed before 3.x is out of beta */
 @Deprecated
 public class StubMappingJsonRecorder implements RequestListener {
 

File: src/test/java/com/github/tomakehurst/wiremock/BrowserProxyAcceptanceTest.java
Patch:
@@ -43,7 +43,7 @@ class BrowserProxyAcceptanceTest {
   public void init() {
     testClient = new WireMockTestClient(target.getPort());
 
-    proxy = new WireMockServer(wireMockConfig().dynamicPort().enableBrowserProxying(true));
+    proxy = new WireMockServer(wireMockConfig().port(8111).enableBrowserProxying(true));
     proxy.start();
   }
 

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/AdminRequestHandlerTest.java
Patch:
@@ -91,7 +91,7 @@ public void shouldClearMappingsJournalAndRequestDelayWhenResetCalled() {
 
   @Test
   public void shouldClearJournalWhenResetRequestsCalled() {
-    Request request = aRequest().withUrl("/requests/reset").withMethod(POST).build();
+    Request request = aRequest().withUrl("/requests").withMethod(DELETE).build();
 
     handler.handle(request, httpResponder, null);
     Response response = httpResponder.response;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/WireMockResponse.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.Multimap;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
 import org.apache.hc.core5.http.ClassicHttpResponse;
 import org.apache.hc.core5.http.Header;
 
@@ -29,7 +30,7 @@ public class WireMockResponse {
   private final ClassicHttpResponse httpResponse;
   private final byte[] content;
 
-  public WireMockResponse(ClassicHttpResponse httpResponse) {
+  public WireMockResponse(CloseableHttpResponse httpResponse) {
     this.httpResponse = httpResponse;
     content = getEntityAsByteArrayAndCloseStream(httpResponse);
   }

File: src/main/java/com/github/tomakehurst/wiremock/jetty/JettyUtils.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.jetty;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
+import static com.github.tomakehurst.wiremock.jetty11.HttpsProxyDetectingHandler.IS_HTTPS_PROXY_REQUEST_ATTRIBUTE;
 
 import jakarta.servlet.ServletResponse;
 import jakarta.servlet.http.HttpServletRequest;
@@ -82,7 +83,7 @@ public static Socket getTlsSocket(Response response) {
   public static boolean isBrowserProxyRequest(HttpServletRequest request) {
     if (request instanceof Request) {
       Request jettyRequest = (Request) request;
-      return "https".equals(jettyRequest.getHttpURI().getScheme())
+      return Boolean.TRUE.equals(request.getAttribute(IS_HTTPS_PROXY_REQUEST_ATTRIBUTE))
           || "http".equals(jettyRequest.getMetaData().getURI().getScheme());
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/Jetty11HttpServer.java
Patch:
@@ -109,6 +109,7 @@ protected HandlerCollection createHandler(
         super.createHandler(options, adminRequestHandler, stubRequestHandler);
 
     if (options.browserProxySettings().enabled()) {
+      handler.prependHandler(new HttpsProxyDetectingHandler(mitmProxyConnector));
       handler.prependHandler(new ManInTheMiddleSslConnectHandler(mitmProxyConnector));
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPattern.java
Patch:
@@ -81,7 +81,6 @@ protected MatchResult isSimpleMatch(String value) {
               "Warning: JSON path expression '%s' failed to match document '%s' because %s",
               expectedValue, value, error);
 
-      notifier().info(message);
       return MatchResult.noMatch(SubEvent.warning(message));
     }
   }
@@ -108,7 +107,6 @@ protected MatchResult isAdvancedMatch(String value) {
           .min(Comparator.comparingDouble(MatchResult::getDistance))
           .orElse(MatchResult.noMatch(subEvents));
     } catch (SubExpressionException e) {
-      notifier().info(e.getMessage());
       return MatchResult.noMatch(SubEvent.warning(e.getMessage()));
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPattern.java
Patch:
@@ -81,7 +81,6 @@ protected MatchResult isSimpleMatch(String value) {
               "Warning: JSON path expression '%s' failed to match document '%s' because %s",
               expectedValue, value, error);
 
-      notifier().info(message);
       return MatchResult.noMatch(SubEvent.warning(message));
     }
   }
@@ -108,7 +107,6 @@ protected MatchResult isAdvancedMatch(String value) {
           .min(Comparator.comparingDouble(MatchResult::getDistance))
           .orElse(MatchResult.noMatch(subEvents));
     } catch (SubExpressionException e) {
-      notifier().info(e.getMessage());
       return MatchResult.noMatch(SubEvent.warning(e.getMessage()));
     }
   }

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorder.java
Patch:
@@ -33,9 +33,7 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 
-/**
- * @deprecated this is the legacy recorder and will be removed before 3.x is out of beta
- */
+/** @deprecated this is the legacy recorder and will be removed before 3.x is out of beta */
 @Deprecated
 public class StubMappingJsonRecorder implements RequestListener {
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplatedUrlPath.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
-import java.net.URI;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -28,7 +27,7 @@ public class TemplatedUrlPath extends LinkedHashMap<String, String> implements I
   private final String originalPath;
 
   public TemplatedUrlPath(String url, PathTemplate pathTemplate) {
-    this.originalPath = URI.create(url).getPath();
+    this.originalPath = Urls.getPath(url);
     addAllPathSegments();
     putAll(pathTemplate.parse(originalPath));
   }

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchesJsonSchemaPattern.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.JsonException;
@@ -76,7 +77,7 @@ public MatchResult match(String json) {
     try {
       jsonNode = Json.read(json, JsonNode.class);
     } catch (JsonException je) {
-      return MatchResult.noMatch();
+      jsonNode = new TextNode(json);
     }
 
     final Set<ValidationMessage> validationMessages = schema.validate(jsonNode);

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -29,6 +29,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.client.BasicCredentials;
 import com.github.tomakehurst.wiremock.common.Json;
+import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
 import com.github.tomakehurst.wiremock.http.Cookie;
@@ -356,7 +357,7 @@ private MatchResult allPathParamsMatch(final Request request) {
         return MatchResult.noMatch();
       }
 
-      final PathParams requestPathParams = pathTemplate.parse(request.getUrl());
+      final PathParams requestPathParams = pathTemplate.parse(Urls.getPath(request.getUrl()));
       return MatchResult.aggregate(
           pathParams.entrySet().stream()
               .map(entry -> entry.getValue().match(requestPathParams.get(entry.getKey())))

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -153,7 +153,8 @@ public List<DiffLine<?>> getLines(Map<String, RequestMatcherExtension> customMat
       final UrlPathTemplatePattern urlPathTemplatePattern =
           (UrlPathTemplatePattern) requestPattern.getUrlMatcher();
       final PathTemplate pathTemplate = urlPathTemplatePattern.getPathTemplate();
-      final PathParams requestPathParameterValues = pathTemplate.parse(request.getUrl());
+      final PathParams requestPathParameterValues =
+          pathTemplate.parse(Urls.getPath(request.getUrl()));
 
       for (Map.Entry<String, String> entry : requestPathParameterValues.entrySet()) {
         String parameterName = entry.getKey();

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorder.java
Patch:
@@ -33,9 +33,7 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 
-/**
- * @deprecated this is the legacy recorder and will be removed before 3.x is out of beta
- */
+/** @deprecated this is the legacy recorder and will be removed before 3.x is out of beta */
 @Deprecated
 public class StubMappingJsonRecorder implements RequestListener {
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplatedUrlPath.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
-import java.net.URI;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -28,7 +27,7 @@ public class TemplatedUrlPath extends LinkedHashMap<String, String> implements I
   private final String originalPath;
 
   public TemplatedUrlPath(String url, PathTemplate pathTemplate) {
-    this.originalPath = URI.create(url).getPath();
+    this.originalPath = Urls.getPath(url);
     addAllPathSegments();
     putAll(pathTemplate.parse(originalPath));
   }

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -29,6 +29,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.client.BasicCredentials;
 import com.github.tomakehurst.wiremock.common.Json;
+import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
 import com.github.tomakehurst.wiremock.http.Cookie;
@@ -356,7 +357,7 @@ private MatchResult allPathParamsMatch(final Request request) {
         return MatchResult.noMatch();
       }
 
-      final PathParams requestPathParams = pathTemplate.parse(request.getUrl());
+      final PathParams requestPathParams = pathTemplate.parse(Urls.getPath(request.getUrl()));
       return MatchResult.aggregate(
           pathParams.entrySet().stream()
               .map(entry -> entry.getValue().match(requestPathParams.get(entry.getKey())))

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -153,7 +153,8 @@ public List<DiffLine<?>> getLines(Map<String, RequestMatcherExtension> customMat
       final UrlPathTemplatePattern urlPathTemplatePattern =
           (UrlPathTemplatePattern) requestPattern.getUrlMatcher();
       final PathTemplate pathTemplate = urlPathTemplatePattern.getPathTemplate();
-      final PathParams requestPathParameterValues = pathTemplate.parse(request.getUrl());
+      final PathParams requestPathParameterValues =
+          pathTemplate.parse(Urls.getPath(request.getUrl()));
 
       for (Map.Entry<String, String> entry : requestPathParameterValues.entrySet()) {
         String parameterName = entry.getKey();

File: src/main/java/com/github/tomakehurst/wiremock/common/AbstractFileSource.java
Patch:
@@ -154,7 +154,7 @@ private void assertFilePathIsUnderRoot(String path) {
               : new File(rootDirectory, path).getCanonicalPath();
 
       if (!Paths.get(filePath).normalize().startsWith(rootPath)) {
-        throw new NotAuthorisedException("Access to file " + path + " is not permitted");
+        throw new NotAuthorisedException("Access to file " + path + " is not permitted. An absolute path from the filesystem root might be specified");
       }
     } catch (IOException ioe) {
       throw new NotAuthorisedException("File " + path + " cannot be accessed", ioe);

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminTask.java
Patch:
@@ -17,9 +17,9 @@
 
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public interface AdminTask {
-  ResponseDefinition execute(Admin admin, Request request, PathParams pathParams);
+  ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams);
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetAllScenariosTask.java
Patch:
@@ -17,13 +17,13 @@
 
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class GetAllScenariosTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     return ResponseDefinition.okForJson(admin.getAllScenarios());
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetGlobalSettingsTask.java
Patch:
@@ -17,13 +17,13 @@
 
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class GetGlobalSettingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     return ResponseDefinition.okForJson(admin.getGlobalSettings());
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetRecordingStatusTask.java
Patch:
@@ -17,13 +17,13 @@
 
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class GetRecordingStatusTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     return ResponseDefinition.okForJson(admin.getRecordingStatus());
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/ImportStubMappingsTask.java
Patch:
@@ -18,15 +18,15 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubImport;
 
 public class ImportStubMappingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubImport stubImport = Json.read(request.getBodyAsString(), StubImport.class);
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubImport stubImport = Json.read(serveEvent.getRequest().getBodyAsString(), StubImport.class);
     admin.importStubs(stubImport);
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/PatchExtendedSettingsTask.java
Patch:
@@ -21,15 +21,15 @@
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class PatchExtendedSettingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     ExtendedSettingsWrapper extendedSettingsWrapper =
-        Json.read(request.getBodyAsString(), ExtendedSettingsWrapper.class);
+        Json.read(serveEvent.getRequest().getBodyAsString(), ExtendedSettingsWrapper.class);
     Parameters newExtended = extendedSettingsWrapper.getExtended();
 
     GlobalSettings existingSettings = admin.getGlobalSettings().getSettings();

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveServeEventTask.java
Patch:
@@ -17,14 +17,14 @@
 
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.UUID;
 
 public class RemoveServeEventTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String idString = pathParams.get("id");
     UUID id = UUID.fromString(idString);
     admin.removeServeEvent(id);

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveServeEventsByStubMetadataTask.java
Patch:
@@ -18,17 +18,17 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.verification.FindServeEventsResult;
 
 public class RemoveServeEventsByStubMetadataTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     StringValuePattern metadataPattern =
-        Json.read(request.getBodyAsString(), StringValuePattern.class);
+        Json.read(serveEvent.getRequest().getBodyAsString(), StringValuePattern.class);
     FindServeEventsResult findServeEventsResult =
         admin.removeServeEventsForStubsMatchingMetadata(metadataPattern);
     return ResponseDefinition.okForJson(findServeEventsResult);

File: src/main/java/com/github/tomakehurst/wiremock/admin/SetScenarioStateTask.java
Patch:
@@ -21,15 +21,15 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class SetScenarioStateTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String name = pathParams.get("name");
-    String body = request.getBodyAsString();
+    String body = serveEvent.getRequest().getBodyAsString();
 
     try {
       setOrResetScenarioState(admin, name, body);

File: src/main/java/com/github/tomakehurst/wiremock/admin/StartRecordingTask.java
Patch:
@@ -21,15 +21,15 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.recording.RecordSpec;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class StartRecordingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    RecordSpec recordSpec = Json.read(request.getBodyAsString(), RecordSpec.class);
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    RecordSpec recordSpec = Json.read(serveEvent.getRequest().getBodyAsString(), RecordSpec.class);
     try {
       admin.startRecording(recordSpec);
       return ResponseDefinition.okEmptyJson();

File: src/main/java/com/github/tomakehurst/wiremock/admin/StopRecordingTask.java
Patch:
@@ -22,15 +22,15 @@
 import com.github.tomakehurst.wiremock.common.Errors;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.recording.NotRecordingException;
 import com.github.tomakehurst.wiremock.recording.SnapshotRecordResult;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class StopRecordingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     try {
       SnapshotRecordResult result = admin.stopRecording();
       return jsonResponse(result, HTTP_OK);

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleServedStubResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
-import com.google.common.base.Optional;
+import java.util.Optional;
 
 public class SingleServedStubResult extends SingleItemResult<ServeEvent> {
 
@@ -27,6 +27,6 @@ public SingleServedStubResult(ServeEvent item) {
   }
 
   public static SingleServedStubResult fromOptional(Optional<ServeEvent> servedStub) {
-    return new SingleServedStubResult(servedStub.orNull());
+    return new SingleServedStubResult(servedStub.orElse(null));
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/AbstractGetDocTask.java
Patch:
@@ -22,15 +22,15 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.google.common.io.Resources;
 import java.io.IOException;
 
 public abstract class AbstractGetDocTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     try {
       byte[] content = toByteArray(Resources.getResource(getFilePath()).openStream());
       return responseDefinition()

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/CreateStubMappingTask.java
Patch:
@@ -21,15 +21,15 @@
 import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
 public class CreateStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubMapping newMapping = StubMapping.buildFrom(request.getBodyAsString());
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubMapping newMapping = StubMapping.buildFrom(serveEvent.getRequest().getBodyAsString());
     admin.addStubMapping(newMapping);
     return ResponseDefinitionBuilder.jsonResponse(newMapping, HTTP_CREATED);
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/DeleteStubFileTask.java
Patch:
@@ -18,9 +18,9 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.store.Stores;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class DeleteStubFileTask implements AdminTask {
 
@@ -31,7 +31,7 @@ public DeleteStubFileTask(Stores stores) {
   }
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String filePath = pathParams.get("0");
     stores.getFilesBlobStore().remove(filePath);
     return ResponseDefinition.ok();

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/EditStubFileTask.java
Patch:
@@ -18,9 +18,9 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.store.Stores;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class EditStubFileTask implements AdminTask {
 
@@ -31,9 +31,9 @@ public EditStubFileTask(Stores stores) {
   }
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String filename = pathParams.get("0");
-    byte[] fileContent = request.getBody();
+    byte[] fileContent = serveEvent.getRequest().getBody();
 
     stores.getFilesBlobStore().put(filename, fileContent);
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/EditStubMappingTask.java
Patch:
@@ -19,16 +19,16 @@
 import com.github.tomakehurst.wiremock.admin.model.SingleStubMappingResult;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import java.util.UUID;
 
 public class EditStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubMapping newStubMapping = StubMapping.buildFrom(request.getBodyAsString());
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubMapping newStubMapping = StubMapping.buildFrom(serveEvent.getRequest().getBodyAsString());
     UUID id = UUID.fromString(pathParams.get("id"));
     SingleStubMappingResult stubMappingResult = admin.getStubMapping(id);
     if (!stubMappingResult.isPresent()) {

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindNearMissesForUnmatchedTask.java
Patch:
@@ -18,14 +18,14 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.verification.FindNearMissesResult;
 
 public class FindNearMissesForUnmatchedTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     FindNearMissesResult nearMissesResult = admin.findNearMissesForUnmatchedRequests();
     return ResponseDefinition.okForJson(nearMissesResult);
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindUnmatchedRequestsTask.java
Patch:
@@ -22,14 +22,14 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.verification.FindRequestsResult;
 
 public class FindUnmatchedRequestsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     FindRequestsResult unmatchedRequests = admin.findUnmatchedRequests();
     return responseDefinition()
         .withStatus(HTTP_OK)

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetAllStubFilesTask.java
Patch:
@@ -20,10 +20,10 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.store.BlobStore;
 import com.github.tomakehurst.wiremock.store.Stores;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.List;
 
 public class GetAllStubFilesTask implements AdminTask {
@@ -35,7 +35,7 @@ public GetAllStubFilesTask(Stores stores) {
   }
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     BlobStore filesBlobStore = stores.getFilesBlobStore();
     List<String> filePaths = filesBlobStore.getAllKeys().sorted().collect(toList());
     return ResponseDefinition.okForJson(filePaths);

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetAllStubMappingsTask.java
Patch:
@@ -21,17 +21,17 @@
 import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class GetAllStubMappingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     ListStubMappingsResult result =
         new ListStubMappingsResult(
             LimitAndOffsetPaginator.fromRequest(
-                admin.listAllStubMappings().getMappings(), request));
+                admin.listAllStubMappings().getMappings(), serveEvent.getRequest()));
 
     return ResponseDefinitionBuilder.jsonResponse(result);
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetCaCertTask.java
Patch:
@@ -24,9 +24,9 @@
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.http.ssl.X509KeyStore;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.security.cert.X509Certificate;
 import java.util.Base64;
 
@@ -36,7 +36,7 @@ public class GetCaCertTask implements AdminTask {
       Base64.getMimeEncoder(64, new byte[] {'\r', '\n'});
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     BrowserProxySettings browserProxySettings = admin.getOptions().browserProxySettings();
     KeyStoreSettings caKeyStore = browserProxySettings.caKeyStore();
     try {

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetServedStubTask.java
Patch:
@@ -19,14 +19,14 @@
 import com.github.tomakehurst.wiremock.admin.model.SingleServedStubResult;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.UUID;
 
 public class GetServedStubTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String idString = pathParams.get("id");
     UUID id = UUID.fromString(idString);
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetStubMappingTask.java
Patch:
@@ -19,14 +19,14 @@
 import com.github.tomakehurst.wiremock.admin.model.SingleStubMappingResult;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.UUID;
 
 public class GetStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     String idString = pathParams.get("id");
     UUID id = UUID.fromString(idString);
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/NotFoundAdminTask.java
Patch:
@@ -18,12 +18,12 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class NotFoundAdminTask implements AdminTask {
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     return ResponseDefinition.notFound();
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldCreateStubMappingTask.java
Patch:
@@ -18,15 +18,15 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
 public class OldCreateStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubMapping newMapping = StubMapping.buildFrom(request.getBodyAsString());
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubMapping newMapping = StubMapping.buildFrom(serveEvent.getRequest().getBodyAsString());
     admin.addStubMapping(newMapping);
     return ResponseDefinition.created();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldEditStubMappingTask.java
Patch:
@@ -18,15 +18,15 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
 public class OldEditStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubMapping stubMapping = StubMapping.buildFrom(request.getBodyAsString());
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubMapping stubMapping = StubMapping.buildFrom(serveEvent.getRequest().getBodyAsString());
     admin.editStubMapping(stubMapping);
     return ResponseDefinition.noContent();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldRemoveStubMappingTask.java
Patch:
@@ -18,15 +18,15 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
 public class OldRemoveStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
-    StubMapping removeMapping = StubMapping.buildFrom(request.getBodyAsString());
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
+    StubMapping removeMapping = StubMapping.buildFrom(serveEvent.getRequest().getBodyAsString());
     admin.removeStubMapping(removeMapping);
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldResetRequestsTask.java
Patch:
@@ -18,13 +18,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class OldResetRequestsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetRequests();
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RemoveStubMappingTask.java
Patch:
@@ -19,14 +19,14 @@
 import com.github.tomakehurst.wiremock.admin.model.SingleStubMappingResult;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.util.UUID;
 
 public class RemoveStubMappingTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     SingleStubMappingResult stubMappingResult =
         admin.getStubMapping(UUID.fromString(pathParams.get("id")));
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetRequestsTask.java
Patch:
@@ -18,13 +18,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ResetRequestsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetRequests();
     return ResponseDefinition.okEmptyJson();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetScenariosTask.java
Patch:
@@ -18,12 +18,12 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ResetScenariosTask implements AdminTask {
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetScenarios();
     return ResponseDefinition.okEmptyJson();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetStubMappingsTask.java
Patch:
@@ -18,13 +18,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ResetStubMappingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetMappings();
     return ResponseDefinition.okEmptyJson();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetTask.java
Patch:
@@ -18,13 +18,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ResetTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetAll();
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetToDefaultMappingsTask.java
Patch:
@@ -18,13 +18,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ResetToDefaultMappingsTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.resetToDefaultMappings();
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RootRedirectTask.java
Patch:
@@ -20,13 +20,13 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class RootRedirectTask implements AdminTask {
 
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     return ResponseDefinition.redirectTo(ADMIN_CONTEXT_ROOT + "/");
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/SaveMappingsTask.java
Patch:
@@ -18,12 +18,12 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class SaveMappingsTask implements AdminTask {
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.saveMappings();
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ShutdownServerTask.java
Patch:
@@ -18,12 +18,12 @@
 import com.github.tomakehurst.wiremock.admin.AdminTask;
 import com.github.tomakehurst.wiremock.common.url.PathParams;
 import com.github.tomakehurst.wiremock.core.Admin;
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public class ShutdownServerTask implements AdminTask {
   @Override
-  public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {
+  public ResponseDefinition execute(Admin admin, ServeEvent serveEvent, PathParams pathParams) {
     admin.shutdownServer();
     return ResponseDefinition.ok();
   }

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -18,7 +18,7 @@
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.common.HttpClientUtils.getEntityAsStringAndCloseStream;
 import static com.github.tomakehurst.wiremock.security.NoClientAuthenticator.noClientAuthenticator;
-import static com.google.common.base.Preconditions.checkNotNull;
+import static java.util.Objects.requireNonNull;
 import static org.apache.hc.core5.http.HttpHeaders.HOST;
 
 import com.github.tomakehurst.wiremock.admin.*;
@@ -177,7 +177,6 @@ public ListStubMappingsResult listAllStubMappings() {
   }
 
   @Override
-  @SuppressWarnings("unchecked")
   public SingleStubMappingResult getStubMapping(UUID id) {
     return executeRequest(
         adminRoutes.requestSpecForTask(GetStubMappingTask.class),
@@ -538,7 +537,7 @@ private String safelyExecuteRequest(String url, ClassicHttpRequest request) {
 
   private String urlFor(Class<? extends AdminTask> taskClass) {
     RequestSpec requestSpec = adminRoutes.requestSpecForTask(taskClass);
-    checkNotNull(requestSpec, "No admin task URL is registered for " + taskClass.getSimpleName());
+    requireNonNull(requestSpec, "No admin task URL is registered for " + taskClass.getSimpleName());
     return String.format(ADMIN_URL_PREFIX + requestSpec.path(), scheme, host, port, urlPathPrefix);
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/TextFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.common;
 
-import static com.google.common.base.Charsets.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.io.File;
 import java.net.URI;

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/StubServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,10 +15,9 @@
  */
 package com.github.tomakehurst.wiremock.core;
 
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
 public interface StubServer {
 
-  ServeEvent serveStubFor(Request request);
+  ServeEvent serveStubFor(ServeEvent serveEvent);
 }

File: src/main/java/com/github/tomakehurst/wiremock/direct/DirectCallHttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -111,7 +111,8 @@ public int httpsPort() {
 
   private Response handleRequest(Request request, AbstractRequestHandler handler) {
     CompletableFuture<Response> responseFuture = new CompletableFuture<>();
-    handler.handle(request, (ignored, response) -> responseFuture.complete(response));
+    handler.handle(
+        request, (ignored, response, attributes) -> responseFuture.complete(response), null);
 
     try {
       Response response = responseFuture.get(timeout, TimeUnit.MILLISECONDS);

File: src/main/java/com/github/tomakehurst/wiremock/extension/Parameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2021 Thomas Akehurst
+ * Copyright (C) 2015-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.Metadata;
-import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -34,7 +33,7 @@ public static Parameters from(Map<String, Object> parameterMap) {
   }
 
   public static Parameters one(String name, Object value) {
-    return from(ImmutableMap.of(name, value));
+    return from(Map.of(name, value));
   }
 
   public static <T> Parameters of(T myData) {

File: src/main/java/com/github/tomakehurst/wiremock/extension/PostServeAction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,8 @@
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 
+/** @deprecated Use {@link ServeEventListener} instead. */
+@Deprecated
 public abstract class PostServeAction implements Extension {
 
   /**

File: src/main/java/com/github/tomakehurst/wiremock/extension/ResponseDefinitionTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2021 Thomas Akehurst
+ * Copyright (C) 2014-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,8 @@
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 
+@Deprecated
+/** @deprecated Use {@link ResponseDefinitionTransformerV2} instead */
 public abstract class ResponseDefinitionTransformer
     extends AbstractTransformer<ResponseDefinition> {
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/ResponseTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2021 Thomas Akehurst
+ * Copyright (C) 2014-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,8 @@
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.Response;
 
+@Deprecated
+/** @deprecated Use {@link ResponseTransformerV2} instead */
 public abstract class ResponseTransformer extends AbstractTransformer<Response> {
 
   @Override

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/RequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,8 @@
 import com.github.tomakehurst.wiremock.extension.Extension;
 import com.github.tomakehurst.wiremock.http.Request;
 
+@Deprecated
+/** @deprecated Use {@link RequestFilterV2} instead */
 public interface RequestFilter extends Extension {
 
   RequestFilterAction filter(Request request);

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/SystemKeyAuthoriser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public class SystemKeyAuthoriser {
 
   public SystemKeyAuthoriser(Set<String> patterns) {
     if (patterns == null || patterns.isEmpty()) {
-      patterns = ImmutableSet.of("wiremock.*");
+      patterns = Set.of("wiremock.*");
     }
 
     ImmutableSet.Builder<Pattern> builder = ImmutableSet.builder();

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplatedUrlPath.java
Patch:
@@ -30,7 +30,7 @@ public class TemplatedUrlPath extends LinkedHashMap<String, String> implements I
   public TemplatedUrlPath(String url, PathTemplate pathTemplate) {
     this.originalPath = URI.create(url).getPath();
     addAllPathSegments();
-    putAll(pathTemplate.parse(url));
+    putAll(pathTemplate.parse(originalPath));
   }
 
   private void addAllPathSegments() {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ArrayHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,13 +20,14 @@
 import com.github.jknack.handlebars.Options;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
+import java.util.List;
 
 public class ArrayHelper extends HandlebarsHelper<Object> {
 
   @Override
   public Object apply(Object context, Options options) throws IOException {
     if (context == null || context == options.context.model()) {
-      return ImmutableList.of();
+      return List.of();
     }
 
     return ImmutableList.builder().add(context).addAll(asList(options.params)).build();

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/FormDataHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.extension.responsetemplating.helpers;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.jknack.handlebars.Options;
 import com.github.tomakehurst.wiremock.common.ListOrSingle;
@@ -29,7 +29,7 @@ public Object apply(Object context, Options options) {
         FormParser.parse(
             context.toString(),
             Boolean.TRUE.equals(options.hash.get("urlDecode")),
-            firstNonNull(options.hash.get("encoding"), "utf-8").toString());
+            getFirstNonNull(options.hash.get("encoding"), "utf-8").toString());
 
     if (options.params.length > 0) {
       String variableName = options.param(0);

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsJsonPathHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.extension.responsetemplating.helpers;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.jknack.handlebars.Options;
 import com.github.tomakehurst.wiremock.extension.responsetemplating.RenderCache;
@@ -72,7 +72,7 @@ private Object getValue(JsonPath jsonPath, DocumentContext jsonDocument, Options
       }
 
       if (value == null) {
-        value = firstNonNull(defaultValue, "");
+        value = getFirstNonNull(defaultValue, "");
       }
 
       renderCache.put(cacheKey, value);

File: src/main/java/com/github/tomakehurst/wiremock/http/Body.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2022 Thomas Akehurst
+ * Copyright (C) 2015-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hash(content, binary);
+    return Objects.hash(Arrays.hashCode(content), binary);
   }
 
   @Override

File: src/main/java/com/github/tomakehurst/wiremock/http/ContentTypeHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,8 @@
 package com.github.tomakehurst.wiremock.http;
 
 import com.github.tomakehurst.wiremock.common.Strings;
-import com.google.common.base.Optional;
 import java.nio.charset.Charset;
+import java.util.Optional;
 
 public class ContentTypeHeader extends HttpHeader {
 
@@ -53,7 +53,7 @@ public Optional<String> encodingPart() {
       }
     }
 
-    return Optional.absent();
+    return Optional.empty();
   }
 
   public Charset charset() {

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.http;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static java.util.Arrays.asList;
 
 import com.google.common.collect.ImmutableList;
@@ -33,7 +33,7 @@ public HttpHeader(CaseInsensitiveKey key, Collection<String> values) {
   }
 
   public HttpHeader(String key, Collection<String> values) {
-    super(key, ImmutableList.copyOf(firstNonNull(values, Collections.<String>emptyList())));
+    super(key, ImmutableList.copyOf(getFirstNonNull(values, Collections.emptyList())));
   }
 
   public static HttpHeader httpHeader(CaseInsensitiveKey key, String... values) {

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2022 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@
 import static java.net.HttpURLConnection.HTTP_OK;
 
 import com.github.tomakehurst.wiremock.common.*;
-import com.google.common.base.Optional;
 import com.google.common.io.ByteStreams;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Optional;
 
 public class Response {
 
@@ -258,7 +258,7 @@ private Optional<Integer> getDelayFromResponseOrGlobalSetting(
         Integer fixedDelay, Integer globalFixedDelay) {
       Integer delay = fixedDelay != null ? fixedDelay : globalFixedDelay;
 
-      return Optional.fromNullable(delay);
+      return Optional.ofNullable(delay);
     }
 
     private void addRandomDelayIfSpecifiedGloballyOrIn(

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2022 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.common.Errors;
 import com.github.tomakehurst.wiremock.common.Json;
-import com.github.tomakehurst.wiremock.extension.AbstractTransformer;
+import com.github.tomakehurst.wiremock.extension.Extension;
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import java.util.Collections;
 import java.util.List;
@@ -454,7 +454,7 @@ public Parameters getTransformerParameters() {
     return transformerParameters;
   }
 
-  public boolean hasTransformer(AbstractTransformer transformer) {
+  public boolean hasTransformer(Extension transformer) {
     return transformers != null && transformers.contains(transformer.getName());
   }
 

File: src/main/java/com/github/tomakehurst/wiremock/http/multipart/PartParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2022 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,13 +21,13 @@
 import com.github.tomakehurst.wiremock.http.HttpHeader;
 import com.github.tomakehurst.wiremock.http.HttpHeaders;
 import com.github.tomakehurst.wiremock.http.Request;
-import com.google.common.collect.Lists;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Collection;
 import java.util.List;
+import java.util.stream.Collectors;
 import org.apache.commons.fileupload.FileItem;
 import org.apache.commons.fileupload.FileItemFactory;
 import org.apache.commons.fileupload.FileUploadException;
@@ -52,7 +52,7 @@ public static Collection<Request.Part> parseFrom(Request request) {
 
     try {
       List<FileItem> items = upload.parseRequest(uploadContext);
-      return Lists.transform(items, TO_PARTS);
+      return items.stream().map(TO_PARTS).collect(Collectors.toList());
     } catch (FileUploadException e) {
       return throwUnchecked(e, Collection.class);
     }

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/Jetty11HttpServer.java
Patch:
@@ -152,7 +152,8 @@ actual request (this is how curl 7.64.1 behaves!). Neither
           new NetworkTrafficServerConnector(jettyServer, null, null, null, 2, 2, ssl, http);
 
       mitmProxyConnector.setPort(0);
-      mitmProxyConnector.setShutdownIdleTimeout(jettySettings.getShutdownIdleTimeout().or(100L));
+      mitmProxyConnector.setShutdownIdleTimeout(
+          jettySettings.getShutdownIdleTimeout().orElse(100L));
 
       jettyServer.addConnector(mitmProxyConnector);
     }

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/ManInTheMiddleSslConnectHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2022 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.jetty11;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import jakarta.servlet.http.HttpServletRequest;
 import java.io.Closeable;
@@ -45,7 +45,7 @@ protected void connectToServer(
       channel.socket().setTcpNoDelay(true);
       channel.configureBlocking(false);
 
-      String host = firstNonNull(mitmProxyConnector.getHost(), "localhost");
+      String host = getFirstNonNull(mitmProxyConnector.getHost(), "localhost");
       int port = mitmProxyConnector.getLocalPort();
       InetSocketAddress address = newConnectAddress(host, port);
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/MemoizingMatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/matching/MultipartValuePatternBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,16 +16,16 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.containing;
-import static com.google.common.collect.Maps.newLinkedHashMap;
 
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
 public class MultipartValuePatternBuilder {
 
   private String name = null;
-  private Map<String, MultiValuePattern> headerPatterns = newLinkedHashMap();
+  private Map<String, MultiValuePattern> headerPatterns = new LinkedHashMap<>();
   private List<ContentPattern<?>> bodyPatterns = new LinkedList<>();
   private MultipartValuePattern.MatchingType matchingType = MultipartValuePattern.MatchingType.ANY;
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/NotPattern.java
Patch:
@@ -22,7 +22,7 @@ public class NotPattern extends StringValuePattern {
   private StringValuePattern unexpectedPattern;
 
   public NotPattern(@JsonProperty("not") StringValuePattern unexpectedPattern) {
-    super(unexpectedPattern.expectedValue);
+    super(unexpectedPattern.getExpected());
     this.unexpectedPattern = unexpectedPattern;
   }
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/SingleMatchMultiValuePattern.java
Patch:
@@ -21,8 +21,8 @@
 import com.fasterxml.jackson.annotation.JsonValue;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.github.tomakehurst.wiremock.http.MultiValue;
-import com.google.common.base.Objects;
 import java.util.List;
+import java.util.Objects;
 
 @JsonDeserialize(as = SingleMatchMultiValuePattern.class)
 public class SingleMatchMultiValuePattern extends MultiValuePattern {
@@ -64,11 +64,11 @@ public boolean equals(Object o) {
       return false;
     }
     SingleMatchMultiValuePattern that = (SingleMatchMultiValuePattern) o;
-    return Objects.equal(valuePattern, that.valuePattern);
+    return Objects.equals(valuePattern, that.valuePattern);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(valuePattern);
+    return Objects.hash(valuePattern);
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPattern.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonValue;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
-import com.google.common.base.Objects;
+import java.util.Objects;
 
 public class UrlPattern implements NamedValueMatcher<String> {
 
@@ -91,12 +91,12 @@ public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
     UrlPattern that = (UrlPattern) o;
-    return regex == that.regex && Objects.equal(pattern, that.pattern);
+    return regex == that.regex && Objects.equals(pattern, that.pattern);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(pattern, regex);
+    return Objects.hash(pattern, regex);
   }
 
   public boolean isSpecified() {

File: src/main/java/com/github/tomakehurst/wiremock/recording/RecordSpecBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,12 +15,12 @@
  */
 package com.github.tomakehurst.wiremock.recording;
 
-import static com.google.common.collect.Maps.newLinkedHashMap;
 import static java.util.Arrays.asList;
 
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -30,7 +30,7 @@ public class RecordSpecBuilder {
   private String targetBaseUrl;
   private RequestPatternBuilder filterRequestPatternBuilder;
   private List<UUID> filterIds;
-  private Map<String, CaptureHeadersSpec> headers = newLinkedHashMap();
+  private Map<String, CaptureHeadersSpec> headers = new LinkedHashMap<>();
   private RequestBodyPatternFactory requestBodyPatternFactory;
   private long maxTextBodySize = ResponseDefinitionBodyMatcher.DEFAULT_MAX_TEXT_SIZE;
   private long maxBinaryBodySize = ResponseDefinitionBodyMatcher.DEFAULT_MAX_BINARY_SIZE;

File: src/main/java/com/github/tomakehurst/wiremock/recording/RequestPatternTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.matching.*;
-import com.google.common.base.Function;
 import java.util.Map;
+import java.util.function.Function;
 
 /**
  * Creates a RequestPatternBuilder from a Request's URL, method, body (if present), and optionally

File: src/main/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingTransformerRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2022 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,8 @@
 import com.github.tomakehurst.wiremock.store.BlobStore;
 import com.github.tomakehurst.wiremock.store.files.BlobStoreFileSource;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import com.google.common.base.Function;
 import java.util.List;
+import java.util.function.Function;
 
 /**
  * Applies all registered StubMappingTransformer extensions against a stub mapping when applicable,

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockWebContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2022 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.servlet;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.common.Slf4jNotifier;
@@ -36,7 +36,7 @@ public void contextInitialized(ServletContextEvent sce) {
 
     boolean verboseLoggingEnabled =
         Boolean.parseBoolean(
-            firstNonNull(context.getInitParameter("verboseLoggingEnabled"), "true"));
+            getFirstNonNull(context.getInitParameter("verboseLoggingEnabled"), "true"));
 
     WireMockApp wireMockApp =
         new WireMockApp(new WarConfiguration(context), new NotImplementedContainer());

File: src/main/java/com/github/tomakehurst/wiremock/store/files/BlobStoreTextFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.store.files;
 
-import static com.google.common.base.Charsets.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.github.tomakehurst.wiremock.admin.NotFoundException;
 import com.github.tomakehurst.wiremock.common.TextFile;

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2022 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,15 +15,14 @@
  */
 package com.github.tomakehurst.wiremock.stubbing;
 
-import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
 
 public interface StubMappings {
 
-  ServeEvent serveFor(Request request);
+  ServeEvent serveFor(ServeEvent request);
 
   void addMapping(StubMapping mapping);
 

File: src/main/java/com/github/tomakehurst/wiremock/verification/InMemoryRequestJournal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,13 +17,12 @@
 
 import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.store.InMemoryRequestJournalStore;
-import com.google.common.base.Optional;
 import java.util.Map;
 
 public class InMemoryRequestJournal extends StoreBackedRequestJournal {
 
   public InMemoryRequestJournal(
-      Optional<Integer> maxEntries, Map<String, RequestMatcherExtension> customMatchers) {
+      Integer maxEntries, Map<String, RequestMatcherExtension> customMatchers) {
     super(maxEntries, customMatchers, new InMemoryRequestJournalStore());
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/verification/StoreBackedRequestJournal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2022 Thomas Akehurst
+ * Copyright (C) 2022-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,13 +17,12 @@
 
 import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.store.RequestJournalStore;
-import com.google.common.base.Optional;
 import java.util.Map;
 
 public class StoreBackedRequestJournal extends AbstractRequestJournal {
 
   public StoreBackedRequestJournal(
-      Optional<Integer> maxEntries,
+      Integer maxEntries,
       Map<String, RequestMatcherExtension> customMatchers,
       RequestJournalStore store) {
     super(maxEntries, customMatchers, store);

File: src/test/java/com/github/tomakehurst/wiremock/ConcurrentProxyingTest.java
Patch:
@@ -18,12 +18,12 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.testsupport.TestFiles.defaultTestFilesRoot;
-import static com.google.common.collect.Lists.newArrayList;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 import com.github.tomakehurst.wiremock.junit5.WireMockExtension;
 import com.github.tomakehurst.wiremock.testsupport.WireMockTestClient;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -57,7 +57,7 @@ public void concurrent() throws Exception {
 
     ExecutorService executor = Executors.newFixedThreadPool(20);
 
-    List<Future<?>> results = newArrayList();
+    List<Future<?>> results = new ArrayList<>();
     for (int i = 0; i < 100; i++) {
       results.add(
           executor.submit(

File: src/test/java/com/github/tomakehurst/wiremock/PostServeActionExtensionTest.java
Patch:
@@ -18,9 +18,9 @@
 import static com.github.tomakehurst.wiremock.PostServeActionExtensionTest.CounterNameParameter.counterNameParameter;
 import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.responseDefinition;
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
-import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static net.javacrumbs.jsonunit.JsonMatchers.jsonPartEquals;
 import static org.awaitility.Awaitility.await;
@@ -260,9 +260,9 @@ public void contributeAdminApiRoutes(Router router) {
       router.add(
           GET,
           "/named-counter/{name}",
-          (admin, request, pathParams) -> {
+          (admin, serveEvent, pathParams) -> {
             String name = pathParams.get("name");
-            Integer count = firstNonNull(counters.get(name), 0);
+            Integer count = getFirstNonNull(counters.get(name), 0);
             return responseDefinition().withStatus(200).withBody(String.valueOf(count)).build();
           });
     }

File: src/test/java/com/github/tomakehurst/wiremock/ProxyAcceptanceTest.java
Patch:
@@ -16,6 +16,8 @@
 package com.github.tomakehurst.wiremock;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.client.WireMock.any;
+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
 import static com.github.tomakehurst.wiremock.testsupport.TestHttpHeader.withHeader;
 import static com.google.common.collect.Iterables.getLast;
@@ -31,7 +33,6 @@
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
-import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;
 import com.github.tomakehurst.wiremock.http.HttpClientFactory;
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
 import com.github.tomakehurst.wiremock.testsupport.WireMockTestClient;
@@ -597,7 +598,7 @@ public void removesPrefixFromProxyRequestWhenMatching() {
 
   @Test
   public void removesPrefixFromProxyRequestWhenResponseTransformersAreUsed() {
-    init(wireMockConfig().extensions(new ResponseTemplateTransformer(true)));
+    init(wireMockConfig().templatingEnabled(true).globalTemplating(true));
 
     proxy.register(
         get("/other/service/doc/123")

File: src/test/java/com/github/tomakehurst/wiremock/ServeEventLogAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.hasExactly;
 import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.isToday;
-import static com.google.common.base.Charsets.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasItems;
 import static org.hamcrest.Matchers.is;

File: src/test/java/com/github/tomakehurst/wiremock/StubMappingPersistenceAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 import static com.github.tomakehurst.wiremock.core.WireMockApp.MAPPINGS_ROOT;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
 import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.hasFileContaining;
-import static com.google.common.base.Charsets.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;

File: src/test/java/com/github/tomakehurst/wiremock/XmlHandlingAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2018-2021 Thomas Akehurst
+ * Copyright (C) 2018-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public class XmlHandlingAcceptanceTest {
   @RegisterExtension
   public WireMockExtension wm =
       WireMockExtension.newInstance()
-          .options(options().dynamicPort().extensions(new ResponseTemplateTransformer(false)))
+          .options(options().dynamicPort().templatingEnabled(true))
           .build();
 
   @RegisterExtension

File: src/test/java/com/github/tomakehurst/wiremock/common/Base64EncoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2018-2021 Thomas Akehurst
+ * Copyright (C) 2018-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@ public class Base64EncoderTest {
   public static final String OUTPUT = "MTIzNA==";
 
   @Test
-  public void testGuavaEncoder() {
-    Base64Encoder encoder = new GuavaBase64Encoder();
+  void testEncoder() {
+    var encoder = new JdkBase64Encoder();
 
     String encoded = encoder.encode(INPUT.getBytes());
     assertThat(encoded, is(OUTPUT));

File: src/test/java/com/github/tomakehurst/wiremock/common/JettySettingsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2021 Thomas Akehurst
+ * Copyright (C) 2015-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
-import com.google.common.base.Optional;
+import java.util.Optional;
 import org.junit.jupiter.api.Test;
 
 public class JettySettingsTest {

File: src/test/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSettingsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2018-2021 Thomas Akehurst
+ * Copyright (C) 2018-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/core/WireMockConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
-import com.google.common.base.Optional;
+import java.util.Optional;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.junit.jupiter.api.Test;
 

File: src/test/java/com/github/tomakehurst/wiremock/http/ContentTypeHeaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 
 import com.github.tomakehurst.wiremock.common.Strings;
 import com.github.tomakehurst.wiremock.testsupport.MockRequestBuilder;
-import com.google.common.base.Optional;
 import java.nio.charset.StandardCharsets;
+import java.util.Optional;
 import org.junit.jupiter.api.Test;
 
 public class ContentTypeHeaderTest {

File: src/test/java/com/github/tomakehurst/wiremock/junit5/JUnitJupiterExtensionNonStaticMultiInstanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;
 import com.github.tomakehurst.wiremock.http.HttpClientFactory;
 import org.apache.hc.client5.http.classic.methods.HttpGet;
 import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
@@ -53,7 +52,7 @@ public class JUnitJupiterExtensionNonStaticMultiInstanceTest {
   @RegisterExtension
   WireMockExtension wm2 =
       WireMockExtension.newInstance()
-          .options(wireMockConfig().dynamicPort().extensions(new ResponseTemplateTransformer(true)))
+          .options(wireMockConfig().dynamicPort().templatingEnabled(true).globalTemplating(true))
           .build();
 
   @BeforeEach

File: src/main/java/com/github/tomakehurst/wiremock/common/AbstractFileSource.java
Patch:
@@ -18,10 +18,10 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.github.tomakehurst.wiremock.security.NotAuthorisedException;
-import com.google.common.io.Files;
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
@@ -172,7 +172,7 @@ private void ensureDirectoryExists(File toFile) throws IOException {
   private void writeTextFileAndTranslateExceptions(String contents, File toFile) {
     try {
       ensureDirectoryExists(toFile);
-      Files.asCharSink(toFile, UTF_8).write(contents);
+      Files.write(toFile.toPath(), contents.getBytes(UTF_8));
     } catch (IOException ioe) {
       throw new RuntimeException(ioe);
     }
@@ -181,7 +181,7 @@ private void writeTextFileAndTranslateExceptions(String contents, File toFile) {
   private void writeBinaryFileAndTranslateExceptions(byte[] contents, File toFile) {
     try {
       ensureDirectoryExists(toFile);
-      Files.write(contents, toFile);
+      Files.write(toFile.toPath(), contents);
     } catch (IOException ioe) {
       throw new RuntimeException(ioe);
     }

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.github.tomakehurst.wiremock.client;
 
-import static com.google.common.collect.Maps.newHashMap;
 import static java.net.HttpURLConnection.HTTP_OK;
 import static java.util.Arrays.asList;
 
@@ -25,6 +24,7 @@
 import com.github.tomakehurst.wiremock.http.*;
 import com.google.common.collect.ImmutableList;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -42,7 +42,7 @@ public class ResponseDefinitionBuilder {
   protected String proxyUrlPrefixToRemove;
   protected Fault fault;
   protected List<String> responseTransformerNames;
-  protected Map<String, Object> transformerParameters = newHashMap();
+  protected Map<String, Object> transformerParameters = new HashMap<>();
   protected Boolean wasConfigured = true;
 
   public static ResponseDefinitionBuilder like(ResponseDefinition responseDefinition) {

File: src/main/java/com/github/tomakehurst/wiremock/matching/MultipartValuePatternBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,16 +16,16 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.containing;
-import static com.google.common.collect.Maps.newLinkedHashMap;
 
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
 public class MultipartValuePatternBuilder {
 
   private String name = null;
-  private Map<String, MultiValuePattern> headerPatterns = newLinkedHashMap();
+  private Map<String, MultiValuePattern> headerPatterns = new LinkedHashMap<>();
   private List<ContentPattern<?>> bodyPatterns = new LinkedList<>();
   private MultipartValuePattern.MatchingType matchingType = MultipartValuePattern.MatchingType.ANY;
 

File: src/main/java/com/github/tomakehurst/wiremock/recording/RecordSpecBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,12 +15,12 @@
  */
 package com.github.tomakehurst.wiremock.recording;
 
-import static com.google.common.collect.Maps.newLinkedHashMap;
 import static java.util.Arrays.asList;
 
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -30,7 +30,7 @@ public class RecordSpecBuilder {
   private String targetBaseUrl;
   private RequestPatternBuilder filterRequestPatternBuilder;
   private List<UUID> filterIds;
-  private Map<String, CaptureHeadersSpec> headers = newLinkedHashMap();
+  private Map<String, CaptureHeadersSpec> headers = new LinkedHashMap<>();
   private RequestBodyPatternFactory requestBodyPatternFactory;
   private long maxTextBodySize = ResponseDefinitionBodyMatcher.DEFAULT_MAX_TEXT_SIZE;
   private long maxBinaryBodySize = ResponseDefinitionBodyMatcher.DEFAULT_MAX_BINARY_SIZE;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/MockRequestBuilder.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.github.tomakehurst.wiremock.http.HttpHeader.httpHeader;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
-import static com.google.common.collect.Maps.newHashMap;
 import static org.mockito.Mockito.when;
 
 import com.github.tomakehurst.wiremock.http.*;
@@ -30,7 +29,7 @@ public class MockRequestBuilder {
   private RequestMethod method = GET;
   private String clientIp = "x.x.x.x";
   private List<HttpHeader> individualHeaders = new ArrayList<>();
-  private Map<String, Cookie> cookies = newHashMap();
+  private Map<String, Cookie> cookies = new HashMap<>();
   private List<QueryParameter> queryParameters = new ArrayList<>();
 
   private List<FormParameter> formParameters = new ArrayList<>();

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -150,7 +150,7 @@ public class WireMockConfiguration implements Options {
   private boolean globalTemplating = false;
   private Set<String> permittedSystemKeys = null;
   private Long maxTemplateCacheEntries = null;
-  private boolean templateEscapingDisabled = false;
+  private boolean templateEscapingDisabled = true;
 
   private MappingsSource getMappingsSource() {
     if (mappingsSource == null) {

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -952,7 +952,7 @@ public Set<String> getTemplatePermittedSystemKeys() {
 
   @Override
   public boolean getTemplateEscapingDisabled() {
-    return false;
+    return true;
   }
 
   private boolean isAsynchronousResponseEnabled() {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplatedUrlPath.java
Patch:
@@ -30,7 +30,7 @@ public class TemplatedUrlPath extends LinkedHashMap<String, String> implements I
   public TemplatedUrlPath(String url, PathTemplate pathTemplate) {
     this.originalPath = URI.create(url).getPath();
     addAllPathSegments();
-    putAll(pathTemplate.parse(url));
+    putAll(pathTemplate.parse(originalPath));
   }
 
   private void addAllPathSegments() {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.extension.responsetemplating;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.jknack.handlebars.Handlebars;
 import com.github.jknack.handlebars.Helper;
@@ -97,7 +97,7 @@ public ResponseDefinition transform(
 
     final ImmutableMap<String, Object> model =
         ImmutableMap.<String, Object>builder()
-            .put("parameters", firstNonNull(parameters, Collections.<String, Object>emptyMap()))
+            .put("parameters", getFirstNonNull(parameters, Collections.<String, Object>emptyMap()))
             .put("request", RequestTemplateModel.from(request, pathTemplate))
             .putAll(addExtraModelElements(request, responseDefinition, files, parameters))
             .build();

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/FormDataHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.extension.responsetemplating.helpers;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.jknack.handlebars.Options;
 import com.github.tomakehurst.wiremock.common.ListOrSingle;
@@ -29,7 +29,7 @@ public Object apply(Object context, Options options) {
         FormParser.parse(
             context.toString(),
             Boolean.TRUE.equals(options.hash.get("urlDecode")),
-            firstNonNull(options.hash.get("encoding"), "utf-8").toString());
+            getFirstNonNull(options.hash.get("encoding"), "utf-8").toString());
 
     if (options.params.length > 0) {
       String variableName = options.param(0);

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsJsonPathHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.extension.responsetemplating.helpers;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.jknack.handlebars.Options;
 import com.github.tomakehurst.wiremock.extension.responsetemplating.RenderCache;
@@ -72,7 +72,7 @@ private Object getValue(JsonPath jsonPath, DocumentContext jsonDocument, Options
       }
 
       if (value == null) {
-        value = firstNonNull(defaultValue, "");
+        value = getFirstNonNull(defaultValue, "");
       }
 
       renderCache.put(cacheKey, value);

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.http;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static java.util.Arrays.asList;
 
 import com.google.common.collect.ImmutableList;
@@ -33,7 +33,7 @@ public HttpHeader(CaseInsensitiveKey key, Collection<String> values) {
   }
 
   public HttpHeader(String key, Collection<String> values) {
-    super(key, ImmutableList.copyOf(firstNonNull(values, Collections.<String>emptyList())));
+    super(key, ImmutableList.copyOf(getFirstNonNull(values, Collections.emptyList())));
   }
 
   public static HttpHeader httpHeader(CaseInsensitiveKey key, String... values) {

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/ManInTheMiddleSslConnectHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2022 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.jetty11;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import jakarta.servlet.http.HttpServletRequest;
 import java.io.Closeable;
@@ -45,7 +45,7 @@ protected void connectToServer(
       channel.socket().setTcpNoDelay(true);
       channel.configureBlocking(false);
 
-      String host = firstNonNull(mitmProxyConnector.getHost(), "localhost");
+      String host = getFirstNonNull(mitmProxyConnector.getHost(), "localhost");
       int port = mitmProxyConnector.getLocalPort();
       InetSocketAddress address = newConnectAddress(host, port);
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHandlerDispatchingServlet.java
Patch:
@@ -16,11 +16,11 @@
 package com.github.tomakehurst.wiremock.servlet;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy.BODY_FILE;
 import static com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy.NEVER;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
 import static com.github.tomakehurst.wiremock.servlet.WireMockHttpServletRequestAdapter.ORIGINAL_REQUEST_KEY;
-import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.net.HttpHeaders.CONTENT_LENGTH;
 import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
 import static java.net.URLDecoder.decode;
@@ -109,7 +109,7 @@ public void init(ServletConfig config) {
 
     browserProxyingEnabled =
         Boolean.parseBoolean(
-            firstNonNull(context.getAttribute("browserProxyingEnabled"), "false").toString());
+            getFirstNonNull(context.getAttribute("browserProxyingEnabled"), "false").toString());
   }
 
   private String getNormalizedMappedUnder(ServletConfig config) {

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockWebContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2022 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.servlet;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.common.Slf4jNotifier;
@@ -36,7 +36,7 @@ public void contextInitialized(ServletContextEvent sce) {
 
     boolean verboseLoggingEnabled =
         Boolean.parseBoolean(
-            firstNonNull(context.getInitParameter("verboseLoggingEnabled"), "true"));
+            getFirstNonNull(context.getInitParameter("verboseLoggingEnabled"), "true"));
 
     WireMockApp wireMockApp =
         new WireMockApp(new WarConfiguration(context), new NotImplementedContainer());

File: src/main/java/com/github/tomakehurst/wiremock/verification/LoggedRequest.java
Patch:
@@ -17,10 +17,10 @@
 
 import static com.github.tomakehurst.wiremock.common.Encoding.decodeBase64;
 import static com.github.tomakehurst.wiremock.common.Encoding.encodeBase64;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static com.github.tomakehurst.wiremock.common.Strings.stringFromBytes;
 import static com.github.tomakehurst.wiremock.common.Urls.safelyCreateURL;
 import static com.github.tomakehurst.wiremock.common.Urls.splitQueryFromUrl;
-import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.fasterxml.jackson.annotation.*;
@@ -269,12 +269,12 @@ public Set<String> getAllHeaderKeys() {
 
   @Override
   public QueryParameter queryParameter(String key) {
-    return firstNonNull(queryParams.get(key), QueryParameter.absent(key));
+    return getFirstNonNull(queryParams.get(key), QueryParameter.absent(key));
   }
 
   @Override
   public FormParameter formParameter(String key) {
-    return firstNonNull(formParameters.get(key), FormParameter.absent(key));
+    return getFirstNonNull(formParameters.get(key), FormParameter.absent(key));
   }
 
   @Override

File: src/test/java/com/github/tomakehurst/wiremock/PostServeActionExtensionTest.java
Patch:
@@ -18,9 +18,9 @@
 import static com.github.tomakehurst.wiremock.PostServeActionExtensionTest.CounterNameParameter.counterNameParameter;
 import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.responseDefinition;
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.common.ParameterUtils.getFirstNonNull;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
-import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static net.javacrumbs.jsonunit.JsonMatchers.jsonPartEquals;
 import static org.awaitility.Awaitility.await;
@@ -262,7 +262,7 @@ public void contributeAdminApiRoutes(Router router) {
           "/named-counter/{name}",
           (admin, request, pathParams) -> {
             String name = pathParams.get("name");
-            Integer count = firstNonNull(counters.get(name), 0);
+            Integer count = getFirstNonNull(counters.get(name), 0);
             return responseDefinition().withStatus(200).withBody(String.valueOf(count)).build();
           });
     }

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicMappingBuilder.java
Patch:
@@ -18,7 +18,6 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.collect.Lists.newArrayList;
 
 import com.github.tomakehurst.wiremock.common.Metadata;
 import com.github.tomakehurst.wiremock.extension.Parameters;
@@ -35,6 +34,7 @@
 import com.github.tomakehurst.wiremock.matching.UrlPattern;
 import com.github.tomakehurst.wiremock.matching.ValueMatcher;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -50,7 +50,7 @@ class BasicMappingBuilder implements ScenarioMappingBuilder {
   private UUID id = UUID.randomUUID();
   private String name;
   private Boolean isPersistent = null;
-  private List<PostServeActionDefinition> postServeActions = newArrayList();
+  private List<PostServeActionDefinition> postServeActions = new ArrayList<>();
   private Metadata metadata;
 
   BasicMappingBuilder(RequestMethod method, UrlPattern urlPattern) {

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/url/PathTemplate.java
Patch:
@@ -107,7 +107,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(templateString);
+    return Objects.hash(templateString);
   }
 }
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/Parameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2021 Thomas Akehurst
+ * Copyright (C) 2015-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.common.Metadata;
-import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -34,7 +33,7 @@ public static Parameters from(Map<String, Object> parameterMap) {
   }
 
   public static Parameters one(String name, Object value) {
-    return from(ImmutableMap.of(name, value));
+    return from(Map.of(name, value));
   }
 
   public static <T> Parameters of(T myData) {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -56,7 +56,7 @@ public ResponseTemplateTransformer(boolean global) {
   }
 
   public ResponseTemplateTransformer(boolean global, String helperName, Helper<?> helper) {
-    this(global, ImmutableMap.of(helperName, helper));
+    this(global, Map.of(helperName, helper));
   }
 
   public ResponseTemplateTransformer(boolean global, Map<String, Helper<?>> helpers) {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/SystemKeyAuthoriser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016-2022 Thomas Akehurst
+ * Copyright (C) 2016-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public class SystemKeyAuthoriser {
 
   public SystemKeyAuthoriser(Set<String> patterns) {
     if (patterns == null || patterns.isEmpty()) {
-      patterns = ImmutableSet.of("wiremock.*");
+      patterns = Set.of("wiremock.*");
     }
 
     ImmutableSet.Builder<Pattern> builder = ImmutableSet.builder();

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ArrayHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,13 +20,14 @@
 import com.github.jknack.handlebars.Options;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
+import java.util.List;
 
 public class ArrayHelper extends HandlebarsHelper<Object> {
 
   @Override
   public Object apply(Object context, Options options) throws IOException {
     if (context == null || context == options.context.model()) {
-      return ImmutableList.of();
+      return List.of();
     }
 
     return ImmutableList.builder().add(context).addAll(asList(options.params)).build();

File: src/main/java/com/github/tomakehurst/wiremock/http/AbstractRequestHandler.java
Patch:
@@ -17,19 +17,19 @@
 
 import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static com.github.tomakehurst.wiremock.extension.requestfilter.FilterProcessor.processFilters;
-import static com.google.common.collect.Lists.newArrayList;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
 import com.github.tomakehurst.wiremock.common.DataTruncationSettings;
 import com.github.tomakehurst.wiremock.extension.requestfilter.*;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.google.common.base.Stopwatch;
+import java.util.ArrayList;
 import java.util.List;
 
 public abstract class AbstractRequestHandler implements RequestHandler, RequestEventSource {
 
-  protected List<RequestListener> listeners = newArrayList();
+  protected List<RequestListener> listeners = new ArrayList<>();
   protected final ResponseRenderer responseRenderer;
   protected final List<RequestFilter> requestFilters;
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/MemoizingMatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/matching/SingleMatchMultiValuePattern.java
Patch:
@@ -69,6 +69,6 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(valuePattern);
+    return Objects.hash(valuePattern);
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePattern.java
Patch:
@@ -90,6 +90,6 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(expectedValue);
+    return Objects.hash(expectedValue);
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPattern.java
Patch:
@@ -18,7 +18,6 @@
 import com.fasterxml.jackson.annotation.JsonValue;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.url.PathTemplate;
-import java.util.Arrays;
 import java.util.Objects;
 
 public class UrlPattern implements NamedValueMatcher<String> {
@@ -97,8 +96,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    Object[] arr = {pattern, regex};
-    return Arrays.hashCode(arr);
+    return Objects.hash(pattern, regex);
   }
 
   public boolean isSpecified() {

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletRequestAdapter.java
Patch:
@@ -35,7 +35,6 @@
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.github.tomakehurst.wiremock.http.multipart.PartParser;
 import com.github.tomakehurst.wiremock.jetty.JettyUtils;
-import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMultimap;
@@ -44,6 +43,7 @@
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.*;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
 public class WireMockHttpServletRequestAdapter implements Request {

File: src/test/java/com/github/tomakehurst/wiremock/ConcurrentProxyingTest.java
Patch:
@@ -18,12 +18,12 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.testsupport.TestFiles.defaultTestFilesRoot;
-import static com.google.common.collect.Lists.newArrayList;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 import com.github.tomakehurst.wiremock.junit5.WireMockExtension;
 import com.github.tomakehurst.wiremock.testsupport.WireMockTestClient;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -57,7 +57,7 @@ public void concurrent() throws Exception {
 
     ExecutorService executor = Executors.newFixedThreadPool(20);
 
-    List<Future<?>> results = newArrayList();
+    List<Future<?>> results = new ArrayList<>();
     for (int i = 0; i < 100; i++) {
       results.add(
           executor.submit(

File: src/test/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSettingsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2018-2021 Thomas Akehurst
+ * Copyright (C) 2018-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/extension/ParametersTest.java
Patch:
@@ -20,17 +20,16 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.google.common.collect.ImmutableMap;
 import java.time.LocalDate;
+import java.util.Map;
 import org.junit.jupiter.api.Test;
 
 public class ParametersTest {
 
   @Test
   public void convertsParametersToAnObject() {
     MyData myData =
-        Parameters.from(ImmutableMap.of("name", "Tom", "num", 27, "date", "2023-01-01"))
-            .as(MyData.class);
+        Parameters.from(Map.of("name", "Tom", "num", 27, "date", "2023-01-01")).as(MyData.class);
 
     assertThat(myData.getName(), is("Tom"));
     assertThat(myData.getNum(), is(27));

File: src/test/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingPostProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,13 +23,12 @@
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.matching.MatchResult;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import com.google.common.collect.ImmutableList;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
 public class SnapshotStubMappingPostProcessorTest {
   private static final List<StubMapping> TEST_STUB_MAPPINGS =
-      ImmutableList.of(
+      List.of(
           WireMock.get("/foo").build(), WireMock.get("/bar").build(), WireMock.get("/foo").build());
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ResponseDefinitionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 import com.github.tomakehurst.wiremock.http.Fault;
 import com.github.tomakehurst.wiremock.http.HttpHeaders;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 import org.junit.jupiter.api.Test;
 import org.skyscreamer.jsonassert.JSONAssert;
 
@@ -53,7 +53,7 @@ public void copyProducesEqualObject() {
             "http://base.com",
             null,
             Fault.EMPTY_RESPONSE,
-            ImmutableList.of("transformer-1"),
+            List.of("transformer-1"),
             Parameters.one("name", "Jeff"),
             true);
 

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/TestFiles.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/github/tomakehurst/wiremock/verification/InMemoryRequestJournalTest.java
Patch:
@@ -26,7 +26,6 @@
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
-import com.google.common.collect.ImmutableMap;
 import java.util.Collections;
 import java.util.Map;
 import org.junit.jupiter.api.BeforeEach;
@@ -89,8 +88,7 @@ public void discardsOldRequestsWhenJournalSizeIsLimited() throws Exception {
 
   @Test
   public void matchesRequestWithCustomMatcherDefinition() throws Exception {
-    RequestJournal journal =
-        new InMemoryRequestJournal(null, ImmutableMap.of(ALWAYS.getName(), ALWAYS));
+    RequestJournal journal = new InMemoryRequestJournal(null, Map.of(ALWAYS.getName(), ALWAYS));
 
     journal.requestReceived(serveEvent1);
     journal.requestReceived(serveEvent2);

File: src/test/java/ignored/Examples.java
Patch:
@@ -44,8 +44,8 @@
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
-import com.google.common.collect.ImmutableMap;
 import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 import org.junit.jupiter.api.Test;
 
@@ -296,14 +296,14 @@ public void transformerParameters() {
             .willReturn(
                 aResponse()
                     .withTransformerParameter("newValue", 66)
-                    .withTransformerParameter("inner", ImmutableMap.of("thing", "value"))));
+                    .withTransformerParameter("inner", Map.of("thing", "value"))));
 
     System.out.println(
         get(urlEqualTo("/transform"))
             .willReturn(
                 aResponse()
                     .withTransformerParameter("newValue", 66)
-                    .withTransformerParameter("inner", ImmutableMap.of("thing", "value")))
+                    .withTransformerParameter("inner", Map.of("thing", "value")))
             .build());
   }
 

File: wiremock-webhooks-extension/src/main/java/org/wiremock/webhooks/WebhookDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 package org.wiremock.webhooks;
 
 import static com.github.tomakehurst.wiremock.common.Encoding.decodeBase64;
-import static com.google.common.collect.Lists.newArrayList;
 import static java.util.Collections.singletonList;
 
 import com.fasterxml.jackson.annotation.*;
@@ -175,7 +174,7 @@ public WebhookDefinition withHeaders(List<HttpHeader> headers) {
 
   public WebhookDefinition withHeader(String key, String... values) {
     if (headers == null) {
-      headers = newArrayList();
+      headers = new ArrayList<>();
     }
 
     headers.add(new HttpHeader(key, values));

File: src/main/java/com/github/tomakehurst/wiremock/matching/LogicalAnd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/matching/LogicalOr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public LogicalOr(@JsonProperty("or") List<StringValuePattern> operands) {
     super(
         operands.stream()
             .findFirst()
-            .map(ContentPattern::getValue)
+            .map(ContentPattern::getExpected)
             .orElseThrow(
                 () ->
                     new IllegalArgumentException(

File: src/main/java/com/github/tomakehurst/wiremock/extension/GlobalSettingsListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2021 Thomas Akehurst
+ * Copyright (C) 2014-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,8 @@
 
 public interface GlobalSettingsListener extends Extension {
 
-  default void beforeGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings) {}
+  default void beforeGlobalSettingsUpdated(
+      GlobalSettings oldSettings, GlobalSettings newSettings) {}
 
   default void afterGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings) {}
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.common.xml.Xml;
+import com.github.tomakehurst.wiremock.stubbing.SubEvent;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import java.util.*;
@@ -137,6 +138,8 @@ public boolean isExactMatch() {
 
           return !diff.hasDifferences();
         } catch (XMLUnitException e) {
+          appendSubEvent(SubEvent.warning(e.getMessage()));
+
           notifier()
               .info(
                   "Failed to process XML. "

File: src/main/java/com/github/tomakehurst/wiremock/extension/GlobalSettingsListener.java
Patch:
@@ -19,7 +19,7 @@
 
 public interface GlobalSettingsListener extends Extension {
 
-  void beforeGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
+  default void beforeGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings) {}
 
-  void afterGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
+  default void afterGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings) {}
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/NotPattern.java
Patch:
@@ -22,7 +22,7 @@ public class NotPattern extends StringValuePattern {
   private StringValuePattern unexpectedPattern;
 
   public NotPattern(@JsonProperty("not") StringValuePattern unexpectedPattern) {
-    super(unexpectedPattern.expectedValue);
+    super(unexpectedPattern.getExpected());
     this.unexpectedPattern = unexpectedPattern;
   }
 

File: src/main/java/com/github/tomakehurst/wiremock/http/Body.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2022 Thomas Akehurst
+ * Copyright (C) 2015-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hash(content, binary);
+    return Objects.hash(Arrays.hashCode(content), binary);
   }
 
   @Override

File: src/test/java/com/github/tomakehurst/wiremock/matching/RequestPatternBuilderTest.java
Patch:
@@ -62,6 +62,7 @@ public void likeRequestPatternWithoutCustomMatcher() {
             ImmutableMap.of("X-Header", MultiValuePattern.of(WireMock.equalTo("bar"))),
             emptyMap(),
             ImmutableMap.of("query_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
+            ImmutableMap.of("form_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
             ImmutableMap.of("cookie", WireMock.equalTo("yum")),
             new BasicCredentials("user", "pass"),
             ImmutableList.<ContentPattern<?>>of(WireMock.equalTo("BODY")),
@@ -121,6 +122,7 @@ public void likeRequestPatternWithoutMultipartMatcher() {
             ImmutableMap.of("X-Header", MultiValuePattern.of(WireMock.equalTo("bar"))),
             emptyMap(),
             ImmutableMap.of("query_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
+            ImmutableMap.of("form_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
             ImmutableMap.of("cookie", WireMock.equalTo("yum")),
             new BasicCredentials("user", "pass"),
             ImmutableList.<ContentPattern<?>>of(WireMock.equalTo("BODY")),

File: src/test/java/com/github/tomakehurst/wiremock/SnapshotDslAcceptanceTest.java
Patch:
@@ -193,7 +193,7 @@ public void supportsRequestHeaderCriteria() {
   }
 
   @Test
-  public void supportsBodyExtractCriteria() throws Exception {
+  public void supportsBodyExtractCriteria() {
     targetService.stubFor(
         get("/small/text")
             .willReturn(aResponse().withHeader("Content-Type", "text/plain").withBody("123")));
@@ -230,13 +230,13 @@ public void supportsBodyExtractCriteria() throws Exception {
         nullValue());
     assertThat(
         WireMatchers.findMappingWithUrl(mappings, "/large/text").getResponse().getBodyFileName(),
-        containsString("large_text"));
+        startsWith("large_text"));
     assertThat(
         WireMatchers.findMappingWithUrl(mappings, "/small/binary").getResponse().getBodyFileName(),
         nullValue());
     assertThat(
         WireMatchers.findMappingWithUrl(mappings, "/large/binary").getResponse().getBodyFileName(),
-        containsString("large_binary"));
+        startsWith("large_binary"));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -355,8 +355,10 @@ private void addBodySection(
           }
         } else if (StringValuePattern.class.isAssignableFrom(pattern.getClass())) {
           StringValuePattern stringValuePattern = (StringValuePattern) pattern;
+          String printedPatternValue = "[" + pattern.getName() + "]\n" + pattern.getExpected();
           builder.add(
-              new DiffLine<>("Body", stringValuePattern, formattedBody, pattern.getExpected()));
+              new DiffLine<>(
+                  "Body", stringValuePattern, "\n" + formattedBody, printedPatternValue));
         } else {
           BinaryEqualToPattern nonStringPattern = (BinaryEqualToPattern) pattern;
           builder.add(

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSource.java
Patch:
@@ -37,7 +37,7 @@ protected KeyStoreSource(String keyStoreType, char[] keyStorePassword) {
   public KeyStore load() {
     InputStream instream = null;
     try {
-      KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
+      KeyStore trustStore = KeyStore.getInstance(keyStoreType);
       instream = createInputStream();
       trustStore.load(instream, keyStorePassword);
       return trustStore;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/TestFiles.java
Patch:
@@ -28,6 +28,7 @@ public class TestFiles {
 
   public static final String TRUST_STORE_PASSWORD = "mytruststorepassword";
   public static final String TRUST_STORE_NAME = getTrustStoreRelativeName();
+  public static final String JCEKS_TRUST_STORE_NAME = "test-truststore.jceks";
   public static final String TRUST_STORE_PATH = filePath(TRUST_STORE_NAME);
   public static final String KEY_STORE_PATH = filePath("test-keystore");
   public static final String KEY_STORE_WITH_CA_PATH = filePath("test-keystore-with-ca");

File: src/test/java/com/github/tomakehurst/wiremock/direct/DirectCallHttpServerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,15 +63,15 @@ void publicConstructor() {
   class Start {
     @Test
     void doesNothing() {
-      assertDoesNotThrow(() -> server.start());
+      assertDoesNotThrow(server::start);
     }
   }
 
   @Nested
   class Stop {
     @Test
     void doesNothing() {
-      assertDoesNotThrow(() -> server.start());
+      assertDoesNotThrow(server::start);
     }
   }
 

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -67,9 +67,7 @@ public Response render(ServeEvent serveEvent) {
 
   private Response buildResponse(ServeEvent serveEvent) {
     if (serveEvent.getResponseDefinition().isProxyResponse()) {
-      return settingsStore.get().getProxyPassThrough()
-          ? proxyResponseRenderer.render(serveEvent)
-          : Response.notConfigured();
+      return proxyResponseRenderer.render(serveEvent);
     } else {
       Response.Builder responseBuilder = renderDirectly(serveEvent);
       return responseBuilder.build();

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/Diff.java
Patch:
@@ -124,7 +124,8 @@ public List<DiffLine<?>> getLines(Map<String, RequestMatcherExtension> customMat
     final Map<String, StringValuePattern> pathParameters = requestPattern.getPathParameters();
     if (urlPattern instanceof UrlPathTemplatePattern
         && pathParameters != null
-        && !pathParameters.isEmpty()) {
+        && !pathParameters.isEmpty()
+        && !urlSection.isForNonMatch()) {
       final UrlPathTemplatePattern urlPathTemplatePattern =
           (UrlPathTemplatePattern) requestPattern.getUrlMatcher();
       final PathTemplate pathTemplate = urlPathTemplatePattern.getPathTemplate();

File: src/main/java/com/github/tomakehurst/wiremock/common/ClasspathFileSource.java
Patch:
@@ -76,7 +76,7 @@ public ClasspathFileSource(ClassLoader classLoader, String path) {
       } else if (pathUri.getScheme().equals("file")) {
         rootDirectory = new File(pathUri);
       } else {
-        throw new RuntimeException(
+        throw new IllegalArgumentException(
             "ClasspathFileSource can't handle paths of type " + pathUri.getScheme());
       }
 

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertificateAuthority.java
Patch:
@@ -52,6 +52,7 @@ public static CertificateAuthority generateCertificateAuthority()
           makeX509CertInfo(
               sigAlg,
               "WireMock Local Self Signed Root Certificate",
+              ZonedDateTime.now().minus(Period.ofDays(1)),
               Period.ofYears(10),
               pair.getPublic(),
               certificateAuthorityExtensions(pair.getPublic()));
@@ -125,6 +126,7 @@ CertChainAndKey generateCertificate(String keyType, SNIHostName hostName)
           makeX509CertInfo(
               sigAlg,
               hostName.getAsciiName(),
+              ZonedDateTime.now().minus(Period.ofDays(1)),
               Period.ofYears(1),
               pair.getPublic(),
               subjectAlternativeName(hostName));
@@ -168,11 +170,11 @@ private static KeyPair generateKeyPair(String keyType) throws NoSuchAlgorithmExc
   private static X509CertInfo makeX509CertInfo(
       String sigAlg,
       String subjectName,
+      ZonedDateTime start,
       Period validity,
       PublicKey publicKey,
       CertificateExtensions certificateExtensions)
       throws IOException, CertificateException, NoSuchAlgorithmException {
-    ZonedDateTime start = ZonedDateTime.now();
     ZonedDateTime end = start.plus(validity);
 
     X500Name myname = new X500Name("CN=" + subjectName);

File: src/test/java/com/github/tomakehurst/wiremock/matching/RequestPatternBuilderTest.java
Patch:
@@ -18,6 +18,7 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.aMultipart;
 import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;
 import static java.util.Arrays.asList;
+import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonList;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
@@ -59,7 +60,7 @@ public void likeRequestPatternWithoutCustomMatcher() {
             WireMock.urlEqualTo("/foo"),
             RequestMethod.POST,
             ImmutableMap.of("X-Header", MultiValuePattern.of(WireMock.equalTo("bar"))),
-            ImmutableMap.of("path_param", WireMock.equalTo("1234")),
+            emptyMap(),
             ImmutableMap.of("query_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
             ImmutableMap.of("cookie", WireMock.equalTo("yum")),
             new BasicCredentials("user", "pass"),
@@ -118,7 +119,7 @@ public void likeRequestPatternWithoutMultipartMatcher() {
             WireMock.urlEqualTo("/foo"),
             RequestMethod.POST,
             ImmutableMap.of("X-Header", MultiValuePattern.of(WireMock.equalTo("bar"))),
-            ImmutableMap.of("path_param", WireMock.equalTo("12345")),
+            emptyMap(),
             ImmutableMap.of("query_param", MultiValuePattern.of(WireMock.equalTo("bar"))),
             ImmutableMap.of("cookie", WireMock.equalTo("yum")),
             new BasicCredentials("user", "pass"),

File: src/main/java/com/github/tomakehurst/wiremock/common/ServletContextFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,8 +15,8 @@
  */
 package com.github.tomakehurst.wiremock.common;
 
+import jakarta.servlet.ServletContext;
 import java.io.File;
-import javax.servlet.ServletContext;
 
 public class ServletContextFileSource extends AbstractFileSource {
 

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@ public static KeyStoreSource getAppropriateForJreVersion(
       final Class<? extends KeyStoreSource> theClass =
           (Class<? extends KeyStoreSource>)
               Class.forName(
-                  "com.github.tomakehurst.wiremock.jetty94.WritableFileOrClasspathKeyStoreSource");
+                  "com.github.tomakehurst.wiremock.jetty11.WritableFileOrClasspathKeyStoreSource");
       return safelyGetConstructor(theClass, String.class, String.class, char[].class)
           .newInstance(path, keyStoreType, keyStorePassword);
     } catch (ClassNotFoundException

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -35,8 +35,8 @@
 import com.github.tomakehurst.wiremock.http.ThreadPoolFactory;
 import com.github.tomakehurst.wiremock.http.trafficlistener.DoNothingWiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
-import com.github.tomakehurst.wiremock.jetty9.JettyHttpServerFactory;
-import com.github.tomakehurst.wiremock.jetty9.QueuedThreadPoolFactory;
+import com.github.tomakehurst.wiremock.jetty.JettyHttpServerFactory;
+import com.github.tomakehurst.wiremock.jetty.QueuedThreadPoolFactory;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.security.BasicAuthenticator;
 import com.github.tomakehurst.wiremock.security.NoAuthenticator;

File: src/main/java/com/github/tomakehurst/wiremock/http/multipart/FileItemPartAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty/JettyHttpsFaultInjector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014-2021 Thomas Akehurst
+ * Copyright (C) 2014-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty9;
+package com.github.tomakehurst.wiremock.jetty;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 
 import com.github.tomakehurst.wiremock.core.FaultInjector;
 import com.google.common.base.Charsets;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.net.Socket;
-import javax.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Response;
 import org.eclipse.jetty.util.BufferUtil;
 import org.eclipse.jetty.util.Callback;

File: src/main/java/com/github/tomakehurst/wiremock/jetty/QueuedThreadPoolFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty9;
+package com.github.tomakehurst.wiremock.jetty;
 
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.http.ThreadPoolFactory;

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/CertificateGeneratingSslContextFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty94;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static java.util.Arrays.stream;
 import static java.util.Objects.requireNonNull;

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/SslContexts.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty94;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty11/WritableFileOrClasspathKeyStoreSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty94;
+package com.github.tomakehurst.wiremock.jetty11;
 
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static java.nio.file.attribute.PosixFilePermission.*;

File: src/main/java/com/github/tomakehurst/wiremock/servlet/FaultInjectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2021 Thomas Akehurst
+ * Copyright (C) 2013-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,8 @@
 package com.github.tomakehurst.wiremock.servlet;
 
 import com.github.tomakehurst.wiremock.core.FaultInjector;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 
 public interface FaultInjectorFactory {
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/MultipartRequestConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.servlet;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 
 public interface MultipartRequestConfigurer {
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/NoFaultInjector.java
Patch:
@@ -18,8 +18,8 @@
 import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 
 import com.github.tomakehurst.wiremock.core.FaultInjector;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import javax.servlet.http.HttpServletResponse;
 
 public class NoFaultInjector implements FaultInjector {
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/NoFaultInjectorFactory.java
Patch:
@@ -16,8 +16,8 @@
 package com.github.tomakehurst.wiremock.servlet;
 
 import com.github.tomakehurst.wiremock.core.FaultInjector;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 
 public class NoFaultInjectorFactory implements FaultInjectorFactory {
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WarConfiguration.java
Patch:
@@ -36,10 +36,10 @@
 import com.github.tomakehurst.wiremock.verification.notmatched.NotMatchedRenderer;
 import com.github.tomakehurst.wiremock.verification.notmatched.PlainTextStubNotMatchedRenderer;
 import com.google.common.base.Optional;
+import jakarta.servlet.ServletContext;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import javax.servlet.ServletContext;
 
 public class WarConfiguration implements Options {
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletMultipartAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2021 Thomas Akehurst
+ * Copyright (C) 2013-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,9 +21,9 @@
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.io.ByteStreams;
+import jakarta.servlet.http.Part;
 import java.io.IOException;
 import java.util.Collection;
-import javax.servlet.http.Part;
 
 public class WireMockHttpServletMultipartAdapter implements Request.Part {
 

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -38,7 +38,7 @@
 import com.github.tomakehurst.wiremock.http.trafficlistener.ConsoleNotifyingWiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.http.trafficlistener.DoNothingWiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
-import com.github.tomakehurst.wiremock.jetty9.QueuedThreadPoolFactory;
+import com.github.tomakehurst.wiremock.jetty.QueuedThreadPoolFactory;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.security.BasicAuthenticator;
 import com.github.tomakehurst.wiremock.security.NoAuthenticator;
@@ -456,7 +456,7 @@ public HttpServerFactory httpServerFactory() {
     try {
       ClassLoader loader = Thread.currentThread().getContextClassLoader();
       Class<?> cls =
-          loader.loadClass("com.github.tomakehurst.wiremock.jetty9.JettyHttpServerFactory");
+          loader.loadClass("com.github.tomakehurst.wiremock.jetty.JettyHttpServerFactory");
       return (HttpServerFactory) cls.getDeclaredConstructor().newInstance();
     } catch (Exception e) {
       return throwUnchecked(e, null);

File: src/test/java/com/github/tomakehurst/wiremock/StandaloneAcceptanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -197,7 +197,7 @@ public void servesXmlIndexFileWhenTrailingSlashPresent() {
     WireMockResponse response = testClient.get("/json/34567/");
     assertThat(response.statusCode(), is(200));
     assertThat(response.content(), is("<blob>BLAB</blob>"));
-    assertThat(response.firstHeader("Content-Type"), is("application/xml"));
+    assertThat(response.firstHeader("Content-Type"), is("application/xml;charset=utf-8"));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/MockRequest.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.http.*;
-import com.github.tomakehurst.wiremock.jetty9.MultipartParser;
+import com.github.tomakehurst.wiremock.jetty11.MultipartParser;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleStubMappingResult.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import com.google.common.base.Optional;
+import java.util.Optional;
 
 public class SingleStubMappingResult extends SingleItemResult<StubMapping> {
 
@@ -27,6 +27,6 @@ public SingleStubMappingResult(StubMapping item) {
   }
 
   public static SingleStubMappingResult fromOptional(Optional<StubMapping> optional) {
-    return new SingleStubMappingResult(optional.orNull());
+    return new SingleStubMappingResult(optional.orElse(null));
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -122,7 +122,7 @@ public HttpAdminClient(
     this.hostHeader = hostHeader;
     this.authenticator = authenticator;
 
-    adminRoutes = AdminRoutes.defaults();
+    adminRoutes = AdminRoutes.forClient();
 
     httpClient = HttpClientFactory.createClient(createProxySettings(proxyHost, proxyPort));
   }

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -23,6 +23,7 @@
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
+import com.github.tomakehurst.wiremock.store.Stores;
 import com.github.tomakehurst.wiremock.verification.notmatched.NotMatchedRenderer;
 import com.google.common.base.Optional;
 import java.util.List;
@@ -60,6 +61,8 @@ enum ChunkedEncodingPolicy {
 
   ProxySettings proxyVia();
 
+  Stores getStores();
+
   FileSource filesRoot();
 
   MappingsLoader mappingsLoader();

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -121,7 +121,8 @@ public InputStream getBodyStream() {
   }
 
   public boolean hasInlineBody() {
-    return !BinaryFile.class.isAssignableFrom(bodyStreamSource.getClass());
+    return StreamSources.ByteArrayInputStreamSource.class.isAssignableFrom(
+        bodyStreamSource.getClass());
   }
 
   public HttpHeaders getHeaders() {

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
-import com.google.common.base.Optional;
 import java.util.List;
+import java.util.Optional;
 import java.util.UUID;
 
 public interface StubMappings {

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -34,8 +34,8 @@
 import com.github.tomakehurst.wiremock.crypto.InMemoryKeyStore;
 import com.github.tomakehurst.wiremock.crypto.Secret;
 import com.github.tomakehurst.wiremock.crypto.X509CertificateSpecification;
-import com.github.tomakehurst.wiremock.global.GlobalSettingsHolder;
 import com.github.tomakehurst.wiremock.junit5.WireMockExtension;
+import com.github.tomakehurst.wiremock.store.InMemorySettingsStore;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
@@ -344,7 +344,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
         KeyStoreSettings.NO_STORE,
         /* preserveHostHeader = */ false,
         /* hostHeaderValue = */ null,
-        new GlobalSettingsHolder(),
+        new InMemorySettingsStore(),
         trustAllProxyTargets,
         Collections.<String>emptyList(),
         stubCorsEnabled,

File: src/test/java/com/github/tomakehurst/wiremock/jetty11/JettyHttpServerTest.java
Patch:
@@ -54,7 +54,7 @@ public void init() {
 
     adminRequestHandler =
         new AdminRequestHandler(
-            AdminRoutes.defaults(),
+            AdminRoutes.forClient(),
             admin,
             new BasicResponseRenderer(),
             new NoAuthenticator(),

File: src/test/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingBodyExtractorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
 
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.FileSource;
+import com.github.tomakehurst.wiremock.store.files.FileSourceBlobStore;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -37,7 +38,7 @@ public class SnapshotStubMappingBodyExtractorTest {
   @BeforeEach
   public void init() {
     filesSource = Mockito.mock(FileSource.class, "filesFileSource");
-    bodyExtractor = new SnapshotStubMappingBodyExtractor(filesSource);
+    bodyExtractor = new SnapshotStubMappingBodyExtractor(new FileSourceBlobStore(filesSource));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/standalone/JsonFileMappingsSourceTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.tomakehurst.wiremock.common.NotWritableException;
 import com.github.tomakehurst.wiremock.common.SingleRootFileSource;
 import com.github.tomakehurst.wiremock.stubbing.InMemoryStubMappings;
+import com.github.tomakehurst.wiremock.stubbing.StoreBackedStubMappings;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.google.common.io.Files;
 import java.io.File;
@@ -42,7 +43,7 @@ public class JsonFileMappingsSourceTest {
 
   @TempDir public File tempDir;
 
-  InMemoryStubMappings stubMappings;
+  StoreBackedStubMappings stubMappings;
   JsonFileMappingsSource source;
   File stubMappingFile;
 
@@ -72,7 +73,7 @@ private void load() {
   public void loadsMappingsViaClasspathFileSource() {
     ClasspathFileSource fileSource = new ClasspathFileSource("jar-filesource");
     JsonFileMappingsSource source = new JsonFileMappingsSource(fileSource);
-    InMemoryStubMappings stubMappings = new InMemoryStubMappings();
+    StoreBackedStubMappings stubMappings = new InMemoryStubMappings();
 
     source.loadMappingsInto(stubMappings);
 

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/AdminRequestHandlerTest.java
Patch:
@@ -57,7 +57,7 @@ public void init() {
 
     handler =
         new AdminRequestHandler(
-            AdminRoutes.defaults(),
+            AdminRoutes.forClient(),
             admin,
             new BasicResponseRenderer(),
             new NoAuthenticator(),

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/InMemoryMappingsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 
 public class InMemoryMappingsTest {
 
-  private InMemoryStubMappings mappings;
+  private StoreBackedStubMappings mappings;
 
   @BeforeEach
   public void init() {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/InMemoryStubMappingsTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class InMemoryStubMappingsTest {
 
-  private InMemoryStubMappings inMemoryStubMappings;
+  private StoreBackedStubMappings inMemoryStubMappings;
 
   @BeforeEach
   public void setUp() throws Exception {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ScenariosTest.java
Patch:
@@ -31,7 +31,7 @@ public class ScenariosTest {
 
   @BeforeEach
   public void init() {
-    scenarios = new Scenarios();
+    scenarios = new InMemoryScenarios();
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/core/Admin.java
Patch:
@@ -36,6 +36,8 @@ public interface Admin {
 
   void removeStubMapping(StubMapping stubbMapping);
 
+  void removeStubMapping(UUID id);
+
   ListStubMappingsResult listAllStubMappings();
 
   SingleStubMappingResult getStubMapping(UUID id);

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -111,4 +111,6 @@ enum ChunkedEncodingPolicy {
   boolean getDisableStrictHttpHeaders();
 
   DataTruncationSettings getDataTruncationSettings();
+
+  NetworkAddressRules getProxyTargetRules();
 }

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenarios.java
Patch:
@@ -48,7 +48,7 @@ public void onStubMappingAdded(StubMapping mapping) {
 
   public void onStubMappingUpdated(StubMapping oldMapping, StubMapping newMapping) {
     if (oldMapping.isInScenario()
-        && !newMapping.getScenarioName().equals(oldMapping.getScenarioName())) {
+        && !oldMapping.getScenarioName().equals(newMapping.getScenarioName())) {
       Scenario scenarioForOldMapping =
           scenarioMap.get(oldMapping.getScenarioName()).withoutStubMapping(oldMapping);
 

File: src/test/java/com/github/tomakehurst/wiremock/http/BodyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015-2021 Thomas Akehurst
+ * Copyright (C) 2015-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.IntNode;
 import com.github.tomakehurst.wiremock.common.Json;
-import org.apache.commons.codec.binary.Base64;
+import com.google.common.io.BaseEncoding;
 import org.junit.jupiter.api.Test;
 
 public class BodyTest {
@@ -58,7 +58,7 @@ public void constructsFromJson() {
 
   @Test
   public void constructsFromBase64() {
-    byte[] base64Encoded = Base64.encodeBase64("this content".getBytes());
+    byte[] base64Encoded = BaseEncoding.base64().encode("this content".getBytes()).getBytes();
     String encodedText = stringFromBytes(base64Encoded);
     Body body = Body.fromOneOf(null, null, null, encodedText);
 

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.http;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.common.NetworkAddressRules.ALLOW_ALL;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static com.github.tomakehurst.wiremock.crypto.X509CertificateVersion.V3;
 import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;
@@ -346,7 +347,8 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
         new GlobalSettingsHolder(),
         trustAllProxyTargets,
         Collections.<String>emptyList(),
-        stubCorsEnabled);
+        stubCorsEnabled,
+        ALLOW_ALL);
   }
 
   // Just exists to make the compiler happy by having the throws clause

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleStubMappingResult.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import com.google.common.base.Optional;
+import java.util.Optional;
 
 public class SingleStubMappingResult extends SingleItemResult<StubMapping> {
 
@@ -27,6 +27,6 @@ public SingleStubMappingResult(StubMapping item) {
   }
 
   public static SingleStubMappingResult fromOptional(Optional<StubMapping> optional) {
-    return new SingleStubMappingResult(optional.orNull());
+    return new SingleStubMappingResult(optional.orElse(null));
   }
 }

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -122,7 +122,7 @@ public HttpAdminClient(
     this.hostHeader = hostHeader;
     this.authenticator = authenticator;
 
-    adminRoutes = AdminRoutes.defaults();
+    adminRoutes = AdminRoutes.forClient();
 
     httpClient = HttpClientFactory.createClient(createProxySettings(proxyHost, proxyPort));
   }

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -23,6 +23,7 @@
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
+import com.github.tomakehurst.wiremock.store.Stores;
 import com.github.tomakehurst.wiremock.verification.notmatched.NotMatchedRenderer;
 import com.google.common.base.Optional;
 import java.util.List;
@@ -60,6 +61,8 @@ enum ChunkedEncodingPolicy {
 
   ProxySettings proxyVia();
 
+  Stores getStores();
+
   FileSource filesRoot();
 
   MappingsLoader mappingsLoader();

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -121,7 +121,8 @@ public InputStream getBodyStream() {
   }
 
   public boolean hasInlineBody() {
-    return !BinaryFile.class.isAssignableFrom(bodyStreamSource.getClass());
+    return StreamSources.ByteArrayInputStreamSource.class.isAssignableFrom(
+        bodyStreamSource.getClass());
   }
 
   public HttpHeaders getHeaders() {

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
-import com.google.common.base.Optional;
 import java.util.List;
+import java.util.Optional;
 import java.util.UUID;
 
 public interface StubMappings {

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -34,8 +34,8 @@
 import com.github.tomakehurst.wiremock.crypto.InMemoryKeyStore;
 import com.github.tomakehurst.wiremock.crypto.Secret;
 import com.github.tomakehurst.wiremock.crypto.X509CertificateSpecification;
-import com.github.tomakehurst.wiremock.global.GlobalSettingsHolder;
 import com.github.tomakehurst.wiremock.junit5.WireMockExtension;
+import com.github.tomakehurst.wiremock.store.InMemorySettingsStore;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
@@ -344,7 +344,7 @@ private ProxyResponseRenderer buildProxyResponseRenderer(
         KeyStoreSettings.NO_STORE,
         /* preserveHostHeader = */ false,
         /* hostHeaderValue = */ null,
-        new GlobalSettingsHolder(),
+        new InMemorySettingsStore(),
         trustAllProxyTargets,
         Collections.<String>emptyList(),
         stubCorsEnabled,

File: src/test/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerTest.java
Patch:
@@ -52,7 +52,7 @@ public void init() {
 
     adminRequestHandler =
         new AdminRequestHandler(
-            AdminRoutes.defaults(),
+            AdminRoutes.forClient(),
             admin,
             new BasicResponseRenderer(),
             new NoAuthenticator(),

File: src/test/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingBodyExtractorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
 
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.FileSource;
+import com.github.tomakehurst.wiremock.store.files.FileSourceBlobStore;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -37,7 +38,7 @@ public class SnapshotStubMappingBodyExtractorTest {
   @BeforeEach
   public void init() {
     filesSource = Mockito.mock(FileSource.class, "filesFileSource");
-    bodyExtractor = new SnapshotStubMappingBodyExtractor(filesSource);
+    bodyExtractor = new SnapshotStubMappingBodyExtractor(new FileSourceBlobStore(filesSource));
   }
 
   @Test

File: src/test/java/com/github/tomakehurst/wiremock/standalone/JsonFileMappingsSourceTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.tomakehurst.wiremock.common.NotWritableException;
 import com.github.tomakehurst.wiremock.common.SingleRootFileSource;
 import com.github.tomakehurst.wiremock.stubbing.InMemoryStubMappings;
+import com.github.tomakehurst.wiremock.stubbing.StoreBackedStubMappings;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.google.common.io.Files;
 import java.io.File;
@@ -42,7 +43,7 @@ public class JsonFileMappingsSourceTest {
 
   @TempDir public File tempDir;
 
-  InMemoryStubMappings stubMappings;
+  StoreBackedStubMappings stubMappings;
   JsonFileMappingsSource source;
   File stubMappingFile;
 
@@ -72,7 +73,7 @@ private void load() {
   public void loadsMappingsViaClasspathFileSource() {
     ClasspathFileSource fileSource = new ClasspathFileSource("jar-filesource");
     JsonFileMappingsSource source = new JsonFileMappingsSource(fileSource);
-    InMemoryStubMappings stubMappings = new InMemoryStubMappings();
+    StoreBackedStubMappings stubMappings = new InMemoryStubMappings();
 
     source.loadMappingsInto(stubMappings);
 

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/AdminRequestHandlerTest.java
Patch:
@@ -57,7 +57,7 @@ public void init() {
 
     handler =
         new AdminRequestHandler(
-            AdminRoutes.defaults(),
+            AdminRoutes.forClient(),
             admin,
             new BasicResponseRenderer(),
             new NoAuthenticator(),

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/InMemoryMappingsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 
 public class InMemoryMappingsTest {
 
-  private InMemoryStubMappings mappings;
+  private StoreBackedStubMappings mappings;
 
   @BeforeEach
   public void init() {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/InMemoryStubMappingsTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class InMemoryStubMappingsTest {
 
-  private InMemoryStubMappings inMemoryStubMappings;
+  private StoreBackedStubMappings inMemoryStubMappings;
 
   @BeforeEach
   public void setUp() throws Exception {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ScenariosTest.java
Patch:
@@ -31,7 +31,7 @@ public class ScenariosTest {
 
   @BeforeEach
   public void init() {
-    scenarios = new Scenarios();
+    scenarios = new InMemoryScenarios();
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenarios.java
Patch:
@@ -48,7 +48,7 @@ public void onStubMappingAdded(StubMapping mapping) {
 
   public void onStubMappingUpdated(StubMapping oldMapping, StubMapping newMapping) {
     if (oldMapping.isInScenario()
-        && !newMapping.getScenarioName().equals(oldMapping.getScenarioName())) {
+        && !oldMapping.getScenarioName().equals(newMapping.getScenarioName())) {
       Scenario scenarioForOldMapping =
           scenarioMap.get(oldMapping.getScenarioName()).withoutStubMapping(oldMapping);
 

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenarios.java
Patch:
@@ -48,7 +48,7 @@ public void onStubMappingAdded(StubMapping mapping) {
 
   public void onStubMappingUpdated(StubMapping oldMapping, StubMapping newMapping) {
     if (oldMapping.isInScenario()
-        && !newMapping.getScenarioName().equals(oldMapping.getScenarioName())) {
+        && !oldMapping.getScenarioName().equals(newMapping.getScenarioName())) {
       Scenario scenarioForOldMapping =
           scenarioMap.get(oldMapping.getScenarioName()).withoutStubMapping(oldMapping);
 

File: src/main/java/com/github/tomakehurst/wiremock/core/Admin.java
Patch:
@@ -36,6 +36,8 @@ public interface Admin {
 
   void removeStubMapping(StubMapping stubbMapping);
 
+  void removeStubMapping(UUID id);
+
   ListStubMappingsResult listAllStubMappings();
 
   SingleStubMappingResult getStubMapping(UUID id);

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePatternJsonDeserializer.java
Patch:
@@ -49,6 +49,7 @@ public class StringValuePatternJsonDeserializer extends JsonDeserializer<StringV
           .put("equalToXml", EqualToXmlPattern.class)
           .put("matchesXPath", MatchesXPathPattern.class)
           .put("contains", ContainsPattern.class)
+          .put("doesNotContain", NegativeContainsPattern.class)
           .put("matches", RegexPattern.class)
           .put("doesNotMatch", NegativeRegexPattern.class)
           .put("before", BeforeDateTimePattern.class)

File: src/test/java/com/github/tomakehurst/wiremock/matching/RequestPatternTest.java
Patch:
@@ -458,6 +458,7 @@ public void doesNotMatchWhenRequiredAbsentCookieIsPresent() {
           + "        { \"equalToXml\": \"<thing />\" },             \n"
           + "        { \"matchesXPath\": \"//thing\" },             \n"
           + "        { \"contains\": \"thin\" },                    \n"
+          + "        { \"doesNotContain\": \"stuff\" },            \n"
           + "        { \"matches\": \".*thing.*\" },                \n"
           + "        { \"doesNotMatch\": \"^stuff.+\" }             \n"
           + "    ]                                                  \n"
@@ -476,6 +477,7 @@ public void correctlyDeserialisesBodyPatterns() {
             valuePattern(EqualToXmlPattern.class, "<thing />"),
             valuePattern(MatchesXPathPattern.class, "//thing"),
             valuePattern(ContainsPattern.class, "thin"),
+            valuePattern(NegativeContainsPattern.class, "stuff"),
             valuePattern(RegexPattern.class, ".*thing.*"),
             valuePattern(NegativeRegexPattern.class, "^stuff.+")));
   }
@@ -490,6 +492,7 @@ public void correctlySerialisesBodyPatterns() throws Exception {
             .withRequestBody(equalToXml("<thing />"))
             .withRequestBody(matchingXPath("//thing"))
             .withRequestBody(containing("thin"))
+            .withRequestBody(notContaining("stuff"))
             .withRequestBody(matching(".*thing.*"))
             .withRequestBody(notMatching("^stuff.+"))
             .build();

File: src/main/java/com/github/tomakehurst/wiremock/http/LoggedResponse.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.common.Encoding;
+import com.github.tomakehurst.wiremock.common.Limit;
 import com.github.tomakehurst.wiremock.common.Strings;
 import java.nio.charset.Charset;
 
@@ -46,13 +47,13 @@ private LoggedResponse(int status, HttpHeaders headers, byte[] body, Fault fault
     this.fault = fault;
   }
 
-  public static LoggedResponse from(Response response) {
+  public static LoggedResponse from(Response response, Limit responseBodySizeLimit) {
     return new LoggedResponse(
         response.getStatus(),
         response.getHeaders() == null || response.getHeaders().all().isEmpty()
             ? null
             : response.getHeaders(),
-        response.getBody(),
+        response.getBody(responseBodySizeLimit),
         response.getFault());
   }
 

File: src/test/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017-2021 Thomas Akehurst
+ * Copyright (C) 2017-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.recording;
 
+import static com.github.tomakehurst.wiremock.common.Limit.UNLIMITED;
 import static com.github.tomakehurst.wiremock.matching.RequestPatternBuilder.newRequestPattern;
 import static com.github.tomakehurst.wiremock.testsupport.MockRequestBuilder.aRequest;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -75,7 +76,7 @@ private static ServeEvent serveEvent() {
         LoggedRequest.createFrom(aRequest().build()),
         null,
         null,
-        LoggedResponse.from(Response.notConfigured()),
+        LoggedResponse.from(Response.notConfigured(), UNLIMITED),
         false,
         Timing.UNTIMED);
   }

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/StubRequestHandlerTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.stubbing;
 
+import static com.github.tomakehurst.wiremock.common.DataTruncationSettings.NO_TRUNCATION;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
 import static com.github.tomakehurst.wiremock.http.Response.response;
 import static com.github.tomakehurst.wiremock.matching.MockRequest.mockRequest;
@@ -67,7 +68,8 @@ public void init() {
             Collections.<String, PostServeAction>emptyMap(),
             requestJournal,
             Collections.<RequestFilter>emptyList(),
-            false);
+            false,
+            NO_TRUNCATION);
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/common/AbstractFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2021 Thomas Akehurst
+ * Copyright (C) 2012-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.List;
 
 public abstract class AbstractFileSource implements FileSource {
@@ -159,7 +160,7 @@ private void assertFilePathIsUnderRoot(String path) {
               ? new File(path).getCanonicalPath()
               : new File(rootDirectory, path).getCanonicalPath();
 
-      if (!filePath.startsWith(rootPath)) {
+      if (!Paths.get(filePath).normalize().startsWith(rootPath)) {
         throw new NotAuthorisedException("Access to file " + path + " is not permitted");
       }
     } catch (IOException ioe) {

File: src/main/java/com/github/tomakehurst/wiremock/jetty94/Jetty94HttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2019-2021 Thomas Akehurst
+ * Copyright (C) 2019-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -114,7 +114,7 @@ protected HandlerCollection createHandler(
         super.createHandler(options, adminRequestHandler, stubRequestHandler);
 
     if (options.browserProxySettings().enabled()) {
-      handler.addHandler(new ManInTheMiddleSslConnectHandler(mitmProxyConnector));
+      handler.prependHandler(new ManInTheMiddleSslConnectHandler(mitmProxyConnector));
     }
 
     return handler;

File: src/main/java/com/github/tomakehurst/wiremock/matching/AbstractDateTimeMatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ public boolean isExactMatch() {
 
   @Override
   public double getDistance() {
-    double distance = -1;
+    double distance = 1;
     if (isZoned && zonedActual != null) {
       distance = calculateDistance(zonedExpected, zonedActual);
     } else if (isLocal && localActual != null) {

File: src/main/java/com/github/tomakehurst/wiremock/http/AbstractRequestHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,6 +72,7 @@ public void handle(Request request, HttpResponder httpResponder) {
     ResponseDefinition responseDefinition = serveEvent.getResponseDefinition();
     responseDefinition.setOriginalRequest(processedRequest);
     Response response = responseRenderer.render(serveEvent);
+    response = Response.Builder.like(response).protocol(request.getProtocol()).build();
     ServeEvent completedServeEvent =
         serveEvent.complete(response, (int) stopwatch.elapsed(MILLISECONDS));
 

File: src/main/java/com/github/tomakehurst/wiremock/http/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -77,4 +77,6 @@ interface Part {
   boolean isBrowserProxyRequest();
 
   Optional<Request> getOriginalRequest();
+
+  String getProtocol();
 }

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -231,7 +231,8 @@ private ServeEvent serveEvent(String path, boolean isBrowserProxyRequest, byte[]
             /* isBrowserProxyRequest = */ isBrowserProxyRequest,
             /* loggedDate = */ new Date(),
             /* body = */ body,
-            /* multiparts = */ null);
+            /* multiparts = */ null,
+            /* protocol = */ "HTTP/1.1");
     ResponseDefinition responseDefinition = aResponse().proxiedFrom(origin.baseUrl()).build();
     responseDefinition.setOriginalRequest(loggedRequest);
 

File: src/test/java/com/github/tomakehurst/wiremock/direct/DirectCallHttpServerIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Thomas Akehurst
+ * Copyright (C) 2021-2022 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ void withDelay() {
     stopwatch.stop();
 
     assertEquals(200, response.getStatus());
-    assertThat(stopwatch.elapsed(MILLISECONDS), greaterThanOrEqualTo(500L));
+    assertThat(stopwatch.elapsed(MILLISECONDS), greaterThanOrEqualTo(499L));
   }
 
   @Test

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminUriTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/Conversions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/FindStubMappingsByMetadataTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetAllScenariosTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetGlobalSettingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/GetRecordingStatusTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/ImportStubMappingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/LimitAndOffsetPaginator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/LimitAndSinceDatePaginator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/NotFoundException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/Paginator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/PatchExtendedSettingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveServeEventTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveServeEventsByRequestPatternTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveServeEventsByStubMetadataTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/RemoveStubMappingsByMetadataTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/RequestSpec.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/Router.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/StartRecordingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/StopRecordingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/ExtendedSettingsWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/GetGlobalSettingsResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/GetScenariosResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/GetServeEventsResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/ListStubMappingsResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/PaginatedResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/PathParams.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/QueryParams.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/RequestJournalDependentResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/ServeEventQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleItemResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleServedStubResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SingleStubMappingResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/AbstractGetDocTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/CreateStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/DeleteStubFileTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/EditStubFileTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/EditStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindNearMissesForRequestPatternTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindNearMissesForRequestTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindNearMissesForUnmatchedTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindRequestsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/FindUnmatchedRequestsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetAllRequestsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetAllStubFilesTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetAllStubMappingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetCaCertTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetDocIndexTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetRecordingsIndexTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetRequestCountTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetServedStubTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GetSwaggerSpecTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/GlobalSettingsUpdateTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/NotFoundAdminTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldCreateStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldEditStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldRemoveStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldResetRequestsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RemoveStubMappingTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetRequestsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetScenariosTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetStubMappingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ResetToDefaultMappingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/RootRedirectTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/SaveMappingsTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/ShutdownServerTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/SnapshotTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicCredentials.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicMappingBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/CountMatchingMode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/CountMatchingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/ScenarioMappingBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMockBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/AbstractFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/AdminException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ArrayFunctions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/AsynchronousResponseSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Base64Encoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/BiPredicate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/BinaryFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/BrowserProxySettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ClasspathFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ConsoleNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ContentTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/DateTimeOffset.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/DateTimeParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/DateTimeTruncation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/DateTimeUnit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Dates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Encoding.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Errors.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Exceptions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/FatalStartupException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/FileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/GuavaBase64Encoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Gzip.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/HttpClientUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/HttpsSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/IdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/InputStreamSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/InvalidInputException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/InvalidParameterException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/JettySettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Json.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/JsonException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ListFunctions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ListOrSingle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ListOrSingleSerialiser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ListOrStringDeserialiser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/LocalNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Metadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/NotPermittedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/NotWritableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Notifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Pair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ProxySettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/SafeNames.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ServletContextFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/SilentErrorHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/SingleRootFileSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Slf4jNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Source.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/StreamSources.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Strings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/TextFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/TextType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Timing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/UniqueFilenameGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/Urls.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/VeryShortIdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/ReadOnlyFileOrClasspathKeyStoreSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/xml/XPathException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/xml/Xml.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/xml/XmlDocument.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/xml/XmlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/common/xml/XmlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/Admin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/ConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/Container.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/FaultInjector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/MappingsSaver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/StubServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2013-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/direct/DirectCallHttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/direct/DirectCallHttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/direct/SleepFacade.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/AbstractTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/AdminApiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/Extension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/ExtensionLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/GlobalSettingsListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/Parameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/PostServeAction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/PostServeActionDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/ResponseDefinitionTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/ResponseTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/StubLifecycleListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/StubMappingTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/AdminRequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/ContinueAction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/FieldTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/FilterProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/RequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/RequestFilterAction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/RequestWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/StopAction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/StubRequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/HandlebarsOptimizedTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/HttpTemplateCacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/RenderCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/RequestLine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/RequestTemplateModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/SystemKeyAuthoriser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/TemplateEngine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/UrlPath.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ArrayHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/Base64Helper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ContainsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/FormDataHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/FormParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsCurrentDateHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsJsonPathHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsRandomValuesHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsSoapHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsXPathHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HelperUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HostnameHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/JsonData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/MatchesRegexHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/MathsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ParseDateHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/ParseJsonHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/PickRandomHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/RandomDecimalHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/RandomIntHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/RangeHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/RegexExtractHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/RenderableDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2018-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/SizeHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/StringTrimHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/SystemValueHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/TruncateDateTimeHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/UrlEncodingHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/WireMockHelpers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/global/GlobalSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/global/GlobalSettingsHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/AbstractRequestHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/AdminRequestHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/BasicResponseRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/Body.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/CaseInsensitiveKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ChunkedDribbleDelay.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ContentTypeHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/Cookie.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/DelayDistribution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/Fault.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/FixedDelayDistribution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeadersJsonDeserializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeadersJsonSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpResponder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/JvmProxyConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/LogNormal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/LoggedResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/MimeType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/MultiValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2012-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/QueryParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/RequestEventSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/RequestHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/RequestListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/RequestMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/StubRequestHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2011-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ThreadPoolFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/UniformDistribution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/multipart/FileItemPartAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/multipart/PartParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/ApacheHttpHostNameMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertChainAndKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertificateAuthority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGenerationUnsupportedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CompositeTrustManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/DelegatingX509ExtendedKeyManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/DynamicKeyStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/HostNameMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/HostVerifyingSSLSocketFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/SSLContextBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/TrustEverythingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/TrustSelfSignedStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/TrustSpecificHostsStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/TrustStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/X509KeyStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/trafficlistener/CollectingNetworkTrafficListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/trafficlistener/ConsoleNotifyingWiremockNetworkTrafficListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/trafficlistener/DoNothingWiremockNetworkTrafficListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/http/trafficlistener/WiremockNetworkTrafficListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2016-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/DefaultMultipartRequestConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyFaultInjector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpsFaultInjector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2014-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2015-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/NotFoundHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/QueuedThreadPoolFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2017-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty94/CertificateGeneratingSslContextFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty94/Jetty94HttpServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2019-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/jetty94/ManInTheMiddleSslConnectHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Thomas Akehurst
+ * Copyright (C) 2020-2021 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminTask.java
Patch:
@@ -21,5 +21,5 @@
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 
 public interface AdminTask {
-    ResponseDefinition execute(Admin admin, Request request, PathParams pathParams);
+  ResponseDefinition execute(Admin admin, Request request, PathParams pathParams);
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/Paginator.java
Patch:
@@ -19,6 +19,7 @@
 
 public interface Paginator<T> {
 
-    List<T> select();
-    int getTotal();
+  List<T> select();
+
+  int getTotal();
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/Router.java
Patch:
@@ -19,6 +19,7 @@
 
 public interface Router {
 
-    void add(RequestMethod method, String urlTemplate, Class<? extends AdminTask> task);
-    void add(RequestMethod method, String urlTemplate, AdminTask adminTask);
+  void add(RequestMethod method, String urlTemplate, Class<? extends AdminTask> task);
+
+  void add(RequestMethod method, String urlTemplate, AdminTask adminTask);
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/IdGenerator.java
Patch:
@@ -17,5 +17,5 @@
 
 public interface IdGenerator {
 
-    String generate();
+  String generate();
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/InputStreamSource.java
Patch:
@@ -18,5 +18,5 @@
 import java.io.InputStream;
 
 public interface InputStreamSource {
-    InputStream getStream();
+  InputStream getStream();
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/NotPermittedException.java
Patch:
@@ -17,7 +17,7 @@
 
 public class NotPermittedException extends ClientError {
 
-    public NotPermittedException(Errors errors) {
-        super(errors);
-    }
+  public NotPermittedException(Errors errors) {
+    super(errors);
+  }
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/NotWritableException.java
Patch:
@@ -17,7 +17,7 @@
 
 public class NotWritableException extends RuntimeException {
 
-    public NotWritableException(String message) {
-        super(message);
-    }
+  public NotWritableException(String message) {
+    super(message);
+  }
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/TextType.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.common;
 
 public enum TextType {
-
-    JSON, XML, PLAIN_TEXT
+  JSON,
+  XML,
+  PLAIN_TEXT
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/ConfigurationException.java
Patch:
@@ -17,7 +17,7 @@
 
 public class ConfigurationException extends RuntimeException {
 
-    public ConfigurationException(String message) {
-        super(message);
-    }
+  public ConfigurationException(String message) {
+    super(message);
+  }
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/StubServer.java
Patch:
@@ -20,5 +20,5 @@
 
 public interface StubServer {
 
-    ServeEvent serveStubFor(Request request);
+  ServeEvent serveStubFor(Request request);
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/Extension.java
Patch:
@@ -17,5 +17,5 @@
 
 public interface Extension {
 
-    String getName();
+  String getName();
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/GlobalSettingsListener.java
Patch:
@@ -19,6 +19,7 @@
 
 public interface GlobalSettingsListener extends Extension {
 
-    void beforeGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
-    void afterGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
+  void beforeGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
+
+  void afterGlobalSettingsUpdated(GlobalSettings oldSettings, GlobalSettings newSettings);
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/ResponseTransformer.java
Patch:
@@ -21,7 +21,7 @@
 
 public abstract class ResponseTransformer extends AbstractTransformer<Response> {
 
-    @Override
-    public abstract Response transform(Request request, Response response, FileSource files, Parameters parameters);
-
+  @Override
+  public abstract Response transform(
+      Request request, Response response, FileSource files, Parameters parameters);
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/FieldTransformer.java
Patch:
@@ -17,5 +17,5 @@
 
 public interface FieldTransformer<T> {
 
-    T transform(T source);
+  T transform(T source);
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/requestfilter/RequestFilter.java
Patch:
@@ -20,9 +20,9 @@
 
 public interface RequestFilter extends Extension {
 
-    RequestFilterAction filter(Request request);
+  RequestFilterAction filter(Request request);
 
-    boolean applyToAdmin();
-    boolean applyToStubs();
+  boolean applyToAdmin();
 
+  boolean applyToStubs();
 }

File: src/test/java/com/github/tomakehurst/wiremock/common/JettySettingsTest.java
Patch:
@@ -32,7 +32,7 @@ public void testBuilderWithValues() {
                 .withAcceptQueueSize(number)
                 .withRequestHeaderSize(number)
                 .withResponseHeaderSize(number)
-                .withStopTimeout(longNumber);
+                .withStopTimeout(longNumber)
                 .withIdleTimeout(longNumber);
       
         JettySettings jettySettings = builder.build();

File: src/main/java/com/github/tomakehurst/wiremock/http/ResponseDefinition.java
Patch:
@@ -124,7 +124,7 @@ private ResponseDefinition(int status,
         this.fixedDelayMilliseconds = fixedDelayMilliseconds;
         this.delayDistribution = delayDistribution;
         this.chunkedDribbleDelay = chunkedDribbleDelay;
-        this.proxyBaseUrl = proxyBaseUrl;
+        this.proxyBaseUrl = proxyBaseUrl == null ? null : proxyBaseUrl.trim();
         this.proxyUrlPrefixToRemove = proxyUrlPrefixToRemove;
         this.fault = fault;
         this.transformers = transformers;

File: src/test/java/com/github/tomakehurst/wiremock/BrowserProxyAcceptanceTest.java
Patch:
@@ -39,7 +39,7 @@ class BrowserProxyAcceptanceTest {
 
     @BeforeEach
     public void init() {
-        testClient = new WireMockTestClient(target.getRuntimeInfo().getHttpPort());
+        testClient = new WireMockTestClient(target.getPort());
 
         proxy = new WireMockServer(wireMockConfig()
                 .dynamicPort()
@@ -76,7 +76,7 @@ class Disabled {
 
         @Test
         public void browserProxyIsReportedAsFalseInRequestLogWhenDisabled() {
-            int httpPort = wmWithoutBrowserProxy.getRuntimeInfo().getHttpPort();
+            int httpPort = wmWithoutBrowserProxy.getPort();
             WireMockTestClient testClient = new WireMockTestClient(httpPort);
 
             testClient.getViaProxy("http://whereever/whatever", httpPort);

File: src/test/java/com/github/tomakehurst/wiremock/ConcurrentProxyingTest.java
Patch:
@@ -44,7 +44,7 @@ public class ConcurrentProxyingTest {
 
     @Test
     public void concurrent() throws Exception {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
 
         wm.stubFor(any(anyUrl())
             .atPriority(10)

File: src/test/java/com/github/tomakehurst/wiremock/CrossOriginTest.java
Patch:
@@ -44,7 +44,7 @@ public static class Enabled {
 
         @BeforeEach
         public void init() {
-            testClient = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            testClient = new WireMockTestClient(wm.getPort());
         }
 
         @Test
@@ -84,7 +84,7 @@ public static class Disabled {
 
         @BeforeEach
         public void init() {
-            testClient = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            testClient = new WireMockTestClient(wm.getPort());
         }
 
         @Test

File: src/test/java/com/github/tomakehurst/wiremock/CustomMatchingAcceptanceTest.java
Patch:
@@ -47,8 +47,8 @@ public class CustomMatchingAcceptanceTest {
 
     @BeforeEach
     public void init() {
-        client = new WireMockTestClient(wmRule.getRuntimeInfo().getHttpPort());
-        wm = WireMock.create().port(wmRule.getRuntimeInfo().getHttpPort()).build();
+        client = new WireMockTestClient(wmRule.getPort());
+        wm = WireMock.create().port(wmRule.getPort()).build();
     }
 
     @Test

File: src/test/java/com/github/tomakehurst/wiremock/DelayAndCustomMatcherAcceptanceTest.java
Patch:
@@ -51,7 +51,7 @@ public void delayIsAddedWhenCustomResponseTransformerPresent() {
                 .withTransformers("response-body-changer")
                 .withUniformRandomDelay(500, 1000)));
 
-        WireMockTestClient client = new WireMockTestClient(wireMockRule.getRuntimeInfo().getHttpPort());
+        WireMockTestClient client = new WireMockTestClient(wireMockRule.getPort());
 
         Stopwatch stopwatch = Stopwatch.createStarted();
         WireMockResponse response = client.get("/delay-this");

File: src/test/java/com/github/tomakehurst/wiremock/GzipAcceptanceTest.java
Patch:
@@ -100,7 +100,7 @@ class NoChunkedTransferEncoding {
 
         @BeforeEach
         public void init() {
-            testClient = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            testClient = new WireMockTestClient(wm.getPort());
         }
 
         @Test
@@ -138,7 +138,7 @@ class GzipDisabled {
 
         @BeforeEach
         public void init() {
-            testClient = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            testClient = new WireMockTestClient(wm.getPort());
         }
 
         @Test

File: src/test/java/com/github/tomakehurst/wiremock/Http2AcceptanceTest.java
Patch:
@@ -45,7 +45,7 @@ public void supportsHttp2Connections() throws Exception {
 
         wm.stubFor(get("/thing").willReturn(ok("HTTP/2 response")));
 
-        ContentResponse response = client.GET("https://localhost:" + wm.getRuntimeInfo().getHttpsPort() + "/thing");
+        ContentResponse response = client.GET(wm.getRuntimeInfo().getHttpsBaseUrl() + "/thing");
         assertThat(response.getStatus(), is(200));
     }
 
@@ -66,7 +66,7 @@ public void supportsHttp1_1Connections() throws Exception {
 
         wm.stubFor(get("/thing").willReturn(ok("HTTP/1.1 response")));
 
-        HttpGet get = new HttpGet("https://localhost:" + wm.getRuntimeInfo().getHttpsPort() + "/thing");
+        HttpGet get = new HttpGet(wm.getRuntimeInfo().getHttpsBaseUrl() + "/thing");
         try (CloseableHttpResponse response = client.execute(get)) {
             assertThat(response.getCode(), is(200));
         }

File: src/test/java/com/github/tomakehurst/wiremock/HttpsBrowserProxyClientAuthAcceptanceTest.java
Patch:
@@ -100,7 +100,7 @@ private CloseableHttpClient buildHttpClient() throws Exception {
                 .loadKeyMaterial(trustStore, TRUST_STORE_PASSWORD.toCharArray())
                 .build();
 
-        HttpHost proxyInfo = new HttpHost("localhost", proxy.getRuntimeInfo().getHttpPort());
+        HttpHost proxyInfo = new HttpHost("localhost", proxy.getPort());
         return HttpClientBuilder.create()
                 .disableAuthCaching()
                 .disableAutomaticRetries()

File: src/test/java/com/github/tomakehurst/wiremock/NearMissesRuleAcceptanceTest.java
Patch:
@@ -70,7 +70,7 @@ class NearMissesRuleTest {
 
         @BeforeEach
         public void init() {
-            client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            client = new WireMockTestClient(wm.getPort());
             testNotifier.reset();
         }
 
@@ -177,7 +177,7 @@ public String getName() {
 
         @BeforeEach
         public void init() {
-            client = new WireMockTestClient(wmeWithCustomMatcher.getRuntimeInfo().getHttpPort());
+            client = new WireMockTestClient(wmeWithCustomMatcher.getPort());
         }
 
         @Test

File: src/test/java/com/github/tomakehurst/wiremock/ResponseDelayAcceptanceTest.java
Patch:
@@ -62,7 +62,7 @@ public class ResponseDelayAcceptanceTest {
     @BeforeEach
     public void init() {
         httpClient = HttpClientFactory.createClient(SOCKET_TIMEOUT_MILLISECONDS);
-        testClient = new WireMockTestClient(wireMockRule.getRuntimeInfo().getHttpPort());
+        testClient = new WireMockTestClient(wireMockRule.getPort());
     }
 
     @Test

File: src/test/java/com/github/tomakehurst/wiremock/ResponseTemplatingAcceptanceTest.java
Patch:
@@ -49,7 +49,7 @@ class Local {
 
         @BeforeEach
         public void init() {
-            client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            client = new WireMockTestClient(wm.getPort());
         }
 
         @Test
@@ -85,7 +85,7 @@ class Global {
 
         @BeforeEach
         public void init() {
-            client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            client = new WireMockTestClient(wm.getPort());
         }
 
         @Test
@@ -262,7 +262,7 @@ class RestrictedSystemPropertiesAndEnvVars {
 
         @BeforeEach
         public void init() {
-            client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+            client = new WireMockTestClient(wm.getPort());
         }
 
         @Test

File: src/test/java/com/github/tomakehurst/wiremock/StubLifecycleListenerAcceptanceTest.java
Patch:
@@ -110,7 +110,7 @@ public void stubCreationCanBeVetoedWhenExceptionIsThrown() {
 
     @Test
     public void sensibleExceptionIsThrownWhenRemoteAndExceptionThrownFromListener() {
-        WireMock wmRemote = new WireMock(wm.getRuntimeInfo().getHttpPort());
+        WireMock wmRemote = new WireMock(wm.getPort());
         exceptionThrowingListener.throwException = true;
 
         try {

File: src/test/java/com/github/tomakehurst/wiremock/StubbingWithBrowserProxyAcceptanceTest.java
Patch:
@@ -60,7 +60,7 @@ public static void init() {
                 .setConnectionManager(PoolingHttpClientConnectionManagerBuilder.create()
                         .setDnsResolver(new CustomLocalTldDnsResolver("internal"))
                         .build())
-                .setProxy(new HttpHost("localhost", wm.getRuntimeInfo().getHttpPort()))
+                .setProxy(new HttpHost("localhost", wm.getPort()))
                 .build();
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -842,7 +842,7 @@ class JournalMaxEntriesRestricted {
 
         @Test
         public void maxLengthIs2() {
-            WireMockTestClient testClient = new WireMockTestClient(wireMockRule.getRuntimeInfo().getHttpPort());
+            WireMockTestClient testClient = new WireMockTestClient(wireMockRule.getPort());
             testClient.get("/request1");
             testClient.get("/request2");
             testClient.get("/request3");

File: src/test/java/com/github/tomakehurst/wiremock/http/AdminRequestHandlerTest.java
Patch:
@@ -38,7 +38,7 @@ public class AdminRequestHandlerTest {
 
     @Test
     public void shouldLogInfoOnRequest() throws UnsupportedEncodingException {
-        WireMockTestClient client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        WireMockTestClient client = new WireMockTestClient(wm.getPort());
 
         String postHeaderABCName = "ABC";
         String postHeaderABCValue = "abc123";

File: src/test/java/com/github/tomakehurst/wiremock/servlet/AlternativeServletContainerTest.java
Patch:
@@ -37,8 +37,8 @@ public class AlternativeServletContainerTest {
 
     @BeforeEach
     public void init() {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
-        WireMock.configureFor(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
+        WireMock.configureFor(wm.getPort());
     }
 
     @Test

File: src/test/java/ignored/JUnit5ProxyTest.java
Patch:
@@ -30,7 +30,7 @@ public class JUnit5ProxyTest {
 
     @BeforeEach
     public void init() {
-        JvmProxyConfigurer.configureFor(wm.getRuntimeInfo().getHttpPort());
+        JvmProxyConfigurer.configureFor(wm.getPort());
     }
 
     @AfterEach

File: src/test/java/ignored/ManyUnmatchedRequestsTest.java
Patch:
@@ -38,7 +38,7 @@ public class ManyUnmatchedRequestsTest {
 
     @BeforeEach
     public void init() {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
     }
 
     @Test

File: src/test/java/ignored/MassiveNearMissTest.java
Patch:
@@ -39,7 +39,7 @@ public class MassiveNearMissTest {
 
     @BeforeEach
     public void setup() {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
     }
 
     @Test

File: src/test/java/ignored/NearMissExampleTest.java
Patch:
@@ -39,7 +39,7 @@ public class NearMissExampleTest {
 
     @BeforeEach
     public void init() {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
     }
 
     @Test

File: src/test/java/ignored/SingleUnmatchedRequestTest.java
Patch:
@@ -38,7 +38,7 @@ public class SingleUnmatchedRequestTest {
 
     @BeforeEach
     public void init() {
-        client = new WireMockTestClient(wm.getRuntimeInfo().getHttpPort());
+        client = new WireMockTestClient(wm.getPort());
     }
 
     @Test

File: src/test/java/com/github/tomakehurst/wiremock/http/ResponseDefinitionTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.matching.MockRequest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;

File: src/test/java/com/github/tomakehurst/wiremock/http/StubResponseRendererTest.java
Patch:
@@ -126,6 +126,7 @@ private ServeEvent createServeEvent(Integer fixedDelayMillis) {
                     null,
                     null,
                     null,
+                    null,
                     true
             )
         );

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ResponseDefinitionTest.java
Patch:
@@ -50,6 +50,7 @@ public void copyProducesEqualObject() {
                 null,
                 null,
                 "http://base.com",
+                null,
                 Fault.EMPTY_RESPONSE,
                 ImmutableList.of("transformer-1"),
                 Parameters.one("name", "Jeff"),

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/Assumptions.java
Patch:
@@ -17,7 +17,8 @@
 
 import org.apache.commons.lang3.SystemUtils;
 
-import static org.junit.Assume.assumeFalse;
+import static org.junit.jupiter.api.Assumptions.assumeFalse;
+
 
 public class Assumptions {
 

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -41,6 +41,7 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
 
     int DEFAULT_PORT = 8080;
     int DYNAMIC_PORT = 0;
+    int DEFAULT_TIMEOUT = 300_000;
     int DEFAULT_CONTAINER_THREADS = 25;
     String DEFAULT_BIND_ADDRESS = "0.0.0.0";
 
@@ -79,4 +80,6 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     boolean getGzipDisabled();
     boolean getStubRequestLoggingDisabled();
     boolean getStubCorsEnabled();
+    long timeout();
+    boolean getDisableOptimizeXmlFactoriesLoading();
 }

File: src/test/java/com/github/tomakehurst/wiremock/BasicAuthAcceptanceTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.github.tomakehurst.wiremock;
 
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.testsupport.TestHttpHeader.withHeader;

File: src/test/java/com/github/tomakehurst/wiremock/CookieMatchingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 

File: src/test/java/com/github/tomakehurst/wiremock/DateHeaderAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static org.hamcrest.Matchers.contains;

File: src/test/java/com/github/tomakehurst/wiremock/DebugHeadersAcceptanceTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.github.tomakehurst.wiremock;
 
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.UUID;
 

File: src/test/java/com/github/tomakehurst/wiremock/EditMappingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static org.hamcrest.Matchers.is;

File: src/test/java/com/github/tomakehurst/wiremock/EditStubMappingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.google.common.base.Predicate;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.UUID;
 

File: src/test/java/com/github/tomakehurst/wiremock/GlobalSettingsAcceptanceTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import com.github.tomakehurst.wiremock.http.LogNormal;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;

File: src/test/java/com/github/tomakehurst/wiremock/HeaderMatchingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.testsupport.MappingJsonSamples;
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.testsupport.TestHttpHeader.withHeader;
 import static java.net.HttpURLConnection.HTTP_NOT_FOUND;

File: src/test/java/com/github/tomakehurst/wiremock/MultipartBodyMatchingAcceptanceTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.http.entity.StringEntity;
 import org.apache.http.entity.mime.MultipartEntityBuilder;
 import org.apache.http.util.EntityUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.testsupport.MultipartBody.part;

File: src/test/java/com/github/tomakehurst/wiremock/NearMissesAcceptanceTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.github.tomakehurst.wiremock.verification.NearMiss;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 

File: src/test/java/com/github/tomakehurst/wiremock/NetworkTrafficListenerAcceptanceTest.java
Patch:
@@ -17,16 +17,16 @@
 
 import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
 import com.github.tomakehurst.wiremock.http.trafficlistener.CollectingNetworkTrafficListener;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 public class NetworkTrafficListenerAcceptanceTest extends AcceptanceTestBase {
 	private static CollectingNetworkTrafficListener networkTrafficListener = new CollectingNetworkTrafficListener();
 
-	@BeforeClass
+	@BeforeAll
 	public static void setupServer() {
 		setupServer(new WireMockConfiguration().networkTrafficListener(networkTrafficListener));
 	}

File: src/test/java/com/github/tomakehurst/wiremock/QueuedThreadPoolAcceptanceTest.java
Patch:
@@ -20,15 +20,15 @@
 import com.github.tomakehurst.wiremock.http.ThreadPoolFactory;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 public class QueuedThreadPoolAcceptanceTest extends AcceptanceTestBase {
 
-    @BeforeClass
+    @BeforeAll
     public static void setupServer() {
         setupServer(new WireMockConfiguration().threadPoolFactory(new InstrumentedThreadPoolFactory()));
     }

File: src/test/java/com/github/tomakehurst/wiremock/RemoteMappingsLoaderAcceptanceTest.java
Patch:
@@ -19,8 +19,8 @@
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.client.WireMockBuilder;
 import com.google.common.io.Resources;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.util.UUID;
@@ -34,7 +34,7 @@ public class RemoteMappingsLoaderAcceptanceTest extends AcceptanceTestBase {
     static WireMock wmClient;
     static File rootDir;
 
-    @BeforeClass
+    @BeforeAll
     public static void initWithTempDir() throws Exception {
         setupServerWithTempFileRoot();
         wmClient = WireMock.create().port(wireMockServer.port()).build();

File: src/test/java/com/github/tomakehurst/wiremock/RemoveStubMappingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.google.common.base.Predicate;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.UUID;
 

File: src/test/java/com/github/tomakehurst/wiremock/RequestQueryAcceptanceTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.TypeSafeMatcher;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.text.ParseException;
 import java.util.Date;

File: src/test/java/com/github/tomakehurst/wiremock/StubImportAcceptanceTest.java
Patch:
@@ -18,8 +18,8 @@
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 import java.util.UUID;
@@ -35,7 +35,7 @@ public class StubImportAcceptanceTest extends AcceptanceTestBase {
 
     private static Admin admin;
 
-    @BeforeClass
+    @BeforeAll
     public static void setup() {
         admin = wireMockServer;
     }

File: src/test/java/com/github/tomakehurst/wiremock/StubMetadataAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.common.Metadata;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 import java.util.UUID;

File: src/test/java/com/github/tomakehurst/wiremock/StubRequestLoggingAcceptanceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.testsupport.WireMockTestClient;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/test/java/com/github/tomakehurst/wiremock/UrlMatchingAcceptanceTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.github.tomakehurst.wiremock;
 
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/CertificateAuthority.java
Patch:
@@ -53,7 +53,7 @@ public static CertificateAuthority generateCertificateAuthority() throws Certifi
             X509CertImpl certificate = selfSign(info, pair.getPrivate(), sigAlg);
 
             return new CertificateAuthority(new X509Certificate[] { certificate }, pair.getPrivate());
-        } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | CertificateException | SignatureException | NoSuchMethodError | VerifyError | NoClassDefFoundError | IOException e) {
+        } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | CertificateException | SignatureException | NoSuchMethodError | VerifyError | NoClassDefFoundError | IOException | IllegalAccessError e) {
             throw new CertificateGenerationUnsupportedException(
                     "Your runtime does not support generating certificates at runtime",
                     e
@@ -110,7 +110,7 @@ CertChainAndKey generateCertificate(
 
             X509Certificate[] fullChain = prepend(certificate, certificateChain);
             return new CertChainAndKey(fullChain, pair.getPrivate());
-        } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | CertificateException | SignatureException | NoSuchMethodError | VerifyError | NoClassDefFoundError | IOException e) {
+        } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | CertificateException | SignatureException | NoSuchMethodError | VerifyError | NoClassDefFoundError | IOException | IllegalAccessError e) {
             throw new CertificateGenerationUnsupportedException(
                 "Your runtime does not support generating certificates at runtime",
                 e

File: src/test/java/com/github/tomakehurst/wiremock/crypto/X509CertificateSpecification.java
Patch:
@@ -94,7 +94,7 @@ public X509Certificate certificateFor(KeyPair keyPair) throws CertificateExcepti
             info.set(X509CertInfo.KEY, new CertificateX509Key(keyPair.getPublic()));
             info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(new BigInteger(64, random)));
             info.set(X509CertInfo.ALGORITHM_ID,
-                    new CertificateAlgorithmId(new AlgorithmId(AlgorithmId.sha1WithRSAEncryption_oid)));
+                    new CertificateAlgorithmId(new AlgorithmId(AlgorithmId.SHA256_oid)));
 
             // Sign the cert to identify the algorithm that's used.
             X509CertImpl cert = new X509CertImpl(info);

File: src/main/java/com/github/tomakehurst/wiremock/admin/Conversions.java
Patch:
@@ -16,6 +16,8 @@
 package com.github.tomakehurst.wiremock.admin;
 
 import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
+import com.github.tomakehurst.wiremock.common.Errors;
+import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.http.QueryParameter;
 
 import java.text.ParseException;
@@ -35,7 +37,7 @@ public static Date toDate(QueryParameter parameter) {
                 new ISO8601DateFormat().parse(parameter.firstValue()) :
                 null;
         } catch (ParseException e) {
-            throw new IllegalArgumentException(parameter.firstValue() + " is not a valid ISO8601 date");
+            throw new InvalidInputException(Errors.validation(parameter.key(), parameter.firstValue() + " is not a valid ISO8601 date"));
         }
     }
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/LimitAndSinceDatePaginator.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.admin;
 
+import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.google.common.base.Predicate;

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePattern.java
Patch:
@@ -64,7 +64,7 @@ public boolean apply(Constructor<?> input) {
         }).orNull();
 
         if (constructor == null) {
-            throw new IllegalStateException("Constructor must have a first parameter annotatated with JsonProperty(\"<operator name>\")");
+            throw new IllegalStateException("Constructor must have a first parameter annotated with JsonProperty(\"<operator name>\")");
         }
         JsonProperty jsonPropertyAnnotation = (JsonProperty) constructor.getParameterAnnotations()[0][0];
         return jsonPropertyAnnotation.value();

File: src/test/java/com/github/tomakehurst/wiremock/recording/SnapshotStubMappingGeneratorTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
-import org.jmock.Mockery;
 import org.junit.Test;
 
 import static com.github.tomakehurst.wiremock.matching.RequestPatternBuilder.newRequestPattern;
@@ -71,7 +70,7 @@ public ResponseDefinition apply(LoggedResponse response) {
     private static ServeEvent serveEvent() {
         return new ServeEvent(
             null,
-            LoggedRequest.createFrom(aRequest(new Mockery()).build()),
+            LoggedRequest.createFrom(aRequest().build()),
             null,
             null,
             LoggedResponse.from(Response.notConfigured()),

File: src/test/java/com/github/tomakehurst/wiremock/junit5/JunitJupiterExtensionDeclarativeWithNestedTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.github.tomakehurst.wiremock.junit5;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 

File: wiremock-webhooks-extension/src/test/java/functional/WebhooksAcceptanceTest.java
Patch:
@@ -97,7 +97,7 @@ public void firesASingleWebhookWhenRequested() throws Exception {
                 .header("X-Multi").values();
         assertThat(multiHeaderValues, hasItems("one", "two"));
 
-        System.out.println("All info notifications:\n" + String.join("\n", testNotifier.getInfoMessages()));
+        System.out.println("All info notifications:\n" + testNotifier.getInfoMessages().stream().map(message -> message.replace("\n", "\n>>> ")).collect(Collectors.joining("\n>>> ")));
 
         assertThat(testNotifier.getInfoMessages(), hasItem(allOf(
             containsString("Webhook POST request to"),

File: wiremock-webhooks-extension/src/test/java/functional/WebhooksAcceptanceTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import java.util.stream.Collectors;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.any;
 import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
@@ -96,6 +97,8 @@ public void firesASingleWebhookWhenRequested() throws Exception {
                 .header("X-Multi").values();
         assertThat(multiHeaderValues, hasItems("one", "two"));
 
+        System.out.println("All info notifications:\n" + String.join("\n", testNotifier.getInfoMessages()));
+
         assertThat(testNotifier.getInfoMessages(), hasItem(allOf(
             containsString("Webhook POST request to"),
             containsString("/callback returned status"),

File: src/main/java/com/github/tomakehurst/wiremock/junit5/WireMockTest.java
Patch:
@@ -14,4 +14,7 @@
 
     int httpPort() default 0;
 
+    boolean httpsEnabled() default false;
+    int httpsPort() default 0;
+
 }

File: src/test/java/com/github/tomakehurst/wiremock/junit5/JUnitJupiterExtensionDeclarativeWithHttpPortParameterTest.java
Patch:
@@ -5,12 +5,12 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
-@WireMockTest(httpPort = 8080)
+@WireMockTest(httpPort = 8765)
 public class JUnitJupiterExtensionDeclarativeWithHttpPortParameterTest {
 
     @Test
     void runs_on_the_supplied_port(WireMockRuntimeInfo wmRuntimeInfo) {
-        assertThat(wmRuntimeInfo.getHttpPort(), is(8080));
+        assertThat(wmRuntimeInfo.getHttpPort(), is(8765));
     }
 
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/PathPattern.java
Patch:
@@ -17,7 +17,9 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.github.tomakehurst.wiremock.common.ListOrSingle;
 
+import java.util.List;
 import java.util.Objects;
 
 public abstract class PathPattern extends StringValuePattern {
@@ -49,7 +51,7 @@ public MatchResult match(String value) {
 
     protected abstract MatchResult isSimpleMatch(String value);
     protected abstract MatchResult isAdvancedMatch(String value);
-    public abstract String getExpressionResult(String value);
+    public abstract ListOrSingle<String> getExpressionResult(String value);
 
     @Override
     public boolean equals(Object o) {

File: src/main/java/com/github/tomakehurst/wiremock/recording/LoggedResponseDefinitionTransformer.java
Patch:
@@ -66,10 +66,9 @@ public ResponseDefinition apply(LoggedResponse response) {
     }
 
     private byte[] bodyDecompressedIfRequired(LoggedResponse response) {
-        if (response.getHeaders().getHeader(CONTENT_ENCODING).containsValue("gzip")) {
+        if (response.getHeaders() != null && response.getHeaders().getHeader(CONTENT_ENCODING).containsValue("gzip")) {
             return Gzip.unGzip(response.getBody());
         }
-
         return response.getBody();
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/WireMockHelpers.java
Patch:
@@ -227,7 +227,7 @@ public Object apply(Object context, Options options) throws IOException {
     },
 
     math {
-        private final MathHelper helper = new MathHelper();
+        private final MathsHelper helper = new MathsHelper();
 
         @Override
         public Object apply(Object context, Options options) throws IOException {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsCurrentDateHelper.java
Patch:
@@ -16,10 +16,10 @@
 package com.github.tomakehurst.wiremock.extension.responsetemplating.helpers;
 
 import com.github.jknack.handlebars.Options;
+import com.github.tomakehurst.wiremock.common.DateTimeOffset;
 
 import java.io.IOException;
 import java.util.Date;
-import java.util.TimeZone;
 
 public class HandlebarsCurrentDateHelper extends HandlebarsHelper<Date> {
 
@@ -31,7 +31,7 @@ public Object apply(Date context, Options options) throws IOException {
 
         Date date = context != null ? context : new Date();
         if (offset != null) {
-            date = new DateOffset(offset).shift(date);
+            date = DateTimeOffset.fromString(offset).shift(date);
         }
 
         return new RenderableDate(date, format, timezone);

File: src/main/java/com/github/tomakehurst/wiremock/matching/PathPattern.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.matching;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 import java.util.Objects;
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePattern.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;

File: src/test/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsHelperTestBase.java
Patch:
@@ -26,7 +26,9 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 
+import static java.util.Collections.emptyMap;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
@@ -81,7 +83,7 @@ protected Options createOptions(String optionParam, RenderCache renderCache) {
         Context context = createContext(renderCache);
 
         return new Options(null, null, null, context, null, null,
-                           new Object[]{optionParam}, null, new ArrayList<String>(0));
+                           new Object[]{optionParam}, emptyMap(), new ArrayList<String>(0));
     }
 
     protected Context createContext() {

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHandlerDispatchingServlet.java
Patch:
@@ -38,6 +38,7 @@
 import static com.github.tomakehurst.wiremock.http.RequestMethod.GET;
 import static com.github.tomakehurst.wiremock.servlet.WireMockHttpServletRequestAdapter.ORIGINAL_REQUEST_KEY;
 import static com.google.common.base.Charsets.UTF_8;
+import static com.google.common.net.HttpHeaders.CONTENT_LENGTH;
 import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
 import static java.net.URLDecoder.decode;
 import static java.util.concurrent.Executors.newScheduledThreadPool;
@@ -213,7 +214,8 @@ public void applyResponse(Response response, HttpServletRequest httpServletReque
             }
         }
 
-        if (chunkedEncodingPolicy == NEVER || (chunkedEncodingPolicy == BODY_FILE && response.hasInlineBody())) {
+        if ((chunkedEncodingPolicy == NEVER || (chunkedEncodingPolicy == BODY_FILE && response.hasInlineBody())) &&
+                httpServletResponse.getHeader(CONTENT_LENGTH) == null) {
             httpServletResponse.setContentLength(response.getBody().length);
         }
 

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -133,11 +133,11 @@ public CommandLineOptions(String... args) {
         optionParser.accepts(REQUIRE_CLIENT_CERT, "Make the server require a trusted client certificate to enable a connection");
         optionParser.accepts(HTTPS_TRUSTSTORE_TYPE, "The HTTPS trust store type").withRequiredArg().defaultsTo("JKS");
         optionParser.accepts(HTTPS_TRUSTSTORE_PASSWORD, "Password for the trust store").withRequiredArg().defaultsTo("password");
-        optionParser.accepts(HTTPS_TRUSTSTORE, "Path to an alternative truststore for HTTPS client certificates. Must have a password of \"password\".").requiredIf(REQUIRE_CLIENT_CERT).withRequiredArg();
+        optionParser.accepts(HTTPS_TRUSTSTORE, "Path to an alternative truststore for HTTPS client certificates. Must have a password of \"password\".").requiredIf(REQUIRE_CLIENT_CERT).requiredIf(HTTPS_TRUSTSTORE_PASSWORD).withRequiredArg();
         optionParser.accepts(HTTPS_KEYSTORE_TYPE, "The HTTPS keystore type.").withRequiredArg().defaultsTo("JKS");
         optionParser.accepts(HTTPS_KEYSTORE_PASSWORD, "Password for the alternative keystore.").withRequiredArg().defaultsTo("password");
         optionParser.accepts(HTTPS_KEY_MANAGER_PASSWORD, "Key manager password for use with the alternative keystore.").withRequiredArg().defaultsTo("password");
-        optionParser.accepts(HTTPS_KEYSTORE, "Path to an alternative keystore for HTTPS. Password is assumed to be \"password\" if not specified.").requiredIf(HTTPS_TRUSTSTORE).requiredIf(HTTPS_KEYSTORE_PASSWORD).withRequiredArg().defaultsTo(Resources.getResource("keystore").toString());
+        optionParser.accepts(HTTPS_KEYSTORE, "Path to an alternative keystore for HTTPS. Password is assumed to be \"password\" if not specified.").requiredIf(HTTPS_KEYSTORE_PASSWORD).withRequiredArg().defaultsTo(Resources.getResource("keystore").toString());
         optionParser.accepts(PROXY_ALL, "Will create a proxy mapping for /* to the specified URL").withRequiredArg();
         optionParser.accepts(PRESERVE_HOST_HEADER, "Will transfer the original host header from the client to the proxied service");
         optionParser.accepts(PROXY_VIA, "Specifies a proxy server to use when routing proxy mapped requests").withRequiredArg();

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -58,6 +58,7 @@ public class JettyHttpServer implements HttpServer {
 
     static {
         System.setProperty("org.eclipse.jetty.server.HttpChannelState.DEFAULT_TIMEOUT", "300000");
+        System.setProperty("org.eclipse.jetty.http.HttpGenerator.STRICT", "true");
     }
 
     private final Server jettyServer;

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -132,7 +132,7 @@ public CommandLineOptions(String... args) {
         optionParser.accepts(CONTAINER_THREADS, "The number of container threads").withRequiredArg();
         optionParser.accepts(REQUIRE_CLIENT_CERT, "Make the server require a trusted client certificate to enable a connection");
         optionParser.accepts(HTTPS_TRUSTSTORE_TYPE, "The HTTPS trust store type").withRequiredArg().defaultsTo("JKS");
-        optionParser.accepts(HTTPS_TRUSTSTORE_PASSWORD, "Password for the trust store").withRequiredArg();
+        optionParser.accepts(HTTPS_TRUSTSTORE_PASSWORD, "Password for the trust store").withRequiredArg().defaultsTo("password");
         optionParser.accepts(HTTPS_TRUSTSTORE, "Path to an alternative truststore for HTTPS client certificates. Must have a password of \"password\".").requiredIf(REQUIRE_CLIENT_CERT).withRequiredArg();
         optionParser.accepts(HTTPS_KEYSTORE_TYPE, "The HTTPS keystore type.").withRequiredArg().defaultsTo("JKS");
         optionParser.accepts(HTTPS_KEYSTORE_PASSWORD, "Password for the alternative keystore.").withRequiredArg().defaultsTo("password");

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -435,7 +435,8 @@ private ServletContextHandler addAdminContext(
         Resources.getResource("assets/swagger-ui/index.html");
 
         adminContext.setInitParameter("org.eclipse.jetty.servlet.Default.dirAllowed", "false");
-        adminContext.addServlet(DefaultServlet.class, "/swagger-ui/*");
+        ServletHolder swaggerUiServletHolder = adminContext.addServlet(DefaultServlet.class, "/swagger-ui/*");
+        swaggerUiServletHolder.setAsyncSupported(false);
         adminContext.addServlet(DefaultServlet.class, "/recorder/*");
 
         ServletHolder servletHolder = adminContext.addServlet(WireMockHandlerDispatchingServlet.class, "/");

File: src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java
Patch:
@@ -89,7 +89,8 @@ public void startServerAndBuildClient() throws Exception {
                 NO_PROXY,
                 clientTrustStoreSettings,
                 /* trustSelfSignedCertificates = */false,
-                trustedHosts
+                trustedHosts,
+                false
         );
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/verification/LoggedRequest.java
Patch:
@@ -262,7 +262,7 @@ public Date getLoggedDate() {
     }
 
     public String getLoggedDateString() {
-        return Dates.format(loggedDate);
+        return loggedDate != null ? Dates.format(loggedDate) : null;
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/common/Urls.java
Patch:
@@ -63,9 +63,9 @@ public static Map<String, QueryParameter> splitQuery(String query) {
         for (String queryElement: pairs) {
             int firstEqualsIndex = queryElement.indexOf('=');
             if (firstEqualsIndex == -1) {
-                builder.putAll(queryElement, "");
+                builder.putAll(decode(queryElement), "");
             } else {
-                String key = queryElement.substring(0, firstEqualsIndex);
+                String key = decode(queryElement.substring(0, firstEqualsIndex));
                 String value = decode(queryElement.substring(firstEqualsIndex + 1));
                 builder.putAll(key, value);
             }

File: src/test/java/com/github/tomakehurst/wiremock/LogTimingAcceptanceTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.github.tomakehurst.wiremock.common.Timing;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
@@ -26,6 +27,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
+@Ignore("Very slow and not likely to change any time soon")
 public class LogTimingAcceptanceTest extends AcceptanceTestBase {
 
     @BeforeClass

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -178,6 +178,7 @@ public static class Builder {
         public static Builder like(Response response) {
             Builder responseBuilder = new Builder();
             responseBuilder.status = response.getStatus();
+            responseBuilder.statusMessage = response.getStatusMessage();
             responseBuilder.bodyStream = response.bodyStreamSource;
             responseBuilder.headers = response.getHeaders();
             responseBuilder.configured = response.wasConfigured();

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -74,6 +74,7 @@ public static CloseableHttpClient createClient(
                 .disableRedirectHandling()
                 .disableContentCompression()
                 .setMaxConnTotal(maxConnections)
+                .setMaxConnPerRoute(maxConnections)
                 .setDefaultRequestConfig(RequestConfig.custom().setStaleConnectionCheckEnabled(true).build())
                 .setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(timeoutMilliseconds).build())
                 .useSystemProperties();

File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToJsonPattern.java
Patch:
@@ -36,7 +36,7 @@
 import static com.google.common.collect.Iterables.getLast;
 import static org.apache.commons.lang3.math.NumberUtils.isNumber;
 
-public class EqualToJsonPattern extends MemoizingStringValuePattern {
+public class EqualToJsonPattern extends StringValuePattern {
 
     private final JsonNode expected;
     private final Boolean ignoreArrayOrder;
@@ -94,7 +94,7 @@ public String getExpected() {
     }
 
     @Override
-    protected MatchResult calculateMatch(String value) {
+    public MatchResult match(String value) {
         try {
             final JsonNode actual = Json.read(value, JsonNode.class);
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToPattern.java
Patch:
@@ -21,7 +21,7 @@
 
 import static org.apache.commons.lang3.StringUtils.getLevenshteinDistance;
 
-public class EqualToPattern extends MemoizingStringValuePattern {
+public class EqualToPattern extends StringValuePattern {
 
     private final Boolean caseInsensitive;
 
@@ -46,7 +46,7 @@ public Boolean getCaseInsensitive() {
     }
 
     @Override
-    protected MatchResult calculateMatch(final String value) {
+    public MatchResult match(final String value) {
         return new MatchResult() {
             @Override
             public boolean isExactMatch() {

File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
Patch:
@@ -38,7 +38,7 @@
 import static com.google.common.base.Strings.isNullOrEmpty;
 import static org.xmlunit.diff.ComparisonType.*;
 
-public class EqualToXmlPattern extends MemoizingStringValuePattern {
+public class EqualToXmlPattern extends StringValuePattern {
 
     private static Set<ComparisonType> COUNTED_COMPARISONS = ImmutableSet.of(
         ELEMENT_TAG_NAME,
@@ -115,7 +115,7 @@ public Set<ComparisonType> getExemptedComparisons() {
     }
 
     @Override
-    protected MatchResult calculateMatch(final String value) {
+    public MatchResult match(final String value) {
         return new MatchResult() {
             @Override
             public boolean isExactMatch() {

File: src/main/java/com/github/tomakehurst/wiremock/matching/PathPattern.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Objects;
 
-public abstract class PathPattern extends MemoizingStringValuePattern {
+public abstract class PathPattern extends StringValuePattern {
 
     protected final StringValuePattern valuePattern;
 
@@ -38,7 +38,7 @@ public boolean isSimple() {
     }
 
     @Override
-    protected MatchResult calculateMatch(String value) {
+    public MatchResult match(String value) {
         if (isSimple()) {
             return isSimpleMatch(value);
         }

File: src/main/java/com/github/tomakehurst/wiremock/verification/NearMissCalculator.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.verification;
 
 import com.github.tomakehurst.wiremock.matching.MatchResult;
+import com.github.tomakehurst.wiremock.matching.MemoizingMatchResult;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.stubbing.*;
 import com.google.common.base.Function;
@@ -52,7 +53,7 @@ public List<NearMiss> findNearestTo(final LoggedRequest request) {
 
         return sortAndTruncate(from(allMappings).transform(new Function<StubMapping, NearMiss>() {
             public NearMiss apply(StubMapping stubMapping) {
-                MatchResult matchResult = stubMapping.getRequest().match(request);
+                MatchResult matchResult = new MemoizingMatchResult(stubMapping.getRequest().match(request));
                 String actualScenarioState = getScenarioStateOrNull(stubMapping);
                 return new NearMiss(request, stubMapping, matchResult, actualScenarioState);
             }

File: src/test/java/ignored/MassiveNearMissTest.java
Patch:
@@ -37,12 +37,12 @@ public void timeToCalculateBigNearMissDiffXml() {
         }
 
         final int drop = 2;
-        final int reps = 30;
+        final int reps = 10;
         List<Long> times = new ArrayList<>(reps);
         long sum = 0;
         for (int i = 0; i < reps; i++) {
             Stopwatch stopwatch = Stopwatch.createStarted();
-            client.postXml("/things/blah123/" + (stubs / 2), "<?xml version=\"1.0\"?><things />");
+            client.postXml("/things/blah123/" + (stubs / 2), "<?xml version=\"1.0\"?><things id=\"" + i + "\"/>");
             stopwatch.stop();
             long time = stopwatch.elapsed(MILLISECONDS);
             times.add(time);

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -163,7 +163,7 @@ private static void setGZippableMethods(HandlerWrapper gzipHandler, Class<?> gzi
 
     protected void finalizeSetup(Options options) {
         if(!options.jettySettings().getStopTimeout().isPresent()) {
-            jettyServer.setStopTimeout(0);
+            jettyServer.setStopTimeout(1000);
         }
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerTest.java
Patch:
@@ -80,7 +80,7 @@ public void testStopTimeout() {
 
     @Test
     public void testStopTimeoutNotSet() {
-        long expectedStopTimeout = 0L;
+        long expectedStopTimeout = 1000L;
         WireMockConfiguration config = WireMockConfiguration.wireMockConfig();
 
         JettyHttpServer jettyHttpServer = (JettyHttpServer) serverFactory.buildHttpServer(config, adminRequestHandler, stubRequestHandler);

File: java8/src/main/java/com/github/tomakehurst/wiremock/jetty94/SslContexts.java
Patch:
@@ -55,6 +55,7 @@ actual request (this is how curl 7.64.1 behaves!). Neither
 
     public static SslContextFactory.Server buildHttp2SslContextFactory(HttpsSettings httpsSettings) {
         SslContextFactory.Server sslContextFactory = SslContexts.defaultSslContextFactory(httpsSettings.keyStore());
+        sslContextFactory.setKeyManagerPassword(httpsSettings.keyManagerPassword());
         setupClientAuth(sslContextFactory, httpsSettings);
         sslContextFactory.setCipherComparator(HTTP2Cipher.COMPARATOR);
         sslContextFactory.setProvider("Conscrypt");
@@ -106,8 +107,8 @@ private static SslContextFactory.Server certificateGeneratingSslContextFactory(N
     }
 
     private static void setupKeyStore(SslContextFactory.Server sslContextFactory, KeyStoreSettings keyStoreSettings) {
-        sslContextFactory.setKeyStorePath(keyStoreSettings.path());
-        sslContextFactory.setKeyManagerPassword(keyStoreSettings.password());
+        sslContextFactory.setKeyStore(keyStoreSettings.loadStore());
+        sslContextFactory.setKeyStorePassword(keyStoreSettings.password());
         sslContextFactory.setKeyStoreType(keyStoreSettings.type());
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/common/BrowserProxySettings.java
Patch:
@@ -1,7 +1,5 @@
 package com.github.tomakehurst.wiremock.common;
 
-import com.github.tomakehurst.wiremock.common.ssl.AbstractKeyStoreSource;
-import com.github.tomakehurst.wiremock.common.ssl.FileOrClasspathKeyStoreSource;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 
 import java.nio.file.Paths;

File: src/main/java/com/github/tomakehurst/wiremock/common/Source.java
Patch:
@@ -3,4 +3,5 @@
 public interface Source<T> {
     T load();
     void save(T item);
+    boolean exists();
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/ssl/KeyStoreSettings.java
Patch:
@@ -23,9 +23,9 @@ public class KeyStoreSettings {
 
     public static final KeyStoreSettings NO_STORE = new KeyStoreSettings(null, null, null);
 
-    private final AbstractKeyStoreSource keyStoreSource;
+    private final KeyStoreSource keyStoreSource;
 
-    public KeyStoreSettings(AbstractKeyStoreSource keyStoreSource) {
+    public KeyStoreSettings(KeyStoreSource keyStoreSource) {
         this.keyStoreSource = keyStoreSource;
     }
 
@@ -48,7 +48,7 @@ public String path() {
     }
 
     public String password() {
-        return new String(keyStoreSource.getKeyStorePassword());
+        return keyStoreSource.getKeyStorePassword();
     }
 
     public String type() {

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -267,7 +267,8 @@ protected ServerConnector createHttpsConnector(
         SslContextFactory sslContextFactory = buildSslContextFactory();
 
         sslContextFactory.setKeyStorePath(httpsSettings.keyStorePath());
-        sslContextFactory.setKeyManagerPassword(httpsSettings.keyStorePassword());
+        sslContextFactory.setKeyStorePassword(httpsSettings.keyStorePassword());
+        sslContextFactory.setKeyManagerPassword(httpsSettings.keyManagerPassword());
         sslContextFactory.setKeyStoreType(httpsSettings.keyStoreType());
         if (httpsSettings.hasTrustStore()) {
             sslContextFactory.setTrustStorePath(httpsSettings.trustStorePath());

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -74,6 +74,7 @@ public class CommandLineOptions implements Options {
     private static final String HTTPS_PORT = "https-port";
     private static final String HTTPS_KEYSTORE = "https-keystore";
     private static final String HTTPS_KEYSTORE_PASSWORD = "keystore-password";
+    private static final String HTTPS_KEY_MANAGER_PASSWORD = "key-manager-password";
     private static final String HTTPS_TRUSTSTORE = "https-truststore";
     private static final String HTTPS_TRUSTSTORE_PASSWORD = "truststore-password";
     private static final String REQUIRE_CLIENT_CERT = "https-require-client-cert";
@@ -127,6 +128,7 @@ public CommandLineOptions(String... args) {
         optionParser.accepts(HTTPS_TRUSTSTORE_PASSWORD, "Password for the trust store").withRequiredArg();
         optionParser.accepts(HTTPS_TRUSTSTORE, "Path to an alternative truststore for HTTPS client certificates. Must have a password of \"password\".").requiredIf(REQUIRE_CLIENT_CERT).withRequiredArg();
         optionParser.accepts(HTTPS_KEYSTORE_PASSWORD, "Password for the alternative keystore.").withRequiredArg().defaultsTo("password");
+        optionParser.accepts(HTTPS_KEY_MANAGER_PASSWORD, "Key manager password for use with the alternative keystore.").withRequiredArg().defaultsTo("password");
         optionParser.accepts(HTTPS_KEYSTORE, "Path to an alternative keystore for HTTPS. Password is assumed to be \"password\" if not specified.").requiredIf(HTTPS_TRUSTSTORE).requiredIf(HTTPS_KEYSTORE_PASSWORD).withRequiredArg().defaultsTo(Resources.getResource("keystore").toString());
         optionParser.accepts(PROXY_ALL, "Will create a proxy mapping for /* to the specified URL").withRequiredArg();
         optionParser.accepts(PRESERVE_HOST_HEADER, "Will transfer the original host header from the client to the proxied service");
@@ -279,6 +281,7 @@ public HttpsSettings httpsSettings() {
                 .port(httpsPortNumber())
                 .keyStorePath((String) optionSet.valueOf(HTTPS_KEYSTORE))
                 .keyStorePassword((String) optionSet.valueOf(HTTPS_KEYSTORE_PASSWORD))
+                .keyManagerPassword((String) optionSet.valueOf(HTTPS_KEY_MANAGER_PASSWORD))
                 .trustStorePath((String) optionSet.valueOf(HTTPS_TRUSTSTORE))
                 .trustStorePassword((String) optionSet.valueOf(HTTPS_TRUSTSTORE_PASSWORD))
                 .needClientAuth(optionSet.has(REQUIRE_CLIENT_CERT)).build();

File: src/test/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptionsTest.java
Patch:
@@ -124,10 +124,11 @@ public void setsTrustStorePathAndPassword() {
     }
 
     @Test
-    public void setsKeyStorePathAndPassword() {
-        CommandLineOptions options = new CommandLineOptions("--https-port", "8443", "--https-keystore", "/my/keystore", "--keystore-password", "someotherpwd");
+    public void setsKeyStorePathPasswordAndKeyManagerPassword() {
+        CommandLineOptions options = new CommandLineOptions("--https-port", "8443", "--https-keystore", "/my/keystore", "--keystore-password", "someotherpwd", "--key-manager-password", "keymanpass");
         assertThat(options.httpsSettings().keyStorePath(), is("/my/keystore"));
         assertThat(options.httpsSettings().keyStorePassword(), is("someotherpwd"));
+        assertThat(options.httpsSettings().keyManagerPassword(), is("keymanpass"));
     }
 
 	@Test(expected=Exception.class)

File: src/main/java/com/github/tomakehurst/wiremock/common/Notifier.java
Patch:
@@ -20,7 +20,6 @@ public interface Notifier {
 	public static final String KEY = "Notifier";
 
 	void info(String message);
-	void info(String message, Throwable t);
 	void error(String message);
 	void error(String message, Throwable t);
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -154,8 +154,7 @@ public StubRequestHandler buildStubRequestHandler() {
                     options.proxyHostHeader(),
                     globalSettingsHolder,
                     browserProxySettings.trustAllProxyTargets(),
-                    browserProxySettings.trustedProxyTargets(),
-                    options.notifier()
+                    browserProxySettings.trustedProxyTargets()
                 ),
                 ImmutableList.copyOf(options.extensionsOfType(ResponseTransformer.class).values())
             ),

File: java8/src/main/java/com/github/tomakehurst/wiremock/http/ssl/DynamicKeyStore.java
Patch:
@@ -12,9 +12,9 @@ public class DynamicKeyStore {
     private final X509KeyStore keyStore;
     private final CertificateAuthority existingCertificateAuthority;
 
-    public DynamicKeyStore(X509KeyStore keyStore, CertificateAuthority existingCertificateAuthority) {
+    public DynamicKeyStore(X509KeyStore keyStore) {
         this.keyStore = requireNonNull(keyStore);
-        this.existingCertificateAuthority = requireNonNull(existingCertificateAuthority);
+        this.existingCertificateAuthority = requireNonNull(keyStore.getCertificateAuthority(), "Keystore does not contain a certificate that can act as a certificate authority");
     }
 
     PrivateKey getPrivateKey(String alias) {

File: java8/src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest.java
Patch:
@@ -113,7 +113,7 @@ private CertificateGeneratingX509ExtendedKeyManager keyManagerFor(KeyStore keySt
 
         return new CertificateGeneratingX509ExtendedKeyManager(
                 keyManager,
-                new DynamicKeyStore(x509KeyStore, x509KeyStore.getCertificateAuthority()),
+                new DynamicKeyStore(x509KeyStore),
                 new SunHostNameMatcher(),
                 new TestNotifier()
         );

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerFactory.java
Patch:
@@ -61,8 +61,10 @@ public HttpServer buildHttpServer(
     ) {
         try {
             return SERVER_CONSTRUCTOR.newInstance(options, adminRequestHandler, stubRequestHandler);
-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        } catch (InstantiationException | IllegalAccessException e) {
             return Exceptions.throwUnchecked(e, HttpServer.class);
+        } catch (InvocationTargetException e) {
+            return Exceptions.throwUnchecked(e.getCause(), null);
         }
     }
 }

File: src/test/java/com/github/tomakehurst/wiremock/common/KeyStoreSettingsTest.java
Patch:
@@ -26,23 +26,23 @@ public class KeyStoreSettingsTest {
 
     @Test
     public void loadsTrustStoreFromClasspath() {
-        KeyStoreSettings trustStoreSettings = new KeyStoreSettings(TRUST_STORE_NAME, TRUST_STORE_PASSWORD);
+        KeyStoreSettings trustStoreSettings = new KeyStoreSettings(TRUST_STORE_NAME, TRUST_STORE_PASSWORD, "jks");
 
         KeyStore keyStore = trustStoreSettings.loadStore();
         assertNotNull(keyStore);
     }
 
     @Test
     public void loadsTrustStoreFromFilesystem() {
-        KeyStoreSettings trustStoreSettings = new KeyStoreSettings(TRUST_STORE_PATH, TRUST_STORE_PASSWORD);
+        KeyStoreSettings trustStoreSettings = new KeyStoreSettings(TRUST_STORE_PATH, TRUST_STORE_PASSWORD, "jks");
 
         KeyStore keyStore = trustStoreSettings.loadStore();
         assertNotNull(keyStore);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void failsWhenTrustStoreNotFound() {
-        KeyStoreSettings trustStoreSettings = new KeyStoreSettings("test-unknownstore", "");
+        KeyStoreSettings trustStoreSettings = new KeyStoreSettings("test-unknownstore", "", "jks");
         trustStoreSettings.loadStore();
     }
 

File: java8/src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest.java
Patch:
@@ -62,7 +62,7 @@ public void generatesAndReturnsNewAliasForWorkingPrivateKey() throws Exception {
     }
 
     @Test
-    public void returnsSameGeneratedPricateKeyOnSubsequencCalls() throws Exception {
+    public void returnsSameGeneratedPrivateKeyOnSubsequentCalls() throws Exception {
 
         KeyStore keyStore = readKeyStore(KEY_STORE_WITH_CA_PATH, "password");
         String hostname = "example.com";

File: java8/src/main/java/com/github/tomakehurst/wiremock/http/ssl/X509KeyStore.java
Patch:
@@ -75,7 +75,7 @@ private static X509Certificate[] convertToX509(Certificate[] fromKeyStore) {
     }
 
     /**
-     * @return the first key & chain that represent a certificate authority
+     * @return the first key &amp; chain that represent a certificate authority
      *         or null if none found
      */
     public CertificateAuthority getCertificateAuthority() {

File: java8/src/main/java/com/github/tomakehurst/wiremock/http/ssl/DynamicKeyStore.java
Patch:
@@ -9,10 +9,10 @@
 
 public class DynamicKeyStore {
 
-    private final JavaX509KeyStore keyStore;
+    private final X509KeyStore keyStore;
     private final CertificateAuthority existingCertificateAuthority;
 
-    public DynamicKeyStore(JavaX509KeyStore keyStore, CertificateAuthority existingCertificateAuthority) {
+    public DynamicKeyStore(X509KeyStore keyStore, CertificateAuthority existingCertificateAuthority) {
         this.keyStore = requireNonNull(keyStore);
         this.existingCertificateAuthority = requireNonNull(existingCertificateAuthority);
     }

File: java8/src/main/java/com/github/tomakehurst/wiremock/http/ssl/X509KeyStore.java
Patch:
@@ -19,7 +19,7 @@
  * Wrapper class to make it easy to retrieve X509 PrivateKey and certificate
  * chains
  */
-public class JavaX509KeyStore {
+public class X509KeyStore {
 
     private final KeyStore keyStore;
     private final char[] password;
@@ -31,7 +31,7 @@ public class JavaX509KeyStore {
      * @param password used to manage all keys stored in this key store
      * @throws KeyStoreException if the keystore has not been loaded
      */
-    public JavaX509KeyStore(KeyStore keyStore, char[] password) throws KeyStoreException {
+    public X509KeyStore(KeyStore keyStore, char[] password) throws KeyStoreException {
         this.keyStore = requireNonNull(keyStore);
         this.password = requireNonNull(password);
         this.aliases = Collections.list(keyStore.aliases());

File: java8/src/main/java/com/github/tomakehurst/wiremock/jetty94/Jetty94HttpServer.java
Patch:
@@ -8,7 +8,7 @@
 import com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority;
 import com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager;
 import com.github.tomakehurst.wiremock.http.ssl.DynamicKeyStore;
-import com.github.tomakehurst.wiremock.http.ssl.JavaX509KeyStore;
+import com.github.tomakehurst.wiremock.http.ssl.X509KeyStore;
 import com.github.tomakehurst.wiremock.http.ssl.SunHostNameMatcher;
 import com.github.tomakehurst.wiremock.jetty9.DefaultMultipartRequestConfigurer;
 import com.github.tomakehurst.wiremock.jetty9.JettyHttpServer;
@@ -166,7 +166,7 @@ protected KeyManager[] getKeyManagers(KeyStore keyStore) throws Exception {
 
     private KeyManager certificateGeneratingX509ExtendedKeyManager(KeyStore keyStore, X509ExtendedKeyManager manager, char[] keyStorePassword) {
         try {
-            JavaX509KeyStore x509KeyStore = new JavaX509KeyStore(keyStore, keyStorePassword);
+            X509KeyStore x509KeyStore = new X509KeyStore(keyStore, keyStorePassword);
             CertificateAuthority certificateAuthority = x509KeyStore.getCertificateAuthority();
             if (certificateAuthority != null) {
                 return new CertificateGeneratingX509ExtendedKeyManager(

File: java8/src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest.java
Patch:
@@ -108,7 +108,7 @@ private CertificateGeneratingX509ExtendedKeyManager keyManagerFor(KeyStore keySt
         KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
         keyManagerFactory.init(keyStore, keyStorePassword);
         X509ExtendedKeyManager keyManager = findExtendedKeyManager(keyManagerFactory.getKeyManagers());
-        JavaX509KeyStore x509KeyStore = new JavaX509KeyStore(keyStore, keyStorePassword);
+        X509KeyStore x509KeyStore = new X509KeyStore(keyStore, keyStorePassword);
 
         return new CertificateGeneratingX509ExtendedKeyManager(
                 keyManager,

File: src/main/java/com/github/tomakehurst/wiremock/http/ssl/TrustSpecificHostsStrategy.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.tomakehurst.wiremock.http.ssl;
 
 import javax.net.ssl.SSLEngine;
+import java.net.InetAddress;
 import java.net.Socket;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
@@ -21,7 +22,8 @@ public boolean isTrusted(X509Certificate[] chain, String authType) {
 
     @Override
     public boolean isTrusted(X509Certificate[] chain, String authType, Socket socket) {
-        return trustedHosts.contains(socket.getInetAddress().getHostName());
+        InetAddress inetAddress = socket.getInetAddress();
+        return trustedHosts.contains(inetAddress.getHostName()) || trustedHosts.contains(inetAddress.getHostAddress());
     }
 
     @Override

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -123,7 +123,7 @@ private File generateKeystore() throws Exception {
 
         CertificateSpecification certificateSpecification = new X509CertificateSpecification(
                 /* version = */V3,
-                /* subject = */"CN=wiremock.org",
+                /* subject = */"CN=localhost",
                 /* issuer = */"CN=wiremock.org",
                 /* notBefore = */new Date(),
                 /* notAfter = */new Date(System.currentTimeMillis() + (365L * 24 * 60 * 60 * 1000))

File: src/test/java/com/github/tomakehurst/wiremock/verification/diff/DiffTest.java
Patch:
@@ -86,7 +86,7 @@ public void showsDiffForUrlPathMatching() {
         assertThat(diff.toString(), is(
             junitStyleDiffMessage(
                 "ANY\n" +
-                "/expected/.*\n",
+                "[path regex] /expected/.*\n",
 
                 "ANY\n" +
                 "/actual\n")

File: src/test/java/com/github/tomakehurst/wiremock/ResponseDribbleAcceptanceTest.java
Patch:
@@ -40,6 +40,7 @@ public class ResponseDribbleAcceptanceTest {
     private static final int DOUBLE_THE_SOCKET_TIMEOUT = SOCKET_TIMEOUT_MILLISECONDS * 2;
 
     private static final byte[] BODY_BYTES = "the long sentence being sent".getBytes();
+    public static final double ERROR_MARGIN = 200.0;
 
     @Rule
     public WireMockRule wireMockRule = new WireMockRule(DYNAMIC_PORT, DYNAMIC_PORT);
@@ -69,7 +70,7 @@ public void requestIsSuccessfulButTakesLongerThanSocketTimeoutWhenDribbleIsEnabl
         assertThat(response.getStatusLine().getStatusCode(), is(200));
         assertThat(responseBody, is(BODY_BYTES));
         assertThat(duration, greaterThanOrEqualTo(SOCKET_TIMEOUT_MILLISECONDS));
-        assertThat((double) duration, closeTo(DOUBLE_THE_SOCKET_TIMEOUT, 100.0));
+        assertThat((double) duration, closeTo(DOUBLE_THE_SOCKET_TIMEOUT, ERROR_MARGIN));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -73,4 +73,5 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     boolean getGzipDisabled();
     boolean getStubRequestLoggingDisabled();
     boolean getStubCorsEnabled();
+    boolean trustAllProxyTargets();
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -150,7 +150,9 @@ public StubRequestHandler buildStubRequestHandler() {
                     options.httpsSettings().trustStore(),
                     options.shouldPreserveHostHeader(),
                     options.proxyHostHeader(),
-                    globalSettingsHolder),
+                    globalSettingsHolder,
+                    options.trustAllProxyTargets()
+                ),
                 ImmutableList.copyOf(options.extensionsOfType(ResponseTransformer.class).values())
             ),
             this,

File: src/test/java/com/github/tomakehurst/wiremock/http/ProxyResponseRendererTest.java
Patch:
@@ -55,7 +55,7 @@ public void acceptsAnyCertificateForStandardProxying() {
     }
 
     @Test
-    public void rejectsSelfSignedCertificateForReverseProxying() {
+    public void rejectsSelfSignedCertificateForForwardProxyingByDefault() {
 
         origin.stubFor(get("/proxied").willReturn(aResponse().withBody("Result")));
 
@@ -72,7 +72,7 @@ public void run() {
     }
 
     @Test
-    public void acceptsSelfSignedCertificateForReverseProxyingIfTrustAllProxyTargets() {
+    public void acceptsSelfSignedCertificateForForwardProxyingIfTrustAllProxyTargets() {
 
         final ProxyResponseRenderer trustAllProxyResponseRenderer = buildProxyResponseRenderer(true);
 

File: java8/src/test/java/com/github/tomakehurst/wiremock/HttpsBrowserProxyAcceptanceTest.java
Patch:
@@ -68,7 +68,9 @@ public void addAResourceToProxy() {
                 .dynamicPort()
                 .dynamicHttpsPort()
                 .fileSource(new SingleRootFileSource(setupTempFileRoot()))
-                .enableBrowserProxying(true));
+                .enableBrowserProxying(true)
+                .trustAll(true)
+        );
         proxy.start();
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -73,4 +73,5 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     boolean getGzipDisabled();
     boolean getStubRequestLoggingDisabled();
     boolean getStubCorsEnabled();
+    boolean trustAll();
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -150,7 +150,9 @@ public StubRequestHandler buildStubRequestHandler() {
                     options.httpsSettings().trustStore(),
                     options.shouldPreserveHostHeader(),
                     options.proxyHostHeader(),
-                    globalSettingsHolder),
+                    globalSettingsHolder,
+                    options.trustAll()
+                ),
                 ImmutableList.copyOf(options.extensionsOfType(ResponseTransformer.class).values())
             ),
             this,

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -192,16 +192,16 @@ public static StringValuePattern matchingJsonPath(String value, StringValuePatte
         return new MatchesJsonPathPattern(value, valuePattern);
     }
 
-    public static StringValuePattern equalToXml(String value) {
+    public static EqualToXmlPattern equalToXml(String value) {
         return new EqualToXmlPattern(value);
     }
 
     public static EqualToXmlPattern equalToXml(String value, boolean enablePlaceholders) {
-        return new EqualToXmlPattern(value, enablePlaceholders, null, null);
+        return new EqualToXmlPattern(value, enablePlaceholders, null, null, null);
     }
 
     public static EqualToXmlPattern equalToXml(String value, boolean enablePlaceholders, String placeholderOpeningDelimiterRegex, String placeholderClosingDelimiterRegex) {
-	    return new EqualToXmlPattern(value, enablePlaceholders, placeholderOpeningDelimiterRegex, placeholderClosingDelimiterRegex);
+	    return new EqualToXmlPattern(value, enablePlaceholders, placeholderOpeningDelimiterRegex, placeholderClosingDelimiterRegex, null);
     }
 
     public static MatchesXPathPattern matchingXPath(String value) {

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -62,7 +62,7 @@ public class WireMockServer implements Container, Stubbing, Admin {
 	private final HttpServer httpServer;
 	private final Notifier notifier;
 
-    private final Options options;
+    protected final Options options;
 
     protected final WireMock client;
 

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -72,4 +72,5 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     ChunkedEncodingPolicy getChunkedEncodingPolicy();
     boolean getGzipDisabled();
     boolean getStubRequestLoggingDisabled();
+    boolean getStubCorsEnabled();
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPathPattern.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.matching;
 
-import java.net.URI;
+import com.github.tomakehurst.wiremock.common.Urls;
 
 public class UrlPathPattern extends UrlPattern {
 
@@ -29,7 +29,7 @@ public MatchResult match(String url) {
             return MatchResult.noMatch();
         }
 
-        String path = URI.create(url).getRawPath();
+        String path = Urls.getPath(url);
         return super.match(path);
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletRequestAdapter.java
Patch:
@@ -254,7 +254,7 @@ public boolean isBrowserProxyRequest() {
         }
         if (request instanceof org.eclipse.jetty.server.Request) {
             org.eclipse.jetty.server.Request jettyRequest = (org.eclipse.jetty.server.Request) request;
-            return JettyUtils.getUri(jettyRequest).isAbsolute();
+            return JettyUtils.uriIsAbsolute(jettyRequest);
         }
 
         return false;

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsHelper.java
Patch:
@@ -77,6 +77,6 @@ private String formatMessage(String message) {
     }
 
     protected static RenderCache getRenderCache(Options options) {
-        return options.get("renderCache", null);
+        return options.get("renderCache", new RenderCache());
     }
 }

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeaders.java
Patch:
@@ -124,9 +124,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (headers != null ? headers.hashCode() : 0);
-        return result;
+        return headers != null ? headers.hashCode() : 0;
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -71,4 +71,5 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     AsynchronousResponseSettings getAsynchronousResponseSettings();
     ChunkedEncodingPolicy getChunkedEncodingPolicy();
     boolean getGzipDisabled();
+    boolean getStubRequestLoggingDisabled();
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -161,7 +161,8 @@ public StubRequestHandler buildStubRequestHandler() {
             this,
             postServeActions,
             requestJournal,
-            getStubRequestFilters()
+            getStubRequestFilters(),
+            options.getStubRequestLoggingDisabled()
         );
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerTest.java
Patch:
@@ -60,7 +60,8 @@ public void init() {
                 admin,
                 Collections.<String, PostServeAction>emptyMap(),
                 context.mock(RequestJournal.class),
-                Collections.<RequestFilter>emptyList()
+                Collections.<RequestFilter>emptyList(),
+                false
         );
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/StubRequestHandlerTest.java
Patch:
@@ -67,7 +67,7 @@ public void init() {
         admin = context.mock(Admin.class);
 		requestJournal = context.mock(RequestJournal.class);
 
-		requestHandler = new StubRequestHandler(stubServer, responseRenderer, admin, Collections.<String, PostServeAction>emptyMap(), requestJournal, Collections.<RequestFilter>emptyList());
+		requestHandler = new StubRequestHandler(stubServer, responseRenderer, admin, Collections.<String, PostServeAction>emptyMap(), requestJournal, Collections.<RequestFilter>emptyList(), false);
 
         context.checking(new Expectations() {{
             allowing(requestJournal);

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePatternJsonDeserializer.java
Patch:
@@ -88,7 +88,7 @@ public boolean apply(Map.Entry<String, JsonNode> input) {
         });
 
         if (!entry.getValue().isTextual()) {
-            throw new JsonMappingException(entry.getKey() + " operand must be a string");
+            throw new JsonMappingException(entry.getKey() + " operand must be a non-null string");
         }
         String operand = entry.getValue().textValue();
         try {
@@ -105,7 +105,7 @@ private EqualToPattern deserializeEqualTo(JsonNode rootNode) throws JsonMappingE
 
         JsonNode equalToNode = rootNode.findValue("equalTo");
         if (!equalToNode.isTextual()) {
-            throw new JsonMappingException("equalTo operand must be a string");
+            throw new JsonMappingException("equalTo operand must be a non-null string");
         }
 
         String operand = equalToNode.textValue();

File: src/test/java/com/github/tomakehurst/wiremock/recording/RequestBodyPatternFactoryJsonDeserializerTest.java
Patch:
@@ -46,8 +46,9 @@ public void correctlyDeserializesWithEqualToMatcher() {
             "    \"caseInsensitive\": true        \n" +
             "}                                      "
         );
-        EqualToPattern bodyPattern = (EqualToPattern) bodyPatternFactory.forRequest(mockRequest());
+        EqualToPattern bodyPattern = (EqualToPattern) bodyPatternFactory.forRequest(mockRequest().body("this body text"));
         assertThat(bodyPattern.getCaseInsensitive(), is(true));
+        assertThat(bodyPattern.getExpected(), is("this body text"));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/matching/ContentPattern.java
Patch:
@@ -17,13 +17,15 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.google.common.base.Preconditions;
 
 @JsonDeserialize(using = ContentPatternDeserialiser.class)
 public abstract class ContentPattern<T> implements NamedValueMatcher<T> {
 
     protected final T expectedValue;
 
     public ContentPattern(T expectedValue) {
+        Preconditions.checkNotNull(expectedValue, "'" + getName() + "' expected value cannot be null");
         this.expectedValue = expectedValue;
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingCollection.java
Patch:
@@ -16,10 +16,12 @@
 package com.github.tomakehurst.wiremock.stubbing;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 
 import java.util.Collections;
 import java.util.List;
 
+@JsonIgnoreProperties({ "$schema", "meta" })
 public class StubMappingCollection extends StubMapping {
 
     private List<StubMapping> mappings;

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -41,7 +41,7 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
 
     int DEFAULT_PORT = 8080;
     int DYNAMIC_PORT = 0;
-    int DEFAULT_CONTAINER_THREADS = 10;
+    int DEFAULT_CONTAINER_THREADS = 14;
     String DEFAULT_BIND_ADDRESS = "0.0.0.0";
 
     int portNumber();

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -54,6 +54,7 @@
 public class JettyHttpServer implements HttpServer {
     private static final String FILES_URL_MATCH = String.format("/%s/*", WireMockApp.FILES_ROOT);
     private static final String[] GZIPPABLE_METHODS = new String[] { "POST", "PUT", "PATCH", "DELETE" };
+    private static final int DEFAULT_ACCEPTORS = 3;
 
     static {
         System.setProperty("org.eclipse.jetty.server.HttpChannelState.DEFAULT_TIMEOUT", "300000");
@@ -313,7 +314,7 @@ protected ServerConnector createServerConnector(String bindAddress,
                                                     NetworkTrafficListener listener,
                                                     ConnectionFactory... connectionFactories) {
 
-        int acceptors = jettySettings.getAcceptors().or(2);
+        int acceptors = jettySettings.getAcceptors().or(DEFAULT_ACCEPTORS);
         NetworkTrafficServerConnector connector = new NetworkTrafficServerConnector(
                 jettyServer,
                 null,

File: src/test/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptionsTest.java
Patch:
@@ -233,9 +233,9 @@ public void returnsCorrectlyParsedNumberOfThreads() {
     }
 
     @Test
-    public void defaultsContainerThreadsTo10() {
+    public void defaultsContainerThreadsTo14() {
         CommandLineOptions options = new CommandLineOptions();
-        assertThat(options.containerThreads(), is(10));
+        assertThat(options.containerThreads(), is(14));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -229,7 +229,7 @@ public static StringValuePattern notMatching(String regex) {
     }
 
     public static StringValuePattern absent() {
-        return StringValuePattern.ABSENT;
+        return AbsentPattern.ABSENT;
     }
 
     public void saveMappings() {

File: src/main/java/com/github/tomakehurst/wiremock/matching/ContentPatternDeserialiser.java
Patch:
@@ -33,7 +33,7 @@ public ContentPattern<?> deserialize(JsonParser parser, DeserializationContext c
         JsonNode rootNode = parser.readValueAsTree();
 
         if (isAbsent(rootNode)) {
-            return StringValuePattern.ABSENT;
+            return AbsentPattern.ABSENT;
         }
 
         if (!rootNode.has("binaryEqualTo")) {

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePatternJsonDeserializer.java
Patch:
@@ -50,14 +50,15 @@ public class StringValuePatternJsonDeserializer extends JsonDeserializer<StringV
             .put("matches", RegexPattern.class)
             .put("doesNotMatch", NegativeRegexPattern.class)
             .put("anything", AnythingPattern.class)
+            .put("absent", AbsentPattern.class)
             .build();
 
     @Override
     public StringValuePattern deserialize(JsonParser parser, DeserializationContext context) throws IOException, JsonProcessingException {
         JsonNode rootNode = parser.readValueAsTree();
 
         if (isAbsent(rootNode)) {
-            return StringValuePattern.ABSENT;
+            return AbsentPattern.ABSENT;
         }
 
         return buildStringValuePattern(rootNode);

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -22,6 +22,7 @@
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.extension.Extension;
+import com.github.tomakehurst.wiremock.extension.responsetemplating.SystemKeyAuthoriser;
 import com.github.tomakehurst.wiremock.http.CaseInsensitiveKey;
 import com.github.tomakehurst.wiremock.http.HttpServerFactory;
 import com.github.tomakehurst.wiremock.http.ThreadPoolFactory;

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockConfiguration.java
Patch:
@@ -93,6 +93,7 @@ public class WireMockConfiguration implements Options {
     private int asynchronousResponseThreads;
     private ChunkedEncodingPolicy chunkedEncodingPolicy;
     private boolean gzipDisabled = false;
+    private String permittedSystemKeys = null;
 
     private MappingsSource getMappingsSource() {
         if (mappingsSource == null) {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsHelper.java
Patch:
@@ -32,7 +32,6 @@ public abstract class HandlebarsHelper<T> implements Helper<T> {
 
     public static final String ERROR_PREFIX = "[ERROR: ";
     public static final String ERROR_SUFFIX = "]";
-    public static final Set<String> PERMITTED_SYSTEM_KEYS = new HashSet<>();
 
     /**
      * Handle invalid helper data without exception details or because none was thrown.

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -137,7 +137,7 @@ public ResponseDefinition transform(Request request, final ResponseDefinition re
                 .build();
 
         if (responseDefinition.specifiesTextBodyContent()) {
-            HandlebarsOptimizedTemplate bodyTemplate = getTemplate(TemplateCacheKey.forInlineBody(responseDefinition), responseDefinition.getBody());
+            HandlebarsOptimizedTemplate bodyTemplate = getTemplate(TemplateCacheKey.forInlineBody(responseDefinition), responseDefinition.getTextBody());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         } else if (responseDefinition.specifiesBodyFile()) {
             HandlebarsOptimizedTemplate filePathTemplate = new HandlebarsOptimizedTemplate(handlebars, responseDefinition.getBodyFileName());

File: src/main/java/com/github/tomakehurst/wiremock/recording/ResponseDefinitionBodyMatcher.java
Patch:
@@ -55,7 +55,7 @@ public MatchResult match(ResponseDefinition responseDefinition) {
             responseDefinition.getHeaders() != null
             && ContentTypes.determineIsTextFromMimeType(responseDefinition.getHeaders().getContentTypeHeader().mimeTypePart())
         ) {
-            if (responseDefinition.getBody().length() > textSizeThreshold) {
+            if (responseDefinition.getTextBody().length() > textSizeThreshold) {
                 return MatchResult.exactMatch();
             } else {
                 return MatchResult.noMatch();

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -68,4 +68,5 @@ enum ChunkedEncodingPolicy { ALWAYS, NEVER, BODY_FILE }
     NotMatchedRenderer getNotMatchedRenderer();
     AsynchronousResponseSettings getAsynchronousResponseSettings();
     ChunkedEncodingPolicy getChunkedEncodingPolicy();
+    boolean getGzipDisabled();
 }

File: src/test/java/com/github/tomakehurst/wiremock/NotMatchedPageAcceptanceTest.java
Patch:
@@ -160,6 +160,7 @@ public void returns404AndDiffReportWhenPlusSymbolInQuery() {
         configure();
 
         WireMockResponse response = testClient.get("/some/api/records?sort=updated+asc&filter_updated_gt=2019-01-02");
+        System.err.println(response.content());
 
         assertThat(response.statusCode(), is(404));
         assertThat(response.content(), containsString("No response could be served"));

File: src/main/java/com/github/tomakehurst/wiremock/http/AdminRequestHandler.java
Patch:
@@ -22,6 +22,7 @@
 import com.github.tomakehurst.wiremock.admin.model.PathParams;
 import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.common.NotPermittedException;
+import com.github.tomakehurst.wiremock.common.Urls;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.extension.requestfilter.RequestFilter;
 import com.github.tomakehurst.wiremock.security.Authenticator;
@@ -74,7 +75,7 @@ public ServeEvent handleRequest(Request request) {
         }
 
         notifier().info("Admin request received:\n" + formatRequest(request));
-        String path = URI.create(withoutAdminRoot(request.getUrl())).getPath();
+        String path = Urls.getPath(withoutAdminRoot(request.getUrl()));
 
         try {
             AdminTask adminTask = adminRoutes.taskFor(request.getMethod(), path);

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletRequestAdapter.java
Patch:
@@ -23,7 +23,6 @@
 import com.github.tomakehurst.wiremock.http.QueryParameter;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
-import com.github.tomakehurst.wiremock.jetty9.DefaultMultipartRequestConfigurer;
 import com.github.tomakehurst.wiremock.jetty9.JettyUtils;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
@@ -35,7 +34,6 @@
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.*;
-import javax.servlet.MultipartConfigElement;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 

File: src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
Patch:
@@ -33,6 +33,8 @@ public static ClientError fromErrors(Errors errors) {
                 return new InvalidInputException(errors);
             case 30:
                 return new NotRecordingException();
+            case 50:
+                return new NotPermittedException(errors);
             default:
                 return new ClientError(errors);
         }

File: src/main/java/com/github/tomakehurst/wiremock/http/AdminRequestHandler.java
Patch:
@@ -21,6 +21,7 @@
 import com.github.tomakehurst.wiremock.admin.NotFoundException;
 import com.github.tomakehurst.wiremock.admin.model.PathParams;
 import com.github.tomakehurst.wiremock.common.InvalidInputException;
+import com.github.tomakehurst.wiremock.common.NotPermittedException;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
@@ -81,6 +82,8 @@ public ServeEvent handleRequest(Request request) {
             return ServeEvent.forUnmatchedRequest(LoggedRequest.createFrom(request));
         } catch (InvalidInputException iie) {
             return ServeEvent.forBadRequest(LoggedRequest.createFrom(request), iie.getErrors());
+        } catch (NotPermittedException npe) {
+            return ServeEvent.forNotAllowedRequest(LoggedRequest.createFrom(request), npe.getErrors());
         }
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubImport.java
Patch:
@@ -15,10 +15,12 @@
  */
 package com.github.tomakehurst.wiremock.stubbing;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import java.util.List;
 
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class StubImport {
 
     private final List<StubMapping> mappings;

File: src/main/java/com/github/tomakehurst/wiremock/extension/StubLifecycleListener.java
Patch:
@@ -20,8 +20,7 @@
 public interface StubLifecycleListener extends Extension {
 
     void stubCreated(StubMapping stub);
-    void stubEdited(StubMapping stub);
+    void stubEdited(StubMapping oldStub, StubMapping newStub);
     void stubRemoved(StubMapping stub);
     void stubsReset();
-    void stubsResetToDefaults();
 }

File: src/main/java/com/github/tomakehurst/wiremock/http/CaseInsensitiveKey.java
Patch:
@@ -35,7 +35,7 @@ public boolean equals(Object o) {
 
         CaseInsensitiveKey that = (CaseInsensitiveKey) o;
 
-        if (key != null ? !key.toLowerCase().equals(that.key.toLowerCase()) : that.key != null) return false;
+        if (key != null ? !key.equalsIgnoreCase(that.key) : that.key != null) return false;
 
         return true;
     }

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpHeader.java
Patch:
@@ -71,7 +71,7 @@ public boolean equals(Object o) {
 
         HttpHeader that = (HttpHeader) o;
 
-        if (key != null ? !key.toLowerCase().equals(that.key.toLowerCase()) : that.key != null) return false;
+        if (key != null ? !key.equalsIgnoreCase(that.key) : that.key != null) return false;
         if (values != null ? !values.equals(that.values) : that.values != null) return false;
 
         return true;

File: src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java
Patch:
@@ -573,7 +573,7 @@ public void servesRamlSpec() {
     public void servesSwaggerSpec() {
         WireMockResponse response = testClient.get("/__admin/docs/swagger");
         assertThat(response.statusCode(), is(200));
-        assertThat(response.content(), containsString("\"swagger\": \"2.0\""));
+        assertThat(response.content(), containsString("\"openapi\": \"3.0.0\""));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -125,7 +125,7 @@ private static StringEntity jsonStringEntity(String json) {
 
     @Override
     public void addStubMapping(StubMapping stubMapping) {
-        if (stubMapping.getRequest().hasCustomMatcher()) {
+        if (stubMapping.getRequest().hasInlineCustomMatcher()) {
             throw new AdminException("Custom matchers can't be used when administering a remote WireMock server. " +
                     "Use WireMockRule.stubFor() or WireMockServer.stubFor() to administer the local instance.");
         }

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -60,7 +60,7 @@ private static String renderList(List<?> list) {
         );
     }
 
-    public VerificationException(String messageStart, Diff diff) {
+    private VerificationException(String messageStart, Diff diff) {
         super(messageStart + " " + diff.toString());
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -329,7 +329,7 @@ public static UrlPathPattern urlPathMatching(String urlRegex) {
     }
 
     public static UrlPattern anyUrl() {
-        return new UrlPattern(new AnythingPattern(), false);
+        return UrlPattern.ANY;
     }
 
 	public static CountMatchingStrategy lessThan(int expected) {
@@ -519,7 +519,7 @@ public void verifyThat(CountMatchingStrategy expectedCount, RequestPatternBuilde
 		final RequestPattern requestPattern = requestPatternBuilder.build();
 
 		int actualCount;
-		if (requestPattern.hasCustomMatcher()) {
+		if (requestPattern.hasInlineCustomMatcher()) {
             List<LoggedRequest> requests = admin.findRequestsMatching(RequestPattern.everything()).getRequests();
             actualCount = from(requests).filter(thatMatch(requestPattern)).size();
         } else {

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPattern.java
Patch:
@@ -21,6 +21,8 @@
 
 public class UrlPattern implements NamedValueMatcher<String> {
 
+    public static final UrlPattern ANY = new UrlPattern(new AnythingPattern(), false);
+
     protected final StringValuePattern pattern;
     private final boolean regex;
 

File: src/test/java/com/github/tomakehurst/wiremock/matching/RequestPatternBuilderTest.java
Patch:
@@ -78,6 +78,7 @@ public void likeRequestPatternWithoutCustomMatcher() {
             new BasicCredentials("user", "pass"),
             ImmutableList.<ContentPattern<?>>of(WireMock.equalTo("BODY")),
             null,
+            null,
             null
         );
 
@@ -128,6 +129,7 @@ public void likeRequestPatternWithoutMultipartMatcher() {
                 new BasicCredentials("user", "pass"),
                 ImmutableList.<ContentPattern<?>>of(WireMock.equalTo("BODY")),
                 null,
+                null,
                 asList(multipartPattern)
         );
 

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -77,7 +77,7 @@ private Response applyTransformations(Request request,
 		ResponseTransformer transformer = transformers.get(0);
 		Response newResponse =
 				transformer.applyGlobally() || responseDefinition.hasTransformer(transformer) ?
-						transformer.transform(request, response, fileSource.child(FILES_ROOT), responseDefinition.getTransformerParameters()) :
+						transformer.transform(request, response, fileSource, responseDefinition.getTransformerParameters()) :
 						response;
 
 		return applyTransformations(request, responseDefinition, newResponse, transformers.subList(1, transformers.size()));

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockHttpServletRequestAdapter.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.*;
+import javax.servlet.MultipartConfigElement;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.Part;
@@ -275,6 +276,8 @@ public Collection<Part> getParts() {
                 String contentTypeHeaderValue = from(contentTypeHeader().values()).join(Joiner.on(" "));
                 InputStream inputStream = new ByteArrayInputStream(getBody());
                 MultiPartInputStreamParser inputStreamParser = new MultiPartInputStreamParser(inputStream, contentTypeHeaderValue, null, null);
+                MultipartConfigElement multipartConfigElement = new MultipartConfigElement((String)null);
+                request.setAttribute("org.eclipse.jetty.multipartConfig", multipartConfigElement);
                 request.setAttribute(org.eclipse.jetty.server.Request.__MULTIPART_INPUT_STREAM, inputStreamParser);
                 cachedMultiparts = from(safelyGetRequestParts()).transform(new Function<javax.servlet.http.Part, Part>() {
                     @Override

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMapping.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.stubbing;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.annotation.JsonView;
 import com.github.tomakehurst.wiremock.common.Json;
@@ -31,6 +32,7 @@
 import static com.google.common.base.MoreObjects.firstNonNull;
 
 @JsonPropertyOrder({ "id", "name", "request", "newRequest", "response", "uuid" })
+@JsonIgnoreProperties({ "$schema" }) // Allows this to be added as a hint to IDEs like VS Code
 public class StubMapping {
 	
 	public static final int DEFAULT_PRIORITY = 5; 

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/MockRequestBuilder.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.github.tomakehurst.wiremock.http.*;
 import java.util.Collection;
-import javax.servlet.http.Part;
 import org.jmock.Expectations;
 import org.jmock.Mockery;
 
@@ -42,7 +41,7 @@ public class MockRequestBuilder {
 	private List<QueryParameter> queryParameters = newArrayList();
 	private String body = "";
 	private String bodyAsBase64 = "";
-	private Collection<Part> multiparts = newArrayList();
+	private Collection<Request.Part> multiparts = newArrayList();
 
 	private boolean browserProxyRequest = false;
 	private String mockName;
@@ -109,7 +108,7 @@ public MockRequestBuilder asBrowserProxyRequest() {
 		return this;
 	}
 
-	public MockRequestBuilder withMultiparts(Collection<Part> parts) {
+	public MockRequestBuilder withMultiparts(Collection<Request.Part> parts) {
 		this.multiparts = parts;
 		return this;
 	}
@@ -149,6 +148,7 @@ public Request build() {
 			allowing(request).getBodyAsBase64(); will(returnValue(bodyAsBase64));
 			allowing(request).getAbsoluteUrl(); will(returnValue("http://localhost:8080" + url));
 			allowing(request).isBrowserProxyRequest(); will(returnValue(browserProxyRequest));
+			allowing(request).isMultipart(); will(returnValue(multiparts != null && !multiparts.isEmpty()));
 			allowing(request).getParts(); will(returnValue(multiparts));
 		}});
 

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenarios.java
Patch:
@@ -16,7 +16,6 @@
 package com.github.tomakehurst.wiremock.stubbing;
 
 import com.google.common.base.Function;
-import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 
@@ -54,7 +53,7 @@ public void onStubMappingUpdated(StubMapping oldMapping, StubMapping newMapping)
                 scenarioMap.get(oldMapping.getScenarioName())
                     .withoutStubMapping(oldMapping);
 
-            if (scenarioForOldMapping.getStubMappings().isEmpty()) {
+            if (scenarioForOldMapping.getMappings().isEmpty()) {
                 scenarioMap.remove(scenarioForOldMapping.getName());
             } else {
                 scenarioMap.put(oldMapping.getScenarioName(), scenarioForOldMapping);
@@ -77,7 +76,7 @@ public void onStubMappingRemoved(StubMapping mapping) {
                 scenarioMap.get(scenarioName)
                 .withoutStubMapping(mapping);
 
-            if (scenario.getStubMappings().isEmpty()) {
+            if (scenario.getMappings().isEmpty()) {
                 scenarioMap.remove(scenarioName);
             } else {
                 scenarioMap.put(scenarioName, scenario);

File: src/test/java/com/github/tomakehurst/wiremock/LogTimingAcceptanceTest.java
Patch:
@@ -57,7 +57,7 @@ public void includesAddedDelayInTotalWhenAsync() {
         Timing timing = serveEvent.getTiming();
         assertThat(timing.getAddedDelay(), is(DELAY));
         assertThat(timing.getProcessTime(), greaterThan(0));
-        assertThat(timing.getResponseSendTime(), greaterThan(0));
+//        assertThat(timing.getResponseSendTime(), greaterThan(0)); // Hard for this not to be flakey without some kind of throttling on the loopback adapter
         assertThat(timing.getServeTime(), is(timing.getProcessTime() + timing.getResponseSendTime()));
         assertThat(timing.getTotalTime(), is(timing.getProcessTime() + timing.getResponseSendTime() + DELAY));
     }

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -111,7 +111,9 @@ public ResponseDefinition transform(Request request, ResponseDefinition response
             Template bodyTemplate = uncheckedCompileTemplate(responseDefinition.getBody());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         } else if (responseDefinition.specifiesBodyFile()) {
-            TextFile file = files.getTextFileNamed(responseDefinition.getBodyFileName());
+            Template filePathTemplate = uncheckedCompileTemplate(responseDefinition.getBodyFileName());
+            String compiledFilePath = uncheckedApplyTemplate(filePathTemplate, model);
+            TextFile file = files.getTextFileNamed(compiledFilePath);
             Template bodyTemplate = uncheckedCompileTemplate(file.readContentsAsString());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         }

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -111,7 +111,9 @@ public ResponseDefinition transform(Request request, ResponseDefinition response
             Template bodyTemplate = uncheckedCompileTemplate(responseDefinition.getBody());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         } else if (responseDefinition.specifiesBodyFile()) {
-            TextFile file = files.getTextFileNamed(responseDefinition.getBodyFileName());
+            Template filePathTemplate = uncheckedCompileTemplate(responseDefinition.getBodyFileName());
+            String compiledFilePath = uncheckedApplyTemplate(filePathTemplate, model);
+            TextFile file = files.getTextFileNamed(compiledFilePath);
             Template bodyTemplate = uncheckedCompileTemplate(file.readContentsAsString());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         }

File: src/test/java/com/github/tomakehurst/wiremock/MultithreadConfigurationInheritanceTest.java
Patch:
@@ -33,9 +33,9 @@ public class MultithreadConfigurationInheritanceTest {
 
     @BeforeClass
     public static void setup(){
-        wireMockServer = new WireMockServer(8082);
+        wireMockServer = new WireMockServer(0);
         wireMockServer.start();
-        WireMock.configureFor(8082);
+        WireMock.configureFor(wireMockServer.port());
     }
 
 

File: src/main/java/com/github/tomakehurst/wiremock/common/ProxySettings.java
Patch:
@@ -55,6 +55,7 @@ public static ProxySettings fromString(String config) {
             if(!"http".equals(proxyUrl.getProtocol())){
                 throw new IllegalArgumentException("Proxy via does not support any other protocol than http");
             }
+            Preconditions.checkArgument(!proxyUrl.getHost().isEmpty(), "Host part of proxy must be specified");
             ProxySettings proxySettings = new ProxySettings(proxyUrl.getHost(), proxyUrl.getPort() == -1 ? DEFAULT_PORT : proxyUrl.getPort());
             if(!isEmpty(proxyUrl.getUserInfo())){
                 String[] userInfoArray = proxyUrl.getUserInfo().split(":");

File: src/main/java/com/github/tomakehurst/wiremock/common/Xml.java
Patch:
@@ -51,7 +51,6 @@ public static String prettyPrint(String xml) {
     public static String prettyPrint(Document doc) {
         try {
             TransformerFactory transformerFactory = createTransformerFactory();
-            transformerFactory.setAttribute("indent-number", 2);
             Transformer transformer = transformerFactory.newTransformer();
             transformer.setOutputProperty(INDENT, "yes");
             transformer.setOutputProperty(OMIT_XML_DECLARATION, "yes");
@@ -66,7 +65,9 @@ public static String prettyPrint(Document doc) {
 
     private static TransformerFactory createTransformerFactory() {
         try {
-            return (TransformerFactory) Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl").newInstance();
+            TransformerFactory transformerFactory = (TransformerFactory) Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl").newInstance();
+            transformerFactory.setAttribute("indent-number", 2);
+            return transformerFactory;
         } catch (Exception e) {
             return TransformerFactory.newInstance();
         }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -180,7 +180,7 @@ private void logUnmatchedRequest(LoggedRequest request) {
         if (!nearest.isEmpty()) {
             message = diffRenderer.render(nearest.get(0).getDiff());
         } else {
-            message = "Request was not matched as were no stubs registered:\n" + request;
+            message = "Request was not matched as there were no stubs registered:\n" + request;
         }
         notifier().error(message);
     }

File: src/test/java/com/github/tomakehurst/wiremock/ResponseDelayAsynchronousAcceptanceTest.java
Patch:
@@ -54,6 +54,7 @@ private WireMockConfiguration getOptions() {
         wireMockConfiguration.jettyAcceptors(1).containerThreads(4);
         wireMockConfiguration.asynchronousResponseEnabled(true);
         wireMockConfiguration.asynchronousResponseThreads(10);
+        wireMockConfiguration.dynamicPort();
         return wireMockConfiguration;
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/ResponseDelaySynchronousFailureAcceptanceTest.java
Patch:
@@ -56,6 +56,7 @@ private WireMockConfiguration getOptions() {
         WireMockConfiguration wireMockConfiguration = new WireMockConfiguration();
         wireMockConfiguration.jettyAcceptors(1).containerThreads(4);
         wireMockConfiguration.asynchronousResponseEnabled(false);
+        wireMockConfiguration.dynamicPort();
         return wireMockConfiguration;
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -92,7 +92,7 @@ public String getName() {
     public ResponseDefinition transform(Request request, ResponseDefinition responseDefinition, FileSource files, Parameters parameters) {
         ResponseDefinitionBuilder newResponseDefBuilder = ResponseDefinitionBuilder.like(responseDefinition);
         final ImmutableMap<String, Object> model = ImmutableMap.<String, Object>builder()
-                .putAll(firstNonNull(parameters, Collections.<String, Object>emptyMap()))
+                .put("parameters", firstNonNull(parameters, Collections.<String, Object>emptyMap()))
                 .put("request", RequestTemplateModel.from(request)).build();
 
         if (responseDefinition.specifiesTextBodyContent()) {

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -180,7 +180,7 @@ private void logUnmatchedRequest(LoggedRequest request) {
         if (!nearest.isEmpty()) {
             message = diffRenderer.render(nearest.get(0).getDiff());
         } else {
-            message = "Request was not matched as were no stubs registered:\n" + request;
+            message = "Request was not matched as there were no stubs registered:\n" + request;
         }
         notifier().error(message);
     }

File: src/main/java/com/github/tomakehurst/wiremock/matching/EqualToJsonPattern.java
Patch:
@@ -78,7 +78,7 @@ public Boolean isIgnoreArrayOrder() {
     }
 
     private boolean shouldIgnoreExtraElements() {
-        return ignoreArrayOrder != null && ignoreExtraElements;
+        return ignoreExtraElements != null && ignoreExtraElements;
     }
 
     public Boolean isIgnoreExtraElements() {

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
Patch:
@@ -92,7 +92,8 @@ public ResponseDefinition transform(Request request, ResponseDefinition response
         ResponseDefinitionBuilder newResponseDefBuilder = ResponseDefinitionBuilder.like(responseDefinition);
         final ImmutableMap<String, RequestTemplateModel> model = ImmutableMap.of("request", RequestTemplateModel.from(request));
 
-        if (responseDefinition.specifiesBodyContent()) {
+
+        if (responseDefinition.specifiesTextBodyContent()) {
             Template bodyTemplate = uncheckedCompileTemplate(responseDefinition.getBody());
             applyTemplatedResponseBody(newResponseDefBuilder, model, bodyTemplate);
         } else if (responseDefinition.specifiesBodyFile()) {

File: src/main/java/com/github/tomakehurst/wiremock/standalone/WireMockServerRunner.java
Patch:
@@ -100,7 +100,9 @@ public void loadMappingsInto(StubMappings stubMappings) {
 	}
 	
 	public void stop() {
-		wireMockServer.stop();
+		if (wireMockServer != null) {
+			wireMockServer.stop();
+		}
 	}
 
     public boolean isRunning() {

File: src/main/java/com/github/tomakehurst/wiremock/common/JsonException.java
Patch:
@@ -24,6 +24,8 @@ public static JsonException fromJackson(JsonMappingException e) {
             message = patternSyntaxException.getMessage();
         } else if (rootCause instanceof JsonMappingException) {
             message = ((JsonMappingException) rootCause).getOriginalMessage();
+        } else if (rootCause instanceof InvalidInputException) {
+            message = ((InvalidInputException) rootCause).getErrors().first().getDetail();
         }
 
         List<String> nodes = transform(e.getPath(), TO_NODE_NAMES);

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -136,8 +136,8 @@ public StubRequestHandler buildStubRequestHandler() {
                     options.proxyVia(),
                     options.httpsSettings().trustStore(),
                     options.shouldPreserveHostHeader(),
-                    options.proxyHostHeader()
-                ),
+                    options.proxyHostHeader(),
+                    globalSettingsHolder),
                 ImmutableList.copyOf(options.extensionsOfType(ResponseTransformer.class).values())
             ),
             this,

File: src/test/java/com/github/tomakehurst/wiremock/NotMatchedPageAcceptanceTest.java
Patch:
@@ -32,6 +32,7 @@
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
 import static com.github.tomakehurst.wiremock.testsupport.TestFiles.file;
 import static com.github.tomakehurst.wiremock.testsupport.TestHttpHeader.withHeader;
+import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.equalsMultiLine;
 import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -73,7 +74,7 @@ public void rendersAPlainTextDiffWhenStubNotMatchedAndANearMissIsAvailable() {
             withHeader("Accept", "text/plain")
         );
 
-        assertThat(response.content(), is(file("not-found-diff-sample_ascii.txt")));
+        assertThat(response.content(), equalsMultiLine(file("not-found-diff-sample_ascii.txt")));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -73,7 +73,7 @@ public VerificationException(RequestPattern expected, List<LoggedRequest> reques
 
     public VerificationException(RequestPattern expected, int expectedCount, int actualCount) {
         super(String.format(
-            "Expected exactly %d requests matching the following pattern but received only %d:\n%s",
+            "Expected exactly %d requests matching the following pattern but received %d:\n%s",
             expectedCount,
             actualCount,
             expected.toString()));

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -73,7 +73,7 @@ public VerificationException(RequestPattern expected, List<LoggedRequest> reques
 
     public VerificationException(RequestPattern expected, int expectedCount, int actualCount) {
         super(String.format(
-            "Expected exactly %d requests matching the following pattern but received only %d:\n%s",
+            "Expected exactly %d requests matching the following pattern but received %d:\n%s",
             expectedCount,
             actualCount,
             expected.toString()));

File: src/main/java/com/github/tomakehurst/wiremock/admin/StartRecordingTask.java
Patch:
@@ -16,7 +16,7 @@
 package com.github.tomakehurst.wiremock.admin;
 
 import com.github.tomakehurst.wiremock.admin.model.PathParams;
-import com.github.tomakehurst.wiremock.common.InvalidRequestException;
+import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.http.Request;
@@ -33,7 +33,7 @@ public ResponseDefinition execute(Admin admin, Request request, PathParams pathP
         try {
             admin.startRecording(recordSpec);
             return ResponseDefinition.okEmptyJson();
-        } catch (InvalidRequestException e) {
+        } catch (InvalidInputException e) {
             return jsonResponse(e.getErrors(), 422);
         }
     }

File: src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
Patch:
@@ -29,7 +29,7 @@ public static ClientError fromErrors(Errors errors) {
         Integer errorCode = errors.first().getCode();
         switch (errorCode) {
             case 10:
-                return new InvalidRequestException(errors);
+                return new InvalidInputException(errors);
             case 30:
                 return new NotRecordingException();
             default:

File: src/main/java/com/github/tomakehurst/wiremock/common/InvalidInputException.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.github.tomakehurst.wiremock.common;
 
-public class InvalidRequestException extends ClientError {
+public class InvalidInputException extends ClientError {
 
-    public InvalidRequestException(Errors errors) {
+    public InvalidInputException(Errors errors) {
         super(errors);
     }
 }

File: src/main/java/com/github/tomakehurst/wiremock/http/AdminRequestHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.github.tomakehurst.wiremock.admin.AdminUriTemplate;
 import com.github.tomakehurst.wiremock.admin.NotFoundException;
 import com.github.tomakehurst.wiremock.admin.model.PathParams;
+import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
@@ -78,6 +79,8 @@ public ServeEvent handleRequest(Request request) {
             );
         } catch (NotFoundException e) {
             return ServeEvent.forUnmatchedRequest(LoggedRequest.createFrom(request));
+        } catch (InvalidInputException iie) {
+            return ServeEvent.forBadRequest(LoggedRequest.createFrom(request), iie.getErrors());
         }
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/recording/Recorder.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.common.Errors;
 import com.github.tomakehurst.wiremock.common.FileSource;
-import com.github.tomakehurst.wiremock.common.InvalidRequestException;
+import com.github.tomakehurst.wiremock.common.InvalidInputException;
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.core.Options;
@@ -52,7 +52,7 @@ public synchronized void startRecording(RecordSpec spec) {
         }
 
         if (spec.getTargetBaseUrl() == null || spec.getTargetBaseUrl().isEmpty()) {
-            throw new InvalidRequestException(Errors.validation("/targetBaseUrl", "targetBaseUrl is required"));
+            throw new InvalidInputException(Errors.validation("/targetBaseUrl", "targetBaseUrl is required"));
         }
 
         StubMapping proxyMapping = proxyAllTo(spec.getTargetBaseUrl()).build();

File: src/test/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPatternTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.common.Json;
+import com.github.tomakehurst.wiremock.common.JsonException;
 import com.github.tomakehurst.wiremock.common.LocalNotifier;
 import com.github.tomakehurst.wiremock.common.Notifier;
 import org.jmock.Expectations;
@@ -293,7 +294,7 @@ public void correctlyDeserialisesWithValuePattern() {
         assertThat(subMatcher.getExpected(), is("the value"));
     }
 
-    @Test(expected = JsonMappingException.class)
+    @Test(expected = JsonException.class)
     public void throwsSensibleErrorOnDeserialisationWhenPatternIsBadlyFormedWithMissingExpression() {
         Json.read(
             "{                                      \n" +
@@ -305,7 +306,7 @@ public void throwsSensibleErrorOnDeserialisationWhenPatternIsBadlyFormedWithMiss
             StringValuePattern.class);
     }
 
-    @Test(expected = JsonMappingException.class)
+    @Test(expected = JsonException.class)
     public void throwsSensibleErrorOnDeserialisationWhenPatternIsBadlyFormedWithBadValuePatternName() {
         Json.read(
             "{                                      \n" +

File: src/main/java/com/github/tomakehurst/wiremock/verification/diff/PlainTextDiffRenderer.java
Patch:
@@ -126,7 +126,8 @@ private void writeSingleLine(StringBuilder sb, String left, String right, String
     }
 
     private String wrap(String s) {
-        return Strings.wrapIfLongestLineExceedsLimit(s, getColumnWidth());
+        String safeString = s == null ? "" : s;
+        return Strings.wrapIfLongestLineExceedsLimit(safeString, getColumnWidth());
     }
 
     private int getColumnWidth() {

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyFaultInjector.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.net.Socket;
+import java.nio.channels.SocketChannel;
 
 import javax.servlet.http.HttpServletResponse;
 
@@ -88,7 +89,7 @@ public void randomDataAndCloseConnection() {
     private Socket socket() {
         HttpChannel httpChannel = response.getHttpOutput().getHttpChannel();
         ChannelEndPoint ep = (ChannelEndPoint) httpChannel.getEndPoint();
-        return ep.getSocket();
+        return ((SocketChannel) ep.getChannel()).socket();
     }
 
 }

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/Scenarios.java
Patch:
@@ -60,7 +60,7 @@ public void onStubServed(StubMapping mapping) {
             final String scenarioName = mapping.getScenarioName();
             Scenario scenario = scenarioMap.get(scenarioName);
             if (mapping.modifiesScenarioState() &&
-                scenario.getState().equals(mapping.getRequiredScenarioState())) {
+                (mapping.getRequiredScenarioState() == null || scenario.getState().equals(mapping.getRequiredScenarioState()))) {
                 Scenario newScenario = scenario.setState(mapping.getNewScenarioState());
                 scenarioMap.put(scenarioName, newScenario);
             }

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -60,6 +60,7 @@ public static ResponseDefinitionBuilder like(ResponseDefinition responseDefiniti
 		builder.bodyFileName = responseDefinition.getBodyFileName();
 		builder.fixedDelayMilliseconds = responseDefinition.getFixedDelayMilliseconds();
 		builder.delayDistribution = responseDefinition.getDelayDistribution();
+		builder.chunkedDribbleDelay = responseDefinition.getChunkedDribbleDelay();
 		builder.proxyBaseUrl = responseDefinition.getProxyBaseUrl();
 		builder.fault = responseDefinition.getFault();
 		builder.responseTransformerNames = responseDefinition.getTransformers();

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -68,7 +68,9 @@ public static ResponseDefinitionBuilder like(ResponseDefinition responseDefiniti
 		builder.proxyBaseUrl = responseDefinition.getProxyBaseUrl();
 		builder.fault = responseDefinition.getFault();
 		builder.responseTransformerNames = responseDefinition.getTransformers();
-		builder.transformerParameters = responseDefinition.getTransformerParameters();
+		builder.transformerParameters = responseDefinition.getTransformerParameters() != null ?
+			Parameters.from(responseDefinition.getTransformerParameters()) :
+			Parameters.empty();
 		builder.wasConfigured = responseDefinition.isFromConfiguredStub();
 		return builder;
 	}

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -68,7 +68,9 @@ public static ResponseDefinitionBuilder like(ResponseDefinition responseDefiniti
 		builder.proxyBaseUrl = responseDefinition.getProxyBaseUrl();
 		builder.fault = responseDefinition.getFault();
 		builder.responseTransformerNames = responseDefinition.getTransformers();
-		builder.transformerParameters = responseDefinition.getTransformerParameters();
+		builder.transformerParameters = responseDefinition.getTransformerParameters() != null ?
+			Parameters.from(responseDefinition.getTransformerParameters()) :
+			Parameters.empty();
 		builder.wasConfigured = responseDefinition.isFromConfiguredStub();
 		return builder;
 	}

File: src/main/java/com/github/tomakehurst/wiremock/admin/RequestSpec.java
Patch:
@@ -18,6 +18,7 @@
 import com.github.tomakehurst.wiremock.admin.model.PathParams;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 
+import static com.github.tomakehurst.wiremock.http.RequestMethod.ANY;
 import static com.google.common.base.Preconditions.checkNotNull;
 
 public class RequestSpec {
@@ -53,7 +54,7 @@ public String path(PathParams pathParams) {
     }
 
     public boolean matches(RequestMethod method, String path) {
-        return this.method.equals(method) && uriTemplate.matches(path);
+        return (this.method.equals(ANY) || this.method.equals(method)) && uriTemplate.matches(path);
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
-import com.github.tomakehurst.wiremock.verification.Diff;
+import com.github.tomakehurst.wiremock.verification.diff.Diff;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.github.tomakehurst.wiremock.verification.NearMiss;
 import com.google.common.base.Joiner;

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -36,6 +36,7 @@
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.*;
+import com.github.tomakehurst.wiremock.verification.diff.Diff;
 
 import java.io.File;
 import java.util.Collections;

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -22,6 +22,7 @@
 import com.github.tomakehurst.wiremock.http.trafficlistener.WiremockNetworkTrafficListener;
 import com.github.tomakehurst.wiremock.security.Authenticator;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
+import com.github.tomakehurst.wiremock.verification.notmatched.NotMatchedRenderer;
 import com.google.common.base.Optional;
 
 import java.util.List;
@@ -55,4 +56,5 @@ public interface Options {
     WiremockNetworkTrafficListener networkTrafficListener();
     Authenticator getAdminAuthenticator();
     boolean getHttpsRequiredForAdminApi();
+    NotMatchedRenderer getNotMatchedRenderer();
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -109,7 +109,8 @@ public WireMockApp(
 
     public AdminRequestHandler buildAdminRequestHandler() {
         AdminRoutes adminRoutes = AdminRoutes.defaultsPlus(
-            options.extensionsOfType(AdminApiExtension.class).values()
+            options.extensionsOfType(AdminApiExtension.class).values(),
+            options.getNotMatchedRenderer()
         );
         return new AdminRequestHandler(
             adminRoutes,

File: src/test/java/com/github/tomakehurst/wiremock/NearMissesRuleAcceptanceTest.java
Patch:
@@ -41,7 +41,7 @@
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
-import static com.github.tomakehurst.wiremock.verification.Diff.junitStyleDiffMessage;
+import static com.github.tomakehurst.wiremock.verification.diff.JUnitStyleDiffRenderer.junitStyleDiffMessage;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.assertThat;
 

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -63,7 +63,7 @@
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
 import static com.github.tomakehurst.wiremock.matching.RequestPatternBuilder.forCustomMatcher;
 import static com.github.tomakehurst.wiremock.testsupport.TestHttpHeader.withHeader;
-import static com.github.tomakehurst.wiremock.verification.Diff.junitStyleDiffMessage;
+import static com.github.tomakehurst.wiremock.verification.diff.JUnitStyleDiffRenderer.junitStyleDiffMessage;
 import static java.lang.System.lineSeparator;
 import static org.apache.http.entity.ContentType.TEXT_PLAIN;
 import static org.hamcrest.Matchers.allOf;

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/InMemoryStubMappings.java
Patch:
@@ -97,7 +97,7 @@ private ResponseDefinition applyTransformations(Request request,
 	@Override
 	public void addMapping(StubMapping mapping) {
 		mappings.add(mapping);
-		scenarios.onStubMappingAddedOrUpdated(mapping);
+		scenarios.onStubMappingAddedOrUpdated(mapping, mappings);
 	}
 
 	@Override
@@ -125,7 +125,7 @@ public void editMapping(StubMapping stubMapping) {
 		stubMapping.setDirty(true);
 
 		mappings.replace(existingMapping, stubMapping);
-		scenarios.onStubMappingAddedOrUpdated(stubMapping);
+		scenarios.onStubMappingAddedOrUpdated(stubMapping, mappings);
 	}
 
 

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -54,7 +54,7 @@ public static VerificationException forUnmatchedNearMisses(List<NearMiss> nearMi
 
     }
 
-    private static String renderList(List list) {
+    private static String renderList(List<?> list) {
         return Joiner.on("\n\n").join(
             from(list).transform(toStringFunction())
         );

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -185,7 +185,7 @@ public void findsRequestsWithMultiValueHeaders() {
 
             HttpHeaders headers = requests.get(0).getHeaders();
             assertThat(headers.getHeader("X-Thing").values().size(), is(3));
-            assertThat(headers.getHeader("X-Thing").values().get(1), is("TWo"));
+            assertThat(headers.getHeader("X-Thing").values().get(1), is("Two"));
         }
 
         @Test(expected=VerificationException.class)

File: src/main/java/com/github/tomakehurst/wiremock/core/FaultInjector.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface FaultInjector {
 
+    void connectionResetByPeer();
     void emptyResponseAndCloseConnection();
     void malformedResponseChunk();
     void randomDataAndCloseConnection();

File: src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsSoapHelper.java
Patch:
@@ -3,8 +3,6 @@
 /**
  * This class uses HandlebarsXmlHelper as a base an just set a prefix which reduce the written handlebars helper to the
  * relevant part
- *
- * @author Christopher Holomek
  */
 public class HandlebarsSoapHelper extends HandlebarsXmlHelper {
 

File: src/test/java/com/github/tomakehurst/wiremock/client/WireMockClientWithProxyAcceptanceTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.littleshoot.proxy.HttpProxyServer;
 import org.littleshoot.proxy.impl.DefaultHttpProxyServer;
 
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
@@ -38,12 +39,11 @@ public class WireMockClientWithProxyAcceptanceTest {
 	private HttpProxyServer proxyServer;
 
 	@Before
-	public void init() {
+	public void init() throws Exception {
 
 		wireMockServer = new WireMockServer(Options.DYNAMIC_PORT);
 		wireMockServer.start();
-		InetSocketAddress proxyAddress = new InetSocketAddress(Options.DYNAMIC_PORT);
-		proxyServer = DefaultHttpProxyServer.bootstrap().withAddress(proxyAddress).start();
+		proxyServer = DefaultHttpProxyServer.bootstrap().withPort(0).start();
 
 		WireMock.configureFor("http", "localhost", wireMockServer.port(), proxyServer.getListenAddress().getHostString(), proxyServer.getListenAddress().getPort());
 		testClient = new WireMockTestClient(wireMockServer.port());

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicMappingBuilder.java
Patch:
@@ -86,7 +86,7 @@ public BasicMappingBuilder withQueryParam(String key, StringValuePattern queryPa
     }
 
 	@Override
-	public BasicMappingBuilder withRequestBody(StringValuePattern bodyPattern) {
+	public BasicMappingBuilder withRequestBody(ContentPattern<?> bodyPattern) {
         requestPatternBuilder.withRequestBody(bodyPattern);
 		return this;
 	}

File: src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.client;
 
+import com.github.tomakehurst.wiremock.matching.ContentPattern;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
@@ -25,7 +26,7 @@ public interface MappingBuilder {
     MappingBuilder atPriority(Integer priority);
     MappingBuilder withHeader(String key, StringValuePattern headerPattern);
     MappingBuilder withQueryParam(String key, StringValuePattern queryParamPattern);
-    MappingBuilder withRequestBody(StringValuePattern bodyPattern);
+    MappingBuilder withRequestBody(ContentPattern<?> bodyPattern);
     ScenarioMappingBuilder inScenario(String scenarioName);
     MappingBuilder withId(UUID id);
     MappingBuilder withName(String name);

File: src/main/java/com/github/tomakehurst/wiremock/client/ScenarioMappingBuilder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.client;
 
+import com.github.tomakehurst.wiremock.matching.ContentPattern;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
 
 import java.util.UUID;
@@ -27,7 +28,7 @@ public interface ScenarioMappingBuilder extends MappingBuilder {
     ScenarioMappingBuilder atPriority(Integer priority);
     ScenarioMappingBuilder withHeader(String key, StringValuePattern headerPattern);
     ScenarioMappingBuilder withQueryParam(String key, StringValuePattern queryParamPattern);
-    ScenarioMappingBuilder withRequestBody(StringValuePattern bodyPattern);
+    ScenarioMappingBuilder withRequestBody(ContentPattern<?> bodyPattern);
     ScenarioMappingBuilder inScenario(String scenarioName);
     ScenarioMappingBuilder withId(UUID id);
     ScenarioMappingBuilder persistent();

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -329,6 +329,7 @@ private ServletContextHandler addAdminContext(
 
         adminContext.setInitParameter("org.eclipse.jetty.servlet.Default.dirAllowed", "false");
         adminContext.addServlet(DefaultServlet.class, "/swagger-ui/*");
+        adminContext.addServlet(DefaultServlet.class, "/recorder/*");
 
         ServletHolder servletHolder = adminContext.addServlet(WireMockHandlerDispatchingServlet.class, "/");
         servletHolder.setInitParameter(RequestHandler.HANDLER_CLASS_KEY, AdminRequestHandler.class.getName());

File: src/main/java/com/github/tomakehurst/wiremock/junit/Stubbing.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.junit;
 
+import com.github.tomakehurst.wiremock.recording.RecordSpecBuilder;
 import com.github.tomakehurst.wiremock.client.MappingBuilder;
 import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
@@ -47,5 +48,4 @@ public interface Stubbing {
     List<NearMiss> findNearMissesForAllUnmatchedRequests();
     List<NearMiss> findNearMissesFor(LoggedRequest loggedRequest);
     List<NearMiss> findAllNearMissesFor(RequestPatternBuilder requestPatternBuilder);
-
 }

File: src/main/java/com/github/tomakehurst/wiremock/standalone/JsonFileMappingsSource.java
Patch:
@@ -30,12 +30,10 @@
 public class JsonFileMappingsSource implements MappingsSource {
 
 	private final FileSource mappingsFileSource;
-	private final VeryShortIdGenerator idGenerator;
 	private final Map<UUID, String> fileNameMap;
 
 	public JsonFileMappingsSource(FileSource mappingsFileSource) {
 		this.mappingsFileSource = mappingsFileSource;
-		idGenerator = new VeryShortIdGenerator();
 		fileNameMap = new HashMap<>();
 	}
 
@@ -52,7 +50,7 @@ public void save(List<StubMapping> stubMappings) {
 	public void save(StubMapping stubMapping) {
 		String mappingFileName = fileNameMap.get(stubMapping.getId());
 		if (mappingFileName == null) {
-			mappingFileName = "saved-mapping-" + idGenerator.generate() + ".json";
+			mappingFileName = SafeNames.makeSafeFileName(stubMapping);
 		}
 		mappingsFileSource.writeTextFile(mappingFileName, write(stubMapping));
         fileNameMap.put(stubMapping.getId(), mappingFileName);

File: src/test/java/com/github/tomakehurst/wiremock/matching/RequestPatternTest.java
Patch:
@@ -409,10 +409,10 @@ public void correctlySerialisesBodyPatterns() throws Exception {
         JSONAssert.assertEquals(ALL_BODY_PATTERNS_EXAMPLE, json, true);
     }
 
-    static Matcher<StringValuePattern> valuePattern(final Class<? extends StringValuePattern> patternClass, final String expectedValue) {
-        return new TypeSafeDiagnosingMatcher<StringValuePattern>() {
+    static Matcher<ContentPattern<?>> valuePattern(final Class<? extends StringValuePattern> patternClass, final String expectedValue) {
+        return new TypeSafeDiagnosingMatcher<ContentPattern<?>>() {
             @Override
-            protected boolean matchesSafely(StringValuePattern item, Description mismatchDescription) {
+            protected boolean matchesSafely(ContentPattern<?> item, Description mismatchDescription) {
                 return item.getClass().equals(patternClass) && item.getValue().equals(expectedValue);
             }
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -329,6 +329,7 @@ private ServletContextHandler addAdminContext(
 
         adminContext.setInitParameter("org.eclipse.jetty.servlet.Default.dirAllowed", "false");
         adminContext.addServlet(DefaultServlet.class, "/swagger-ui/*");
+        adminContext.addServlet(DefaultServlet.class, "/recorder/*");
 
         ServletHolder servletHolder = adminContext.addServlet(WireMockHandlerDispatchingServlet.class, "/");
         servletHolder.setInitParameter(RequestHandler.HANDLER_CLASS_KEY, AdminRequestHandler.class.getName());

File: src/main/java/com/github/tomakehurst/wiremock/junit/Stubbing.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.junit;
 
+import com.github.tomakehurst.wiremock.recording.RecordSpecBuilder;
 import com.github.tomakehurst.wiremock.client.MappingBuilder;
 import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
@@ -47,5 +48,4 @@ public interface Stubbing {
     List<NearMiss> findNearMissesForAllUnmatchedRequests();
     List<NearMiss> findNearMissesFor(LoggedRequest loggedRequest);
     List<NearMiss> findAllNearMissesFor(RequestPatternBuilder requestPatternBuilder);
-
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPatternBuilder.java
Patch:
@@ -112,8 +112,6 @@ public RequestPatternBuilder withRequestBody(StringValuePattern valuePattern) {
         return this;
     }
 
-
-
     public RequestPattern build() {
         return customMatcher != null ?
             new RequestPattern(customMatcher) :

File: src/main/java/com/github/tomakehurst/wiremock/standalone/JsonFileMappingsSource.java
Patch:
@@ -30,12 +30,10 @@
 public class JsonFileMappingsSource implements MappingsSource {
 
 	private final FileSource mappingsFileSource;
-	private final VeryShortIdGenerator idGenerator;
 	private final Map<UUID, String> fileNameMap;
 
 	public JsonFileMappingsSource(FileSource mappingsFileSource) {
 		this.mappingsFileSource = mappingsFileSource;
-		idGenerator = new VeryShortIdGenerator();
 		fileNameMap = new HashMap<>();
 	}
 
@@ -52,7 +50,7 @@ public void save(List<StubMapping> stubMappings) {
 	public void save(StubMapping stubMapping) {
 		String mappingFileName = fileNameMap.get(stubMapping.getId());
 		if (mappingFileName == null) {
-			mappingFileName = "saved-mapping-" + idGenerator.generate() + ".json";
+			mappingFileName = SafeNames.makeSafeFileName(stubMapping);
 		}
 		mappingsFileSource.writeTextFile(mappingFileName, write(stubMapping));
         fileNameMap.put(stubMapping.getId(), mappingFileName);

File: src/main/java/com/github/tomakehurst/wiremock/recording/ResponseDefinitionBodyMatcher.java
Patch:
@@ -28,8 +28,8 @@
 @JsonDeserialize(using = ResponseDefinitionBodyMatcherDeserializer.class)
 public class ResponseDefinitionBodyMatcher implements ValueMatcher<ResponseDefinition> {
 
-    public static final long DEFAULT_MAX_TEXT_SIZE = 100 * 1024 * 1024;
-    public static final long DEFAULT_MAX_BINARY_SIZE = 100 * 1024 * 1024;
+    public static final long DEFAULT_MAX_TEXT_SIZE = 10240;
+    public static final long DEFAULT_MAX_BINARY_SIZE = 0;
 
     private final long textSizeThreshold;
     private final long binarySizeThreshold;

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorder.java
Patch:
@@ -99,9 +99,9 @@ private void writeToMappingAndBodyFile(Request request, Response response, Reque
         String fileId = idGenerator.generate();
         byte[] body = bodyDecompressedIfRequired(response);
 
-        String mappingFileName = UniqueFilenameGenerator.generate(request, "mapping", fileId);
+        String mappingFileName = UniqueFilenameGenerator.generate(request.getUrl(), "mapping", fileId);
         String bodyFileName = UniqueFilenameGenerator.generate(
-            request,
+            request.getUrl(),
             "body",
             fileId,
             ContentTypes.determineFileExtension(

File: src/main/java/com/github/tomakehurst/wiremock/recording/Recorder.java
Patch:
@@ -90,8 +90,8 @@ public SnapshotRecordResult takeSnapshot(List<ServeEvent> serveEvents, RecordSpe
         for (StubMapping stubMapping : stubMappings) {
             if (recordSpec.shouldPersist()) {
                 stubMapping.setPersistent(true);
-                admin.addStubMapping(stubMapping);
             }
+            admin.addStubMapping(stubMapping);
         }
 
         return recordSpec.getOutputFormat().format(stubMappings);

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -50,7 +50,7 @@ public SnapshotSpec(
         this.transformerParameters = transformerParameters;
     }
 
-    public SnapshotSpec() {
+    private SnapshotSpec() {
         this(null, null, null, null, null, true, null, null);
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -51,7 +51,7 @@ public SnapshotSpec(
     }
 
     public SnapshotSpec() {
-        this(null, null, null, null, null, null, null, null);
+        this(null, null, null, null, null, true, null, null);
     }
 
     public static final SnapshotSpec DEFAULTS = new SnapshotSpec();

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpecBuilder.java
Patch:
@@ -18,7 +18,7 @@ public class SnapshotSpecBuilder {
     private long maxTextBodySize = DEFAULT_MAX_TEXT_SIZE;
     private long maxBinaryBodySize = DEFAULT_MAX_BINARY_SIZE;
     private boolean persistentStubs = true;
-    private boolean repeatsAsScenarios = false;
+    private boolean repeatsAsScenarios = true;
     private List<String> transformerNames;
     private Parameters transformerParameters;
 
@@ -47,8 +47,8 @@ public SnapshotSpecBuilder makeStubsPersistent(boolean persistent) {
         return this;
     }
 
-    public SnapshotSpecBuilder buildScenariosForRepeatRequests() {
-        this.repeatsAsScenarios = true;
+    public SnapshotSpecBuilder ignoreRepeatRequests() {
+        this.repeatsAsScenarios = false;
         return this;
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/ProxiedServeEventFilters.java
Patch:
@@ -14,8 +14,11 @@
  * A predicate to filter proxied ServeEvents against RequestPattern filters and IDs
  */
 public class ProxiedServeEventFilters implements Predicate<ServeEvent> {
+
     @JsonUnwrapped
     private final RequestPattern filters;
+
+    @JsonUnwrapped
     private final List<UUID> ids;
 
     public ProxiedServeEventFilters() {

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotOutputFormatter.java
Patch:
@@ -18,7 +18,7 @@ public SnapshotRecordResult format(List<StubMapping> stubMappings) {
     IDS {
         @Override
         public SnapshotRecordResult format(List<StubMapping> stubMappings) {
-            return SnapshotRecordResult.ids(stubMappings);
+            return SnapshotRecordResult.idsFromMappings(stubMappings);
         }
     };
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -62,8 +62,10 @@ public SnapshotSpec() {
 
     public SnapshotOutputFormatter getOutputFormat() { return outputFormat; }
 
+    @JsonProperty("persist")
     public boolean shouldPersist() { return persist; }
 
+    @JsonProperty("repeatsAsScenarios")
     public boolean shouldRecordRepeatsAsScenarios() { return repeatsAsScenarios; }
 
     public List<String> getTransformers() { return transformers; }

File: src/test/java/com/github/tomakehurst/wiremock/admin/model/SnapshotRecordResultDeserialiserTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.tomakehurst.wiremock.admin.model;
 
 import com.github.tomakehurst.wiremock.common.Json;
+import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import org.junit.Test;
 
 import static org.hamcrest.Matchers.instanceOf;
@@ -31,6 +32,7 @@ public void supportsFullResponse() {
 
         assertThat(result, instanceOf(SnapshotRecordResult.Full.class));
         assertThat(result.getStubMappings().size(), is(2));
+        assertThat(result.getStubMappings().get(0), instanceOf(StubMapping.class));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -60,7 +60,7 @@ public SnapshotSpec() {
 
     public Map<String, MultiValuePattern> getCaptureHeaders() { return captureHeaders; }
 
-    public SnapshotOutputFormatter getOutputFormatter() { return outputFormat; }
+    public SnapshotOutputFormatter getOutputFormat() { return outputFormat; }
 
     public boolean shouldPersist() { return persist; }
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPatternBuilder.java
Patch:
@@ -112,8 +112,6 @@ public RequestPatternBuilder withRequestBody(StringValuePattern valuePattern) {
         return this;
     }
 
-
-
     public RequestPattern build() {
         return customMatcher != null ?
             new RequestPattern(customMatcher) :

File: src/main/java/com/github/tomakehurst/wiremock/common/ContentTypes.java
Patch:
@@ -90,7 +90,7 @@ public static String determineFileExtension(String url, ContentTypeHeader conten
             return substringAfterLast(lastPathSegment, ".");
         }
 
-        return determineTextFileExtension(stringFromBytes(responseBody));
+        return determineTextFileExtension(stringFromBytes(responseBody, contentTypeHeader.charset()));
     }
 
     public static String determineTextFileExtension(String content) {

File: src/test/java/com/github/tomakehurst/wiremock/RequestQueryAcceptanceTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.entity.ContentType;
+import static com.google.common.base.Charsets.UTF_8;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.TypeSafeMatcher;
@@ -118,7 +119,7 @@ public void resultsAreInOrderRequestsWereReceived() {
     @Test
     public void requestBodyEncodingRemainsUtf8() {
         byte[] body = new byte[] { -38, -100 }; // UTF-8 bytes for ڜ
-        testClient.post("/encoding", new ByteArrayEntity(body, ContentType.TEXT_PLAIN));
+        testClient.post("/encoding", new ByteArrayEntity(body, ContentType.TEXT_PLAIN.withCharset(UTF_8)));
 
         List<LoggedRequest> requests = findAll(postRequestedFor(urlEqualTo("/encoding")));
         LoggedRequest request = requests.get(0);

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/SnapshotTask.java
Patch:
@@ -80,14 +80,13 @@ private List<StubMapping> postProcessStubMappings(
         final ArrayList<StubMapping> transformedStubMappings = new ArrayList<>(stubMappings.size());
 
         for (StubMapping stubMapping : stubMappings) {
-            StubMapping transformedStubMapping = transformerRunner.apply(stubMapping);
             if (
                 bodyExtractMatcher != null
                 && bodyExtractMatcher.match(stubMapping.getResponse()).isExactMatch()
             ) {
-                bodyExtractor.extractInPlace(transformedStubMapping);
+                bodyExtractor.extractInPlace(stubMapping);
             }
-            transformedStubMappings.add(transformedStubMapping);
+            transformedStubMappings.add(transformerRunner.apply(stubMapping));
         }
 
         return transformedStubMappings;

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -33,7 +33,7 @@ public SnapshotSpec(
         @JsonProperty("repeatsAsScenarios") JsonNode repeatsNode
     ) {
         this.filters = filters;
-        this.outputFormat = outputFormat;
+        this.outputFormat = outputFormat == null ? SnapshotOutputFormat.FULL : outputFormat;
         this.captureHeaders = new RequestPatternTransformer(captureHeaders);
         this.persist = persistNode.asBoolean(true);
         this.repeatsAsScenarios = repeatsNode.asBoolean(false);

File: src/main/java/com/github/tomakehurst/wiremock/core/FaultInjector.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface FaultInjector {
 
+    void connectionResetByPeer();
     void emptyResponseAndCloseConnection();
     void malformedResponseChunk();
     void randomDataAndCloseConnection();

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/SnapshotTask.java
Patch:
@@ -50,7 +50,7 @@ private ResponseDefinition execute(Admin admin, SnapshotSpec snapshotSpec) {
                 stubMapping.setPersistent(true);
                 admin.addStubMapping(stubMapping);
             }
-            response.add((format != null && format.equals("full")) ? stubMapping : stubMapping.getId());
+            response.add((format != null && format.equals("ids")) ? stubMapping.getId() : stubMapping);
         }
 
         return jsonResponse(response.toArray(), HTTP_OK);

File: src/main/java/com/github/tomakehurst/wiremock/core/Admin.java
Patch:
@@ -52,5 +52,7 @@ public interface Admin {
 
     void updateGlobalSettings(GlobalSettings settings);
 
+    Options getOptions();
+
     void shutdownServer();
 }

File: src/main/java/com/github/tomakehurst/wiremock/admin/model/SnapshotSpec.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.github.tomakehurst.wiremock.http.RequestFieldsComparator;
 import com.github.tomakehurst.wiremock.matching.MultiValuePattern;
 
@@ -28,11 +29,11 @@ public SnapshotSpec(@JsonProperty("filters") ServeEventRequestFilters filters ,
                         @JsonProperty("sortFields") String[] sortFields,
                         @JsonProperty("captureHeaders") Map<String, MultiValuePattern> captureHeaders,
                         @JsonProperty("outputFormat") String outputFormat,
-                        @JsonProperty("persist") boolean persist) {
+                        @JsonProperty("persist") JsonNode persistNode) {
         this.filters = filters;
         this.outputFormat = outputFormat;
         this.captureHeaders = new RequestPatternTransformer(captureHeaders);
-        this.persist = persist;
+        this.persist = persistNode.asBoolean(true);
         if (sortFields != null) this.sortFields = new RequestFieldsComparator(sortFields);
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -80,6 +80,7 @@ private void initDefaultRoutes(Router router) {
         router.add(GET,  "/requests/unmatched/near-misses", FindNearMissesForUnmatchedTask.class);
         router.add(GET,  "/requests/{id}", GetServedStubTask.class);
 
+        router.add(POST, "/snapshot", SnapshotTask.class);
 
         router.add(POST, "/near-misses/request", FindNearMissesForRequestTask.class);
         router.add(POST, "/near-misses/request-pattern", FindNearMissesForRequestPatternTask.class);

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -35,7 +35,7 @@ public class StubResponseRenderer implements ResponseRenderer {
 	private final ProxyResponseRenderer proxyResponseRenderer;
 	private final List<ResponseTransformer> responseTransformers;
 
-    public StubResponseRenderer(FileSource fileSource,
+	public StubResponseRenderer(FileSource fileSource,
 								GlobalSettingsHolder globalSettingsHolder,
 								ProxyResponseRenderer proxyResponseRenderer,
 								List<ResponseTransformer> responseTransformers) {

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -18,6 +18,7 @@
 import com.github.tomakehurst.wiremock.common.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import org.apache.http.HttpHost;
+import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.*;
 import org.apache.http.config.SocketConfig;
 import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
@@ -52,6 +53,7 @@ public static CloseableHttpClient createClient(
                 .disableRedirectHandling()
                 .disableContentCompression()
                 .setMaxConnTotal(maxConnections)
+                .setDefaultRequestConfig(RequestConfig.custom().setStaleConnectionCheckEnabled(true).build())
                 .setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(timeoutMilliseconds).build())
                 .useSystemProperties()
                 .setHostnameVerifier(new AllowAllHostnameVerifier());

File: src/main/java/com/github/tomakehurst/wiremock/http/ContentTypeHeader.java
Patch:
@@ -41,7 +41,7 @@ public ContentTypeHeader or(String stringValue) {
     }
 
 	public String mimeTypePart() {
-		return parts[0];
+		return parts != null ? parts[0] : null;
 	}
 	
 	public Optional<String> encodingPart() {

File: src/main/java/com/github/tomakehurst/wiremock/http/ContentTypeHeader.java
Patch:
@@ -41,7 +41,7 @@ public ContentTypeHeader or(String stringValue) {
     }
 
 	public String mimeTypePart() {
-		return parts[0];
+		return parts != null ? parts[0] : null;
 	}
 	
 	public Optional<String> encodingPart() {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorderTest.java
Patch:
@@ -127,7 +127,7 @@ public void writesMappingFileAndCorrespondingBodyFileOnRequest() {
 	@Test
 	public void addsResponseHeaders() {
 	    context.checking(new Expectations() {{
-	        allowing(admin).countRequestsMatching(with(any(RequestPattern.class))); will(returnValue(VerificationResult.withCount(1)));
+	        allowing(admin).countRequestsMatching(with(any(RequestPattern.class))); will(returnValue(VerificationResult.withCount(0)));
             one(mappingsFileSource).writeTextFile(with(equal("mapping-headered-content-1$2!3.json")),
                     with(equalToJson(SAMPLE_REQUEST_MAPPING_WITH_HEADERS, STRICT_ORDER)));
             one(filesFileSource).writeBinaryFile("body-headered-content-1$2!3.txt", "Recorded body content".getBytes(UTF_8));

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorder.java
Patch:
@@ -144,7 +144,7 @@ private byte[] bodyDecompressedIfRequired(Response response) {
     private boolean requestNotAlreadyReceived(RequestPattern requestPattern) {
         VerificationResult verificationResult = admin.countRequestsMatching(requestPattern);
         verificationResult.assertRequestJournalEnabled();
-        return (verificationResult.getCount() <= 1);
+        return (verificationResult.getCount() < 1);
     }
 
     public void setIdGenerator(IdGenerator idGenerator) {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorderTest.java
Patch:
@@ -153,7 +153,7 @@ public void addsResponseHeaders() {
 	@Test
 	public void doesNotWriteFileIfRequestAlreadyReceived() {
 	    context.checking(new Expectations() {{
-            atLeast(1).of(admin).countRequestsMatching(with(any(RequestPattern.class))); will(returnValue(VerificationResult.withCount(2)));
+            atLeast(1).of(admin).countRequestsMatching(with(any(RequestPattern.class))); will(returnValue(VerificationResult.withCount(1)));
             never(mappingsFileSource).writeTextFile(with(any(String.class)), with(any(String.class)));
             never(filesFileSource).writeTextFile(with(any(String.class)), with(any(String.class)));
         }});
@@ -162,7 +162,7 @@ public void doesNotWriteFileIfRequestAlreadyReceived() {
                 .withMethod(RequestMethod.GET)
                 .withUrl("/headered/content")
                 .build(),
-            response().status(200).build());
+            response().fromProxy(true).status(200).build());
 	}
 	
 	@Test

File: src/main/java/com/github/tomakehurst/wiremock/common/ConsoleNotifier.java
Patch:
@@ -52,7 +52,7 @@ public void error(String message, Throwable t) {
     }
 
     private static String formatMessage(String message) {
-        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
+        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
         String date = df.format(new Date());
         return String.format("%s %s", date, message);
     }

File: src/main/java/com/github/tomakehurst/wiremock/common/ClasspathFileSource.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.net.URLEncoder;
 import java.util.Enumeration;
 import java.util.Iterator;
 import java.util.List;
@@ -66,7 +67,8 @@ public ClasspathFileSource(String path) {
 
             if (asList("jar", "war", "ear", "zip").contains(pathUri.getScheme())) {
                 String jarFileUri = pathUri.getSchemeSpecificPart().split("!")[0];
-                File file = new File(URI.create(jarFileUri));
+                String jarFilePath = jarFileUri.replace("file:", "");
+                File file = new File(jarFilePath);
                 zipFile = new ZipFile(file);
             } else if (pathUri.getScheme().equals("file")) {
                 rootDirectory = new File(pathUri);

File: src/main/java/com/github/tomakehurst/wiremock/matching/MatchesJsonPathPattern.java
Patch:
@@ -25,7 +25,7 @@
 
 public class MatchesJsonPathPattern extends StringValuePattern {
 
-    public MatchesJsonPathPattern(String value) {
+    public MatchesJsonPathPattern(@JsonProperty("matchesJsonPath") String value) {
         super(value);
     }
 
@@ -34,7 +34,7 @@ public String getMatchesJsonPath() {
     }
 
     @Override
-    public MatchResult match(@JsonProperty("matchesJsonPath") String value) {
+    public MatchResult match(String value) {
         return MatchResult.of(isJsonPathMatch(value));
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/http/AbstractRequestHandler.java
Patch:
@@ -45,6 +45,7 @@ public void handle(Request request, HttpResponder httpResponder) {
 		ResponseDefinition responseDefinition = serveEvent.getResponseDefinition();
 		responseDefinition.setOriginalRequest(request);
 		Response response = responseRenderer.render(responseDefinition);
+		ServeEvent completedServeEvent = serveEvent.complete(response);
 
 		if (logRequests()) {
 			notifier().info("Request received:\n" +
@@ -57,11 +58,11 @@ public void handle(Request request, HttpResponder httpResponder) {
 			listener.requestReceived(request, response);
 		}
 
-        beforeResponseSent(serveEvent, response);
+        beforeResponseSent(completedServeEvent, response);
 
 		httpResponder.respond(request, response);
 
-        afterResponseSent(serveEvent, response);
+        afterResponseSent(completedServeEvent, response);
 	}
 
 	private static String formatRequest(Request request) {

File: src/main/java/com/github/tomakehurst/wiremock/http/StubRequestHandler.java
Patch:
@@ -57,7 +57,7 @@ protected boolean logRequests() {
 
     @Override
     protected void beforeResponseSent(ServeEvent serveEvent, Response response) {
-        requestJournal.requestReceived(serveEvent.complete(response));
+        requestJournal.requestReceived(serveEvent);
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/common/Urls.java
Patch:
@@ -62,7 +62,7 @@ public static Map<String, QueryParameter> splitQuery(URI uri) {
             return Collections.emptyMap();
         }
 
-        return splitQuery(uri.getQuery());
+        return splitQuery(uri.getRawQuery());
     }
 
     public static String decode(String encoded) {

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicCredentials.java
Patch:
@@ -20,6 +20,7 @@
 import com.github.tomakehurst.wiremock.matching.MultiValuePattern;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;
 import static com.github.tomakehurst.wiremock.common.Encoding.encodeBase64;
 
 public class BasicCredentials {
@@ -40,7 +41,7 @@ public boolean present() {
 
     public MultiValuePattern asAuthorizationMultiValuePattern() {
         return MultiValuePattern.of(
-            equalTo(asAuthorizationHeaderValue())
+            equalToIgnoreCase(asAuthorizationHeaderValue())
         );
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -231,7 +231,7 @@ private boolean isBinaryBody() {
 
 	protected ResponseDefinition build(HttpHeaders additionalProxyRequestHeaders) {
 		HttpHeaders httpHeaders = headers == null || headers.isEmpty() ? null : new HttpHeaders(headers);
-		Parameters transformerParameters = this.transformerParameters.isEmpty() ? null : Parameters.from(this.transformerParameters);
+		Parameters transformerParameters = this.transformerParameters == null || this.transformerParameters.isEmpty() ? null : Parameters.from(this.transformerParameters);
 		return isBinaryBody() ?
 				new ResponseDefinition(
 						status,

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -55,6 +55,7 @@ public class ResponseDefinitionBuilder {
 	public static ResponseDefinitionBuilder like(ResponseDefinition responseDefinition) {
 		ResponseDefinitionBuilder builder = new ResponseDefinitionBuilder();
 		builder.status = responseDefinition.getStatus();
+		builder.statusMessage = responseDefinition.getStatusMessage();
 		builder.headers = responseDefinition.getHeaders() != null ?
 				newArrayList(responseDefinition.getHeaders().all()) :
 				Lists.<HttpHeader>newArrayList();
@@ -67,6 +68,7 @@ public static ResponseDefinitionBuilder like(ResponseDefinition responseDefiniti
 		builder.proxyBaseUrl = responseDefinition.getProxyBaseUrl();
 		builder.fault = responseDefinition.getFault();
 		builder.responseTransformerNames = responseDefinition.getTransformers();
+		builder.transformerParameters = responseDefinition.getTransformerParameters();
 		builder.wasConfigured = responseDefinition.isFromConfiguredStub();
 		return builder;
 	}

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPathPattern.java
Patch:
@@ -29,7 +29,7 @@ public MatchResult match(String url) {
             return MatchResult.noMatch();
         }
 
-        String path = URI.create(url).getPath();
+        String path = URI.create(url).getRawPath();
         return super.match(path);
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -156,7 +156,7 @@ public void resetScenarios() {
 
     @Override
     public void resetMappings() {
-        postJsonAssertOkAndReturnBody(urlFor(ResetStubMappingsTask.class), null, HTTP_OK);
+        executeRequest(adminRoutes.requestSpecForTask(ResetStubMappingsTask.class));
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/core/MappingsSaver.java
Patch:
@@ -23,4 +23,5 @@ public interface MappingsSaver {
     void save(List<StubMapping> stubMappings);
     void save(StubMapping stubMapping);
     void remove(StubMapping stubMapping);
+    void removeAll();
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPathPattern.java
Patch:
@@ -29,7 +29,7 @@ public MatchResult match(String url) {
             return MatchResult.noMatch();
         }
 
-        String path = URI.create(url).getPath();
+        String path = URI.create(url).getRawPath();
         return super.match(path);
     }
 

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -22,6 +22,7 @@
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import com.github.tomakehurst.wiremock.global.GlobalSettingsHolder;
 import com.github.tomakehurst.wiremock.http.DelayDistribution;
+import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.github.tomakehurst.wiremock.matching.*;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
@@ -333,7 +334,7 @@ public static MappingBuilder requestMatching(String customRequestMatcherName, Pa
 		return new BasicMappingBuilder(customRequestMatcherName, parameters);
 	}
 
-	public static MappingBuilder requestMatching(RequestMatcher requestMatcher) {
+	public static MappingBuilder requestMatching(ValueMatcher<Request> requestMatcher) {
 		return new BasicMappingBuilder(requestMatcher);
 	}
 
@@ -463,7 +464,7 @@ public static RequestPatternBuilder requestMadeFor(String customMatcherName, Par
         return RequestPatternBuilder.forCustomMatcher(customMatcherName, parameters);
     }
 
-	public static RequestPatternBuilder requestMadeFor(RequestMatcher requestMatcher) {
+	public static RequestPatternBuilder requestMadeFor(ValueMatcher<Request> requestMatcher) {
 		return RequestPatternBuilder.forCustomMatcher(requestMatcher);
 	}
 

File: src/main/java/com/github/tomakehurst/wiremock/http/RequestMethod.java
Patch:
@@ -18,11 +18,11 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 import com.github.tomakehurst.wiremock.matching.MatchResult;
-import com.github.tomakehurst.wiremock.matching.ValueMatcher;
+import com.github.tomakehurst.wiremock.matching.NamedValueMatcher;
 
 import static java.util.Arrays.asList;
 
-public class RequestMethod implements ValueMatcher<RequestMethod> {
+public class RequestMethod implements NamedValueMatcher<RequestMethod> {
 
     public static final RequestMethod GET = new RequestMethod("GET");
     public static final RequestMethod POST = new RequestMethod("POST");

File: src/main/java/com/github/tomakehurst/wiremock/matching/MultiValuePattern.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.github.tomakehurst.wiremock.http.MultiValue;
 import com.google.common.base.Function;
@@ -27,10 +26,9 @@
 import java.util.Comparator;
 import java.util.List;
 
-import static com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_NULL;
 import static java.util.Collections.min;
 
-public class MultiValuePattern implements ValueMatcher<MultiValue> {
+public class MultiValuePattern implements NamedValueMatcher<MultiValue> {
 
     private final StringValuePattern valuePattern;
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestMatcher.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Objects;
 
-public abstract class RequestMatcher implements ValueMatcher<Request> {
+public abstract class RequestMatcher implements NamedValueMatcher<Request> {
 
     @Override
     public String getExpected() {

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -40,7 +40,7 @@
 import static com.google.common.collect.FluentIterable.from;
 import static com.google.common.net.HttpHeaders.AUTHORIZATION;
 
-public class RequestPattern implements ValueMatcher<Request> {
+public class RequestPattern implements NamedValueMatcher<Request> {
 
     private final UrlPattern url;
     private final RequestMethod method;
@@ -51,7 +51,7 @@ public class RequestPattern implements ValueMatcher<Request> {
     private final List<StringValuePattern> bodyPatterns;
 
     private CustomMatcherDefinition customMatcherDefinition;
-    private RequestMatcher matcher;
+    private ValueMatcher<Request> matcher;
 
     private final RequestMatcher defaultMatcher = new RequestMatcher() {
         @Override
@@ -128,7 +128,7 @@ public RequestPattern(@JsonProperty("url") String url,
         null
     );
 
-    public RequestPattern(RequestMatcher customMatcher) {
+    public RequestPattern(ValueMatcher<Request> customMatcher) {
         this(null, null, null, null, null, null, null, null);
         this.matcher = customMatcher;
     }

File: src/main/java/com/github/tomakehurst/wiremock/matching/StringValuePattern.java
Patch:
@@ -25,7 +25,7 @@
 import java.lang.reflect.Constructor;
 
 @JsonDeserialize(using = StringValuePatternJsonDeserializer.class)
-public abstract class StringValuePattern implements ValueMatcher<String> {
+public abstract class StringValuePattern implements NamedValueMatcher<String> {
 
     public static final AbsentPattern ABSENT = new AbsentPattern(null);
 

File: src/main/java/com/github/tomakehurst/wiremock/matching/UrlPattern.java
Patch:
@@ -19,7 +19,7 @@
 import com.github.tomakehurst.wiremock.client.WireMock;
 import com.google.common.base.Objects;
 
-public class UrlPattern implements ValueMatcher<String> {
+public class UrlPattern implements NamedValueMatcher<String> {
 
     protected final StringValuePattern pattern;
     private final boolean regex;

File: src/main/java/com/github/tomakehurst/wiremock/verification/Diff.java
Patch:
@@ -28,7 +28,7 @@
 import com.github.tomakehurst.wiremock.matching.MultiValuePattern;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.matching.StringValuePattern;
-import com.github.tomakehurst.wiremock.matching.ValueMatcher;
+import com.github.tomakehurst.wiremock.matching.NamedValueMatcher;
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
@@ -147,11 +147,11 @@ public static String junitStyleDiffMessage(Object expected, Object actual) {
     final Section<String> SPACER = new Section<String>(new EqualToPattern(""), "", "");
 
     private class Section<V> {
-        private final ValueMatcher<V> pattern;
+        private final NamedValueMatcher<V> pattern;
         private final V value;
         private final String printedPatternValue;
 
-        public Section(ValueMatcher<V> pattern, V value, String printedPatternValue) {
+        public Section(NamedValueMatcher<V> pattern, V value, String printedPatternValue) {
             this.pattern = pattern;
             this.value = value;
             this.printedPatternValue = printedPatternValue;

File: src/main/java/com/github/tomakehurst/wiremock/client/BasicMappingBuilder.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Map;
 import java.util.UUID;
 
+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
+import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Lists.newArrayList;
 import static com.google.common.collect.Maps.newLinkedHashMap;
@@ -140,7 +142,7 @@ public StubMapping build() {
 			throw new IllegalStateException("Scenario name must be specified to require or set a new scenario state");
 		}
 		RequestPattern requestPattern = requestPatternBuilder.build();
-		ResponseDefinition response = responseDefBuilder.build();
+		ResponseDefinition response = firstNonNull(responseDefBuilder, aResponse()).build();
 		StubMapping mapping = new StubMapping(requestPattern, response);
 		mapping.setPriority(priority);
 		mapping.setScenarioName(scenarioName);

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -65,7 +65,7 @@ private void initDefaultRoutes(Router router) {
 
         router.add(GET,  "/requests", GetAllRequestsTask.class);
         router.add(DELETE,  "/requests", ResetRequestsTask.class);
-        router.add(POST, "/requests/reset", OldResetRequestsTask.class);  // To deprecate
+        router.add(POST, "/requests/reset", OldResetRequestsTask.class);  // Deprecated
         router.add(POST, "/requests/count", GetRequestCountTask.class);
         router.add(POST, "/requests/find", FindRequestsTask.class);
         router.add(GET,  "/requests/unmatched", FindUnmatchedRequestsTask.class);

File: src/main/java/com/github/tomakehurst/wiremock/client/HttpAdminClient.java
Patch:
@@ -110,12 +110,10 @@ public void editStubMapping(StubMapping stubMapping) {
 
     @Override
     public void removeStubMapping(StubMapping stubbMapping) {
-
         postJsonAssertOkAndReturnBody(
-            urlFor(RemoveStubMappingTask.class),
+            urlFor(OldRemoveStubMappingTask.class),
             Json.write(stubbMapping),
             HTTP_OK);
-
     }
 
     @Override

File: src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java
Patch:
@@ -292,6 +292,7 @@ public void createStubMappingReturnsTheCreatedMapping() {
         );
 
         assertThat(response.statusCode(), is(201));
+        assertThat(response.firstHeader("Content-Type"), is("application/json"));
         String body = response.content();
         JsonAssertion.assertThat(body).field("id").matches("[a-z0-9\\-]{36}");
     }

File: src/main/java/com/github/tomakehurst/wiremock/admin/AdminRoutes.java
Patch:
@@ -51,7 +51,7 @@ private void initDefaultRoutes(Router router) {
         router.add(GET,  "/mappings", GetAllStubMappingsTask.class);
         router.add(POST, "/mappings", CreateStubMappingTask.class);
 
-        router.add(POST, "/mappings/new", StubMappingTask.class); // Deprecated
+        router.add(POST, "/mappings/new", OldCreateStubMappingTask.class); // Deprecated
         router.add(POST, "/mappings/remove", OldRemoveStubMappingTask.class);  // Deprecated
         router.add(POST, "/mappings/edit", OldEditStubMappingTask.class);  // Deprecated
         router.add(POST, "/mappings/save", SaveMappingsTask.class);

File: src/main/java/com/github/tomakehurst/wiremock/admin/tasks/OldCreateStubMappingTask.java
Patch:
@@ -22,7 +22,7 @@
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
-public class StubMappingTask implements AdminTask {
+public class OldCreateStubMappingTask implements AdminTask {
 
     @Override
     public ResponseDefinition execute(Admin admin, Request request, PathParams pathParams) {

File: src/main/java/com/github/tomakehurst/wiremock/matching/AbstractRegexPattern.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.github.tomakehurst.wiremock.matching;
 
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import static java.util.regex.Pattern.DOTALL;
@@ -31,8 +30,9 @@ protected AbstractRegexPattern(String regex) {
 
     @Override
     public MatchResult match(String value) {
-        Matcher matcher = pattern.matcher(value);
-        return MatchResult.of(matcher.matches());
+        return MatchResult.of(
+            value != null && pattern.matcher(value).matches()
+        );
     }
 
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/ContainsPattern.java
Patch:
@@ -29,6 +29,6 @@ public String getContains() {
 
     @Override
     public MatchResult match(String value) {
-        return MatchResult.of(value.contains(expectedValue));
+        return MatchResult.of(value != null && value.contains(expectedValue));
     }
 }

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/StubMappingJsonRecorderTest.java
Patch:
@@ -366,6 +366,7 @@ public void matchesBodyOnEqualToXmlIfXmlInRequestContentTypeHeader() {
 
     private static final String GZIP_REQUEST_MAPPING =
                     "{ 													             \n" +
+                    "   \"id\": \"41544750-0c69-3fd7-93b1-f79499f987c3\",            \n" +
                     "   \"uuid\": \"41544750-0c69-3fd7-93b1-f79499f987c3\",          \n" +
                     "	\"request\": {									             \n" +
                     "		\"method\": \"GET\",						             \n" +

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -364,7 +364,7 @@ public void verifyThat(CountMatchingStrategy expectedCount, RequestPatternBuilde
 	}
 
     private VerificationException verificationExceptionForNearMisses(RequestPatternBuilder requestPatternBuilder, RequestPattern requestPattern) {
-        List<NearMiss> nearMisses = findNearMissesFor(requestPatternBuilder);
+        List<NearMiss> nearMisses = findAllNearMissesFor(requestPatternBuilder);
         if (nearMisses.size() > 0) {
             Diff diff = new Diff(requestPattern, nearMisses.get(0).getRequest());
             return VerificationException.forUnmatchedRequestPattern(diff);

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/InMemoryStubMappings.java
Patch:
@@ -36,6 +36,7 @@
 
 import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static com.github.tomakehurst.wiremock.core.WireMockApp.FILES_ROOT;
+import static com.github.tomakehurst.wiremock.http.ResponseDefinition.copyOf;
 import static com.google.common.collect.Iterables.find;
 import static com.google.common.collect.Iterables.tryFind;
 
@@ -76,7 +77,7 @@ public ServedStub serveFor(Request request) {
             matchingMapping.getResponse(),
             ImmutableList.copyOf(transformers.values()));
 
-        ServedStub servedStub = new ServedStub(LoggedRequest.createFrom(request), responseDefinition);
+        ServedStub servedStub = new ServedStub(LoggedRequest.createFrom(request), copyOf(responseDefinition));
         requestJournal.requestReceived(servedStub);
         return servedStub;
 	}

File: src/main/java/com/github/tomakehurst/wiremock/client/ResponseDefinitionBuilder.java
Patch:
@@ -62,6 +62,7 @@ public static ResponseDefinitionBuilder like(ResponseDefinition responseDefiniti
 		builder.base64Body = responseDefinition.getBase64Body();
 		builder.bodyFileName = responseDefinition.getBodyFileName();
 		builder.fixedDelayMilliseconds = responseDefinition.getFixedDelayMilliseconds();
+		builder.delayDistribution = responseDefinition.getDelayDistribution();
 		builder.proxyBaseUrl = responseDefinition.getProxyBaseUrl();
 		builder.fault = responseDefinition.getFault();
 		builder.responseTransformerNames = responseDefinition.getTransformers();

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -325,7 +325,7 @@ public static RemoteMappingBuilder request(String method, UrlPattern urlPattern)
         return new MappingBuilder(RequestMethod.fromString(method), urlPattern);
     }
 
-	public static MappingBuilder requestMatching(String customRequestMatcherName) {
+	public static LocalMappingBuilder requestMatching(String customRequestMatcherName) {
 		return new MappingBuilder(customRequestMatcherName, Parameters.empty());
 	}
 

File: src/main/java/com/github/tomakehurst/wiremock/standalone/JsonFileMappingsSource.java
Patch:
@@ -38,7 +38,7 @@ public class JsonFileMappingsSource implements MappingsSource {
 	public JsonFileMappingsSource(FileSource mappingsFileSource) {
 		this.mappingsFileSource = mappingsFileSource;
 		idGenerator = new VeryShortIdGenerator();
-		fileNameMap = new HashMap<UUID, String>();
+		fileNameMap = new HashMap<>();
 	}
 
 	@Override
@@ -82,6 +82,7 @@ public boolean apply(TextFile input) {
 	}
 
 	private String getFileName(TextFile mappingFile) {
-		return mappingFile.getUri().getPath().replace(mappingsFileSource.getUri().getPath(), "");
+		return mappingFile.getUri().toString().replaceAll("^.*/", "");
+//		return mappingFile.getUri().getPath().replace(mappingsFileSource.getUri().getPath(), "");
 	}
 }

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -50,6 +50,7 @@
 import com.github.tomakehurst.wiremock.http.RequestHandler;
 import com.github.tomakehurst.wiremock.http.StubRequestHandler;
 import com.github.tomakehurst.wiremock.servlet.ContentTypeSettingFilter;
+import com.github.tomakehurst.wiremock.servlet.FaultInjectorFactory;
 import com.github.tomakehurst.wiremock.servlet.TrailingSlashFilter;
 import com.github.tomakehurst.wiremock.servlet.WireMockHandlerDispatchingServlet;
 
@@ -245,10 +246,12 @@ private ServletContextHandler addMockServiceContext(
 
         mockServiceContext.addServlet(DefaultServlet.class, FILES_URL_MATCH);
 
+        mockServiceContext.setAttribute(JettyFaultInjectorFactory.class.getName(), new JettyFaultInjectorFactory());
         mockServiceContext.setAttribute(StubRequestHandler.class.getName(), stubRequestHandler);
         mockServiceContext.setAttribute(Notifier.KEY, notifier);
         ServletHolder servletHolder = mockServiceContext.addServlet(WireMockHandlerDispatchingServlet.class, "/");
         servletHolder.setInitParameter(RequestHandler.HANDLER_CLASS_KEY, StubRequestHandler.class.getName());
+        servletHolder.setInitParameter(FaultInjectorFactory.INJECTOR_CLASS_KEY, JettyFaultInjectorFactory.class.getName());
         servletHolder.setInitParameter(WireMockHandlerDispatchingServlet.SHOULD_FORWARD_TO_FILES_CONTEXT, "true");
 
         MimeTypes mimeTypes = new MimeTypes();

File: src/main/java/com/github/tomakehurst/wiremock/admin/StubMappingTask.java
Patch:
@@ -20,7 +20,7 @@
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 
-public class NewStubMappingTask implements AdminTask {
+public class StubMappingTask implements AdminTask {
 
     @Override
     public ResponseDefinition execute(Admin admin, Request request) {

File: src/main/java/com/github/tomakehurst/wiremock/core/StubServer.java
Patch:
@@ -17,8 +17,9 @@
 
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
+import com.github.tomakehurst.wiremock.stubbing.ServedStub;
 
 public interface StubServer {
 
-    ResponseDefinition serveStubFor(Request request);
+    ServedStub serveStubFor(Request request);
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/Extension.java
Patch:
@@ -17,5 +17,5 @@
 
 public interface Extension {
 
-    String name();
+    String getName();
 }

File: src/main/java/com/github/tomakehurst/wiremock/extension/ExtensionLoader.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Predicate;
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Maps;
 
 import java.util.Map;
@@ -46,7 +45,7 @@ public static Map<String, Extension> asMap(Iterable<Extension> extensions) {
                 extensions,
                 new Function<Extension, String>() {
                     public String apply(Extension extension) {
-                        return extension.name();
+                        return extension.getName();
                     }
                 });
     }

File: src/main/java/com/github/tomakehurst/wiremock/http/StubRequestHandler.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock.http;
 
 import com.github.tomakehurst.wiremock.core.StubServer;
+import com.github.tomakehurst.wiremock.stubbing.ServedStub;
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 
@@ -33,7 +34,7 @@ public StubRequestHandler(StubServer stubServer, ResponseRenderer responseRender
 	}
 
 	@Override
-	public ResponseDefinition handleRequest(Request request) {
+	public ServedStub handleRequest(Request request) {
 		return stubServer.serveStubFor(request);
 	}
 

File: src/main/java/com/github/tomakehurst/wiremock/junit/LocalStubbing.java
Patch:
@@ -16,7 +16,7 @@
 package com.github.tomakehurst.wiremock.junit;
 
 import com.github.tomakehurst.wiremock.client.LocalMappingBuilder;
-import com.github.tomakehurst.wiremock.client.LocalRequestPatternBuilder;
+import com.github.tomakehurst.wiremock.matching.LocalRequestPatternBuilder;
 
 public interface LocalStubbing extends Stubbing {
 

File: src/main/java/com/github/tomakehurst/wiremock/standalone/WireMockServerRunner.java
Patch:
@@ -16,7 +16,6 @@
 package com.github.tomakehurst.wiremock.standalone;
 
 import com.github.tomakehurst.wiremock.WireMockServer;
-import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.common.FatalStartupException;
 import com.github.tomakehurst.wiremock.common.FileSource;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
@@ -27,7 +26,9 @@
 import static com.github.tomakehurst.wiremock.WireMockServer.FILES_ROOT;
 import static com.github.tomakehurst.wiremock.WireMockServer.MAPPINGS_ROOT;
 import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.responseDefinition;
+import static com.github.tomakehurst.wiremock.client.WireMock.anyUrl;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.ANY;
+import static com.github.tomakehurst.wiremock.matching.RequestPatternBuilder.newRequestPattern;
 import static java.lang.System.out;
 
 public class WireMockServerRunner {
@@ -86,8 +87,7 @@ private void addProxyMapping(final String baseUrl) {
 		wireMockServer.loadMappingsUsing(new MappingsLoader() {
 			@Override
 			public void loadMappingsInto(StubMappings stubMappings) {
-				RequestPattern requestPattern = new RequestPattern(ANY);
-				requestPattern.setUrlPattern(".*");
+                RequestPattern requestPattern = newRequestPattern(ANY, anyUrl()).build();
 				ResponseDefinition responseDef = responseDefinition()
 						.proxiedFrom(baseUrl)
 						.build();

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMappings.java
Patch:
@@ -23,7 +23,7 @@
 
 public interface StubMappings {
 
-	ResponseDefinition serveFor(Request request);
+	ServedStub serveFor(Request request);
 	void addMapping(StubMapping mapping);
 	void editMapping(StubMapping stubMapping);
 	void reset();

File: src/test/java/com/github/tomakehurst/wiremock/ResponseTransformerAcceptanceTest.java
Patch:
@@ -90,7 +90,7 @@ public boolean applyGlobally() {
         }
 
         @Override
-        public String name() {
+        public String getName() {
             return "stub-transformer";
         }
     }
@@ -112,7 +112,7 @@ public boolean applyGlobally() {
         }
 
         @Override
-        public String name() {
+        public String getName() {
             return "stub-transformer-with-params";
         }
     }
@@ -127,7 +127,7 @@ public Response transform(Request request, Response response, FileSource files,
         }
 
         @Override
-        public String name() {
+        public String getName() {
             return "global-response-transformer";
         }
 

File: src/test/java/com/github/tomakehurst/wiremock/admin/EditStubMappingTaskTest.java
Patch:
@@ -18,7 +18,6 @@
 import com.github.tomakehurst.wiremock.core.Admin;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
-import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import org.jmock.Expectations;
 import org.jmock.Mockery;
@@ -33,7 +32,7 @@
 
 public class EditStubMappingTaskTest {
 
-	private static final StubMapping MOCK_MAPPING = new StubMapping(new RequestPattern(), new ResponseDefinition());
+	private static final StubMapping MOCK_MAPPING = new StubMapping(null, new ResponseDefinition());
 
 	private Mockery context;
 	private Admin mockAdmin;

File: src/test/java/com/github/tomakehurst/wiremock/client/RequestDelaySpecTest.java
Patch:
@@ -18,17 +18,17 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.global.RequestDelaySpec;
 import org.junit.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
-import static net.sf.json.test.JSONAssert.assertJsonEquals;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
 public class RequestDelaySpecTest {
 
     @Test
-    public void canSerialiseToJson() {
+    public void canSerialiseToJson() throws Exception {
         String json = Json.write(new RequestDelaySpec(500));
-        assertJsonEquals("{ \"milliseconds\": 500 }", json);
+        JSONAssert.assertEquals("{ \"milliseconds\": 500 }", json, false);
     }
 
     @Test

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/SortedConcurrentMappingSetTest.java
Patch:
@@ -25,7 +25,9 @@
 
 import java.util.Iterator;
 
+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
 import static com.github.tomakehurst.wiremock.http.RequestMethod.ANY;
+import static com.github.tomakehurst.wiremock.matching.RequestPatternBuilder.newRequestPattern;
 import static com.github.tomakehurst.wiremock.testsupport.WireMatchers.hasExactly;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -134,7 +136,7 @@ public void testReplaceNotExists() throws Exception {
 	}
 
 	private StubMapping aMapping(Integer priority, String url) {
-		RequestPattern requestPattern = new RequestPattern(ANY, url);
+		RequestPattern requestPattern = newRequestPattern(ANY, urlEqualTo(url)).build();
 		StubMapping mapping = new StubMapping(requestPattern, new ResponseDefinition());
 		mapping.setPriority(priority);
 		return mapping;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/WireMockTestClient.java
Patch:
@@ -152,10 +152,10 @@ public WireMockResponse postWithChunkedBody(String url, byte[] body) {
         return post(url, new InputStreamEntity(new ByteArrayInputStream(body), -1));
     }
 
-    public WireMockResponse post(String url, HttpEntity entity) {
+    public WireMockResponse post(String url, HttpEntity entity, TestHttpHeader... headers) {
         HttpPost httpPost = new HttpPost(mockServiceUrlFor(url));
         httpPost.setEntity(entity);
-        return executeMethodAndConvertExceptions(httpPost);
+        return executeMethodAndConvertExceptions(httpPost, headers);
     }
 
     public WireMockResponse patchWithBody(String url, String body, String bodyMimeType, String bodyEncoding) {

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -256,14 +256,14 @@ public String proxyHostHeader() {
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T extends Extension> Map<String, T> extensionsOfType(Class<T> extensionType) {
+    public <T extends Extension> Map<String, T> extensionsOfType(final Class<T> extensionType) {
         if (optionSet.has(EXTENSIONS)) {
             String classNames = (String) optionSet.valueOf(EXTENSIONS);
             return (Map<String, T>) Maps.filterEntries(ExtensionLoader.load(classNames.split(",")), 
                             new Predicate<Map.Entry<String, Extension>>() {
                                 @Override
                                 public boolean apply(Map.Entry<String, Extension> input) {
-                                    return input.getValue().getClass().isAssignableFrom(input.getValue().getClass());
+                                    return extensionType.isAssignableFrom(input.getValue().getClass());
                                 }
             });
         }

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -259,10 +259,10 @@ public String proxyHostHeader() {
     public <T extends Extension> Map<String, T> extensionsOfType(Class<T> extensionType) {
         if (optionSet.has(EXTENSIONS)) {
             String classNames = (String) optionSet.valueOf(EXTENSIONS);
-            return (Map<String, T>) Maps.filterEntries(ExtensionLoader.loadExtension(classNames.split(",")), 
-                            new Predicate<Map.Entry<String, Object>>() {
+            return (Map<String, T>) Maps.filterEntries(ExtensionLoader.load(classNames.split(",")), 
+                            new Predicate<Map.Entry<String, Extension>>() {
                                 @Override
-                                public boolean apply(Map.Entry<String, Object> input) {
+                                public boolean apply(Map.Entry<String, Extension> input) {
                                     return input.getValue().getClass().isAssignableFrom(input.getValue().getClass());
                                 }
             });

File: src/main/java/com/github/tomakehurst/wiremock/client/LocalMappingBuilder.java
Patch:
@@ -46,7 +46,7 @@ public T withRequestBody(ValueMatchingStrategy bodyMatchingStrategy) {
 
     public LocalScenarioMappingBuilder inScenario(String scenarioName) {
         mappingBuilder.inScenario(scenarioName);
-        return (LocalScenarioMappingBuilder)this;
+        return (LocalScenarioMappingBuilder) this;
     }
 
     @SuppressWarnings("unchecked")

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ResponseDefinitionTest.java
Patch:
@@ -49,6 +49,7 @@ public void copyProducesEqualObject() {
                 new HttpHeaders(httpHeader("thing", "thingvalue")),
                 null,
                 1112,
+                null,
                 "http://base.com",
                 Fault.EMPTY_RESPONSE,
                 ImmutableList.of("transformer-1"),

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableSet;
 
+import java.net.URI;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -147,7 +148,7 @@ private boolean urlIsMatch(Request request) {
 		} else if (urlPathPattern != null) {
 			matched = candidateUrl.matches(urlPathPattern.concat(".*"));
 		} else {
-            matched = candidateUrl.startsWith(urlPath);
+            matched = URI.create(candidateUrl).getPath().equals(urlPath);
         }
 
 		return matched;

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -53,7 +53,7 @@ public void verifiesRequestBasedOnUrlOnly() {
         @Test
         public void verifiesRequestBasedOnUrlPathOnly() {
             testClient.get("/this/got/requested");
-            verify(getRequestedFor(urlPathEqualTo("/this/got")));
+            verify(getRequestedFor(urlPathEqualTo("/this/got/requested")));
         }
 
         @Test

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -34,7 +34,7 @@ public interface Options {
 
     public static final int DEFAULT_PORT = 8080;
     public static final int DYNAMIC_PORT = 0;
-    public static final int DEFAULT_CONTAINER_THREADS = 200;
+    public static final int DEFAULT_CONTAINER_THREADS = 10;
     public static final String DEFAULT_BIND_ADDRESS = "0.0.0.0";
 
     int portNumber();

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -206,14 +206,14 @@ private ServerConnector createHttpsConnector(
     }
 
     private ServerConnector createServerConnector(JettySettings jettySettings, int port, ConnectionFactory... connectionFactories) {
-        int acceptors = jettySettings.getAcceptors().or(-1);
+        int acceptors = jettySettings.getAcceptors().or(2);
         ServerConnector connector = new ServerConnector(
                 jettyServer,
                 null,
                 null,
                 null,
                 acceptors,
-                -1,
+                2,
                 connectionFactories
         );
         connector.setPort(port);

File: src/test/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptionsTest.java
Patch:
@@ -211,9 +211,9 @@ public void returnsCorrectlyParsedNumberOfThreads() {
     }
 
     @Test
-    public void defaultsContainerThreadsTo200() {
+    public void defaultsContainerThreadsTo10() {
         CommandLineOptions options = new CommandLineOptions();
-        assertThat(options.containerThreads(), is(200));
+        assertThat(options.containerThreads(), is(10));
     }
 
     @Test

File: src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.matching.RequestMatcher;
+import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 

File: src/main/java/com/github/tomakehurst/wiremock/client/RequestPatternBuilder.java
Patch:
@@ -18,6 +18,7 @@
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.github.tomakehurst.wiremock.matching.RequestMatcher;
+import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.matching.ValuePattern;
 
@@ -57,7 +58,7 @@ public static RequestPatternBuilder forCustomMatcher(String customRequestMatcher
 		return new RequestPatternBuilder(customRequestMatcherName, parameters);
 	}
 
-	private RequestPatternBuilder(RequestMatcher customMatcher) {
+	protected RequestPatternBuilder(RequestMatcher customMatcher) {
 		this.customMatcher = customMatcher;
 	}
 	

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -16,15 +16,14 @@
 package com.github.tomakehurst.wiremock.core;
 
 import com.github.tomakehurst.wiremock.common.FileSource;
-import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.extension.ResponseDefinitionTransformer;
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import com.github.tomakehurst.wiremock.global.GlobalSettingsHolder;
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import com.github.tomakehurst.wiremock.global.RequestDelaySpec;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
-import com.github.tomakehurst.wiremock.matching.RequestMatcher;
+import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
 import com.github.tomakehurst.wiremock.stubbing.InMemoryStubMappings;
@@ -62,7 +61,7 @@ public WireMockApp(
             boolean requestJournalDisabled,
             Optional<Integer> maxRequestJournalEntries,
             Map<String, ResponseDefinitionTransformer> transformers,
-            Map<String, RequestMatcher> requestMatchers,
+            Map<String, RequestMatcherExtension> requestMatchers,
             FileSource rootFileSource,
             Container container) {
         this.requestDelayControl = requestDelayControl;

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockWebContextListener.java
Patch:
@@ -24,7 +24,7 @@
 import com.github.tomakehurst.wiremock.extension.ResponseTransformer;
 import com.github.tomakehurst.wiremock.global.NotImplementedRequestDelayControl;
 import com.github.tomakehurst.wiremock.http.*;
-import com.github.tomakehurst.wiremock.matching.RequestMatcher;
+import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.standalone.JsonFileMappingsLoader;
 import com.google.common.base.Optional;
 
@@ -63,7 +63,7 @@ public void contextInitialized(ServletContextEvent sce) {
                 false,
                 maxRequestJournalEntries,
                 Collections.<String, ResponseDefinitionTransformer>emptyMap(),
-                Collections.<String, RequestMatcher>emptyMap(),
+                Collections.<String, RequestMatcherExtension>emptyMap(),
                 fileSource,
                 new NotImplementedContainer()
         );

File: src/main/java/com/github/tomakehurst/wiremock/stubbing/StubMapping.java
Patch:
@@ -22,7 +22,6 @@
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.http.ResponseDefinition;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
-import com.github.tomakehurst.wiremock.matching.RequestMatcher;
 
 import java.util.Objects;
 

File: src/test/java/com/github/tomakehurst/wiremock/Examples.java
Patch:
@@ -19,7 +19,7 @@
 import com.github.tomakehurst.wiremock.extension.Parameters;
 import com.github.tomakehurst.wiremock.http.Fault;
 import com.github.tomakehurst.wiremock.http.Request;
-import com.github.tomakehurst.wiremock.matching.RequestMatcher;
+import com.github.tomakehurst.wiremock.matching.RequestMatcherExtension;
 import com.github.tomakehurst.wiremock.testsupport.WireMockResponse;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.google.common.collect.ImmutableMap;
@@ -245,7 +245,7 @@ public void customMatcherName() {
 
     @Test
     public void customMatcher() {
-        wireMockServer.stubFor(requestMatching(new RequestMatcher() {
+        wireMockServer.stubFor(requestMatching(new RequestMatcherExtension() {
             public boolean isMatchedBy(Request request, Parameters parameters) {
                 return request.getBody().length > 2048;
             }

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -392,7 +392,4 @@ public boolean apply(Map.Entry<String, ValuePattern> entry) {
         };
     }
 
-	public static void main(String[] args) {
-		System.out.println(new RequestPattern("my-matcher", Parameters.one("itemCount", 5)).toString());
-	}
 }

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -115,7 +115,7 @@ public void verifiesWithBodyContainingJson() {
             testClient.postWithBody("/body/contains", SAMPLE_JSON, "application/json", "utf-8");
             verify(postRequestedFor(urlEqualTo("/body/contains"))
                     .withRequestBody(matchingJsonPath("$.thing"))
-                    .withRequestBody(matchingJsonPath("$..*[?(@.importantKey == 'Important value')]")));
+                    .withRequestBody(matchingJsonPath("$..thing[?(@.importantKey == 'Important value')]")));
         }
 
         @Test

File: src/test/java/com/github/tomakehurst/wiremock/matching/ValuePatternTest.java
Patch:
@@ -217,21 +217,21 @@ public void matchesOnJsonPathsWithFilters() {
 
     @Test
     public void matchesOnJsonPathsWithFiltersOnNestedObjects() {
-        valuePattern.setMatchesJsonPaths("$..*[?(@.innerOne == 11)]");
+        valuePattern.setMatchesJsonPaths("$..thingOne[?(@.innerOne == 11)]");
         assertTrue("Expected match", valuePattern.isMatchFor("{ \"things\": { \"thingOne\": { \"innerOne\": 11 }, \"thingTwo\": 2 }}"));
     }
 
     @Test
     public void providesSensibleNotificationWhenJsonMatchFailsDueToInvalidJson() {
-        expectInfoNotification("Warning: JSON path expression '$.something' failed to match document 'Not a JSON document' because the JSON document couldn't be parsed");
+        expectInfoNotification("Warning: JSON path expression '$.something' failed to match document 'Not a JSON document' because of error 'Property ['something'] not found in path $'");
 
         valuePattern.setMatchesJsonPaths("$.something");
         assertFalse("Expected the match to fail", valuePattern.isMatchFor("Not a JSON document"));
     }
 
     @Test
     public void providesSensibleNotificationWhenJsonMatchFailsDueToMissingAttributeJson() {
-        expectInfoNotification("Warning: JSON path expression '$.something' failed to match document '{ \"nothing\": 1 }' because the JSON path didn't match the document structure");
+        expectInfoNotification("Warning: JSON path expression '$.something' failed to match document '{ \"nothing\": 1 }' because of error 'No results for path: $['something']'");
 
         valuePattern.setMatchesJsonPaths("$.something");
         assertFalse("Expected the match to fail", valuePattern.isMatchFor("{ \"nothing\": 1 }"));

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyFaultInjector.java
Patch:
@@ -63,7 +63,7 @@ public void randomDataAndCloseConnection() {
     }
 
     private Socket socket() {
-        HttpChannel<?> httpChannel = response.getHttpOutput().getHttpChannel();
+        HttpChannel httpChannel = response.getHttpOutput().getHttpChannel();
         ChannelEndPoint ep = (ChannelEndPoint) httpChannel.getEndPoint();
         return ep.getSocket();
     }

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServletRequestAdapter.java
Patch:
@@ -165,8 +165,7 @@ public QueryParameter queryParameter(String key) {
     public boolean isBrowserProxyRequest() {
         if (request instanceof org.eclipse.jetty.server.Request) {
             org.eclipse.jetty.server.Request jettyRequest = (org.eclipse.jetty.server.Request) request;
-            URI uri = URI.create(jettyRequest.getUri().toString());
-            return uri.isAbsolute();
+            return jettyRequest.getHttpURI().isAbsolute();
         }
 
         return false;

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpsFaultInjector.java
Patch:
@@ -27,7 +27,7 @@ public class JettyHttpsFaultInjector implements FaultInjector {
     public JettyHttpsFaultInjector(HttpServletResponse response) {
         this.response = (Response) response;
 
-        HttpChannel<?> httpChannel = this.response.getHttpOutput().getHttpChannel();
+        HttpChannel httpChannel = this.response.getHttpOutput().getHttpChannel();
         SslConnection.DecryptedEndPoint sslEndpoint = (SslConnection.DecryptedEndPoint) httpChannel.getEndPoint();
         SelectChannelEndPoint selectChannelEndPoint = (SelectChannelEndPoint) sslEndpoint.getSslConnection().getEndPoint();
         this.socket = selectChannelEndPoint.getSocket();

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -23,6 +23,7 @@
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.google.common.base.Function;
+import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableSet;
 
@@ -355,8 +356,8 @@ private Predicate<? super Map.Entry<String, ValuePattern>> matchQueryParametersI
             public boolean apply(Map.Entry<String, ValuePattern> entry) {
                 ValuePattern valuePattern = entry.getValue();
                 String key = entry.getKey();
-                QueryParameter queryParam = request.queryParameter(key);
-                boolean match = queryParam.hasValueMatching(valuePattern);
+                Optional<QueryParameter> queryParam = Optional.fromNullable(request.queryParameter(key));
+                boolean match = queryParam.isPresent() && queryParam.get().hasValueMatching(valuePattern);
 
                 if (!match) {
                     notifier().info(String.format(

File: src/main/java/com/github/tomakehurst/wiremock/verification/LoggedRequest.java
Patch:
@@ -20,7 +20,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.tomakehurst.wiremock.http.*;
-import com.google.common.base.Splitter;
+import com.google.common.base.Charsets;
 
 import java.net.URI;
 import java.text.SimpleDateFormat;
@@ -81,7 +81,7 @@ public LoggedRequest(@JsonProperty("url") String url,
                          @JsonProperty("body") String body,
                          @JsonProperty("browserProxyRequest") boolean isBrowserProxyRequest,
                          @JsonProperty("loggedDate") Date loggedDate) {
-        this(url, absoluteUrl, method, headers, body.getBytes(), isBrowserProxyRequest, loggedDate);
+        this(url, absoluteUrl, method, headers, body.getBytes(Charsets.UTF_8), isBrowserProxyRequest, loggedDate);
     }
 
 	@Override
@@ -133,7 +133,7 @@ public byte[] getBody() {
 	@Override
     @JsonProperty("body")
 	public String getBodyAsString() {
-		return new String(body);
+        return new String(body, Charsets.UTF_8);
 	}
 
 	@Override

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -76,7 +76,7 @@ private void addDelayIfSpecifiedGloballyOrIn(ResponseDefinition response) {
 	        try {
 	            Thread.sleep(optionalDelay.get());
 	        } catch (InterruptedException e) {
-	            throw new RuntimeException(e);
+	            Thread.currentThread().interrupt();
 	        }
 	    }
     }

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/Jetty6HandlerDispatchingServlet.java
Patch:
@@ -96,6 +96,9 @@ protected void service(HttpServletRequest httpServletRequest, HttpServletRespons
         notifier.info("Received request: " + httpServletRequest.toString());
 
 		Response response = requestHandler.handle(request);
+        if (Thread.currentThread().isInterrupted()) {
+            return;
+        }
 		if (response.wasConfigured()) {
 		    applyResponse(response, httpServletResponse);
 		} else if (request.getMethod() == GET && shouldForwardToFilesContext) {

File: src/main/java/com/github/tomakehurst/wiremock/http/StubResponseRenderer.java
Patch:
@@ -76,7 +76,7 @@ private void addDelayIfSpecifiedGloballyOrIn(ResponseDefinition response) {
 	        try {
 	            Thread.sleep(optionalDelay.get());
 	        } catch (InterruptedException e) {
-	            throw new RuntimeException(e);
+	            Thread.currentThread().interrupt();
 	        }
 	    }
     }

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/Jetty6HandlerDispatchingServlet.java
Patch:
@@ -96,6 +96,9 @@ protected void service(HttpServletRequest httpServletRequest, HttpServletRespons
         notifier.info("Received request: " + httpServletRequest.toString());
 
 		Response response = requestHandler.handle(request);
+        if (Thread.currentThread().isInterrupted()) {
+            return;
+        }
 		if (response.wasConfigured()) {
 		    applyResponse(response, httpServletResponse);
 		} else if (request.getMethod() == GET && shouldForwardToFilesContext) {

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHandlerDispatchingServlet.java
Patch:
@@ -126,7 +126,7 @@ public static void applyResponse(Response response, HttpServletRequest httpServl
 
 	private static FaultInjector buildFaultInjector(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
 		if (httpServletRequest.getScheme().equals("https")) {
-			return new JettyFaultInjector(httpServletResponse);
+			return new JettyHttpsFaultInjector(httpServletResponse);
 		}
 
 		return new JettyFaultInjector(httpServletResponse);

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServer.java
Patch:
@@ -110,14 +110,14 @@ public void start() {
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
-        long timeout=System.currentTimeMillis()+30000;
+        long timeout = System.currentTimeMillis() + 30000;
         while (!jettyServer.isStarted()) {
             try {
-                Thread.currentThread().sleep(100);
+                Thread.sleep(100);
             } catch (InterruptedException e) {
                 // no-op
             }
-            if (System.currentTimeMillis()>timeout) {
+            if (System.currentTimeMillis() > timeout) {
                 throw new RuntimeException("Server took too long to start up.");
             }
         }

File: src/test/java/com/github/tomakehurst/wiremock/AcceptanceTestBase.java
Patch:
@@ -42,7 +42,8 @@ public static void serverShutdown() {
 
     public static void setupServer(WireMockConfiguration options) {
         if(options.portNumber() == Options.DEFAULT_PORT) {
-            options.dynamicPort();
+            options.port(8070);
+//			options.dynamicPort();
         }
 
         wireMockServer = new WireMockServer(options);

File: src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.http.client.methods.*;
 import org.apache.http.entity.ContentType;
 import org.apache.http.entity.InputStreamEntity;
-import org.apache.http.entity.StringEntity;
+import org.apache.http.entity.ByteArrayEntity;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -163,10 +163,10 @@ private static HttpEntity buildEntityFrom(Request originalRequest) {
 
         if (originalRequest.containsHeader(TRANSFER_ENCODING) &&
                 originalRequest.header(TRANSFER_ENCODING).firstValue().equals("chunked")) {
-            return new InputStreamEntity(new ByteArrayInputStream(originalRequest.getBodyAsString().getBytes()), -1, contentType);
+            return new InputStreamEntity(new ByteArrayInputStream(originalRequest.getBody()), -1, contentType);
         }
 
-        return new StringEntity(originalRequest.getBodyAsString(), contentType);
+        return new ByteArrayEntity(originalRequest.getBody());
     }
 
 }

File: src/main/java/com/github/tomakehurst/wiremock/http/Request.java
Patch:
@@ -29,6 +29,7 @@ public interface Request {
 	boolean containsHeader(String key);
 	Set<String> getAllHeaderKeys();
     QueryParameter queryParameter(String key);
+    byte[] getBody();
     String getBodyAsString();
 	boolean isBrowserProxyRequest();
 }

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/MockRequestBuilder.java
Patch:
@@ -102,6 +102,7 @@ public Request build() {
             allowing(request).getHeaders(); will(returnValue(headers));
 			allowing(request).getAllHeaderKeys(); will(returnValue(newLinkedHashSet(headers.keys())));
 			allowing(request).containsHeader(with(any(String.class))); will(returnValue(false));
+			allowing(request).getBody(); will(returnValue(body.getBytes()));
 			allowing(request).getBodyAsString(); will(returnValue(body));
 			allowing(request).getAbsoluteUrl(); will(returnValue("http://localhost:8080" + url));
 			allowing(request).isBrowserProxyRequest(); will(returnValue(browserProxyRequest));

File: src/main/java/com/github/tomakehurst/wiremock/standalone/CommandLineOptions.java
Patch:
@@ -34,6 +34,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.UnmodifiableIterator;
+import com.google.common.io.Resources;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 
@@ -79,7 +80,7 @@ public CommandLineOptions(String... args) {
         optionParser.accepts(HTTPS_TRUSTSTORE_PASSWORD, "Password for the trust store").withRequiredArg();
         optionParser.accepts(HTTPS_TRUSTSTORE, "Path to an alternative truststore for HTTPS client certificates. Must have a password of \"password\".").requiredIf(REQUIRE_CLIENT_CERT).withRequiredArg();
         optionParser.accepts(HTTPS_KEYSTORE_PASSWORD, "Password for the alternative keystore.").withRequiredArg().defaultsTo("password");
-        optionParser.accepts(HTTPS_KEYSTORE, "Path to an alternative keystore for HTTPS. Password is assumed to be \"password\" if not specified.").requiredIf(HTTPS_TRUSTSTORE).requiredIf(HTTPS_KEYSTORE_PASSWORD).withRequiredArg();
+        optionParser.accepts(HTTPS_KEYSTORE, "Path to an alternative keystore for HTTPS. Password is assumed to be \"password\" if not specified.").requiredIf(HTTPS_TRUSTSTORE).requiredIf(HTTPS_KEYSTORE_PASSWORD).withRequiredArg().defaultsTo(Resources.getResource("keystore").toString());
         optionParser.accepts(PROXY_ALL, "Will create a proxy mapping for /* to the specified URL").withRequiredArg();
         optionParser.accepts(PRESERVE_HOST_HEADER, "Will transfer the original host header from the client to the proxied service");
         optionParser.accepts(PROXY_VIA, "Specifies a proxy server to use when routing proxy mapped requests").withRequiredArg();

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
Patch:
@@ -24,7 +24,9 @@
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.conn.ssl.SSLContexts;
 import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
+import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.http.protocol.HttpProcessorBuilder;
 
 import javax.net.ssl.SSLContext;
 import java.security.KeyStore;
@@ -45,6 +47,7 @@ public static HttpClient createClient(
                 .disableAutomaticRetries()
                 .disableCookieManagement()
                 .disableRedirectHandling()
+                .disableContentCompression()
                 .setMaxConnTotal(maxConnections)
                 .setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(timeoutMilliseconds).build())
                 .setHostnameVerifier(new AllowAllHostnameVerifier());

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/WireMockTestClient.java
Patch:
@@ -212,6 +212,7 @@ private static HttpClient httpClient() {
                 .disableAutomaticRetries()
                 .disableCookieManagement()
                 .disableRedirectHandling()
+                .disableContentCompression()
                 .build();
     }
 }

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -21,6 +21,7 @@
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.extension.Extension;
 import com.github.tomakehurst.wiremock.http.CaseInsensitiveKey;
+import com.google.common.base.Optional;
 
 import java.util.List;
 import java.util.Map;
@@ -39,9 +40,9 @@ public interface Options {
     FileSource filesRoot();
     Notifier notifier();
     boolean requestJournalDisabled();
+    Optional<Integer> maxRequestJournalEntries();
     public String bindAddress();
     List<CaseInsensitiveKey> matchingHeaders();
-    public String proxyUrl();
     public boolean shouldPreserveHostHeader();
     String proxyHostHeader();
     <T extends Extension> Map<String, T> extensionsOfType(Class<T> extensionType);

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -31,6 +31,7 @@
 import com.github.tomakehurst.wiremock.stubbing.StubMappings;
 import com.github.tomakehurst.wiremock.verification.*;
 import com.google.common.collect.ImmutableList;
+import com.google.common.base.Optional;
 
 import java.util.List;
 import java.util.Map;
@@ -57,6 +58,7 @@ public WireMockApp(
             MappingsLoader defaultMappingsLoader,
             MappingsSaver mappingsSaver,
             boolean requestJournalDisabled,
+            Optional<Integer> maxRequestJournalEntries,
             Map<String, ResponseTransformer> transformers,
             FileSource rootFileSource,
             Container container) {
@@ -66,7 +68,7 @@ public WireMockApp(
         this.mappingsSaver = mappingsSaver;
         globalSettingsHolder = new GlobalSettingsHolder();
         stubMappings = new InMemoryStubMappings();
-        requestJournal = requestJournalDisabled ? new DisabledRequestJournal() : new InMemoryRequestJournal();
+        requestJournal = requestJournalDisabled ? new DisabledRequestJournal() : new InMemoryRequestJournal(maxRequestJournalEntries);
         this.transformers = transformers;
         this.rootFileSource = rootFileSource;
         this.container = container;

File: src/test/java/com/github/tomakehurst/wiremock/WireMockServerTests.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.IOException;
 
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
-import static org.hamcrest.Matchers.array;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/DelayableSslSocketConnector.java
Patch:
@@ -51,9 +51,7 @@ public void accept(int acceptorID) throws IOException, InterruptedException
                 @Override
                 public void run() {
                     ActiveSocket.set(socket);
-                    Log.warn("in run 1");
                     super.run();
-                    Log.warn("in run 2");
                     ActiveSocket.clear();
                 }
             };

File: src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
Patch:
@@ -141,9 +141,9 @@ private void addRequestHeaders(HttpRequest httpRequest, ResponseDefinition respo
 			}
 		}
 				
-		if (response.getInjectedheaders() != null) {
-			for (String key: response.getInjectedheaders().keys()) {
-				httpRequest.setHeader(key, response.getInjectedheaders().getHeader(key).firstValue());
+		if (response.getAdditionalProxyRequestHeaders() != null) {
+			for (String key: response.getAdditionalProxyRequestHeaders().keys()) {
+				httpRequest.setHeader(key, response.getAdditionalProxyRequestHeaders().getHeader(key).firstValue());
 			}			
 		}
 	}

File: src/main/java/com/github/tomakehurst/wiremock/http/Request.java
Patch:
@@ -28,7 +28,7 @@ public interface Request {
     HttpHeaders getHeaders();
 	boolean containsHeader(String key);
 	Set<String> getAllHeaderKeys();
-    String queryParameter(String key);
+    QueryParameter queryParameter(String key);
     String getBodyAsString();
 	boolean isBrowserProxyRequest();
 }

File: src/main/java/com/github/tomakehurst/wiremock/matching/RequestPattern.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 import com.github.tomakehurst.wiremock.common.Json;
 import com.github.tomakehurst.wiremock.http.HttpHeader;
+import com.github.tomakehurst.wiremock.http.QueryParameter;
 import com.github.tomakehurst.wiremock.http.Request;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
 import com.google.common.base.Function;
@@ -354,8 +355,8 @@ private Predicate<? super Map.Entry<String, ValuePattern>> matchQueryParametersI
             public boolean apply(Map.Entry<String, ValuePattern> entry) {
                 ValuePattern valuePattern = entry.getValue();
                 String key = entry.getKey();
-                String queryParam = request.queryParameter(key);
-                boolean match = valuePattern.isMatchFor(queryParam);
+                QueryParameter queryParam = request.queryParameter(key);
+                boolean match = queryParam.hasValueMatching(valuePattern);
 
                 if (!match) {
                     notifier().info(String.format(

File: src/main/java/com/github/tomakehurst/wiremock/verification/LoggedRequest.java
Patch:
@@ -40,7 +40,7 @@ public class LoggedRequest implements Request {
 	private final String absoluteUrl;
 	private final RequestMethod method;
 	private final HttpHeaders headers;
-    private final Map<String, String> queryParams;
+    private final Map<String, QueryParameter> queryParams;
 	private final String body;
 	private final boolean isBrowserProxyRequest;
     private final Date loggedDate;
@@ -128,7 +128,7 @@ public Set<String> getAllHeaderKeys() {
 	}
 
     @Override
-    public String queryParameter(String key) {
+    public QueryParameter queryParameter(String key) {
         return queryParams.get(key);
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/http/ContentTypeHeaderTest.java
Patch:
@@ -23,10 +23,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(JMock.class)
 public class ContentTypeHeaderTest {

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/RequestPatternTest.java
Patch:
@@ -37,7 +37,7 @@
 import static com.github.tomakehurst.wiremock.testsupport.MockRequestBuilder.aRequest;
 import static com.google.common.collect.Maps.newHashMap;
 import static java.util.Arrays.asList;
-import static junit.framework.Assert.assertFalse;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 @RunWith(JMock.class)

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/ResponseDefinitionTest.java
Patch:
@@ -23,12 +23,12 @@
 
 import static com.github.tomakehurst.wiremock.http.HttpHeader.httpHeader;
 import static com.github.tomakehurst.wiremock.http.ResponseDefinition.copyOf;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
 import static net.sf.json.test.JSONAssert.assertJsonEquals;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 public class ResponseDefinitionTest {
 

File: src/test/java/com/github/tomakehurst/wiremock/MappingsAcceptanceTest.java
Patch:
@@ -21,8 +21,8 @@
 
 import static com.github.tomakehurst.wiremock.testsupport.MappingJsonSamples.*;
 import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
-import static junit.framework.Assert.assertNull;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
 public class MappingsAcceptanceTest extends AcceptanceTestBase {
@@ -35,7 +35,7 @@ public void basicMappingWithExactUrlAndMethodMatchIsCreatedAndReturned() {
 		
 		assertThat(response.statusCode(), is(401));
 		assertThat(response.content(), is("Not allowed!"));
-		assertThat(response.header("Content-Type"), is("text/plain"));
+		assertThat(response.firstHeader("Content-Type"), is("text/plain"));
 	}
 	
 	@Test

File: src/test/java/com/github/tomakehurst/wiremock/StubbingAcceptanceTest.java
Patch:
@@ -49,7 +49,7 @@ public void mappingWithExactUrlAndMethodMatch() {
 		
 		assertThat(response.statusCode(), is(401));
 		assertThat(response.content(), is("Not allowed!"));
-		assertThat(response.header("Content-Type"), is("text/plain"));
+		assertThat(response.firstHeader("Content-Type"), is("text/plain"));
 	}
 	
 	@Test

File: src/main/java/com/github/tomakehurst/wiremock/global/RequestDelayControl.java
Patch:
@@ -19,5 +19,5 @@ public interface RequestDelayControl {
 
     void setDelay(int milliseconds);
     void clearDelay();
-    void delayIfRequired() throws InterruptedException;
+    void delayIfRequired();
 }

File: src/main/java/com/github/tomakehurst/wiremock/http/Response.java
Patch:
@@ -87,8 +87,7 @@ public HttpHeaders getHeaders() {
 	
 	public void applyTo(HttpServletResponse httpServletResponse) {
 		if (fault != null) {
-            Socket socket = ActiveSocket.get();
-			fault.apply(httpServletResponse, socket);
+            httpServletResponse.addHeader(Fault.class.getName(), fault.name());
 			return;
 		}
 		

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -25,8 +25,8 @@
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import com.github.tomakehurst.wiremock.global.ThreadSafeRequestDelayControl;
 import com.github.tomakehurst.wiremock.http.*;
-import com.github.tomakehurst.wiremock.jetty.JettyHttpServerFactory;
-import com.github.tomakehurst.wiremock.jetty.LoggerAdapter;
+import com.github.tomakehurst.wiremock.jetty6.Jetty6HttpServerFactory;
+import com.github.tomakehurst.wiremock.jetty6.LoggerAdapter;
 import com.github.tomakehurst.wiremock.standalone.JsonFileMappingsLoader;
 import com.github.tomakehurst.wiremock.standalone.JsonFileMappingsSaver;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
@@ -84,7 +84,7 @@ public WireMockServer(Options options) {
                         )
                 )
         );
-        HttpServerFactory httpServerFactory = new JettyHttpServerFactory();
+        HttpServerFactory httpServerFactory = new Jetty6HttpServerFactory();
         httpServer = httpServerFactory.buildHttpServer(
                 options,
                 adminRequestHandler,

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServer.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.tomakehurst.wiremock;
+package com.github.tomakehurst.wiremock.http;
 
 public interface HttpServer {
     void start();

File: src/main/java/com/github/tomakehurst/wiremock/http/HttpServerFactory.java
Patch:
@@ -1,9 +1,7 @@
-package com.github.tomakehurst.wiremock;
+package com.github.tomakehurst.wiremock.http;
 
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
-import com.github.tomakehurst.wiremock.http.AdminRequestHandler;
-import com.github.tomakehurst.wiremock.http.StubRequestHandler;
 
 public interface HttpServerFactory {
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/ActiveSocket.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty6;
 
 import java.net.Socket;
 

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/DelayableSocketConnector.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty6;
 
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import org.mortbay.jetty.bio.SocketConnector;

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/DelayableSslSocketConnector.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty6;
 
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import org.mortbay.jetty.security.SslSocketConnector;

File: src/main/java/com/github/tomakehurst/wiremock/jetty6/LoggerAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty6;
 
 import com.github.tomakehurst.wiremock.common.ConsoleNotifier;
 import com.github.tomakehurst.wiremock.common.Notifier;

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -25,7 +25,6 @@
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import com.github.tomakehurst.wiremock.global.ThreadSafeRequestDelayControl;
 import com.github.tomakehurst.wiremock.http.*;
-import com.github.tomakehurst.wiremock.jetty.JettyHttpServerFactory;
 import com.github.tomakehurst.wiremock.standalone.JsonFileMappingsLoader;
 import com.github.tomakehurst.wiremock.standalone.JsonFileMappingsSaver;
 import com.github.tomakehurst.wiremock.standalone.MappingsLoader;
@@ -79,7 +78,7 @@ public WireMockServer(Options options) {
                         new ProxyResponseRenderer(options.proxyVia())
                 )
         );
-        HttpServerFactory httpServerFactory = new JettyHttpServerFactory();
+        HttpServerFactory httpServerFactory = options.httpServerFactory();
         httpServer = httpServerFactory.buildHttpServer(
                 options,
                 adminRequestHandler,

File: src/main/java/com/github/tomakehurst/wiremock/core/Options.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.List;
 
+import com.github.tomakehurst.wiremock.HttpServerFactory;
 import com.github.tomakehurst.wiremock.common.FileSource;
 import com.github.tomakehurst.wiremock.common.HttpsSettings;
 import com.github.tomakehurst.wiremock.common.Notifier;
@@ -37,4 +38,5 @@ public interface Options {
     boolean requestJournalDisabled();
     public String bindAddress();
     List<CaseInsensitiveKey> matchingHeaders();
+    HttpServerFactory httpServerFactory();
 }

File: src/main/java/com/github/tomakehurst/wiremock/jetty9/JettyHttpServerFactory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock.jetty;
+package com.github.tomakehurst.wiremock.jetty9;
 
 import com.github.tomakehurst.wiremock.HttpServer;
 import com.github.tomakehurst.wiremock.HttpServerFactory;

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -159,9 +159,9 @@ public static ValueMatchingStrategy equalToXml(String value) {
         return headerStrategy;
     }
 
-    public static ValueMatchingStrategy equalToXPath(String value) {
+    public static ValueMatchingStrategy matchingXPath(String value) {
         ValueMatchingStrategy headerStrategy = new ValueMatchingStrategy();
-        headerStrategy.setEqualToXPath(value);
+        headerStrategy.setMatchingXPath(value);
         return headerStrategy;
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -129,7 +129,7 @@ public void verifiesWithBodyEquallingXml() {
         public void verifiesWithBodyEquallingXpath() {
             testClient.postWithBody("/body/xml", "<thing><subThing>The stuff</subThing></thing>", "application/xml", "utf-8");
             verify(postRequestedFor(urlEqualTo("/body/xml"))
-                    .withRequestBody(equalToXPath("//subThing[.='The stuff']")));
+                    .withRequestBody(matchingXPath("//subThing[.='The stuff']")));
         }
 
         @Test

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -159,9 +159,9 @@ public static ValueMatchingStrategy equalToXml(String value) {
         return headerStrategy;
     }
 
-    public static ValueMatchingStrategy equalToXPath(String value) {
+    public static ValueMatchingStrategy matchingXPath(String value) {
         ValueMatchingStrategy headerStrategy = new ValueMatchingStrategy();
-        headerStrategy.setEqualToXPath(value);
+        headerStrategy.setMatchingXPath(value);
         return headerStrategy;
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/VerificationAcceptanceTest.java
Patch:
@@ -129,7 +129,7 @@ public void verifiesWithBodyEquallingXml() {
         public void verifiesWithBodyEquallingXpath() {
             testClient.postWithBody("/body/xml", "<thing><subThing>The stuff</subThing></thing>", "application/xml", "utf-8");
             verify(postRequestedFor(urlEqualTo("/body/xml"))
-                    .withRequestBody(equalToXPath("//subThing[.='The stuff']")));
+                    .withRequestBody(matchingXPath("//subThing[.='The stuff']")));
         }
 
         @Test

File: src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
Patch:
@@ -106,6 +106,8 @@ private static HttpUriRequest getHttpRequestFor(ResponseDefinition response) {
 			return new HttpOptions(url);
 		case TRACE:
 			return new HttpTrace(url);
+		case PATCH:
+			return new HttpPatch(url);
 		default:
 			throw new RuntimeException("Cannot create HttpMethod for " + method);
 		}

File: src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
Patch:
@@ -106,6 +106,8 @@ private static HttpUriRequest getHttpRequestFor(ResponseDefinition response) {
 			return new HttpOptions(url);
 		case TRACE:
 			return new HttpTrace(url);
+		case PATCH:
+			return new HttpPatch(url);
 		default:
 			throw new RuntimeException("Cannot create HttpMethod for " + method);
 		}

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -197,7 +197,7 @@ public void run() {
                     // We have to sleep briefly to finish serving the shutdown request before stopping the server, as
                     // there's no support in Jetty for shutting down after the current request.
                     // See http://stackoverflow.com/questions/4650713
-                    Thread.sleep(500);
+                    Thread.sleep(100);
                 } catch (InterruptedException e) {
                     throw new RuntimeException(e);
                 }

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -197,7 +197,7 @@ public void run() {
                     // We have to sleep briefly to finish serving the shutdown request before stopping the server, as
                     // there's no support in Jetty for shutting down after the current request.
                     // See http://stackoverflow.com/questions/4650713
-                    Thread.sleep(500);
+                    Thread.sleep(100);
                 } catch (InterruptedException e) {
                     throw new RuntimeException(e);
                 }

File: src/test/java/com/github/tomakehurst/wiremock/PortNumberTest.java
Patch:
@@ -63,7 +63,7 @@ public void canRunOnAnotherPortThan8080() {
 
 
     @Test
-    public void configurePortIsReportedListeningPort() {
+    public void configuredPortIsReportedListeningPort() {
         WireMockServer wireMockServer = createServer(wireMockConfig().port(8091).httpsPort(8092));
         wireMockServer.start();
         assertThat("server", wireMockServer, hasProperty("listeningHttpPort", equalTo(8091)));

File: src/main/java/com/github/tomakehurst/wiremock/client/VerificationException.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.List;
 
-public class VerificationException extends RuntimeException {
+public class VerificationException extends AssertionError {
 
 	private static final long serialVersionUID = 5116216532516117538L;
 

File: src/main/java/com/github/tomakehurst/wiremock/core/Admin.java
Patch:
@@ -20,14 +20,15 @@
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
 import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.FindRequestsResult;
+import com.github.tomakehurst.wiremock.verification.VerificationResult;
 
 public interface Admin {
 
 	void addStubMapping(StubMapping stubMapping);
 	void resetMappings();
 	void resetScenarios();
     void resetToDefaultMappings();
-	int countRequestsMatching(RequestPattern requestPattern);
+	VerificationResult countRequestsMatching(RequestPattern requestPattern);
     FindRequestsResult findRequestsMatching(RequestPattern requestPattern);
 	void updateGlobalSettings(GlobalSettings settings);
     void addSocketAcceptDelay(RequestDelaySpec spec);

File: src/test/java/com/github/tomakehurst/wiremock/stubbing/AdminRequestHandlerTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import com.github.tomakehurst.wiremock.http.*;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
+import com.github.tomakehurst.wiremock.verification.VerificationResult;
 import org.jmock.Expectations;
 import org.jmock.Mockery;
 import org.jmock.integration.junit4.JMock;
@@ -103,7 +104,7 @@ public void shouldClearMappingsJournalAndRequestDelayWhenResetCalled() {
 	public void shouldReturnCountOfMatchingRequests() {
 		context.checking(new Expectations() {{
 			RequestPattern requestPattern = new RequestPattern(DELETE, "/some/resource");
-			allowing(admin).countRequestsMatching(requestPattern); will(returnValue(5));
+			allowing(admin).countRequestsMatching(requestPattern); will(returnValue(VerificationResult.withCount(5)));
 		}});
 		
 		Response response = handler.handle(aRequest(context)
@@ -113,7 +114,7 @@ public void shouldReturnCountOfMatchingRequests() {
 				.build());
 		
 		assertThat(response.getStatus(), is(HTTP_OK));
-		assertThat(response.getBodyAsString(), equalToJson("{ \"count\": 5 }"));
+		assertThat(response.getBodyAsString(), equalToJson("{ \"count\": 5, \"requestJournalDisabled\" : false}"));
 	}
 	
 	private static final String GLOBAL_SETTINGS_JSON =

File: src/main/java/com/github/tomakehurst/wiremock/common/FileSource.java
Patch:
@@ -29,4 +29,5 @@ public interface FileSource {
 	List<TextFile> listFilesRecursively();
 	void writeTextFile(String name, String contents);
     void writeBinaryFile(String name, byte[] contents);
+    boolean exists();
 }

File: src/main/java/com/github/tomakehurst/wiremock/common/FileSource.java
Patch:
@@ -29,4 +29,5 @@ public interface FileSource {
 	List<TextFile> listFilesRecursively();
 	void writeTextFile(String name, String contents);
     void writeBinaryFile(String name, byte[] contents);
+    boolean exists();
 }

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock;
 
 import com.github.tomakehurst.wiremock.common.*;
+import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.core.WireMockApp;
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import com.github.tomakehurst.wiremock.global.ThreadSafeRequestDelayControl;
@@ -44,7 +45,6 @@
 public class WireMockServer {
 
 	public static final String FILES_ROOT = "__files";
-	public static final int DEFAULT_PORT = 8080;
 	private static final String FILES_URL_MATCH = String.format("/%s/*", FILES_ROOT);
 	
 	private final WireMockApp wireMockApp;
@@ -94,7 +94,7 @@ public WireMockServer(int port, Integer httpsPort) {
     }
 	
 	public WireMockServer() {
-		this(DEFAULT_PORT);
+		this(Options.DEFAULT_PORT);
 	}
 	
 	public void loadMappingsUsing(final MappingsLoader mappingsLoader) {

File: src/main/java/com/github/tomakehurst/wiremock/junit/WireMockClassRule.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.tomakehurst.wiremock.junit;
 
+import com.github.tomakehurst.wiremock.core.Options;
 import org.junit.rules.MethodRule;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
@@ -24,7 +25,7 @@ public WireMockClassRule(int port) {
     }
 
     public WireMockClassRule() {
-        this(WireMockServer.DEFAULT_PORT);
+        this(Options.DEFAULT_PORT);
     }
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/junit/WireMockRule.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.github.tomakehurst.wiremock.WireMockServer;
 import com.github.tomakehurst.wiremock.client.WireMock;
+import com.github.tomakehurst.wiremock.core.Options;
 import org.junit.rules.MethodRule;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
@@ -38,7 +39,7 @@ public WireMockRule(int port, Integer httpsPort) {
     }
 	
 	public WireMockRule() {
-		this(WireMockServer.DEFAULT_PORT);
+		this(Options.DEFAULT_PORT);
 	}
 
     @Override

File: src/main/java/com/github/tomakehurst/wiremock/junit/WireMockStaticRule.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.github.tomakehurst.wiremock.WireMockServer;
 import com.github.tomakehurst.wiremock.client.WireMock;
+import com.github.tomakehurst.wiremock.core.Options;
 import org.junit.rules.MethodRule;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;
@@ -36,7 +37,7 @@ public WireMockStaticRule(int port) {
 	}
 	
 	public WireMockStaticRule() {
-		this(WireMockServer.DEFAULT_PORT);
+		this(Options.DEFAULT_PORT);
 	}
 	
 	public void stopServer() {

File: src/test/java/com/github/tomakehurst/wiremock/WireMockJUnitRuleTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
+import com.github.tomakehurst.wiremock.junit.WireMockClassRule;
 import org.junit.ClassRule;
 import org.junit.Ignore;
 import org.junit.Rule;
@@ -67,7 +68,7 @@ public static class WireMockRuleAsClassRule {
         
         @ClassRule
         @Rule
-        public static WireMockRule wireMockRule = new WireMockRule(8089);
+        public static WireMockClassRule wireMockRule = new WireMockClassRule(8089);
         
         @Test
         public void testStubAndFetchOnce() {

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock;
 
+import com.github.tomakehurst.wiremock.core.WireMockApp;
 import com.github.tomakehurst.wiremock.global.RequestDelayControl;
 import com.github.tomakehurst.wiremock.global.ThreadSafeRequestDelayControl;
 import com.github.tomakehurst.wiremock.common.FileSource;
@@ -40,7 +41,7 @@
 
 import java.util.Map;
 
-import static com.github.tomakehurst.wiremock.WireMockApp.ADMIN_CONTEXT_ROOT;
+import static com.github.tomakehurst.wiremock.core.WireMockApp.ADMIN_CONTEXT_ROOT;
 import static com.github.tomakehurst.wiremock.servlet.HandlerDispatchingServlet.SHOULD_FORWARD_TO_FILES_CONTEXT;
 import static com.google.common.collect.Maps.newHashMap;
 

File: src/main/java/com/github/tomakehurst/wiremock/client/AdminClient.java
Patch:
@@ -18,11 +18,12 @@
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
 import com.github.tomakehurst.wiremock.global.RequestDelaySpec;
 import com.github.tomakehurst.wiremock.matching.RequestPattern;
+import com.github.tomakehurst.wiremock.stubbing.StubMapping;
 import com.github.tomakehurst.wiremock.verification.FindRequestsResult;
 
 public interface AdminClient {
 
-	void addResponse(String responseSpecJson);
+	void addStubMapping(StubMapping stubMapping);
 	void resetMappings();
 	void resetScenarios();
 	int countRequestsMatching(RequestPattern requestPattern);

File: src/main/java/com/github/tomakehurst/wiremock/client/WireMock.java
Patch:
@@ -88,8 +88,7 @@ public static void resetAllScenarios() {
 	
 	public void register(MappingBuilder mappingBuilder) {
 		StubMapping mapping = mappingBuilder.build();
-		String json = StubMapping.buildJsonStringFor(mapping);
-		adminClient.addResponse(json);
+		adminClient.addStubMapping(mapping);
 	}
 	
 	public static UrlMatchingStrategy urlEqualTo(String url) {

File: src/main/java/com/github/tomakehurst/wiremock/core/WireMockApp.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.tomakehurst.wiremock;
+package com.github.tomakehurst.wiremock.core;
 
 import com.github.tomakehurst.wiremock.common.FileSource;
 import com.github.tomakehurst.wiremock.common.Notifier;

File: src/main/java/com/github/tomakehurst/wiremock/http/AdminRequestHandler.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.util.List;
 
-import static com.github.tomakehurst.wiremock.WireMockApp.ADMIN_CONTEXT_ROOT;
+import static com.github.tomakehurst.wiremock.core.WireMockApp.ADMIN_CONTEXT_ROOT;
 import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static com.github.tomakehurst.wiremock.http.HttpHeader.httpHeader;
 import static com.github.tomakehurst.wiremock.matching.RequestPattern.buildRequestPatternFrom;

File: src/main/java/com/github/tomakehurst/wiremock/servlet/HandlerDispatchingServlet.java
Patch:
@@ -30,7 +30,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.github.tomakehurst.wiremock.WireMockApp;
+import com.github.tomakehurst.wiremock.core.WireMockApp;
 import com.github.tomakehurst.wiremock.common.LocalNotifier;
 import com.github.tomakehurst.wiremock.common.Notifier;
 import com.github.tomakehurst.wiremock.http.Request;

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockWebContextListener.java
Patch:
@@ -20,7 +20,7 @@
 import javax.servlet.ServletContextListener;
 
 import com.github.tomakehurst.wiremock.global.NotImplementedRequestDelayControl;
-import com.github.tomakehurst.wiremock.WireMockApp;
+import com.github.tomakehurst.wiremock.core.WireMockApp;
 import com.github.tomakehurst.wiremock.common.Log4jNotifier;
 import com.github.tomakehurst.wiremock.common.ServletContextFileSource;
 import com.github.tomakehurst.wiremock.http.AdminRequestHandler;

File: src/test/java/com/github/tomakehurst/wiremock/testsupport/MappingJsonSamples.java
Patch:
@@ -75,7 +75,7 @@ public class MappingJsonSamples {
 		"		\"url\": \"/basic/mapping/resource\"		\n" +
 		"	},												\n" +
 		"	\"response\": {									\n" +
-		"		\"status\": 304,							\n" +
+		"		\"status\": 304 							\n" +
 		"	}												\n" +
 		"}													";
 	

File: src/main/java/com/github/tomakehurst/wiremock/NotImplementedRequestDelayControl.java
Patch:
@@ -16,4 +16,5 @@ public void clearDelay() {
     public void delayIfRequired() {
         // Do nothing
     }
+
 }

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServerRunner.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.github.tomakehurst.wiremock.common.FileSource;
 import com.github.tomakehurst.wiremock.common.SingleRootFileSource;
-import com.github.tomakehurst.wiremock.mapping.Json;
 import com.github.tomakehurst.wiremock.mapping.Mappings;
 import com.github.tomakehurst.wiremock.mapping.RequestPattern;
 import com.github.tomakehurst.wiremock.mapping.RequestResponseMapping;
@@ -43,8 +42,6 @@ public void run(String fileSourcesRoot, String... args) {
 			return;
 		}
 		
-		Json.setEnableJsonComments(options.jsonCommentsEnabled());
-		
 		FileSource fileSource = new SingleRootFileSource(fileSourcesRoot);
 		fileSource.createIfNecessary();
 		FileSource filesFileSource = fileSource.child(FILES_ROOT);

File: src/main/java/com/github/tomakehurst/wiremock/common/FileSource.java
Patch:
@@ -28,4 +28,5 @@ public interface FileSource {
 	List<TextFile> listFiles();
 	List<TextFile> listFilesRecursively();
 	void writeTextFile(String name, String contents);
+    void writeBinaryFile(String name, byte[] contents);
 }

File: src/main/java/com/github/tomakehurst/wiremock/mapping/MappingFileWriterListener.java
Patch:
@@ -66,7 +66,7 @@ private void writeToMappingAndBodyFile(Request request, Response response, Reque
         
         RequestResponseMapping mapping = new RequestResponseMapping(requestPattern, responseToWrite);
         
-        filesFileSource.writeTextFile(bodyFileName, response.getBodyAsString());
+        filesFileSource.writeBinaryFile(bodyFileName, response.getBody());
         mappingsFileSource.writeTextFile(mappingFileName, write(mapping));
     }
 

File: src/test/java/com/github/tomakehurst/wiremock/common/SingleRootFileSourceTest.java
Patch:
@@ -68,7 +68,7 @@ public void writehrowsExceptionWhenRootIsNotDir() {
 		SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/filesource/one");
 		fileSource.writeTextFile("thing", "stuff");
 	}
-	
+
 	private Matcher<TextFile> fileNamed(final String name) {
 		return new TypeSafeMatcher<TextFile>() {
 

File: src/main/java/com/github/tomakehurst/wiremock/http/ContentTypeHeader.java
Patch:
@@ -35,7 +35,7 @@ public static Optional<ContentTypeHeader> getFrom(Request request) {
 	
 	public ContentTypeHeader(String stringValue) {
         super(KEY, stringValue);
-		parts = stringValue.split(";");
+		parts = stringValue != null ? stringValue.split(";") : new String[0];
 	}
 
     private ContentTypeHeader() {

File: src/main/java/com/github/tomakehurst/wiremock/mapping/Request.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.github.tomakehurst.wiremock.mapping;
 
+import com.github.tomakehurst.wiremock.http.ContentTypeHeader;
 import com.github.tomakehurst.wiremock.http.HttpHeader;
 import com.github.tomakehurst.wiremock.http.HttpHeaders;
 import com.github.tomakehurst.wiremock.http.RequestMethod;
@@ -28,6 +29,7 @@ public interface Request {
 	RequestMethod getMethod();
 	String getHeader(String key);
     HttpHeader header(String key);
+    ContentTypeHeader contentTypeHeader();
     HttpHeaders getHeaders();
 	boolean containsHeader(String key);
 	Set<String> getAllHeaderKeys();

File: src/main/java/com/github/tomakehurst/wiremock/mapping/InMemoryMappings.java
Patch:
@@ -62,6 +62,7 @@ public void addMapping(RequestResponseMapping mapping) {
 	@Override
 	public void reset() {
 		mappings.clear();
+        scenarioMap.clear();
 	}
 	
 	@Override

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -16,6 +16,7 @@
 package com.github.tomakehurst.wiremock;
 
 import static com.github.tomakehurst.wiremock.WireMockApp.ADMIN_CONTEXT_ROOT;
+import static com.github.tomakehurst.wiremock.servlet.HandlerDispatchingServlet.SHOULD_FORWARD_TO_FILES_CONTEXT;
 import static com.google.common.collect.Maps.newHashMap;
 
 import java.util.Map;
@@ -127,6 +128,7 @@ private void addMockServiceContext() {
 		mockServiceContext.setAttribute(Notifier.KEY, notifier);
 		ServletHolder servletHolder = mockServiceContext.addServlet(HandlerDispatchingServlet.class, "/");
 		servletHolder.setInitParameter(RequestHandler.HANDLER_CLASS_KEY, MockServiceRequestHandler.class.getName());
+		servletHolder.setInitParameter(SHOULD_FORWARD_TO_FILES_CONTEXT, "true");
 		
 		MimeTypes mimeTypes = new MimeTypes();
 		mimeTypes.addMimeMapping("json", "application/json");

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -138,7 +138,7 @@ private void addMockServiceContext() {
 		mockServiceContext.setWelcomeFiles(new String[] { "index.json", "index.html", "index.xml", "index.txt" });
 		
 		mockServiceContext.addFilter(ContentTypeSettingFilter.class, FILES_URL_MATCH, Handler.FORWARD);
-		mockServiceContext.addFilter(TrailingSlashFilter.class, FILES_URL_MATCH, Handler.REQUEST);
+		mockServiceContext.addFilter(TrailingSlashFilter.class, FILES_URL_MATCH, Handler.ALL);
 		
 		jettyServer.addHandler(mockServiceContext);
     }

File: src/main/java/com/github/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -118,7 +118,7 @@ private void addMockServiceContext() {
         Map initParams = newHashMap();
         initParams.put("org.mortbay.jetty.servlet.Default.maxCacheSize", "0");
         initParams.put("org.mortbay.jetty.servlet.Default.resourceBase", fileSource.getPath());
-        initParams.put("org.mortbay.jetty.servlet.Default.dirAllowed", "true");
+        initParams.put("org.mortbay.jetty.servlet.Default.dirAllowed", "false");
         mockServiceContext.setInitParams(initParams);
         
         mockServiceContext.addServlet(DefaultServlet.class, FILES_URL_MATCH);

File: src/main/java/com/github/tomakehurst/wiremock/servlet/WireMockWebContextListener.java
Patch:
@@ -29,12 +29,14 @@
 public class WireMockWebContextListener implements ServletContextListener {
     
     private static final String APP_CONTEXT_KEY = "WireMockApp";
+    private static final String FILE_SOURCE_ROOT_KEY = "WireMockFileSourceRoot";
 
     @Override
     public void contextInitialized(ServletContextEvent sce) {
         ServletContext context = sce.getServletContext();
+        String fileSourceRoot = context.getInitParameter(FILE_SOURCE_ROOT_KEY);
         
-        ServletContextFileSource fileSource = new ServletContextFileSource(context, "/WEB-INF/wiremock");
+        ServletContextFileSource fileSource = new ServletContextFileSource(context, fileSourceRoot);
         Log4jNotifier notifier = new Log4jNotifier();
         notifier.setVerbose(true);
         

File: src/test/java/com/github/tomakehurst/wiremock/StandaloneAcceptanceTest.java
Patch:
@@ -187,7 +187,7 @@ public void doesNotLogVerboselyWhenVerboseNotSetInCommandLine() {
 	public void startsOnPortSpecifiedOnCommandLine() {
 		startRunner("--port", "8086");
 		WireMock client = new WireMock("localhost", 8086);
-		client.verifyThat(0, getRequestedFor(urlEqualTo("/bling/blang/blong")));
+		client.verifyThat(0, getRequestedFor(urlEqualTo("/bling/blang/blong"))); //Would throw an exception if couldn't connect
 	}
 	
 	@Test

File: src/test/java/com/tomakehurst/wiremock/common/VeryShortIdGeneratorTest.java
Patch:
@@ -24,11 +24,11 @@ public class VeryShortIdGeneratorTest {
 
     @Test
     public void IdsGeneratedContainOnlyLegalCharsAndAreRightLength() {
-        IdGenerator generator = new VeryShortIdGenerator();
+        final IdGenerator generator = new VeryShortIdGenerator();
         
         for (int i = 0; i < 1000; i++) {
-            String id = generator.generate();
-            assertThat(id, matches("[A-Za-z0-9$#&+!()-{}]{5}"));
+            final String id = generator.generate();
+            assertThat(id, matches("[A-Za-z0-9]{5}"));
         }
     }
     

File: src/main/java/com/tomakehurst/wiremock/common/SingleRootFileSource.java
Patch:
@@ -35,7 +35,6 @@ public class SingleRootFileSource implements FileSource {
 
 	public SingleRootFileSource(final String rootPath) {
 		this.rootPath = rootPath;
-		assertExistsAndIsDirectory();
 	}
 
 	@Override
@@ -65,6 +64,7 @@ public String getPath() {
 
 	@Override
 	public List<TextFile> listFiles() {
+		assertExistsAndIsDirectory();
 		File jsonDir = new File(rootPath);
 		List<File> fileList = asList(jsonDir.listFiles(filesOnly()));
 		return toTextFileList(fileList);
@@ -73,6 +73,7 @@ public List<TextFile> listFiles() {
 	
 	@Override
 	public List<TextFile> listFilesRecursively() {
+		assertExistsAndIsDirectory();
 		File jsonDir = new File(rootPath);
 		List<File> fileList = newArrayList();
 		recursivelyAddFilesToList(jsonDir, fileList);
@@ -109,6 +110,7 @@ private void assertExistsAndIsDirectory() {
 	
 	@Override
 	public void writeTextFile(String name, String contents) {
+		assertExistsAndIsDirectory();
 		File toFile = new File(rootPath, name);
 		try {
 			Files.write(contents, toFile, UTF_8);

File: src/main/java/com/tomakehurst/wiremock/servlet/ProxyResponseRenderer.java
Patch:
@@ -16,6 +16,7 @@
 package com.tomakehurst.wiremock.servlet;
 
 import static com.tomakehurst.wiremock.client.HttpClientUtils.getEntityAsByteArrayAndCloseStream;
+import static com.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static com.tomakehurst.wiremock.http.RequestMethod.POST;
 import static com.tomakehurst.wiremock.http.RequestMethod.PUT;
 
@@ -78,6 +79,7 @@ public Response render(ResponseDefinition responseDefinition) {
 	private static HttpUriRequest getHttpRequestFor(ResponseDefinition response) {
 		RequestMethod method = response.getOriginalRequest().getMethod();
 		String url = response.getProxyBaseUrl() + response.getOriginalRequest().getUrl();
+		notifier().info("Proxying: " + method + " " + url);
 		
 		switch (method) {
 		case GET:

File: src/main/java/com/tomakehurst/wiremock/servlet/MockServiceResponseRenderer.java
Patch:
@@ -60,8 +60,8 @@ private Response renderDirectly(ResponseDefinition responseDefinition) {
 			response.setBody(responseDefinition.getBody());
 		}
 		
-		if (responseDefinition.getCauseSocketFailure() != null) {
-			response.setCauseSocketFailure(responseDefinition.getCauseSocketFailure());
+		if (responseDefinition.getFault() != null) {
+			response.setFault(responseDefinition.getFault());
 		}
 		
 		return response;

File: src/main/java/com/tomakehurst/wiremock/client/AdminClient.java
Patch:
@@ -1,10 +1,12 @@
 package com.tomakehurst.wiremock.client;
 
+import com.tomakehurst.wiremock.global.GlobalSettings;
 import com.tomakehurst.wiremock.mapping.RequestPattern;
 
 public interface AdminClient {
 
 	void addResponse(String responseSpecJson);
 	void resetMappings();
 	int getRequestsMatching(RequestPattern requestPattern);
+	void updateGlobalSettings(GlobalSettings settings);
 }

File: src/main/java/com/tomakehurst/wiremock/mapping/JsonMappingBinder.java
Patch:
@@ -24,7 +24,7 @@ public static RequestPattern buildRequestPatternFrom(String json) {
 		return read(json, RequestPattern.class);
 	}
 	
-	private static <T> T read(String json, Class<T> clazz) {
+	public static <T> T read(String json, Class<T> clazz) {
 		try {
 			ObjectMapper mapper = new ObjectMapper();
 			return mapper.readValue(json, clazz);

File: src/main/java/com/tomakehurst/wiremock/WireMockServer.java
Patch:
@@ -21,6 +21,7 @@
 import com.tomakehurst.wiremock.servlet.FileBodyLoadingResponseRenderer;
 import com.tomakehurst.wiremock.servlet.HandlerDispatchingServlet;
 import com.tomakehurst.wiremock.servlet.ResponseRenderer;
+import com.tomakehurst.wiremock.servlet.TrailingSlashFilter;
 import com.tomakehurst.wiremock.standalone.JsonFileMappingsLoader;
 import com.tomakehurst.wiremock.standalone.MappingsLoader;
 import com.tomakehurst.wiremock.verification.InMemoryRequestJournal;
@@ -115,7 +116,8 @@ private void addMockServiceContext() {
 		
 		mockServiceContext.setWelcomeFiles(new String[] { "index.json", "index.html", "index.xml", "index.txt" });
 		
-		mockServiceContext.addFilter(ContentTypeSettingFilter.class, "/__files/*", Handler.ALL);
+		mockServiceContext.addFilter(ContentTypeSettingFilter.class, "/__files/*", Handler.FORWARD);
+		mockServiceContext.addFilter(TrailingSlashFilter.class, "/__files/*", Handler.REQUEST);
 		
 		jettyServer.addHandler(mockServiceContext);
     }

File: src/main/java/com/tomakehurst/wiremock/servlet/ContentTypeSettingFilter.java
Patch:
@@ -28,6 +28,9 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
         if (response instanceof HttpServletResponse) {
             String filePath = ((HttpServletRequest) request).getRequestURI();
             String contentType = context.getMimeType(filePath);
+            if (contentType == null) {
+                contentType = "application/json";
+            }
             ((HttpServletResponse) response).setContentType(contentType);
         }
         

File: src/test/java/com/tomakehurst/wiremock/AcceptanceTestBase.java
Patch:
@@ -17,6 +17,7 @@ public static void setupServer() {
 		wireMockServer = new WireMockServer();
 		wireMockServer.start();
 		testClient = new WireMockTestClient();
+		WireMock.configure();
 	}
 	
 	@AfterClass
@@ -25,7 +26,7 @@ public static void serverShutdown() {
 	}
 	
 	@Before
-	public void init() {
+	public void init() throws InterruptedException {
 		WireMock.reset();
 	}
 

File: src/test/java/com/tomakehurst/wiremock/StubbingAcceptanceTest.java
Patch:
@@ -37,6 +37,7 @@ public void mappingWithExactUrlAndMethodMatch() {
 	public void mappingWithUrlContainingQueryParameters() {
 		givenThat(get(urlEqualTo("/search?name=John&postcode=N44LL")).willReturn(
 				aResponse()
+				.withHeader("Location", "/nowhere")
 				.withStatus(302)));
 		
 		WireMockResponse response = testClient.get("/search?name=John&postcode=N44LL");

File: src/test/java/com/tomakehurst/wiremock/testsupport/WireMockTestClient.java
Patch:
@@ -101,6 +101,7 @@ private WireMockResponse executeMethodAndCovertExceptions(HttpMethod httpMethod,
 			for (HttpHeader header: headers) {
 				httpMethod.addRequestHeader(header.getName(), header.getValue());
 			}
+			httpMethod.setFollowRedirects(false);
 			client.executeMethod(httpMethod);
 		} catch (IOException ioe) {
 			throw new RuntimeException(ioe);

