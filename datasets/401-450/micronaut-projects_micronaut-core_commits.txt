File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/PipeliningServerHandler.java
Patch:
@@ -566,6 +566,7 @@ void discard() {
 
         @Override
         void handleUpstreamError(Throwable cause) {
+            inboundHandler = droppingInboundHandler;
             dest.error(cause);
         }
 

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -241,7 +241,7 @@ private void processBuilderDefinition(ClassElement element, VisitorContext conte
                         creatorMethod,
                         writePrefixes,
                         methodElement,
-                        element.getDefaultConstructor().orElse(null),
+                        returnType.getDefaultConstructor().orElse(null),
                         returnType,
                         methodMetadata,
                         index,

File: test-suite-http2-server-tck-netty/src/test/java/io/micronaut/http/server/tck/netty/tests/NettyHttpServerTestSuite.java
Patch:
@@ -1,11 +1,10 @@
 package io.micronaut.http.server.tck.netty.tests;
 
-import org.junit.platform.suite.api.SelectPackages;
-import org.junit.platform.suite.api.Suite;
-import org.junit.platform.suite.api.SuiteDisplayName;
+import org.junit.platform.suite.api.*;
 
 @Suite
 @SelectPackages("io.micronaut.http.server.tck.tests")
+@ExcludeClassNamePatterns("io.micronaut.http.server.tck.tests.forms.FormUrlEncodedBodyInRequestFilterTest") // It is flaky in HTTP 2
 @SuiteDisplayName("HTTP Server TCK for Netty")
 public class NettyHttpServerTestSuite {
 }

File: test-suite-http2-server-tck-netty/src/test/java/io/micronaut/http/server/tck/netty/tests/NettyHttpServerTestSuite.java
Patch:
@@ -1,11 +1,10 @@
 package io.micronaut.http.server.tck.netty.tests;
 
-import org.junit.platform.suite.api.SelectPackages;
-import org.junit.platform.suite.api.Suite;
-import org.junit.platform.suite.api.SuiteDisplayName;
+import org.junit.platform.suite.api.*;
 
 @Suite
 @SelectPackages("io.micronaut.http.server.tck.tests")
+@ExcludeClassNamePatterns("io.micronaut.http.server.tck.tests.forms.FormUrlEncodedBodyInRequestFilterTest") // It is flaky in HTTP 2
 @SuiteDisplayName("HTTP Server TCK for Netty")
 public class NettyHttpServerTestSuite {
 }

File: inject/src/main/java/io/micronaut/context/DefaultFieldInjectionPoint.java
Patch:
@@ -45,7 +45,7 @@
 class DefaultFieldInjectionPoint<B, T> implements FieldInjectionPoint<B, T>, EnvironmentConfigurable {
 
     private final BeanDefinition declaringBean;
-    private final Class declaringType;
+    protected final Class declaringType;
     private final Class<T> fieldType;
     private final String field;
     private final AnnotationMetadata annotationMetadata;

File: inject/src/main/java/io/micronaut/context/exceptions/MessageUtils.java
Patch:
@@ -176,7 +176,7 @@ private static void appendPath(BeanResolutionContext resolutionContext, boolean
     private static void appendPath(boolean circular, StringBuilder builder, String ls, BeanResolutionContext.Path path) {
         builder.append("Path Taken:");
         if (circular) {
-            builder.append(ls).append(path.toCircularString());
+            builder.append(ls).append(path.toConsoleCircularString(false));
         } else {
             builder.append(" ").append(path);
         }

File: inject/src/main/java/io/micronaut/inject/qualifiers/InterceptorBindingQualifier.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.ObjectUtils;
 import io.micronaut.inject.BeanType;
@@ -177,8 +178,8 @@ public String toString() {
         if (CollectionUtils.isEmpty(supportedAnnotationNames) && CollectionUtils.isEmpty(supportedInterceptorTypes)) {
             return "@InterceptorBinding(NONE)";
         } else {
-            return supportedAnnotationNames.keySet().stream().map((name) -> "@InterceptorBinding(" + name + ")").collect(Collectors.joining(" ")) +
-                    supportedInterceptorTypes.stream().map((name) -> "@InterceptorBinding(interceptorType = " + name + ")").collect(Collectors.joining(" "));
+            return supportedAnnotationNames.keySet().stream().map((name) -> "@InterceptorBinding(" + NameUtils.getShortenedName(name) + ")").collect(Collectors.joining(" ")) +
+                    supportedInterceptorTypes.stream().map((type) -> "@InterceptorBinding(interceptorType = " + NameUtils.getShortenedName(type.getTypeName()) + ")").collect(Collectors.joining(" "));
         }
     }
 

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -241,7 +241,7 @@ private void processBuilderDefinition(ClassElement element, VisitorContext conte
                         creatorMethod,
                         writePrefixes,
                         methodElement,
-                        null,
+                        element.getDefaultConstructor().orElse(null),
                         returnType,
                         methodMetadata,
                         index,

File: http-client/src/main/java/io/micronaut/http/client/netty/PoolResizer.java
Patch:
@@ -142,10 +142,11 @@ private void doSomeWork() {
         // make sure we won't exceed our config setting for pending connections
         connectionsToOpen = Math.min(connectionsToOpen, connectionPoolConfiguration.getMaxPendingConnections() - pendingConnectionCount);
         // limit the connection count to the protocol-specific settings, but only if that protocol was seen for this pool.
-        if (http1ConnectionCount > 0) {
+        // if there's no connections at all, conservatively use the lesser of both limits
+        if (http1ConnectionCount > 0 || http2ConnectionCount == 0) {
             connectionsToOpen = Math.min(connectionsToOpen, connectionPoolConfiguration.getMaxConcurrentHttp1Connections() - http1ConnectionCount);
         }
-        if (http2ConnectionCount > 0) {
+        if (http2ConnectionCount > 0 || http1ConnectionCount == 0) {
             connectionsToOpen = Math.min(connectionsToOpen, connectionPoolConfiguration.getMaxConcurrentHttp2Connections() - http2ConnectionCount);
         }
 

File: http/src/main/java/io/micronaut/http/uri/DefaultFormUrlEncodedDecoder.java
Patch:
@@ -36,7 +36,9 @@ final class DefaultFormUrlEncodedDecoder implements FormUrlEncodedDecoder {
     @NonNull
     public Map<String, Object> decode(@NonNull String formUrlEncodedString,
                                       @NonNull Charset charset) {
-        QueryStringDecoder decoder = new QueryStringDecoder(formUrlEncodedString, charset, false, formConfiguration.getMaxDecodedKeyValueParameters());
+        QueryStringDecoder decoder = new QueryStringDecoder(formUrlEncodedString, charset, false,
+                                                            formConfiguration.getMaxDecodedKeyValueParameters(),
+                                                            formConfiguration.isSemicolonIsNormalChar());
         return flatten(decoder.parameters());
     }
 }

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -1369,7 +1369,7 @@ final void emitPoolHandle(Sinks.One<PoolHandle> sink, PoolHandle ph) {
             }
 
             @Override
-            public boolean dispatch(PoolSink<PoolHandle> sink) {
+            public final boolean dispatch(PoolSink<PoolHandle> sink) {
                 if (!tryEarmarkForRequest()) {
                     return false;
                 }
@@ -1602,7 +1602,7 @@ void fireReadTimeout(ChannelHandlerContext ctx) {
             }
 
             @Override
-            void dispatch0(PoolSink<PoolHandle> sink) {
+            final void dispatch0(PoolSink<PoolHandle> sink) {
                 if (!channel.isActive() || windDownConnection) {
                     // make sure the request isn't dispatched to this connection again
                     windDownConnection();

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -2187,7 +2187,7 @@ private <E extends HttpClientException> E decorate(DefaultHttpClient ctx, E exc)
     /**
      * Used as a holder for the current SSE event.
      */
-    private static class CurrentEvent {
+    private static final class CurrentEvent {
         byte[] data;
         String id;
         String name;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpPipelineBuilder.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.util.SupplierUtil;
 import io.micronaut.http.HttpVersion;
-import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.body.BodySizeLimits;
+import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.http.server.netty.handler.Http2ServerHandler;
 import io.micronaut.http.server.netty.handler.PipeliningServerHandler;
@@ -155,7 +155,7 @@ final class HttpPipelineBuilder implements Closeable {
     }
 
     boolean supportsSsl() {
-        return sslContext != null;
+        return sslContext != null || quicSslContext != null;
     }
 
     @Override
@@ -340,6 +340,7 @@ protected void initChannel(@NonNull Channel ch) throws Exception {
                         ch.pipeline().addLast(new Http3ServerConnectionHandler(new ChannelInitializer<QuicStreamChannel>() {
                             @Override
                             protected void initChannel(@NonNull QuicStreamChannel ch) throws Exception {
+                                ch.config().setAutoRead(false);
                                 StreamPipeline streamPipeline = new StreamPipeline(ch, sslHandler, connectionCustomizer.specializeForChannel(ch, NettyServerCustomizer.ChannelRole.REQUEST_STREAM));
                                 streamPipeline.insertHttp3FrameHandlers();
                                 streamPipeline.streamCustomizer.onStreamPipelineBuilt();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/PipeliningServerHandler.java
Patch:
@@ -1141,6 +1141,7 @@ private void complete0() {
 
                 if (!writtenLast) {
                     writeCompressing(LastHttpContent.EMPTY_LAST_CONTENT, true, outboundAccess.closeAfterWrite);
+                    writtenLast = true;
                 }
                 requestHandler.responseWritten(outboundAccess.attachment);
                 PipeliningServerHandler.this.writeSome();

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -431,7 +431,7 @@ public void setMaxRequestSize(@ReadableBytes long maxRequestSize) {
      * Sets the maximum number of request bytes that will be buffered. Fully streamed requests can
      * still exceed this value. Default value ({@value #DEFAULT_MAX_REQUEST_BUFFER_SIZE} =&gt; // 10MB).
      * Currently limited to {@code 2^31}, if you need longer request bodies, stream them.<br>
-     * Note that there is always some internal buffering, so a very low value (< ~64K) will
+     * Note that there is always some internal buffering, so a very low value ({@code < ~64K}) will
      * essentially act like a request size limit.
      *
      * @param maxRequestBufferSize The maximum number of bytes from the request that may be buffered if the application requests buffering

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java
Patch:
@@ -89,7 +89,7 @@ public class CorsFilter implements Ordered, ConditionalFilter {
     /**
      * @param corsConfiguration The {@link CorsOriginConfiguration} instance
      * @param httpHostResolver  HTTP Host resolver
-     * @deprecated use {@link CorsFilter(HttpServerConfiguration, HttpHostResolver, Router)} instead.
+     * @deprecated use {@link CorsFilter(HttpServerConfiguration.CorsConfiguration, HttpHostResolver, Router)} instead.
      */
     @Deprecated(since = "4.7", forRemoval = true)
     public CorsFilter(HttpServerConfiguration.CorsConfiguration corsConfiguration,

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctordependencyfailure/MyClassA.java
Patch:
@@ -15,5 +15,5 @@
  */
 package io.micronaut.inject.failures.ctordependencyfailure;
 
-public interface A {
+public interface MyClassA {
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorexception/MyClassA.java
Patch:
@@ -21,7 +21,7 @@
 
 @Requires(property = "spec.name", value = "ConstructorExceptionSpec")
 @Singleton
-public class A {
-    public A(C c) {
+public class MyClassA {
+    public MyClassA(MyClassC propC) {
     }
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorexception/MyClassC.java
Patch:
@@ -21,8 +21,8 @@
 
 @Requires(property = "spec.name", value = "ConstructorExceptionSpec")
 @Singleton
-public class C {
-    public C() {
+public class MyClassC {
+    public MyClassC() {
         throw new RuntimeException("bad");
     }
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/fieldcirculardependency/MyClassA.java
Patch:
@@ -21,7 +21,7 @@
 
 @Requires(property = "spec.name", value = "FieldCircularDependencyFailureSpec")
 @Singleton
-public class A {
+public class MyClassA {
 
-    public A(C c) {}
+    public MyClassA(MyClassC propC) {}
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/fieldcirculardependency/MyClassB.java
Patch:
@@ -22,7 +22,7 @@
 
 @Requires(property = "spec.name", value = "FieldCircularDependencyFailureSpec")
 @Singleton
-public class B {
+public class MyClassB {
     @Inject
-    protected A a;
+    protected MyClassA propA;
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/fieldcirculardependency/MyClassC.java
Patch:
@@ -17,7 +17,7 @@
 
 import jakarta.inject.Inject;
 
-public class C {
+public class MyClassC {
     @Inject
-    protected B b;
+    protected MyClassB propB;
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/fielddependencymissing/MyClassA.java
Patch:
@@ -15,5 +15,5 @@
  */
 package io.micronaut.inject.failures.fielddependencymissing;
 
-public interface A {
+public interface MyClassA {
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/nesteddependency/MyClassA.java
Patch:
@@ -21,8 +21,8 @@
 
 @Requires(property = "spec.name", value = "NestedDependencyFailureSpec")
 @Singleton
-public class C {
-    public C(D d) {
+public class MyClassA {
+    public MyClassA(MyClassC propC) {
 
     }
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/nesteddependency/MyClassC.java
Patch:
@@ -21,8 +21,8 @@
 
 @Requires(property = "spec.name", value = "NestedDependencyFailureSpec")
 @Singleton
-public class A {
-    public A(C c) {
+public class MyClassC {
+    public MyClassC(MyClassD propD) {
 
     }
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/nesteddependency/MyClassD.java
Patch:
@@ -15,5 +15,5 @@
  */
 package io.micronaut.inject.failures.nesteddependency;
 
-public class D {
+public class MyClassD {
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/postconstruct/MyClassA.java
Patch:
@@ -21,6 +21,6 @@
 
 @Requires(property = "spec.name", value = "PostConstructExceptionSpec")
 @Singleton
-public class A {
+public class MyClassA {
 
 }

File: inject/src/main/java/io/micronaut/context/exceptions/MessageUtils.java
Patch:
@@ -60,7 +60,7 @@ static String buildMessage(BeanResolutionContext resolutionContext, String messa
         }
         if (hasPath) {
             String pathString = path.toString();
-            builder.append("Path Taken: ").append(pathString);
+            builder.append("Path Taken:").append(pathString);
         }
         return builder.toString();
     }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -288,7 +288,7 @@ protected void doOnError(Throwable t) {
                 }
 
                 if (t instanceof HttpClientResponseException e) {
-                    if (e.getStatus() == HttpStatus.NOT_FOUND) {
+                    if (e.code() == HttpStatus.NOT_FOUND.getCode()) {
                         if (reactiveValueType == Optional.class) {
                             future.complete(Optional.empty());
                         } else if (HttpResponse.class.isAssignableFrom(reactiveValueType)) {
@@ -637,7 +637,7 @@ private Object handleBlockingCall(String clientName, Class returnType, Supplier<
                 LOG.debug("Client [{}] received HTTP error response: {}", clientName, t.getMessage(), t);
             }
 
-            if (t instanceof HttpClientResponseException exception && exception.getStatus() == HttpStatus.NOT_FOUND) {
+            if (t instanceof HttpClientResponseException exception && exception.code() == HttpStatus.NOT_FOUND.getCode()) {
                 if (returnType == Optional.class) {
                     return Optional.empty();
                 } else if (HttpResponse.class.isAssignableFrom(returnType)) {

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -41,7 +41,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;

File: management/src/main/java/io/micronaut/management/endpoint/processors/AbstractEndpointRouteBuilder.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.LifeCycle;
-import io.micronaut.context.exceptions.NoSuchBeanException;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospection.java
Patch:
@@ -327,7 +327,7 @@ default <P> BeanWriteProperty<T, P> getRequiredWriteProperty(@NonNull String nam
         final BeanReadProperty<T, ?> prop = getReadProperty(name).orElse(null);
         if (prop != null && type.isAssignableFrom(prop.getType())) {
             //noinspection unchecked
-            return Optional.of((BeanProperty<T, P>) prop);
+            return Optional.of((BeanReadProperty<T, P>) prop);
         }
         return Optional.empty();
     }

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractArgumentBinder.java
Patch:
@@ -61,6 +61,7 @@ protected AbstractArgumentBinder(ConversionService conversionService) {
      * Constructor.
      *
      * @param conversionService conversionService
+     * @param argument The argument
      */
     protected AbstractArgumentBinder(ConversionService conversionService, Argument<T> argument) {
         this.conversionService = conversionService;

File: context/src/main/java/io/micronaut/runtime/beans/MapperIntroduction.java
Patch:
@@ -563,7 +563,7 @@ private sealed interface MappingBuilder<B> permits DefaultMappingBuilder, MergeM
         @NonNull Argument<?>[] getBuilderArguments();
 
         /**
-         * Get the argument index based on its name
+         * Get the argument index based on its name.
          *
          * @param name The argument name
          * @return The index

File: http-client-jdk/src/main/java/io/micronaut/http/client/jdk/JdkBlockingHttpClient.java
Patch:
@@ -34,7 +34,6 @@
 import io.micronaut.http.filter.HttpFilterResolver;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
 import java.util.List;
 
 /**

File: http/src/main/java/io/micronaut/http/bind/binders/RequestAttributeAnnotationBinder.java
Patch:
@@ -44,6 +44,7 @@ public RequestAttributeAnnotationBinder(ConversionService conversionService) {
 
     /**
      * @param conversionService conversionService
+     * @param argument argument
      */
     public RequestAttributeAnnotationBinder(ConversionService conversionService,
                                             Argument<T> argument) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 

File: router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java
Patch:
@@ -42,6 +42,7 @@ public final class DefaultUriRouteMatch<T, R> extends AbstractRouteMatch<T, R> i
     private final UriRouteInfo<T, R> uriRouteInfo;
     private final Charset defaultCharset;
     private Map<String, Object> variables;
+
     /**
      * @param matchInfo The URI match info
      * @param routeInfo The URI route

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -722,7 +722,8 @@ private void writeIntrospectionClass(ClassWriterOutputVisitor classWriterOutputV
         dispatchWriter.buildGetTargetMethodByIndex(classWriter);
         buildFindIndexedProperty(classWriter);
         buildGetIndexedProperties(classWriter);
-        boolean hasBuilder = annotationMetadata != null && annotationMetadata.isPresent(Introspected.class, "builder");
+        boolean hasBuilder = annotationMetadata != null &&
+            (annotationMetadata.isPresent(Introspected.class, "builder") || annotationMetadata.hasDeclaredAnnotation("lombok.Builder"));
         if (defaultConstructor != null) {
             writeInstantiateMethod(classWriter, defaultConstructor, "instantiate");
             // in case invoked directly or via instantiateUnsafe

File: core-processor/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -1569,6 +1569,7 @@ public static void clearMutated() {
 
     /**
      * Used to clear mutated metadata at the end of a compilation cycle.
+     * @param key The mutated annotation metadata to remove
      */
     @Internal
     public static void clearMutated(@NonNull Object key) {

File: core/src/test/java/io/micronaut/core/io/service/SoftServiceLoaderTest.java
Patch:
@@ -32,7 +32,7 @@ void findServicesUsingJrtScheme() {
             ServiceCollector<String> collector = SoftServiceLoader.newCollector("io.micronaut.inject.BeanDefinitionReference", null, layer.findLoader(modulename), Function.identity());
             List<String> services = new ArrayList<>();
             collector.collect(services::add);
-     
+
             assertEquals(1, services.size());
             assertEquals("io.micronaut.logging.$PropertiesLoggingLevelsConfigurer$Definition", services.get(0));
         }

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -787,7 +787,7 @@ public void onComplete() {
     }
 
     private static <T> Mono<T> toMono(ExecutionFlow<T> flow, PropagatedContext context) {
-        return Mono.from(ReactivePropagation.propagate(context, ReactiveExecutionFlow.toPublisher(() -> flow)));
+        return Mono.from(ReactivePropagation.propagate(context, ReactiveExecutionFlow.toPublisher(flow)));
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyPublisherBodyBinder.java
Patch:
@@ -97,7 +97,7 @@ public BindingResult<Publisher<?>> bind(ArgumentConversionContext<Publisher<?>>
                     }
                     return value.orElseThrow(() -> NettyPublisherBodyBinder.extractError(null, context));
                 });
-            Publisher<Object> future = ReactiveExecutionFlow.toPublisher(() -> flow);
+            Publisher<Object> future = ReactiveExecutionFlow.toPublisher(flow);
             return () -> Optional.of(future);
         }
         return BindingResult.empty();

File: core/src/main/java/io/micronaut/core/io/service/MicronautMetaServiceLoaderUtils.java
Patch:
@@ -257,7 +257,7 @@ public List<S> collect(boolean allowFork) {
                 List<S> collection = new ArrayList<>(serviceEntries.size());
                 for (String serviceEntry : serviceEntries) {
                     S val = instantiate(serviceEntry, classLoader);
-                    if (val != null && predicate != null && !predicate.test(val)) {
+                    if (val != null && (predicate == null || predicate.test(val))) {
                         collection.add(val);
                     }
                 }
@@ -309,7 +309,7 @@ public void collect(Collection<S> values) {
             if (throwable != null) {
                 throw new SoftServiceLoader.ServiceLoadingException("Failed to load a service: " + throwable.getMessage(), throwable);
             }
-            if (result != null && !values.contains(result)) {
+            if (result != null) {
                 values.add(result);
             }
         }

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -193,6 +193,7 @@ public class ConnectionManager {
         this.clientCustomizer = from.clientCustomizer;
         this.informationalServiceId = from.informationalServiceId;
         this.nettyClientSslBuilder = from.nettyClientSslBuilder;
+        this.running.set(from.running.get());
     }
 
     ConnectionManager(

File: http-netty/src/main/java/io/micronaut/http/netty/body/StreamingNettyByteBody.java
Patch:
@@ -157,7 +157,7 @@ protected void release(ByteBuf item) {
     public @NonNull CloseableByteBody move() {
         BufferConsumer.Upstream upstream = this.upstream;
         if (upstream == null) {
-            failClaim();
+            BaseSharedBuffer.failClaim();
         }
         this.upstream = null;
         return new StreamingNettyByteBody(sharedBuffer, forceDelaySubscribe, upstream);

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -275,7 +275,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
                             }
                             error(originatingElement.element(), e.getMessage());
                         } catch (PostponeToNextRoundException e) {
-                            postponedTypes.put(javaClassElement.getName(), e.getErrorElement());
+                            postponedTypes.put(javaClassElement.getCanonicalName(), e.getErrorElement());
                         }
                     }
                 }

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyCharSequenceBodyWriter.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.type.MutableHeaders;
 import io.micronaut.http.ByteBodyHttpResponse;
 import io.micronaut.http.ByteBodyHttpResponseWrapper;
-import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpHeaders;
@@ -63,7 +62,7 @@ public ByteBodyHttpResponse<?> write(ByteBufferFactory<?, ?> bufferFactory, Http
             ByteBufUtil.writeUtf8(ByteBufAllocator.DEFAULT, object) :
             ByteBufUtil.encodeString(ByteBufAllocator.DEFAULT, CharBuffer.wrap(object), charset);
         NettyHttpHeaders nettyHttpHeaders = (NettyHttpHeaders) headers;
-        if (!nettyHttpHeaders.contains(HttpHeaders.CONTENT_TYPE)) {
+        if (!nettyHttpHeaders.contains(HttpHeaderNames.CONTENT_TYPE)) {
             nettyHttpHeaders.set(HttpHeaderNames.CONTENT_TYPE, mediaType);
         }
         return ByteBodyHttpResponseWrapper.wrap(outgoingResponse, new AvailableNettyByteBody(byteBuf));

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyWritableBodyWriter.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.core.type.MutableHeaders;
 import io.micronaut.http.ByteBodyHttpResponse;
 import io.micronaut.http.ByteBodyHttpResponseWrapper;
-import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpHeaders;
@@ -41,6 +40,7 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufOutputStream;
+import io.netty.handler.codec.http.HttpHeaderNames;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
 
@@ -76,7 +76,7 @@ public boolean isBlocking() {
     @Override
     public ByteBodyHttpResponse<?> write(ByteBufferFactory<?, ?> bufferFactory, HttpRequest<?> request, MutableHttpResponse<Writable> outgoingResponse, Argument<Writable> type, MediaType mediaType, Writable object) throws CodecException {
         MutableHttpHeaders outgoingHeaders = outgoingResponse.getHeaders();
-        if (mediaType != null && !outgoingHeaders.contains(HttpHeaders.CONTENT_TYPE)) {
+        if (mediaType != null && !outgoingHeaders.contains(HttpHeaderNames.CONTENT_TYPE)) {
             outgoingHeaders.contentType(mediaType);
         }
         ByteBufOutputStream outputStream = new ByteBufOutputStream(ByteBufAllocator.DEFAULT.buffer());

File: http/src/main/java/io/micronaut/http/reactive/execution/ReactiveExecutionFlow.java
Patch:
@@ -35,7 +35,7 @@
  * @since 4.0.0
  */
 @Internal
-public interface ReactiveExecutionFlow<T> extends ExecutionFlow<T> {
+public sealed interface ReactiveExecutionFlow<T> extends ExecutionFlow<T> permits ReactorExecutionFlowImpl {
 
     /**
      * Creates a new reactive flow from a publisher.

File: benchmarks/src/typeCheckTest/java/example/TypeThrashingTest.java
Patch:
@@ -1,7 +1,7 @@
 package example;
 
+import io.micronaut.http.server.stack.ControllersBenchmark;
 import io.micronaut.http.server.stack.FullHttpStackBenchmark;
-import io.micronaut.http.server.stack.TfbLikeBenchmark;
 import io.micronaut.test.typepollution.FocusListener;
 import io.micronaut.test.typepollution.ThresholdFocusListener;
 import io.micronaut.test.typepollution.TypePollutionTransformer;
@@ -91,7 +91,7 @@ static class Concrete implements A, B {
     @Test
     public void testFromJmh() throws RunnerException {
         Options opt = new OptionsBuilder()
-            .include(Stream.of(FullHttpStackBenchmark.class, TfbLikeBenchmark.class)
+            .include(Stream.of(FullHttpStackBenchmark.class, ControllersBenchmark.class)
                 .map(Class::getName)
                 .collect(Collectors.joining("|", "(", ")"))
                 + ".*")

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -55,10 +55,10 @@
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpVersion;
 
+import java.util.HashMap;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Delegates to Netty's {@link FullHttpResponse}.
@@ -257,7 +257,7 @@ public MutableConvertibleValues<Object> getAttributes() {
             synchronized (this) { // double check
                 attributes = this.attributes;
                 if (attributes == null) {
-                    attributes = new MutableConvertibleValuesMap<>(new ConcurrentHashMap<>(4));
+                    attributes = new MutableConvertibleValuesMap<>(new HashMap<>(4));
                     this.attributes = attributes;
                 }
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -54,7 +54,6 @@
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.netty.body.AvailableNettyByteBody;
 import io.micronaut.http.netty.body.NettyBodyAdapter;
-import io.micronaut.http.netty.body.NettyJsonHandler;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.stream.JsonSubscriber;
 import io.micronaut.http.netty.stream.StreamedHttpResponse;
@@ -343,7 +342,7 @@ private ExecutionFlow<ByteBodyHttpResponse<?>> encodeHttpResponse(
 
             // avoid checkcast for MessageBodyWriter interface here
             Object o = response.getBodyWriter().orElse(null);
-            MessageBodyWriter<Object> messageBodyWriter = o instanceof NettyJsonHandler njh ? njh : (MessageBodyWriter<Object>) o;
+            MessageBodyWriter<Object> messageBodyWriter = o instanceof ResponseBodyWriter rbw ? rbw : (MessageBodyWriter<Object>) o;
             MediaType responseMediaType = response.getContentType().orElse(null);
             Argument<Object> responseBodyType;
             if (routeInfo != null) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/Compressor.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.server.netty.handler;
 
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.http.server.netty.DefaultHttpCompressionStrategy;
 import io.micronaut.http.server.netty.HttpCompressionStrategy;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
@@ -70,15 +71,15 @@ final class Compressor {
     }
 
     @Nullable
-    Session prepare(ChannelHandlerContext ctx, HttpRequest request, HttpResponse response) {
+    Session prepare(ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, long contentLength) {
         // from HttpContentEncoder: isPassthru
         int code = response.status().code();
         if (code < 200 || code == 204 || code == 304 ||
             (request.method().equals(HttpMethod.HEAD) || (request.method().equals(HttpMethod.CONNECT) && code == 200)) ||
             response.protocolVersion() == HttpVersion.HTTP_1_0) {
             return null;
         }
-        if (!strategy.shouldCompress(response)) {
+        if (strategy instanceof DefaultHttpCompressionStrategy def ? !def.shouldCompress(response, contentLength) : !strategy.shouldCompress(response)) {
             return null;
         }
         if (response.headers().contains(HttpHeaderNames.CONTENT_ENCODING)) {

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -271,7 +271,9 @@ public <T, R> UriRouteMatch<T, R> findClosest(@NonNull HttpRequest<?> request) t
             }
         }
         if (uriRoutes.size() == 1) {
-            return uriRoutes.get(0);
+            Object obj = uriRoutes.get(0);
+            // type pollution avoidance (should be covered by type pollution test)
+            return obj instanceof DefaultUriRouteMatch<?, ?> def ? (DefaultUriRouteMatch<T, R>) def : (UriRouteMatch<T, R>) obj;
         }
         uriRoutes = resolveAmbiguity(request, uriRoutes);
         if (uriRoutes.size() > 1) {

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorcirculardependency/MyClassA.java
Patch:
@@ -21,6 +21,6 @@
 
 @Requires(property = "spec.name", value = "ConstructorCircularDependencyFailureSpec")
 @Singleton
-public class A {
-    public A(C c) {}
+public class MyClassA {
+    public MyClassA(MyClassC propC) {}
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorcirculardependency/MyClassB.java
Patch:
@@ -22,7 +22,7 @@
 
 @Requires(property = "spec.name", value = "ConstructorCircularDependencyFailureSpec")
 @Singleton
-public class B {
+public class MyClassB {
     @Inject
-    protected A a;
+    protected MyClassA propA;
 }

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorcirculardependency/MyClassC.java
Patch:
@@ -17,7 +17,7 @@
 
 import jakarta.inject.Inject;
 
-public class C {
+public class MyClassC {
     @Inject
-    public C(B b ) {}
+    public MyClassC(MyClassB propB) {}
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
+import java.util.LinkedHashMap;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
@@ -74,7 +75,7 @@ abstract class AbstractInjectAnnotationProcessor extends AbstractProcessor {
     protected MutableConvertibleValues<Object> visitorAttributes = new MutableConvertibleValuesMap<>();
     protected AnnotationProcessingOutputVisitor classWriterOutputVisitor;
     protected JavaVisitorContext javaVisitorContext;
-    protected Set<String> postponedTypes = new LinkedHashSet<>();
+    protected Map<String, Object> postponedTypes = new LinkedHashMap<>();
     private boolean incremental = false;
     private final Set<String> supportedAnnotationTypes = new HashSet<>(5);
     private final Map<String, Boolean> isProcessedCache = new HashMap<>(30);
@@ -219,7 +220,7 @@ protected JavaVisitorContext newVisitorContext(@NonNull ProcessingEnvironment pr
             filer,
             visitorAttributes,
             getVisitorKind(),
-            postponedTypes
+            postponedTypes.keySet()
         );
     }
 

File: jackson-databind/src/main/java/io/micronaut/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -64,7 +64,7 @@ public JsonMediaTypeCodec(ObjectMapper objectMapper,
      * @param objectMapper To read/write JSON
      * @param applicationConfiguration The common application configurations
      * @param codecConfiguration The configuration for the codec
-     * @deprecated Use {@link #JsonMediaTypeCodec(BeanProvider, ApplicationConfiguration, CodecConfiguration, ApplicationConfiguration)} instead
+     * @deprecated Use {@link #JsonMediaTypeCodec(BeanProvider, CodecConfiguration, ApplicationConfiguration)} instead
      */
     @Deprecated
     public JsonMediaTypeCodec(BeanProvider<ObjectMapper> objectMapper,

File: jackson-databind/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -75,7 +75,7 @@ public JsonStreamMediaTypeCodec(ObjectMapper objectMapper,
      * @param objectMapper To read/write JSON
      * @param applicationConfiguration The common application configurations
      * @param codecConfiguration The configuration for the codec
-     * @deprecated Use {@link #JsonStreamMediaTypeCodec(BeanProvider, ApplicationConfiguration, CodecConfiguration, ApplicationConfiguration)} instead.
+     * @deprecated Use {@link #JsonStreamMediaTypeCodec(BeanProvider, CodecConfiguration, ApplicationConfiguration)} instead.
      */
     @Deprecated
     public JsonStreamMediaTypeCodec(BeanProvider<ObjectMapper> objectMapper,

File: http/src/main/java/io/micronaut/http/body/TypedMessageBodyReader.java
Patch:
@@ -38,6 +38,6 @@ public interface TypedMessageBodyReader<T> extends MessageBodyReader<T> {
 
     @Override
     default boolean isReadable(Argument<T> type, MediaType mediaType) {
-        return type.isAssignableFrom(getType());
+        return type.isAssignableFrom(getType()) && !type.getType().equals(Object.class);
     }
 }

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/NettyClientSslBuilder.java
Patch:
@@ -166,8 +166,9 @@ protected KeyManagerFactory getKeyManagerFactory(SslConfiguration ssl) {
     @Override
     protected TrustManagerFactory getTrustManagerFactory(SslConfiguration ssl) {
         try {
-            if (this.getTrustStore(ssl).isPresent()) {
-                return super.getTrustManagerFactory(ssl);
+            Optional<KeyStore> trustStore = getTrustStore(ssl);
+            if (trustStore.isPresent()) {
+                return super.getTrustManagerFactory(trustStore.get());
             } else {
                 if (ssl instanceof AbstractClientSslConfiguration configuration && configuration.isInsecureTrustAllCertificates()) {
                     if (LOG.isWarnEnabled()) {

File: core/src/main/java/io/micronaut/core/io/service/MicronautMetaServiceLoaderUtils.java
Patch:
@@ -257,7 +257,7 @@ public List<S> collect(boolean allowFork) {
                 List<S> collection = new ArrayList<>(serviceEntries.size());
                 for (String serviceEntry : serviceEntries) {
                     S val = instantiate(serviceEntry, classLoader);
-                    if (val != null && predicate.test(val)) {
+                    if (val != null && predicate != null && !predicate.test(val)) {
                         collection.add(val);
                     }
                 }

File: function/src/main/java/io/micronaut/function/executor/FunctionInitializer.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
 import io.micronaut.inject.annotation.MutableAnnotationMetadata;
 
-import java.io.IOException;
 import java.util.Collections;
 import java.util.function.Function;
 
@@ -96,7 +95,6 @@ public void close() {
      *
      * @param args The arguments passed to main
      * @param supplier The function that executes this function
-     * @throws IOException If an error occurs
      */
     public void run(String[] args, Function<ParseContext, ?> supplier) {
         ApplicationContext applicationContext = this.applicationContext;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/ErrorResponseProcessor.java
Patch:
@@ -26,7 +26,7 @@
  * @author James Kleeh
  * @since 2.4.0
  */
-@DefaultImplementation(HateoasErrorResponseProcessor.class)
+@DefaultImplementation(DefaultErrorResponseProcessor.class)
 public interface ErrorResponseProcessor<T> {
 
     /**

File: http-tck/src/main/java/io/micronaut/http/tck/BodyAssertion.java
Patch:
@@ -80,8 +80,8 @@ public static BodyAssertion.Builder builder() {
      * @param body The HTTP Response Body
      */
     @SuppressWarnings("java:S5960") // Assertion is the whole point of this method
-    public void evaluate(T body) {
-        assertTrue(this.evaluator.test(expected, body), () -> this.evaluator.message(expected, body));
+    public void evaluate(Object body) {
+        assertTrue(this.evaluator.test(expected, (T) body), () -> this.evaluator.message(expected, (T) body));
     }
 
     /**

File: json-core/src/main/java/io/micronaut/json/body/JsonMessageHandler.java
Patch:
@@ -85,7 +85,7 @@ public JsonMapper getJsonMapper() {
 
     @Override
     public boolean isReadable(@NonNull Argument<T> type, MediaType mediaType) {
-        return mediaType != null && mediaType.matchesExtension(MediaType.EXTENSION_JSON);
+        return mediaType != null && mediaType.matchesAllOrWildcardOrExtension(MediaType.EXTENSION_JSON);
     }
 
     private static CodecException decorateRead(Argument<?> type, IOException e) {
@@ -122,7 +122,7 @@ public T read(@NonNull Argument<T> type, MediaType mediaType, @NonNull Headers h
 
     @Override
     public boolean isWriteable(@NonNull Argument<T> type, MediaType mediaType) {
-        return mediaType != null && mediaType.matchesExtension(MediaType.EXTENSION_JSON);
+        return mediaType != null && mediaType.matchesAllOrWildcardOrExtension(MediaType.EXTENSION_JSON);
     }
 
     private static CodecException decorateWrite(Object object, IOException e) {

File: http-client/src/main/java/io/micronaut/http/client/netty/CancellableMonoSink.java
Patch:
@@ -44,6 +44,7 @@ final class CancellableMonoSink<T> implements Publisher<T>, Sinks.One<T>, Subscr
     private T value;
     private Throwable failure;
     private boolean complete = false;
+    private boolean cancelled = false;
     private Subscriber<? super T> subscriber = null;
     private boolean subscriberWaiting = false;
 
@@ -72,7 +73,7 @@ public void subscribe(Subscriber<? super T> s) {
     }
 
     private void tryForward() {
-        if (subscriberWaiting && complete) {
+        if (subscriberWaiting && complete && !cancelled) {
             if (failure == null) {
                 if (value != EMPTY) {
                     subscriber.onNext(value);
@@ -181,6 +182,7 @@ public void cancel() {
         lock.lock();
         try {
             complete = true;
+            cancelled = true;
         } finally {
             lock.unlock();
         }

File: http-netty/src/main/java/io/micronaut/http/netty/body/AvailableNettyByteBody.java
Patch:
@@ -56,7 +56,8 @@ public static CloseableAvailableByteBody empty() {
         return new AvailableNettyByteBody(Unpooled.EMPTY_BUFFER);
     }
 
-    public static ByteBuf toByteBuf(AvailableByteBody body) {
+    @NonNull
+    public static ByteBuf toByteBuf(@NonNull AvailableByteBody body) {
         if (body instanceof AvailableNettyByteBody net) {
             return net.claim();
         } else {

File: http/src/main/java/io/micronaut/http/ByteBodyHttpResponse.java
Patch:
@@ -30,7 +30,7 @@
  * @author Jonas Konrad
  */
 @Experimental
-public sealed interface ByteBodyHttpResponse<B> extends HttpResponse<B>, Closeable permits ByteBodyHttpResponseWrapper {
+public interface ByteBodyHttpResponse<B> extends HttpResponse<B>, Closeable {
     /**
      * The body bytes.
      *

File: http-netty/src/main/java/io/micronaut/http/netty/NettyTlsUtils.java
Patch:
@@ -42,6 +42,8 @@ private static boolean useOpenssl(SslConfiguration sslConfiguration) {
     /**
      * The SSL provider to use.
      *
+     * @param sslConfiguration The ssl configuration
+     *
      * @return The provider
      */
     public static SslProvider sslProvider(SslConfiguration sslConfiguration) {

File: http-tck/src/main/java/io/micronaut/http/tck/EmbeddedHttp2ServerUnderTestProvider.java
Patch:
@@ -21,6 +21,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+/**
+ * Embedded http2Server under test provider.
+ */
 @Experimental
 public class EmbeddedHttp2ServerUnderTestProvider implements ServerUnderTestProvider {
     @Override

File: http/src/main/java/io/micronaut/http/annotation/ServerFilter.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.DefaultScope;
-import io.micronaut.core.annotation.Experimental;
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.filter.FilterPatternStyle;
 import jakarta.inject.Singleton;

File: inject-java-helper2/src/main/java/io/micronaut/inject/test/external/ExternalBean.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.inject.test.external;
 
 /**
- * Test bean
+ * Test bean.
  */
 public class ExternalBean {
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -74,11 +74,11 @@ abstract class AbstractInjectAnnotationProcessor extends AbstractProcessor {
     protected MutableConvertibleValues<Object> visitorAttributes = new MutableConvertibleValuesMap<>();
     protected AnnotationProcessingOutputVisitor classWriterOutputVisitor;
     protected JavaVisitorContext javaVisitorContext;
+    protected Set<String> postponedTypes = new LinkedHashSet<>();
     private boolean incremental = false;
     private final Set<String> supportedAnnotationTypes = new HashSet<>(5);
     private final Map<String, Boolean> isProcessedCache = new HashMap<>(30);
     private Set<String> processedTypes;
-    protected Set<String> postponedTypes = new LinkedHashSet<>();
 
     @Override
     public SourceVersion getSupportedSourceVersion() {

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -47,8 +47,8 @@
 /**
  * Processes the type and its super classes.
  *
- * @param <R>
- * @param <P>
+ * @param <R> The return type of the visitor's method
+ * @param <P> The type of the additional parameter to the visitor's methods.
  * @deprecated No longer used
  */
 @Deprecated(forRemoval = true, since = "4.3.0")

File: inject/src/main/java/io/micronaut/context/AnnotationReflectionUtils.java
Patch:
@@ -63,6 +63,7 @@ private AnnotationReflectionUtils() {
      *
      * @param runtimeGenericType The implementation class of the interface
      * @param rawSuperType       The implementedType type - interface or an abstract class
+     * @param <T> T
      * @return The argument of the interface with types and annotations
      * @since 4.6
      */

File: inject/src/main/java/io/micronaut/context/env/ConfigurationPath.java
Patch:
@@ -190,6 +190,7 @@ default boolean isPrimary() {
     /**
      * remove last entry.
      *
+     * @return the last element from this path
      * @throws java.util.NoSuchElementException if there isn't any remaining elements.
      */
     @NonNull ConfigurationSegment removeLast();

File: jackson-core/src/main/java/io/micronaut/jackson/core/env/JsonPropertySourceLoader.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -87,9 +87,7 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, NettyHtt
         this.nettyHttpResponse = fullHttpResponse;
         // this class doesn't really have lifecycle management (we don't make the user release()
         // it), so we have to copy the data to a non-refcounted buffer.
-        ByteBuf buffer = Unpooled.buffer(fullHttpResponse.content().readableBytes());
-        buffer.writeBytes(fullHttpResponse.content(), 0, fullHttpResponse.content().readableBytes());
-        this.unpooledContent = Unpooled.unreleasableBuffer(buffer);
+        this.unpooledContent = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(fullHttpResponse.content()));
         this.handlerRegistry = handlerRegistry;
         this.nettyCookies = new NettyCookies(fullHttpResponse.headers(), conversionService);
         Class<?> rawBodyType = bodyType != null ? bodyType.getType() : null;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/MultiplexedServerHandler.java
Patch:
@@ -161,7 +161,7 @@ final int onDataRead(ByteBuf data, boolean endOfStream) {
 
                     requestAccepted = true;
                     notifyDataConsumed(fullBody.readableBytes());
-                    requestHandler.accept(ctx, request, PipeliningServerHandler.createImmediateByteBody(ctx.channel().eventLoop(), bodySizeLimits, fullBody), this);
+                    requestHandler.accept(ctx, request, AvailableNettyByteBody.createChecked(ctx.channel().eventLoop(), bodySizeLimits, fullBody), this);
                 } else {
                     if (bufferedContent == null) {
                         bufferedContent = new ArrayList<>();

File: core/src/main/java/io/micronaut/core/io/buffer/ByteArrayBufferFactory.java
Patch:
@@ -24,7 +24,7 @@
  * @since 4.7
  */
 @Internal
-public class ByteArrayBufferFactory implements ByteBufferFactory<Void, byte[]> {
+public final class ByteArrayBufferFactory implements ByteBufferFactory<Void, byte[]> {
     public static final ByteArrayBufferFactory INSTANCE = new ByteArrayBufferFactory();
 
     private ByteArrayBufferFactory() {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -53,13 +53,13 @@
 import io.micronaut.http.netty.NettyHttpResponseBuilder;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.netty.body.AvailableNettyByteBody;
+import io.micronaut.http.netty.body.NettyBodyAdapter;
 import io.micronaut.http.netty.body.NettyJsonHandler;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.stream.JsonSubscriber;
 import io.micronaut.http.netty.stream.StreamedHttpResponse;
 import io.micronaut.http.server.RouteExecutor;
 import io.micronaut.http.server.binding.RequestArgumentSatisfier;
-import io.micronaut.http.server.netty.body.NettyBodyAdapter;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.http.server.netty.handler.OutboundAccess;
 import io.micronaut.http.server.netty.handler.RequestHandler;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/MultiplexedServerHandler.java
Patch:
@@ -23,10 +23,10 @@
 import io.micronaut.http.netty.body.AvailableNettyByteBody;
 import io.micronaut.http.netty.body.BodySizeLimits;
 import io.micronaut.http.netty.body.BufferConsumer;
+import io.micronaut.http.netty.body.NettyBodyAdapter;
 import io.micronaut.http.netty.body.NettyByteBody;
 import io.micronaut.http.netty.body.StreamingNettyByteBody;
 import io.micronaut.http.netty.reactive.HotObservable;
-import io.micronaut.http.server.netty.body.NettyBodyAdapter;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/PipeliningServerHandler.java
Patch:
@@ -24,11 +24,11 @@
 import io.micronaut.http.netty.body.AvailableNettyByteBody;
 import io.micronaut.http.netty.body.BodySizeLimits;
 import io.micronaut.http.netty.body.BufferConsumer;
+import io.micronaut.http.netty.body.NettyBodyAdapter;
 import io.micronaut.http.netty.body.NettyByteBody;
 import io.micronaut.http.netty.body.StreamingNettyByteBody;
 import io.micronaut.http.netty.stream.StreamedHttpResponse;
 import io.micronaut.http.server.netty.HttpCompressionStrategy;
-import io.micronaut.http.server.netty.body.NettyBodyAdapter;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;

File: http-tck/src/main/java/io/micronaut/http/tck/TestScenario.java
Patch:
@@ -146,7 +146,7 @@ public Builder specName(String specName) {
         /**
          *
          * @param request HTTP Request to be sent in the test scenario
-         * @return The Test Scneario Builder
+         * @return The Test Scenario Builder
          */
         public Builder request(HttpRequest<?> request) {
             this.request = server -> request;

File: http/src/main/java/io/micronaut/http/annotation/RequestAttribute.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * <p>An annotation that can be applied to method arguments to indicate that the method argument is bound to an HTTP request attribute
- *   This can also be used in conjuction with &#064;RequestAttributes to list attributes on a client class that will always be applied
+ *   This can also be used in conjunction with &#064;RequestAttributes to list attributes on a client class that will always be applied
  *   <i>Note: Request attributes are intended for internal data sharing only, and are not attached to the outbound request.</i></p>
  *
  * <p>The following example demonstrates usage at the type level to declare default values to pass in the request when using the {@code Client} annotation;</p>

File: http/src/main/java/io/micronaut/http/annotation/RouteCondition.java
Patch:
@@ -43,7 +43,7 @@
 @Experimental
 public @interface RouteCondition {
     /**
-     * An expression that evalutes to {@code true} or {@code false}.
+     * An expression that evaluates to {@code true} or {@code false}.
      * @return The expression
      * @since 4.0.0
      */

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -421,7 +421,7 @@ protected String normalizeNested(String uri, CharSequence nested) {
 
     /**
      * @param uriTemplate     The URI template
-     * @param len             The lenght
+     * @param len             The length
      * @param parserArguments The parsed arguments
      * @return A list of path segments
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MemberElement;
 import io.micronaut.inject.ast.annotation.ElementAnnotationMetadataFactory;
+import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -130,8 +131,8 @@ public ClassElement getDeclaringType() {
         if (resolvedDeclaringClass == null) {
             Element enclosingElement = variableElement.getEnclosingElement();
             if (enclosingElement instanceof TypeElement te) {
-                String typeName = te.getQualifiedName().toString();
-                if (owningType.getName().equals(typeName)) {
+                String typeName = JavaModelUtils.getClassName(te);
+                if (owningType.getName().equals(JavaModelUtils.getClassName(te))) {
                     resolvedDeclaringClass = owningType;
                 } else {
                     TypeMirror returnType = te.asType();

File: retry/src/main/java/io/micronaut/retry/intercept/SimpleRetry.java
Patch:
@@ -46,7 +46,7 @@ class SimpleRetry implements RetryState, MutableRetryState {
     private final Class<? extends Throwable> capturedException;
 
     /**
-     * @param maxAttempts The maximum number of attemps
+     * @param maxAttempts The maximum number of attempts
      * @param multiplier The multiplier to use between delays
      * @param delay The overall delay so far
      * @param maxDelay The maximum overall delay
@@ -70,7 +70,7 @@ class SimpleRetry implements RetryState, MutableRetryState {
     }
 
     /**
-     * @param maxAttempts The maximum number of attemps
+     * @param maxAttempts The maximum number of attempts
      * @param multiplier The multiplier to use between delays
      * @param delay The overall delay so far
      * @param maxDelay The maximum overall delay
@@ -81,7 +81,7 @@ class SimpleRetry implements RetryState, MutableRetryState {
     }
 
     /**
-     * @param maxAttempts The maximum number of attemps
+     * @param maxAttempts The maximum number of attempts
      * @param multiplier The multiplier to use between delays
      * @param delay The overall delay so far
      */

File: context/src/main/java/io/micronaut/runtime/converters/time/TimeConverterRegistrar.java
Patch:
@@ -248,9 +248,9 @@ private <T extends TemporalAccessor> void addTemporalStringConverters(MutableCon
 
     private DateTimeFormatter getFormatter(String pattern, ConversionContext context) {
         var key = pattern + context.getLocale();
-        var cachedFormater = formattersCache.get(key);
-        if (cachedFormater != null) {
-            return cachedFormater;
+        var cachedFormatter = formattersCache.get(key);
+        if (cachedFormatter != null) {
+            return cachedFormatter;
         }
         var formatter = DateTimeFormatter.ofPattern(pattern, context.getLocale());
         formattersCache.put(key, formatter);

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpResponseBuilder.java
Patch:
@@ -120,7 +120,9 @@ public interface NettyHttpResponseBuilder {
      * @param byteBuf The byteBuf
      * @return The full response.
      * @since 4.3.0
+     * @deprecated Unused
      */
+    @Deprecated
     static @NonNull FullHttpResponse toFullHttpResponse(@NonNull io.micronaut.http.HttpResponse<?> response, @NonNull ByteBuf byteBuf) {
         while (response instanceof HttpResponseWrapper<?> wrapper) {
             response = wrapper.getDelegate();

File: http-netty/src/main/java/io/micronaut/http/netty/body/AvailableNettyByteBody.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.core.annotation.Internal;

File: http-netty/src/main/java/io/micronaut/http/netty/body/BodySizeLimits.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.core.annotation.Internal;
 

File: http-netty/src/main/java/io/micronaut/http/netty/body/BufferConsumer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.body.ByteBody;

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyByteBody.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.core.annotation.Internal;
@@ -71,6 +71,6 @@ public static Flux<ByteBuf> toByteBufs(ByteBody body) {
     abstract Flux<ByteBuf> toByteBufPublisher();
 
     static void failClaim() {
-        throw new IllegalStateException("Request body has already been claimed: Two conflicting sites are trying to access the request body. If this is intentional, the first user must ByteBody#split the body. To find out where the body was claimed, turn on TRACE logging for io.micronaut.http.server.netty.body.NettyByteBody.");
+        throw new IllegalStateException("Request body has already been claimed: Two conflicting sites are trying to access the request body. If this is intentional, the first user must ByteBody#split the body. To find out where the body was claimed, turn on TRACE logging for io.micronaut.http.netty.body.NettyByteBody.");
     }
 }

File: http-netty/src/main/java/io/micronaut/http/netty/body/StreamingNettyByteBody.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;

File: http-netty/src/main/java/io/micronaut/http/netty/body/UpstreamBalancer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.body;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.body.ByteBody;
@@ -96,7 +96,7 @@ static UpstreamPair first(BufferConsumer.Upstream upstream) {
     }
 
     /**
-     * Create a pair of {@link io.micronaut.http.server.netty.body.BufferConsumer.Upstream}
+     * Create a pair of {@link BufferConsumer.Upstream}
      * instances that delegates to the given {@code upstream} according to the semantics of the
      * given {@code mode}.
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpPipelineBuilder.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.util.SupplierUtil;
 import io.micronaut.http.HttpVersion;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
-import io.micronaut.http.server.netty.body.BodySizeLimits;
+import io.micronaut.http.netty.body.BodySizeLimits;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.http.server.netty.handler.Http2ServerHandler;
 import io.micronaut.http.server.netty.handler.PipeliningServerHandler;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -59,8 +59,8 @@
 import io.micronaut.http.netty.stream.DelegateStreamedHttpRequest;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.netty.body.AvailableNettyByteBody;
-import io.micronaut.http.server.netty.body.NettyByteBody;
+import io.micronaut.http.netty.body.AvailableNettyByteBody;
+import io.micronaut.http.netty.body.NettyByteBody;
 import io.micronaut.http.server.netty.handler.Http2ServerHandler;
 import io.micronaut.http.server.netty.multipart.NettyCompletedFileUpload;
 import io.micronaut.web.router.DefaultUriRouteMatch;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestLifecycle.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.http.body.ByteBody;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.RequestLifecycle;
-import io.micronaut.http.server.netty.body.NettyByteBody;
+import io.micronaut.http.netty.body.NettyByteBody;
 import io.micronaut.http.server.netty.handler.OutboundAccess;
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBodyAnnotationBinder.java
Patch:
@@ -43,7 +43,7 @@
 import io.micronaut.http.server.netty.FormRouteCompleter;
 import io.micronaut.http.server.netty.MicronautHttpData;
 import io.micronaut.http.server.netty.NettyHttpRequest;
-import io.micronaut.http.server.netty.body.AvailableNettyByteBody;
+import io.micronaut.http.netty.body.AvailableNettyByteBody;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.http.server.netty.converters.NettyConverters;
 import io.micronaut.web.router.RouteInfo;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/Http2ServerHandler.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.body.ByteBody;
 import io.micronaut.http.server.netty.HttpCompressionStrategy;
-import io.micronaut.http.server.netty.body.BodySizeLimits;
+import io.micronaut.http.netty.body.BodySizeLimits;
 import io.micronaut.http.server.netty.handler.accesslog.Http2AccessLogConnectionEncoder;
 import io.micronaut.http.server.netty.handler.accesslog.Http2AccessLogFrameListener;
 import io.micronaut.http.server.netty.handler.accesslog.Http2AccessLogManager;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/MultipartBodyArgumentBinder.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.http.server.netty.FormDataHttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentProcessorAsReactiveProcessor;
 import io.micronaut.http.server.netty.NettyHttpRequest;
-import io.micronaut.http.server.netty.body.NettyByteBody;
+import io.micronaut.http.netty.body.NettyByteBody;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.netty.handler.codec.http.DefaultHttpContent;
 import io.netty.handler.codec.http.multipart.Attribute;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/binding/HttpRequestTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.netty.NettyHttpRequest;
-import io.micronaut.http.server.netty.body.AvailableNettyByteBody;
+import io.micronaut.http.netty.body.AvailableNettyByteBody;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.HttpVersion;

File: http/src/main/java/io/micronaut/http/HttpResponseWrapper.java
Patch:
@@ -42,7 +42,9 @@ public String reason() {
 
     @Override
     public HttpResponse<B> getDelegate() {
-        return (HttpResponse<B>) super.getDelegate();
+        HttpMessage<B> delegate = super.getDelegate();
+        // this weird cast structure avoids type pollution
+        return delegate instanceof MutableHttpResponse<B> mhr ? mhr : (HttpResponse<B>) delegate;
     }
 
 }

File: http-server-netty/src/test/groovy/io/micronaut/docs/writable/TemplateController.java
Patch:
@@ -19,6 +19,7 @@
 
 import groovy.text.SimpleTemplateEngine;
 import groovy.text.Template;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.MediaType;
@@ -28,6 +29,7 @@
 //end::imports[]
 
 //tag::clazz[]
+@Requires(property = "spec.name", value = "WritableSpec")
 @Controller("/template")
 public class TemplateController {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/TestNettySecondaryServer.java
Patch:
@@ -3,21 +3,20 @@
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 import jakarta.inject.Inject;
 import jakarta.inject.Named;
 
 @Factory
-@Requires(property = "NettyMultiServerSpec", value = StringUtils.TRUE)
+@Requires(property = "spec.name", value = "NettyMultiServerSpec")
 public class TestNettySecondaryServer {
     @Inject ApplicationConfiguration applicationConfiguration;
     @Inject NettyEmbeddedServerFactory embeddedServerFactory;
 
     @Named("secondary")
     @Bean(preDestroy = "stop")
-    @Requires(property = "NettyMultiServerSpec", value = StringUtils.TRUE)
+    @Requires(property = "spec.name", value = "NettyMultiServerSpec")
     NettyEmbeddedServer secondaryServer() {
         NettyEmbeddedServer embeddedServer = embeddedServerFactory
                 .build(new NettyHttpServerConfiguration(applicationConfiguration));

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.concurrent.TimeoutException;
 
 @MicronautTest
+@Property(name = "spec.name", value = "Http2PostTest")
 @Property(name = "micronaut.server.http-version", value = "2.0")
 @Property(name = "micronaut.server.netty.log-level", value = "TRACE")
 @Property(name = "micronaut.http.client.log-level", value = "TRACE")
@@ -131,6 +132,7 @@ public Map<String, String> getProperties() {
         );
     }
 
+    @Requires(property = "spec.name", value = "Http2PostTest")
     @Controller("/vertx/demo")
     public static class DemoController {
         @Get("/testGet")

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/ContextPathFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
@@ -26,6 +27,7 @@
 /**
  * Tests filters with the context path already prepended still work
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Filter("/context/path/**")
 public class ContextPathFilter implements HttpServerFilter {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/FirstFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Filter("/secure**")
 public class FirstFilter implements HttpFilter {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/SecondFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Filter("/secure**")
 public class SecondFilter implements HttpFilter {
     @Override

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/SecureController.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
@@ -23,6 +24,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Controller("/secure")
 public class SecureController {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestReactiveFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.annotation.Filter;
@@ -27,6 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Filter("/secure**")
 public class TestReactiveFilter implements HttpServerFilter{
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestSecurityFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -30,6 +31,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "tests", value = "io.micronaut.http.server.netty.interceptor")
 @Filter("/secure**")
 public class TestSecurityFilter implements HttpServerFilter {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ParameterController.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.java;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.HttpParameters;
 import io.micronaut.http.MediaType;
@@ -31,6 +32,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "spec.name", value = "ParameterBindingSpec")
 @Controller("/java/parameter")
 public class ParameterController {
     @Get

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ResponseController.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.java;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpMessage;
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpResponse;
@@ -29,6 +30,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Requires(property = "spec.name", value = "ParameterBindingSpec")
 @Controller("/java/response")
 public class ResponseController {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/nativetransport/NativeTransportController.java
Patch:
@@ -15,9 +15,11 @@
  */
 package io.micronaut.http.server.netty.nativetransport;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
 
+@Requires(property = "spec", value = "TransportSpec")
 @Controller("/native-transport")
 public class NativeTransportController {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/BinaryChatClientWebSocket.java
Patch:
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 package io.micronaut.http.server.netty.websocket;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.annotation.SingleResult;
 import io.micronaut.websocket.WebSocketPongMessage;
 import io.micronaut.websocket.WebSocketSession;
@@ -32,6 +33,7 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Future;
 
+@Requires(property = "spec.name", value = "BinaryWebSocketSpec")
 @ClientWebSocket("/binary/chat/{topic}/{username}")
 public abstract class BinaryChatClientWebSocket implements AutoCloseable{
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/BinaryChatServerWebSocket.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.websocket;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.websocket.WebSocketSession;
 import io.micronaut.websocket.annotation.OnClose;
@@ -24,6 +25,7 @@
 
 import java.util.Set;
 
+@Requires(property = "spec.name", value = "BinaryWebSocketSpec")
 @ServerWebSocket("/binary/chat/{topic}/{username}")
 public class BinaryChatServerWebSocket {
     @OnOpen

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/ChatClientWebSocket.java
Patch:
@@ -17,6 +17,7 @@
 
 // tag::imports[]
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.annotation.SingleResult;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.websocket.WebSocketSession;
@@ -30,6 +31,7 @@
 import java.util.concurrent.Future;
 
 // tag::class[]
+@Requires(property = "spec.name", value = "SimpleTextWebSocketSpec")
 @ClientWebSocket("/chat/{topic}/{username}") // <1>
 public abstract class ChatClientWebSocket implements AutoCloseable { // <2>
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/ChatServerWebSocket.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.server.netty.websocket;
 
 //tag::clazz[]
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.websocket.WebSocketBroadcaster;
 import io.micronaut.websocket.WebSocketSession;
@@ -26,6 +27,7 @@
 
 import java.util.function.Predicate;
 
+@Requires(property = "spec.name", value = "SimpleTextWebSocketSpec")
 @ServerWebSocket("/chat/{topic}/{username}") // <1>
 public class ChatServerWebSocket {
     private WebSocketBroadcaster broadcaster;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/ColludingController.java
Patch:
@@ -15,12 +15,14 @@
  */
 package io.micronaut.http.server.netty.websocket;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.PathVariable;
 import io.micronaut.http.annotation.Produces;
 
+@Requires(property = "spec.name", value = "BinaryWebSocketSpec")
 @Controller("/binary/chat")
 public class ColludingController {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/QueryParamServerWebSocket.java
Patch:
@@ -1,5 +1,6 @@
 package io.micronaut.http.server.netty.websocket;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.annotation.QueryValue;
 import io.micronaut.websocket.WebSocketBroadcaster;
 import io.micronaut.websocket.WebSocketSession;
@@ -8,6 +9,7 @@
 import io.micronaut.websocket.annotation.OnOpen;
 import io.micronaut.websocket.annotation.ServerWebSocket;
 
+@Requires(property = "spec.name", value = "SimpleTextWebSocketSpec")
 @ServerWebSocket("/charity")
 public class QueryParamServerWebSocket {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/ReactivePojoChatServerWebSocket.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.websocket;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.websocket.WebSocketBroadcaster;
 import io.micronaut.websocket.WebSocketSession;
@@ -26,6 +27,7 @@
 
 import java.util.function.Predicate;
 
+@Requires(property = "spec.name", value = "PojoWebSocketSpec")
 @ServerWebSocket("/pojo/chat/{topic}/{username}")
 public class ReactivePojoChatServerWebSocket {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/errors/ErrorsClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.websocket.errors;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.websocket.CloseReason;
 import io.micronaut.websocket.WebSocketSession;
 import io.micronaut.websocket.annotation.ClientWebSocket;
@@ -23,6 +24,7 @@
 import io.micronaut.websocket.annotation.OnMessage;
 import io.micronaut.websocket.annotation.OnOpen;
 
+@Requires(property = "spec.name", value = "WebSocketErrorsSpec")
 @ClientWebSocket
 public abstract class ErrorsClient implements AutoCloseable {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/errors/MessageErrorSocket.java
Patch:
@@ -15,10 +15,12 @@
  */
 package io.micronaut.http.server.netty.websocket.errors;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.websocket.annotation.OnClose;
 import io.micronaut.websocket.annotation.OnMessage;
 import io.micronaut.websocket.annotation.ServerWebSocket;
 
+@Requires(property = "spec.name", value = "WebSocketErrorsSpec")
 @ServerWebSocket("/ws/errors/message")
 public class MessageErrorSocket {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/errors/MessageErrorSocketWithOnError.java
Patch:
@@ -15,12 +15,14 @@
  */
 package io.micronaut.http.server.netty.websocket.errors;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.websocket.CloseReason;
 import io.micronaut.websocket.WebSocketSession;
 import io.micronaut.websocket.annotation.OnError;
 import io.micronaut.websocket.annotation.OnMessage;
 import io.micronaut.websocket.annotation.ServerWebSocket;
 
+@Requires(property = "spec.name", value = "WebSocketErrorsSpec")
 @ServerWebSocket("/ws/errors/message-onerror")
 public class MessageErrorSocketWithOnError {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/errors/TimeoutErrorSocket.java
Patch:
@@ -15,16 +15,17 @@
  */
 package io.micronaut.http.server.netty.websocket.errors;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.websocket.annotation.OnClose;
 import io.micronaut.websocket.annotation.OnMessage;
 import io.micronaut.websocket.annotation.ServerWebSocket;
 
+@Requires(property = "spec.name", value = "WebSocketErrorsSpec")
 @ServerWebSocket("/ws/timeout/message")
 public class TimeoutErrorSocket {
 
     boolean closed = false;
 
-
     @OnMessage
     public void onMessage(String blah) {
         System.out.println("blah = " + blah);

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyHttpClientFactory.java
Patch:
@@ -30,9 +30,9 @@
 import io.micronaut.websocket.WebSocketClient;
 import io.micronaut.websocket.WebSocketClientFactory;
 
+import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.net.URI;
 
 /**
  * A factory to create Netty HTTP clients.
@@ -125,10 +125,10 @@ private DefaultHttpClient createNettyClient(URL url, HttpClientConfiguration con
     }
 
     private DefaultHttpClient createNettyClient(URI uri) {
-        return new DefaultHttpClient(uri);
+        return DefaultHttpClient.builder().uri(uri).build();
     }
 
     private DefaultHttpClient createNettyClient(URI uri, HttpClientConfiguration configuration) {
-        return new DefaultHttpClient(uri, configuration);
+        return DefaultHttpClient.builder().uri(uri).configuration(configuration).build();
     }
 }

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -919,6 +919,7 @@ private <T> Publisher<T> connectWebSocket(URI uri, MutableHttpRequest<?> request
                 webSocketURL, protocolVersion, subprotocol, true, customHeaders, maxFramePayloadLength),
             requestBinderRegistry,
             mediaTypeCodecRegistry,
+            handlerRegistry,
             conversionService);
 
         return connectionManager.connectForWebsocket(requestKey, handler)

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultNettyHttpClientRegistry.java
Patch:
@@ -56,7 +56,6 @@
 import io.micronaut.http.codec.MediaTypeCodec;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
 import io.micronaut.http.filter.HttpClientFilterResolver;
-import io.micronaut.http.netty.body.CustomizableNettyJsonHandler;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.channel.ChannelPipelineListener;
 import io.micronaut.http.netty.channel.DefaultEventLoopGroupConfiguration;
@@ -69,6 +68,7 @@
 import io.micronaut.inject.qualifiers.Qualifiers;
 import io.micronaut.json.JsonFeatures;
 import io.micronaut.json.JsonMapper;
+import io.micronaut.json.body.CustomizableJsonHandler;
 import io.micronaut.json.codec.MapperMediaTypeCodec;
 import io.micronaut.runtime.context.scope.refresh.RefreshEvent;
 import io.micronaut.runtime.context.scope.refresh.RefreshEventListener;
@@ -408,7 +408,7 @@ private DefaultHttpClient getClient(ClientKey key, BeanContext beanContext, Anno
 
                     @SuppressWarnings("unchecked")
                     private <T> T customize(T handler) {
-                        if (handler instanceof CustomizableNettyJsonHandler cnjh) {
+                        if (handler instanceof CustomizableJsonHandler cnjh) {
                             return (T) cnjh.customize(jsonFeatures);
                         }
                         return handler;

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonHandler.java
Patch:
@@ -36,6 +36,7 @@
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.micronaut.json.JsonFeatures;
 import io.micronaut.json.JsonMapper;
+import io.micronaut.json.body.CustomizableJsonHandler;
 import io.micronaut.json.body.JsonMessageHandler;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
@@ -65,7 +66,7 @@
 @JsonMessageHandler.ConsumesJson
 @BootstrapContextCompatible
 @Requires(beans = JsonMapper.class)
-public final class NettyJsonHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableNettyJsonHandler, NettyBodyWriter<T> {
+public final class NettyJsonHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableJsonHandler, NettyBodyWriter<T> {
     private final JsonMessageHandler<T> jsonMessageHandler;
 
     public NettyJsonHandler(JsonMapper jsonMapper) {
@@ -77,7 +78,7 @@ private NettyJsonHandler(JsonMessageHandler<T> jsonMessageHandler) {
     }
 
     @Override
-    public CustomizableNettyJsonHandler customize(JsonFeatures jsonFeatures) {
+    public CustomizableJsonHandler customize(JsonFeatures jsonFeatures) {
         return new NettyJsonHandler<>(jsonMessageHandler.getJsonMapper().cloneWithFeatures(jsonFeatures));
     }
 

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonStreamHandler.java
Patch:
@@ -29,6 +29,7 @@
 import io.micronaut.http.codec.CodecException;
 import io.micronaut.json.JsonFeatures;
 import io.micronaut.json.JsonMapper;
+import io.micronaut.json.body.CustomizableJsonHandler;
 import io.micronaut.json.body.JsonMessageHandler;
 import io.netty.buffer.ByteBuf;
 import jakarta.inject.Singleton;
@@ -50,7 +51,7 @@
 @Singleton
 @Produces(MediaType.APPLICATION_JSON_STREAM)
 @Consumes(MediaType.APPLICATION_JSON_STREAM)
-public final class NettyJsonStreamHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableNettyJsonHandler {
+public final class NettyJsonStreamHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableJsonHandler {
     private final JsonMessageHandler<T> jsonMessageHandler;
 
     public NettyJsonStreamHandler(JsonMapper jsonMapper) {
@@ -62,7 +63,7 @@ private NettyJsonStreamHandler(JsonMessageHandler<T> jsonMessageHandler) {
     }
 
     @Override
-    public CustomizableNettyJsonHandler customize(JsonFeatures jsonFeatures) {
+    public CustomizableJsonHandler customize(JsonFeatures jsonFeatures) {
         return new NettyJsonStreamHandler<>(jsonMessageHandler.getJsonMapper().cloneWithFeatures(jsonFeatures));
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketHandler.java
Patch:
@@ -123,9 +123,9 @@ public class NettyServerWebSocketHandler extends AbstractNettyWebSocketHandler {
         ExecutorSelector executorSelector,
         @Nullable CoroutineHelper coroutineHelper) {
         super(
-                ctx,
                 nettyEmbeddedServices.getRequestArgumentSatisfier().getBinderRegistry(),
                 nettyEmbeddedServices.getMediaTypeCodecRegistry(),
+                nettyEmbeddedServices.getMessageBodyHandlerRegistry(),
                 webSocketBean,
                 request,
                 routeMatch.getVariableValues(),
@@ -243,6 +243,7 @@ protected NettyWebSocketSession createWebSocketSession(ChannelHandlerContext ctx
                 channel,
                 originatingRequest,
                 mediaTypeCodecRegistry,
+                messageBodyHandlerRegistry,
                 webSocketVersion.toHttpHeaderValue(),
                 ctx.pipeline().get(SslHandler.class) != null
         ) {

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -50,11 +50,13 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Singleton
 @Internal
 @BootstrapContextCompatible
 @Requires(bean = ByteBufferFactory.class)
+@Deprecated(forRemoval = true, since = "4.7")
 public class TextStreamCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "text-stream";

File: http/src/main/java/io/micronaut/http/codec/DefaultMediaTypeCodecRegistry.java
Patch:
@@ -30,7 +30,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with {@link io.micronaut.http.body.MessageBodyHandlerRegistry}.
  */
+@Deprecated(forRemoval = true, since = "4.7")
 public class DefaultMediaTypeCodecRegistry implements MediaTypeCodecRegistry {
 
     Map<String, Optional<MediaTypeCodec>> decodersByExtension = new LinkedHashMap<>(3);

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodec.java
Patch:
@@ -33,7 +33,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with {@link io.micronaut.http.body.MessageBodyHandler}
  */
+@Deprecated(since = "4.7")
 @Indexed(MediaTypeCodec.class)
 public interface MediaTypeCodec {
 

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodecRegistry.java
Patch:
@@ -26,7 +26,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with {@link io.micronaut.http.body.MessageBodyHandlerRegistry}.
  */
+@Deprecated(since = "4.7")
 public interface MediaTypeCodecRegistry {
 
     /**

File: http/src/main/java/io/micronaut/runtime/http/codec/TextPlainCodec.java
Patch:
@@ -50,9 +50,11 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Singleton
 @BootstrapContextCompatible
+@Deprecated(forRemoval = true, since = "4.7")
 public class TextPlainCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "text";

File: jackson-databind/src/main/java/io/micronaut/jackson/codec/JacksonMediaTypeCodec.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0.0
+ * @deprecated Replaced with message body writers / readers API
  */
+@Deprecated(forRemoval = true, since = "4.7")
 public abstract class JacksonMediaTypeCodec extends MapperMediaTypeCodec {
 
     public static final String REGULAR_JSON_MEDIA_TYPE_CODEC_NAME = "json";

File: jackson-databind/src/main/java/io/micronaut/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -36,12 +36,14 @@
  *
  * @author Graeme Rocher
  * @since 1.0.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Named("json")
 @Singleton
 @Secondary
 @BootstrapContextCompatible
 @Bean(typed = {JsonMediaTypeCodec.class, JacksonMediaTypeCodec.class}) // do not expose MapperMediaTypeCodec
+@Deprecated(forRemoval = true, since = "4.7")
 public class JsonMediaTypeCodec extends JacksonMediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json";

File: jackson-databind/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -41,11 +41,13 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Secondary
 @Singleton
 @BootstrapContextCompatible
 @Bean(typed = {JsonStreamMediaTypeCodec.class, JacksonMediaTypeCodec.class}) // do not expose MapperMediaTypeCodec
+@Deprecated(forRemoval = true, since = "4.7")
 public class JsonStreamMediaTypeCodec extends JsonMediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json-stream";

File: json-core/src/main/java/io/micronaut/json/codec/JsonMediaTypeCodec.java
Patch:
@@ -35,11 +35,13 @@
  *
  * @author Graeme Rocher
  * @since 1.0.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Experimental
 @Named(MapperMediaTypeCodec.REGULAR_JSON_MEDIA_TYPE_CODEC_NAME)
 @Singleton
 @BootstrapContextCompatible
+@Deprecated(forRemoval = true, since = "4.7")
 public class JsonMediaTypeCodec extends MapperMediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json";

File: json-core/src/main/java/io/micronaut/json/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -37,10 +37,12 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced with message body writers / readers API
  */
 @Experimental
 @Singleton
 @BootstrapContextCompatible
+@Deprecated(forRemoval = true, since = "4.7")
 public class JsonStreamMediaTypeCodec extends JsonMediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json-stream";

File: json-core/src/main/java/io/micronaut/json/codec/MapperMediaTypeCodec.java
Patch:
@@ -47,7 +47,9 @@
  * @author Graeme Rocher
  * @author svishnyakov
  * @since 1.3.0
+ * @deprecated Replaced with message body writers / readers API
  */
+@Deprecated(since = "4.7")
 @Experimental
 public abstract class MapperMediaTypeCodec implements MediaTypeCodec {
     public static final String REGULAR_JSON_MEDIA_TYPE_CODEC_NAME = "json";

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/body/InputStreamBodyWriter.java
Patch:
@@ -31,6 +31,7 @@
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.scheduling.TaskExecutors;
 import io.netty.handler.codec.http.DefaultHttpResponse;
+import io.netty.handler.codec.http.HttpHeaderNames;
 import jakarta.inject.Named;
 import jakarta.inject.Singleton;
 
@@ -58,6 +59,7 @@ public final class InputStreamBodyWriter extends AbstractFileBodyWriter implemen
 
     @Override
     public void writeTo(HttpRequest<?> request, MutableHttpResponse<InputStream> outgoingResponse, Argument<InputStream> type, MediaType mediaType, InputStream object, NettyWriteContext nettyContext) throws CodecException {
+        outgoingResponse.getHeaders().setIfMissing(HttpHeaderNames.CONTENT_TYPE, mediaType);
         if (outgoingResponse instanceof NettyMutableHttpResponse<?> nettyResponse) {
             final DefaultHttpResponse finalResponse = new DefaultHttpResponse(
                 nettyResponse.getNettyHttpVersion(),

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/PipeliningServerHandler.java
Patch:
@@ -1108,8 +1108,9 @@ private void add0(ByteBuf buf) {
             }
 
             if (!removed) {
+                int n = buf.readableBytes();
                 writeCompressing(new DefaultHttpContent(buf), true, false);
-                incompleteWrittenBytes += buf.readableBytes();
+                incompleteWrittenBytes += n;
                 if (ctx.channel().isWritable()) {
                     writeSome();
                 }

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonHandler.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Order;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
 import io.micronaut.core.type.Argument;
@@ -56,6 +57,7 @@
  *
  * @param <T> The type
  */
+@Order(JsonMessageHandler.ORDER)
 @Singleton
 @Internal
 @Replaces(JsonMessageHandler.class)

File: http/src/main/java/io/micronaut/http/body/TextPlainObjectBodyReader.java
Patch:
@@ -62,7 +62,7 @@ public Argument<T> getType() {
 
     @Override
     public boolean isReadable(Argument<T> type, MediaType mediaType) {
-        return mediaType == MediaType.TEXT_PLAIN_TYPE;
+        return mediaType != null && mediaType.matches(MediaType.TEXT_PLAIN_TYPE);
     }
 
     @Override

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -3674,8 +3674,7 @@ private void visitBuildMethodDefinition(MethodElement constructor, boolean requi
                 final int parametersIndex = createConstructorParameterArray(parameters, buildMethodVisitor);
                 invokeConstructorChain(buildMethodVisitor, constructorIndex, parametersIndex, parameters);
             } else {
-                boolean isKotlin = constructor.getClass().getSimpleName().startsWith("Kotlin");
-                if (isKotlin) {
+                if (WriterUtils.hasKotlinDefaultsParameters(parameters)) {
                     Map<Integer, Integer> checksLocals = new HashMap<>();
                     Map<Integer, Integer> valuesLocals = new HashMap<>();
                     WriterUtils.invokeBeanConstructor(buildMethodVisitor, constructor, requiresReflection, true, (index, parameter) -> {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -345,9 +345,7 @@ private void encodeHttpResponse(
             }
             if (messageBodyWriter == null || !responseBodyType.isInstance(body) || !messageBodyWriter.isWriteable(responseBodyType, responseMediaType)) {
                 responseBodyType = Argument.ofInstance(body);
-                messageBodyWriter = this.messageBodyHandlerRegistry
-                    .findWriter(responseBodyType, List.of(responseMediaType))
-                    .orElse(null);
+                messageBodyWriter = this.messageBodyHandlerRegistry.getWriter(responseBodyType, List.of(responseMediaType));
             }
             NettyBodyWriter<Object> closure = wrap(messageBodyWriter);
             closeConnectionIfError(response, nettyRequest, outboundAccess);

File: core-processor/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -716,7 +716,7 @@ private void buildMethodDelegate(MethodElement methodElement, MethodElement over
                 getMethodDescriptor(overriddenBy.getReturnType().getType(), Arrays.asList(overriddenBy.getSuspendParameters())),
                 this.isInterface && overriddenBy.isDefault());
 
-        if (!isVoidReturn) {
+        if (!isVoidReturn && !overriddenBy.isSuspend()) {
             ClassElement returnType = overriddenBy.getReturnType();
             pushCastToType(overriddenMethodGenerator, returnType);
         }

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -741,8 +741,7 @@ private CompletionStage<MutableHttpResponse<?>> fromCompletionStage(@NonNull Htt
             return CompletableFuture.completedStage(mutableResponse);
         });
     }
-
-
+    
     private Mono<MutableHttpResponse<?>> processPublisherBody(PropagatedContext propagatedContext,
                                                               HttpRequest<?> request,
                                                               MutableHttpResponse<?> response,

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ErrorExceptionHandler.java
Patch:
@@ -34,7 +34,7 @@
 public abstract class ErrorExceptionHandler<T extends Throwable> implements ExceptionHandler<T, HttpResponse<?>> {
     private static final Logger LOG = LoggerFactory.getLogger(ErrorExceptionHandler.class);
 
-    private final ErrorResponseProcessor<?> responseProcessor;
+    protected final ErrorResponseProcessor<?> responseProcessor;
 
     /**
      * Constructor.

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ErrorResponseProcessorExceptionHandler.java
Patch:
@@ -31,7 +31,7 @@
  */
 public abstract class ErrorResponseProcessorExceptionHandler<T extends Throwable> implements ExceptionHandler<T, HttpResponse<?>> {
 
-    private final ErrorResponseProcessor<?> responseProcessor;
+    protected final ErrorResponseProcessor<?> responseProcessor;
 
     /**
      * Constructor.

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -109,9 +109,9 @@ protected DefaultHttpClientBinderRegistry(ConversionService conversionService,
         byAnnotation.put(Header.class, (context, uriContext, value, request) -> {
             AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();
             String headerName = annotationMetadata
-                    .stringValue(Header.class)
-                    .filter(StringUtils::isNotEmpty)
-                    .orElse(NameUtils.hyphenate(context.getArgument().getName()));
+                .stringValue(Header.class)
+                .filter(StringUtils::isNotEmpty)
+                .orElseGet(() -> annotationMetadata.stringValue(Header.class, "name").orElse(NameUtils.hyphenate(context.getArgument().getName())));
 
             conversionService.convert(value, String.class)
                     .ifPresent(header -> request.getHeaders().set(headerName, header));

File: http/src/main/java/io/micronaut/http/bind/binders/HeaderAnnotationBinder.java
Patch:
@@ -47,7 +47,8 @@ public HeaderAnnotationBinder(ConversionService conversionService) {
     public BindingResult<T> bind(ArgumentConversionContext<T> argument, HttpRequest<?> source) {
         ConvertibleMultiValues<String> parameters = source.getHeaders();
         AnnotationMetadata annotationMetadata = argument.getAnnotationMetadata();
-        String parameterName = annotationMetadata.stringValue(Header.class).orElse(argument.getArgument().getName());
+        String parameterName = annotationMetadata.stringValue(Header.class)
+            .orElseGet(() -> annotationMetadata.stringValue(Header.class, "name").orElse(argument.getArgument().getName()));
         return doBind(argument, parameters, parameterName);
     }
 

File: retry/src/main/java/io/micronaut/retry/annotation/Retryable.java
Patch:
@@ -46,12 +46,12 @@
     /**
      * @return The exception types to include (defaults to all)
      */
+    @AliasFor(member = "includes")
     Class<? extends Throwable>[] value() default {};
 
     /**
      * @return The exception types to include (defaults to all)
      */
-    @AliasFor(member = "value")
     Class<? extends Throwable>[] includes() default {};
 
     /**

File: core/src/main/java/io/micronaut/core/io/service/ServiceLoaderFeature.java
Patch:
@@ -179,7 +179,7 @@ protected void registerRuntimeReflection(Field... fields) {
     }
 
     /**
-     * Initialize a class at build time
+     * Initialize a class at build time.
      * @param buildInitClass The class
      */
     protected void initializeAtBuildTime(@Nullable Class<?> buildInitClass) {

File: http-client-jdk/src/main/java/io/micronaut/http/client/jdk/HttpRequestFactory.java
Patch:
@@ -59,8 +59,6 @@ public static <I> HttpRequest.Builder builder(
         configuration.getReadTimeout().ifPresent(builder::timeout);
         if (request.getMethod() == HttpMethod.GET) {
             builder.GET();
-        } else if (request.getMethod() == HttpMethod.DELETE) {
-            builder.DELETE();
         } else {
             HttpRequest.BodyPublisher bodyPublisher = publisherForRequest(request, bodyType, mediaTypeCodecRegistry);
             builder.method(request.getMethod().toString(), bodyPublisher);

File: http/src/main/java/io/micronaut/http/body/CharSequenceBodyWriter.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.codec.CodecException;
 import io.micronaut.runtime.ApplicationConfiguration;
+import jakarta.inject.Inject;
 import jakarta.inject.Singleton;
 
 import java.io.IOException;
@@ -40,6 +41,7 @@ public final class CharSequenceBodyWriter implements TypedMessageBodyWriter<Char
 
     private final Charset defaultCharset;
 
+    @Inject
     CharSequenceBodyWriter(ApplicationConfiguration applicationConfiguration) {
         this(applicationConfiguration.getDefaultCharset());
     }

File: http/src/main/java/io/micronaut/http/body/TextPlainObjectBodyWriter.java
Patch:
@@ -32,8 +32,8 @@
 /**
  * The body writer that will call {@link Object#toString()} and write it as a string for content type {@value MediaType#TEXT_PLAIN}.
  *
- * @since 4.6
  * @author Denis Stepanov
+ * @since 4.6
  */
 @Produces(MediaType.TEXT_PLAIN)
 @Consumes(MediaType.TEXT_PLAIN)

File: context/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Primary;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.naming.NameUtils;
 
 import java.nio.charset.Charset;
@@ -59,7 +60,7 @@ public class ApplicationConfiguration {
     /**
      * @return The default charset to use.
      */
-    @SuppressWarnings("unchecked")
+    @NonNull
     public Charset getDefaultCharset() {
         return defaultCharset;
     }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -81,7 +81,6 @@
 import java.lang.annotation.Annotation;
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -500,7 +500,7 @@ private SslContext buildWebsocketSslContext(DefaultHttpClient.RequestKey request
                         }
                     }
                 }
-            } else if (configuration.getProxyAddress().isEmpty()){
+            } else if (configuration.getProxyAddress().isEmpty()) {
                 throw decorate(new HttpClientException("Cannot send WSS request. SSL is disabled"));
             }
         }

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonStreamHandler.java
Patch:
@@ -82,7 +82,7 @@ public T read(Argument<T> type, MediaType mediaType, Headers httpHeaders, ByteBu
 
     @Override
     public T read(Argument<T> type, MediaType mediaType, Headers httpHeaders, InputStream inputStream) throws CodecException {
-        throw new UnsupportedOperationException("Reading from InputStram is not supported for json-stream");
+        throw new UnsupportedOperationException("Reading from InputStream is not supported for json-stream");
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestLifecycle.java
Patch:
@@ -52,7 +52,6 @@ final class NettyRequestLifecycle extends RequestLifecycle {
 
     private final RoutingInBoundHandler rib;
     private final OutboundAccess outboundAccess;
-    private final boolean validateUrl;
 
     /**
      * Should only be used where netty-specific stuff is needed, such as reading the body or
@@ -63,7 +62,6 @@ final class NettyRequestLifecycle extends RequestLifecycle {
     NettyRequestLifecycle(RoutingInBoundHandler rib, OutboundAccess outboundAccess) {
         super(rib.routeExecutor);
         this.rib = rib;
-        this.validateUrl = rib.serverConfiguration.isValidateUrl();
         this.outboundAccess = outboundAccess;
     }
 

File: http/src/main/java/io/micronaut/http/body/ConversionTextPlainHandler.java
Patch:
@@ -87,11 +87,11 @@ private T convert(Argument<T> type, String text) {
 
     @Override
     public void writeTo(Argument<T> type, MediaType mediaType, T object, MutableHeaders outgoingHeaders, OutputStream outputStream) throws CodecException {
-        if (!outgoingHeaders.contains(HttpHeaders.CONTENT_TYPE)) {
-            outgoingHeaders.set(HttpHeaders.CONTENT_TYPE, mediaType);
+        if (mediaType != null) {
+            outgoingHeaders.setIfMissing(HttpHeaders.CONTENT_TYPE, mediaType);
         }
         try {
-            outputStream.write(object.toString().getBytes(MessageBodyWriter.getCharset(outgoingHeaders)));
+            outputStream.write(object.toString().getBytes(MessageBodyWriter.getCharset(mediaType, outgoingHeaders)));
         } catch (IOException e) {
             throw new CodecException("Error writing body text: " + e.getMessage(), e);
         }

File: http-client-tck/src/main/java/io/micronaut/http/client/tck/tests/ContentLengthHeaderTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.sun.net.httpserver.HttpHandler;
 import com.sun.net.httpserver.HttpServer;
 import io.micronaut.context.ApplicationContext;
-import io.micronaut.core.io.socket.SocketUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpRequest;
 import io.micronaut.http.client.HttpClient;
@@ -48,7 +47,7 @@ class ContentLengthHeaderTest {
 
     @BeforeEach
     void setUp() throws IOException {
-        server = HttpServer.create(new InetSocketAddress(SocketUtils.findAvailableTcpPort()), 0);
+        server = HttpServer.create(new InetSocketAddress(0), 0);
         server.setExecutor(java.util.concurrent.Executors.newCachedThreadPool());
         server.createContext(PATH, new MyHandler());
         server.start();

File: http-validation/src/main/java/io/micronaut/validation/routes/FilterVisitor.java
Patch:
@@ -38,6 +38,7 @@
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 import io.micronaut.inject.visitor.VisitorContext;
+import io.micronaut.web.router.RouteMatch;
 import org.reactivestreams.Publisher;
 
 import java.util.Optional;
@@ -57,7 +58,8 @@ public final class FilterVisitor implements TypeElementVisitor<Object, Object> {
         FilterContinuation.class,
         Optional.class,
         Throwable.class,
-        MutablePropagatedContext.class
+        MutablePropagatedContext.class,
+        RouteMatch.class
     );
     private static final Set<String> PERMITTED_BINDING_ANNOTATIONS = Set.of(
         Body.class.getName(),

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/PipeliningServerHandler.java
Patch:
@@ -478,7 +478,8 @@ void read(Object message) {
             } else {
                 content.release();
             }
-            if (message instanceof LastHttpContent last) {
+            // exact class check to avoid interface instanceof
+            if (message.getClass() == DefaultLastHttpContent.class || message instanceof LastHttpContent) {
                 // we got the full message before readComplete
                 ByteBuf fullBody;
                 if (buffer.size() == 0) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBodyAnnotationBinder.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.execution.ExecutionFlow;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ReferenceCounted;
+import io.micronaut.core.propagation.PropagatedContext;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.HttpAttributes;
@@ -37,6 +38,7 @@
 import io.micronaut.http.body.MessageBodyHandlerRegistry;
 import io.micronaut.http.body.MessageBodyReader;
 import io.micronaut.http.codec.CodecException;
+import io.micronaut.http.context.ServerHttpRequestContext;
 import io.micronaut.http.server.netty.FormDataHttpContentProcessor;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.body.AvailableNettyByteBody;
@@ -119,7 +121,7 @@ public BindingResult<T> bindFullBody(ArgumentConversionContext<T> context, HttpR
                 // NettyRequestLifecycle will "subscribe" to the execution flow added to routeWaitsFor,
                 // so we can't subscribe directly ourselves. Instead, use the side effect of a map.
                 nhr.addRouteWaitsFor(buffered.flatMap(imm -> {
-                    try {
+                    try (PropagatedContext.Scope ignore = PropagatedContext.getOrEmpty().plus(new ServerHttpRequestContext(nhr)).propagate()) {
                         result = transform(nhr, context, imm);
                         return ExecutionFlow.just(null);
                     } catch (Throwable e) {

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -717,8 +717,8 @@ private CompletionStage<MutableHttpResponse<?>> fromCompletionStage(@NonNull Htt
                 mutableResponse = forStatus(routeInfo, null)
                     .body(asyncBody);
             }
-            if (mutableResponse.body() == null) {
-                if (routeInfo.isVoid() || explicitResponse) {
+            if (mutableResponse.body() == null && !explicitResponse) {
+                if (routeInfo.isVoid()) {
                     return CompletableFuture.completedStage(voidResponse(routeInfo));
                 }
                 return CompletableFuture.completedStage(newNotFoundError(request));

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/mapof/MyService.java
Patch:
@@ -0,0 +1,3 @@
+package io.micronaut.inject.foreach.mapof;
+
+public interface MyService { }

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.propagation.PropagatedContext;
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.core.util.StringUtils;
@@ -121,6 +122,7 @@
 import java.util.ArrayList;
 import java.util.Base64;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
@@ -364,7 +366,7 @@ private void initBootstrap() {
             Object v = entry.getValue();
             if (v != null) {
                 String channelOption = entry.getKey();
-                bootstrap.option(ChannelOption.valueOf(channelOption), v);
+                bootstrap.option(ChannelOption.valueOf(NameUtils.underscoreSeparate(channelOption).toUpperCase(Locale.ENGLISH)), v);
             }
         }
 

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBuffer.java
Patch:
@@ -38,7 +38,7 @@
  * @since 1.0
  */
 @Internal
-class NettyByteBuffer implements ByteBuffer<ByteBuf>, ReferenceCounted {
+final class NettyByteBuffer implements ByteBuffer<ByteBuf>, ReferenceCounted {
 
     private ByteBuf delegate;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBodyAnnotationBinder.java
Patch:
@@ -37,12 +37,12 @@
 import io.micronaut.http.body.MessageBodyHandlerRegistry;
 import io.micronaut.http.body.MessageBodyReader;
 import io.micronaut.http.codec.CodecException;
-import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.netty.FormDataHttpContentProcessor;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.body.AvailableNettyByteBody;
 import io.micronaut.http.server.netty.body.ImmediateMultiObjectBody;
 import io.micronaut.http.server.netty.body.ImmediateSingleObjectBody;
+import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.web.router.RouteInfo;
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http.DefaultLastHttpContent;
@@ -56,11 +56,11 @@
 
 final class NettyBodyAnnotationBinder<T> extends DefaultBodyAnnotationBinder<T> {
     private static final Set<Class<?>> RAW_BODY_TYPES = CollectionUtils.setOf(String.class, byte[].class, ByteBuffer.class, InputStream.class);
-    final HttpServerConfiguration httpServerConfiguration;
+    final NettyHttpServerConfiguration httpServerConfiguration;
     final MessageBodyHandlerRegistry bodyHandlerRegistry;
 
     NettyBodyAnnotationBinder(ConversionService conversionService,
-                                     HttpServerConfiguration httpServerConfiguration,
+                              NettyHttpServerConfiguration httpServerConfiguration,
                                      MessageBodyHandlerRegistry bodyHandlerRegistry) {
         super(conversionService);
         this.httpServerConfiguration = httpServerConfiguration;

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -717,8 +717,8 @@ private CompletionStage<MutableHttpResponse<?>> fromCompletionStage(@NonNull Htt
                 mutableResponse = forStatus(routeInfo, null)
                     .body(asyncBody);
             }
-            if (mutableResponse.body() == null) {
-                if (routeInfo.isVoid() || explicitResponse) {
+            if (mutableResponse.body() == null && !explicitResponse) {
+                if (routeInfo.isVoid()) {
                     return CompletableFuture.completedStage(voidResponse(routeInfo));
                 }
                 return CompletableFuture.completedStage(newNotFoundError(request));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/Http2AccessLogManager.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.server.netty.handler.accesslog.element.AccessLog;
 import io.micronaut.http.server.netty.handler.accesslog.element.AccessLogFormatParser;
+import io.micronaut.http.server.netty.handler.accesslog.element.ConnectionMetadata;
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http2.Http2Connection;
 import org.slf4j.Logger;
@@ -68,7 +68,7 @@ public void logHeaders(ChannelHandlerContext ctx, int streamId, HttpRequest requ
             accessLog = formatParser.newAccessLogger();
         }
         connection.stream(streamId).setProperty(accessLogKey, accessLog);
-        accessLog.onRequestHeaders((SocketChannel) ctx.channel(), request.method().name(), request.headers(), request.uri(), HttpAccessLogHandler.H2_PROTOCOL_NAME);
+        accessLog.onRequestHeaders(ConnectionMetadata.ofNettyChannel(ctx.channel()), request.method().name(), request.headers(), request.uri(), HttpAccessLogHandler.H2_PROTOCOL_NAME);
     }
 
     public record Factory(Logger logger, String spec, Predicate<String> uriInclusion) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LocalHostElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import io.netty.channel.socket.SocketChannel;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.handler.codec.http.HttpHeaders;
 
 import java.util.Set;
@@ -47,8 +47,8 @@ public Set<Event> events() {
     }
 
     @Override
-    public String onRequestHeaders(SocketChannel channel, String method, HttpHeaders headers, String uri, String protocol) {
-        return channel.localAddress().getAddress().getHostName();
+    public String onRequestHeaders(@NonNull ConnectionMetadata metadata, @NonNull String method, @NonNull HttpHeaders headers, @NonNull String uri, @NonNull String protocol) {
+        return metadata.localAddress().flatMap(ConnectionMetadata::getHostName).orElse(ConstantElement.UNKNOWN_VALUE);
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LocalIpElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import io.netty.channel.socket.SocketChannel;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.handler.codec.http.HttpHeaders;
 
 import java.util.Set;
@@ -47,8 +47,8 @@ public Set<Event> events() {
     }
 
     @Override
-    public String onRequestHeaders(SocketChannel channel, String method, HttpHeaders headers, String uri, String protocol) {
-        return channel.localAddress().getAddress().getHostAddress();
+    public String onRequestHeaders(@NonNull ConnectionMetadata metadata, @NonNull String method, @NonNull HttpHeaders headers, @NonNull String uri, @NonNull String protocol) {
+        return metadata.localAddress().flatMap(ConnectionMetadata::getHostAddress).orElse(ConstantElement.UNKNOWN_VALUE);
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RemoteHostElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import io.netty.channel.socket.SocketChannel;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.handler.codec.http.HttpHeaders;
 
 import java.util.Set;
@@ -47,8 +47,8 @@ public Set<Event> events() {
     }
 
     @Override
-    public String onRequestHeaders(SocketChannel channel, String method, HttpHeaders headers, String uri, String protocol) {
-        return channel.remoteAddress().getAddress().getHostName();
+    public String onRequestHeaders(@NonNull ConnectionMetadata metadata, @NonNull String method, @NonNull HttpHeaders headers, @NonNull String uri, @NonNull String protocol) {
+        return metadata.remoteAddress().flatMap(ConnectionMetadata::getHostName).orElse(ConstantElement.UNKNOWN_VALUE);
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RemoteIpElement.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.http.HttpHeaders;
-import io.netty.channel.socket.SocketChannel;
 
 import java.util.Locale;
 import java.util.Set;
@@ -56,7 +56,7 @@ public Set<Event> events() {
     }
 
     @Override
-    public String onRequestHeaders(SocketChannel channel, String method, io.netty.handler.codec.http.HttpHeaders headers, String uri, String protocol) {
+    public String onRequestHeaders(@NonNull ConnectionMetadata metadata, @NonNull String method, io.netty.handler.codec.http.@NonNull HttpHeaders headers, @NonNull String uri, @NonNull String protocol) {
         // maybe this request was proxied or load balanced.
         // try and get the real originating IP
         final String xforwardedFor = headers.get(X_FORWARDED_FOR, null);
@@ -71,7 +71,7 @@ public String onRequestHeaders(SocketChannel channel, String method, io.netty.ha
         } else {
             return processXForwardedFor(xforwardedFor);
         }
-        return channel.remoteAddress().getAddress().getHostAddress();
+        return metadata.remoteAddress().flatMap(ConnectionMetadata::getHostAddress).orElse(ConstantElement.UNKNOWN_VALUE);
     }
 
     private static String processXForwardedFor(String xforwardedFor) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBodyAnnotationBinder.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.execution.ExecutionFlow;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ReferenceCounted;
+import io.micronaut.core.propagation.PropagatedContext;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.HttpAttributes;
@@ -37,6 +38,7 @@
 import io.micronaut.http.body.MessageBodyHandlerRegistry;
 import io.micronaut.http.body.MessageBodyReader;
 import io.micronaut.http.codec.CodecException;
+import io.micronaut.http.context.ServerHttpRequestContext;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.netty.FormDataHttpContentProcessor;
 import io.micronaut.http.server.netty.NettyHttpRequest;
@@ -119,7 +121,7 @@ public BindingResult<T> bindFullBody(ArgumentConversionContext<T> context, HttpR
                 // NettyRequestLifecycle will "subscribe" to the execution flow added to routeWaitsFor,
                 // so we can't subscribe directly ourselves. Instead, use the side effect of a map.
                 nhr.addRouteWaitsFor(buffered.flatMap(imm -> {
-                    try {
+                    try (PropagatedContext.Scope ignore = PropagatedContext.getOrEmpty().plus(new ServerHttpRequestContext(nhr)).propagate()) {
                         result = transform(nhr, context, imm);
                         return ExecutionFlow.just(null);
                     } catch (Throwable e) {

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -434,7 +434,9 @@ private boolean isSingle(RouteInfo<?> finalRoute, Class<?> bodyClass) {
     }
 
     private ExecutionFlow<MutableHttpResponse<?>> fromImperativeExecute(PropagatedContext propagatedContext, HttpRequest<?> request, RouteInfo<?> routeInfo, Object body) {
-        if (body instanceof HttpResponse<?> httpResponse) {
+        // performance optimization: check for common body types
+        //noinspection ConditionCoveredByFurtherCondition
+        if (!(body instanceof String) && !(body instanceof byte[]) && body instanceof HttpResponse<?> httpResponse) {
             MutableHttpResponse<?> outgoingResponse = httpResponse.toMutableResponse();
             final Argument<?> bodyArgument = routeInfo.getReturnType().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
             if (bodyArgument.isAsyncOrReactive()) {

File: router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java
Patch:
@@ -37,7 +37,7 @@
  * @since 1.0
  */
 @Internal
-class DefaultUriRouteMatch<T, R> extends AbstractRouteMatch<T, R> implements UriRouteMatch<T, R> {
+public final class DefaultUriRouteMatch<T, R> extends AbstractRouteMatch<T, R> implements UriRouteMatch<T, R> {
 
     private final UriMatchInfo matchInfo;
     private final UriRouteInfo<T, R> uriRouteInfo;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1204,7 +1204,7 @@ private <T> void destroyBean(@NonNull BeanRegistration<T> registration, boolean
                 }
             }
         }
-        if (beanToDestroy instanceof LifeCycle<?> cycle) {
+        if (beanToDestroy instanceof LifeCycle<?> cycle && !dependent) {
             destroyLifeCycleBean(cycle, definition);
         }
         if (registration instanceof BeanDisposingRegistration) {

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -656,6 +656,7 @@ protected static void pushCreateArgument(
             loadTypeMethods
         );
     }
+
     /**
      * Pushes a new Argument creation.
      *

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -320,7 +320,8 @@ void visitAnnotationMemberPropertyInjectionPoint(TypedElement annotationMemberBe
      */
     void visitFieldValue(TypedElement declaringType,
                          FieldElement fieldElement,
-                         boolean requiresReflection, boolean isOptional);
+                         boolean requiresReflection,
+                         boolean isOptional);
 
     /**
      * @return The package name of the bean

File: inject/src/main/java/io/micronaut/inject/beans/AbstractInitializableBeanIntrospection.java
Patch:
@@ -933,7 +933,7 @@ public void set(@NonNull B bean, @Nullable P value) {
             ArgumentUtils.requireNonNull("bean", bean);
 
             if (!beanType.isInstance(bean)) {
-                throw new IllegalArgumentException("Invalid bean [" + bean + "] for type: " + bean);
+                throw new IllegalArgumentException("Invalid bean [" + bean + "] for type: " + beanType);
             }
             if (isReadOnly()) {
                 throw new UnsupportedOperationException("Cannot write a read-only property: " + getName());

File: test-suite/src/test/java/io/micronaut/docs/config/value/Engine.java
Patch:
@@ -19,4 +19,6 @@ public interface Engine {
     int getCylinders();
 
     String start();
+
+    String getDescription();
 }

File: test-suite/src/test/java/io/micronaut/docs/config/value/Engine.java
Patch:
@@ -19,4 +19,6 @@ public interface Engine {
     int getCylinders();
 
     String start();
+
+    String getDescription();
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -295,7 +295,8 @@ public HttpVersion getHttpVersion() {
         if (pipeline != null) {
             return pipeline.httpVersion;
         }
-        return HttpVersion.HTTP_1_1;
+        // Http2ServerHandler case
+        return findConnectionHandler() == null ? HttpVersion.HTTP_1_1 : HttpVersion.HTTP_2_0;
     }
 
     @Override

File: http/src/main/java/io/micronaut/http/cookie/CookieHttpCookieAdapter.java
Patch:
@@ -35,6 +35,9 @@ class CookieHttpCookieAdapter implements Cookie {
 
     public CookieHttpCookieAdapter(HttpCookie httpCookie) {
         this.httpCookie = httpCookie;
+        if (httpCookie.getMaxAge() == -1) { // HttpCookie.UNDEFINED_MAX_AGE = -1
+            this.httpCookie.setMaxAge(Cookie.UNDEFINED_MAX_AGE);
+        }
     }
 
     @Override

File: http/src/test/java/io/micronaut/http/cookie/CookieHttpCookieAdapterTest.java
Patch:
@@ -19,6 +19,7 @@ void testAdapter() {
         assertFalse(cookie.isHttpOnly());
         assertFalse(cookie.isSecure());
         assertTrue(cookie.getSameSite().isEmpty());
+        assertEquals(Cookie.UNDEFINED_MAX_AGE, cookie.getMaxAge());
 
         cookie = cookie.value("bar")
                 .httpOnly()

File: http/src/main/java/io/micronaut/http/cookie/CookieHttpCookieAdapter.java
Patch:
@@ -35,6 +35,9 @@ class CookieHttpCookieAdapter implements Cookie {
 
     public CookieHttpCookieAdapter(HttpCookie httpCookie) {
         this.httpCookie = httpCookie;
+        if (httpCookie.getMaxAge() == -1) { // HttpCookie.UNDEFINED_MAX_AGE = -1
+            this.httpCookie.setMaxAge(Cookie.UNDEFINED_MAX_AGE);
+        }
     }
 
     @Override

File: http/src/test/java/io/micronaut/http/cookie/CookieHttpCookieAdapterTest.java
Patch:
@@ -19,6 +19,7 @@ void testAdapter() {
         assertFalse(cookie.isHttpOnly());
         assertFalse(cookie.isSecure());
         assertTrue(cookie.getSameSite().isEmpty());
+        assertEquals(Cookie.UNDEFINED_MAX_AGE, cookie.getMaxAge());
 
         cookie = cookie.value("bar")
                 .httpOnly()

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
-import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.ObjectUtils;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -196,7 +196,7 @@ public class NettyHttpServerConfiguration extends HttpServerConfiguration {
     private List<NettyListenerConfiguration> listeners = null;
     private boolean eagerParsing = DEFAULT_EAGER_PARSING;
     private int jsonBufferMaxComponents = DEFAULT_JSON_BUFFER_MAX_COMPONENTS;
-    private boolean legacyMultiplexHandlers = true; // TODO
+    private boolean legacyMultiplexHandlers = false;
 
     /**
      * Default empty constructor.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/MultiplexedServerHandler.java
Patch:
@@ -197,7 +197,9 @@ final void devolveToStreaming() {
             streamer = new InputStreamer();
             if (bufferedContent != null) {
                 for (ByteBuf buf : bufferedContent) {
-                    streamer.sink.tryEmitNext(new DefaultHttpContent(buf));
+                    if (streamer.sink.tryEmitNext(new DefaultHttpContent(buf)) != Sinks.EmitResult.OK) {
+                        buf.release();
+                    }
                 }
                 bufferedContent = null;
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -555,7 +555,7 @@ <T> NettyBodyWriter<T> wrap(MessageBodyWriter<T> closure) {
      */
     <T> NettyBodyWriter<T> specialize(NettyBodyWriter<T> original, Argument<T> bodyType, MediaType mediaType, T body) {
         if (original instanceof CompatNettyWriteClosure<T> cnwc && cnwc.delegate instanceof DynamicMessageBodyWriter dyn) {
-            return (NettyBodyWriter<T>) new CompatNettyWriteClosure<>(dyn.find((Argument<Object>) bodyType, mediaType, body));
+            return (NettyBodyWriter<T>) wrap(dyn.find((Argument<Object>) bodyType, mediaType, body));
         } else {
             return original;
         }
@@ -565,6 +565,7 @@ private final class CompatNettyWriteClosure<T> implements NettyBodyWriter<T> {
         private final MessageBodyWriter<T> delegate;
 
         CompatNettyWriteClosure(MessageBodyWriter<T> delegate) {
+            assert !(delegate instanceof NettyBodyWriter) : "please create using wrap()";
             this.delegate = delegate;
         }
 

File: json-core/src/main/java/io/micronaut/json/codec/JsonMediaTypeCodec.java
Patch:
@@ -51,7 +51,8 @@ public class JsonMediaTypeCodec extends MapperMediaTypeCodec {
         MediaType.APPLICATION_JSON_FEED_TYPE,
         MediaType.APPLICATION_JSON_PATCH_TYPE,
         MediaType.APPLICATION_JSON_MERGE_PATCH_TYPE,
-        MediaType.APPLICATION_JSON_PROBLEM_TYPE
+        MediaType.APPLICATION_JSON_PROBLEM_TYPE,
+        MediaType.APPLICATION_JSON_SCHEMA_TYPE
     );
 
     /**

File: core-processor/src/main/java/io/micronaut/inject/writer/WriterUtils.java
Patch:
@@ -261,7 +261,7 @@ public static int[] computeKotlinDefaultsMask(GeneratorAdapter writer,
                 writer.push(0);
                 writer.storeLocal(maskLocal);
                 int maskIndex = 1;
-                int paramIndex = 0;
+                int paramIndex = fromIndex;
                 for (ParameterElement parameter : params) {
                     if (parameter instanceof KotlinParameterElement kp && kp.hasDefault()) {
                         writeMask(writer, argumentValuePusher, argumentValueIsPresentPusher, kp, paramIndex, maskIndex, maskLocal);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/HttpAccessLogHandler.java
Patch:
@@ -56,8 +56,8 @@ public class HttpAccessLogHandler extends ChannelDuplexHandler {
      */
     public static final String HTTP_ACCESS_LOGGER = "HTTP_ACCESS_LOGGER";
 
+    static final String H2_PROTOCOL_NAME = "HTTP/2.0";
     private static final AttributeKey<AccessLogHolder> ACCESS_LOGGER = AttributeKey.valueOf("ACCESS_LOGGER");
-    private static final String H2_PROTOCOL_NAME = "HTTP/2.0";
 
     private final Logger logger;
     private final AccessLogFormatParser accessLogFormatParser;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -158,6 +158,7 @@ public class NettyHttpRequest<T> extends AbstractNettyHttpRequest<T> implements
      * ONLY for NettyBodyAnnotationBinder use.
      */
     @Internal
+    @SuppressWarnings("VisibilityModifier")
     public ArgumentBinder.BindingResult<ConvertibleValues<?>> convertibleBody;
 
     private final NettyHttpHeaders headers;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpToHttpsRedirectHandler.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.http.netty.NettyHttpResponseBuilder;
 import io.micronaut.http.server.netty.body.ByteBody;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
-import io.micronaut.http.server.netty.handler.PipeliningServerHandler;
+import io.micronaut.http.server.netty.handler.OutboundAccess;
 import io.micronaut.http.server.netty.handler.RequestHandler;
 import io.micronaut.http.server.util.HttpHostResolver;
 import io.micronaut.http.ssl.ServerSslConfiguration;
@@ -52,7 +52,7 @@ record HttpToHttpsRedirectHandler(
 ) implements RequestHandler {
 
     @Override
-    public void accept(ChannelHandlerContext ctx, HttpRequest request, ByteBody body, PipeliningServerHandler.OutboundAccess outboundAccess) {
+    public void accept(ChannelHandlerContext ctx, HttpRequest request, ByteBody body, OutboundAccess outboundAccess) {
         NettyHttpRequest<?> strippedRequest = new NettyHttpRequest<>(request, body, ctx, conversionService, serverConfiguration);
 
         UriBuilder uriBuilder = UriBuilder.of(hostResolver.resolve(strippedRequest));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestLifecycle.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.http.annotation.Body;
 import io.micronaut.http.server.RequestLifecycle;
 import io.micronaut.http.server.netty.body.ByteBody;
-import io.micronaut.http.server.netty.handler.PipeliningServerHandler;
+import io.micronaut.http.server.netty.handler.OutboundAccess;
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
 import io.micronaut.http.server.types.files.SystemFile;
@@ -47,7 +47,7 @@ final class NettyRequestLifecycle extends RequestLifecycle {
     private static final Logger LOG = LoggerFactory.getLogger(NettyRequestLifecycle.class);
 
     private final RoutingInBoundHandler rib;
-    private final PipeliningServerHandler.OutboundAccess outboundAccess;
+    private final OutboundAccess outboundAccess;
     private final boolean validateUrl;
 
     /**
@@ -56,7 +56,7 @@ final class NettyRequestLifecycle extends RequestLifecycle {
      */
     private NettyHttpRequest<?> nettyRequest;
 
-    NettyRequestLifecycle(RoutingInBoundHandler rib, PipeliningServerHandler.OutboundAccess outboundAccess) {
+    NettyRequestLifecycle(RoutingInBoundHandler rib, OutboundAccess outboundAccess) {
         super(rib.routeExecutor);
         this.rib = rib;
         this.validateUrl = rib.serverConfiguration.isValidateUrl();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyServerCustomizer.java
Patch:
@@ -116,6 +116,7 @@ enum ChannelRole {
         /**
          * The channel is a channel representing an individual HTTP2 stream.
          */
+        // todo: deprecate
         REQUEST_STREAM,
         /**
          * The channel is a channel representing an individual HTTP2 stream, created for a push promise.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/RequestHandler.java
Patch:
@@ -34,9 +34,9 @@ public interface RequestHandler {
      * @param ctx            The context this request came in on
      * @param request        The request line and headers
      * @param body           The request body
-     * @param outboundAccess The {@link PipeliningServerHandler.OutboundAccess} to use for writing the response
+     * @param outboundAccess The {@link OutboundAccess} to use for writing the response
      */
-    void accept(ChannelHandlerContext ctx, HttpRequest request, ByteBody body, PipeliningServerHandler.OutboundAccess outboundAccess);
+    void accept(ChannelHandlerContext ctx, HttpRequest request, ByteBody body, OutboundAccess outboundAccess);
 
     /**
      * Handle an error that is not bound to a request, i.e. happens outside a
@@ -53,7 +53,7 @@ public interface RequestHandler {
      * fully consumed.<br>
      * This is used for cleaning up the request.
      *
-     * @param attachment Object passed to {@link io.micronaut.http.server.netty.handler.PipeliningServerHandler.OutboundAccess#attachment(Object)}
+     * @param attachment Object passed to {@link OutboundAccess#attachment(Object)}
      */
     default void responseWritten(Object attachment) {
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -41,7 +41,7 @@
 import io.micronaut.http.server.netty.RoutingInBoundHandler;
 import io.micronaut.http.server.netty.body.ByteBody;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
-import io.micronaut.http.server.netty.handler.PipeliningServerHandler;
+import io.micronaut.http.server.netty.handler.OutboundAccess;
 import io.micronaut.http.server.netty.handler.RequestHandler;
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.Router;
@@ -133,7 +133,7 @@ static boolean isWebSocketUpgrade(@NonNull io.netty.handler.codec.http.HttpReque
     }
 
     @Override
-    public void accept(ChannelHandlerContext ctx, io.netty.handler.codec.http.HttpRequest request, ByteBody body, PipeliningServerHandler.OutboundAccess outboundAccess) {
+    public void accept(ChannelHandlerContext ctx, io.netty.handler.codec.http.HttpRequest request, ByteBody body, OutboundAccess outboundAccess) {
         if (isWebSocketUpgrade(request)) {
             NettyHttpRequest<?> msg = new NettyHttpRequest<>(request, body, ctx, conversionService, serverConfiguration);
 
@@ -171,7 +171,7 @@ private void writeResponse(ChannelHandlerContext ctx,
                                NettyHttpRequest<?> msg,
                                boolean shouldProceedNormally,
                                HttpResponse<?> actualResponse,
-                               PipeliningServerHandler.OutboundAccess outboundAccess) {
+                               OutboundAccess outboundAccess) {
         if (cancelUpgrade) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Cancelling websocket upgrade, handler was removed while request was processing");

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/FilterProxyTest.java
Patch:
@@ -93,7 +93,7 @@ public TestFilter(
         public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
             MutableHttpRequest<?> newRequest = request.mutate()
                 .uri(b -> b
-                    .scheme("http")
+                    .scheme(embeddedServer.getScheme())
                     .host(embeddedServer.getHost())
                     .port(embeddedServer.getPort())
                     .replacePath("/ok")

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpPipelineBuilder.java
Patch:
@@ -246,8 +246,8 @@ void insertPcapLoggingHandler(Channel ch, String qualifier) {
                 path = path.replace("{remoteAddress}", resolveIfNecessary(ch.remoteAddress()));
             }
             if (quic && ch instanceof QuicStreamChannel qsc) {
-                path = path.replace("{localAddress}", resolveIfNecessary(qsc.parent().localAddress()));
-                path = path.replace("{remoteAddress}", resolveIfNecessary(qsc.parent().remoteAddress()));
+                path = path.replace("{localAddress}", resolveIfNecessary(qsc.parent().localSocketAddress()));
+                path = path.replace("{remoteAddress}", resolveIfNecessary(qsc.parent().remoteSocketAddress()));
             }
             path = path.replace("{random}", Long.toHexString(ThreadLocalRandom.current().nextLong()));
             path = path.replace("{timestamp}", Instant.now().toString());
@@ -260,7 +260,7 @@ void insertPcapLoggingHandler(Channel ch, String qualifier) {
                 PcapWriteHandler.Builder builder = PcapWriteHandler.builder();
 
                 if (quic && ch instanceof QuicStreamChannel qsc) {
-                    builder.forceTcpChannel((InetSocketAddress) qsc.parent().localAddress(), (InetSocketAddress) qsc.parent().remoteAddress(), true);
+                    builder.forceTcpChannel((InetSocketAddress) qsc.parent().localSocketAddress(), (InetSocketAddress) qsc.parent().remoteSocketAddress(), true);
                 }
 
                 ch.pipeline().addLast(builder.build(new FileOutputStream(path)));

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/NettyClientSslBuilder.java
Patch:
@@ -92,7 +92,7 @@ public final SslContext build(SslConfiguration ssl, HttpVersionSelection version
             .forClient()
             .keyManager(getKeyManagerFactory(ssl))
             .trustManager(getTrustManagerFactory(ssl))
-            .sslProvider(NettyTlsUtils.sslProvider());
+            .sslProvider(NettyTlsUtils.sslProvider(ssl));
         Optional<String[]> protocols = ssl.getProtocols();
         if (protocols.isPresent()) {
             sslBuilder.protocols(protocols.get());

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/AbstractServerSslBuilder.java
Patch:
@@ -104,7 +104,7 @@ protected void processBuilder(@NonNull SslContextBuilder sslBuilder, @NonNull Ss
     }
 
     private static void setupSslBuilder(SslContextBuilder sslBuilder, SslConfiguration ssl, HttpVersion httpVersion) {
-        sslBuilder.sslProvider(NettyTlsUtils.sslProvider());
+        sslBuilder.sslProvider(NettyTlsUtils.sslProvider(ssl));
         Optional<String[]> protocols = ssl.getProtocols();
         if (protocols.isPresent()) {
             sslBuilder.protocols(protocols.get());

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -90,7 +90,7 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
         // this class doesn't really have lifecycle management (we don't make the user release()
         // it), so we have to copy the data to a non-refcounted buffer.
         this.unpooledContent = Unpooled.buffer(fullHttpResponse.content().readableBytes());
-        unpooledContent.writeBytes(fullHttpResponse.content());
+        unpooledContent.writeBytes(fullHttpResponse.content(), 0, fullHttpResponse.content().readableBytes());
         this.handlerRegistry = handlerRegistry;
         this.nettyCookies = new NettyCookies(fullHttpResponse.headers(), conversionService);
         Class<?> rawBodyType = bodyType != null ? bodyType.getType() : null;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.core.expressions.EvaluatedExpression;
 import io.micronaut.core.reflect.ClassUtils;
-import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.ArrayUtils;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupFactory.java
Patch:
@@ -154,8 +154,8 @@ public Channel channelInstance(NettyChannelType type, @Nullable EventLoopGroupCo
     }
 
     @Override
-    public Channel channelInstance(NettyChannelType type, EventLoopGroupConfiguration configuration, int fd) {
-        return getFactory(configuration).channelInstance(type, configuration, fd);
+    public Channel channelInstance(NettyChannelType type, EventLoopGroupConfiguration configuration, Channel parent, int fd) {
+        return getFactory(configuration).channelInstance(type, configuration, parent, fd);
     }
 
     @NonNull

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultNettyEmbeddedServerFactory.java
Patch:
@@ -303,8 +303,8 @@ public Channel getChannelInstance(NettyChannelType type, EventLoopGroupConfigura
     }
 
     @Override
-    public Channel getChannelInstance(NettyChannelType type, EventLoopGroupConfiguration workerConfig, int fd) {
-        return eventLoopGroupFactory.channelInstance(type, workerConfig, fd);
+    public Channel getChannelInstance(NettyChannelType type, EventLoopGroupConfiguration workerConfig, Channel parent, int fd) {
+        return eventLoopGroupFactory.channelInstance(type, workerConfig, parent, fd);
     }
 
     @SuppressWarnings("unchecked")

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServices.java
Patch:
@@ -201,7 +201,7 @@ default ExecutorSelector getExecutorSelector() {
      * @return The channel
      * @throws UnsupportedOperationException if domain sockets are not supported.
      */
-    @NonNull default Channel getChannelInstance(NettyChannelType type, @NonNull EventLoopGroupConfiguration workerConfig, int fd) {
+    @NonNull default Channel getChannelInstance(NettyChannelType type, @NonNull EventLoopGroupConfiguration workerConfig, Channel parent, int fd) {
         throw new UnsupportedOperationException("File descriptor channels not supported");
     }
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -192,6 +192,9 @@ protected GroovyClassElement copyConstructor() {
 
     @Override
     public AnnotationMetadata getAnnotationMetadata() {
+        if (presetAnnotationMetadata != null) {
+            return presetAnnotationMetadata;
+        }
         if (annotationMetadata == null) {
             if (getNativeType() instanceof GroovyNativeElement.ClassWithOwner) {
                 annotationMetadata = new AnnotationMetadataHierarchy(true, super.getAnnotationMetadata(), getTypeAnnotationMetadata());

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -213,6 +213,9 @@ protected MutableAnnotationMetadataDelegate<?> getAnnotationMetadataToWrite() {
 
     @Override
     public AnnotationMetadata getAnnotationMetadata() {
+        if (presetAnnotationMetadata != null) {
+            return presetAnnotationMetadata;
+        }
         if (annotationMetadata == null) {
             if (getNativeType().typeMirror() == null) {
                 annotationMetadata = super.getAnnotationMetadata();

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -896,12 +896,12 @@ protected static void pushCastFromObjectToType(GeneratorAdapter ga, TypedElement
     protected static void pushCastToType(GeneratorAdapter ga, TypedElement from, TypedElement to) {
         Type toType = JavaModelUtils.getTypeReference(to);
         if (from.isPrimitive() && to.isPrimitive()) {
-            if (!from.getName().equals(to.getName())) {
+            if (!from.getType().equals(to.getType())) {
                 ga.cast(JavaModelUtils.getTypeReference(from), toType);
             }
         } else if (from.isPrimitive()) {
             ga.box(JavaModelUtils.getTypeReference(from));
-        } else if (!to.getName().equals(Object.class.getName())) {
+        } else if (!to.getType().getName().equals(Object.class.getName())) {
             pushCastToType(ga, toType);
         }
     }

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -692,6 +692,7 @@ private CompletionStage<MutableHttpResponse<?>> fromCompletionStage(@NonNull Htt
                     return CompletableFuture.completedStage(newNotFoundError(request));
                 }
             }
+            boolean explicitResponse = false;
             if (asyncBody instanceof HttpResponse<?> httpResponse) {
                 mutableResponse = httpResponse.toMutableResponse();
                 final Argument<?> bodyArgument = routeInfo.getReturnType() // CompletionStage
@@ -706,14 +707,15 @@ private CompletionStage<MutableHttpResponse<?>> fromCompletionStage(@NonNull Htt
                         return mutableResponse.body(innerBody);
                     });
                 }
+                explicitResponse = true;
             } else if (asyncBody instanceof HttpStatus status) {
                 mutableResponse = forStatus(routeInfo, status);
             } else {
                 mutableResponse = forStatus(routeInfo, null)
                     .body(asyncBody);
             }
             if (mutableResponse.body() == null) {
-                if (routeInfo.isVoid()) {
+                if (routeInfo.isVoid() || explicitResponse) {
                     return CompletableFuture.completedStage(voidResponse(routeInfo));
                 }
                 return CompletableFuture.completedStage(newNotFoundError(request));

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -359,7 +359,7 @@ public Collection<MethodElement> getOverriddenMethods() {
             .stream()
             .map(overriddenMethod -> new JavaMethodElement(
                     owningType,
-                    new JavaNativeElement.Method(executableElement),
+                    new JavaNativeElement.Method(overriddenMethod),
                     elementAnnotationMetadataFactory,
                     visitorContext
                 )

File: core-reactive/src/main/java/io/micronaut/core/async/propagation/ReactivePropagation.java
Patch:
@@ -51,7 +51,7 @@ public static <T> Publisher<T> propagate(PropagatedContext propagatedContext, Pu
                 public void subscribe(CoreSubscriber<? super T> subscriber) {
                     CorePublisher<T> actualCorePublisher = (CorePublisher<T>) actual;
                     try (PropagatedContext.Scope ignore = propagatedContext.propagate()) {
-                        actualCorePublisher.subscribe(subscriber);
+                        actualCorePublisher.subscribe(propagate(propagatedContext, subscriber));
                     }
                 }
 
@@ -62,14 +62,14 @@ public void subscribe(Subscriber<? super T> subscriber) {
                         return;
                     }
                     try (PropagatedContext.Scope ignore = propagatedContext.propagate()) {
-                        actual.subscribe(subscriber);
+                        actual.subscribe(propagate(propagatedContext, subscriber));
                     }
                 }
             };
         }
         return subscriber -> {
             try (PropagatedContext.Scope ignore = propagatedContext.propagate()) {
-                actual.subscribe(subscriber);
+                actual.subscribe(propagate(propagatedContext, subscriber));
             }
         };
     }

File: router/src/main/java/io/micronaut/web/router/DefaultRouteInfo.java
Patch:
@@ -143,7 +143,7 @@ public DefaultRouteInfo(AnnotationMetadata annotationMetadata,
             this.consumesMediaTypes = consumesMediaTypes;
             consumesMediaTypesContainsAll = this.consumesMediaTypes.contains(MediaType.ALL_TYPE);
         }
-        this.imperative = isVoid || !suspended && !reactive && !async && !returnType.getType().equals(Object.class)
+        this.imperative = returnType.getType() == void.class || !suspended && !reactive && !async && !returnType.getType().equals(Object.class)
             && (returnType.getType().getPackageName().startsWith("java.") || BeanIntrospector.SHARED.findIntrospection(returnType.getType()).isPresent());
     }
 

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -51,6 +51,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -319,7 +320,7 @@ private <T> void appendBeanMissingMessage(String linePrefix,
         }
 
         Collection<BeanDefinition<T>> beanCandidates = findBeanCandidates(resolutionContext, beanType, false, definition -> !definition.isAbstract())
-            .stream().sorted().toList();
+            .stream().sorted(Comparator.comparing(BeanDefinition::getName)).toList();
         for (BeanDefinition<T> definition : beanCandidates) {
             if (definition != null && definition.isIterable()) {
                 if (definition.hasDeclaredAnnotation(EachProperty.class)) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -237,7 +237,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
                 roundEnv.getRootElements()
             ).filter(notGroovyObject).forEach(elements::add);
 
-            pendingTypes.stream().map(elementUtils::getTypeElement).forEach(elements::add);
+            pendingTypes.stream().map(elementUtils::getTypeElement).filter(Objects::nonNull).forEach(elements::add);
             pendingTypes.clear();
 
             if (!elements.isEmpty()) {

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.ConfigurationReader;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.env.Environment;
 import io.micronaut.context.event.ApplicationEventListener;
 import io.micronaut.context.scope.BeanCreationContext;
 import io.micronaut.context.scope.CreatedBean;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -219,8 +219,8 @@ public void accept(ChannelHandlerContext ctx, io.netty.handler.codec.http.HttpRe
         }
         if (ctx.pipeline().get(ChannelPipelineCustomizer.HANDLER_ACCESS_LOGGER) != null) {
             // Micronaut Session needs this to extract values from the Micronaut Http Request for logging
-            AttributeKey<NettyHttpRequest> KEY = AttributeKey.valueOf(NettyHttpRequest.class.getSimpleName());
-            ctx.channel().attr(KEY).set(mnRequest);
+            AttributeKey<NettyHttpRequest> key = AttributeKey.valueOf(NettyHttpRequest.class.getSimpleName());
+            ctx.channel().attr(key).set(mnRequest);
         }
         outboundAccess.attachment(mnRequest);
         try (PropagatedContext.Scope ignore = PropagatedContext.getOrEmpty().plus(new ServerHttpRequestContext(mnRequest)).propagate()) {

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/CorsAssertion.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * CORS assertion.

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -96,7 +96,7 @@ protected AbstractRouteMatch(MethodBasedRouteInfo<T, R> routeInfo, ConversionSer
             this.postponedArgumentBinders = new PostponedRequestArgumentBinder[length];
             this.pendingRequestBindingResults = new PendingRequestBindingResult[length];
         }
-        if (methodExecutionHandle instanceof UnsafeExecutionHandle<?,?>) {
+        if (methodExecutionHandle instanceof UnsafeExecutionHandle<?, ?>) {
             unsafeMethodExecutionHandle = (UnsafeExecutionHandle<T, R>) methodExecutionHandle;
         } else {
             unsafeMethodExecutionHandle = null;

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -833,7 +833,7 @@ protected static Type getTypeReference(TypedElement type) {
      */
     protected static void pushBoxPrimitiveIfNecessary(Type fieldType, GeneratorAdapter injectMethodVisitor) {
         if (JavaModelUtils.isPrimitive(fieldType)) {
-            injectMethodVisitor.box(fieldType);
+            injectMethodVisitor.valueOf(fieldType);
         }
     }
 

File: http-server/src/main/java/io/micronaut/http/server/cors/CrossOriginUtil.java
Patch:
@@ -41,6 +41,7 @@ public final class CrossOriginUtil {
     public static final String MEMBER_EXPOSED_HEADERS = "exposedHeaders";
     public static final String MEMBER_ALLOWED_METHODS = "allowedMethods";
     public static final String MEMBER_ALLOW_CREDENTIALS = "allowCredentials";
+    public static final String MEMBER_ALLOW_PRIVATE_NETWORK = "allowPrivateNetwork";
     public static final String MEMBER_MAX_AGE = "maxAge";
 
     private CrossOriginUtil() {
@@ -85,6 +86,8 @@ private static Optional<CorsOriginConfiguration> getCorsOriginConfiguration(@Non
 
         annotationMetadata.booleanValue(CrossOrigin.class, MEMBER_ALLOW_CREDENTIALS)
             .ifPresent(config::setAllowCredentials);
+        annotationMetadata.booleanValue(CrossOrigin.class, MEMBER_ALLOW_PRIVATE_NETWORK)
+                .ifPresent(config::setAllowPrivateNetwork);
         annotationMetadata.longValue(CrossOrigin.class, MEMBER_MAX_AGE)
             .ifPresent(config::setMaxAge);
         return Optional.of(config);

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/annotation/GroovyAnnotationMetadataBuilder.java
Patch:
@@ -244,11 +244,11 @@ protected AnnotatedNode getTypeForAnnotation(AnnotationNode annotationMirror) {
 
     @Override
     protected String getRepeatableName(AnnotationNode annotationMirror) {
-        return getRepeatableNameForType(annotationMirror.getClassNode());
+        return getRepeatableContainerNameForType(annotationMirror.getClassNode());
     }
 
     @Override
-    protected String getRepeatableNameForType(AnnotatedNode annotationType) {
+    protected String getRepeatableContainerNameForType(AnnotatedNode annotationType) {
         List<AnnotationNode> annotationNodes = annotationType.getAnnotations(ClassHelper.makeCached(Repeatable.class));
         if (CollectionUtils.isNotEmpty(annotationNodes)) {
             Expression expression = annotationNodes.get(0).getMember("value");
@@ -318,7 +318,7 @@ private void expandAnnotations(List<AnnotationNode> annotations, List<Annotation
             if (value instanceof ListExpression listExpression) {
                 for (Expression expression : listExpression.getExpressions()) {
                     if (expression instanceof AnnotationConstantExpression annotationConstantExpression) {
-                        String name = getRepeatableNameForType(expression.getType());
+                        String name = getRepeatableContainerNameForType(expression.getType());
                         if (name != null && name.equals(node.getClassNode().getName())) {
                             repeatable = true;
                             expanded.add((AnnotationNode) annotationConstantExpression.getValue());

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -132,12 +132,12 @@ protected String getAnnotationMemberName(Element member) {
     @Override
     protected String getRepeatableName(AnnotationMirror annotationMirror) {
         final Element typeElement = annotationMirror.getAnnotationType().asElement();
-        return getRepeatableNameForType(typeElement);
+        return getRepeatableContainerNameForType(typeElement);
     }
 
     @Nullable
     @Override
-    protected String getRepeatableNameForType(Element annotationType) {
+    protected String getRepeatableContainerNameForType(Element annotationType) {
         List<? extends AnnotationMirror> mirrors = annotationType.getAnnotationMirrors();
         for (AnnotationMirror mirror : mirrors) {
             String name = mirror.getAnnotationType().toString();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -166,13 +166,15 @@ public class NettyHttpRequest<T> extends AbstractNettyHttpRequest<T> implements
 
     /**
      * @param nettyRequest        The {@link io.netty.handler.codec.http.HttpRequest}
+     * @param body                The request body
      * @param ctx                 The {@link ChannelHandlerContext}
      * @param environment         The Environment
      * @param serverConfiguration The {@link HttpServerConfiguration}
      * @throws IllegalArgumentException When the request URI is invalid
      */
     @SuppressWarnings("MagicNumber")
     public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
+                            ByteBody body,
                             ChannelHandlerContext ctx,
                             ConversionService environment,
                             HttpServerConfiguration serverConfiguration) throws IllegalArgumentException {
@@ -183,7 +185,7 @@ public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
         this.serverConfiguration = serverConfiguration;
         this.channelHandlerContext = ctx;
         this.headers = new NettyHttpHeaders(nettyRequest.headers(), conversionService);
-        this.body = ByteBody.of(nettyRequest);
+        this.body = body;
     }
 
     /**

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/binding/HttpRequestTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.netty.NettyHttpRequest;
+import io.micronaut.http.server.netty.body.ByteBody;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.HttpVersion;
@@ -36,6 +37,7 @@ public void testForEach() {
         nettyRequest.headers().add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
         HttpRequest<?> request = new NettyHttpRequest(
                 nettyRequest,
+                ByteBody.empty(),
                 new DetachedMockFactory().Mock(ChannelHandlerContext.class),
                 ConversionService.SHARED,
                 new HttpServerConfiguration()
@@ -57,6 +59,7 @@ public void testForEach2() {
         nettyRequest.headers().add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML);
         HttpRequest<?> request = new NettyHttpRequest(
                 nettyRequest,
+                ByteBody.empty(),
                 new DetachedMockFactory().Mock(ChannelHandlerContext.class),
                 ConversionService.SHARED,
                 new HttpServerConfiguration()

File: http-server-netty/src/test/java/io/micronaut/http/server/netty/jackson/JsonContentProcessorBenchmark.java
Patch:
@@ -6,6 +6,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.netty.body.JsonCounter;
 import io.micronaut.http.server.netty.NettyHttpRequest;
+import io.micronaut.http.server.netty.body.ByteBody;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.json.JsonMapper;
 import io.micronaut.json.JsonSyntaxException;
@@ -110,6 +111,7 @@ public void setUp() throws IOException {
             });
             request = new NettyHttpRequest<>(
                 new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"),
+                ByteBody.empty(),
                 ch.pipeline().firstContext(),
                 ConversionService.SHARED,
                 configuration

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/DefaultByteBufAllocatorConfiguration.java
Patch:
@@ -39,7 +39,7 @@
 @BootstrapContextCompatible
 @Internal
 @Order(Ordered.HIGHEST_PRECEDENCE)
-final class DefaultByteBufAllocatorConfiguration implements ByteBufAllocatorConfiguration {
+public final class DefaultByteBufAllocatorConfiguration implements ByteBufAllocatorConfiguration {
 
     private static final String PROP_PREFIX = "io.netty.allocator.";
 

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -54,7 +54,7 @@
  * @since 1.0
  */
 @Singleton
-@Requires(notEnv = {Environment.FUNCTION, Environment.ANDROID})
+@Requires(condition = RefreshScopeCondition.class)
 public class RefreshScope implements CustomScope<Refreshable>, LifeCycle<RefreshScope>, ApplicationEventListener<RefreshEvent>, Ordered {
 
     public static final int POSITION = RefreshEventListener.DEFAULT_POSITION - 100;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/discovery/NettyServiceDiscovery.java
Patch:
@@ -20,6 +20,8 @@
 import io.micronaut.context.event.ApplicationEventPublisher;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.core.annotation.Order;
+import io.micronaut.core.order.Ordered;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.event.ServiceReadyEvent;
 import io.micronaut.discovery.event.ServiceStoppedEvent;
@@ -32,6 +34,7 @@
 @Singleton
 @Internal
 @Requires(classes = ServiceInstance.class)
+@Order(Ordered.LOWEST_PRECEDENCE)
 final class NettyServiceDiscovery {
     private final ApplicationEventPublisher<ServiceReadyEvent> serviceReadyEventApplicationEventPublisher;
     private final ApplicationEventPublisher<ServiceStoppedEvent> serviceStoppedEventApplicationEventPublisher;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/HateoasErrorResponseProcessor.java
Patch:
@@ -68,9 +68,8 @@ public MutableHttpResponse<JsonError> processResponse(@NonNull ErrorContext erro
         }
         try {
             error.link(Link.SELF, Link.of(errorContext.getRequest().getUri()));
-        } catch (Exception e) {
-            // Invalid URL
-            error.link(Link.SELF, Link.of(errorContext.getRequest().getPath()));
+        } catch (IllegalArgumentException ignored) {
+            // invalid URI, don't include it
         }
 
         return response.body(error).contentType(MediaType.APPLICATION_JSON_TYPE);

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -586,6 +586,9 @@ public boolean isAssignable(String type) {
 
     @Override
     public boolean isAssignable(ClassElement type) {
+        if (equals(type)) {
+            return true; // Same type
+        }
         return AstClassUtils.isSubclassOfOrImplementsInterface(classNode, type.getName());
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -385,7 +385,7 @@ private ClassElement resolveTypeVariable(JavaNativeElement owner,
                                              Set<TypeMirror> visitedTypes,
                                              TypeVariable tv,
                                              boolean isRawType) {
-        String variableName = tv.toString();
+        String variableName = tv.asElement().getSimpleName().toString();
         ClassElement resolvedBound = parentTypeArguments.get(variableName);
         List<JavaClassElement> bounds = null;
         io.micronaut.inject.ast.Element declaredElement = this;

File: inject/src/main/java/io/micronaut/context/env/DefaultPropertyPlaceholderResolver.java
Patch:
@@ -73,7 +73,6 @@ private Collection<PropertyExpressionResolver> getExpressionResolvers() {
             synchronized (this) { // double check
                 exResolvers = this.expressionResolvers;
                 if (exResolvers == null) {
-                    this.expressionResolvers = new ArrayList<>();
                     exResolvers = new ArrayList<>();
                     ClassLoader classLoader = (environment instanceof Environment e) ? e.getClassLoader() : environment.getClass().getClassLoader();
                     SoftServiceLoader.load(PropertyExpressionResolver.class, classLoader).collectAll(exResolvers);

File: test-suite-http-client-tck-jdk/src/test/java/io/micronaut/http/client/tck/jdk/tests/JdkHttpMethodTests.java
Patch:
@@ -1,5 +1,7 @@
 package io.micronaut.http.client.tck.jdk.tests;
 
+import io.micronaut.http.client.tck.tests.ClientDisabledCondition;
+import org.junit.platform.suite.api.ConfigurationParameter;
 import org.junit.platform.suite.api.ExcludeClassNamePatterns;
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.Suite;
@@ -11,6 +13,7 @@
 @Suite
 @SelectPackages("io.micronaut.http.client.tck.tests")
 @SuiteDisplayName("HTTP Client TCK for the HTTP Client Implementation based on Java HTTP Client")
+@ConfigurationParameter(key = ClientDisabledCondition.HTTP_CLIENT_CONFIGURATION, value = ClientDisabledCondition.JDK)
 @SuppressWarnings("java:S2187") // This runs a suite of tests, but has no tests of its own
 @ExcludeClassNamePatterns({
     "io.micronaut.http.client.tck.tests.ContinueTest", // Unsupported body type errors

File: test-suite-http-client-tck-netty/src/test/java/io/micronaut/http/client/tck/netty/tests/NettyHttpMethodTests.java
Patch:
@@ -1,12 +1,15 @@
 package io.micronaut.http.client.tck.netty.tests;
 
+import io.micronaut.http.client.tck.tests.ClientDisabledCondition;
+import org.junit.platform.suite.api.ConfigurationParameter;
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.Suite;
 import org.junit.platform.suite.api.SuiteDisplayName;
 
 @Suite
 @SelectPackages("io.micronaut.http.client.tck.tests")
 @SuiteDisplayName("HTTP Client TCK for the HTTP Client Implementation based on Netty")
+@ConfigurationParameter(key = ClientDisabledCondition.HTTP_CLIENT_CONFIGURATION, value = ClientDisabledCondition.NETTY)
 @SuppressWarnings("java:S2187") // This runs a suite of tests, but has no tests of its own
 public class NettyHttpMethodTests {
 }

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.cors;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ImmutableArgumentConversionContext;
@@ -23,7 +24,6 @@
 import io.micronaut.core.convert.value.ConvertibleValuesMap;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpMethod;
-import jakarta.inject.Singleton;
 
 import java.util.List;
 import java.util.Map;
@@ -36,7 +36,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Singleton
+@Internal
 public class CorsOriginConverter implements TypeConverter<Map<String, Object>, CorsOriginConfiguration> {
 
     private static final String ALLOWED_ORIGINS = "allowed-origins";

File: http/src/main/java/io/micronaut/http/cookie/SameSiteConverter.java
Patch:
@@ -15,10 +15,11 @@
  */
 package io.micronaut.http.cookie;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.util.StringUtils;
-import jakarta.inject.Singleton;
+
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
@@ -29,7 +30,7 @@
  * @author Sergio del Amo
  * @since 3.0.1
  */
-@Singleton
+@Internal
 public class SameSiteConverter implements TypeConverter<CharSequence, SameSite> {
     private static final Map<CharSequence, SameSite> CONVERSIONS = new ConcurrentHashMap<>();
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -61,6 +61,7 @@
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.compression.DecompressionException;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.DefaultFullHttpResponse;
 import io.netty.handler.codec.http.DefaultHttpContent;
@@ -182,7 +183,7 @@ public void handleUnboundError(Throwable cause) {
             return;
         }
 
-        if (cause instanceof SSLException || cause.getCause() instanceof SSLException) {
+        if (cause instanceof SSLException || cause.getCause() instanceof SSLException || cause instanceof DecompressionException) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Micronaut Server Error - No request state present. Cause: {}", cause.getMessage(), cause);
             }

File: http-server/src/main/java/io/micronaut/http/server/exceptions/URISyntaxHandler.java
Patch:
@@ -55,7 +55,7 @@ public HttpResponse handle(HttpRequest request, URISyntaxException exception) {
                 .error(new Error() {
                     @Override
                     public String getMessage() {
-                        return "Malformed URI: " + exception.getMessage();
+                        return "Malformed URI";
                     }
 
                     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -385,7 +385,7 @@ private ClassElement resolveTypeVariable(JavaNativeElement owner,
                                              Set<TypeMirror> visitedTypes,
                                              TypeVariable tv,
                                              boolean isRawType) {
-        String variableName = tv.toString();
+        String variableName = tv.asElement().getSimpleName().toString();
         ClassElement resolvedBound = parentTypeArguments.get(variableName);
         List<JavaClassElement> bounds = null;
         io.micronaut.inject.ast.Element declaredElement = this;

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -54,7 +54,7 @@
  * @since 1.0
  */
 @Singleton
-@Requires(notEnv = {Environment.FUNCTION, Environment.ANDROID})
+@Requires(condition = RefreshScopeCondition.class)
 public class RefreshScope implements CustomScope<Refreshable>, LifeCycle<RefreshScope>, ApplicationEventListener<RefreshEvent>, Ordered {
 
     public static final int POSITION = RefreshEventListener.DEFAULT_POSITION - 100;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpCompressionStrategy.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty;
 
+import io.netty.handler.codec.compression.StandardCompressionOptions;
 import io.netty.handler.codec.http.HttpResponse;
 
 /**
@@ -36,6 +37,6 @@ public interface HttpCompressionStrategy {
      * @return The compression level (0-9)
      */
     default int getCompressionLevel() {
-        return 6;
+        return StandardCompressionOptions.gzip().compressionLevel();
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -207,6 +207,8 @@ private void writeResponse(ChannelHandlerContext ctx,
                 } catch (NoSuchElementException ignored) {
                 }
 
+                // websocket needs auto read for now
+                ctx.channel().config().setAutoRead(true);
             } catch (Throwable e) {
                 if (LOG.isErrorEnabled()) {
                     LOG.error("Error opening WebSocket: {}", e.getMessage(), e);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestLifecycle.java
Patch:
@@ -48,6 +48,7 @@ final class NettyRequestLifecycle extends RequestLifecycle {
 
     private final RoutingInBoundHandler rib;
     private final PipeliningServerHandler.OutboundAccess outboundAccess;
+    private final boolean validateUrl;
 
     /**
      * Should only be used where netty-specific stuff is needed, such as reading the body or
@@ -58,6 +59,7 @@ final class NettyRequestLifecycle extends RequestLifecycle {
     NettyRequestLifecycle(RoutingInBoundHandler rib, PipeliningServerHandler.OutboundAccess outboundAccess) {
         super(rib.routeExecutor);
         this.rib = rib;
+        this.validateUrl = rib.serverConfiguration.isValidateUrl();
         this.outboundAccess = outboundAccess;
     }
 

File: inject/src/main/java/io/micronaut/context/env/DefaultPropertyPlaceholderResolver.java
Patch:
@@ -73,7 +73,6 @@ private Collection<PropertyExpressionResolver> getExpressionResolvers() {
             synchronized (this) { // double check
                 exResolvers = this.expressionResolvers;
                 if (exResolvers == null) {
-                    this.expressionResolvers = new ArrayList<>();
                     exResolvers = new ArrayList<>();
                     ClassLoader classLoader = (environment instanceof Environment e) ? e.getClassLoader() : environment.getClass().getClassLoader();
                     SoftServiceLoader.load(PropertyExpressionResolver.class, classLoader).collectAll(exResolvers);

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -570,7 +570,7 @@ private boolean matchesPresenceOfBeans(ConditionContext context, AnnotationValue
                 BeanContext beanContext = context.getBeanContext();
                 for (Class<?> type : beans) {
                     if (!beanContext.containsBean(type)) {
-                        context.fail("No bean of type [" + type + "] present within context");
+                        context.fail("No bean of type [" + type.getName() + "] present within context");
                         return false;
                     }
                 }
@@ -595,7 +595,7 @@ private boolean matchesAbsenceOfBeans(ConditionContext context, AnnotationValue<
                     );
                     for (BeanDefinition<?> beanDefinition : beanDefinitions) {
                         if (!beanDefinition.isAbstract()) {
-                            context.fail("Existing bean [" + beanDefinition.getName() + "] of type [" + type + "] registered in context");
+                            context.fail("Existing bean [" + beanDefinition.getName() + "] of type [" + type.getName() + "] registered in context");
                             return false;
                         }
                     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -1476,6 +1476,7 @@ public void setFd(Integer fd) {
         public boolean isBind() {
             return bind;
         }
+
         /**
          * Whether the server should bind to the socket. {@code true} by default. If set to
          * {@code false}, the socket must already be bound and listening.

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/compose/CompositionTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.qualifiers.compose;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import spock.lang.Issue;
@@ -25,7 +25,7 @@ public class CompositionTest {
     @Test
     @Issue("#609")
     public void testComposition() {
-        try (final BeanContext context = BeanContext.run()) {
+        try (final ApplicationContext context = ApplicationContext.run()) {
             final int result = context.getBean(Thing.class).getNumber();
             Assertions.assertEquals(3, result, "Should have resolved 3 candidates for annotation qualifier");
         }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -195,7 +195,7 @@ public int compare(BeanDefinition<?> bean1, BeanDefinition<?> bean2) {
 
     final Map<BeanIdentifier, BeanRegistration<?>> singlesInCreation = new ConcurrentHashMap<>(5);
 
-    private final SingletonScope singletonScope = new SingletonScope();
+    protected final SingletonScope singletonScope = new SingletonScope();
 
     private final BeanContextConfiguration beanContextConfiguration;
 

File: test-suite-javax-inject/src/test/java/io/micronaut/docs/lifecycle/postconstruct/PostConstructBeanSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.lifecycle.postconstruct;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -24,7 +24,7 @@ public class PostConstructBeanSpec {
     @Test
     public void testBeanPostConstructWithJavax() {
         // tag::start[]
-        try(BeanContext ctx = BeanContext.run()) {
+        try(ApplicationContext ctx = ApplicationContext.run()) {
             final B bean = ctx.getBean(B.class);
             Assertions.assertNotNull(bean.getA());
             Assertions.assertTrue(bean.injectedFirst);

File: test-suite-javax-inject/src/test/java/io/micronaut/docs/lifecycle/predestroy/PreDestroyBeanSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.lifecycle.predestroy;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -24,7 +24,7 @@ public class PreDestroyBeanSpec {
     @Test
     public void testBeanClosingOnContextClose() {
         // tag::start[]
-        BeanContext ctx = BeanContext.run();
+        ApplicationContext ctx = ApplicationContext.run();
         PreDestroyBean preDestroyBean = ctx.getBean(PreDestroyBean.class);
         Connection connection = ctx.getBean(Connection.class);
         ctx.stop();

File: test-suite-javax-inject/src/test/java/io/micronaut/docs/lifecycle/predestroy/VehicleSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.lifecycle.predestroy;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -24,7 +24,7 @@ public class VehicleSpec {
     @Test
     public void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
 
         System.out.println(vehicle.start());

File: test-suite/src/test/java/io/micronaut/docs/events/factory/VehicleSpec.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.docs.events.factory;
 
+import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.BeanContext;
 import org.junit.jupiter.api.Test;
 
@@ -25,7 +26,7 @@ class VehicleSpec {
     @Test
     void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
         System.out.println(vehicle.start());
         // end::start[]

File: test-suite/src/test/java/io/micronaut/docs/factories/primitive/EngineSpec.java
Patch:
@@ -1,15 +1,15 @@
 package io.micronaut.docs.factories.primitive;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class EngineSpec {
     @Test
     void testEngine() {
-        try (BeanContext beanContext = BeanContext.run()) {
-            final V8Engine engine = beanContext.getBean(V8Engine.class);
+        try (ApplicationContext context = ApplicationContext.run()) {
+            final V8Engine engine = context.getBean(V8Engine.class);
             assertEquals(
                     8,
                     engine.getCylinders()

File: test-suite/src/test/java/io/micronaut/docs/inject/generated/VerifyIntrospectionSpec.java
Patch:
@@ -17,20 +17,20 @@
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import io.micronaut.context.ApplicationContext;
 import io.micronaut.core.beans.BeanIntrospector;
 import io.micronaut.test.generated.IntrospectedExample;
-import io.micronaut.context.BeanContext;
 import org.junit.jupiter.api.Test;
 
 public class VerifyIntrospectionSpec {
 
     @Test
     public void test() {
-        BeanContext beanContext = BeanContext.run();
+        ApplicationContext context = ApplicationContext.run();
 
         assertTrue(BeanIntrospector.SHARED.findIntrospection(IntrospectedExample.class).isPresent());
 
-        beanContext.stop();
+        context.stop();
     }
 
 }

File: test-suite/src/test/java/io/micronaut/docs/inject/intro/VehicleSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.inject.intro;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -25,7 +25,7 @@ class VehicleSpec {
     @Test
     void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
         System.out.println(vehicle.start());
         // end::start[]

File: test-suite/src/test/java/io/micronaut/docs/inject/qualifiers/named/VehicleSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.inject.qualifiers.named;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.codehaus.groovy.runtime.DefaultGroovyMethods;
 import org.junit.jupiter.api.Test;
 
@@ -26,7 +26,7 @@ class VehicleSpec {
     @Test
     void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
         DefaultGroovyMethods.println(this, vehicle.start());
         // end::start[]

File: test-suite/src/test/java/io/micronaut/docs/lifecycle/PreDestroyBeanSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.lifecycle;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -25,7 +25,7 @@ class PreDestroyBeanSpec {
     @Test
     void testBeanClosingOnContextClose() {
         // tag::start[]
-        BeanContext ctx = BeanContext.run();
+        ApplicationContext ctx = ApplicationContext.run();
         PreDestroyBean preDestroyBean = ctx.getBean(PreDestroyBean.class);
         Connection connection = ctx.getBean(Connection.class);
         ctx.stop();

File: test-suite/src/test/java/io/micronaut/docs/lifecycle/VehicleSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.lifecycle;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -25,7 +25,7 @@ class VehicleSpec {
     @Test
     void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
 
         System.out.println(vehicle.start());

File: test-suite/src/test/java/io/micronaut/docs/qualifiers/annotation/VehicleSpec.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.docs.qualifiers.annotation;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -24,7 +24,7 @@ public class VehicleSpec {
     @Test
     public void testStartVehicle() {
         // tag::start[]
-        final BeanContext context = BeanContext.run();
+        final ApplicationContext context = ApplicationContext.run();
         Vehicle vehicle = context.getBean(Vehicle.class);
         System.out.println(vehicle.start());
         // end::start[]

File: test-suite/src/test/java/io/micronaut/docs/qualifiers/replaces/defaultimpl/DefaultImplementationSpec.java
Patch:
@@ -15,15 +15,15 @@
  */
 package io.micronaut.docs.qualifiers.replaces.defaultimpl;
 
-import io.micronaut.context.BeanContext;
+import io.micronaut.context.ApplicationContext;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class DefaultImplementationSpec {
 
     @Test
     void testTheDefaultIsReplaced() {
-        BeanContext ctx = BeanContext.run();
+        ApplicationContext ctx = ApplicationContext.run();
         Assertions.assertTrue(ctx.getBean(ResponseStrategy.class) instanceof CustomResponseStrategy);
         ctx.close();
     }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -123,7 +123,7 @@ public AnnotationValue(String annotationName, Map<CharSequence, Object> values,
      * @param annotationName        The annotation name
      * @param values                The values
      * @param defaultValuesProvider The default values provider
-     * @since 4.3.0
+     * @since 4.2.0
      */
     @UsedByGeneratedCode
     @Internal

File: core-processor/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -530,12 +530,12 @@ public void visitAroundMethod(TypedElement beanType,
 
             String methodElementKey = methodElement.getName() +
                     Arrays.stream(methodElement.getSuspendParameters())
-                            .map(p -> p.getType().getName())
+                            .map(p -> toTypeString(p.getType()))
                             .collect(Collectors.joining(","));
 
             String overriddenByKey = overriddenBy.getName() +
                     Arrays.stream(methodElement.getSuspendParameters())
-                            .map(p -> p.getGenericType().getName())
+                            .map(p -> toTypeString(p.getGenericType()))
                             .collect(Collectors.joining(","));
 
             if (!methodElementKey.equals(overriddenByKey)) {
@@ -1623,7 +1623,7 @@ public MethodRef(String name, List<ParameterElement> parameterElements, Type ret
             this.name = name;
             this.argumentTypes = parameterElements.stream().map(ParameterElement::getType).toList();
             this.genericArgumentTypes = parameterElements.stream().map(ParameterElement::getGenericType).toList();
-            this.rawTypes = this.argumentTypes.stream().map(ClassElement::getName).toList();
+            this.rawTypes = this.argumentTypes.stream().map(AopProxyWriter::toTypeString).toList();
             this.returnType = returnType;
         }
 

File: core-processor/src/main/java/io/micronaut/inject/writer/ExecutableMethodsDefinitionWriter.java
Patch:
@@ -204,7 +204,7 @@ public int visitExecutableMethod(TypedElement declaringType,
         String methodKey = methodElement.getName() +
                 "(" +
                 Arrays.stream(methodElement.getSuspendParameters())
-                        .map(p -> p.getType().getName())
+                        .map(p -> toTypeString(p.getType()))
                         .collect(Collectors.joining(",")) +
                 ")";
 

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/EntityIntrospectedAnnotationMapper.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.inject.beans.visitor;
 
 import io.micronaut.core.annotation.AnnotationValue;
-import io.micronaut.core.annotation.AnnotationValueBuilder;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.annotation.ReflectiveAccess;
@@ -45,9 +44,9 @@ public String getName() {
 
     @Override
     public List<AnnotationValue<?>> map(AnnotationValue<Annotation> annotation, VisitorContext visitorContext) { // <1>
-        final AnnotationValueBuilder<Introspected> builder = AnnotationValue.builder(Introspected.class); // <2>
+        // <2>
         return Arrays.asList(
-                builder.build(),
+                AnnotationValue.builder(Introspected.class).build(),
                 AnnotationValue.builder(ReflectiveAccess.class).build()
         );
     }

File: test-suite/src/test/java/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -16,13 +16,13 @@
 package io.micronaut.docs.server.upload;
 
 // tag::class[]
+import io.micronaut.core.async.annotation.SingleResult;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Post;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import org.reactivestreams.Publisher;
 import reactor.core.publisher.Mono;
-import io.micronaut.core.async.annotation.SingleResult;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -35,7 +35,7 @@
 
 @Controller("/upload")
 public class UploadController {
-// end:class[]
+// end::class[]
 
     // tag::file[]
     @Post(value = "/", consumes = MULTIPART_FORM_DATA, produces = TEXT_PLAIN) // <1>

File: core/src/main/java/io/micronaut/core/annotation/AnnotationClassValue.java
Patch:
@@ -36,8 +36,9 @@ public final class AnnotationClassValue<T> implements CharSequence, Named {
      */
     public static final AnnotationClassValue<?>[] EMPTY_ARRAY = new AnnotationClassValue[0];
 
-    private final String name;
     final Class<T> theClass;
+
+    private final String name;
     private final T instance;
     private final boolean instantiated;
 

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -255,7 +255,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
 
             boolean variableSatisfied = uriVariables.isEmpty() || pathParams.keySet().containsAll(uriVariables);
             if (body != null && !variableSatisfied) {
-                if (body instanceof Map<?,?> map) {
+                if (body instanceof Map<?, ?> map) {
                     for (Map.Entry<?, ?> entry : map.entrySet()) {
                         String k = entry.getKey().toString();
                         Object v = entry.getValue();

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -408,7 +408,6 @@ public DefaultHttpClient() {
         this((URI) null, new DefaultHttpClientConfiguration());
     }
 
-
     /**
      * @param uri           The URI
      * @param configuration The {@link HttpClientConfiguration} object

File: http/src/main/java/io/micronaut/http/ssl/ServerSslConfiguration.java
Patch:
@@ -101,6 +101,7 @@ void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
      * @deprecated Please use {@code micronaut.server.ssl.port} instead ({@link ServerSslConfiguration#setPort(int)}).
      */
     @Override
+    @Deprecated
     @SuppressWarnings("deprecation")
     public void setPort(int port) {
         this.port = port;

File: inject-groovy/src/test/groovy/io/micronaut/inject/beanbuilder/TestBeanFactoryDefiningVisitor.java
Patch:
@@ -13,7 +13,7 @@ public class TestBeanFactoryDefiningVisitor implements TypeElementVisitor<Protot
 
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
-        if (element.hasAnnotation(Prototype.class)){
+        if (element.hasAnnotation(Prototype.class)) {
 
             context.getClassElement(TestBeanProducer.class)
                     .ifPresent((producer) -> {

File: inject-groovy/src/test/groovy/io/micronaut/inject/beanbuilder/TestMultipleFactoryDefiningVisitor.java
Patch:
@@ -13,7 +13,7 @@
 public class TestMultipleFactoryDefiningVisitor implements TypeElementVisitor<Prototype, Object> {
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
-        if (element.hasAnnotation(Prototype.class)){
+        if (element.hasAnnotation(Prototype.class)) {
 
             context.getClassElement(OtherBeanProducer.class)
                     .ifPresent((producer) -> {

File: inject-java/src/test/groovy/io/micronaut/inject/beanbuilder/TestBeanFactoryDefiningVisitor.java
Patch:
@@ -13,7 +13,7 @@ public class TestBeanFactoryDefiningVisitor implements TypeElementVisitor<Protot
 
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
-        if (element.hasAnnotation(Prototype.class)){
+        if (element.hasAnnotation(Prototype.class)) {
 
             context.getClassElement(TestBeanProducer.class)
                     .ifPresent((producer) -> {

File: inject-java/src/test/groovy/io/micronaut/inject/beanbuilder/TestMultipleFactoryDefiningVisitor.java
Patch:
@@ -13,7 +13,7 @@
 public class TestMultipleFactoryDefiningVisitor implements TypeElementVisitor<Prototype, Object> {
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
-        if (element.hasAnnotation(Prototype.class)){
+        if (element.hasAnnotation(Prototype.class)) {
 
             context.getClassElement(OtherBeanProducer.class)
                     .ifPresent((producer) -> {

File: inject/src/main/java/io/micronaut/inject/DelegatingExecutableMethod.java
Patch:
@@ -72,12 +72,12 @@ default Argument[] getArguments() {
     }
 
     @Override
-    default boolean isAbstract(){
+    default boolean isAbstract() {
         return getTarget().isAbstract();
     }
 
     @Override
-    default boolean isSuspend(){
+    default boolean isSuspend() {
         return getTarget().isSuspend();
     }
 

File: router/src/main/java/io/micronaut/web/router/DefaultUrlRouteInfo.java
Patch:
@@ -54,6 +54,7 @@ public final class DefaultUrlRouteInfo<T, R> extends DefaultRequestMatcher<T, R>
     private final ExecutorSelector executorSelector;
     private boolean noExecutor;
 
+    @SuppressWarnings("ParameterNumber")
     public DefaultUrlRouteInfo(HttpMethod httpMethod,
                                UriMatchTemplate uriMatchTemplate,
                                Charset defaultCharset,

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/PrimarySpec.java
Patch:
@@ -50,7 +50,7 @@ static void teardown() {
         if(client != null){
             client.close();
         }
-        if(embeddedServer != null){
+        if (embeddedServer != null) {
             embeddedServer.close();
         }
     }

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloClientSpec.java
Patch:
@@ -29,13 +29,13 @@
 @Property(name = "spec.name", value = "HelloControllerSpec")
 // tag::class[]
 @MicronautTest // <1>
-public class HelloClientSpec  {
+public class HelloClientSpec {
 
     @Inject
     HelloClient client; // <2>
 
     @Test
-    public void testHelloWorldResponse(){
+    public void testHelloWorldResponse() {
         assertEquals("Hello World", Mono.from(client.hello()).block());// <3>
     }
 }

File: test-suite/src/test/java/io/micronaut/test/messageBodyWriter/Bar.java
Patch:
@@ -3,5 +3,5 @@
 import io.micronaut.core.annotation.Introspected;
 
 @Introspected
-public record Bar(String name){
+public record Bar(String name) {
 }

File: test-suite/src/test/java/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -16,13 +16,13 @@
 package io.micronaut.docs.server.upload;
 
 // tag::class[]
+import io.micronaut.core.async.annotation.SingleResult;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Post;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import org.reactivestreams.Publisher;
 import reactor.core.publisher.Mono;
-import io.micronaut.core.async.annotation.SingleResult;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -35,7 +35,7 @@
 
 @Controller("/upload")
 public class UploadController {
-// end:class[]
+// end::class[]
 
     // tag::file[]
     @Post(value = "/", consumes = MULTIPART_FORM_DATA, produces = TEXT_PLAIN) // <1>

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ErrorHandlerFluxTest.java
Patch:
@@ -83,7 +83,7 @@ void testErrorHandlerWithFluxChunkedSignaledDelayedError() throws IOException {
         asserts(SPEC_NAME,
             HttpRequest.GET("/errors/flux-chunked-delayed-error"),
             (server, request) -> {
-                Executable e = () -> server.exchange(request);
+                Executable e = () -> server.exchange(request, String[].class);
                 Assertions.assertThrows(HttpClientException.class, e);
             });
     }

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/forms/FormsSubmissionsWithListsTest.java
Patch:
@@ -43,6 +43,7 @@
 })
 public class FormsSubmissionsWithListsTest {
     private static final String SPEC_NAME = "FormsSubmissionsWithListsTest";
+
     @Test
     public void formWithListOfOneItem() throws IOException {
         String body = "question=en+que+trabajas&usersId=1";

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -118,7 +118,7 @@ public abstract class HttpClientConfiguration {
 
     private Duration readIdleTimeout = Duration.of(DEFAULT_READ_IDLE_TIMEOUT_MINUTES, ChronoUnit.MINUTES);
 
-    private Duration connectionPoolIdleTimeout = Duration.ofSeconds(DEFAULT_CONNECTION_POOL_IDLE_TIMEOUT_SECONDS);
+    private Duration connectionPoolIdleTimeout = DEFAULT_CONNECTION_POOL_IDLE_TIMEOUT_SECONDS == 0 ? null : Duration.ofSeconds(DEFAULT_CONNECTION_POOL_IDLE_TIMEOUT_SECONDS);
 
     private Duration shutdownQuietPeriod = Duration.ofMillis(DEFAULT_SHUTDOWN_QUIET_PERIOD_MILLISECONDS);
 

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultNettyHttpClientRegistry.java
Patch:
@@ -590,7 +590,7 @@ public boolean equals(Object o) {
                 return false;
             }
             ClientKey clientKey = (ClientKey) o;
-            return httpVersion == clientKey.httpVersion &&
+            return Objects.equals(httpVersion, clientKey.httpVersion) &&
                     Objects.equals(clientId, clientKey.clientId) &&
                     Objects.equals(filterAnnotations, clientKey.filterAnnotations) &&
                     Objects.equals(path, clientKey.path) &&

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -247,7 +247,7 @@ private static NioEventLoopGroup createEventLoopGroup(HttpClientConfiguration co
             }
         } else {
             if (threadFactory != null) {
-                group = new NioEventLoopGroup(NettyThreadFactory.DEFAULT_EVENT_LOOP_THREADS, threadFactory);
+                group = new NioEventLoopGroup(NettyThreadFactory.getDefaultEventLoopThreads(), threadFactory);
             } else {
 
                 group = new NioEventLoopGroup();

File: http-netty/src/main/java/io/micronaut/http/netty/body/JsonCounter.java
Patch:
@@ -207,7 +207,7 @@ private void proceedUntilBuffering(ByteBuf buf) throws JsonSyntaxException {
 
         if (state == State.AFTER_UNWRAP_ARRAY) {
             // top-level array consumed. reject further data
-            skipWs(buf, i, end);
+            i = skipWs(buf, i, end);
             if (i < end) {
                 throw new JsonSyntaxException("Superfluous data after top-level array in streaming mode");
             }

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -34,7 +34,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD})
-@BeanProperties(accessKind = BeanProperties.AccessKind.METHOD, visibility = BeanProperties.Visibility.DEFAULT, allowWriteWithMultipleArgs = true, allowWriteWithZeroArgs = true)
+@BeanProperties(accessKind = BeanProperties.AccessKind.METHOD, visibility = BeanProperties.Visibility.DEFAULT, allowWriteWithMultipleArgs = true)
 public @interface ConfigurationBuilder {
 
     /**

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -66,6 +66,7 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
+import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import jakarta.annotation.Nonnull;
 import jakarta.annotation.PostConstruct;
@@ -401,7 +402,7 @@ static boolean hasDefaultValues(String annotation) {
      * @param defaultValues The default values
      */
     static void registerDefaultValues(String annotation, Map<CharSequence, Object> defaultValues) {
-        if (StringUtils.isNotEmpty(annotation)) {
+        if (StringUtils.isNotEmpty(annotation) && CollectionUtils.isNotEmpty(defaultValues)) {
             ANNOTATION_DEFAULTS.put(annotation, defaultValues);
         }
     }

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -60,6 +60,7 @@ public class IOUtils {
     private static final String SCHEME_FILE = "file";
     private static final String SCHEME_JAR = "jar";
     private static final String SCHEME_ZIP = "zip";
+    private static final String SCHEME_WSJAR = "wsjar";
 
     private static final String COLON = ":";
 
@@ -143,7 +144,7 @@ static Path resolvePath(@NonNull URI uri,
                             IOExceptionBiFunction<List<Closeable>, String, Path> loadNestedJarUriFunction) throws IOException {
         String scheme = uri.getScheme();
         try {
-            if (SCHEME_JAR.equals(scheme) || SCHEME_ZIP.equals(scheme)) {
+            if (SCHEME_JAR.equals(scheme) || SCHEME_ZIP.equals(scheme) || SCHEME_WSJAR.equals(scheme)) {
                 // try to match FileSystems.newFileSystem(URI) semantics for zipfs here.
                 // Basically ignores anything after the !/ if it exists, and uses the part
                 // before as the jar path to extract.

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -336,7 +336,9 @@ private void handleBuilder(
                     .onlyAccessible(classToBuild)
                     .onlyInstance()
                     .named(n -> Arrays.stream(writePrefixes).anyMatch(n::startsWith))
-                    .filter(m -> m.getGenericReturnType().getName().equals(builderType.getName()) && m.getParameters().length <= 1);
+                    .filter(m ->
+                        builderType.isAssignable(m.getGenericReturnType()) && m.getParameters().length <= 1
+                    );
                 builderType.getEnclosedElements(builderMethodQuery)
                     .forEach(builderWriter::visitBeanMethod);
                 writers.put(builderWriter.getBeanType().getClassName(), builderWriter);

File: inject/src/main/java/io/micronaut/inject/beans/AbstractInitializableBeanIntrospection.java
Patch:
@@ -442,7 +442,9 @@ private IntrospectionBuilderData getBuilderData() {
                         throw new IntrospectionException("No build method found in builder: " + builderClass.getName());
                     } else {
                         BeanMethod<Object, Object>[] builderMethods = beanMethods.stream()
-                            .filter(m -> m.getReturnType().getType().equals(builderIntrospection.getBeanType()))
+                            .filter(m ->
+                                m.getReturnType().getType().isAssignableFrom(builderIntrospection.getBeanType())
+                            )
                             .toArray(BeanMethod[]::new);
 
                         @NonNull Argument<?>[] arguments = Arrays.stream(builderMethods)

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -60,6 +60,7 @@ public class IOUtils {
     private static final String SCHEME_FILE = "file";
     private static final String SCHEME_JAR = "jar";
     private static final String SCHEME_ZIP = "zip";
+    private static final String SCHEME_WSJAR = "wsjar";
 
     private static final String COLON = ":";
 
@@ -143,7 +144,7 @@ static Path resolvePath(@NonNull URI uri,
                             IOExceptionBiFunction<List<Closeable>, String, Path> loadNestedJarUriFunction) throws IOException {
         String scheme = uri.getScheme();
         try {
-            if (SCHEME_JAR.equals(scheme) || SCHEME_ZIP.equals(scheme)) {
+            if (SCHEME_JAR.equals(scheme) || SCHEME_ZIP.equals(scheme) || SCHEME_WSJAR.equals(scheme)) {
                 // try to match FileSystems.newFileSystem(URI) semantics for zipfs here.
                 // Basically ignores anything after the !/ if it exists, and uses the part
                 // before as the jar path to extract.

File: context/src/main/java/io/micronaut/scheduling/processor/ScheduledMethodProcessor.java
Patch:
@@ -93,7 +93,6 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
         if (!(beanContext instanceof ApplicationContext)) {
             return;
         }
-
         List<AnnotationValue<Scheduled>> scheduledAnnotations = method.getAnnotationValuesByType(Scheduled.class);
         for (AnnotationValue<Scheduled> scheduledAnnotation : scheduledAnnotations) {
             String fixedRate = scheduledAnnotation.stringValue(MEMBER_FIXED_RATE).orElse(null);

File: core-processor/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -1337,7 +1337,7 @@ public void visitTypeArguments(Map<String, Map<String, ClassElement>> typeArgume
 
     @Override
     public boolean requiresMethodProcessing() {
-        return proxyBeanDefinitionWriter.requiresMethodProcessing();
+        return proxyBeanDefinitionWriter.requiresMethodProcessing() || (parentWriter != null && parentWriter.requiresMethodProcessing());
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3293,9 +3293,6 @@ private void readAllBeanDefinitionClasses() {
             if (beanDefinitionReference.isProxiedBean()) {
                 beanDefinitionProducer.referenceEnabled = false;
                 BeanDefinitionProducer proxyBeanProducer = new BeanDefinitionProducer(beanDefinitionReference);
-                if (beanDefinitionReference.requiresMethodProcessing()) {
-                    processedBeans.add(proxyBeanProducer);
-                }
                 // retain only if proxy target otherwise the target is never used
                 if (beanDefinitionReference.isProxyTarget()) {
                     proxyTargetBeans.add(proxyBeanProducer);

File: http/src/main/java/io/micronaut/http/CaseInsensitiveMutableHttpHeaders.java
Patch:
@@ -193,6 +193,9 @@ private static int verifyValidHeaderValueCharSequence(CharSequence value) {
         //  HTAB           = %x09 ; horizontal tab
         //  See: https://datatracker.ietf.org/doc/html/rfc7230#section-3.2
         //  And: https://datatracker.ietf.org/doc/html/rfc5234#appendix-B.1
+        if (value.isEmpty()) {
+            return -1;
+        }
         int b = value.charAt(0);
         if (b < 0x21 || b == 0x7F) {
             return 0;

File: inject/src/main/java/io/micronaut/context/annotation/Factory.java
Patch:
@@ -39,7 +39,7 @@
  * <p>Methods defined within the body of the class that are annotated with {@link Bean} will be exposed as beans.</p>
  *
  * <p>You can use a {@link jakarta.inject.Scope} annotation to control the scope the bean is exposed within. For example for a
- * singleton instance you can annotation the method with {@link Singleton}.</p>
+ * singleton instance you can annotate the method with {@link Singleton}.</p>
  *
  * <p>Methods annotated with {@link Bean} can accept arguments and Micronaut will attempt to inject those arguments from existing beans or values. For example:</p>
  *

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -1015,7 +1015,7 @@ public <T extends Annotation> List<AnnotationValue<T>> getAnnotationValuesByName
     }
 
     @NonNull
-    protected  <T extends Annotation> AnnotationValue<T> newAnnotationValue(String annotationType, Map<CharSequence, Object> values) {
+    protected <T extends Annotation> AnnotationValue<T> newAnnotationValue(String annotationType, Map<CharSequence, Object> values) {
         return new AnnotationValue<>(annotationType, values, AnnotationMetadataSupport.getDefaultValuesOrNull(annotationType));
     }
 

File: context/src/main/java/io/micronaut/logging/PropertiesLoggingLevelsConfigurer.java
Patch:
@@ -45,11 +45,12 @@
 @Context
 @Requires(beans = LoggingSystem.class)
 @Requires(beans = Environment.class)
-@Requires(property = PropertiesLoggingLevelsConfigurer.LOGGER_LEVELS_PROPERTY_PREFIX)
+@Requires(property = PropertiesLoggingLevelsConfigurer.LOGGER_PROPERTY_PREFIX)
 @Internal
 final class PropertiesLoggingLevelsConfigurer implements ApplicationEventListener<RefreshEvent> {
 
-    static final String LOGGER_LEVELS_PROPERTY_PREFIX = "logger.levels";
+    static final String LOGGER_PROPERTY_PREFIX = "logger";
+    static final String LOGGER_LEVELS_PROPERTY_PREFIX = LOGGER_PROPERTY_PREFIX + ".levels";
     private static final Logger LOGGER = LoggerFactory.getLogger(PropertiesLoggingLevelsConfigurer.class);
 
     private final Environment environment;

File: http-server/src/main/java/io/micronaut/http/server/RequestLifecycle.java
Patch:
@@ -288,7 +288,7 @@ private ExecutionFlow<MutableHttpResponse<?>> handleStatusException(MutableHttpR
 
     private ExecutionFlow<MutableHttpResponse<?>> handleStatusException(MutableHttpResponse<?> response, RouteInfo<?> routeInfo, PropagatedContext propagatedContext) {
         if (response.code() >= 400 && routeInfo != null && !routeInfo.isErrorRoute()) {
-            RouteMatch<Object> statusRoute = routeExecutor.findStatusRoute(request, response.status(), routeInfo);
+            RouteMatch<Object> statusRoute = routeExecutor.findStatusRoute(request, response.code(), routeInfo);
             if (statusRoute != null) {
                 return fulfillArguments(statusRoute)
                     .flatMap(rm -> routeExecutor.callRoute(propagatedContext, rm, request).flatMap(res -> handleStatusException(res, rm, propagatedContext)))

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -345,7 +345,7 @@ RouteMatch<?> findErrorRoute(Throwable cause,
         return errorRoute;
     }
 
-    RouteMatch<Object> findStatusRoute(HttpRequest<?> incomingRequest, HttpStatus status, RouteInfo<?> finalRoute) {
+    RouteMatch<Object> findStatusRoute(HttpRequest<?> incomingRequest, int status, RouteInfo<?> finalRoute) {
         Class<?> declaringType = finalRoute.getDeclaringType();
         // handle re-mapping of errors
         RouteMatch<Object> statusRoute = null;

File: core-processor/src/main/java/io/micronaut/context/visitor/ExecutableVisitor.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.Executable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.inject.ast.KotlinParameterElement;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.visitor.TypeElementVisitor;
@@ -41,7 +42,8 @@ public VisitorKind getVisitorKind() {
     @Override
     public void visitMethod(MethodElement element, VisitorContext context) {
         for (ParameterElement parameter : element.getParameters()) {
-            if (parameter.getType().isPrimitive() && parameter.isNullable()) {
+            if (parameter.getType().isPrimitive() && parameter.isNullable()
+                && !(parameter instanceof KotlinParameterElement kotlinParameterElement && kotlinParameterElement.hasDefault())) {
                 context.warn("@Nullable on primitive types will allow the method to be executed at runtime with null values, causing an exception", parameter);
             }
         }

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -982,7 +982,7 @@ public String expand(Map<String, Object> parameters, boolean previousHasContent,
                     }
 
                     if (found instanceof Iterable iterable) {
-                        Iterable iter =iterable;
+                        Iterable iter = iterable;
                         if (iter instanceof Collection collection && collection.isEmpty()) {
                             return "";
                         }

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ErrorHandlerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Introspected;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpHeaders;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/QueryParamClientWebSocket.java
Patch:
@@ -1,6 +1,7 @@
 package io.micronaut.http.server.netty.websocket;
 
 import io.micronaut.http.HttpRequest;
+import io.micronaut.http.annotation.QueryValue;
 import io.micronaut.websocket.WebSocketSession;
 import io.micronaut.websocket.annotation.ClientWebSocket;
 import io.micronaut.websocket.annotation.OnMessage;
@@ -14,7 +15,7 @@ public class QueryParamClientWebSocket {
     private String dinner;
 
     @OnOpen
-    public void onOpen(String dinner, WebSocketSession session, HttpRequest request) { // <3>
+    public void onOpen(@QueryValue String dinner, WebSocketSession session, HttpRequest request) { // <3>
         this.session = session;
         this.request = request;
         this.dinner = dinner;

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicAbstractMethodVisitor.java
Patch:
@@ -33,7 +33,9 @@
  * @author graemerocher
  * @see javax.lang.model.util.AbstractTypeVisitor8
  * @since 1.0
+ * @deprecated No longer used
  */
+@Deprecated(forRemoval = true)
 public abstract class PublicAbstractMethodVisitor<R, P> extends PublicMethodVisitor<R, P> {
 
     private final TypeElement classElement;

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicMethodVisitor.java
Patch:
@@ -31,7 +31,9 @@
  * @author graemerocher
  * @see javax.lang.model.util.AbstractTypeVisitor8
  * @since 1.0
+ * @deprecated No longer used
  */
+@Deprecated(forRemoval = true)
 public abstract class PublicMethodVisitor<R, P> extends SuperclassAwareTypeVisitor<R, P> {
 
     /**

File: inject/src/main/java/io/micronaut/context/SingletonScope.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.stream.Stream;
 
 /**
  * The singleton scope implementation.
@@ -146,8 +145,8 @@ Collection<BeanRegistration> getBeanRegistrations() {
     Collection<BeanRegistration<?>> getBeanRegistrations(@NonNull Qualifier<?> qualifier) {
         List<BeanRegistration<?>> beanRegistrations = new ArrayList<>();
         for (BeanRegistration<?> beanRegistration : singletonByBeanDefinition.values()) {
-            BeanDefinition beanDefinition = beanRegistration.beanDefinition;
-            if (qualifier.reduce(beanDefinition.getBeanType(), Stream.of(beanDefinition)).findFirst().isPresent()) {
+            BeanDefinition<Object> beanDefinition = (BeanDefinition<Object>) beanRegistration.beanDefinition;
+            if (((Qualifier<Object>) qualifier).doesQualify(beanDefinition.getBeanType(), beanDefinition)) {
                 beanRegistrations.add(beanRegistration);
             }
         }

File: context/src/main/java/io/micronaut/runtime/beans/MapperIntroduction.java
Patch:
@@ -175,7 +175,7 @@ private Map<String, Function<Object, BiConsumer<Object, BeanIntrospection.Builde
                     MutableAnnotationMetadata annotationMetadata = new MutableAnnotationMetadata();
                     annotationMetadata.addAnnotation(Format.class.getName(), Map.of(AnnotationMetadata.VALUE_MEMBER, format));
                     conversionContext = conversionContext.with(new AnnotationMetadataHierarchy(argument.getAnnotationMetadata(), annotationMetadata));
-                } else if (conflictStrategy == Mapper.ConflictStrategy.CONVERT) {
+                } else if (conflictStrategy == Mapper.ConflictStrategy.CONVERT || conflictStrategy == null) {
                     conversionContext = ConversionContext.of(argument);
                 }
 

File: inject/src/main/java/io/micronaut/context/annotation/Mapper.java
Patch:
@@ -32,7 +32,7 @@
  * @since 4.1.0
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.METHOD, ElementType.TYPE })
 @Experimental
 public @interface Mapper {
 
@@ -50,7 +50,7 @@
      * The mappings.
      */
     @Retention(RetentionPolicy.RUNTIME)
-    @Target(ElementType.METHOD)
+    @Target({ ElementType.METHOD, ElementType.TYPE })
     @Repeatable(value = Mapper.class)
     @interface Mapping {
         String MEMBER_TO = "to";

File: core-processor/src/main/java/io/micronaut/inject/processing/AopIntroductionProxySupportedBeanElementCreator.java
Patch:
@@ -43,6 +43,8 @@ protected BeanDefinitionVisitor createBeanDefinitionVisitor() {
             throw new ProcessingException(classElement, "Cannot apply AOP advice to final class. Class must be made non-final to support proxying: " + classElement.getName());
         }
         aopProxyVisitor = createIntroductionAopProxyWriter(classElement, visitorContext);
+        aopProxyVisitor.visitTypeArguments(classElement.getAllTypeArguments());
+        visitAnnotationMetadata(aopProxyVisitor, classElement.getAnnotationMetadata());
         beanDefinitionWriters.add(aopProxyVisitor);
         MethodElement constructorElement = classElement.getPrimaryConstructor().orElse(null);
         if (constructorElement != null) {

File: aop/src/main/java/io/micronaut/aop/chain/DefaultInterceptorRegistry.java
Patch:
@@ -87,7 +87,7 @@ public DefaultInterceptorRegistry(BeanContext beanContext) {
                 false
         );
         if (LOG.isTraceEnabled()) {
-            LOG.trace("Resolved {} {} interceptors out of a possible {} for method: {} - {}", resolvedInterceptors.length, interceptorKind, interceptors.size(), method.getDeclaringType(), method instanceof Described ? ((Described) method).getDescription(true) : method.toString());
+            LOG.trace("Resolved {} {} interceptors out of a possible {} for method: {} - {}", resolvedInterceptors.length, interceptorKind, interceptors.size(), method.getDeclaringType(), method instanceof Described d ? d.getDescription(true) : method.toString());
             for (int i = 0; i < resolvedInterceptors.length; i++) {
                 Interceptor<?, ?> resolvedInterceptor = resolvedInterceptors[i];
                 LOG.trace("Interceptor {} - {}", i, resolvedInterceptor);

File: aop/src/main/java/io/micronaut/aop/internal/intercepted/KotlinInterceptedMethodImpl.java
Patch:
@@ -154,8 +154,8 @@ public Object interceptResult(Interceptor<?, ?> from) {
     @Override
     public Object handleResult(Object result) {
         CompletionStage<?> completionStageResult;
-        if (result instanceof CompletionStage) {
-            completionStageResult = (CompletionStage<?>) result;
+        if (result instanceof CompletionStage stage) {
+            completionStageResult = stage;
         } else {
             throw new IllegalStateException("Cannot convert " + result + "  to 'java.util.concurrent.CompletionStage'");
         }

File: aop/src/main/java/io/micronaut/aop/internal/intercepted/PublisherInterceptedMethod.java
Patch:
@@ -121,8 +121,8 @@ protected Publisher<?> convertToPublisher(Object result) {
         if (result == null) {
             return Publishers.empty();
         }
-        if (result instanceof Publisher) {
-            return (Publisher<?>) result;
+        if (result instanceof Publisher publisher) {
+            return publisher;
         }
         return conversionService
                 .convert(result, Publisher.class)

File: benchmarks/src/jmh/java/io/micronaut/supplier/SupplierBenchmark.java
Patch:
@@ -78,7 +78,7 @@ private synchronized T initialize() {
                     if (value == null) {
                         return null;
                     }
-                    if (value instanceof Optional && !((Optional) value).isPresent()) {
+                    if (value instanceof Optional optional && !optional.isPresent()) {
                         return value;
                     }
                     delegate = () -> value;

File: context-propagation/src/main/java/io/micronaut/context/propagation/instrument/execution/ExecutorServiceInstrumenter.java
Patch:
@@ -48,11 +48,11 @@ public ExecutorService onCreated(BeanCreatedEvent<ExecutorService> event) {
         Class<ExecutorService> beanType = event.getBeanDefinition().getBeanType();
         if (beanType == ExecutorService.class) {
             ExecutorService executorService = event.getBean();
-            if (executorService instanceof ScheduledExecutorService) {
+            if (executorService instanceof ScheduledExecutorService service) {
                 return new InstrumentedScheduledExecutorService() {
                     @Override
                     public ScheduledExecutorService getTarget() {
-                        return (ScheduledExecutorService) executorService;
+                        return service;
                     }
 
                     @Override

File: context/src/main/java/io/micronaut/logging/PropertiesLoggingLevelsConfigurer.java
Patch:
@@ -97,7 +97,7 @@ private void configureLogLevels() {
 
     private void configureLogLevelForPrefix(final String loggerPrefix, final Object levelValue) {
         final LogLevel newLevel;
-        if (levelValue instanceof Boolean && !((boolean) levelValue)) {
+        if (levelValue instanceof Boolean boolean1 && !boolean1) {
             newLevel = LogLevel.OFF; // SnakeYAML converts OFF (without quotations) to a boolean false value, hence we need to handle that here...
         } else {
             newLevel = toLogLevel(levelValue.toString());

File: context/src/main/java/io/micronaut/logging/impl/LogbackUtils.java
Patch:
@@ -119,7 +119,7 @@ private static void programmaticConfiguration(@NonNull LoggerContext context,
             configurator.setContext(context);
             configurator.configure(context);
         } catch (Exception e) {
-            throw new LoggingSystemException(String.format("Failed to initialize Configurator: %s using ServiceLoader", configurator.getClass().getCanonicalName()), e);
+            throw new LoggingSystemException("Failed to initialize Configurator: %s using ServiceLoader".formatted(configurator.getClass().getCanonicalName()), e);
         }
     }
 }

File: context/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java
Patch:
@@ -111,13 +111,13 @@ public DefaultWatchThread start() {
                                         }
                                     } else {
                                         final Object context = watchEvent.context();
-                                        if (context instanceof Path) {
+                                        if (context instanceof Path path) {
 
                                             if (LOG.isDebugEnabled()) {
                                                 LOG.debug("File at path {} changed. Firing change event: {}", context, kind);
                                             }
                                             eventPublisher.publishEvent(new FileChangedEvent(
-                                                    (Path) context,
+                                                    path,
                                                     kind
                                             ));
                                         }

File: core-processor/src/main/java/io/micronaut/inject/ast/PrimitiveElement.java
Patch:
@@ -131,7 +131,7 @@ public static PrimitiveElement valueOf(String name) {
                 return element;
             }
         }
-        throw new IllegalArgumentException(String.format("No primitive found for name: %s", name));
+        throw new IllegalArgumentException("No primitive found for name: %s".formatted(name));
     }
 
     @Override

File: core-processor/src/main/java/io/micronaut/inject/ast/ReflectGenericPlaceholderElement.java
Patch:
@@ -68,8 +68,8 @@ public String getVariableName() {
     @Override
     public Optional<Element> getDeclaringElement() {
         GenericDeclaration declaration = type.getGenericDeclaration();
-        if (declaration instanceof Class) {
-            return Optional.of(ClassElement.of((Class<?>) declaration));
+        if (declaration instanceof Class class1) {
+            return Optional.of(ClassElement.of(class1));
         } else {
             return Optional.empty();
         }

File: core-processor/src/main/java/io/micronaut/inject/ast/utils/EnclosedElementsQuery.java
Patch:
@@ -126,7 +126,7 @@ public <T extends io.micronaut.inject.ast.Element> List<T> getEnclosedElements(C
                 if (element.isPrivate() || element.getName().startsWith("$")) {
                     return false;
                 }
-                if (element instanceof MemberElement && !((MemberElement) element).isAccessible()) {
+                if (element instanceof MemberElement memberElement && !memberElement.isAccessible()) {
                     return false;
                 }
             }

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -359,8 +359,8 @@ private void processElement(boolean metadata,
             AnnotationMetadata annotationMetadata;
             if (metadata) {
                 annotationMetadata = beanProperty.getTargetAnnotationMetadata();
-                if (annotationMetadata instanceof AnnotationMetadataHierarchy) {
-                    annotationMetadata = ((AnnotationMetadataHierarchy) annotationMetadata).merge();
+                if (annotationMetadata instanceof AnnotationMetadataHierarchy hierarchy) {
+                    annotationMetadata = hierarchy.merge();
                 }
             } else {
                 annotationMetadata = AnnotationMetadata.EMPTY_METADATA;

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -112,8 +112,7 @@ protected void writeGetAnnotationMetadataMethod(ClassWriter classWriter) {
         AnnotationMetadata annotationMetadata = this.annotationMetadata.getTargetAnnotationMetadata();
         if (annotationMetadata.isEmpty()) {
             annotationMetadataMethod.getStatic(Type.getType(AnnotationMetadata.class), FIELD_EMPTY_METADATA, Type.getType(AnnotationMetadata.class));
-        } else if (annotationMetadata instanceof AnnotationMetadataReference) {
-            AnnotationMetadataReference reference = (AnnotationMetadataReference) annotationMetadata;
+        } else if (annotationMetadata instanceof AnnotationMetadataReference reference) {
             String className = reference.getClassName();
             annotationMetadataMethod.getStatic(getTypeReferenceForName(className), AbstractAnnotationMetadataWriter.FIELD_ANNOTATION_METADATA, Type.getType(AnnotationMetadata.class));
         } else {

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -193,8 +193,7 @@ private ClassWriter generateClassBytes() {
         // 3: annotationMetadata
         if (annotationMetadata == AnnotationMetadata.EMPTY_METADATA || annotationMetadata.isEmpty()) {
             cv.getStatic(Type.getType(AnnotationMetadata.class), "EMPTY_METADATA", Type.getType(AnnotationMetadata.class));
-        } else if (annotationMetadata instanceof AnnotationMetadataReference) {
-            AnnotationMetadataReference reference = (AnnotationMetadataReference) annotationMetadata;
+        } else if (annotationMetadata instanceof AnnotationMetadataReference reference) {
             String className = reference.getClassName();
             cv.getStatic(getTypeReferenceForName(className), AbstractAnnotationMetadataWriter.FIELD_ANNOTATION_METADATA, Type.getType(AnnotationMetadata.class));
         } else {

File: core-reactive/src/main/java/io/micronaut/core/async/converters/ReactiveTypeConverterRegistrar.java
Patch:
@@ -33,8 +33,8 @@ public class ReactiveTypeConverterRegistrar implements TypeConverterRegistrar {
     @Override
     public void register(MutableConversionService conversionService) {
         conversionService.addConverter(Object.class, Publisher.class, obj -> {
-            if (obj instanceof Publisher) {
-                return (Publisher) obj;
+            if (obj instanceof Publisher publisher) {
+                return publisher;
             } else {
                 return Publishers.just(obj);
             }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -1333,8 +1333,8 @@ private String toStringValue(Object object) {
         if (object == null) {
             return "null";
         }
-        if (object instanceof Object[]) {
-            return Arrays.deepToString((Object[]) object);
+        if (object instanceof Object[] object1s) {
+            return Arrays.deepToString(object1s);
         }
         return object.toString();
     }

File: core/src/main/java/io/micronaut/core/convert/exceptions/ConversionErrorException.java
Patch:
@@ -64,6 +64,6 @@ public ConversionError getConversionError() {
     }
 
     private static String buildMessage(Argument argument, ConversionError conversionError) {
-        return String.format("Failed to convert argument [%s] for value [%s] due to: %s", argument.getName(), conversionError.getOriginalValue().orElse(null), conversionError.getCause().getMessage());
+        return "Failed to convert argument [%s] for value [%s] due to: %s".formatted(argument.getName(), conversionError.getOriginalValue().orElse(null), conversionError.getCause().getMessage());
     }
 }

File: core/src/main/java/io/micronaut/core/io/UrlReadable.java
Patch:
@@ -56,8 +56,8 @@ public InputStream asInputStream() throws IOException {
         try {
             return con.getInputStream();
         } catch (IOException ex) {
-            if (con instanceof HttpURLConnection) {
-                ((HttpURLConnection) con).disconnect();
+            if (con instanceof HttpURLConnection connection) {
+                connection.disconnect();
             }
             throw ex;
         }

File: core/src/main/java/io/micronaut/core/type/TypeInformation.java
Patch:
@@ -252,8 +252,7 @@ public int hashCode() {
 
             @Override
             public boolean equals(Object o) {
-                if (o instanceof ParameterizedType) {
-                    ParameterizedType that = (ParameterizedType) o;
+                if (o instanceof ParameterizedType that) {
                     if (this == that) {
                         return true;
                     }

File: core/src/main/java/io/micronaut/core/util/clhm/LinkedDeque.java
Patch:
@@ -187,7 +187,7 @@ public void clear() {
 
     @Override
     public boolean contains(Object o) {
-        return (o instanceof Linked<?>) && contains((Linked<?>) o);
+        return (o instanceof Linked<?> l) && contains(l);
     }
 
     // A fast-path containment check

File: core/src/main/java/io/micronaut/core/util/clhm/Weighers.java
Patch:
@@ -263,8 +263,8 @@ private enum IterableWeigher implements Weigher<Iterable<?>> {
 
         @Override
         public int weightOf(Iterable<?> values) {
-            if (values instanceof Collection<?>) {
-                return ((Collection<?>) values).size();
+            if (values instanceof Collection<?> collection) {
+                return collection.size();
             }
             int size = 0;
             for (Iterator<?> i = values.iterator(); i.hasNext();) {

File: discovery-core/src/main/java/io/micronaut/discovery/DefaultServiceInstanceIdGenerator.java
Patch:
@@ -48,8 +48,7 @@ public String generateId(Environment environment, ServiceInstance serviceInstanc
             String applicationName = serviceInstance.getId();
 
             joiner.add(applicationName);
-            if (serviceInstance instanceof EmbeddedServerInstance) {
-                EmbeddedServerInstance esi = (EmbeddedServerInstance) serviceInstance;
+            if (serviceInstance instanceof EmbeddedServerInstance esi) {
                 Optional<String> id = esi.getEmbeddedServer().getApplicationConfiguration().getInstance().getId();
                 if (id.isPresent()) {
                     joiner.add(id.get());

File: discovery-core/src/main/java/io/micronaut/discovery/registration/AutoRegistration.java
Patch:
@@ -60,8 +60,7 @@ public void onApplicationEvent(AbstractServiceInstanceEvent event) {
                 if (registrationConfiguration.isDeregister()) {
                     deregister(event.getSource());
                 }
-            } else if (event instanceof HeartbeatEvent) {
-                HeartbeatEvent heartbeatEvent = (HeartbeatEvent) event;
+            } else if (event instanceof HeartbeatEvent heartbeatEvent) {
                 pulsate(event.getSource(), heartbeatEvent.getStatus());
             }
         }

File: function/src/main/java/io/micronaut/function/executor/AbstractExecutor.java
Patch:
@@ -116,8 +116,8 @@ protected ApplicationContext buildApplicationContext(@Nullable C context) {
      */
     protected Environment startEnvironment(ApplicationContext applicationContext) {
         if (!applicationContext.isRunning()) {
-            if (this instanceof PropertySource) {
-                applicationContext.getEnvironment().addPropertySource((PropertySource) this);
+            if (this instanceof PropertySource source) {
+                applicationContext.getEnvironment().addPropertySource(source);
             }
 
             return applicationContext

File: http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java
Patch:
@@ -144,7 +144,7 @@ default <I, O, E> O retrieve(HttpRequest<I> request, Argument<O> bodyType, Argum
             Optional<O> body = response.getBody();
             if (!body.isPresent() && response.getBody(Argument.of(byte[].class)).isPresent()) {
                 throw new HttpClientResponseException(
-                        String.format("Failed to decode the body for the given content type [%s]", response.getContentType().orElse(null)),
+                "Failed to decode the body for the given content type [%s]".formatted(response.getContentType().orElse(null)),
                         response
                 );
             } else {

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -167,7 +167,7 @@ default <I, O, E> Publisher<O> retrieve(@NonNull HttpRequest<I> request, @NonNul
                 Optional<O> body = response.getBody();
                 if (!body.isPresent() && response.getBody(byte[].class).isPresent()) {
                     throw new HttpClientResponseException(
-                            String.format("Failed to decode the body for the given content type [%s]", response.getContentType().orElse(null)),
+                    "Failed to decode the body for the given content type [%s]".formatted(response.getContentType().orElse(null)),
                             response
                     );
                 } else {

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyRequestOptions.java
Patch:
@@ -56,8 +56,8 @@ public boolean isRetainHostHeader() {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof ProxyRequestOptions &&
-                isRetainHostHeader() == ((ProxyRequestOptions) o).isRetainHostHeader();
+        return o instanceof ProxyRequestOptions pro &&
+                isRetainHostHeader() == pro.isRetainHostHeader();
     }
 
     @Override

File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -108,8 +108,7 @@ ApplicationEventListener<ServerStartupEvent> healthCheckStarter(@Parameter Servi
                                 URI healthCheckURI = originalURI.resolve(configuration.getHealthCheckUri());
                                 return Flux.from(httpClient.exchange(HttpRequest.GET(healthCheckURI)))
                                         .onErrorResume(throwable -> {
-                                            if (throwable instanceof HttpClientResponseException) {
-                                                HttpClientResponseException responseException = (HttpClientResponseException) throwable;
+                                            if (throwable instanceof HttpClientResponseException responseException) {
                                                 return Flux.just((HttpResponse<ByteBuffer>) responseException.getResponse());
                                             }
                                             return Flux.just(HttpResponse.serverError());

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultNettyHttpClientRegistry.java
Patch:
@@ -391,8 +391,8 @@ private DefaultHttpClient getClient(ClientKey key, BeanContext beanContext, Anno
                 List<MediaTypeCodec> codecs = new ArrayList<>(2);
                 MediaTypeCodecRegistry codecRegistry = client.getMediaTypeCodecRegistry();
                 for (MediaTypeCodec codec : codecRegistry.getCodecs()) {
-                    if (codec instanceof MapperMediaTypeCodec) {
-                        codecs.add(((MapperMediaTypeCodec) codec).cloneWithFeatures(jsonFeatures));
+                    if (codec instanceof MapperMediaTypeCodec typeCodec) {
+                        codecs.add(typeCodec.cloneWithFeatures(jsonFeatures));
                     } else {
                         codecs.add(codec);
                     }

File: http-client/src/main/java/io/micronaut/http/client/netty/MutableHttpRequestWrapper.java
Patch:
@@ -52,8 +52,8 @@ final class MutableHttpRequestWrapper<B> extends HttpRequestWrapper<B> implement
     }
 
     static MutableHttpRequest<?> wrapIfNecessary(ConversionService conversionService, HttpRequest<?> request) {
-        if (request instanceof MutableHttpRequest<?>) {
-            return (MutableHttpRequest<?>) request;
+        if (request instanceof MutableHttpRequest<?> httpRequest) {
+            return httpRequest;
         } else {
             return new MutableHttpRequestWrapper<>(conversionService, request);
         }

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/NettyClientSslBuilder.java
Patch:
@@ -169,7 +169,7 @@ protected TrustManagerFactory getTrustManagerFactory(SslConfiguration ssl) {
             if (this.getTrustStore(ssl).isPresent()) {
                 return super.getTrustManagerFactory(ssl);
             } else {
-                if (ssl instanceof AbstractClientSslConfiguration && ((AbstractClientSslConfiguration) ssl).isInsecureTrustAllCertificates()) {
+                if (ssl instanceof AbstractClientSslConfiguration configuration && configuration.isInsecureTrustAllCertificates()) {
                     if (LOG.isWarnEnabled()) {
                         LOG.warn("HTTP Client is configured to trust all certificates ('insecure-trust-all-certificates' is set to true). Trusting all certificates is not secure and should not be used in production.");
                     }

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyServerWebSocketBroadcaster.java
Patch:
@@ -109,9 +109,9 @@ public <T> Publisher<T> broadcast(T message, MediaType mediaType, Predicate<WebS
      */
     @Nullable
     private Throwable extractBroadcastFailure(Throwable failure) {
-        if (failure instanceof ChannelGroupException) {
+        if (failure instanceof ChannelGroupException exception) {
             Throwable singleCause = null;
-            for (Map.Entry<Channel, Throwable> entry : (ChannelGroupException) failure) {
+            for (Map.Entry<Channel, Throwable> entry : exception) {
                 Throwable entryCause = extractBroadcastFailure(entry.getValue());
                 if (entryCause != null) {
                     if (singleCause == null) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -67,8 +67,8 @@ public void add(ByteBufHolder message, Collection<Object> out) {
     }
 
     private long resolveLength(ByteBufHolder message) {
-        if (message instanceof HttpData) {
-            return ((HttpData) message).length();
+        if (message instanceof HttpData data) {
+            return data.length();
         } else {
             return message.content().readableBytes();
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/IdentityWrapper.java
Patch:
@@ -32,7 +32,7 @@ final class IdentityWrapper {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof IdentityWrapper && ((IdentityWrapper) o).object == this.object;
+        return o instanceof IdentityWrapper iw && iw.object == this.object;
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -753,8 +753,7 @@ public void setConversionService(ConversionService conversionService) {
 
         @Override
         public MutableHttpRequest<T> cookie(Cookie cookie) {
-            if (cookie instanceof NettyCookie) {
-                NettyCookie nettyCookie = (NettyCookie) cookie;
+            if (cookie instanceof NettyCookie nettyCookie) {
                 String value = ClientCookieEncoder.LAX.encode(nettyCookie.getNettyCookie());
                 headers.add(HttpHeaderNames.COOKIE, value);
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -381,9 +381,9 @@ public int getPort() {
             // started already, just use the localAddress() of each channel
             for (Listener listener : listenersLocal) {
                 SocketAddress localAddress = listener.serverChannel.localAddress();
-                if (localAddress instanceof InetSocketAddress) {
+                if (localAddress instanceof InetSocketAddress address) {
                     // found one \o/
-                    return ((InetSocketAddress) localAddress).getPort();
+                    return address.getPort();
                 } else {
                     hasUnix = true;
                 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/SmartHttpContentCompressor.java
Patch:
@@ -58,8 +58,7 @@ public boolean shouldSkip(HttpResponse response) {
 
     @Override
     protected void encode(ChannelHandlerContext ctx, HttpObject msg, List<Object> out) throws Exception {
-        if (msg instanceof HttpResponse) {
-            HttpResponse res = (HttpResponse) msg;
+        if (msg instanceof HttpResponse res) {
             skipEncoding = shouldSkip(res);
         }
         super.encode(ctx, msg, out);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/body/SystemFileBodyWriter.java
Patch:
@@ -102,7 +102,7 @@ public void writeTo(HttpRequest<?> request, MutableHttpResponse<SystemFile> resp
                             position = range.firstPos;
                             contentLength = range.lastPos + 1 - range.firstPos;
                             response.status(HttpStatus.PARTIAL_CONTENT);
-                            response.header(CONTENT_RANGE, String.format("%s %d-%d/%d", UNIT_BYTES, range.firstPos, range.lastPos, fileLength));
+                            response.header(CONTENT_RANGE, "%s %d-%d/%d".formatted(UNIT_BYTES, range.firstPos, range.lastPos, fileLength));
                         }
                     }
                     response.header(HttpHeaders.ACCEPT_RANGES, UNIT_BYTES);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/BuildSelfSignedCondition.java
Patch:
@@ -35,8 +35,7 @@ abstract class BuildSelfSignedCondition implements Condition {
     @Override
     public boolean matches(ConditionContext context) {
         BeanContext beanContext = context.getBeanContext();
-        if (beanContext instanceof PropertyResolver) {
-            PropertyResolver resolver = (PropertyResolver) beanContext;
+        if (beanContext instanceof PropertyResolver resolver) {
 
             boolean deprecated = enabledForPrefix(resolver, SslConfiguration.PREFIX);
             boolean server = enabledForPrefix(resolver, ServerSslConfiguration.PREFIX);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/SslEnabledCondition.java
Patch:
@@ -36,8 +36,7 @@ class SslEnabledCondition  implements Condition {
     @Override
     public boolean matches(ConditionContext context) {
         BeanContext beanContext = context.getBeanContext();
-        if (beanContext instanceof PropertyResolver) {
-            PropertyResolver resolver = (PropertyResolver) beanContext;
+        if (beanContext instanceof PropertyResolver resolver) {
 
             boolean deprecated = enabledForPrefix(resolver, SslConfiguration.PREFIX);
             boolean server = enabledForPrefix(resolver, ServerSslConfiguration.PREFIX);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketHandler.java
Patch:
@@ -321,8 +321,7 @@ public void onComplete() {
     protected Object invokeExecutable(BoundExecutable boundExecutable, MethodExecutionHandle<?, ?> messageHandler) {
         if (coroutineHelper != null) {
             Executable<?, ?> target = boundExecutable.getTarget();
-            if (target instanceof ExecutableMethod<?, ?>) {
-                ExecutableMethod<?, ?> executableMethod = (ExecutableMethod<?, ?>) target;
+            if (target instanceof ExecutableMethod<?, ?> executableMethod) {
                 if (executableMethod.isSuspend()) {
                     return Flux.deferContextual(ctx -> {
                         try {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -241,8 +241,8 @@ protected ChannelFuture handleHandshake(ChannelHandlerContext ctx, NettyHttpRequ
         handshaker = wsFactory.newHandshaker(req.getNativeRequest());
         MutableHttpHeaders headers = response.getHeaders();
         io.netty.handler.codec.http.HttpHeaders nettyHeaders;
-        if (headers instanceof NettyHttpHeaders) {
-            nettyHeaders = ((NettyHttpHeaders) headers).getNettyHeaders();
+        if (headers instanceof NettyHttpHeaders httpHeaders) {
+            nettyHeaders = httpHeaders.getNettyHeaders();
         } else {
             nettyHeaders = new DefaultHttpHeaders();
             for (Map.Entry<String, List<String>> entry : headers) {

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ErrorHandlerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Introspected;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpHeaders;

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/filter/HttpServerFilterTest.java
Patch:
@@ -96,8 +96,8 @@ static class SecurityFilter implements HttpServerFilter {
         @Override
         public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
             RouteMatch<?> routeMatch = request.getAttribute(HttpAttributes.ROUTE_MATCH, RouteMatch.class).orElse(null);
-            if (routeMatch instanceof MethodBasedRouteMatch) {
-                MethodBasedRouteMatch<?, ?> methodRoute = ((MethodBasedRouteMatch) routeMatch);
+            if (routeMatch instanceof MethodBasedRouteMatch match) {
+                MethodBasedRouteMatch<?, ?> methodRoute = match;
                 if (methodRoute.hasAnnotation(RolesAllowed.class)) {
                     String role = request.getHeaders().get(HttpHeaders.AUTHORIZATION);
                     if (role == null) {

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -478,8 +478,8 @@ private ExecutionFlow<MutableHttpResponse<?>> executeRouteAndConvertBody(Propaga
             try {
                 requestArgumentSatisfier.fulfillArgumentRequirementsAfterFilters(routeMatch, httpRequest);
                 Object body = ServerRequestContext.with(httpRequest, (Supplier<Object>) routeMatch::execute);
-                if (body instanceof Optional) {
-                    body = ((Optional<?>) body).orElse(null);
+                if (body instanceof Optional optional) {
+                    body = optional.orElse(null);
                 }
                 return createResponseForBody(propagatedContext, httpRequest, body, routeMatch.getRouteInfo(), routeMatch);
             } catch (Throwable e) {

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -145,8 +145,8 @@ public <T> byte[] encode(T object) {
     @Override
     public <T, B> ByteBuffer<B> encode(T object, ByteBufferFactory<?, B> allocator) {
         Event<Object> event;
-        if (object instanceof Event) {
-            event = (Event<Object>) object;
+        if (object instanceof Event event1) {
+            event = event1;
         } else {
             event = Event.of(object);
         }

File: http-tck/src/main/java/io/micronaut/http/tck/BodyAssertion.java
Patch:
@@ -213,7 +213,7 @@ public String render(byte[] value) {
             }
             String firstTen = IntStream.range(0, value.length)
                 .map(i -> value[i] & 0xff)
-                .mapToObj(i -> String.format("%02x", i))
+                .mapToObj(i -> "%02x".formatted(i))
                 .limit(10)
                 .collect(Collectors.joining(", ", "", "..."));
             return "ByteArray(length=" + value.length + ", [" + firstTen + "])";

File: http-validation/src/main/java/io/micronaut/validation/routes/rules/MissingParameterRule.java
Patch:
@@ -69,7 +69,7 @@ public RouteValidationResult validate(List<UriMatchTemplate> templates, Paramete
 
         for (String v: variables) {
             if (!routeVariables.contains(v)) {
-                errorMessages.add(String.format("The route declares a uri variable named [%s], but no corresponding method argument is present", v));
+                errorMessages.add("The route declares a uri variable named [%s], but no corresponding method argument is present".formatted(v));
             }
         }
 

File: http-validation/src/main/java/io/micronaut/validation/routes/rules/NullableParameterRule.java
Patch:
@@ -97,7 +97,7 @@ public RouteValidationResult validate(List<UriMatchTemplate> templates, Paramete
                             ClassElement type = p.getType();
                             boolean hasDefaultValue = p.findAnnotation(Bindable.class).flatMap(av -> av.stringValue("defaultValue")).isPresent();
                             if (!isNullable(p) && type != null && !type.isAssignable(Optional.class) && !hasDefaultValue) {
-                                errorMessages.add(String.format("The uri variable [%s] is optional, but the corresponding method argument [%s %s] is not defined as an Optional or annotated with a Nullable annotation.", variable.getName(), p.getType().toString(), p.getName()));
+                                errorMessages.add("The uri variable [%s] is optional, but the corresponding method argument [%s %s] is not defined as an Optional or annotated with a Nullable annotation.".formatted(variable.getName(), p.getType().toString(), p.getName()));
                             }
                         });
             }

File: http/src/main/java/io/micronaut/http/reactive/execution/ReactiveExecutionFlow.java
Patch:
@@ -74,8 +74,8 @@ static <K> ReactiveExecutionFlow<K> async(@NonNull Executor executor, @NonNull S
      */
     @NonNull
     static <K> ReactiveExecutionFlow<K> fromFlow(@NonNull ExecutionFlow<K> flow) {
-        if (flow instanceof ReactiveExecutionFlow<K>) {
-            return (ReactiveExecutionFlow<K>) flow;
+        if (flow instanceof ReactiveExecutionFlow<K> executionFlow) {
+            return executionFlow;
         }
         return (ReactiveExecutionFlow<K>) new ReactorExecutionFlowImpl(ReactorExecutionFlowImpl.toMono(flow));
     }

File: http/src/main/java/io/micronaut/http/uri/QueryStringDecoder.java
Patch:
@@ -408,8 +408,8 @@ private static byte decodeHexByte(CharSequence s, int pos) {
         int hi = decodeHexNibble(s.charAt(pos));
         int lo = decodeHexNibble(s.charAt(pos + 1));
         if (hi == -1 || lo == -1) {
-            throw new IllegalArgumentException(String.format(
-                    "invalid hex byte '%s' at index %d of '%s'", s.subSequence(pos, pos + 2), pos, s));
+            throw new IllegalArgumentException(
+            "invalid hex byte '%s' at index %d of '%s'".formatted(s.subSequence(pos, pos + 2), pos, s));
         }
         return (byte) ((hi << 4) + lo);
     }

File: http/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -85,8 +85,8 @@ protected <T> CreatedBean<T> doCreate(@NonNull BeanCreationContext<T> creationCo
         final HttpRequest<Object> request = ServerRequestContext.currentRequest().orElse(null);
         final CreatedBean<T> createdBean = super.doCreate(creationContext);
         final T bean = createdBean.bean();
-        if (bean instanceof RequestAware) {
-            ((RequestAware) bean).setRequest(request);
+        if (bean instanceof RequestAware aware) {
+            aware.setRequest(request);
         }
         return createdBean;
     }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/scan/ClassPathAnnotationScanner.java
Patch:
@@ -123,8 +123,7 @@ protected List<Class<?>> doScan(String annotation, String pkg) {
                     }
                 } else if (includeJars && Arrays.asList("jar", "zip", "war").contains(protocol)) {
                     URLConnection con = url.openConnection();
-                    if (con instanceof JarURLConnection) {
-                        JarURLConnection jarCon = (JarURLConnection) con;
+                    if (con instanceof JarURLConnection jarCon) {
                         JarFile jarFile = jarCon.getJarFile();
                         jarFile.stream()
                             .filter(entry -> {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/utils/ExtendedParameter.java
Patch:
@@ -68,7 +68,7 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object o) {
-        return (o instanceof ExtendedParameter) &&
-                (this.parameter == ((ExtendedParameter) o).parameter);
+        return (o instanceof ExtendedParameter ep) &&
+                (this.parameter == ep.parameter);
     }
 }

File: inject-java-test/src/main/java/io/micronaut/annotation/processing/test/JavaFileObjects.java
Patch:
@@ -50,8 +50,8 @@ static JavaFileObject forSourceString(String fullyQualifiedName, String source)
         Objects.requireNonNull(fullyQualifiedName);
         if (fullyQualifiedName.startsWith("package ")) {
             throw new IllegalArgumentException(
-                    String.format("fullyQualifiedName starts with \"package\" (%s). Did you forget to "
-                            + "specify the name and specify just the source text?", fullyQualifiedName));
+            ("fullyQualifiedName starts with \"package\" (%s). Did you forget to "
+            + "specify the name and specify just the source text?").formatted(fullyQualifiedName));
         }
         return new StringSourceJavaFileObject(fullyQualifiedName, Objects.requireNonNull(source));
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -414,9 +414,9 @@ public Object visitType(TypeElement classElement, Object o) {
                     classElement.asType().accept(new PublicAbstractMethodVisitor<Object, Object>(classElement, javaVisitorContext) {
                         @Override
                         protected void accept(DeclaredType type, Element element, Object o) {
-                            if (element instanceof ExecutableElement) {
+                            if (element instanceof ExecutableElement executableElement) {
                                 ElementVisitor.this.visitExecutable(
-                                    (ExecutableElement) element,
+                                    executableElement,
                                     o
                                 );
                             }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -415,8 +415,8 @@ private ClassElement resolveTypeVariable(JavaNativeElement owner,
             bounds = new ArrayList<>();
             TypeMirror upperBound = tv.getUpperBound();
             // type variable is still free.
-            List<? extends TypeMirror> boundsUnresolved = upperBound instanceof IntersectionType ?
-                    ((IntersectionType) upperBound).getBounds() :
+            List<? extends TypeMirror> boundsUnresolved = upperBound instanceof IntersectionType it ?
+                    it.getBounds() :
                     Collections.singletonList(upperBound);
             boundsUnresolved.stream()
                     .map(tm -> (JavaClassElement) newClassElement(owner, tm, parentTypeArguments, visitedTypes, true))
@@ -438,7 +438,7 @@ public boolean equals(Object o) {
             return false;
         }
         io.micronaut.inject.ast.Element that = (io.micronaut.inject.ast.Element) o;
-        if (that instanceof TypedElement && ((TypedElement) that).isPrimitive()) {
+        if (that instanceof TypedElement element && element.isPrimitive()) {
             return false;
         }
         // Do not check if classes match, sometimes it's an anonymous one

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -325,7 +325,7 @@ private ClassElement returnType(Map<String, ClassElement> genericInfo) {
 
     private static boolean sameType(String type, DeclaredType dt) {
         Element elt = dt.asElement();
-        return (elt instanceof TypeElement) && type.equals(((TypeElement) elt).getQualifiedName().toString());
+        return (elt instanceof TypeElement te) && type.equals(te.getQualifiedName().toString());
     }
 
     private boolean isSuspend(VariableElement ve) {

File: inject-java/src/test/groovy/io/micronaut/aop/proxytarget/ArgMutatingInterceptor.java
Patch:
@@ -34,8 +34,8 @@ public Object intercept(InvocationContext context) {
         MutableArgumentValue arg = (MutableArgumentValue) context.getParameters().get(m.value());
         if(arg != null) {
             Object value = arg.getValue();
-            if(value instanceof Number) {
-                arg.setValue(((Number)value).intValue()*2);
+            if(value instanceof Number number) {
+                arg.setValue(number.intValue()*2);
             }
             else {
                 arg.setValue("changed");

File: inject-java/src/test/groovy/io/micronaut/aop/simple/ArgMutatingInterceptor.java
Patch:
@@ -35,8 +35,8 @@ public Object intercept(InvocationContext context) {
         MutableArgumentValue arg = (MutableArgumentValue) context.getParameters().get(m.value());
         if(arg != null) {
             Object value = arg.getValue();
-            if(value instanceof Number) {
-                arg.setValue(((Number)value).intValue()*2);
+            if(value instanceof Number number) {
+                arg.setValue(number.intValue()*2);
             }
             else {
                 arg.setValue("changed");

File: inject-java/src/test/groovy/io/micronaut/inject/ast/beans/TestBeanElementVisitor.java
Patch:
@@ -17,8 +17,8 @@ public class TestBeanElementVisitor implements BeanElementVisitor<Prototype> {
     @Override
     public BeanElement visitBeanElement(BeanElement beanElement, VisitorContext visitorContext) {
         Element producingElement = beanElement.getProducingElement();
-        if (producingElement instanceof MemberElement) {
-            producingElement = ((MemberElement) producingElement).getDeclaringType();
+        if (producingElement instanceof MemberElement element) {
+            producingElement = element.getDeclaringType();
         }
         final String name = producingElement.getName();
         if (name.startsWith("testbe")) {

File: inject/src/main/java/io/micronaut/context/ApplicationContext.java
Patch:
@@ -232,8 +232,7 @@ public interface ApplicationContext extends BeanContext, PropertyResolver, Prope
             .propertySources(propertySource)
             .start()
             .getBean(type);
-        if (bean instanceof LifeCycle) {
-            LifeCycle lifeCycle = (LifeCycle) bean;
+        if (bean instanceof LifeCycle lifeCycle) {
             if (!lifeCycle.isRunning()) {
                 lifeCycle.start();
             }

File: inject/src/main/java/io/micronaut/context/ApplicationContextBuilder.java
Patch:
@@ -283,8 +283,7 @@ public interface ApplicationContextBuilder {
         ArgumentUtils.requireNonNull("type", type);
         ApplicationContext applicationContext = start();
         T bean = applicationContext.getBean(type);
-        if (bean instanceof LifeCycle) {
-            LifeCycle lifeCycle = (LifeCycle) bean;
+        if (bean instanceof LifeCycle lifeCycle) {
             if (!lifeCycle.isRunning()) {
                 lifeCycle.start();
             }

File: inject/src/main/java/io/micronaut/context/DefaultFieldInjectionPoint.java
Patch:
@@ -157,9 +157,9 @@ public Annotation[] synthesizeDeclared() {
     }
 
     private AnnotationMetadata initAnnotationMetadata(@Nullable AnnotationMetadata annotationMetadata) {
-        if (annotationMetadata instanceof DefaultAnnotationMetadata) {
+        if (annotationMetadata instanceof DefaultAnnotationMetadata metadata) {
             if (annotationMetadata.hasPropertyExpressions()) {
-                return new FieldAnnotationMetadata((DefaultAnnotationMetadata) annotationMetadata);
+                return new FieldAnnotationMetadata(metadata);
             } else {
                 return annotationMetadata;
             }

File: inject/src/main/java/io/micronaut/context/EnvironmentAwareArgument.java
Patch:
@@ -63,8 +63,8 @@ public AnnotationMetadata getAnnotationMetadata() {
     }
 
     private AnnotationMetadata initAnnotationMetadata(@Nullable AnnotationMetadata annotationMetadata) {
-        if (annotationMetadata instanceof DefaultAnnotationMetadata && annotationMetadata.hasPropertyExpressions()) {
-            return new ArgumentAnnotationMetadata((DefaultAnnotationMetadata) annotationMetadata);
+        if (annotationMetadata instanceof DefaultAnnotationMetadata metadata && annotationMetadata.hasPropertyExpressions()) {
+            return new ArgumentAnnotationMetadata(metadata);
         } else if (annotationMetadata != null) {
             return annotationMetadata;
         }

File: inject/src/main/java/io/micronaut/context/env/AbstractPropertySourceLoader.java
Patch:
@@ -150,8 +150,8 @@ protected void processMap(Map<String, Object> finalMap, Map map, String prefix)
             Map.Entry entry = (Map.Entry) o;
             String key = entry.getKey().toString();
             Object value = entry.getValue();
-            if (value instanceof Map && !((Map) value).isEmpty()) {
-                processMap(finalMap, (Map) value, prefix + key + '.');
+            if (value instanceof Map map1 && !map1.isEmpty()) {
+                processMap(finalMap, map1, prefix + key + '.');
             } else {
                 finalMap.put(prefix + key, value);
             }

File: inject/src/main/java/io/micronaut/context/env/yaml/YamlPropertySourceLoader.java
Patch:
@@ -61,8 +61,7 @@ protected void processInput(String name, InputStream input, Map<String, Object>
         if (i.hasNext()) {
             while (i.hasNext()) {
                 Object object = i.next();
-                if (object instanceof Map) {
-                    Map map = (Map) object;
+                if (object instanceof Map map) {
                     log.trace("Processing YAML: {}", map);
                     String prefix = "";
                     processMap(finalMap, map, prefix);

File: inject/src/main/java/io/micronaut/context/event/ApplicationEventPublisherFactory.java
Patch:
@@ -143,8 +143,8 @@ public ApplicationEventPublisher<T> instantiate(BeanResolutionContext resolution
         final BeanResolutionContext.Segment<?, ?> segment = resolutionContext.getPath().currentSegment().orElse(null);
         if (segment != null) {
             final InjectionPoint<?> injectionPoint = segment.getInjectionPoint();
-            if (injectionPoint instanceof ArgumentCoercible) {
-                Argument<?> injectionPointArgument = ((ArgumentCoercible<?>) injectionPoint)
+            if (injectionPoint instanceof ArgumentCoercible coercible) {
+                Argument<?> injectionPointArgument = coercible
                         .asArgument();
 
                 eventType =

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -394,8 +394,8 @@ public boolean equals(Object obj) {
         }
 
         private AnnotationValue<?> getAnnotationValues(Annotation other) {
-            if (other instanceof AnnotationProxyHandler) {
-                return ((AnnotationProxyHandler) other).annotationValue;
+            if (other instanceof AnnotationProxyHandler handler) {
+                return handler.annotationValue;
             }
             return null;
         }

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -423,8 +423,8 @@ public Optional<Class> classValue(@NonNull String annotation, @NonNull String me
         Object rawValue = getRawSingleValue(annotation, member, valueMapper);
         if (rawValue instanceof AnnotationClassValue annotationClassValue) {
             return annotationClassValue.getType();
-        } else if (rawValue instanceof Class) {
-            return Optional.of((Class) rawValue);
+        } else if (rawValue instanceof Class class1) {
+            return Optional.of(class1);
         } else if (rawValue != null) {
             return ConversionService.SHARED.convert(rawValue, Class.class);
         }

File: inject/src/main/java/io/micronaut/inject/annotation/EnvironmentOptionalValuesMap.java
Patch:
@@ -48,8 +48,7 @@ class EnvironmentOptionalValuesMap<V> extends OptionalValuesMap<V> {
             Object value = entry.getValue();
             if (value instanceof CharSequence) {
                 value = placeholderResolver.resolveRequiredPlaceholders(value.toString());
-            } else if (value instanceof String[]) {
-                String[] a = (String[]) value;
+            } else if (value instanceof String[] a) {
                 for (int i = 0; i < a.length; i++) {
                     a[i] = placeholderResolver.resolveRequiredPlaceholders(a[i]);
                 }

File: inject/src/main/java/io/micronaut/inject/provider/AbstractProviderDefinition.java
Patch:
@@ -124,8 +124,8 @@ public T instantiate(BeanResolutionContext resolutionContext, BeanContext contex
         final BeanResolutionContext.Segment<?, ?> segment = resolutionContext.getPath().currentSegment().orElse(null);
         if (segment != null) {
             final InjectionPoint<?> injectionPoint = segment.getInjectionPoint();
-            if (injectionPoint instanceof ArgumentCoercible) {
-                Argument<?> injectionPointArgument = ((ArgumentCoercible<?>) injectionPoint)
+            if (injectionPoint instanceof ArgumentCoercible coercible) {
+                Argument<?> injectionPointArgument = coercible
                         .asArgument();
 
                 Argument<?> resolveArgument = injectionPointArgument;

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationMetadataQualifier.java
Patch:
@@ -196,8 +196,8 @@ public String toString() {
 
     private Object valueToString(Map.Entry<CharSequence, Object> entry) {
         final Object v = entry.getValue();
-        if (v instanceof Object[]) {
-            return Arrays.toString((Object[]) v);
+        if (v instanceof Object[] objects) {
+            return Arrays.toString(objects);
         }
         return v;
     }

File: inject/src/main/java/io/micronaut/inject/qualifiers/CompositeQualifier.java
Patch:
@@ -57,8 +57,8 @@ public Qualifier[] getQualifiers() {
 
     @Override
     public boolean contains(Qualifier<T> qualifier) {
-        if (qualifier instanceof CompositeQualifier) {
-            for (Qualifier q : ((CompositeQualifier<Object>) qualifier).qualifiers) {
+        if (qualifier instanceof CompositeQualifier compositeQualifier) {
+            for (Qualifier q : compositeQualifier.qualifiers) {
                 if (!contains(q)) {
                     return false;
                 }

File: inject/src/main/java/io/micronaut/inject/qualifiers/NoneQualifier.java
Patch:
@@ -40,8 +40,8 @@ private NoneQualifier() {
     @Override
     public <B extends BeanType<T>> Stream<B> reduce(Class<T> beanType, Stream<B> candidates) {
         return candidates.filter(candidate -> {
-            if (candidate instanceof BeanDefinition) {
-                return ((BeanDefinition<?>) candidate).getDeclaredQualifier() == null;
+            if (candidate instanceof BeanDefinition definition) {
+                return definition.getDeclaredQualifier() == null;
             }
             return !AnnotationUtil.hasDeclaredQualifierAnnotation(candidate.getAnnotationMetadata());
         });

File: jackson-core/src/main/java/io/micronaut/jackson/core/tree/TreeGenerator.java
Patch:
@@ -341,8 +341,8 @@ public void writeObject(Object pojo) throws IOException {
     public void writeTree(TreeNode rootNode) throws IOException {
         if (rootNode == null) {
             writeNull();
-        } else if (rootNode instanceof JsonNode) {
-            writeScalar(JsonToken.VALUE_EMBEDDED_OBJECT, (JsonNode) rootNode);
+        } else if (rootNode instanceof JsonNode node) {
+            writeScalar(JsonToken.VALUE_EMBEDDED_OBJECT, node);
         } else {
             JsonStreamTransfer.transferNext(rootNode.traverse(), this, JsonStreamConfig.DEFAULT);
         }

File: jackson-databind/src/main/java/io/micronaut/jackson/databind/DatabindPropertyBinderExceptionHandler.java
Patch:
@@ -40,8 +40,7 @@
 final class DatabindPropertyBinderExceptionHandler implements JsonBeanPropertyBinderExceptionHandler {
     @Override
     public Optional<ConversionErrorException> toConversionError(@Nullable Object object, @NonNull Exception e) {
-        if (e instanceof InvalidFormatException) {
-            InvalidFormatException ife = (InvalidFormatException) e;
+        if (e instanceof InvalidFormatException ife) {
             Object originalValue = ife.getValue();
             ConversionError conversionError = new ConversionError() {
                 @Override

File: jackson-databind/src/main/java/io/micronaut/jackson/databind/convert/JacksonConverterRegistrar.java
Patch:
@@ -110,7 +110,7 @@ public void register(MutableConversionService conversionService) {
                     Optional<PropertyNamingStrategy> propertyNamingStrategy = resolvePropertyNamingStrategy(charSequence);
 
                     if (!propertyNamingStrategy.isPresent()) {
-                        context.reject(charSequence, new IllegalArgumentException(String.format("Unable to convert '%s' to a com.fasterxml.jackson.databind.PropertyNamingStrategy", charSequence)));
+                        context.reject(charSequence, new IllegalArgumentException("Unable to convert '%s' to a com.fasterxml.jackson.databind.PropertyNamingStrategy".formatted(charSequence)));
                     }
 
                     return propertyNamingStrategy;
@@ -150,8 +150,8 @@ protected TypeConverter<JsonNode, Object> jsonNodeToObjectConverter() {
                     return Optional.of(node.toString());
                 } else {
                     Argument<Object> argument = null;
-                    if (node instanceof ContainerNode && context instanceof ArgumentConversionContext && targetType.getTypeParameters().length != 0) {
-                        argument = ((ArgumentConversionContext<Object>) context).getArgument();
+                    if (node instanceof ContainerNode && context instanceof ArgumentConversionContext conversionContext && targetType.getTypeParameters().length != 0) {
+                        argument = conversionContext.getArgument();
                     }
                     Object result;
                     if (argument != null) {

File: json-core/src/main/java/io/micronaut/json/tree/JsonArray.java
Patch:
@@ -78,7 +78,7 @@ public Iterable<Map.Entry<String, JsonNode>> entries() {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof JsonArray && ((JsonArray) o).values.equals(values);
+        return o instanceof JsonArray ja && ja.values.equals(values);
     }
 
     @Override

File: json-core/src/main/java/io/micronaut/json/tree/JsonNumber.java
Patch:
@@ -49,7 +49,7 @@ public String coerceStringValue() {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof JsonNumber && ((JsonNumber) o).value.equals(value);
+        return o instanceof JsonNumber jn && jn.value.equals(value);
     }
 
     @Override

File: json-core/src/main/java/io/micronaut/json/tree/JsonObject.java
Patch:
@@ -78,7 +78,7 @@ public Iterable<Map.Entry<String, JsonNode>> entries() {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof JsonObject && ((JsonObject) o).values.equals(values);
+        return o instanceof JsonObject jo && jo.values.equals(values);
     }
 
     @Override

File: json-core/src/main/java/io/micronaut/json/tree/JsonString.java
Patch:
@@ -33,7 +33,7 @@ final class JsonString extends JsonScalar {
 
     @Override
     public boolean equals(Object o) {
-        return o instanceof JsonString && ((JsonString) o).value.equals(value);
+        return o instanceof JsonString js && js.value.equals(value);
     }
 
     @Override

File: management/src/main/java/io/micronaut/management/endpoint/health/filter/HealthResultFilter.java
Patch:
@@ -67,8 +67,7 @@ protected HealthResultFilter(HealthEndpoint healthEndpoint) {
     @ResponseFilter
     public void doFilter(MutableHttpResponse<?> response) {
         Object body = response.body();
-        if (body instanceof HealthResult) {
-            HealthResult healthResult = (HealthResult) body;
+        if (body instanceof HealthResult healthResult) {
             HealthStatus status = healthResult.getStatus();
 
             HttpStatus httpStatus = healthEndpoint

File: retry/src/main/java/io/micronaut/retry/intercept/CircuitBreakerRetry.java
Patch:
@@ -95,8 +95,8 @@ public void open() {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Rethrowing existing exception for Open Circuit [{}]: {}", method, lastError.getMessage());
             }
-            if (lastError instanceof RuntimeException && !throwWrappedException) {
-                throw (RuntimeException) lastError;
+            if (lastError instanceof RuntimeException exception && !throwWrappedException) {
+                throw exception;
             } else {
                 throw new CircuitOpenException("Circuit Open: " + lastError.getMessage(), lastError);
             }

File: test-suite/src/test/java/io/micronaut/docs/http/client/bind/annotation/MetadataClientArgumentBinder.java
Patch:
@@ -26,8 +26,8 @@ public void bind(@NonNull ArgumentConversionContext<Object> context,
                      @NonNull ClientRequestUriContext uriContext,
                      @NonNull Object value,
                      @NonNull MutableHttpRequest<?> request) {
-        if (value instanceof Map) {
-            for (Map.Entry<?, ?> entry: ((Map<?, ?>) value).entrySet()) {
+        if (value instanceof Map<?,?> map) {
+            for (Map.Entry<?, ?> entry: map.entrySet()) {
                 String key = NameUtils.hyphenate(StringUtils.capitalize(entry.getKey().toString()), false);
                 request.header("X-Metadata-" + key, entry.getValue().toString());
             }

File: test-suite/src/test/java/io/micronaut/docs/server/upload/WholeBodyUploadController.java
Patch:
@@ -50,8 +50,8 @@ public void onSubscribe(Subscription s) {
                 @Override
                 public void onNext(CompletedPart completedPart) {
                     String partName = completedPart.getName();
-                    if (completedPart instanceof CompletedFileUpload) {
-                        String originalFileName = ((CompletedFileUpload) completedPart).getFilename();
+                    if (completedPart instanceof CompletedFileUpload upload) {
+                        String originalFileName = upload.getFilename();
                     }
                 }
 

File: websocket/src/main/java/io/micronaut/websocket/interceptor/ClientWebSocketInterceptor.java
Patch:
@@ -54,8 +54,8 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             Object[] values = context.getParameterValues();
             if (ArrayUtils.isNotEmpty(values)) {
                 Object o = values[0];
-                if (o instanceof WebSocketSession) {
-                    this.webSocketSession = (WebSocketSession) o;
+                if (o instanceof WebSocketSession session) {
+                    this.webSocketSession = session;
                     return null;
                 }
             }

File: core-processor/src/main/java/io/micronaut/inject/processing/AopIntroductionProxySupportedBeanElementCreator.java
Patch:
@@ -43,6 +43,8 @@ protected BeanDefinitionVisitor createBeanDefinitionVisitor() {
             throw new ProcessingException(classElement, "Cannot apply AOP advice to final class. Class must be made non-final to support proxying: " + classElement.getName());
         }
         aopProxyVisitor = createIntroductionAopProxyWriter(classElement, visitorContext);
+        aopProxyVisitor.visitTypeArguments(classElement.getAllTypeArguments());
+        visitAnnotationMetadata(aopProxyVisitor, classElement.getAnnotationMetadata());
         beanDefinitionWriters.add(aopProxyVisitor);
         MethodElement constructorElement = classElement.getPrimaryConstructor().orElse(null);
         if (constructorElement != null) {

File: inject/src/main/java/io/micronaut/context/annotation/Mapper.java
Patch:
@@ -81,7 +81,7 @@
         String defaultValue() default "";
 
         /**
-         * @return The format (for numbers an dates).
+         * @return The format to convert numbers or dates into a string.
          */
         String format() default "";
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormRouteCompleter.java
Patch:
@@ -268,6 +268,8 @@ public void send(MicronautHttpData<?> data) {
                 unsentIncomplete = data;
                 return;
             }
+            // cancel can be called by the emitNext call, so prevent release there
+            unsentIncomplete = null;
 
             demand--;
             if (sink.tryEmitNext(data) != Sinks.EmitResult.OK) {

File: http/src/main/java/io/micronaut/http/body/TextStreamBodyWriter.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableHeaders;
 import io.micronaut.core.util.SupplierUtil;
+import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Consumes;
 import io.micronaut.http.annotation.Produces;
@@ -95,6 +96,8 @@ public ByteBuffer<?> writeTo(Argument<T> type, MediaType mediaType, T object, Mu
             }
         }
 
+        outgoingHeaders.set(HttpHeaders.CONTENT_TYPE, mediaType != null ? mediaType : MediaType.TEXT_EVENT_STREAM_TYPE);
+
         ByteBuffer eventData = bufferFactory.buffer(body.length + 10);
         writeAttribute(eventData, COMMENT_PREFIX, event.getComment());
         writeAttribute(eventData, ID_PREFIX, event.getId());

File: http/src/main/java/io/micronaut/http/body/TextStreamBodyWriter.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableHeaders;
 import io.micronaut.core.util.SupplierUtil;
+import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Consumes;
 import io.micronaut.http.annotation.Produces;
@@ -95,6 +96,8 @@ public ByteBuffer<?> writeTo(Argument<T> type, MediaType mediaType, T object, Mu
             }
         }
 
+        outgoingHeaders.set(HttpHeaders.CONTENT_TYPE, mediaType != null ? mediaType : MediaType.TEXT_EVENT_STREAM_TYPE);
+
         ByteBuffer eventData = bufferFactory.buffer(body.length + 10);
         writeAttribute(eventData, COMMENT_PREFIX, event.getComment());
         writeAttribute(eventData, ID_PREFIX, event.getId());

File: http-client-jdk/src/main/java/io/micronaut/http/client/jdk/DefaultJdkHttpClient.java
Patch:
@@ -149,7 +149,9 @@ public <I, O, E> Publisher<HttpResponse<O>> exchange(@NonNull HttpRequest<I> req
             })
             .flatMap(Mono::fromCompletionStage)
             .map(netResponse -> {
-                log.error("Client {} Received HTTP Response: {} {}", clientId, netResponse.statusCode(), netResponse.uri());
+                if (log.isDebugEnabled()) {
+                    log.debug("Client {} Received HTTP Response: {} {}", clientId, netResponse.statusCode(), netResponse.uri());
+                }
                 boolean errorStatus = netResponse.statusCode() >= 400;
                 if (errorStatus && configuration.isExceptionOnErrorStatus()) {
                     throw HttpClientExceptionUtils.populateServiceId(new HttpClientResponseException(HttpStatus.valueOf(netResponse.statusCode()).getReason(),

File: http-client-jdk/src/main/java/io/micronaut/http/client/jdk/JdkBlockingHttpClient.java
Patch:
@@ -81,11 +81,11 @@ public <I, O, E> io.micronaut.http.HttpResponse<O> exchange(io.micronaut.http.Ht
                 log.debug("Client {} Sending HTTP Request: {}", clientId, httpRequest);
             }
             HttpResponse<byte[]> httpResponse = client.send(httpRequest, HttpResponse.BodyHandlers.ofByteArray());
+            if (log.isDebugEnabled()) {
+                log.debug("Client {} Received HTTP Response: {} {}", clientId, httpResponse.statusCode(), httpResponse.uri());
+            }
             boolean errorStatus = httpResponse.statusCode() >= 400;
             if (errorStatus && configuration.isExceptionOnErrorStatus()) {
-                if (log.isErrorEnabled()) {
-                    log.error("Client {} Received HTTP Response: {} {}", clientId, httpResponse.statusCode(), httpResponse.uri());
-                }
                 throw HttpClientExceptionUtils.populateServiceId(new HttpClientResponseException(HttpStatus.valueOf(httpResponse.statusCode()).getReason(), response(httpResponse, bodyType)), clientId, configuration);
             }
             return response(httpResponse, bodyType);

File: core-processor/src/main/java/io/micronaut/inject/ast/utils/EnclosedElementsQuery.java
Patch:
@@ -268,7 +268,6 @@ private <T extends io.micronaut.inject.ast.Element> Collection<T> getAllElements
         return elements;
     }
 
-
     /**
      * Gets the element name.
      * @param element The element

File: aop/src/main/java/io/micronaut/aop/InterceptorBinding.java
Patch:
@@ -52,7 +52,7 @@
     InterceptorKind kind() default InterceptorKind.AROUND;
 
     /**
-     * By default annotation members are not used when resolving interceptors. The value of
+     * By default, annotation members are not used when resolving interceptors. The value of
      * {@code bindMembers()} can be set to {@code true} to indicate that annotation members
      * should be used when binding interceptors to an annotation declaration.
      *

File: aop/src/main/java/io/micronaut/aop/chain/ConstructorInterceptorChain.java
Patch:
@@ -141,7 +141,7 @@ public BeanConstructor<T> getConstructor() {
      * @param interceptors      The interceptors. Can be null and if so should be resolved from the context.
      * @param definition        The definition
      * @param constructor       The bean constructor
-     * @param parameters        Th resolved parameters
+     * @param parameters        The resolved parameters
      * @param <T1>              The bean type
      * @return The instantiated bean
      * @since 3.0.0

File: aop/src/main/java/io/micronaut/aop/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * The main classes implementing cross cutting behavior in Micronaut.
+ * The main classes implementing cross-cutting behavior in Micronaut.
  *
  * @author graemerocher
  * @since 1.0

File: context/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -157,21 +157,21 @@ public void setMetadata(Map<String, String> metadata) {
         }
 
         /**
-         * @return The instance auto scaling group
+         * @return The instance auto-scaling group
          */
         public Optional<String> getGroup() {
             return Optional.ofNullable(group);
         }
 
         /**
-         * @param group The instance auto scaling group
+         * @param group The instance auto-scaling group
          */
         public void setGroup(String group) {
             this.group = group;
         }
 
         /**
-         * @return The instance availability zone. For example it's possible to configure Netflix Ribbon to load balance between servers only in a particular zone
+         * @return The instance availability zone. For example, it's possible to configure Netflix Ribbon to load balance between servers only in a particular zone
          */
         public Optional<String> getZone() {
             if (zone != null) {

File: context/src/main/java/io/micronaut/runtime/EmbeddedApplication.java
Patch:
@@ -66,7 +66,7 @@ default boolean isServer() {
 
     /**
      * Most servers shutdown cleanly, however some integrations make require a forced exist. If
-     * true is returned Micronaut will explicitly invoke System.exit(..).
+     * true is returned Micronaut will explicitly invoke System.exit(...).
      *
      * @return Whether exiting the server should be forced.
      */

File: context/src/main/java/io/micronaut/scheduling/DefaultTaskExceptionHandler.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.core.annotation.Nullable;
 
 /**
- * The default exception handler used if non other is found. Simply logs the exception.
+ * The default exception handler used if non-other is found. Simply logs the exception.
  *
  * @author graemerocher
  * @since 1.0

File: context/src/main/java/io/micronaut/scheduling/TaskExecutors.java
Patch:
@@ -31,7 +31,7 @@ public interface TaskExecutors {
 
     /**
      * The name of the {@link java.util.concurrent.ExecutorService} used to schedule blocking tasks.
-     * If available, this will use {@link #VIRTUAL virtual threads}. Otherwise it will fall back to
+     * If available, this will use {@link #VIRTUAL virtual threads}. Otherwise, it will fall back to
      * {@link #IO}.
      */
     String BLOCKING = "blocking";

File: core-processor/src/main/java/io/micronaut/expressions/parser/ast/access/ElementMethodCall.java
Patch:
@@ -96,7 +96,7 @@ protected void generateBytecode(ExpressionVisitorContext ctx) {
                     calleeType = JavaModelUtils.getTypeReference(calleeClass);
                     mv.checkCast(calleeType);
                 }
-                // null safe operator is used so we need to check the result is null
+                // null safe operator is used, so we need to check the result is null
                 mv.storeLocal(2, calleeType);
                 mv.loadLocal(2, calleeType);
                 Label proceed = new Label();

File: core-processor/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -743,7 +743,7 @@ private static void invokeLoadClassValueMethod(
             Label tryEnd = new Label();
             Label exceptionHandler = new Label();
 
-            // This logic will generate a method such as the following, allowing non dynamic classloading:
+            // This logic will generate a method such as the following, allowing non-dynamic classloading:
             //
             // AnnotationClassValue $micronaut_load_class_value_0() {
             //     try {

File: core-processor/src/main/java/io/micronaut/inject/ast/ClassElement.java
Patch:
@@ -612,7 +612,7 @@ default ClassElement getRawClassElement() {
     }
 
     /**
-     * Get a {@link ClassElement} instance corresponding to this type, but with the given type arguments. This is best
+     * Get a {@link ClassElement} instance corresponding to this type, but with the given type arguments. This is the best
      * effort – implementations may only support {@link ClassElement}s that come from the same visitor context, and
      * other {@link ClassElement}s only to a limited degree.
      *
@@ -690,7 +690,7 @@ default Map<String, ClassElement> getTypeArguments() {
 
     /**
      * Builds a map of all the type parameters for a class, its super classes and interfaces.
-     * The resulting map contains the name of the class to the a map of the resolved generic types.
+     * The resulting map contains the name of the class to the map of the resolved generic types.
      *
      * @return The type arguments for this class element
      */
@@ -716,7 +716,7 @@ default Optional<ClassElement> getFirstTypeArgument() {
      * Tests whether one type is assignable to another.
      *
      * @param type The type to check
-     * @return {@code true} if and only if the this type is assignable to the second
+     * @return {@code true} if and only if the type is assignable to the second
      */
     default boolean isAssignable(Class<?> type) {
         return isAssignable(type.getName());

File: core-processor/src/main/java/io/micronaut/inject/ast/Element.java
Patch:
@@ -80,7 +80,7 @@ default boolean isSynthetic() {
     boolean isPublic();
 
     /**
-     * Returns the native underlying type. This API is extended by all of the inject language implementations.
+     * Returns the native underlying type. This API is extended by all inject language implementations.
      * The object returned by this method will be the language native type the information is being retrieved from.
      *
      * @return The native type

File: core-processor/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -128,7 +128,7 @@ default AccessKind getWriteAccessKind() {
     }
 
     /**
-     * Does a this property override the given property. Supported only with languages that have native properties.
+     * Does this property override the given property. Supported only with languages that have native properties.
      * @param overridden The overridden method.
      * @return True this property overrides the given property.
      * @since 4.0.0

File: core-processor/src/main/java/io/micronaut/inject/ast/beans/BeanElement.java
Patch:
@@ -33,7 +33,7 @@
 public interface BeanElement extends Element {
 
     /**
-     * Returns all of the injection points for the bean. These
+     * Returns all injection points for the bean. These
      * will be a combination of {@link io.micronaut.inject.ast.FieldElement} and {@link io.micronaut.inject.ast.MethodElement} instances.
      *
      * @return The injection points for the bean.

File: core-processor/src/main/java/io/micronaut/inject/ast/beans/BeanElementBuilder.java
Patch:
@@ -87,7 +87,7 @@ default ClassElement getDeclaringElement() {
     }
 
     /**
-     * Specifies the bean will created with the given method element. If
+     * Specifies the bean will be created with the given method element. If
      * not specified the bean will be created with {@link ClassElement#getPrimaryConstructor()}.
      *
      * <p>Note that the method can be a one of the following:</p>

File: core-processor/src/main/java/io/micronaut/inject/ast/beans/ConfigurableElement.java
Patch:
@@ -41,7 +41,7 @@ public interface ConfigurableElement extends Element {
     /**
      * Adds a {@link jakarta.inject.Named} qualifier to the element.
      *
-     * @param qualifier The qualifier. If {@code null} an named annotation with no value is added assuming the default name.
+     * @param qualifier The qualifier. If {@code null} a named annotation with no value is added assuming the default name.
      * @return This element
      */
     default @NonNull

File: core-processor/src/main/java/io/micronaut/inject/visitor/TypeElementVisitor.java
Patch:
@@ -81,7 +81,7 @@ default void visitField(FieldElement element, VisitorContext context) {
     }
 
     /**
-     * Executed when a enum constant is encountered that matches the {@literal <}E{@literal >} generic.
+     * Executed when an enum constant is encountered that matches the {@literal <}E{@literal >} generic.
      *
      * @param element The element
      * @param context The visitor context

File: core-processor/src/main/java/io/micronaut/inject/writer/DirectoryClassWriterOutputVisitor.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Optional;
 
 /**
- * A {@link ClassWriterOutputVisitor} that writes to a target target directory.
+ * A {@link ClassWriterOutputVisitor} that writes to a target directory.
  *
  * @author graemerocher
  * @since 1.0

File: core-processor/src/main/java/io/micronaut/inject/writer/ExecutableMethodsDefinitionWriter.java
Patch:
@@ -136,9 +136,9 @@ private MethodElement getMethodElement(int index) {
     }
 
     /**
-     * Does method supports intercepted proxy.
+     * Does method support intercepted proxy.
      *
-     * @return Does method supports intercepted proxy
+     * @return Does method support intercepted proxy
      */
     public boolean isSupportsInterceptedProxy() {
         return methodDispatchWriter.isHasInterceptedMethod();

File: core-reactive/src/main/java/io/micronaut/core/async/processor/SingleThreadedBufferingProcessor.java
Patch:
@@ -94,7 +94,7 @@ protected void subscribeDownstream(Subscriber<? super T> downstreamSubscriber) {
     }
 
     /**
-     * Called when an message is received from the upstream {@link Subscriber}.
+     * Called when a message is received from the upstream {@link Subscriber}.
      *
      * @param message The message
      */

File: core/src/main/java/io/micronaut/core/annotation/AnnotationClassValue.java
Patch:
@@ -110,7 +110,7 @@ public AnnotationClassValue(@NonNull T instance) {
     }
 
     /**
-     * Return whether the class value is instantiated. Normally this is the same as using isPresent on {@link #getInstance()}, except at compilation time where instances are not instantiated.
+     * Return whether the class value is instantiated. Normally this is the same as using isPresent on {@link #getInstance()}, except at compilation time when instances are not instantiated.
      *
      * @return Whether this class value is instantiated
      * @since 1.1

File: core/src/main/java/io/micronaut/core/annotation/AnnotationSource.java
Patch:
@@ -185,7 +185,7 @@ public interface AnnotationSource {
     }
 
     /**
-     * Get all of the values for the given annotation that are directly declared on the annotated element.
+     * Get all values for the given annotation that are directly declared on the annotated element.
      *
      * @param annotation The annotation name
      * @param <T> The annotation type
@@ -197,7 +197,7 @@ public interface AnnotationSource {
     }
 
     /**
-     * Get all of the values for the given annotation that are directly declared on the annotated element.
+     * Get all values for the given annotation that are directly declared on the annotated element.
      *
      * @param annotationClass The annotation name
      * @param <T> The annotation type
@@ -233,7 +233,7 @@ public interface AnnotationSource {
     }
 
     /**
-     * Get all of the values for the given annotation that are directly declared on the annotated element.
+     * Get all values for the given annotation that are directly declared on the annotated element.
      *
      * @param annotation The annotation name
      * @param <T> The annotation type

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.stream.Stream;
 
 /**
- * A runtime representation of the an annotation and its values.
+ * A runtime representation of the annotation and its values.
  *
  * <p>This class implements the {@link AnnotationValueResolver} interface and methods such as {@link AnnotationValueResolver#get(CharSequence, Class)} can be used to retrieve the values of annotation members.</p>
  *
@@ -243,7 +243,7 @@ public Map<CharSequence, Object> getDefaultValues() {
      * </pre>
      *
      * @param member The member
-     * @return The properties as a immutable map.
+     * @return The properties as an immutable map.
      */
     @NonNull
     public Map<String, String> getProperties(@NonNull String member) {
@@ -1537,7 +1537,7 @@ public static String[] resolveStringArray(String[] strs, @Nullable Function<Obje
     }
 
     /**
-     * The classes class values for the given value.
+     * The class values for the given value.
      *
      * @param value The value
      * @return The class values or null

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueBuilder.java
Patch:
@@ -764,7 +764,7 @@ public AnnotationValueBuilder<T> member(@NonNull String name, @Nullable Annotati
 
     /**
      * Adds the members from the provided map. All values must be primitives, enums,
-     * strings, annotation values, or an array of any of the previous types.
+     * strings, annotation values, or an array of the previous types.
      *
      * @param members The map of members
      * @return This builder

File: core/src/main/java/io/micronaut/core/beans/BeanProperty.java
Patch:
@@ -137,7 +137,7 @@ default boolean hasSetterOrConstructorArgument() {
     }
 
     /**
-     * This method will attempt to modify the property or if this is a immutable type using a copy constructor to return a new instance with the new value.
+     * This method will attempt to modify the property or if this is an immutable type using a copy constructor to return a new instance with the new value.
      *
      * <p>This differs from {@link #set(Object, Object)} which will throw an exception if the property does not have a setter.</p>
      *

File: core/src/main/java/io/micronaut/core/beans/BeanWrapper.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Optional;
 
 /**
- * Wraps a bean allowing to read and write its properties via a underlying {@link BeanIntrospection}.
+ * Wraps a bean allowing to read and write its properties via an underlying {@link BeanIntrospection}.
  *
  * @param <T> The bean type.
  * @author graemerocher

File: core/src/main/java/io/micronaut/core/bind/ExecutableBinder.java
Patch:
@@ -50,7 +50,7 @@ <T, R> BoundExecutable<T, R> bind(
 
     /**
      * Binds a given {@link Executable} using the given registry and source object. Unlike {@link #bind(Executable, ArgumentBinderRegistry, Object)} this
-     * method will not throw an {@link UnsatisfiedArgumentException} if an argument cannot be bound. Instead the {@link BoundExecutable#getUnboundArguments()} property
+     * method will not throw an {@link UnsatisfiedArgumentException} if an argument cannot be bound. Instead, the {@link BoundExecutable#getUnboundArguments()} property
      * will be populated with any arguments that could not be bound
      *
      * @param target The target executable

File: core/src/main/java/io/micronaut/core/cli/CommandLine.java
Patch:
@@ -128,7 +128,7 @@ interface Builder<T extends Builder> {
         T addOption(String name, String description);
 
         /**
-         * Parses a string of all the command line options converting them into an array of arguments to pass to #parse(String..args).
+         * Parses a string of all the command line options converting them into an array of arguments to pass to #parse(String... args).
          *
          * @param string The string
          * @return The command line

File: core/src/main/java/io/micronaut/core/convert/converters/MultiValuesConverterFactory.java
Patch:
@@ -49,7 +49,7 @@
  * The converters only work when an {@link ArgumentConversionContext} is provided (so the type is an argument), as
  * the name of the parameter needs to be retrieved from there.
  *
- * Also {@link Format} annotation is required and needs to have one of the below mentioned formats: "csv", "ssv",
+ * Also {@link Format} annotation is required and needs to have one of the below-mentioned formats: "csv", "ssv",
  * "pipes", "multi", "deep-object". The format can be written in any case, e.g. "DEEP_OBJECT", "deep-object".
  *
  * @since 3.0.0
@@ -244,7 +244,7 @@ private abstract static class AbstractConverterFromMultiValues<T>
 
         /**
          * Implemented convert function that checks which Format is specified inside the {@link Format} annotation
-         * If one is specified, it calls one of the corresponding abstract methods. Otherwise empty optional is returned
+         * If one is specified, it calls one of the corresponding abstract methods. Otherwise, empty optional is returned
          */
         @Override
         public Optional<T> convert(

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -54,7 +54,7 @@
     enum MapTransformation {
 
         /**
-         * A nested map has the any keys such as {@code foo.bar} transformed into a structure that is a map of maps
+         * A nested map has any keys such as {@code foo.bar} transformed into a structure that is a map of maps
          * such as JSON.
          */
         NESTED,

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -57,7 +57,7 @@ public interface ConvertibleMultiValues<V> extends ConvertibleValues<List<V>> {
     @Nullable V get(CharSequence name);
 
     /**
-     * @return Whether this values is empty
+     * @return Whether these values are empty
      */
     @Override
     default boolean isEmpty() {
@@ -194,7 +194,7 @@ default <T> Optional<T> getFirst(CharSequence name, ArgumentConversionContext<T>
      * @param requiredType The required type
      * @param defaultValue The default value
      * @param <T>          The generic type
-     * @return The first value of the default supplied value if it is isn't present
+     * @return The first value of the default supplied value if it is present
      */
     default <T> T getFirst(CharSequence name, Class<T> requiredType, T defaultValue) {
         return getFirst(name, requiredType).orElse(defaultValue);

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -59,7 +59,7 @@ public interface ConvertibleValues<V> extends ValueResolver<CharSequence>, Itera
     Collection<V> values();
 
     /**
-     * @return Whether this values is empty
+     * @return Whether these values are empty
      */
     default boolean isEmpty() {
         return this == ConvertibleValues.EMPTY || names().isEmpty();

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -191,7 +191,7 @@ private static Path loadNestedJarUri(List<Closeable> toClose, String jarUri) thr
 
     /**
      * Read the content of the BufferedReader and return it as a String in a blocking manner.
-     * The BufferedReader is closed afterwards.
+     * The BufferedReader is closed afterward.
      *
      * @param reader a BufferedReader whose content we want to read
      * @return a String containing the content of the buffered reader

File: core/src/main/java/io/micronaut/core/io/ResourceResolver.java
Patch:
@@ -80,7 +80,7 @@ public ResourceResolver() {
     /**
      * Searches resource loaders for one that supports the given prefix.
      *
-     * @param prefix The prefix the loader should support. (classpath:, file:, etc)
+     * @param prefix The prefix the loader should support. (classpath:, file:, etc.)
      * @return An optional resource loader
      */
     public @NonNull  Optional<ResourceLoader> getSupportingLoader(@NonNull String prefix) {

File: core/src/main/java/io/micronaut/core/io/buffer/ByteBuffer.java
Patch:
@@ -225,7 +225,7 @@ public interface ByteBuffer<T> {
      * to {@code buf.nioBuffer(buf.readerIndex(), buf.readableBytes())}.  This method does not
      * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the
      * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic
-     * buffer and it adjusted its capacity.
+     * buffer, and it adjusted its capacity.
      *
      * @return byteBuffer
      * @throws UnsupportedOperationException if this buffer cannot create a {@link java.nio.ByteBuffer}
@@ -239,7 +239,7 @@ public interface ByteBuffer<T> {
      * NIO buffer does not affect the indexes and marks of this buffer.  This method does not
      * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the
      * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic
-     * buffer and it adjusted its capacity.
+     * buffer, and it adjusted its capacity.
      * @return byteBuffer
      * @param index  The index
      * @param length The length

File: core/src/main/java/io/micronaut/core/io/service/ServiceScanner.java
Patch:
@@ -287,7 +287,7 @@ protected void compute() {
     }
 
     /**
-     * Reads URL, parses the file and produces sub tasks to initialize the entry.
+     * Reads URL, parses the file and produces sub-tasks to initialize the entry.
      */
     @SuppressWarnings("java:S1948")
     private final class UrlServicesLoader extends RecursiveActionValuesCollector<S> {

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -142,7 +142,7 @@ public Optional<S> firstAvailable() {
     }
 
     /**
-     * @param alternative An alternative type to use if the this type is not present
+     * @param alternative An alternative type to use if this type is not present
      * @param classLoader The classloader
      * @return Return the first such instance
      */

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -298,7 +298,7 @@ public static String getPropertyNameForSetter(String setterName) {
     }
 
     /**
-     * Get the equivalent setter name for the given property and a the first prefix.
+     * Get the equivalent setter name for the given property and the first prefix.
      *
      * @param propertyName The property name
      * @param prefixes     The prefixes
@@ -443,7 +443,7 @@ public static String getPropertyNameForGetter(String getterName) {
     }
 
     /**
-     * Get the equivalent getter name for the given property and a the first prefix.
+     * Get the equivalent getter name for the given property and the first prefix.
      *
      * @param propertyName The property name
      * @param prefixes     The prefixes

File: core/src/main/java/io/micronaut/core/reflect/GenericTypeUtils.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 
 /**
- * Utility methods for dealing with generic types via reflection. Generally reflection is to be avoided in Micronaut. Hence
+ * Utility methods for dealing with generic types via reflection. Generally reflection is to be avoided in Micronaut. Hence,
  * this class is regarded as internal and used for only certain niche cases.
  *
  * @author Graeme Rocher
@@ -53,7 +53,7 @@ public static Optional<Class<?>> resolveGenericTypeArgument(Field field) {
     }
 
     /**
-     * Resolve all of the type arguments for the given interface from the given type. Also
+     * Resolve all type arguments for the given interface from the given type. Also
      * searches superclasses.
      *
      * @param type          The type to resolve from
@@ -77,7 +77,7 @@ public static Class<?>[] resolveInterfaceTypeArguments(Class<?> type, Class<?> i
     }
 
     /**
-     * Resolve all of the type arguments for the given super type from the given type.
+     * Resolve all type arguments for the given super type from the given type.
      *
      * @param type      The type to resolve from
      * @param superTypeToResolve The suepr type to resolve from

File: core/src/main/java/io/micronaut/core/reflect/exception/InstantiationException.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.core.reflect.exception;
 
 /**
- * Thrown when an error occurs instantiating a instance.
+ * Thrown when an error occurs instantiating an instance.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/type/RuntimeTypeInformation.java
Patch:
@@ -50,7 +50,7 @@ private static boolean isJavaBasicTypeAndNotReactiveAndNotWrapper(Class<?> type)
      * Returns whether the annotation metadata specifies the type as single.
      * @param type The return type
      * @param annotationMetadata The annotation metadata provider
-     * @return True if does
+     * @return True if it does
      */
     static boolean isSpecifiedSingle(Class<?> type, AnnotationMetadataProvider annotationMetadata) {
         if (isJavaBasicTypeAndNotReactiveAndNotWrapper(type)) {

File: core/src/main/java/io/micronaut/core/type/TypeInformation.java
Patch:
@@ -83,7 +83,7 @@ default boolean isReactive() {
     }
 
     /**
-     * Returns whether this type is a wrapper type that wraps the actual type such as a Optional or a Response wrapper.
+     * Returns whether this type is a wrapper type that wraps the actual type such as an Optional or a Response wrapper.
      *
      * @return True if it is a wrapper type.
      * @since 2.4.0
@@ -101,7 +101,7 @@ default Argument<?> getWrappedType() {
     }
 
     /**
-     * @return Is the return the return type a reactive completable type.
+     * @return Is the return type a reactive completable type.
      * @since 2.0.0
      */
     default boolean isCompletable() {

File: core/src/main/java/io/micronaut/core/type/UnsafeExecutable.java
Patch:
@@ -28,7 +28,7 @@
 public interface UnsafeExecutable<T, R> extends Executable<T, R> {
 
     /**
-     * Invokes the method without the arguments validation.
+     * Invokes the method without the arguments' validation.
      *
      * @param instance  The instance. Nullable only if it's a static method call.
      * @param arguments The arguments

File: core/src/main/java/io/micronaut/core/util/AntPathMatcher.java
Patch:
@@ -289,7 +289,7 @@ private boolean matchStrings(String pattern, String str) {
         }
         if (strIdxStart > strIdxEnd) {
             // All characters in the string are used. Check if only '*'s are
-            // left in the pattern. If so, we succeeded. Otherwise failure.
+            // left in the pattern. If so, we succeeded. Otherwise, failure.
             for (int i = patIdxStart; i <= patIdxEnd; i++) {
                 if (patArr[i] != '*') {
                     return false;
@@ -311,7 +311,7 @@ private boolean matchStrings(String pattern, String str) {
         }
         if (strIdxStart > strIdxEnd) {
             // All characters in the string are used. Check if only '*'s are
-            // left in the pattern. If so, we succeeded. Otherwise failure.
+            // left in the pattern. If so, we succeeded. Otherwise, failure.
             for (int i = patIdxStart; i <= patIdxEnd; i++) {
                 if (patArr[i] != '*') {
                     return false;
@@ -364,7 +364,7 @@ private boolean matchStrings(String pattern, String str) {
         }
 
         // All characters in the string are used. Check if only '*'s are left
-        // in the pattern. If so, we succeeded. Otherwise failure.
+        // in the pattern. If so, we succeeded. Otherwise, failure.
         for (int i = patIdxStart; i <= patIdxEnd; i++) {
             if (patArr[i] != '*') {
                 return false;

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -213,7 +213,7 @@ public static <T> Iterator<T> reverseIterator(T... array) {
     }
 
     /**
-     * Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.
+     * Returns an array containing all elements in this collection, using the provided generator function to allocate the returned array.
      *
      * @param collection The collection
      * @param createArrayFn The function to create the array
@@ -226,7 +226,7 @@ public static <T> T[] toArray(Collection<T> collection, IntFunction<T[]> createA
     }
 
     /**
-     * Returns an array containing all of the elements in this collection, using the item class.
+     * Returns an array containing all elements in this collection, using the item class.
      *
      * @param collection The collection
      * @param arrayItemClass The array item class

File: core/src/main/java/io/micronaut/core/util/SupplierUtil.java
Patch:
@@ -59,7 +59,7 @@ public T get() {
 
     /**
      * Caches the result of supplier in a thread safe manner. The result
-     * is only cached if it is non null or non empty if an optional.
+     * is only cached if it is non-null or non-empty if an optional.
      *
      * @param valueSupplier The supplier providing the result
      * @param <T> The type of result

File: core/src/main/java/io/micronaut/core/util/clhm/Weighers.java
Patch:
@@ -40,13 +40,13 @@ private Weighers() {
     }
 
     /**
-     * A entry weigher backed by the specified weigher. The weight of the value
+     * An entry weigher backed by the specified weigher. The weight of the value
      * determines the weight of the entry.
      *
-     * @param weigher the weigher to be "wrapped" in a entry weigher.
+     * @param weigher the weigher to be "wrapped" in an entry weigher.
      * @param <K> The key type
      * @param <V> The value type
-     * @return A entry weigher view of the specified weigher.
+     * @return An entry weigher view of the specified weigher.
      */
     public static <K, V> EntryWeigher<K, V> asEntryWeigher(
             final Weigher<? super V> weigher) {

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -114,7 +114,7 @@ public interface PropertyResolver extends ValueResolver<String> {
     }
 
     /**
-     * Return all the properties under the given key. By default Micronaut stores keys in keb-case, such that normalized lookups
+     * Return all the properties under the given key. By default, Micronaut stores keys in keb-case, such that normalized lookups
      * are more efficient. You can obtain the raw key values by passing in {@link StringConvention#RAW}.
      *
      * @param name The name

File: core/src/main/java/io/micronaut/core/version/VersionUtils.java
Patch:
@@ -35,7 +35,7 @@ public class VersionUtils {
 
     private static final Properties VERSIONS = new Properties();
 
-    // This block needs to be here so it is executed before MICRONAUT_VERSION
+    // This block needs to be here, so it is executed before MICRONAUT_VERSION
     static {
         URL resource = VersionUtils.class.getResource("/micronaut-version.properties");
         if (resource != null) {

File: discovery-core/src/main/java/io/micronaut/discovery/cloud/ComputeInstanceMetadataResolverUtils.java
Patch:
@@ -117,7 +117,7 @@ private static InputStream openMetadataUrl(URL url, int connectionTimeoutMs, int
     }
 
     /**
-     * Populates the instance instance metadata's {@link AbstractComputeInstanceMetadata#setMetadata(Map)} property.
+     * Populates the instance metadata's {@link AbstractComputeInstanceMetadata#setMetadata(Map)} property.
      *
      * @param instanceMetadata The instance metadata
      * @param metadata         A json object of metadata
@@ -148,7 +148,7 @@ public static Optional<String> stringValue(com.fasterxml.jackson.databind.JsonNo
     }
 
     /**
-     * Populates the instance instance metadata's {@link AbstractComputeInstanceMetadata#setMetadata(Map)} property.
+     * Populates the instance metadata's {@link AbstractComputeInstanceMetadata#setMetadata(Map)} property.
      *
      * @param instanceMetadata The instance metadata
      * @param metadata         A map of metadata

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -239,7 +239,7 @@ default HttpClient refresh() {
 
     /**
      * Create a new {@link HttpClient}.
-     * Note that this method should only be used outside of the context of a Micronaut application.
+     * Note that this method should only be used outside the context of a Micronaut application.
      * The returned {@link HttpClient} is not subject to dependency injection.
      * The creator is responsible for closing the client to avoid leaking connections.
      * Within a Micronaut application use {@link jakarta.inject.Inject} to inject a client instead.
@@ -253,7 +253,7 @@ static HttpClient create(@Nullable URL url) {
 
     /**
      * Create a new {@link HttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -597,17 +597,17 @@ public void setProxyAddress(SocketAddress proxyAddress) {
     }
 
     /**
-     * @return The proxy user name to use
+     * @return The proxy username to use
      */
     public Optional<String> getProxyUsername() {
         String type = proxyType.name().toLowerCase();
         return proxyUsername != null ? Optional.of(proxyUsername) : Optional.ofNullable(CachedEnvironment.getProperty(type + ".proxyUser"));
     }
 
     /**
-     * Sets the proxy user name to use.
+     * Sets the proxy username to use.
      *
-     * @param proxyUsername The proxy user name to use
+     * @param proxyUsername The proxy username to use
      */
     public void setProxyUsername(String proxyUsername) {
         this.proxyUsername = proxyUsername;

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientFactory.java
Patch:
@@ -30,7 +30,7 @@
 public interface HttpClientFactory {
 
     /**
-     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
+     * Create a new {@link HttpClient}. Note that this method should only be used outside the context of an application. Within Micronaut use
      * {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
@@ -41,7 +41,7 @@ public interface HttpClientFactory {
 
     /**
      * Create a new {@link HttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyHttpClient.java
Patch:
@@ -59,7 +59,7 @@ default Publisher<MutableHttpResponse<?>> proxy(@NonNull HttpRequest<?> request,
 
     /**
      * Create a new {@link ProxyHttpClient}.
-     * Note that this method should only be used outside of the context of a Micronaut application.
+     * Note that this method should only be used outside the context of a Micronaut application.
      * The returned {@link ProxyHttpClient} is not subject to dependency injection.
      * The creator is responsible for closing the client to avoid leaking connections.
      * Within a Micronaut application use {@link jakarta.inject.Inject} to inject a client instead.
@@ -73,7 +73,7 @@ static ProxyHttpClient create(@Nullable URL url) {
 
     /**
      * Create a new {@link ProxyHttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyHttpClientFactory.java
Patch:
@@ -30,7 +30,7 @@
 public interface ProxyHttpClientFactory {
 
     /**
-     * Create a new {@link ProxyHttpClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
+     * Create a new {@link ProxyHttpClient}. Note that this method should only be used outside the context of an application. Within Micronaut use
      * {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
@@ -41,7 +41,7 @@ public interface ProxyHttpClientFactory {
 
     /**
      * Create a new {@link ProxyHttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url           The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/StreamingHttpClient.java
Patch:
@@ -136,7 +136,7 @@ default <I, O> Publisher<O> jsonStream(@NonNull HttpRequest<I> request, @NonNull
 
     /**
      * Create a new {@link StreamingHttpClient}.
-     * Note that this method should only be used outside of the context of a Micronaut application.
+     * Note that this method should only be used outside the context of a Micronaut application.
      * The returned {@link StreamingHttpClient} is not subject to dependency injection.
      * The creator is responsible for closing the client to avoid leaking connections.
      * Within a Micronaut application use {@link jakarta.inject.Inject} to inject a client instead.
@@ -150,7 +150,7 @@ static StreamingHttpClient create(@Nullable URL url) {
 
     /**
      * Create a new {@link StreamingHttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/StreamingHttpClientFactory.java
Patch:
@@ -30,7 +30,7 @@
 public interface StreamingHttpClientFactory {
 
     /**
-     * Create a new {@link StreamingHttpClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
+     * Create a new {@link StreamingHttpClient}. Note that this method should only be used outside the context of an application. Within Micronaut use
      * {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
@@ -41,7 +41,7 @@ public interface StreamingHttpClientFactory {
 
     /**
      * Create a new {@link StreamingHttpClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration The client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/bind/binders/QueryValueClientArgumentRequestBinder.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Implementation of the Binder for {@link QueryValue}
  * The details of implementation can be found in the
- * {@link #bind(ArgumentConversionContext, ClientRequestUriContext, Object, MutableHttpRequest)} bind()} method javadoc.
+ * {@link #bind(ArgumentConversionContext, ClientRequestUriContext, Object, MutableHttpRequest)} method javadoc.
  *
  * @author Andriy Dmytruk
  * @since 3.0.0
@@ -59,12 +59,12 @@ public Class<QueryValue> getAnnotationType() {
      * The ConvertibleMultiValues converters are found in
      * {@link io.micronaut.core.convert.converters.MultiValuesConverterFactory} and perform conversion only when the
      * {@link io.micronaut.core.convert.format.Format} annotation has one of the supported values.
-     * Otherwise if the {@link io.micronaut.core.convert.format.Format} annotation is present, it is converted to {@link String}. If none of these
+     * Otherwise, if the {@link io.micronaut.core.convert.format.Format} annotation is present, it is converted to {@link String}. If none of these
      * are satisfied, the{@link io.micronaut.http.uri.UriTemplate} decides what to do with the given value which
      * is supplied as an Object (it is added to uriContext.pathParameter).
      *
      * <br> By default value is converted to ConvertibleMultiValues when the {@link io.micronaut.core.convert.format.Format} annotation is present and has
-     * one of the defined above formats. Otherwise empty optional is returned.
+     * one of the defined above formats. Otherwise, empty optional is returned.
      *
      * <br> The default {@link io.micronaut.http.uri.UriTemplate} will convert the value to String and to parameters.
      * Optionally, the value can be formatted if the path template states so.

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -116,7 +116,7 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O
     private final ConversionService conversionService;
 
     /**
-     * Constructor for advice class to setup things like Headers, Cookies, Parameters for Clients.
+     * Constructor for advice class to set up things like Headers, Cookies, Parameters for Clients.
      *
      * @param clientFactory        The client factory
      * @param jsonMediaTypeCodec   The JSON media type codec

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 
 /**
- * A builder class to generate a list a list of parts for a multi part request.
+ * A builder class to generate a list of parts for a multipart request.
  *
  * @author James Kleeh
  * @author graemerocher

File: http-client-core/src/main/java/io/micronaut/http/client/sse/SseClient.java
Patch:
@@ -118,7 +118,7 @@ default <B> Publisher<Event<B>> eventStream(@NonNull String uri, @NonNull Argume
 
     /**
      * Create a new {@link SseClient}.
-     * Note that this method should only be used outside of the context of a Micronaut application.
+     * Note that this method should only be used outside the context of a Micronaut application.
      * The returned {@link SseClient} is not subject to dependency injection.
      * The creator is responsible for closing the client to avoid leaking connections.
      * Within a Micronaut application use {@link jakarta.inject.Inject} to inject a client instead.
@@ -132,7 +132,7 @@ static SseClient create(@Nullable URL url) {
 
     /**
      * Create a new {@link SseClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-client-core/src/main/java/io/micronaut/http/client/sse/SseClientFactory.java
Patch:
@@ -31,7 +31,7 @@
 public interface SseClientFactory {
 
     /**
-     * Create a new {@link SseClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
+     * Create a new {@link SseClient}. Note that this method should only be used outside the context of an application. Within Micronaut use
      * {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
@@ -42,7 +42,7 @@ public interface SseClientFactory {
 
     /**
      * Create a new {@link SseClient} with the specified configuration. Note that this method should only be used
-     * outside of the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
+     * outside the context of an application. Within Micronaut use {@link jakarta.inject.Inject} to inject a client instead
      *
      * @param url The base URL
      * @param configuration the client configuration

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerPublisher.java
Patch:
@@ -50,7 +50,7 @@
  * All interactions with the subscriber are done from the handlers executor, hence, they provide the same happens before
  * semantics that Netty provides.
  * <p>
- * The handler publishes all messages that match the type as specified by the passed in class. Any non matching messages
+ * The handler publishes all messages that match the type as specified by the passed in class. Any non-matching messages
  * are forwarded to the next handler.
  * <p>
  * The publisher will signal complete if it receives a channel inactive event.

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamedHttpMessage.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Combines {@link HttpMessage} and {@link Publisher} into one
- * message. So it represents an http message with a stream of {@link HttpContent}
+ * message. So it represents a http message with a stream of {@link HttpContent}
  * messages that can be subscribed to.
  *
  * Note that receivers of this message <em>must</em> consume the publisher,

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamedHttpRequest.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Combines {@link HttpRequest} and {@link StreamedHttpMessage} into one
- * message. So it represents an http request with a stream of
+ * message. So it represents a http request with a stream of
  * {@link io.netty.handler.codec.http.HttpContent} messages that can be subscribed to.
  *
  * @author jroper

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamedHttpResponse.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Combines {@link HttpResponse} and {@link StreamedHttpMessage} into one
- * message. So it represents an http response with a stream of
+ * message. So it represents a http response with a stream of
  * {@link io.netty.handler.codec.http.HttpContent} messages that can be subscribed to.
  *
  * @author jroper

File: http-netty/src/main/java/io/micronaut/http/netty/stream/WebSocketHttpResponse.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Combines {@link HttpResponse} and {@link Processor}
- * into one message. So it represents an http response with a processor that can handle
+ * into one message. So it represents a http response with a processor that can handle
  * a WebSocket.
  *
  * This is only used for server side responses. For client side websocket requests, it's

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -268,7 +268,7 @@ public final ByteBody byteBody() {
 
     /**
      * Get the <i>last</i> body of this request, of any type. This is a weird method to use, avoid
-     * it. It's sometimes necessary to "piggy-back" off other code that parses the body. For
+     * it. It's sometimes necessary to "piggyback" off other code that parses the body. For
      * example in {@link #getBody()}, we want to return whatever we can, even if the body has
      * already been claimed for a {@code @Body} parameter or form parsing or something. So we take
      * the last step in the parse chain and do our best with it.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyServerCustomizer.java
Patch:
@@ -72,7 +72,7 @@ default void onInitialPipelineBuilt() {
      * Called when the "final" stream pipeline has been built for processing http requests. For
      * HTTP/1, this is immediately after {@link #onInitialPipelineBuilt()}. For TLS-based HTTP/2
      * support, where HTTP/1 or HTTP/2 is negotiated through TLS ALPN, this will be called when
-     * negotiation is complete. However for HTTP/2 specifically, this may be changed in the future
+     * negotiation is complete. However, for HTTP/2 specifically, this may be changed in the future
      * when we switch to netty channel multiplexing, where each HTTP/2 stream gets its own channel.
      * <br>
      * Another case is h2c with upgrade from HTTP/1. As with ALPN this method will be called after

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/RequestHandler.java
Patch:
@@ -37,7 +37,7 @@ public interface RequestHandler {
     void accept(ChannelHandlerContext ctx, HttpRequest request, PipeliningServerHandler.OutboundAccess outboundAccess);
 
     /**
-     * Handle an error that is not bound to a request, i.e. happens outside of a
+     * Handle an error that is not bound to a request, i.e. happens outside a
      * {@link io.micronaut.http.netty.stream.StreamedHttpRequest}.
      *
      * @param cause The error

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -82,7 +82,7 @@ public HttpContentProcessor resultType(Argument<?> type) {
             if (Publishers.isConvertibleToPublisher(targetType) && !Publishers.isSingle(targetType)) {
                 Optional<Argument<?>> genericArgument = type.getFirstTypeVariable();
                 if (genericArgument.isPresent() && !Iterable.class.isAssignableFrom(genericArgument.get().getType()) && !isJsonStream) {
-                    // if the generic argument is not a iterable type them stream the array into the publisher
+                    // if the generic argument is not an iterable type them stream the array into the publisher
                     counter.unwrapTopLevelArray();
                     tokenize = true;
                 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/SelfSignedSslBuilder.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * The Netty implementation of {@link SslBuilder} that generates an {@link SslContext} to create a server handler
- * with SSL support via a generated self signed certificate.
+ * with SSL support via a generated self-signed certificate.
  */
 @Requires(condition = SslEnabledCondition.class)
 @Requires(condition = SelfSignedSslBuilder.SelfSignedConfigured.class)

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/ServerSslBuilder.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Interface that allows for different builder instances to be able to create
- * an the SSLContext supplied later to the micronaut http server.
+ * the SSLContext supplied later to the micronaut http server.
  */
 public interface ServerSslBuilder {
 

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/cors/CrossOriginTest.java
Patch:
@@ -240,7 +240,7 @@ void httHeaderValueAccessControlExposeHeaderValueCanBeSetViaCrossOriginAnnotatio
     }
 
     /**
-     * The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to the frontend JavaScript code when the request's credentials mode (Request.credentials) is include.
+     * The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to the frontend JavaScript code when the request's credentials mode (Request.credentials) is included.
      * @see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials">Access-Control-Allow-Credentials</a>
      */
     @Test
@@ -257,7 +257,7 @@ void defaultAccessControlAllowCredentialsValueIsNotSet() throws IOException {
     }
 
     /**
-     * The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to the frontend JavaScript code when the request's credentials mode (Request.credentials) is include.
+     * The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to the frontend JavaScript code when the request's credentials mode (Request.credentials) is included.
      * @see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials">Access-Control-Allow-Credentials</a>
      */
     @Test

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -259,7 +259,7 @@ public Duration getReadIdleTimeout() {
     }
 
     /**
-     * @return The default amount of time to allow write operation connections to remain idle
+     * @return The default amount of time to allow to write operation connections to remain idle
      */
     public Duration getWriteIdleTimeout() {
         return Optional.ofNullable(writeIdleTimeout).orElse(Duration.ofMinutes(DEFAULT_WRITE_IDLE_TIME_MINUTES));

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -304,7 +304,7 @@ RouteMatch<?> findErrorRoute(Throwable cause,
 
         // First try to find an error route by the exception
         if (declaringType != null) {
-            // handle error with a method that is non global with exception
+            // handle error with a method that is non-global with exception
             errorRoute = router.findErrorRoute(declaringType, cause, httpRequest).orElse(null);
         }
         if (errorRoute == null) {
@@ -325,7 +325,7 @@ RouteMatch<?> findErrorRoute(Throwable cause,
 
             if (errorStatus != null) {
                 if (declaringType != null) {
-                    // handle error with a method that is non global with bad request
+                    // handle error with a method that is non-global with bad request
                     errorRoute = router.findStatusRoute(declaringType, errorStatus, httpRequest).orElse(null);
                 }
                 if (errorRoute == null) {
@@ -349,7 +349,7 @@ RouteMatch<Object> findStatusRoute(HttpRequest<?> incomingRequest, HttpStatus st
         Class<?> declaringType = finalRoute.getDeclaringType();
         // handle re-mapping of errors
         RouteMatch<Object> statusRoute = null;
-        // if declaringType is not null, this means its a locally marked method handler
+        // if declaringType is not null, this means it's a locally marked method handler
         if (declaringType != null) {
             statusRoute = router.findStatusRoute(declaringType, status, incomingRequest)
                 .orElseGet(() -> router.findStatusRoute(status, incomingRequest).orElse(null));

File: http-server/src/main/java/io/micronaut/http/server/util/locale/CookieLocaleResolver.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Optional;
 
 /**
- * Resolves the Locale from a Cookie within a HTTP Request.
+ * Resolves the Locale from a Cookie within an HTTP Request.
  *
  * @author Sergio del Amo
  * @author James Kleeh

File: http-server/src/main/java/io/micronaut/http/server/util/locale/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Micronaut utilities to resolve a {@link java.util.Locale} for an HTTP request.
+ * Micronaut's utilities to resolve a {@link java.util.Locale} for an HTTP request.
  *
  * @author Sergio del Amo
  * @since 1.0

File: http-tck/src/main/java/io/micronaut/http/tck/ServerUnderTest.java
Patch:
@@ -42,7 +42,7 @@ public interface ServerUnderTest extends ApplicationContextProvider, Closeable,
     String BLOCKING_CLIENT_PROPERTY = "use.blocking.client";
 
     /*
-     * Perform an HTTP request for the given request against the server under test and returns the the full HTTP response
+     * Perform an HTTP request for the given request against the server under test and returns the full HTTP response
      * @param request  The {@link HttpRequest} to execute
      * @param <I>     The request body type
      * @param <O>     The response body type

File: http/src/main/java/io/micronaut/http/FullHttpRequest.java
Patch:
@@ -42,7 +42,7 @@ default boolean isFull() {
      * Get the raw body of this request. May be called multiple times. Buffer ownership is not
      * transferred to the caller.
      *
-     * @return The body contents or null if there are none or they are not obtainable.
+     * @return The body contents or null if there are none, or they are not obtainable.
      */
     @Nullable
     ByteBuffer<?> contents();

File: http/src/main/java/io/micronaut/http/HttpMethod.java
Patch:
@@ -152,7 +152,7 @@ public static boolean permitsRequestBody(HttpMethod method) {
 
     /**
      *
-     * @param httpMethodName Name of the http method (may be nonstandard)
+     * @param httpMethodName Name of the http method (maybe nonstandard)
      * @return the value of enum (CUSTOM by default).
      */
     public static HttpMethod parse(String httpMethodName) {

File: http/src/main/java/io/micronaut/http/HttpResponse.java
Patch:
@@ -378,7 +378,7 @@ static <T> MutableHttpResponse<T> status(HttpStatus status) {
      * Return a response for the given status.
      *
      * @param status The status
-     * @param reason An alternatively reason message
+     * @param reason An alternative reason message
      * @param <T>    The response type
      * @return The response
      */
@@ -390,7 +390,7 @@ static <T> MutableHttpResponse<T> status(HttpStatus status, String reason) {
      * Return a response for the given status.
      *
      * @param status The status
-     * @param reason An alternatively reason message
+     * @param reason An alternative reason message
      * @param <T>    The response type
      * @return The response
      */

File: http/src/main/java/io/micronaut/http/HttpResponseFactory.java
Patch:
@@ -41,7 +41,7 @@ public interface HttpResponseFactory {
      * Return a response for the given status.
      *
      * @param status The status
-     * @param reason An alternatively reason message
+     * @param reason An alternative reason message
      * @param <T>    The response type
      * @return The response
      */
@@ -51,7 +51,7 @@ public interface HttpResponseFactory {
      * Return a response for the given status.
      *
      * @param status The status
-     * @param reason An alternatively reason message
+     * @param reason An alternative reason message
      * @param <T>    The response type
      * @return The response
      */

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -108,7 +108,7 @@ public class MediaType implements CharSequence {
     public static final MediaType APPLICATION_FORM_URLENCODED_TYPE = new MediaType(APPLICATION_FORM_URLENCODED);
 
     /**
-     * Short cut for {@link #APPLICATION_FORM_URLENCODED_TYPE}.
+     * Shortcut for {@link #APPLICATION_FORM_URLENCODED_TYPE}.
      */
     public static final MediaType FORM = APPLICATION_FORM_URLENCODED_TYPE;
 

File: http/src/main/java/io/micronaut/http/bind/binders/PathVariableAnnotationBinder.java
Patch:
@@ -62,7 +62,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         String parameterName = annotationMetadata.stringValue(PathVariable.class).orElse(argument.getName());
         // If we need to bind all request params to command object
         // checks if the variable is defined with modifier char *
-        // eg. ?pojo*
+        // e.g. ?pojo*
         final Optional<UriMatchInfo> matchInfo = source.getAttribute(HttpAttributes.ROUTE_MATCH, UriMatchInfo.class);
         boolean bindAll = matchInfo
             .flatMap(umi -> umi.getVariables()

File: http/src/main/java/io/micronaut/http/bind/binders/QueryValueArgumentBinder.java
Patch:
@@ -62,7 +62,7 @@ public Class<QueryValue> getAnnotationType() {
      * It will first try to convert to ConvertibleMultiValues type and if conversion is successful, add the
      * corresponding parameters to the request. (By default the conversion will be successful if the {@link Format}
      * annotation is present and has one of the supported values - see
-     * {@link io.micronaut.core.convert.converters.MultiValuesConverterFactory} for specific converters). Otherwise
+     * {@link io.micronaut.core.convert.converters.MultiValuesConverterFactory} for specific converters). Otherwise,
      * the uri template will be used to deduce what will be done with the request. For example, simple parameters are
      * converted to {@link String}
      */
@@ -78,7 +78,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         }
 
         // First try converting from the ConvertibleMultiValues type and if conversion is successful, return it.
-        // Otherwise use the given uri template to deduce what to do with the variable
+        // Otherwise, use the given uri template to deduce what to do with the variable
         Optional<T> multiValueConversion;
         if (annotationMetadata.hasAnnotation(Format.class)) {
             multiValueConversion = conversionService.convert(parameters, context);
@@ -93,7 +93,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         String parameterName = annotationMetadata.stringValue(QueryValue.class).orElse(argument.getName());
 
         // If we need to bind all request params to command object
-        // checks if the variable is defined with modifier char *, eg. ?pojo*
+        // checks if the variable is defined with modifier char *, e.g. ?pojo*
         boolean bindAll = source.getAttribute(HttpAttributes.ROUTE_MATCH, UriMatchInfo.class)
             .map(umi -> {
                 UriMatchVariable uriMatchVariable = umi.getVariableMap().get(parameterName);

File: http/src/main/java/io/micronaut/http/body/MessageBodyHandlerRegistry.java
Patch:
@@ -51,7 +51,7 @@ public <T> Optional<MessageBodyWriter<T>> findWriter(Argument<T> type, List<Medi
      * Find a reader for the type and annotation metadata at declaration point.
      * @param type The type
      * @param mediaType The media type
-     * @return A message body reader if it is exists.
+     * @return A message body reader if it is existing.
      * @param <T> The generic type
      */
     <T> Optional<MessageBodyReader<T>> findReader(
@@ -63,7 +63,7 @@ <T> Optional<MessageBodyReader<T>> findReader(
      * Find a writer for the type and annotation metadata at declaration point.
      * @param type The type
      * @param mediaType The media type
-     * @return A message body writer if it is exists.
+     * @return A message body writer if it is existing.
      * @param <T> The generic type
      */
     <T> Optional<MessageBodyWriter<T>> findWriter(

File: http/src/main/java/io/micronaut/http/codec/CodecException.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.http.exceptions.HttpException;
 
 /**
- * An exception thrown when a object cannot be decoded.
+ * An exception thrown when an object cannot be decoded.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/cookie/Cookie.java
Patch:
@@ -89,7 +89,7 @@ default Optional<SameSite> getSameSite() {
     }
 
     /**
-     * Determines if this this {@link Cookie} can be sent along cross-site requests.
+     * Determines if this {@link Cookie} can be sent along cross-site requests.
      * For more information, please look
      *  <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05">here</a>
      * @param sameSite SameSite value

File: http/src/main/java/io/micronaut/http/exceptions/HttpStatusException.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 
 /**
- * Exception thrown to return an specific HttpStatus and an error message.
+ * Exception thrown to return a specific HttpStatus and an error message.
  *
  * @author Iván López
  * @since 1.0

File: http/src/main/java/io/micronaut/http/multipart/MultipartException.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.http.exceptions.HttpException;
 
 /**
- * Exception thrown during multi part handling.
+ * Exception thrown during multipart handling.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/ssl/SslConfiguration.java
Patch:
@@ -100,7 +100,7 @@ public int getPort() {
     }
 
     /**
-     * @return Whether or not to build a self signed certificate
+     * @return Whether to build a self-signed certificate
      */
     public boolean buildSelfSigned() {
         return buildSelfSigned;
@@ -177,7 +177,7 @@ public void setPort(int port) {
     }
 
     /**
-     * Sets whether to build a self signed certificate. Default value ({@value io.micronaut.http.ssl.SslConfiguration#DEFAULT_BUILDSELFSIGNED}).
+     * Sets whether to build a self-signed certificate. Default value ({@value io.micronaut.http.ssl.SslConfiguration#DEFAULT_BUILDSELFSIGNED}).
      *
      * @param buildSelfSigned True if a certificate should be built
      *

File: http/src/main/java/io/micronaut/http/uri/QueryStringDecoder.java
Patch:
@@ -268,7 +268,7 @@ private static Map<String, List<String>> decodeParams(String s, int from, Charse
     }
 
     /**
-     * Decodes a bit of an URL encoded by a browser.
+     * Decodes a bit of a URL encoded by a browser.
      * <p>
      * This is equivalent to calling {@link #decodeComponent(String, Charset)}
      * with the UTF-8 charset (recommended to comply with RFC 3986, Section 2).
@@ -283,7 +283,7 @@ public static String decodeComponent(final String s) {
     }
 
     /**
-     * Decodes a bit of an URL encoded by a browser.
+     * Decodes a bit of a URL encoded by a browser.
      * <p>
      * The string is expected to be encoded as per RFC 3986, Section 2.
      * This is the encoding used by JavaScript functions {@code encodeURI}

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/scan/AnnotationClassReader.java
Patch:
@@ -726,8 +726,8 @@ private int readAnnotationValue(int v, final char[] buf, final String name,
      * @param offset a bytecode offset in a method.
      * @param labels the already created labels, indexed by their offset. If a
      *               label already exists for offset this method must not create a
-     *               new one. Otherwise it must store the new label in this array.
-     * @return a non null Label, which must be equal to labels[offset].
+     *               new one. Otherwise, it must store the new label in this array.
+     * @return a non-null Label, which must be equal to labels[offset].
      */
     protected Label readLabel(int offset, Label[] labels) {
         // SPRING PATCH: leniently handle offset mismatch

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/scan/Attribute.java
Patch:
@@ -19,7 +19,7 @@
 import groovyjarjarasm.asm.Label;
 
 /**
- * A non standard class, field, method or code attribute.
+ * A non-standard class, field, method or code attribute.
  *
  * @author Eric Bruneton
  * @author Eugene Kuleshov

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyNativeElement.java
Patch:
@@ -45,7 +45,7 @@ record Class(ClassNode annotatedNode) implements GroovyNativeElement {
     }
 
     /**
-     * The class element with an owner (Generic type etc).
+     * The class element with an owner (Generic type etc.).
      *
      * @param annotatedNode The class node
      * @param owner         The owner

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -94,7 +94,7 @@ public Stream<TypeElement> resolveTypeElements(Set<? extends Element> annotatedE
     }
 
     /**
-     * Obtains the {@link TypeElement} for an given element.
+     * Obtains the {@link TypeElement} for a given element.
      *
      * @param element The element
      * @return The {@link TypeElement}

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicAbstractMethodVisitor.java
Patch:
@@ -80,7 +80,7 @@ protected boolean isAcceptable(Element element) {
     }
 
     /**
-     * Return whether the given executable element is acceptable. By default just checks if the method is abstract.
+     * Return whether the given executable element is acceptable. By default, just checks if the method is abstract.
      * @param executableElement The method
      * @return True if it is
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -445,7 +445,7 @@ public boolean equals(Object o) {
         if (!(that instanceof AbstractJavaElement abstractJavaElement)) {
             return false;
         }
-        // We allow to match different sub classes like JavaClassElement, JavaPlaceholder, JavaWildcard etc
+        // We allow to match different subclasses like JavaClassElement, JavaPlaceholder, JavaWildcard etc
         return nativeElement.element().equals(abstractJavaElement.getNativeType().element());
     }
 

File: inject/src/main/java/io/micronaut/context/AbstractExecutableMethodsDefinition.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.stream.Stream;
 
 /**
- * Abstract base class for for {@link ExecutableMethodsDefinition}.
+ * Abstract base class for {@link ExecutableMethodsDefinition}.
  *
  * @param <T> The type
  * @author Denis Stepanov
@@ -109,7 +109,7 @@ public <R> Stream<ExecutableMethod<T, R>> findPossibleMethods(String name) {
     }
 
     /**
-     * Gets {@link ExecutableMethod} method by it's index.
+     * Gets {@link ExecutableMethod} method by its index.
      *
      * @param index The method index
      * @param <R>   The result type

File: inject/src/main/java/io/micronaut/context/AbstractInitializableBeanDefinition.java
Patch:
@@ -931,7 +931,7 @@ protected final void invokeMethodWithReflection(BeanResolutionContext resolution
     }
 
     /**
-     * Sets the value of a field of a object that requires reflection.
+     * Sets the value of a field of an object that requires reflection.
      *
      * @param resolutionContext The resolution context
      * @param context           The object context
@@ -1888,7 +1888,7 @@ protected final <K> BeanRegistration<K> getBeanRegistrationForField(BeanResoluti
     }
 
     /**
-     * Obtains a an optional for the field at the given index and the argument at the given index
+     * Obtains an optional for the field at the given index and the argument at the given index
      * <p>
      * Warning: this method is used by internal generated code and should not be called by user code.
      *
@@ -2273,7 +2273,7 @@ private <R> boolean isInnerConfiguration(@Nullable Argument<R> argument) {
     }
 
     private <R> boolean isEachBeanParent(Argument<R> argument) {
-        // treat an each bean declaration like an inner configuration
+        // treat each bean declaration like an inner configuration
         Class<?> t = getAnnotationMetadata().classValue(EachBean.class).orElse(null);
         return t != null && t.equals(argument.getType());
     }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3615,7 +3615,7 @@ private List<BeanRegistration> topologicalSort(Collection<BeanRegistration> bean
                     satisfied.add(clazz);
                 }
 
-                //none of the required components are in the unsorted list
+                //none of the required components are in the unsorted list,
                 //so it can be added to the sorted list
                 if (!found) {
                     acyclic = true;

File: inject/src/main/java/io/micronaut/context/Qualifier.java
Patch:
@@ -41,7 +41,7 @@ public interface Qualifier<T> {
      * @param beanType   The bean type
      * @param candidates The candidates
      * @param <BT>       The bean type subclass
-     * @return The qualified candidate or null it it cannot be qualified
+     * @return The qualified candidate or null it cannot be qualified
      */
     <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT> candidates);
 

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -202,7 +202,7 @@ private void processPreStartRequirements(ConditionContext context, AnnotationVal
         }
 
         // need this check because when this method is called with a BeanDefinitionReference the context
-        // is not yet initialized so we cannot know if beans are present or not
+        // is not yet initialized, so we cannot know if beans are present or not
         // check only that the classes are present for the beans requirement
         matchesPresenceOfClasses(context, requirements, MEMBER_BEANS);
     }

File: inject/src/main/java/io/micronaut/context/annotation/Any.java
Patch:
@@ -23,7 +23,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * Qualifier that can be used on a bean to indicate it should match any qualifier or on a
+ * Qualifier that can be used on a bean to indicate it should match any qualifier or on an
  * injection point to indicate it should match any bean.
  *
  * @since 3.0.0

File: inject/src/main/java/io/micronaut/context/annotation/Import.java
Patch:
@@ -51,7 +51,7 @@
     String[] packages() default {};
 
     /**
-     * The annotations types to include in a search when specifying the {@link #packages()} attribute (this attribute has no effect when combined with {@link #classes()}.
+     * The annotation types to include in a search when specifying the {@link #packages()} attribute (this attribute has no effect when combined with {@link #classes()}.
      *
      * <p>If set to {@code "*"} will include all non-abstract classes. Defaults to only included types annotated with JSR-330 scopes or qualifiers.</p>
      *

File: inject/src/main/java/io/micronaut/context/condition/OperatingSystem.java
Patch:
@@ -76,7 +76,7 @@ public boolean isWindows() {
     }
 
     /**
-     * @return <code>true</code> if the current operating system is in the Mac OS family.
+     * @return <code>true</code> if the current operating system is in the macOS family.
      */
     public boolean isMacOs() {
         return family == Family.MAC_OS;

File: inject/src/main/java/io/micronaut/context/env/KubernetesEnvironmentPropertySource.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * A property source specific for the Kubernetes environment.
  *
- * It excludes Kubernetes-specific environment variables (like FOO_SERVICE_HOST, FOO_SERVICE_PORT, etc) since they would
+ * It excludes Kubernetes-specific environment variables (like FOO_SERVICE_HOST, FOO_SERVICE_PORT, etc.) since they would
  * slow down application startup
  *
  * @author Nilson Pontello

File: inject/src/main/java/io/micronaut/context/env/PropertySource.java
Patch:
@@ -48,7 +48,7 @@ public interface PropertySource extends Iterable<String>, Ordered {
     Object get(String key);
 
     /**
-     * @return Whether the property source has upper case under score separated keys
+     * @return Whether the property source has upper case underscore separated keys
      */
     default PropertyConvention getConvention() {
         return PropertyConvention.JAVA_PROPERTIES;
@@ -151,7 +151,7 @@ static PropertySource of(Map<String, Object> map) {
     enum PropertyConvention {
 
         /**
-         * Upper case separated by under scores (environment variable style).
+         * Upper case separated by underscores (environment variable style).
          */
         ENVIRONMENT_VARIABLE,
 

File: inject/src/main/java/io/micronaut/context/event/BeanPreDestroyEventListener.java
Patch:
@@ -34,7 +34,7 @@
 @FunctionalInterface
 public interface BeanPreDestroyEventListener<T> extends EventListener {
     /**
-     * Fired when a bean is is about to be destroyed but before any {@link jakarta.annotation.PreDestroy} methods have been invoked.
+     * Fired when a bean is about to be destroyed but before any {@link jakarta.annotation.PreDestroy} methods have been invoked.
      *
      * @param event The bean created event
      * @return The bean or a replacement bean of the same type

File: inject/src/main/java/io/micronaut/context/exceptions/DependencyInjectionException.java
Patch:
@@ -178,7 +178,7 @@ public DependencyInjectionException(BeanResolutionContext resolutionContext, Bea
     }
 
     /**
-     * Builds an error message for attempted argument conversion on a argument.
+     * Builds an error message for attempted argument conversion on an argument.
      *
      * @param resolutionContext         The resolution context
      * @param argumentConversionContext The argument conversion context

File: inject/src/main/java/io/micronaut/context/scope/AbstractConcurrentCustomScope.java
Patch:
@@ -51,7 +51,7 @@ public abstract class AbstractConcurrentCustomScope<A extends Annotation> implem
 
     /**
      * A custom scope annotation.
-     * 
+     *
      * @param annotationType The annotation type
      */
     protected AbstractConcurrentCustomScope(Class<A> annotationType) {
@@ -98,7 +98,7 @@ public final AbstractConcurrentCustomScope<A> stop() {
     /**
      * Destroys the scope.
      *
-     * @param scopeMap Th scope map
+     * @param scopeMap The scope map
      */
     protected void destroyScope(@Nullable Map<BeanIdentifier, CreatedBean<?>> scopeMap) {
         w.lock();

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -269,7 +269,7 @@ static void registerDefaultValues(AnnotationClassValue<?> annotation, Map<CharSe
     }
 
     /**
-     * Registers a annotation type.
+     * Registers an annotation type.
      *
      * @param annotationClassValue the annotation class value
      */

File: inject/src/main/java/io/micronaut/inject/annotation/EnvironmentOptionalValuesMap.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.stream.Collectors;
 
 /**
- * Extended version of {@link OptionalValuesMap} that resolved place holders.
+ * Extended version of {@link OptionalValuesMap} that resolved placeholders.
  *
  * @param <V> A generic value
  * @author graemerocher

File: inject/src/main/java/io/micronaut/inject/beans/AbstractInitializableBeanIntrospection.java
Patch:
@@ -212,7 +212,7 @@ protected final RuntimeException unknownDispatchAtIndexException(int index) {
      *
      * @param annotationType  The annotation type
      * @param annotationValue The annotation value
-     * @return A immutable collection of properties.
+     * @return An immutable collection of properties.
      * @see io.micronaut.core.annotation.Introspected#indexed()
      */
     @Nullable

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationQualifier.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Qualifies using an annotation.
  *
- * @param <T> Type type
+ * @param <T> Type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/qualifiers/PrimaryQualifier.java
Patch:
@@ -57,7 +57,7 @@ public String toString() {
     }
 
     /**
-     * Generified way to get the a primary instance.
+     * Generified way to get the primary instance.
      * @return The instance
      * @param <T1> The generic type
      * @since 3.6.0

File: inject/src/main/java/io/micronaut/inject/qualifiers/Qualifiers.java
Patch:
@@ -154,7 +154,7 @@ public static String findName(@NonNull Qualifier<?> qualifier) {
 
 
     /**
-     * Qualify by a prefix. Applies starting with logic to the name of the bean..
+     * Qualify by a prefix. Applies starting with logic to the name of the bean.
      *
      * @param prefix The name
      * @param <T>  The component type

File: jackson-databind/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -947,7 +947,7 @@ public final void serializeAsField(Object bean, JsonGenerator gen, SerializerPro
                 return;
             }
             Object value = beanProperty.get(bean);
-            // Null (etc) handling; copied from super-class impl
+            // Null (etc.) handling; copied from super-class impl
             if (value == null) {
                 boolean willSuppressNulls = willSuppressNulls();
                 if (!willSuppressNulls && _nullSerializer != null) {
@@ -1004,7 +1004,7 @@ public final void serializeAsElement(Object bean, JsonGenerator gen, SerializerP
             }
 
             Object value = beanProperty.get(bean);
-            // Null (etc) handling; copied from super-class impl
+            // Null (etc.) handling; copied from super-class impl
             if (value == null) {
                 boolean willSuppressNulls = willSuppressNulls();
                 if (!willSuppressNulls && _nullSerializer != null) {

File: json-core/src/main/java/io/micronaut/json/JsonSyntaxException.java
Patch:
@@ -30,7 +30,7 @@ public final class JsonSyntaxException extends IOException {
      * @param cause The framework exception
      */
     public JsonSyntaxException(Throwable cause) {
-        // copy the message so it's shown properly to the user
+        // copy the message, so it's shown properly to the user
         super(cause.getMessage(), cause);
     }
 

File: json-core/src/main/java/io/micronaut/json/convert/LazyJsonNode.java
Patch:
@@ -187,7 +187,7 @@ public boolean release() {
      */
     @Internal
     public void tryRelease() {
-        // this is a bit yikes but it's necessary so we can attempt conversion twice.
+        // this is a bit of yikes, but it's necessary, so we can attempt conversion twice.
         // it seems to work fine because the first conversion is to JsonNode, which we store
         // locally.
         lock.lock();

File: management/src/main/java/io/micronaut/management/endpoint/routes/RouteDataCollector.java
Patch:
@@ -30,8 +30,7 @@ public interface RouteDataCollector<T> {
 
     /**
      * @param routes A java stream of uri route infos
-     * @return A publisher that returns data representing all of
-     * the given routes.
+     * @return A publisher that returns data representing all given routes.
      */
     T getData(Stream<UriRouteInfo<?, ?>> routes);
 }

File: management/src/main/java/io/micronaut/management/health/aggregator/DefaultHealthAggregator.java
Patch:
@@ -39,7 +39,7 @@
  * response. The top level object represents the most severe status found in the provided health results, or
  * {@link HealthStatus#UNKNOWN} if none found. All registered indicators have their own
  * {status: , description: (optional , details: } object, keyed by the name of the {@link HealthResult} defined inside
- * of the details of the top level object.
+ * the details of the top level object.
  * <p>
  * Example:
  * [status: "UP, details: [diskSpace: [status: UP, details: [:]], cpuUsage: ...]]</p>

File: retry/src/main/java/io/micronaut/retry/RetryState.java
Patch:
@@ -31,7 +31,7 @@
 public interface RetryState {
 
     /**
-     * Should a retry attempt occur.
+     * Should a retry attempt to occur.
      *
      * @param exception The error
      *

File: retry/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java
Patch:
@@ -50,7 +50,7 @@ class AnnotationRetryStateBuilder implements RetryStateBuilder {
     private final AnnotationMetadata annotationMetadata;
 
     /**
-     * Build the meta data for the given element with retry.
+     * Build the metadata for the given element with retry.
      *
      * @param annotationMetadata Allows the inspection of annotation metadata and stereotypes (meta-annotations)
      */

File: retry/src/main/java/io/micronaut/retry/intercept/MutableRetryState.java
Patch:
@@ -26,7 +26,7 @@
 interface MutableRetryState extends RetryState {
 
     /**
-     * @return Return the milli second value for the next delay
+     * @return Return the millisecond value for the next delay
      */
     long nextDelay();
 }

File: retry/src/main/java/io/micronaut/retry/intercept/SimpleRetry.java
Patch:
@@ -88,7 +88,7 @@ class SimpleRetry implements RetryState, MutableRetryState {
     }
 
     /**
-     * Should a retry attempt occur.
+     * Should a retry attempt to occur.
      *
      * @return True if it should
      */
@@ -164,7 +164,7 @@ public Class<? extends Throwable> getCapturedException() {
     }
 
     /**
-     * @return Return the milli second value for the next delay
+     * @return Return the millisecond value for the next delay
      */
     @Override
     @Internal

File: router/src/main/java/io/micronaut/web/router/DefaultRouteBuilder.java
Patch:
@@ -72,7 +72,7 @@
 public abstract class DefaultRouteBuilder implements RouteBuilder {
 
     /**
-     * A {@link io.micronaut.web.router.RouteBuilder.UriNamingStrategy} where by camel case conventions are used.
+     * A {@link io.micronaut.web.router.RouteBuilder.UriNamingStrategy} whereby camel case conventions are used.
      */
     public static final UriNamingStrategy CAMEL_CASE_NAMING_STRATEGY = new UriNamingStrategy() {
     };
@@ -423,9 +423,9 @@ private UriRoute buildBeanRoute(HttpMethod httpMethod, String uri, BeanDefinitio
     }
 
     /**
-     * A special case that is required for non standard http methods.
+     * A special case that is required for non-standard http methods.
      * @param httpMethodName The name of method. For standard http methods matches {@link HttpMethod#name()}
-     * @param httpMethod The http method. Is {@link HttpMethod#CUSTOM} for non standard http methods.
+     * @param httpMethod The http method. Is {@link HttpMethod#CUSTOM} for non-standard http methods.
      * @param uri The uri.
      * @param beanDefinition The definition of the bean.
      * @param method The method description

File: router/src/main/java/io/micronaut/web/router/RouteBuilder.java
Patch:
@@ -209,7 +209,7 @@ default StatusRoute status(HttpStatus status, Object instance, String method) {
      * @param originatingClass The class where the error originates from
      * @param error            The error type
      * @param type             The type to route to
-     * @param method           The method THe method to route to
+     * @param method           The method to route to
      * @param parameterTypes   The parameter types for the target method
      * @return The route
      */

File: router/src/main/java/io/micronaut/web/router/RouteMatch.java
Patch:
@@ -71,7 +71,7 @@ public interface RouteMatch<R> extends Callable<R>, AnnotationMetadataProvider {
     void fulfillAfterFilters(RequestBinderRegistry requestBinderRegistry, HttpRequest<?> request);
 
     /**
-     * @return Whether the route match can be executed without passing any additional arguments ie. via
+     * @return Whether the route match can be executed without passing any additional arguments i.e. via
      * {@link #execute()}
      * @since 4.0.0
      */

File: router/src/main/java/io/micronaut/web/router/UriRouteInfo.java
Patch:
@@ -47,7 +47,7 @@ public interface UriRouteInfo<T, R> extends MethodBasedRouteInfo<T, R>, RequestM
     /**
      * Match this route within the given URI and produce a {@link RouteMatch} if a match is found.
      *
-     * @param uri The URI The URI
+     * @param uri The URI
      * @return An {@link Optional} of {@link RouteMatch}
      */
     @Override
@@ -58,7 +58,7 @@ default Optional<UriRouteMatch<T, R>> match(URI uri) {
     /**
      * Match this route within the given URI and produce a {@link RouteMatch} if a match is found.
      *
-     * @param uri The URI The URI
+     * @param uri The URI
      * @return A null or a {@link RouteMatch}
      */
     @Nullable

File: router/src/main/java/io/micronaut/web/router/filter/FilteredRouter.java
Patch:
@@ -54,7 +54,7 @@ public class FilteredRouter implements Router {
      * Creates a decorated router for an existing router and {@link RouteMatchFilter}.
      *
      * @param router      A {@link Router} to delegate to
-     * @param routeFilter A {@link RouteMatchFilter} to filter non matching routes
+     * @param routeFilter A {@link RouteMatchFilter} to filter non-matching routes
      */
     public FilteredRouter(Router router,
                           RouteMatchFilter routeFilter) {

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketMapping.java
Patch:
@@ -26,7 +26,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * Stereotype meta-annotation applied to all WebSocket related annotations such as {@link OnOpen}, {@link OnMessage} etc..
+ * Stereotype meta-annotation applied to all WebSocket related annotations such as {@link OnOpen}, {@link OnMessage} etc.
  *
  * @author graemerocher
  * @since 1.0

File: http-netty/src/main/java/io/micronaut/http/netty/channel/ChannelPipelineCustomizer.java
Patch:
@@ -49,6 +49,7 @@ public interface ChannelPipelineCustomizer {
     String HANDLER_MICRONAUT_SSE_CONTENT = "micronaut-sse-content";
     String HANDLER_MICRONAUT_HTTP_RESPONSE_STREAM = "micronaut-http-response-stream";
     String HANDLER_MICRONAUT_HTTP_RESPONSE_FULL = "micronaut-http-response-full";
+    String HANDLER_MICRONAUT_HTTP_RESPONSE = "micronaut-http-response";
     String HANDLER_HTTP2_CONNECTION = "http2-connection";
     String HANDLER_HTTP2_SETTINGS = "http2-settings";
     String HANDLER_HTTP2_UPGRADE_REQUEST = "http2-upgrade-request";

File: test-suite-http-client-tck-jdk/src/test/java/io/micronaut/http/client/tck/jdk/tests/JdkHttpMethodTests.java
Patch:
@@ -12,7 +12,7 @@
 @SelectPackages("io.micronaut.http.client.tck.tests")
 @SuiteDisplayName("HTTP Client TCK for the HTTP Client Implementation based on Java HTTP Client")
 @SuppressWarnings("java:S2187") // This runs a suite of tests, but has no tests of its own
-@ExcludeClassNamePatterns("io.micronaut.http.client.tck.tests.filter.Client.*FilterTest") // JDK client does not support client filters
+@ExcludeClassNamePatterns({"io.micronaut.http.client.tck.tests.filter.Client.*FilterTest", "io.micronaut.http.client.tck.tests.ContinueTest"}) // JDK client does not support client filters
 public class JdkHttpMethodTests {
 }
 

File: test-suite/src/test/java/io/micronaut/docs/netty/LogbookNettyClientCustomizer.java
Patch:
@@ -48,7 +48,7 @@ public NettyClientCustomizer specializeForChannel(Channel channel, ChannelRole r
         @Override
         public void onRequestPipelineBuilt() {
             channel.pipeline().addBefore( // <5>
-                ChannelPipelineCustomizer.HANDLER_HTTP_STREAM,
+                ChannelPipelineCustomizer.HANDLER_MICRONAUT_HTTP_RESPONSE,
                 "logbook",
                 new LogbookClientHandler(logbook)
             );

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -66,9 +66,8 @@ public class UriTemplate implements Comparable<UriTemplate> {
     private static final char DOT_OPERATOR = '.';
 
     // Regex patterns that matches URIs. See RFC 3986, appendix B
-    static final Pattern PATTERN_SCHEME = Pattern.compile("^" + STRING_PATTERN_SCHEME + "//.*");
-    static final Pattern PATTERN_FULL_PATH = Pattern.compile("^([^#\\?]*)(\\?([^#]*))?(\\#(.*))?$");
-    static final Pattern PATTERN_FULL_URI = Pattern.compile(
+    private static final Pattern PATTERN_SCHEME = Pattern.compile("^" + STRING_PATTERN_SCHEME + "//.*");
+    private static final Pattern PATTERN_FULL_URI = Pattern.compile(
             "^(" + STRING_PATTERN_SCHEME + ")?" + "(//(" + STRING_PATTERN_USER_INFO + "@)?" + STRING_PATTERN_HOST + "(:" + STRING_PATTERN_PORT +
                     ")?" + ")?" + STRING_PATTERN_PATH + "(\\?" + STRING_PATTERN_QUERY + ")?" + "(#" + STRING_PATTERN_REMAINING + ")?");
 

File: core-processor/src/main/java/io/micronaut/validation/visitor/package-info.java
Patch:
@@ -19,4 +19,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.scheduling.async.validation;
+package io.micronaut.validation.visitor.async;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/body/ImmediateByteBody.java
Patch:
@@ -123,7 +123,8 @@ public ImmediateSingleObjectBody processSingle(FormDataHttpContentProcessor proc
     public <T> ImmediateSingleObjectBody processSingle(HttpServerConfiguration configuration, MessageBodyReader<T> reader, Argument<T> type, MediaType mediaType, Headers httpHeaders) {
         ByteBuf buf = prepareClaim();
         checkLength(configuration, buf.readableBytes());
-        ByteBuffer<ByteBuf> wrapped = NettyByteBufferFactory.DEFAULT.wrap(buf);
+        // use a slice here so that, in case of failure, our buffer positions remain unaffected
+        ByteBuffer<ByteBuf> wrapped = NettyByteBufferFactory.DEFAULT.wrap(buf.slice());
         T read = reader.read(type, mediaType, httpHeaders, wrapped);
         return next(new ImmediateSingleObjectBody(read));
     }

File: core-processor/src/main/java/io/micronaut/expressions/util/EvaluatedExpressionsUtils.java
Patch:
@@ -67,8 +67,8 @@ private static Collection<AnnotationValue<?>> getNestedAnnotationValues(Object v
             Iterable<?> nestedValues = null;
             if (value instanceof Iterable iterable) {
                 nestedValues = iterable;
-            } else if (value.getClass().isArray()) {
-                nestedValues = Arrays.asList(value);
+            } else if (value instanceof AnnotationValue<?>[] values) {
+                nestedValues = Arrays.asList(values);
             }
 
             if (nestedValues != null) {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/annotation/GroovyAnnotationMetadataBuilder.java
Patch:
@@ -75,7 +75,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collectors;
 
 /**
  * Groovy implementation of {@link AbstractAnnotationMetadataBuilder}.

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -190,7 +190,7 @@ public boolean isProtected() {
 
     @Override
     public boolean isDefault() {
-        return !isAbstract() && getDeclaringType().isInterface();
+        return methodNode.isDefault() || (!isAbstract() && getDeclaringType().isInterface());
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServer.java
Patch:
@@ -60,6 +60,7 @@ default NettyEmbeddedServer stop() {
     /**
      * Stops the Netty instance, but keeps the ApplicationContext running.
      * This for CRaC checkpointing purposes.
+     * This method will only return after waiting for netty to stop.
      *
      * @return The stopped NettyEmbeddedServer
      */

File: http/src/main/java/io/micronaut/http/body/DynamicMessageBodyWriter.java
Patch:
@@ -60,7 +60,7 @@ public MessageBodyWriter<Object> find(Argument<Object> type, MediaType mediaType
             //noinspection unchecked
             return (MessageBodyWriter<Object>) dynamicWriter;
         }
-        if (mediaType.equals(MediaType.TEXT_PLAIN_TYPE) && ClassUtils.isJavaLangType(object.getClass())) {
+        if (mediaType.equals(MediaType.TEXT_PLAIN_TYPE) && ClassUtils.isJavaBasicType(object.getClass())) {
             // compatibility...
             // this will fall back to RawStringHandler, which can handle Object.
             //noinspection unchecked,OptionalGetWithoutIsPresent,rawtypes

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -134,7 +134,7 @@ public DefaultEnvironment(@NonNull ApplicationContextConfiguration configuration
      * @param logEnabled flag to enable or disable logger
      */
     public DefaultEnvironment(@NonNull ApplicationContextConfiguration configuration, boolean logEnabled) {
-        super(configuration.getConversionService().orElseGet(MutableConversionService::create));
+        super(configuration.getConversionService().orElseGet(MutableConversionService::create), logEnabled);
         this.mutableConversionService = (MutableConversionService) conversionService;
         this.configuration = configuration;
         this.resourceLoader = configuration.getResourceLoader();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -421,9 +421,7 @@ public Object visitDeclared(DeclaredType type, Object o) {
                 if (isAcceptable(element)) {
                     List<? extends Element> enclosedElements = element.getEnclosedElements();
                     for (Element enclosedElement : enclosedElements) {
-                        if ((JavaModelUtils.isRecordComponent(enclosedElement)
-                            || enclosedElement instanceof ExecutableElement)
-                            && enclosedElement.getKind() != ElementKind.CONSTRUCTOR) {
+                        if (enclosedElement instanceof VariableElement) {
                             accept(type, enclosedElement, o);
                         }
                     }

File: test-suite-http-server-tck-jdk/src/test/java/io/micronaut/http/server/tck/netty/tests/JdkHttpServerTestSuite.java
Patch:
@@ -1,6 +1,5 @@
 package io.micronaut.http.server.tck.netty.tests;
 
-import org.junit.platform.suite.api.ExcludeClassNamePatterns;
 import org.junit.platform.suite.api.ExcludeTags;
 import org.junit.platform.suite.api.SelectPackages;
 import org.junit.platform.suite.api.Suite;
@@ -10,6 +9,5 @@
 @SelectPackages("io.micronaut.http.server.tck.tests")
 @SuiteDisplayName("HTTP Server TCK for Javanet client")
 @ExcludeTags("multipart") // Multipart not supported by HttpClient
-@ExcludeClassNamePatterns("io.micronaut.http.server.tck.tests.constraintshandler.ControllerConstraintHandlerTest")
 public class JdkHttpServerTestSuite {
 }

File: http/src/main/java/io/micronaut/http/filter/BaseFilterProcessor.java
Patch:
@@ -35,7 +35,6 @@
 import io.micronaut.http.annotation.Body;
 import io.micronaut.http.annotation.CookieValue;
 import io.micronaut.http.annotation.Header;
-import io.micronaut.http.annotation.PathVariable;
 import io.micronaut.http.annotation.QueryValue;
 import io.micronaut.http.annotation.RequestFilter;
 import io.micronaut.http.annotation.ResponseFilter;
@@ -69,8 +68,7 @@ public abstract class BaseFilterProcessor<A extends Annotation> implements Execu
         Body.class.getName(),
         Header.class.getName(),
         QueryValue.class.getName(),
-        CookieValue.class.getName(),
-        PathVariable.class.getName()
+        CookieValue.class.getName()
     );
     @Nullable
     private final BeanContext beanContext;

File: http/src/main/java/io/micronaut/http/filter/FilterRunner.java
Patch:
@@ -391,6 +391,9 @@ private static <T> FilterMethod<T> prepareFilterMethod(ConversionService convers
                 ArgumentBinder<Object, HttpRequest<?>> argumentBinder = (ArgumentBinder<Object, HttpRequest<?>>) argumentBinderRegistry.findArgumentBinder(argument).orElse(null);
                 if (argumentBinder != null) {
                     if (argumentBinder instanceof BaseFilterProcessor.RequiresRequestBodyBinder<?>) {
+                        if (isResponseFilter) {
+                            throw new IllegalArgumentException("Cannot bind @Body in response filter method [" + method.getDescription(true) + "]");
+                        }
                         waitForBody = true;
                     }
                     fulfilled[i] = ctx -> {

File: core-reactive/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -99,6 +99,7 @@ private static List<String> getSingleTypeNames() {
         return List.of(
             "io.micronaut.core.async.publisher.CompletableFuturePublisher",
             "io.micronaut.core.async.publisher.Publishers$JustPublisher",
+            "io.micronaut.core.async.publisher.Publishers$JustThrowPublisher",
             "io.reactivex.Single",
             "reactor.core.publisher.Mono",
             "io.reactivex.Maybe",

File: http-tck/src/main/java/io/micronaut/http/tck/AssertionUtils.java
Patch:
@@ -105,6 +105,7 @@ public static <T> void assertDoesNotThrow(@NonNull ServerUnderTest server,
             .headers(expectedHeaders)
             .build());
     }
+
     public static <T> void assertDoesNotThrow(@NonNull ServerUnderTest server,
                                               @NonNull HttpRequest<T> request,
                                               @NonNull HttpResponseAssertion assertion) {

File: http/src/main/java/io/micronaut/http/body/ConversionTextPlainHandler.java
Patch:
@@ -43,6 +43,7 @@
  *
  * @since 4.0.0
  * @author Jonas Konrad
+ * @param <T> The tye
  */
 @Produces(MediaType.TEXT_PLAIN)
 @Consumes(MediaType.TEXT_PLAIN)

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/codec/JsonCodecAdditionalTypeTest.java
Patch:
@@ -35,6 +35,7 @@
 
 import static io.micronaut.http.tck.TestScenario.asserts;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 
 @SuppressWarnings({
@@ -51,9 +52,8 @@ void itIsPossibleToCanRegisterAdditionTypesForJsonCodec() throws IOException {
         HttpResponseAssertion assertion = HttpResponseAssertion.builder()
             .body(BodyAssertion.builder().body("https://jsonfeed.org").contains())
             .status(HttpStatus.OK)
-            .assertResponse(response -> {
-                assertEquals("application/json+feed", response.header("Content-Type"));
-            }).build();
+            .assertResponse(response -> assertTrue(response.header("Content-Type").contains(APPLICATION_JSON_FEED)))
+            .build();
 
         Map<String, Object> config = Collections.singletonMap("micronaut.codec.json.additional-types", Collections.singletonList(APPLICATION_JSON_FEED));
         asserts(SPEC_NAME,

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ErrorHandlerTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.server.tck.tests;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.CollectionUtils;
@@ -40,6 +39,7 @@
 import io.micronaut.http.tck.HttpResponseAssertion;
 import io.micronaut.http.tck.ServerUnderTest;
 import io.micronaut.http.tck.ServerUnderTestProviderUtils;
+import io.micronaut.json.JsonMapper;
 import jakarta.inject.Singleton;
 import org.junit.jupiter.api.Test;
 
@@ -99,7 +99,7 @@ void testCustomGlobalExceptionHandlersForPOSTWithBody() throws IOException {
             PROPERTY_MICRONAUT_SERVER_CORS_ENABLED, StringUtils.TRUE
         );
         try (ServerUnderTest server = ServerUnderTestProviderUtils.getServerUnderTestProvider().getServer(SPEC_NAME, configuration)) {
-            ObjectMapper objectMapper = server.getApplicationContext().getBean(ObjectMapper.class);
+            JsonMapper objectMapper = server.getApplicationContext().getBean(JsonMapper.class);
             HttpRequest<?> request = HttpRequest.POST("/json/errors/global", objectMapper.writeValueAsString(new RequestObject(101)))
                 .header(HttpHeaders.CONTENT_TYPE, io.micronaut.http.MediaType.APPLICATION_JSON);
             AssertionUtils.assertDoesNotThrow(server, request,

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ExpressionTest.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpStatus;
-import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.RouteCondition;

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/bodywritable/HtmlBodyWritableTest.java
Patch:
@@ -104,7 +104,6 @@ Map<String, Object> indexfluxfilter() {
     @Requires(property = "spec.name", value = SPEC_NAME)
     @Filter("/html/writablefluxfilter")
     static class MockFilter implements HttpServerFilter {
-
         @Override
         public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
             return Flux.from(chain.proceed(request))

File: http-tck/src/main/java/io/micronaut/http/tck/AssertionUtils.java
Patch:
@@ -105,7 +105,6 @@ public static <T> void assertDoesNotThrow(@NonNull ServerUnderTest server,
             .headers(expectedHeaders)
             .build());
     }
-
     public static <T> void assertDoesNotThrow(@NonNull ServerUnderTest server,
                                               @NonNull HttpRequest<T> request,
                                               @NonNull HttpResponseAssertion assertion) {

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ErrorHandlerStringTest.java
Patch:
@@ -43,12 +43,12 @@ public class ErrorHandlerStringTest {
     @Test
     void testErrorHandlerWithStringReturn() throws IOException {
         asserts(SPEC_NAME,
-            HttpRequest.GET("/exception/my").header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON),
+            HttpRequest.GET("/exception/my"),
             (server, request) -> AssertionUtils.assertDoesNotThrow(
                 server,
                 request,
                 HttpStatus.OK,
-                "hello",
+                "{\"message\":\"hello\"}",
                 Map.of(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
             )
         );
@@ -76,7 +76,7 @@ static class MyExceptionHandler implements ExceptionHandler<MyException, String>
 
         @Override
         public String handle(HttpRequest request, MyException exception) {
-            return "hello";
+            return "{\"message\":\"hello\"}";
         }
     }
 }

File: core-processor/src/main/java/io/micronaut/inject/writer/ClassWriterOutputVisitor.java
Patch:
@@ -128,6 +128,7 @@ default Optional<GeneratedFile> visitMetaInfFile(String path) {
      * Visit a file that will be generated within the generated sources directory.
      *
      * @param path The path
+     * @param originatingElements  the originating elements
      * @return The file if it was possible to create it
      * @since 4.0.0
      */

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonHandler.java
Patch:
@@ -51,8 +51,8 @@
 @Singleton
 @Internal
 @Replaces(JsonMessageHandler.class)
-@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON})
-@Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON})
+@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON, MediaType.TEXT_JSON})
+@Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON, MediaType.TEXT_JSON})
 @BootstrapContextCompatible
 @Requires(beans = JsonMapper.class)
 public final class NettyJsonHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableNettyJsonHandler {

File: json-core/src/main/java/io/micronaut/json/body/JsonMessageHandler.java
Patch:
@@ -47,8 +47,8 @@
 @SuppressWarnings("DefaultAnnotationParam")
 @Experimental
 @Singleton
-@Produces(MediaType.APPLICATION_JSON)
-@Consumes(MediaType.APPLICATION_JSON)
+@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_JSON})
+@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_JSON})
 @BootstrapContextCompatible
 public final class JsonMessageHandler<T> implements MessageBodyHandler<T> {
     private final JsonMapper jsonMapper;

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyJsonHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Replaces;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
@@ -53,6 +54,7 @@
 @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON})
 @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_HAL_JSON})
 @BootstrapContextCompatible
+@Requires(beans = JsonMapper.class)
 public final class NettyJsonHandler<T> implements MessageBodyHandler<T>, ChunkedMessageBodyReader<T>, CustomizableNettyJsonHandler {
     private final JsonMessageHandler<T> jsonMessageHandler;
 

File: http/src/main/java/io/micronaut/http/body/DynamicMessageBodyWriter.java
Patch:
@@ -66,7 +66,7 @@ public MessageBodyWriter<Object> find(Argument<Object> type, MediaType mediaType
             //noinspection unchecked,OptionalGetWithoutIsPresent,rawtypes
             return (MessageBodyWriter) registry.findWriter(Argument.STRING, List.of(MediaType.TEXT_PLAIN_TYPE)).get();
         }
-        throw new CodecException("Cannot encode value [" + object + "]. No possible encoders found for medata type: " + mediaType);
+        throw new CodecException("Cannot encode value [" + object + "]. No possible encoders found for media type: " + mediaType);
     }
 
     @Override

File: http/src/main/java/io/micronaut/http/body/MessageBodyReader.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ReferenceCounted;
-import io.micronaut.core.order.Ordered;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.Headers;
 import io.micronaut.http.MediaType;
@@ -34,14 +33,15 @@
  * An interface that allows reading a message body from the client or the server.
  *
  * <p>Implementors can defined beans that are annotated with {@link io.micronaut.http.annotation.Consumes} to restrict the applicable content types.</p>
+ * <p>Use {@link io.micronaut.core.annotation.Order} to specify the precedence of the reader with lower order corresponding to higher precedence.</p>
  *
  * @see io.micronaut.http.annotation.Consumes
  * @param <T> The generic type.
  * @since 4.0.0
  */
 @Experimental
 @Indexed(MessageBodyReader.class)
-public interface MessageBodyReader<T> extends Ordered {
+public interface MessageBodyReader<T> {
     /**
      * Is the type readable.
      * @param type The type

File: http/src/main/java/io/micronaut/http/body/MessageBodyWriter.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
 import io.micronaut.core.io.buffer.ReferenceCounted;
-import io.micronaut.core.order.Ordered;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.Headers;
 import io.micronaut.core.type.MutableHeaders;
@@ -38,14 +37,15 @@
  * An interface that allows writing a message body for the client or the server.
  *
  * <p>Implementors can define beans that use {@link io.micronaut.http.annotation.Produces} to restrict the applicable content types.</p>
+ * <p>Use {@link io.micronaut.core.annotation.Order} to specify the precedence of the writer with lower order corresponding to higher precedence.</p>
  *
  * @param <T> The generic type.
  * @see io.micronaut.http.annotation.Produces
  * @since 4.0.0
  */
 @Experimental
 @Indexed(MessageBodyWriter.class)
-public interface MessageBodyWriter<T> extends Ordered {
+public interface MessageBodyWriter<T> {
     /**
      * Is the type writeable.
      *

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EpollEventLoopGroupFactory.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty.channel;
 
 import io.micronaut.context.annotation.BootstrapContextCompatible;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
@@ -48,6 +49,7 @@
 @Internal
 @Named(EventLoopGroupFactory.NATIVE)
 @BootstrapContextCompatible
+@Primary
 public class EpollEventLoopGroupFactory implements EventLoopGroupFactory {
 
     /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/IoUringEventLoopGroupFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.annotation.Secondary;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
@@ -46,6 +47,8 @@
 @Internal
 @Named(EventLoopGroupFactory.NATIVE)
 @BootstrapContextCompatible
+// avoid collision with epoll. we prefer epoll because it supports more features (domain socket).
+@Secondary
 public class IoUringEventLoopGroupFactory implements EventLoopGroupFactory {
 
     /**

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodec.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.codec;
 
+import io.micronaut.core.annotation.Indexed;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
@@ -33,6 +34,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Indexed(MediaTypeCodec.class)
 public interface MediaTypeCodec {
 
     /**

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2351,8 +2351,8 @@ private <T> T postBeanCreated(@NonNull BeanResolutionContext resolutionContext,
 
         bean = triggerBeanCreatedEventListener(resolutionContext, beanDefinition, bean, finalQualifier);
 
-        if (beanDefinition instanceof ValidatedBeanDefinition) {
-            bean = ((ValidatedBeanDefinition<T>) beanDefinition).validate(resolutionContext, bean);
+        if (beanDefinition instanceof ValidatedBeanDefinition<T> validatedBeanDefinition) {
+            bean = validatedBeanDefinition.validate(resolutionContext, bean);
         }
         if (LOG_LIFECYCLE.isDebugEnabled()) {
             LOG_LIFECYCLE.debug("Created bean [{}] from definition [{}] with qualifier [{}]", bean, beanDefinition, finalQualifier);

File: core-processor/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -1440,6 +1440,7 @@ private ProcessedAnnotation toProcessedAnnotation(@NonNull AnnotationValue<?> av
         );
     }
 
+
     /**
      * Used to clear mutated metadata at the end of a compilation cycle.
      */

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2973,7 +2973,7 @@ private <T> BeanRegistration<T> getOrCreateScopedRegistration(@Nullable BeanReso
                                                                   @Nullable Qualifier<T> qualifier,
                                                                   @NonNull Argument<T> beanType,
                                                                   @NonNull BeanDefinition<T> definition) {
-        BeanKey<T> beanKey = new BeanKey<>(beanType, qualifier);
+        BeanKey<T> beanKey = new BeanKey<>(definition.asArgument(), qualifier);
         T bean = registeredScope.getOrCreate(
                 new BeanCreationContext<T>() {
                     @NonNull
@@ -2991,7 +2991,7 @@ public BeanIdentifier id() {
                     @NonNull
                     @Override
                     public CreatedBean<T> create() throws BeanCreationException {
-                        return createRegistration(resolutionContext == null ? null : resolutionContext.copy(), beanType, qualifier, definition, true);
+                        return createRegistration(resolutionContext == null ? null : resolutionContext.copy(), beanKey.beanType, qualifier, definition, true);
                     }
                 }
         );

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -42,6 +42,7 @@
 import io.micronaut.http.server.util.DefaultHttpHostResolver;
 import io.micronaut.http.server.util.HttpHostResolver;
 import io.micronaut.http.ssl.ServerSslConfiguration;
+import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.inject.qualifiers.Qualifiers;
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.context.scope.refresh.RefreshEvent;
@@ -692,7 +693,7 @@ public void doOnConnect(@NonNull ChannelPipelineListener listener) {
 
     @Override
     public Set<String> getObservedConfigurationPrefixes() {
-        return Collections.singleton(HttpServerConfiguration.PREFIX);
+        return Set.of(HttpServerConfiguration.PREFIX, SslConfiguration.PREFIX);
     }
 
     @Override

File: http-netty/src/main/java/io/micronaut/http/netty/body/NettyWritableBodyWriter.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty.body;
 
 import io.micronaut.context.annotation.Replaces;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableHeaders;
@@ -42,6 +43,7 @@
 
 @Replaces(WritableBodyWriter.class)
 @Singleton
+@Internal
 final class NettyWritableBodyWriter implements NettyBodyWriter<Writable> {
     private final WritableBodyWriter defaultWritable = new WritableBodyWriter();
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -88,7 +88,7 @@ public BindingResult<Publisher<?>> bind(ArgumentConversionContext<Publisher<?>>
             if (!Publishers.isSingle(context.getArgument().getType()) && !context.getArgument().isSpecifiedSingle() && mediaType != null) {
                 Optional<MessageBodyReader<Object>> reader = nettyBodyAnnotationBinder.bodyHandlerRegistry.findReader(targetType, List.of(mediaType));
                 if (reader.isPresent() && reader.get() instanceof ChunkedMessageBodyReader<Object> piecewise) {
-                    Publisher<Object> pub = piecewise.readChunked(targetType, mediaType, nhr.getHeaders(), Flux.from(rootBody.rawContent(nettyBodyAnnotationBinder.httpServerConfiguration).asPublisher()).map(b -> NettyByteBufferFactory.DEFAULT.wrap((ByteBuf) b)));
+                    Publisher<?> pub = piecewise.readChunked(targetType, mediaType, nhr.getHeaders(), Flux.from(rootBody.rawContent(nettyBodyAnnotationBinder.httpServerConfiguration).asPublisher()).map(b -> NettyByteBufferFactory.DEFAULT.wrap((ByteBuf) b)));
                     return () -> Optional.of(pub);
                 }
             }

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/ResponseStatusTest.java
Patch:
@@ -28,9 +28,9 @@
 import io.micronaut.http.annotation.Status;
 import io.micronaut.http.tck.AssertionUtils;
 import io.micronaut.http.tck.HttpResponseAssertion;
+import jakarta.validation.ConstraintViolationException;
 import org.junit.jupiter.api.Test;
 
-import jakarta.validation.ConstraintViolationException;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.Optional;
@@ -48,7 +48,7 @@ public class ResponseStatusTest {
     @Test
     void testConstraintViolationCauses400() throws IOException {
         asserts(SPEC_NAME,
-            HttpRequest.POST("/response-status/constraint-violation", Collections.emptyMap()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN),
+            HttpRequest.POST("/response-status/constraint-violation", "").header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN),
             (server, request) -> AssertionUtils.assertThrows(server, request, HttpResponseAssertion.builder()
                 .status(HttpStatus.BAD_REQUEST)
                 .build()));

File: http/src/main/java/io/micronaut/http/body/ChunkedMessageBodyReader.java
Patch:
@@ -33,7 +33,7 @@
 @Experimental
 public interface ChunkedMessageBodyReader<T> extends MessageBodyReader<T> {
     @NonNull
-    Publisher<T> readChunked(
+    Publisher<? extends T> readChunked(
         @NonNull Argument<T> type,
         @Nullable MediaType mediaType,
         @NonNull Headers httpHeaders,

File: test-suite/src/test/java/io/micronaut/docs/server/consumes/ConsumesControllerSpec.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.client.HttpClient;
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
+import io.micronaut.http.codec.CodecException;
 import io.micronaut.runtime.server.EmbeddedServer;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -74,7 +75,7 @@ public void testConsumes() {
                 client.toBlocking().exchange(HttpRequest.POST("/consumes/multiple", book)
                 .contentType(MediaType.APPLICATION_JSON)));
 
-        Assertions.assertDoesNotThrow(() ->
+        Assertions.assertThrows(CodecException.class, () ->
                 client.toBlocking().exchange(HttpRequest.POST("/consumes/member", book)
                 .contentType(MediaType.TEXT_PLAIN)));
     }

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyFeature.java
Patch:
@@ -64,8 +64,8 @@ public void beforeAnalysis(BeforeAnalysisAccess access) {
         ImageSingletons.lookup(SystemPropertiesSupport.class).initializeProperty("io.netty.tryReflectionSetAccessible", "true");
         try {
             RuntimeReflection.register(access.findClassByName("java.nio.DirectByteBuffer").getDeclaredConstructor(long.class, int.class));
-        } catch (NoSuchMethodException e) {
-            throw new RuntimeException(e);
+        } catch (NoSuchMethodException ignored) {
+            // not present on JDK 21
         }
         Class<?> unsafeOld = access.findClassByName("sun.misc.Unsafe");
         if (unsafeOld != null) {

File: context/src/main/java/io/micronaut/runtime/Micronaut.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.PrintStream;
-import java.net.URL;
+import java.net.URI;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Optional;
@@ -94,8 +94,8 @@ protected Micronaut() {
                             final EmbeddedServer embeddedServer = (EmbeddedServer) embeddedApplication;
                             if (LOG.isInfoEnabled()) {
                                 long took = elapsedMillis(start);
-                                URL url = embeddedServer.getURL();
-                                LOG.info("Startup completed in {}ms. Server Running: {}", took, url);
+                                URI uri = embeddedServer.getContextURI();
+                                LOG.info("Startup completed in {}ms. Server Running: {}", took, uri);
                             }
                             keepAlive = embeddedServer.isKeepAlive();
                         } else {

File: benchmarks/src/jmh/java/io/micronaut/http/server/stack/SearchController.java
Patch:
@@ -14,11 +14,11 @@
 @Requires(property = "spec.name", value = "FullHttpStackBenchmark")
 public class SearchController {
     @Post("find")
-    public HttpResponse<?> find(@Body Input input) {
+    public HttpResponse<Result> find(@Body Input input) {
         return find(input.haystack, input.needle);
     }
 
-    private static MutableHttpResponse<?> find(List<String> haystack, String needle) {
+    private static MutableHttpResponse<Result> find(List<String> haystack, String needle) {
         for (int listIndex = 0; listIndex < haystack.size(); listIndex++) {
             String s = haystack.get(listIndex);
             int stringIndex = s.indexOf(needle);

File: http-client-tck/src/main/java/io/micronaut/http/client/tck/tests/HttpMethodPostTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpStatus;
+import io.micronaut.http.annotation.Body;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Post;
 import io.micronaut.http.tck.AssertionUtils;
@@ -60,7 +61,7 @@ String response() {
         }
 
         @Post("/object-body")
-        String person(Person person) {
+        String person(@Body Person person) {
             return person.getName() + ":" + person.getAge();
         }
     }

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyStreamedHttpResponse.java
Patch:
@@ -46,7 +46,7 @@
  * @since 1.0
  */
 @Internal
-class NettyStreamedHttpResponse<B> implements MutableHttpResponse<B>, NettyHttpResponseBuilder {
+final class NettyStreamedHttpResponse<B> implements MutableHttpResponse<B>, NettyHttpResponseBuilder {
 
     private final StreamedHttpResponse nettyResponse;
     private final NettyHttpHeaders headers;

File: http-netty/src/main/java/io/micronaut/http/netty/body/JsonCounter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.jackson;
+package io.micronaut.http.netty.body;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.Nullable;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -68,7 +68,7 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor {
      * @param nettyHttpRequest The {@link NettyHttpRequest}
      * @param configuration    The {@link NettyHttpServerConfiguration}
      */
-    FormDataHttpContentProcessor(NettyHttpRequest<?> nettyHttpRequest, NettyHttpServerConfiguration configuration) {
+    public FormDataHttpContentProcessor(NettyHttpRequest<?> nettyHttpRequest, HttpServerConfiguration configuration) {
         super(nettyHttpRequest, configuration);
         Charset characterEncoding = nettyHttpRequest.getCharacterEncoding();
         HttpServerConfiguration.MultipartConfiguration multipart = configuration.getMultipart();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessor.java
Patch:
@@ -34,7 +34,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use the {@link io.micronaut.http.body.MessageBodyReader} API instead
  */
+@Deprecated
 public interface HttpContentProcessor extends Toggleable {
     /**
      * Process more data.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessorResolver.java
Patch:
@@ -40,6 +40,7 @@ public interface HttpContentProcessorResolver {
      * @return The content processor
      */
     @NonNull
+    @Deprecated
     HttpContentProcessor resolve(@NonNull NettyHttpRequest<?> request, @NonNull RouteMatch<?> route);
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpPipelineBuilder.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.http.server.netty.handler.PipeliningServerHandler;
 import io.micronaut.http.server.netty.handler.RequestHandler;
 import io.micronaut.http.server.netty.handler.accesslog.HttpAccessLogHandler;
-import io.micronaut.http.server.netty.types.files.NettySystemFileCustomizableResponseType;
 import io.micronaut.http.server.netty.websocket.NettyServerWebSocketUpgradeHandler;
 import io.micronaut.http.server.util.HttpHostResolver;
 import io.micronaut.http.ssl.ServerSslConfiguration;
@@ -545,7 +544,7 @@ private void insertMicronautHandlers(boolean zeroCopySupported) {
 
             SmartHttpContentCompressor contentCompressor = new SmartHttpContentCompressor(embeddedServices.getHttpCompressionStrategy());
             if (zeroCopySupported) {
-                channel.attr(NettySystemFileCustomizableResponseType.ZERO_COPY_PREDICATE.get()).set(contentCompressor);
+                channel.attr(PipeliningServerHandler.ZERO_COPY_PREDICATE.get()).set(contentCompressor);
             }
             pipeline.addLast(ChannelPipelineCustomizer.HANDLER_HTTP_COMPRESSOR, contentCompressor);
             pipeline.addLast(ChannelPipelineCustomizer.HANDLER_HTTP_DECOMPRESSOR, new HttpContentDecompressor());

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/body/MultiObjectBody.java
Patch:
@@ -37,8 +37,7 @@ public sealed interface MultiObjectBody extends HttpBody permits ImmediateMultiO
     /**
      * Coerce this value to an {@link InputStream}. This implements
      * {@link io.micronaut.http.server.netty.binders.InputStreamBodyBinder}. Requires the objects
-     * of this body to be {@link io.netty.buffer.ByteBuf}s or
-     * {@link io.netty.buffer.ByteBufHolder}s.<br>
+     * of this body to be {@link io.netty.buffer.ByteBuf}s.<br>
      * Ownership is transferred to the stream, it must be closed to release all buffers.
      *
      * @param alloc The buffer allocator to use

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.MediaType;
+import io.micronaut.http.netty.body.JsonCounter;
 import io.micronaut.http.server.netty.AbstractHttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentProcessor;
 import io.micronaut.http.server.netty.NettyHttpRequest;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewServerFilter.java
Patch:
@@ -93,12 +93,12 @@ public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, Server
                         if (Publishers.isConvertibleToPublisher(body)) {
                             Publisher<?> pub = Publishers.convertPublisher(conversionService, body, Publisher.class);
                             response.body(Flux.from(pub)
-                                                  .map(o -> codec.encode((Argument) routeInfo.getBodyType(), o))
+                                                  .map(o -> codec.encode((Argument) routeInfo.getResponseBodyType(), o))
                                                   .subscribeOn(Schedulers.fromExecutorService(executorService)));
                         } else {
                             return Mono.fromCallable(() -> {
                                 @SuppressWarnings({"unchecked", "rawtypes"})
-                                final byte[] encoded = codec.encode((Argument) routeInfo.getBodyType(), body);
+                                final byte[] encoded = codec.encode((Argument) routeInfo.getResponseBodyType(), body);
                                 response.body(encoded);
                                 return response;
                             }).subscribeOn(Schedulers.fromExecutorService(executorService));

File: http-server-netty/src/test/java/io/micronaut/http/server/netty/jackson/JsonContentProcessorBenchmark.java
Patch:
@@ -4,6 +4,7 @@
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.type.Argument;
+import io.micronaut.http.netty.body.JsonCounter;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.json.JsonMapper;

File: http-server/src/main/java/io/micronaut/http/server/ExecutableRouteInfo.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
+import io.micronaut.http.body.MessageBodyHandlerRegistry;
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.inject.MethodReference;
 import io.micronaut.web.router.DefaultRouteInfo;
@@ -32,7 +33,7 @@ class ExecutableRouteInfo<T, R> extends DefaultRouteInfo<R> implements MethodRef
 
     ExecutableRouteInfo(ExecutableMethod<T, R> method,
                         boolean errorRoute) {
-        super(method, method.getReturnType(), List.of(), List.of(), method.getDeclaringType(), errorRoute, false);
+        super(method, method.getReturnType(), List.of(), List.of(), method.getDeclaringType(), errorRoute, false, MessageBodyHandlerRegistry.EMPTY);
         this.method = method;
     }
 

File: http-server/src/main/java/io/micronaut/http/server/types/files/StreamedFile.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
-import io.micronaut.http.server.types.CustomizableResponseTypeException;
+import io.micronaut.http.exceptions.MessageBodyException;
 
 import java.io.File;
 import java.io.IOException;
@@ -91,7 +91,7 @@ public StreamedFile(URL url) {
             this.inputStream = con.getInputStream();
             this.length = con.getContentLengthLong();
         } catch (IOException e) {
-            throw new CustomizableResponseTypeException("Could not open a connection to the URL: " + path, e);
+            throw new MessageBodyException("Could not open a connection to the URL: " + path, e);
         }
     }
 

File: json-core/src/main/java/io/micronaut/json/codec/MapperMediaTypeCodec.java
Patch:
@@ -26,8 +26,8 @@
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.http.codec.CodecException;
 import io.micronaut.http.codec.MediaTypeCodec;
-import io.micronaut.json.JsonMapper;
 import io.micronaut.json.JsonFeatures;
+import io.micronaut.json.JsonMapper;
 import io.micronaut.json.tree.JsonNode;
 import io.micronaut.runtime.ApplicationConfiguration;
 
@@ -174,7 +174,7 @@ public <T> T decode(Argument<T> type, ByteBuffer<?> buffer) throws CodecExceptio
             if (CharSequence.class.isAssignableFrom(type.getType())) {
                 return (T) buffer.toString(applicationConfiguration.getDefaultCharset());
             } else {
-                return getJsonMapper().readValue(buffer.toByteArray(), type);
+                return getJsonMapper().readValue(buffer, type);
             }
         } catch (IOException e) {
             throw new CodecException("Error decoding stream for type [" + type.getType() + "]: " + e.getMessage(), e);

File: test-suite/src/test/java/io/micronaut/docs/function/client/aws/RoundFunction.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.function.client.aws;
 
 import io.micronaut.function.FunctionBean;
+import io.micronaut.http.annotation.Body;
 
 import java.util.function.Function;
 
@@ -29,7 +30,7 @@ public RoundFunction(MathService mathService) {
     }
 
     @Override
-    public Integer apply(Float aFloat) {
+    public Integer apply(@Body Float aFloat) {
         return mathService.round(aFloat);
     }
 }

File: test-suite/src/test/java/io/micronaut/docs/function/client/aws/SumFunction.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.function.client.aws;
 
 import io.micronaut.function.FunctionBean;
+import io.micronaut.http.annotation.Body;
 
 import java.util.function.Function;
 
@@ -29,7 +30,7 @@ public SumFunction(MathService mathService) {
     }
 
     @Override
-    public Long apply(Sum sum) {
+    public Long apply(@Body Sum sum) {
         return mathService.sum(sum);
     }
 }

File: test-suite/src/test/java/io/micronaut/docs/server/endpoint/AlertsEndpoint.java
Patch:
@@ -16,8 +16,8 @@
 package io.micronaut.docs.server.endpoint;
 
 import io.micronaut.context.annotation.Requires;
-//tag::imports[]
 import io.micronaut.http.MediaType;
+import io.micronaut.http.annotation.Body;
 import io.micronaut.management.endpoint.annotation.Delete;
 import io.micronaut.management.endpoint.annotation.Endpoint;
 import io.micronaut.management.endpoint.annotation.Read;
@@ -48,7 +48,7 @@ void clearAlerts() {
 
     @Write(consumes = MediaType.TEXT_PLAIN)
     @Sensitive(property = "add.sensitive", defaultValue = true) // <3>
-    void addAlert(String alert) {
+    void addAlert(@Body String alert) {
         alerts.add(alert);
     }
 }

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/JsonNodeDeserializer.java
Patch:
@@ -31,7 +31,7 @@
  * @since 3.1
  */
 @Singleton
-final class JsonNodeDeserializer extends JsonDeserializer<JsonNode> {
+public final class JsonNodeDeserializer extends JsonDeserializer<JsonNode> {
     @Override
     public JsonNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
         return JsonNodeTreeCodec.getInstance().readTree(p);

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/JsonNodeSerializer.java
Patch:
@@ -31,7 +31,7 @@
  * @since 3.1
  */
 @Singleton
-final class JsonNodeSerializer extends JsonSerializer<JsonNode> {
+public final class JsonNodeSerializer extends JsonSerializer<JsonNode> {
     @Override
     public void serialize(JsonNode value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
         if (value == null) {

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -150,7 +150,7 @@ default Optional<Path> getProjectDir() {
             return projectDir;
         }
         // let's find the projectDir
-        Optional<GeneratedFile> dummyFile = visitGeneratedFile("dummy");
+        Optional<GeneratedFile> dummyFile = visitGeneratedFile("dummy" + System.nanoTime());
         if (dummyFile.isPresent()) {
             URI uri = dummyFile.get().toURI();
             // happens in tests 'mem:///CLASS_OUTPUT/dummy'

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -749,8 +749,8 @@ static Predicate<String> inclusionPredicate(NettyHttpServerConfiguration.AccessL
 
     private class Listener extends ChannelInitializer<Channel> {
         Channel serverChannel;
-        private NettyServerCustomizer listenerCustomizer;
         NettyHttpServerConfiguration.NettyListenerConfiguration config;
+        private NettyServerCustomizer listenerCustomizer;
 
         private volatile HttpPipelineBuilder httpPipelineBuilder;
 

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -560,7 +560,7 @@ protected static void pushBuildArgumentsForMethod(
             String argumentName = entry.getName();
             AnnotationMetadata annotationMetadata = new AnnotationMetadataHierarchy(
                 entry.getAnnotationMetadata(),
-                entry.getType().getTypeAnnotationMetadata()
+                entry.getGenericType().getTypeAnnotationMetadata()
             ).merge();
             Map<String, ClassElement> typeArguments = classElement.getTypeArguments();
             pushCreateArgument(

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Nullable;
 
 /**
- * Abstraction to load resources from the the classpath.
+ * Abstraction to load resources from the classpath.
  *
  * @author James Kleeh
  * @author Graeme Rocher

File: http/src/main/java/io/micronaut/http/ssl/SslConfiguration.java
Patch:
@@ -252,7 +252,7 @@ public void setProtocols(String[] protocols) {
      * @param protocol The protocol
      */
     public void setProtocol(String protocol) {
-        if (!StringUtils.isNotEmpty(protocol)) {
+        if (StringUtils.isNotEmpty(protocol)) {
             this.protocol = protocol;
         }
     }

File: inject/src/main/java/io/micronaut/context/env/yaml/YamlPropertySourceLoader.java
Patch:
@@ -61,15 +61,15 @@ protected void processInput(String name, InputStream input, Map<String, Object>
                 Object object = i.next();
                 if (object instanceof Map) {
                     Map map = (Map) object;
-                    if (LOG.isTraceEnabled()) {
+                    if (logEnabled) {
                         LOG.trace("Processing YAML: {}", map);
                     }
                     String prefix = "";
                     processMap(finalMap, map, prefix);
                 }
             }
         } else {
-            if (LOG.isTraceEnabled()) {
+            if (logEnabled) {
                 LOG.trace("PropertySource [{}] produced no YAML content", name);
             }
         }

File: benchmarks/src/jmh/java/io/micronaut/http/server/stack/FullHttpStackBenchmark.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.http.server.netty.NettyHttpServer;
-import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
@@ -165,7 +164,7 @@ public enum StackFactory {
             Stack openChannel() {
                 ApplicationContext ctx = ApplicationContext.run(Map.of(
                     "spec.name", "FullHttpStackBenchmark",
-                    "micronaut.server.netty.server-type", NettyHttpServerConfiguration.HttpServerType.FULL_CONTENT,
+                    //"micronaut.server.netty.server-type", NettyHttpServerConfiguration.HttpServerType.FULL_CONTENT,
                     "micronaut.server.date-header", false // disabling this makes the response identical each time
                 ));
                 EmbeddedServer server = ctx.getBean(EmbeddedServer.class);

File: http-netty/src/main/java/io/micronaut/http/netty/stream/DelegateStreamedHttpRequest.java
Patch:
@@ -30,7 +30,7 @@
  * @since 1.0
  */
 @Internal
-final class DelegateStreamedHttpRequest extends DelegateHttpRequest implements StreamedHttpRequest {
+public class DelegateStreamedHttpRequest extends DelegateHttpRequest implements StreamedHttpRequest {
 
     private final Publisher<? extends HttpContent> stream;
     private boolean consumed;
@@ -39,7 +39,7 @@ final class DelegateStreamedHttpRequest extends DelegateHttpRequest implements S
      * @param request The Http request
      * @param stream  The publisher
      */
-    DelegateStreamedHttpRequest(HttpRequest request, Publisher<? extends HttpContent> stream) {
+    public DelegateStreamedHttpRequest(HttpRequest request, Publisher<? extends HttpContent> stream) {
         super(request);
         this.stream = stream;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/EmptyHttpRequest.java
Patch:
@@ -36,12 +36,12 @@
  * @since 1.0
  */
 @Internal
-class EmptyHttpRequest extends DelegateHttpRequest implements FullHttpRequest {
+public class EmptyHttpRequest extends DelegateHttpRequest implements FullHttpRequest {
 
     /**
      * @param request The Http request
      */
-    EmptyHttpRequest(HttpRequest request) {
+    public EmptyHttpRequest(HttpRequest request) {
         super(request);
     }
 

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamedHttpRequest.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.http.netty.stream;
 
+import io.micronaut.http.netty.reactive.HotObservable;
+import io.netty.handler.codec.http.HttpContent;
 import io.netty.handler.codec.http.HttpRequest;
 
 /**
@@ -25,7 +27,7 @@
  * @author jroper
  * @author Graeme Rocher
  */
-public interface StreamedHttpRequest extends HttpRequest, StreamedHttpMessage {
+public interface StreamedHttpRequest extends HttpRequest, StreamedHttpMessage, HotObservable<HttpContent> {
 
     /**
      * Releases the stream if there is no subscriber.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -78,7 +78,7 @@ public void add(ByteBufHolder message, Collection<Object> out) throws Throwable
      * @param message The message to release
      */
     protected void fireExceedsLength(long receivedLength, long expected, ByteBufHolder message) {
-        ReferenceCountUtil.safeRelease(message);
+        message.release();
         throw new ContentLengthExceededException(expected, receivedLength);
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -21,7 +21,6 @@
 import io.netty.buffer.ByteBufHolder;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.multipart.HttpData;
-import io.netty.util.ReferenceCountUtil;
 
 import java.util.Collection;
 import java.util.concurrent.atomic.AtomicLong;
@@ -76,7 +75,7 @@ private long resolveLength(ByteBufHolder message) {
     }
 
     private void fireExceedsLength(long receivedLength, long expected, ByteBufHolder message) {
-        ReferenceCountUtil.safeRelease(message);
+        message.release();
         throw new ContentLengthExceededException(expected, receivedLength);
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultNettyEmbeddedServerFactory.java
Patch:
@@ -43,6 +43,7 @@
 import io.micronaut.http.server.netty.types.DefaultCustomizableResponseTypeHandlerRegistry;
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandler;
 import io.micronaut.http.server.netty.types.files.FileTypeHandler;
+import io.micronaut.http.server.netty.websocket.NettyServerWebSocketUpgradeHandler;
 import io.micronaut.http.server.netty.websocket.WebSocketUpgradeHandlerFactory;
 import io.micronaut.http.ssl.ServerSslConfiguration;
 import io.micronaut.scheduling.executor.ExecutorSelector;
@@ -51,7 +52,6 @@
 import io.netty.channel.ChannelOutboundHandler;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.ServerChannel;
-import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.channel.socket.ServerSocketChannel;
 import jakarta.inject.Inject;
 import jakarta.inject.Named;
@@ -269,7 +269,7 @@ public HttpCompressionStrategy getHttpCompressionStrategy() {
     }
 
     @Override
-    public Optional<SimpleChannelInboundHandler<NettyHttpRequest<?>>> getWebSocketUpgradeHandler(NettyEmbeddedServer server) {
+    public Optional<NettyServerWebSocketUpgradeHandler> getWebSocketUpgradeHandler(NettyEmbeddedServer server) {
         return Optional.ofNullable(webSocketUpgradeHandlerFactory)
                         .map(factory -> factory.create(server, this));
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DelegateStreamedHttpResponse.java
Patch:
@@ -29,15 +29,15 @@
  * @since 1.0
  */
 @Internal
-final class DelegateStreamedHttpResponse extends DelegateHttpResponse implements StreamedHttpResponse {
+public final class DelegateStreamedHttpResponse extends DelegateHttpResponse implements StreamedHttpResponse {
 
     private final Publisher<HttpContent> stream;
 
     /**
      * @param response The {@link HttpResponse}
      * @param stream The {@link Publisher} for {@link HttpContent}
      */
-    DelegateStreamedHttpResponse(HttpResponse response,
+    public DelegateStreamedHttpResponse(HttpResponse response,
                                  Publisher<HttpContent> stream) {
         super(response);
         this.stream = stream;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -73,7 +73,8 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor {
         Charset characterEncoding = nettyHttpRequest.getCharacterEncoding();
         HttpServerConfiguration.MultipartConfiguration multipart = configuration.getMultipart();
         HttpDataFactory factory = new MicronautHttpData.Factory(multipart, characterEncoding);
-        final HttpRequest nativeRequest = nettyHttpRequest.getNativeRequest();
+        // prevent the decoders from immediately parsing the content
+        HttpRequest nativeRequest = nettyHttpRequest.toHttpRequestWithoutBody();
         if (HttpPostRequestDecoder.isMultipart(nativeRequest)) {
             this.decoder = new HttpPostMultipartRequestDecoder(factory, nativeRequest, characterEncoding);
         } else {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessorAsReactiveProcessor.java
Patch:
@@ -66,6 +66,7 @@ public static <T> Flux<T> asPublisher(HttpContentProcessor processor, Publisher<
                     processor.add(c, (List) out);
                     return Flux.fromIterable(out);
                 } catch (Throwable e) {
+                    c.touch();
                     return Flux.error(e);
                 }
             }), Flux.defer(() -> {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServices.java
Patch:
@@ -28,14 +28,14 @@
 import io.micronaut.http.server.RouteExecutor;
 import io.micronaut.http.server.binding.RequestArgumentSatisfier;
 import io.micronaut.http.server.netty.ssl.ServerSslBuilder;
+import io.micronaut.http.server.netty.websocket.NettyServerWebSocketUpgradeHandler;
 import io.micronaut.scheduling.executor.ExecutorSelector;
 import io.micronaut.web.router.Router;
 import io.micronaut.web.router.resource.StaticResourceResolver;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelOutboundHandler;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.ServerChannel;
-import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.channel.socket.ServerSocketChannel;
 
 import java.util.List;
@@ -124,7 +124,7 @@ default ExecutorSelector getExecutorSelector() {
      * @return The websocket upgrade handler if present
      */
     @SuppressWarnings("java:S1452")
-    Optional<SimpleChannelInboundHandler<NettyHttpRequest<?>>> getWebSocketUpgradeHandler(NettyEmbeddedServer embeddedServer);
+    Optional<NettyServerWebSocketUpgradeHandler> getWebSocketUpgradeHandler(NettyEmbeddedServer embeddedServer);
 
     /**
      * @return The event loop group registry.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -49,7 +49,7 @@ public final class JsonContentProcessor extends AbstractHttpContentProcessor {
 
     private final JsonMapper jsonMapper;
     private final JsonCounter counter = new JsonCounter();
-    private final boolean tokenize;
+    private boolean tokenize;
     private ByteBuf singleBuffer;
     private CompositeByteBuf compositeBuffer;
 
@@ -83,6 +83,7 @@ public HttpContentProcessor resultType(Argument<?> type) {
                 if (genericArgument.isPresent() && !Iterable.class.isAssignableFrom(genericArgument.get().getType()) && !isJsonStream) {
                     // if the generic argument is not a iterable type them stream the array into the publisher
                     counter.unwrapTopLevelArray();
+                    tokenize = true;
                 }
             }
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/MultipartBodyArgumentBinder.java
Patch:
@@ -88,7 +88,7 @@ public BindingResult<MultipartBody> bind(ArgumentConversionContext<MultipartBody
                 multiObjectBody = nhr.rootBody()
                     .processMulti(processor);
             } catch (Throwable e) {
-                throw new RuntimeException(e);
+                return () -> Optional.of(Flux.<CompletedPart>error(e)::subscribe);
             }
             Set<ReferenceCounted> partial = new HashSet<>();
             //noinspection unchecked

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -175,6 +175,7 @@ public void onNext(PartData o) {
 
                             @Override
                             public void onError(Throwable t) {
+                                discard();
                                 emitter.error(t);
                                 try {
                                     if (outputStream != null) {
@@ -189,6 +190,7 @@ public void onError(Throwable t) {
 
                             @Override
                             public void onComplete() {
+                                discard();
                                 try {
                                     outputStream.close();
                                     emitter.success(true);

File: http/src/main/java/io/micronaut/http/HttpAttributes.java
Patch:
@@ -75,7 +75,10 @@ public enum HttpAttributes implements CharSequence {
 
     /**
      * Attribute used to store a client Certificate (mutual authentication).
+     *
+     * @deprecated Use {@link HttpRequest#getCertificate()} instead
      */
+    @Deprecated
     X509_CERTIFICATE("javax.servlet.request.X509Certificate"),
 
     /**

File: http/src/main/java/io/micronaut/http/HttpRequest.java
Patch:
@@ -177,6 +177,7 @@ default Optional<Locale> getLocale() {
      *
      * @return A certificate used for authentication, if applicable.
      */
+    @SuppressWarnings("deprecation")
     default Optional<Certificate> getCertificate() {
         return this.getAttribute(HttpAttributes.X509_CERTIFICATE, Certificate.class);
     }

File: test-suite/src/test/java/io/micronaut/docs/netty/LogbookNettyServerCustomizer.java
Patch:
@@ -1,16 +1,16 @@
 package io.micronaut.docs.netty;
 
 // tag::imports[]
+
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.server.netty.NettyServerCustomizer;
 import io.netty.channel.Channel;
+import jakarta.inject.Singleton;
 import org.zalando.logbook.Logbook;
 import org.zalando.logbook.netty.LogbookServerHandler;
-
-import jakarta.inject.Singleton;
 // end::imports[]
 
 // tag::class[]
@@ -48,7 +48,7 @@ public NettyServerCustomizer specializeForChannel(Channel channel, ChannelRole r
         @Override
         public void onStreamPipelineBuilt() {
             channel.pipeline().addBefore( // <5>
-                ChannelPipelineCustomizer.HANDLER_HTTP_STREAM,
+                ChannelPipelineCustomizer.HANDLER_MICRONAUT_INBOUND,
                 "logbook",
                 new LogbookServerHandler(logbook)
             );

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/BinaryChatClientWebSocket.java
Patch:
@@ -46,7 +46,7 @@ public void onOpen(String topic, String username, WebSocketSession session) {
         this.topic = topic;
         this.username = username;
         this.session = session;
-        System.out.println("Client session opened for username = " + username);
+        System.out.println("Client session " + session.getId() + " opened for username = " + username);
     }
 
     public String getTopic() {
@@ -72,7 +72,7 @@ public WebSocketSession getSession() {
     @OnMessage
     public void onMessage(
             byte[] message) {
-        System.out.println("Client received message = " + new String(message));
+        System.out.println("Client " + username + " received message = " + new String(message));
         replies.add(new String(message));
     }
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/BinaryChatServerWebSocket.java
Patch:
@@ -36,7 +36,7 @@ public void onOpen(String topic, String username, WebSocketSession session) {
             if(isValid(topic, session, openSession)) {
                 String msg = "[" + username + "] Joined!";
                 System.out.println("Server sending msg = " + msg);
-                openSession.sendSync(msg.getBytes());
+                openSession.sendAsync(msg.getBytes());
             }
         }
     }
@@ -55,7 +55,7 @@ public void onMessage(
             if(isValid(topic, session, openSession)) {
                 String msg = "[" + username + "] " + new String(message);
                 System.out.println("Server sending msg = " + msg);
-                openSession.sendSync(msg.getBytes());
+                openSession.sendAsync(msg.getBytes());
             }
         }
     }
@@ -72,7 +72,7 @@ public void onClose(
             if(isValid(topic, session, openSession)) {
                 String msg = "[" + username + "] Disconnected!";
                 System.out.println("Server sending msg = " + msg);
-                openSession.sendSync(msg.getBytes());
+                openSession.sendAsync(msg.getBytes());
             }
         }
     }

File: http/src/main/java/io/micronaut/http/ssl/SslConfiguration.java
Patch:
@@ -252,7 +252,7 @@ public void setProtocols(String[] protocols) {
      * @param protocol The protocol
      */
     public void setProtocol(String protocol) {
-        if (!StringUtils.isNotEmpty(protocol)) {
+        if (StringUtils.isNotEmpty(protocol)) {
             this.protocol = protocol;
         }
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/body/ImmediateMultiObjectBody.java
Patch:
@@ -26,7 +26,6 @@
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
-import io.netty.util.ReferenceCountUtil;
 import io.netty.util.ReferenceCounted;
 import org.reactivestreams.Publisher;
 import reactor.core.publisher.Flux;
@@ -55,7 +54,7 @@ public final class ImmediateMultiObjectBody extends ManagedBody<List<?>> impleme
 
     @Override
     void release(List<?> value) {
-        value.forEach(ReferenceCountUtil::release);
+        value.forEach(ImmediateSingleObjectBody::release0);
     }
 
     public ImmediateSingleObjectBody single(Charset defaultCharset, ByteBufAllocator alloc) {

File: json-core/src/main/java/io/micronaut/json/convert/LazyJsonNode.java
Patch:
@@ -186,7 +186,7 @@ public boolean release() {
      * Try to release this node if it hasn't been released already.
      */
     @Internal
-    void tryRelease() {
+    public void tryRelease() {
         // this is a bit yikes but it's necessary so we can attempt conversion twice.
         // it seems to work fine because the first conversion is to JsonNode, which we store
         // locally.

File: core-processor/src/main/java/io/micronaut/inject/ast/utils/AstBeanPropertiesUtils.java
Patch:
@@ -89,7 +89,7 @@ public static List<PropertyElement> resolveBeanProperties(PropertyElementQuery c
                 continue;
             }
             String methodName = methodElement.getName();
-            if (methodName.contains("$") || methodName.equals("getMetaClass")) {
+            if (methodName.equals("getMetaClass")) {
                 continue;
             }
             boolean isAccessor = canMethodBeUsedForAccess(methodElement, accessKinds, visibility);

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -112,8 +112,7 @@ public class GroovyClassElement extends AbstractGroovyElement implements Arrayab
     private static final Predicate<FieldNode> JUNK_FIELD_FILTER = m -> {
         String fieldName = m.getName();
 
-        return fieldName.startsWith("$") ||
-                fieldName.startsWith("__$") ||
+        return fieldName.startsWith("__$") ||
                 fieldName.contains("trait$") ||
                 fieldName.equals("metaClass") ||
                 m.getDeclaringClass().equals(ClassHelper.GROOVY_OBJECT_TYPE) ||

File: benchmarks/src/jmh/java/io/micronaut/http/server/stack/FullHttpStackBenchmark.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.http.server.netty.NettyHttpServer;
+import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
@@ -164,6 +165,7 @@ public enum StackFactory {
             Stack openChannel() {
                 ApplicationContext ctx = ApplicationContext.run(Map.of(
                     "spec.name", "FullHttpStackBenchmark",
+                    "micronaut.server.netty.server-type", NettyHttpServerConfiguration.HttpServerType.FULL_CONTENT,
                     "micronaut.server.date-header", false // disabling this makes the response identical each time
                 ));
                 EmbeddedServer server = ctx.getBean(EmbeddedServer.class);

File: context/src/main/java/io/micronaut/scheduling/executor/DefaultExecutorSelector.java
Patch:
@@ -66,7 +66,7 @@ protected DefaultExecutorSelector(
     }
 
     @Override
-    public Optional<ExecutorService> select(MethodReference method, ThreadSelection threadSelection) {
+    public Optional<ExecutorService> select(MethodReference<?, ?> method, ThreadSelection threadSelection) {
         final String name = method.stringValue(EXECUTE_ON).orElse(null);
         if (name != null) {
             final ExecutorService executorService;

File: context/src/main/java/io/micronaut/scheduling/executor/ExecutorSelector.java
Patch:
@@ -36,7 +36,7 @@ public interface ExecutorSelector {
      * @return An optional {@link ExecutorService}. If an {@link ExecutorService} cannot be established
      * {@link Optional#empty()} is returned
      */
-    Optional<ExecutorService> select(MethodReference method, ThreadSelection threadSelection);
+    Optional<ExecutorService> select(MethodReference<?, ?> method, ThreadSelection threadSelection);
 
     /**
      * Obtain executor for the given name.

File: core-reactive/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -426,7 +426,7 @@ public static boolean isConvertibleToPublisher(Class<?> type) {
         if (Publisher.class.isAssignableFrom(type)) {
             return true;
         } else {
-            if (type.isPrimitive() || packageOf(type).startsWith("java.")) {
+            if (type.isPrimitive() || type.getName().startsWith("java.")) {
                 return false;
             }
             for (Class<?> reactiveType : REACTIVE_TYPES) {

File: core/src/main/java/io/micronaut/core/convert/DefaultMutableConversionService.java
Patch:
@@ -120,7 +120,7 @@ public <T> Optional<T> convert(Object object, Class<T> targetType, ConversionCon
 
         Class<?> sourceType = object.getClass();
         final AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();
-        if (annotationMetadata.hasStereotype(Format.class)) {
+        if (annotationMetadata.hasStereotypeNonRepeating(Format.class)) {
             Optional<String> formattingAnn = annotationMetadata.getAnnotationNameByStereotype(Format.class);
             String formattingAnnotation = formattingAnn.orElse(null);
             ConvertiblePair pair = new ConvertiblePair(sourceType, targetType, formattingAnnotation);

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -879,6 +879,7 @@ private <T> Publisher<T> connectWebSocket(URI uri, MutableHttpRequest<?> request
             customHeaders = ((NettyHttpHeaders) headers).getNettyHeaders();
         }
         if (StringUtils.isNotEmpty(subprotocol)) {
+            NettyHttpHeaders.validateHeader("Sec-WebSocket-Protocol", subprotocol);
             customHeaders.add("Sec-WebSocket-Protocol", subprotocol);
         }
 

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequest.java
Patch:
@@ -282,7 +282,8 @@ public FullHttpRequest toFullHttpRequest() {
                 req = new DefaultFullHttpRequest(
                         HttpVersion.HTTP_1_1,
                         method,
-                        uriStr
+                        uriStr,
+                        false
                 );
                 req.headers().setAll(headers.getNettyHeaders());
             }
@@ -306,7 +307,7 @@ public StreamedHttpRequest toStreamHttpRequest() {
             String uriStr = resolveUriPath();
             io.netty.handler.codec.http.HttpMethod method = getMethod(httpMethodName);
             DefaultStreamedHttpRequest req = new DefaultStreamedHttpRequest(
-                    HttpVersion.HTTP_1_1, method, uriStr, (Publisher<HttpContent>) body);
+                                HttpVersion.HTTP_1_1, method, uriStr, false, (Publisher<HttpContent>) body);
             req.headers().setAll(headers.getNettyHeaders());
             return req;
         } else {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/NettyConvertersSpi.java
Patch:
@@ -160,7 +160,7 @@ private TypeConverter<FileUpload, CompletedFileUpload> fileUploadToCompletedFile
     private TypeConverter<Attribute, CompletedPart> attributeToCompletedPartConverter() {
         return (object, targetType, context) -> {
             try {
-                if (!object.isCompleted()) {
+                if (!object.isCompleted() || !targetType.isAssignableFrom(NettyCompletedAttribute.class)) {
                     return Optional.empty();
                 }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -66,7 +66,6 @@ public NettyCompletedFileUpload(FileUpload fileUpload, boolean controlRelease) {
         this.fileUpload = fileUpload;
         this.controlRelease = controlRelease;
         if (controlRelease) {
-            fileUpload.retain();
             tracker = RESOURCE_LEAK_DETECTOR.get().track(this);
         } else {
             tracker = null;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -148,7 +148,7 @@ public void discard() {
     private Publisher<Boolean> transferTo(ThrowingSupplier<OutputStream, IOException> outputStreamSupplier) {
         return Mono.<Boolean>create(emitter ->
 
-                subject.subscribeOn(Schedulers.fromExecutorService(ioExecutor))
+                subject.publishOn(Schedulers.fromExecutorService(ioExecutor))
                         .subscribe(new Subscriber<PartData>() {
                             Subscription subscription;
                             OutputStream outputStream;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketHandler.java
Patch:
@@ -170,7 +170,6 @@ public class NettyServerWebSocketHandler extends AbstractNettyWebSocketHandler {
         this.nettyEmbeddedServices = nettyEmbeddedServices;
         this.coroutineHelper = coroutineHelper;
         request.setAttribute(HttpAttributes.ROUTE_MATCH, routeMatch);
-        request.setAttribute(HttpAttributes.ROUTE, routeMatch.getRoute());
 
         Flux.from(callOpenMethod(ctx)).subscribe(v -> { }, t -> {
             forwardErrorToUser(ctx, e -> {

File: http-server-netty/src/test/java/io/micronaut/http/server/netty/jackson/JsonContentProcessorBenchmark.java
Patch:
@@ -9,7 +9,6 @@
 import io.micronaut.json.JsonMapper;
 import io.micronaut.json.JsonSyntaxException;
 import io.micronaut.json.convert.LazyJsonNode;
-import io.micronaut.json.tree.JsonNode;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.DefaultByteBufHolder;
 import io.netty.buffer.PooledByteBufAllocator;

File: http/src/main/java/io/micronaut/http/bind/binders/AnnotatedRequestArgumentBinder.java
Patch:
@@ -30,7 +30,7 @@
  * @param <T> A type
  * @author Graeme Rocher
  * @see CookieAnnotationBinder
- * @see ParameterAnnotationBinder
+ * @see DefaultUnmatchedRequestArgumentBinder
  * @see HeaderAnnotationBinder
  * @see RequestAttributeAnnotationBinder
  * @since 1.0

File: http/src/main/java/io/micronaut/http/bind/binders/CookieAnnotationBinder.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
-import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;
+import io.micronaut.core.bind.annotation.AbstractArgumentBinder;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.ConvertibleValues;
@@ -33,7 +33,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class CookieAnnotationBinder<T> extends AbstractAnnotatedArgumentBinder<CookieValue, T, HttpRequest<?>> implements AnnotatedRequestArgumentBinder<CookieValue, T> {
+public class CookieAnnotationBinder<T> extends AbstractArgumentBinder<T> implements AnnotatedRequestArgumentBinder<CookieValue, T> {
 
     /**
      * @param conversionService The conversion service
@@ -57,7 +57,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> argument, HttpRequest<
     }
 
     @Override
-    protected String getFallbackFormat(Argument argument) {
+    protected String getFallbackFormat(Argument<?> argument) {
         return NameUtils.hyphenate(argument.getName());
     }
 }

File: http/src/main/java/io/micronaut/http/bind/binders/HeaderAnnotationBinder.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
-import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;
+import io.micronaut.core.bind.annotation.AbstractArgumentBinder;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
@@ -34,7 +34,7 @@
  * @see io.micronaut.http.HttpHeaders
  * @since 1.0
  */
-public class HeaderAnnotationBinder<T> extends AbstractAnnotatedArgumentBinder<Header, T, HttpRequest<?>> implements AnnotatedRequestArgumentBinder<Header, T> {
+public class HeaderAnnotationBinder<T> extends AbstractArgumentBinder<T> implements AnnotatedRequestArgumentBinder<Header, T> {
 
     /**
      * @param conversionService The conversion service
@@ -57,7 +57,7 @@ public Class<Header> getAnnotationType() {
     }
 
     @Override
-    protected String getFallbackFormat(Argument argument) {
+    protected String getFallbackFormat(Argument<?> argument) {
         return NameUtils.hyphenate(NameUtils.capitalize(argument.getName()), false);
     }
 }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -651,8 +651,8 @@ public Object invoke(Object... arguments) {
 
             @NonNull
             @Override
-            public ExecutableMethod<?, Object> getExecutableMethod() {
-                return (ExecutableMethod<?, Object>) method;
+            public ExecutableMethod<Object, Object> getExecutableMethod() {
+                return (ExecutableMethod<Object, Object>) method;
             }
         };
     }
@@ -3785,7 +3785,7 @@ private abstract static class AbstractExecutionHandle<T, R> implements MethodExe
 
         @NonNull
         @Override
-        public ExecutableMethod<?, R> getExecutableMethod() {
+        public ExecutableMethod<T, R> getExecutableMethod() {
             return method;
         }
 

File: inject/src/main/java/io/micronaut/inject/ExecutionHandle.java
Patch:
@@ -72,10 +72,10 @@ public interface ExecutionHandle<T, R> extends AnnotationMetadataDelegate {
      * @return The execution handle
      */
     static <T2, R2> MethodExecutionHandle<T2, R2> of(T2 bean, ExecutableMethod<T2, R2> method) {
-        return new MethodExecutionHandle<T2, R2>() {
+        return new MethodExecutionHandle<>() {
             @NonNull
             @Override
-            public ExecutableMethod<?, R2> getExecutableMethod() {
+            public ExecutableMethod<T2, R2> getExecutableMethod() {
                 return method;
             }
 

File: inject/src/main/java/io/micronaut/inject/MethodExecutionHandle.java
Patch:
@@ -32,5 +32,5 @@ public interface MethodExecutionHandle<T, R> extends ExecutionHandle<T, R>, Meth
      * @return The underlying method reference.
      */
     @NonNull
-    ExecutableMethod<?, R> getExecutableMethod();
+    ExecutableMethod<T, R> getExecutableMethod();
 }

File: management/src/main/java/io/micronaut/management/endpoint/routes/RouteData.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.management.endpoint.routes;
 
-import io.micronaut.web.router.UriRoute;
+import io.micronaut.web.router.UriRouteInfo;
 
 /**
  * <p>Returns data for a given route to be used for the {@link RoutesEndpoint}.</p>
@@ -27,8 +27,8 @@
 public interface RouteData<T> {
 
     /**
-     * @param route The route
+     * @param routeInfo The route info
      * @return Route data
      */
-    T getData(UriRoute route);
+    T getData(UriRouteInfo<?, ?> routeInfo);
 }

File: management/src/main/java/io/micronaut/management/endpoint/routes/impl/DefaultRouteDataCollector.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.management.endpoint.routes.RouteData;
 import io.micronaut.management.endpoint.routes.RouteDataCollector;
 import io.micronaut.management.endpoint.routes.RoutesEndpoint;
-import io.micronaut.web.router.UriRoute;
+import io.micronaut.web.router.UriRouteInfo;
 import jakarta.inject.Singleton;
 
 import java.util.LinkedHashMap;
@@ -48,7 +48,7 @@ public DefaultRouteDataCollector(RouteData<Object> routeData) {
     }
 
     @Override
-    public Map<String, Object> getData(Stream<UriRoute> routes) {
+    public Map<String, Object> getData(Stream<UriRouteInfo<?, ?>> routes) {
         return routes
             .collect(Collectors.toMap(
                 this::getRouteKey,
@@ -62,7 +62,7 @@ public Map<String, Object> getData(Stream<UriRoute> routes) {
      * @param route The URI route
      * @return The route key
      */
-    protected String getRouteKey(UriRoute route) {
+    protected String getRouteKey(UriRouteInfo<?, ?> route) {
         String produces = route
             .getProduces()
             .stream()

File: router/src/main/java/io/micronaut/web/router/Route.java
Patch:
@@ -38,6 +38,8 @@ public interface Route {
      */
     List<MediaType> DEFAULT_PRODUCES = Collections.singletonList(MediaType.APPLICATION_JSON_TYPE);
 
+    RouteInfo<Object> toRouteInfo();
+
     /**
      * Applies the given accepted media type the route.
      *

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationProcessingOutputVisitor.java
Patch:
@@ -87,8 +87,8 @@ public OutputStream visitClass(String classname, io.micronaut.inject.ast.Element
                 // gradle filer only support single originating element for isolating processors
                 final io.micronaut.inject.ast.Element e = originatingElements[0];
                 final Object nativeType = e.getNativeType();
-                if (nativeType instanceof Element) {
-                    nativeOriginatingElements = new Element[] { (Element) nativeType };
+                if (nativeType instanceof JavaNativeElement javaNativeElement) {
+                    nativeOriginatingElements = new Element[] { javaNativeElement.element() };
                 } else {
                     nativeOriginatingElements = new Element[0];
                 }

File: http/src/main/java/io/micronaut/http/util/OutgoingHttpRequestProcessor.java
Patch:
@@ -30,5 +30,5 @@ public interface OutgoingHttpRequestProcessor {
      * @param request The request
      * @return true if the request should be processed
      */
-    boolean shouldProcessRequest(OutgointRequestProcessorMatcher matcher, HttpRequest<?> request);
+    boolean shouldProcessRequest(OutgoingRequestProcessorMatcher matcher, HttpRequest<?> request);
 }

File: http/src/main/java/io/micronaut/http/util/OutgoingRequestProcessorMatcher.java
Patch:
@@ -23,10 +23,10 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-public interface OutgointRequestProcessorMatcher {
+public interface OutgoingRequestProcessorMatcher {
 
     /**
-     * @return a regular expresion to validate the service id against.
+     * @return a regular expression to validate the service id against.
      */
     Pattern getServiceIdPattern();
 

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -50,6 +50,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
@@ -365,7 +367,7 @@ private ReflectionConfigData resolveClassData(String introspectedClass, Map<Stri
 
     private static final class ReflectionConfigData {
         private final AnnotationClassValue<?> type;
-        private final List<TypeHint.AccessType> accessTypes = new ArrayList<>(5);
+        private final SortedSet<TypeHint.AccessType> accessTypes = new TreeSet<>();
         private final List<AnnotationValue<ReflectionConfig.ReflectiveMethodConfig>> methods = new ArrayList<>(30);
         private final List<AnnotationValue<ReflectionConfig.ReflectiveFieldConfig>> fields = new ArrayList<>(30);
 

File: context/src/main/java/io/micronaut/scheduling/DefaultTaskExceptionHandler.java
Patch:
@@ -34,14 +34,14 @@
 @Primary
 public class DefaultTaskExceptionHandler implements TaskExceptionHandler<Object, Throwable> {
 
-    private static final Logger LOG = LoggerFactory.getLogger(DefaultTaskExceptionHandler.class);
+    static final Logger LOG = LoggerFactory.getLogger(DefaultTaskExceptionHandler.class);
 
     @Override
     public void handle(@Nullable Object bean, @NonNull Throwable throwable) {
         if (LOG.isErrorEnabled()) {
             StringBuilder message = new StringBuilder("Error invoking scheduled task ");
             if (bean != null) {
-                message.append("for bean [").append(bean.toString()).append("] ");
+                message.append("for bean [").append(bean).append("] ");
             }
             message.append(throwable.getMessage());
             LOG.error(message.toString(), throwable);

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class UriMatchTemplate extends UriTemplate implements UriMatcher {
 
-    protected static final String VARIABLE_MATCH_PATTERN = "([^\\/\\?#&;\\+]";
+    protected static final String VARIABLE_MATCH_PATTERN = "([^\\/\\?#(?!\\{)&;\\+]";
     protected StringBuilder pattern;
     protected List<UriMatchVariable> variables;
     private final Pattern matchPattern;

File: inject/src/main/java/io/micronaut/context/AbstractInitializableBeanDefinitionReference.java
Patch:
@@ -183,6 +183,9 @@ public BeanDefinition load(BeanContext context) {
         } else if (context instanceof ApplicationContext applicationContext && definition instanceof EnvironmentConfigurable environmentConfigurable) {
             environmentConfigurable.configure(applicationContext.getEnvironment());
         }
+        if (definition instanceof ContextConfigurable ctxConfigurable) {
+            ctxConfigurable.configure(context);
+        }
         return definition;
     }
 

File: test-suite/src/test/java/io/micronaut/docs/client/versioning/HelloClient.java
Patch:
@@ -26,7 +26,7 @@
 // tag::clazz[]
 @Client("/hello")
 @Version("1") // <1>
-public interface HelloClient {
+public  interface HelloClient {
 
     @Get("/greeting/{name}")
     String sayHello(String name);

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/WebSocketMessageEncoder.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty.websocket;
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.codec.MediaTypeCodec;
@@ -38,6 +39,7 @@
  * @author sdelamo
  * @since 1.0
  */
+@Requires(classes = WebSocketSessionException.class)
 @Singleton
 public class WebSocketMessageEncoder {
 

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -262,6 +262,7 @@ private ClassWriter generateClassBytes() {
             // start method: Argument<T> getGenericBeanType()
             GeneratorAdapter getGenericType = startPublicMethodZeroArgs(classWriter, Argument.class, "getGenericBeanType");
             pushCreateArgument(
+                annotationMetadata,
                 beanDefinitionReferenceClassName,
                 Type.getType(getTypeDescriptor(beanDefinitionReferenceClassName)),
                 classWriter,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/SelfSignedSslBuilder.java
Patch:
@@ -87,7 +87,8 @@ public Optional<SslContext> build(SslConfiguration ssl, HttpVersion httpVersion)
                 LOG.warn("HTTP Server is configured to use a self-signed certificate ('build-self-signed' is set to true). This configuration should not be used in a production environment as self-signed certificates are inherently insecure.");
             }
             SelfSignedCertificate ssc = new SelfSignedCertificate();
-            final SslContextBuilder sslBuilder = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey());
+            final SslContextBuilder sslBuilder = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())
+                .trustManager(getTrustManagerFactory(ssl));
             CertificateProvidedSslBuilder.setupSslBuilder(sslBuilder, ssl, httpVersion);
             return Optional.of(sslBuilder.build());
         } catch (CertificateException | SSLException e) {

File: core-processor/src/main/java/io/micronaut/inject/processing/ConfigurationReaderBeanElementCreator.java
Patch:
@@ -146,8 +146,8 @@ public static boolean isConfigurationProperties(ClassElement classElement) {
     }
 
     @Override
-    protected boolean visitAopMethod(BeanDefinitionVisitor visitor, MethodElement methodElement) {
-        return false;
+    protected void makeInterceptedForValidationIfNeeded(MethodElement element) {
+        // Configuration beans are validated by the introspection
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationMetadataQualifier.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -166,8 +166,8 @@ private static Map<CharSequence, Object> resolveBindingValues(AnnotationMetadata
 
     @NonNull
     private static Set<String> resolveNonBindingMembers(AnnotationMetadata annotationMetadata) {
-        final String[] nonBindingArray = annotationMetadata.stringValues(AnnotationUtil.QUALIFIER, "nonBinding");
-        return ArrayUtils.isNotEmpty(nonBindingArray) ? new HashSet<>(Arrays.asList(nonBindingArray)) : Collections.emptySet();
+        final String[] nonBindingArray = annotationMetadata.stringValues(AnnotationUtil.QUALIFIER, AnnotationUtil.NON_BINDING_ATTRIBUTE);
+        return ArrayUtils.isNotEmpty(nonBindingArray) ? new LinkedHashSet<>(Arrays.asList(nonBindingArray)) : Collections.emptySet();
     }
 
     @Override

File: core/src/main/java/io/micronaut/core/annotation/NonNull.java
Patch:
@@ -32,9 +32,6 @@
  * <p>Should be used at parameter, return value, and field level. Method overrides should repeat parent {@code @NonNull} annotations unless
  * they behave differently.</p>
  *
- * <p>Use {@code @NonNull} Api (scope = parameters + return values) to set the default behavior to non-nullable in order to avoid annotating
- * your whole codebase with {@code @NonNull}.</p>
- *
  * @author graemerocher
  * @see Nullable
  * @since 2.4

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -146,7 +146,9 @@ private void flush(Collection<Object> out, ByteBuf completedNode) throws IOExcep
             try {
                 out.add(jsonMapper.readValue(wrapped, Argument.of(JsonNode.class)));
             } finally {
-                completedNode.release();
+                if (completedNode != null) {
+                    completedNode.release();
+                }
             }
         } else {
             out.add(new LazyJsonNode(wrapped));

File: inject/src/main/java/io/micronaut/inject/annotation/MutableAnnotationMetadata.java
Patch:
@@ -537,6 +537,7 @@ public void addDeclaredAnnotation(String annotation, Map<CharSequence, Object> v
         }
     }
 
+    @SuppressWarnings("java:S2259") // false positive
     private void addAnnotation(String annotation,
                                Map<CharSequence, Object> values,
                                Map<String, Map<CharSequence, Object>> declaredAnnotations,

File: json-core/src/main/java/io/micronaut/json/convert/LazyJsonNode.java
Patch:
@@ -40,6 +40,7 @@ public final class LazyJsonNode implements ReferenceCounted {
     private ByteBuffer<?> buffer;
     private int refCnt = 1;
     @Nullable
+    @SuppressWarnings("java:S3077")
     private volatile JsonNode asNode;
     @Nullable
     private JsonSyntaxException syntaxException;

File: core/src/main/java/io/micronaut/core/io/scan/AnnotationScanner.java
Patch:
@@ -119,7 +119,7 @@ public interface AnnotationScanner {
     default @NonNull Stream<Class<?>> scan(@NonNull Class<? extends Annotation> annotation, @NonNull Collection<String> packages) {
         Objects.requireNonNull(annotation, "Annotation type cannot be null");
         Objects.requireNonNull(packages, "Packages to scan cannot be null");
-        return scan(annotation.getName(), packages.parallelStream());
+        return scan(annotation.getName(), packages.stream());
     }
 
     /**
@@ -134,7 +134,6 @@ public interface AnnotationScanner {
         Objects.requireNonNull(packages, "Packages to scan cannot be null");
 
         return packages
-            .parallel()
             .flatMap(pkg -> scan(annotation, pkg));
     }
 

File: inject/src/main/java/io/micronaut/context/env/yaml/CustomSafeConstructor.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.context.env.yaml;
 
 import io.micronaut.core.annotation.Internal;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.nodes.MappingNode;
 import org.yaml.snakeyaml.nodes.SequenceNode;
@@ -34,6 +35,7 @@
 @Internal
 class CustomSafeConstructor extends SafeConstructor {
     CustomSafeConstructor() {
+        super(new LoaderOptions());
         yamlConstructors.put(Tag.TIMESTAMP, new ConstructIsoTimestampString());
     }
 

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1436,9 +1436,10 @@ public void visitSetterValue(
 
                 Type declaringTypeRef = JavaModelUtils.getTypeReference(declaringType);
                 String methodDescriptor = getMethodDescriptor(methodElement.getReturnType(), Arrays.asList(methodElement.getParameters()));
-                injectMethodVisitor.visitMethodInsn(isInterface ? INVOKEINTERFACE : INVOKEVIRTUAL,
+                boolean isDeclaringTypeInterface = declaringType.getType().isInterface();
+                injectMethodVisitor.visitMethodInsn(isDeclaringTypeInterface ? INVOKEINTERFACE : INVOKEVIRTUAL,
                         declaringTypeRef.getInternalName(), methodElement.getName(),
-                        methodDescriptor, isInterface);
+                        methodDescriptor, isDeclaringTypeInterface);
 
                 if (!methodElement.getReturnType().isVoid()) {
                     injectMethodVisitor.pop();

File: management/src/main/java/io/micronaut/management/health/indicator/service/ServiceReadyHealthIndicator.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.order.Ordered;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.discovery.event.ServiceReadyEvent;
 import io.micronaut.health.HealthStatus;
 import io.micronaut.management.endpoint.health.HealthEndpoint;
@@ -40,9 +41,11 @@
  */
 @Singleton
 @Requires(beans = HealthEndpoint.class)
+@Requires(property = ServiceReadyHealthIndicator.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)
 @Readiness
 public class ServiceReadyHealthIndicator implements HealthIndicator {
 
+    public static final String ENABLED = HealthEndpoint.PREFIX + ".service-ready-indicator-enabled";
     private static final String NAME = "service";
     private final boolean isService;
 

File: core-processor/src/main/java/io/micronaut/context/visitor/ConfigurationReaderVisitor.java
Patch:
@@ -140,7 +140,7 @@ private void visitAbstractMethod(MethodElement method, VisitorContext context) {
             context.fail("Only zero argument getter methods are allowed on @ConfigurationProperties interfaces: " + method, method);
             return;
         }
-        if ("void".equals(method.getReturnType().getName())) {
+        if (method.getReturnType().isVoid()) {
             context.fail("Getter methods must return a value @ConfigurationProperties interfaces: " + method, method);
             return;
         }

File: core-processor/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -267,7 +267,7 @@ public CachedAnnotationMetadata lookupOrBuild(Object key, T element) {
      * @return The annotation metadata
      * @since 4.0.0
      */
-    public CachedAnnotationMetadata lookupOrBuild(Object key, T element, boolean includeTypeAnnotations) {
+    private CachedAnnotationMetadata lookupOrBuild(Object key, T element, boolean includeTypeAnnotations) {
         CachedAnnotationMetadata cachedAnnotationMetadata = MUTATED_ANNOTATION_METADATA.get(key);
         if (cachedAnnotationMetadata == null) {
             AnnotationMetadata annotationMetadata = buildInternal(includeTypeAnnotations, false, element);

File: core-processor/src/main/java/io/micronaut/inject/ast/ClassElement.java
Patch:
@@ -646,6 +646,7 @@ default ClassElement withBoundGenericTypes(@NonNull List<? extends ClassElement>
      * @since 3.1.0
      */
     @Experimental
+    @Nullable
     default ClassElement foldBoundGenericTypes(@NonNull Function<ClassElement, ClassElement> fold) {
         List<ClassElement> typeArgs = getBoundGenericTypes().stream().map(arg -> arg.foldBoundGenericTypes(fold)).toList();
         if (typeArgs.contains(null)) {

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -1149,7 +1149,7 @@ public void writeDispatchOne(GeneratorAdapter writer) {
                         if (writeDispatch instanceof DispatchWriter.MethodDispatchTarget) {
                             MethodElement writeMethod = ((DispatchWriter.MethodDispatchTarget) writeDispatch).getMethodElement();
                             ClassElement writeReturnType = invokeMethod(writer, writeMethod);
-                            if (!writeReturnType.getName().equals("void")) {
+                            if (!writeReturnType.isVoid()) {
                                 writer.pop();
                             }
                         } else if (writeDispatch instanceof DispatchWriter.FieldSetDispatchTarget) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaElementAnnotationMetadataFactory.java
Patch:
@@ -88,7 +88,7 @@ protected AbstractAnnotationMetadataBuilder.CachedAnnotationMetadata lookupTypeA
         if (typeMirror == null) {
             return super.lookupTypeAnnotationsForClass(classElement);
         }
-        return metadataBuilder.lookupOrBuild(clazz, new AnnotationsElement(typeMirror), true);
+        return metadataBuilder.lookupOrBuild(clazz, new AnnotationsElement(typeMirror));
     }
 
     @Override
@@ -107,7 +107,7 @@ protected AbstractAnnotationMetadataBuilder.CachedAnnotationMetadata lookupTypeA
     @Override
     protected AbstractAnnotationMetadataBuilder.CachedAnnotationMetadata lookupTypeAnnotationsForWildcard(WildcardElement wildcardElement) {
         WildcardType wildcard = (WildcardType) wildcardElement.getGenericNativeType();
-        return metadataBuilder.lookupOrBuild(wildcard, new AnnotationsElement(wildcard), true);
+        return metadataBuilder.lookupOrBuild(wildcard, new AnnotationsElement(wildcard));
     }
 
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaConstructorElement.java
Patch:
@@ -31,16 +31,16 @@
 class JavaConstructorElement extends JavaMethodElement implements ConstructorElement {
 
     /**
-     * @param declaringClass            The declaring class
+     * @param owningClass            The declaring class
      * @param nativeElement             The native element
      * @param annotationMetadataFactory The annotation metadata factory
      * @param visitorContext            The visitor context
      */
-    JavaConstructorElement(JavaClassElement declaringClass,
+    JavaConstructorElement(JavaClassElement owningClass,
                            JavaNativeElement.Method nativeElement,
                            ElementAnnotationMetadataFactory annotationMetadataFactory,
                            JavaVisitorContext visitorContext) {
-        super(declaringClass, nativeElement, annotationMetadataFactory, visitorContext);
+        super(owningClass, nativeElement, annotationMetadataFactory, visitorContext);
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -31,6 +31,7 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.inject.ast.ClassElement;
+import io.micronaut.inject.ast.annotation.AbstractAnnotationElement;
 import io.micronaut.inject.ast.annotation.ElementAnnotationMetadataFactory;
 import io.micronaut.inject.ast.beans.BeanElement;
 import io.micronaut.inject.ast.beans.BeanElementBuilder;
@@ -494,7 +495,7 @@ public BeanElementBuilder addAssociatedBean(io.micronaut.inject.ast.Element orig
             originatingElement,
             type,
             ConfigurationMetadataBuilder.INSTANCE,
-            type instanceof AbstractJavaElement ? ((AbstractJavaElement) type).elementAnnotationMetadataFactory : elementAnnotationMetadataFactory,
+            type instanceof AbstractAnnotationElement ? ((AbstractAnnotationElement) type).getElementAnnotationMetadataFactory() : elementAnnotationMetadataFactory,
             this
         );
     }

File: core-processor/src/main/java/io/micronaut/inject/processing/IntroductionInterfaceBeanElementCreator.java
Patch:
@@ -67,7 +67,7 @@ public void buildInternal() {
 
         // The introduction will include overridden methods* (find(List) <- find(Iterable)*) but ordinary class introduction doesn't
         // Because of the caching we need to process declared methods first
-        List<MethodElement> allMethods = new ArrayList<>(classElement.getEnclosedElements(ElementQuery.ALL_METHODS.includeOverriddenMethods().includeOverriddenMethods()));
+        List<MethodElement> allMethods = new ArrayList<>(classElement.getEnclosedElements(ElementQuery.ALL_METHODS.includeOverriddenMethods()));
         List<MethodElement> methods = new ArrayList<>(allMethods);
         List<MethodElement> nonAbstractMethods = methods.stream().filter(m -> !m.isAbstract()).toList();
         // Remove abstract methods overridden by non-abstract ones

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -500,7 +500,8 @@ ExecutionFlow<MutableHttpResponse<?>> createResponseForBody(HttpRequest<?> reque
             }
         } else {
             HttpStatus defaultHttpStatus = routeInfo.isErrorRoute() ? HttpStatus.INTERNAL_SERVER_ERROR : HttpStatus.OK;
-            boolean isReactive = routeInfo.isAsyncOrReactive() || Publishers.isConvertibleToPublisher(body);
+            // special case HttpResponse because FullNettyClientHttpResponse implements Completable...
+            boolean isReactive = routeInfo.isAsyncOrReactive() || (Publishers.isConvertibleToPublisher(body) && !(body instanceof HttpResponse<?>));
             if (isReactive) {
                 outgoingResponse = ReactiveExecutionFlow.fromPublisher(
                     fromReactiveExecute(request, body, routeInfo, defaultHttpStatus)

File: http/src/main/java/io/micronaut/http/filter/HttpClientFilterResolver.java
Patch:
@@ -25,5 +25,5 @@
  * @author graemerocher
  * @since 2.0
  */
-public interface HttpClientFilterResolver<T extends AnnotationMetadataProvider> extends HttpFilterResolver<HttpClientFilter, T> {
+public interface HttpClientFilterResolver<T extends AnnotationMetadataProvider> extends HttpFilterResolver<T> {
 }

File: http/src/main/java/io/micronaut/http/filter/HttpServerFilterResolver.java
Patch:
@@ -25,6 +25,6 @@
  * @author graemerocher
  * @since 2.0
  */
-public interface HttpServerFilterResolver<T extends AnnotationMetadataProvider> extends HttpFilterResolver<HttpFilter, T> {
+public interface HttpServerFilterResolver<T extends AnnotationMetadataProvider> extends HttpFilterResolver<T> {
 }
 

File: http/src/main/java/io/micronaut/http/reactive/execution/ReactiveExecutionFlow.java
Patch:
@@ -88,4 +88,7 @@ static <K> ReactiveExecutionFlow<K> fromFlow(@NonNull ExecutionFlow<K> flow) {
     @NonNull
     Publisher<T> toPublisher();
 
+    static <K> Publisher<K> toPublisher(Supplier<ExecutionFlow<K>> flowSupplier) {
+        return (Publisher<K>) ReactorExecutionFlowImpl.toMono(flowSupplier);
+    }
 }

File: test-suite/src/test/java/io/micronaut/docs/server/filters/TraceFilterSpec.java
Patch:
@@ -38,6 +38,7 @@ public class TraceFilterSpec {
     public static void setupServer() {
         Map<String, Object> map = new HashMap<>();
         map.put("spec.name", HelloControllerSpec.class.getSimpleName());
+        map.put("spec.filter", "TraceFilter");
         map.put("spec.lang", "java");
 
         server = ApplicationContext.run(EmbeddedServer.class, map, Environment.TEST);

File: test-suite/src/test/java/io/micronaut/docs/server/filters/TraceService.java
Patch:
@@ -28,10 +28,8 @@
 // tag::class[]
 @Singleton
 public class TraceService {
-
     private static final Logger LOG = LoggerFactory.getLogger(TraceService.class);
-
-    Publisher<Boolean> trace(HttpRequest<?> request) {
+    public Publisher<Boolean> trace(HttpRequest<?> request) {
         return Mono.fromCallable(() -> { // <1>
             LOG.debug("Tracing request: {}", request.getUri());
             // trace logic here, potentially performing I/O <2>

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -368,7 +368,7 @@ default List<S> load(Predicate<String> condition, Predicate<S> predicate) {
             return findAll(condition)
                     .map(ServiceDefinition::load)
                     .filter(s -> predicate == null || predicate.test(s))
-                    .collect(Collectors.toList());
+                    .toList();
         }
     }
 

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -1115,6 +1115,9 @@ private <T> Set<ConstraintViolation<T>> doValidate(
         @SuppressWarnings("unchecked")
         final Class<T> rootBeanClass = (Class<T>) rootBean.getClass();
         for (BeanProperty<Object, Object> constrainedProperty : constrainedProperties) {
+            if (constrainedProperty.isWriteOnly()) {
+                continue;
+            }
             final Object propertyValue = constrainedProperty.get(object);
             //noinspection unchecked
             validateConstrainedPropertyInternal(

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBuffer.java
Patch:
@@ -50,7 +50,7 @@ class NettyByteBuffer implements ByteBuffer<ByteBuf>, ReferenceCounted {
     }
 
     @Override
-    public ByteBuffer retain() {
+    public NettyByteBuffer retain() {
         delegate.retain();
         return this;
     }

File: core/src/main/java/io/micronaut/core/io/buffer/ReferenceCounted.java
Patch:
@@ -25,7 +25,7 @@ public interface ReferenceCounted {
      *
      * @return this
      */
-    ByteBuffer retain();
+    ReferenceCounted retain();
 
     /**
      * Release a reference to this object.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonHttpContentSubscriberFactory.java
Patch:
@@ -18,10 +18,10 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Consumes;
-import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.netty.HttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentSubscriberFactory;
 import io.micronaut.http.server.netty.NettyHttpRequest;
+import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.json.JsonMapper;
 import jakarta.inject.Singleton;
 
@@ -36,7 +36,7 @@
 @Internal
 public class JsonHttpContentSubscriberFactory implements HttpContentSubscriberFactory {
 
-    private final HttpServerConfiguration httpServerConfiguration;
+    private final NettyHttpServerConfiguration httpServerConfiguration;
     private final JsonMapper jsonMapper;
 
     /**
@@ -45,7 +45,7 @@ public class JsonHttpContentSubscriberFactory implements HttpContentSubscriberFa
      */
     public JsonHttpContentSubscriberFactory(
             JsonMapper jsonMapper,
-            HttpServerConfiguration httpServerConfiguration) {
+            NettyHttpServerConfiguration httpServerConfiguration) {
         this.httpServerConfiguration = httpServerConfiguration;
         this.jsonMapper = jsonMapper;
     }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -263,7 +263,7 @@ private ClassElement newClassElement(@Nullable GroovyNativeElement declaredEleme
         if (genericsType.isPlaceholder()) {
             return resolvePlaceholder(declaredElement, genericsOwner, genericsType, redirectType, parentTypeArguments, visitedTypes, isRawType);
         }
-        return newClassElement(declaredElement, genericsType.getType(), parentTypeArguments, visitedTypes, true, isRawType);
+        return newClassElement(declaredElement, genericsType.getType(), parentTypeArguments, visitedTypes, genericsType.isPlaceholder(), isRawType);
     }
 
     @NonNull

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -461,7 +461,7 @@ private Map<String, ClassElement> resolveTypeArguments(List<? extends TypeParame
                 String variableName = typeParameter.getSimpleName().toString();
                 resolved.put(
                         variableName,
-                        newClassElement(getNativeType(), typeParameterMirror, parentTypeArguments, visitedTypes, true, false, typeParameter)
+                        newClassElement(getNativeType(), typeParameterMirror, parentTypeArguments, visitedTypes, typeParameterMirror instanceof TypeVariable, false, typeParameter)
                 );
             }
         } else {

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -239,6 +239,7 @@ protected static void pushTypeArgumentElements(
         pushTypeArgumentElements(owningType, owningTypeWriter, generatorAdapter, declaringElementName, null, types, new HashSet<>(5), defaults, loadTypeMethods);
     }
 
+    @SuppressWarnings("java:S1872")
     private static void pushTypeArgumentElements(
             Type owningType,
             ClassWriter declaringClassWriter,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/annotation/GroovyAnnotationMetadataBuilder.java
Patch:
@@ -552,6 +552,7 @@ private Object readConstantExpression(AnnotatedNode originatingElement, Annotate
         }
     }
 
+    @SuppressWarnings("java:S1872")
     private Object convertConstantValue(Object value) {
         if (value instanceof ClassNode classNode) {
             return new AnnotationClassValue<>(classNode.getName());

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -425,7 +425,8 @@ private static void addBounds(GenericsType genericsType, List<ClassNode> classNo
 
     @NonNull
     private ClassElement getObjectClassElement() {
-        return visitorContext.getClassElement(Object.class).get();
+        return visitorContext.getClassElement(Object.class)
+            .orElseThrow(() -> new IllegalStateException("java.lang.Object element not found"));
     }
 
     @NonNull

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -425,7 +425,7 @@ private static void addBounds(GenericsType genericsType, List<ClassNode> classNo
 
     @NonNull
     private ClassElement getObjectClassElement() {
-        return visitorContext.getClassElement("java.lang.Object").get();
+        return visitorContext.getClassElement(Object.class).get();
     }
 
     @NonNull

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/AllElementsVisitor.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.TypedElement;
+import org.junit.jupiter.api.Assertions;
 
 import java.util.*;
 
@@ -65,6 +66,8 @@ public void finish(VisitorContext visitorContext) {
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
         visit(element);
+        Assertions.assertTrue(context.getClassElement(Object.class.getName()).isPresent());
+        Assertions.assertTrue(context.getClassElement(Object.class).isPresent());
         element.getBeanProperties(); // Preload properties for tests otherwise it fails because the compiler is done
         element.getAnnotationMetadata();
         VISITED_CLASS_ELEMENTS.add(element);

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -261,9 +261,8 @@ private void addExecutableMethods(ClassElement ce, BeanIntrospectionWriter write
             });
         }
         ElementQuery<MethodElement> query = ElementQuery.of(MethodElement.class)
-            .onlyAccessible()
-            .modifiers((modifiers) -> !modifiers.contains(ElementModifier.STATIC))
-            .annotated((am) -> am.hasStereotype(Executable.class));
+            .modifiers(modifiers -> !modifiers.contains(ElementModifier.STATIC))
+            .annotated(am -> am.hasStereotype(Executable.class));
         List<MethodElement> executableMethods = ce.getEnclosedElements(query);
         for (MethodElement executableMethod : executableMethods) {
             if (added.contains(executableMethod)) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -110,7 +110,6 @@
 import io.micronaut.inject.QualifiedBeanType;
 import io.micronaut.inject.ValidatedBeanDefinition;
 import io.micronaut.inject.provider.AbstractProviderDefinition;
-import io.micronaut.inject.provider.BeanProviderDefinition;
 import io.micronaut.inject.proxy.InterceptedBeanProxy;
 import io.micronaut.inject.qualifiers.AnyQualifier;
 import io.micronaut.inject.qualifiers.Qualified;

File: inject/src/main/java/io/micronaut/context/annotation/Replaces.java
Patch:
@@ -46,6 +46,7 @@
     /**
      * @return The bean type that this bean replaces
      */
+    @AliasFor(member = "value")
     Class<?> bean() default void.class;
 
     /**

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyAnnotationElement.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.AnnotationElement;
 import io.micronaut.inject.ast.annotation.ElementAnnotationMetadataFactory;
 
@@ -24,6 +25,7 @@
  * @since 3.1.0
  * @author graemerocher
  */
+@Internal
 final class GroovyAnnotationElement extends GroovyClassElement implements AnnotationElement {
 
     public GroovyAnnotationElement(GroovyVisitorContext visitorContext,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyConstructorElement.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.ast.groovy.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ConstructorElement;
 import io.micronaut.inject.ast.annotation.ElementAnnotationMetadataFactory;
 import org.codehaus.groovy.ast.ConstructorNode;
@@ -26,6 +27,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 public class GroovyConstructorElement extends GroovyMethodElement implements ConstructorElement {
     /**
      * @param owningType                The owning class

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyElementFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.ast.ClassElement;
@@ -40,6 +41,7 @@
  * @author graemerocher
  * @since 2.3.0
  */
+@Internal
 public class GroovyElementFactory implements ElementFactory<AnnotatedNode, ClassNode, MethodNode, FieldNode> {
     private final GroovyVisitorContext visitorContext;
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyEnumElement.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.EnumConstantElement;
 import io.micronaut.inject.ast.EnumElement;
@@ -31,6 +32,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 class GroovyEnumElement extends GroovyClassElement implements EnumElement {
 
     protected List<EnumConstantElement> enumConstants;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.ast.groovy.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ElementModifier;
@@ -35,6 +36,7 @@
  * @author James Kleeh
  * @since 1.0
  */
+@Internal
 public class GroovyFieldElement extends AbstractGroovyElement implements FieldElement {
 
     private final GroovyClassElement owningType;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyNativeElement.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
+import io.micronaut.core.annotation.Internal;
 import org.codehaus.groovy.ast.AnnotatedNode;
 import org.codehaus.groovy.ast.ClassNode;
 import org.codehaus.groovy.ast.FieldNode;
@@ -27,6 +28,7 @@
  * @author Denis Stepanov
  * @since 4.0.0
  */
+@Internal
 public sealed interface GroovyNativeElement {
 
     /**

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/TypeUseRuntimeAnn.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-@Target(ElementType.TYPE_USE)
+@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})
 @Retention(RetentionPolicy.RUNTIME)
 @interface TypeUseRuntimeAnn {
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaBeanDefinitionBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.annotation.AnnotationValueBuilder;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
 import io.micronaut.inject.ast.ClassElement;
@@ -49,6 +50,7 @@
  * @author graemerocher
  * @since 3.0.0
  */
+@Internal
 class JavaBeanDefinitionBuilder extends AbstractBeanDefinitionBuilder {
     private final JavaVisitorContext javaVisitorContext;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPackageElement.java
Patch:
@@ -39,7 +39,7 @@ public class JavaPackageElement extends AbstractJavaElement implements io.micron
     public JavaPackageElement(PackageElement element,
                               ElementAnnotationMetadataFactory annotationMetadataFactory,
                               JavaVisitorContext visitorContext) {
-        super(element, annotationMetadataFactory, visitorContext);
+        super(new JavaNativeElement.Package(element), annotationMetadataFactory, visitorContext);
         this.element = element;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -76,7 +76,7 @@
  * @since 1.0
  */
 @Internal
-public class JavaVisitorContext implements VisitorContext, BeanElementVisitorContext {
+public final class JavaVisitorContext implements VisitorContext, BeanElementVisitorContext {
 
     private final Messager messager;
     private final Elements elements;
@@ -262,8 +262,8 @@ private void printMessage(String message, Diagnostic.Kind kind, @Nullable io.mic
             if (element instanceof BeanElement) {
                 element = ((BeanElement) element).getDeclaringClass();
             }
-            if (element instanceof AbstractJavaElement) {
-                Element el = (Element) element.getNativeType();
+            if (element instanceof AbstractJavaElement abstractJavaElement) {
+                Element el = abstractJavaElement.getNativeType().element();
                 messager.printMessage(kind, message, el);
             } else {
                 messager.printMessage(kind, message);

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -1147,7 +1147,7 @@ public final <T> T getRequiredValue(Class<T> type) {
      * @throws IllegalStateException If no member is available that conforms to the given name and type
      */
     @NonNull
-    public final <T> T getRequiredValue(String member, Class<T> type) {
+    public final <T> T  getRequiredValue(String member, Class<T> type) {
         return get(member, ConversionContext.of(type)).orElseThrow(() -> new IllegalStateException("No value available for annotation member @" + annotationName + "[" + member + "] of type: " + type));
     }
 

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyFeature.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.buffer.netty;
 
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import com.oracle.svm.core.jdk.SystemPropertiesSupport;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.graal.AutomaticFeatureUtils;
@@ -36,7 +35,6 @@
  * @since 3.3.0
  */
 @Internal
-@AutomaticFeature
 final class NettyFeature implements Feature {
     @Override
     public void beforeAnalysis(BeforeAnalysisAccess access) {

File: core/src/main/java/io/micronaut/core/graal/ServiceLoaderInitialization.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import com.oracle.svm.core.annotate.Substitute;
 import com.oracle.svm.core.annotate.TargetClass;
 import io.micronaut.core.annotation.Internal;
@@ -51,7 +50,6 @@
  * @since 3.5.0
  */
 @SuppressWarnings("unused")
-@AutomaticFeature
 final class ServiceLoaderFeature implements Feature {
 
     @Override

File: http-netty/src/main/java/io/micronaut/http/netty/graal/HttpNettyFeature.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.netty.graal;
 
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.bind.binders.ContinuationArgumentBinder;
 import io.micronaut.http.netty.channel.NettyThreadFactory;
@@ -32,7 +31,6 @@
  * @since 2.0.0
  */
 @Internal
-@AutomaticFeature
 public class HttpNettyFeature implements Feature {
 
     @Override

File: jackson-databind/src/main/java/io/micronaut/jackson/JacksonDatabindFeature.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import io.micronaut.core.annotation.Internal;
 import org.graalvm.nativeimage.hosted.Feature;
 import org.graalvm.nativeimage.hosted.RuntimeReflection;
@@ -31,7 +30,6 @@
  * @since 3.4.1
  */
 @Internal
-@AutomaticFeature
 final class JacksonDatabindFeature implements Feature {
     @SuppressWarnings("deprecation")
     @Override

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -136,7 +136,7 @@ final class BeanIntrospectionWriter extends AbstractAnnotationMetadataWriter {
         this.introspectionName = computeIntrospectionName(name);
         this.introspectionType = getTypeReferenceForName(introspectionName);
         this.beanType = getTypeReferenceForName(name);
-        this.dispatchWriter = new DispatchWriter(introspectionType);
+        this.dispatchWriter = new DispatchWriter(introspectionType, Type.getType(AbstractInitializableBeanIntrospection.class));
     }
 
     /**
@@ -618,6 +618,7 @@ private void writeIntrospectionClass(ClassWriterOutputVisitor classWriterOutputV
 
         dispatchWriter.buildDispatchOneMethod(classWriter);
         dispatchWriter.buildDispatchMethod(classWriter);
+        dispatchWriter.buildGetTargetMethodByIndex(classWriter);
         buildPropertyIndexOfMethod(classWriter);
         buildFindIndexedProperty(classWriter);
         buildGetIndexedProperties(classWriter);

File: inject-kotlin-test/src/main/groovy/io/micronaut/annotation/processing/test/KotlinCompiler.java
Patch:
@@ -18,9 +18,9 @@
 import com.google.devtools.ksp.processing.SymbolProcessor;
 import com.google.devtools.ksp.processing.SymbolProcessorEnvironment;
 import com.google.devtools.ksp.symbol.KSClassDeclaration;
-import com.tschuchort.compiletesting.KotlinCompilation;
-import com.tschuchort.compiletesting.KspKt;
-import com.tschuchort.compiletesting.SourceFile;
+import io.micronaut.annotation.processing.test.support.KotlinCompilation;
+import io.micronaut.annotation.processing.test.support.KspKt;
+import io.micronaut.annotation.processing.test.support.SourceFile;
 import io.micronaut.aop.internal.InterceptorRegistryBean;
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.ApplicationContextConfiguration;

File: core-processor/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -582,6 +582,7 @@ protected AnnotationValue<?> readNestedAnnotationValue(T annotationElement, A an
      * Obtain the annotation mappers for the given annotation name.
      *
      * @param annotationName The annotation name
+     * @param <K>            The annotation type
      * @return The mappers
      */
     @NonNull

File: core-processor/src/main/java/io/micronaut/inject/ast/GenericPlaceholderElement.java
Patch:
@@ -32,6 +32,7 @@
  */
 @Experimental
 public interface GenericPlaceholderElement extends ClassElement {
+
     /**
      * Returns the bounds of this the generic placeholder empty. Always returns a non-empty list.
      *

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/AssertionUtils.java
Patch:
@@ -98,9 +98,9 @@ public static <T> void assertDoesNotThrow(@NonNull ServerUnderTest server,
         assertion.getResponseConsumer().ifPresent(httpResponseConsumer -> httpResponseConsumer.accept(response));
     }
 
-    private static void assertBody(@NonNull HttpResponse<?> response,  @Nullable BodyAssertion bodyAssertion) {
+    private static <T> void assertBody(@NonNull HttpResponse<?> response,  @Nullable BodyAssertion<T> bodyAssertion) {
         if (bodyAssertion != null) {
-            Optional<String> bodyOptional = response.getBody(String.class);
+            Optional<T> bodyOptional = response.getBody(bodyAssertion.getBodyType());
             assertTrue(bodyOptional.isPresent());
             bodyOptional.ifPresent(bodyAssertion::evaluate);
         }

File: http-server-tck/src/main/java/io/micronaut/http/server/tck/tests/MiscTest.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.Collections;
 import java.util.Map;
 
-
 @SuppressWarnings({
     "java:S5960", // We're allowed assertions, as these are used in tests only
     "checkstyle:MissingJavadocType",

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3335,6 +3335,9 @@ private void readAllBeanDefinitionClasses() {
 
         reference:
         for (BeanDefinitionProducer beanDefinitionProducer : producers) {
+            if (beanDefinitionProducer.isDisabled()) {
+                continue;
+            }
             BeanDefinitionReference beanDefinitionReference = beanDefinitionProducer.reference;
             for (BeanConfiguration disableConfiguration : configurationsDisabled) {
                 if (disableConfiguration.isWithin(beanDefinitionReference)) {

File: core-processor/src/main/java/io/micronaut/inject/ast/ReflectParameterElement.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.core.annotation.AnnotationValueBuilder;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
-import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.annotation.MutableAnnotationMetadata;
 
 import java.lang.annotation.Annotation;
@@ -36,7 +35,7 @@
 class ReflectParameterElement implements ParameterElement {
     private final ClassElement classElement;
     private final String name;
-    private AnnotationMetadata annotationMetadata = AnnotationMetadata.EMPTY_METADATA;
+    private MutableAnnotationMetadata annotationMetadata = new MutableAnnotationMetadata();
 
     ReflectParameterElement(ClassElement classElement, String name) {
         this.classElement = classElement;
@@ -104,7 +103,7 @@ public <T extends Annotation> Element annotate(@NonNull String annotationType, @
         } else {
             AnnotationValueBuilder<T> builder = AnnotationValue.builder(annotationType);
             consumer.accept(builder);
-            this.annotationMetadata = DefaultAnnotationMetadata.mutateMember(annotationMetadata, annotationType, builder.build().getValues());
+            this.annotationMetadata = MutableAnnotationMetadata.mutateMember(annotationMetadata, annotationType, builder.build().getValues());
         }
         return this;
     }

File: core-processor/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.annotation.AnnotationMetadataReference;
 import io.micronaut.inject.annotation.AnnotationMetadataWriter;
-import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.annotation.MutableAnnotationMetadata;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.Element;
@@ -407,7 +406,7 @@ protected static void buildArgumentWithGenerics(
                     owningType,
                     owningClassWriter,
                     generatorAdapter,
-                    (DefaultAnnotationMetadata) annotationMetadata,
+                    (MutableAnnotationMetadata) annotationMetadata,
                     defaults,
                     loadTypeMethods
             );
@@ -631,7 +630,7 @@ protected static void pushCreateArgument(
                     owningType,
                     declaringClassWriter,
                     generatorAdapter,
-                    (DefaultAnnotationMetadata) annotationMetadata,
+                    (MutableAnnotationMetadata) annotationMetadata,
                     defaults,
                     loadTypeMethods
             );

File: core-processor/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -509,6 +509,8 @@ private ClassWriter generateClassBytes() {
         constructor.visitInsn(RETURN);
         constructor.visitMaxs(1, 1);
         constructor.visitEnd();
+        defaultsStorage.clear(); // Defaults were valid only in the constructor scope
+
         if (writeAnnotationDefaults) {
             writeAnnotationDefaults(annotationMetadata, classWriter, owningType, defaultsStorage, loadTypeMethods);
         }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java
Patch:
@@ -362,7 +362,7 @@ default boolean hasDeclaredStereotype(@Nullable String... annotations) {
      * @param annotation The annotation name
      * @return The default values
      */
-    default @NonNull Map<String, Object> getDefaultValues(@NonNull String annotation) {
+    default @NonNull Map<CharSequence, Object> getDefaultValues(@NonNull String annotation) {
         return Collections.emptyMap();
     }
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java
Patch:
@@ -237,7 +237,7 @@ default OptionalDouble doubleValue(@NonNull Class<? extends Annotation> annotati
 
     @NonNull
     @Override
-    default Map<String, Object> getDefaultValues(@NonNull String annotation) {
+    default Map<CharSequence, Object> getDefaultValues(@NonNull String annotation) {
         return getAnnotationMetadata().getDefaultValues(annotation);
     }
 

File: core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java
Patch:
@@ -137,7 +137,7 @@ public boolean hasDeclaredStereotype(@Nullable String annotation) {
 
     @NonNull
     @Override
-    public Map<String, Object> getDefaultValues(@NonNull String annotation) {
+    public Map<CharSequence, Object> getDefaultValues(@NonNull String annotation) {
         return Collections.emptyMap();
     }
 

File: inject/src/main/java/io/micronaut/inject/annotation/MutableAnnotationMetadata.java
Patch:
@@ -122,8 +122,8 @@ public MutableAnnotationMetadata clone() {
 
     @NonNull
     @Override
-    public Map<String, Object> getDefaultValues(@NonNull String annotation) {
-        Map<String, Object> values = super.getDefaultValues(annotation);
+    public Map<CharSequence, Object> getDefaultValues(@NonNull String annotation) {
+        Map<CharSequence, Object> values = super.getDefaultValues(annotation);
         if (values.isEmpty() && annotationDefaultValues != null) {
             final Map<CharSequence, Object> compileTimeDefaults = annotationDefaultValues.get(annotation);
             if (compileTimeDefaults != null && !compileTimeDefaults.isEmpty()) {

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -1576,9 +1576,9 @@ private Map<String, Object> newConstraintVariables(AnnotationValue annotationVal
             variables.put(entry.getKey().toString(),  entry.getValue());
         }
         variables.put("validatedValue", propertyValue);
-        final Map<String, Object> defaultValues = annotationMetadata.getDefaultValues(annotationValue.getAnnotationName());
-        for (Map.Entry<String, Object> entry : defaultValues.entrySet()) {
-            final String n = entry.getKey();
+        final Map<CharSequence, Object> defaultValues = annotationMetadata.getDefaultValues(annotationValue.getAnnotationName());
+        for (Map.Entry<CharSequence, Object> entry : defaultValues.entrySet()) {
+            final String n = entry.getKey().toString();
             if (!variables.containsKey(n)) {
                 final Object v = entry.getValue();
                 if (v != null) {

File: inject-java/src/test/groovy/io/micronaut/inject/lifecycle/proxybeanwithpredestroy/package-info.java
Patch:
@@ -1,5 +1,7 @@
 
+@Configuration
 @Requires(property = "spec", value = "ProxyBeanWithPreDestroySpec")
 package io.micronaut.inject.lifecycle.proxybeanwithpredestroy;
 
+import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;

File: inject-java/src/test/groovy/io/micronaut/inject/lifecycle/proxytargetbeanprototypewithpredestroy/package-info.java
Patch:
@@ -1,5 +1,7 @@
 
+@Configuration
 @Requires(property = "spec", value = "ProxyLazyCachedTargetPrototypeBeanWithPreDestroySpec")
 package io.micronaut.inject.lifecycle.proxytargetbeanprototypewithpredestroy;
 
+import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;

File: inject-java/src/test/groovy/io/micronaut/inject/lifecycle/proxytargetbeanwithpredestroy/package-info.java
Patch:
@@ -1,5 +1,7 @@
 
+@Configuration
 @Requires(property = "spec", value = "ProxyTargetBeanWithPreDestroySpec")
 package io.micronaut.inject.lifecycle.proxytargetbeanwithpredestroy;
 
+import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -48,6 +48,7 @@
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.core.annotation.ReflectionConfig;
 import io.micronaut.core.annotation.UsedByGeneratedCode;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.InstantiationUtils;
@@ -143,7 +144,8 @@ public static List<Map.Entry<Class<? extends Annotation>, Class<? extends Annota
                 new AbstractMap.SimpleEntry<>(Indexed.class, Indexes.class),
                 new AbstractMap.SimpleEntry<>(Requires.class, Requirements.class),
                 new AbstractMap.SimpleEntry<>(AliasFor.class, Aliases.class),
-                new AbstractMap.SimpleEntry<>(Property.class, PropertySource.class)
+                new AbstractMap.SimpleEntry<>(Property.class, PropertySource.class),
+                new AbstractMap.SimpleEntry<>(ReflectionConfig.class, ReflectionConfig.ReflectionConfigList.class)
         );
     }
 

File: runtime/src/main/java/io/micronaut/logging/impl/LogbackLoggingSystem.java
Patch:
@@ -45,7 +45,7 @@ public final class LogbackLoggingSystem implements LoggingSystem {
 
     private static final String DEFAULT_LOGBACK_LOCATION = "logback.xml";
 
-    private String logbackXmlLocation;
+    private final String logbackXmlLocation;
 
     public LogbackLoggingSystem(@Nullable @Property(name = "logger.config") String logbackXmlLocation) {
         this.logbackXmlLocation = logbackXmlLocation != null ? logbackXmlLocation : DEFAULT_LOGBACK_LOCATION;

File: runtime/src/main/java/io/micronaut/retry/annotation/CircuitBreaker.java
Patch:
@@ -97,7 +97,7 @@
     Class<? extends RetryPredicate> predicate() default DefaultRetryPredicate.class;
 
     /**
-     * If {@code true} and the circuit is opened, it throws the original exception wrapped
+     * If {@code true} and the circuit is opened, it throws the original exception wrapped.
      * in a {@link io.micronaut.retry.exception.CircuitOpenException}
      * @return Whether to wrap the original exception in a {@link io.micronaut.retry.exception.CircuitOpenException}
      */

File: inject/src/main/java/io/micronaut/context/annotation/DefaultImplementation.java
Patch:
@@ -66,6 +66,7 @@
     /**
      * @return The bean type that is the default implementation
      */
+    @AliasFor(member = "name")
     Class<?> value() default void.class;
 
     /**

File: inject-java/src/test/groovy/io/micronaut/aop/adapter/Test.java
Patch:
@@ -16,9 +16,11 @@
 package io.micronaut.aop.adapter;
 
 import io.micronaut.aop.Adapter;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.ApplicationEventListener;
 import io.micronaut.context.event.StartupEvent;
 
+@Requires(property = "spec", value = "MethodAdapterSpec")
 @jakarta.inject.Singleton
 class Test {
 

File: core-processor/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -692,7 +692,7 @@ private void buildMethodDelegate(MethodElement methodElement, MethodElement over
         GeneratorAdapter overriddenMethodGenerator = new GeneratorAdapter(overridden, ACC_PUBLIC, methodElement.getName(), desc);
         overriddenMethodGenerator.loadThis();
         int i = 0;
-        for (ParameterElement param : methodElement.getSuspendParameters()) {
+        for (ParameterElement param : overriddenBy.getSuspendParameters()) {
             overriddenMethodGenerator.loadArg(i++);
             pushCastToType(overriddenMethodGenerator, param.getGenericType());
         }

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.BeanProvider;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
@@ -53,6 +54,7 @@
 @Singleton
 @Internal
 @BootstrapContextCompatible
+@Requires(bean = ByteBufferFactory.class)
 public class TextStreamCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "text-stream";

File: http-server/src/test/groovy/io/micronaut/http/server/util/MockHttpHeaders.java
Patch:
@@ -89,7 +89,7 @@ public Collection<List<String>> values() {
 
     @Override
     public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {
-        return ConversionService.SHARED.convert(get(name), conversionContext);
+        return conversionService.convert(get(name), conversionContext);
     }
 
     @Override

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/ConvertibleMultiValuesSerializer.java
Patch:
@@ -50,12 +50,12 @@ public void serialize(ConvertibleMultiValues<?> value, JsonGenerator gen, Serial
             if (len > 0) {
                 gen.writeFieldName(fieldName);
                 if (len == 1) {
-                    gen.writeObject(v.get(0));
+                    serializers.defaultSerializeValue(v.get(0), gen);
                 } else {
                     gen.writeStartArray();
 
                     for (Object o : v) {
-                        gen.writeObject(o);
+                        serializers.defaultSerializeValue(o, gen);
                     }
                     gen.writeEndArray();
                 }

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/ConvertibleValuesSerializer.java
Patch:
@@ -47,7 +47,7 @@ public void serialize(ConvertibleValues<?> value, JsonGenerator gen, SerializerP
             Object v = entry.getValue();
             if (v != null) {
                 gen.writeFieldName(fieldName);
-                gen.writeObject(v);
+                serializers.defaultSerializeValue(v, gen);
             }
         }
         gen.writeEndObject();

File: inject/src/main/java/io/micronaut/inject/beans/AbstractInitializableBeanIntrospection.java
Patch:
@@ -422,7 +422,7 @@ public P get(@NonNull B bean) {
                 throw new IllegalArgumentException("Invalid bean [" + bean + "] for type: " + beanType);
             }
             if (isWriteOnly()) {
-                throw new UnsupportedOperationException("Cannot read from a write-only property");
+                throw new UnsupportedOperationException("Cannot read from a write-only property: " + getName());
             }
             return dispatchOne(ref.getMethodIndex, bean, null);
         }

File: jackson-databind/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -347,7 +347,9 @@ public JsonSerializer<?> build() {
                     final List<BeanPropertyWriter> newProperties = new ArrayList<>(properties);
                     Map<String, BeanProperty<Object, Object>> named = new LinkedHashMap<>();
                     for (BeanProperty<Object, Object> beanProperty : beanProperties) {
-                        named.put(getName(config, namingStrategy, beanProperty), beanProperty);
+                        if (!beanProperty.isWriteOnly()) {
+                            named.put(getName(config, namingStrategy, beanProperty), beanProperty);
+                        }
                     }
                     for (int i = 0; i < properties.size(); i++) {
                         final BeanPropertyWriter existing = properties.get(i);

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/ConvertibleMultiValuesSerializer.java
Patch:
@@ -50,12 +50,12 @@ public void serialize(ConvertibleMultiValues<?> value, JsonGenerator gen, Serial
             if (len > 0) {
                 gen.writeFieldName(fieldName);
                 if (len == 1) {
-                    gen.writeObject(v.get(0));
+                    serializers.defaultSerializeValue(v.get(0), gen);
                 } else {
                     gen.writeStartArray();
 
                     for (Object o : v) {
-                        gen.writeObject(o);
+                        serializers.defaultSerializeValue(o, gen);
                     }
                     gen.writeEndArray();
                 }

File: jackson-databind/src/main/java/io/micronaut/jackson/serialize/ConvertibleValuesSerializer.java
Patch:
@@ -47,7 +47,7 @@ public void serialize(ConvertibleValues<?> value, JsonGenerator gen, SerializerP
             Object v = entry.getValue();
             if (v != null) {
                 gen.writeFieldName(fieldName);
-                gen.writeObject(v);
+                serializers.defaultSerializeValue(v, gen);
             }
         }
         gen.writeEndObject();

File: core-processor/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.stream.Collectors;
 
 /**
  * A {@link TypeElementVisitor} that visits classes annotated with {@link Introspected} and produces

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.context.BeanProvider;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.io.buffer.ByteBuffer;
@@ -53,6 +54,7 @@
 @Singleton
 @Internal
 @BootstrapContextCompatible
+@Requires(bean = ByteBufferFactory.class)
 public class TextStreamCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "text-stream";

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -423,7 +423,7 @@ private <T> void transformConfigurationReaderBeanDefinition(BeanResolutionContex
                                                                 BeanDefinition<T> candidate,
                                                                 Set<BeanDefinition<T>> transformedCandidates) {
         try {
-            final String prefix = candidate.stringValue(ConfigurationReader.class, "prefix").orElse(null);
+            final String prefix = candidate.stringValue(ConfigurationReader.class, ConfigurationReader.PREFIX).orElse(null);
             ConfigurationPath configurationPath = resolutionContext.getConfigurationPath();
             if (prefix != null) {
 

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationReader.java
Patch:
@@ -44,6 +44,7 @@
      * The base prefix name.
      */
     String BASE_PREFIX = "basePrefix";
+    String PREFIX_CALCULATED = "prefixCalculated";
 
     /**
      * The prefix to use when resolving properties. The prefix should be defined in kebab case. Example: my-app.foo.

File: buildSrc/src/main/groovy/io/micronaut/build/internal/ext/DefaultMicronautCoreExtension.java
Patch:
@@ -38,6 +38,8 @@ private static void excludeMicronautLibs(ExternalModuleDependency dep) {
         dep.exclude(module("micronaut-runtime"));
         dep.exclude(module("micronaut-inject"));
         dep.exclude(module("micronaut-bom"));
+        dep.exclude(module("micronaut-core-bom"));
+        dep.exclude(module("micronaut-platform"));
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -512,7 +512,9 @@ private <T> void transformEachBeanBeanDefinition(@NonNull BeanResolutionContext
                         qualifier = PrimaryQualifier.INSTANCE;
                     }
                     BeanDefinitionDelegate<?> delegate = BeanDefinitionDelegate.create(candidate, (Qualifier<T>) qualifier);
-                    transformedCandidates.add((BeanDefinition<T>) delegate);
+                    if (delegate.isEnabled(this, resolutionContext)) {
+                        transformedCandidates.add((BeanDefinition<T>) delegate);
+                    }
                 }
             }
         }

File: core-processor/src/main/java/io/micronaut/inject/ast/ClassElement.java
Patch:
@@ -422,12 +422,12 @@ default List<PropertyElement> getSyntheticBeanProperties() {
     /**
      * Returns the bean properties (getters and setters) for this class element based on custom configuration.
      *
-     * @param beanPropertiesQuery The configuration
+     * @param propertyElementQuery The configuration
      * @return The bean properties for this class element
      * @since 4.0.0
      */
     @NonNull
-    default List<PropertyElement> getBeanProperties(BeanPropertiesQuery beanPropertiesQuery) {
+    default List<PropertyElement> getBeanProperties(@NonNull PropertyElementQuery propertyElementQuery) {
         return Collections.emptyList();
     }
 

File: core-processor/src/main/java/io/micronaut/inject/processing/ConfigurationReaderBeanElementCreator.java
Patch:
@@ -34,7 +34,7 @@
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
 import io.micronaut.inject.annotation.MutableAnnotationMetadata;
-import io.micronaut.inject.ast.BeanPropertiesQuery;
+import io.micronaut.inject.ast.PropertyElementQuery;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MemberElement;
@@ -273,7 +273,7 @@ private void visitConfigurationBuilder(BeanDefinitionVisitor visitor,
                                            ClassElement builderType) {
         try {
             String configurationPrefix = builderElement.stringValue(ConfigurationBuilder.class).map(v -> v + ".").orElse("");
-            builderType.getBeanProperties(BeanPropertiesQuery.of(builderElement))
+            builderType.getBeanProperties(PropertyElementQuery.of(builderElement))
                 .stream()
                 .filter(propertyElement -> {
                     if (propertyElement.isExcluded()) {

File: core-processor/src/main/java/io/micronaut/inject/ast/beans/ConfigurableElement.java
Patch:
@@ -36,7 +36,7 @@ public interface ConfigurableElement extends Element {
      * @param types The types
      * @return This element
      */
-    @NonNull ConfigurableElement typeArguments(@NonNull ClassElement...types);
+    @NonNull ConfigurableElement typeArguments(@NonNull ClassElement... types);
 
     /**
      * Adds a {@link jakarta.inject.Named} qualifier to the element.

File: core-processor/src/main/java/io/micronaut/inject/writer/OriginatingElements.java
Patch:
@@ -43,7 +43,7 @@ public interface OriginatingElements {
      * @param elements The elements
      * @return The originating elements
      */
-    static OriginatingElements of(Element...elements) {
+    static OriginatingElements of(Element... elements) {
         if (Boolean.getBoolean("micronaut.static.originating.elements")) {
             for (Element element : elements) {
                 StaticOriginatingElements.INSTANCE.addOriginatingElement(element);

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -229,7 +229,7 @@ public static <T> T instantiate(Class<T> type) {
      * @throws InstantiationException When an error occurs
      * @since 3.0.0
      */
-    public static <T> T instantiate(Class<T> type, Class<?>[] argTypes, Object...args) {
+    public static <T> T instantiate(Class<T> type, Class<?>[] argTypes, Object... args) {
         try {
             return BeanIntrospector.SHARED.findIntrospection(type).map(bi -> bi.instantiate(args)).orElseGet(() -> {
                 try {

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -190,7 +190,7 @@ public static String toString(String delimiter, @Nullable Object[] array) {
      * @param <T> The array type
      * @return The iterator
      */
-    public static <T> Iterator<T> iterator(T...array) {
+    public static <T> Iterator<T> iterator(T... array) {
         if (isNotEmpty(array)) {
             return new ArrayIterator<>(array);
         } else {
@@ -204,7 +204,7 @@ public static <T> Iterator<T> iterator(T...array) {
      * @param <T> The array type
      * @return The iterator
      */
-    public static <T> Iterator<T> reverseIterator(T...array) {
+    public static <T> Iterator<T> reverseIterator(T... array) {
         if (isNotEmpty(array)) {
             return new ReverseArrayIterator<>(array);
         } else {

File: core/src/main/java/io/micronaut/core/value/MapPropertyResolver.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collectors;
 
 /**
  * A {@link PropertyResolver} that resolves values from a backing map.

File: http/src/main/java/io/micronaut/http/filter/HttpFilterResolver.java
Patch:
@@ -111,7 +111,7 @@ static <FT extends HttpFilter> FilterEntry<FT> of(
                 @NonNull FT filter,
                 @Nullable AnnotationMetadata annotationMetadata,
                 @Nullable Set<HttpMethod> methods,
-                String...patterns) {
+                String... patterns) {
             return new DefaultFilterEntry<>(
                     Objects.requireNonNull(filter, "Filter cannot be null"),
                     annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA,
@@ -135,7 +135,7 @@ static <FT extends HttpFilter> FilterEntry<FT> of(
             @NonNull FT filter,
             @Nullable AnnotationMetadata annotationMetadata,
             @Nullable Set<HttpMethod> methods,
-            @NonNull FilterPatternStyle patternStyle, String...patterns) {
+            @NonNull FilterPatternStyle patternStyle, String... patterns) {
             return new DefaultFilterEntry<>(
                 Objects.requireNonNull(filter, "Filter cannot be null"),
                 annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA,

File: http/src/main/java/io/micronaut/http/uri/UriBuilder.java
Patch:
@@ -93,7 +93,7 @@ public interface UriBuilder {
      * @param values The values
      * @return This builder
      */
-    @NonNull UriBuilder queryParam(String name, Object...values);
+    @NonNull UriBuilder queryParam(String name, Object... values);
 
     /**
      * Adds a query parameter for the give name and values. The values will be URI encoded.
@@ -103,7 +103,7 @@ public interface UriBuilder {
      * @param values The values
      * @return This builder
      */
-    @NonNull UriBuilder replaceQueryParam(String name, Object...values);
+    @NonNull UriBuilder replaceQueryParam(String name, Object... values);
 
     /**
      * The constructed URI.

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaElementFactory.java
Patch:
@@ -318,11 +318,11 @@ private void failIfPostponeIsNeeded(ExecutableElement executableElement) {
         TypeMirror returnType = executableElement.getReturnType();
         TypeKind returnKind = returnType.getKind();
         if (returnKind == TypeKind.ERROR) {
-            throw new PostponeToNextRoundException(returnType);
+            throw new PostponeToNextRoundException(executableElement);
         }
     }
 
-    private void failIfPostponeIsNeeded(VariableElement  variableElement) {
+    private void failIfPostponeIsNeeded(VariableElement variableElement) {
         TypeMirror type = variableElement.asType();
         if (type.getKind() == TypeKind.ERROR) {
             throw new PostponeToNextRoundException(variableElement);

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -299,11 +299,8 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             request.setAttribute(HttpAttributes.INVOCATION_CONTEXT, context);
             // Set the URI template used to make the request for tracing purposes
             request.setAttribute(HttpAttributes.URI_TEMPLATE, resolveTemplate(annotationMetadata, uriTemplate.toString()));
-            String serviceId = getClientId(annotationMetadata);
             Argument<?> errorType = annotationMetadata.classValue(Client.class, "errorType")
                     .map((Function<Class, Argument>) Argument::of).orElse(HttpClient.DEFAULT_ERROR_TYPE);
-            request.setAttribute(HttpAttributes.SERVICE_ID, serviceId);
-
 
             final MediaType[] acceptTypes;
             Collection<MediaType> accept = request.accept();

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1638,7 +1638,7 @@ private ClientFilterChain buildChain(AtomicReference<io.micronaut.http.HttpReque
             public Publisher<? extends io.micronaut.http.HttpResponse<?>> proceed(MutableHttpRequest<?> request) {
 
                 int pos = integer.incrementAndGet();
-                if (pos > len) {
+                if (pos >= len) {
                     throw new IllegalStateException("The FilterChain.proceed(..) method should be invoked exactly once per filter execution. The method has instead been invoked multiple times by an erroneous filter definition.");
                 }
                 HttpClientFilter httpFilter = filters.get(pos);

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -55,8 +55,8 @@
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.client.BlockingHttpClient;
 import io.micronaut.http.client.HttpClient;
-import io.micronaut.http.client.ReactiveClientResultTransformer;
 import io.micronaut.http.client.HttpClientRegistry;
+import io.micronaut.http.client.ReactiveClientResultTransformer;
 import io.micronaut.http.client.StreamingHttpClient;
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.bind.ClientArgumentRequestBinder;
@@ -426,7 +426,7 @@ private Publisher httpClientResponsePublisher(HttpClient httpClient, MutableHttp
         Class<?> argumentType = reactiveValueArgument.getType();
         if (Void.class == argumentType || returnType.isVoid()) {
             request.getHeaders().remove(HttpHeaders.ACCEPT);
-            return httpClient.exchange(request, Argument.VOID, errorType);
+            return httpClient.retrieve(request, Argument.VOID, errorType);
         } else {
             if (HttpResponse.class.isAssignableFrom(argumentType)) {
                 return httpClient.exchange(request, reactiveValueArgument, errorType);

File: core-processor/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -253,7 +253,7 @@ private ClassWriter generateClassBytes() {
             GeneratorAdapter getGenericType = startPublicMethodZeroArgs(classWriter, Argument.class, "getGenericBeanType");
             pushCreateArgument(
                 beanDefinitionReferenceClassName,
-                beanDefinitionType,
+                Type.getType(getTypeDescriptor(beanDefinitionReferenceClassName)),
                 classWriter,
                 getGenericType,
                 "T",

File: buildSrc/src/main/groovy/io/micronaut/build/internal/ext/DefaultMicronautCoreExtension.java
Patch:
@@ -62,7 +62,7 @@ public void usesMicronautTestKotest() {
 
     private void addTestImplementationDependency(String lib) {
         dependencyHandler.addProvider("testImplementation", libs.findLibrary(
-                "managed.micronaut.test." + lib
+                "micronaut.test." + lib
         ).get(), DefaultMicronautCoreExtension::excludeMicronautLibs);
     }
 

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -262,7 +262,7 @@ public static String trimLeading(String str, Predicate<Character> predicate) {
                 return str.substring(i);
             }
         }
-        return str;
+        return "";
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/BeanDefinitionReference.java
Patch:
@@ -46,7 +46,7 @@
  * @since 1.0
  */
 @Internal
-public interface BeanDefinitionReference<T> extends BeanType<T> {
+public interface BeanDefinitionReference<T> extends QualifiedBeanType<T> {
 
     /**
      * @return The class name of the backing {@link BeanDefinition}

File: aop/src/main/java/io/micronaut/aop/internal/intercepted/InterceptedMethodUtil.java
Patch:
@@ -57,7 +57,7 @@ private InterceptedMethodUtil() {
     @NonNull
     public static InterceptedMethod of(@NonNull MethodInvocationContext<?, ?> context, @NonNull ConversionService conversionService) {
         if (context.isSuspend()) {
-            KotlinInterceptedMethod kotlinInterceptedMethod = KotlinInterceptedMethod.of(context);
+            KotlinInterceptedMethodImpl kotlinInterceptedMethod = KotlinInterceptedMethodImpl.of(context);
             if (kotlinInterceptedMethod != null) {
                 return kotlinInterceptedMethod;
             }

File: inject/src/main/java/io/micronaut/inject/qualifiers/PrimaryQualifier.java
Patch:
@@ -29,6 +29,7 @@
  * @since 3.5.0
  */
 @Internal
+@SuppressWarnings("java:S1845")
 public final class PrimaryQualifier<T> implements Qualifier<T> {
 
     @SuppressWarnings({"rawtypes", "java:S1845"})

File: core-processor/src/main/java/io/micronaut/inject/ast/MethodElement.java
Patch:
@@ -489,6 +489,7 @@ public boolean isFinal() {
             }
 
             @Override
+            @SuppressWarnings("java:S1192")
             public <T extends Annotation> Element annotate(@NonNull String annotationType, @NonNull Consumer<AnnotationValueBuilder<T>> consumer) {
                 ArgumentUtils.requireNonNull("annotationType", annotationType);
                 AnnotationValueBuilder<T> builder = AnnotationValue.builder(annotationType);
@@ -510,6 +511,7 @@ public <T extends Annotation> Element annotate(AnnotationValue<T> annotationValu
             }
 
             @Override
+            @SuppressWarnings("java:S1192")
             public Element removeAnnotation(@NonNull String annotationType) {
                 ArgumentUtils.requireNonNull("annotationType", annotationType);
                 annotationMetadata = metadataBuilder.removeAnnotation(getAnnotationMetadata(), annotationType);
@@ -525,6 +527,7 @@ public <T extends Annotation> Element removeAnnotationIf(@NonNull Predicate<Anno
             }
 
             @Override
+            @SuppressWarnings("java:S1192")
             public Element removeStereotype(@NonNull String annotationType) {
                 ArgumentUtils.requireNonNull("annotationType", annotationType);
                 annotationMetadata = metadataBuilder.removeStereotype(getAnnotationMetadata(), annotationType);

File: core-processor/src/main/java/io/micronaut/inject/ast/ParameterElement.java
Patch:
@@ -126,6 +126,7 @@ public AnnotationMetadata getAnnotationMetadata() {
             }
 
             @Override
+            @SuppressWarnings("java:S1192")
             public <T extends Annotation> Element annotate(@NonNull String annotationType, @NonNull Consumer<AnnotationValueBuilder<T>> consumer) {
                 ArgumentUtils.requireNonNull("annotationType", annotationType);
                 AnnotationValueBuilder<T> builder = AnnotationValue.builder(annotationType);

File: core-processor/src/main/java/io/micronaut/inject/ast/annotation/AbstractElementAnnotationMetadataFactory.java
Patch:
@@ -336,6 +336,7 @@ private AnnotationMetadata replaceAnnotationsInternal(AnnotationMetadata annotat
         }
 
         @Override
+        @SuppressWarnings("java:S1192")
         public <T extends Annotation> AnnotationMetadata annotate(@NonNull String annotationType, @NonNull Consumer<AnnotationValueBuilder<T>> consumer) {
             ArgumentUtils.requireNonNull("annotationType", annotationType);
             AnnotationValueBuilder<T> builder = AnnotationValue.builder(annotationType);

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanMethod.java
Patch:
@@ -72,8 +72,7 @@ public BeanIntrospection<B> getDeclaringBean() {
 
     @Override
     public final @NonNull ReturnType<T> getReturnType() {
-        //noinspection unchecked
-        return new ReturnType() {
+        return new ReturnType<>() {
             @Override
             public Class<T> getType() {
                 return returnType.getType();
@@ -115,6 +114,7 @@ public final Argument<?>[] getArguments() {
         return arguments;
     }
 
+    @SuppressWarnings("java:S2638")
     @Override
     public T invoke(@NonNull B instance, Object... arguments) {
         return invokeInternal(instance, arguments);

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValuesMap.java
Patch:
@@ -38,9 +38,11 @@
  * @since 1.0
  */
 public class ConvertibleMultiValuesMap<V> implements ConvertibleMultiValues<V>, ConversionServiceAware {
+    @SuppressWarnings("java:S1845")
     public static final ConvertibleMultiValues EMPTY = new ConvertibleMultiValuesMap(Collections.emptyMap()) {
         @Override
         public void setConversionService(ConversionService conversionService) {
+            // not needed
         }
     };
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -624,6 +624,7 @@ public Boolean getPushEnabled() {
          */
         @Deprecated
         public void setPushEnabled(Boolean enabled) {
+            // deprecated
         }
 
         /**

File: inject/src/main/java/io/micronaut/inject/qualifiers/PrimaryQualifier.java
Patch:
@@ -30,7 +30,8 @@
  */
 @Internal
 public final class PrimaryQualifier<T> implements Qualifier<T> {
-    @SuppressWarnings("rawtypes")
+
+    @SuppressWarnings({"rawtypes", "java:S1845"})
     public static final PrimaryQualifier INSTANCE = new PrimaryQualifier();
 
     private PrimaryQualifier() {

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequest.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.convert.ConversionContext;
+import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
@@ -175,8 +175,8 @@ public <T> Optional<T> getBody(Class<T> type) {
     }
 
     @Override
-    public <T> Optional<T> getBody(Argument<T> type) {
-        return getBody().flatMap(b -> conversionService.convert(b, ConversionContext.of(type)));
+    public <T> Optional<T> getBody(ArgumentConversionContext<T> conversionContext) {
+        return getBody().flatMap(b -> conversionService.convert(b, conversionContext));
     }
 
     @Override

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.http.codec.CodecException;
 import io.micronaut.http.reactive.execution.ReactiveExecutionFlow;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.execution.ExecutionFlow;
@@ -647,8 +648,9 @@ private RouteMatch<?> findErrorRoute(Throwable cause,
         if (errorRoute == null) {
             // Second try is by status route if the status is known
             HttpStatus errorStatus = null;
-            if (cause instanceof UnsatisfiedRouteException) {
+            if (cause instanceof UnsatisfiedRouteException || cause instanceof CodecException) {
                 // when arguments do not match, then there is UnsatisfiedRouteException, we can handle this with a routed bad request
+                // or when incoming request body is not in the expected format
                 errorStatus = HttpStatus.BAD_REQUEST;
             } else if (cause instanceof HttpStatusException) {
                 errorStatus = ((HttpStatusException) cause).getStatus();

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -73,7 +73,7 @@ public RequestBinderRegistry getBinderRegistry() {
      * @return The route
      */
     public RouteMatch<?> fulfillArgumentRequirements(RouteMatch<?> route, HttpRequest<?> request, boolean satisfyOptionals) {
-        Collection<Argument> requiredArguments = route.getRequiredArguments();
+        Collection<Argument<?>> requiredArguments = route.getRequiredArguments();
         Map<String, Object> argumentValues;
 
         if (requiredArguments.isEmpty()) {
@@ -82,7 +82,7 @@ public RouteMatch<?> fulfillArgumentRequirements(RouteMatch<?> route, HttpReques
         } else {
             argumentValues = new LinkedHashMap<>(requiredArguments.size());
             // Begin try fulfilling the argument requirements
-            for (Argument argument : requiredArguments) {
+            for (Argument<?> argument : requiredArguments) {
                 getValueForArgument(argument, request, satisfyOptionals).ifPresent(value ->
                     argumentValues.put(argument.getName(), value));
             }

File: router/src/main/java/io/micronaut/web/router/MethodBasedRouteMatch.java
Patch:
@@ -38,7 +38,7 @@ public interface MethodBasedRouteMatch<T, R> extends RouteMatch<R>, MethodExecut
      * @return The required arguments in order to invoke this route
      */
     @Override
-    default Collection<Argument> getRequiredArguments() {
+    default Collection<Argument<?>> getRequiredArguments() {
         return Arrays.asList(getArguments());
     }
 }

File: router/src/main/java/io/micronaut/web/router/RouteMatch.java
Patch:
@@ -91,7 +91,7 @@ public interface RouteMatch<R> extends Callable<R>, Predicate<HttpRequest>, Rout
      *
      * @return The required arguments in order to invoke this route
      */
-    default Collection<Argument> getRequiredArguments() {
+    default Collection<Argument<?>> getRequiredArguments() {
         return Collections.emptyList();
     }
 

File: context/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java
Patch:
@@ -127,6 +127,7 @@ public DefaultWatchThread start() {
                             }
                         } catch (InterruptedException | ClosedWatchServiceException e) {
                             // ignore
+                            Thread.currentThread().interrupt();
                         }
                     }
                 }, "micronaut-filewatch-thread").start();

File: core-reactive/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -83,7 +83,7 @@ public class Publishers {
                     "io.reactivex.rxjava3.core.Observable"
             );
             for (String name : typeNames) {
-                Optional<Class> aClass = ClassUtils.forName(name, classLoader);
+                Optional<Class<?>> aClass = ClassUtils.forName(name, classLoader);
                 aClass.ifPresent(reactiveTypes::add);
             }
             for (String name : Arrays.asList(
@@ -93,15 +93,15 @@ public class Publishers {
                     "io.reactivex.rxjava3.core.Single",
                     "io.reactivex.rxjava3.core.Maybe"
             )) {
-                Optional<Class> aClass = ClassUtils.forName(name, classLoader);
+                Optional<Class<?>> aClass = ClassUtils.forName(name, classLoader);
                 aClass.ifPresent(aClass1 -> {
                     singleTypes.add(aClass1);
                     reactiveTypes.add(aClass1);
                 });
             }
 
             for (String name : Arrays.asList("io.reactivex.Completable", "io.reactivex.rxjava3.core.Completable")) {
-                Optional<Class> aClass = ClassUtils.forName(name, classLoader);
+                Optional<Class<?>> aClass = ClassUtils.forName(name, classLoader);
                 aClass.ifPresent(aClass1 -> {
                     completableTypes.add(aClass1);
                     reactiveTypes.add(aClass1);

File: core/src/main/java/io/micronaut/core/bind/ArgumentBinder.java
Patch:
@@ -110,6 +110,7 @@ default boolean isPresentAndSatisfied() {
          *
          * @return The value
          */
+        @SuppressWarnings({"java:S3655", "OptionalGetWithoutIsPresent"})
         default T get() {
             return getValue().get();
         }

File: core/src/main/java/io/micronaut/core/convert/DefaultMutableConversionService.java
Patch:
@@ -233,7 +233,8 @@ private void registerDefaultConverters() {
             if (classLoader == null) {
                 classLoader = DefaultMutableConversionService.class.getClassLoader();
             }
-            return ClassUtils.forName(object.toString(), classLoader);
+            //noinspection rawtypes
+            return (Optional) ClassUtils.forName(object.toString(), classLoader);
         });
 
         // AnnotationClassValue -> Class

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -150,7 +150,7 @@ public Optional<ServiceDefinition<S>> firstOr(String alternative, ClassLoader cl
             return Optional.of(i.next());
         }
 
-        @SuppressWarnings("unchecked") Class<S> alternativeClass = ClassUtils.forName(alternative, classLoader)
+        @SuppressWarnings("unchecked") Class<S> alternativeClass = (Class<S>) ClassUtils.forName(alternative, classLoader)
                 .orElse(null);
         if (alternativeClass != null) {
             return Optional.of(createService(alternative, alternativeClass));

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -273,7 +273,7 @@ public static Optional<Class> getPrimitiveType(String primitiveType) {
      * @param classLoader The classloader. If null will fallback to attempt the thread context loader, otherwise the system loader
      * @return An optional of the class
      */
-    public static Optional<Class> forName(String name, @Nullable ClassLoader classLoader) {
+    public static Optional<Class<?>> forName(String name, @Nullable ClassLoader classLoader) {
         try {
             if (MISSING_TYPES.contains(name)) {
                 return Optional.empty();
@@ -285,7 +285,7 @@ public static Optional<Class> forName(String name, @Nullable ClassLoader classLo
                 classLoader = ClassLoader.getSystemClassLoader();
             }
 
-            Optional<Class> commonType = Optional.ofNullable(COMMON_CLASS_MAP.get(name));
+            Optional<Class<?>> commonType = Optional.ofNullable(COMMON_CLASS_MAP.get(name));
             if (commonType.isPresent()) {
                 return commonType;
             } else {

File: core/src/main/java/io/micronaut/core/serialize/JdkSerializer.java
Patch:
@@ -121,7 +121,7 @@ protected ObjectInputStream createObjectInput(InputStream inputStream, Class<?>
         return new ObjectInputStream(inputStream) {
             @Override
             protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
-                Optional<Class> aClass = ClassUtils.forName(desc.getName(), requiredType.getClassLoader());
+                Optional<Class<?>> aClass = ClassUtils.forName(desc.getName(), requiredType.getClassLoader());
                 if (aClass.isPresent()) {
                     return aClass.get();
                 }

File: core/src/main/java/io/micronaut/core/util/ArgumentUtils.java
Patch:
@@ -106,7 +106,7 @@ public static void validateArguments(
             @NonNull Argument<?>[] arguments,
             @NonNull Object[] values) {
         int requiredCount = arguments.length;
-        @SuppressWarnings("ConstantConditions") int actualCount = values == null ? 0 : values.length;
+        @SuppressWarnings("ConstantConditions") int actualCount = ArrayUtils.isEmpty(values) ? 0 : values.length;
         if (requiredCount != actualCount) {
             throw new IllegalArgumentException("Wrong number of arguments to " + (described instanceof Executable ? "method" : "constructor") + ": " + described.getDescription());
         }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -161,7 +161,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
 
         Optional<Class<? extends Annotation>> httpMethodMapping = context.getAnnotationTypeByStereotype(HttpMethodMapping.class);
         HttpClient httpClient = clientFactory.getClient(annotationMetadata);
-        if (context.hasStereotype(HttpMethodMapping.class) && httpClient != null) {
+        if (httpMethodMapping.isPresent() && context.hasStereotype(HttpMethodMapping.class) && httpClient != null) {
             AnnotationValue<HttpMethodMapping> mapping = context.getAnnotation(HttpMethodMapping.class);
             String uri = mapping.getRequiredValue(String.class);
             if (StringUtils.isEmpty(uri)) {

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectionManager.java
Patch:
@@ -308,6 +308,7 @@ public void shutdown() {
                 future.await(shutdownTimeout.toMillis());
             } catch (InterruptedException e) {
                 // ignore
+                Thread.currentThread().interrupt();
             }
         }
     }

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyServerWebSocketBroadcaster.java
Patch:
@@ -68,6 +68,7 @@ public <T> void broadcastSync(T message, MediaType mediaType, Predicate<WebSocke
                 return s != null && s.isOpen() && filter.test(s);
             }).sync();
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             throw new WebSocketSessionException("Broadcast Interrupted");
         }
     }

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyWebSocketSession.java
Patch:
@@ -180,6 +180,7 @@ public void sendSync(Object message, MediaType mediaType) {
                     }
                     channel.writeAndFlush(frame).sync().get();
                 } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt();
                     throw new WebSocketSessionException("Send interrupt: " + e.getMessage(), e);
                 } catch (ExecutionException e) {
                     throw new WebSocketSessionException("Send Failure: " + e.getMessage(), e);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServerFactory.java
Patch:
@@ -51,6 +51,6 @@ public interface NettyEmbeddedServerFactory {
      */
     @NonNull
     default NettyEmbeddedServer build(@NonNull NettyHttpServerConfiguration configuration, @Nullable ServerSslConfiguration sslConfiguration) {
-        return build(configuration, null);
+        return build(configuration);
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -559,6 +559,9 @@ protected void initChannel(@NonNull Http2StreamChannel ch) throws Exception {
                         try {
                             future.sync();
                         } catch (Exception e) {
+                            if (e instanceof InterruptedException) {
+                                Thread.currentThread().interrupt();
+                            }
                             LOG.warn("Failed to complete push promise", e);
                         }
                     });

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/DefaultCustomizableResponseTypeHandlerRegistry.java
Patch:
@@ -50,6 +50,7 @@ public DefaultCustomizableResponseTypeHandlerRegistry(List<NettyCustomizableResp
     }
 
     @Override
+    @SuppressWarnings("java:S2789") // performance optimization
     public Optional<NettyCustomizableResponseTypeHandler> findTypeHandler(Class<?> type) {
         Optional<NettyCustomizableResponseTypeHandler> foundHandler = handlerCache.get(type);
         if (foundHandler != null) {

File: http/src/main/java/io/micronaut/http/bind/binders/DefaultBodyAnnotationBinder.java
Patch:
@@ -81,9 +81,9 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         }
     }
 
+    @SuppressWarnings("java:S3655") // false positive
     private BindingResult<T> newResult(T converted, ArgumentConversionContext<T> context) {
         final Optional<ConversionError> lastError = context.getLastError();
-        //noinspection OptionalIsPresent
         if (lastError.isPresent()) {
             return new BindingResult<T>() {
                 @Override

File: http/src/main/java/io/micronaut/http/codec/DefaultMediaTypeCodecRegistry.java
Patch:
@@ -66,6 +66,7 @@ public class DefaultMediaTypeCodecRegistry implements MediaTypeCodecRegistry {
     }
 
     @Override
+    @SuppressWarnings("java:S2789") // performance optimization
     public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType) {
         if (mediaType == null) {
             return Optional.empty();

File: http/src/main/java/io/micronaut/http/simple/cookies/SimpleCookie.java
Patch:
@@ -229,8 +229,9 @@ public String toString() {
         if (isHttpOnly()) {
             buf.append(", HTTPOnly");
         }
-        if (getSameSite().isPresent()) {
-            buf.append(", SameSite=").append(getSameSite().get());
+        Optional<SameSite> ss = getSameSite();
+        if (ss.isPresent()) {
+            buf.append(", SameSite=").append(ss.get());
         }
         return buf.toString();
     }

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -150,6 +150,7 @@ public String toPathString() {
      * @return True if it matches
      */
     @Override
+    @SuppressWarnings("java:S2789") // performance optimization
     public Optional<UriMatchInfo> match(String uri) {
         if (uri == null) {
             throw new IllegalArgumentException("Argument 'uri' cannot be null");

File: inject/src/main/java/io/micronaut/context/ApplicationContextBuilder.java
Patch:
@@ -174,7 +174,7 @@ public interface ApplicationContextBuilder {
      * @param mainClass The main class
      * @return This builder
      */
-    @NonNull ApplicationContextBuilder mainClass(@Nullable Class mainClass);
+    @NonNull ApplicationContextBuilder mainClass(@Nullable Class<?> mainClass);
 
     /**
      * The class loader to be used.

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -223,7 +223,7 @@ public Map<String, Object> getProperties(@Nullable String name, @Nullable String
     }
 
     @Override
-    protected void registerConfiguration(BeanConfiguration configuration) {
+    protected synchronized void registerConfiguration(BeanConfiguration configuration) {
         if (getEnvironment().isActive(configuration)) {
             super.registerConfiguration(configuration);
         }

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -262,7 +262,7 @@ public boolean isEnvironmentPropertySource() {
     }
 
     @Override
-    public @NonNull ApplicationContextBuilder mainClass(Class mainClass) {
+    public @NonNull ApplicationContextBuilder mainClass(Class<?> mainClass) {
         if (mainClass != null) {
             if (this.classLoader == null) {
                 this.classLoader = mainClass.getClassLoader();

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1469,6 +1469,7 @@ public <T> Optional<BeanDefinition<T>> findProxyTargetBeanDefinition(@NonNull Cl
     }
 
     @Override
+    @SuppressWarnings("java:S2789") // performance optimization
     public <T> Optional<BeanDefinition<T>> findProxyTargetBeanDefinition(@NonNull Argument<T> beanType, @Nullable Qualifier<T> qualifier) {
         ArgumentUtils.requireNonNull("beanType", beanType);
         @SuppressWarnings("unchecked")
@@ -2825,6 +2826,7 @@ private <T> BeanRegistration<T> provideInjectionPoint(BeanResolutionContext reso
         final BeanResolutionContext.Path path = resolutionContext != null ? resolutionContext.getPath() : null;
         BeanResolutionContext.Segment<?> injectionPointSegment = null;
         if (CollectionUtils.isNotEmpty(path)) {
+            @SuppressWarnings("java:S2259") // false positive
             final Iterator<BeanResolutionContext.Segment<?>> i = path.iterator();
             injectionPointSegment = i.next();
             BeanResolutionContext.Segment<?> segment = null;
@@ -3053,7 +3055,7 @@ final <T> BeanRegistration<T> createRegistration(@Nullable BeanResolutionContext
      * @param <T>            The bean generic type
      * @return The concrete bean definition candidate
      */
-    @SuppressWarnings({"unchecked", "rawtypes"})
+    @SuppressWarnings({"unchecked", "rawtypes", "java:S2789"}) // performance optimization
     private <T> Optional<BeanDefinition<T>> findConcreteCandidate(@Nullable BeanResolutionContext resolutionContext,
                                                                   @NonNull Argument<T> beanType,
                                                                   @Nullable Qualifier<T> qualifier,

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -423,6 +423,7 @@ private boolean matchesSdk(ConditionContext context, AnnotationValue<Requires> r
 
                                 // non-semantic versioning in play
                                 int majorVersion = resolveJavaMajorVersion(javaVersion);
+                                @SuppressWarnings("java:S2259") // false positive
                                 int requiredVersion = resolveJavaMajorVersion(version);
 
                                 if (majorVersion >= requiredVersion) {

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -953,6 +953,7 @@ private static boolean isOracleCloudWindows() {
             }
         } catch (InterruptedException e) {
             // test negative
+            Thread.currentThread().interrupt();
         }
         return false;
     }
@@ -994,6 +995,7 @@ private static boolean isEC2Windows() {
             }
         } catch (InterruptedException e) {
             // test negative
+            Thread.currentThread().interrupt();
         }
         return false;
     }

File: inject/src/main/java/io/micronaut/context/i18n/ResourceBundleMessageSource.java
Patch:
@@ -76,6 +76,7 @@ public ResourceBundleMessageSource(@NonNull String baseName, @Nullable Locale de
 
     @NonNull
     @Override
+    @SuppressWarnings("java:S2789") // performance optimization
     public Optional<String> getRawMessage(@NonNull String code, @NonNull MessageContext context) {
         final Locale locale = defaultBundle != null ? context.getLocale(defaultBundle.getLocale()) : context.getLocale();
         MessageKey messageKey = new MessageKey(locale, code);
@@ -142,6 +143,7 @@ private Optional<String> resolveDefault(@NonNull String code) {
         return opt;
     }
 
+    @SuppressWarnings("java:S2789") // performance optimization
     private Optional<ResourceBundle> resolveBundle(Locale locale) {
         MessageKey key = new MessageKey(locale, baseName);
         final Optional<ResourceBundle> resourceBundle = bundleCache.get(key);

File: inject/src/main/java/io/micronaut/inject/provider/ProviderTypeInformationProvider.java
Patch:
@@ -28,6 +28,7 @@
 public final class ProviderTypeInformationProvider implements TypeInformationProvider {
 
     @Override
+    @SuppressWarnings("java:S1872") // required by impl
     public boolean isWrapperType(Class<?> type) {
         return BeanProvider.class == type ||
                 Provider.class == type ||

File: retry/src/main/java/io/micronaut/retry/intercept/DefaultRetryInterceptor.java
Patch:
@@ -239,6 +239,7 @@ private Object retrySync(MethodInvocationContext<Object, Object> context, Mutabl
                         }
                         Thread.sleep(delayMillis);
                     } catch (InterruptedException e1) {
+                        Thread.currentThread().interrupt();
                         throw e;
                     }
                 }

File: websocket/src/main/java/io/micronaut/websocket/WebSocketBroadcaster.java
Patch:
@@ -157,6 +157,7 @@ default <T> void broadcastSync(T message, MediaType mediaType, Predicate<WebSock
         try {
             broadcastAsync(message, mediaType, filter).get();
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             throw new WebSocketSessionException("Broadcast Interrupted");
         } catch (ExecutionException e) {
             throw new WebSocketSessionException("Broadcast Failure: " + e.getMessage(), e);

File: websocket/src/main/java/io/micronaut/websocket/WebSocketSession.java
Patch:
@@ -123,6 +123,7 @@ default void sendSync(Object message, MediaType mediaType) {
         try {
             sendAsync(message, mediaType).get();
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             throw new WebSocketSessionException("Send Interrupted");
         } catch (ExecutionException e) {
             throw new WebSocketSessionException("Send Failure: " + e.getMessage(), e);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -160,7 +160,7 @@ public NettyHttpServer(
                 .getEventPublisher(HttpRequestTerminatedEvent.class);
         final Supplier<ExecutorService> ioExecutor = SupplierUtil.memoized(() ->
                 nettyEmbeddedServices.getExecutorSelector()
-                        .select(TaskExecutors.IO).orElse(null)
+                        .select(TaskExecutors.BLOCKING).orElse(null)
         );
         this.httpContentProcessorResolver = new DefaultHttpContentProcessorResolver(
                 nettyEmbeddedServices.getApplicationContext(),

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBinderRegistrar.java
Patch:
@@ -60,7 +60,7 @@ class NettyBinderRegistrar implements BeanCreatedEventListener<RequestBinderRegi
                          HttpContentProcessorResolver httpContentProcessorResolver,
                          BeanLocator beanLocator,
                          BeanProvider<HttpServerConfiguration> httpServerConfiguration,
-                         @Named(TaskExecutors.IO) BeanProvider<ExecutorService> executorService) {
+                         @Named(TaskExecutors.BLOCKING) BeanProvider<ExecutorService> executorService) {
         this.conversionService = conversionService;
         this.httpContentProcessorResolver = httpContentProcessorResolver;
         this.beanLocator = beanLocator;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewServerFilter.java
Patch:
@@ -67,7 +67,7 @@ public class JsonViewServerFilter implements HttpServerFilter {
      */
     public JsonViewServerFilter(
             JsonViewCodecResolver jsonViewCodecResolver,
-            @Named(TaskExecutors.IO) ExecutorService executorService) {
+            @Named(TaskExecutors.BLOCKING) ExecutorService executorService) {
         this.codecFactory = jsonViewCodecResolver;
         this.executorService = executorService;
     }

File: management/src/main/java/io/micronaut/management/health/indicator/AbstractHealthIndicator.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractHealthIndicator<T> implements HealthIndicator {
      * @param executorService The executor service
      */
     @Inject
-    public void setExecutorService(@Named(TaskExecutors.IO) ExecutorService executorService) {
+    public void setExecutorService(@Named(TaskExecutors.BLOCKING) ExecutorService executorService) {
         this.executorService = executorService;
     }
 

File: management/src/main/java/io/micronaut/management/health/indicator/jdbc/JdbcIndicator.java
Patch:
@@ -71,7 +71,7 @@ public class JdbcIndicator implements HealthIndicator {
      * @param dataSourceResolver The data source resolver
      * @param healthAggregator   The health aggregator
      */
-    public JdbcIndicator(@Named(TaskExecutors.IO) ExecutorService executorService,
+    public JdbcIndicator(@Named(TaskExecutors.BLOCKING) ExecutorService executorService,
                          DataSource[] dataSources,
                          @Nullable DataSourceResolver dataSourceResolver,
                          HealthAggregator<?> healthAggregator) {

File: core-processor/src/main/java/io/micronaut/inject/ast/utils/AstBeanPropertiesUtils.java
Patch:
@@ -253,7 +253,7 @@ private static void processSetter(Map<String, BeanPropertyData> props, MethodEle
 
     private static ClassElement unwrapType(ClassElement type) {
         if (type.isOptional()) {
-            return type.getFirstTypeArgument().orElse(type);
+            return type.getOptionalValueType().orElse(type);
         }
         return type;
     }

File: core-processor/src/main/java/io/micronaut/inject/processing/ConfigurationReaderBeanElementCreator.java
Patch:
@@ -124,7 +124,8 @@ private void processConfigurationConstructorParameter(ParameterElement parameter
     private boolean isPropertyParameter(ParameterElement parameter) {
         ClassElement parameterType = parameter.getGenericType();
         if (parameterType.isOptional() || parameterType.isAssignable(BeanProvider.class) || parameterType.isAssignable(Provider.class)) {
-            parameterType = parameterType.getFirstTypeArgument().orElse(parameterType);
+            ClassElement finalParameterType = parameterType;
+            parameterType = parameterType.getOptionalValueType().or(finalParameterType::getFirstTypeArgument).orElse(parameterType);
             // Get the class with type annotations
             parameterType = visitorContext.getClassElement(parameterType.getCanonicalName()).orElse(parameterType);
         }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -661,7 +661,7 @@ public boolean isAbstract() {
     @Override
     public boolean isStatic() {
         // I assume Groovy can decide not to make the class static internally
-        // and isStaticClass will be false even if the class has static modifier
+        // and isStaticClass will be false even if the class has a static modifier
         return classNode.isStaticClass() || Modifier.isStatic(classNode.getModifiers());
     }
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/HateoasErrorResponseProcessorReplacement.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.context.annotation.Replaces;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.annotation.Secondary;
 import io.micronaut.context.env.groovy.GroovyPropertySourceLoader;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.http.MutableHttpResponse;
@@ -31,6 +32,7 @@
  */
 @Deprecated
 @Singleton
+@Secondary
 @Requires(classes = GroovyPropertySourceLoader.class)
 @Replaces(HateoasErrorResponseProcessor.class)
 public class HateoasErrorResponseProcessorReplacement implements ErrorResponseProcessor<JsonError> {

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyFeature.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.buffer.netty;
 
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import com.oracle.svm.core.jdk.SystemPropertiesSupport;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.graal.AutomaticFeatureUtils;
@@ -36,7 +35,6 @@
  * @since 3.3.0
  */
 @Internal
-@AutomaticFeature
 final class NettyFeature implements Feature {
     @Override
     public void beforeAnalysis(BeforeAnalysisAccess access) {

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospection.java
Patch:
@@ -45,7 +45,7 @@
  * @since 1.1
  */
 @Immutable
-public interface BeanIntrospection<T> extends AnnotationMetadataDelegate {
+public interface BeanIntrospection<T> extends AnnotationMetadataDelegate, BeanInfo<T> {
 
     /**
      * @return A immutable collection of properties.

File: core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Optional;
 
 /**
- * Utility methods for implementing Graal's {@link com.oracle.svm.core.annotate.AutomaticFeature}.
+ * Utility methods for implementing GraalVM.
  *
  * @author Álvaro Sánchez-Mariscal
  * @author graemerocher

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.Type;
 import io.micronaut.function.client.aop.FunctionClientAdvice;
-import io.micronaut.retry.annotation.Recoverable;
 import jakarta.inject.Singleton;
 
 import java.lang.annotation.Documented;
@@ -37,7 +36,6 @@
 @Retention(RUNTIME)
 @Singleton
 @Introduction
-@Recoverable
 @Type(FunctionClientAdvice.class)
 public @interface FunctionClient {
 }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.interceptor;
 
 import io.micronaut.aop.InterceptedMethod;
+import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
@@ -55,8 +56,8 @@
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.client.BlockingHttpClient;
 import io.micronaut.http.client.HttpClient;
-import io.micronaut.http.client.ReactiveClientResultTransformer;
 import io.micronaut.http.client.HttpClientRegistry;
+import io.micronaut.http.client.ReactiveClientResultTransformer;
 import io.micronaut.http.client.StreamingHttpClient;
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.bind.ClientArgumentRequestBinder;
@@ -68,7 +69,6 @@
 import io.micronaut.http.uri.UriBuilder;
 import io.micronaut.http.uri.UriMatchTemplate;
 import io.micronaut.json.codec.JsonMediaTypeCodec;
-import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -98,7 +98,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@Singleton
+@InterceptorBean(Client.class)
 @Internal
 @BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object> {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/discovery/NettyEmbeddedServerInstance.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty;
+package io.micronaut.http.server.netty.discovery;
 
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.annotation.Parameter;
@@ -27,6 +27,7 @@
 import io.micronaut.discovery.cloud.ComputeInstanceMetadata;
 import io.micronaut.discovery.cloud.ComputeInstanceMetadataResolver;
 import io.micronaut.discovery.metadata.ServiceInstanceMetadataContributor;
+import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.runtime.server.EmbeddedServer;
 
 import java.net.URI;

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
-import io.micronaut.reactive.reactor.execution.ReactiveExecutionFlow;
+import io.micronaut.http.reactive.execution.ReactiveExecutionFlow;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.execution.ExecutionFlow;
 import io.micronaut.core.io.buffer.ReferenceCounted;

File: http/src/main/java/io/micronaut/http/reactive/execution/ReactiveExecutionFlow.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.reactive.reactor.execution;
+package io.micronaut.http.reactive.execution;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
@@ -61,7 +61,7 @@ static <K> ReactiveExecutionFlow<K> fromPublisher(@NonNull Publisher<K> publishe
     static <K> ReactiveExecutionFlow<K> async(@NonNull Executor executor, @NonNull Supplier<ExecutionFlow<K>> supplier) {
         Scheduler scheduler = Schedulers.fromExecutor(executor);
         return (ReactiveExecutionFlow<K>) new ReactorExecutionFlowImpl(
-            Mono.fromSupplier(supplier).flatMap(ReactorExecutionFlowImpl::toMono).subscribeOn(scheduler).subscribeOn(scheduler)
+            Mono.fromSupplier(supplier).flatMap(ReactorExecutionFlowImpl::toMono).subscribeOn(scheduler)
         );
     }
 

File: http/src/main/java/io/micronaut/http/reactive/execution/ReactorExecutionFlowImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.reactive.reactor.execution;
+package io.micronaut.http.reactive.execution;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.execution.CompletableFutureExecutionFlow;

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -102,9 +102,8 @@ public class DefaultEnvironment extends PropertySourcePropertyResolver implement
     private static final List<String> DEFAULT_CONFIG_LOCATIONS = Arrays.asList("classpath:/", "file:config/");
     protected final ClassPathResourceLoader resourceLoader;
     protected final List<PropertySource> refreshablePropertySources = new ArrayList<>(10);
-
+    protected final MutableConversionService mutableConversionService;
     private EnvironmentsAndPackage environmentsAndPackage;
-
     private final Set<String> names;
     private final ClassLoader classLoader;
     private final Collection<String> packages = new ConcurrentLinkedQueue<>();
@@ -119,7 +118,6 @@ public class DefaultEnvironment extends PropertySourcePropertyResolver implement
     private final Boolean deduceEnvironments;
     private final ApplicationContextConfiguration configuration;
     private final Collection<String> configLocations;
-    protected final MutableConversionService mutableConversionService;
 
     /**
      * Construct a new environment for the given configuration.

File: inject/src/main/java/io/micronaut/inject/BeanType.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
+import io.micronaut.core.beans.BeanInfo;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.DefaultArgument;
 import io.micronaut.core.util.ArrayUtils;
@@ -36,7 +37,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface BeanType<T> extends AnnotationMetadataProvider, BeanContextConditional {
+public interface BeanType<T> extends AnnotationMetadataProvider, BeanContextConditional, BeanInfo<T> {
 
     /**
      * @return Whether the bean definition is the {@link io.micronaut.context.annotation.Primary}
@@ -50,7 +51,7 @@ default boolean isPrimary() {
      *
      * @return The underlying bean type
      */
-    Class<T> getBeanType();
+    @NonNull Class<T> getBeanType();
 
     /**
      * Checks whether the bean type is a container type.

File: jackson-databind/src/main/java/io/micronaut/jackson/JacksonDatabindFeature.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
-import com.oracle.svm.core.annotate.AutomaticFeature;
 import io.micronaut.core.annotation.Internal;
 import org.graalvm.nativeimage.hosted.Feature;
 import org.graalvm.nativeimage.hosted.RuntimeReflection;
@@ -31,7 +30,6 @@
  * @since 3.4.1
  */
 @Internal
-@AutomaticFeature
 final class JacksonDatabindFeature implements Feature {
     @SuppressWarnings("deprecation")
     @Override

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -197,7 +197,7 @@ protected HealthLevelOfDetail levelOfDetail(@Nullable Principal principal) {
     }
 
     /**
-     * Configuration related to handling of the {@link io.micronaut.health.HealthStatus}.
+     * Configuration related to handling of the {@link HealthStatus}.
      *
      * @author graemerocher
      * @since 1.0
@@ -216,14 +216,14 @@ public StatusConfiguration() {
         }
 
         /**
-         * @return How {@link io.micronaut.health.HealthStatus} map to {@link io.micronaut.http.HttpStatus} codes.
+         * @return How {@link HealthStatus} map to {@link io.micronaut.http.HttpStatus} codes.
          */
         public Map<String, HttpStatus> getHttpMapping() {
             return httpMapping;
         }
 
         /**
-         * Set how {@link io.micronaut.health.HealthStatus} map to {@link io.micronaut.http.HttpStatus} codes.
+         * Set how {@link HealthStatus} map to {@link io.micronaut.http.HttpStatus} codes.
          *
          * @param httpMapping The http mappings
          */

File: http-netty/src/main/java/io/micronaut/http/netty/AbstractNettyHttpRequest.java
Patch:
@@ -75,7 +75,7 @@ public AbstractNettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyReq
         this.conversionService = conversionService;
         URI fullUri = URI.create(nettyRequest.uri());
         if (fullUri.getAuthority() != null || fullUri.getScheme() != null) {
-            // http://example.com/foo -> /foo
+            // https://example.com/foo -> /foo
             try {
                 fullUri = new URI(
                         null, // scheme

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -242,7 +242,7 @@ protected Element getTypeForAnnotation(AnnotationMirror annotationMirror) {
     @Override
     protected List<? extends AnnotationMirror> getAnnotationsForType(Element element) {
         List<? extends AnnotationMirror> annotationMirrors = new ArrayList<>(element.getAnnotationMirrors());
-        annotationMirrors.removeIf(mirror -> getAnnotationTypeName(mirror).equals(AnnotationUtil.KOTLIN_METADATA));
+        annotationMirrors.removeIf(mirror -> EXCLUDES.contains(getAnnotationTypeName(mirror)));
         List<AnnotationMirror> expanded = new ArrayList<>(annotationMirrors.size());
         for (AnnotationMirror annotation : annotationMirrors) {
             boolean repeatable = false;

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -82,9 +82,11 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
     private static final Map<MetadataKey<?>, CachedAnnotationMetadata> MUTATED_ANNOTATION_METADATA = new HashMap<>(100);
     private static final Map<String, Set<String>> NON_BINDING_CACHE = new HashMap<>(50);
     private static final List<String> DEFAULT_ANNOTATE_EXCLUDES = Arrays.asList(Internal.class.getName(),
-        Experimental.class.getName());
+        Experimental.class.getName(), "jdk.internal.ValueBased");
     private static final Map<String, Map<String, Object>> ANNOTATION_DEFAULTS = new HashMap<>(20);
 
+    protected static final List<String> EXCLUDES = Arrays.asList(AnnotationUtil.KOTLIN_METADATA, "jdk.internal.ValueBased");
+
     static {
         for (AnnotationMapper mapper : SoftServiceLoader.load(AnnotationMapper.class, AbstractAnnotationMetadataBuilder.class.getClassLoader())
             .disableFork().collectAll()) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -89,7 +89,7 @@ public ClassElement getGenericType() {
                     variableElement.asType(),
                     visitorContext,
                     owningType.getGenericTypeInfo(),
-                    false
+                    true
                 );
             }
         }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -215,7 +215,7 @@ public AnnotationMetadata buildDeclared(T element, List<? extends A> annotations
      * @return The {@link AnnotationMetadata}
      */
     public CachedAnnotationMetadata lookupOrBuildForParameter(T owningType, T methodElement, T parameterElement) {
-        return lookupOrBuild(true, owningType, methodElement, parameterElement);
+        return lookupOrBuild(false, owningType, methodElement, parameterElement);
     }
 
     /**

File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -98,7 +98,7 @@ ApplicationEventListener<ServerStartupEvent> healthCheckStarter(@Parameter Servi
                     Collection<URI> loadBalancedURIs = instanceList.getLoadBalancedURIs();
                     final HttpClient httpClient = clientFactory.get()
                             .getClient(
-                                    configuration.getHttpVersion(),
+                                    HttpVersionSelection.forClientConfiguration(configuration),
                                     configuration.getServiceId(),
                                     configuration.getPath().orElse(null));
                     final Duration initialDelay = configuration.getHealthCheckInterval();

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsClientHandler.java
Patch:
@@ -88,7 +88,6 @@ protected boolean hasBody(HttpResponse response) {
             return true;
         }
 
-
         if (HttpUtil.isContentLengthSet(response)) {
             return HttpUtil.getContentLength(response) > 0;
         }
@@ -183,7 +182,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
     @Override
     public void write(final ChannelHandlerContext ctx, Object msg, final ChannelPromise promise) throws Exception {
-        if (ctx.channel().attr(AttributeKey.valueOf(ChannelPipelineCustomizer.HANDLER_HTTP_CHUNK)).get() == Boolean.TRUE) {
+        if (Boolean.TRUE.equals(ctx.channel().attr(AttributeKey.valueOf(ChannelPipelineCustomizer.HANDLER_HTTP_CHUNK)).get())) {
             ctx.write(msg, promise);
         } else {
             super.write(ctx, msg, promise);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1251,7 +1251,7 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, HttpRequest
             if (!isHttp2) {
                 if (!nettyHeaders.contains(HttpHeaderNames.CONNECTION)) {
                     boolean expectKeepAlive = nettyResponse.protocolVersion().isKeepAliveDefault() || request.getHeaders().isKeepAlive();
-                    if (!decodeError && (expectKeepAlive || httpStatus < 500 || serverConfiguration.isKeepAliveOnServerError())) {
+                    if (!decodeError && expectKeepAlive && (httpStatus < 500 || serverConfiguration.isKeepAliveOnServerError())) {
                         nettyHeaders.set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);
                     } else {
                         nettyHeaders.set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -111,7 +111,7 @@ public class NettyHttpServerConfiguration extends HttpServerConfiguration {
      * The default configuration for boolean flag indicating whether to add connection header `keep-alive` to responses with HttpStatus > 499.
      */
     @SuppressWarnings("WeakerAccess")
-    public static final boolean DEFAULT_KEEP_ALIVE_ON_SERVER_ERROR = false;
+    public static final boolean DEFAULT_KEEP_ALIVE_ON_SERVER_ERROR = true;
 
     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServerConfiguration.class);
 

File: test-suite/src/test/java/io/micronaut/docs/netty/LogbookNettyClientCustomizer.java
Patch:
@@ -8,7 +8,6 @@
 import io.micronaut.http.client.netty.NettyClientCustomizer;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.netty.channel.Channel;
-import io.netty.channel.ChannelPipeline;
 import jakarta.inject.Singleton;
 import org.zalando.logbook.Logbook;
 import org.zalando.logbook.netty.LogbookClientHandler;
@@ -47,8 +46,9 @@ public NettyClientCustomizer specializeForChannel(Channel channel, ChannelRole r
         }
 
         @Override
-        public void onStreamPipelineBuilt() {
-            channel.pipeline().addLast( // <5>
+        public void onRequestPipelineBuilt() {
+            channel.pipeline().addBefore( // <5>
+                ChannelPipelineCustomizer.HANDLER_HTTP_STREAM,
                 "logbook",
                 new LogbookClientHandler(logbook)
             );

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/HateoasErrorResponseProcessor.java
Patch:
@@ -51,7 +51,9 @@ public HateoasErrorResponseProcessor(JsonConfiguration jacksonConfiguration) {
      * {@link HateoasErrorResponseProcessor#HateoasErrorResponseProcessor(JsonConfiguration)}
      *
      * @param jacksonConfiguration the configuration to use for processing.
+     * @deprecated Use {@link HateoasErrorResponseProcessor(JsonConfiguration)}
      */
+    @Deprecated
     public HateoasErrorResponseProcessor(JacksonConfiguration jacksonConfiguration) {
         this((JsonConfiguration) jacksonConfiguration);
     }

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -385,9 +385,8 @@ private <T> String cacheKey(@NonNull String name, Class<T> requiredType) {
     public Map<String, Object> getAllProperties(StringConvention keyConvention, MapFormat.MapTransformation transformation) {
         Map<String, Object> map = new HashMap<>();
         boolean isNested = transformation == MapFormat.MapTransformation.NESTED;
-
         Arrays
-            .stream(catalog)
+            .stream(getCatalog(keyConvention == StringConvention.RAW ? PropertyCatalog.RAW : PropertyCatalog.GENERATED))
             .filter(Objects::nonNull)
             .map(Map::entrySet)
             .flatMap(Collection::stream)

File: inject/src/main/java/io/micronaut/inject/processing/DeclaredBeanElementCreator.java
Patch:
@@ -189,7 +189,7 @@ private void visitFieldInternal(BeanDefinitionVisitor visitor, FieldElement fiel
     }
 
     private void visitMethodInternal(BeanDefinitionVisitor visitor, MethodElement methodElement) {
-        if (methodElement.hasAnnotation(ANN_REQUIRES_VALIDATION)) {
+        if (methodElement.hasDeclaredAnnotation(ANN_REQUIRES_VALIDATION)) {
             methodElement.annotate(ANN_VALIDATED);
         }
         boolean claimed = visitMethod(visitor, methodElement);

File: inject/src/main/java/io/micronaut/inject/validation/RequiresValidation.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.SOURCE;
+import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
  * Internal method marks a type, method or a field for validation.
@@ -31,7 +31,7 @@
  * @since 4.0.0
  */
 @Documented
-@Retention(SOURCE)
+@Retention(CLASS)
 @Target({ElementType.METHOD, ElementType.TYPE, ElementType.FIELD})
 @Internal
 public @interface RequiresValidation {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -527,7 +527,7 @@ public PushCapableHttpRequest<T> serverPush(@NonNull HttpRequest<?> request) {
             );
 
             int ourStream = ((Http2StreamChannel) channelHandlerContext.channel()).stream().id();
-            HttpPipelineBuilder.StreamPipeline originalStreamPipeline = channelHandlerContext.channel().attr(HttpPipelineBuilder.StreamPipelineAttributeKeyHolder.getInstance()).get();
+            HttpPipelineBuilder.StreamPipeline originalStreamPipeline = channelHandlerContext.channel().attr(HttpPipelineBuilder.STREAM_PIPELINE_ATTRIBUTE.get()).get();
 
             new Http2StreamChannelBootstrap(channelHandlerContext.channel().parent())
                     .handler(new ChannelInitializer<Http2StreamChannel>() {

File: http-client-core/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -101,7 +101,7 @@ private void initResponse(HttpResponse<?> response) {
     private Argument<?> getErrorType(HttpResponse<?> response) {
         Optional<MediaType> contentType = response.getContentType();
         Argument<?> errorType = null;
-        if (contentType.isPresent() && response.getStatus().getCode() > 399) {
+        if (contentType.isPresent() && response.code() > 399) {
             MediaType mediaType = contentType.get();
             if (errorDecoder != null) {
                 errorType = errorDecoder.getErrorType(mediaType);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -121,7 +121,7 @@ protected void encode(ChannelHandlerContext context, MutableHttpResponse<?> resp
             ByteBuf body = b instanceof  ByteBuf ? (ByteBuf) b : Unpooled.buffer(0);
             FullHttpResponse nettyResponse = new DefaultFullHttpResponse(
                     HttpVersion.HTTP_1_1,
-                    HttpResponseStatus.valueOf(response.status().getCode(), response.status().getReason()),
+                    HttpResponseStatus.valueOf(response.code(), response.reason()),
                     body,
                     nettyHeaders,
                     EmptyHttpHeaders.INSTANCE

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/HateoasErrorResponseProcessor.java
Patch:
@@ -64,13 +64,13 @@ public MutableHttpResponse<JsonError> processResponse(@NonNull ErrorContext erro
         }
         JsonError error;
         if (!errorContext.hasErrors()) {
-            error = new JsonError(response.getStatus().getReason());
+            error = new JsonError(response.reason());
         } else if (errorContext.getErrors().size() == 1 && !alwaysSerializeErrorsAsList) {
             Error jsonError = errorContext.getErrors().get(0);
             error = new JsonError(jsonError.getMessage());
             jsonError.getPath().ifPresent(error::path);
         } else {
-            error = new JsonError(response.getStatus().getReason());
+            error = new JsonError(response.reason());
             List<Resource> errors = new ArrayList<>();
             for (Error jsonError : errorContext.getErrors()) {
                 errors.add(new JsonError(jsonError.getMessage()).path(jsonError.getPath().orElse(null)));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1209,7 +1209,7 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, HttpRequest
             try {
                 if (!future.isSuccess()) {
                     final Throwable throwable = future.cause();
-                    if (!(throwable instanceof ClosedChannelException)) {
+                    if (!isIgnorable(throwable)) {
                         if (throwable instanceof Http2Exception.StreamException) {
                             Http2Exception.StreamException se = (Http2Exception.StreamException) throwable;
                             if (se.error() == Http2Error.STREAM_CLOSED) {
@@ -1453,7 +1453,7 @@ private ByteBuf encodeBodyAsByteBuf(
      * @param cause The cause
      * @return True if it can be ignored.
      */
-    protected boolean isIgnorable(Throwable cause) {
+    final boolean isIgnorable(Throwable cause) {
         if (cause instanceof ClosedChannelException || cause.getCause() instanceof ClosedChannelException) {
             return true;
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -527,7 +527,7 @@ public PushCapableHttpRequest<T> serverPush(@NonNull HttpRequest<?> request) {
             );
 
             int ourStream = ((Http2StreamChannel) channelHandlerContext.channel()).stream().id();
-            HttpPipelineBuilder.StreamPipeline originalStreamPipeline = channelHandlerContext.channel().attr(HttpPipelineBuilder.STREAM_PIPELINE_ATTRIBUTE).get();
+            HttpPipelineBuilder.StreamPipeline originalStreamPipeline = channelHandlerContext.channel().attr(HttpPipelineBuilder.StreamPipelineAttributeKeyHolder.getInstance()).get();
 
             new Http2StreamChannelBootstrap(channelHandlerContext.channel().parent())
                     .handler(new ChannelInitializer<Http2StreamChannel>() {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -961,7 +961,7 @@ public Object visitExecutable(ExecutableElement method, Object o) {
                         writer.setValidated(validatedMethod);
                     }
                 }
-            } else if (validatedMethod) {
+            } else if (validatedMethod && isDeclaredBean) {
                 if (isPrivate) {
                     error(method, "Method annotated with constraints but is declared private. Change the method to be non-private in order for AOP advice to be applied.");
                     return null;

File: http-netty/src/main/java/io/micronaut/http/netty/AbstractNettyHttpRequest.java
Patch:
@@ -148,7 +148,7 @@ public boolean isStream() {
 
     @Override
     public HttpVersion getHttpVersion() {
-        if (nettyRequest.headers().contains(STREAM_ID)) {
+        if (nettyRequest.headers().contains(HTTP2_SCHEME)) {
             return HttpVersion.HTTP_2_0;
         }
         return HttpVersion.HTTP_1_1;

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamingInboundHttp2ToHttpAdapter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.netty.stream;
 
+import io.micronaut.core.annotation.Internal;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandlerContext;
@@ -48,6 +49,7 @@
  * @author graemerocher
  * @since 2.0
  */
+@Internal
 public class StreamingInboundHttp2ToHttpAdapter extends Http2EventAdapter {
     protected final Http2Connection connection;
     protected final boolean validateHttpHeaders;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -922,6 +922,7 @@ private List<GroovyPropertyElement> getPropertiesFromGettersAndSetters(List<Groo
         ClassNode classNode = this.classNode;
         while (classNode != null && !classNode.equals(ClassHelper.OBJECT_TYPE) && !classNode.equals(ClassHelper.Enum_Type)) {
 
+            ClassNode finalClassNode = classNode;
             classNode.visitContents(
                     new PublicMethodVisitor(null) {
 
@@ -932,7 +933,7 @@ private List<GroovyPropertyElement> getPropertiesFromGettersAndSetters(List<Groo
 
                         @Override
                         protected boolean isAcceptable(MethodNode node) {
-                            boolean validModifiers = node.isPublic() && !node.isStatic() && !node.isSynthetic() && !node.isAbstract();
+                            boolean validModifiers = node.isPublic() && !node.isStatic() && !node.isSynthetic() && (!node.isAbstract() || finalClassNode.isInterface());
                             if (validModifiers) {
                                 String methodName = node.getName();
                                 if (methodName.contains("$") || methodName.equals("getMetaClass")) {

File: http/src/main/java/io/micronaut/http/bind/DefaultRequestBinderRegistry.java
Patch:
@@ -262,6 +262,9 @@ protected void registerDefaultAnnotationBinders(Map<Class<? extends Annotation>,
         RequestBeanAnnotationBinder<Object> requestBeanAnnotationBinder = new RequestBeanAnnotationBinder<>(this, conversionService);
         byAnnotation.put(requestBeanAnnotationBinder.getAnnotationType(), requestBeanAnnotationBinder);
 
+        PartAnnotationBinder<Object> partAnnotationBinder = new PartAnnotationBinder<>(conversionService);
+        byAnnotation.put(partAnnotationBinder.getAnnotationType(), partAnnotationBinder);
+
         if (KOTLIN_COROUTINES_SUPPORTED) {
             ContinuationArgumentBinder continuationArgumentBinder = new ContinuationArgumentBinder();
             byType.put(continuationArgumentBinder.argumentType().typeHashCode(), continuationArgumentBinder);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -368,7 +368,7 @@ public synchronized BeanContext start() {
      */
     @Override
     public synchronized BeanContext stop() {
-        if (terminating.compareAndSet(false, true)) {
+        if (terminating.compareAndSet(false, true) && isRunning()) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Stopping BeanContext");
             }

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationMetadataQualifier.java
Patch:
@@ -48,7 +48,7 @@
  * @since 1.0
  */
 @Internal
-class AnnotationMetadataQualifier<T> implements Qualifier<T> {
+final class AnnotationMetadataQualifier<T> implements Qualifier<T> {
 
     @NonNull
     final String annotationName;

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -1962,7 +1962,7 @@ private void putValues(String annotation, Map<CharSequence, Object> values, Map<
             }
         } else {
             if (!hasValues) {
-                existing = existing == null ? Collections.emptyMap() : existing;
+                existing = existing == null ? new LinkedHashMap<>(3) : existing;
             } else {
                 existing = new LinkedHashMap<>(values.size());
                 existing.putAll(values);

File: http/src/main/java/io/micronaut/http/annotation/Consumes.java
Patch:
@@ -28,7 +28,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>An annotation to indicate the {@link io.micronaut.http.MediaType}s produced by a particular component.</p>
+ * <p>An annotation to indicate the {@link io.micronaut.http.MediaType}s consumed by a particular component.</p>
  *
  * <p>Generally with controllers one can use the {@code consumes} attribute of the {@code Controller} annotation,
  * however this annotation is more generic and applies to any component</p>

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -153,6 +153,7 @@ default <I, O> Publisher<HttpResponse<O>> exchange(@NonNull HttpRequest<I> reque
      * @return A {@link Publisher} that emits a result of the given type
      */
     default <I, O, E> Publisher<O> retrieve(@NonNull HttpRequest<I> request, @NonNull Argument<O> bodyType, @NonNull Argument<E> errorType) {
+        // note: this default impl isn't used by us anymore, it's overridden by DefaultHttpClient
         return Flux.from(exchange(request, bodyType, errorType)).map(response -> {
             if (bodyType.getType() == HttpStatus.class) {
                 return (O) response.getStatus();

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2970,7 +2970,7 @@ public BeanIdentifier id() {
                     @NonNull
                     @Override
                     public CreatedBean<T> create() throws BeanCreationException {
-                        return createRegistration(resolutionContext, beanType, qualifier, definition, true);
+                        return createRegistration(resolutionContext == null ? null : resolutionContext.copy(), beanType, qualifier, definition, true);
                     }
                 }
         );

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2985,7 +2985,7 @@ public BeanIdentifier id() {
                     @NonNull
                     @Override
                     public CreatedBean<T> create() throws BeanCreationException {
-                        return createRegistration(resolutionContext, beanType, qualifier, definition, true);
+                        return createRegistration(resolutionContext == null ? null : resolutionContext.copy(), beanType, qualifier, definition, true);
                     }
                 }
         );

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -639,7 +639,7 @@ public BeanDefinitionWriter(Element beanProducingElement,
             this.beanTypeElement = beanElementBuilder.getBeanType();
             this.packageName = this.beanTypeElement.getPackageName();
             this.isInterface = this.beanTypeElement.isInterface();
-            this.isAbstract = this.beanTypeElement.isAbstract();
+            this.isAbstract = beanElementBuilder.getProducingElement() instanceof ClassElement && this.beanTypeElement.isAbstract();
             this.beanFullClassName = this.beanTypeElement.getName();
             this.beanSimpleClassName = this.beanTypeElement.getSimpleName();
             if (uniqueIdentifier == null) {

File: aop/src/main/java/io/micronaut/aop/InvocationContext.java
Patch:
@@ -32,7 +32,7 @@
  * context and shared between multiple {@link Interceptor} implementations. The {@link #proceed()} method should be
  * called to proceed to the next {@link Interceptor} with the last interceptor in the chain being the original
  * decorated method implementation.</p>
- * <p>
+ *
  * <p>The parameters to pass to the next {@link Interceptor} can be mutated using {@link MutableArgumentValue}
  * interface returned by the {@link #getParameters()} method</p>
  *

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -208,7 +208,7 @@ public class AopProxyWriter extends AbstractClassFileWriter implements ProxyingB
 
     /**
      * <p>Constructs a new {@link AopProxyWriter} for the given parent {@link BeanDefinitionWriter} and starting interceptors types.</p>
-     * <p>
+     * 
      * <p>Additional {@link Interceptor} types can be added downstream with {@link #visitInterceptorBinding(AnnotationValue[])} .</p>
      *  @param parent             The parent {@link BeanDefinitionWriter}
      * @param settings           optional setting

File: context/src/main/java/io/micronaut/runtime/EmbeddedApplication.java
Patch:
@@ -28,7 +28,7 @@
  * <p>Applications that did not expose a port and address (messaging applications, CLI applications etc.
  * may wish to use this interface instead</p>
  *
- * @param <T>
+ * @param <T> EmbeddedApplication
  * @see io.micronaut.runtime.server.EmbeddedServer
  * @author Graeme Rocher
  * @since 1.0

File: context/src/main/java/io/micronaut/runtime/exceptions/ApplicationStartupException.java
Patch:
@@ -29,7 +29,7 @@ public class ApplicationStartupException extends RuntimeException {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: context/src/main/java/io/micronaut/scheduling/exceptions/TaskExecutionException.java
Patch:
@@ -42,7 +42,7 @@ public TaskExecutionException(String message) {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: context/src/main/java/io/micronaut/scheduling/instrument/InvocationInstrumenter.java
Patch:
@@ -130,7 +130,7 @@ public interface InvocationInstrumenter {
      * to be considered that all instrumentation will be done with this very same {@code invocationInstrumenter}
      * instance. This is especially useful when follow-up actions of a given task need to be registered, where a new
      * instrumenter, thus a new wrapped executor instance belongs to each task.
-     * <p/>
+     * <p>
      * The returned wrapped executor be of subtype {@link ExecutorService} or {@link ScheduledExecutorService} if the
      * input executor instance implemented those interfaces.
      *

File: core-reactive/src/main/java/io/micronaut/core/async/processor/SingleThreadedBufferingProcessor.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * <p>A Reactive streams {@link org.reactivestreams.Processor} designed to be used within a single thread and manage
  * back pressure state.</p>
- * <p>
+ *
  * <p>This processor only supports a single {@link Subscriber}</p>
  *
  * @param <T> The argument type

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -257,7 +257,7 @@ public static Map<String, Object> internMapOf(String key, Object value) {
      * Create a new immutable {@link Map} from an array of values.
      * String values must be sorted!
      *
-     * @param array The key,value array
+     * @param array The key, value array
      * @return The created map
      */
     @UsedByGeneratedCode

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -202,7 +202,7 @@ public List<AnnotationValue<?>> getStereotypes() {
      * <p>For example consider the following annotation definition:</p>
      *
      * <pre class="code">
-     * &#064;PropertySource({ @Property(name="one",value="1"), @Property(name="two", value="2")})
+     * &#064;PropertySource({ @Property(name = "one", value = "1"), @Property(name = "two", value = "2")})
      * public class MyBean {
      *        ...
      * }</pre>

File: core/src/main/java/io/micronaut/core/annotation/Introspected.java
Patch:
@@ -35,7 +35,7 @@
  * <p>If the classes you wish to introspect are already compiled then this annotation can be used on another class (doesn't matter which, but typically on a configuration class) to specify which existing compiled classes to produce {@link io.micronaut.core.beans.BeanIntrospection} instances for either through the {@link #classes()} method or the {@link #packages()} method. The latter uses compile time package scanning and for the moment is regarded as {@link Experimental}.</p>
  *
  * <pre class="code">
- * &#064;Introspected(classes=MyBean.class)
+ * &#064;Introspected(classes = MyBean.class)
  * public class MyConfiguration {
  *      ...
  * }</pre>
@@ -129,11 +129,11 @@
     /**
      * The annotation types that should be indexed for lookup via {@link io.micronaut.core.beans.BeanIntrospection#getIndexedProperties(Class)} or {@link io.micronaut.core.beans.BeanIntrospection#getIndexedProperty(Class, String)} if {@link IndexedAnnotation#member()} is specified.
      *
-     * <p>Property lookup indexing allows building indexes at compilation time for performing reverse property lookups. Consider for example a property with an annotation such as {@code @Column(name="foo_bar"}. To lookup the property by "foo_bar" you can specify:</p>
+     * <p>Property lookup indexing allows building indexes at compilation time for performing reverse property lookups. Consider for example a property with an annotation such as {@code @Column(name = "foo_bar"}. To lookup the property by "foo_bar" you can specify:</p>
      *
      * <pre class="code">
      * &#064;Introspected(
-     *   indexed = &#064;IndexedAnnotation(annotation=Column.class, member="name")
+     *   indexed = &#064;IndexedAnnotation(annotation = Column.class, member = "name")
      * )
      * public class MyBean {
      *      ...

File: core/src/main/java/io/micronaut/core/bind/ArgumentBinder.java
Patch:
@@ -24,13 +24,13 @@
 
 /**
  * <p>An interface capable of binding the value of an {@link io.micronaut.core.type.Argument} from a source</p>.
- * <p>
+ *
  * <p>The selection of an {@link ArgumentBinder} is done by the {@link ArgumentBinderRegistry}. Selection could
  * be based on type, annotation or other factors such as the request media type</p>
- * <p>
+ *
  * <p>Unlike {@link io.micronaut.core.convert.TypeConverter} instances binders can potentially handle complex
  * objects and typically work on conjunction with a {@link io.micronaut.core.convert.value.ConvertibleValues} instance</p>
- * <p>
+ *
  * <p>An {@link ArgumentBinder} can either be registered as a bean or by META-INF/services. In the case of the latter
  * it will be globally available at all times, whilst the former is only present when a {@code io.micronaut.context.BeanContext} is initialized</p>
  *

File: core/src/main/java/io/micronaut/core/bind/BeanPropertyBinder.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * <p>An interface that provides the ability to bind Maps and Java bean properties</p>.
- * <p>
+ *
  * <p>This class is designed specifically for binding of String based property data such as Form submissions and
  * dynamic binding of Java Properties files and should not be used beyond these two use cases.</p>
  *

File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java
Patch:
@@ -62,12 +62,12 @@ public interface ConversionContext extends AnnotationMetadataProvider, TypeVaria
     ArgumentConversionContext<String> STRING = ImmutableArgumentConversionContext.of(Argument.STRING);
 
     /**
-     * Constant for List<String> argument.
+     * Constant for {@code List<String>} argument.
      */
     ArgumentConversionContext<List<String>> LIST_OF_STRING = ImmutableArgumentConversionContext.of(Argument.LIST_OF_STRING);
 
     /**
-     * Constant for List<String> argument.
+     * Constant for {@code List<String>} argument.
      */
     ArgumentConversionContext<Map> MAP = ImmutableArgumentConversionContext.of(Argument.of(Map.class));
 

File: core/src/main/java/io/micronaut/core/convert/TypeConverter.java
Patch:
@@ -22,11 +22,11 @@
 
 /**
  * <p>A type converter for converting from one type to another.</p>
- * <p>
+ *
  * <p>Implementations should be stateless, simple and thread safe. Type converters are often best defined as Java lambdas.
  * You should NOT perform any overly complex, blocking or slow conversions in implementations of this interface.
  * </p>
- * <p>
+ *
  * <p>If dependency injection is required, carefully consider what you inject. Databases and I/O bound interfaces are not good candidates.
  * In addition, injecting dependencies that may trigger the evaluation of beans that depend on configuration will cause problems because
  * all type converters have not been registered yet.</p>

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -511,7 +511,7 @@ private static String nameFor(String prefix, @NonNull String propertyName) {
      * <ul>
      * <li>If the first or only character is Upper Case, it is made Lower Case
      * <li>UNLESS the second character is also Upper Case, when the String is
-     * returned unchanged <eul>.
+     * returned unchanged.
      * </ul>
      *
      * @param name The String to decapitalize
@@ -619,7 +619,7 @@ private static String separateCamelCase(String name, boolean lowerCase, char sep
 
     /**
      * Retrieves the extension of a file name.
-     * Ex: index.html -> html
+     * Ex: index.html -&gt; html
      *
      * @param filename The name of the file
      * @return The file extension
@@ -669,7 +669,7 @@ public static String camelCase(String str, boolean lowerCaseFirstLetter) {
 
     /**
      * Retrieves the fileName of a file without extension.
-     * Ex: index.html -> index
+     * Ex: index.html -&gt; index
      *
      * @param path The path of the file
      * @return The file name without extension

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -182,7 +182,7 @@ public class ClassUtils {
 
     /**
      * <p>Converts a URI to a class file reference to the class name</p>.
-     * <p>
+     *
      * <p>ie. ClassUtils.pathToClassName("foo/bar/MyClass.class") == "foo.bar.MyClass"</p>
      *
      * @param path The path name
@@ -208,7 +208,7 @@ public static boolean isPresent(String name, @Nullable ClassLoader classLoader)
     }
 
     /**
-     * Return whether the given class is a common type found in <tt>java.lang</tt> such as String or a primitive type.
+     * Return whether the given class is a common type found in {@code java.lang} such as String or a primitive type.
      *
      * @param type The type
      * @return True if it is
@@ -219,7 +219,7 @@ public static boolean isJavaLangType(Class type) {
     }
 
     /**
-     * Return whether the given class is a common type found in <tt>java.lang</tt> such as String or a primitive type.
+     * Return whether the given class is a common type found in {@code java.lang} such as String or a primitive type.
      *
      * @param typeName The type name
      * @return True if it is

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -111,7 +111,7 @@ public interface Argument<T> extends TypeInformation<T>, AnnotatedElement, Type
     Argument<Object> OBJECT_ARGUMENT = of(Object.class);
 
     /**
-     * Constant for List<String> argument.
+     * Constant for {@code List<String>} argument.
      */
     Argument<List<String>> LIST_OF_STRING = Argument.listOf(String.class);
 

File: core/src/main/java/io/micronaut/core/type/ArgumentCoercible.java
Patch:
@@ -20,10 +20,9 @@
 /**
  * An interface for types that can be represented as an {@link Argument}.
  *
- * @param <T> The argument type
+ * @param <T> The generic type
  * @since 3.0.0
  * @author graemerocher
- * @param <T> The generic type
  */
 public interface ArgumentCoercible<T> {
     /**

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -54,7 +54,7 @@ public static boolean isEmpty(@Nullable Map map) {
     /**
      * Null safe not empty check.
      *
-     * @param map The ,ap
+     * @param map The map
      * @return True if it is not null and not empty
      */
     public static boolean isNotEmpty(@Nullable Map map) {

File: core/src/main/java/io/micronaut/core/util/PathMatcher.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Interface for components that can match source strings against a specified pattern string.
- * <p/>
+ * <p>
  * Different implementations can support different pattern types, for example, Ant style path expressions, or
  * regular expressions, or other types of text based patterns.
  *

File: function/src/main/java/io/micronaut/function/FunctionBean.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * <p>An annotation applied to classes that should be exposed as functions. The class itself must implement an interface
- * from <tt>java.util.function</tt> such as {@link java.util.function.Consumer} to be exposed as a function.</p>
+ * from {@code java.util.function} such as {@link java.util.function.Consumer} to be exposed as a function.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: function/src/main/java/io/micronaut/function/LocalFunctionRegistry.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * <p>A registry of defined {@link FunctionBean} instances containing within the current running application.</p>
- * <p>
+ *
  * <p>This interface is designed to allow the location and interaction with non-remote functions</p>
  *
  * @author Graeme Rocher

File: function/src/main/java/io/micronaut/function/executor/FunctionExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * <p>Allows executing the function configured by {@link io.micronaut.function.LocalFunctionRegistry#FUNCTION_NAME}</p>.
- * <p>
+ *
  * <p>Or a named function</p>
  *
  * @param <I> input type

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -152,7 +152,7 @@ protected DefaultHttpClientBinderRegistry(ConversionService<?> conversionService
 
         if (KOTLIN_COROUTINES_SUPPORTED) {
             //Clients should do nothing with the continuation
-            byType.put(Argument.of(Continuation.class).typeHashCode(),  (context, uriContext, value, request) -> { });
+            byType.put(Argument.of(Continuation.class).typeHashCode(), (context, uriContext, value, request) -> { });
         }
 
         if (CollectionUtils.isNotEmpty(binders)) {

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/DiscoveryClientRoundRobinLoadBalancer.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * <p>A {@link io.micronaut.http.client.LoadBalancer} that uses the {@link DiscoveryClient} and a
  * {@link ServiceInstance} ID to automatically load balance between discovered clients in a non-blocking manner.</p>
- * <p>
+ *
  * <p>Note that the when {@link DiscoveryClient} caching is enabled then this load balancer may not always have the
  * latest server list from the {@link DiscoveryClient} (the default TTL is 30 seconds)</p>
  *

File: http-client/src/test/groovy/io/micronaut/http/client/JavaClient.java
Patch:
@@ -12,10 +12,10 @@
 @Client("/")
 public abstract class JavaClient {
 
-    @Get(value ="/get/simple", single = true)
+    @Get(value = "/get/simple", single = true)
     abstract Publisher<Void> simple();
 
-    @Get(value ="/test/redirect", single = true)
+    @Get(value = "/test/redirect", single = true)
     abstract Publisher<Void> redirect();
 
     public void subscribe(Publisher<Void> publisher) {

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/HeaderTest.java
Patch:
@@ -30,7 +30,7 @@ public class HeaderTest {
     @Test
     public void testSenderHeaders() throws Exception {
 
-        Map<String,Object> config =Collections.singletonMap(
+        Map<String, Object> config = Collections.singletonMap(
                 "pet.client.id", "11"
         );
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/PetClient.java
Patch:
@@ -30,7 +30,7 @@
  */
 // tag::class[]
 @Client("/pets")
-@Header(name="X-Pet-Client", value="${pet.client.id}")
+@Header(name = "X-Pet-Client", value = "${pet.client.id}")
 public interface PetClient extends PetOperations {
 
     @Override

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public class DefaultEventLoopGroupConfiguration implements EventLoopGroupConfigu
      * @param preferNativeTransport Whether native transport is to be preferred
      * @param executor              A named executor service to use (optional)
      * @param shutdownQuietPeriod   The shutdown quiet period
-     * @param shutdownTimeout       The shutdown timeout (must be >= shutdownQuietPeriod)
+     * @param shutdownTimeout       The shutdown timeout (must be &gt;= shutdownQuietPeriod)
      */
     @ConfigurationInject
     public DefaultEventLoopGroupConfiguration(

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EventLoopGroupConfiguration.java
Patch:
@@ -82,7 +82,7 @@ default Duration getShutdownQuietPeriod() {
     }
 
     /**
-     * @return The shutdown timeout (must be >= shutdownQuietPeriod)
+     * @return The shutdown timeout (must be &gt;= shutdownQuietPeriod)
      */
     default Duration getShutdownTimeout() {
         return Duration.ofSeconds(DEFAULT_SHUTDOWN_TIMEOUT);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -107,7 +107,7 @@ protected void encode(ChannelHandlerContext context, MutableHttpResponse<?> resp
 
             MediaTypeCodec defaultCodec = new TextPlainCodec(serverConfiguration.getDefaultCharset());
 
-            response = encodeBodyWithCodec(response, body, defaultCodec, responseMediaType,  context);
+            response = encodeBodyWithCodec(response, body, defaultCodec, responseMediaType, context);
         }
 
         if (response instanceof NettyMutableHttpResponse) {

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -382,7 +382,7 @@ public void setServerHeader(String serverHeader) {
     }
 
     /**
-     * Sets the maximum request size. Default value ({@value #DEFAULT_MAX_REQUEST_SIZE} => // 10MB)
+     * Sets the maximum request size. Default value ({@value #DEFAULT_MAX_REQUEST_SIZE} =&gt; // 10MB)
      *
      * @param maxRequestSize The max request size
      */
@@ -608,7 +608,7 @@ public void setLocation(File location) {
         }
 
         /**
-         * Sets the max file size. Default value ({@value #DEFAULT_MAX_FILE_SIZE} => 1MB).
+         * Sets the max file size. Default value ({@value #DEFAULT_MAX_FILE_SIZE} =&gt; 1MB).
          * @param maxFileSize The max file size
          */
         public void setMaxFileSize(@ReadableBytes long maxFileSize) {
@@ -787,7 +787,7 @@ public boolean isPortInHost() {
 
         /**
          * @param portInHost True if the host header supports a port
-         *                   appended with {@code :}. Default value ({@value #DEFAULT_PORT_IN_HOST}).
+         *                   appended with {@code :}. Default value ({@link #DEFAULT_PORT_IN_HOST}).
          */
         public void setPortInHost(boolean portInHost) {
             this.portInHost = portInHost;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/ErrorResponseProcessor.java
Patch:
@@ -31,7 +31,7 @@ public interface ErrorResponseProcessor<T> {
 
     /**
      * Modifies the http response representing the error. Callers of this
-     * method should return the response that was passed in {@param baseResponse},
+     * method should return the response that was passed in baseResponse parameter,
      * however that isn't required.
      *
      * Error response processors should not set the body or content type if

File: http/src/main/java/io/micronaut/http/HttpMessage.java
Patch:
@@ -47,7 +47,7 @@ public interface HttpMessage<B> extends MutableAttributeHolder {
 
     /**
      * <p>A {@link MutableConvertibleValues} of the attributes for this HTTP message.</p>
-     * <p>
+     *
      * <p>Attributes are designed for internal data sharing and hence are isolated from headers and parameters which are client supplied</p>
      *
      * @return The attributes of the message

File: http/src/main/java/io/micronaut/http/annotation/Consumes.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * <p>An annotation to indicate the {@link io.micronaut.http.MediaType}s produced by a particular component.</p>
- * <p>
+ *
  * <p>Generally with controllers one can use the {@code consumes} attribute of the {@code Controller} annotation,
  * however this annotation is more generic and applies to any component</p>
  *
@@ -49,7 +49,7 @@
 
     /**
      * <p>Applies to clients that return reactive types.</p>
-     * <p>
+     *
      * <p>This member indicates whether the response handling should stream or wait until
      * the full response is read. Normally this annotation is unnecessary unless the declared type doesn't indicate
      * how many items are emitted.</p>

File: http/src/main/java/io/micronaut/http/annotation/Controller.java
Patch:
@@ -43,7 +43,7 @@
 
     /**
      * <p>This attribute returns the base URI of the controller</p>
-     * <p>
+     *
      * <p>A value of {@code /} can be used to map a controller
      * to the root URI.</p>
      *
@@ -68,7 +68,7 @@
      * Allows specifying an alternate port to run the controller on. Setting this member will
      * cause.
      *
-     * <p>The member is defined as a string to allow resolving the port value from configuration. For example: {@code member="${my.port.number}"}</p>
+     * <p>The member is defined as a string to allow resolving the port value from configuration. For example: {@code member = "${my.port.number}"}</p>
      * @return The port to use.
      */
     String port() default "";

File: http/src/main/java/io/micronaut/http/annotation/Filter.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * <p>An annotation that can be applied to classes that implement {@link io.micronaut.http.filter.HttpFilter} to
  * specify the patterns.</p>
- * <p>
+ *
  * <p>Used as an alternative to applying filters manually via the {code Router} API</p>
  *
  * @author Graeme Rocher

File: http/src/main/java/io/micronaut/http/annotation/Produces.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * <p>An annotation to indicate the {@link MediaType}s produced by a particular component.</p>
- * <p>
+ *
  * <p>Generally with controllers one can use the {@code produces} attribute of the {@code Controller} annotation,
  * however this annotation is more generic and applies to any component</p>
  *
@@ -51,10 +51,10 @@
      * <p>In the case of reactive types this member indicates whether only a single result is returned. Normally this
      * annotation is unnecessary unless the declared type doesn't indicate how many items are emitted.</p>
      *
-     * <p>For JSON with single=false if an Reactive streams Publisher type is returned these will be automatically
+     * <p>For JSON with single = false if an Reactive streams Publisher type is returned these will be automatically
      * wrapped in an Array type to ensure valid JSON is returned.</p>
      *
-     * <p>If single=true it is expected that only a single result will be emitted and the result will not be wrapped
+     * <p>If single = true it is expected that only a single result will be emitted and the result will not be wrapped
      * in a JSON array.</p>
      *
      * @return True if only a single result is emitted

File: http/src/main/java/io/micronaut/http/filter/FilterChain.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * <p>A non-blocking and thread-safe filter chain. Consumers should call {@link #proceed(HttpRequest)} to continue
  * with the request or return an alternative {@link HttpResponse} {@link Publisher}.</p>
- * <p>
+ *
  * <p>The context instance itself can be passed to other threads as necessary if blocking operations are required
  * to implement the {@link HttpFilter}</p>
  */

File: http/src/main/java/io/micronaut/http/filter/ServerFilterChain.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * <p>A non-blocking and thread-safe filter chain. Consumers should call {@link #proceed(HttpRequest)} to continue with
  * the request or return an alternative {@link io.micronaut.http.HttpResponse} {@link Publisher}.</p>
- * <p>
+ *
  * <p>The context instance itself can be passed to other threads as necessary if blocking operations are required to
  * implement the {@link HttpFilter}</p>
  */

File: http/src/main/java/io/micronaut/http/hateoas/Link.java
Patch:
@@ -23,8 +23,8 @@
 
 /**
  * <p>Interface for a hateoas link.</p>
- * <p>
- * <p>See https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5</p>
+ *
+ * <p>See <a href="https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5">this</a></p>
  *
  * @author Graeme Rocher
  * @since 1.1

File: http/src/main/java/io/micronaut/http/multipart/StreamingFileUpload.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * <p>Represents a part of a {@link io.micronaut.http.MediaType#MULTIPART_FORM_DATA} request.</p>
  *
- * <p>The <tt>StreamingFileUpload</tt> may be incomplete when first received, in which case the consumer can subscribe
+ * <p>The {@code StreamingFileUpload} may be incomplete when first received, in which case the consumer can subscribe
  * to the file upload to process the data a chunk at a time.</p>
  *
  * <p>The {@link #transferTo(String)} method can be used whether the upload is complete or not. If it is not complete
@@ -44,7 +44,7 @@ public interface StreamingFileUpload extends FileUpload, Publisher<PartData> {
      * <p>This method will return a no-op {@link Publisher} if called multiple times for the same location</p>
      *
      * @param location the name of the file to which the stream will be written. The file is created relative to
-     *                 the location as specified in the <tt>MultipartConfiguration</tt>
+     *                 the location as specified in the {@code MultipartConfiguration}
      * @return A {@link Publisher} that outputs whether the transfer was successful
      * @deprecated Use {@link #transferTo(File)} or {@link #transferTo(OutputStream)} instead.
      */

File: http/src/main/java/io/micronaut/http/uri/QueryStringDecoder.java
Patch:
@@ -40,7 +40,7 @@
  * </pre>
  *
  * This decoder can also decode the content of an HTTP POST request whose
- * content type is <tt>application/x-www-form-urlencoded</tt>:
+ * content type is {@code application/x-www-form-urlencoded}:
  * <pre>
  * {@link QueryStringDecoder} decoder = new {@link QueryStringDecoder}("recipient=world&x=1;y=2", false);
  * ...

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -35,9 +35,9 @@
 import java.util.regex.Pattern;
 
 /**
- * <p>A Fast Implementation of URI Template specification. See https://tools.ietf.org/html/rfc6570 and
- * https://medialize.github.io/URI.js/uri-template.html.</p>
- * <p>
+ * <p>A Fast Implementation of URI Template specification. See <a href="https://tools.ietf.org/html/rfc6570">rfc6570</a> and
+ * <a href="https://medialize.github.io/URI.js/uri-template.html">URI.js</a>.</p>
+ *
  * <p>Note: this class has a natural ordering that is inconsistent with equals.</p>
  *
  * @author Graeme Rocher

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/scan/Attribute.java
Patch:
@@ -38,7 +38,7 @@ class Attribute {
     byte[] value;
 
     /**
-     * The next attribute in this attribute list. May be <tt>null</tt>.
+     * The next attribute in this attribute list. May be {@code null}.
      */
     Attribute next;
 
@@ -54,7 +54,7 @@ protected Attribute(final String type) {
     /**
      * Reads a {@link #type type} attribute. This method must return a
      * <i>new</i> {@link Attribute} object, of type {@link #type type},
-     * corresponding to the <tt>len</tt> bytes starting at the given offset, in
+     * corresponding to the {@code len} bytes starting at the given offset, in
      * the given class reader.
      *
      * @param cr      the class that contains the attribute to be read.
@@ -71,7 +71,7 @@ protected Attribute(final String type) {
      *                is not a code attribute. The 6 attribute header bytes,
      *                containing the type and the length of the attribute, are not
      *                taken into account here.
-     * @param labels  the labels of the method's code, or <tt>null</tt> if the
+     * @param labels  the labels of the method's code, or {@code null} if the
      *                attribute to be read is not a code attribute.
      * @return a <i>new</i> {@link Attribute} object corresponding to the given
      * bytes.

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/IntroductionVisitor.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.inject.ast.Element;
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MethodElement;
-import io.micronaut.inject.visitor.TypeElementVisitor;
-import io.micronaut.inject.visitor.VisitorContext;
 
 import java.util.ArrayList;
 import java.util.List;

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/TestInjectVisitor.java
Patch:
@@ -16,12 +16,11 @@
 package io.micronaut.inject.visitor;
 
 import io.micronaut.core.annotation.AnnotationUtil;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.Element;
+import io.micronaut.inject.ast.EnumConstantElement;
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MethodElement;
-import jakarta.inject.Inject;
 
 import java.util.*;
 

File: inject-java-test/src/main/java/io/micronaut/annotation/processing/test/JavaFileObjects.java
Patch:
@@ -51,7 +51,7 @@ static JavaFileObject forSourceString(String fullyQualifiedName, String source)
         if (fullyQualifiedName.startsWith("package ")) {
             throw new IllegalArgumentException(
                     String.format("fullyQualifiedName starts with \"package\" (%s). Did you forget to "
-                            + "specify the name and specify just the source text?",  fullyQualifiedName));
+                            + "specify the name and specify just the source text?", fullyQualifiedName));
         }
         return new StringSourceJavaFileObject(fullyQualifiedName, Objects.requireNonNull(source));
     }

File: inject-java-test/src/main/java/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -169,7 +169,7 @@ public Iterable<? extends Element> parseLines(String className, String... lines)
     }
 
     /**
-     * Parses {@code sources} into {@code CompilationUnitTree} units. This method
+     * Parses {@code sources} into {@code com.sun.source.tree.CompilationUnitTree} units. This method
      * <b>does not</b> compile the sources.
      *
      * @param sources The sources
@@ -219,7 +219,7 @@ public JavacTask getJavacTask(JavaFileObject... sources) {
     }
 
     /**
-     * Parses {@code sources} into {@code CompilationUnitTree} units. This method
+     * Parses {@code sources} into {@code com.sun.source.tree.CompilationUnitTree} units. This method
      * <b>does not</b> compile the sources.
      *
      * @param className The class name
@@ -250,7 +250,7 @@ public Iterable<? extends JavaFileObject> generate(String className, String code
     }
 
     /**
-     * Parses {@code sources} into {@code CompilationUnitTree} units. This method
+     * Parses {@code sources} into {@code com.sun.source.tree.CompilationUnitTree} units. This method
      * <b>does not</b> compile the sources.
      *
      * @param sources The sources

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -206,7 +206,7 @@ public Set<String> getSupportedOptions() {
                 .stream()
                 .filter(tev -> tev.getClass().isAnnotationPresent(SupportedOptions.class))
                 .map(TypeElementVisitor::getClass)
-                .map(cls -> cls.getAnnotation(SupportedOptions.class))
+                .map(cls -> (SupportedOptions) cls.getAnnotation(SupportedOptions.class))
                 .flatMap((SupportedOptions supportedOptions) -> Arrays.stream(supportedOptions.value()));
         return Stream.of(baseOption, visitorsAnnotationsOptions, visitorsOptions)
                 .flatMap(Stream::sequential)

File: inject-java/src/test/groovy/io/micronaut/aop/introduction/ListenerAdviceInterceptor.java
Patch:
@@ -28,7 +28,7 @@
  * @since 1.0
  */
 @Singleton
-public class ListenerAdviceInterceptor implements MethodInterceptor<Object,Object> {
+public class ListenerAdviceInterceptor implements MethodInterceptor<Object, Object> {
 
     private Set<Object> recievedMessages = new HashSet<>();
 

File: inject-java/src/test/groovy/io/micronaut/aop/introduction/StubIntroducer.java
Patch:
@@ -28,7 +28,7 @@
  * @since 1.0
  */
 @Singleton
-public class StubIntroducer implements MethodInterceptor<Object,Object> {
+public class StubIntroducer implements MethodInterceptor<Object, Object> {
 
     public static final int POSITION = 0;
 

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/MyConfig.java
Patch:
@@ -34,7 +34,7 @@ public class MyConfig {
     List<URL> urlList;
     List<URL> urlList2;
     List<URL> emptyList;
-    Map<String,Integer> flags;
+    Map<String, Integer> flags;
     Optional<URL> url;
     Optional<URL> anotherUrl = Optional.empty();
     Inner inner;

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/Neo4jProperties.java
Patch:
@@ -24,10 +24,10 @@ class Neo4jProperties {
     protected java.net.URI uri;
 
     @ConfigurationBuilder(
-            prefixes="with",
-            allowZeroArgs=true
+            prefixes = "with",
+            allowZeroArgs = true
     )
     Config.ConfigBuilder options = Config.build();
 
 
-}
\ No newline at end of file
+}

File: inject-java/src/test/groovy/io/micronaut/inject/env/B.java
Patch:
@@ -21,7 +21,7 @@
 import jakarta.inject.Singleton;
 
 @PropertySource({
-        @Property(name="x", value="${from.config}")
+        @Property(name = "x", value = "${from.config}")
 })
 @Singleton
 public class B {

File: inject-java/src/test/groovy/io/micronaut/inject/factory/multiple/AFactory.java
Patch:
@@ -23,7 +23,7 @@
 class AFactory {
 
     @Bean
-    @Requires(beans=X.class, missingBeans=Y.class)
+    @Requires(beans = X.class, missingBeans = Y.class)
     A a(X x) {
         return new A();
     }

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/MyConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public class MyConfiguration {
     List<URL> urlList;
     List<URL> urlList2;
     List<URL> emptyList;
-    Map<String,Integer> flags;
+    Map<String, Integer> flags;
     Optional<URL> url;
     Optional<URL> anotherUrl = Optional.empty();
     Inner inner;

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/bytypespec/Bean.java
Patch:
@@ -25,7 +25,7 @@
 class Bean {
     List<Foo> foos;
 
-    public Bean(@Type({One.class,Two.class}) Foo[] foos) {
+    public Bean(@Type({One.class, Two.class}) Foo[] foos) {
         this.foos = Arrays.asList(foos);
     }
 

File: inject/src/main/java/io/micronaut/context/ApplicationContext.java
Patch:
@@ -33,10 +33,10 @@
 /**
  * <p>An application context extends a {@link BeanContext} and adds the concepts of configuration, environments and
  *   runtimes.</p>
- * <p>
+ *
  * <p>The {@link ApplicationContext} is the main entry point for starting and running Micronaut applications. It
  * can be thought of as a container object for all dependency injected objects.</p>
- * <p>
+ *
  * <p>The {@link ApplicationContext} can be started via the {@link #run()} method. For example:</p>
  *
  * <pre class="code">

File: inject/src/main/java/io/micronaut/context/BeanProvider.java
Patch:
@@ -116,7 +116,7 @@ default Stream<T> stream() {
     }
 
     /**
-     * <p>Determines if more than one bean matches the specified type and qualifiers.</p>>
+     * <p>Determines if more than one bean matches the specified type and qualifiers.</p>
      *
      * @since 3.0.0
      * @return <code>true</code> if only one bean matches.

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -186,7 +186,6 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
     protected final AtomicBoolean terminating = new AtomicBoolean(false);
 
     final Map<BeanIdentifier, BeanRegistration<?>> singlesInCreation = new ConcurrentHashMap<>(5);
-
     Set<Map.Entry<Class<?>, List<BeanInitializedEventListener>>> beanInitializedEventListeners;
 
     private final SingletonScope singletonScope = new SingletonScope();

File: inject/src/main/java/io/micronaut/context/MessageSourceUtils.java
Patch:
@@ -28,7 +28,7 @@
 public class MessageSourceUtils {
     /**
      * Returns a Map whose keys are the index of the varargs.
-     * E.g. for "Sergio", "John" the map ["0" => "Sergio", "1" => "John"] is returned
+     * E.g. for "Sergio", "John" the map ["0" =&gt; "Sergio", "1" =&gt; "John"] is returned
      * @param args variables
      * @return The variables map.
      */

File: inject/src/main/java/io/micronaut/context/Qualifier.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * <p>Used to qualify which bean to select in the case of multiple possible options.</p>
- * <p>
+ *
  * <p>NOTE: When implementing a custom Qualifier you MUST implement {@link Object#hashCode()} and
  * {@link Object#equals(Object)} so that the qualifier can be used in comparisons and equality checks</p>
  *

File: inject/src/main/java/io/micronaut/context/annotation/AliasFor.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * <p>Allows specifying an annotation member alias. In other words, a value of an annotation member can be used to
  * represent the value of another annotation's member or a another member within the same annotation.</p>
- * <p>
+ *
  * <p>The representation is constructed via the {@link io.micronaut.core.annotation.AnnotationMetadata} interface</p>
  *
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -45,7 +45,7 @@
     /**
      * <p>The default is for {@link ConfigurationBuilder} to look for public JavaBean-style setters. Many APIs however
      * use a builder-style or other style to for constructing configuration.</p>
-     * <p>
+     *
      * <p>This method allows overriding this behaviour. For example if the builder you are authoring for prefixes write
      * operations with the word "with" by setting the value of this attribute to "with" you can process methods such
      * as {@code withDebug(true)}</p>
@@ -58,7 +58,7 @@
     /**
      * <p>When this annotation is used, by default the name of the field or method is not taken into account when
      * retrieving configuration properties.</p>
-     * <p>
+     *
      * <p>This method allows overriding this behaviour. For example if the annotation is placed on a field, you can
      * change the prefix for which configuration values will be searched to populate the field.</p>
      *
@@ -70,7 +70,7 @@
     /**
      * <p>Some APIs allow zero argument setters to set boolean flags such as {@code setDebug()}. These by default are
      * not processed unless the value of this annotation is set to true.</p>
-     * <p>
+     *
      * <p>Note that this attribute works in conjunction with {@link #prefixes()} to allow other styles such as
      * {@code withDebug()}</p>
      *

File: inject/src/main/java/io/micronaut/context/annotation/Context.java
Patch:
@@ -26,13 +26,13 @@
  * <p>Context scope indicates that the classes life cycle is bound to that of the
  * {@link io.micronaut.context.BeanContext} and it should be initialized and shutdown during startup and shutdown of
  * the underlying {@link io.micronaut.context.BeanContext}.</p>
- * <p>
+ *
  * <p>Micronaut by default treats all {@link Singleton} bean definitions as lazy and will only load them on demand.  By
  * annotating a bean with @Context you can ensure that the bean is loaded at the same time as the context.</p>
- * <p>
+ *
  * <p>WARNING: This annotation should be used sparingly as Micronaut is designed in such a way as to encourage minimal
  * bean creation during startup.</p>
- * <p>
+ *
  * <p>NOTE: This annotation can also be used as a meta annotation</p>
  *
  * @see Singleton @Singleton

File: inject/src/main/java/io/micronaut/context/annotation/EachBean.java
Patch:
@@ -27,17 +27,17 @@
 /**
  * <p>This annotation allows driving the production of {@link Bean} definitions from presence of other bean definitions.
  * Typically used in conjunction with {@link EachProperty}</p>
- * <p>
+ *
  * <p>For example:</p>
  * <pre><code>
  *  {@literal @}EachProperty("foo.bar")
  *   public class ExampleConfiguration {
  *   }
  * </code></pre>
- * <p>
+ *
  * <p>In the above example a new {@code ExampleConfiguration} bean will be created for each item under the
  * {@code foo.bar} key in application configuration</p>
- * <p>
+ *
  * <p>One can then drive the configuration of other beans with the same annotation:</p>
  * <pre><code>
  *  {@literal @}EachBean(ExampleConfiguration)

File: inject/src/main/java/io/micronaut/context/annotation/Executable.java
Patch:
@@ -26,9 +26,9 @@
 /**
  * <p>Annotation applied to the method or type indicating that a {@link io.micronaut.inject.ExecutableMethod} should be
  * produced for this method.</p>
- * <p>
+ *
  * <p>When applied to a type all public methods will be considered executable and the necessary metadata produced</p>
- * <p>
+ *
  * <p>This annotation can be used as a meta annotation</p>
  *
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/context/annotation/Parameter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * <p>Specifies that an argument to a bean constructor is user provided and a
  * {@link io.micronaut.inject.ParametrizedBeanFactory} should be generated.</p>
- * <p>
+ *
  * <p>Should be applied only to constructor arguments and {@link Bean} factory methods</p>
  *
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/context/annotation/PropertySource.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * <p>An annotation that can be used on either the main class or a test to provide additional hard coded
  * property values to the {@link io.micronaut.context.env.Environment}.</p>
- * <p>
+ *
  * <p>These properties are added at a high priority level and override all properties except CLI properties</p>
  *
  * @author graemerocher

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * <p>The current application environment. The environment represents the loaded configuration of the application
  * for a current list of active environment names.</p>
- * <p>
+ *
  * <p>The active environment names can be obtained from the {@link #getActiveNames()} method and are established from one
  * of the following sources:
  * </p>

File: inject/src/main/java/io/micronaut/context/event/ApplicationEventPublisher.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances.</p>
- * <p>
+ *
  * <p>Note that this interface is designed for application level, non-blocking synchronous events for decoupling code
  * and is not a replacement for a messaging system</p>
  *

File: inject/src/main/java/io/micronaut/context/event/BeanCreatedEventListener.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * <p>An event listener that is triggered each time a bean is created.</p>
- * <p>
+ *
  * <p>Allows customization of the created beans.</p>
  *
  * @param <T> The event type

File: inject/src/main/java/io/micronaut/context/event/BeanDestroyedEvent.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * <p>An event fired when a bean has been destroyed and all {@link jakarta.annotation.PreDestroy} methods have been invoked.</p>
- * <p>
  *
  * @param <T> The event type
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/context/event/BeanDestroyedEventListener.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * <p>An event listener that is triggered after a bean is destroyed.</p>
- * <p>
+ *
  * <p>Allows customization of the bean destruction.</p>
  *
  * @param <T> The event type

File: inject/src/main/java/io/micronaut/context/event/BeanInitializedEventListener.java
Patch:
@@ -23,7 +23,7 @@
  * <p>Allows hooking into bean instantiation at the point prior to when {@link jakarta.annotation.PostConstruct}
  * initialization hooks have been called and in the case of bean {@link io.micronaut.context.BeanProvider} instances the
  * {@link io.micronaut.context.BeanProvider#get()} method has not yet been invoked.</p>
- * <p>
+ *
  * <p>This allows (for example) customization of bean properties prior to any initialization logic or factory logic.</p>
  *
  * @param <T> The event type

File: inject/src/main/java/io/micronaut/context/event/BeanInitializingEvent.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * <p>An event fired when a bean's properties have been populated but initialization hooks (such as
  * {@link jakarta.annotation.PostConstruct} methods) have not yet been triggered.</p>
- * <p>
+ *
  * <p>To listen to an event for a fully initialized bean see {@link BeanCreatedEvent}</p>
  *
  * @param <T> The event type

File: inject/src/main/java/io/micronaut/context/event/BeanPreDestroyEvent.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * <p>An event fired when a bean is about to be destroyed but before any {@link jakarta.annotation.PreDestroy} methods are invoked..</p>
- * <p>
+ *
  *
  * @param <T> The event type
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/context/event/BeanPreDestroyEventListener.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * <p>An event listener that is triggered before a bean is destroyed.</p>
- * <p>
+ *
  * <p>Allows customization of the bean destruction.</p>
  *
  * @param <T> The event type

File: inject/src/main/java/io/micronaut/context/processor/AnnotationProcessor.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * <p>An annotation processor is an object that processes the presence if a given annotation.</p>
- * <p>
+ *
  * <p>The {@link #process(BeanDefinition, Object)} method returns void since a processor is not able to mutate the
  * object itself or return an alternative instance, instead the design of a processor is to react to the rep</p>
  *

File: inject/src/main/java/io/micronaut/context/processor/ExecutableMethodProcessor.java
Patch:
@@ -22,10 +22,10 @@
 
 /**
  * <p>A class capable of processing an {@link io.micronaut.inject.ExecutableMethod} instances.</p>
- * <p>
+ *
  * <p>The use case here is framework components that need to react to the presence of an annotation. For example given
  * the following annotation:</p>
- * <p>
+ *
  * <pre class="code">
  * &#064;Executable
  * &#064;Retention(RUNTIME)
@@ -34,7 +34,7 @@
  * String cron()
  * }
  * </pre>
- * <p>
+ *
  * <p>One could write a {@code ExecutableMethodProcessor} that processed all methods annotated with {@literal @}Scheduled:</p>
  *
  * <pre class="code">

File: inject/src/main/java/io/micronaut/inject/ExecutionHandle.java
Patch:
@@ -27,7 +27,7 @@
  * <p>Represents a handle to an executable object. Differs from {@link io.micronaut.core.type.Executable} in that the
  * first argument to {@link #invoke(Object...)} is not the object instead the object is typically held within the
  * handle itself.</p>
- * <p>
+ *
  * <p>Executable handles are also applicable to constructors and static methods</p>
  *
  * @param <T> The target type

File: inject/src/main/java/io/micronaut/inject/ast/ClassElement.java
Patch:
@@ -383,7 +383,7 @@ default ClassElement withBoundGenericTypes(@NonNull List<? extends ClassElement>
      * {@code null} has special meaning here. Returning {@code null} from a fold operation will try to make the
      * surrounding type a raw type. For example, for {@code Map<String, Object>}, returning {@code null} for the fold
      * on {@code Object} will lead to the parameterized {@code Map<String, null>} type being replaced by {@code Map}.
-     * <p>
+     * </p>
      *
      * <p>This also means that this method may return {@code null} if the top-level fold operation returned {@code null}.</p>
      *

File: inject/src/main/java/io/micronaut/inject/beans/AbstractInitializableBeanIntrospection.java
Patch:
@@ -163,7 +163,7 @@ protected final RuntimeException unknownDispatchAtIndexException(int index) {
 
     /**
      * Get all the bean properties annotated for the given type.
-     * Nullable result method version of {@see getIndexedProperty}.
+     * Nullable result method version of {@link #getIndexedProperty(Class, String)}.
      *
      * @param annotationType  The annotation type
      * @param annotationValue The annotation value

File: inject/src/main/java/io/micronaut/inject/qualifiers/Qualifiers.java
Patch:
@@ -153,8 +153,8 @@ public static <T> Qualifier<T> byAnnotation(AnnotationMetadata metadata, Class<?
      * circumstances:</p>
      *
      * <ul>
-     * <li>If the <tt>type</tt> parameter is {@link Named} then the value of the {@link Named} annotation within the metadata is used to match the candidate by name</li>
-     * <li>If the <tt>type</tt> parameter is {@link Type} then the value of the {@link Type} annotation is used to match the candidate by type</li>
+     * <li>If the {@code type} parameter is {@link Named} then the value of the {@link Named} annotation within the metadata is used to match the candidate by name</li>
+     * <li>If the {@code type} parameter is {@link Type} then the value of the {@link Type} annotation is used to match the candidate by type</li>
      * </ul>
      *
      * @param metadata The metadata

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -140,9 +140,9 @@
 
 /**
  * <p>Responsible for building {@link BeanDefinition} instances at compile time. Uses ASM build the class definition.</p>
- * <p>
+ *
  * <p>Should be used from AST frameworks to build bean definitions from source code data.</p>
- * <p>
+ *
  * <p>For example:</p>
  *
  * <pre>
@@ -3536,7 +3536,7 @@ private boolean isInterceptedLifeCycleByType(AnnotationMetadata annotationMetada
             final Element originatingElement = getOriginatingElements()[0];
             final boolean isFactoryMethod = (originatingElement instanceof MethodElement && !(originatingElement instanceof ConstructorElement));
             final boolean isProxyTarget = annotationMetadata.booleanValue(AnnotationUtil.ANN_AROUND, "proxyTarget").orElse(false) || isFactoryMethod;
-            // for beans that are @Around(proxyTarget=false) only the generated AOP impl should be intercepted
+            // for beans that are @Around(proxyTarget = false) only the generated AOP impl should be intercepted
             final boolean isAopType = StringUtils.isNotEmpty(interceptedType);
             final boolean isConstructorInterceptionCandidate = (isProxyTarget && !isAopType) || (isAopType && !isProxyTarget);
             final boolean hasAroundConstruct;

File: jackson-core/src/main/java/io/micronaut/jackson/core/env/EnvJsonPropertySourceLoader.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Optional;
 
 /**
- * <p>Reads properties from JSON stored in the environment variables <tt>SPRING_APPLICATION_JSON</tt> or <tt>MICRONAUT_APPLICATION_JSON</tt>.</p>
+ * <p>Reads properties from JSON stored in the environment variables {@code SPRING_APPLICATION_JSON} or {@code MICRONAUT_APPLICATION_JSON}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -58,7 +58,7 @@ protected Optional<InputStream> readInput(ResourceLoader resourceLoader, String
 
     /**
      * @return The JSON as input stream stored in the environment variables
-     * <tt>SPRING_APPLICATION_JSON</tt> or <tt>MICRONAUT_APPLICATION_JSON</tt>.
+     * {@code SPRING_APPLICATION_JSON} or {@code MICRONAUT_APPLICATION_JSON}.
      */
     protected Optional<InputStream> getEnvValueAsStream() {
         String v = getEnvValue();
@@ -72,7 +72,7 @@ protected Optional<InputStream> getEnvValueAsStream() {
 
     /**
      * @return The JSON stored in the environment variables
-     * <tt>SPRING_APPLICATION_JSON</tt> or <tt>MICRONAUT_APPLICATION_JSON</tt>.
+     * {@code SPRING_APPLICATION_JSON} or {@code MICRONAUT_APPLICATION_JSON}.
      */
     protected String getEnvValue() {
         String v = CachedEnvironment.getenv(SPRING_APPLICATION_JSON);

File: jackson-core/src/main/java/io/micronaut/jackson/core/env/JsonPropertySourceLoader.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Set;
 
 /**
- * <p>A {@link io.micronaut.context.env.PropertySourceLoader} that reads <tt>application.json</tt> files if they exist.</p>
+ * <p>A {@link io.micronaut.context.env.PropertySourceLoader} that reads {@code application.json} files if they exist.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: jackson-core/src/main/java/io/micronaut/jackson/core/tree/JsonNodeTreeCodec.java
Patch:
@@ -66,6 +66,7 @@ public JsonNodeTreeCodec withConfig(JsonStreamConfig config) {
      *
      * @param p The stream to parse.
      * @return The parsed json node.
+     * @throws IOException IOException
      */
     public JsonNode readTree(JsonParser p) throws IOException {
         switch (p.hasCurrentToken() ? p.currentToken() : p.nextToken()) {
@@ -120,6 +121,7 @@ public JsonNode readTree(JsonParser p) throws IOException {
      *
      * @param generator The output json stream.
      * @param tree      The node to write.
+     * @throws IOException IOException
      */
     public void writeTree(JsonGenerator generator, JsonNode tree) throws IOException {
         if (tree.isObject()) {

File: jackson-core/src/main/java/io/micronaut/jackson/core/tree/JsonStreamTransfer.java
Patch:
@@ -39,6 +39,7 @@ private JsonStreamTransfer() {
      * @param from   Parser to transfer data from.
      * @param to     Generator to transfer data to.
      * @param config Configuration to use for copying.
+     * @throws IOException IOException
      */
     public static void transferNext(JsonParser from, JsonGenerator to, JsonStreamConfig config) throws IOException {
         from.nextToken();
@@ -51,6 +52,7 @@ public static void transferNext(JsonParser from, JsonGenerator to, JsonStreamCon
      * @param from   Parser to transfer data from.
      * @param to     Generator to transfer data to.
      * @param config Configuration to use for copying.
+     * @throws IOException IOException
      */
     public static void transfer(JsonParser from, JsonGenerator to, JsonStreamConfig config) throws IOException {
         if (!from.hasCurrentToken()) {
@@ -67,6 +69,7 @@ public static void transfer(JsonParser from, JsonGenerator to, JsonStreamConfig
      * @param from   Parser to transfer data from.
      * @param to     Generator to transfer data to.
      * @param config Configuration to use for copying.
+     * @throws IOException IOException
      */
     public static void transferCurrentToken(
             JsonParser from,

File: jackson-databind/src/main/java/io/micronaut/jackson/env/JsonPropertySourceLoader.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Set;
 
 /**
- * <p>A {@link io.micronaut.context.env.PropertySourceLoader} that reads <tt>application.json</tt> files if they exist.</p>
+ * <p>A {@link io.micronaut.context.env.PropertySourceLoader} that reads {@code application.json} files if they exist.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: jackson-databind/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -671,7 +671,7 @@ private class VirtualSetter extends SettableBeanProperty {
         final BeanProperty beanProperty;
         final TypeResolutionContext typeResolutionContext;
 
-        VirtualSetter(TypeResolutionContext typeResolutionContext, TypeFactory typeFactory, BeanProperty<?,?> beanProperty, String propertyName, JsonDeserializer<Object> valueDeser) {
+        VirtualSetter(TypeResolutionContext typeResolutionContext, TypeFactory typeFactory, BeanProperty<?, ?> beanProperty, String propertyName, JsonDeserializer<Object> valueDeser) {
             super(
                     new PropertyName(propertyName),
                     newType(beanProperty.asArgument(), typeFactory),

File: management/src/main/java/io/micronaut/management/endpoint/beans/impl/DefaultBeanDefinitionData.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * The default {@link BeanDefinitionData} implementation. Returns a {@link Map} with
  * 3 keys; "dependencies": A list of class names the bean depends on, "scope": The
- * scope of the bean {@link javax.inject.Scope}, "type": The bean class name.
+ * scope of the bean {@link jakarta.inject.Scope}, "type": The bean class name.
  *
  * @author James Kleeh
  * @since 1.0

File: management/src/main/java/io/micronaut/management/health/indicator/diskspace/DiskSpaceIndicatorConfiguration.java
Patch:
@@ -91,7 +91,7 @@ public long getThreshold() {
     }
 
     /**
-     * Default value ({@value #DEFAULT_THRESHOLD} => 10MB).
+     * Default value ({@value #DEFAULT_THRESHOLD} =&gt; 10MB).
      * @param threshold Set the threshold
      */
     protected void setThreshold(@ReadableBytes long threshold) {

File: management/src/main/java/io/micronaut/management/health/indicator/service/ServiceReadyHealthIndicator.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * <p>A {@link io.micronaut.management.health.indicator.HealthIndicator} that signals when the service is ready to
- * service requests.</>
+ * service requests.</p>
  *
  * @author Pavol Gressa
  * @since 2.1

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageHeaders.java
Patch:
@@ -28,8 +28,8 @@
  *
  * <pre><code>
  *{@literal @}MessageHeaders({
- *     {@literal @}Header(name="Content-type",value="application/octet-stream"),
- *     {@literal @}Header(name="Content-length",value="2048")
+ *     {@literal @}Header(name = "Content-type", value = "application/octet-stream"),
+ *     {@literal @}Header(name = "Content-length", value = "2048")
  * })
  * </code></pre>
  *

File: router/src/main/java/io/micronaut/web/router/DefaultRouteBuilder.java
Patch:
@@ -394,7 +394,7 @@ private UriRoute buildRoute(String httpMethodName, HttpMethod httpMethod, String
     }
 
     private UriRoute buildBeanRoute(HttpMethod httpMethod, String uri, BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> method) {
-        return buildBeanRoute(httpMethod.name(), httpMethod, uri, beanDefinition,  method);
+        return buildBeanRoute(httpMethod.name(), httpMethod, uri, beanDefinition, method);
     }
 
     /**

File: router/src/main/java/io/micronaut/web/router/MethodBasedRouteMatch.java
Patch:
@@ -30,8 +30,8 @@
 public interface MethodBasedRouteMatch<T, R> extends RouteMatch<R>, MethodExecutionHandle<T, R> {
 
     /**
-     * <p>Returns the required arguments for this RouteMatch<./p>
-     * <p>
+     * <p>Returns the required arguments for this RouteMatch.</p>
+     *
      * <p>Note that this is not the save as {@link #getArguments()} as it will include a subset of the arguments
      * excluding those that have been subtracted from the URI variables.</p>
      *

File: router/src/main/java/io/micronaut/web/router/UriRouteMatch.java
Patch:
@@ -40,7 +40,7 @@ public interface UriRouteMatch<T, R> extends UriMatchInfo, MethodBasedRouteMatch
 
     /**
      * <p>Returns the required arguments for this RouteMatch.</p>
-     * <p>
+     *
      * <p>Note that this is not the save as {@link #getArguments()} as it will include a subset of the arguments
      * excluding those that have been subtracted from the URI variables</p>
      *

File: router/src/main/java/io/micronaut/web/router/version/RouteVersionFilter.java
Patch:
@@ -92,7 +92,7 @@ public <T, R> Predicate<UriRouteMatch<T, R>> filter(HttpRequest<?> request) {
      *
      * @param request HTTP Request
      * @param version The version resolved evaluating the HTTP Request with beans of type {@link RequestVersionResolver}
-     * @return <code>true</code> if no version was resolved from the request
+     * @return {@code true} if no version was resolved from the request
      */
     protected boolean matchIfRouteIsNotVersioned(@NonNull HttpRequest<?> request,
                                                  @Nullable String version) {
@@ -114,7 +114,7 @@ protected boolean matchIfRouteIsNotVersioned(@NonNull HttpRequest<?> request,
      * @param request HTTP Request
      * @param resolvedVersion The version resolved evaluating the HTTP Request with beans of type {@link RequestVersionResolver} and the {@link RoutesVersioningConfiguration#getDefaultVersion()}.
      * @param routeVersion The route's version. For example, it could specified by the {@link Version} annotation.
-     * @return <code>true</code> if the resolved version matches the route version or if the resolved version is <code>null</code>
+     * @return {@code true} if the resolved version matches the route version or if the resolved version is {@code null}
      */
     protected boolean matchIfRouteIsVersioned(@NonNull HttpRequest<?> request,
                                               @Nullable String resolvedVersion,

File: runtime/src/main/java/io/micronaut/discovery/exceptions/DiscoveryException.java
Patch:
@@ -44,7 +44,7 @@ public DiscoveryException(String message) {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: runtime/src/main/java/io/micronaut/discovery/registration/RegistrationException.java
Patch:
@@ -46,7 +46,7 @@ public RegistrationException(String message) {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: runtime/src/main/java/io/micronaut/health/CurrentHealthStatus.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * <p>Strategy interface for retrieving and updating the current {@link HealthStatus} of the application.</p>
- * <p>
+ *
  * <p>Implementations of this class should be thread safe</p>
  *
  * @author Graeme Rocher

File: runtime/src/main/java/io/micronaut/retry/annotation/Fallback.java
Patch:
@@ -24,7 +24,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * A {@link Secondary} {@link javax.inject.Scope} for types that should be used as a fallback.
+ * A {@link Secondary} {@link jakarta.inject.Scope} for types that should be used as a fallback.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/retry/annotation/Recoverable.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * <p>AOP around advice that can be applied to any type or method that requires {@link Fallback} handling.</p>
- * <p>
+ *
  * <p>When applied to a type if an exception occurs this advice will attempt to resolve an implementation of the
  * class that is annotated with {@link Fallback}</p>
  *

File: runtime/src/main/java/io/micronaut/retry/exception/CircuitOpenException.java
Patch:
@@ -44,7 +44,7 @@ public CircuitOpenException(String message) {
      * @param message the detail message (which is saved for later retrieval
      *                by the {@link #getMessage()} method).
      * @param cause   the cause (which is saved for later retrieval by the
-     *                {@link #getCause()} method).  (A <tt>null</tt> value is
+     *                {@link #getCause()} method).  (A {@code null} value is
      *                permitted, and indicates that the cause is nonexistent or
      *                unknown.)
      */

File: runtime/src/main/java/io/micronaut/retry/exception/FallbackException.java
Patch:
@@ -44,7 +44,7 @@ public FallbackException(String message) {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: runtime/src/main/java/io/micronaut/retry/exception/RetryException.java
Patch:
@@ -44,7 +44,7 @@ public RetryException(String message) {
      * @param  message the detail message (which is saved for later retrieval
      *         by the {@link #getMessage()} method).
      * @param  cause the cause (which is saved for later retrieval by the
-     *         {@link #getCause()} method).  (A <tt>null</tt> value is
+     *         {@link #getCause()} method).  (A {@code null} value is
      *         permitted, and indicates that the cause is nonexistent or
      *         unknown.)
      */

File: runtime/src/main/java/io/micronaut/retry/intercept/RecoveryInterceptor.java
Patch:
@@ -60,7 +60,7 @@ public class RecoveryInterceptor implements MethodInterceptor<Object, Object> {
     private final BeanContext beanContext;
 
     /**
-     * @param beanContext The bean context to allow for DI of class annotated with {@link javax.inject.Inject}.
+     * @param beanContext The bean context to allow for DI of class annotated with {@link jakarta.inject.Inject}.
      */
     public RecoveryInterceptor(BeanContext beanContext) {
         this.beanContext = beanContext;

File: session/src/main/java/io/micronaut/session/SessionStore.java
Patch:
@@ -46,7 +46,7 @@ public interface SessionStore<S extends Session> {
      * Delete a session for the given ID.
      *
      * @param id The ID of the session
-     * @return A future that outputs <tt>true</tt> if the session was successfully deleted
+     * @return A future that outputs {@code true} if the session was successfully deleted
      */
     CompletableFuture<Boolean> deleteSession(String id);
 

File: test-suite/src/test/java/io/micronaut/docs/annotation/headers/HeaderSpec.java
Patch:
@@ -30,7 +30,7 @@ public class HeaderSpec {
     @Test
     public void testSenderHeaders() throws Exception {
 
-        Map<String,Object> config =Collections.singletonMap(
+        Map<String, Object> config = Collections.singletonMap(
                 "pet.client.id", "11"
         );
 

File: test-suite/src/test/java/io/micronaut/docs/aop/introduction/StubIntroduction.java
Patch:
@@ -24,7 +24,7 @@
 // tag::class[]
 @Singleton
 @InterceptorBean(Stub.class) // <1>
-public class StubIntroduction implements MethodInterceptor<Object,Object> { // <2>
+public class StubIntroduction implements MethodInterceptor<Object, Object> { // <2>
 
     @Nullable
     @Override

File: test-suite/src/test/java/io/micronaut/docs/factories/VehicleMockSpec.java
Patch:
@@ -12,7 +12,7 @@
 // tag::class[]
 @MicronautTest
 public class VehicleMockSpec {
-    @Requires(beans=VehicleMockSpec.class)
+    @Requires(beans = VehicleMockSpec.class)
     @Bean @Replaces(Engine.class)
     Engine mockEngine = () -> "Mock Started"; // <1>
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/StreamTypeHandler.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandler;
 import io.micronaut.http.server.netty.types.stream.NettyStreamedCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
+import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 
 import java.io.InputStream;
@@ -38,7 +39,7 @@ class StreamTypeHandler implements NettyCustomizableResponseTypeHandler<Object>
     private static final Class<?>[] SUPPORTED_TYPES = new Class[]{NettyStreamedCustomizableResponseType.class, InputStream.class};
 
     @Override
-    public void handle(Object object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
+    public ChannelFuture handle(Object object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
         NettyStreamedCustomizableResponseType type;
 
         if (object instanceof InputStream) {
@@ -50,8 +51,7 @@ public void handle(Object object, HttpRequest<?> request, MutableHttpResponse<?>
         }
 
         type.process(response);
-        type.write(request, response, context);
-        context.read();
+        return type.write(request, response, context);
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseType.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.server.types.CustomizableResponseType;
+import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 
 /**
@@ -36,6 +37,7 @@ public interface NettyCustomizableResponseType extends CustomizableResponseType
      * @param request  The request
      * @param response The response
      * @param context  The Netty {@link ChannelHandlerContext}
+     * @return The netty future that completes when the response is fully written.
      */
-    void write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
+    ChannelFuture write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.core.order.Ordered;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
+import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 
 /**
@@ -40,8 +41,9 @@ public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
      * @param request  The native Netty request
      * @param response The mutable Micronaut response
      * @param context  The channel context
+     * @return The channel future that completes when the response is fully written.
      */
-    void handle(T object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
+    ChannelFuture handle(T object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
 
     /**
      * @param type The type to check

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -104,7 +104,7 @@ public void process(MutableHttpResponse response) {
     }
 
     @Override
-    public void write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
+    public ChannelFuture write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
 
         if (response instanceof NettyMutableHttpResponse) {
 
@@ -126,13 +126,13 @@ public void write(HttpRequest<?> request, MutableHttpResponse<?> response, Chann
                 // SSL not enabled - can use zero-copy file transfer.
                 context.write(new DefaultFileRegion(file.raf.getChannel(), 0, getLength()), context.newProgressivePromise())
                         .addListener(file);
-                context.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);
+                return context.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);
             } else {
                 // SSL enabled - cannot use zero-copy file transfer.
                 try {
                     // HttpChunkedInput will write the end marker (LastHttpContent) for us.
                     final HttpChunkedInput chunkedInput = new HttpChunkedInput(new ChunkedFile(file.raf, 0, getLength(), LENGTH_8K));
-                    context.writeAndFlush(chunkedInput, context.newProgressivePromise())
+                    return context.writeAndFlush(chunkedInput, context.newProgressivePromise())
                             .addListener(file);
                 } catch (IOException e) {
                     throw new CustomizableResponseTypeException("Could not read file", e);

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -89,7 +89,7 @@ public static void eachFile(@NonNull URI uri, String path, @NonNull Consumer<Pat
                     // try to match FileSystems.newFileSystem(URI) semantics for zipfs here.
                     // Basically ignores anything after the !/ if it exists, and uses the part
                     // before as the jar path to extract.
-                    String jarUri = uri.getSchemeSpecificPart();
+                    String jarUri = uri.getRawSchemeSpecificPart();
                     int sep = jarUri.lastIndexOf("!/");
                     if (sep != -1) {
                         jarUri = jarUri.substring(0, sep);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -371,7 +371,6 @@ public <T1> Optional<T1> getBody(Argument<T1> type) {
     public void release() {
         destroyed = true;
         Consumer<Object> releaseIfNecessary = this::releaseIfNecessary;
-        getBody().ifPresent(releaseIfNecessary);
         receivedContent.forEach(releaseIfNecessary);
         receivedData.values().forEach(releaseIfNecessary);
         releaseIfNecessary(bodyUnwrapped);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -267,6 +267,9 @@ public boolean isRunning() {
     @Override
     public synchronized NettyEmbeddedServer start() {
         if (!isRunning()) {
+            if (isDefault && !applicationContext.isRunning()) {
+                applicationContext.start();
+            }
             //suppress unused
             //done here to prevent a blocking service loader in the event loop
             EventLoopGroupConfiguration workerConfig = resolveWorkerConfiguration();

File: core/src/main/java/io/micronaut/core/graal/ServiceLoaderInitialization.java
Patch:
@@ -103,6 +103,8 @@ private StaticServiceDefinitions buildStaticServiceDefinitions(BeforeAnalysisAcc
                                     if (i > -1) {
                                         serviceName = serviceName.substring(i);
                                     }
+                                } else if (serviceName.startsWith("/")) {
+                                    serviceName = serviceName.substring(1);
                                 }
                                 if (serviceName.startsWith(path)) {
                                     servicePaths.add(serviceName);

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -346,7 +346,7 @@ Collection<TypeElementVisitor> findCoreTypeElementVisitors(
             return true;
         }).stream()
             // remove duplicate classes
-            .collect(Collectors.toMap(v -> v.getClass(), v -> v)).values();
+            .collect(Collectors.toMap(v -> v.getClass(), v -> v, (a, b) -> a)).values();
     }
 
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -344,7 +344,9 @@ Collection<TypeElementVisitor> findCoreTypeElementVisitors(
                 }
             }
             return true;
-        });
+        }).stream()
+            // remove duplicate classes
+            .collect(Collectors.toMap(v -> v.getClass(), v -> v)).values();
     }
 
     /**

File: core/src/main/java/io/micronaut/core/graal/ServiceLoaderInitialization.java
Patch:
@@ -178,14 +178,14 @@ final class StaticServiceDefinitions {
 }
 
 @SuppressWarnings("unused")
-@TargetClass(SoftServiceLoader.class)
+@TargetClass(className = "io.micronaut.core.io.service.ServiceScanner")
 @Internal
 final class ServiceLoaderInitialization {
     private ServiceLoaderInitialization() {
     }
 
     @Substitute
-    private static Set<String> computeServiceTypeNames(URI uri, String path) {
+    private static Set<String> computeMicronautServiceTypeNames(URI uri, String path) {
         final StaticServiceDefinitions ssd = ImageSingletons.lookup(StaticServiceDefinitions.class);
         return ssd.serviceTypeMap.getOrDefault(
                 path,

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -586,8 +586,7 @@ public Collection<PropertySourceLoader> getPropertySourceLoaders() {
     @SuppressWarnings("MagicNumber")
     private Collection<PropertySourceLoader> evaluatePropertySourceLoaders() {
         SoftServiceLoader<PropertySourceLoader> definitions = readPropertySourceLoaders();
-        Collection<PropertySourceLoader> allLoaders = new ArrayList<>(10);
-        definitions.collectAll(allLoaders);
+        Collection<PropertySourceLoader> allLoaders = definitions.collectAll();
         for (PropertySourceLoader propertySourceLoader : allLoaders) {
             Set<String> extensions = propertySourceLoader.getExtensions();
             for (String extension : extensions) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -556,7 +556,9 @@ private void fireStartupEvents() {
         applicationContext.getEventPublisher(ServerStartupEvent.class)
                 .publishEvent(new ServerStartupEvent(this));
         applicationName.ifPresent(id -> {
-            this.serviceInstance = applicationContext.createBean(NettyEmbeddedServerInstance.class, id, this);
+            if (serviceInstance == null) {
+                serviceInstance = applicationContext.createBean(NettyEmbeddedServerInstance.class, id, this);
+            }
             applicationContext
                     .getEventPublisher(ServiceReadyEvent.class)
                     .publishEvent(new ServiceReadyEvent(serviceInstance));

File: inject/src/main/java/io/micronaut/context/env/PropertySource.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 
 /**
- * A PropertySource is a location to resolve property values from. The property keys are are available via the
+ * A PropertySource is a location to resolve property values from. The property keys are available via the
  * {@link #iterator()} method.
  *
  * @author Graeme Rocher

File: inject/src/main/java/io/micronaut/inject/BeanDefinition.java
Patch:
@@ -105,6 +105,9 @@ default boolean isCandidateBean(@Nullable Argument<?> beanType) {
             Class<?> beanClass = beanType.getType();
             if (len == 0) {
                 if (isContainerType()) {
+                    if (getBeanType().isAssignableFrom(beanClass)) {
+                        return true;
+                    }
                     final Optional<Argument<?>> containerElement = getContainerElement();
                     if (containerElement.isPresent()) {
                         final Class<?> t = containerElement.get().getType();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -187,7 +187,7 @@ private ClassWriter generateClassBytes() {
         // 6: isConditional
         cv.push(annotationMetadata.hasStereotype(Requires.class));
         // 7: isContainerType
-        cv.push(DefaultArgument.CONTAINER_TYPES.stream().anyMatch(clazz -> clazz.getName().equals(beanTypeName)));
+        cv.push(providedType.getSort() == Type.ARRAY || DefaultArgument.CONTAINER_TYPES.stream().anyMatch(clazz -> clazz.getName().equals(beanTypeName)));
         // 8: isSingleton
         cv.push(
                 annotationMetadata.hasDeclaredStereotype(AnnotationUtil.SINGLETON) ||

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2428,7 +2428,7 @@ private <T> Map<String, Object> getRequiredArgumentValues(@NonNull BeanResolutio
             return convertedValues;
         } else {
             return Collections.emptyMap();
-        }        
+        }
     }
 
     /**
@@ -3809,6 +3809,7 @@ public R invoke(Object... arguments) {
      *
      * @param <T> The bean type
      */
+    @SuppressWarnings("java:S1948")
     static final class BeanKey<T> implements BeanIdentifier {
         final Argument<T> beanType;
         private final Qualifier<T> qualifier;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -185,6 +185,8 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
 
     final Map<BeanIdentifier, BeanRegistration<?>> singlesInCreation = new ConcurrentHashMap<>(5);
 
+    Set<Map.Entry<Class<?>, List<BeanInitializedEventListener>>> beanInitializedEventListeners;
+
     private final SingletonScope singletonScope = new SingletonScope();
 
     private final BeanContextConfiguration beanContextConfiguration;
@@ -232,7 +234,6 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
     private List<BeanConfiguration> beanConfigurationsList;
 
     private Set<Map.Entry<Class<?>, List<BeanCreatedEventListener<?>>>> beanCreationEventListeners;
-    Set<Map.Entry<Class<?>, List<BeanInitializedEventListener>>> beanInitializedEventListeners;
     private Set<Map.Entry<Class<?>, List<BeanPreDestroyEventListener>>> beanPreDestroyEventListeners;
     private Set<Map.Entry<Class<?>, List<BeanDestroyedEventListener>>> beanDestroyedEventListeners;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -72,7 +72,6 @@
 import io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GlobalEventExecutor;
-import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -761,13 +760,13 @@ void refresh() {
         }
 
         @Override
-        protected void initChannel(@NotNull Channel ch) throws Exception {
+        protected void initChannel(@NonNull Channel ch) throws Exception {
             httpPipelineBuilder.new ConnectionPipeline(ch, config.isSsl()).initChannel();
         }
     }
 
     private static class DomainSocketHolder {
-        @NotNull
+        @NonNull
         private static SocketAddress makeDomainSocketAddress(String path) {
             try {
                 return new DomainSocketAddress(path);

File: inject/src/main/java/io/micronaut/inject/writer/AbstractBeanDefinitionBuilder.java
Patch:
@@ -329,7 +329,7 @@ public BeanElementBuilder typeArgumentsForType(ClassElement type, @NonNull Class
                 if (this.typeArguments == null) {
                     this.typeArguments = new LinkedHashMap<>();
                 }
-                this.typeArguments.put(type.getName(), typeArguments);
+                this.typeArguments.put(type.getName(), resolvedTypes);
             }
         }
         return this;

File: inject/src/main/java/io/micronaut/inject/writer/AbstractBeanDefinitionBuilder.java
Patch:
@@ -329,7 +329,7 @@ public BeanElementBuilder typeArgumentsForType(ClassElement type, @NonNull Class
                 if (this.typeArguments == null) {
                     this.typeArguments = new LinkedHashMap<>();
                 }
-                this.typeArguments.put(type.getName(), typeArguments);
+                this.typeArguments.put(type.getName(), resolvedTypes);
             }
         }
         return this;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2399,7 +2399,7 @@ private <T> Map<String, Object> getRequiredArgumentValues(@NonNull BeanResolutio
                                                               @NonNull BeanDefinition<T> beanDefinition) {
         Map<String, Object> convertedValues;
         if (argumentValues == null) {
-            convertedValues = Collections.emptyMap();
+            convertedValues = requiredArguments.length == 0 ? Collections.emptyMap() : new LinkedHashMap<>();
             argumentValues = Collections.emptyMap();
         } else {
             convertedValues = new LinkedHashMap<>();

File: inject/src/main/java/io/micronaut/context/annotation/Replaces.java
Patch:
@@ -54,7 +54,7 @@
      *
      * @return The qualifier
      */
-    Class<? extends Annotation>[] qualifier() default {};
+    Class<? extends Annotation> qualifier() default Annotation.class;
 
     /**
      * The name of the qualifiers of the bean that should be replaced.

File: http-server/src/main/java/io/micronaut/http/server/types/files/SystemFile.java
Patch:
@@ -99,7 +99,7 @@ public SystemFile attach(String attachmentName) {
     @Override
     public void process(MutableHttpResponse response) {
         if (attachmentName != null) {
-            response.header(HttpHeaders.CONTENT_DISPOSITION, String.format(ATTACHMENT_HEADER, attachmentName));
+            response.header(HttpHeaders.CONTENT_DISPOSITION, StreamedFile.buildAttachmentHeader(attachmentName));
         }
     }
 }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3361,7 +3361,7 @@ private <T> Stream<BeanDefinition<T>> applyBeanResolutionFilters(@Nullable BeanR
                 return true;
             });
         }
-        return candidateStream;
+        return candidateStream.filter(c -> !c.isAbstract());
     }
 
     private <T> void addCandidateToList(@Nullable BeanResolutionContext resolutionContext,

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -4276,7 +4276,7 @@ public boolean equals(Object o) {
             }
 
             NoInjectionBeanDefinition that = (NoInjectionBeanDefinition) o;
-            return singletonClass.equals(that.singletonClass);
+            return singletonClass.equals(that.singletonClass) && Objects.equals(qualifier, that.qualifier);
         }
 
         @Override

File: inject/src/main/java/io/micronaut/context/NoInjectionBeanDefinition.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Function;
 import java.util.stream.Collectors;
@@ -206,7 +207,7 @@ public boolean equals(Object o) {
         }
 
         NoInjectionBeanDefinition<?> that = (NoInjectionBeanDefinition) o;
-        return singletonClass.equals(that.singletonClass);
+        return singletonClass.equals(that.singletonClass) && Objects.equals(qualifier, that.qualifier);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/annotation/MutableAnnotationMetadata.java
Patch:
@@ -82,6 +82,9 @@ public MutableAnnotationMetadata clone() {
         if (annotationDefaultValues != null) {
             cloned.annotationDefaultValues = new LinkedHashMap<>(annotationDefaultValues);
         }
+        if (repeated != null) {
+            cloned.repeated = new HashMap<>(repeated);
+        }
         return cloned;
     }
 

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -161,7 +161,8 @@ public <T> Optional<BeanRegistration<T>> findBeanRegistration(T bean) {
         for (CreatedBean<?> created : refreshableBeans.values()) {
             if (created.bean() == bean) {
                 //noinspection unchecked
-                return Optional.of(new BeanRegistration<>(
+                return Optional.of(BeanRegistration.of(
+                        beanContext,
                         created.id(),
                         (BeanDefinition<T>) created.definition(),
                         (T) created.bean()

File: inject/src/main/java/io/micronaut/context/SingletonScope.java
Patch:
@@ -78,9 +78,7 @@ <T> BeanRegistration<T> registerSingletonBean(@NonNull BeanDefinition<T> beanDef
 
 
         DefaultBeanContext.BeanKey<T> key = new DefaultBeanContext.BeanKey<>(beanDefinition.asArgument(), qualifier);
-        BeanRegistration<T> registration = dependents.isEmpty() ?
-            new BeanDisposingRegistration<>(beanContext, key, beanDefinition, createdBean) :
-            new BeanDisposingRegistration<>(beanContext, key, beanDefinition, createdBean, dependents);
+        BeanRegistration<T> registration = BeanRegistration.of(beanContext, key, beanDefinition, createdBean, dependents);
         
         singletonByBeanDefinition.put(BeanDefinitionIdentity.of(beanDefinition), registration);
         if (!beanDefinition.isSingleton()) {

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -184,7 +184,7 @@ public void setHttpVersion(HttpVersion httpVersion) {
     }
 
     /**
-     * Sets the {@link ThreadSelection} model to use for the server.
+     * Sets the {@link io.micronaut.scheduling.executor.ThreadSelection} model to use for the server. Default value MANUAL.
      * @param threadSelection The thread selection model
      */
     public void setThreadSelection(ThreadSelection threadSelection) {

File: inject-java-test/src/main/java/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -305,7 +305,6 @@ private Set<String> getCompilerOptions() {
         processors.add(getAggregatingTypeElementVisitorProcessor());
         processors.add(new PackageConfigurationInjectProcessor());
         processors.add(getBeanDefinitionInjectProcessor());
-        processors.add(new ServiceDescriptionProcessor());
         return processors;
     }
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -916,7 +916,7 @@ private void invokeBeanConstructor(GeneratorAdapter writer, MethodElement constr
     private void writeIntrospectionReference(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOException {
         Type superType = Type.getType(AbstractBeanIntrospectionReference.class);
         final String referenceName = targetClassType.getClassName();
-        classWriterOutputVisitor.visitServiceDescriptor(BeanIntrospectionReference.class, referenceName);
+        classWriterOutputVisitor.visitServiceDescriptor(BeanIntrospectionReference.class, referenceName, getOriginatingElement());
 
         try (OutputStream referenceStream = classWriterOutputVisitor.visitClass(referenceName, getOriginatingElements())) {
             startService(referenceWriter, BeanIntrospectionReference.class, targetClassType.getInternalName(), superType);

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -106,7 +106,8 @@ public void accept(ClassWriterOutputVisitor outputVisitor) throws IOException {
         }
         outputVisitor.visitServiceDescriptor(
                 BeanDefinitionReference.class,
-                beanDefinitionReferenceClassName
+                beanDefinitionReferenceClassName,
+                getOriginatingElement()
         );
     }
 

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1217,7 +1217,7 @@ private void buildCheckIfShouldLoadMethod(GeneratorAdapter adapter, Map<Type, Li
 
                 org.objectweb.asm.commons.Method propertyGetterMethod = org.objectweb.asm.commons.Method.getMethod(propertyGetter.getDescription(false));
                 // getter might be an interface method
-                if (propertyGetter.isAbstract()) {
+                if (visitData.memberBeanType.getType().isInterface()) {
                     adapter.invokeInterface(injectedType, propertyGetterMethod);
                 } else {
                     adapter.invokeVirtual(injectedType, propertyGetterMethod);
@@ -1816,7 +1816,7 @@ public void visitAnnotationMemberPropertyInjectionPoint(TypedElement annotationM
                     ElementQuery.ALL_METHODS
                             .onlyAccessible(beanTypeElement)
                             .onlyInstance()
-                            .named((name) -> name.equals(NameUtils.getterNameFor(annotationMemberProperty, readPrefixes)))
+                            .named((name) -> annotationMemberProperty.equals(NameUtils.getPropertyNameForGetter(name, readPrefixes)))
                             .filter((e) -> !e.hasParameters())
             ).orElse(null);
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -665,7 +665,7 @@ public MutableHttpParameters getParameters() {
                 synchronized (this) { // double check
                     httpParameters = this.httpParameters;
                     if (httpParameters == null) {
-                        QueryStringDecoder queryStringDecoder = createDecoder(uri.toString());
+                        QueryStringDecoder queryStringDecoder = createDecoder(uri);
                         httpParameters = new NettyHttpParameters(queryStringDecoder.parameters(), conversionService, null);
                         this.httpParameters = httpParameters;
                     }

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -393,9 +393,9 @@ public Publisher<MutableHttpResponse<?>> proceed(io.micronaut.http.HttpRequest<?
                 }
                 HttpFilter httpFilter = filters.get(pos);
 
-                HttpRequest<?> requestForFilter = requestReference.getAndSet(request);
+                requestReference.set(request);
                 try {
-                    return Flux.from((Publisher<MutableHttpResponse<?>>) httpFilter.doFilter(requestForFilter, this))
+                    return Flux.from((Publisher<MutableHttpResponse<?>>) httpFilter.doFilter(request, this))
                             .flatMap(handleStatusException)
                             .onErrorResume(onError);
                 } catch (Throwable t) {

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -869,7 +869,7 @@ public void visitBeanFactoryField(ClassElement factoryClass, FieldElement factor
         } else {
             constructor = factoryField;
 
-            autoApplyNamed(factoryField);
+            autoApplyNamedIfPresent(factoryField, factoryField.getAnnotationMetadata());
             // now prepare the implementation of the build method. See BeanFactory interface
             visitBuildFactoryMethodDefinition(factoryClass, factoryField);
             // now override the injectBean method

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -70,6 +70,7 @@ protected final void doSubscribe(Subscriber<? super T> subscriber) {
     protected final void doOnNext(ByteBufHolder message) {
         long receivedLength = this.receivedLength.addAndGet(message.content().readableBytes());
 
+        ReferenceCountUtil.touch(message);
         if (advertisedLength > requestMaxSize) {
             fireExceedsLength(advertisedLength, requestMaxSize, message);
         } else if (receivedLength > requestMaxSize) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -403,6 +403,7 @@ public String toString() {
                 upperBounds = Stream.of(extendsBound);
             }
             return new JavaWildcardElement(
+                    wt,
                     upperBounds
                             .map(tm -> (JavaClassElement) mirrorToClassElement(tm, visitorContext, finalGenericsInfo, includeTypeAnnotations))
                             .collect(Collectors.toList()),

File: http/src/main/java/io/micronaut/http/hateoas/AbstractResource.java
Patch:
@@ -160,11 +160,11 @@ public final void setLinks(Map<String, Object> links) {
      *
      * @param embedded The links
      */
-    @SuppressWarnings("unchecked")
     @Internal
     @ReflectiveAccess
     @JsonProperty(EMBEDDED)
-    public final void setEmbedded(Map<String, Object> embedded) {
+    public final void setEmbedded(Map<String, List<Resource>> embedded) {
+        this.embeddedMap.putAll(embedded);
     }
 
     private void link(String name, Map<String, Object> linkMap) {

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -542,7 +542,7 @@ public AbstractIntrospection(
     /**
      * Used to accumulate property elements for abstract types.
      */
-    private class AbstractPropertyElement implements PropertyElement {
+    private static class AbstractPropertyElement implements PropertyElement {
 
         private final ClassElement declaringType;
         private final ClassElement type;
@@ -594,11 +594,10 @@ public boolean isPublic() {
             return true;
         }
 
-        @SuppressWarnings("ConstantConditions")
         @NonNull
         @Override
         public Object getNativeType() {
-            throw null;
+            return this;
         }
     }
 

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -293,7 +293,7 @@ void visitConfigBuilderField(
             ClassElement type,
             String field,
             AnnotationMetadata annotationMetadata,
-            ConfigurationMetadataBuilder metadataBuilder,
+            ConfigurationMetadataBuilder<?> metadataBuilder,
             boolean isInterface);
 
     /**
@@ -310,7 +310,7 @@ void visitConfigBuilderMethod(
             ClassElement type,
             String methodName,
             AnnotationMetadata annotationMetadata,
-            ConfigurationMetadataBuilder metadataBuilder,
+            ConfigurationMetadataBuilder<?> metadataBuilder,
             boolean isInterface);
 
     /**

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1871,7 +1871,7 @@ private void visitConfigBuilderMethodInternal(
                 pushCastToType(injectMethodVisitor, paramType);
             }
 
-            boolean isInterface = currentConfigBuilderState.isInterface();
+            boolean anInterface = currentConfigBuilderState.isInterface();
 
             if (isDurationWithTimeUnit) {
                 injectMethodVisitor.invokeVirtual(Type.getType(Duration.class), org.objectweb.asm.commons.Method.getMethod(
@@ -1881,7 +1881,7 @@ private void visitConfigBuilderMethodInternal(
                 injectMethodVisitor.getStatic(tu, "MILLISECONDS", tu);
             }
 
-            if (isInterface) {
+            if (anInterface) {
                 injectMethodVisitor.invokeInterface(builderType,
                         new org.objectweb.asm.commons.Method(methodName, methodDescriptor));
             } else {

File: core/src/main/java/io/micronaut/core/annotation/NonNull.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * A common  annotation to declare that annotated elements cannot be {@code null}. Leverages JSR 305 meta-annotations to indicate
- * nullability in Java to common tools with JSR 305 support and used by Kotlin to infer nullability of Spring API.
+ * nullability in Java to common tools with JSR 305 support and used by Kotlin to infer nullability of Micronaut API.
  *
  * <p>Should be used at parameter, return value, and field level. Method overrides should repeat parent {@code @NonNull} annotations unless
  * they behave differently.</p>

File: core/src/main/java/io/micronaut/core/annotation/Nullable.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * A common annotation to declare that annotated elements can be {@code null} under some circumstance. Leverages JSR 305 meta-annotations to
- * indicate nullability in Java to common tools with JSR 305 support and used by Kotlin to infer nullability of Spring API.
+ * indicate nullability in Java to common tools with JSR 305 support and used by Kotlin to infer nullability of Micronaut API.
  *
  * <p>Should be used at parameter, return value, and field level. Methods override should repeat parent {@code @Nullable} annotations
  * unless they behave differently.</p>

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/DefaultByteBufAllocatorConfiguration.java
Patch:
@@ -33,8 +33,8 @@
  * @author graemerocher
  * @since 3.3.0
  */
-@ConfigurationProperties(DefaultByteBufAllocatorConfiguration.DEFAULT_ALLOCATOR)
-@Requires(property = DefaultByteBufAllocatorConfiguration.DEFAULT_ALLOCATOR)
+@ConfigurationProperties(ByteBufAllocatorConfiguration.DEFAULT_ALLOCATOR)
+@Requires(property = ByteBufAllocatorConfiguration.DEFAULT_ALLOCATOR)
 @Context
 @BootstrapContextCompatible
 @Internal

File: core-reactive/src/main/java/io/micronaut/core/async/processor/SingleThreadedBufferingProcessor.java
Patch:
@@ -87,6 +87,7 @@ protected void subscribeDownstream(Subscriber<? super T> downstreamSubscriber) {
             case BUFFERING:
             case FLOWING:
                 provideDownstreamSubscription(downstreamSubscriber);
+                break;
             default:
                 // no-op
         }

File: core-reactive/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java
Patch:
@@ -98,6 +98,7 @@ public final void onNext(T message) {
                         }
                     }
                 }
+                break;
             default:
                 // no-op
         }

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/CancelledSubscriber.java
Patch:
@@ -40,6 +40,7 @@ public void onSubscribe(Subscription subscription) {
 
     @Override
     public void onNext(T t) {
+        // ignore message
     }
 
     @Override
@@ -51,5 +52,6 @@ public void onError(Throwable error) {
 
     @Override
     public void onComplete() {
+        // ignore
     }
 }

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerPublisher.java
Patch:
@@ -118,10 +118,12 @@ public void subscribe(final Subscriber<? super T> subscriber) {
             subscriber.onSubscribe(new Subscription() {
                 @Override
                 public void request(long n) {
+                    // no-op subscription
                 }
 
                 @Override
                 public void cancel() {
+                    // no-op subscription
                 }
             });
             subscriber.onError(new IllegalStateException("This publisher only supports one subscriber"));
@@ -304,6 +306,7 @@ private void receivedCancel() {
             case DEMANDING:
             case IDLE:
                 cancelled();
+                // fall through
             case DRAINING:
                 state = DONE;
                 break;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -614,6 +614,7 @@ protected void doOnError(Throwable throwable) {
 
             @Override
             protected void doOnComplete() {
+                // assume exactly one message has been sent (onNext)
             }
         });
     }

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -417,6 +417,7 @@ protected void addVariableSegment(List<PathSegment> segments,
                         .append(String.valueOf(operator))
                         .append(operatorQuantifier);
                     operatorAppended = true;
+                    // fall through
                 case '+':
                 case '0': // no active operator
                     if (!operatorAppended) {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/scan/AnnotationClassReader.java
Patch:
@@ -711,6 +711,7 @@ private int readAnnotationValue(int v, final char[] buf, final String name,
                     default:
                         v = readAnnotationValues(v - 3, buf, false, av.visitArray(name));
                 }
+                break;
             default:
                 // no-op
         }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/utils/InMemoryByteCodeGroovyClassLoader.java
Patch:
@@ -113,7 +113,9 @@ public void addService(String name, Set<String> classes) throws MalformedURLExce
             protected URLConnection openConnection(URL u) {
                 return new URLConnection(u) {
                     @Override
-                    public void connect() { }
+                    public void connect() {
+                        // only implement getInputStream
+                    }
 
                     @Override
                     public InputStream getInputStream() {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.inject.ast.ElementModifier;
 import io.micronaut.inject.ast.FieldElement;
 import org.codehaus.groovy.ast.*;
-import org.codehaus.groovy.control.SourceUnit;
 
 import io.micronaut.core.annotation.NonNull;
 
@@ -40,7 +39,6 @@
 public class GroovyFieldElement extends AbstractGroovyElement implements FieldElement {
 
     private final Variable variable;
-    private final SourceUnit sourceUnit;
 
     /**
      * @param visitorContext     The visitor context
@@ -53,7 +51,6 @@ public class GroovyFieldElement extends AbstractGroovyElement implements FieldEl
             Variable variable, AnnotatedNode annotatedNode, AnnotationMetadata annotationMetadata) {
         super(visitorContext, annotatedNode, annotationMetadata);
         this.variable = variable;
-        this.sourceUnit = visitorContext.getSourceUnit();
     }
 
     @Override

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -30,7 +30,6 @@
 import org.codehaus.groovy.ast.GenericsType;
 import org.codehaus.groovy.ast.MethodNode;
 import org.codehaus.groovy.ast.Parameter;
-import org.codehaus.groovy.control.SourceUnit;
 
 import io.micronaut.core.annotation.NonNull;
 
@@ -46,7 +45,6 @@
  */
 public class GroovyMethodElement extends AbstractGroovyElement implements MethodElement {
 
-    private final SourceUnit sourceUnit;
     private final MethodNode methodNode;
     private final GroovyClassElement declaringClass;
     private Map<String, ClassNode> genericsSpec = null;
@@ -62,7 +60,6 @@ public class GroovyMethodElement extends AbstractGroovyElement implements Method
     GroovyMethodElement(GroovyClassElement declaringClass, GroovyVisitorContext visitorContext, MethodNode methodNode, AnnotationMetadata annotationMetadata) {
         super(visitorContext, methodNode, annotationMetadata);
         this.methodNode = methodNode;
-        this.sourceUnit = visitorContext.getSourceUnit();
         this.declaringClass = declaringClass;
     }
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ParameterElement;
 import org.codehaus.groovy.ast.Parameter;
-import org.codehaus.groovy.control.SourceUnit;
 
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
@@ -35,7 +34,6 @@
 @Internal
 public class GroovyParameterElement extends AbstractGroovyElement implements ParameterElement {
 
-    private final SourceUnit sourceUnit;
     private final Parameter parameter;
     private final GroovyMethodElement methodElement;
     private ClassElement typeElement;
@@ -52,7 +50,6 @@ public class GroovyParameterElement extends AbstractGroovyElement implements Par
     GroovyParameterElement(GroovyMethodElement methodElement, GroovyVisitorContext visitorContext, Parameter parameter, AnnotationMetadata annotationMetadata) {
         super(visitorContext, parameter, annotationMetadata);
         this.parameter = parameter;
-        this.sourceUnit = visitorContext.getSourceUnit();
         this.methodElement = methodElement;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -230,6 +230,7 @@ private Map<String, TypeMirror> resolveGenericTypes(DeclaredType type, TypeEleme
                         } else {
                             resolvedParameters.put(parameterName, elementUtils.getTypeElement(Object.class.getName()).asType());
                         }
+                        break;
                     default:
                         // no-op
                 }

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -185,6 +185,7 @@ protected HealthLevelOfDetail levelOfDetail(@Nullable Principal principal) {
                 break;
             case ANONYMOUS:
                 showDetails = true;
+                break;
             default:
                 // no-op
         }

File: aop/src/main/java/io/micronaut/aop/internal/intercepted/InterceptedMethodUtil.java
Patch:
@@ -36,7 +36,9 @@
  * @since 2.1.0
  */
 @Internal
-public class InterceptedMethodUtil {
+public final class InterceptedMethodUtil {
+    private InterceptedMethodUtil() {
+    }
 
     /**
      * Find possible {@link InterceptedMethod} implementation.

File: context/src/main/java/io/micronaut/scheduling/executor/ExecutorFactory.java
Patch:
@@ -89,7 +89,7 @@ private ThreadFactory getThreadFactory(ExecutorConfiguration executorConfigurati
         return executorConfiguration
                 .getThreadFactoryClass()
                 .flatMap(InstantiationUtils::tryInstantiate)
-                .map(tf -> (ThreadFactory) tf)
+                .map(ThreadFactory.class::cast)
                 .orElseGet(() -> {
                     if (beanLocator != null) {
                         if (executorConfiguration.getName() == null) {

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -40,7 +40,7 @@ public class NameUtils {
     private static final String PREFIX_SET = "set";
     private static final String PREFIX_IS = "is";
     private static final Pattern ENVIRONMENT_VAR_SEQUENCE = Pattern.compile("^[\\p{Lu}_{0-9}]+");
-    private static final Pattern KEBAB_CASE_SEQUENCE = Pattern.compile("^(([a-z0-9])+(\\-|\\.|:)?)*([a-z0-9])+$");
+    private static final Pattern KEBAB_CASE_SEQUENCE = Pattern.compile("^(([a-z0-9])+([-.:])?)*([a-z0-9])+$");
     private static final Pattern KEBAB_REPLACEMENTS = Pattern.compile("[_ ]");
 
     /**

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -375,9 +375,9 @@ public static String prependUri(String baseUri, String uri) {
         }
         uri = baseUri + uri;
         if (uri.startsWith("/")) {
-            return uri.replaceAll("[//]{2,}", "/");
+            return uri.replaceAll("/{2,}", "/");
         } else {
-            return uri.replaceAll("(?<=[^:])[//]{2,}", "/");
+            return uri.replaceAll("(?<=[^:])/{2,}", "/");
         }
     }
 

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -220,7 +220,6 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             // Apply all the argument binders
             Argument[] arguments = context.getArguments();
             if (arguments.length > 0) {
-                Map<String, Object> paramMap = context.getParameterValueMap();
                 for (Argument argument : arguments) {
                     Object definedValue = getValue(argument, context, parameters);
 

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -190,7 +190,7 @@ public Builder addPart(String name, String value) {
          * @param filePart Any file part, such as {@link FilePart}, {@link InputStreamPart}, {@link BytePart} etc
          * @return A {@link MultipartBody.Builder} to build MultipartBody
          */
-        private Builder addFilePart(AbstractFilePart filePart) {
+        private Builder addFilePart(AbstractFilePart<?> filePart) {
             parts.add(filePart);
             return this;
         }

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerPublisher.java
Patch:
@@ -469,7 +469,9 @@ private void flushBuffer() {
                 if (state == BUFFERING) {
                     state = DEMANDING;
                 } // otherwise we're draining
-                requestDemand();
+                if (!completed.get()) {
+                    requestDemand();
+                }
             } else if (state == BUFFERING) {
                 state = IDLE;
             }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -316,8 +316,8 @@ private void handleReadHttpContent(ChannelHandlerContext ctx, HttpContent conten
             if (bodyPublisher != null) {
                 ctx.fireChannelRead(content);
                 if (content instanceof LastHttpContent) {
-                    removeHandlerIfActive(ctx, HANDLER_BODY_PUBLISHER);
                     currentlyStreamedMessage = null;
+                    removeHandlerIfActive(ctx, HANDLER_BODY_PUBLISHER);
                     consumedInMessage(ctx);
                 }
             } else {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -149,7 +149,7 @@ class RoutingInBoundHandler extends SimpleChannelInboundHandler<io.micronaut.htt
      * Also present in {@link RouteExecutor}.
      */
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
-            "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);
+            "^.*(?:connection (?:reset|closed|abort|broken)|broken pipe).*$", Pattern.CASE_INSENSITIVE);
     private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);
     private final Router router;
     private final StaticResourceResolver staticResourceResolver;

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -96,7 +96,7 @@ public final class RouteExecutor {
      * Also present in netty RoutingInBoundHandler.
      */
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
-            "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);
+            "^.*(?:connection (?:reset|closed|abort|broken)|broken pipe).*$", Pattern.CASE_INSENSITIVE);
 
     private final Router router;
     private final BeanContext beanContext;

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -493,7 +493,7 @@ private void pushBeanMethodReference(ClassWriter classWriter,
         staticInit.dup();
         // 1: return argument
         ClassElement genericReturnType = beanMethodData.methodElement.getGenericReturnType();
-        pushArgument(introspectionType, classWriter, staticInit, classElement.getName(), genericReturnType, defaults, loadTypeMethods);
+        pushReturnTypeArgument(introspectionType, classWriter, staticInit, classElement.getName(), genericReturnType, defaults, loadTypeMethods);
         // 2: name
         staticInit.push(beanMethodData.methodElement.getName());
         // 3: annotation metadata

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientFactoryResolver.java
Patch:
@@ -29,7 +29,7 @@
 @Internal
 final class HttpClientFactoryResolver {
 
-    private static HttpClientFactory factory;
+    private static volatile HttpClientFactory factory;
 
     static HttpClientFactory getFactory() {
         if (factory == null) {

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyHttpClientFactoryResolver.java
Patch:
@@ -29,7 +29,7 @@
 @Internal
 final class ProxyHttpClientFactoryResolver {
 
-    private static ProxyHttpClientFactory factory;
+    private static volatile ProxyHttpClientFactory factory;
 
     static ProxyHttpClientFactory getFactory() {
         if (factory == null) {

File: http-client-core/src/main/java/io/micronaut/http/client/StreamingHttpClientFactoryResolver.java
Patch:
@@ -29,7 +29,7 @@
 @Internal
 final class StreamingHttpClientFactoryResolver {
 
-    private static StreamingHttpClientFactory factory;
+    private static volatile StreamingHttpClientFactory factory;
 
     static StreamingHttpClientFactory getFactory() {
         if (factory == null) {

File: http-client-core/src/main/java/io/micronaut/http/client/sse/SseClientFactoryResolver.java
Patch:
@@ -29,7 +29,7 @@
 @Internal
 final class SseClientFactoryResolver {
 
-    private static SseClientFactory factory;
+    private static volatile SseClientFactory factory;
 
     static SseClientFactory getFactory() {
         if (factory == null) {

File: inject/src/main/java/io/micronaut/context/condition/OperatingSystem.java
Patch:
@@ -25,7 +25,7 @@
  */
 public final class OperatingSystem {
 
-    private static OperatingSystem instance;
+    private static volatile OperatingSystem instance;
     private final Family family;
 
     private OperatingSystem(Family family) {

File: websocket/src/main/java/io/micronaut/websocket/WebSocketClientFactoryResolver.java
Patch:
@@ -29,7 +29,7 @@
 @Internal
 final class WebSocketClientFactoryResolver {
 
-    private static WebSocketClientFactory factory;
+    private static volatile WebSocketClientFactory factory;
 
     static WebSocketClientFactory getFactory() {
         if (factory == null) {

File: http/src/main/java/io/micronaut/http/multipart/StreamingFileUpload.java
Patch:
@@ -46,7 +46,9 @@ public interface StreamingFileUpload extends FileUpload, Publisher<PartData> {
      * @param location the name of the file to which the stream will be written. The file is created relative to
      *                 the location as specified in the <tt>MultipartConfiguration</tt>
      * @return A {@link Publisher} that outputs whether the transfer was successful
+     * @deprecated Use {@link #transferTo(File)} or {@link #transferTo(OutputStream)} instead.
      */
+    @Deprecated
     Publisher<Boolean> transferTo(String location);
 
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -713,7 +713,8 @@ protected void accept(DeclaredType type, Element element, AopProxyWriter aopProx
                         AnnotationMetadata annotationMetadata;
 
                         if (annotationUtils.isAnnotated(introductionType.getName(), method) || JavaAnnotationMetadataBuilder.hasAnnotation(method, Override.class)) {
-                            annotationMetadata = annotationUtils.newAnnotationBuilder().buildForParent(introductionType.getName(), classElement, method);
+                            // Class annotations are referenced by typeAnnotationMetadata
+                            annotationMetadata = annotationUtils.newAnnotationBuilder().buildForParent(introductionType.getName(), null, method);
                             annotationMetadata = new AnnotationMetadataHierarchy(typeAnnotationMetadata, annotationMetadata);
                         } else {
                             annotationMetadata = new AnnotationMetadataReference(

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/InputStreamBodyBinder.java
Patch:
@@ -85,7 +85,7 @@ public BindingResult<InputStream> bind(ArgumentConversionContext<InputStream> co
                     PipedInputStream inputStream = new PipedInputStream(outputStream) {
                         private volatile HttpContentProcessor<ByteBufHolder> processor;
 
-                        private void init() {
+                        private synchronized void init() {
                             if (processor == null) {
                                 processor = (HttpContentProcessor<ByteBufHolder>) processorResolver.resolve(nettyHttpRequest, context.getArgument());
                                 Flux.from(processor)

File: core/src/main/java/io/micronaut/core/cli/CommandLineParser.java
Patch:
@@ -163,7 +163,7 @@ protected String processOption(DefaultCommandLine cl, String arg) {
         arg = (arg.charAt(1) == '-' ? arg.substring(2, arg.length()) : arg.substring(1, arg.length())).trim();
 
         if (arg.contains("=")) {
-            String[] split = arg.split("=");
+            String[] split = arg.split("=", 2);
             String name = split[0].trim();
             validateOptionName(name);
             String value = split.length > 1 ? split[1].trim() : "";

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -988,7 +988,6 @@ private void encodeHttpResponse(
             }
         } else {
             response.body(null);
-            response.contentType(null);
             writeFinalNettyResponse(
                     response,
                     nettyRequest,

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -305,7 +305,7 @@ public boolean isErrorRoute() {
                         .errorMessage("Internal Server Error: " + cause.getMessage())
                         .build(), response);
         applyConfiguredHeaders(mutableHttpResponse.getHeaders());
-        if (!mutableHttpResponse.getContentType().isPresent()) {
+        if (!mutableHttpResponse.getContentType().isPresent() && httpRequest.getMethod() != HttpMethod.HEAD) {
             return mutableHttpResponse.contentType(MediaType.APPLICATION_JSON_TYPE);
         }
         return mutableHttpResponse;
@@ -425,7 +425,7 @@ private MutableHttpResponse<?> newNotFoundError(HttpRequest<?> request) {
                 ErrorContext.builder(request)
                         .errorMessage("Page Not Found")
                         .build(), HttpResponse.notFound());
-        if (!response.getContentType().isPresent()) {
+        if (!response.getContentType().isPresent() && request.getMethod() != HttpMethod.HEAD) {
             return response.contentType(MediaType.APPLICATION_JSON_TYPE);
         }
         return response;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/response/ErrorResponseProcessor.java
Patch:
@@ -34,6 +34,9 @@ public interface ErrorResponseProcessor<T> {
      * method should return the response that was passed in {@param baseResponse},
      * however that isn't required.
      *
+     * Error response processors should not set the body or content type if
+     * the request method is HEAD.
+     *
      * @param errorContext The error context
      * @param baseResponse The base response to retrieve information or
      *                     mutate

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -1169,7 +1169,7 @@ final <T extends Annotation> Optional<AnnotationValue<T>> getAnnotation(String m
         Object v = values.get(member);
         if (v instanceof AnnotationValue) {
             final AnnotationValue<T> av = (AnnotationValue<T>) v;
-            if (av.getAnnotationName().equals(type)) {
+            if (av.getAnnotationName().equals(typeName)) {
                 return Optional.of(av);
             }
             return Optional.empty();

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -120,7 +120,7 @@ void testPostVertx() throws ExecutionException, InterruptedException, TimeoutExc
     public Map<String, String> getProperties() {
         return CollectionUtils.mapOf(
                 "micronaut.ssl.enabled", true,
-                "micronaut.ssl.buildSelfSigned", true,
+                "micronaut.server.ssl.buildSelfSigned", true,
                 "micronaut.http.client.ssl.insecure-trust-all-certificates", true
         );
     }

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017-2020 original authors
+ * Copyright 2017-2022 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,6 @@ public ClientSslConfiguration(
             SslConfiguration.TrustStoreConfiguration defaultTrustStoreConfiguration) {
         readExisting(defaultSslConfiguration, defaultKeyConfiguration, defaultKeyStoreConfiguration, defaultTrustStoreConfiguration);
         setEnabled(true);
-        setBuildSelfSigned(true);
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -968,6 +968,7 @@ private void encodeHttpResponse(
                         toNettyResponse(response),
                         mapToHttpContent(nettyRequest, response, body, context)
                 );
+                nettyRequest.prepareHttp2ResponseIfNecessary(streamedResponse);
                 context.writeAndFlush(streamedResponse);
                 context.read();
             } else {

File: test-suite/src/test/java/io/micronaut/docs/config/immutable/Engine.java
Patch:
@@ -17,6 +17,7 @@
 
 import jakarta.inject.Singleton;
 
+// tag::class[]
 @Singleton
 public class Engine {
     private final EngineConfig config;
@@ -38,3 +39,4 @@ public final EngineConfig getConfig() {
         return config;
     }
 }
+// end::class[]

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017-2020 original authors
+ * Copyright 2017-2022 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -383,7 +383,7 @@ protected void accept(DeclaredType declaringType, javax.lang.model.element.Eleme
                             if (beanPropertyData.setter != null) {
                                 TypeMirror typeMirror = beanPropertyData.setter.getParameters().get(0).asType();
                                 ClassElement setterParameterType = mirrorToClassElement(typeMirror, visitorContext, JavaClassElement.this.genericTypeInfo, true);
-                                if (!setterParameterType.getName().equals(getterReturnType.getName())) {
+                                if (!setterParameterType.isAssignable(getterReturnType)) {
                                     beanPropertyData.setter = null; // not a compatible setter
                                 }
                             }

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -436,6 +436,9 @@ private void readConstantPropertySources(String name, List<PropertySource> prope
                 .forEach(propertySources::add);
     }
 
+    /**
+     * @return Property sources created at build time
+     */
     protected List<PropertySource> getConstantPropertySources() {
         return CONSTANT_PROPERTY_SOURCES;
     }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -1509,7 +1509,8 @@ private void handleMemberBinding(DefaultAnnotationMetadata metadata, String last
     protected abstract @NonNull Map<String, ? extends T> getAnnotationMembers(@NonNull String annotationType);
 
     /**
-     * Returns true if a simple meta annotation is present for the given element and annotation type
+     * Returns true if a simple meta annotation is present for the given element and annotation type.
+     *
      * @param element The element
      * @param simpleName The simple name, ie {@link Class#getSimpleName()}
      * @return True an annotation with the given simple name exists on the element

File: aop/src/main/java/io/micronaut/aop/chain/ConstructorInterceptorChain.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.BeanRegistration;
 import io.micronaut.context.BeanResolutionContext;
 import io.micronaut.context.DefaultBeanContext;
+import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
@@ -30,7 +31,6 @@
 import io.micronaut.inject.AdvisedBeanType;
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
-import io.micronaut.inject.qualifiers.InterceptorBindingQualifier;
 import io.micronaut.inject.qualifiers.Qualifiers;
 
 import java.util.*;
@@ -189,12 +189,12 @@ public static <T1> T1 instantiate(
 
         if (interceptors == null) {
             final AnnotationMetadataHierarchy hierarchy = new AnnotationMetadataHierarchy(definition.getAnnotationMetadata(), constructor.getAnnotationMetadata());
-            final List<String> annotationNames = InterceptorBindingQualifier.resolveInterceptorValues(hierarchy);
+            final Collection<AnnotationValue<?>> annotationValues = resolveInterceptorValues(hierarchy, InterceptorKind.AROUND_CONSTRUCT);
 
             final Collection<BeanRegistration<Interceptor<?, ?>>> resolved = ((DefaultBeanContext) beanContext).getBeanRegistrations(
                     resolutionContext,
                     Interceptor.ARGUMENT,
-                    Qualifiers.byInterceptorBinding(annotationNames)
+                    Qualifiers.byInterceptorBindingValues(annotationValues)
             );
             interceptors = new ArrayList(resolved);
         }

File: aop/src/main/java/io/micronaut/aop/internal/InterceptorBeanMapper.java
Patch:
@@ -40,7 +40,7 @@ public Class<InterceptorBean> annotationType() {
     public List<AnnotationValue<?>> map(AnnotationValue<InterceptorBean> annotation, VisitorContext visitorContext) {
         final AnnotationValueBuilder<Annotation> builder = AnnotationValue.builder(AnnotationUtil.ANN_INTERCEPTOR_BINDINGS);
         final AnnotationClassValue<?>[] values = annotation.annotationClassValues("value");
-        AnnotationValue[] bindings = new AnnotationValue[values.length];
+        AnnotationValue<?>[] bindings = new AnnotationValue[values.length];
         for (int i = 0; i < values.length; i++) {
             bindings[i] = AnnotationValue.builder(AnnotationUtil.ANN_INTERCEPTOR_BINDING).value(values[i].getName()).build();
         }

File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.nio.charset.Charset;
 import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Default implementation of the {@link ConversionContext} interface.
@@ -31,6 +30,7 @@
  */
 @Internal
 class DefaultArgumentConversionContext<T> implements ArgumentConversionContext<T> {
+
     private final Argument<T> argument;
     private final Locale finalLocale;
     private final Charset finalCharset;

File: core/src/main/java/io/micronaut/core/convert/ImmutableArgumentConversionContext.java
Patch:
@@ -18,8 +18,6 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import java.util.Map;
-
 /**
  * Immutable variant of {@link io.micronaut.core.convert.ArgumentConversionContext} that can be used as a constant
  * in cases where conversion error handling and rejection is not required.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/stream/NettyStreamedCustomizableResponseType.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
-import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseType;

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -93,7 +93,7 @@ public final class RouteExecutor {
 
     private static final Logger LOG = LoggerFactory.getLogger(RouteExecutor.class);
     /**
-     * Also present in netty RoutingInBoundHandler
+     * Also present in netty RoutingInBoundHandler.
      */
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
             "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -32,7 +32,6 @@
 import java.lang.annotation.Annotation;
 import java.lang.annotation.RetentionPolicy;
 import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;

File: core/src/main/java/io/micronaut/core/convert/ImmutableArgumentConversionContext.java
Patch:
@@ -18,6 +18,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
+import java.util.Map;
+
 /**
  * Immutable variant of {@link io.micronaut.core.convert.ArgumentConversionContext} that can be used as a constant
  * in cases where conversion error handling and rejection is not required.
@@ -27,6 +29,7 @@
  * @author graemerocher
  */
 public interface ImmutableArgumentConversionContext<T> extends ArgumentConversionContext<T> {
+
     /**
      * Create a new simple {@link ConversionContext} for the given generic type variables.
      *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -106,7 +106,7 @@ public byte[] getBytes() throws IOException {
             return ByteBufUtil.getBytes(byteBuf);
         } finally {
             if (controlRelease) {
-                byteBuf.release();
+                fileUpload.release();
             }
         }
     }
@@ -130,7 +130,7 @@ public ByteBuffer getByteBuffer() throws IOException {
             return byteBuf.nioBuffer();
         } finally {
             if (controlRelease) {
-                byteBuf.release();
+                fileUpload.release();
             }
         }
     }

File: function-client/src/main/java/io/micronaut/function/client/http/HttpFunctionExecutor.java
Patch:
@@ -88,6 +88,9 @@ public O invoke(FunctionDefinition definition, I input, Argument<O> outputType)
                 return ConversionService.SHARED.convert(publisher, outputType).orElseThrow(() ->
                     new FunctionExecutionException("Unsupported Reactive type: " + outputJavaType)
                 );
+            } else if (outputType.isVoid()) {
+                httpClient.toBlocking().exchange(request);
+                return null;
             } else {
                 return (O) httpClient.toBlocking().retrieve(request, outputType);
             }

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -31,6 +31,7 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.value.OptionalValues;
+import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
 import io.micronaut.inject.annotation.AnnotationMetadataReference;
 import io.micronaut.inject.ast.*;
@@ -268,6 +269,7 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
                 }
             } finally {
                 AnnotationUtils.invalidateCache();
+                AbstractAnnotationMetadataBuilder.clearMutated();
                 JavaAnnotationMetadataBuilder.clearCaches();
             }
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -144,8 +144,8 @@
 class RoutingInBoundHandler extends SimpleChannelInboundHandler<io.micronaut.http.HttpRequest<?>> {
 
     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);
-    /**
-     * Also present in {@link RouteExecutor}
+    /*
+     * Also present in {@link RouteExecutor}.
      */
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
             "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -92,6 +92,9 @@
 public final class RouteExecutor {
 
     private static final Logger LOG = LoggerFactory.getLogger(RouteExecutor.class);
+    /**
+     * Also present in netty RoutingInBoundHandler
+     */
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
             "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -31,7 +31,6 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.value.OptionalValues;
-import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
 import io.micronaut.inject.annotation.AnnotationMetadataReference;
 import io.micronaut.inject.ast.*;
@@ -269,7 +268,6 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
                 }
             } finally {
                 AnnotationUtils.invalidateCache();
-                AbstractAnnotationMetadataBuilder.clearMutated();
                 JavaAnnotationMetadataBuilder.clearCaches();
             }
         }

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -585,6 +585,7 @@ protected boolean hasAnnotations(Element element) {
      */
     public static void clearCaches() {
         OVERRIDDEN_METHOD_CACHE.clear();
+        AbstractAnnotationMetadataBuilder.clearCaches();
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -137,8 +137,6 @@ protected void writeAnnotationMetadataStaticInitializer(ClassWriter classWriter,
             // write the static initializers for the annotation metadata
             GeneratorAdapter staticInit = visitStaticInitializer(classWriter);
             staticInit.visitCode();
-            staticInit.visitLabel(new Label());
-            initializeAnnotationMetadata(staticInit, classWriter, defaults);
             if (writeAnnotationDefault && annotationMetadata instanceof DefaultAnnotationMetadata) {
                 DefaultAnnotationMetadata dam = (DefaultAnnotationMetadata) annotationMetadata;
                 AnnotationMetadataWriter.writeAnnotationDefaults(
@@ -149,8 +147,9 @@ protected void writeAnnotationMetadataStaticInitializer(ClassWriter classWriter,
                         defaults,
                         loadTypeMethods
                 );
-
             }
+            staticInit.visitLabel(new Label());
+            initializeAnnotationMetadata(staticInit, classWriter, defaults);
             staticInit.visitInsn(RETURN);
             staticInit.visitMaxs(1, 1);
             staticInit.visitEnd();

File: inject/src/main/java/io/micronaut/inject/ast/Element.java
Patch:
@@ -46,7 +46,7 @@ public interface Element extends AnnotationMetadataDelegate, AnnotatedElement, D
     Element[] EMPTY_ELEMENT_ARRAY = new Element[0];
 
     /**
-     * @return The name of the element.
+     * @return The name of the element. For a type this represents the binary name.
      */
     @Override
     @NonNull String getName();

File: test-suite/src/test/java/io/micronaut/docs/config/immutable/Engine.java
Patch:
@@ -17,6 +17,7 @@
 
 import jakarta.inject.Singleton;
 
+// tag::class[]
 @Singleton
 public class Engine {
     private final EngineConfig config;
@@ -38,3 +39,4 @@ public final EngineConfig getConfig() {
         return config;
     }
 }
+// end::class[]
\ No newline at end of file

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -124,11 +124,13 @@ protected void onData(ByteBufHolder message) {
                         case Attribute:
                             Attribute attribute = (Attribute) data;
                             messages.add(attribute);
+                            postRequestDecoder.removeHttpDataFromClean(attribute);
                             break;
                         case FileUpload:
                             FileUpload fileUpload = (FileUpload) data;
                             if (fileUpload.isCompleted()) {
                                 messages.add(fileUpload);
+                                postRequestDecoder.removeHttpDataFromClean(fileUpload);
                             }
                             break;
                         default:

File: http/src/main/java/io/micronaut/http/filter/OncePerRequestHttpServerFilter.java
Patch:
@@ -24,7 +24,7 @@
  * A filter that is only executed once per request. A filter may be executed more
  * than once per request if the original route throws an exception.
  *
- * @deprecated All filters are executed once per request starting in Micronaut 3.0. Directly mplement
+ * @deprecated All filters are executed once per request starting in Micronaut 3.0. Directly implement
  * {@link HttpServerFilter} instead of extending this class and replace any usages of `micronaut.once`
  * attributes with a custom attribute name.
  * @author Graeme Rocher

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -1127,7 +1127,7 @@ private <T> Set<ConstraintViolation<T>> doValidate(
                     null,
                     context,
                     overallViolations,
-                    rootBeanClass,
+                    object.getClass(),
                     object,
                     pojoConstraint,
                     introspection.getAnnotation(pojoConstraint));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -66,9 +66,10 @@ public DefaultHttpContentProcessor(NettyHttpRequest<?> nettyHttpRequest, HttpSer
 
     @Override
     public final void subscribe(Subscriber<? super ByteBufHolder> downstreamSubscriber) {
+        super.subscribe(downstreamSubscriber);
+        //ensures the subscriber is present before subscribing to the message
         StreamedHttpMessage message = (StreamedHttpMessage) nettyHttpRequest.getNativeRequest();
         message.subscribe(this);
-        super.subscribe(downstreamSubscriber);
     }
 
     @Override

File: inject-java/src/test/groovy/io/micronaut/inject/scope/custom/AnotherConcurrentScopeImpl.java
Patch:
@@ -10,7 +10,9 @@
 
 @Singleton
 public class AnotherConcurrentScopeImpl extends AbstractConcurrentCustomScope<AnotherConcurrentScope> {
+
     private Map<BeanIdentifier, CreatedBean<?>> scope;
+
     public AnotherConcurrentScopeImpl() {
         super(AnotherConcurrentScope.class);
     }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3716,7 +3716,7 @@ private <T> void addCandidateToList(
                 }
             } else {
                 try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {
-                    bean = getScopedBeanForDefinition(context, beanType, qualifier, true, candidate);
+                    bean = getScopedBeanForDefinition(context, candidate.asArgument(), qualifier, true, candidate);
                 }
             }
         } catch (DisabledBeanException e) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -808,8 +808,7 @@ private Map<String, ChannelHandler> getHandlerForProtocol(@Nullable String proto
             handlers.put(HttpResponseEncoder.ID, responseEncoder);
             handlers.put(NettyServerWebSocketUpgradeHandler.ID, new NettyServerWebSocketUpgradeHandler(
                     nettyEmbeddedServices,
-                    getWebSocketSessionRepository()
-            ));
+                    getWebSocketSessionRepository()));
             handlers.put(ChannelPipelineCustomizer.HANDLER_MICRONAUT_INBOUND, routingHandler);
             return handlers;
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -33,6 +33,7 @@
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.websocket.WebSocketSessionRepository;
+import io.micronaut.http.server.CoroutineHelper;
 import io.micronaut.http.server.netty.NettyEmbeddedServices;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.RouteExecutor;
@@ -179,8 +180,8 @@ protected final void channelRead0(ChannelHandlerContext ctx, NettyHttpRequest<?>
                                     webSocketBean,
                                     msg,
                                     routeMatch,
-                                    ctx
-                            );
+                                    ctx,
+                                    routeExecutor.getCoroutineHelper().orElse(null));
                             pipeline.addBefore(ctx.name(), NettyServerWebSocketHandler.ID, webSocketHandler);
 
                             pipeline.remove(ChannelPipelineCustomizer.HANDLER_HTTP_STREAM);

File: http-server/src/main/java/io/micronaut/http/server/CoroutineHelper.java
Patch:
@@ -34,15 +34,15 @@
 @Internal
 @Singleton
 @Requires(classes = kotlin.coroutines.CoroutineContext.class)
-final class CoroutineHelper {
+public final class CoroutineHelper {
 
     private final List<HttpCoroutineContextFactory<?>> coroutineContextFactories;
 
     CoroutineHelper(List<HttpCoroutineContextFactory<?>> coroutineContextFactories) {
         this.coroutineContextFactories = coroutineContextFactories;
     }
 
-    void setupCoroutineContext(HttpRequest<?> httpRequest, ContextView contextView) {
+    public void setupCoroutineContext(HttpRequest<?> httpRequest, ContextView contextView) {
         ContinuationArgumentBinder.setupCoroutineContext(httpRequest, contextView, coroutineContextFactories);
     }
 }

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodec.java
Patch:
@@ -83,7 +83,6 @@ public interface MediaTypeCodec {
      */
     <T, B> ByteBuffer<B> encode(T object, ByteBufferFactory<?, B> allocator) throws CodecException;
 
-
     /**
      * Encode the given type to the given {@link OutputStream}.
      *

File: inject/src/main/java/io/micronaut/context/visitor/ContextConfigurerVisitor.java
Patch:
@@ -63,7 +63,9 @@ public static void assertNoConstructorForContextAnnotation(ClassElement element)
                 .stream()
                 .filter(e -> e.getParameters().length > 0)
                 .findAny()
-                .ifPresent(e -> { throw typeShouldNotHaveConstructorsWithArgs(element.getName()); });
+                .ifPresent(e -> {
+                    throw typeShouldNotHaveConstructorsWithArgs(element.getName());
+                });
     }
 
     @NotNull

File: jackson-core/src/main/java/io/micronaut/jackson/core/tree/TreeGenerator.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Deque;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;

File: json-core/src/main/java/io/micronaut/json/JsonMapper.java
Patch:
@@ -115,8 +115,9 @@ default <T> T readValue(@NonNull String string, @NonNull Argument<T> type) throw
     /**
      * Transform an object value to a json tree.
      *
-     * @param type The object type
+     * @param type  The object type
      * @param value The object value to transform.
+     * @param <T>   The type variable of the type.
      * @return The json representation.
      * @throws IOException If there are any mapping exceptions (e.g. illegal values).
      */

File: test-suite/src/test/java/io/micronaut/docs/http/server/secondary/SecondaryServerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 @MicronautTest
 @Property(name = "secondary.enabled", value = StringUtils.TRUE)
+@Property(name = "micronaut.http.client.ssl.insecure-trust-all-certificates", value = StringUtils.TRUE)
 public class SecondaryServerTest {
     // tag::inject[]
     @Client(path = "/", id = SecondaryNettyServer.SERVER_ID)

File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.context.ClientContextPathProvider;
+import io.micronaut.http.ssl.AbstractClientSslConfiguration;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 import jakarta.inject.Inject;
@@ -258,7 +259,7 @@ public static class ServiceConnectionPoolConfiguration extends ConnectionPoolCon
      * The default connection pool configuration.
      */
     @ConfigurationProperties("ssl")
-    public static class ServiceSslClientConfiguration extends SslConfiguration {
+    public static class ServiceSslClientConfiguration extends AbstractClientSslConfiguration {
 
         /**
          * Sets the key configuration.

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -120,7 +120,8 @@ void testPostVertx() throws ExecutionException, InterruptedException, TimeoutExc
     public Map<String, String> getProperties() {
         return CollectionUtils.mapOf(
                 "micronaut.ssl.enabled", true,
-                "micronaut.ssl.buildSelfSigned", true
+                "micronaut.ssl.buildSelfSigned", true,
+                "micronaut.http.client.ssl.insecure-trust-all-certificates", true
         );
     }
 

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -29,7 +29,7 @@
  */
 @ConfigurationProperties(ClientSslConfiguration.PREFIX)
 @BootstrapContextCompatible
-public class ClientSslConfiguration extends SslConfiguration {
+public class ClientSslConfiguration extends AbstractClientSslConfiguration {
 
     /**
      * The prefix used to resolve this configuration.

File: http/src/main/java/io/micronaut/http/ssl/SslBuilder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.ssl;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.io.ResourceResolver;
 import io.micronaut.http.HttpVersion;
 
@@ -59,8 +60,9 @@ public SslBuilder(ResourceResolver resourceResolver) {
     /**
      * @param ssl The ssl configuration
      *
-     * @return The {@link TrustManagerFactory}
+     * @return The {@link TrustManagerFactory}, or {@code null} for the default JDK trust store
      */
+    @Nullable
     protected TrustManagerFactory getTrustManagerFactory(SslConfiguration ssl) {
         try {
             Optional<KeyStore> store = getTrustStore(ssl);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
- * Abtract implementation of the {@link HttpContentProcessor} interface that deals with limiting file upload sizes.
+ * Abstract implementation of the {@link HttpContentProcessor} interface that deals with limiting file upload sizes.
  *
  * @param <T> The type
  * @author Graeme Rocher

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -681,7 +681,7 @@ public void onApplicationEvent(RefreshEvent event) {
      * Negotiates with the browser if HTTP2 or HTTP is going to be used. Once decided, the Netty
      * pipeline is setup with the correct handlers for the selected protocol.
      *
-     * @implNote Unfortunately, this handler cannot be {@link io.netty.channel.ChannelHandler.Sharable shared} because
+     * NOTE: Unfortunately, this handler cannot be {@link io.netty.channel.ChannelHandler.Sharable shared} because
      * {@link ApplicationProtocolNegotiationHandler} does not support it.
      */
     private final class Http2OrHttpHandler extends ApplicationProtocolNegotiationHandler {

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -83,7 +83,7 @@
     boolean lazy() default false;
 
     /**
-     * If true the proxy cache and reuse the target,
+     * If true the proxy cache and reuse the target.
      *
      * @since 3.1.0
      * @return True if the proxy target should be cacheable

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -25,7 +25,7 @@
 import io.netty.handler.codec.http.multipart.HttpData;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import reactor.core.publisher.UnicastProcessor;
+import reactor.core.publisher.Sinks;
 
 import java.io.IOException;
 import java.io.RandomAccessFile;
@@ -48,7 +48,7 @@ public class HttpDataReference {
 
     private static final Logger LOG = LoggerFactory.getLogger(HttpDataReference.class);
 
-    final AtomicReference<UnicastProcessor> subject = new AtomicReference<>();
+    final AtomicReference<Sinks.Many<Object>> subject = new AtomicReference<>();
     final AtomicReference<StreamingFileUpload> upload = new AtomicReference<>();
 
     private final HttpData data;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -679,7 +679,7 @@ public void onApplicationEvent(RefreshEvent event) {
      * Negotiates with the browser if HTTP2 or HTTP is going to be used. Once decided, the Netty
      * pipeline is setup with the correct handlers for the selected protocol.
      *
-     * @implNote Unfortunately, this handler cannot be {@link io.netty.channel.ChannelHandler.Sharable shared} because
+     * This handler cannot be {@link io.netty.channel.ChannelHandler.Sharable shared} because
      * {@link ApplicationProtocolNegotiationHandler} does not support it.
      */
     private final class Http2OrHttpHandler extends ApplicationProtocolNegotiationHandler {

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/JavaFileObjectClassLoader.java
Patch:
@@ -33,7 +33,9 @@
  * A custom classloader that loads from JavaFileObject instances.
  */
 final class JavaFileObjectClassLoader extends ClassLoader {
+
     private final Collection<JavaFileObject> files = new ArrayList<>();
+
     public JavaFileObjectClassLoader(Iterable<? extends JavaFileObject> files) {
         for (JavaFileObject file : files) {
             this.files.add(file);

File: jackson-core/src/main/java/io/micronaut/jackson/core/tree/TreeGenerator.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.ArrayList;
 import java.util.Deque;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -389,7 +390,7 @@ public JsonNode build() {
     }
 
     private class ObjectBuilder implements StructureBuilder {
-        final Map<String, JsonNode> values = new HashMap<>();
+        final Map<String, JsonNode> values = new LinkedHashMap<>();
         String currentFieldName = null;
 
         @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -74,7 +74,7 @@
  * @since 1.0
  */
 @Internal
-@SupportedOptions({AbstractInjectAnnotationProcessor.MICRONAUT_PROCESSING_INCREMENTAL, AbstractInjectAnnotationProcessor.MICRONAUT_PROCESSING_ANNOTATIONS})
+@SupportedOptions({AbstractInjectAnnotationProcessor.MICRONAUT_PROCESSING_INCREMENTAL, AbstractInjectAnnotationProcessor.MICRONAUT_PROCESSING_ANNOTATIONS, BeanDefinitionWriter.OMIT_CONFPROP_INJECTION_POINTS})
 public class BeanDefinitionInjectProcessor extends AbstractInjectAnnotationProcessor {
 
     private static final String AROUND_TYPE = AnnotationUtil.ANN_AROUND;

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -271,6 +271,7 @@ public void visitMethod(TypedElement declaringType,
 
             for (ParameterElement pe : argumentTypes) {
                 DefaultAnnotationMetadata.contributeDefaults(this.annotationMetadata, pe.getAnnotationMetadata());
+                DefaultAnnotationMetadata.contributeRepeatable(this.annotationMetadata, pe.getGenericType());
             }
             // now invoke super(..) if no arg constructor
             invokeConstructor(

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -94,7 +94,7 @@ public class NettyHttpRequest<T> extends AbstractNettyHttpRequest<T> implements
     private MutableConvertibleValues<Object> attributes;
     private NettyCookies nettyCookies;
     private List<ByteBufHolder> receivedContent = new ArrayList<>();
-    private Map<Integer, AbstractHttpData> receivedData = new LinkedHashMap<>();
+    private Map<IdentityWrapper, AbstractHttpData> receivedData = new LinkedHashMap<>();
 
     private Supplier<Optional<T>> body;
     private RouteMatch<?> matchedRoute;
@@ -345,7 +345,7 @@ public RouteMatch<?> getMatchedRoute() {
     @Internal
     public void addContent(ByteBufHolder httpContent) {
         if (httpContent instanceof AbstractHttpData) {
-            receivedData.computeIfAbsent(System.identityHashCode(httpContent), key -> {
+            receivedData.computeIfAbsent(new IdentityWrapper(httpContent), key -> {
                 httpContent.retain();
                 return (AbstractHttpData) httpContent;
             });

File: inject-java-test/src/main/java/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -282,11 +282,12 @@ public Iterable<? extends JavaFileObject> generate(JavaFileObject... sources) {
 
     private Set<String> getCompilerOptions() {
         Set<String> options;
-        if (Jvm.getCurrent().isJava15Compatible()) {
+        final Jvm jvm = Jvm.getCurrent();
+        if (jvm.isJava15Compatible() && !jvm.isJava17Compatible()) {
             options = CollectionUtils.setOf(
                     "--enable-preview",
                     "-source",
-                    Jvm.getCurrent().getJavaSpecificationVersion()
+                    jvm.getJavaSpecificationVersion()
             );
         } else {
             options = Collections.emptySet();

File: test-suite/src/test/java/io/micronaut/docs/server/body/MessageController.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.http.annotation.Post;
 import javax.validation.constraints.Size;
 // end::imports[]
-// end::importsreactive[]
+// tag::importsreactive[]
 import org.reactivestreams.Publisher;
 import reactor.core.publisher.Flux;
 import io.micronaut.core.async.annotation.SingleResult;

File: test-suite/src/test/java/io/micronaut/docs/streaming/HeadlineClient.java
Patch:
@@ -33,4 +33,7 @@ public interface HeadlineClient {
 
     @Get(value = "/headlines", processes = APPLICATION_JSON_STREAM) // <1>
     Publisher<Headline> streamFlux();
+
+// tag::endclass[]
 }
+// end::endclass[]

File: runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java
Patch:
@@ -38,7 +38,7 @@ public final class HeartbeatDiscoveryClientCondition implements Condition {
     public boolean matches(ConditionContext context) {
         final boolean hasDiscovery = context.getBeanContext().getBeanDefinitions(DiscoveryClient.class)
                 .stream()
-                .filter(bd -> bd.getBeanType() != (Class<?>) CompositeDiscoveryClient.class)
+                .filter(bd -> !CompositeDiscoveryClient.class.isAssignableFrom(bd.getBeanType()))
                 .findFirst()
                 .isPresent();
         if (hasDiscovery) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -504,7 +504,7 @@ private int bindServerToHost(ServerBootstrap serverBootstrap, @Nullable String h
             final boolean isBindError = e instanceof BindException;
             if (LOG.isErrorEnabled()) {
                 if (isBindError) {
-                    LOG.error("Unable to start server. Port already {} in use.", port);
+                    LOG.error("Unable to start server. Port {} already in use.", port);
                 } else {
                     LOG.error("Error starting Micronaut server: " + e.getMessage(), e);
                 }

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequest.java
Patch:
@@ -52,7 +52,6 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.charset.Charset;
-import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Optional;

File: inject/src/main/java/io/micronaut/context/scope/AbstractConcurrentCustomScope.java
Patch:
@@ -218,7 +218,7 @@ public final <T> Optional<BeanRegistration<T>> findBeanRegistration(T bean) {
             final Map<BeanIdentifier, CreatedBean<?>> scopeMap;
             try {
                 scopeMap = getScopeMap(false);
-            } catch (IllegalStateException e) {
+            } catch (Exception e) {
                 return Optional.empty();
             }
             for (CreatedBean<?> createdBean : scopeMap.values()) {

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -270,7 +270,7 @@ public DefaultHttpClient(@Nullable LoadBalancer loadBalancer,
             @Nullable AnnotationMetadataResolver annotationMetadataResolver,
             List<InvocationInstrumenterFactory> invocationInstrumenterFactories,
             HttpClientFilter... filters) {
-        this(loadBalancer, io.micronaut.http.HttpVersion.HTTP_1_1, configuration, contextPath, new DefaultHttpClientFilterResolver(annotationMetadataResolver, Arrays.asList(filters)), null, threadFactory, nettyClientSslBuilder, codecRegistry, WebSocketBeanRegistry.EMPTY, new DefaultRequestBinderRegistry(ConversionService.SHARED), null, NioSocketChannel::new, invocationInstrumenterFactories);
+        this(loadBalancer, configuration.getHttpVersion(), configuration, contextPath, new DefaultHttpClientFilterResolver(annotationMetadataResolver, Arrays.asList(filters)), null, threadFactory, nettyClientSslBuilder, codecRegistry, WebSocketBeanRegistry.EMPTY, new DefaultRequestBinderRegistry(ConversionService.SHARED), null, NioSocketChannel::new, invocationInstrumenterFactories);
     }
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -78,7 +78,6 @@
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.micronaut.http.netty.NettyHttpRequestBuilder;
 import io.micronaut.http.netty.NettyHttpResponseBuilder;
-import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.channel.ChannelPipelineListener;
 import io.micronaut.http.netty.channel.NettyThreadFactory;

File: jackson-databind/src/main/java/io/micronaut/jackson/databind/JacksonDatabindMapper.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.type.Argument;
 import io.micronaut.jackson.JacksonConfiguration;
+import io.micronaut.jackson.ObjectMapperFactory;
 import io.micronaut.jackson.codec.JacksonFeatures;
 import io.micronaut.jackson.core.tree.JsonNodeTreeCodec;
 import io.micronaut.jackson.core.tree.TreeGenerator;
@@ -69,7 +70,7 @@ public JacksonDatabindMapper(ObjectMapper objectMapper) {
 
     @Internal
     public JacksonDatabindMapper() {
-        this(new ObjectMapper());
+        this(new ObjectMapperFactory().objectMapper(null, null));
     }
 
     @Internal

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospection.java
Patch:
@@ -287,7 +287,7 @@ protected final void indexProperty(@NonNull Class<? extends Annotation> annotati
     protected final void indexProperty(
             @NonNull Class<? extends Annotation> annotationType,
             @NonNull String propertyName,
-            @NonNull String annotationValue) {
+            @Nullable String annotationValue) {
         indexProperty(annotationType, propertyName);
         if (StringUtils.isNotEmpty(annotationValue) && StringUtils.isNotEmpty(propertyName)) {
             if (indexedValues == null) {

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -110,8 +110,6 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O
      */
     private static final MediaType[] DEFAULT_ACCEPT_TYPES = {MediaType.APPLICATION_JSON_TYPE};
 
-    private static final int HEADERS_INITIAL_CAPACITY = 3;
-    private static final int ATTRIBUTES_INITIAL_CAPACITY = 1;
     private final List<ReactiveClientResultTransformer> transformers;
     private final HttpClientBinderRegistry binderRegistry;
     private final JsonMediaTypeCodec jsonMediaTypeCodec;

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1343,7 +1343,7 @@ protected <I> Publisher<URI> resolveRedirectURI(io.micronaut.http.HttpRequest<?>
             // if the request URI includes a scheme then it is fully qualified so use the direct server
             return Flux.just(requestURI);
         } else {
-            if (parentRequest == null) {
+            if (parentRequest == null || parentRequest.getUri().getHost() == null) {
                 return resolveURI(request, false);
             } else {
                 URI parentURI = parentRequest.getUri();
@@ -2125,13 +2125,11 @@ public void onSubscribe(Subscription s) {
                                 @Override
                                 public void onNext(io.micronaut.http.HttpResponse<Object> objectHttpResponse) {
                                     emitter.next(objectHttpResponse);
-                                    sub.cancel();
                                 }
 
                                 @Override
                                 public void onError(Throwable t) {
                                     emitter.error(t);
-                                    sub.cancel();
                                 }
 
                                 @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -904,7 +904,8 @@ public void upgradeTo(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest)
                     final HttpServerCodec sourceCodec = http2OrHttpHandler.createServerCodec();
                     final HttpServerUpgradeHandler upgradeHandler = new HttpServerUpgradeHandler(
                             sourceCodec,
-                            upgradeCodecFactory
+                            upgradeCodecFactory,
+                            serverConfiguration.getMaxH2cUpgradeRequestSize()
                     );
                     final CleartextHttp2ServerUpgradeHandler cleartextHttp2ServerUpgradeHandler =
                             new CleartextHttp2ServerUpgradeHandler(sourceCodec, upgradeHandler, connectionHandler);

File: aop/src/main/java/io/micronaut/aop/HotSwappableInterceptedProxy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/InterceptPhase.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/Intercepted.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/InterceptedProxy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/Introduced.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/Introduction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -47,6 +47,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@InterceptorBinding(kind = InterceptorKind.INTRODUCTION)
 public @interface Introduction {
 
     /**

File: aop/src/main/java/io/micronaut/aop/exceptions/UnimplementedAdviceException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/exceptions/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/main/java/io/micronaut/aop/writer/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: aop/src/test/groovy/io/micronaut/aop/Trace.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/aop/around/AroundCompileBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,6 +20,7 @@
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.BeanDefinition;
+import io.micronaut.inject.writer.BeanDefinitionWriter;
 import org.codehaus.groovy.runtime.IOGroovyMethods;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Scope;
@@ -70,7 +71,7 @@ public void benchmarkCompileAround() {
     }
 
     BeanDefinition buildBeanDefinition(String className, String cls) {
-        String beanDefName= '$' + NameUtils.getSimpleName(className) + "Definition";
+        String beanDefName= '$' + NameUtils.getSimpleName(className) + BeanDefinitionWriter.CLASS_SUFFIX;
         String packageName = NameUtils.getPackageName(className);
         String beanFullName = packageName + "." + beanDefName;
 

File: benchmarks/src/jmh/java/io/micronaut/context/env/PropertySourcePropertyResolverBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/core/annotation/AnnotationValueBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/core/annotation/beans/TestIntroduction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/core/annotation/beans/introduction/Stub.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/core/convert/ConversionServiceBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/http/server/StartupBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/http/server/binding/RequestArgumentSatisfierBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/src/jmh/java/io/micronaut/http/server/binding/TestController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBuffer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/EmbeddedApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/context/CompositeMessageSource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -21,8 +21,8 @@
 import io.micronaut.core.order.OrderUtil;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Optional;

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationAdvice.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/context/scope/ScopedProxy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,8 +18,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Around;
+import jakarta.inject.Scope;
 
-import javax.inject.Scope;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/event/AbstractEmbeddedApplicationEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/event/ApplicationShutdownEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/event/ApplicationStartupEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/event/annotation/EventListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -45,6 +45,7 @@
 @Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @Adapter(ApplicationEventListener.class) // <1>
 @Indexed(ApplicationEventListener.class)
+@Inherited
 public @interface EventListener {
 }
 // end::clazz[]

File: context/src/main/java/io/micronaut/runtime/exceptions/ApplicationStartupException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/server/EmbeddedServer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/server/event/ServerShutdownEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/server/event/ServerStartupEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/runtime/server/watch/event/FileWatchRestartListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -21,11 +21,10 @@
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.micronaut.scheduling.io.watch.FileWatchConfiguration;
 import io.micronaut.scheduling.io.watch.event.FileChangedEvent;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Singleton;
-
 /**
  * Listener that stops the server if a file changes. Relies on external service like {@code gradle run --continuous} or Kubernetes replication controller is required to restart the container.
  *

File: context/src/main/java/io/micronaut/scheduling/NextFireTime.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/ReschedulingTask.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/TaskExceptionHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/TaskExecutors.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/TaskScheduler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,7 @@
  */
 package io.micronaut.scheduling;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.time.Duration;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ScheduledFuture;

File: context/src/main/java/io/micronaut/scheduling/annotation/Async.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/annotation/ExecuteOn.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/annotation/Scheduled.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -70,7 +70,7 @@
     String fixedRate() default "";
 
     /**
-     * @return The name of a {@link javax.inject.Named} bean that is a
+     * @return The name of a {@link jakarta.inject.Named} bean that is a
      * {@link java.util.concurrent.ScheduledExecutorService} to use to schedule the task
      */
     String scheduler() default TaskExecutors.SCHEDULED;

File: context/src/main/java/io/micronaut/scheduling/annotation/Schedules.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/exceptions/SchedulerConfigurationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/exceptions/TaskExecutionException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/executor/DefaultThreadFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,8 +17,8 @@
 
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 

File: context/src/main/java/io/micronaut/scheduling/executor/ExecutorType.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/executor/ThreadSelection.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/instrument/InstrumentedExecutorService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,7 @@
  */
 package io.micronaut.scheduling.instrument;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.*;

File: context/src/main/java/io/micronaut/scheduling/instrument/InstrumentedScheduledExecutorService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,7 @@
  */
 package io.micronaut.scheduling.instrument;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;

File: context/src/main/java/io/micronaut/scheduling/instrument/InvocationInstrumenterWrappedCallable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -36,7 +36,7 @@ final class InvocationInstrumenterWrappedCallable<V> implements Callable<V> {
      * @param invocationInstrumenter instrumenter to be invoked
      * @param callable               original callable
      */
-    public InvocationInstrumenterWrappedCallable(InvocationInstrumenter invocationInstrumenter, Callable<V> callable) {
+    InvocationInstrumenterWrappedCallable(InvocationInstrumenter invocationInstrumenter, Callable<V> callable) {
         this.invocationInstrumenter = invocationInstrumenter;
         this.callable = callable;
     }

File: context/src/main/java/io/micronaut/scheduling/instrument/InvocationInstrumenterWrappedRunnable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/io/watch/FileWatchConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.Toggleable;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.Duration;

File: context/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/main/java/io/micronaut/scheduling/io/watch/event/WatchEventType.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/OverloadedListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ShutdownEvent;
 import io.micronaut.context.event.StartupEvent;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class OverloadedListener {

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/TestListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.event.StartupEvent;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class TestListener {

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/itfce/DefaultThingService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,8 +17,8 @@
 
 import io.micronaut.context.event.ApplicationEventPublisher;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import java.util.ArrayList;
 import java.util.List;
 

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/itfce/ThingCreatedEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/itfce/ThingCreatedEventListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/BeanAndTypeSpecificHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.scheduling.TaskExceptionHandler;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class BeanAndTypeSpecificHandler implements TaskExceptionHandler<ThrowsExceptionJob1, InstantiationException> {

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/InjectExceptionJob.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "injection-exception.task.enabled", value = "true")

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/NotInjectable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob1.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob2.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task2.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob3.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task3.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/TypeSpecificHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.scheduling.TaskExceptionHandler;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class TypeSpecificHandler implements TaskExceptionHandler<Object, InstantiationException> {

File: core-reactive/src/main/java/io/micronaut/core/async/annotation/SingleResult.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -31,6 +32,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
+@Inherited
 public @interface SingleResult {
     /**
      * The class name.

File: core-reactive/src/main/java/io/micronaut/core/async/processor/SingleSubscriberProcessor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/processor/SingleThreadedBufferingProcessor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/publisher/SingleSubscriberPublisher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/subscriber/Completable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/subscriber/CompletionAwareSubscriber.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/subscriber/Emitter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core-reactive/src/main/java/io/micronaut/core/async/subscriber/TypedSubscriber.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/AnnotatedElement.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/AnnotatedTypeInfo.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/AnnotationClassValue.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,8 +17,6 @@
 
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.util.ArgumentUtils;
-
-import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Objects;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/annotation/Blocking.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -28,5 +29,6 @@
  */
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface Blocking {
 }

File: core/src/main/java/io/micronaut/core/annotation/Creator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/EntryPoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,5 +31,6 @@
 @Target({ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Experimental
+@Inherited
 public @interface EntryPoint {
 }

File: core/src/main/java/io/micronaut/core/annotation/Experimental.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/Generated.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/Indexed.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -30,6 +30,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Repeatable(value = Indexes.class)
+@Inherited
 public @interface Indexed {
     /**
      * @return The indexed type

File: core/src/main/java/io/micronaut/core/annotation/Indexes.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -26,6 +26,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
+@Inherited
 public @interface Indexes {
     /**
      * @return A group of indexes

File: core/src/main/java/io/micronaut/core/annotation/InstantiatedMember.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/Internal.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
@@ -27,5 +28,6 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Inherited
 public @interface Internal {
 }

File: core/src/main/java/io/micronaut/core/annotation/NonBlocking.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -28,5 +29,6 @@
  */
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface NonBlocking {
 }

File: core/src/main/java/io/micronaut/core/annotation/TypeHint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/UsedByGeneratedCode.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/annotation/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/attr/AttributeHolder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Optional;
 
 /**

File: core/src/main/java/io/micronaut/core/attr/MutableAttributeHolder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,8 +15,8 @@
  */
 package io.micronaut.core.attr;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 

File: core/src/main/java/io/micronaut/core/attr/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospectionReference.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.UsedByGeneratedCode;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 
 /**

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionMap.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -19,7 +19,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.util.CollectionUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionReference.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.naming.Named;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * A reference to a {@link BeanIntrospection} that may or may not be present on the classpath.

File: json-core/src/main/java/io/micronaut/json/convert/JsonConverterRegistrar.java
Patch:
@@ -35,6 +35,7 @@
 import jakarta.inject.Singleton;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -207,7 +208,7 @@ protected TypeConverter<JsonNode, Object> jsonNodeToObjectConverter() {
         return (node, targetType, context) -> {
             try {
                 if (CharSequence.class.isAssignableFrom(targetType) && node.isObject()) {
-                    return Optional.of(node.toString());
+                    return Optional.of(new String(objectCodec.get().writeValueAsBytes(node), StandardCharsets.UTF_8));
                 } else {
                     Argument<?> argument = null;
                     if (context instanceof ArgumentConversionContext && targetType.getTypeParameters().length != 0) {

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -306,6 +306,7 @@ public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOE
 
             // write the reference
             writeIntrospectionReference(classWriterOutputVisitor);
+            loadTypeMethods.clear();
             // write the introspection
             writeIntrospectionClass(classWriterOutputVisitor);
 

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -2228,7 +2228,7 @@ private <I> void prepareHttpHeaders(
     }
 
     /**
-     * Note: caller must ensure this is only called for plaintext HTTP, not TLS HTTP2
+     * Note: caller must ensure this is only called for plaintext HTTP, not TLS HTTP2.
      */
     private boolean discardH2cStream(HttpMessage message) {
         // only applies to h2c

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerSubscriber.java
Patch:
@@ -172,7 +172,8 @@ public void onNext(T t) {
     }
 
     /**
-     * Write the message with the supplied promise
+     * Write the message with the supplied promise.
+     *
      * @param t The message
      * @param promise The promise
      */

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/utils/InMemoryByteCodeGroovyClassLoader.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.stream.Collectors;
 
 /**
  * Extended version of {@link GroovyClassLoader} that can be used to test dependency injection compilation.

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -986,7 +986,7 @@ void visitBeanFactoryElement(Element element) {
                 return;
             }
 
-            if (isPrimitive ) {
+            if (isPrimitive) {
                 PrimitiveType pt = (PrimitiveType) producedType;
                 producedTypeName = pt.toString();
                 methodAnnotationMetadata = annotationUtils.newAnnotationBuilder().build(element);

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -73,9 +73,8 @@ public JavaClassElement(TypeElement classElement, AnnotationMetadata annotationM
         this(classElement, annotationMetadata, visitorContext, Collections.emptyList(), null, 0, false);
     }
 
-
     /**
-     * Used by OpenAPI
+     * Used by OpenAPI.
      *
      * @param classElement       The {@link TypeElement}
      * @param annotationMetadata The annotation metadata

File: aop/src/main/java/io/micronaut/aop/chain/AbstractInterceptorChain.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableArgumentValue;
@@ -122,7 +123,7 @@ public Class<Object> getType() {
                             }
 
                             @Override
-                            public boolean equalsType(Argument<?> other) {
+                            public boolean equalsType(@Nullable Argument<?> other) {
                                 return argument.equalsType(other);
                             }
 

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -133,7 +133,7 @@ public interface Argument<T> extends TypeInformation<T>, AnnotatedElement, Type
      * @param other The type type
      * @return True if they are equal
      */
-    boolean equalsType(Argument<?> other);
+    boolean equalsType(@Nullable Argument<?> other);
 
     /**
      * The hash code including only the types. The regular {@link Object#hashCode()} implementation includes the

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;
 
@@ -228,7 +229,7 @@ public String toString() {
     }
 
     @Override
-    public boolean equalsType(Argument<?> o) {
+    public boolean equalsType(@Nullable Argument<?> o) {
         if (this == o) {
             return true;
         }

File: core/src/main/java/io/micronaut/core/type/DefaultArgumentValue.java
Patch:
@@ -103,7 +103,7 @@ public Annotation[] synthesizeDeclared() {
     }
 
     @Override
-    public boolean equalsType(Argument<?> o) {
+    public boolean equalsType(@Nullable Argument<?> o) {
         return argument.equalsType(o);
     }
 

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientFactory.java
Patch:
@@ -49,5 +49,5 @@ public interface HttpClientFactory {
      * @since 2.2.0
      */
     @NonNull
-    HttpClient createClient(@Nullable URL url, HttpClientConfiguration configuration);
+    HttpClient createClient(@Nullable URL url, @NonNull HttpClientConfiguration configuration);
 }

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyHttpClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.client;
 
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
@@ -37,7 +38,7 @@ public interface ProxyHttpClient {
      * @param request The request
      * @return A publisher that emits the response.
      */
-    Publisher<MutableHttpResponse<?>> proxy(HttpRequest<?> request);
+    Publisher<MutableHttpResponse<?>> proxy(@NonNull HttpRequest<?> request);
 
     /**
      * Create a new {@link ProxyHttpClient}.
@@ -62,7 +63,7 @@ static ProxyHttpClient create(@Nullable URL url) {
      * @return The client
      * @since 2.2.0
      */
-    static ProxyHttpClient create(@Nullable URL url, HttpClientConfiguration configuration) {
+    static ProxyHttpClient create(@Nullable URL url, @NonNull HttpClientConfiguration configuration) {
         return ProxyHttpClientFactoryResolver.getFactory().createProxyClient(url, configuration);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/ProxyHttpClientFactory.java
Patch:
@@ -49,6 +49,6 @@ public interface ProxyHttpClientFactory {
      * @since 2.2.0
      */
     @NonNull
-    ProxyHttpClient createProxyClient(@Nullable URL url, HttpClientConfiguration configuration);
+    ProxyHttpClient createProxyClient(@Nullable URL url, @NonNull HttpClientConfiguration configuration);
 
 }

File: http-client-core/src/main/java/io/micronaut/http/client/StreamingHttpClientFactory.java
Patch:
@@ -49,6 +49,6 @@ public interface StreamingHttpClientFactory {
      * @since 2.2.0
      */
     @NonNull
-    StreamingHttpClient createStreamingClient(@Nullable URL url, HttpClientConfiguration configuration);
+    StreamingHttpClient createStreamingClient(@Nullable URL url, @NonNull HttpClientConfiguration configuration);
 
 }

File: http-client-core/src/main/java/io/micronaut/http/client/sse/SseClientFactory.java
Patch:
@@ -50,6 +50,6 @@ public interface SseClientFactory {
      * @since 2.2.0
      */
     @NonNull
-    SseClient createSseClient(@Nullable URL url, HttpClientConfiguration configuration);
+    SseClient createSseClient(@Nullable URL url, @NonNull HttpClientConfiguration configuration);
 
 }

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -85,8 +85,7 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
             FullHttpResponse fullHttpResponse,
             HttpStatus httpStatus,
             MediaTypeCodecRegistry mediaTypeCodecRegistry,
-            ByteBufferFactory<ByteBufAllocator,
-            ByteBuf> byteBufferFactory,
+            ByteBufferFactory<ByteBufAllocator, ByteBuf> byteBufferFactory,
             Argument<B> bodyType,
             boolean convertBody) {
 

File: inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java
Patch:
@@ -71,7 +71,7 @@ public Class<T> getType() {
     }
 
     @Override
-    public boolean equalsType(Argument<?> other) {
+    public boolean equalsType(@Nullable Argument<?> other) {
         return argument.equals(other);
     }
 

File: websocket/src/main/java/io/micronaut/websocket/WebSocketClientFactory.java
Patch:
@@ -49,6 +49,6 @@ public interface WebSocketClientFactory {
      * @return The client
      */
     @NonNull
-    WebSocketClient createWebSocketClient(@Nullable URL url,  HttpClientConfiguration configuration);
+    WebSocketClient createWebSocketClient(@Nullable URL url, @NonNull HttpClientConfiguration configuration);
 
 }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyElementFactory.java
Patch:
@@ -57,6 +57,8 @@ public ClassElement newClassElement(@NonNull ClassNode classNode, @NonNull Annot
             return new GroovyEnumElement(visitorContext, classNode, annotationMetadata);
         } else if (classNode.isAnnotationDefinition()) {
             return new GroovyAnnotationElement(visitorContext, classNode, annotationMetadata);
+        } else if (classNode.isGenericsPlaceHolder()) {
+            return new GroovyGenericPlaceholderElement(visitorContext, classNode, annotationMetadata, 0);
         } else {
             return new GroovyClassElement(visitorContext, classNode, annotationMetadata);
         }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaEnumElement.java
Patch:
@@ -50,7 +50,7 @@ class JavaEnumElement extends JavaClassElement implements EnumElement {
      * @param arrayDimensions    The number of array dimensions
      */
     JavaEnumElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext, int arrayDimensions) {
-        super(classElement, annotationMetadata, visitorContext, Collections.emptyMap(), arrayDimensions, false);
+        super(classElement, annotationMetadata, visitorContext, Collections.emptyList(), Collections.emptyMap(), arrayDimensions, false);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/ast/ParameterElement.java
Patch:
@@ -51,8 +51,7 @@ default String getDescription(boolean simple) {
      * @return The parameter element
      */
     static @NonNull ParameterElement of(@NonNull Class<?> type, @NonNull String name) {
-        Objects.requireNonNull(name, "Name cannot be null");
-        return new ReflectParameterElement(ClassElement.of(type), name);
+        return of(ClassElement.of(type), name);
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/ast/TypedElement.java
Patch:
@@ -60,7 +60,7 @@ default boolean isPrimitive() {
      * @return True if it is.
      */
     default boolean isArray() {
-        return false;
+        return getArrayDimensions() != 0;
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -50,8 +50,6 @@
 @Replaces(HttpServerConfiguration.class)
 public class NettyHttpServerConfiguration extends HttpServerConfiguration {
 
-    private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServerConfiguration.class);
-
     /**
      * The default use netty's native transport flag.
      */
@@ -112,6 +110,8 @@ public class NettyHttpServerConfiguration extends HttpServerConfiguration {
     @SuppressWarnings("WeakerAccess")
     public static final boolean DEFAULT_KEEP_ALIVE_ON_SERVER_ERROR = false;
 
+    private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServerConfiguration.class);
+
     private final List<ChannelPipelineListener> pipelineCustomizers;
 
     private Map<ChannelOption, Object> childOptions = Collections.emptyMap();

File: json-core/src/main/java/io/micronaut/json/convert/JsonConverterRegistrar.java
Patch:
@@ -210,7 +210,7 @@ protected TypeConverter<JsonNode, Object> jsonNodeToObjectConverter() {
                     return Optional.of(node.toString());
                 } else {
                     Argument<?> argument = null;
-                    if (node.isContainerNode() && context instanceof ArgumentConversionContext && targetType.getTypeParameters().length != 0) {
+                    if (context instanceof ArgumentConversionContext && targetType.getTypeParameters().length != 0) {
                         argument = ((ArgumentConversionContext<?>) context).getArgument();
                     }
                     if (argument == null) {

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -105,9 +105,9 @@ public class DefaultConstraintValidators implements ConstraintValidatorRegistry
             );
 
             if (value instanceof BigInteger) {
-                return ((BigInteger) value).compareTo(BigInteger.valueOf(max)) < 0;
+                return ((BigInteger) value).compareTo(BigInteger.valueOf(max)) <= 0;
             } else if (value instanceof BigDecimal) {
-                return ((BigDecimal) value).compareTo(BigDecimal.valueOf(max)) < 0;
+                return ((BigDecimal) value).compareTo(BigDecimal.valueOf(max)) <= 0;
             }
             return value.longValue() <= max;
         };

File: tracing/src/main/java/io/micronaut/tracing/annotation/ContinueSpan.java
Patch:
@@ -36,7 +36,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-@Target(value = { ElementType.METHOD })
+@Target(value = { ElementType.METHOD, ElementType.ANNOTATION_TYPE })
 @Around
 @Type(TraceInterceptor.class)
 public @interface ContinueSpan {

File: tracing/src/main/java/io/micronaut/tracing/annotation/NewSpan.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-@Target(value = { ElementType.METHOD })
+@Target(value = { ElementType.METHOD, ElementType.ANNOTATION_TYPE })
 @Around
 @Type(TraceInterceptor.class)
 public @interface NewSpan {

File: tracing/src/main/java/io/micronaut/tracing/annotation/SpanTag.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-@Target(value = { ElementType.PARAMETER })
+@Target(value = { ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })
 public @interface SpanTag {
 
     /**

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
-import io.micronaut.core.convert.format.Format;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.CollectionUtils;
@@ -45,7 +44,6 @@
 import io.micronaut.http.client.bind.binders.VersionClientRequestBinder;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.Cookies;
-import io.micronaut.http.uri.UriMatchVariable;
 import jakarta.inject.Singleton;
 import kotlin.coroutines.Continuation;
 

File: http-client-core/src/main/java/io/micronaut/http/client/bind/binders/QueryValueClientArgumentRequestBinder.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.client.bind.binders;
 
 import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -27,8 +27,6 @@
 import io.micronaut.http.context.event.HttpRequestTerminatedEvent;
 import io.micronaut.inject.BeanIdentifier;
 import jakarta.inject.Singleton;
-
-import java.util.Collections;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -451,7 +451,7 @@ protected List<PropertySource> readPropertySourceListFromFiles(String files) {
                             }
                             order++;
                         } else {
-                            throw new ConfigurationException("Unsupported properties file format: " + filePath);
+                            throw new ConfigurationException("Unsupported properties file format while reading " + fileName + "." + extension + " from " + filePath);
                         }
                     }
                 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessor.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micronaut.http.server.netty;
 
+import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.util.Toggleable;
 import io.netty.buffer.ByteBufHolder;
-import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 
 /**
@@ -28,5 +28,5 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface HttpContentProcessor<T> extends Publisher<T>, Subscriber<ByteBufHolder>, Toggleable {
+public interface HttpContentProcessor<T> extends Publishers.MicronautPublisher<T>, Subscriber<ByteBufHolder>, Toggleable {
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/InputStreamBodyBinder.java
Patch:
@@ -60,6 +60,7 @@ public class InputStreamBodyBinder implements NonBlockingBodyArgumentBinder<Inpu
 
     /**
      * @param processorResolver The http content processor resolver
+     * @param executorService  The executor service to use
      */
     public InputStreamBodyBinder(HttpContentProcessorResolver processorResolver,
                                  ExecutorService executorService) {

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -117,8 +117,9 @@ protected Optional<Object> getValueForArgument(Argument argument, HttpRequest<?>
 
                     if (bindingResult.isPresentAndSatisfied()) {
                         value = bindingResult.get();
+                    } else if (bindingResult.isSatisfied() && argument.isNullable()) {
+                        value = NullArgument.INSTANCE;
                     }
-
                 } else {
                     value = getValueForBlockingBodyArgumentBinder(request, argumentBinder, conversionContext);
                 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -270,6 +270,7 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
             } finally {
                 AnnotationUtils.invalidateCache();
                 AbstractAnnotationMetadataBuilder.clearMutated();
+                JavaAnnotationMetadataBuilder.clearCaches();
             }
         }
 

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshEventListener.java
Patch:
@@ -32,7 +32,7 @@
 public interface RefreshEventListener extends ApplicationEventListener<RefreshEvent>, Ordered {
 
     /**
-     * The default position as defined by {@link io.micronaut.core.order.Ordered#getOrder()}
+     * The default position as defined by {@link io.micronaut.core.order.Ordered#getOrder()}.
      */
     int DEFAULT_POSITION = Ordered.HIGHEST_PRECEDENCE + 200;
 

File: http-client-core/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -57,6 +57,7 @@
     @AliasFor(member = "value") // <2>
     String id() default "";
 // end::value[]
+
     /**
      * The base URI for the client. Only to be used in
      * conjunction with {@link #id()}.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessorResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.server.netty;
 
 import io.micronaut.context.annotation.DefaultImplementation;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.type.Argument;
 import io.micronaut.web.router.RouteMatch;
@@ -28,6 +29,7 @@
  * @since 1.3.0
  */
 @DefaultImplementation(DefaultHttpContentProcessorResolver.class)
+@Internal
 public interface HttpContentProcessorResolver {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/StreamTypeHandler.java
Patch:
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty.types.stream;
+package io.micronaut.http.server.netty;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandler;
+import io.micronaut.http.server.netty.types.stream.NettyStreamedCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
 import io.netty.channel.ChannelHandlerContext;
-import jakarta.inject.Singleton;
 
 import java.io.InputStream;
 import java.util.Arrays;
@@ -32,7 +32,6 @@
  * @author James Kleeh
  * @since 2.5.0
  */
-@Singleton
 @Internal
 class StreamTypeHandler implements NettyCustomizableResponseTypeHandler<Object> {
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -33,6 +33,7 @@
 import io.netty.buffer.ByteBufHolder;
 import io.netty.buffer.EmptyByteBuf;
 import io.netty.util.ReferenceCounted;
+import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -46,6 +47,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {
 
     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandlerConfiguration.java
Patch:
@@ -25,6 +25,7 @@
  * @since 1.0
  */
 @ConfigurationProperties("netty.responses.file")
+@Deprecated
 public class FileTypeHandlerConfiguration {
 
     /**
@@ -71,6 +72,7 @@ public void setCacheControl(CacheControlConfiguration cacheControl) {
      * Configuration for the Cache-Control header.
      */
     @ConfigurationProperties("cache-control")
+    @Deprecated
     public static class CacheControlConfiguration {
 
         private static final boolean DEFAULT_PUBLIC_CACHE = false;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/stream/NettyStreamedCustomizableResponseType.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.netty.types.stream;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.AbstractNettyHttpRequest;
@@ -41,6 +42,7 @@
  * @author James Kleeh
  * @since 2.5.0
  */
+@Internal
 public interface NettyStreamedCustomizableResponseType extends NettyCustomizableResponseType {
 
     Logger LOG = LoggerFactory.getLogger(NettyStreamedCustomizableResponseType.class);

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -155,7 +155,7 @@ public HttpServerConfiguration(ApplicationConfiguration applicationConfiguration
             this.defaultCharset = applicationConfiguration.getDefaultCharset();
         }
 
-        this.applicationConfiguration = applicationConfiguration;
+        this.applicationConfiguration = applicationConfiguration != null ? applicationConfiguration : new ApplicationConfiguration();
     }
 
     /**

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -77,7 +77,7 @@ protected Map<BeanIdentifier, CreatedBean<?>> getScopeMap(boolean forCreation) {
             //noinspection ConstantConditions
             return getRequestAttributeMap(request, forCreation);
         } else {
-            return Collections.emptyMap();
+            throw new IllegalStateException("No request present");
         }
     }
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetClient.java
Patch:
@@ -17,6 +17,7 @@
 
 // tag::imports[]
 import io.micronaut.http.client.annotation.Client;
+import org.reactivestreams.Publisher;
 import reactor.core.publisher.Mono;
 // end::imports[]
 
@@ -30,6 +31,6 @@
 public interface PetClient extends PetOperations { // <2>
 
     @Override
-    Mono<Pet> save(String name, int age); // <3>
+    Publisher<Pet> save(String name, int age); // <3>
 }
 // end::class[]

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/compose/CompositionTest.java
Patch:
@@ -16,8 +16,8 @@
 package io.micronaut.inject.qualifiers.compose;
 
 import io.micronaut.context.BeanContext;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import spock.lang.Issue;
 
 public class CompositionTest {
@@ -27,7 +27,7 @@ public class CompositionTest {
     public void testComposition() {
         try (final BeanContext context = BeanContext.run()) {
             final int result = context.getBean(Thing.class).getNumber();
-            Assert.assertEquals("Should have resolved 3 candidates for annotation qualifier", 3, result);
+            Assertions.assertEquals(3, result, "Should have resolved 3 candidates for annotation qualifier");
         }
     }
 }

File: router/src/test/groovy/io/micronaut/context/router/RouteBuilderTests.java
Patch:
@@ -21,15 +21,15 @@
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
-import org.junit.Test;
 import io.micronaut.web.router.*;
 
 import jakarta.inject.Inject;
 import jakarta.inject.Singleton;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
-import static org.junit.Assert.*;
 /**
  * @author Graeme Rocher
  * @since 1.0
@@ -45,7 +45,6 @@ public void testRouterBuilder() {
         routeBuilder.someRoutes(new BookController(), new AuthorController());
         List<UriRoute> builtRoutes = routeBuilder.getUriRoutes();
         Router router = new DefaultRouter(routeBuilder);
-
         // test invoking routes
         assertTrue(router.GET("/books/1").isPresent());
 

File: inject-java/src/test/groovy/io/micronaut/aop/simple/Mutating.java
Patch:
@@ -36,7 +36,7 @@
 @Type(ArgMutatingInterceptor.class)
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.METHOD, ElementType.TYPE})
+@Target({ElementType.METHOD, ElementType.TYPE, ElementType.FIELD})
 @Inherited
 public @interface Mutating {
     String value();

File: inject/src/main/java/io/micronaut/inject/writer/AbstractBeanDefinitionBuilder.java
Patch:
@@ -163,9 +163,8 @@ private static void writeBeanDefinition(ClassWriterOutputVisitor classWriterOutp
         final BeanDefinitionWriter beanDefinitionWriter = beanDefinitionBuilder.build();
         if (beanDefinitionWriter != null) {
             beanDefinitionWriter.accept(classWriterOutputVisitor);
-            String beanTypeName = beanDefinitionWriter.getBeanTypeName();
             BeanDefinitionReferenceWriter beanDefinitionReferenceWriter =
-                    new BeanDefinitionReferenceWriter(beanTypeName, beanDefinitionWriter);
+                    new BeanDefinitionReferenceWriter(beanDefinitionWriter);
             beanDefinitionReferenceWriter
                     .setRequiresMethodProcessing(beanDefinitionWriter.requiresMethodProcessing());
             beanDefinitionReferenceWriter.accept(classWriterOutputVisitor);

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.LifeCycle;
 import io.micronaut.core.annotation.Nullable;
-import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
@@ -26,6 +25,7 @@
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
 import io.micronaut.http.hateoas.JsonError;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.io.Closeable;
 import java.net.URL;
@@ -152,7 +152,7 @@ default <I, O> Publisher<HttpResponse<O>> exchange(HttpRequest<I> request, Class
      * @return A {@link Publisher} that emits a result of the given type
      */
     default <I, O, E> Publisher<O> retrieve(HttpRequest<I> request, Argument<O> bodyType, Argument<E> errorType) {
-        return Publishers.map(exchange(request, bodyType, errorType), response -> {
+        return Flux.from(exchange(request, bodyType, errorType)).map(response -> {
             if (bodyType.getType() == HttpStatus.class) {
                 return (O) response.getStatus();
             } else {

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -418,7 +418,7 @@ private Publisher httpClientResponsePublisher(HttpClient httpClient, MutableHttp
         Class<?> argumentType = reactiveValueArgument.getType();
         if (Void.class == argumentType || returnType.isVoid()) {
             request.getHeaders().remove(HttpHeaders.ACCEPT);
-            return httpClient.exchange(request, null, errorType);
+            return httpClient.exchange(request, Argument.VOID, errorType);
         } else {
             if (HttpResponse.class.isAssignableFrom(argumentType)) {
                 return httpClient.exchange(request, reactiveValueArgument, errorType);

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1517,7 +1517,8 @@ protected <I, O> Publisher<io.micronaut.http.HttpResponse<O>> applyFilterToRespo
             ClientFilterChain filterChain = buildChain(requestWrapper, filters);
             if (parentRequest != null) {
                 responsePublisher = ServerRequestContext.with(parentRequest, (Supplier<Publisher<io.micronaut.http.HttpResponse<O>>>) () ->
-                        (Publisher<io.micronaut.http.HttpResponse<O>>) filters.get(0).doFilter(request, filterChain));
+                         Flux.from((Publisher<io.micronaut.http.HttpResponse<O>>) filters.get(0).doFilter(request, filterChain))
+                                .contextWrite(ctx-> ctx.put(ServerRequestContext.KEY, parentRequest)));
             } else {
                 responsePublisher = (Publisher<io.micronaut.http.HttpResponse<O>>) filters.get(0)
                         .doFilter(request, filterChain);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.server.netty.multipart;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.naming.NameUtils;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.multipart.CompletedFileUpload;
 import io.netty.buffer.ByteBuf;
@@ -136,7 +137,7 @@ public ByteBuffer getByteBuffer() throws IOException {
 
     @Override
     public Optional<MediaType> getContentType() {
-        return Optional.of(MediaType.of(fileUpload.getContentType()));
+        return Optional.of(new MediaType(fileUpload.getContentType(), NameUtils.extension(fileUpload.getFilename())));
     }
 
     @Override

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -274,7 +274,7 @@ public class MediaType implements CharSequence {
      * PDF: application/pdf.
      */
     public static final MediaType APPLICATION_PDF_TYPE = new MediaType(APPLICATION_PDF);
-    
+
     /**
      * Png Image: image/png.
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -827,6 +827,9 @@ protected void doOnNext(Object message) {
                 @Override
                 protected void doOnError(Throwable t) {
                     s.cancel();
+                    for (UnicastProcessor subject : subjects.values()) {
+                        subject.onError(t);
+                    }
                     emitter.error(t);
                 }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -448,7 +448,7 @@ protected String getAnnotationTypeName(AnnotationMirror annotationMirror) {
     @Override
     protected String getElementName(Element element) {
         if (element instanceof TypeElement) {
-            return ((TypeElement) element).getQualifiedName().toString();
+            return elementUtils.getBinaryName(((TypeElement) element)).toString();
         }
         return element.getSimpleName().toString();
     }

File: http-client-core/src/main/java/io/micronaut/http/client/bind/binders/HeaderClientRequestBinder.java
Patch:
@@ -54,4 +54,4 @@ public void bind(
     public Class<Header> getAnnotationType() {
         return Header.class;
     }
-}
\ No newline at end of file
+}

File: http-client-core/src/main/java/io/micronaut/http/client/bind/binders/VersionClientRequestBinder.java
Patch:
@@ -81,4 +81,4 @@ private ClientVersioningConfiguration getVersioningConfiguration(AnnotationMetad
     private String getClientId(AnnotationMetadata clientAnn) {
         return clientAnn.stringValue(Client.class).orElse(null);
     }
-}
\ No newline at end of file
+}

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationIntroductionAdvice.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.Qualifier;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Property;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.context.env.Environment;
@@ -42,7 +43,9 @@
  */
 @Prototype
 @Internal
+@BootstrapContextCompatible
 public class ConfigurationIntroductionAdvice implements MethodInterceptor<Object, Object> {
+
     private static final String MEMBER_BEAN = "bean";
     private static final String MEMBER_NAME = "name";
     private final Environment environment;

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -958,7 +958,7 @@ public void visitBeanDefinitionEnd() {
                 proxyConstructorGenerator.push(methodIndex);
                 proxyConstructorGenerator.invokeVirtual(executableMethodsDefinitionType, ExecutableMethodsDefinitionWriter.GET_EXECUTABLE_AT_INDEX_METHOD);
                 proxyConstructorGenerator.visitInsn(AASTORE);
-                
+
                 pushResolveInterceptorsCall(proxyConstructorGenerator, i, introduction);
             }
         }
@@ -1435,8 +1435,8 @@ private static final class MethodRef {
         protected final String name;
         protected final List<ClassElement> argumentTypes;
         protected final Type returnType;
-        private final List<String> rawTypes;
         int methodIndex;
+        private final List<String> rawTypes;
 
         public MethodRef(String name, List<ParameterElement> argumentTypes, Type returnType) {
             this.name = name;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -36,7 +36,6 @@
 import io.micronaut.http.netty.websocket.WebSocketSessionRepository;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.RouteExecutor;
-import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.Router;
 import io.micronaut.web.router.UriRouteMatch;
 import io.micronaut.websocket.CloseReason;

File: http-server/src/main/java/io/micronaut/http/server/RouteExecutor.java
Patch:
@@ -305,7 +305,6 @@ public Flux<MutableHttpResponse<?>> executeRoute(
         return resultEmitter;
     }
 
-
     /**
      * Applies server filters to a request/response.
      *

File: http/src/main/java/io/micronaut/http/context/ServerRequestContext.java
Patch:
@@ -32,8 +32,8 @@
  */
 public final class ServerRequestContext {
 
-    private static final ThreadLocal<HttpRequest> REQUEST = new ThreadLocal<>();
     public static final String KEY = "micronaut.http.server.request";
+    private static final ThreadLocal<HttpRequest> REQUEST = new ThreadLocal<>();
 
     private ServerRequestContext() {
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaBeanDefinitionBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.inject.annotation.AnnotationMetadataHierarchy;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.Element;
-import io.micronaut.inject.ast.ElementFactory;
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;

File: runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public class JacksonConfiguration {
     private JsonInclude.Include serializationInclusion = JsonInclude.Include.NON_EMPTY;
     private ObjectMapper.DefaultTyping defaultTyping = null;
     private PropertyNamingStrategy propertyNamingStrategy = null;
-    private boolean alwaysSerializeErrorsAsList = false;
+    private boolean alwaysSerializeErrorsAsList = true;
     private boolean trimStrings = false;
 
     /**

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.annotation.Replaces;
 import io.micronaut.context.annotation.Value;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ClassUtils;
@@ -252,15 +253,15 @@ public void contribute(ServiceInstance instance, Map<String, String> metadata) {
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType) {
         if (localFunctionRegistry instanceof MediaTypeCodecRegistry) {
             return ((MediaTypeCodecRegistry) localFunctionRegistry).findCodec(mediaType);
         }
         return Optional.empty();
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType, Class<?> type) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType, Class<?> type) {
         if (localFunctionRegistry instanceof MediaTypeCodecRegistry) {
             return ((MediaTypeCodecRegistry) localFunctionRegistry).findCodec(mediaType, type);
         }

File: function/src/main/java/io/micronaut/function/DefaultLocalFunctionRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.function;
 
 import io.micronaut.context.processor.ExecutableMethodProcessor;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.MediaType;
@@ -177,12 +178,12 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType) {
         return decoderRegistry.findCodec(mediaType);
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType, Class<?> type) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType, Class<?> type) {
         return decoderRegistry.findCodec(mediaType, type);
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/decoders/HttpRequestDecoder.java
Patch:
@@ -56,6 +56,7 @@ public class HttpRequestDecoder extends MessageToMessageDecoder<HttpRequest> imp
     private final ConversionService<?> conversionService;
     private final HttpServerConfiguration configuration;
     private final ApplicationEventPublisher<HttpRequestReceivedEvent> httpRequestReceivedEventPublisher;
+
     /**
      * @param embeddedServer    The embedded service
      * @param conversionService The conversion service

File: http-server/src/main/java/io/micronaut/http/server/exceptions/DuplicateRouteHandler.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.http.server.exceptions.response.ErrorContext;
 import io.micronaut.http.server.exceptions.response.ErrorResponseProcessor;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ExceptionHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.server.exceptions;
 
+import io.micronaut.context.annotation.Executable;
 import io.micronaut.http.HttpRequest;
 
 /**
@@ -34,5 +35,6 @@ public interface ExceptionHandler<T extends Throwable, R> {
      * @param exception The exception type
      * @return The result
      */
+    @Executable
     R handle(HttpRequest request, T exception);
 }

File: http/src/main/java/io/micronaut/http/HttpMessage.java
Patch:
@@ -119,7 +119,6 @@ default long getContentLength() {
      * @return The content type
      */
     default @NonNull Optional<MediaType> getContentType() {
-        return getHeaders()
-            .contentType();
+        return getHeaders().contentType();
     }
 }

File: http/src/main/java/io/micronaut/http/HttpRequest.java
Patch:
@@ -35,6 +35,8 @@
 @SuppressWarnings("MethodName")
 public interface HttpRequest<B> extends HttpMessage<B> {
 
+    String KEY = "micronaut.http.request";
+
     /**
      * Constant for HTTP scheme.
      */

File: http/src/main/java/io/micronaut/http/codec/DefaultMediaTypeCodecRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.codec;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.MediaType;
 
 import java.util.Arrays;
@@ -65,7 +66,7 @@ public class DefaultMediaTypeCodecRegistry implements MediaTypeCodecRegistry {
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType) {
         if (mediaType == null) {
             return Optional.empty();
         }
@@ -77,7 +78,7 @@ public Optional<MediaTypeCodec> findCodec(MediaType mediaType) {
     }
 
     @Override
-    public Optional<MediaTypeCodec> findCodec(MediaType mediaType, Class<?> type) {
+    public Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType, Class<?> type) {
         Optional<MediaTypeCodec> codec = findCodec(mediaType);
         if (codec.isPresent()) {
             MediaTypeCodec mediaTypeCodec = codec.get();

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodecRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.codec;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.MediaType;
 
 import java.util.Collection;
@@ -34,7 +35,7 @@ public interface MediaTypeCodecRegistry {
      * @param mediaType The {@link MediaType}
      * @return The codec
      */
-    Optional<MediaTypeCodec> findCodec(MediaType mediaType);
+    Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType);
 
     /**
      * Find a codec for the given media type and target type.
@@ -43,7 +44,7 @@ public interface MediaTypeCodecRegistry {
      * @param type      The type
      * @return The codec
      */
-    Optional<MediaTypeCodec> findCodec(MediaType mediaType, Class<?> type);
+    Optional<MediaTypeCodec> findCodec(@Nullable MediaType mediaType, Class<?> type);
 
     /**
      * @return The available codecs

File: http/src/main/java/io/micronaut/http/context/ServerRequestContext.java
Patch:
@@ -21,7 +21,6 @@
 
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
-
 import io.micronaut.http.HttpRequest;
 
 /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -32,6 +32,7 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
+
 import java.util.*;
 
 /**
@@ -348,4 +349,5 @@ protected boolean isIncremental(@NonNull ProcessingEnvironment processingEnv) {
         }
         return false;
     }
+
 }

File: inject-java/src/test/groovy/io/micronaut/inject/ast/beans/SecondBeanElementVisitor.java
Patch:
@@ -14,7 +14,7 @@ public int getOrder() {
     }
 
     @Override
-    public void visitBeanElement(BeanElement beanElement, VisitorContext visitorContext) {
-        // noop
+    public BeanElement visitBeanElement(BeanElement beanElement, VisitorContext visitorContext) {
+        return beanElement;
     }
 }

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -262,4 +262,5 @@ default Collection<String> getGeneratedResources() {
     default void addGeneratedResource(String resource) {
         info("EXPERIMENTAL: Compile time resource contribution to the context is experimental", null);
     }
+
 }

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -651,7 +651,6 @@ protected void writeBooleanMethod(ClassWriter classWriter, String methodName, Su
     /**
      * @return The originating element
      */
-    @Deprecated
     public @Nullable
     Element getOriginatingElement() {
         Element[] originatingElements = getOriginatingElements();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.inject.writer;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.util.Toggleable;
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ast.*;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
@@ -36,7 +37,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface BeanDefinitionVisitor extends OriginatingElements {
+public interface BeanDefinitionVisitor extends OriginatingElements, Toggleable {
 
     /**
      * The suffix use for generated AOP intercepted types.
@@ -45,9 +46,7 @@ public interface BeanDefinitionVisitor extends OriginatingElements {
 
     /**
      * @return The element where the bean definition originated from.
-     * @deprecated Use {@link #getOriginatingElements()} instead
      */
-    @Deprecated
     @Nullable
     Element getOriginatingElement();
 

File: inject-java/src/test/groovy/io/micronaut/inject/beanbuilder/TestInterceptorBindingTransformer.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 
 public class TestInterceptorBindingTransformer implements TypedAnnotationTransformer<SomeInterceptorBinding> {
-    private static final List<AnnotationValue<?>> ANNOTATION_VALUES = Arrays.asList(
+    static final List<AnnotationValue<?>> ANNOTATION_VALUES = Arrays.asList(
             AnnotationValue.builder(io.micronaut.aop.InterceptorBinding.class)
                     .member("kind", InterceptorKind.AROUND)
                     .build(),

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1616,7 +1616,7 @@ public Object visitVariable(VariableElement variable, Object o) {
             }
 
             AnnotationMetadata fieldAnnotationMetadata = annotationUtils.getAnnotationMetadata(variable);
-            boolean isInjected = fieldAnnotationMetadata.hasStereotype(AnnotationUtil.INJECT);
+            boolean isInjected = fieldAnnotationMetadata.hasStereotype(AnnotationUtil.INJECT) || (fieldAnnotationMetadata.hasDeclaredStereotype(AnnotationUtil.QUALIFIER) && !fieldAnnotationMetadata.hasDeclaredAnnotation(Bean.class));
             boolean isValue = (fieldAnnotationMetadata.hasStereotype(Value.class) || fieldAnnotationMetadata.hasStereotype(Property.class));
 
             if (isInjected || isValue) {

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/multiple/MultipleQualifierSpec.java
Patch:
@@ -32,7 +32,6 @@ void testQualifiers() {
 
 @Singleton
 class MyBean {
-    @Inject
     @PayBy(PaymentMethod.CREDIT_CARD)
     @Asynchronous
     Processor asyncCreditCartProcessor;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1617,8 +1617,7 @@ public Object visitVariable(VariableElement variable, Object o) {
 
             AnnotationMetadata fieldAnnotationMetadata = annotationUtils.getAnnotationMetadata(variable);
             boolean isInjected = fieldAnnotationMetadata.hasStereotype(AnnotationUtil.INJECT);
-            boolean isValue = !isInjected &&
-                    (fieldAnnotationMetadata.hasStereotype(Value.class) || fieldAnnotationMetadata.hasStereotype(Property.class));
+            boolean isValue = (fieldAnnotationMetadata.hasStereotype(Value.class) || fieldAnnotationMetadata.hasStereotype(Property.class));
 
             if (isInjected || isValue) {
                 BeanDefinitionVisitor writer = getOrCreateBeanDefinitionWriter(concreteClass, concreteClass.getQualifiedName());

File: inject-java/src/test/groovy/io/micronaut/inject/property/FieldPropertyInject.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.format.MapFormat;
 
+import jakarta.inject.Inject;
 import jakarta.inject.Singleton;
 import java.util.List;
 import java.util.Map;
@@ -40,6 +41,7 @@ public class FieldPropertyInject {
     Map<String, List<String>> multiMap;
 
     @Property(name = "my.string")
+    @Inject
     String str;
 
     @Property(name = "my.int")

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationMetadataQualifier.java
Patch:
@@ -90,7 +90,7 @@ class AnnotationMetadataQualifier<T> extends NameQualifier<T> {
 
     @Override
     public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT> candidates) {
-        if (annotationMetadata.hasDeclaredAnnotation(Any.class)) {
+        if (beanType != Object.class && annotationMetadata.hasDeclaredAnnotation(Any.class)) {
             return candidates;
         }
         String name;

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnyQualifier.java
Patch:
@@ -31,7 +31,7 @@
 @Internal
 public final class AnyQualifier<T> implements Qualifier<T> {
     @SuppressWarnings("rawtypes")
-    static final AnyQualifier INSTANCE = new AnyQualifier();
+    public static final AnyQualifier INSTANCE = new AnyQualifier();
 
     private AnyQualifier() {
     }

File: inject/src/main/java/io/micronaut/inject/qualifiers/NameQualifier.java
Patch:
@@ -63,7 +63,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
             if (!beanType.isAssignableFrom(candidate.getBeanType())) {
                 return false;
             }
-            if (candidate.getAnnotationMetadata().hasDeclaredAnnotation(Any.class)) {
+            if (beanType != Object.class && candidate.getAnnotationMetadata().hasDeclaredAnnotation(Any.class)) {
                 return true;
             }
             String typeName;
@@ -124,7 +124,7 @@ protected <BT extends BeanType<T>> Stream<BT> reduceByAnnotation(Class<T> beanTy
         return candidates.filter(candidate -> {
                 if (candidate.isPrimary() && Primary.class.getSimpleName().equals(annotationName)) {
                     return true;
-                } else if (candidate.getAnnotationMetadata().hasDeclaredAnnotation(Any.class)) {
+                } else if (beanType != Object.class && candidate.getAnnotationMetadata().hasDeclaredAnnotation(Any.class)) {
                     return true;
                 }
                 String candidateName;

File: inject-java/src/test/groovy/io/micronaut/inject/injectionpoint/SomeFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Prototype;
+import io.micronaut.core.naming.Named;
 import io.micronaut.inject.InjectionPoint;
 
 @Factory

File: inject/src/main/java/io/micronaut/context/AbstractBeanResolutionContext.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
+import io.micronaut.core.naming.Named;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ArgumentCoercible;
 import io.micronaut.inject.*;
@@ -540,7 +541,7 @@ public AnnotationMetadata getAnnotationMetadata() {
     /**
      * Abstract class for a Segment.
      */
-    abstract static class AbstractSegment implements Segment {
+    abstract static class AbstractSegment implements Segment, Named {
         private final BeanDefinition declaringComponent;
         private final String name;
         private final Argument argument;

File: management/src/main/java/io/micronaut/management/health/indicator/DefaultHealthResult.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.micronaut.core.annotation.Introspected;
+import io.micronaut.core.annotation.ReflectiveAccess;
 import io.micronaut.health.HealthStatus;
 
 import java.util.Map;
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Introspected
+@ReflectiveAccess
 class DefaultHealthResult implements HealthResult {
     private final String name;
     private final HealthStatus healthStatus;

File: runtime/src/main/java/io/micronaut/health/HealthStatus.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonValue;
 import io.micronaut.core.annotation.Introspected;
+import io.micronaut.core.annotation.ReflectiveAccess;
 
 import javax.validation.constraints.NotNull;
 import java.util.Optional;
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Introspected
+@ReflectiveAccess
 public class HealthStatus implements Comparable<HealthStatus> {
 
     /**

File: runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
 import io.micronaut.core.annotation.Introspected;
+import io.micronaut.core.annotation.ReflectiveAccess;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.discovery.CompositeDiscoveryClient;
 
@@ -30,6 +31,7 @@
  * @since 1.1
  */
 @Introspected
+@ReflectiveAccess
 public final class HeartbeatDiscoveryClientCondition implements Condition {
     @Override
     public boolean matches(ConditionContext context) {

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -657,6 +657,7 @@ protected io.micronaut.core.annotation.AnnotationValue readNestedAnnotationValue
      * Populate the annotation data for the given annotation.
      *
      * @param originatingElement The element the annotation data originates from
+     * @param parent  The parent element
      * @param annotationMirror   The annotation
      * @param metadata           the metadata
      * @param isDeclared         Is the annotation a declared annotation

File: test-suite/src/test/java/io/micronaut/docs/context/events/SampleEventEmitterBean.java
Patch:
@@ -24,7 +24,7 @@
 public class SampleEventEmitterBean {
 
     @Inject
-    ApplicationEventPublisher eventPublisher;
+    ApplicationEventPublisher<SampleEvent> eventPublisher;
 
     public void publishSampleEvent() {
         eventPublisher.publishEvent(new SampleEvent());

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -222,7 +222,7 @@ public static <T> T instantiate(Class<T> type) {
      * Instantiate the given class rethrowing any exceptions as {@link InstantiationException}.
      *
      * @param type     The type
-     * @param argTypes The arguments
+     * @param argTypes The argument types
      * @param args     The values of arguments
      * @param <T>      The generic type
      * @return The instantiated instance

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaEnumElement.java
Patch:
@@ -50,7 +50,7 @@ class JavaEnumElement extends JavaClassElement implements EnumElement {
      * @param arrayDimensions    The number of array dimensions
      */
     JavaEnumElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext, int arrayDimensions) {
-        super(classElement, annotationMetadata, visitorContext, Collections.emptyMap(), arrayDimensions);
+        super(classElement, annotationMetadata, visitorContext, Collections.emptyMap(), arrayDimensions, false);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodsDefinitionWriter.java
Patch:
@@ -493,7 +493,7 @@ private void pushNewMethodReference(ClassWriter classWriter,
         } else {
             pushBuildArgumentsForMethod(
                     typeReference.getClassName(),
-                    typeReference,
+                    thisType,
                     classWriter,
                     staticInit,
                     Arrays.asList(parameters),

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -268,7 +268,7 @@ private void processBeanDefinitions(TypeElement beanClassElement, BeanDefinition
             String className = beanDefinitionReferenceWriter.getBeanDefinitionQualifiedClassName();
             processed.add(className);
             beanDefinitionReferenceWriter.setContextScope(
-                    annotationUtils.hasStereotype(beanClassElement, Context.class));
+                    beanDefinitionWriter.getAnnotationMetadata().hasDeclaredAnnotation(Context.class));
 
             beanDefinitionReferenceWriter.accept(classWriterOutputVisitor);
         } catch (IOException e) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -247,7 +247,6 @@ public static Map<String, Object> internMapOf(Object... values) {
     @UsedByGeneratedCode
     public static Map<String, Object> internMapOf(String key, Object value) {
         Objects.requireNonNull(key);
-        Objects.requireNonNull(value);
         if (value == Collections.EMPTY_MAP) {
             return INTERN_MAP_POOL.computeIfAbsent(key, s -> Collections.singletonMap(s, Collections.emptyMap()));
         }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3602,9 +3602,9 @@ private <T> void logResolvedExisting(Argument<T> beanType, Qualifier<T> qualifie
     private <T> Stream<BeanDefinition<T>> applyBeanResolutionFilters(@Nullable BeanResolutionContext resolutionContext, Stream<BeanDefinition<T>> candidateStream) {
         candidateStream = candidateStream.filter(c -> !c.isAbstract());
 
-        BeanResolutionContext.Segment segment = resolutionContext != null ? resolutionContext.getPath().peek() : null;
-        if (segment instanceof AbstractBeanResolutionContext.ConstructorSegment) {
-            BeanDefinition declaringBean = segment.getDeclaringType();
+        BeanResolutionContext.Segment<?> segment = resolutionContext != null ? resolutionContext.getPath().peek() : null;
+        if (segment instanceof AbstractBeanResolutionContext.ConstructorSegment || segment instanceof AbstractBeanResolutionContext.MethodSegment) {
+            BeanDefinition<?> declaringBean = segment.getDeclaringType();
             // if the currently injected segment is a constructor argument and the type to be constructed is the
             // same as the candidate, then filter out the candidate to avoid a circular injection problem
             candidateStream = candidateStream.filter(c -> {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1142,7 +1142,7 @@ private Flux<MutableHttpResponse<?>> executeRoute(
 
                         if (statusRoute != null) {
                             incomingRequest.setAttribute(HttpAttributes.ROUTE_MATCH, statusRoute);
-
+                            message.setAttribute(HttpAttributes.ROUTE_MATCH, statusRoute);
                             return executeRoute(
                                     statusRoute,
                                     request,

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -616,7 +616,7 @@ private static void pushValue(Type declaringType, ClassVisitor declaringClassWri
             }
             methodVisitor.invokeConstructor(annotationValueType, CONSTRUCTOR_ANNOTATION_VALUE_AND_MAP);
         } else {
-            throw new IllegalStateException("Cannot map unknown value: " + value + " in: " + declaringType.getClassName());
+            methodVisitor.visitInsn(ACONST_NULL);
         }
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -2002,6 +2002,7 @@ private AopProxyWriter createIntroductionAdviceWriter(ClassElement typeElement)
                     configurationMetadata,
                     interceptorTypes);
 
+            aopProxyWriter.visitTypeArguments(typeElement.getAllTypeArguments());
 
             Set<TypeElement> additionalInterfaces = Arrays.stream(interfaceTypes)
                     .map(ce -> elementUtils.getTypeElement(ce.getName()))

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -229,7 +229,6 @@ public final boolean hasPropertyExpressions() {
         if (type == null) {
             return Collections.emptyList();
         }
-
         Map<String, Argument<?>[]> typeArguments = getTypeArgumentsMap();
         Argument<?>[] arguments = typeArguments.get(type);
         if (arguments != null) {

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -47,6 +47,7 @@
  * @since 1.0
  */
 public final class SoftServiceLoader<S> implements Iterable<ServiceDefinition<S>> {
+
     public static final String META_INF_SERVICES = "META-INF/services";
 
     private final Class<S> serviceType;

File: function-client/src/main/java/io/micronaut/function/client/http/HttpFunctionExecutor.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpRequest;
-import io.micronaut.http.client.RxHttpClient;
+import io.micronaut.http.client.HttpClient;
 import jakarta.annotation.PreDestroy;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
@@ -48,13 +48,13 @@
 @Singleton
 public class HttpFunctionExecutor<I, O> implements FunctionInvoker<I, O>, Closeable, FunctionInvokerChooser {
 
-    private final RxHttpClient httpClient;
+    private final HttpClient httpClient;
 
     /**
      * Constructor.
      * @param httpClient  The HTTP client
      */
-    public HttpFunctionExecutor(RxHttpClient httpClient) {
+    public HttpFunctionExecutor(HttpClient httpClient) {
         super();
         this.httpClient = httpClient;
     }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -56,7 +56,7 @@
 import io.micronaut.http.client.BlockingHttpClient;
 import io.micronaut.http.client.HttpClient;
 import io.micronaut.http.client.ReactiveClientResultTransformer;
-import io.micronaut.http.client.RxHttpClientRegistry;
+import io.micronaut.http.client.HttpClientRegistry;
 import io.micronaut.http.client.StreamingHttpClient;
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.bind.ClientArgumentRequestBinder;
@@ -119,7 +119,7 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O
     private final List<ReactiveClientResultTransformer> transformers;
     private final HttpClientBinderRegistry binderRegistry;
     private final JsonMediaTypeCodec jsonMediaTypeCodec;
-    private final RxHttpClientRegistry clientFactory;
+    private final HttpClientRegistry<?> clientFactory;
 
     /**
      * Constructor for advice class to setup things like Headers, Cookies, Parameters for Clients.
@@ -132,7 +132,7 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O
      */
     public HttpClientIntroductionAdvice(
             BeanContext beanContext,
-            RxHttpClientRegistry clientFactory,
+            HttpClientRegistry<?> clientFactory,
             JsonMediaTypeCodec jsonMediaTypeCodec,
             List<ReactiveClientResultTransformer> transformers,
             HttpClientBinderRegistry binderRegistry) {

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListRoundRobinLoadBalancer.java
Patch:
@@ -18,9 +18,8 @@
 import io.micronaut.core.annotation.Nullable;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.ServiceInstanceList;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
-
+import reactor.core.publisher.Mono;
 import java.util.Optional;
 
 /**
@@ -39,7 +38,7 @@ public ServiceInstanceListRoundRobinLoadBalancer(ServiceInstanceList serviceInst
 
     @Override
     public Publisher<ServiceInstance> select(@Nullable Object discriminator) {
-        return Flowable.fromCallable(() -> getNextAvailable(serviceInstanceList.getInstances()));
+        return Mono.fromCallable(() -> getNextAvailable(serviceInstanceList.getInstances()));
     }
 
     @Override

File: http-client-core/src/main/java/io/micronaut/http/client/sse/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017-2020 original authors
+ * Copyright 2017-2021 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-client/src/test/groovy/io/micronaut/http/client/MyJavaService.java
Patch:
@@ -26,13 +26,13 @@ public class MyJavaService {
     HttpClient client;
 
     @Inject @Client("/")
-    RxHttpClient rxHttpClient;
+    HttpClient reactiveHttpClient;
 
     public HttpClient getClient() {
         return client;
     }
 
-    public RxHttpClient getRxHttpClient() {
-        return rxHttpClient;
+    public HttpClient getReactiveHttpClient() {
+        return reactiveHttpClient;
     }
 }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetClient.java
Patch:
@@ -17,7 +17,7 @@
 
 // tag::imports[]
 import io.micronaut.http.client.annotation.Client;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 // end::imports[]
 
 
@@ -30,6 +30,6 @@
 public interface PetClient extends PetOperations { // <2>
 
     @Override
-    Single<Pet> save(String name, int age); // <3>
+    Mono<Pet> save(String name, int age); // <3>
 }
 // end::class[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetController.java
Patch:
@@ -17,7 +17,7 @@
 
 // tag::imports[]
 import io.micronaut.http.annotation.Controller;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 // end::imports[]
 
 
@@ -30,12 +30,12 @@
 class PetController implements PetOperations {
 
     @Override
-    public Single<Pet> save(String name, int age) {
+    public Mono<Pet> save(String name, int age) {
         Pet pet = new Pet();
         pet.setName(name);
         pet.setAge(age);
         // save to database or something
-        return Single.just(pet);
+        return Mono.just(pet);
     }
 }
 // end::class[]
\ No newline at end of file

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetControllerTest.java
Patch:
@@ -42,7 +42,7 @@ public void testPostPet() {
         PetClient client = embeddedServer.getApplicationContext().getBean(PetClient.class);
 
         // tag::post[]
-        Pet pet = client.save("Dino", 10).blockingGet();
+        Pet pet = client.save("Dino", 10).block();
 
         assertEquals("Dino", pet.getName());
         assertEquals(10, pet.getAge());
@@ -59,7 +59,7 @@ public void testPostPetValidation() {
         // tag::error[]
         thrown.expect(ConstraintViolationException.class);
         thrown.expectMessage("save.age: must be greater than or equal to 1");
-        client.save("Fred", -1).blockingGet();
+        client.save("Fred", -1).block();
         // end::error[]
 
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/HeaderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testSenderHeaders() throws Exception {
         try(EmbeddedServer embeddedServer = ApplicationContext.run(EmbeddedServer.class, config)) {
             PetClient client = embeddedServer.getApplicationContext().getBean(PetClient.class);
 
-            Pet pet = client.get("Fred").blockingGet();
+            Pet pet = client.get("Fred").block();
 
             Assert.assertNotNull(pet);
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/PetClient.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.docs.annotation.Pet;
 import io.micronaut.http.client.docs.annotation.PetOperations;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 
 /**
  * @author graemerocher
@@ -32,9 +32,9 @@
 public interface PetClient extends PetOperations {
 
     @Override
-    Single<Pet> save(String name, int age);
+    Mono<Pet> save(String name, int age);
 
     @Get("/{name}")
-    Single<Pet> get(String name);
+    Mono<Pet> get(String name);
 }
 // end::class[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/requestattributes/RequestAttributeTest.java
Patch:
@@ -31,7 +31,7 @@ public void testSenderAttributes() throws Exception {
             StoryClient client = embeddedServer.getApplicationContext().getBean(StoryClient.class);
             StoryClientFilter filter = embeddedServer.getApplicationContext().getBean(StoryClientFilter.class);
 
-            Story story = client.getById("jan2019").blockingGet();
+            Story story = client.getById("jan2019").block();
 
             Assert.assertNotNull(story);
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/requestattributes/StoryClient.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.annotation.RequestAttribute;
 import io.micronaut.http.annotation.RequestAttributes;
 import io.micronaut.http.client.annotation.Client;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 
 // tag::class[]
 @Client("/story")
@@ -30,6 +30,6 @@
 public interface StoryClient {
 
     @Get("/{storyId}")
-    Single<Story> getById(@RequestAttribute String storyId);
+    Mono<Story> getById(@RequestAttribute String storyId);
 }
 // end::class[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/retry/PetClient.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.client.docs.annotation.Pet;
 import io.micronaut.http.client.docs.annotation.PetOperations;
 import io.micronaut.retry.annotation.Retryable;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 
 /**
  * @author graemerocher
@@ -31,7 +31,7 @@
 public interface PetClient extends PetOperations {
 
     @Override
-    Single<Pet> save(String name, int age);
+    Mono<Pet> save(String name, int age);
 }
 // end::class[]
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/retry/PetFallback.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.http.client.docs.annotation.Pet;
 import io.micronaut.http.client.docs.annotation.PetOperations;
 import io.micronaut.retry.annotation.Fallback;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 
 /**
  * @author graemerocher
@@ -28,11 +28,11 @@
 @Fallback
 public class PetFallback implements PetOperations {
     @Override
-    public Single<Pet> save(String name, int age) {
+    public Mono<Pet> save(String name, int age) {
         Pet pet = new Pet();
         pet.setAge(age);
         pet.setName(name);
-        return Single.just(pet);
+        return Mono.just(pet);
     }
 }
 // end::class[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/sse/HeadlineClient.java
Patch:
@@ -20,13 +20,13 @@
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.docs.streaming.Headline;
 import io.micronaut.http.sse.Event;
-import io.reactivex.Flowable;
+import reactor.core.publisher.Flux;
 
 // tag::class[]
 @Client("/streaming/sse")
 public interface HeadlineClient {
 
     @Get(value = "/headlines", processes = MediaType.TEXT_EVENT_STREAM)
-    Flowable<Event<Headline>> streamHeadlines();
+    Flux<Event<Headline>> streamHeadlines();
 }
 // end::class[]
\ No newline at end of file

File: http-client/src/test/groovy/io/micronaut/http/client/docs/sse/HeadlineControllerTest.java
Patch:
@@ -34,7 +34,7 @@ public void testClientAnnotationStreaming() throws Exception {
                     .getApplicationContext()
                     .getBean(HeadlineClient.class);
 
-            Event<Headline> headline = headlineClient.streamHeadlines().blockingFirst();
+            Event<Headline> headline = headlineClient.streamHeadlines().blockFirst();
 
             assertNotNull( headline );
             assertTrue( headline.getData().getText().startsWith("Latest Headline") );

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineClient.java
Patch:
@@ -19,17 +19,17 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.client.annotation.Client;
-import io.reactivex.Flowable;
+import reactor.core.publisher.Flux;
 // end::imports[]
 
 // tag::class[]
 @Client("/streaming")
 public interface HeadlineClient {
 
     @Get(value = "/headlines", processes = MediaType.APPLICATION_JSON_STREAM) // <1>
-    Flowable<Headline> streamHeadlines(); // <2>
+    Flux<Headline> streamHeadlines(); // <2>
 // end::class[]
 
     @Get(value = "/headlines", processes = MediaType.APPLICATION_JSON_STREAM) // <1>
-    Flowable<Headline> streamFlux();
+    Flux<Headline> streamFlux();
 }

File: http-client/src/test/groovy/io/micronaut/http/client/stream/Movie.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.rxjava2;
+package io.micronaut.http.client.stream;
 
 
 

File: http-client/src/test/groovy/io/micronaut/http/client/stream/User.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.rxjava2;
+package io.micronaut.http.client.stream;
 
 import java.util.List;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -23,9 +23,9 @@
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;
-import io.reactivex.processors.UnicastProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import reactor.core.publisher.UnicastProcessor;
 
 import java.io.IOException;
 import java.io.RandomAccessFile;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestReactiveFilter.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 /**
  * @author Graeme Rocher
@@ -47,8 +47,8 @@ public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, Server
     }
 
     class SomeService {
-        Flowable<String> getSomething() {
-            return Flowable.just("Test");
+        Flux<String> getSomething() {
+            return Flux.just("Test");
         }
     }
 }

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestSecurityFilter.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 import org.spockframework.util.Assert;
 

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/TestMetadata.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.annotation.AnnotationUtil;
-import io.reactivex.Flowable;
+import reactor.core.publisher.Flux;
 
 public class TestMetadata extends DefaultAnnotationMetadata {
     public TestMetadata() {
@@ -27,12 +27,11 @@ public TestMetadata() {
         if (!DefaultAnnotationMetadata.areAnnotationDefaultsRegistered("io.micronaut.context.annotation.Requires")) {
             DefaultAnnotationMetadata.registerAnnotationDefaults("io.micronaut.context.annotation.Requires", AnnotationUtil.internMapOf(new Object[]{"missing", new Object[0], "notEnv", new Object[0], "missingConfigurations", new Object[0], "entities", new Object[0], "missingBeans", new Object[0], "condition", $micronaut_load_class_value_2(), "env", new Object[0], "classes", new Object[0], "sdk", "MICRONAUT", "beans", new Object[0]}));
         }
-
     }
 
     static AnnotationClassValue $micronaut_load_class_value_2() {
         try {
-            return new AnnotationClassValue(Flowable.class);
+            return new AnnotationClassValue(Flux.class);
         } catch (Throwable e) {
             return new AnnotationClassValue("io.reactivex.Flowable");
         }

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoEndpoint.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.management.endpoint.EndpointConfiguration;
 import io.micronaut.management.endpoint.annotation.Endpoint;
 import io.micronaut.management.endpoint.annotation.Read;
-import io.reactivex.Single;
+import reactor.core.publisher.Mono;
 
 /**
  * <p>Exposes an {@link Endpoint} to provide information about the application.</p>
@@ -57,7 +57,7 @@ public InfoEndpoint(InfoAggregator infoAggregator, InfoSource[] infoSources) {
      * @return A {@link org.reactivestreams.Publisher} of the info response
      */
     @Read
-    Single getInfo() {
-        return Single.fromPublisher(infoAggregator.aggregate(infoSources));
+    Mono getInfo() {
+        return Mono.from(infoAggregator.aggregate(infoSources));
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/info/source/BuildInfoSource.java
Patch:
@@ -22,9 +22,10 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.util.SupplierUtil;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
-import io.reactivex.Flowable;
+
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.util.Optional;
 import java.util.function.Supplier;
@@ -63,7 +64,7 @@ public BuildInfoSource(
     @Override
     public Publisher<PropertySource> getSource() {
         Optional<PropertySource> propertySource = supplier.get();
-        return propertySource.map(Flowable::just).orElse(Flowable.empty());
+        return propertySource.map(Flux::just).orElse(Flux.empty());
     }
 
     private Optional<PropertySource> retrieveBuildInfo() {

File: management/src/main/java/io/micronaut/management/endpoint/info/source/ConfigurationInfoSource.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.management.endpoint.info.InfoEndpoint;
 import io.micronaut.management.endpoint.info.InfoSource;
 import io.micronaut.runtime.context.scope.Refreshable;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.util.Collections;
 import java.util.Map;
@@ -55,7 +55,7 @@ public ConfigurationInfoSource(Environment environment) {
 
     @Override
     public Publisher<PropertySource> getSource() {
-        return Flowable.just(supplier.get());
+        return Flux.just(supplier.get());
     }
 
     private MapPropertySource retrieveConfigurationInfo() {

File: management/src/main/java/io/micronaut/management/endpoint/info/source/GitInfoSource.java
Patch:
@@ -22,9 +22,9 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.util.SupplierUtil;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
-import io.reactivex.Flowable;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.util.Optional;
 import java.util.function.Supplier;
@@ -63,7 +63,7 @@ public GitInfoSource(
     @Override
     public Publisher<PropertySource> getSource() {
         Optional<PropertySource> propertySource = supplier.get();
-        return propertySource.map(Flowable::just).orElse(Flowable.empty());
+        return propertySource.map(Flux::just).orElse(Flux.empty());
     }
 
     private Optional<PropertySource> retrieveGitInfo() {

File: management/src/main/java/io/micronaut/management/endpoint/threads/ThreadDumpEndpoint.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micronaut.management.endpoint.annotation.Endpoint;
 import io.micronaut.management.endpoint.annotation.Read;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.lang.management.ManagementFactory;
 
@@ -48,6 +48,6 @@ public class ThreadDumpEndpoint {
     @Read
     Publisher getThreadDump() {
         return threadInfoMapper.mapThreadInfo(
-                Flowable.fromArray(ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)));
+                Flux.fromArray(ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)));
     }
 }

File: management/src/main/java/io/micronaut/management/health/indicator/jdbc/JdbcIndicator.java
Patch:
@@ -26,10 +26,10 @@
 import io.micronaut.management.health.indicator.HealthIndicator;
 import io.micronaut.management.health.indicator.HealthResult;
 import io.micronaut.scheduling.TaskExecutors;
-import io.reactivex.Flowable;
 import jakarta.inject.Named;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import javax.sql.DataSource;
 import java.sql.Connection;
@@ -122,9 +122,9 @@ private Publisher<HealthResult> getResult(DataSource dataSource) {
     @Override
     public Publisher<HealthResult> getResult() {
         if (dataSources.length == 0) {
-            return Flowable.empty();
+            return Flux.empty();
         }
-        return healthAggregator.aggregate(NAME, Flowable.merge(
+        return healthAggregator.aggregate(NAME, Flux.merge(
             Arrays.stream(dataSources)
                     .map(dataSourceResolver::resolve)
                     .map(this::getResult).collect(Collectors.toList())

File: management/src/main/java/io/micronaut/management/health/indicator/service/ServiceReadyHealthIndicator.java
Patch:
@@ -27,9 +27,9 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.event.annotation.EventListener;
 import io.micronaut.runtime.server.event.ServerStartupEvent;
-import io.reactivex.Flowable;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 /**
  * <p>A {@link io.micronaut.management.health.indicator.HealthIndicator} that signals when the service is ready to
@@ -70,7 +70,7 @@ public Publisher<HealthResult> getResult() {
         } else {
             builder.status(HealthStatus.DOWN);
         }
-        return Flowable.just(builder.build());
+        return Flux.just(builder.build());
     }
 
     /**

File: runtime/src/main/java/io/micronaut/discovery/config/DefaultCompositeConfigurationClient.java
Patch:
@@ -20,9 +20,9 @@
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.PropertySource;
 import io.micronaut.core.util.ArrayUtils;
-import io.reactivex.Flowable;
 import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
+import reactor.core.publisher.Flux;
 
 import java.util.Arrays;
 import java.util.List;
@@ -58,13 +58,13 @@ public String getDescription() {
     @Override
     public Publisher<PropertySource> getPropertySources(Environment environment) {
         if (ArrayUtils.isEmpty(configurationClients)) {
-            return Flowable.empty();
+            return Flux.empty();
         }
         List<Publisher<PropertySource>> publishers = Arrays.stream(configurationClients)
             .map(configurationClient -> configurationClient.getPropertySources(environment))
             .collect(Collectors.toList());
 
-        return Flowable.merge(publishers);
+        return Flux.merge(publishers);
     }
 
     @Override

File: inject-java/src/test/groovy/io/micronaut/inject/close/D.java
Patch:
@@ -20,12 +20,13 @@
 import jakarta.annotation.PreDestroy;
 import jakarta.inject.Singleton;
 import java.io.IOException;
+import java.util.List;
 
 @Requires(property = "spec.name", value = "BeanCloseOrderSpec")
 @Singleton
 public class D implements AutoCloseable {
 
-    public D() {}
+    public D(List<E> eList) {}
 
     @PreDestroy
     @Override

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -365,7 +365,7 @@ public BeanDefinitionWriter(Element beanProducingElement,
             if (uniqueIdentifier == null) {
                 throw new IllegalArgumentException("Factory methods require passing a unique identifier");
             }
-            final ClassElement declaringType = factoryMethodElement.getDeclaringType();
+            final ClassElement declaringType = factoryMethodElement.getOwningType();
             this.beanDefinitionName = declaringType.getPackageName() + ".$" + declaringType.getSimpleName() + "$" + upperCaseMethodName + uniqueIdentifier + "Definition";
         } else if (beanProducingElement instanceof FieldElement) {
             inheritTypeLevelRequirements(beanProducingElement);
@@ -382,7 +382,7 @@ public BeanDefinitionWriter(Element beanProducingElement,
             if (uniqueIdentifier == null) {
                 throw new IllegalArgumentException("Factory fields require passing a unique identifier");
             }
-            final ClassElement declaringType = factoryMethodElement.getDeclaringType();
+            final ClassElement declaringType = factoryMethodElement.getOwningType();
             this.beanDefinitionName = declaringType.getPackageName() + ".$" + declaringType.getSimpleName() + "$" + fieldName + uniqueIdentifier + "Definition";
         } else if (beanProducingElement instanceof BeanElementBuilder) {
             BeanElementBuilder beanElementBuilder = (BeanElementBuilder) beanProducingElement;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3715,7 +3715,8 @@ private <T> boolean isCandidatePresent(Argument<T> beanType, Qualifier<T> qualif
         if (!candidates.isEmpty()) {
             filterReplacedBeans(null, candidates);
             Stream<BeanDefinition<T>> stream = candidates.stream();
-            if (qualifier != null) {
+            if (qualifier != null && !(qualifier instanceof AnyQualifier)) {
+                stream = stream.filter(bd -> !bd.hasDeclaredAnnotation(Any.class));
                 stream = qualifier.reduce(beanType.getType(), stream);
             }
             return stream.count() > 0;

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -55,7 +55,6 @@
 import io.micronaut.http.client.BlockingHttpClient;
 import io.micronaut.http.client.HttpClient;
 import io.micronaut.http.client.ReactiveClientResultTransformer;
-import io.micronaut.http.client.RxHttpClient;
 import io.micronaut.http.client.RxHttpClientRegistry;
 import io.micronaut.http.client.StreamingHttpClient;
 import io.micronaut.http.client.annotation.Client;

File: inject-groovy-test/src/main/groovy/io/micronaut/ast/transform/test/MicronautAstBuilder.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.stream.Collectors;
 
 /**
- * Forked from {@link org.codehaus.groovy.ast.builder.AstStringCompiler}
+ * Forked from {@link org.codehaus.groovy.ast.builder.AstStringCompiler}.
  */
 class MicronautAstBuilder {
 

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -699,7 +699,7 @@ protected Map<CharSequence, Object> populateAnnotationData(
                     final List<? extends A> annotationsForMember = getAnnotationsForType(member)
                             .stream().filter((a) -> !getAnnotationTypeName(a).equals(annotationName))
                             .collect(Collectors.toList());
-                    includeAnnotations(memberMetadata, member, null,true, annotationsForMember, false);
+                    includeAnnotations(memberMetadata, member, null, true, annotationsForMember, false);
 
                     boolean isInstantiatedMember = memberMetadata.hasAnnotation(InstantiatedMember.class);
 

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.context.scope.AbstractConcurrentCustomScope;
 import io.micronaut.context.scope.BeanCreationContext;
 import io.micronaut.context.scope.CreatedBean;
-import io.micronaut.context.scope.CustomScope;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.util.ArgumentUtils;
@@ -34,7 +33,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * A {@link CustomScope} that creates a new bean for every HTTP request.
+ * A {@link io.micronaut.context.scope.CustomScope} that creates a new bean for every HTTP request.
  *
  * @author James Kleeh
  * @author Marcel Overdijk

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -180,10 +180,11 @@ public ParameterElement[] getParameters() {
 
     @Override
     public MethodElement withNewParameters(ParameterElement... newParameters) {
+        final ParameterElement[] existing = getParameters();
         return new GroovyMethodElement(declaringClass, visitorContext, methodNode, getAnnotationMetadata()) {
             @Override
             public ParameterElement[] getParameters() {
-                return ArrayUtils.concat(super.getParameters(), newParameters);
+                return ArrayUtils.concat(existing, newParameters);
             }
         };
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/InputStreamBodyBinder.java
Patch:
@@ -97,12 +97,14 @@ protected void doOnNext(ByteBufHolder message) {
                             }
                             ByteBuf content = message.content();
                             if (!(content instanceof EmptyByteBuf)) {
-                                byte[] bytes = ByteBufUtil.getBytes(content);
                                 try {
+                                    byte[] bytes = ByteBufUtil.getBytes(content);
                                     outputStream.write(bytes, 0, bytes.length);
                                 } catch (IOException e) {
                                     subscription.cancel();
                                     return;
+                                } finally {
+                                    content.release();
                                 }
                             }
                             subscription.request(1);

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1262,7 +1262,7 @@ protected URI prependContextPath(URI requestURI) {
             try {
                 return new URI(StringUtils.prependUri(contextPath, requestURI.toString()));
             } catch (URISyntaxException e) {
-                //should never happen
+                throw new HttpClientException("Failed to construct the request URI", e);
             }
         }
         return requestURI;

File: inject-java/src/test/groovy/io/micronaut/inject/beanbuilder/TestBeanWithStaticCreator.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.beanbuilder;
 
-public class TestBeanWithStaticCreator {
+public class TestBeanWithStaticCreator implements BeanWithStaticCreator {
     private TestBeanWithStaticCreator() {}
     public static TestBeanWithStaticCreator create() {
         return new TestBeanWithStaticCreator();

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -56,6 +57,7 @@
 @Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @DefaultScope(Singleton.class)
 @Executable
+@Inherited
 public @interface Adapter {
 
     /**

File: context/src/main/java/io/micronaut/runtime/context/scope/Refreshable.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Type;
 import io.micronaut.runtime.context.scope.refresh.RefreshInterceptor;
+import jakarta.inject.Scope;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -38,6 +39,7 @@
 @Target({ElementType.TYPE, ElementType.METHOD})
 @Type(RefreshInterceptor.class)
 @Bean
+@Scope
 public @interface Refreshable {
 
     /**

File: context/src/main/java/io/micronaut/runtime/context/scope/ThreadLocal.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.runtime.context.scope;
 
+import jakarta.inject.Scope;
+
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -31,5 +33,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Scope
 public @interface ThreadLocal {
 }

File: context/src/main/java/io/micronaut/runtime/event/annotation/EventListener.java
Patch:
@@ -45,6 +45,7 @@
 @Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @Adapter(ApplicationEventListener.class) // <1>
 @Indexed(ApplicationEventListener.class)
+@Inherited
 public @interface EventListener {
 }
 // end::clazz[]

File: context/src/main/java/io/micronaut/scheduling/annotation/Scheduled.java
Patch:
@@ -70,7 +70,7 @@
     String fixedRate() default "";
 
     /**
-     * @return The name of a {@link javax.inject.Named} bean that is a
+     * @return The name of a {@link jakarta.inject.Named} bean that is a
      * {@link java.util.concurrent.ScheduledExecutorService} to use to schedule the task
      */
     String scheduler() default TaskExecutors.SCHEDULED;

File: core-reactive/src/main/java/io/micronaut/core/async/annotation/SingleResult.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -31,6 +32,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
+@Inherited
 public @interface SingleResult {
     /**
      * The class name.

File: core/src/main/java/io/micronaut/core/annotation/Blocking.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -28,5 +29,6 @@
  */
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface Blocking {
 }

File: core/src/main/java/io/micronaut/core/annotation/EntryPoint.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,5 +31,6 @@
 @Target({ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Experimental
+@Inherited
 public @interface EntryPoint {
 }

File: core/src/main/java/io/micronaut/core/annotation/Indexed.java
Patch:
@@ -30,6 +30,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Repeatable(value = Indexes.class)
+@Inherited
 public @interface Indexed {
     /**
      * @return The indexed type

File: core/src/main/java/io/micronaut/core/annotation/Indexes.java
Patch:
@@ -26,6 +26,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
+@Inherited
 public @interface Indexes {
     /**
      * @return A group of indexes

File: core/src/main/java/io/micronaut/core/annotation/Internal.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
@@ -27,5 +28,6 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Inherited
 public @interface Internal {
 }

File: core/src/main/java/io/micronaut/core/annotation/Introspected.java
Patch:
@@ -48,6 +48,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
+@Inherited
 public @interface Introspected {
 
     /**

File: core/src/main/java/io/micronaut/core/annotation/NonBlocking.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.core.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -28,5 +29,6 @@
  */
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface NonBlocking {
 }

File: core/src/main/java/io/micronaut/core/bind/annotation/Bindable.java
Patch:
@@ -28,6 +28,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.PARAMETER, ElementType.METHOD})
+@Inherited
 public @interface Bindable {
 
     /**

File: core/src/main/java/io/micronaut/core/convert/format/Format.java
Patch:
@@ -18,6 +18,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 
 /**
@@ -29,6 +30,7 @@
  */
 @Documented
 @Retention(RUNTIME)
+@Inherited
 public @interface Format {
 
     /**

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,6 +34,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.FIELD})
+@Inherited
 public @interface MapFormat {
 
     /**

File: core/src/main/java/io/micronaut/core/convert/format/ReadableBytes.java
Patch:
@@ -18,6 +18,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 
 /**
@@ -29,5 +30,6 @@
 @Format("KB")
 @Retention(RUNTIME)
 @Documented
+@Inherited
 public @interface ReadableBytes {
 }

File: http/src/main/java/io/micronaut/http/annotation/Body.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER})
 @Bindable
+@Inherited
 public @interface Body {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Consumes.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -38,6 +39,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})
+@Inherited
 public @interface Consumes {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/CookieValue.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
+@Inherited
 public @interface CookieValue {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/CustomHttpMethod.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface CustomHttpMethod {
     /**
      * @return The URI of the route

File: http/src/main/java/io/micronaut/http/annotation/Delete.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Delete {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Error.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Error {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Get.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Get {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Head.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,6 +35,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Head {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Header.java
Patch:
@@ -56,6 +56,7 @@
 @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE, ElementType.METHOD, ElementType.ANNOTATION_TYPE}) // this can be either type or param
 @Repeatable(value = Headers.class)
 @Bindable
+@Inherited
 public @interface Header {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Headers.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -37,6 +38,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Inherited
 public @interface Headers {
 
     /***

File: http/src/main/java/io/micronaut/http/annotation/HttpMethodMapping.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Target({ElementType.ANNOTATION_TYPE})
 @Executable
 @EntryPoint
+@Inherited
 public @interface HttpMethodMapping {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Options.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Options {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Part.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER})
 @Bindable
+@Inherited
 public @interface Part {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Patch.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Patch {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/PathVariable.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
+@Inherited
 public @interface PathVariable {
     /**
      * @return The name of the parameter

File: http/src/main/java/io/micronaut/http/annotation/Post.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Post {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Produces.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -38,6 +39,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})
+@Inherited
 public @interface Produces {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Put.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Put {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/QueryValue.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -37,6 +38,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
+@Inherited
 public @interface QueryValue {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/RequestAttributes.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -37,6 +38,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
+@Inherited
 public @interface RequestAttributes {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/RequestBean.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,5 +35,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
+@Inherited
 public @interface RequestBean {
 }

File: http/src/main/java/io/micronaut/http/annotation/Status.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @Executable
+@Inherited
 public @interface Status {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Trace.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,6 +35,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @HttpMethodMapping
+@Inherited
 public @interface Trace {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/UriMapping.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -31,6 +32,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE})
+@Inherited
 public @interface UriMapping {
 
     String DEFAULT_URI = "/";

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/TestInjectVisitor.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.*;
 
-public class InjectVisitor implements TypeElementVisitor<Object, Object> {
+public class TestInjectVisitor implements TypeElementVisitor<Object, Object> {
 
     private static List<String> VISITED_ELEMENTS = new ArrayList<>();
     private static Map<VisitorContext, Boolean> started = new LinkedHashMap<>();

File: inject-java/src/test/groovy/io/micronaut/aop/simple/Mutating.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})
+@Inherited
 public @interface Mutating {
     String value();
 }

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/ScopeTwo.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.inject.annotation;
 
+import jakarta.inject.Scope;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -24,5 +26,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE})
 @ScopeOne
+@Scope
 public @interface ScopeTwo {
 }

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/Trace.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,6 +35,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE})
 @SomeOther
+@Inherited
 public @interface Trace {
 
     @AliasFor(annotation = Around.class, member = "hotswap")

File: inject-java/src/test/groovy/io/micronaut/inject/scope/SomeAnn.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
+@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @Bean
 @DefaultScope(Singleton.class)
 public @interface SomeAnn {

File: inject/src/main/java/io/micronaut/context/annotation/BootstrapContextCompatible.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,5 +34,6 @@
  */
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@Inherited
 public @interface BootstrapContextCompatible {
 }

File: inject/src/main/java/io/micronaut/context/annotation/DefaultImplementation.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -59,6 +60,7 @@
 @Retention(RUNTIME)
 @Target(ElementType.TYPE)
 @Experimental
+@Inherited
 public @interface DefaultImplementation {
 
     /**

File: inject/src/main/java/io/micronaut/context/annotation/Executable.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE, ElementType.ANNOTATION_TYPE})
+@Inherited
 public @interface Executable {
 
     /**

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataHierarchy.java
Patch:
@@ -103,6 +103,7 @@ public Optional<Class<? extends Annotation>> getAnnotationType(@NonNull String n
      * @return The metadata that is actually declared in the element
      */
     @NonNull
+    @Override
     public AnnotationMetadata getDeclaredMetadata() {
         return hierarchy[0];
     }

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Delete.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -37,6 +38,7 @@
 @Target(ElementType.METHOD)
 @Executable
 @EntryPoint
+@Inherited
 public @interface Delete {
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Read.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -37,6 +38,7 @@
 @Target(ElementType.METHOD)
 @Executable
 @EntryPoint
+@Inherited
 public @interface Read {
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Selector.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -31,5 +32,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER})
+@Inherited
 public @interface Selector {
 }

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Sensitive.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -47,6 +48,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
+@Inherited
 public @interface Sensitive {
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Write.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -37,6 +38,7 @@
 @Target(ElementType.METHOD)
 @Executable
 @EntryPoint
+@Inherited
 public @interface Write {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageBody.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,6 +35,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER})
 @Bindable
+@Inherited
 public @interface MessageBody {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageHeader.java
Patch:
@@ -32,6 +32,7 @@
 @Target({ElementType.PARAMETER, ElementType.TYPE, ElementType.METHOD}) // this can be either type or param
 @Repeatable(value = MessageHeaders.class)
 @Bindable
+@Inherited
 public @interface MessageHeader {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageHeaders.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -38,6 +39,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Inherited
 public @interface MessageHeaders {
 
     /***

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageMapping.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,6 +37,7 @@
 @Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @EntryPoint
 @Executable(processOnStartup = true)
+@Inherited
 public @interface MessageMapping {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/SendTo.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -31,6 +32,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
+@Inherited
 public @interface SendTo {
     /**
      * @return The message destination

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestScope.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.runtime.http.scope;
 
 import io.micronaut.runtime.context.scope.ScopedProxy;
+import jakarta.inject.Scope;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,5 +35,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Scope
 public @interface RequestScope {
 }

File: session/src/main/java/io/micronaut/session/annotation/SessionValue.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.METHOD})
 @Bindable
+@Inherited
 public @interface SessionValue {
 
     /**

File: validation/src/main/java/io/micronaut/validation/Validated.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -35,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
 @Around
+@Inherited
 @Type(ValidatingInterceptor.class)
 public @interface Validated {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/OnClose.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,5 +34,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @WebSocketMapping
+@Inherited
 public @interface OnClose {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/OnError.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,5 +34,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @WebSocketMapping
+@Inherited
 public @interface OnError {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/OnMessage.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,6 +34,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @WebSocketMapping
+@Inherited
 public @interface OnMessage {
 
     /**

File: websocket/src/main/java/io/micronaut/websocket/annotation/OnOpen.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -33,5 +34,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})
 @WebSocketMapping
+@Inherited
 public @interface OnOpen {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketMapping.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -34,5 +35,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE})
 @Executable
+@Inherited
 public @interface WebSocketMapping {
 }

File: context/src/main/java/io/micronaut/runtime/context/scope/ThreadLocalCustomScope.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.scope.AbstractConcurrentCustomScope;
 import io.micronaut.context.scope.CreatedBean;
-import io.micronaut.context.scope.CustomScope;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.inject.BeanIdentifier;
 import jakarta.inject.Singleton;
@@ -26,7 +25,7 @@
 import java.util.Map;
 
 /**
- * A {@link CustomScope} that stores values in thread local storage.
+ * A {@link io.micronaut.context.scope.CustomScope} that stores values in thread local storage.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -85,7 +85,6 @@
 import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.channel.ChannelPipelineListener;
 import io.micronaut.http.netty.channel.NettyThreadFactory;
-import io.micronaut.http.netty.content.HttpContentUtil;
 import io.micronaut.http.netty.stream.DefaultHttp2Content;
 import io.micronaut.http.netty.stream.Http2Content;
 import io.micronaut.http.netty.stream.HttpStreamsClientHandler;

File: http-netty/src/main/java/io/micronaut/http/netty/content/HttpContentUtil.java
Patch:
@@ -35,6 +35,7 @@ public class HttpContentUtil {
     public static final byte[] OPEN_BRACKET = "[".getBytes(StandardCharsets.UTF_8);
     public static final byte[] CLOSE_BRACKET = "]".getBytes(StandardCharsets.UTF_8);
     public static final byte[] COMMA = ",".getBytes(StandardCharsets.UTF_8);
+
     /**
      * @return Produces HTTP content for {@code ]}
      */

File: inject/src/main/java/io/micronaut/context/scope/CustomScope.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.BeanRegistration;
 import io.micronaut.core.annotation.Indexed;
-import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.BeanIdentifier;
 
 import java.lang.annotation.Annotation;
@@ -58,7 +57,7 @@ public interface CustomScope<A extends Annotation> {
     <T> Optional<T> remove(BeanIdentifier identifier);
 
     /**
-     * Get the {@link BeanDefinition} for the given bean.
+     * Get the {@link io.micronaut.inject.BeanDefinition} for the given bean.
      *
      * @param bean The bean
      * @param <T> The bean generic type

File: http-client/src/main/java/io/micronaut/http/client/netty/websocket/NettyWebSocketClientHandler.java
Patch:
@@ -94,7 +94,7 @@ public NettyWebSocketClientHandler(
             RequestBinderRegistry requestBinderRegistry,
             MediaTypeCodecRegistry mediaTypeCodecRegistry,
             FlowableEmitter<T> emitter) {
-        super(null, requestBinderRegistry, mediaTypeCodecRegistry, webSocketBean, request, Collections.emptyMap(), handshaker.version(), null);
+        super(null, requestBinderRegistry, mediaTypeCodecRegistry, webSocketBean, request, Collections.emptyMap(), handshaker.version(), handshaker.actualSubprotocol(), null);
         this.codecRegistry = mediaTypeCodecRegistry;
         this.handshaker = handshaker;
         this.webSocketBean = webSocketBean;

File: http-netty/src/main/java/io/micronaut/http/netty/content/HttpContentUtil.java
Patch:
@@ -35,6 +35,7 @@ public class HttpContentUtil {
     public static final byte[] OPEN_BRACKET = "[".getBytes(StandardCharsets.UTF_8);
     public static final byte[] CLOSE_BRACKET = "]".getBytes(StandardCharsets.UTF_8);
     public static final byte[] COMMA = ",".getBytes(StandardCharsets.UTF_8);
+
     /**
      * @return Produces HTTP content for {@code ]}
      */

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -89,6 +89,7 @@
 import io.micronaut.http.netty.stream.DefaultHttp2Content;
 import io.micronaut.http.netty.stream.Http2Content;
 import io.micronaut.http.netty.stream.HttpStreamsClientHandler;
+import io.micronaut.http.netty.stream.JsonSubscriber;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.micronaut.http.netty.stream.StreamedHttpResponse;
 import io.micronaut.http.netty.stream.StreamingInboundHttp2ToHttpAdapter;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpAttributes;
+import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -69,6 +70,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicInteger;

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -1665,7 +1665,7 @@ public static boolean isAnnotationMapped(@Nullable String annotationName) {
         return annotationName != null &&
                 (ANNOTATION_MAPPERS.containsKey(annotationName) ||
                         ANNOTATION_TRANSFORMERS.containsKey(annotationName) ||
-                        ANNOTATION_TRANSFORMERS.keySet().stream().anyMatch(pkg -> annotationName.startsWith(pkg)));
+                        ANNOTATION_TRANSFORMERS.keySet().stream().anyMatch(annotationName::startsWith));
     }
 
     /**

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -80,7 +80,7 @@
 @BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object> {
 
-    private static final Logger LOG = LoggerFactory.getLogger(RxHttpClient.class);
+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientIntroductionAdvice.class);
 
     /**
      * The default Accept-Types.

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/replaces/DSecondFactoryMethodReplacement.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Replaces;
-import io.micronaut.context.annotation.Requirements;
 import io.micronaut.context.annotation.Requires;
 import jakarta.inject.Singleton;
 

File: test-suite/src/test/java/io/micronaut/docs/client/versioning/HelloClient.java
Patch:
@@ -25,7 +25,8 @@
 // tag::clazz[]
 @Client("/hello")
 @Version("1") // <1>
-public interface HelloClient {
+public
+interface HelloClient {
 
     @Get("/greeting/{name}")
     String sayHello(String name);

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -185,7 +185,6 @@ public class MediaType implements CharSequence {
      */
     public static final MediaType MICROSOFT_EXCEL_TYPE = new MediaType(MICROSOFT_EXCEL, EXTENSION_XLS);
 
-
     /**
      * XML: text/xml.
      */

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.groovy.ast.tools.ClassNodeUtils;
 import org.codehaus.groovy.ast.*;
 import org.codehaus.groovy.ast.stmt.BlockStatement;
-import org.codehaus.groovy.util.ArrayIterator;
 
 import java.lang.reflect.Modifier;
 import java.util.*;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.annotation.processing.visitor.JavaVisitorContext;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
-import io.micronaut.core.util.AntPathMatcher;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.core.annotation.NonNull;

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/replaces/DSecondFactoryMethodReplacement.java
Patch:
@@ -19,8 +19,7 @@
 import io.micronaut.context.annotation.Replaces;
 import io.micronaut.context.annotation.Requirements;
 import io.micronaut.context.annotation.Requires;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Factory
 @Requires(env = "factory-replacement-chain")

File: messaging/src/main/java/io/micronaut/messaging/MessagingApplication.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.messaging;
 
 import io.micronaut.context.ApplicationContext;
-import io.micronaut.context.ApplicationContextLifeCycle;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.naming.Described;
 import io.micronaut.inject.BeanDefinition;

File: tracing/src/main/java/io/micronaut/tracing/jaeger/JaegerConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class JaegerConfiguration implements Toggleable  {
      */
     public JaegerConfiguration(ApplicationConfiguration applicationConfiguration) {
         if (StringUtils.isEmpty(System.getProperty(JAEGER_SERVICE_NAME))
-				&& StringUtils.isEmpty(System.getenv(JAEGER_SERVICE_NAME))) {
+                && StringUtils.isEmpty(System.getenv(JAEGER_SERVICE_NAME))) {
             System.setProperty(JAEGER_SERVICE_NAME, applicationConfiguration.getName().orElse(Environment.DEFAULT_NAME));
         }
         configuration = Configuration.fromEnv();

File: core-reactive/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -298,8 +298,8 @@ protected void doOnSubscribe(Subscription subscription) {
             @Override
             protected void doOnNext(T message) {
                 try {
-                    actual.onNext(message);
                     consumer.accept(message);
+                    actual.onNext(message);
                 } catch (Throwable e) {
                     onError(e);
                 }

File: function-client/src/main/java/io/micronaut/function/client/aop/FunctionClientAdvice.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.function.client.exceptions.FunctionNotFoundException;
 import io.reactivex.Flowable;
 import io.reactivex.Maybe;
-import jakarta.inject.Named;
 import jakarta.inject.Singleton;
 
 import java.util.Map;

File: http-netty/src/main/java/io/micronaut/http/netty/stream/StreamingInboundHttp2ToHttpAdapter.java
Patch:
@@ -27,7 +27,6 @@
 import io.netty.handler.codec.http2.Http2Settings;
 import io.netty.handler.codec.http2.Http2Stream;
 import io.netty.handler.codec.http2.HttpConversionUtil;
-import io.netty.handler.codec.http2.InboundHttp2ToHttpAdapter;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -44,7 +43,7 @@
  * This implementation does not buffer the data. If you need data buffering a {@link io.netty.handler.flow.FlowControlHandler}
  * can be placed after this implementation so that downstream handlers can control flow.
  *
- * Based on code in {@link InboundHttp2ToHttpAdapter}.
+ * Based on code in {@link io.netty.handler.codec.http2.InboundHttp2ToHttpAdapter}.
  *
  * @author graemerocher
  * @since 2.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DelegateStreamedHttpResponse.java
Patch:
@@ -37,7 +37,8 @@ final class DelegateStreamedHttpResponse extends DelegateHttpResponse implements
      * @param response The {@link HttpResponse}
      * @param stream The {@link Publisher} for {@link HttpContent}
      */
-    DelegateStreamedHttpResponse(HttpResponse response, Publisher<HttpContent> stream) {
+    DelegateStreamedHttpResponse(HttpResponse response,
+                                 Publisher<HttpContent> stream) {
         super(response);
         this.stream = stream;
     }
@@ -46,4 +47,5 @@ final class DelegateStreamedHttpResponse extends DelegateHttpResponse implements
     public void subscribe(Subscriber<? super HttpContent> subscriber) {
         stream.subscribe(subscriber);
     }
+
 }

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestSecurityFilter.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
+import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 import org.spockframework.util.Assert;
 

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java
Patch:
@@ -70,9 +70,8 @@ public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, Server
             if (response != null) {
                 return Publishers.just(response);
             } else {
-                return Publishers.map(chain.proceed(request), mutableHttpResponse -> {
+                return Publishers.then(chain.proceed(request), mutableHttpResponse -> {
                     handleResponse(request, mutableHttpResponse);
-                    return mutableHttpResponse;
                 });
             }
         } else {

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionArgumentBinder.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.session.Session;
 import io.micronaut.session.http.HttpSessionFilter;
@@ -48,7 +47,7 @@ public Argument<Optional<Session>> argumentType() {
     @Override
     public ArgumentBinder.BindingResult<Optional<Session>> bind(ArgumentConversionContext<Optional<Session>> context, HttpRequest<?> source) {
         MutableConvertibleValues<Object> attrs = source.getAttributes();
-        if (!attrs.contains(OncePerRequestHttpServerFilter.getKey(HttpSessionFilter.class))) {
+        if (!attrs.contains(HttpSessionFilter.class.getName())) {
             // the filter hasn't been executed but the argument is not satisfied
             return ArgumentBinder.BindingResult.UNSATISFIED;
         }

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionValueArgumentBinder.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.AnnotatedRequestArgumentBinder;
 import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.session.Session;
 import io.micronaut.session.annotation.SessionValue;
@@ -55,7 +54,7 @@ public Class<SessionValue> getAnnotationType() {
     @Override
     public ArgumentBinder.BindingResult<Optional> bind(ArgumentConversionContext<Optional> context, HttpRequest<?> source) {
         MutableConvertibleValues<Object> attrs = source.getAttributes();
-        if (!attrs.contains(OncePerRequestHttpServerFilter.getKey(HttpSessionFilter.class))) {
+        if (!attrs.contains(HttpSessionFilter.class.getName())) {
             // the filter hasn't been executed but the argument is not satisfied
             return ArgumentBinder.BindingResult.UNSATISFIED;
         }

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.session.Session;
 import io.micronaut.session.SessionStore;
@@ -62,7 +61,7 @@ public Argument<Session> argumentType() {
 
     @Override
     public ArgumentBinder.BindingResult<Session> bind(ArgumentConversionContext<Session> context, HttpRequest<?> source) {
-        if (!source.getAttributes().contains(OncePerRequestHttpServerFilter.getKey(HttpSessionFilter.class))) {
+        if (!source.getAttributes().contains(HttpSessionFilter.class.getName())) {
             // the filter hasn't been executed
             //noinspection unchecked
             return ArgumentBinder.BindingResult.EMPTY;

File: session/src/main/java/io/micronaut/session/binder/SessionValueArgumentBinder.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.AnnotatedRequestArgumentBinder;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.session.Session;
 import io.micronaut.session.annotation.SessionValue;
@@ -50,7 +49,7 @@ public Class<SessionValue> getAnnotationType() {
     @Override
     public BindingResult<Object> bind(ArgumentConversionContext<Object> context, HttpRequest<?> source) {
         MutableConvertibleValues<Object> attrs = source.getAttributes();
-        if (!attrs.contains(OncePerRequestHttpServerFilter.getKey(HttpSessionFilter.class))) {
+        if (!attrs.contains(HttpSessionFilter.class.getName())) {
             // the filter hasn't been executed but the argument is not satisfied
             //noinspection unchecked
             return ArgumentBinder.BindingResult.UNSATISFIED;

File: tracing/src/main/java/io/micronaut/tracing/jaeger/JaegerConfiguration.java
Patch:
@@ -60,9 +60,8 @@ public class JaegerConfiguration implements Toggleable  {
      *
      * @param applicationConfiguration The common application configurations
      */
-    public JaegerConfiguration(
-            ApplicationConfiguration applicationConfiguration) {
-		if (StringUtils.isEmpty(System.getProperty(JAEGER_SERVICE_NAME))
+    public JaegerConfiguration(ApplicationConfiguration applicationConfiguration) {
+        if (StringUtils.isEmpty(System.getProperty(JAEGER_SERVICE_NAME))
 				&& StringUtils.isEmpty(System.getenv(JAEGER_SERVICE_NAME))) {
             System.setProperty(JAEGER_SERVICE_NAME, applicationConfiguration.getName().orElse(Environment.DEFAULT_NAME));
         }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2183,8 +2183,6 @@ private <T> void filterReplacedBeans(BeanResolutionContext resolutionContext, Co
                                 if (comparisonFunction.apply(beanType)) {
                                     return true;
                                 }
-                            } else {
-                                return false;
                             }
                         } else {
                             if (comparisonFunction.apply(beanType)) {

File: aop/src/main/java/io/micronaut/aop/internal/InterceptorBeanMapper.java
Patch:
@@ -21,18 +21,18 @@
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.annotation.AnnotationValueBuilder;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.inject.annotation.TypedAnnotationTransformer;
+import io.micronaut.inject.annotation.TypedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
 
 @Internal
-public class InterceptorBeanMapper implements TypedAnnotationTransformer<InterceptorBean> {
+public class InterceptorBeanMapper implements TypedAnnotationMapper<InterceptorBean> {
 
     @Override
-    public List<AnnotationValue<?>> transform(AnnotationValue<InterceptorBean> annotation, VisitorContext visitorContext) {
+    public List<AnnotationValue<?>> map(AnnotationValue<InterceptorBean> annotation, VisitorContext visitorContext) {
         final AnnotationValueBuilder<Annotation> builder = AnnotationValue.builder(AnnotationUtil.ANN_INTERCEPTOR_BINDINGS);
         final AnnotationClassValue<?>[] values = annotation.annotationClassValues("value");
         AnnotationValue[] bindings = new AnnotationValue[values.length];

File: aop/src/main/java/io/micronaut/aop/chain/DefaultInterceptorRegistry.java
Patch:
@@ -107,7 +107,7 @@ public DefaultInterceptorRegistry(BeanContext beanContext) {
                         return isApplicableByType || isApplicationByBinding;
                     })).sorted(OrderUtil.COMPARATOR)
                     .map(BeanRegistration::getBean)
-                    .filter(bean -> !(bean instanceof ConstructorInterceptor))
+                    .filter(bean -> (bean instanceof MethodInterceptor) || !(bean instanceof ConstructorInterceptor))
                     .toArray(Interceptor[]::new);
             if (LOG.isTraceEnabled()) {
                 LOG.trace("Resolved {} {} interceptors out of a possible {} for method: {} - {}", resolvedInterceptors.length, interceptorKind, interceptors.size(), method.getDeclaringType(), method instanceof Described ? ((Described) method).getDescription(true) : method.toString());
@@ -161,7 +161,7 @@ public <T> Interceptor<T, T>[]  resolveConstructorInterceptors(
                     return isApplicableByType || isApplicationByBinding;
                 })).sorted(OrderUtil.COMPARATOR)
                 .map(BeanRegistration::getBean)
-                .filter(bean -> !(bean instanceof MethodInterceptor))
+                .filter(bean -> (bean instanceof ConstructorInterceptor) || !(bean instanceof MethodInterceptor))
                 .toArray(Interceptor[]::new);
         if (LOG.isTraceEnabled()) {
             LOG.trace("Resolved {} {} interceptors out of a possible {} for constructor: {} - {}", resolvedInterceptors.length, InterceptorKind.AROUND_CONSTRUCT, interceptors.size(), constructor.getDeclaringBeanType(), constructor.getDescription(true));

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -159,6 +159,8 @@ public JsonSerializer<?> build() {
                         }
                     }
                 };
+                
+                newBuilder.setAnyGetter(builder.getAnyGetter());
                 final List<BeanPropertyWriter> properties = builder.getProperties();
                 final Collection<BeanProperty<Object, Object>> beanProperties = introspection.getBeanProperties();
                 if (CollectionUtils.isEmpty(properties) && CollectionUtils.isNotEmpty(beanProperties)) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueBuilder.java
Patch:
@@ -512,6 +512,7 @@ public AnnotationValueBuilder<T> members(@Nullable Map<CharSequence, Object> mem
                                     clazz.isEnum() ||
                                     clazz == Class.class ||
                                     clazz == String.class ||
+                                    clazz == Enum.class ||
                                     clazz == AnnotationClassValue.class ||
                                     clazz == AnnotationValue.class
                             );

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -165,7 +165,7 @@ public boolean matches(AnnotationMetadata annotationMetadata) {
                     );
                     return e;
                 } else {
-                    final JavaMethodElement e = elementFactory.newMethodElement(rootClassElement, executableElement, annotationMetadata);
+                    final JavaMethodElement e = elementFactory.newSourceMethodElement(rootClassElement, executableElement, annotationMetadata);
                     visitor.visitMethod(
                             e,
                             visitorContext
@@ -175,7 +175,7 @@ public boolean matches(AnnotationMetadata annotationMetadata) {
             }
         } else if (element instanceof TypeElement) {
             TypeElement typeElement = (TypeElement) element;
-            this.rootClassElement = elementFactory.newClassElement(typeElement, annotationMetadata);
+            this.rootClassElement = elementFactory.newSourceClassElement(typeElement, annotationMetadata);
             visitor.visitClass(
                     rootClassElement,
                     visitorContext

File: inject/src/main/java/io/micronaut/context/EnvironmentAwareArgument.java
Patch:
@@ -63,7 +63,7 @@ public AnnotationMetadata getAnnotationMetadata() {
     }
 
     private AnnotationMetadata initAnnotationMetadata(@Nullable AnnotationMetadata annotationMetadata) {
-        if (annotationMetadata instanceof DefaultAnnotationMetadata) {
+        if (annotationMetadata instanceof DefaultAnnotationMetadata && annotationMetadata.hasPropertyExpressions()) {
             return new ArgumentAnnotationMetadata((DefaultAnnotationMetadata) annotationMetadata);
         } else if (annotationMetadata != null) {
             return annotationMetadata;

File: validation/src/main/java/io/micronaut/validation/validator/DefaultAnnotatedElementValidator.java
Patch:
@@ -53,7 +53,7 @@ public DefaultAnnotatedElementValidator() {
     /**
      * Local constraint validator lookup using service loader.
      */
-    private static class LocalConstraintValidators extends DefaultConstraintValidators {
+    private static final class LocalConstraintValidators extends DefaultConstraintValidators {
 
         private Map<ValidatorKey, ConstraintValidator> validatorMap;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -106,6 +106,7 @@
 import io.netty.util.concurrent.GenericFutureListener;
 import io.reactivex.Completable;
 import io.reactivex.Flowable;
+import io.reactivex.FlowableOperator;
 import io.reactivex.Scheduler;
 import io.reactivex.Single;
 import io.reactivex.SingleEmitter;

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -367,7 +367,7 @@ public static String convertDotToUnderscore(String dottedProperty, boolean upper
      * @return A combined uri string
      */
     public static String prependUri(String baseUri, String uri) {
-        if (!uri.startsWith("/")) {
+        if (!uri.startsWith("/") && !uri.startsWith("?")) {
             uri = "/" + uri;
         }
         if (uri.length() == 1 && uri.charAt(0) == '/') {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupRegistry.java
Patch:
@@ -127,8 +127,8 @@ protected EventLoopGroup eventLoopGroup(EventLoopGroupConfiguration configuratio
     @Singleton
     @Requires(missingProperty = EventLoopGroupConfiguration.DEFAULT_LOOP)
     @Primary
-    @Bean
     @BootstrapContextCompatible
+    @Bean(typed = { EventLoopGroup.class })
     protected EventLoopGroup defaultEventLoopGroup(@Named(NettyThreadFactory.NAME) ThreadFactory threadFactory) {
         EventLoopGroupConfiguration configuration = new DefaultEventLoopGroupConfiguration();
         EventLoopGroup eventLoopGroup = eventLoopGroupFactory.createEventLoopGroup(configuration, threadFactory);

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -251,6 +251,8 @@ static <T extends Annotation> T buildAnnotation(Class<T> annotationClass, @Nulla
 
     /**
      * Annotation proxy handler.
+     *
+     * @param <A> The annotation type
      */
     private static class AnnotationProxyHandler<A extends Annotation> implements InvocationHandler, AnnotationValueProvider<A> {
         private final int hashCode;

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -36,16 +36,16 @@
 @Internal
 public class DefaultArgument<T> implements Argument<T>, ArgumentCoercible<T> {
 
-    static final Set<Class<?>> CONTAINER_TYPES = CollectionUtils.setOf(
+    public static final Set<Class<?>> CONTAINER_TYPES = CollectionUtils.setOf(
         List.class,
         Set.class,
-        Map.class,
         Collection.class,
         Queue.class,
         SortedSet.class,
         Deque.class,
         Vector.class,
-        ArrayList.class);
+        ArrayList.class
+    );
 
     private final Class<T> type;
     private final String name;

File: core/src/main/java/io/micronaut/core/type/TypeInformation.java
Patch:
@@ -120,7 +120,8 @@ default boolean isAsyncOrReactive() {
      * @return Whether this is a container type.
      */
     default boolean isContainerType() {
-        return DefaultArgument.CONTAINER_TYPES.contains(getType());
+        final Class<T> type = getType();
+        return Map.class == type ||  DefaultArgument.CONTAINER_TYPES.contains(type);
     }
 
     /**

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.DefaultScope;
 import io.micronaut.context.annotation.Executable;
 import io.micronaut.core.annotation.Internal;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: aop/src/main/java/io/micronaut/aop/InterceptorBean.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.DefaultScope;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.lang.annotation.*;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java
Patch:
@@ -23,8 +23,7 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.Unpooled;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 /**
  * A {@link ByteBufferFactory} implementation for Netty.

File: context/src/main/java/io/micronaut/runtime/context/scope/Refreshable.java
Patch:
@@ -27,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A custom {@link javax.inject.Scope} that allows target beans to be refreshed.</p>
+ * <p>A custom scope that allows target beans to be refreshed.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: context/src/main/java/io/micronaut/runtime/context/scope/ScopedProxy.java
Patch:
@@ -18,8 +18,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Around;
+import jakarta.inject.Scope;
 
-import javax.inject.Scope;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: context/src/main/java/io/micronaut/runtime/context/scope/ThreadLocalCustomScope.java
Patch:
@@ -20,9 +20,9 @@
 import io.micronaut.context.scope.CustomScope;
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.BeanIdentifier;
+import jakarta.inject.Provider;
+import jakarta.inject.Singleton;
 
-import javax.inject.Provider;
-import javax.inject.Singleton;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;

File: context/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshInterceptor.java
Patch:
@@ -19,7 +19,8 @@
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
+
 import java.util.concurrent.locks.Lock;
 
 /**

File: context/src/main/java/io/micronaut/runtime/converters/time/TimeConverterRegistrar.java
Patch:
@@ -25,8 +25,8 @@
 import io.micronaut.core.convert.TypeConverterRegistrar;
 import io.micronaut.core.convert.format.Format;
 import io.micronaut.core.util.StringUtils;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeParseException;

File: context/src/main/java/io/micronaut/runtime/server/watch/event/FileWatchRestartListener.java
Patch:
@@ -21,11 +21,10 @@
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.micronaut.scheduling.io.watch.FileWatchConfiguration;
 import io.micronaut.scheduling.io.watch.event.FileChangedEvent;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Singleton;
-
 /**
  * Listener that stops the server if a file changes. Relies on external service like {@code gradle run --continuous} or Kubernetes replication controller is required to restart the container.
  *

File: context/src/main/java/io/micronaut/scheduling/DefaultTaskExceptionHandler.java
Patch:
@@ -16,12 +16,12 @@
 package io.micronaut.scheduling;
 
 import io.micronaut.context.annotation.Primary;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Nullable;
-import javax.inject.Singleton;
 
 /**
  * The default exception handler used if non other is found. Simply logs the exception.

File: context/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -20,9 +20,9 @@
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.cron.CronExpression;
+import jakarta.inject.Named;
+import jakarta.inject.Singleton;
 
-import javax.inject.Named;
-import javax.inject.Singleton;
 import java.time.Duration;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;

File: context/src/main/java/io/micronaut/scheduling/async/AsyncInterceptor.java
Patch:
@@ -27,11 +27,11 @@
 import io.micronaut.scheduling.TaskExecutors;
 import io.micronaut.scheduling.annotation.Async;
 import io.micronaut.scheduling.exceptions.TaskExecutionException;
+import jakarta.inject.Named;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Named;
-import javax.inject.Singleton;
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;

File: context/src/main/java/io/micronaut/scheduling/executor/DefaultExecutorSelector.java
Patch:
@@ -28,9 +28,9 @@
 import io.micronaut.scheduling.TaskExecutors;
 import io.micronaut.scheduling.annotation.ExecuteOn;
 import io.micronaut.scheduling.exceptions.SchedulerConfigurationException;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.util.Optional;
 import java.util.concurrent.ExecutorService;
 import java.util.function.Supplier;
@@ -54,7 +54,7 @@ public class DefaultExecutorSelector implements ExecutorSelector {
      * @param ioExecutor The IO executor
      */
     @Inject
-    protected DefaultExecutorSelector(BeanLocator beanLocator, @javax.inject.Named(TaskExecutors.IO) BeanProvider<ExecutorService> ioExecutor) {
+    protected DefaultExecutorSelector(BeanLocator beanLocator, @jakarta.inject.Named(TaskExecutors.IO) BeanProvider<ExecutorService> ioExecutor) {
         this.beanLocator = beanLocator;
         this.ioExecutor = SupplierUtil.memoized(ioExecutor::get);
     }

File: context/src/main/java/io/micronaut/scheduling/executor/DefaultThreadFactory.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 

File: context/src/main/java/io/micronaut/scheduling/executor/ExecutorFactory.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.inject.qualifiers.Qualifiers;
+import jakarta.inject.Inject;
 
-import javax.inject.Inject;
 import java.util.concurrent.*;
 
 /**

File: context/src/main/java/io/micronaut/scheduling/executor/IOExecutorServiceConfig.java
Patch:
@@ -18,9 +18,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.TaskExecutors;
-
-import javax.inject.Named;
-import javax.inject.Singleton;
+import jakarta.inject.Named;
+import jakarta.inject.Singleton;
 
 /**
  * Configures the default I/O thread pool if none is configured by the user.

File: context/src/main/java/io/micronaut/scheduling/executor/ScheduledExecutorServiceConfig.java
Patch:
@@ -18,9 +18,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.TaskExecutors;
-
-import javax.inject.Named;
-import javax.inject.Singleton;
+import jakarta.inject.Named;
+import jakarta.inject.Singleton;
 
 /**
  * A default executor service for scheduling adhoc tasks via

File: context/src/main/java/io/micronaut/scheduling/instrument/ExecutorServiceInstrumenter.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
 import io.micronaut.core.annotation.Internal;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Callable;

File: context/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java
Patch:
@@ -22,13 +22,13 @@
 import io.micronaut.context.event.ApplicationEventPublisher;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.io.watch.event.FileChangedEvent;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import io.micronaut.core.annotation.NonNull;
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
-import javax.inject.Singleton;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.*;

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/AsyncListener.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.scheduling.annotation.Async;
 import io.reactivex.Completable;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.util.concurrent.CompletableFuture;
 
 @Singleton

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/OverloadedListener.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ShutdownEvent;
 import io.micronaut.context.event.StartupEvent;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class OverloadedListener {

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/TestListener.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.event.StartupEvent;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class TestListener {

File: context/src/test/groovy/io/micronaut/runtime/event/annotation/itfce/DefaultThingService.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micronaut.context.event.ApplicationEventPublisher;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import java.util.ArrayList;
 import java.util.List;
 

File: context/src/test/groovy/io/micronaut/scheduling/MyJavaTask.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/BeanAndTypeSpecificHandler.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.scheduling.TaskExceptionHandler;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class BeanAndTypeSpecificHandler implements TaskExceptionHandler<ThrowsExceptionJob1, InstantiationException> {

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/InjectExceptionJob.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "injection-exception.task.enabled", value = "true")

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob1.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob2.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task2.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob3.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 @Requires(property = "scheduled-exception1.task3.enabled", value = StringUtils.TRUE)

File: context/src/test/groovy/io/micronaut/scheduling/exceptions/TypeSpecificHandler.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.scheduling.TaskExceptionHandler;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class TypeSpecificHandler implements TaskExceptionHandler<Object, InstantiationException> {

File: core-reactive/src/main/java/io/micronaut/core/async/ReactiveStreamsTypeInformationProvider.java
Patch:
@@ -35,7 +35,6 @@ public boolean isSpecifiedSingle(@NonNull AnnotationMetadataProvider annotationM
         AnnotationMetadata annotationMetadata = annotationMetadataProvider.getAnnotationMetadata();
         return annotationMetadata.hasStereotype(SingleResult.class) &&
                 annotationMetadata.booleanValue(SingleResult.NAME).orElse(true);
-
     }
 
     @Override

File: function-client/src/main/java/io/micronaut/function/client/DefaultFunctionDiscoveryClient.java
Patch:
@@ -22,9 +22,9 @@
 import io.micronaut.function.client.exceptions.FunctionNotFoundException;
 import io.micronaut.health.HealthStatus;
 import io.reactivex.Flowable;
+import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
 
-import javax.inject.Singleton;
 import java.net.URI;
 import java.util.Collection;
 import java.util.HashMap;

File: function-client/src/main/java/io/micronaut/function/client/DefaultFunctionInvokerChooser.java
Patch:
@@ -16,8 +16,8 @@
 package io.micronaut.function.client;
 
 import io.micronaut.context.annotation.Primary;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.Optional;
 
 /**

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -15,17 +15,17 @@
  */
 package io.micronaut.function.client;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.Type;
 import io.micronaut.function.client.aop.FunctionClientAdvice;
 import io.micronaut.retry.annotation.Recoverable;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 /**
  * The {@link FunctionClient} annotation allows applying introduction advise to an interface such that methods
  * defined by the interface become invokers of remote or local functions configured by the application.

File: function-client/src/main/java/io/micronaut/function/client/http/HttpFunctionExecutor.java
Patch:
@@ -28,10 +28,10 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpRequest;
 import io.micronaut.http.client.RxHttpClient;
+import jakarta.inject.Singleton;
 import org.reactivestreams.Publisher;
 
 import javax.annotation.PreDestroy;
-import javax.inject.Singleton;
 import java.io.Closeable;
 import java.io.IOException;
 import java.net.URI;

File: function-client/src/main/java/io/micronaut/function/client/local/LocalFunctionDefinitionProvider.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.function.client.FunctionDefinition;
 import io.micronaut.function.client.FunctionDefinitionProvider;
 import io.micronaut.runtime.server.EmbeddedServer;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Collections;

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -38,8 +38,8 @@
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.web.router.DefaultRouteBuilder;
 import io.micronaut.web.router.UriRoute;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.net.URI;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;

File: function/src/main/java/io/micronaut/function/executor/AbstractExecutor.java
Patch:
@@ -20,13 +20,12 @@
 import io.micronaut.context.ApplicationContextProvider;
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.PropertySource;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.function.LocalFunctionRegistry;
 import io.micronaut.inject.ExecutableMethod;
 
-import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.annotation.Nullable;
-
 import javax.annotation.PreDestroy;
 import java.io.Closeable;
 import java.io.IOException;

File: function/src/test/groovy/io/micronaut/function/executor/FunctionInitializerSpec.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.function.executor;
 
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import org.junit.Assert;
 import org.junit.Test;
 
 import javax.annotation.PostConstruct;
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicInteger;
 

File: function/src/test/groovy/io/micronaut/function/executor/TestFunctionExitHandler.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.function.executor;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class TestFunctionExitHandler implements FunctionExitHandler {

File: http-client-core/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -18,11 +18,10 @@
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Primary;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.ssl.ClientSslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
-
-import io.micronaut.core.annotation.Nullable;
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 /**
  * The default configuration if no explicit configuration is specified for an HTTP client.

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client;
 
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.LifeCycle;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;

File: http-client-core/src/main/java/io/micronaut/http/client/LoadBalancer.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micronaut.http.client;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.exceptions.NoAvailableServiceException;
 import io.micronaut.http.client.loadbalance.FixedLoadBalancer;
 import org.reactivestreams.Publisher;
 
-import io.micronaut.core.annotation.Nullable;
 import java.net.URL;
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClientRegistry.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micronaut.http.client;
 
-import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.HttpVersion;
 
 /**

File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -18,14 +18,13 @@
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.context.ClientContextPathProvider;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
+import jakarta.inject.Inject;
 
-import io.micronaut.core.annotation.Nullable;
-
-import javax.inject.Inject;
 import java.net.URI;
 import java.time.Duration;
 import java.util.Collections;

File: http-client-core/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.http.client.annotation;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Type;
@@ -25,11 +23,13 @@
 import io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice;
 import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 /**
  * Allows defining declarative HTTP clients and customizing injection for injecting {@link io.micronaut.http.client.HttpClient} implementations.
  *

File: http-client-core/src/main/java/io/micronaut/http/client/bind/AnnotatedClientArgumentRequestBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.bind;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Experimental;
+import io.micronaut.core.annotation.NonNull;
 
 import java.lang.annotation.Annotation;
 

File: http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micronaut.http.client.bind;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Indexed;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.http.MutableHttpRequest;
 

File: http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micronaut.http.client.bind;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.type.Argument;
 
 import java.util.Optional;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.bind;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Experimental;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.type.Argument;
 
 import java.util.Collections;

File: http-client-core/src/main/java/io/micronaut/http/client/converters/SocketAddressConverter.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.TypeConverter;
+
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Optional;

File: http-client-core/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -17,9 +17,9 @@
 
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpResponse;
+import io.micronaut.http.HttpResponseProvider;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.HttpResponseProvider;
 
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/filter/ClientFilterResolutionContext.java
Patch:
@@ -15,10 +15,11 @@
  */
 package io.micronaut.http.client.filter;
 
-import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
+
 import java.util.Collections;
 import java.util.List;
 

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/DiscoveryClientLoadBalancerFactory.java
Patch:
@@ -17,8 +17,7 @@
 
 import io.micronaut.discovery.DiscoveryClient;
 import io.micronaut.http.client.LoadBalancer;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 /**
  * A factory class that can be replaced at runtime for creating {@link LoadBalancer} instances that load balance

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/FixedLoadBalancer.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.http.client.loadbalance;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.http.client.LoadBalancer;
 import org.reactivestreams.Publisher;
 
-import io.micronaut.core.annotation.Nullable;
 import java.net.URL;
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/LoadBalancerConverters.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverterRegistrar;
 import io.micronaut.http.client.LoadBalancer;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListLoadBalancerFactory.java
Patch:
@@ -18,8 +18,7 @@
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.http.client.LoadBalancer;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 /**
  * The default {@link LoadBalancer} factory for creating {@link LoadBalancer} instances from

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListRoundRobinLoadBalancer.java
Patch:
@@ -15,13 +15,12 @@
  */
 package io.micronaut.http.client.loadbalance;
 
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import io.micronaut.core.annotation.Nullable;
-
 import java.util.Optional;
 
 /**

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/AbstractFilePart.java
Patch:
@@ -16,9 +16,10 @@
 package io.micronaut.http.client.multipart;
 
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.http.MediaType;
-import io.micronaut.core.annotation.Nullable;
+
 import java.io.IOException;
 import java.nio.charset.Charset;
 

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/FilePart.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.multipart;
 
 import io.micronaut.http.MediaType;
+
 import java.io.File;
 
 /**

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/InputStreamPart.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.multipart;
 
 import io.micronaut.http.MediaType;
+
 import java.io.InputStream;
 
 /**

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.multipart.MultipartException;
+
 import java.io.File;
 import java.io.InputStream;
 import java.util.ArrayList;

File: http-client-core/src/main/java/io/micronaut/http/client/rxjava2/RxReactiveClientResultTransformer.java
Patch:
@@ -23,8 +23,7 @@
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
 import io.reactivex.Flowable;
 import io.reactivex.Maybe;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 /**
  * Adds custom support for {@link Maybe} to handle NOT_FOUND results.

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.netty;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.async.subscriber.Completable;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: http-client/src/test/groovy/io/micronaut/http/client/MyJavaService.java
Patch:
@@ -16,9 +16,8 @@
 package io.micronaut.http.client;
 
 import io.micronaut.http.client.annotation.Client;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class MyJavaService {

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetControllerTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.client.docs.annotation;
 
 import io.micronaut.context.ApplicationContext;
-import io.micronaut.http.client.exceptions.HttpClientResponseException;
 import io.micronaut.runtime.server.EmbeddedServer;
 import org.junit.Rule;
 import org.junit.Test;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetOperations.java
Patch:
@@ -16,11 +16,13 @@
 package io.micronaut.http.client.docs.annotation;
 
 // tag::imports[]
+
 import io.micronaut.http.annotation.Post;
 import io.micronaut.validation.Validated;
 import io.reactivex.Single;
 
-import javax.validation.constraints.*;
+import javax.validation.constraints.Min;
+import javax.validation.constraints.NotBlank;
 // end::imports[]
 
 /**

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/requestattributes/StoryClient.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.docs.annotation.requestattributes;
 
-import io.micronaut.http.annotation.RequestAttribute;
 import io.micronaut.http.annotation.Get;
+import io.micronaut.http.annotation.RequestAttribute;
 import io.micronaut.http.annotation.RequestAttributes;
 import io.micronaut.http.client.annotation.Client;
 import io.reactivex.Single;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/BookController.java
Patch:
@@ -17,7 +17,9 @@
 
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.annotation.*;
+import io.micronaut.http.annotation.Controller;
+import io.micronaut.http.annotation.Post;
+import io.micronaut.http.annotation.Status;
 
 /**
  * @author graemerocher

File: http-client/src/test/groovy/io/micronaut/http/client/docs/sse/HeadlineController.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.http.sse.Event;
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
+
 import java.time.ZonedDateTime;
 import java.util.concurrent.TimeUnit;
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineController.java
Patch:
@@ -16,8 +16,10 @@
 package io.micronaut.http.client.docs.streaming;
 
 // tag::imports[]
+
 import io.micronaut.http.MediaType;
-import io.micronaut.http.annotation.*;
+import io.micronaut.http.annotation.Controller;
+import io.micronaut.http.annotation.Get;
 import io.reactivex.Flowable;
 
 import java.time.ZonedDateTime;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupConfiguration.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.netty.channel;
 
-import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.ConfigurationInject;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.util.StringUtils;
 

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EpollAvailabilityCondition.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
 import io.micronaut.core.annotation.Internal;
-
 import io.netty.channel.epoll.Epoll;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/KQueueAvailabilityCondition.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
 import io.micronaut.core.annotation.Internal;
-
 import io.netty.channel.kqueue.KQueue;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -24,9 +24,9 @@
 import io.netty.util.NettyRuntime;
 import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.internal.SystemPropertyUtil;
+import jakarta.inject.Named;
+import jakarta.inject.Singleton;
 
-import javax.inject.Named;
-import javax.inject.Singleton;
 import java.util.concurrent.ThreadFactory;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NioEventLoopGroupFactory.java
Patch:
@@ -15,18 +15,18 @@
  */
 package io.micronaut.http.netty.channel;
 
-import io.micronaut.core.annotation.NonNull;
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.ServerSocketChannel;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/EpollChannelOptionFactory.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.http.netty.channel.converters;
 
-import javax.inject.Singleton;
-
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
@@ -25,6 +23,7 @@
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollChannelOption;
 import io.netty.channel.unix.UnixChannelOption;
+import jakarta.inject.Singleton;
 
 /**
  * Creates channel options.

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookie.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micronaut.http.netty.cookies;
 
-import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.SameSite;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 
-import io.micronaut.core.annotation.NonNull;
 import java.util.Objects;
 import java.util.Optional;
 

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerPublisher.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.http.netty.reactive;
 
-import static io.micronaut.http.netty.reactive.HandlerPublisher.State.*;
-
 import io.micronaut.core.annotation.Internal;
 import io.netty.channel.ChannelDuplexHandler;
 import io.netty.channel.ChannelHandlerContext;
@@ -34,6 +32,8 @@
 import java.util.Queue;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static io.micronaut.http.netty.reactive.HandlerPublisher.State.*;
+
 /**
  * Publisher for a Netty Handler.
  * <p>

File: http-netty/src/main/java/io/micronaut/http/netty/stream/DelegateHttpMessage.java
Patch:
@@ -17,7 +17,9 @@
 
 import io.micronaut.core.annotation.Internal;
 import io.netty.handler.codec.DecoderResult;
-import io.netty.handler.codec.http.*;
+import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.handler.codec.http.HttpMessage;
+import io.netty.handler.codec.http.HttpVersion;
 
 /**
  * Delegate for HTTP Message.

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyRxWebSocketSession.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty.websocket;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
@@ -34,7 +35,6 @@
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
 
-import io.micronaut.core.annotation.Nullable;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Collections;

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyServerWebSocketBroadcaster.java
Patch:
@@ -24,8 +24,8 @@
 import io.netty.util.Attribute;
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.function.Predicate;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/WebSocketMessageEncoder.java
Patch:
@@ -27,8 +27,8 @@
 import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.WebSocketFrame;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.nio.ByteBuffer;
 import java.util.Optional;
 

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/WebSocketSessionRepository.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty.websocket;
 
-import io.netty.channel.group.ChannelGroup;
 import io.netty.channel.Channel;
+import io.netty.channel.group.ChannelGroup;
 
 /**
  * Defines a ChannelGroup repository to handle WebSockets.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractBufferingHttpContentProcessor.java
Patch:
@@ -16,9 +16,9 @@
 package io.micronaut.http.server.netty;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.core.async.processor.SingleThreadedBufferingProcessor;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
+import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.handler.codec.http.multipart.HttpData;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -16,9 +16,9 @@
 package io.micronaut.http.server.netty;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.core.async.processor.SingleSubscriberProcessor;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
+import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.util.ReferenceCountUtil;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpCompressionStrategy.java
Patch:
@@ -21,9 +21,8 @@
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpResponse;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 /**
  * Default implementation of {@link HttpCompressionStrategy}.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -16,10 +16,10 @@
 package io.micronaut.http.server.netty;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.core.async.processor.SingleThreadedBufferingProcessor;
 import io.micronaut.core.async.subscriber.SingleThreadedBufferingSubscriber;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
+import io.micronaut.http.netty.stream.StreamedHttpMessage;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.channel.ChannelHandlerContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.BeanProvider;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.CollectionUtils;
@@ -29,9 +30,8 @@
 import io.micronaut.inject.ExecutionHandle;
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;
-import io.micronaut.core.annotation.NonNull;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.io.InputStream;
 import java.util.Optional;
 import java.util.Set;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentSubscriberFactory.java
Patch:
@@ -18,8 +18,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Consumes;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 /**
  * Builds a {@link org.reactivestreams.Subscriber} for {@link MediaType#APPLICATION_FORM_URLENCODED}.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessorResolver.java
Patch:
@@ -16,11 +16,10 @@
 package io.micronaut.http.server.netty;
 
 import io.micronaut.context.annotation.DefaultImplementation;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.type.Argument;
 import io.micronaut.web.router.RouteMatch;
 
-import io.micronaut.core.annotation.NonNull;
-
 /**
  * Responsible for determining which {@link HttpContentProcessor} to use to process
  * the body of the request.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServerInstance.java
Patch:
@@ -22,11 +22,11 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.core.util.CollectionUtils;
+import io.micronaut.discovery.EmbeddedServerInstance;
 import io.micronaut.discovery.cloud.ComputeInstanceMetadata;
 import io.micronaut.discovery.cloud.ComputeInstanceMetadataResolver;
 import io.micronaut.discovery.metadata.ServiceInstanceMetadataContributor;
 import io.micronaut.runtime.server.EmbeddedServer;
-import io.micronaut.discovery.EmbeddedServerInstance;
 
 import java.net.URI;
 import java.util.HashMap;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestArgumentSatisfier.java
Patch:
@@ -19,10 +19,10 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.server.binding.RequestArgumentSatisfier;
 import io.micronaut.http.bind.RequestBinderRegistry;
+import io.micronaut.http.server.binding.RequestArgumentSatisfier;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.util.Optional;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/BasicAuthArgumentBinder.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
+
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.Optional;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -15,16 +15,16 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.netty.stream.StreamedHttpRequest;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.bind.binders.DefaultBodyAnnotationBinder;
 import io.micronaut.http.bind.binders.NonBlockingBodyArgumentBinder;
+import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.micronaut.http.server.netty.HttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentProcessorResolver;
 import io.micronaut.http.server.netty.NettyHttpRequest;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/MaybeBodyBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/ObservableBodyBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/SingleBodyBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micronaut.http.server.netty.configuration;
 
-import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Replaces;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.netty.channel.ChannelPipelineListener;
@@ -28,8 +28,8 @@
 import io.netty.channel.ChannelOption;
 import io.netty.handler.logging.LogLevel;
 import io.netty.handler.ssl.ApplicationProtocolNames;
+import jakarta.inject.Inject;
 
-import javax.inject.Inject;
 import java.time.Duration;
 import java.util.Collections;
 import java.util.List;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/DuplicateRouteHandler.java
Patch:
@@ -25,9 +25,8 @@
 import io.micronaut.http.server.exceptions.response.ErrorContext;
 import io.micronaut.http.server.exceptions.response.ErrorResponseProcessor;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 /**
  * Handles exceptions of type {@link DuplicateRouteException}.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/UnsatisfiedRouteHandler.java
Patch:
@@ -23,11 +23,11 @@
 import io.micronaut.http.server.exceptions.response.ErrorContext;
 import io.micronaut.http.server.exceptions.response.ErrorResponseProcessor;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.util.Optional;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/AbstractHttpMessageLogElement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * LogElement for ON_REQUEST_HEADERS and ON_RESPONSE_HEADERS events.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/ConstantElement.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.netty.channel.socket.SocketChannel;
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Set;
 
-import io.netty.channel.socket.SocketChannel;
-import io.netty.handler.codec.http.HttpHeaders;
-
 /**
  * ConstantElement LogElement. Represents a fixed value.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/CookiesElement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.List;
-import java.util.StringJoiner;
-
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
 
+import java.util.List;
+import java.util.StringJoiner;
+
 /**
  * CookiesElement LogElement. All cookies.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/DateTimeElement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.netty.channel.socket.SocketChannel;
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Locale;
 import java.util.Set;
 
-import io.netty.channel.socket.SocketChannel;
-import io.netty.handler.codec.http.HttpHeaders;
-
 /**
  * DateTimeElement LogElement.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/ElapseTimeElement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.netty.channel.socket.SocketChannel;
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-import io.netty.channel.socket.SocketChannel;
-import io.netty.handler.codec.http.HttpHeaders;
-
 /**
  * ElapseTimeElement LogElement. Time spent to complete the request.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/HeaderElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.util.List;
 import java.util.StringJoiner;
 
-import io.netty.handler.codec.http.HttpHeaders;
-
 /**
  * HeaderElement LogElement. A http header.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/HeadersElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.util.Map.Entry;
 import java.util.StringJoiner;
 
-import io.netty.handler.codec.http.HttpHeaders;
-
 /**
  * HeadersElement LogElement. All http headers.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LocalHostElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * LocalHostElement LogElement. The local host.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LocalIpElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * LocalIpElement LogElement. The local IP address.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LocalPortElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * LocalPortElement LogElement. The local port.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RemoteHostElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * RemoteHostElement LogElement.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RemoteIpElement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Locale;
-import java.util.Set;
-
 import io.micronaut.http.HttpHeaders;
 import io.netty.channel.socket.SocketChannel;
 
+import java.util.Locale;
+import java.util.Set;
+
 /**
  * RemoteIpElement LogElement. The remote IP address.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RequestLineElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * RequestLineElement LogElement. The request line.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RequestMethodElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * RequestMethodElement LogElement. The request method.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RequestProtocolElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * RequestProtocolElement LogElement. The request protocol.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/RequestUriElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * RequestUriElement LogElement. The request uri.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/ResponseCodeElement.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
-import java.util.Set;
-
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import java.util.Set;
+
 /**
  * ResponseCodeElement LogElement. The response code.
  *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.JsonNode;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;
 import io.micronaut.core.async.subscriber.TypedSubscriber;
@@ -35,7 +36,6 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import io.micronaut.core.annotation.Nullable;
 import java.util.Optional;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewCodecResolver.java
Patch:
@@ -15,9 +15,8 @@
  */
 package io.micronaut.http.server.netty.jackson;
 
-import io.micronaut.jackson.codec.JsonMediaTypeCodec;
-
 import io.micronaut.core.annotation.NonNull;
+import io.micronaut.jackson.codec.JsonMediaTypeCodec;
 
 /**
  * Interface for resolving codecs for {@link com.fasterxml.jackson.annotation.JsonView} types.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewServerFilter.java
Patch:
@@ -31,9 +31,9 @@
 import io.micronaut.scheduling.TaskExecutors;
 import io.reactivex.Flowable;
 import io.reactivex.schedulers.Schedulers;
+import jakarta.inject.Named;
 import org.reactivestreams.Publisher;
 
-import javax.inject.Named;
 import java.util.Optional;
 import java.util.concurrent.ExecutorService;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java
Patch:
@@ -20,7 +20,9 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.multipart.PartData;
 import io.micronaut.http.server.netty.HttpDataReference;
-import io.netty.buffer.*;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufInputStream;
+import io.netty.buffer.ByteBufUtil;
 
 import java.io.IOException;
 import java.io.InputStream;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -32,7 +32,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.*;
+import java.io.File;
+import java.io.IOException;
+import java.io.OutputStream;
 import java.nio.file.Files;
 import java.util.Optional;
 import java.util.concurrent.ExecutorService;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/DefaultCustomizableResponseTypeHandlerRegistry.java
Patch:
@@ -16,9 +16,9 @@
 package io.micronaut.http.server.netty.types;
 
 import io.micronaut.core.util.CollectionUtils;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -29,8 +29,8 @@
 import io.micronaut.http.server.types.files.SystemFile;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.FullHttpResponse;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.io.File;
 import java.time.LocalDateTime;
 import java.time.ZonedDateTime;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandlerConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.server.netty.types.files;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-
 import io.micronaut.core.annotation.NonNull;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -21,7 +21,8 @@
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.netty.types.stream.NettyStreamedCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
-import io.netty.handler.codec.http.*;
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpHeaderValues;
 
 import java.io.InputStream;
 import java.net.URL;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -27,7 +27,9 @@
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 import io.micronaut.http.server.types.files.SystemFile;
-import io.netty.channel.*;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.DefaultFileRegion;
 import io.netty.handler.codec.http.DefaultHttpResponse;
 import io.netty.handler.codec.http.HttpChunkedInput;
 import io.netty.handler.codec.http.LastHttpContent;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/stream/StreamTypeHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandler;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
 import io.netty.channel.ChannelHandlerContext;
+import jakarta.inject.Singleton;
 
-import javax.inject.Singleton;
 import java.io.InputStream;
 import java.util.Arrays;
 

File: http-server-netty/src/test/groovy/io/micronaut/docs/http/server/exception/OutOfStockExceptionHandler.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Requires(property = "spec.name", value = "ExceptionHandlerSpec")
 //tag::clazz[]

File: http-server-netty/src/test/groovy/io/micronaut/docs/http/server/exception/aterrorexceptionhandlerprecedence/OutOfStockExceptionHandler.java
Patch:
@@ -20,8 +20,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
-
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Requires(property = "spec.name", value = "AtErrorExceptionHandlerPrecedenceSpec")
 @Produces

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/binding/HttpRequestTest.java
Patch:
@@ -28,7 +28,6 @@
 import spock.mock.DetachedMockFactory;
 
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.BiConsumer;
 
 public class HttpRequestTest extends TestCase {
 

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -22,11 +22,11 @@
 import io.vertx.core.http.HttpClient;
 import io.vertx.core.http.HttpClientOptions;
 import io.vertx.core.http.HttpMethod;
+import jakarta.inject.Inject;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 
-import javax.inject.Inject;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/TestReactiveFilter.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.http.server.netty.interceptor;
 
-import io.micronaut.http.annotation.Filter;
-import io.reactivex.Flowable;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
+import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
+import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
 /**

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ParameterController.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micronaut.http.server.netty.java;
 
-import io.micronaut.http.annotation.QueryValue;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.HttpParameters;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
+import io.micronaut.http.annotation.QueryValue;
 
-import io.micronaut.core.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -93,4 +93,4 @@ String optionalList(Optional<List<Integer>> values) {
             return "Parameter Value: none";
         }
     }
-}
\ No newline at end of file
+}

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -33,7 +33,6 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.inject.ProxyBeanDefinition;
-import io.micronaut.inject.annotation.AnnotationMetadataSupport;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.ast.*;
 import io.micronaut.inject.configuration.ConfigurationMetadata;

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -163,6 +163,7 @@ public static <T> Iterator<T> reverseIterator(T...array) {
      * Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.
      *
      * @param collection The collection
+     * @param createArrayFn The function to create the array
      * @param <T> The create array function
      * @return The array
      */

File: function/src/main/java/io/micronaut/function/executor/StreamFunctionExecutor.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.core.convert.ConversionError;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
-import io.micronaut.core.io.IOUtils;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.exception.InvocationException;

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -445,6 +445,7 @@ protected boolean isValidInMessage(Object msg) {
 
     /**
      * The outgoing class.
+     * @param <O> The message type
      */
     static class Outgoing<O extends HttpMessage> {
         final O message;

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -57,7 +57,7 @@ public class PropertySourcePropertyResolver implements PropertyResolver {
     private static final String RANDOM_PREFIX = "\\s?random\\.(\\S+?)";
     private static final String RANDOM_UPPER_LIMIT = "(\\(-?\\d+(\\.\\d+)?\\))";
     private static final String RANDOM_RANGE = "(\\[-?\\d+(\\.\\d+)?,\\s?-?\\d+(\\.\\d+)?])";
-    private static final Pattern RANDOM_PATTERN = Pattern.compile("\\$\\{" + RANDOM_PREFIX + "(" + RANDOM_UPPER_LIMIT + "|" + RANDOM_RANGE + ")?}");
+    private static final Pattern RANDOM_PATTERN = Pattern.compile("\\$\\{" + RANDOM_PREFIX + "(" + RANDOM_UPPER_LIMIT + "|" + RANDOM_RANGE + ")?\\}");
     private static final char[] DOT_DASH = new char[] {'.', '-'};
     private static final Object NO_VALUE = new Object();
     private static final PropertyCatalog[] CONVENTIONS = {PropertyCatalog.GENERATED, PropertyCatalog.RAW};

File: inject/src/main/java/io/micronaut/inject/qualifiers/TypeAnnotationQualifier.java
Patch:
@@ -36,7 +36,7 @@
  * @since 1.0
  */
 @Internal
-class TypeAnnotationQualifier<T> implements Qualifier<T> {
+public class TypeAnnotationQualifier<T> implements Qualifier<T> {
 
     private final List<Class> types;
 

File: messaging/src/main/java/io/micronaut/messaging/MessagingApplication.java
Patch:
@@ -40,7 +40,7 @@
  */
 @Singleton
 @Requires(missingBeans = EmbeddedApplication.class)
-public class MessagingApplication implements EmbeddedApplication, Described {
+public class MessagingApplication implements EmbeddedApplication<MessagingApplication>, Described {
 
     private final ApplicationContext applicationContext;
     private final ApplicationConfiguration configuration;
@@ -91,7 +91,7 @@ public MessagingApplication start() {
     }
 
     @Override
-    public ApplicationContextLifeCycle stop() {
+    public MessagingApplication stop() {
         ApplicationContext applicationContext = getApplicationContext();
         if (applicationContext != null && applicationContext.isRunning()) {
             applicationContext.stop();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.multipart.FileUpload;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -658,7 +658,6 @@ public String getSimpleName() {
         return simpleName;
     }
 
-
     @Override
     public String getName() {
         if (name == null) {

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -183,7 +183,6 @@ public static String getClassName(TypeElement typeElement) {
         }
     }
 
-
     /**
      * Get the class name for the given type element without the package. Handles {@link NestingKind}.
      *

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2948,7 +2948,6 @@ private <T> T findExistingCompatibleSingleton(
                     Optional<BeanDefinition<T>> candidate = ((Qualifier) qualifier).qualify(beanClass, Stream.of(registration.beanDefinition));
                     if (candidate.isPresent()) {
                         synchronized (singletonObjects) {
-                            bean = (T) existing;
                             final BeanDefinition<T> beanDefinition = candidate.get();
                             final Set<Class<?>> exposedTypes = beanDefinition.getExposedTypes();
                             if (!exposedTypes.isEmpty() && !exposedTypes.contains(beanClass)) {
@@ -2957,6 +2956,7 @@ private <T> T findExistingCompatibleSingleton(
                             if (!beanDefinition.isCandidateBean(resolvedBeanType)) {
                                 continue;
                             }
+                            bean = (T) existing;
                             registerSingletonBean(
                                     beanDefinition,
                                     resolvedBeanType,

File: inject/src/main/java/io/micronaut/context/annotation/Factory.java
Patch:
@@ -57,7 +57,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Singleton
+@DefaultScope(Singleton.class)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 public @interface Factory {

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/AbstractRoundRobinLoadBalancer.java
Patch:
@@ -59,7 +59,7 @@ protected ServiceInstance getNextAvailable(List<ServiceInstance> serviceInstance
         }
     }
 
-    private int getServiceIndex(int len){
+    private int getServiceIndex(int len) {
         return index.getAndAccumulate(len, (cur, n) -> cur >= n - 1 ? 0 : cur + 1);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -432,7 +432,7 @@ public void setReadTimeout(@Nullable Duration readTimeout) {
     }
 
     /**
-     * Sets the max read idle time for streaming requests. Default value ({@value io.micronaut.http.client.HttpClientConfiguration#DEFAULT_READ_IDLE_TIMEOUT_MINUTES} seconds).
+     * Sets the max read idle time for streaming requests. Default value ({@value io.micronaut.http.client.HttpClientConfiguration#DEFAULT_READ_IDLE_TIMEOUT_MINUTES} minutes).
      *
      * @param readIdleTimeout The read idle time
      */

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -224,11 +224,11 @@ public int hashCode() {
         return Objects.hash(type, getName(), typeParameters);
     }
 
-    private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {
+    private static Map<String, Argument<?>> initializeTypeParameters(Argument<?>[] genericTypes) {
         Map<String, Argument<?>> typeParameters;
         if (genericTypes != null && genericTypes.length > 0) {
             typeParameters = new LinkedHashMap<>(genericTypes.length);
-            for (Argument genericType : genericTypes) {
+            for (Argument<?> genericType : genericTypes) {
                 typeParameters.put(genericType.getName(), genericType);
             }
         } else {

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -153,6 +153,9 @@ public Optional<Argument<?>> getFirstTypeVariable() {
 
     @Override
     public Argument[] getTypeParameters() {
+        if (typeParameterArray == null) {
+            return Argument.ZERO_ARGUMENTS;
+        }
         return typeParameterArray;
     }
 

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/MyBeanProvider.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.inject.foreach;
 
 import io.micronaut.context.annotation.EachBean;
+import io.micronaut.context.annotation.Parameter;
 
 import javax.inject.Provider;
 
@@ -24,7 +25,7 @@ public class MyBeanProvider {
 
     final Provider<MyConfiguration> configuration;
 
-    MyBeanProvider(Provider<MyConfiguration> configuration) {
+    MyBeanProvider(@Parameter Provider<MyConfiguration> configuration) {
         this.configuration = configuration;
     }
 

File: inject/src/main/java/io/micronaut/inject/provider/BeanProviderDefinition.java
Patch:
@@ -69,8 +69,7 @@ public Object get(Qualifier<Object> qualifier) {
             @Override
             public boolean isUnique() {
                 try {
-                    context.getBeanDefinition(argument, finalQualifier);
-                    return true;
+                    return context.getBeanDefinitions(argument, finalQualifier).size() == 1;
                 } catch (NoSuchBeanException e) {
                     return false;
                 }

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -311,7 +311,7 @@ public <R> Optional<RouteMatch<R>> route(@NonNull Class originatingClass, @NonNu
         for (ErrorRoute errorRoute : errorRoutes) {
             Optional<RouteMatch<R>> match = errorRoute.match(originatingClass, error);
             match.ifPresent(m ->
-                matchedRoutes.put(errorRoute, m)
+                    matchedRoutes.put(errorRoute, m)
             );
         }
         return findRouteMatch(matchedRoutes, error);

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -225,6 +225,8 @@ public static String getPackageName(TypeElement typeElement) {
         }
         if (enclosingElement == null) {
             return StringUtils.EMPTY_STRING;
+        } else if (enclosingElement instanceof PackageElement) {
+            return ((PackageElement) enclosingElement).getQualifiedName().toString();
         } else {
             return enclosingElement.toString();
         }

File: inject/src/main/java/io/micronaut/context/AbstractBeanResolutionContext.java
Patch:
@@ -82,10 +82,11 @@ public final Object getAttribute(CharSequence key) {
     }
 
     @Override
-    public final void removeAttribute(CharSequence key) {
+    public final Object removeAttribute(CharSequence key) {
         if (key != null) {
-            attributes.remove(key);
+            return attributes.remove(key);
         }
+        return null;
     }
 
     @Nullable

File: inject/src/main/java/io/micronaut/context/BeanResolutionContext.java
Patch:
@@ -70,8 +70,9 @@ default void close() {
     /**
      * Remove the attribute for the given key.
      * @param key the key
+     * @return The previous value
      */
-    void removeAttribute(CharSequence key);
+    Object removeAttribute(CharSequence key);
 
     /**
      * Adds a bean that is created as part of the resolution. This is used to store references to instances passed to {@link BeanContext#inject(Object)}

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -33,7 +33,6 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.inject.ProxyBeanDefinition;
-import io.micronaut.inject.annotation.AnnotationMetadataSupport;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.ast.*;
 import io.micronaut.inject.configuration.ConfigurationMetadata;

File: function/src/main/java/io/micronaut/function/executor/StreamFunctionExecutor.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.core.convert.ConversionError;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
-import io.micronaut.core.io.IOUtils;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.exception.InvocationException;

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -477,6 +477,8 @@ protected boolean isValidInMessage(Object msg) {
 
     /**
      * The outgoing class.
+     *
+     * @param <O> The message type
      */
     static class Outgoing<O extends HttpMessage> {
         final O message;

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -39,7 +39,6 @@
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 /**
  * Represents a media type.
@@ -275,7 +274,7 @@ public class MediaType implements CharSequence {
      * PDF: application/pdf.
      */
     public static final MediaType APPLICATION_PDF_TYPE = new MediaType(APPLICATION_PDF);
-    
+
     /**
      * Png Image: image/png.
      */

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.context;
 
-import com.sun.org.apache.xpath.internal.Arg;
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.env.PropertyPlaceholderResolver;
 import io.micronaut.context.event.*;
@@ -3626,7 +3625,6 @@ private <T> void addCandidateToList(
         }
     }
 
-
     private <T> boolean isCandidatePresent(Argument<T> beanType, Qualifier<T> qualifier) {
         qualifier = getQualifierForBeanType(beanType, qualifier);
         final Collection<BeanDefinition<T>> candidates = findBeanCandidates(null, beanType, true, null);

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -183,7 +183,6 @@ public static String getClassName(TypeElement typeElement) {
         }
     }
 
-
     /**
      * Get the class name for the given type element without the package. Handles {@link NestingKind}.
      *

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/repeatable/Topics.java
Patch:
@@ -5,5 +5,8 @@
 
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Topics {
+
+    String connectionName() default "default";
+
     Topic[] value();
 }

File: aop/src/main/java/io/micronaut/aop/Interceptor.java
Patch:
@@ -22,7 +22,7 @@
  * <p>An Interceptor intercepts the execution of a method allowing cross cutting behaviour to be applied to a
  * method's execution.</p>
  *
- * <p>All implementations should be thread safe and {@link javax.inject.Singleton} scoped beans</p>
+ * <p>All implementations should be thread safe beans</p>
  *
  * <p>In the case of {@link Around} advice the interceptor should invoke {@link InvocationContext#proceed()}
  * to proceed with the method invocation</p>

File: aop/src/main/java/io/micronaut/aop/chain/DefaultInterceptorRegistry.java
Patch:
@@ -123,7 +123,7 @@ public DefaultInterceptorRegistry(BeanContext beanContext) {
 
     @Override
     @NonNull
-    public <T> Interceptor<T, T>[] resolveConstructorInterceptors(
+    public <T> Interceptor<T, T>[]  resolveConstructorInterceptors(
             @NonNull BeanConstructor<T> constructor,
             @NonNull Collection<BeanRegistration<Interceptor<T, T>>> interceptors) {
         instrumentAnnotationMetadata(beanContext, constructor);

File: inject/src/main/java/io/micronaut/context/annotation/Bean.java
Patch:
@@ -41,7 +41,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.FIELD})
 public @interface Bean {
 
     /**

File: inject/src/main/java/io/micronaut/context/annotation/Requirements.java
Patch:
@@ -29,7 +29,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD})
+@Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD})
 public @interface Requirements {
 
     /**

File: inject/src/main/java/io/micronaut/context/annotation/Requires.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD})
+@Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD})
 @Repeatable(Requirements.class)
 public @interface Requires {
 

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.core.type;
 
 import io.micronaut.core.annotation.*;
-import io.micronaut.core.naming.Described;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.util.ArrayUtils;

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -163,7 +163,8 @@ public static <T> Iterator<T> reverseIterator(T...array) {
      * Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.
      *
      * @param collection The collection
-     * @param <T> The create array function
+     * @param createArrayFn The function to create the array
+     * @param <T> The type of the array
      * @return The array
      */
     public static <T> T[] toArray(Collection<T> collection, IntFunction<T[]> createArrayFn) {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupFactory.java
Patch:
@@ -26,6 +26,7 @@
 import io.netty.channel.socket.SocketChannel;
 import io.netty.util.ResourceLeakDetector;
 
+import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;
 

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java
Patch:
@@ -90,6 +90,9 @@ public ByteBuffer<ByteBuf> buffer(int initialCapacity, int maxCapacity) {
 
     @Override
     public ByteBuffer<ByteBuf> copiedBuffer(byte[] bytes) {
+        if (bytes.length == 0) {
+            return new NettyByteBuffer(Unpooled.EMPTY_BUFFER);
+        }
         return new NettyByteBuffer(Unpooled.copiedBuffer(bytes));
     }
 

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1329,7 +1329,7 @@ private void pushGetValueForPathCall(GeneratorAdapter injectMethodVisitor, Class
             );
         } else {
             buildArgumentWithGenerics(
-                    beanType,
+                    beanDefinitionType,
                     classWriter,
                     injectMethodVisitor,
                     propertyName,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/utils/InMemoryByteCodeGroovyClassLoader.java
Patch:
@@ -91,7 +91,9 @@ public Class<?> loadClass(String name) throws ClassNotFoundException {
         if (loadedClasses.containsKey(name)) {
             return loadedClasses.get(name);
         } else if (generatedClasses.containsKey(name)) {
-            return loadedClasses.computeIfAbsent(name, className -> defineClass(className, generatedClasses.get(className)));
+            final Class cls = defineClass(name, generatedClasses.get(name));
+            loadedClasses.put(name, cls);
+            return cls;
         } else {
             return super.loadClass(name);
         }

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -38,7 +38,7 @@
  *   }
  * </code></pre>
  *
- * <p>Note that the annotation MUST be {@link java.lang.annotation.RetentionPolicy#RUNTIME} and if the specified {@link io.micronaut.context.annotation.Type} is present, it must implement {@link MethodInterceptor}</p>
+ * <p>Note that the annotation MUST be {@link java.lang.annotation.RetentionPolicy#RUNTIME} and the specified {@link io.micronaut.context.annotation.Type} must implement {@link MethodInterceptor}</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationAdvice.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.runtime.context.env;
 
 import io.micronaut.aop.Introduction;
+import io.micronaut.context.annotation.Type;
 import io.micronaut.core.annotation.Internal;
 
 import java.lang.annotation.Retention;
@@ -30,6 +31,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Introduction
+@Type(ConfigurationIntroductionAdvice.class)
 @Internal
 public @interface ConfigurationAdvice {
     /**

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationIntroductionAdvice.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.runtime.context.env;
 
-import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.BeanContext;
@@ -41,7 +40,6 @@
  * @since 1.3.0
  */
 @Prototype
-@InterceptorBean(ConfigurationAdvice.class)
 @Internal
 public class ConfigurationIntroductionAdvice implements MethodInterceptor<Object, Object> {
     private static final String MEMBER_BEAN = "bean";

File: context/src/main/java/io/micronaut/scheduling/annotation/Async.java
Patch:
@@ -17,7 +17,9 @@
 
 import io.micronaut.aop.Around;
 import io.micronaut.context.annotation.Executable;
+import io.micronaut.context.annotation.Type;
 import io.micronaut.scheduling.TaskExecutors;
+import io.micronaut.scheduling.async.AsyncInterceptor;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -42,6 +44,7 @@
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Executable
 @Around
+@Type(AsyncInterceptor.class)
 public @interface Async {
     /**
      * The name of the executor service to execute the task on. Defaults to {@link TaskExecutors#SCHEDULED}

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -18,6 +18,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Introduction;
+import io.micronaut.context.annotation.Type;
+import io.micronaut.function.client.aop.FunctionClientAdvice;
 import io.micronaut.retry.annotation.Recoverable;
 
 import javax.inject.Singleton;
@@ -36,5 +38,6 @@
 @Singleton
 @Introduction
 @Recoverable
+@Type(FunctionClientAdvice.class)
 public @interface FunctionClient {
 }

File: http-client-core/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -19,8 +19,10 @@
 
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.context.annotation.Type;
 import io.micronaut.http.HttpVersion;
 import io.micronaut.http.client.HttpClientConfiguration;
+import io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice;
 import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
 
@@ -37,6 +39,7 @@
 @Documented
 @Retention(RUNTIME)
 @Introduction
+@Type(HttpClientIntroductionAdvice.class)
 @Recoverable
 @Singleton
 // tag::value[]

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.client.interceptor;
 
 import io.micronaut.aop.InterceptedMethod;
-import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.BeanContext;
@@ -76,7 +75,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@InterceptorBean(Client.class)
+@Singleton
 @Internal
 @BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object> {

File: validation/src/main/java/io/micronaut/validation/Validated.java
Patch:
@@ -18,6 +18,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Around;
+import io.micronaut.context.annotation.Type;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -33,5 +35,6 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
 @Around
+@Type(ValidatingInterceptor.class)
 public @interface Validated {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.*;
 import io.micronaut.websocket.WebSocketVersion;
+import io.micronaut.websocket.interceptor.ClientWebSocketInterceptor;
 import io.micronaut.websocket.interceptor.WebSocketSessionAware;
 
 import java.lang.annotation.Documented;
@@ -39,6 +40,7 @@
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @WebSocketComponent
 @Introduction(interfaces = WebSocketSessionAware.class)
+@Type(ClientWebSocketInterceptor.class)
 @DefaultScope(Prototype.class)
 public @interface ClientWebSocket {
 

File: websocket/src/main/java/io/micronaut/websocket/interceptor/ClientWebSocketInterceptor.java
Patch:
@@ -16,15 +16,13 @@
 package io.micronaut.websocket.interceptor;
 
 import io.micronaut.aop.InterceptedMethod;
-import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.websocket.WebSocketSession;
-import io.micronaut.websocket.annotation.ClientWebSocket;
 import io.micronaut.websocket.exceptions.WebSocketClientException;
 
 import java.io.Closeable;
@@ -36,7 +34,6 @@
  * @since 1.0
  */
 @Prototype
-@InterceptorBean(ClientWebSocket.class)
 public class ClientWebSocketInterceptor implements MethodInterceptor<Object, Object> {
 
     private WebSocketSession webSocketSession;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -91,7 +91,7 @@ void testPostVertx() throws ExecutionException, InterruptedException, TimeoutExc
             System.out.println("Received response with status code " + response.statusCode() + " " + response.version());
             response.bodyHandler(buffer -> result.complete(new String(buffer.getBytes())));
         })
-                .putHeader("content-length", "1000")
+                .putHeader("content-length", "9")
                 .write("Request-1")
                 .end();
 
@@ -105,7 +105,7 @@ void testPostVertx() throws ExecutionException, InterruptedException, TimeoutExc
             System.out.println("Received response with status code " + response.statusCode() + " " + response.version());
             response.bodyHandler(buffer -> result2.complete(new String(buffer.getBytes())));
         })
-        .putHeader("content-length", "1000")
+        .putHeader("content-length", "9")
         .write("Request-2")
         .end();
 

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -38,7 +38,7 @@
  *   }
  * </code></pre>
  *
- * <p>Note that the annotation MUST be {@link java.lang.annotation.RetentionPolicy#RUNTIME} and the specified {@link io.micronaut.context.annotation.Type} must implement {@link MethodInterceptor}</p>
+ * <p>Note that the annotation MUST be {@link java.lang.annotation.RetentionPolicy#RUNTIME} and if the specified {@link io.micronaut.context.annotation.Type} is present, it must implement {@link MethodInterceptor}</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationAdvice.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.runtime.context.env;
 
 import io.micronaut.aop.Introduction;
-import io.micronaut.context.annotation.Type;
 import io.micronaut.core.annotation.Internal;
 
 import java.lang.annotation.Retention;
@@ -31,7 +30,6 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Introduction
-@Type(ConfigurationIntroductionAdvice.class)
 @Internal
 public @interface ConfigurationAdvice {
     /**

File: context/src/main/java/io/micronaut/runtime/context/env/ConfigurationIntroductionAdvice.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.runtime.context.env;
 
+import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.BeanContext;
@@ -40,6 +41,7 @@
  * @since 1.3.0
  */
 @Prototype
+@InterceptorBean(ConfigurationAdvice.class)
 @Internal
 public class ConfigurationIntroductionAdvice implements MethodInterceptor<Object, Object> {
     private static final String MEMBER_BEAN = "bean";

File: context/src/main/java/io/micronaut/scheduling/annotation/Async.java
Patch:
@@ -17,9 +17,7 @@
 
 import io.micronaut.aop.Around;
 import io.micronaut.context.annotation.Executable;
-import io.micronaut.context.annotation.Type;
 import io.micronaut.scheduling.TaskExecutors;
-import io.micronaut.scheduling.async.AsyncInterceptor;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -44,7 +42,6 @@
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Executable
 @Around
-@Type(AsyncInterceptor.class)
 public @interface Async {
     /**
      * The name of the executor service to execute the task on. Defaults to {@link TaskExecutors#SCHEDULED}

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -18,8 +18,6 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Introduction;
-import io.micronaut.context.annotation.Type;
-import io.micronaut.function.client.aop.FunctionClientAdvice;
 import io.micronaut.retry.annotation.Recoverable;
 
 import javax.inject.Singleton;
@@ -38,6 +36,5 @@
 @Singleton
 @Introduction
 @Recoverable
-@Type(FunctionClientAdvice.class)
 public @interface FunctionClient {
 }

File: http-client-core/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -19,10 +19,8 @@
 
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.AliasFor;
-import io.micronaut.context.annotation.Type;
 import io.micronaut.http.HttpVersion;
 import io.micronaut.http.client.HttpClientConfiguration;
-import io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice;
 import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
 
@@ -39,7 +37,6 @@
 @Documented
 @Retention(RUNTIME)
 @Introduction
-@Type(HttpClientIntroductionAdvice.class)
 @Recoverable
 @Singleton
 // tag::value[]

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.interceptor;
 
 import io.micronaut.aop.InterceptedMethod;
+import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.BeanContext;
@@ -75,7 +76,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@Singleton
+@InterceptorBean(Client.class)
 @Internal
 @BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object> {

File: validation/src/main/java/io/micronaut/validation/Validated.java
Patch:
@@ -18,8 +18,6 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Around;
-import io.micronaut.context.annotation.Type;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -35,6 +33,5 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
 @Around
-@Type(ValidatingInterceptor.class)
 public @interface Validated {
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.*;
 import io.micronaut.websocket.WebSocketVersion;
-import io.micronaut.websocket.interceptor.ClientWebSocketInterceptor;
 import io.micronaut.websocket.interceptor.WebSocketSessionAware;
 
 import java.lang.annotation.Documented;
@@ -40,7 +39,6 @@
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @WebSocketComponent
 @Introduction(interfaces = WebSocketSessionAware.class)
-@Type(ClientWebSocketInterceptor.class)
 @DefaultScope(Prototype.class)
 public @interface ClientWebSocket {
 

File: websocket/src/main/java/io/micronaut/websocket/interceptor/ClientWebSocketInterceptor.java
Patch:
@@ -16,13 +16,15 @@
 package io.micronaut.websocket.interceptor;
 
 import io.micronaut.aop.InterceptedMethod;
+import io.micronaut.aop.InterceptorBean;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.websocket.WebSocketSession;
+import io.micronaut.websocket.annotation.ClientWebSocket;
 import io.micronaut.websocket.exceptions.WebSocketClientException;
 
 import java.io.Closeable;
@@ -34,6 +36,7 @@
  * @since 1.0
  */
 @Prototype
+@InterceptorBean(ClientWebSocket.class)
 public class ClientWebSocketInterceptor implements MethodInterceptor<Object, Object> {
 
     private WebSocketSession webSocketSession;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/ChannelPipelineCustomizer.java
Patch:
@@ -36,6 +36,7 @@ public interface ChannelPipelineCustomizer {
     String HANDLER_HTTP_CLIENT_CODEC = "http-client-codec";
     String HANDLER_HTTP_SERVER_CODEC = "http-server-codec";
     String HANDLER_HTTP_CLIENT_INIT = "http-client-init";
+    String HANDLER_HTTP_TO_HTTPS_REDIRECT = "http-to-https-redirect";
     String HANDLER_FLOW_CONTROL = "flow-control-handler";
     String HANDLER_CONNECT_TTL = "connect-ttl";
     String HANDLER_IDLE_STATE = "idle-state";

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -64,7 +64,7 @@
     boolean proxyTarget() default false;
 
     /**
-     * <p>If {@link #proxyTarget()} is set to <code>true</code> then one can optionally set the of <code>hotswap</code> to true
+     * <p>If {@link #proxyTarget()} is set to <code>true</code> then one can optionally set the value of <code>hotswap</code> to true
      * in which case the proxy will implement the {@link HotSwappableInterceptedProxy} interface.</p>
      *
      * @return True if the proxy should allow hotswap

File: aop/src/main/java/io/micronaut/aop/InterceptorBean.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.METHOD})
 @Bean
 @DefaultScope(Singleton.class)
 public @interface InterceptorBean {

File: aop/src/main/java/io/micronaut/aop/chain/package-info.java
Patch:
@@ -19,4 +19,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 package io.micronaut.aop.chain;
+
+import io.micronaut.core.annotation.Internal;

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.core.type;
 
 import io.micronaut.core.annotation.*;
+import io.micronaut.core.naming.Described;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.util.ArrayUtils;
@@ -464,4 +465,5 @@ static <K, V> Argument<Map<K, V>> mapOf(@NonNull Argument<K> keyType, @NonNull A
         //noinspection unchecked
         return of((Class<Map<K, V>>) ((Class) Map.class), keyType, valueType);
     }
+
 }

File: core/src/main/java/io/micronaut/core/type/ArgumentCoercible.java
Patch:
@@ -23,6 +23,7 @@
  * @param <T> The argument type
  * @since 3.0.0
  * @author graemerocher
+ * @param <T> The generic type
  */
 public interface ArgumentCoercible<T> {
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -47,9 +47,9 @@
 @Internal
 public class JavaMethodElement extends AbstractJavaElement implements MethodElement {
 
-    private final ExecutableElement executableElement;
-    private final JavaVisitorContext visitorContext;
-    private final JavaClassElement declaringClass;
+    protected final JavaClassElement declaringClass;
+    protected final ExecutableElement executableElement;
+    protected final JavaVisitorContext visitorContext;
     private JavaClassElement resolvedDeclaringClass;
     private ParameterElement[] parameters;
     private ParameterElement continuationParameter;

File: inject/src/main/java/io/micronaut/context/AbstractExecutable.java
Patch:
@@ -85,7 +85,7 @@ public int hashCode() {
     }
 
     @Override
-    public Argument[] getArguments() {
+    public Argument<?>[] getArguments() {
         return arguments;
     }
 

File: inject/src/main/java/io/micronaut/context/BeanDefinitionDelegate.java
Patch:
@@ -227,6 +227,7 @@ static <T> BeanDefinitionDelegate<T> create(BeanDefinition<T> definition) {
     }
 
     @Override
+    @NonNull
     public String getName() {
         return definition.getName();
     }

File: inject/src/main/java/io/micronaut/context/DefaultMethodConstructorInjectionPoint.java
Patch:
@@ -41,10 +41,10 @@ class DefaultMethodConstructorInjectionPoint<T> extends DefaultMethodInjectionPo
      * @param annotationMetadata The annotation metadata
      */
     DefaultMethodConstructorInjectionPoint(
-        BeanDefinition declaringBean,
+        BeanDefinition<T> declaringBean,
         Class<?> declaringType,
         String methodName,
-        @Nullable Argument[] arguments,
+        @Nullable Argument<?>[] arguments,
         @Nullable AnnotationMetadata annotationMetadata) {
         super(declaringBean, declaringType, methodName, arguments, annotationMetadata);
     }

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -50,7 +50,7 @@
 @Internal
 public class ExecutableMethodWriter extends AbstractAnnotationMetadataWriter implements Opcodes {
 
-    protected static final org.objectweb.asm.commons.Method METHOD_INVOKE_INTERNAL = org.objectweb.asm.commons.Method.getMethod(
+    public static final org.objectweb.asm.commons.Method METHOD_INVOKE_INTERNAL = org.objectweb.asm.commons.Method.getMethod(
             ReflectionUtils.getRequiredInternalMethod(AbstractExecutableMethod.class, "invokeInternal", Object.class, Object[].class));
     protected static final org.objectweb.asm.commons.Method METHOD_IS_ABSTRACT = org.objectweb.asm.commons.Method.getMethod(
             ReflectionUtils.getRequiredInternalMethod(ExecutableMethod.class, "isAbstract"));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -276,7 +276,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         NettyHttpRequest nettyHttpRequest = NettyHttpRequest.remove(ctx);
         if (nettyHttpRequest == null) {
-            if (cause instanceof SSLException || cause.getCause() instanceof SSLException) {
+            if (cause instanceof SSLException || cause.getCause() instanceof SSLException || isIgnorable(cause)) {
                 if (LOG.isDebugEnabled()) {
                     LOG.debug("Micronaut Server Error - No request state present. Cause: " + cause.getMessage(), cause);
                 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1225,7 +1225,8 @@ private void visitAdaptedMethod(ExecutableElement sourceMethod, AnnotationMetada
                             sourceMethodElement,
                             new AnnotationMetadataHierarchy(concreteClassMetadata, methodAnnotationMetadata),
                             new ClassElement[]{typeToImplementElement},
-                            metadataBuilder
+                            metadataBuilder,
+                            null
                     );
 
                     aopProxyWriter.visitDefaultConstructor(methodAnnotationMetadata);
@@ -1865,6 +1866,7 @@ private AopProxyWriter createIntroductionAdviceWriter(ClassElement typeElement)
                     annotationMetadata,
                     interfaceTypes,
                     metadataBuilder,
+                    configurationMetadata,
                     interceptorTypes
             );
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -658,11 +658,11 @@ private Optional<? extends FileCustomizableResponseType> matchFile(String path)
                 if (url.getProtocol().equals("file")) {
                     File file = Paths.get(url.toURI()).toFile();
                     if (file.exists() && !file.isDirectory() && file.canRead()) {
-                        return Optional.of(new NettySystemFileCustomizableResponseType(file, getIoExecutor()));
+                        return Optional.of(new NettySystemFileCustomizableResponseType(file));
                     }
                 }
 
-                return Optional.of(new NettyStreamedFileCustomizableResponseType(url, getIoExecutor()));
+                return Optional.of(new NettyStreamedFileCustomizableResponseType(url));
             } catch (URISyntaxException e) {
                 //no-op
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.util.Optional;
-import java.util.concurrent.Executor;
 
 /**
  * Writes a {@link File} to the Netty context.
@@ -64,7 +63,6 @@ public class NettySystemFileCustomizableResponseType extends SystemFile implemen
 
     /**
      * @param file The file
-     * @param executor The executor to read the file with
      */
     public NettySystemFileCustomizableResponseType(File file) {
         super(file);
@@ -82,7 +80,6 @@ public NettySystemFileCustomizableResponseType(File file) {
 
     /**
      * @param delegate The system file customizable response type
-     * @param executor The executor to read the file with
      */
     public NettySystemFileCustomizableResponseType(SystemFile delegate) {
         this(delegate.getFile());

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/stream/NettyStreamedCustomizableResponseType.java
Patch:
@@ -35,7 +35,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.concurrent.Executor;
 
 /**
  * Writes an {@link InputStream} to the Netty context.

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -74,4 +74,5 @@ public static String readText(BufferedReader reader) throws IOException {
         }
         return answer.toString();
     }
+
 }

File: function/src/main/java/io/micronaut/function/executor/StreamFunctionExecutor.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.convert.ConversionError;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
+import io.micronaut.core.io.IOUtils;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.exception.InvocationException;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -32,6 +32,7 @@
 import io.micronaut.core.annotation.NonNull;
 
 import javax.inject.Singleton;
+import java.io.InputStream;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.Supplier;
@@ -52,7 +53,7 @@
 @Internal
 class DefaultHttpContentProcessorResolver implements HttpContentProcessorResolver {
 
-    private static final Set<Class> RAW_BODY_TYPES = CollectionUtils.setOf(String.class, byte[].class, ByteBuffer.class);
+    private static final Set<Class> RAW_BODY_TYPES = CollectionUtils.setOf(String.class, byte[].class, ByteBuffer.class, InputStream.class);
 
     private final BeanLocator beanLocator;
     private final BeanProvider<NettyHttpServerConfiguration> serverConfiguration;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBinderRegistrar.java
Patch:
@@ -95,6 +95,9 @@ public RequestBinderRegistry onCreated(BeanCreatedEvent<RequestBinderRegistry> e
                 beanLocator,
                 httpServerConfiguration
         ));
+        registry.addRequestArgumentBinder(new InputStreamBodyBinder(
+                httpContentProcessorResolver
+        ));
         return registry;
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -184,7 +184,6 @@ private ByteBuf encodeBodyAsByteBuf(Object body, MediaTypeCodec codec, ChannelHa
                     LOG.error(e.getMessage());
                 }
             }
-
         } else {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Encoding emitted response object [{}] using codec: {}", body, codec);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseType.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.server.netty.types;
 
-import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
@@ -29,7 +28,6 @@
  * @since 1.0
  */
 @Internal
-@Experimental
 public interface NettyCustomizableResponseType extends CustomizableResponseType {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.server.netty.types;
 
-import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Indexed;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.order.Ordered;
@@ -31,7 +30,6 @@
  * @since 1.0
  */
 @Internal
-@Experimental
 @Indexed(NettyCustomizableResponseTypeHandler.class)
 public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandlerRegistry.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.server.netty.types;
 
-import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Internal;
 
 import java.util.Optional;
@@ -28,7 +27,6 @@
  * @since 1.0
  */
 @Internal
-@Experimental
 public interface NettyCustomizableResponseTypeHandlerRegistry {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyFileCustomizableResponseType.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.server.netty.types;
 
-import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 
@@ -26,6 +25,5 @@
  * @since 1.0
  */
 @Internal
-@Experimental
 public interface NettyFileCustomizableResponseType extends FileCustomizableResponseType, NettyCustomizableResponseType {
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationProcessingOutputVisitor.java
Patch:
@@ -71,7 +71,8 @@ public class AnnotationProcessingOutputVisitor extends AbstractClassWriterOutput
     public AnnotationProcessingOutputVisitor(Filer filer) {
         super(isEclipseFiler(filer));
         this.filer = filer;
-        this.isGradleFiler = filer.getClass().getName().startsWith("org.gradle.api");
+        final String filerName = filer.getClass().getName();
+        this.isGradleFiler = filerName.startsWith("org.gradle.api") || filerName.startsWith("org.jetbrains.kotlin.kapt3");
     }
 
     //--add-opens=java.base/$hostPackageName=ALL-UNNAMED

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataHierarchy.java
Patch:
@@ -166,7 +166,7 @@ public <T extends Annotation> Optional<AnnotationValue<T>> findAnnotation(@NonNu
                     for (Map.Entry<CharSequence, Object> entry : values.entrySet()) {
                         newValues.putIfAbsent(entry.getKey(), entry.getValue());
                     }
-                    ann = new AnnotationValue<>(annotation, newValues);
+                    ann = new AnnotationValue<>(annotation, newValues, AnnotationMetadataSupport.getDefaultValues(annotation));
                 }
             }
         }

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -59,7 +59,6 @@
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 /**
  * <p>Responsible for building {@link BeanDefinition} instances at compile time. Uses ASM build the class definition.</p>

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -144,7 +144,9 @@ public void onNext(PartData o) {
                     public void onError(Throwable t) {
                         emitter.onError(t);
                         try {
-                            outputStream.close();
+                            if (outputStream != null) {
+                                outputStream.close();
+                            }
                         } catch (IOException e) {
                             if (LOG.isWarnEnabled()) {
                                 LOG.warn("Failed to close file stream : " + fileUpload.getName());

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -230,6 +230,7 @@ public JsonSerializer<?> build() {
                     }
                     newBuilder.setProperties(newProperties);
                 }
+                newBuilder.setFilteredProperties(builder.getFilteredProperties());
                 return newBuilder;
             }
         }

File: context/src/main/java/io/micronaut/scheduling/executor/UserExecutorConfiguration.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.scheduling.executor;
 
+import io.micronaut.context.annotation.ConfigurationInject;
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
@@ -69,7 +70,7 @@ private UserExecutorConfiguration(@Parameter String name) {
      * @param corePoolSize the core pool size
      * @param threadFactoryClass the thread factory class
      */
-    @Inject
+    @ConfigurationInject
     protected UserExecutorConfiguration(@Nullable @Parameter String name,
                                         @Nullable Integer nThreads,
                                         @Nullable ExecutorType type,

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -1048,7 +1048,9 @@ Class<?>[] resolveClassValues(@Nullable Object value) {
         // conditional branches ordered from most likely to least likely
         // generally at runtime values are always AnnotationClassValue
         // A class can be present at compilation time
-        if (value instanceof AnnotationClassValue) {
+        if (value == null) {
+            return null;
+        } else if (value instanceof AnnotationClassValue) {
             Class<?> type = ((AnnotationClassValue<?>) value).getType().orElse(null);
             if (type != null) {
                 return new Class[]{type};

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -170,7 +170,7 @@ public void info(String message) {
     @Override
     public void fail(String message, @Nullable Element element) {
         Message msg;
-        if (element != null) {
+        if (element instanceof AbstractGroovyElement) {
             msg = buildErrorMessage(message, element);
         } else {
             msg = new SimpleMessage(message, sourceUnit);

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -198,7 +198,7 @@ public void warn(String message, @Nullable io.micronaut.inject.ast.Element eleme
 
     private void printMessage(String message, Diagnostic.Kind kind, @Nullable io.micronaut.inject.ast.Element element) {
         if (StringUtils.isNotEmpty(message)) {
-            if (element != null) {
+            if (element instanceof AbstractJavaElement) {
                 Element el = (Element) element.getNativeType();
                 messager.printMessage(kind, message, el);
             } else {

File: inject/src/main/java/io/micronaut/context/BeanContext.java
Patch:
@@ -185,8 +185,9 @@ default <T> T destroyBean(@NonNull Argument<T> beanType) {
      * Destroys the bean for the given type causing it to be re-created. If a singleton has been loaded it will be
      * destroyed and removed from the context, otherwise null will be returned.
      *
-     * @param beanType The bean type
-     * @param <T>      The concrete class
+     * @param beanType  The bean type
+     * @param qualifier The qualifier
+     * @param <T>       The concrete class
      * @return The destroy instance or null if no such bean exists
      * @since 3.0.0
      */

File: inject/src/main/java/io/micronaut/context/annotation/Type.java
Patch:
@@ -32,5 +32,5 @@
     /**
      * @return The types
      */
-    Class[] value();
+    Class<?>[] value();
 }

File: core/src/main/java/io/micronaut/core/order/OrderUtil.java
Patch:
@@ -127,7 +127,7 @@ public static int getOrder(AnnotationMetadata annotationMetadata, Object o) {
         if (o instanceof Ordered) {
             return getOrder((Ordered) o);
         }
-        return annotationMetadata.intValue(Order.class).orElse(Ordered.LOWEST_PRECEDENCE);
+        return annotationMetadata.intValue(Order.class).orElse(0);
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -66,8 +66,6 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor<H
         }
         factory.setMaxLimit(multipart.getMaxFileSize());
         this.decoder = new HttpPostRequestDecoder(factory, nettyHttpRequest.getNativeRequest(), characterEncoding);
-        //This is to work around a bug in Netty that should be resolved with https://github.com/netty/netty/pull/10623
-        this.decoder.setDiscardThreshold(Integer.MAX_VALUE);
         this.enabled = nettyHttpRequest.getContentType().map(type -> type.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)).orElse(false) ||
             multipart.isEnabled();
         this.partMaxSize = multipart.getMaxFileSize();

File: validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java
Patch:
@@ -67,6 +67,7 @@ public ConstraintExceptionHandler() {
 
     /**
      * Constructor.
+     * @param jacksonConfiguration Jackson configuration
      * @deprecated Use {@link ConstraintExceptionHandler(ErrorResponseProcessor)} instead.
      */
     @Deprecated

File: validation/src/main/java/io/micronaut/validation/routes/rules/RouteValidationRule.java
Patch:
@@ -16,9 +16,9 @@
 package io.micronaut.validation.routes.rules;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.uri.UriMatchTemplate;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
+import io.micronaut.validation.InternalUriMatchTemplate;
 import io.micronaut.validation.routes.RouteValidationResult;
 
 import java.util.Collections;
@@ -41,7 +41,7 @@ public interface RouteValidationRule {
      * @param method  The route method
      * @return A {@link RouteValidationResult}
      */
-    default RouteValidationResult validate(UriMatchTemplate template, ParameterElement[] parameters, MethodElement method) {
+    default RouteValidationResult validate(InternalUriMatchTemplate template, ParameterElement[] parameters, MethodElement method) {
         return validate(Collections.singletonList(template), parameters, method);
     }
 
@@ -53,6 +53,6 @@ default RouteValidationResult validate(UriMatchTemplate template, ParameterEleme
      * @param method  The route method
      * @return A {@link RouteValidationResult}
      */
-    RouteValidationResult validate(List<UriMatchTemplate> templates, ParameterElement[] parameters, MethodElement method);
+    RouteValidationResult validate(List<InternalUriMatchTemplate> templates, ParameterElement[] parameters, MethodElement method);
 
 }

File: validation/src/main/java/io/micronaut/validation/websocket/WebSocketVisitor.java
Patch:
@@ -19,11 +19,11 @@
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;
-import io.micronaut.http.uri.UriMatchTemplate;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.visitor.*;
+import io.micronaut.validation.InternalUriMatchTemplate;
 import io.micronaut.websocket.annotation.*;
 
 import javax.annotation.processing.SupportedOptions;
@@ -48,7 +48,7 @@ public class WebSocketVisitor implements TypeElementVisitor<WebSocketComponent,
     private static final String ON_MESSAGE = "io.micronaut.websocket.annotation.OnMessage";
     private static final String ON_ERROR = "io.micronaut.websocket.annotation.OnError";
 
-    private Map<String, UriMatchTemplate> uriCache = new HashMap<>(3);
+    private Map<String, InternalUriMatchTemplate> uriCache = new HashMap<>(3);
     private boolean skipValidation = false;
 
     @NonNull
@@ -70,7 +70,7 @@ public void visitMethod(MethodElement element, VisitorContext context) {
             return;
         }
         String uri = element.stringValue(WEB_SOCKET_COMPONENT).orElse("/ws");
-        UriMatchTemplate template = uriCache.computeIfAbsent(uri, UriMatchTemplate::of);
+        InternalUriMatchTemplate template = uriCache.computeIfAbsent(uri, InternalUriMatchTemplate::of);
         List<String> variables = template.getVariableNames();
         ParameterElement[] parameters = element.getParameters();
         if (ArrayUtils.isNotEmpty(parameters)) {

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/AbstractNettyWebSocketHandler.java
Patch:
@@ -239,7 +239,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
                         if (throwable != null && LOG.isErrorEnabled()) {
                             LOG.error("Error subscribing to @OnError handler " + target.getClass().getSimpleName() + "." + errorMethod.getExecutableMethod() + ": " + throwable.getMessage(), throwable);
                         }
-                        handleUnexpected(ctx, throwable);
+                        handleUnexpected(ctx, cause);
                     });
                 }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -754,7 +754,7 @@ public Map<String, Map<String, ClassElement>> getAllTypeArguments() {
         });
         Map<String, ClassElement> typeArguments = getTypeArguments();
         if (!typeArguments.isEmpty()) {
-            result.put(getName(), typeArguments);
+            result.put(JavaModelUtils.getClassName(this.classElement), typeArguments);
         }
         return result;
     }

File: core/src/main/java/io/micronaut/core/beans/BeanProperty.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
 import io.micronaut.core.type.Argument;
+import io.micronaut.core.type.ArgumentCoercible;
 import io.micronaut.core.util.ArgumentUtils;
 
 import io.micronaut.core.annotation.NonNull;
@@ -45,7 +46,7 @@
  * @see BeanIntrospection
  */
 @Immutable
-public interface BeanProperty<B, T> extends AnnotatedElement, AnnotationMetadataDelegate {
+public interface BeanProperty<B, T> extends AnnotatedElement, AnnotationMetadataDelegate, ArgumentCoercible<T> {
 
     /**
      * @return The declaring bean introspection.
@@ -254,6 +255,7 @@ default void convertAndSet(@NonNull B bean, @Nullable Object value) {
      *
      * @return The argument
      */
+    @Override
     default Argument<T> asArgument() {
         return Argument.of(getType());
     }

File: core/src/main/java/io/micronaut/core/type/ReturnType.java
Patch:
@@ -28,11 +28,12 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface ReturnType<T> extends TypeInformation<T>, AnnotationMetadataProvider {
+public interface ReturnType<T> extends TypeInformation<T>, AnnotationMetadataProvider, ArgumentCoercible<T> {
 
     /**
      * @return The return type as an argument
      */
+    @Override
     default @NonNull Argument<T> asArgument() {
         Collection<Argument<?>> values = getTypeVariables().values();
         return Argument.of(getType(), values.toArray(Argument.ZERO_ARGUMENTS));

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1512,7 +1512,7 @@ public Object visitVariable(VariableElement variable, Object o) {
                 }
 
                 ClassElement declaringClassElement = elementFactory.newClassElement(declaringClass, concreteClassMetadata);
-                FieldElement javaFieldElement = elementFactory.newFieldElement(variable, fieldAnnotationMetadata);
+                FieldElement javaFieldElement = elementFactory.newFieldElement(concreteClassElement, variable, fieldAnnotationMetadata);
                 addOriginatingElementIfNecessary(writer, declaringClass);
 
                 boolean isPrivate = javaFieldElement.isPrivate();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaElementFactory.java
Patch:
@@ -150,7 +150,7 @@ public JavaConstructorElement newConstructorElement(ClassElement declaringClass,
     @Override
     public JavaFieldElement newFieldElement(ClassElement declaringClass, @NonNull VariableElement field, @NonNull AnnotationMetadata annotationMetadata) {
         return new JavaFieldElement(
-                declaringClass,
+                (JavaClassElement) declaringClass,
                 field,
                 annotationMetadata,
                 visitorContext

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -125,7 +125,7 @@ public boolean matches(AnnotationMetadata annotationMetadata) {
     public @Nullable io.micronaut.inject.ast.Element visit(
             Element element, AnnotationMetadata annotationMetadata) {
         if (element instanceof VariableElement) {
-            final JavaFieldElement e = elementFactory.newFieldElement((VariableElement) element, annotationMetadata);
+            final JavaFieldElement e = elementFactory.newFieldElement(rootClassElement, (VariableElement) element, annotationMetadata);
             visitor.visitField(
                     e,
                     visitorContext

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -220,7 +220,7 @@ protected void initializeContext(List<BeanDefinitionReference> contextScopeBeans
     }
 
     @Override
-    protected <T> Collection<BeanDefinition<T>> findBeanCandidates(BeanResolutionContext resolutionContext, Class<T> beanType, BeanDefinition<?> filter, boolean filterProxied) {
+    protected <T> Collection<BeanDefinition<T>> findBeanCandidates(BeanResolutionContext resolutionContext, Argument<T> beanType, BeanDefinition<?> filter, boolean filterProxied) {
         Collection<BeanDefinition<T>> candidates = super.findBeanCandidates(resolutionContext, beanType, filter, filterProxied);
         return transformIterables(resolutionContext, candidates, filterProxied);
     }
@@ -286,7 +286,7 @@ protected <T> Collection<BeanDefinition<T>> transformIterables(BeanResolutionCon
                         continue;
                     }
 
-                    Collection<BeanDefinition> dependentCandidates = findBeanCandidates(resolutionContext, dependentType, null, filterProxied);
+                    Collection<BeanDefinition> dependentCandidates = findBeanCandidates(resolutionContext, Argument.of(dependentType), null, filterProxied);
                     if (!dependentCandidates.isEmpty()) {
                         for (BeanDefinition dependentCandidate : dependentCandidates) {
 

File: inject/src/main/java/io/micronaut/context/DefaultConditionContext.java
Patch:
@@ -23,6 +23,7 @@
 
 import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
+import io.micronaut.core.type.Argument;
 import io.micronaut.core.value.PropertyResolver;
 import io.micronaut.inject.BeanDefinition;
 
@@ -107,13 +108,13 @@ public <T> Optional<T> findBean(@NonNull Class<T> beanType, @Nullable Qualifier<
     @NonNull
     @Override
     public <T> Collection<T> getBeansOfType(@NonNull Class<T> beanType) {
-        return beanContext.getBeansOfType(resolutionContext, beanType);
+        return beanContext.getBeansOfType(resolutionContext, Argument.of(beanType));
     }
 
     @NonNull
     @Override
     public <T> Collection<T> getBeansOfType(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {
-        return beanContext.getBeansOfType(resolutionContext, beanType, qualifier);
+        return beanContext.getBeansOfType(resolutionContext, Argument.of(beanType), qualifier);
     }
 
     @NonNull

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -34,6 +34,7 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
+import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.value.PropertyResolver;
@@ -580,7 +581,7 @@ private boolean matchesAbsenceOfBeans(ConditionContext context, AnnotationValue<
                     // remove self by passing definition as filter
                     final Collection<? extends BeanDefinition<?>> beanDefinitions = beanContext.findBeanCandidates(
                             context.getBeanResolutionContext(),
-                            type,
+                            Argument.of(type),
                             bd,
                             true
                     );

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -59,7 +59,6 @@
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 /**
  * <p>Responsible for building {@link BeanDefinition} instances at compile time. Uses ASM build the class definition.</p>

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -112,6 +112,7 @@ public Set<String> getSupportedAnnotationTypes() {
         if (incremental) {
             final Set<String> types = CollectionUtils.setOf(
                     "javax.inject.*",
+                    "jakarta.inject.*",
                     "io.micronaut.*"
             );
             types.addAll(supportedAnnotationTypes);

File: runtime/src/main/java/io/micronaut/logging/LogLevel.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.logging;
 
+import io.micronaut.core.annotation.Introspected;
+
 /**
  * Logging levels supported by a {@link LoggingSystem}
  *
@@ -25,6 +27,7 @@
  * @author Matthew Moss
  * @since 1.0
  */
+@Introspected
 public enum LogLevel {
     ALL,
     TRACE,

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -209,7 +209,7 @@ private static final class ReverseArrayIterator<T> implements Iterator<T>, Itera
 
         private ReverseArrayIterator(T[] a) {
             _a = a;
-            _index = a.length > 0 ? a.length : -1;
+            _index = a.length > 0 ? a.length - 1 : -1;
         }
 
         @Override
@@ -219,7 +219,7 @@ public boolean hasNext() {
 
         @Override
         public T next() {
-            if (_index >= -1) {
+            if (_index <= -1) {
                 throw new NoSuchElementException();
             }
             return _a[_index--];

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -44,7 +44,7 @@
  * @since 1.0
  */
 @Internal
-class AnnotationMetadataSupport {
+public final class AnnotationMetadataSupport {
 
     private static final Map<String, Map<String, Object>> ANNOTATION_DEFAULTS = new ConcurrentHashMap<>(20);
 
@@ -92,7 +92,8 @@ class AnnotationMetadataSupport {
      * @param annotation The annotation
      * @return The default values for the annotation
      */
-    static Map<String, Object> getDefaultValues(String annotation) {
+    @UsedByGeneratedCode
+    public static Map<String, Object> getDefaultValues(String annotation) {
         return ANNOTATION_DEFAULTS.computeIfAbsent(annotation, s -> Collections.emptyMap());
     }
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanMethodWriter.java
Patch:
@@ -30,6 +30,7 @@
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.beans.AbstractExecutableBeanMethod;
+import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.writer.AbstractClassFileWriter;
 import io.micronaut.inject.writer.ClassWriterOutputVisitor;
 import org.jetbrains.annotations.NotNull;
@@ -75,7 +76,7 @@ final class BeanMethodWriter extends AbstractClassFileWriter implements Named {
             int index,
             MethodElement methodElement) {
         super(methodElement, methodElement.getDeclaringType());
-        this.type = getTypeReference(ClassElement.of(introspectionType.getClassName() + "$$exec" + index));
+        this.type = JavaModelUtils.getTypeReference(ClassElement.of(introspectionType.getClassName() + "$$exec" + index));
         this.classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
         this.methodElement = methodElement;
         this.introspectionWriter = introspectionWriter;
@@ -122,7 +123,7 @@ private void writeInvoke() {
         ClassElement declaringType = methodElement.getDeclaringType();
         invokeMethod.visitMethodInsn(
                 declaringType.isInterface() ? INVOKEINTERFACE : INVOKEVIRTUAL,
-                getTypeReference(declaringType).getInternalName(),
+                JavaModelUtils.getTypeReference(declaringType).getInternalName(),
                 methodElement.getName(),
                 methodDescriptor,
                 declaringType.isInterface()

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanPropertyWriter.java
Patch:
@@ -28,6 +28,7 @@
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.ast.*;
 import io.micronaut.core.beans.AbstractBeanProperty;
+import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.writer.AbstractClassFileWriter;
 import io.micronaut.inject.writer.ClassWriterOutputVisitor;
 import org.objectweb.asm.ClassWriter;
@@ -118,7 +119,7 @@ class BeanPropertyWriter extends AbstractClassFileWriter implements Named {
         this.readOnly = isReadOnly;
         this.isMutable = !readOnly || hasAssociatedConstructorArgument();
         this.annotationMetadata = annotationMetadata == AnnotationMetadata.EMPTY_METADATA ? null : annotationMetadata;
-        this.type = getTypeReference(ClassElement.of(introspectionType.getClassName() + "$$" + index));
+        this.type = JavaModelUtils.getTypeReference(ClassElement.of(introspectionType.getClassName() + "$$" + index));
         this.classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
         if (CollectionUtils.isNotEmpty(typeArguments)) {
             this.typeArguments = typeArguments;
@@ -391,7 +392,7 @@ private void writeWriteMethod() {
         pushCastToType(writeMethod, propertyType);
         final boolean hasWriteMethod = this.writeMethod != null;
         final String methodName = hasWriteMethod ? this.writeMethod.getName() : NameUtils.setterNameFor(propertyName);
-        final Type returnType = hasWriteMethod ? getTypeReference(this.writeMethod.getReturnType()) : Type.VOID_TYPE;
+        final Type returnType = hasWriteMethod ? JavaModelUtils.getTypeReference(this.writeMethod.getReturnType()) : Type.VOID_TYPE;
         if (declaringElement.isInterface()) {
             writeMethod.invokeInterface(
                     beanType,

File: inject/src/main/java/io/micronaut/inject/writer/ConfigBuilderState.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
+import io.micronaut.inject.processing.JavaModelUtils;
 import org.objectweb.asm.Type;
 
 import javax.annotation.concurrent.Immutable;
@@ -51,7 +52,7 @@ class ConfigBuilderState {
      * @param isInterface        Whether the type is an interface or not
      */
     ConfigBuilderState(ClassElement type, String name, boolean isMethod, AnnotationMetadata annotationMetadata, ConfigurationMetadataBuilder metadataBuilder, boolean isInterface) {
-        this.type = AbstractClassFileWriter.getTypeReference(type);
+        this.type = JavaModelUtils.getTypeReference(type);
         this.name = name;
         this.invokeMethod = isMethod;
         this.metadataBuilder = metadataBuilder;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -260,7 +260,7 @@ public String toString() {
             Map<String, TypeMirror> boundGenerics = resolveBoundGenerics(visitorContext, genericsInfo);
 
             TypeMirror bound = boundGenerics.get(tv.toString());
-            if (bound != null) {
+            if (bound != null && bound != tv) {
                 return mirrorToClassElement(bound, visitorContext, genericsInfo, includeTypeAnnotations);
             } else {
                 return mirrorToClassElement(upperBound, visitorContext, genericsInfo, includeTypeAnnotations);

File: core/src/main/java/io/micronaut/core/io/Writable.java
Patch:
@@ -48,7 +48,7 @@ public interface Writable extends Streamable {
      */
     @Override
     default void writeTo(OutputStream outputStream) throws IOException {
-        writeTo(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
+        writeTo(outputStream, null);
     }
 
     /**

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -425,7 +425,7 @@ private Map<String, ClassElement> resolveGenericMap(Map<String, ClassNode> info)
                         } else {
                             type = gt.getType();
                         }
-                        AnnotationMetadata annotationMetadata = resolveAnnotationMetadata(cn);
+                        AnnotationMetadata annotationMetadata = resolveAnnotationMetadata(type);
                         typeArgumentMap.put(redirectType.getName(), new GroovyClassElement(
                                 visitorContext,
                                 type,

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -553,6 +553,9 @@ protected static Type getTypeReference(TypedElement type) {
                 return Type.getType(t);
             } else {
                 String internalName = type.getType().getName().replace('.', '/');
+                if (internalName.isEmpty()) {
+                    return Type.getType(Object.class);
+                }
                 if (type.isArray()) {
                     StringBuilder name = new StringBuilder(internalName);
                     name.insert(0, "L");

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -46,6 +46,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@InterceptorBinding(kind = InterceptorKind.AROUND)
 public @interface Around {
 
     /**

File: aop/src/main/java/io/micronaut/aop/Introduction.java
Patch:
@@ -47,6 +47,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
+@InterceptorBinding(kind = InterceptorKind.INTRODUCTION)
 public @interface Introduction {
 
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -191,7 +191,7 @@ protected boolean hasStereotype(Element element, List<String> stereotypes) {
     public AnnotationMetadata getAnnotationMetadata(Element element) {
         AnnotationMetadata metadata = annotationMetadataCache.get(element);
         if (metadata == null) {
-            metadata = newAnnotationBuilder().buildOverridden(element);
+            metadata = javaAnnotationMetadataBuilder.buildOverridden(element);
             annotationMetadataCache.put(element, metadata);
         }
         return metadata;

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataHierarchy.java
Patch:
@@ -337,7 +337,7 @@ public <T> Optional<T> getDefaultValue(@NonNull String annotation, @NonNull Stri
     @Override
     public <T extends Annotation> List<AnnotationValue<T>> getAnnotationValuesByType(@NonNull Class<T> annotationType) {
         return Arrays.stream(hierarchy)
-                .flatMap(am -> am.getDeclaredAnnotationValuesByType(annotationType).stream())
+                .flatMap(am -> am.getAnnotationValuesByType(annotationType).stream())
                 .distinct()
                 .collect(Collectors.toList());
     }

File: test-suite/src/test/java/io/micronaut/docs/aop/introduction/Stub.java
Patch:
@@ -18,7 +18,6 @@
 // tag::imports[]
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.Bean;
-import io.micronaut.context.annotation.Type;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -32,8 +31,7 @@
 
 // tag::class[]
 @Introduction // <1>
-@Type(StubIntroduction.class) // <2>
-@Bean // <3>
+@Bean // <2>
 @Documented
 @Retention(RUNTIME)
 @Target({TYPE, ANNOTATION_TYPE, METHOD})

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -58,6 +58,7 @@ public class AnnotationUtil {
      */
     public static final List<String> STEREOTYPE_EXCLUDES = Arrays.asList(
             "javax.annotation",
+            "java.lang.annotation",
             "io.micronaut.core.annotation",
             "edu.umd.cs.findbugs.annotations"
     );

File: inject-java-test/src/test/groovy/io/micronaut/inject/annotation/ToTransformTransformer.java
Patch:
@@ -25,7 +25,7 @@ public class ToTransformTransformer implements TypedAnnotationTransformer<ToTran
     @Override
     public List<AnnotationValue<?>> transform(AnnotationValue<ToTransform> annotation, VisitorContext visitorContext) {
         return Collections.singletonList(
-                AnnotationValue.builder("test.Test").build()
+                AnnotationValue.builder("test.ToTransformOther").build()
         );
     }
 

File: messaging/src/main/java/io/micronaut/messaging/annotation/Body.java
Patch:
@@ -29,11 +29,13 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link MessageBody} instead
  */
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER})
 @Bindable
+@Deprecated
 public @interface Body {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/Header.java
Patch:
@@ -29,12 +29,14 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link MessageHeader} instead
  */
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.TYPE, ElementType.METHOD}) // this can be either type or param
 @Repeatable(value = Headers.class)
 @Bindable
+@Deprecated
 public @interface Header {
 
     /**

File: messaging/src/main/java/io/micronaut/messaging/annotation/Headers.java
Patch:
@@ -34,10 +34,12 @@
  *
  * @author graemerocher
  * @since 1.0
+ * @deprecated Use {@link MessageHeaders} instead
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Deprecated
 public @interface Headers {
 
     /***

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageListener.java
Patch:
@@ -36,7 +36,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.ANNOTATION_TYPE})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Bean
 @Executable(processOnStartup = true)
 @DefaultScope(Singleton.class)

File: messaging/src/main/java/io/micronaut/messaging/annotation/MessageMapping.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.ANNOTATION_TYPE})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 @EntryPoint
 public @interface MessageMapping {
 

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -402,11 +402,11 @@ public <A extends Annotation, T> Optional<ConstraintValidator<A, T>> findConstra
                         ReflectionUtils.getWrapperType(targetType)
                 );
                 Class<T> finalTargetType = targetType;
+                final Class[] finalTypeArguments = {constraintType, finalTargetType};
                 final Optional<ConstraintValidator> local = localValidators.entrySet().stream().filter(entry -> {
                             final ValidatorKey k = entry.getKey();
-                            return TypeArgumentQualifier.areTypesCompatible(
-                                    new Class[]{constraintType, finalTargetType},
-                                    Arrays.asList(k.constraintType, k.targetType)
+                    return TypeArgumentQualifier.areTypesCompatible(
+                            finalTypeArguments, Arrays.asList(k.constraintType, k.targetType)
                             );
                         }
                 ).map(Map.Entry::getValue).findFirst();

File: runtime/src/test/groovy/io/micronaut/scheduling/MyJavaTask.java
Patch:
@@ -38,8 +38,8 @@ public void runSomething() {
         wasRun = true;
     }
 
-    @Scheduled(cron = "1/3 0/1 * 1/1 * ?")
-    @Scheduled(cron = "1/4 0/1 * 1/1 * ?")
+    @Scheduled(fixedRate = "5s")
+    @Scheduled(fixedRate = "6s")
     void runCron() {
         cronEvents.incrementAndGet();
     }

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -288,10 +288,11 @@ public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig confi
                             props = new SettableBeanProperty[constructorArguments.length];
                             for (int i = 0; i < constructorArguments.length; i++) {
                                 Argument<?> argument = constructorArguments[i];
-                                final JavaType javaType = existing != null && existing.length > i ? existing[i].getType() : newType(argument, typeFactory);
+                                SettableBeanProperty existingProperty = existing != null && existing.length > i ? existing[i] : null;
+                                final JavaType javaType = existingProperty != null ? existingProperty.getType() : newType(argument, typeFactory);
                                 final AnnotationMetadata annotationMetadata = argument.getAnnotationMetadata();
                                 PropertyMetadata propertyMetadata = newPropertyMetadata(argument, annotationMetadata);
-                                final String simpleName = annotationMetadata.stringValue(JsonProperty.class).orElse(argument.getName());
+                                final String simpleName = existingProperty != null ? existingProperty.getName() : annotationMetadata.stringValue(JsonProperty.class).orElse(argument.getName());
                                 TypeDeserializer typeDeserializer;
                                 try {
                                     typeDeserializer = config.findTypeDeserializer(javaType);

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/ValidatedConfig.java
Patch:
@@ -16,11 +16,13 @@
 package io.micronaut.inject.configproperties;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
 
 import javax.validation.constraints.NotNull;
 import javax.validation.constraints.NotBlank;
 import java.net.URL;
 
+@Requires(property = "spec.name", value = "ValidatedConfigurationSpec")
 @ConfigurationProperties("foo.bar")
 public class ValidatedConfig {
 

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/ValidatedGetterConfig.java
Patch:
@@ -16,11 +16,13 @@
 package io.micronaut.inject.configproperties;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
 
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.net.URL;
 
+@Requires(property = "spec.name", value = "ValidatedGetterConfigurationSpec")
 @ConfigurationProperties("foo.bar")
 public class ValidatedGetterConfig {
 

File: inject-java/src/test/groovy/io/micronaut/inject/factory/inject/MyFactory.java
Patch:
@@ -17,9 +17,11 @@
 
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Prototype;
+import io.micronaut.context.annotation.Requires;
 
 import javax.inject.Inject;
 
+@Requires(property = "spec.name", value = "InjectExistingFactorySpec")
 @Factory
 public class MyFactory {
 

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/FactoryConstructor.java
Patch:
@@ -16,7 +16,9 @@
 package io.micronaut.inject.factory.nullreturn;
 
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Requires;
 
+@Requires(property = "spec.name", value = "NullReturnFactorySpec")
 @Factory
 public class FactoryConstructor {
 

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorcirculardependency/A.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.ctorcirculardependency;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "ConstructorCircularDependencyFailureSpec")
 @Singleton
 public class A {
     public A(C c) {}

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorcirculardependency/B.java
Patch:
@@ -15,9 +15,12 @@
  */
 package io.micronaut.inject.failures.ctorcirculardependency;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "ConstructorCircularDependencyFailureSpec")
 @Singleton
 public class B {
     @Inject

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorexception/A.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.ctorexception;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "ConstructorExceptionSpec")
 @Singleton
 public class A {
     public A(C c) {

File: inject-java/src/test/groovy/io/micronaut/inject/failures/ctorexception/C.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.ctorexception;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "ConstructorExceptionSpec")
 @Singleton
 public class C {
     public C() {

File: inject-java/src/test/groovy/io/micronaut/inject/failures/fieldcirculardependency/B.java
Patch:
@@ -15,9 +15,12 @@
  */
 package io.micronaut.inject.failures.fieldcirculardependency;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "FieldCircularDependencyFailureSpec")
 @Singleton
 public class B {
     @Inject

File: inject-java/src/test/groovy/io/micronaut/inject/failures/nesteddependency/A.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.nesteddependency;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "NestedDependencyFailureSpec")
 @Singleton
 public class A {
     public A(C c) {

File: inject-java/src/test/groovy/io/micronaut/inject/failures/nesteddependency/C.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.nesteddependency;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "NestedDependencyFailureSpec")
 @Singleton
 public class C {
     public C(D d) {

File: inject-java/src/test/groovy/io/micronaut/inject/failures/postconstruct/A.java
Patch:
@@ -15,8 +15,11 @@
  */
 package io.micronaut.inject.failures.postconstruct;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "PostConstructExceptionSpec")
 @Singleton
 public class A {
 

File: inject-java/src/test/groovy/io/micronaut/inject/failures/postconstruct/B.java
Patch:
@@ -15,10 +15,13 @@
  */
 package io.micronaut.inject.failures.postconstruct;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "PostConstructExceptionSpec")
 @Singleton
 public class B {
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/nullableinjection/C.java
Patch:
@@ -15,9 +15,12 @@
  */
 package io.micronaut.inject.method.nullableinjection;
 
+import io.micronaut.context.annotation.Requires;
+
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "SetterWithNullableSpec")
 @Singleton
 public class C {
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/ConstructorPropertyInject.java
Patch:
@@ -16,12 +16,14 @@
 package io.micronaut.inject.property;
 
 import io.micronaut.context.annotation.Property;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.format.MapFormat;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 import java.util.Map;
 
+@Requires(property = "spec.name", value = "PropertyAnnotationSpec")
 @Singleton
 public class ConstructorPropertyInject {
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/FieldPropertyInject.java
Patch:
@@ -17,12 +17,14 @@
 
 import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.context.annotation.Property;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.format.MapFormat;
 
 import javax.inject.Singleton;
 import java.util.List;
 import java.util.Map;
 
+@Requires(property = "spec.name", value = "PropertyAnnotationSpec")
 @Singleton
 public class FieldPropertyInject {
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/MethodPropertyInject.java
Patch:
@@ -16,13 +16,15 @@
 package io.micronaut.inject.property;
 
 import io.micronaut.context.annotation.Property;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.format.MapFormat;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.Map;
 
+@Requires(property = "spec.name", value = "PropertyAnnotationSpec")
 @Singleton
 public class MethodPropertyInject {
 

File: inject-java/src/test/groovy/io/micronaut/inject/provider/ErrorEachBeanProvider.java
Patch:
@@ -3,10 +3,12 @@
 import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Parameter;
+import io.micronaut.context.annotation.Requires;
 
 import javax.inject.Provider;
 
 
+@Requires(property = "spec.name", value = "ProviderNamedInjectionSpec")
 @EachBean(BeanNumber.class)
 public class ErrorEachBeanProvider {
 

File: inject-java/src/test/groovy/io/micronaut/inject/value/nullablevalue/A.java
Patch:
@@ -15,12 +15,14 @@
  */
 package io.micronaut.inject.value.nullablevalue;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "NullableValueSpec")
 @Singleton
 public class A {
 

File: inject-java/src/test/groovy/io/micronaut/inject/value/singletonwithvalue/A.java
Patch:
@@ -15,13 +15,15 @@
  */
 package io.micronaut.inject.value.singletonwithvalue;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.net.URL;
 import java.util.Optional;
 
+@Requires(property = "spec.name", value = "ValueSpec")
 @Singleton
 public class A {
     int fromConstructor;

File: inject-java/src/test/groovy/io/micronaut/inject/value/singletonwithvalue/B.java
Patch:
@@ -15,10 +15,12 @@
  */
 package io.micronaut.inject.value.singletonwithvalue;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
 
 import javax.inject.Singleton;
 
+@Requires(property = "spec.name", value = "ValueSpec")
 @Singleton
 public class B {
     int fromConstructor;
@@ -47,4 +49,4 @@ public A getA() {
     public void setA(A a) {
         this.a = a;
     }
-}
\ No newline at end of file
+}

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2841,7 +2841,7 @@ private void readAllBeanDefinitionClasses() {
     private boolean isEagerInit(BeanDefinitionReference beanDefinitionReference) {
         return beanDefinitionReference.isContextScope() ||
                 (eagerInitSingletons && beanDefinitionReference.isSingleton()) ||
-                (eagerInitStereotypesPresent && beanDefinitionReference.getAnnotationMetadata().hasStereotype(eagerInitStereotypes));
+                (eagerInitStereotypesPresent && beanDefinitionReference.getAnnotationMetadata().hasDeclaredStereotype(eagerInitStereotypes));
     }
 
     @NonNull

File: runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class JacksonConfiguration {
     public static final String PROPERTY_USE_BEAN_INTROSPECTION = "jackson.bean-introspection-module";
 
     private boolean moduleScan = true;
-    private boolean beanIntrospectionModule = false;
+    private boolean beanIntrospectionModule = true;
     private String dateFormat;
     private Locale locale;
     private TimeZone timeZone;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/AccessLogFormatParser.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.TreeSet;
 import java.util.stream.Collectors;
 
+import io.micronaut.core.order.OrderUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -102,6 +103,7 @@ public class AccessLogFormatParser {
                 LOG_ELEMENT_BUILDERS.add(definition.load());
             }
         }
+        OrderUtil.sort(LOG_ELEMENT_BUILDERS);
         trimToSize(LOG_ELEMENT_BUILDERS);
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/LogElementBuilder.java
Patch:
@@ -15,13 +15,15 @@
  */
 package io.micronaut.http.server.netty.handler.accesslog.element;
 
+import io.micronaut.core.order.Ordered;
+
 /**
  * Builder for LogElement.
  *
  * @author croudet
  * @since 2.0
  */
-public interface LogElementBuilder {
+public interface LogElementBuilder extends Ordered {
 
     /**
      * Builds the log element for the specified token. It should return null it the token is not supported.

File: aop/src/main/java/io/micronaut/aop/MethodInvocationContext.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.inject.ExecutableMethod;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Extended version of {@link InvocationContext} for {@link MethodInterceptor} instances.

File: aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.aop.chain;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.aop.*;
 import io.micronaut.aop.exceptions.UnimplementedAdviceException;
 import io.micronaut.context.ApplicationContext;
@@ -34,7 +34,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;

File: aop/src/main/java/io/micronaut/aop/chain/MethodInterceptorChain.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.type.ReturnType;
 import io.micronaut.inject.ExecutableMethod;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.reflect.Method;
 
 /**

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.aop.writer;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.aop.HotSwappableInterceptedProxy;
 import io.micronaut.aop.Intercepted;
 import io.micronaut.aop.InterceptedProxy;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationClassValue.java
Patch:
@@ -17,8 +17,6 @@
 
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.util.ArgumentUtils;
-
-import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Objects;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.ReflectionUtils;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.value.OptionalValues;
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataProvider.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationSource.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.util.ArgumentUtils;
 
 import java.lang.annotation.Annotation;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -57,6 +57,7 @@ public class AnnotationUtil {
      */
     public static final List<String> STEREOTYPE_EXCLUDES = Arrays.asList(
             "javax.annotation",
+            "io.micronaut.core.annotation",
             "edu.umd.cs.findbugs.annotations"
     );
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueBuilder.java
Patch:
@@ -15,9 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
-
 import java.lang.annotation.Annotation;
 import java.lang.annotation.RetentionPolicy;
 import java.util.HashMap;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java
Patch:
@@ -16,8 +16,6 @@
 package io.micronaut.core.annotation;
 
 import io.micronaut.core.value.ValueResolver;
-
-import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.*;
 
 /**

File: core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.core.annotation;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.StringUtils;

File: core/src/main/java/io/micronaut/core/attr/AttributeHolder.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Optional;
 
 /**

File: core/src/main/java/io/micronaut/core/attr/MutableAttributeHolder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.core.attr;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospection.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import java.lang.annotation.Annotation;
 import java.util.*;

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospectionReference.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.UsedByGeneratedCode;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 
 /**

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanMethod.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.core.beans;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.UsedByGeneratedCode;

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanProperty.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import java.util.Objects;
 

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospection.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.annotation.concurrent.Immutable;
 import java.lang.annotation.Annotation;
 import java.util.Collection;

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionMap.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.util.CollectionUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionReference.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.naming.Named;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * A reference to a {@link BeanIntrospection} that may or may not be present on the classpath.

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospector.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.beans.exceptions.IntrospectionException;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.annotation.concurrent.Immutable;
 import java.lang.annotation.Annotation;
 import java.util.Arrays;

File: core/src/main/java/io/micronaut/core/beans/BeanMap.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Map;
 
 /**

File: core/src/main/java/io/micronaut/core/beans/BeanMethod.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.beans;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.type.Executable;
 import io.micronaut.core.type.ReturnType;

File: core/src/main/java/io/micronaut/core/beans/BeanProperty.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import javax.annotation.concurrent.Immutable;
 import java.util.Arrays;
 import java.util.Collection;

File: core/src/main/java/io/micronaut/core/beans/BeanWrapper.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Collection;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/beans/DefaultBeanIntrospector.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import org.slf4j.Logger;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;

File: core/src/main/java/io/micronaut/core/beans/DefaultBeanWrapper.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Objects;
 
 /**

File: core/src/main/java/io/micronaut/core/beans/PropertyDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.naming.Named;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.lang.reflect.Method;
 
 /**

File: core/src/main/java/io/micronaut/core/beans/ReflectionBeanMap.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.reflect.ReflectionUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.reflect.Method;
 import java.util.Collection;
 import java.util.Map;

File: core/src/main/java/io/micronaut/core/bind/DefaultExecutableBinder.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.Executable;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.*;
 
 /**

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.ArrayUtils;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.lang.annotation.Annotation;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;

File: core/src/main/java/io/micronaut/core/convert/ConversionService.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
 import io.micronaut.core.type.Argument;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Optional;
 import java.util.function.Function;
 

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.core.type.Argument;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.convert.value;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.convert.value;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleValues.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.convert.value;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Map;
 
 /**

File: core/src/main/java/io/micronaut/core/exceptions/BeanExceptionHandler.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.core.exceptions;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.util.function.BiConsumer;
 
 /**

File: core/src/main/java/io/micronaut/core/io/FileReadable.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.io.*;
 import java.nio.charset.Charset;
 import java.nio.file.Files;

File: core/src/main/java/io/micronaut/core/io/Readable.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.annotation.concurrent.Immutable;
 import java.io.*;
 import java.net.URL;

File: core/src/main/java/io/micronaut/core/io/ResourceResolver.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.io.InputStream;
 import java.net.URL;
 import java.util.Arrays;

File: core/src/main/java/io/micronaut/core/io/Streamable.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.io;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;

File: core/src/main/java/io/micronaut/core/io/UrlReadable.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;

File: core/src/main/java/io/micronaut/core/io/Writable.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.io;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.io.ResourceLoader;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * Abstraction to load resources from the the classpath.

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.StringUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Arrays;
 import java.util.Locale;
 import java.util.regex.Matcher;

File: core/src/main/java/io/micronaut/core/naming/Named.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.naming;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * An interface for components that are named.

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -22,8 +22,8 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.helpers.NOPLogger;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.net.URI;

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.reflect.Constructor;
 import java.util.*;
 import java.util.function.Function;

File: core/src/main/java/io/micronaut/core/serialize/ObjectSerializer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.serialize.exceptions.SerializationException;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.type.Argument;
 
 import java.io.ByteArrayInputStream;

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.util.ArrayUtils;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;

File: core/src/main/java/io/micronaut/core/type/Executable.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.core.type;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 
 /**

File: core/src/main/java/io/micronaut/core/type/ReturnType.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.type;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.async.annotation.SingleResult;

File: core/src/main/java/io/micronaut/core/util/ArgumentUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Utility methods for checking method argument values.

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.lang.reflect.Array;
 import java.util.*;
 

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.core.annotation.UsedByGeneratedCode;
 import io.micronaut.core.convert.ConversionService;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.lang.reflect.Constructor;
 import java.util.*;
 

File: core/src/main/java/io/micronaut/core/util/KotlinUtils.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import kotlin.coroutines.intrinsics.IntrinsicsKt;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * <p>Internal Utility methods for working with Kotlin <code>suspend</code> functions</p>.

File: core/src/main/java/io/micronaut/core/util/LocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.order.Ordered;
 
 import java.util.Locale;

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.*;
 import java.util.function.Predicate;
 import java.util.regex.Pattern;

File: core/src/main/java/io/micronaut/core/util/clhm/Weigher.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.micronaut.core.util.clhm;
 
-import javax.annotation.concurrent.ThreadSafe;
-
 /**
  * A class that can determine the weight of a value. The total weight threshold
  * is used to determine when an eviction is required.
@@ -27,7 +25,6 @@
  * @see <a href="https://code.google.com/p/concurrentlinkedhashmap/">
  *      https://code.google.com/p/concurrentlinkedhashmap/</a>
  */
-@ThreadSafe
 public interface Weigher<V> {
 
     /**

File: core/src/main/java/io/micronaut/core/util/locale/AbstractLocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.LocaleResolver;
 
 import java.util.Locale;

File: core/src/main/java/io/micronaut/core/util/locale/FixedLocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.LocaleResolver;
 import org.jetbrains.annotations.NotNull;
 

File: core/src/main/java/io/micronaut/core/util/locale/LocaleResolutionConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 import java.util.Locale;
 import java.util.Optional;

File: core/src/main/java/io/micronaut/core/value/MapPropertyResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.value;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.util.StringUtils;

File: core/src/main/java/io/micronaut/core/value/OptionalValues.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.value;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Map;

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.core.naming.conventions.StringConvention;
 import io.micronaut.core.type.Argument;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import java.util.Collection;
 import java.util.Collections;

File: core/src/main/java/io/micronaut/core/version/VersionUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.version;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import java.io.IOException;
 import java.io.InputStreamReader;

File: function/src/main/java/io/micronaut/function/executor/AbstractExecutor.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.function.LocalFunctionRegistry;
 import io.micronaut.inject.ExecutableMethod;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import javax.annotation.PreDestroy;
 import java.io.Closeable;

File: http-client-core/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.ssl.ClientSslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 /**

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.LifeCycle;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.io.buffer.ByteBuffer;

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.core.util.ArgumentUtils;

File: http-client-core/src/main/java/io/micronaut/http/client/LoadBalancer.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.client.loadbalance.FixedLoadBalancer;
 import org.reactivestreams.Publisher;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URL;
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClientFactory.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import java.net.URL;
 

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClientRegistry.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.HttpVersion;

File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import javax.inject.Inject;
 import java.net.URI;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/AnnotatedClientArgumentRequestBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Experimental;
 
 import java.lang.annotation.Annotation;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Indexed;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.beans.BeanIntrospection;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.type.Argument;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.type.Argument;
 

File: http-client-core/src/main/java/io/micronaut/http/client/filter/ClientFilterResolutionContext.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.filter;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import java.util.Collections;

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/FixedLoadBalancer.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.client.LoadBalancer;
 import org.reactivestreams.Publisher;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URL;
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListRoundRobinLoadBalancer.java
Patch:
@@ -20,7 +20,7 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/AbstractFilePart.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micronaut.http.client.multipart;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.http.MediaType;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.io.IOException;
 import java.nio.charset.Charset;
 

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/MultipartDataFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.multipart;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.http.MediaType;
 
 import java.io.IOException;

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/Part.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.multipart;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * The base class representing multiple parts in the {@link MultipartBody} to build a Netty multipart request.

File: http-client-core/src/main/java/io/micronaut/http/client/multipart/StringPart.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.multipart;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * A class representing a String {@link Part} in {@link MultipartBody} to build a Netty multipart request.

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -17,8 +17,8 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataResolver;

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.subscriber.Completable;
 import io.micronaut.core.convert.ConversionContext;

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.client.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyStreamedHttpResponse.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.client.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;

File: http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java
Patch:
@@ -18,8 +18,8 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.annotation.*;
 import io.micronaut.core.annotation.AnnotationMetadata;

File: http-netty/src/main/java/io/micronaut/http/netty/AbstractNettyHttpRequest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.convert.ConversionService;

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpParameters.java
Patch:
@@ -16,13 +16,13 @@
 package io.micronaut.http.netty;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.core.convert.value.ConvertibleMultiValuesMap;
 import io.micronaut.http.MutableHttpParameters;
 
-import javax.annotation.Nullable;
 import java.util.*;
 import java.util.function.BiConsumer;
 import java.util.stream.Collectors;

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpRequestBuilder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.http.HttpRequestWrapper;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.netty.buffer.ByteBuf;

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpResponseBuilder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpResponseWrapper;
 import io.micronaut.http.netty.stream.DefaultStreamedHttpResponse;

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.async.publisher.Publishers;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/ChannelPipelineCustomizer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Interface that allows customizations to the {@link io.netty.channel.ChannelPipeline}.

File: http-netty/src/main/java/io/micronaut/http/netty/channel/ChannelPipelineListener.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.channel.ChannelPipeline;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupConfiguration.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.ConfigurationInject;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Property;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupRegistry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.exceptions.ConfigurationException;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EpollEventLoopGroupFactory.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import javax.inject.Named;
 import javax.inject.Singleton;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EventLoopGroupFactory.java
Patch:
@@ -18,12 +18,12 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.ArgumentUtils;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.socket.ServerSocketChannel;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.netty.channel.socket.SocketChannel;
 
 /**

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EventLoopGroupRegistry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.channel.EventLoopGroup;
 
 import java.util.Optional;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/KQueueEventLoopGroupFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NioEventLoopGroupFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.netty.channel;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;
 import io.netty.channel.EventLoopGroup;

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookie.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micronaut.http.netty.cookies;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.SameSite;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Objects;
 import java.util.Optional;
 

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyRxWebSocketSession.java
Patch:
@@ -34,7 +34,7 @@
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Collections;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -29,7 +29,7 @@
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 import javax.inject.Provider;
 import javax.inject.Singleton;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessorResolver.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.web.router.RouteMatch;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Responsible for determining which {@link HttpContentProcessor} to use to process

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.SupplierUtil;
 import io.micronaut.core.async.publisher.Publishers;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.env.Environment;
@@ -86,7 +86,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import javax.inject.Provider;
 import javax.inject.Singleton;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.context.BeanContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/MaybeBodyBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBinderRegistrar.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.BeanCreatedEvent;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/ObservableBodyBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/SingleBodyBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.binders;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.netty.configuration;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Replaces;
 import io.micronaut.core.convert.format.ReadableBytes;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -35,7 +35,7 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Optional;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonHttpContentSubscriberFactory.java
Patch:
@@ -28,7 +28,7 @@
 import io.micronaut.http.server.netty.HttpContentSubscriberFactory;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Singleton;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewCodecResolver.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.jackson.codec.JsonMediaTypeCodec;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Interface for resolving codecs for {@link com.fasterxml.jackson.annotation.JsonView} types.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewMediaTypeCodecFactory.java
Patch:
@@ -25,8 +25,8 @@
 import io.micronaut.jackson.codec.JsonMediaTypeCodec;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.Map;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyFileUploadInputStream.java
Patch:
@@ -17,9 +17,9 @@
 
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.netty.handler.codec.http.multipart.FileUpload;
 
-import javax.annotation.Nonnull;
 import java.io.FileInputStream;
 import java.io.IOException;
 
@@ -33,7 +33,7 @@
 @Internal
 class NettyFileUploadInputStream extends FileInputStream {
 
-    @Nonnull
+    @NonNull
     private final FileUpload file;
     private final boolean releaseOnClose;
 
@@ -42,7 +42,7 @@ class NettyFileUploadInputStream extends FileInputStream {
      * @param releaseOnClose Whether to release the file after the stream is closed
      * @throws IOException If an error occurred getting the underlying {@link java.io.File}
      */
-    NettyFileUploadInputStream(@Nonnull FileUpload file, boolean releaseOnClose) throws IOException {
+    NettyFileUploadInputStream(@NonNull FileUpload file, boolean releaseOnClose) throws IOException {
         super(file.getFile());
         this.file = file;
         this.releaseOnClose = releaseOnClose;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandlerConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * Allows configuration of properties for the {@link FileTypeHandler}.

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.micronaut.context.annotation.Property;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -25,7 +26,6 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 
-import javax.annotation.Nonnull;
 import javax.inject.Inject;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
@@ -115,7 +115,7 @@ void testPostVertx() throws ExecutionException, InterruptedException, TimeoutExc
         );
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Map<String, String> getProperties() {
         return CollectionUtils.mapOf(

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ParameterController.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/util/MockHttpHeaders.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.http.MutableHttpHeaders;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -27,8 +27,8 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.scheduling.executor.ThreadSelection;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import java.io.File;
 import java.nio.charset.Charset;

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -28,7 +28,7 @@
 import io.micronaut.http.sse.Event;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Provider;

File: http-server/src/main/java/io/micronaut/http/server/context/ServerRequestContextInvocationInstrumenter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.context;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.scheduling.instrument.Instrumentation;

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.HttpMethod;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Collections;
 import java.util.List;
 

File: http-server/src/main/java/io/micronaut/http/server/util/DefaultHttpClientAddressResolver.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micronaut.http.server.util;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.inject.Singleton;
 import java.net.InetSocketAddress;
 import java.util.List;

File: http-server/src/main/java/io/micronaut/http/server/util/DefaultHttpHostResolver.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.http.server.HttpServerConfiguration.HostResolutionConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Provider;
 import javax.inject.Singleton;
 import java.net.URI;

File: http-server/src/main/java/io/micronaut/http/server/util/HttpClientAddressResolver.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.DefaultImplementation;
 import io.micronaut.http.HttpRequest;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * Resolves the client IP address from the request.

File: http-server/src/main/java/io/micronaut/http/server/util/HttpHostResolver.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.DefaultImplementation;
 import io.micronaut.http.HttpRequest;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * Resolves the host name of the current server.

File: http-server/src/main/java/io/micronaut/http/server/util/ProxyHeaderParser.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;

File: http-server/src/main/java/io/micronaut/http/server/util/locale/CompositeHttpLocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.http.HttpRequest;
 

File: http-server/src/main/java/io/micronaut/http/server/util/locale/CookieLocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;

File: http-server/src/main/java/io/micronaut/http/server/util/locale/HttpLocaleResolutionConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.locale.LocaleResolutionConfiguration;
 
 import java.util.Optional;

File: http-server/src/main/java/io/micronaut/http/server/util/locale/RequestLocaleResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.util.locale;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;

File: http-server/src/test/groovy/io/micronaut/http/server/util/MockHttpHeaders.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.server.util;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.http.MutableHttpHeaders;

File: http/src/main/java/io/micronaut/http/BasicAuth.java
Patch:
@@ -15,16 +15,13 @@
  */
 package io.micronaut.http;
 
-import javax.annotation.concurrent.Immutable;
-
 /**
  * A class representing basic auth authorization header. Used in
  * declarative clients and server routes.
  *
  * @author Ashwini Mutalik Desai
  * @since 1.3.0
  */
-@Immutable
 public final class BasicAuth {
 
     private final String username;

File: http/src/main/java/io/micronaut/http/HttpMessage.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.http.util.HttpUtil;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;

File: http/src/main/java/io/micronaut/http/HttpRequest.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micronaut.http.cookie.Cookies;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.net.InetSocketAddress;
 import java.net.URI;
 import java.security.Principal;

File: http/src/main/java/io/micronaut/http/HttpRequestWrapper.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.http.cookie.Cookies;
 
 import java.net.InetSocketAddress;

File: http/src/main/java/io/micronaut/http/HttpResponse.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.cookie.Cookies;
 import io.micronaut.http.exceptions.UriSyntaxException;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Optional;

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
@@ -29,7 +30,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nonnull;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -459,7 +459,7 @@ public MediaType(String name, String extension, Map<String, String> params) {
      * @param expectedContentType   Content type to match against
      * @return if successful match
      */
-    public boolean matches(@Nonnull MediaType expectedContentType) {
+    public boolean matches(@NonNull MediaType expectedContentType) {
         //noinspection ConstantConditions
         if (expectedContentType == null) {
             return false;

File: http/src/main/java/io/micronaut/http/MutableHttpRequest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.uri.UriBuilder;

File: http/src/main/java/io/micronaut/http/MutableHttpResponse.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.cookie.Cookie;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.Locale;

File: http/src/main/java/io/micronaut/http/bind/binders/TypedRequestArgumentBinder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.bind.binders;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.bind.TypeArgumentBinder;
 import io.micronaut.http.HttpRequest;
 

File: http/src/main/java/io/micronaut/http/context/ServerContextPathProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.context;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * A contract for providing a context path to a server.

File: http/src/main/java/io/micronaut/http/context/ServerRequestContext.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.concurrent.Callable;
 import java.util.function.Supplier;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 import io.micronaut.http.HttpRequest;
 

File: http/src/main/java/io/micronaut/http/context/event/HttpRequestReceivedEvent.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.http.HttpRequest;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * An event fired when an {@link HttpRequest} is received by the server. Not that the event is fired in a

File: http/src/main/java/io/micronaut/http/context/event/HttpRequestTerminatedEvent.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.http.HttpRequest;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 /**
  * An event fired when an {@link HttpRequest} is finalized by the server. Note that the event is fired asynchronously and

File: http/src/main/java/io/micronaut/http/cookie/Cookie.java
Patch:
@@ -16,8 +16,8 @@
 package io.micronaut.http.cookie;
 
 import io.micronaut.core.util.ArgumentUtils;
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.io.Serializable;
 import java.time.temporal.ChronoUnit;
 import java.time.temporal.TemporalAmount;

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.cookie;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 import java.time.temporal.TemporalAmount;
 import java.util.Optional;

File: http/src/main/java/io/micronaut/http/filter/DefaultFilterEntry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.filter;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;

File: http/src/main/java/io/micronaut/http/filter/HttpFilterResolver.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.http.filter;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.util.ArrayUtils;

File: http/src/main/java/io/micronaut/http/hateoas/AbstractResource.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashMap;

File: http/src/main/java/io/micronaut/http/hateoas/DefaultLink.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.hateoas;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.MediaType;

File: http/src/main/java/io/micronaut/http/hateoas/JsonError.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Optional;
 
 /**

File: http/src/main/java/io/micronaut/http/hateoas/Link.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.MediaType;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URI;
 import java.util.Optional;
 

File: http/src/main/java/io/micronaut/http/resource/ResourceLoaderFactory.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.resource;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.env.Environment;

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.http.cookie.Cookies;
 import io.micronaut.http.simple.cookies.SimpleCookies;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.Optional;
 import java.util.Set;
 

File: http/src/main/java/io/micronaut/http/simple/cookies/SimpleCookie.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.SameSite;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Objects;
 import java.util.Optional;
 

File: http/src/main/java/io/micronaut/http/sse/Event.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.util.ArgumentUtils;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.time.Duration;
 
 /**

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 /**

File: http/src/main/java/io/micronaut/http/ssl/ServerSslConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 /**

File: http/src/main/java/io/micronaut/http/uri/DefaultUriBuilder.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.exceptions.UriSyntaxException;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;

File: http/src/main/java/io/micronaut/http/uri/UriBuilder.java
Patch:
@@ -16,8 +16,8 @@
 package io.micronaut.http.uri;
 
 import io.micronaut.core.util.ArgumentUtils;
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import java.net.URI;
 import java.util.Map;
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import groovy.transform.CompileStatic;
 import groovy.transform.PackageScope;
 import io.micronaut.ast.groovy.annotation.GroovyAnnotationMetadataBuilder;
@@ -39,7 +39,7 @@
 import org.codehaus.groovy.control.CompilationUnit;
 import org.codehaus.groovy.control.SourceUnit;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.*;
 import java.util.function.Consumer;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.ast.groovy.annotation.GroovyAnnotationMetadataBuilder;
 import io.micronaut.ast.groovy.utils.AstAnnotationUtils;
 import io.micronaut.ast.groovy.utils.AstClassUtils;
@@ -31,7 +31,7 @@
 import org.apache.groovy.ast.tools.ClassNodeUtils;
 import org.codehaus.groovy.ast.*;
 import org.codehaus.groovy.ast.stmt.BlockStatement;
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.inject.Inject;
 import java.lang.reflect.Modifier;
 import java.util.*;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyElementFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.inject.ast.*;
 import org.codehaus.groovy.ast.*;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -23,7 +23,7 @@
 import org.codehaus.groovy.ast.*;
 import org.codehaus.groovy.control.SourceUnit;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 import java.lang.reflect.Modifier;
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -29,7 +29,7 @@
 import org.codehaus.groovy.ast.Parameter;
 import org.codehaus.groovy.control.SourceUnit;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyPackageElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import org.codehaus.groovy.ast.PackageNode;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -23,8 +23,8 @@
 import org.codehaus.groovy.ast.Parameter;
 import org.codehaus.groovy.control.SourceUnit;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 
 /**
  * Implementation of {@link ParameterElement} for Groovy.

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.ast.groovy.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import groovy.lang.GroovyClassLoader;
 import io.micronaut.ast.groovy.utils.AstAnnotationUtils;
 import io.micronaut.ast.groovy.utils.InMemoryByteCodeGroovyClassLoader;

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/InterfaceWithGenerics.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import java.util.Optional;

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -15,14 +15,13 @@
  */
 package io.micronaut.annotation.processing.test;
 
-import com.google.testing.compile.JavaFileObjects;
 import com.sun.source.util.JavacTask;
 import com.sun.tools.javac.api.JavacTool;
 import com.sun.tools.javac.util.Context;
 import io.micronaut.annotation.processing.*;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.CollectionUtils;
 import spock.util.environment.Jvm;
 
@@ -39,6 +38,7 @@
 
 /**
  * Utility for parsing Java code.
+ * NOTE: Forked from Google Compile Testing Project
  *
  * @author graemerocher
  * @since 1.1

File: inject-java-test/src/test/groovy/io/micronaut/inject/annotation/ToTransformRetentionTransformer.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.annotation.Annotation;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Collections;

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/AllClassesVisitor.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 import io.micronaut.inject.ast.MethodElement;

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/beans/NonNullBean.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.visitor.beans;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Creator;
 import io.micronaut.core.annotation.Introspected;
 

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/beans/NullabilityBean.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.visitor.beans;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.Introspected;
 
 @Introspected

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/beans/TestEntityAnnotationMapper.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationProcessingOutputVisitor.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.annotation.processing;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.inject.writer.AbstractClassWriterOutputVisitor;
 import io.micronaut.inject.writer.ClassGenerationException;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.inject.annotation.AnnotatedElementValidator;
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.annotation.processing;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.annotation.processing.visitor.JavaElementFactory;
 import io.micronaut.annotation.processing.visitor.JavaMethodElement;
 import io.micronaut.annotation.processing.visitor.JavaVisitorContext;

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.annotation.processing;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.CollectionUtils;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -26,8 +26,8 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.*;
 import javax.lang.model.type.ArrayType;

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaConfigurationMetadataBuilder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.annotation.processing;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.annotation.processing.visitor.JavaClassElement;
 import io.micronaut.context.annotation.ConfigurationReader;
 import io.micronaut.context.annotation.EachProperty;

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.annotation.processing;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Creator;
 import io.micronaut.core.annotation.Internal;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -30,7 +30,7 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 import io.micronaut.inject.visitor.VisitorContext;
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedOptions;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -25,7 +25,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MemberElement;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.ast.PrimitiveElement;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.annotation.processing.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.annotation.processing.AnnotationUtils;
 import io.micronaut.annotation.processing.ModelUtils;
 import io.micronaut.annotation.processing.PublicMethodVisitor;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaElementFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.annotation.processing.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.inject.ast.*;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.inject.ast.PrimitiveElement;
 
 import javax.lang.model.element.*;
@@ -208,7 +208,8 @@ protected ClassElement returnType(Map<String, Map<String, TypeMirror>> info) {
                 return mirrorToClassElement(tm, visitorContext, info, true);
             }
         }
-        return mirrorToClassElement(executableElement.getReturnType(), visitorContext, info, true);
+        final TypeMirror returnType = executableElement.getReturnType();
+        return mirrorToClassElement(returnType, visitorContext, info, true);
     }
 
     private static boolean sameType(String type, DeclaredType dt) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ParameterElement;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 import java.util.Map;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPropertyElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.PropertyElement;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.annotation.processing.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.NonNull;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.annotation.processing.AnnotationProcessingOutputVisitor;
 import io.micronaut.annotation.processing.AnnotationUtils;
 import io.micronaut.annotation.processing.GenericUtils;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVoidElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.annotation.processing.visitor;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataDelegate;
 import io.micronaut.core.annotation.Internal;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/inheritance/ParentEachPropsCtor.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 @EachProperty("teams")
 public class ParentEachPropsCtor {

File: inject-java/src/test/groovy/io/micronaut/inject/constructor/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.constructor.nullableinjection;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 public class B {

File: inject-java/src/test/groovy/io/micronaut/inject/context/EagerInitFactory.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.context;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.exceptions.DisabledBeanException;

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.factory.nullreturn;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.exceptions.DisabledBeanException;
 

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableDProcessor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.EachBean;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import java.util.concurrent.atomic.AtomicInteger;
 
 @EachBean(D.class)

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.*;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
 import io.micronaut.context.exceptions.DisabledBeanException;

File: inject-java/src/test/groovy/io/micronaut/inject/factory/parameterizedfactory/D.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Prototype;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 @Prototype

File: inject-java/src/test/groovy/io/micronaut/inject/field/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.field.nullableinjection;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 
 public class B {

File: inject-java/src/test/groovy/io/micronaut/inject/field/nullableinjection/D.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.field.nullableinjection;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/SomeConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 
 @EachProperty("someconf")
 public class SomeConfiguration {

File: inject-java/src/test/groovy/io/micronaut/inject/method/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.method.nullableinjection;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/ConstructorPropertyInject.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Singleton;
 import java.util.Map;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/FieldPropertyInject.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.property;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/MethodPropertyInject.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.Map;

File: inject-java/src/test/groovy/io/micronaut/inject/provider/EachBeanProvider.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.provider;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Parameter;
 

File: inject-java/src/test/groovy/io/micronaut/inject/provider/ErrorEachBeanProvider.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.provider;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Parameter;
 

File: inject-java/src/test/groovy/io/micronaut/inject/provider/Seats.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.provider;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import org.atinject.tck.auto.Drivers;
 import org.atinject.tck.auto.Seat;
 import org.atinject.tck.auto.Tire;

File: inject-java/src/test/groovy/io/micronaut/inject/value/nullablevalue/A.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.Value;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
+import io.micronaut.core.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 

File: inject-java/src/test/groovy/io/micronaut/visitors/InterfaceWithGenerics.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.visitors;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.core.annotation.NonNull;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import java.util.Optional;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationProcessingOutputVisitor.java
Patch:
@@ -44,9 +44,9 @@
 public class AnnotationProcessingOutputVisitor extends AbstractClassWriterOutputVisitor {
 
     private final Filer filer;
-    private final Map<String, Optional<GeneratedFile>> metaInfFiles = new HashMap<>();
-    private final Map<String, FileObject> openedFiles = new HashMap<>();
-    private final Map<String, Optional<GeneratedFile>> generatedFiles = new HashMap<>();
+    private final Map<String, Optional<GeneratedFile>> metaInfFiles = new LinkedHashMap<>();
+    private final Map<String, FileObject> openedFiles = new LinkedHashMap<>();
+    private final Map<String, Optional<GeneratedFile>> generatedFiles = new LinkedHashMap<>();
 
     /**
      * @param filer The {@link Filer} for creating new files

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanProperty.java
Patch:
@@ -143,9 +143,11 @@ public final void set(@NonNull B bean, @Nullable P value) {
         if (value != null && !ReflectionUtils.getWrapperType(getType()).isInstance(value)) {
             throw new IllegalArgumentException("Specified value [" + value + "] is not of the correct type: " + getType());
         }
+        /*
         if (value == null && isNonNull()) {
             throw new IllegalArgumentException("Null values not supported by property: " + getName());
         }
+         */
         writeInternal(bean, value);
     }
 

File: router/src/main/java/io/micronaut/web/router/version/RouteVersionFilter.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.version.annotation.Version;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.web.router.UriRouteMatch;
-import io.micronaut.web.router.filter.RouteMatchFilter;
 import io.micronaut.web.router.version.resolution.RequestVersionResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,7 +40,7 @@
  */
 @Singleton
 @Requires(beans = RoutesVersioningConfiguration.class)
-public class RouteVersionFilter implements RouteMatchFilter {
+public class RouteVersionFilter implements VersionRouteMatchFilter {
 
     private static final Logger LOG = LoggerFactory.getLogger(RouteVersionFilter.class);
 

File: inject/src/main/java/io/micronaut/context/banner/Banner.java
Patch:
@@ -15,9 +15,12 @@
  */
 package io.micronaut.context.banner;
 
+import io.micronaut.context.annotation.DefaultImplementation;
+
 /**
  * Print a banner programmatically.
  */
+@DefaultImplementation(MicronautBanner.class)
 public interface Banner {
 
     /**

File: inject/src/main/java/io/micronaut/context/banner/MicronautBanner.java
Patch:
@@ -15,15 +15,13 @@
  */
 package io.micronaut.context.banner;
 
-import io.micronaut.context.annotation.DefaultImplementation;
 import io.micronaut.core.version.VersionUtils;
 
 import java.io.PrintStream;
 
 /**
- * Default implementation of {@link Banner} that prints a the default Micronaut banner.
+ * Default implementation of {@link Banner} that prints the default Micronaut banner.
  */
-@DefaultImplementation(Banner.class)
 public class MicronautBanner implements Banner {
 
     private static final String[] MICRONAUT_BANNER = {

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -330,7 +330,6 @@ private void process(
             writer.visitDefaultConstructor(defaultConstructor);
         }
 
-        ClassElement classElement = writer.getClassElement();
         processBeanProperties(writer, beanProperties, includes, excludes, ignored, indexedAnnotations, metadata);
 
         writers.put(writer.getBeanType().getClassName(), writer);

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -42,7 +42,7 @@
         NioServerSocketChannel.class,
         NioSocketChannel.class
 }, typeNames = {"sun.security.ssl.SSLContextImpl$TLSContext"},
-   accessType = {TypeHint.AccessType.ALL_DECLARED_CONSTRUCTORS, TypeHint.AccessType.ALL_DECLARED_FIELDS}
+   accessType = {TypeHint.AccessType.ALL_DECLARED_CONSTRUCTORS, TypeHint.AccessType.ALL_DECLARED_FIELDS, TypeHint.AccessType.ALL_PUBLIC_CONSTRUCTORS}
 )
 @BootstrapContextCompatible
 public class NettyThreadFactory {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1178,7 +1178,7 @@ private void visitAdaptedMethod(ExecutableElement sourceMethod, AnnotationMetada
                             true,
                             false,
                             sourceMethodElement,
-                            methodAnnotationMetadata,
+                            new AnnotationMetadataHierarchy(concreteClassMetadata, methodAnnotationMetadata),
                             new ClassElement[]{typeToImplementElement},
                             metadataBuilder
                     );
@@ -1266,7 +1266,7 @@ protected void accept(DeclaredType type, Element element, AopProxyWriter aopProx
                                     builder.member(Adapter.InternalAttributes.ADAPTED_BEAN, acv);
                                     builder.member(Adapter.InternalAttributes.ADAPTED_METHOD, sourceMethodElement.getName());
                                     builder.member(Adapter.InternalAttributes.ADAPTED_ARGUMENT_TYPES, adaptedArgumentTypes);
-                                    String qualifier = concreteClassMetadata.getValue(Named.class, String.class).orElse(null);
+                                    String qualifier = concreteClassMetadata.stringValue(Named.class).orElse(null);
                                     if (StringUtils.isNotEmpty(qualifier)) {
                                         builder.member(Adapter.InternalAttributes.ADAPTED_QUALIFIER, qualifier);
                                     }

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -36,7 +36,6 @@
 @Produces
 public class ConversionErrorHandler implements ExceptionHandler<ConversionErrorException, HttpResponse> {
 
-
     @Override
     public HttpResponse handle(HttpRequest request, ConversionErrorException exception) {
         JsonError error = new JsonError(exception.getMessage());

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -35,6 +35,8 @@
 @Primary
 @Produces
 public class ConversionErrorHandler implements ExceptionHandler<ConversionErrorException, HttpResponse> {
+
+
     @Override
     public HttpResponse handle(HttpRequest request, ConversionErrorException exception) {
         JsonError error = new JsonError(exception.getMessage());

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -74,14 +74,14 @@ abstract class AbstractInjectAnnotationProcessor extends AbstractProcessor {
     @Override
     public SourceVersion getSupportedSourceVersion() {
         SourceVersion sourceVersion = SourceVersion.latest();
-        if (sourceVersion.ordinal() <= 11) {
+        if (sourceVersion.ordinal() <= 15) {
             if (sourceVersion.ordinal() >= 8) {
                 return sourceVersion;
             } else {
                 return SourceVersion.RELEASE_8;
             }
         } else {
-            return (SourceVersion.values())[11];
+            return (SourceVersion.values())[15];
         }
     }
 

File: http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.client;
 
 import io.micronaut.core.annotation.Blocking;
-import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -289,7 +289,7 @@ static void invalidateCache() {
      * @param element The element
      */
     @Internal
-    public void invalidateMetadata(Element element) {
+    public static void invalidateMetadata(Element element) {
         if (element != null) {
             annotationMetadataCache.remove(element);
         }

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -186,7 +186,9 @@ protected List<? extends AnnotationMirror> getAnnotationsForType(Element element
     @Override
     protected List<Element> buildHierarchy(Element element, boolean inheritTypeAnnotations, boolean declaredOnly) {
         if (declaredOnly) {
-            return Collections.singletonList(element);
+            List<Element> onlyDeclared = new ArrayList<>(1);
+            onlyDeclared.add(element);
+            return onlyDeclared;
         }
 
         if (element instanceof TypeElement) {

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1537,6 +1537,7 @@ protected final Collection getBeansOfTypeForField(BeanResolutionContext resoluti
      */
     @SuppressWarnings("WeakerAccess")
     @Internal
+    @UsedByGeneratedCode
     protected final Stream getStreamOfTypeForField(BeanResolutionContext resolutionContext, BeanContext context, FieldInjectionPoint injectionPoint) {
         return resolveBeanWithGenericsForField(resolutionContext, injectionPoint, (beanType, qualifier) ->
                 ((DefaultBeanContext) context).streamOfType(resolutionContext, beanType, qualifier)
@@ -1549,6 +1550,7 @@ protected final Stream getStreamOfTypeForField(BeanResolutionContext resolutionC
      * @return The type arguments
      */
     @Internal
+    @UsedByGeneratedCode
     protected Map<String, Argument<?>[]> getTypeArgumentsMap() {
         return Collections.emptyMap();
     }

File: inject/src/main/java/io/micronaut/inject/annotation/internal/KotlinNotNullMapper.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.inject.annotation.internal;
 
 import io.micronaut.core.annotation.AnnotationValue;
-import io.micronaut.inject.annotation.NamedAnnotationMapper;
+import io.micronaut.inject.annotation.NamedAnnotationTransformer;
 import io.micronaut.inject.visitor.VisitorContext;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -30,15 +30,15 @@
  * @author graemerocher
  * @since 1.1.4
  */
-public class KotlinNotNullMapper implements NamedAnnotationMapper {
+public class KotlinNotNullMapper implements NamedAnnotationTransformer {
     @NonNull
     @Override
     public String getName() {
         return "org.jetbrains.annotations.NotNull";
     }
 
     @Override
-    public List<AnnotationValue<?>> map(AnnotationValue<Annotation> annotation, VisitorContext visitorContext) {
+    public List<AnnotationValue<?>> transform(AnnotationValue<Annotation> annotation, VisitorContext visitorContext) {
         return Collections.singletonList(
                 AnnotationValue.builder("javax.annotation.Nonnull").build()
         );

File: inject/src/main/java/io/micronaut/inject/annotation/internal/KotlinNullableMapper.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.inject.annotation.internal;
 
 import io.micronaut.core.annotation.AnnotationValue;
-import io.micronaut.inject.annotation.NamedAnnotationMapper;
+import io.micronaut.inject.annotation.NamedAnnotationTransformer;
 import io.micronaut.inject.visitor.VisitorContext;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -30,15 +30,15 @@
  * @author graemerocher
  * @since 1.1.4
  */
-public class KotlinNullableMapper implements NamedAnnotationMapper {
+public class KotlinNullableMapper implements NamedAnnotationTransformer {
     @NonNull
     @Override
     public String getName() {
         return "org.jetbrains.annotations.Nullable";
     }
 
     @Override
-    public List<AnnotationValue<?>> map(AnnotationValue<Annotation> annotation, VisitorContext visitorContext) {
+    public List<AnnotationValue<?>> transform(AnnotationValue<Annotation> annotation, VisitorContext visitorContext) {
         return Collections.singletonList(AnnotationValue.builder("javax.annotation.Nullable").build());
     }
 }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -368,7 +368,7 @@ private void processBeanProperties(
                     beanProperty.getWriteMethod().orElse(null),
                     beanProperty.isReadOnly(),
                     metadata ? beanProperty.getAnnotationMetadata() : null,
-                    beanProperty.getType().getTypeArguments()
+                    genericType.getTypeArguments()
             );
 
             for (AnnotationValue<?> indexedAnnotation : indexedAnnotations) {

File: inject/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -63,7 +63,7 @@ protected AbstractAnnotationMetadataWriter(
             AnnotationMetadata annotationMetadata,
             boolean writeAnnotationDefaults) {
         super(originatingElements);
-        this.targetClassType = getTypeReference(className);
+        this.targetClassType = getTypeReferenceForName(className);
         this.annotationMetadata = annotationMetadata;
         this.writeAnnotationDefault = writeAnnotationDefaults;
     }
@@ -80,7 +80,7 @@ protected AbstractAnnotationMetadataWriter(
             AnnotationMetadata annotationMetadata,
             boolean writeAnnotationDefaults) {
         super(new Element[]{ originatingElement });
-        this.targetClassType = getTypeReference(className);
+        this.targetClassType = getTypeReferenceForName(className);
         this.annotationMetadata = annotationMetadata;
         this.writeAnnotationDefault = writeAnnotationDefaults;
     }
@@ -99,7 +99,7 @@ protected void writeGetAnnotationMetadataMethod(ClassWriter classWriter) {
         } else if (annotationMetadata instanceof AnnotationMetadataReference) {
             AnnotationMetadataReference reference = (AnnotationMetadataReference) annotationMetadata;
             String className = reference.getClassName();
-            annotationMetadataMethod.getStatic(getTypeReference(className), AbstractAnnotationMetadataWriter.FIELD_ANNOTATION_METADATA, Type.getType(AnnotationMetadata.class));
+            annotationMetadataMethod.getStatic(getTypeReferenceForName(className), AbstractAnnotationMetadataWriter.FIELD_ANNOTATION_METADATA, Type.getType(AnnotationMetadata.class));
         } else {
             annotationMetadataMethod.getStatic(targetClassType, AbstractAnnotationMetadataWriter.FIELD_ANNOTATION_METADATA, Type.getType(AnnotationMetadata.class));
         }

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -84,7 +84,7 @@ public BeanDefinitionReferenceWriter(
     public BeanDefinitionReferenceWriter(String beanTypeName, BeanDefinitionVisitor visitor) {
         super(
                 visitor.getBeanDefinitionName() + REF_SUFFIX,
-                visitor.getOriginatingElement(),
+                visitor,
                 visitor.getAnnotationMetadata(),
                 true);
         this.beanTypeName = beanTypeName;
@@ -161,7 +161,7 @@ private ClassWriter generateClassBytes() {
                 superType,
                 interfaceInternalNames
         );
-        Type beanDefinitionType = getTypeReference(beanDefinitionName);
+        Type beanDefinitionType = getTypeReferenceForName(beanDefinitionName);
         writeAnnotationMetadataStaticInitializer(classWriter);
 
         GeneratorAdapter cv = startConstructor(classWriter);
@@ -207,7 +207,7 @@ private ClassWriter generateClassBytes() {
 
         // start method: Class getBeanType()
         GeneratorAdapter getBeanType = startPublicMethodZeroArgs(classWriter, Class.class, "getBeanType");
-        getBeanType.push(getTypeReference(beanTypeName));
+        getBeanType.push(getTypeReferenceForName(beanTypeName));
         getBeanType.returnValue();
         getBeanType.visitMaxs(2, 1);
 

File: inject/src/main/java/io/micronaut/inject/writer/ConfigBuilderState.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
 import org.objectweb.asm.Type;
 
@@ -49,7 +50,7 @@ class ConfigBuilderState {
      * @param metadataBuilder    The metadata builder
      * @param isInterface        Whether the type is an interface or not
      */
-    ConfigBuilderState(Object type, String name, boolean isMethod, AnnotationMetadata annotationMetadata, ConfigurationMetadataBuilder metadataBuilder, boolean isInterface) {
+    ConfigBuilderState(ClassElement type, String name, boolean isMethod, AnnotationMetadata annotationMetadata, ConfigurationMetadataBuilder metadataBuilder, boolean isInterface) {
         this.type = AbstractClassFileWriter.getTypeReference(type);
         this.name = name;
         this.invokeMethod = isMethod;

File: management/src/main/java/io/micronaut/management/health/indicator/jdbc/JdbcIndicator.java
Patch:
@@ -29,7 +29,6 @@
 import org.reactivestreams.Publisher;
 
 import javax.annotation.Nullable;
-import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;
 import javax.sql.DataSource;

File: tracing/src/main/java/io/micronaut/tracing/instrument/hystrix/TracingHystrixConcurrentStrategy.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.tracing.instrument.util.TracingInvocationInstrumenterFactory;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
-import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Callable;

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/NettyClientSslBuilder.java
Patch:
@@ -24,7 +24,6 @@
 import io.netty.handler.ssl.*;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 
-import javax.inject.Inject;
 import javax.inject.Singleton;
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLException;

File: http/src/main/java/io/micronaut/http/resource/ResourceLoaderFactory.java
Patch:
@@ -27,7 +27,6 @@
 import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.io.scan.DefaultClassPathResourceLoader;
 
-import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.List;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -319,7 +319,7 @@ protected Object readAnnotationValue(Element originatingElement, Element member,
             String annotationName = annotationElement.getQualifiedName().toString();
             if (!defaults.containsKey(annotationName)) {
 
-                Map<Element, AnnotationValue> defaultValues = new HashMap<>();
+                Map<Element, AnnotationValue> defaultValues = new LinkedHashMap<>();
                 final List<? extends Element> allMembers = elementUtils.getAllMembers(annotationElement);
 
                 allMembers

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -1250,7 +1250,7 @@ protected final void addDefaultAnnotationValues(String annotation, Map<CharSeque
         if (annotation != null) {
             Map<String, Map<CharSequence, Object>> annotationDefaults = this.annotationDefaultValues;
             if (annotationDefaults == null) {
-                this.annotationDefaultValues = new HashMap<>();
+                this.annotationDefaultValues = new LinkedHashMap<>();
                 annotationDefaults = this.annotationDefaultValues;
             }
 

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -69,6 +69,9 @@ protected DefaultHttpClientBinderRegistry(ConversionService<?> conversionService
         byType.put(Argument.of(BasicAuth.class).typeHashCode(), (ClientArgumentRequestBinder<BasicAuth>) (context, uriContext, value, request) -> {
             request.basicAuth(value.getUsername(), value.getPassword());
         });
+        byType.put(Argument.of(Locale.class).typeHashCode(), (ClientArgumentRequestBinder<Locale>) (context, uriContext, value, request) -> {
+            request.header(HttpHeaders.ACCEPT_LANGUAGE, value.toLanguageTag());
+        });
         byAnnotation.put(QueryValue.class, (context, uriContext, value, request) -> {
             String parameterName = context.getAnnotationMetadata().stringValue(QueryValue.class)
                     .filter (StringUtils::isNotEmpty)

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -2245,15 +2245,14 @@ private ExecutableElementParamInfo populateParameterData(@Nullable String declar
                 switch (kind) {
                     case ARRAY:
                         ArrayType arrayType = (ArrayType) typeMirror;
-                        TypeMirror componentType = arrayType.getComponentType();
                         Object resolvedType = modelUtils.resolveTypeReference(arrayType);
                         params.addParameter(
                                 argName,
                                 resolvedType,
                                 genericUtils.resolveTypeReference(arrayType, boundTypes)
                         );
-                        params.addGenericTypes(argName, Collections.singletonMap("E", modelUtils.resolveTypeReference(componentType)));
-
+                        //TypeMirror componentType = arrayType.getComponentType();
+                        //params.addGenericTypes(argName, Collections.singletonMap("E", modelUtils.resolveTypeReference(componentType)));
                         break;
                     case TYPEVAR:
                         TypeVariable typeVariable = (TypeVariable) typeMirror;

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.context.scope.CustomScope;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.util.ArgumentUtils;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.http.context.event.HttpRequestTerminatedEvent;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java
Patch:
@@ -39,6 +39,6 @@ public interface HttpClientBinderRegistry {
      * @param <T>      The argument type
      * @return An {@link Optional} of {@link ClientArgumentRequestBinder}
      */
-    <T> Optional<ClientArgumentRequestBinder<T>> findArgumentBinder(@NonNull Argument<T> argument);
+    <T> Optional<ClientArgumentRequestBinder<?>> findArgumentBinder(@NonNull Argument<T> argument);
 
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/AccessLogFormatParser.java
Patch:
@@ -54,7 +54,7 @@
  * <li><b>%q</b> - Query string (excluding the '?' character)</li>
  * <li><b>%r</b> - First line of the request</li>
  * <li><b>%s</b> - HTTP status code of the response</li>
- * <li><b>%{<format>}t</b> - Date and time. If the argument is ommitted the Common Log Format format is used ("'['dd/MMM/yyyy:HH:mm:ss Z']'").
+ * <li><b>%{<format>}t</b> - Date and time. If the argument is omitted the Common Log Format format is used ("'['dd/MMM/yyyy:HH:mm:ss Z']'").
  * If the format starts with begin: (default) the time is taken at the beginning of the request processing. If it starts with end: it is the time when the log entry gets written, close to the end of the request processing.
  * The format should follow the DateTimeFormatter syntax.</li>
  * <li><b>%u</b> - Remote user that was authenticated. Not implemented. Prints '-'.</li>

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -1287,7 +1287,7 @@ protected ClassWriterOutputVisitor newClassWriterOutputVisitor(File compilationD
     }
 
     /**
-     * @param overriddenMethodGenerator The overriden method generator
+     * @param overriddenMethodGenerator The overridden method generator
      */
     protected void returnVoid(GeneratorAdapter overriddenMethodGenerator) {
         overriddenMethodGenerator.pop();

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -267,18 +267,16 @@ private <T> Optional convertByteBuf(ByteBuf content, Argument<T> type) {
         Optional<MediaType> contentType = getContentType();
         if (contentType.isPresent()) {
             if (mediaTypeCodecRegistry != null) {
+                bodyBytes = ByteBufUtil.getBytes(content);
                 if (CharSequence.class.isAssignableFrom(type.getType())) {
                     Charset charset = contentType.flatMap(MediaType::getCharset).orElse(StandardCharsets.UTF_8);
-                    bodyBytes = ByteBufUtil.getBytes(content);
                     return Optional.of(new String(bodyBytes, charset));
                 } else if (type.getType() == byte[].class) {
-                    bodyBytes = ByteBufUtil.getBytes(content);
                     return Optional.of(bodyBytes);
                 } else {
                     Optional<MediaTypeCodec> foundCodec = mediaTypeCodecRegistry.findCodec(contentType.get());
                     if (foundCodec.isPresent()) {
                         MediaTypeCodec codec = foundCodec.get();
-                        bodyBytes = ByteBufUtil.getBytes(content);
                         return Optional.of(codec.decode(type, bodyBytes));
                     }
                 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -403,7 +403,7 @@ private void exceptionCaughtInternal(ChannelHandlerContext ctx,
     protected void channelRead0(ChannelHandlerContext ctx, io.micronaut.http.HttpRequest<?> request) {
         ctx.channel().config().setAutoRead(false);
         io.micronaut.http.HttpMethod httpMethod = request.getMethod();
-        String requestPath = request.getPath();
+        String requestPath = request.getUri().getPath();
 
         if (LOG.isDebugEnabled()) {
             LOG.debug("Request {} {}", httpMethod, request.getUri());

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -851,22 +851,22 @@ private void processAnnotationAlias(
 
                     if (isDeclared) {
                         metadata.addDeclaredStereotype(
-                                parentAnnotations,
+                                Collections.emptyList(),
                                 aliasedAnnotationName,
                                 Collections.singletonMap(aliasedMemberName, v),
                                 retentionPolicy
                         );
                     } else {
                         metadata.addStereotype(
-                                parentAnnotations,
+                                Collections.emptyList(),
                                 aliasedAnnotationName,
                                 Collections.singletonMap(aliasedMemberName, v),
                                 retentionPolicy
                         );
                     }
 
                     annotationMirror.ifPresent(annMirror -> processAnnotationStereotype(
-                            parentAnnotations,
+                            Collections.singletonList(aliasedAnnotationName),
                             annMirror,
                             aliasedAnnotationName,
                             metadata,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -66,6 +66,8 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor<H
         }
         factory.setMaxLimit(multipart.getMaxFileSize());
         this.decoder = new HttpPostRequestDecoder(factory, nettyHttpRequest.getNativeRequest(), characterEncoding);
+        //This is to work around a bug in Netty that should be resolved with https://github.com/netty/netty/pull/10623
+        this.decoder.setDiscardThreshold(Integer.MAX_VALUE);
         this.enabled = nettyHttpRequest.getContentType().map(type -> type.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)).orElse(false) ||
             multipart.isEnabled();
         this.partMaxSize = multipart.getMaxFileSize();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -212,7 +212,7 @@ public ByteBuf getByteBuf() throws IOException {
                 int index = components.indexOf(this);
                 if (byteBuf instanceof CompositeByteBuf) {
                     CompositeByteBuf compositeByteBuf = (CompositeByteBuf) byteBuf;
-                    return createDelegate(compositeByteBuf.component(index), (buf, count) -> {
+                    return createDelegate(compositeByteBuf.internalComponent(index), (buf, count) -> {
                         compositeByteBuf.removeComponent(index);
                         removeComponent(index);
                         return true;

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -25,7 +25,6 @@
 import javax.lang.model.type.*;
 import javax.lang.model.util.AbstractTypeVisitor8;
 import javax.lang.model.util.Types;
-import java.lang.reflect.AnnotatedType;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/decoders/HttpRequestDecoder.java
Patch:
@@ -68,8 +68,8 @@ public HttpRequestDecoder(EmbeddedServer embeddedServer, ConversionService<?> co
 
     @Override
     protected void decode(ChannelHandlerContext ctx, HttpRequest msg, List<Object> out) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Server {}:{} Received Request: {} {}", embeddedServer.getHost(), embeddedServer.getPort(), msg.method(), msg.uri());
+        if (LOG.isTraceEnabled()) {
+            LOG.trace("Server {}:{} Received Request: {} {}", embeddedServer.getHost(), embeddedServer.getPort(), msg.method(), msg.uri());
         }
         try {
             NettyHttpRequest<Object> request = new NettyHttpRequest<>(msg, ctx, conversionService, configuration);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1946,10 +1946,11 @@ <T> T doCreateBean(@NonNull BeanResolutionContext resolutionContext,
         }
 
         if (bean != null) {
+            Qualifier finalQualifier = qualifier != null ? qualifier : declaredQualifier;
             if (!BeanCreatedEventListener.class.isInstance(bean) && CollectionUtils.isNotEmpty(beanCreationEventListeners)) {
                 for (Map.Entry<Class, List<BeanCreatedEventListener>> entry : beanCreationEventListeners) {
                     if (entry.getKey().isAssignableFrom(beanType)) {
-                        BeanKey beanKey = new BeanKey(beanDefinition, qualifier);
+                        BeanKey beanKey = new BeanKey(beanDefinition, finalQualifier);
                         for (BeanCreatedEventListener listener : entry.getValue()) {
                             bean = (T) listener.onCreated(new BeanCreatedEvent(this, beanDefinition, beanKey, bean));
                             if (bean == null) {
@@ -1963,7 +1964,7 @@ <T> T doCreateBean(@NonNull BeanResolutionContext resolutionContext,
                 bean = ((ValidatedBeanDefinition<T>) beanDefinition).validate(resolutionContext, bean);
             }
             if (LOG_LIFECYCLE.isDebugEnabled()) {
-                LOG_LIFECYCLE.debug("Created bean [{}] from definition [{}] with qualifier [{}]", bean, beanDefinition, qualifier);
+                LOG_LIFECYCLE.debug("Created bean [{}] from definition [{}] with qualifier [{}]", bean, beanDefinition, finalQualifier);
             }
         }
 

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -691,7 +691,7 @@ protected Map<CharSequence, Object> populateAnnotationData(
                                                 metadata,
                                                 isDeclared,
                                                 mappedAnnotationName,
-                                                parentAnnotations,
+                                                Collections.emptyList(),
                                                 annotationValues,
                                                 member,
                                                 value

File: aop/src/main/java/io/micronaut/aop/internal/intercepted/KotlinInterceptedMethod.java
Patch:
@@ -152,7 +152,8 @@ public Object handleResult(Object result) {
                     if (isUnitValueType) {
                         value = kotlin.Unit.INSTANCE;
                     } else {
-                        throw new IllegalStateException("Cannot complete Kotlin coroutine with null: " + returnTypeValue.getType());
+                        CompletableFutureContinuation.Companion.completeExceptionally(continuation, new IllegalStateException("Cannot complete Kotlin coroutine with null: " + returnTypeValue.getType()));
+                        return;
                     }
                 }
                 CompletableFutureContinuation.Companion.completeSuccess(continuation, value);

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -374,6 +374,8 @@ protected void doOnError(Throwable t) {
                                     if (e.getStatus() == HttpStatus.NOT_FOUND) {
                                         if (reactiveValueType == Optional.class) {
                                             future.complete(Optional.empty());
+                                        } else if (HttpResponse.class.isAssignableFrom(reactiveValueType)) {
+                                            future.complete(e.getResponse());
                                         } else {
                                             future.complete(null);
                                         }

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -65,7 +65,7 @@ public class UriTemplate implements Comparable<UriTemplate> {
                     ")?" + ")?" + STRING_PATTERN_PATH + "(\\?" + STRING_PATTERN_QUERY + ")?" + "(#" + STRING_PATTERN_REMAINING + ")?");
 
     private final String templateString;
-    private final List<PathSegment> segments = new ArrayList<>();
+    final List<PathSegment> segments = new ArrayList<>();
 
     /**
      * Construct a new URI template for the given template.

File: inject/src/main/java/io/micronaut/inject/writer/OriginatingElements.java
Patch:
@@ -45,7 +45,6 @@ public interface OriginatingElements {
      */
     static OriginatingElements of(Element...elements) {
         if (Boolean.getBoolean("micronaut.static.originating.elements")) {
-            StaticOriginatingElements.INSTANCE.clear();
             for (Element element : elements) {
                 StaticOriginatingElements.INSTANCE.addOriginatingElement(element);
             }

File: http/src/main/java/io/micronaut/http/HttpRequest.java
Patch:
@@ -127,10 +127,10 @@ default Collection<MediaType> accept() {
     }
 
     /**
-     * @return Get the path without any parameters
+     * @return Get the raw, percent-encoded path without any parameters
      */
     default @NonNull String getPath() {
-        return getUri().getPath();
+        return getUri().getRawPath();
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/MaybeBodyBinder.java
Patch:
@@ -65,6 +65,7 @@ public List<Class<?>> superTypes() {
     }
 
     @Deprecated
+    @Override
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/DelegateStreamedHttpRequest.java
Patch:
@@ -32,13 +32,13 @@
 @Internal
 final class DelegateStreamedHttpRequest extends DelegateHttpRequest implements StreamedHttpRequest {
 
-    private final Publisher<HttpContent> stream;
+    private final Publisher<? extends HttpContent> stream;
 
     /**
      * @param request The Http request
      * @param stream  The publisher
      */
-    DelegateStreamedHttpRequest(HttpRequest request, Publisher<HttpContent> stream) {
+    DelegateStreamedHttpRequest(HttpRequest request, Publisher<? extends HttpContent> stream) {
         super(request);
         this.stream = stream;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/DelegateStreamedHttpResponse.java
Patch:
@@ -31,13 +31,13 @@
 @Internal
 final class DelegateStreamedHttpResponse extends DelegateHttpResponse implements StreamedHttpResponse {
 
-    private final Publisher<HttpContent> stream;
+    private final Publisher<? extends HttpContent> stream;
 
     /**
      * @param response The {@link HttpResponse}
      * @param stream   The {@link Publisher} for {@link HttpContent}
      */
-    DelegateStreamedHttpResponse(HttpResponse response, Publisher<HttpContent> stream) {
+    DelegateStreamedHttpResponse(HttpResponse response, Publisher<? extends HttpContent> stream) {
         super(response);
         this.stream = stream;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsServerHandler.java
Patch:
@@ -100,7 +100,7 @@ protected HttpRequest createEmptyMessage(HttpRequest request) {
     }
 
     @Override
-    protected HttpRequest createStreamedMessage(HttpRequest httpRequest, Publisher<HttpContent> stream) {
+    protected HttpRequest createStreamedMessage(HttpRequest httpRequest, Publisher<? extends HttpContent> stream) {
         return new DelegateStreamedHttpRequest(httpRequest, stream);
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedAttribute.java
Patch:
@@ -36,7 +36,7 @@
  * @since 1.3.0
  */
 @Internal
-class NettyCompletedAttribute implements CompletedPart {
+public class NettyCompletedAttribute implements CompletedPart {
 
     private final Attribute attribute;
     private final boolean controlRelease;

File: aop/src/main/java/io/micronaut/aop/chain/MethodInterceptorChain.java
Patch:
@@ -38,7 +38,7 @@
 @Internal
 public final class MethodInterceptorChain<T, R> extends InterceptorChain<T, R> implements MethodInvocationContext<T, R> {
 
-    private final static Object[] EMPTY_ARRAY = new Object[0];
+    private static final Object[] EMPTY_ARRAY = new Object[0];
 
     /**
      * Constructor for empty parameters.

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -42,8 +42,9 @@
 @Internal
 abstract class HttpStreamsHandler<In extends HttpMessage, Out extends HttpMessage> extends ChannelDuplexHandler {
 
-    private static final Logger LOG = LoggerFactory.getLogger(HttpStreamsHandler.class);
     public static final String HANDLER_BODY_PUBLISHER = "http-streams-codec-body-publisher";
+    private static final Logger LOG = LoggerFactory.getLogger(HttpStreamsHandler.class);
+
     private final Queue<Outgoing> outgoing = new LinkedList<>();
     private final Class<In> inClass;
     private final Class<Out> outClass;

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -195,7 +195,7 @@ private void processIntrospected(ClassElement element, VisitorContext context, A
             for (AnnotationClassValue aClass : classes) {
                 final Optional<ClassElement> classElement = context.getClassElement(aClass.getName());
                 classElement.ifPresent(ce -> {
-                    if (!ce.isAbstract() && ce.isPublic() && !ce.hasStereotype(Introspected.class)) {
+                    if (ce.isPublic() && !ce.hasStereotype(Introspected.class)) {
                         final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(
                                 element.getName(),
                                 index.getAndIncrement(),
@@ -294,7 +294,7 @@ private void processElement(
             ClassElement ce,
             BeanIntrospectionWriter writer) {
         Optional<MethodElement> constructorElement = ce.getPrimaryConstructor();
-        if (ce.isAbstract() && !constructorElement.isPresent()) {
+        if (ce.isAbstract() && !constructorElement.isPresent() && ce.hasStereotype(Introspected.class)) {
             currentAbstractIntrospection = new AbstractIntrospection(
                     writer,
                     includes,

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -189,7 +189,7 @@ public <T> Optional<T> getProperty(String name, ArgumentConversionContext<T> con
     @NonNull
     @Override
     public Collection<String> getPropertyEntries(@NonNull String name) {
-        return environment.getPropertyEntries(name);
+        return getEnvironment().getPropertyEntries(name);
     }
 
     @NonNull

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -638,7 +638,7 @@ protected void buildInvokeMethod(Type declaringTypeObject, String methodName, Ob
                 bridgeGenerator.loadArg(i);
             }
 
-            bridgeWriter.visitMethodInsn(INVOKESPECIAL, declaringTypeReference.getInternalName(), methodName, overrideDescriptor, isDefault);
+            bridgeWriter.visitMethodInsn(INVOKESPECIAL, declaringTypeReference.getInternalName(), methodName, overrideDescriptor, this.isInterface && isDefault);
             pushReturnValue(bridgeWriter, returnType);
             bridgeWriter.visitMaxs(DEFAULT_MAX_STACK, 1);
             bridgeWriter.visitEnd();

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -316,7 +316,7 @@ private List<ExecutableElement> findNonPrivateStaticCreators(TypeElement classEl
                 .stream()
                 .filter(method -> method.getModifiers().contains(STATIC))
                 .filter(method -> !method.getModifiers().contains(PRIVATE))
-                .filter(method -> method.getReturnType().equals(classElement.asType()))
+                .filter(method -> typeUtils.isAssignable(typeUtils.erasure(method.getReturnType()), classElement.asType()))
                 .filter(method -> {
                     final AnnotationMetadata annotationMetadata = annotationUtils.getAnnotationMetadata(method);
                     return annotationMetadata.hasStereotype(Creator.class);

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -109,6 +109,7 @@ public void visitClass(ClassElement element, VisitorContext context) {
                 packages.add(element.getPackageName());
                 final String beanName = element.getName();
                 addBean(beanName);
+                resolveClassData(beanName + "[]");
                 final String[] introspectedClasses = element.getValue(Introspected.class, "classes", String[].class).orElse(StringUtils.EMPTY_STRING_ARRAY);
                 for (String introspectedClass : introspectedClasses) {
                     addBean(introspectedClass);

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/AbstractNettyWebSocketHandler.java
Patch:
@@ -388,7 +388,7 @@ protected void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame ms
 
         } else if (msg instanceof PingWebSocketFrame) {
             // respond with pong
-            PingWebSocketFrame frame = (PingWebSocketFrame) msg;
+            PingWebSocketFrame frame = (PingWebSocketFrame) msg.retain();
             ctx.writeAndFlush(new PongWebSocketFrame(frame.content()));
 
         } else if (msg instanceof PongWebSocketFrame) {

File: inject/src/main/java/io/micronaut/context/ApplicationContextConfiguration.java
Patch:
@@ -48,7 +48,7 @@ default Optional<Boolean> getDeduceEnvironments() {
 
     /**
      * @return The default environments to be applied if no other environments
-     * are explicitly specified.
+     * are explicitly specified or deduced.
      */
     default List<String> getDefaultEnvironments() {
         return Collections.emptyList();

File: aop/src/main/java/io/micronaut/aop/chain/MethodInterceptorChain.java
Patch:
@@ -38,7 +38,7 @@
 @Internal
 public final class MethodInterceptorChain<T, R> extends InterceptorChain<T, R> implements MethodInvocationContext<T, R> {
 
-    private final static Object[] EMPTY_ARRAY = new Object[0];
+    private static final Object[] EMPTY_ARRAY = new Object[0];
 
     /**
      * Constructor for empty parameters.

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.client.bind;
 
-import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.bind.annotation.Bindable;

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -73,7 +73,6 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
     private boolean complete;
     private byte[] bodyBytes;
 
-
     /**
      * @param fullHttpResponse       The full Http response
      * @param httpStatus             The Http status

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -42,8 +42,8 @@
 @Internal
 abstract class HttpStreamsHandler<In extends HttpMessage, Out extends HttpMessage> extends ChannelDuplexHandler {
 
-    private static final Logger LOG = LoggerFactory.getLogger(HttpStreamsHandler.class);
     public static final String HANDLER_BODY_PUBLISHER = "http-streams-codec-body-publisher";
+    private static final Logger LOG = LoggerFactory.getLogger(HttpStreamsHandler.class);
     private final Queue<Outgoing> outgoing = new LinkedList<>();
     private final Class<In> inClass;
     private final Class<Out> outClass;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/MaybeBodyBinder.java
Patch:
@@ -64,6 +64,7 @@ public List<Class<?>> superTypes() {
         return Collections.singletonList(MaybeSource.class);
     }
 
+    @SuppressWarnings("checkstyle:designforextension")
     @Deprecated
     public boolean supportsSuperTypes() {
         return false;

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -225,6 +225,7 @@ default Collection<String> getGeneratedResources() {
         info("EXPERIMENTAL: Compile time resource contribution to the context is experimental", null);
         return Collections.emptyList();
     }
+
     /**
      * Some TypeElementVisitors generate classpath resources that other visitors might be interested in.
      * The generated resources are intended to be strings paths relative to the classpath root

File: management/src/main/java/io/micronaut/management/health/indicator/service/ServiceReadyHealthIndicator.java
Patch:
@@ -45,6 +45,7 @@ public class ServiceReadyHealthIndicator implements HealthIndicator {
 
     private boolean serviceReady = false;
 
+    @SuppressWarnings("checkstyle:DesignForExtension")
     @EventListener
     void onServiceStarted(ServiceReadyEvent event) {
         serviceReady = true;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1471,7 +1471,7 @@ protected void accept(DeclaredType type, Element element, AopProxyWriter aopProx
                                 int paramLen = targetParameters.size();
                                 if (paramLen == sourceParameters.size()) {
 
-                                    Map<String, Object> genericTypes = new HashMap<>();
+                                    Map<String, Object> genericTypes = new LinkedHashMap<>();
                                     for (int i = 0; i < paramLen; i++) {
 
                                         VariableElement targetElement = targetParameters.get(i);

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -112,7 +112,7 @@ public DefaultEnvironment(@NonNull ApplicationContextConfiguration configuration
         super(configuration.getConversionService());
         this.configuration = configuration;
         Set<String> environments = new LinkedHashSet<>(3);
-        List<String> specifiedNames = configuration.getEnvironments();
+        List<String> specifiedNames = new ArrayList<>(configuration.getEnvironments());
 
         specifiedNames.addAll(0, Stream.of(System.getProperty(ENVIRONMENTS_PROPERTY),
                 System.getenv(ENVIRONMENTS_ENV))

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -317,7 +317,6 @@ public Collection<String> getGeneratedResources() {
 
     @Override
     public void addGeneratedResource(@NonNull String resource) {
-        info("Adding generated resource: " + resource, null);
         generatedResources.add(resource);
     }
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -372,7 +372,6 @@ public Collection<String> getGeneratedResources() {
 
     @Override
     public void addGeneratedResource(@NonNull String resource) {
-        info("Adding generated resource: " + resource, null);
         generatedResources.add(resource);
     }
 }

File: core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java
Patch:
@@ -101,7 +101,6 @@ public static void initializePackagesAtRunTime(String... packages) {
         RuntimeClassInitialization.initializeAtRunTime(packages);
     }
 
-
     /**
      * Register all constructors of the given class for runtime reflection, only if the class is present.
      *

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -183,11 +183,11 @@ public Iterable<? extends JavaFileObject> generate(JavaFileObject... sources) {
 
     private Set<String> getCompilerOptions() {
         Set<String> options;
-        if (Jvm.getCurrent().isJava14Compatible()) {
+        if (Jvm.getCurrent().isJava15Compatible()) {
             options = CollectionUtils.setOf(
                     "--enable-preview",
                     "-source",
-                    "14"
+                    "15"
             );
         } else {
             options = Collections.emptySet();

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/ScopeOne.java
Patch:
@@ -25,6 +25,7 @@
 
 @Scope
 @Retention(RUNTIME)
-@Target({ElementType.TYPE})
+@Target({ElementType.TYPE, ElementType.METHOD})
 public @interface ScopeOne {
+    String value() default "";
 }

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -193,7 +193,7 @@ private boolean isDirectory(String path) {
                         }
 
                     }
-                } catch (URISyntaxException | IOException e) {
+                } catch (URISyntaxException | IOException | ProviderNotFoundException e) {
                     if (LOG.isDebugEnabled()) {
                         LOG.debug("Error establishing whether path is a directory: " + e.getMessage(), e);
                     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -206,6 +206,9 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             }
         }
 
+        if (roundEnv.processingOver()) {
+            javaVisitorContext.finish();
+        }
         return false;
     }
 

File: inject/src/main/java/io/micronaut/inject/writer/DirectoryClassWriterOutputVisitor.java
Patch:
@@ -40,6 +40,7 @@ public class DirectoryClassWriterOutputVisitor extends AbstractClassWriterOutput
      * @param targetDir The target directory
      */
     public DirectoryClassWriterOutputVisitor(File targetDir) {
+        super(true);
         this.targetDir = targetDir;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -2157,9 +2157,10 @@ private AopProxyWriter createIntroductionAdviceWriter(TypeElement typeElement) {
                     interceptorTypes
             );
 
+            Set<TypeElement> additionalInterfaces = Arrays.stream(interfaceTypes).map(elementUtils::getTypeElement).collect(Collectors.toSet());
+
             if (ArrayUtils.isNotEmpty(interfaceTypes)) {
                 List<? extends AnnotationMirror> annotationMirrors = typeElement.getAnnotationMirrors();
-                Set<TypeElement> additionalInterfaces = new HashSet<>(3);
                 populateIntroductionInterfaces(annotationMirrors, additionalInterfaces);
                 if (!additionalInterfaces.isEmpty()) {
                     for (TypeElement additionalInterface : additionalInterfaces) {

File: http-client-core/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.client;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.http.ssl.ClientSslConfiguration;
@@ -30,6 +31,7 @@
  * @since 1.0
  */
 @ConfigurationProperties(DefaultHttpClientConfiguration.PREFIX)
+@BootstrapContextCompatible
 @Primary
 public class DefaultHttpClientConfiguration extends HttpClientConfiguration {
 
@@ -77,6 +79,7 @@ public void setClientSslConfiguration(@Nullable ClientSslConfiguration sslConfig
      * The default connection pool configuration.
      */
     @ConfigurationProperties(ConnectionPoolConfiguration.PREFIX)
+    @BootstrapContextCompatible
     @Primary
     public static class DefaultConnectionPoolConfiguration extends ConnectionPoolConfiguration {
     }

File: http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.bind;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.annotation.Indexed;
 import io.micronaut.core.convert.ArgumentConversionContext;
@@ -30,6 +31,7 @@
  * @since 2.1.0
  */
 @Experimental
+@BootstrapContextCompatible
 @Indexed(ClientArgumentRequestBinder.class)
 public interface ClientArgumentRequestBinder<T> {
 

File: http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.client.bind;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.bind.annotation.Bindable;

File: http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.bind;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Experimental;
 import io.micronaut.core.type.Argument;
 
@@ -28,6 +29,7 @@
  * @since 2.1.0
  */
 @Experimental
+@BootstrapContextCompatible
 public interface HttpClientBinderRegistry {
 
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -284,7 +284,7 @@ public Object visitType(TypeElement classElement, Object o) {
                     concreteClass.getQualifiedName().equals(classElement.getQualifiedName());
             if (shouldVisit) {
                 if (typeAnnotationMetadata.hasStereotype(Introduction.class) || (typeAnnotationMetadata.hasStereotype(Introspected.class) && modelUtils.isAbstract(classElement))) {
-                    classElement.asType().accept(new PublicAbstractMethodVisitor<Object, Object>(classElement, modelUtils, elementUtils) {
+                    classElement.asType().accept(new PublicAbstractMethodVisitor<Object, Object>(classElement, javaVisitorContext) {
                         @Override
                         protected void accept(DeclaredType type, Element element, Object o) {
                             if (element instanceof ExecutableElement) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -170,7 +170,7 @@ public List<PropertyElement> getBeanProperties() {
         Map<String, BeanPropertyData> props = new LinkedHashMap<>();
         Map<String, VariableElement> fields = new LinkedHashMap<>();
 
-        classElement.asType().accept(new PublicMethodVisitor<Object, Object>(visitorContext.getTypes()) {
+        classElement.asType().accept(new PublicMethodVisitor<Object, Object>(visitorContext) {
 
             @Override
             protected boolean isAcceptable(javax.lang.model.element.Element element) {
@@ -334,7 +334,7 @@ public Optional<MethodElement> getReadMethod() {
     @Override
     public List<FieldElement> getFields(@NonNull Predicate<Set<ElementModifier>> modifierFilter) {
         List<FieldElement> fields = new ArrayList<>();
-        classElement.asType().accept(new PublicMethodVisitor<Object, Object>(visitorContext.getTypes()) {
+        classElement.asType().accept(new PublicMethodVisitor<Object, Object>(visitorContext) {
             @Override
             protected boolean isAcceptable(javax.lang.model.element.Element element) {
                 final Set<ElementModifier> mods = element.getModifiers().stream().map(m -> ElementModifier.valueOf(m.name())).collect(Collectors.toSet());

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -921,8 +921,6 @@ public void visitBeanDefinitionEnd() {
                 isInterface ? TYPE_OBJECT.getInternalName() : getTypeReference(targetClassFullName).getInternalName(),
                 interfaces);
 
-        proxyClassWriter.visitAnnotation(TYPE_GENERATED.getDescriptor(), false);
-
         // set $proxyMethods field
         proxyConstructorGenerator.loadThis();
         proxyConstructorGenerator.push(proxyMethodCount);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -287,7 +287,7 @@ public NettyHttpServerConfiguration getServerConfiguration() {
 
     @Override
     public boolean isRunning() {
-        return running.get() && !SocketUtils.isTcpPortAvailable(serverPort);
+        return running.get();
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -39,7 +39,7 @@
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.context.BeanContext;
-import io.micronaut.context.exceptions.BeanInstantiationException;
+import io.micronaut.context.exceptions.BeanCreationException;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.publisher.Publishers;
@@ -309,9 +309,9 @@ private void exceptionCaughtInternal(ChannelHandlerContext ctx,
                 // handle error with a method that is global with bad request
                 errorRoute = router.findStatusRoute(statusException.getStatus(), nettyHttpRequest).orElse(null);
             }
-        } else if (cause instanceof BeanInstantiationException && declaringType != null) {
+        } else if (cause instanceof BeanCreationException && declaringType != null) {
             // If the controller could not be instantiated, don't look for a local error route
-            Optional<Class> rootBeanType = ((BeanInstantiationException) cause).getRootBeanType().map(BeanType::getBeanType);
+            Optional<Class> rootBeanType = ((BeanCreationException) cause).getRootBeanType().map(BeanType::getBeanType);
             if (rootBeanType.isPresent() && declaringType == rootBeanType.get()) {
                 if (LOG.isDebugEnabled()) {
                     LOG.debug("Failed to instantiate [{}]. Skipping lookup of a local error route", declaringType.getName());

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -66,6 +66,6 @@ public class NettyThreadFactory {
     @Named(NAME)
     @BootstrapContextCompatible
     protected ThreadFactory nettyThreadFactory() {
-        return new DefaultThreadFactory(NioEventLoopGroup.class);
+        return new DefaultThreadFactory("default-" + DefaultThreadFactory.toPoolName(NioEventLoopGroup.class));
     }
 }

File: runtime/src/main/java/io/micronaut/scheduling/executor/IOExecutorServiceConfig.java
Patch:
@@ -38,6 +38,6 @@ public class IOExecutorServiceConfig {
     @Singleton
     @Named(TaskExecutors.IO)
     ExecutorConfiguration configuration() {
-        return UserExecutorConfiguration.of(ExecutorType.CACHED);
+        return UserExecutorConfiguration.of(TaskExecutors.IO, ExecutorType.CACHED);
     }
 }

File: runtime/src/main/java/io/micronaut/scheduling/executor/ScheduledExecutorServiceConfig.java
Patch:
@@ -39,6 +39,6 @@ public class ScheduledExecutorServiceConfig {
     @Singleton
     @Named(TaskExecutors.SCHEDULED)
     ExecutorConfiguration configuration() {
-        return UserExecutorConfiguration.of(ExecutorType.SCHEDULED);
+        return UserExecutorConfiguration.of(TaskExecutors.SCHEDULED, ExecutorType.SCHEDULED);
     }
 }

File: test-suite/src/test/java/io/micronaut/docs/client/filter/GoogleAuthFilterSpec.java
Patch:
@@ -47,7 +47,8 @@ void testApplyGoogleAuthFilter() {
         assertTrue(
                 message.contains("metadata: nodename nor servname provided") ||
                         message.contains("metadata: Temporary failure in name resolution") ||
-                        message.contains("metadata: Name or service not known")
+                        message.contains("metadata: Name or service not known") ||
+                        message.contains("Connect Error: No such host is known (metadata)")
         );
 
     }

File: runtime/src/main/java/io/micronaut/jackson/parser/JacksonProcessor.java
Patch:
@@ -133,7 +133,9 @@ public boolean needMoreInput() {
 
     @Override
     protected void doOnComplete() {
-        if (needMoreInput()) {
+        if (jsonStream && nodeStack.isEmpty()) {
+            super.doOnComplete();
+        } else if (needMoreInput()) {
             doOnError(new JsonEOFException(currentNonBlockingJsonParser, JsonToken.NOT_AVAILABLE, "Unexpected end-of-input"));
         } else {
             super.doOnComplete();

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -745,7 +745,7 @@ private <T> void validateParametersInternal(
                                 context,
                                 overallViolations,
                                 argument.getName(),
-                                unwrappedValue.getClass(),
+                                unwrappedValue == null ? Object.class : unwrappedValue.getClass(),
                                 finalIndex,
                                 annotationMetadata,
                                 unwrappedValue

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/BasicAuthArgumentBinder.java
Patch:
@@ -36,6 +36,7 @@
 public class BasicAuthArgumentBinder implements TypedRequestArgumentBinder<BasicAuth> {
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -62,6 +62,7 @@ public CompletableFutureBodyBinder(HttpContentProcessorResolver httpContentProce
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/ObservableBodyBinder.java
Patch:
@@ -58,6 +58,7 @@ public ObservableBodyBinder(ConversionService conversionService,
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -61,6 +61,7 @@ public PublisherBodyBinder(ConversionService conversionService,
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/MultipartBodyArgumentBinder.java
Patch:
@@ -65,6 +65,7 @@ public MultipartBodyArgumentBinder(BeanLocator beanLocator, Provider<HttpServerC
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http/src/main/java/io/micronaut/http/bind/binders/TypedRequestArgumentBinder.java
Patch:
@@ -36,7 +36,9 @@ public interface TypedRequestArgumentBinder<T> extends RequestArgumentBinder<T>,
      * implements are candidates for binding.
      *
      * @return True if super interfaces are binding candidates
+     * @deprecated Use {@link #superTypes()} instead
      */
+    @Deprecated
     default boolean supportsSuperTypes() {
         return true;
     }

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionArgumentBinder.java
Patch:
@@ -46,6 +46,7 @@ public Argument<Optional<Session>> argumentType() {
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -61,6 +61,7 @@ public Argument<Session> argumentType() {
     }
 
     @Override
+    @Deprecated
     public boolean supportsSuperTypes() {
         return false;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/channel/ChannelPipelineCustomizer.java
Patch:
@@ -47,6 +47,7 @@ public interface ChannelPipelineCustomizer {
     String HANDLER_MICRONAUT_SSE_EVENT_STREAM = "micronaut-sse-event-stream";
     String HANDLER_MICRONAUT_SSE_CONTENT = "micronaut-sse-content";
     String HANDLER_MICRONAUT_HTTP_RESPONSE_STREAM = "micronaut-http-response-stream";
+    String HANDLER_MICRONAUT_HTTP_RESPONSE_FULL = "micronaut-http-response-full";
     String HANDLER_HTTP2_CONNECTION = "http2-connection";
     String HANDLER_HTTP2_SETTINGS = "http2-settings";
     String HANDLER_HTTP2_UPGRADE_REQUEST = "http2-upgrade-request";

File: core/src/main/java/io/micronaut/core/async/publisher/AsyncSingleResultPublisher.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.core.async.publisher;
 
-import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
@@ -31,7 +30,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class AsyncSingleResultPublisher<T> implements Publisher<T> {
+public class AsyncSingleResultPublisher<T> implements Publishers.MicronautPublisher<T> {
     private final ExecutorService executor;
     private final Supplier<T> supplier;
 

File: core/src/main/java/io/micronaut/core/async/publisher/CompletableFuturePublisher.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.core.async.publisher;
 
-import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
@@ -31,7 +30,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-class CompletableFuturePublisher<T> implements Publisher<T> {
+class CompletableFuturePublisher<T> implements Publishers.MicronautPublisher<T> {
 
     private final Supplier<CompletableFuture<T>> futureSupplier;
 

File: http-client-core/src/main/java/io/micronaut/http/client/filters/ClientServerRequestTracingPublisher.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.filters;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.context.ServerRequestContext;
@@ -30,7 +31,7 @@
  * @since 1.0
  */
 @Internal
-class ClientServerRequestTracingPublisher implements Publisher<HttpResponse<?>> {
+class ClientServerRequestTracingPublisher implements Publishers.MicronautPublisher<HttpResponse<?>> {
 
     private final HttpRequest<?> request;
     private final Publisher<? extends HttpResponse<?>> actual;

File: http/src/main/java/io/micronaut/http/context/ServerRequestTracingPublisher.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.context;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import org.reactivestreams.Publisher;
@@ -30,7 +31,7 @@
  * @since 1.0
  */
 @Internal
-public final class ServerRequestTracingPublisher implements Publisher<MutableHttpResponse<?>> {
+public final class ServerRequestTracingPublisher implements Publishers.MicronautPublisher<MutableHttpResponse<?>> {
 
     private final HttpRequest<?> request;
     private final Publisher<MutableHttpResponse<?>> actual;

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -20,6 +20,7 @@
 import brave.http.HttpClientRequest;
 import brave.http.HttpClientResponse;
 import brave.http.HttpTracing;
+import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpAttributes;
 import io.micronaut.http.HttpRequest;
@@ -38,7 +39,7 @@
  * @since 1.0
  */
 @SuppressWarnings("PublisherImplementation")
-class HttpClientTracingPublisher implements Publisher<HttpResponse<?>> {
+class HttpClientTracingPublisher implements Publishers.MicronautPublisher<HttpResponse<?>> {
 
     private final Publisher<HttpResponse<?>> publisher;
     private final HttpClientHandler<HttpClientRequest, HttpClientResponse> clientHandler;

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpServerTracingPublisher.java
Patch:
@@ -42,7 +42,7 @@
  * @author graemerocher
  * @since 1.0
  */
-public class HttpServerTracingPublisher implements Publisher<MutableHttpResponse<?>> {
+public class HttpServerTracingPublisher implements Publishers.MicronautPublisher<MutableHttpResponse<?>> {
 
     private final Publisher<MutableHttpResponse<?>> publisher;
     private final HttpServerHandler<HttpServerRequest, HttpServerResponse> serverHandler;

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/ScopePropagationPublisher.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.tracing.instrument.util;
 
+import io.micronaut.core.async.publisher.Publishers;
 import io.opentracing.Scope;
 import io.opentracing.Span;
 import io.opentracing.Tracer;
@@ -30,7 +31,7 @@
  * @param <T> The publisher generic type
  */
 @SuppressWarnings("PublisherImplementation")
-public class ScopePropagationPublisher<T> implements Publisher<T> {
+public class ScopePropagationPublisher<T> implements Publishers.MicronautPublisher<T> {
     private final Publisher<T> publisher;
     private final Tracer tracer;
     private final Span parentSpan;

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingPublisher.java
Patch:
@@ -41,7 +41,7 @@
  * @since 1.0
  */
 @SuppressWarnings("PublisherImplementation")
-public class TracingPublisher<T> implements Publisher<T> {
+public class TracingPublisher<T> implements Publishers.MicronautPublisher<T> {
 
     private final Publisher<T> publisher;
     private final Tracer tracer;

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -64,7 +64,6 @@ public R visitDeclared(DeclaredType type, P p) {
                         ExecutableElement ee = (ExecutableElement) enclosedElement;
                         String qualifiedName = ee.getSimpleName().toString();
                         qualifiedName += "(" + ee.getParameters().stream().map(variableElement -> types.erasure(variableElement.asType()).toString()).collect(Collectors.joining(",")) + ")";
-                        qualifiedName = types.erasure(ee.getReturnType()).toString() + "." + qualifiedName;
                         // if the method has already been processed then it is overridden so ignore
                         if (!processed.contains(qualifiedName)) {
                             processed.add(qualifiedName);

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -536,7 +536,9 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
                         }
                         if (first) {
                             Map<String, Object> normalized = resolveEntriesForKey(resolvedProperty, true, PropertyCatalog.NORMALIZED);
-                            normalized.put(propertyName, value);
+                            if (normalized != null) {
+                                normalized.put(propertyName, value);
+                            }
                             first = false;
                         }
                     } else {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -97,7 +97,7 @@ public Object getNativeType() {
     @NonNull
     @Override
     public ClassElement getType() {
-        return new GroovyClassElement(sourceUnit, compilationUnit, variable.getType(), AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, variable.getType()));
+        return toClassElement(sourceUnit, compilationUnit, variable.getType(), AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, variable.getType()));
     }
 
     @Override
@@ -115,7 +115,7 @@ public ClassElement getDeclaringType() {
             throw new IllegalStateException("Declaring class could not be established");
         }
 
-        return new GroovyClassElement(
+        return toClassElement(
                 sourceUnit,
                 compilationUnit,
                 declaringClass,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -107,15 +107,15 @@ public Optional<ClassElement> getClassElement(String name) {
                 });
 
         return Optional.ofNullable(classNode)
-                .map(cn -> new GroovyClassElement(sourceUnit, compilationUnit, cn, AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, cn)));
+                .map(cn -> AbstractGroovyElement.toClassElement(sourceUnit, compilationUnit, cn, AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, cn)));
     }
 
     @Override
     public Optional<ClassElement> getClassElement(Class<?> type) {
         final ClassNode classNode = ClassHelper.makeCached(type);
         final AnnotationMetadata annotationMetadata = AstAnnotationUtils
                 .getAnnotationMetadata(sourceUnit, compilationUnit, classNode);
-        final GroovyClassElement classElement = new GroovyClassElement(sourceUnit, compilationUnit, classNode, annotationMetadata);
+        final ClassElement classElement = AbstractGroovyElement.toClassElement(sourceUnit, compilationUnit, classNode, annotationMetadata);
         return Optional.of(
                 classElement
         );
@@ -136,7 +136,7 @@ public ClassElement[] getClassElements(@NonNull String aPackage, @NonNull String
         for (String s : stereotypes) {
             scanner.scan(s, aPackage).forEach(aClass -> {
                 final ClassNode classNode = ClassHelper.make(aClass);
-                classElements.add(new GroovyClassElement(sourceUnit, compilationUnit, classNode, AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, classNode)));
+                classElements.add(AbstractGroovyElement.toClassElement(sourceUnit, compilationUnit, classNode, AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, classNode)));
             });
         }
         return classElements.toArray(new ClassElement[0]);

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -24,6 +24,8 @@
 import io.micronaut.inject.ast.ParameterElement;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import io.micronaut.inject.ast.PrimitiveElement;
+
 import javax.lang.model.element.*;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
@@ -134,7 +136,7 @@ private ClassElement returnType(Map<String, Map<String, TypeMirror>> info) {
             TypeMirror tm = wType.getSuperBound();
             // check Void
             if ((tm instanceof DeclaredType) && sameType("kotlin.Unit", (DeclaredType) tm)) {
-                return new JavaVoidElement();
+                return PrimitiveElement.VOID;
             } else {
                 return mirrorToClassElement(tm, visitorContext, info);
             }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -157,7 +157,7 @@ void visitProperty(
             @Nullable AnnotationMetadata annotationMetadata,
             @Nullable Map<String, ClassElement> typeArguments) {
 
-        final Type propertyType = getTypeForElement(type);
+        final Type propertyType = getTypeReference(type);
 
         DefaultAnnotationMetadata.contributeDefaults(
                 this.annotationMetadata,
@@ -327,7 +327,7 @@ private void writeConstructorArguments() {
                 desc);
 
         Collection<Type> argumentTypes = Arrays.stream(constructorArguments).map(pe ->
-            getTypeForElement(pe.getType())
+            getTypeReference(pe.getType())
         ).collect(Collectors.toList());
 
         boolean isConstructor = constructor instanceof ConstructorElement;

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanPropertyWriter.java
Patch:
@@ -189,7 +189,7 @@ private void writeWriteMethod() {
         pushCastToType(writeMethod, propertyType);
         final boolean hasWriteMethod = this.writeMethod != null;
         final String methodName = hasWriteMethod ? this.writeMethod.getName() : NameUtils.setterNameFor(propertyName);
-        final Object returnType = hasWriteMethod ? getTypeForElement(this.writeMethod.getReturnType()) : void.class;
+        final Object returnType = hasWriteMethod ? getTypeReference(this.writeMethod.getReturnType()) : void.class;
         if (declaringElement.isInterface()) {
             writeMethod.invokeInterface(
                     beanType,

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1335,7 +1335,8 @@ protected ChannelFuture doConnect(Bootstrap bootstrap, String host, int port) {
      */
     protected SslContext buildSslContext(URI uriObject) {
         final SslContext sslCtx;
-        if (io.micronaut.http.HttpRequest.SCHEME_HTTPS.equalsIgnoreCase(uriObject.getScheme())) {
+        if (io.micronaut.http.HttpRequest.SCHEME_HTTPS.equalsIgnoreCase(uriObject.getScheme()) ||
+            SCHEME_WSS.equalsIgnoreCase(uriObject.getScheme())) {
             sslCtx = sslContext;
             //Allow https requests to be sent if SSL is disabled but a proxy is present
             if (sslCtx == null && !configuration.getProxyAddress().isPresent()) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -107,7 +107,7 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
 
     final Map<BeanKey, BeanRegistration> singletonObjects = new ConcurrentHashMap<>(100);
     final Map<BeanIdentifier, Object> singlesInCreation = new ConcurrentHashMap<>(5);
-    final Map<BeanKey, Object> scopedProxies = new ConcurrentHashMap<>(20);
+    final Map<BeanKey, Provider<Object>> scopedProxies = new ConcurrentHashMap<>(20);
 
     Set<Map.Entry<Class, List<BeanInitializedEventListener>>> beanInitializedEventListeners;
 
@@ -2313,7 +2313,7 @@ private <T> T getScopedBeanForDefinition(
             Class<?> proxiedType = resolveProxiedType(beanType, definition);
             BeanKey key = new BeanKey(proxiedType, qualifier);
             BeanDefinition<T> finalDefinition = definition;
-            return (T) scopedProxies.computeIfAbsent(key, (Function<BeanKey, T>) beanKey -> {
+            return (T) scopedProxies.computeIfAbsent(key, beanKey -> ProviderUtils.memoized(() -> {
                 Qualifier<T> q = qualifier;
                 if (q == null) {
                     q = finalDefinition.getDeclaredQualifier();
@@ -2328,7 +2328,7 @@ private <T> T getScopedBeanForDefinition(
                     throw new NoSuchBeanException(proxyDefinition.getBeanType(), qualifier);
                 }
                 return createBean;
-            });
+            })).get();
         } else {
             Optional<BeanResolutionContext.Segment<?>> currentSegment = resolutionContext.getPath().currentSegment();
             Optional<CustomScope> registeredScope = Optional.empty();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1647,7 +1647,7 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, HttpRequest
         if (!isHttp2) {
             if (!nettyHeaders.contains(HttpHeaderNames.CONNECTION)) {
                 boolean expectKeepAlive = nettyResponse.protocolVersion().isKeepAliveDefault() || request.getHeaders().isKeepAlive();
-                if (!expectKeepAlive || httpStatus.getCode() > 299) {
+                if (!expectKeepAlive || httpStatus.getCode() > 499) {
                     nettyHeaders.set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);
                 } else {
                     nettyHeaders.set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jScopeDecorator.java
Patch:
@@ -15,8 +15,7 @@
  */
 package io.micronaut.tracing.brave.log;
 
-import brave.internal.HexCodec;
-import brave.internal.Nullable;
+import brave.internal.codec.HexCodec;
 import brave.propagation.CurrentTraceContext;
 import brave.propagation.TraceContext;
 import org.slf4j.Logger;
@@ -125,7 +124,7 @@ private void log(String text, TraceContext span) {
         }
     }
 
-    private static void replace(String key, @Nullable String value) {
+    private static void replace(String key, String value) {
         if (value != null) {
             MDC.put(key, value);
         } else {

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -149,7 +149,7 @@ public class BeanDefinitionWriter extends AbstractClassFileWriter implements Bea
     private final Type beanType;
     private final Type providedType;
     private final Set<Class> interfaceTypes;
-    private final Map<String, GeneratorAdapter> loadTypeMethods = new HashMap<>();
+    private final Map<String, GeneratorAdapter> loadTypeMethods = new LinkedHashMap<>();
     private final Map<String, ExecutableMethodWriter> methodExecutors = new LinkedHashMap<>();
     private final String providedBeanClassName;
     private final String packageName;
@@ -279,7 +279,7 @@ public BeanDefinitionWriter(String packageName,
         this.beanType = getTypeReference(beanFullClassName);
         this.providedType = getTypeReference(providedBeanClassName);
         this.beanDefinitionInternalName = getInternalName(this.beanDefinitionName);
-        this.interfaceTypes = new HashSet<>();
+        this.interfaceTypes = new TreeSet<>(Comparator.comparing(Class::getName));
         this.interfaceTypes.add(BeanFactory.class);
         this.isConfigurationProperties = annotationMetadata.hasDeclaredStereotype(ConfigurationProperties.class);
     }

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/composite/Runner.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micronaut.inject.qualifiers.composite;
 
-import groovy.lang.Singleton;
-
+import javax.inject.Singleton;
 import javax.inject.Named;
 
 @Singleton
 @Named("thread")
 public class Runner implements Runnable {
+
     @Override
     public void run() {
 

File: runtime/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.scheduling.cron.CronExpression;
 
 import javax.inject.Named;
+import javax.inject.Singleton;
 import java.time.Duration;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
@@ -37,6 +38,7 @@
  */
 @Named(TaskExecutors.SCHEDULED)
 @Primary
+@Singleton
 public class ScheduledExecutorTaskScheduler implements TaskScheduler {
 
     private final ScheduledExecutorService executorService;

File: validation/src/main/java/io/micronaut/validation/validator/resolver/CompositeTraversableResolver.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.CollectionUtils;
 
+import javax.inject.Singleton;
 import javax.validation.Path;
 import javax.validation.TraversableResolver;
 import java.lang.annotation.ElementType;
@@ -31,6 +32,7 @@
  * @since 1.2.0
  */
 @Primary
+@Singleton
 @Internal
 public class CompositeTraversableResolver implements TraversableResolver {
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/CertificateProvidedSslBuilder.java
Patch:
@@ -110,8 +110,8 @@ public Optional<SslContext> build(SslConfiguration ssl, HttpVersion httpVersion)
                     ApplicationProtocolConfig.Protocol.ALPN,
                     ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,
                     ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,
-                    ApplicationProtocolNames.HTTP_1_1,
-                    ApplicationProtocolNames.HTTP_2
+                    ApplicationProtocolNames.HTTP_2,
+                    ApplicationProtocolNames.HTTP_1_1
             ));
         }
         try {

File: core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java
Patch:
@@ -136,7 +136,7 @@ public static void addResourcePatterns(String... patterns) {
     }
 
     /**
-     * Adds resource bundles
+     * Adds resource bundles.
      * @param bundles The bundles
      */
     public static void addResourceBundles(String... bundles) {

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -377,7 +377,7 @@ public DefaultHttpClient() {
         this((LoadBalancer) null, new DefaultHttpClientConfiguration());
     }
 
-    /**1
+    /**
      * @param url           The URL
      * @param configuration The {@link HttpClientConfiguration} object
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -393,7 +393,6 @@ final boolean isFormData() {
         return ct != null && (ct.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE));
     }
 
-
     /**
      * Lookup the current request from the context.
      *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/BytesSentElement.java
Patch:
@@ -26,10 +26,12 @@
  * @since 2.0
  */
 final class BytesSentElement implements LogElement {
+
     /**
-     * The bytes sent marker (set dask when 0.)
+     * The bytes sent marker (set dask when 0).
      */
     public static final String BYTES_SENT_DASH = "b";
+
     /**
      * The bytes sent marker.
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/handler/accesslog/element/ConstantElement.java
Patch:
@@ -31,7 +31,7 @@
 public final class ConstantElement implements LogElement {
 
     /**
-     * The unknown value: '-'
+     * The unknown value: '-'.
      */
     public static final String UNKNOWN_VALUE = "-";
 

File: http/src/main/java/io/micronaut/http/filter/HttpFilterResolver.java
Patch:
@@ -40,7 +40,7 @@
 public interface HttpFilterResolver<F extends HttpFilter, T extends AnnotationMetadataProvider> {
 
     /**
-     * Resolves the initial list of filters
+     * Resolves the initial list of filters.
      * @param context The context
      * @return The filters
      * @since 2.0

File: inject/src/main/java/io/micronaut/context/ApplicationContextBuilder.java
Patch:
@@ -70,7 +70,7 @@ public interface ApplicationContextBuilder {
     @NonNull ApplicationContextBuilder eagerInitAnnotated(Class<? extends Annotation>... annotations);
 
     /**
-     * Override default config locations
+     * Override default config locations.
      *
      * @param configLocations The config locations
      * @return This environment

File: inject/src/main/java/io/micronaut/context/ApplicationContextConfiguration.java
Patch:
@@ -85,7 +85,7 @@ default boolean isEnvironmentPropertySource() {
     }
 
     /**
-     * The config locations
+     * The config locations.
      *
      * @return The config locations
      */

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3328,7 +3328,7 @@ public String getName() {
     /**
      * @param <T> The bean type
      */
-    private final static class NoInjectionBeanDefinition<T> implements BeanDefinition<T>, BeanDefinitionReference<T> {
+    private static final class NoInjectionBeanDefinition<T> implements BeanDefinition<T>, BeanDefinitionReference<T> {
         private final Class<?> singletonClass;
         private final Map<Class<?>, List<Argument<?>>> typeArguments = new HashMap<>();
 

File: inject/src/main/java/io/micronaut/inject/visitor/TypeElementVisitor.java
Patch:
@@ -149,7 +149,7 @@ default Set<String> getSupportedOptions() {
      */
     enum VisitorKind {
         /**
-         * A visitor that generates a file for each visited element and calls
+         * A visitor that generates a file for each visited element and calls.
          */
         ISOLATING,
         /**

File: runtime/src/main/java/io/micronaut/retry/annotation/DefaultRetryPredicate.java
Patch:
@@ -46,7 +46,7 @@ public DefaultRetryPredicate(List<Class<? extends Throwable>> includes, List<Cla
     }
 
     /**
-     * Default constructor
+     * Default constructor.
      */
     public DefaultRetryPredicate() {
         this(Collections.emptyList(), Collections.emptyList());

File: validation/src/main/java/io/micronaut/validation/routes/rules/RequestBeanParameterRule.java
Patch:
@@ -29,7 +29,7 @@
 import io.micronaut.validation.routes.RouteValidationResult;
 
 /**
- * Validates RequestBean parameters
+ * Validates RequestBean parameters.
  *
  * @author Anze Sodja
  * @since 2.0

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -473,7 +473,7 @@ private Map<String, Object> toTypeArguments(@NotNull Map<String, ClassElement> t
                 if (CollectionUtils.isNotEmpty(subArgs)) {
                     Map<String, Object> m = toTypeArguments(subArgs, visitedTypes);
                     if (CollectionUtils.isNotEmpty(m)) {
-                        map.put(entry.getKey(), m);
+                        map.put(entry.getKey(), Collections.singletonMap(getTypeForElement(ce), m));
                     } else {
                         map.put(entry.getKey(), Collections.singletonMap(entry.getKey(), className));
                     }

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.client;
 
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.context.LifeCycle;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.io.buffer.ByteBuffer;
@@ -229,7 +230,7 @@ default HttpClient refresh() {
      * @param url The base URL
      * @return The client
      */
-    static HttpClient create(URL url) {
+    static HttpClient create(@Nullable URL url) {
         return HttpClientConfiguration.createClient(url);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -585,8 +585,7 @@ public Proxy resolveProxy(boolean isSsl, String host, int port) {
      * @return The client
      */
     @Internal
-    static RxHttpClient createClient(@NonNull URL url) {
-        ArgumentUtils.requireNonNull("url", url);
+    static RxHttpClient createClient(@Nullable URL url) {
         RxHttpClientFactory clientFactory = HttpClientConfiguration.clientFactory;
         if (clientFactory == null) {
             synchronized (HttpClientConfiguration.class) { // double check

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.client;
 
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
@@ -103,7 +104,7 @@ default Flowable<String> retrieve(String uri) {
      * @param url The base URL
      * @return The client
      */
-    static RxHttpClient create(URL url) {
+    static RxHttpClient create(@Nullable URL url) {
         return HttpClientConfiguration.createClient(url);
     }
 }

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -211,7 +211,7 @@ public class DefaultHttpClient implements
      * @param annotationMetadataResolver The annotation metadata resolver
      * @param filters                    The filters to use
      */
-    public DefaultHttpClient(LoadBalancer loadBalancer,
+    public DefaultHttpClient(@Nullable LoadBalancer loadBalancer,
                              HttpClientConfiguration configuration,
                              @Nullable String contextPath,
                              @Nullable ThreadFactory threadFactory,
@@ -377,13 +377,13 @@ public DefaultHttpClient() {
         this((LoadBalancer) null, new DefaultHttpClientConfiguration());
     }
 
-    /**
+    /**1
      * @param url           The URL
      * @param configuration The {@link HttpClientConfiguration} object
      */
     public DefaultHttpClient(URL url, HttpClientConfiguration configuration) {
         this(
-                LoadBalancer.fixed(url), configuration, null, new DefaultThreadFactory(MultithreadEventLoopGroup.class),
+                url == null ? null : LoadBalancer.fixed(url), configuration, null, new DefaultThreadFactory(MultithreadEventLoopGroup.class),
                 new NettyClientSslBuilder(new ResourceResolver()), createDefaultMediaTypeRegistry(), AnnotationMetadataResolver.DEFAULT);
     }
 

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -146,6 +146,9 @@ public Optional<UriMatchInfo> match(String uri) {
         if (parameterIndex > -1) {
             uri = uri.substring(0, parameterIndex);
         }
+        if (uri.endsWith("/")) {
+            uri = uri.substring(0, uri.length() - 1);
+        }
         Matcher matcher = matchPattern.matcher(uri);
         if (matcher.matches()) {
             if (variables.isEmpty()) {

File: http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java
Patch:
@@ -399,7 +399,7 @@ private Class<? extends SocketChannel> resolveSocketChannel(HttpClientConfigurat
 
     private ClientKey getClientKey(AnnotationMetadata metadata) {
         final HttpVersion httpVersion =
-                metadata.enumValue(Client.class, "version", HttpVersion.class).orElse(null);
+                metadata.enumValue(Client.class, "httpVersion", HttpVersion.class).orElse(null);
         String clientId = metadata.stringValue(Client.class).orElse(null);
         String path = metadata.stringValue(Client.class, "path").orElse(null);
         String filterAnnotation = metadata

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -43,7 +43,7 @@
     /**
      * @return The key format to apply to keys
      */
-    StringConvention keyFormat() default StringConvention.RAW;
+    StringConvention keyFormat() default StringConvention.HYPHENATED;
 
 
     /**

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -57,7 +57,7 @@ public class NettyMutableHttpResponse<B> implements MutableHttpResponse<B> {
     final NettyHttpHeaders headers;
     private final ConversionService conversionService;
     private B body;
-    private final Map<Class, Optional> convertedBodies = new LinkedHashMap<>(1);
+    private final Map<Class, Optional> convertedBodies = Collections.synchronizedMap(new LinkedHashMap<>(1));
     private final MutableConvertibleValues<Object> attributes;
 
     private ServerCookieEncoder serverCookieEncoder = DEFAULT_SERVER_COOKIE_ENCODER;

File: validation/src/main/java/io/micronaut/validation/validator/messages/DefaultValidationMessages.java
Patch:
@@ -41,6 +41,8 @@ public class DefaultValidationMessages extends StaticMessageSource {
     public DefaultValidationMessages() {
         addMessage(AssertTrue.class.getName() + MESSAGE_SUFFIX, "must be true");
         addMessage(AssertFalse.class.getName() + MESSAGE_SUFFIX, "must be false");
+        addMessage(DecimalMax.class.getName() + MESSAGE_SUFFIX, "must be less than or equal to {value}");
+        addMessage(DecimalMin.class.getName() + MESSAGE_SUFFIX, "must be greater than or equal to {value}");
         addMessage(Digits.class.getName() + MESSAGE_SUFFIX, "numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)");
         addMessage(Email.class.getName() + MESSAGE_SUFFIX, "must be a well-formed email address");
         addMessage(Future.class.getName() + MESSAGE_SUFFIX, "must be a future date");

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -745,7 +745,7 @@ private <T> void validateParametersInternal(
                                 context,
                                 overallViolations,
                                 argument.getName(),
-                                parameterType,
+                                unwrappedValue.getClass(),
                                 finalIndex,
                                 annotationMetadata,
                                 unwrappedValue

File: http-client-core/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -69,10 +69,12 @@
      * @return The type used to decode errors
      */
     Class<?> errorType() default JsonError.class;
+
     /**
      * @return The http client configuration bean to use
      */
     Class<? extends HttpClientConfiguration> configuration() default HttpClientConfiguration.class;
+
     /**
      * The HTTP version.
      *

File: management/src/main/java/io/micronaut/management/endpoint/EndpointDefaultConfiguration.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.management.endpoint;
 
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.core.util.StringUtils;
 
@@ -115,7 +116,7 @@ public Optional<Integer> getPort() {
      * Sets the port to expose endpoints via.
      * @param port The port
      */
-    public void setPort(Integer port) {
+    public void setPort(@Nullable Integer port) {
         this.port = port;
     }
 }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueBuilder.java
Patch:
@@ -87,7 +87,7 @@ public class AnnotationValueBuilder<T extends Annotation> {
      * @return The {@link AnnotationValue}
      */
     public @NonNull AnnotationValue<T> build() {
-        if (retentionPolicy != RetentionPolicy.RUNTIME) {
+        if (retentionPolicy != RetentionPolicy.CLASS) {
             //noinspection unchecked
             return new AnnotationValue(annotationName, values) {
                 @NonNull

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggerConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * Represents the configuration of a {@link LoggingSystem} logger.
+ * Represents the configuration of a {@link ManagedLoggingSystem} logger.
  *
  * @author Matthew Moss
  * @author graemerocher

File: management/src/main/java/io/micronaut/management/endpoint/loggers/ManagedLoggingSystem.java
Patch:
@@ -26,8 +26,7 @@
  * @author Matthew Moss
  * @since 1.0
  */
-@Deprecated
-public interface LoggingSystem extends io.micronaut.logging.LoggingSystem {
+public interface ManagedLoggingSystem extends io.micronaut.logging.LoggingSystem {
 
     /**
      * Returns all existing loggers.

File: management/src/main/java/io/micronaut/management/endpoint/loggers/impl/DefaultLoggersManager.java
Patch:
@@ -40,7 +40,7 @@ public class DefaultLoggersManager implements LoggersManager<Map<String, Object>
     private static final String LOGGERS = "loggers";
 
     @Override
-    public Publisher<Map<String, Object>> getLoggers(LoggingSystem loggingSystem) {
+    public Publisher<Map<String, Object>> getLoggers(ManagedLoggingSystem loggingSystem) {
         Map<String, Object> data = new LinkedHashMap<>(2);
 
         data.put(LEVELS, getLogLevels());
@@ -50,13 +50,13 @@ public Publisher<Map<String, Object>> getLoggers(LoggingSystem loggingSystem) {
     }
 
     @Override
-    public Publisher<Map<String, Object>> getLogger(LoggingSystem loggingSystem,
+    public Publisher<Map<String, Object>> getLogger(ManagedLoggingSystem loggingSystem,
                                                     String name) {
         return Flowable.just(getLoggerData(loggingSystem.getLogger(name)));
     }
 
     @Override
-    public void setLogLevel(LoggingSystem loggingSystem, @NotBlank String name, io.micronaut.logging.@NotNull LogLevel level) {
+    public void setLogLevel(ManagedLoggingSystem loggingSystem, @NotBlank String name, io.micronaut.logging.@NotNull LogLevel level) {
         loggingSystem.setLogLevel(name, level);
     }
 

File: management/src/main/java/io/micronaut/management/endpoint/loggers/impl/LogbackLoggingSystem.java
Patch:
@@ -24,15 +24,15 @@
 import io.micronaut.logging.LogLevel;
 import io.micronaut.management.endpoint.loggers.LoggerConfiguration;
 import io.micronaut.management.endpoint.loggers.LoggersEndpoint;
-import io.micronaut.management.endpoint.loggers.LoggingSystem;
+import io.micronaut.management.endpoint.loggers.ManagedLoggingSystem;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Singleton;
 import java.util.Collection;
 import java.util.stream.Collectors;
 
 /**
- * An implementation of {@link LoggingSystem} that works with logback.
+ * An implementation of {@link ManagedLoggingSystem} that works with logback.
  *
  * @author Matthew Moss
  * @since 1.0
@@ -41,7 +41,7 @@
 @Requires(beans = LoggersEndpoint.class)
 @Requires(classes = ch.qos.logback.classic.LoggerContext.class)
 @Replaces(io.micronaut.logging.impl.LogbackLoggingSystem.class)
-public class LogbackLoggingSystem implements LoggingSystem, io.micronaut.logging.LoggingSystem {
+public class LogbackLoggingSystem implements ManagedLoggingSystem, io.micronaut.logging.LoggingSystem {
 
     @Override
     @NonNull

File: core/src/main/java/io/micronaut/core/reflect/GenericTypeUtils.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.Arrays;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Optional;
 import java.util.Set;
 
@@ -203,7 +203,7 @@ private static Optional<Class> resolveParameterizedTypeArgument(Type actualTypeA
      * @return All generic interfaces
      */
     private static Set<Type> getAllGenericInterfaces(Class<?> aClass) {
-        Set<Type> interfaces = new HashSet<>();
+        Set<Type> interfaces = new LinkedHashSet<>();
         return populateInterfaces(aClass, interfaces);
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -859,7 +859,7 @@ public Object visitExecutable(ExecutableElement method, Object o) {
                 );
             }
 
-            if (isExecutable) {
+            if (isDeclaredBean && isExecutable) {
                 visitExecutableMethod(method, methodAnnotationMetadata);
             } else if (isConfigurationPropertiesType && !modelUtils.isPrivate(method) && !modelUtils.isStatic(method)) {
                 String methodName = method.getSimpleName().toString();

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -41,6 +41,7 @@
 @WebSocketComponent
 @Introduction(interfaces = WebSocketSessionAware.class)
 @Type(ClientWebSocketInterceptor.class)
+@DefaultScope(Prototype.class)
 public @interface ClientWebSocket {
 
     /**

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketComponent.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.websocket.annotation;
 
 import io.micronaut.context.annotation.AliasFor;
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.websocket.WebSocketVersion;
 
 import java.lang.annotation.Documented;
@@ -35,7 +34,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE})
-@Bean
 public @interface WebSocketComponent {
     /**
      * The default WebSocket URI.

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -41,7 +41,6 @@
 @WebSocketComponent
 @Introduction(interfaces = WebSocketSessionAware.class)
 @Type(ClientWebSocketInterceptor.class)
-@DefaultScope(Prototype.class)
 public @interface ClientWebSocket {
 
     /**

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketComponent.java
Patch:
@@ -35,6 +35,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE})
+@Bean
 public @interface WebSocketComponent {
     /**
      * The default WebSocket URI.

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketComponent.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.websocket.annotation;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.context.annotation.Bean;
 import io.micronaut.websocket.WebSocketVersion;
 
 import java.lang.annotation.Documented;

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketComponent.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.websocket.annotation;
 
 import io.micronaut.context.annotation.AliasFor;
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.websocket.WebSocketVersion;
 
 import java.lang.annotation.Documented;

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -41,6 +41,7 @@
 @WebSocketComponent
 @Introduction(interfaces = WebSocketSessionAware.class)
 @Type(ClientWebSocketInterceptor.class)
+@DefaultScope(Prototype.class)
 public @interface ClientWebSocket {
 
     /**

File: websocket/src/main/java/io/micronaut/websocket/annotation/WebSocketComponent.java
Patch:
@@ -35,7 +35,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE})
-@Bean
 public @interface WebSocketComponent {
     /**
      * The default WebSocket URI.

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/EpollChannelOptionFactory.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.http.netty.channel.EpollAvailabilityCondition;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.epoll.Epoll;
@@ -34,7 +33,6 @@
 @Internal
 @Singleton
 @Requires(classes = Epoll.class, condition = EpollAvailabilityCondition.class)
-@TypeHint(value = EpollChannelOption.class, accessType = TypeHint.AccessType.ALL_DECLARED_FIELDS)
 public class EpollChannelOptionFactory implements ChannelOptionFactory {
 
     static {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/KQueueChannelOptionFactory.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverterRegistrar;
 import io.micronaut.http.netty.channel.KQueueAvailabilityCondition;
@@ -40,7 +39,6 @@
 @Internal
 @Singleton
 @Requires(classes = KQueue.class, condition = KQueueAvailabilityCondition.class)
-@TypeHint(value = KQueueChannelOption.class, accessType = TypeHint.AccessType.ALL_DECLARED_FIELDS)
 public class KQueueChannelOptionFactory implements ChannelOptionFactory, TypeConverterRegistrar {
 
     static {

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/DataCenterInfo.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
+import io.micronaut.core.annotation.ReflectiveAccess;
 
 /**
  * A simple interface for indicating which <em>datacenter</em> a particular instance belongs.
@@ -43,5 +44,6 @@ enum Name {
     /**
      * @return The name
      */
+    @ReflectiveAccess
     Name getName();
 }

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/DataCenterTypeInfoResolver.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
 import com.fasterxml.jackson.databind.type.TypeFactory;
+import io.micronaut.core.annotation.Introspected;
 
 import java.io.IOException;
 
@@ -27,6 +28,7 @@
  *
  * @author Tomasz Bak
  */
+@Introspected
 class DataCenterTypeInfoResolver extends ClassNameIdResolver {
 
     /**

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -43,6 +43,8 @@ public interface VisitorContext extends MutableConvertibleValues<Object>, ClassW
 
     String MICRONAUT_BASE_OPTION_NAME = "micronaut";
     String MICRONAUT_PROCESSING_PROJECT_DIR = "micronaut.processing.project.dir";
+    String MICRONAUT_PROCESSING_GROUP = "micronaut.processing.group";
+    String MICRONAUT_PROCESSING_MODULE = "micronaut.processing.module";
 
     /**
      * Allows printing informational messages.

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.annotation.processing.visitor.LoadedVisitor;
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.annotation.Type;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Generated;
 import io.micronaut.core.annotation.Introspected;

File: http/src/main/java/io/micronaut/http/hateoas/AbstractResource.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.http.annotation.Produces;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashMap;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -93,7 +93,6 @@
 import io.micronaut.inject.qualifiers.Qualifiers;
 import io.micronaut.runtime.http.codec.TextPlainCodec;
 import io.micronaut.scheduling.executor.ExecutorSelector;
-import io.micronaut.scheduling.executor.ThreadSelection;
 import io.micronaut.web.router.*;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;

File: runtime/src/main/java/io/micronaut/scheduling/executor/DefaultExecutorSelector.java
Patch:
@@ -53,6 +53,7 @@ public class DefaultExecutorSelector implements ExecutorSelector {
     /**
      * Default constructor.
      * @param beanLocator The bean locator
+     * @param ioExecutor The IO executor
      */
     protected DefaultExecutorSelector(BeanLocator beanLocator, @javax.inject.Named(TaskExecutors.IO) Provider<ExecutorService> ioExecutor) {
         this.beanLocator = beanLocator;

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java
Patch:
@@ -167,7 +167,7 @@ protected Optional<MutableHttpResponse<?>> handleRequest(HttpRequest request) {
                     if (!isAny(allowedHeaders) && accessControlHeaders.isPresent()) {
                         if (!accessControlHeaders.get().stream()
                             .allMatch(header -> allowedHeaders.stream()
-                                .anyMatch(allowedHeader -> allowedHeader.equals(header.trim())))) {
+                                .anyMatch(allowedHeader -> allowedHeader.equalsIgnoreCase(header.trim())))) {
                             return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));
                         }
                     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -41,6 +41,7 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementScanner8;
+
 import java.util.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookControllerTest.java
Patch:
@@ -59,7 +59,7 @@ public void testPostInvalidFormData() {
         // end::postform[]
 
         thrown.expect(HttpClientResponseException.class);
-        thrown.expectMessage(CoreMatchers.startsWith("Failed to convert argument [pages] for value [notnumber]"));
+        thrown.expectMessage(CoreMatchers.startsWith("Failed to convert argument [book] for value [null] due to: Cannot deserialize value of type `int` from String \"notnumber\""));
 
         HttpResponse<Book> response = call.blockingFirst();
 

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -138,7 +138,7 @@ protected Optional<Object> getValueForArgument(Argument argument, HttpRequest<?>
                     value = bindingResult.get();
                 } else if (bindingResult.isSatisfied() && argument.isNullable()) {
                     value = NullArgument.INSTANCE;
-                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isNullable()) {
+                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isNullable() || conversionContext.hasErrors()) {
                     value = (UnresolvedArgument) () -> {
                         ArgumentBinder.BindingResult result = argumentBinder.bind(conversionContext, request);
                         Optional<ConversionError> lastError = conversionContext.getLastError();

File: http/src/main/java/io/micronaut/http/bind/DefaultRequestBinderRegistry.java
Patch:
@@ -81,7 +81,9 @@ public DefaultRequestBinderRegistry(ConversionService conversionService, Request
 
         byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (RequestArgumentBinder<HttpHeaders>) (argument, source) -> () -> Optional.of(source.getHeaders()));
         byType.put(Argument.of(HttpRequest.class).typeHashCode(), (RequestArgumentBinder<HttpRequest>) (argument, source) -> {
-            Optional<Argument<?>> typeVariable = argument.getFirstTypeVariable().filter(arg -> arg.getType() != Object.class);
+            Optional<Argument<?>> typeVariable = argument.getFirstTypeVariable()
+                    .filter(arg -> arg.getType() != Object.class)
+                    .filter(arg -> arg.getType() != Void.class);
             if (typeVariable.isPresent() && HttpMethod.permitsRequestBody(source.getMethod())) {
                 if (source.getBody().isPresent()) {
                     return () -> Optional.of(new FullHttpRequest(source, typeVariable.get()));

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.ast.groovy.utils.PublicMethodVisitor;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Creator;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.ast.ClassElement;
@@ -46,6 +47,7 @@
  * @author James Kleeh
  * @since 1.0
  */
+@Internal
 public class GroovyClassElement extends AbstractGroovyElement implements ClassElement {
 
     private final ClassNode classNode;
@@ -57,7 +59,7 @@ public class GroovyClassElement extends AbstractGroovyElement implements ClassEl
      * @param classNode          The {@link ClassNode}
      * @param annotationMetadata The annotation metadata
      */
-    GroovyClassElement(SourceUnit sourceUnit, CompilationUnit compilationUnit, ClassNode classNode, AnnotationMetadata annotationMetadata) {
+    public GroovyClassElement(SourceUnit sourceUnit, CompilationUnit compilationUnit, ClassNode classNode, AnnotationMetadata annotationMetadata) {
         this(sourceUnit, compilationUnit, classNode, annotationMetadata, null);
     }
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -182,13 +182,13 @@ public void warn(String message, @Nullable Element element) {
     }
 
     @Override
-    public OutputStream visitClass(String classname) throws IOException {
+    public OutputStream visitClass(String classname, @Nullable Element originatingElement) throws IOException {
         File classesDir = compilationUnit.getConfiguration().getTargetDirectory();
         if (classesDir != null) {
             DirectoryClassWriterOutputVisitor outputVisitor = new DirectoryClassWriterOutputVisitor(
                     classesDir
             );
-            return outputVisitor.visitClass(classname);
+            return outputVisitor.visitClass(classname, originatingElement);
         } else {
             // should only arrive here in testing scenarios
             if (compilationUnit.getClassLoader() instanceof InMemoryByteCodeGroovyClassLoader) {
@@ -207,7 +207,6 @@ public void write(byte[] b) {
                 return new ByteArrayOutputStream(); // in-memory, mock or unit tests situation?
             }
         }
-
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -58,7 +58,8 @@ public class JavaClassElement extends AbstractJavaElement implements ClassElemen
      * @param annotationMetadata The annotation metadata
      * @param visitorContext     The visitor context
      */
-    protected JavaClassElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
+    @Internal
+    public JavaClassElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
         super(classElement, annotationMetadata, visitorContext);
         this.classElement = classElement;
         this.visitorContext = visitorContext;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -188,8 +188,8 @@ private void printMessage(String message, Diagnostic.Kind kind, @Nullable io.mic
     }
 
     @Override
-    public OutputStream visitClass(String classname) throws IOException {
-        return outputVisitor.visitClass(classname);
+    public OutputStream visitClass(String classname, @Nullable io.micronaut.inject.ast.Element originatingElement) throws IOException {
+        return outputVisitor.visitClass(classname, originatingElement);
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -98,6 +98,7 @@ public boolean matches(TypeElement typeElement) {
             return true;
         }
         AnnotationMetadata annotationMetadata = visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement);
+
         return annotationMetadata.hasStereotype(classAnnotation);
     }
 

File: inject-java/src/test/groovy/io/micronaut/support/Parser.java
Patch:
@@ -35,9 +35,7 @@
 import com.sun.source.util.Trees;
 import com.sun.tools.javac.api.JavacTool;
 import com.sun.tools.javac.util.Context;
-import io.micronaut.annotation.processing.PackageConfigurationInjectProcessor;
-import io.micronaut.annotation.processing.BeanDefinitionInjectProcessor;
-import io.micronaut.annotation.processing.TypeElementVisitorProcessor;
+import io.micronaut.annotation.processing.*;
 
 import java.io.File;
 import java.io.IOException;
@@ -125,8 +123,10 @@ public static Iterable<? extends JavaFileObject> generate(JavaFileObject... sour
 
             List<Processor> processors = new ArrayList<>();
             processors.add(new TypeElementVisitorProcessor());
+            processors.add(new AggregatingTypeElementVisitorProcessor());
             processors.add(new PackageConfigurationInjectProcessor());
             processors.add(new BeanDefinitionInjectProcessor());
+            processors.add(new ServiceDescriptionProcessor());
             task.setProcessors(processors);
             task.generate();
 

File: inject-java/src/test/groovy/io/micronaut/visitors/AllElementsVisitor.java
Patch:
@@ -31,7 +31,6 @@ public class AllElementsVisitor implements TypeElementVisitor<Controller, Object
     public static List<ClassElement> VISITED_CLASS_ELEMENTS = new ArrayList<>();
     public static List<MethodElement> VISITED_METHOD_ELEMENTS = new ArrayList<>();
 
-
     @Override
     public void start(VisitorContext visitorContext) {
         VISITED_ELEMENTS.clear();

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -115,6 +115,7 @@ public DefaultEnvironment(@NonNull ApplicationContextConfiguration configuration
             packages.add(aPackage);
         }
 
+        environments.removeAll(specifiedNames);
         environments.addAll(specifiedNames);
 
         this.classLoader = configuration.getClassLoader();

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanPropertyWriter.java
Patch:
@@ -94,7 +94,7 @@ class BeanPropertyWriter extends AbstractClassFileWriter implements Named {
             int index,
             @Nullable AnnotationMetadata annotationMetadata,
             @Nullable Map<String, ClassElement> typeArguments) {
-
+        super(introspectionWriter.getOriginatingElement());
         Type introspectionType = introspectionWriter.getIntrospectionType();
         this.declaringElement = introspectionWriter.getClassElement();
         this.typeElement = typeElement;
@@ -138,7 +138,7 @@ public Type getType() {
 
     @Override
     public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOException {
-        try (OutputStream classOutput = classWriterOutputVisitor.visitClass(getName())) {
+        try (OutputStream classOutput = classWriterOutputVisitor.visitClass(getName(), getOriginatingElement())) {
             startFinalClass(classWriter, type.getInternalName(), TYPE_BEAN_PROPERTY);
 
             writeConstructor();

File: http/src/main/java/io/micronaut/http/bind/DefaultRequestBinderRegistry.java
Patch:
@@ -101,7 +101,9 @@ public DefaultRequestBinderRegistry(ConversionService conversionService, Request
 
         byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (RequestArgumentBinder<HttpHeaders>) (argument, source) -> () -> Optional.of(source.getHeaders()));
         byType.put(Argument.of(HttpRequest.class).typeHashCode(), (RequestArgumentBinder<HttpRequest>) (argument, source) -> {
-            Optional<Argument<?>> typeVariable = argument.getFirstTypeVariable().filter(arg -> arg.getType() != Object.class);
+            Optional<Argument<?>> typeVariable = argument.getFirstTypeVariable()
+                    .filter(arg -> arg.getType() != Object.class)
+                    .filter(arg -> arg.getType() != Void.class);
             if (typeVariable.isPresent() && HttpMethod.permitsRequestBody(source.getMethod())) {
                 if (source.getBody().isPresent()) {
                     return () -> Optional.of(new FullHttpRequest(source, typeVariable.get()));

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -28,6 +28,7 @@
 import io.micronaut.inject.visitor.VisitorContext;
 import io.micronaut.inject.writer.GeneratedFile;
 
+import javax.annotation.processing.SupportedOptions;
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -42,9 +43,10 @@
  * Generates the GraalVM reflect.json file at compilation time.
  *
  * @author graemerocher
+ * @author Iván López
  * @since 1.1
  */
-@Experimental
+@SupportedOptions({VisitorContext.MICRONAUT_PROCESSING_PROJECT_DIR})
 public class GraalTypeElementVisitor implements TypeElementVisitor<Object, Object> {
     /**
      * The position of the visitor.

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -24,7 +24,6 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
-import javax.annotation.processing.SupportedOptions;
 import java.net.URI;
 import java.net.URL;
 import java.nio.file.Path;
@@ -40,7 +39,6 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@SupportedOptions({VisitorContext.MICRONAUT_PROCESSING_PROJECT_DIR})
 public interface VisitorContext extends MutableConvertibleValues<Object>, ClassWriterOutputVisitor {
 
     String MICRONAUT_BASE_OPTION_NAME = "micronaut";

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -268,7 +268,7 @@ private void generateNativeImageProperties(VisitorContext visitorContext) {
                 try (PrintWriter w = new PrintWriter(gf.openWriter())) {
                     w.println("Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json");
                 } catch (IOException e) {
-                    e.printStackTrace();
+                    visitorContext.fail("Error writing " + NATIVE_IMAGE_PROPERTIES + ": " + e.getMessage(), null);
                 }
             });
             final Optional<GeneratedFile> generatedFile = visitorContext.visitMetaInfFile(reflectFile);

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -115,6 +115,7 @@ public DefaultEnvironment(@NonNull ApplicationContextConfiguration configuration
             packages.add(aPackage);
         }
 
+        environments.removeAll(specifiedNames);
         environments.addAll(specifiedNames);
 
         this.classLoader = configuration.getClassLoader();

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -69,7 +69,7 @@ abstract class AbstractInjectAnnotationProcessor extends AbstractProcessor {
     protected AnnotationProcessingOutputVisitor classWriterOutputVisitor;
     protected JavaVisitorContext javaVisitorContext;
     private boolean incremental = false;
-    private Set<String> supportedAnnotationTypes = new HashSet<>(5);
+    private final Set<String> supportedAnnotationTypes = new HashSet<>(5);
 
     @Override
     public SourceVersion getSupportedSourceVersion() {

File: inject/src/main/java/io/micronaut/inject/writer/ClassWriterOutputVisitor.java
Patch:
@@ -36,12 +36,12 @@ public interface ClassWriterOutputVisitor {
      * Visits a new class and returns the output stream with which should be written the bytes of the class to be
      * generated.
      *
+     * Note that this method should only be called from a {@link io.micronaut.inject.visitor.TypeElementVisitor.VisitorKind#AGGREGATING} visitor from within the {@link io.micronaut.inject.visitor.TypeElementVisitor#finish(io.micronaut.inject.visitor.VisitorContext)} method. If the file
+     *
      * @param classname          the fully qualified classname
      * @return the output stream to write to
-     * @deprecated Use {@link #visitClass(String, Element)} instead
      * @throws IOException if an error occurs creating the output stream
      */
-    @Deprecated
     default OutputStream visitClass(String classname) throws IOException {
         return visitClass(classname, null);
     }

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -39,7 +39,6 @@
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.inject.ProxyBeanDefinition;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
-import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.Element;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
 import io.micronaut.inject.writer.AbstractClassFileWriter;

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -21,6 +21,7 @@
 import com.sun.tools.javac.util.Context;
 import io.micronaut.annotation.processing.BeanDefinitionInjectProcessor;
 import io.micronaut.annotation.processing.PackageConfigurationInjectProcessor;
+import io.micronaut.annotation.processing.ServiceDescriptionProcessor;
 import io.micronaut.annotation.processing.TypeElementVisitorProcessor;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -188,6 +189,7 @@ public Iterable<? extends JavaFileObject> generate(JavaFileObject... sources) {
         processors.add(getTypeElementVisitorProcessor());
         processors.add(new PackageConfigurationInjectProcessor());
         processors.add(getBeanDefinitionInjectProcessor());
+        processors.add(new ServiceDescriptionProcessor());
         return processors;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
-import io.micronaut.inject.writer.ClassWriterOutputVisitor;
-
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
@@ -68,7 +66,7 @@ abstract class AbstractInjectAnnotationProcessor extends AbstractProcessor {
     protected GenericUtils genericUtils;
     protected ModelUtils modelUtils;
     protected MutableConvertibleValues<Object> visitorAttributes = new MutableConvertibleValuesMap<>();
-    protected ClassWriterOutputVisitor classWriterOutputVisitor;
+    protected AnnotationProcessingOutputVisitor classWriterOutputVisitor;
     protected JavaVisitorContext javaVisitorContext;
     private boolean incremental = false;
     private Set<String> supportedAnnotationTypes = new HashSet<>(5);

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPackageElement.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 
-import javax.lang.model.element.Element;
 import javax.lang.model.element.PackageElement;
 
 /**
@@ -30,7 +29,7 @@
 @Internal
 public class JavaPackageElement extends AbstractJavaElement {
     /**
-     * @param element            The {@link Element}
+     * @param element            The {@link PackageElement}
      * @param annotationMetadata The Annotation metadata
      * @param visitorContext     The Java visitor context
      */

File: inject-java/src/test/groovy/io/micronaut/support/Parser.java
Patch:
@@ -37,6 +37,7 @@
 import com.sun.tools.javac.util.Context;
 import io.micronaut.annotation.processing.PackageConfigurationInjectProcessor;
 import io.micronaut.annotation.processing.BeanDefinitionInjectProcessor;
+import io.micronaut.annotation.processing.ServiceDescriptionProcessor;
 import io.micronaut.annotation.processing.TypeElementVisitorProcessor;
 
 import java.io.File;
@@ -127,6 +128,7 @@ public static Iterable<? extends JavaFileObject> generate(JavaFileObject... sour
             processors.add(new TypeElementVisitorProcessor());
             processors.add(new PackageConfigurationInjectProcessor());
             processors.add(new BeanDefinitionInjectProcessor());
+            processors.add(new ServiceDescriptionProcessor());
             task.setProcessors(processors);
             task.generate();
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -410,7 +410,7 @@ private void writeIntrospectionReference(ClassWriterOutputVisitor classWriterOut
         classWriterOutputVisitor.visitServiceDescriptor(BeanIntrospectionReference.class, referenceName);
 
         try (OutputStream referenceStream = classWriterOutputVisitor.visitClass(referenceName, getOriginatingElement())) {
-            startPublicFinalClass(referenceWriter, targetClassType.getInternalName(), superType);
+            startService(referenceWriter, BeanIntrospectionReference.class, targetClassType.getInternalName(), superType);
             final ClassWriter classWriter = generateClassBytes(referenceWriter);
             for (GeneratorAdapter generatorAdapter : loadTypeMethods.values()) {
                 generatorAdapter.visitMaxs(1, 1);

File: inject/src/main/java/io/micronaut/inject/writer/BeanConfigurationWriter.java
Patch:
@@ -77,7 +77,7 @@ private ClassWriter generateClassBytes() {
             Class<AbstractBeanConfiguration> superType = AbstractBeanConfiguration.class;
             Type beanConfigurationType = Type.getType(superType);
 
-            startPublicClass(classWriter, configurationClassInternalName, beanConfigurationType);
+            startService(classWriter, BeanConfiguration.class, configurationClassInternalName, beanConfigurationType);
             writeAnnotationMetadataStaticInitializer(classWriter);
 
             writeConstructor(classWriter);

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -125,7 +125,7 @@ private ClassWriter generateClassBytes() {
         ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);
 
         Type superType = Type.getType(AbstractBeanDefinitionReference.class);
-        startPublicClass(classWriter, beanDefinitionClassInternalName, superType);
+        startService(classWriter, BeanDefinitionReference.class, beanDefinitionClassInternalName, superType);
         Type beanDefinitionType = getTypeReference(beanDefinitionName);
         writeAnnotationMetadataStaticInitializer(classWriter);
 

File: inject/src/main/java/io/micronaut/inject/writer/ClassWriterOutputVisitor.java
Patch:
@@ -57,6 +57,7 @@ default OutputStream visitClass(String classname) throws IOException {
      */
     OutputStream visitClass(String classname, @Nullable Element originatingElement) throws IOException;
 
+
     /**
      * Allows adding a class that will be written to the {@code META-INF/services} file under the given type and class
      * name.

File: runtime/src/main/java/io/micronaut/jackson/convert/JsonNodeToObjectConverter.java
Patch:
@@ -69,7 +69,7 @@ public Optional<Object> convert(JsonNode node, Class<Object> targetType, Convers
                 return Optional.of(node.toString());
             } else {
                 Argument<Object> argument = null;
-                if (node instanceof ContainerNode && context instanceof ArgumentConversionContext) {
+                if (node instanceof ContainerNode && context instanceof ArgumentConversionContext && targetType.getTypeParameters().length != 0) {
                     argument = ((ArgumentConversionContext<Object>) context).getArgument();
                 }
                 Object result;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -847,7 +847,7 @@ private boolean isExecutableThroughType(
                 boolean isPublic) {
             return (isExecutableType && (isPublic || (modifiers.isEmpty()) && concreteClass.equals(enclosingElement))) ||
                     annotationMetadataHierarchy.hasDeclaredStereotype(Executable.class) ||
-                    declaredMetadata.hasAnnotation(Executable.class);
+                    declaredMetadata.hasStereotype(Executable.class);
         }
 
         private void visitConfigurationPropertySetter(ExecutableElement method) {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -462,7 +462,7 @@ public boolean isAssignable(String type) {
 
     private MethodNode findConcreteConstructor() {
         List<ConstructorNode> constructors = classNode.getDeclaredConstructors();
-        if (CollectionUtils.isEmpty(constructors)) {
+        if (CollectionUtils.isEmpty(constructors) && !classNode.isAbstract() && !classNode.isEnum()) {
             return new ConstructorNode(Modifier.PUBLIC, new BlockStatement()); // empty default constructor
         }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -246,7 +246,7 @@ protected void accept(DeclaredType type, Element element, Object o) {
                     return null;
                 } else {
                     TypeElement superClass = modelUtils.superClassFor(classElement);
-                    if (superClass != null && !modelUtils.isObjectClass(superClass)) {
+                    if (superClass != null && !modelUtils.isObjectClass(superClass) && !superClass.getQualifiedName().toString().equals("java.lang.Enum")) {
                         superClass.accept(this, o);
                     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -155,7 +155,7 @@ protected boolean isAcceptable(javax.lang.model.element.Element element) {
                 }
                 if (element.getKind() == ElementKind.METHOD && element instanceof ExecutableElement) {
                     Set<Modifier> modifiers = element.getModifiers();
-                    if (modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC) && !modifiers.contains(Modifier.ABSTRACT)) {
+                    if (modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC)) {
                         ExecutableElement executableElement = (ExecutableElement) element;
                         String methodName = executableElement.getSimpleName().toString();
                         if (methodName.contains("$")) {

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -271,7 +271,8 @@ private void processElement(
             Set<AnnotationValue> indexedAnnotations,
             ClassElement ce,
             BeanIntrospectionWriter writer) {
-        if (ce.isAbstract()) {
+        Optional<MethodElement> constructorElement = ce.getPrimaryConstructor();
+        if (ce.isAbstract() && !constructorElement.isPresent()) {
             currentAbstractIntrospection = new AbstractIntrospection(
                     writer,
                     includes,
@@ -283,7 +284,6 @@ private void processElement(
             abstractIntrospections.add(currentAbstractIntrospection);
         } else {
             final List<PropertyElement> beanProperties = ce.getBeanProperties();
-            Optional<MethodElement> constructorElement = ce.getPrimaryConstructor();
 
             final MethodElement constructor = constructorElement.orElse(null);
             process(

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -246,7 +246,7 @@ protected void accept(DeclaredType type, Element element, Object o) {
                     return null;
                 } else {
                     TypeElement superClass = modelUtils.superClassFor(classElement);
-                    if (superClass != null && !modelUtils.isObjectClass(superClass)) {
+                    if (superClass != null && !modelUtils.isObjectClass(superClass) && !superClass.getQualifiedName().toString().equals("java.lang.Enum")) {
                         superClass.accept(this, o);
                     }
 

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookControllerTest.java
Patch:
@@ -59,7 +59,7 @@ public void testPostInvalidFormData() {
         // end::postform[]
 
         thrown.expect(HttpClientResponseException.class);
-        thrown.expectMessage(CoreMatchers.startsWith("Failed to convert argument [pages] for value [notnumber]"));
+        thrown.expectMessage(CoreMatchers.startsWith("Failed to convert argument [book] for value [null] due to: Cannot deserialize value of type `int` from String \"notnumber\""));
 
         HttpResponse<Book> response = call.blockingFirst();
 

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -138,7 +138,7 @@ protected Optional<Object> getValueForArgument(Argument argument, HttpRequest<?>
                     value = bindingResult.get();
                 } else if (bindingResult.isSatisfied() && argument.isNullable()) {
                     value = NullArgument.INSTANCE;
-                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isNullable()) {
+                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isNullable() || conversionContext.hasErrors()) {
                     value = (UnresolvedArgument) () -> {
                         ArgumentBinder.BindingResult result = argumentBinder.bind(conversionContext, request);
                         Optional<ConversionError> lastError = conversionContext.getLastError();

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -462,7 +462,7 @@ public boolean isAssignable(String type) {
 
     private MethodNode findConcreteConstructor() {
         List<ConstructorNode> constructors = classNode.getDeclaredConstructors();
-        if (CollectionUtils.isEmpty(constructors)) {
+        if (CollectionUtils.isEmpty(constructors) && !classNode.isAbstract() && !classNode.isEnum()) {
             return new ConstructorNode(Modifier.PUBLIC, new BlockStatement()); // empty default constructor
         }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -98,6 +98,7 @@ public boolean matches(TypeElement typeElement) {
             return true;
         }
         AnnotationMetadata annotationMetadata = visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement);
+
         return annotationMetadata.hasStereotype(classAnnotation);
     }
 

File: inject-java/src/test/groovy/io/micronaut/visitors/AllElementsVisitor.java
Patch:
@@ -31,7 +31,6 @@ public class AllElementsVisitor implements TypeElementVisitor<Controller, Object
     public static List<ClassElement> VISITED_CLASS_ELEMENTS = new ArrayList<>();
     public static List<MethodElement> VISITED_METHOD_ELEMENTS = new ArrayList<>();
 
-
     @Override
     public void start(VisitorContext visitorContext) {
         VISITED_ELEMENTS.clear();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -155,7 +155,7 @@ protected boolean isAcceptable(javax.lang.model.element.Element element) {
                 }
                 if (element.getKind() == ElementKind.METHOD && element instanceof ExecutableElement) {
                     Set<Modifier> modifiers = element.getModifiers();
-                    if (modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC) && !modifiers.contains(Modifier.ABSTRACT)) {
+                    if (modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC)) {
                         ExecutableElement executableElement = (ExecutableElement) element;
                         String methodName = executableElement.getSimpleName().toString();
                         if (methodName.contains("$")) {

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -271,7 +271,8 @@ private void processElement(
             Set<AnnotationValue> indexedAnnotations,
             ClassElement ce,
             BeanIntrospectionWriter writer) {
-        if (ce.isAbstract()) {
+        Optional<MethodElement> constructorElement = ce.getPrimaryConstructor();
+        if (ce.isAbstract() && !constructorElement.isPresent()) {
             currentAbstractIntrospection = new AbstractIntrospection(
                     writer,
                     includes,
@@ -283,7 +284,6 @@ private void processElement(
             abstractIntrospections.add(currentAbstractIntrospection);
         } else {
             final List<PropertyElement> beanProperties = ce.getBeanProperties();
-            Optional<MethodElement> constructorElement = ce.getPrimaryConstructor();
 
             final MethodElement constructor = constructorElement.orElse(null);
             process(

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -84,7 +84,9 @@ public interface PropertyResolver extends ValueResolver<String> {
      * @param name The name to resolve
      * @return The property entries.
      */
-    @NonNull Collection<String> getPropertyEntries(@NonNull String name);
+    default @NonNull Collection<String> getPropertyEntries(@NonNull String name) {
+        return Collections.emptySet();
+    }
 
     /**
      * <p>Resolve the given property for the given name, type and generic type arguments.</p>

File: http/src/main/java/io/micronaut/http/bind/binders/RequestBeanAnnotationBinder.java
Patch:
@@ -33,7 +33,6 @@
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.RequestBean;
 import io.micronaut.http.bind.RequestBinderRegistry;
 
@@ -117,7 +116,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         }
     }
 
-    public Optional<Object> getBindableResult(HttpRequest<?> source, Argument<Object> argument) {
+    private Optional<Object> getBindableResult(HttpRequest<?> source, Argument<Object> argument) {
         ArgumentConversionContext<Object> conversionContext = ConversionContext.of(
                 argument,
                 source.getLocale().orElse(Locale.getDefault()),

File: discovery-client/src/main/java/io/micronaut/discovery/vault/config/v2/VaultConfigHttpClientV2.java
Patch:
@@ -51,7 +51,7 @@ public interface VaultConfigHttpClientV2 extends VaultConfigHttpClient<VaultResp
      * @param vaultKey          The vault key
      * @return A {@link Publisher} that emits a list of {@link VaultResponseV2}
      */
-    @Get("/v2/{backend}/data/{vaultKey}")
+    @Get("/v1/{backend}/data/{vaultKey}")
     @Produces(single = true)
     @Retryable(
             attempts = "${" + VaultClientDiscoveryConfiguration.PREFIX + ".retry-count:3}",

File: discovery-client/src/test/groovy/io/micronaut/discovery/vault/MockingVaultServerV2Controller.java
Patch:
@@ -39,7 +39,7 @@ public class MockingVaultServerV2Controller {
 
     public static final String ENABLED = "enable.mock.vault-config-v2";
 
-    @Get("/v2/{backend}/data/{vaultKey:.*}")
+    @Get("/v1/{backend}/data/{vaultKey:.*}")
     public Publisher<VaultResponseV2> readConfigurationValuesV2(@Nonnull String backend,
                                                                 @Nonnull String vaultKey) {
         Map<String, Object> properties = new HashMap<>();
@@ -89,4 +89,4 @@ public Publisher<VaultResponseV2> readConfigurationValuesV2(@Nonnull String back
     }
 
 
-}
\ No newline at end of file
+}

File: discovery-client/src/main/java/io/micronaut/discovery/vault/config/v2/VaultConfigHttpClientV2.java
Patch:
@@ -51,7 +51,7 @@ public interface VaultConfigHttpClientV2 extends VaultConfigHttpClient<VaultResp
      * @param vaultKey          The vault key
      * @return A {@link Publisher} that emits a list of {@link VaultResponseV2}
      */
-    @Get("/v2/{backend}/data/{vaultKey}")
+    @Get("/v1/{backend}/data/{vaultKey}")
     @Produces(single = true)
     @Retryable(
             attempts = "${" + VaultClientDiscoveryConfiguration.PREFIX + ".retry-count:3}",

File: discovery-client/src/test/groovy/io/micronaut/discovery/vault/MockingVaultServerV2Controller.java
Patch:
@@ -39,7 +39,7 @@ public class MockingVaultServerV2Controller {
 
     public static final String ENABLED = "enable.mock.vault-config-v2";
 
-    @Get("/v2/{backend}/data/{vaultKey:.*}")
+    @Get("/v1/{backend}/data/{vaultKey:.*}")
     public Publisher<VaultResponseV2> readConfigurationValuesV2(@Nonnull String backend,
                                                                 @Nonnull String vaultKey) {
         Map<String, Object> properties = new HashMap<>();
@@ -89,4 +89,4 @@ public Publisher<VaultResponseV2> readConfigurationValuesV2(@Nonnull String back
     }
 
 
-}
\ No newline at end of file
+}

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1353,13 +1353,13 @@ private Flowable<? extends MutableHttpResponse<?>> buildResultEmitter(
                                     singleResponse = forStatus(routeMatch.getAnnotationMetadata(), HttpStatus.OK)
                                             .header(HttpHeaders.CONTENT_LENGTH, HttpHeaderValues.ZERO);
                                 } else {
-                                    return newNotFoundError(request);
+                                    singleResponse = newNotFoundError(request);
                                 }
                             } else {
                                 if (o instanceof MutableHttpResponse) {
-                                    return (MutableHttpResponse<?>) o;
+                                    singleResponse = (MutableHttpResponse<?>) o;
                                 } else {
-                                    return forStatus(routeMatch.getAnnotationMetadata(), isErrorRoute ? HttpStatus.INTERNAL_SERVER_ERROR : HttpStatus.OK)
+                                    singleResponse = forStatus(routeMatch.getAnnotationMetadata(), isErrorRoute ? HttpStatus.INTERNAL_SERVER_ERROR : HttpStatus.OK)
                                             .body(o);
                                 }
                             }

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -295,6 +295,7 @@ void visitMethodInjectionPoint(Object declaringType,
      * @param genericTypes               The generic types of each argument. Can be null.
      * @param annotationMetadata         The annotation metadata for the method
      * @param isInterface                If the method belongs to an interface
+     * @param isDefault                  If the method is a default method
      * @return The {@link ExecutableMethodWriter}.
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,
@@ -307,7 +308,8 @@ ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                  Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                  Map<String, Map<String, Object>> genericTypes,
                                                  @Nullable AnnotationMetadata annotationMetadata,
-                                                 boolean isInterface);
+                                                 boolean isInterface,
+                                                 boolean isDefault);
 
     /**
      * Visits a field injection point.

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -818,7 +818,8 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                         Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                         Map<String, Map<String, Object>> genericTypes,
                                                         AnnotationMetadata annotationMetadata,
-                                                        boolean isInterface) {
+                                                        boolean isInterface,
+                                                        boolean isDefault) {
 
         DefaultAnnotationMetadata.contributeDefaults(
                 this.annotationMetadata,
@@ -848,6 +849,7 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                 methodExecutorClassName,
                 methodProxyShortName,
                 this.isInterface || isInterface,
+                isDefault,
                 isSuspend,
                 annotationMetadata);
 //        executableMethodWriter.makeStaticInner(beanDefinitionInternalName, (ClassWriter) classWriter);

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -442,6 +442,7 @@ public void visitIntroductionMethod(Object declaringType,
      * @param genericTypes               The generic types of each argument. Can be null.
      * @param annotationMetadata         metadata
      * @param isInterface                If the method is in an interface
+     * @param isDefault                  If the method is a default method
      */
     public void visitAroundMethod(Object declaringType,
                                   Object returnType,
@@ -471,6 +472,7 @@ public void visitAroundMethod(Object declaringType,
                 false, isDefault, isInterface);
     }
 
+    @SuppressWarnings("ParameterNumber")
     private void visitAroundMethod(Object declaringType,
                                    Object returnType,
                                    Object genericReturnType,

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -295,6 +295,7 @@ void visitMethodInjectionPoint(Object declaringType,
      * @param genericTypes               The generic types of each argument. Can be null.
      * @param annotationMetadata         The annotation metadata for the method
      * @param isInterface                If the method belongs to an interface
+     * @param isDefault                  If the method is a default method
      * @return The {@link ExecutableMethodWriter}.
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -79,6 +79,7 @@ public class ExecutableMethodWriter extends AbstractAnnotationMetadataWriter imp
      * @param methodClassName      The method class name
      * @param methodProxyShortName The method proxy short name
      * @param isInterface          Whether is an interface
+     * @param isDefault            Whether the method is a default method
      * @param isSuspend            Whether the method is Kotlin suspend function
      * @param annotationMetadata   The annotation metadata
      */
@@ -110,6 +111,7 @@ public ExecutableMethodWriter(
      * @param methodProxyShortName The method proxy short name
      * @param isInterface          Whether is an interface
      * @param isAbstract           Whether the method is abstract
+     * @param isDefault            Whether the method is a default method
      * @param isSuspend            Whether the method is Kotlin suspend function
      * @param annotationMetadata   The annotation metadata
      */

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -608,7 +608,7 @@ protected void buildInvokeMethod(Type declaringTypeObject, String methodName, Ob
                 bridgeGenerator.loadArg(i);
             }
 
-            bridgeWriter.visitMethodInsn(INVOKESPECIAL, declaringTypeReference.getInternalName(), methodName, overrideDescriptor, interfaceMethod);
+            bridgeWriter.visitMethodInsn(INVOKESPECIAL, declaringTypeReference.getInternalName(), methodName, overrideDescriptor, isDefault);
             pushReturnValue(bridgeWriter, returnType);
             bridgeWriter.visitMaxs(DEFAULT_MAX_STACK, 1);
             bridgeWriter.visitEnd();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -307,7 +307,8 @@ ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                  Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                  Map<String, Map<String, Object>> genericTypes,
                                                  @Nullable AnnotationMetadata annotationMetadata,
-                                                 boolean isInterface);
+                                                 boolean isInterface,
+                                                 boolean isDefault);
 
     /**
      * Visits a field injection point.

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -818,7 +818,8 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                         Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                         Map<String, Map<String, Object>> genericTypes,
                                                         AnnotationMetadata annotationMetadata,
-                                                        boolean isInterface) {
+                                                        boolean isInterface,
+                                                        boolean isDefault) {
 
         DefaultAnnotationMetadata.contributeDefaults(
                 this.annotationMetadata,
@@ -848,6 +849,7 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                 methodExecutorClassName,
                 methodProxyShortName,
                 this.isInterface || isInterface,
+                isDefault,
                 isSuspend,
                 annotationMetadata);
 //        executableMethodWriter.makeStaticInner(beanDefinitionInternalName, (ClassWriter) classWriter);

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -977,7 +977,7 @@ public void visitBeanDefinitionEnd() {
                 proxyConstructorGenerator.loadThis();
                 proxyConstructorGenerator.invokeConstructor(methodType, new Method(CONSTRUCTOR_NAME, getConstructorDescriptor(proxyFullName)));
                 proxyConstructorGenerator.visitInsn(AASTORE);
-                pushResolveInterceptorsCall(proxyConstructorGenerator, i, isIntroduction && executableMethodWriter.isAbstract());
+                pushResolveInterceptorsCall(proxyConstructorGenerator, i, isIntroduction && (executableMethodWriter.isAbstract() || executableMethodWriter.isInterface()));
             }
         }
 

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -137,7 +137,7 @@ public DefaultApplicationContext(@NonNull ApplicationContextConfiguration config
      * @param configuration The application context configuration
      * @return The environment instance
      */
-    protected @NonNull DefaultEnvironment createEnvironment(@NonNull ApplicationContextConfiguration configuration) {
+    protected @NonNull Environment createEnvironment(@NonNull ApplicationContextConfiguration configuration) {
         return new RuntimeConfiguredEnvironment(configuration);
     }
 

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -232,6 +232,9 @@ public BeanDeserializerBuilder updateBuilder(
                 BeanDescription beanDesc,
                 BeanDeserializerBuilder builder) {
 
+            if (builder.getValueInstantiator().getDelegateType(config) != null) {
+                return builder;
+            }
 
             final Class<?> beanClass = beanDesc.getBeanClass();
             final BeanIntrospection<Object> introspection = (BeanIntrospection<Object>) BeanIntrospector.SHARED.findIntrospection(beanClass).orElse(null);

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingServerFilter.java
Patch:
@@ -92,8 +92,6 @@ protected void doOnNext(@Nonnull Object object, @Nonnull Span span) {
                                 new HttpHeadersTextMap(response.getHeaders())
                         );
 
-                        String spanName = resolveSpanName(request);
-                        span.setOperationName(spanName);
                         setResponseTags(request, response, span);
                     }
                 }

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingServerFilter.java
Patch:
@@ -92,8 +92,6 @@ protected void doOnNext(@Nonnull Object object, @Nonnull Span span) {
                                 new HttpHeadersTextMap(response.getHeaders())
                         );
 
-                        String spanName = resolveSpanName(request);
-                        span.setOperationName(spanName);
                         setResponseTags(request, response, span);
                     }
                 }

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -494,6 +494,8 @@ public void visitBeanDefinitionEnd() {
                 isSuperFactory ? TYPE_ABSTRACT_BEAN_DEFINITION.getInternalName() : superType.getInternalName(),
                 interfaceInternalNames);
 
+        classWriter.visitAnnotation(TYPE_GENERATED.getDescriptor(), false);
+
         if (buildMethodVisitor == null) {
             throw new IllegalStateException("At least one call to visitBeanDefinitionConstructor() is required");
         }

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -204,6 +204,8 @@ public void visitMethod(Object declaringType,
             Type.getInternalName(AbstractExecutableMethod.class),
             null);
 
+        classWriter.visitAnnotation(TYPE_GENERATED.getDescriptor(), false);
+
         // initialize and write the annotation metadata
         if (!(annotationMetadata instanceof AnnotationMetadataReference)) {
             writeAnnotationMetadataStaticInitializer(classWriter);

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -514,10 +514,10 @@ private List<HttpFilter> resolveFilters(HttpRequest<?> request, Stream<? extends
                             }
                         }
                         if (entry.hasPatterns()) {
-                            String uriStr = request.getUri().toString();
+                            String path = request.getPath();
                             String[] patterns = entry.getPatterns();
                             for (String pattern : patterns) {
-                                if (Filter.MATCH_ALL_PATTERN.equals(pattern) || PathMatcher.ANT.matches(pattern, uriStr)) {
+                                if (Filter.MATCH_ALL_PATTERN.equals(pattern) || PathMatcher.ANT.matches(pattern, path)) {
                                     return true;
                                 }
                             }

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -514,10 +514,10 @@ private List<HttpFilter> resolveFilters(HttpRequest<?> request, Stream<? extends
                             }
                         }
                         if (entry.hasPatterns()) {
-                            String uriStr = request.getUri().toString();
+                            String path = request.getPath();
                             String[] patterns = entry.getPatterns();
                             for (String pattern : patterns) {
-                                if (Filter.MATCH_ALL_PATTERN.equals(pattern) || PathMatcher.ANT.matches(pattern, uriStr)) {
+                                if (Filter.MATCH_ALL_PATTERN.equals(pattern) || PathMatcher.ANT.matches(pattern, path)) {
                                     return true;
                                 }
                             }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -98,6 +98,7 @@ public boolean matches(TypeElement typeElement) {
             return true;
         }
         AnnotationMetadata annotationMetadata = visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement);
+
         return annotationMetadata.hasStereotype(classAnnotation);
     }
 

File: inject-java/src/test/groovy/io/micronaut/visitors/AllElementsVisitor.java
Patch:
@@ -31,7 +31,6 @@ public class AllElementsVisitor implements TypeElementVisitor<Controller, Object
     public static List<ClassElement> VISITED_CLASS_ELEMENTS = new ArrayList<>();
     public static List<MethodElement> VISITED_METHOD_ELEMENTS = new ArrayList<>();
 
-
     @Override
     public void start(VisitorContext visitorContext) {
         VISITED_ELEMENTS.clear();

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshInterceptor.java
Patch:
@@ -17,7 +17,8 @@
 
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
-
+import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.env.Environment;
 import javax.inject.Singleton;
 import java.util.concurrent.locks.Lock;
 
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Singleton
+@Requires(notEnv = {Environment.FUNCTION, Environment.ANDROID})
 public class RefreshInterceptor implements MethodInterceptor {
 
     private final RefreshScope refreshScope;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -189,7 +189,7 @@ private ByteBuf encodeBodyAsByteBuf(Object body, MediaTypeCodec codec, ChannelHa
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Encoding emitted response object [{}] using codec: {}", body, codec);
             }
-            byteBuf = (ByteBuf) codec.encode(body, new NettyByteBufferFactory(context.alloc())).asNativeBuffer();
+            byteBuf = codec.encode(body, new NettyByteBufferFactory(context.alloc())).asNativeBuffer();
         }
         return byteBuf;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.order.Ordered;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.netty.NettyMutableHttpResponse;
+import io.micronaut.http.MutableHttpResponse;
 import io.netty.channel.ChannelHandlerContext;
 
 /**
@@ -43,7 +43,7 @@ public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
      * @param response The mutable Micronaut response
      * @param context  The channel context
      */
-    void handle(T object, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context);
+    void handle(T object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
 
     /**
      * @param type The type to check

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -57,7 +57,7 @@ public FileTypeHandler(FileTypeHandlerConfiguration configuration) {
 
     @SuppressWarnings("MagicNumber")
     @Override
-    public void handle(Object obj, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context) {
+    public void handle(Object obj, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
         NettyFileCustomizableResponseType type;
         if (obj instanceof File) {
             type = new NettySystemFileCustomizableResponseType((File) obj);

File: http/src/main/java/io/micronaut/http/MutableHttpMessage.java
Patch:
@@ -39,8 +39,9 @@ public interface MutableHttpMessage<B> extends HttpMessage<B> {
      *
      * @param body The body
      * @return This message
+     * @param <T> The new body type
      */
-    MutableHttpMessage<B> body(B body);
+    <T> MutableHttpMessage<T> body(T body);
 
     /**
      * Mutate the headers with the given consumer.

File: http/src/main/java/io/micronaut/http/MutableHttpResponse.java
Patch:
@@ -63,7 +63,7 @@ default MutableHttpResponse<B> cookies(Set<Cookie> cookies) {
      * @return This response object
      */
     @Override
-    MutableHttpResponse<B> body(@Nullable B body);
+    <T> MutableHttpResponse<T> body(@Nullable T body);
 
     /**
      * Sets the response status.

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -179,7 +179,6 @@ private class ElementVisitor extends ElementScanner8<Object, Object> {
         @Override
         public Object visitType(TypeElement classElement, Object o) {
 
-
             for (LoadedVisitor visitor : visitors) {
                 final io.micronaut.inject.ast.Element resultingElement = visitor.visit(classElement, typeAnnotationMetadata);
                 if (resultingElement != null) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -189,7 +189,7 @@ private ByteBuf encodeBodyAsByteBuf(Object body, MediaTypeCodec codec, ChannelHa
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Encoding emitted response object [{}] using codec: {}", body, codec);
             }
-            byteBuf = (ByteBuf) codec.encode(body, new NettyByteBufferFactory(context.alloc())).asNativeBuffer();
+            byteBuf = codec.encode(body, new NettyByteBufferFactory(context.alloc())).asNativeBuffer();
         }
         return byteBuf;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.order.Ordered;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.netty.NettyMutableHttpResponse;
+import io.micronaut.http.MutableHttpResponse;
 import io.netty.channel.ChannelHandlerContext;
 
 /**
@@ -43,7 +43,7 @@ public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
      * @param response The mutable Micronaut response
      * @param context  The channel context
      */
-    void handle(T object, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context);
+    void handle(T object, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context);
 
     /**
      * @param type The type to check

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -57,7 +57,7 @@ public FileTypeHandler(FileTypeHandlerConfiguration configuration) {
 
     @SuppressWarnings("MagicNumber")
     @Override
-    public void handle(Object obj, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context) {
+    public void handle(Object obj, HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
         NettyFileCustomizableResponseType type;
         if (obj instanceof File) {
             type = new NettySystemFileCustomizableResponseType((File) obj);

File: http/src/main/java/io/micronaut/http/MutableHttpMessage.java
Patch:
@@ -39,8 +39,9 @@ public interface MutableHttpMessage<B> extends HttpMessage<B> {
      *
      * @param body The body
      * @return This message
+     * @param <T> The new body type
      */
-    MutableHttpMessage<B> body(B body);
+    <T> MutableHttpMessage<T> body(T body);
 
     /**
      * Mutate the headers with the given consumer.

File: http/src/main/java/io/micronaut/http/MutableHttpResponse.java
Patch:
@@ -63,7 +63,7 @@ default MutableHttpResponse<B> cookies(Set<Cookie> cookies) {
      * @return This response object
      */
     @Override
-    MutableHttpResponse<B> body(@Nullable B body);
+    <T> MutableHttpResponse<T> body(@Nullable T body);
 
     /**
      * Sets the response status.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -26,9 +26,9 @@
 import io.micronaut.http.filter.ServerFilterChain;
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.micronaut.http.bind.RequestBinderRegistry;
+import io.micronaut.http.netty.channel.ChannelPipelineCustomizer;
 import io.micronaut.http.netty.websocket.WebSocketSessionRepository;
 import io.micronaut.http.server.netty.NettyHttpRequest;
-import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.web.router.Router;
 import io.micronaut.web.router.UriRouteMatch;
 import io.micronaut.websocket.CloseReason;
@@ -71,7 +71,7 @@
 @Internal
 public class NettyServerWebSocketUpgradeHandler extends SimpleChannelInboundHandler<NettyHttpRequest<?>> {
 
-    public static final String ID = "websocket-upgrade-handler";
+    public static final String ID = ChannelPipelineCustomizer.HANDLER_WEBSOCKET_UPGRADE;
     public static final String SCHEME_WEBSOCKET = "ws://";
     public static final String SCHEME_SECURE_WEBSOCKET = "wss://";
 
@@ -185,7 +185,7 @@ public Publisher<MutableHttpResponse<?>> proceed(io.micronaut.http.HttpRequest<?
 
                     try {
                         // re-configure the pipeline
-                        pipeline.remove(NettyHttpServer.HTTP_STREAMS_CODEC);
+                        pipeline.remove(ChannelPipelineCustomizer.HANDLER_HTTP_STREAM);
                         pipeline.remove(NettyServerWebSocketUpgradeHandler.this);
                         NettyServerWebSocketHandler webSocketHandler = new NettyServerWebSocketHandler(
                                 webSocketSessionRepository,

File: runtime/src/main/java/io/micronaut/runtime/server/EmbeddedServer.java
Patch:
@@ -59,7 +59,6 @@ default boolean isServer() {
         return true;
     }
 
-
     /**
      * Most servers provide a way to block such that the server doesn't exit, however some require the creation of a keep alive thread.
      *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1375,9 +1375,8 @@ private Flowable<? extends MutableHttpResponse<?>> buildResultEmitter(
                                 routeMatch instanceof MethodBasedRouteMatch &&
                                         isKotlinFunctionReturnTypeUnit(((MethodBasedRouteMatch) routeMatch).getExecutableMethod());
                         final Supplier<CompletableFuture<?>> supplier = ContinuationArgumentBinder.extractContinuationCompletableFutureSupplier(incomingRequest);
-                        Object result = routeMatch.execute();
                         Object suspendedBody;
-                        if (isKotlinCoroutineSuspended(result)) {
+                        if (isKotlinCoroutineSuspended(body)) {
                             if (isKotlinFunctionReturnTypeUnit) {
                                 suspendedBody = Completable.create(emitter -> {
                                     CompletableFuture<?> f = supplier.get();
@@ -1405,7 +1404,7 @@ private Flowable<? extends MutableHttpResponse<?>> buildResultEmitter(
                             if (isKotlinFunctionReturnTypeUnit) {
                                 suspendedBody = Completable.complete();
                             } else {
-                                suspendedBody = Single.just(result);
+                                suspendedBody = Single.just(body);
                             }
                         }
                         outgoingResponse = forStatus(routeMatch.getAnnotationMetadata(), isErrorRoute ? HttpStatus.INTERNAL_SERVER_ERROR : HttpStatus.OK)

File: core/src/main/java/io/micronaut/core/util/AntPathMatcher.java
Patch:
@@ -100,7 +100,7 @@ public boolean matches(String pattern, String source) {
      * <code>false</code> if it didn't
      */
     protected boolean doMatch(String pattern, String path, boolean fullMatch) {
-        if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {
+        if (path == null || pattern == null || path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {
             return false;
         }
 

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -172,7 +172,7 @@ public <T, R> List<UriRouteMatch<T, R>> findAllClosest(@NonNull HttpRequest<?> r
             // take the highest priority accepted type
             final MediaType mediaType = acceptedProducedTypes.iterator().next();
             List<UriRouteMatch<T, R>> mostSpecific = uriRoutes.stream()
-                    .filter(routeMatch -> !routeMatch.doesProduce(mediaType))
+                    .filter(routeMatch -> routeMatch.doesProduce(mediaType))
                     .collect(Collectors.toList());
             if (!mostSpecific.isEmpty() || !acceptedProducedTypes.contains(MediaType.ALL_TYPE)) {
                 uriRoutes = mostSpecific;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -595,7 +595,7 @@ private void filterAndEncodeResponse(
                     mutableHttpResponse.body(),
                     defaultResponseMediaType
             );
-        });
+        }, throwable -> exceptionCaughtInternal(ctx, throwable, nettyHttpRequest, false));
     }
 
     private Optional<? extends FileCustomizableResponseType> matchFile(String path) {

File: discovery-client/src/main/java/io/micronaut/discovery/oraclecloud/vault/config/OracleCloudVaultConfigurationClient.java
Patch:
@@ -95,7 +95,9 @@ public OracleCloudVaultConfigurationClient(OracleCloudVaultClientConfiguration o
             try {
                 provider = new ConfigFileAuthenticationDetailsProvider(oracleCloudVaultClientConfiguration.getPathToConfig(), oracleCloudVaultClientConfiguration.getProfile());
             } catch (IOException e) {
-                e.printStackTrace();
+                if (LOG.isErrorEnabled()) {
+                    LOG.error("An error occurred when attempting to connect with a ConfigFileAuthenticationDetailsProvider: {}", e.getMessage());
+                }
             }
         }
         Region region = Region.fromRegionCodeOrId(oracleCloudVaultClientConfiguration.getRegion());

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupFactory.java
Patch:
@@ -28,6 +28,7 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;
+
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
@@ -106,7 +107,6 @@ public Class<? extends ServerSocketChannel> serverSocketChannelClass(EventLoopGr
         } else {
             return this.defaultFactory.serverSocketChannelClass(configuration);
         }
-
     }
 
     @NonNull
@@ -118,4 +118,5 @@ public Class<? extends SocketChannel> clientSocketChannelClass(@Nullable EventLo
             return this.defaultFactory.clientSocketChannelClass(configuration);
         }
     }
+
 }

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NioEventLoopGroupFactory.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * Factory for NioEventLoopGroup.
- * 
+ *
  * @author croudet
  */
 @Internal
@@ -94,6 +94,7 @@ public EventLoopGroup createEventLoopGroup(@Nullable Integer ioRatio) {
      *
      * @return NioServerSocketChannel.
      */
+    @Override
     public Class<? extends ServerSocketChannel> serverSocketChannelClass() {
         return NioServerSocketChannel.class;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -483,6 +483,7 @@ public int getNumOfThreads() {
         /**
          * @return The I/O ratio to use
          */
+        @Override
         public Optional<Integer> getIoRatio() {
             if (ioRatio != null) {
                 return Optional.of(ioRatio);
@@ -493,6 +494,7 @@ public Optional<Integer> getIoRatio() {
         /**
          * @return The name of the configured executor to use
          */
+        @Override
         public Optional<String> getExecutorName() {
             if (executor != null) {
                 return Optional.of(executor);

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/DefaultChannelOptionFactory.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.netty.channel.ChannelOption;
@@ -34,6 +35,7 @@
 @Internal
 @Requires(missingBeans = { EpollChannelOptionFactory.class, KQueueChannelOptionFactory.class })
 @Singleton
+@TypeHint(value = ChannelOption.class, accessType = TypeHint.AccessType.ALL_DECLARED_FIELDS)
 public class DefaultChannelOptionFactory implements ChannelOptionFactory {
 
     private static Object processChannelOptionValue(Class<? extends ChannelOption> cls, String name, Object value, Environment env) {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/EpollChannelOptionFactory.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.http.netty.channel.EpollAvailabilityCondition;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.epoll.Epoll;
@@ -33,6 +34,7 @@
 @Internal
 @Singleton
 @Requires(classes = Epoll.class, condition = EpollAvailabilityCondition.class)
+@TypeHint(value = EpollChannelOption.class, accessType = TypeHint.AccessType.ALL_DECLARED_FIELDS)
 public class EpollChannelOptionFactory implements ChannelOptionFactory {
 
     static {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/converters/KQueueChannelOptionFactory.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverterRegistrar;
 import io.micronaut.http.netty.channel.KQueueAvailabilityCondition;
@@ -39,6 +40,7 @@
 @Internal
 @Singleton
 @Requires(classes = KQueue.class, condition = KQueueAvailabilityCondition.class)
+@TypeHint(value = KQueueChannelOption.class, accessType = TypeHint.AccessType.ALL_DECLARED_FIELDS)
 public class KQueueChannelOptionFactory implements ChannelOptionFactory, TypeConverterRegistrar {
 
     static {

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupFactory.java
Patch:
@@ -28,6 +28,7 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;
+
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
@@ -106,7 +107,6 @@ public Class<? extends ServerSocketChannel> serverSocketChannelClass(EventLoopGr
         } else {
             return this.defaultFactory.serverSocketChannelClass(configuration);
         }
-
     }
 
     @NonNull
@@ -118,4 +118,5 @@ public Class<? extends SocketChannel> clientSocketChannelClass(@Nullable EventLo
             return this.defaultFactory.clientSocketChannelClass(configuration);
         }
     }
+
 }

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NioEventLoopGroupFactory.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * Factory for NioEventLoopGroup.
- * 
+ *
  * @author croudet
  */
 @Internal
@@ -94,6 +94,7 @@ public EventLoopGroup createEventLoopGroup(@Nullable Integer ioRatio) {
      *
      * @return NioServerSocketChannel.
      */
+    @Override
     public Class<? extends ServerSocketChannel> serverSocketChannelClass() {
         return NioServerSocketChannel.class;
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -483,6 +483,7 @@ public int getNumOfThreads() {
         /**
          * @return The I/O ratio to use
          */
+        @Override
         public Optional<Integer> getIoRatio() {
             if (ioRatio != null) {
                 return Optional.of(ioRatio);
@@ -493,6 +494,7 @@ public Optional<Integer> getIoRatio() {
         /**
          * @return The name of the configured executor to use
          */
+        @Override
         public Optional<String> getExecutorName() {
             if (executor != null) {
                 return Optional.of(executor);

File: discovery-client/src/main/java/io/micronaut/discovery/oraclecloud/vault/config/OracleCloudVaultConfigurationClient.java
Patch:
@@ -79,6 +79,7 @@ public class OracleCloudVaultConfigurationClient implements ConfigurationClient
      * @param oracleCloudVaultClientConfiguration   Oracle CloudVault Client Configuration
      * @param applicationConfiguration              The application configuration
      * @param executorService                       Executor Service
+     * @throws Exception                            If no configuration is provided
      */
     public OracleCloudVaultConfigurationClient(OracleCloudVaultClientConfiguration oracleCloudVaultClientConfiguration,
                                     ApplicationConfiguration applicationConfiguration,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -133,7 +133,7 @@ private HttpContentProcessor<?> resolve(NettyHttpRequest<?> request, boolean raw
         }
     }
 
-    public NettyHttpServerConfiguration getServerConfiguration() {
+    private NettyHttpServerConfiguration getServerConfiguration() {
         NettyHttpServerConfiguration nettyHttpServerConfiguration = this.nettyServerConfiguration;
         if (nettyHttpServerConfiguration == null) {
             synchronized (this) { // double check

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/NettyConverters.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.server.netty.converters;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.convert.TypeConverterRegistrar;
@@ -43,7 +42,6 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
-import java.util.function.Function;
 
 /**
  * Factory for bytebuf related converters.

File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java
Patch:
@@ -898,7 +898,7 @@ protected void registerDefaultConverters() {
                         continue;
                     }
                 }
-                if (!valueType.isInstance(value) || Map.class.isAssignableFrom(valueType) || Collection.class.isAssignableFrom(valueType)) {
+                if (!valueType.isInstance(value) || value instanceof Map || value instanceof Collection) {
                     Optional converted = convert(value, valueType, valContext);
                     if (converted.isPresent()) {
                         value = converted.get();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBinderRegistrar.java
Patch:
@@ -28,6 +28,7 @@
 import io.micronaut.http.server.netty.multipart.MultipartBodyArgumentBinder;
 import io.reactivex.Flowable;
 
+import javax.inject.Provider;
 import javax.inject.Singleton;
 
 /**
@@ -43,7 +44,7 @@ class NettyBinderRegistrar implements BeanCreatedEventListener<RequestBinderRegi
     private final ConversionService<?> conversionService;
     private final HttpContentProcessorResolver httpContentProcessorResolver;
     private final BeanLocator beanLocator;
-    private final HttpServerConfiguration httpServerConfiguration;
+    private final Provider<HttpServerConfiguration> httpServerConfiguration;
 
     /**
      * Default constructor.
@@ -57,7 +58,7 @@ class NettyBinderRegistrar implements BeanCreatedEventListener<RequestBinderRegi
             @Nullable ConversionService<?> conversionService,
             HttpContentProcessorResolver httpContentProcessorResolver,
             BeanLocator beanLocator,
-            HttpServerConfiguration httpServerConfiguration) {
+            Provider<HttpServerConfiguration> httpServerConfiguration) {
         this.conversionService = conversionService == null ? ConversionService.SHARED : conversionService;
         this.httpContentProcessorResolver = httpContentProcessorResolver;
         this.beanLocator = beanLocator;

File: discovery-client/src/main/java/io/micronaut/discovery/client/package-info.java
Patch:
@@ -22,4 +22,4 @@
 @Configuration
 package io.micronaut.discovery.client;
 
-import io.micronaut.context.annotation.Configuration;
\ No newline at end of file
+import io.micronaut.context.annotation.Configuration;

File: discovery-client/src/main/java/io/micronaut/discovery/client/package-info.java
Patch:
@@ -19,4 +19,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.discovery.client;
\ No newline at end of file
+package io.micronaut.discovery.client;

File: management/src/main/java/io/micronaut/management/endpoint/package-info.java
Patch:
@@ -22,4 +22,4 @@
 @Configuration
 package io.micronaut.management.endpoint;
 
-import io.micronaut.context.annotation.Configuration;
\ No newline at end of file
+import io.micronaut.context.annotation.Configuration;

File: inject/src/main/java/io/micronaut/context/AbstractExecutableMethod.java
Patch:
@@ -239,7 +239,7 @@ public Map<String, Argument<?>> getTypeVariables() {
         public Argument asArgument() {
             Collection<Argument<?>> values = getTypeVariables().values();
             final AnnotationMetadata annotationMetadata = getAnnotationMetadata();
-            return Argument.of(getType(), getType().getSimpleName(), annotationMetadata, values.toArray(Argument.ZERO_ARGUMENTS));
+            return Argument.of(getType(), annotationMetadata, values.toArray(Argument.ZERO_ARGUMENTS));
         }
     }
 

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -3106,7 +3106,7 @@ public String getName() {
             if (qualifier instanceof Named) {
                 return ((Named) qualifier).getName();
             }
-            return Primary.class.getSimpleName();
+            return Primary.SIMPLE_NAME;
         }
     }
 

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonMetadataConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public class AmazonMetadataConfiguration implements Toggleable {
      * The default url value.
      */
     @SuppressWarnings("WeakerAccess")
-    public static final String DEFAULT_URL = "http://169.254.169.254/";
+    public static final String DEFAULT_URL = "http://169.254.169.254";
 
     private String url = DEFAULT_URL;
     private String metadataUrl;

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonMetadataConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public class AmazonMetadataConfiguration implements Toggleable {
      * The default url value.
      */
     @SuppressWarnings("WeakerAccess")
-    public static final String DEFAULT_URL = "http://169.254.169.254/";
+    public static final String DEFAULT_URL = "http://169.254.169.254";
 
     private String url = DEFAULT_URL;
     private String metadataUrl;

File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java
Patch:
@@ -898,7 +898,7 @@ protected void registerDefaultConverters() {
                         continue;
                     }
                 }
-                if (!valueType.isInstance(value) || Map.class.isAssignableFrom(valueType)) {
+                if (!valueType.isInstance(value) || Map.class.isAssignableFrom(valueType) || Collection.class.isAssignableFrom(valueType)) {
                     Optional converted = convert(value, valueType, valContext);
                     if (converted.isPresent()) {
                         value = converted.get();

File: multitenancy/src/main/java/io/micronaut/multitenancy/writer/CookieTenantWriterConfigurationProperties.java
Patch:
@@ -20,7 +20,6 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
-import java.time.Duration;
 import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 

File: session/src/main/java/io/micronaut/session/http/HttpSessionConfiguration.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.http.cookie.CookieConfiguration;
 import io.micronaut.http.cookie.SameSite;
 import io.micronaut.session.SessionConfiguration;
-
-import java.time.Duration;
 import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -127,7 +127,7 @@ public HttpClientIntroductionAdvice(
      */
     @Override
     public Object intercept(MethodInvocationContext<Object, Object> context) {
-        if (!context.hasAnnotation(Client.class)) {
+        if (!context.hasStereotype(Client.class)) {
             throw new IllegalStateException("Client advice called from type that is not annotated with @Client: " + context);
         }
 

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1975,7 +1975,7 @@ private void loadContextScopeBean(BeanDefinition beanDefinition) {
                             resolutionContext,
                             beanCandidate,
                             beanCandidate.getBeanType(),
-                            beanCandidate.hasAnnotation(Context.class) ? null : resolveDeclaredQualifier(beanDefinition)
+                            beanCandidate.hasAnnotation(Context.class) ? null : beanDefinition.getDeclaredQualifier()
                     );
                 }
             }

File: router/src/main/java/io/micronaut/web/router/FilterRoute.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.filter.HttpFilter;
+import io.micronaut.http.filter.HttpFilterResolver;
 
 import java.net.URI;
 import java.util.Optional;
@@ -27,7 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface FilterRoute {
+public interface FilterRoute extends HttpFilterResolver.FilterEntry<HttpFilter> {
 
     /**
      * @return The filter for this {@link FilterRoute}

File: router/src/main/java/io/micronaut/web/router/RouteBuilder.java
Patch:
@@ -443,7 +443,6 @@ default UriRoute POST(String uri, ExecutableMethod<?, ?> method) {
         return POST(uri, method.getDeclaringType(), method.getMethodName(), method.getArgumentTypes());
     }
 
-
     /**
      * <p>Route the specified URI template to the specified target.</p>
      * <p>

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -30,7 +30,6 @@
 import io.netty.buffer.ByteBufHolder;
 import org.reactivestreams.Subscription;
 
-import javax.inject.Singleton;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/MultipartBodyArgumentBinder.java
Patch:
@@ -35,8 +35,6 @@
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
-import javax.inject.Singleton;
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicLong;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/NettyBinderRegistrar.java
Patch:
@@ -1,5 +1,6 @@
 package io.micronaut.http.server.netty.binders;
 
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.BeanCreatedEvent;
@@ -38,11 +39,11 @@ class NettyBinderRegistrar implements BeanCreatedEventListener<RequestBinderRegi
      * @param httpServerConfiguration      The server config
      */
     NettyBinderRegistrar(
-            ConversionService<?> conversionService,
+            @Nullable ConversionService<?> conversionService,
             HttpContentProcessorResolver httpContentProcessorResolver,
             BeanLocator beanLocator,
             HttpServerConfiguration httpServerConfiguration) {
-        this.conversionService = conversionService;
+        this.conversionService = conversionService == null ? ConversionService.SHARED : conversionService;
         this.httpContentProcessorResolver = httpContentProcessorResolver;
         this.beanLocator = beanLocator;
         this.httpServerConfiguration = httpServerConfiguration;

File: router/src/main/java/io/micronaut/web/router/FilterRoute.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.filter.HttpFilter;
+import io.micronaut.http.filter.HttpFilterResolver;
 
 import java.net.URI;
 import java.util.Optional;
@@ -27,7 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface FilterRoute {
+public interface FilterRoute extends HttpFilterResolver.FilterEntry<HttpFilter> {
 
     /**
      * @return The filter for this {@link FilterRoute}

File: router/src/main/java/io/micronaut/web/router/RouteBuilder.java
Patch:
@@ -443,7 +443,6 @@ default UriRoute POST(String uri, ExecutableMethod<?, ?> method) {
         return POST(uri, method.getDeclaringType(), method.getMethodName(), method.getArgumentTypes());
     }
 
-
     /**
      * <p>Route the specified URI template to the specified target.</p>
      * <p>

File: inject/src/main/java/io/micronaut/context/ApplicationContextConfiguration.java
Patch:
@@ -82,5 +82,4 @@ default boolean isEnvironmentPropertySource() {
     default @NonNull ClassPathResourceLoader getResourceLoader() {
         return ClassPathResourceLoader.defaultLoader(getClassLoader());
     }
-
 }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -268,6 +268,7 @@ private void handleReadHttpContent(ChannelHandlerContext ctx, HttpContent conten
     public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
         if (ignoreBodyRead) {
             ctx.read();
+            ignoreBodyRead = false;
         } else {
             ctx.fireChannelReadComplete();
         }

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1060,7 +1060,6 @@ protected final Object getValueForConstructorArgument(BeanResolutionContext reso
                 ArgumentConversionContext<?> conversionContext = ConversionContext.of(argument);
                 Optional<?> value = resolveValue(propertyResolver, conversionContext, valAnn.isPresent(), prop);
                 if (argument.getType() == Optional.class) {
-                    path.pop();
                     return resolveOptionalObject(value);
                 } else {
                     // can't use orElseThrow here due to compiler bug

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1075,10 +1075,11 @@ protected final Object getValueForConstructorArgument(BeanResolutionContext reso
                 );
             }
 
-            path.pop();
             return result;
         } catch (NoSuchBeanException | BeanInstantiationException e) {
             throw new DependencyInjectionException(resolutionContext, argument, e);
+        } finally {
+            path.pop();
         }
     }
 

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -141,7 +141,7 @@ public <T> byte[] encode(T object) throws CodecException {
 
     @SuppressWarnings("MagicNumber")
     @Override
-    public <T> ByteBuffer encode(T object, ByteBufferFactory allocator) throws CodecException {
+    public <T, B> ByteBuffer<B> encode(T object, ByteBufferFactory<?, B> allocator) throws CodecException {
         Event<Object> event;
         if (object instanceof Event) {
             event = (Event<Object>) object;

File: runtime/src/main/java/io/micronaut/jackson/codec/JacksonMediaTypeCodec.java
Patch:
@@ -217,7 +217,7 @@ public <T> byte[] encode(T object) throws CodecException {
     }
 
     @Override
-    public <T> ByteBuffer encode(T object, ByteBufferFactory allocator) throws CodecException {
+    public <T, B> ByteBuffer<B> encode(T object, ByteBufferFactory<?, B> allocator) throws CodecException {
         byte[] bytes = encode(object);
         return allocator.copiedBuffer(bytes);
     }

File: runtime/src/main/java/io/micronaut/runtime/http/codec/TextPlainCodec.java
Patch:
@@ -123,7 +123,7 @@ public <T> byte[] encode(T object) throws CodecException {
     }
 
     @Override
-    public <T> ByteBuffer encode(T object, ByteBufferFactory allocator) throws CodecException {
+    public <T, B> ByteBuffer<B> encode(T object, ByteBufferFactory<?, B> allocator) throws CodecException {
         byte[] bytes = encode(object);
         int len = bytes.length;
 

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/AbstractNettyWebSocketHandler.java
Patch:
@@ -459,7 +459,7 @@ private void handleCloseReason(ChannelHandlerContext ctx, CloseReason cr) {
                     }
                 }
             } else {
-                ctx.close();
+                writeCloseFrameAndTerminate(ctx, cr);
             }
         }
     }

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/AbstractNettyWebSocketHandler.java
Patch:
@@ -459,7 +459,7 @@ private void handleCloseReason(ChannelHandlerContext ctx, CloseReason cr) {
                     }
                 }
             } else {
-                ctx.close();
+                writeCloseFrameAndTerminate(ctx, cr);
             }
         }
     }

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -2371,6 +2371,7 @@ protected void initChannel(SocketChannel ch) {
                 });
                 HttpToHttp2ConnectionHandler connectionHandler = builder
                         .build();
+                System.out.println("INIT HTTP/2 channel sslContext = " + sslContext);
                 if (sslContext != null) {
                     configureHttp2Ssl(this, ch, sslContext, host, port, connectionHandler);
                 } else {
@@ -2517,6 +2518,7 @@ private final class Http2SettingsHandler extends SimpleChannelInboundHandler<Htt
         protected void channelRead0(ChannelHandlerContext ctx, Http2Settings msg) {
             promise.setSuccess();
 
+            System.out.println("RECEIVED HTTP/2 settings = " + msg);
             // Only care about the first settings message
             ctx.pipeline().remove(this);
         }
@@ -2552,6 +2554,7 @@ public void channelActive(ChannelHandlerContext ctx) {
             // Done with this handler, remove it from the pipeline.
             final ChannelPipeline pipeline = ctx.pipeline();
 
+            System.out.println("SENDING HTTP2 UPGRADE REQUEST");
             pipeline.addLast(HANDLER_HTTP2_SETTINGS, initializer.settingsHandler);
             DefaultFullHttpRequest upgradeRequest =
                     new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/", Unpooled.EMPTY_BUFFER);
@@ -2563,7 +2566,6 @@ public void channelActive(ChannelHandlerContext ctx) {
                 hostString = remote.getAddress().getHostAddress();
             }
             upgradeRequest.headers().set(HttpHeaderNames.HOST, hostString + ':' + remote.getPort());
-
             ctx.writeAndFlush(upgradeRequest);
 
             ctx.fireChannelActive();

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -2703,7 +2703,6 @@ protected void writeAndClose(Channel channel, ChannelPool channelPool, FlowableE
                         } else {
                             settingsHandler.awaitSettings(10, TimeUnit.SECONDS);
                         }
-                        pipeline.remove(settingsHandler);
                         System.out.println("Settings received, ready to send request");
                     }
                 }

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -532,9 +532,9 @@ public CharSequence subSequence(int start, int end) {
      * @return Whether the media type is text based
      */
     public boolean isTextBased() {
-        boolean matches = textTypePatterns.stream().anyMatch((p) -> p.matcher(name).matches());
+        boolean matches = textTypePatterns.stream().anyMatch(p -> p.matcher(name).matches());
         if (!matches) {
-            matches = subtype.equalsIgnoreCase("json") || subtype.equalsIgnoreCase("xml");
+            matches = subtype.equalsIgnoreCase("json") || subtype.equalsIgnoreCase("xml") || subtype.equalsIgnoreCase("x-yaml");
         }
         return matches;
     }

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -52,6 +52,7 @@
 import io.micronaut.http.filter.ClientFilterChain;
 import io.micronaut.http.filter.HttpClientFilter;
 import io.micronaut.http.multipart.MultipartException;
+import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.micronaut.http.netty.channel.NettyThreadFactory;
 import io.micronaut.http.netty.content.HttpContentUtil;
@@ -2686,9 +2687,9 @@ protected void writeAndClose(Channel channel, ChannelPool channelPool, FlowableE
             ChannelFuture channelFuture;
             if (httpVersion == io.micronaut.http.HttpVersion.HTTP_2_0) {
                 if (sslContext != null && "https".equalsIgnoreCase(scheme)) {
-                    nettyRequest.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), HttpScheme.HTTPS);
+                    nettyRequest.headers().add(AbstractNettyHttpRequest.HTTP2_SCHEME, HttpScheme.HTTPS);
                 } else {
-                    nettyRequest.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), HttpScheme.HTTP);
+                    nettyRequest.headers().add(AbstractNettyHttpRequest.HTTP2_SCHEME, HttpScheme.HTTP);
                 }
                 final UpgradeRequestHandler upgradeRequestHandler = (UpgradeRequestHandler) channel.pipeline().get(HANDLER_HTTP2_UPGRADE_REQUEST);
                 if (upgradeRequestHandler != null) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -30,6 +30,7 @@
 import io.micronaut.discovery.event.ServiceReadyEvent;
 import io.micronaut.http.HttpVersion;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
+import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.channel.*;
 import io.micronaut.http.netty.stream.HttpStreamsServerHandler;
 import io.micronaut.http.netty.websocket.WebSocketSessionRepository;
@@ -784,7 +785,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpMessage msg) throws E
                             // If this handler is hit then no upgrade has been attempted and the client is just talking HTTP.
                             if (msg instanceof HttpRequest) {
                                 HttpRequest req = (HttpRequest) msg;
-                                if (req.headers().contains(NettyHttpRequest.STREAM_ID)) {
+                                if (req.headers().contains(AbstractNettyHttpRequest.STREAM_ID)) {
                                     ChannelPipeline pipeline = ctx.pipeline();
                                     pipeline.remove(this);
                                     ctx.fireChannelRead(ReferenceCountUtil.retain(msg));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -70,6 +70,7 @@
 import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.multipart.PartData;
 import io.micronaut.http.multipart.StreamingFileUpload;
+import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.netty.content.HttpContentUtil;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
@@ -1389,9 +1390,9 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, AtomicRefer
 
             if (isHttp2) {
                 final io.netty.handler.codec.http.HttpHeaders nativeHeaders = nettyHttpRequest.getNativeRequest().headers();
-                final String streamId = nativeHeaders.get(NettyHttpRequest.STREAM_ID);
+                final String streamId = nativeHeaders.get(AbstractNettyHttpRequest.STREAM_ID);
                 if (streamId != null) {
-                    nettyResponse.headers().set(NettyHttpRequest.STREAM_ID, streamId);
+                    nettyResponse.headers().set(AbstractNettyHttpRequest.STREAM_ID, streamId);
                 }
             }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -18,13 +18,13 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
+import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.*;
-import io.netty.handler.codec.http2.HttpConversionUtil;
 import io.netty.handler.stream.ChunkedStream;
 
 import java.io.InputStream;
@@ -98,9 +98,9 @@ public void write(HttpRequest<?> request, MutableHttpResponse<?> response, Chann
             if (isHttp2) {
                 if (request instanceof NettyHttpRequest) {
                     final io.netty.handler.codec.http.HttpHeaders nativeHeaders = ((NettyHttpRequest<?>) request).getNativeRequest().headers();
-                    final String streamId = nativeHeaders.get(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text());
+                    final String streamId = nativeHeaders.get(AbstractNettyHttpRequest.STREAM_ID);
                     if (streamId != null) {
-                        finalResponse.headers().set(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), streamId);
+                        finalResponse.headers().set(AbstractNettyHttpRequest.STREAM_ID, streamId);
                     }
                 }
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
+import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
@@ -32,7 +33,6 @@
 import io.netty.handler.codec.http.HttpChunkedInput;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.LastHttpContent;
-import io.netty.handler.codec.http2.HttpConversionUtil;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.stream.ChunkedFile;
 import org.slf4j.Logger;
@@ -124,9 +124,9 @@ public void write(HttpRequest<?> request, MutableHttpResponse<?> response, Chann
             if (isHttp2) {
                 if (request instanceof NettyHttpRequest) {
                     final io.netty.handler.codec.http.HttpHeaders nativeHeaders = ((NettyHttpRequest<?>) request).getNativeRequest().headers();
-                    final String streamId = nativeHeaders.get(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text());
+                    final String streamId = nativeHeaders.get(AbstractNettyHttpRequest.STREAM_ID);
                     if (streamId != null) {
-                        finalResponse.headers().set(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), streamId);
+                        finalResponse.headers().set(AbstractNettyHttpRequest.STREAM_ID, streamId);
                     }
                 }
             }

File: test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2Application.java
Patch:
@@ -3,7 +3,6 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.runtime.Micronaut;
 import io.micronaut.runtime.server.EmbeddedServer;
-import org.testcontainers.shaded.okhttp3.internal.http2.Http2Connection;
 
 public class Http2Application {
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -113,7 +113,6 @@
 import io.netty.handler.codec.http.multipart.Attribute;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;
-import io.netty.handler.codec.http2.HttpConversionUtil;
 import io.netty.handler.timeout.IdleState;
 import io.netty.handler.timeout.IdleStateEvent;
 import io.reactivex.BackpressureStrategy;
@@ -1390,11 +1389,12 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, AtomicRefer
 
             if (isHttp2) {
                 final io.netty.handler.codec.http.HttpHeaders nativeHeaders = nettyHttpRequest.getNativeRequest().headers();
-                final String streamId = nativeHeaders.get(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text());
+                final String streamId = nativeHeaders.get(NettyHttpRequest.STREAM_ID);
                 if (streamId != null) {
-                    nettyResponse.headers().set(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), streamId);
+                    nettyResponse.headers().set(NettyHttpRequest.STREAM_ID, streamId);
                 }
             }
+
             context.writeAndFlush(nettyResponse)
                    .addListener(future -> {
                        context.read();

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -532,9 +532,9 @@ public CharSequence subSequence(int start, int end) {
      * @return Whether the media type is text based
      */
     public boolean isTextBased() {
-        boolean matches = textTypePatterns.stream().anyMatch((p) -> p.matcher(name).matches());
+        boolean matches = textTypePatterns.stream().anyMatch(p -> p.matcher(name).matches());
         if (!matches) {
-            matches = subtype.equalsIgnoreCase("json") || subtype.equalsIgnoreCase("xml");
+            matches = subtype.equalsIgnoreCase("json") || subtype.equalsIgnoreCase("xml") || subtype.equalsIgnoreCase("x-yaml");
         }
         return matches;
     }

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -35,7 +35,7 @@
 @Internal
 public class DefaultArgument<T> implements Argument<T> {
 
-    static final Set<Class> CONTAINER_TYPES = CollectionUtils.setOf(
+    static final Set<Class<?>> CONTAINER_TYPES = CollectionUtils.setOf(
         List.class,
         Set.class,
         Map.class,

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -20,6 +20,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 
+import javax.inject.Singleton;
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -43,6 +45,7 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      * @return client object
      */
     @Requires(beans = AWSLambdaConfiguration.class)
+    @Singleton
     AWSLambdaAsync awsLambdaAsyncClient() {
         AWSLambdaAsyncClientBuilder builder = configuration.getBuilder();
         return builder.build();

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -45,6 +45,7 @@
  */
 @ConfigurationProperties(AWSLambdaConfiguration.PREFIX)
 @Requires(classes = AWSLambdaAsyncClientBuilder.class)
+@Requires(property = AWSLambdaConfiguration.PREFIX)
 public class AWSLambdaConfiguration {
 
     /**

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -159,7 +159,7 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
                                     }
                                 } else {
                                     route.body(method.getArgumentNames()[0])
-                                            .acceptAll();
+                                            .consumesAll();
                                 }
                             }
                         }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -528,7 +528,7 @@ protected void doOnComplete() {
             } else {
                 BlockingHttpClient blockingHttpClient = httpClient.toBlocking();
 
-                if (void.class != javaReturnType) {
+                if (void.class != javaReturnType && httpMethod != HttpMethod.HEAD) {
                     request.accept(acceptTypes);
                 }
 

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1932,6 +1932,9 @@ public void handlerRemoved(ChannelHandlerContext ctx) {
                     } else {
                         channelPool.release(ch);
                     }
+                } else {
+                    // just close it to prevent any future reads without a handler registered
+                    ctx.close();
                 }
             }
 

File: router/src/main/java/io/micronaut/web/router/ErrorRoute.java
Patch:
@@ -66,4 +66,7 @@ public interface ErrorRoute extends MethodBasedRoute {
 
     @Override
     ErrorRoute where(Predicate<HttpRequest<?>> condition);
+
+    @Override
+    ErrorRoute produces(MediaType... mediaType);
 }

File: router/src/main/java/io/micronaut/web/router/UriRoute.java
Patch:
@@ -79,7 +79,7 @@ default Optional<UriRouteMatch> match(URI uri) {
     UriRoute produces(MediaType... mediaType);
 
     @Override
-    UriRoute acceptAll();
+    UriRoute consumesAll();
 
     @Override
     UriRoute where(Predicate<HttpRequest<?>> condition);

File: test-suite/src/test/java/io/micronaut/docs/client/upload/MultipartFileUploadSpec.java
Patch:
@@ -148,7 +148,7 @@ public void  testMultipartFileRequestByteArrayWithoutContentType() {
     @Controller("/multipart")
     static class MultipartController {
 
-        @Post(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA)
+        @Post(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)
         HttpResponse<String> upload(byte[] data) {
             return HttpResponse.ok("Uploaded " + data.length + " bytes");
         }

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloClient.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.server.intro;
 
 // tag::imports[]
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.client.annotation.Client;
 import io.reactivex.Single;
@@ -29,7 +30,7 @@
 @Client("/hello") // <1>
 public interface HelloClient {
 
-    @Get // <2>
+    @Get(consumes = MediaType.TEXT_PLAIN) // <2>
     Single<String> hello(); // <3>
 }
 // end::class[]
\ No newline at end of file

File: test-suite/src/test/java/io/micronaut/docs/server/sse/HeadlineController.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.server.sse;
 
 // tag::imports[]
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.*;
 import io.micronaut.http.sse.Event;
 import io.micronaut.scheduling.TaskExecutors;
@@ -28,8 +29,8 @@
 @Controller("/headlines")
 public class HeadlineController {
 
-    @Get
     @ScheduleOn(TaskExecutors.IO)
+    @Get(produces = MediaType.TEXT_EVENT_STREAM)
     public Publisher<Event<Headline>> index() { // <1>
         String[] versions = new String[]{"1.0", "2.0"}; // <2>
 

File: test-suite/src/test/java/io/micronaut/docs/server/sse/HeadlineControllerSpec.java
Patch:
@@ -38,7 +38,8 @@ public void testConsumeEventStreamObject() {
 
         List<Event<Headline>> events = new ArrayList<>();
 
-        client.eventStream(HttpRequest.GET("/headlines"), Headline.class).subscribe(events::add);
+        client.eventStream(HttpRequest.GET("/headlines"), Headline.class)
+                .subscribe(events::add);
 
         await().until(() -> events.size() == 2);
         assertEquals("Micronaut 1.0 Released", events.get(0).getData().getTitle());

File: test-suite/src/test/java/io/micronaut/docs/server/upload/BytesUploadController.java
Patch:
@@ -30,7 +30,9 @@
 @Controller("/upload")
 public class BytesUploadController {
 
-    @Post(value = "/bytes", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/bytes",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public HttpResponse<String> uploadBytes(byte[] file, String fileName) { // <2>
         try {
             File tempFile = File.createTempFile(fileName, "temp");

File: test-suite/src/test/java/io/micronaut/docs/server/upload/CompletedUploadController.java
Patch:
@@ -31,7 +31,9 @@
 @Controller("/upload")
 public class CompletedUploadController {
 
-    @Post(value = "/completed", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/completed",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public HttpResponse<String> uploadCompleted(CompletedFileUpload file) { // <2>
         try {
             File tempFile = File.createTempFile(file.getFilename(), "temp"); //<3>

File: test-suite/src/test/java/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -30,7 +30,7 @@
 @Controller("/upload")
 public class UploadController {
 
-    @Post(value = "/", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN) // <1>
     public Single<HttpResponse<String>> upload(StreamingFileUpload file) { // <2>
         File tempFile;
         try {

File: test-suite/src/test/java/io/micronaut/docs/server/upload/WholeBodyUploadController.java
Patch:
@@ -30,7 +30,9 @@
 @Controller("/upload")
 public class WholeBodyUploadController {
 
-    @Post(value = "/whole-body", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/whole-body",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public Single<String> uploadBytes(@Body MultipartBody body) { // <2>
         return Single.create(emitter -> {
             body.subscribe(new Subscriber<CompletedPart>() {

File: http/src/main/java/io/micronaut/http/HttpResponseFactory.java
Patch:
@@ -24,7 +24,7 @@
 public interface HttpResponseFactory {
 
     /**
-     * The default {@link io.micronaut.http.cookie.CookieFactory} instance.
+     * The default {@link HttpResponseFactory} instance.
      */
     HttpResponseFactory INSTANCE = DefaultHttpFactories.resolveDefaultResponseFactory();
 

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.web.router;
 
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.bind.ArgumentBinder;
 import io.micronaut.core.bind.annotation.Bindable;

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -65,7 +65,8 @@ abstract class AbstractRouteMatch<T, R> implements MethodBasedRouteMatch<T, R> {
      */
     protected AbstractRouteMatch(DefaultRouteBuilder.AbstractRoute abstractRoute, ConversionService<?> conversionService) {
         this.abstractRoute = abstractRoute;
-        this.executableMethod = abstractRoute.targetMethod;
+        //noinspection unchecked
+        this.executableMethod = (MethodExecutionHandle<T, R>) abstractRoute.targetMethod;
         this.conversionService = conversionService;
         Argument[] requiredArguments = executableMethod.getArguments();
         this.requiredInputs = new LinkedHashMap<>(requiredArguments.length);

File: router/src/main/java/io/micronaut/web/router/ErrorRoute.java
Patch:
@@ -66,4 +66,7 @@ public interface ErrorRoute extends MethodBasedRoute {
 
     @Override
     ErrorRoute where(Predicate<HttpRequest<?>> condition);
+
+    @Override
+    ErrorRoute produces(MediaType... mediaType);
 }

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -35,7 +35,7 @@
 @Internal
 public class DefaultArgument<T> implements Argument<T> {
 
-    static final Set<Class> CONTAINER_TYPES = CollectionUtils.setOf(
+    static final Set<Class<?>> CONTAINER_TYPES = CollectionUtils.setOf(
         List.class,
         Set.class,
         Map.class,

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -159,7 +159,7 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
                                     }
                                 } else {
                                     route.body(method.getArgumentNames()[0])
-                                            .acceptAll();
+                                            .consumesAll();
                                 }
                             }
                         }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -528,7 +528,7 @@ protected void doOnComplete() {
             } else {
                 BlockingHttpClient blockingHttpClient = httpClient.toBlocking();
 
-                if (void.class != javaReturnType) {
+                if (void.class != javaReturnType && httpMethod != HttpMethod.HEAD) {
                     request.accept(acceptTypes);
                 }
 

File: http-client/src/main/java/io/micronaut/http/client/netty/DefaultHttpClient.java
Patch:
@@ -1932,6 +1932,9 @@ public void handlerRemoved(ChannelHandlerContext ctx) {
                     } else {
                         channelPool.release(ch);
                     }
+                } else {
+                    // just close it to prevent any future reads without a handler registered
+                    ctx.close();
                 }
             }
 

File: router/src/main/java/io/micronaut/web/router/UriRoute.java
Patch:
@@ -79,7 +79,7 @@ default Optional<UriRouteMatch> match(URI uri) {
     UriRoute produces(MediaType... mediaType);
 
     @Override
-    UriRoute acceptAll();
+    UriRoute consumesAll();
 
     @Override
     UriRoute where(Predicate<HttpRequest<?>> condition);

File: test-suite/src/test/java/io/micronaut/docs/client/upload/MultipartFileUploadSpec.java
Patch:
@@ -148,7 +148,7 @@ public void  testMultipartFileRequestByteArrayWithoutContentType() {
     @Controller("/multipart")
     static class MultipartController {
 
-        @Post(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA)
+        @Post(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)
         HttpResponse<String> upload(byte[] data) {
             return HttpResponse.ok("Uploaded " + data.length + " bytes");
         }

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloClient.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.server.intro;
 
 // tag::imports[]
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.client.annotation.Client;
 import io.reactivex.Single;
@@ -29,7 +30,7 @@
 @Client("/hello") // <1>
 public interface HelloClient {
 
-    @Get // <2>
+    @Get(consumes = MediaType.TEXT_PLAIN) // <2>
     Single<String> hello(); // <3>
 }
 // end::class[]
\ No newline at end of file

File: test-suite/src/test/java/io/micronaut/docs/server/sse/HeadlineController.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.server.sse;
 
 // tag::imports[]
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.*;
 import io.micronaut.http.sse.Event;
 import io.micronaut.scheduling.TaskExecutors;
@@ -28,8 +29,8 @@
 @Controller("/headlines")
 public class HeadlineController {
 
-    @Get
     @ScheduleOn(TaskExecutors.IO)
+    @Get(produces = MediaType.TEXT_EVENT_STREAM)
     public Publisher<Event<Headline>> index() { // <1>
         String[] versions = new String[]{"1.0", "2.0"}; // <2>
 

File: test-suite/src/test/java/io/micronaut/docs/server/sse/HeadlineControllerSpec.java
Patch:
@@ -38,7 +38,8 @@ public void testConsumeEventStreamObject() {
 
         List<Event<Headline>> events = new ArrayList<>();
 
-        client.eventStream(HttpRequest.GET("/headlines"), Headline.class).subscribe(events::add);
+        client.eventStream(HttpRequest.GET("/headlines"), Headline.class)
+                .subscribe(events::add);
 
         await().until(() -> events.size() == 2);
         assertEquals("Micronaut 1.0 Released", events.get(0).getData().getTitle());

File: test-suite/src/test/java/io/micronaut/docs/server/upload/BytesUploadController.java
Patch:
@@ -30,7 +30,9 @@
 @Controller("/upload")
 public class BytesUploadController {
 
-    @Post(value = "/bytes", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/bytes",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public HttpResponse<String> uploadBytes(byte[] file, String fileName) { // <2>
         try {
             File tempFile = File.createTempFile(fileName, "temp");

File: test-suite/src/test/java/io/micronaut/docs/server/upload/CompletedUploadController.java
Patch:
@@ -31,7 +31,9 @@
 @Controller("/upload")
 public class CompletedUploadController {
 
-    @Post(value = "/completed", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/completed",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public HttpResponse<String> uploadCompleted(CompletedFileUpload file) { // <2>
         try {
             File tempFile = File.createTempFile(file.getFilename(), "temp"); //<3>

File: test-suite/src/test/java/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -30,7 +30,7 @@
 @Controller("/upload")
 public class UploadController {
 
-    @Post(value = "/", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN) // <1>
     public Single<HttpResponse<String>> upload(StreamingFileUpload file) { // <2>
         File tempFile;
         try {

File: test-suite/src/test/java/io/micronaut/docs/server/upload/WholeBodyUploadController.java
Patch:
@@ -30,7 +30,9 @@
 @Controller("/upload")
 public class WholeBodyUploadController {
 
-    @Post(value = "/whole-body", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/whole-body",
+            consumes = MediaType.MULTIPART_FORM_DATA,
+            produces = MediaType.TEXT_PLAIN) // <1>
     public Single<String> uploadBytes(@Body MultipartBody body) { // <2>
         return Single.create(emitter -> {
             body.subscribe(new Subscriber<CompletedPart>() {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1448,7 +1448,7 @@ private Flowable<?> buildResultEmitter(
                         final RouteMatch<?> routeMatch = !finalRoute.isExecutable() ? requestArgumentSatisfier.fulfillArgumentRequirements(finalRoute, requestReference.get(), true) : finalRoute;
                         Object result = routeMatch.execute();
                         MutableHttpResponse<Object> chunkedResponse = HttpResponse.ok(result);
-                        chunkedResponse.header(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+                        chunkedResponse.getHeaders().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
                         emitter.onNext(chunkedResponse);
                         emitter.onComplete();
                         // should be no back pressure
@@ -1686,8 +1686,8 @@ public HttpContent apply(Object message) {
 
         DelegateStreamedHttpResponse streamedResponse = new DelegateStreamedHttpResponse(nativeResponse, httpContentPublisher);
         io.netty.handler.codec.http.HttpHeaders headers = streamedResponse.headers();
-        headers.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
-        headers.add(HttpHeaderNames.CONTENT_TYPE, mediaType);
+        headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+        headers.set(HttpHeaderNames.CONTENT_TYPE, mediaType);
         context.writeAndFlush(streamedResponse);
         context.read();
     }

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -45,6 +45,7 @@
  */
 @ConfigurationProperties(AWSLambdaConfiguration.PREFIX)
 @Requires(classes = AWSLambdaAsyncClientBuilder.class)
+@Requires(property = AWSLambdaConfiguration.PREFIX)
 public class AWSLambdaConfiguration {
 
     /**

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -20,6 +20,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 
+import javax.inject.Singleton;
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -43,6 +45,7 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      * @return client object
      */
     @Requires(beans = AWSLambdaConfiguration.class)
+    @Singleton
     AWSLambdaAsync awsLambdaAsyncClient() {
         AWSLambdaAsyncClientBuilder builder = configuration.getBuilder();
         return builder.build();

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/event/WatchEventType.java
Patch:
@@ -49,9 +49,9 @@ public static WatchEventType of(WatchEvent.Kind kind) {
         if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
             return CREATE;
         } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
-            return CREATE;
+            return MODIFY;
         } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
-            return CREATE;
+            return DELETE;
         } else {
             throw new IllegalArgumentException("Unsupported watch event kind: " + kind);
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1441,7 +1441,7 @@ private Flowable<?> buildResultEmitter(
                         final RouteMatch<?> routeMatch = !finalRoute.isExecutable() ? requestArgumentSatisfier.fulfillArgumentRequirements(finalRoute, requestReference.get(), true) : finalRoute;
                         Object result = routeMatch.execute();
                         MutableHttpResponse<Object> chunkedResponse = HttpResponse.ok(result);
-                        chunkedResponse.header(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+                        chunkedResponse.getHeaders().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
                         emitter.onNext(chunkedResponse);
                         emitter.onComplete();
                         // should be no back pressure
@@ -1677,8 +1677,8 @@ public HttpContent apply(Object message) {
 
         DelegateStreamedHttpResponse streamedResponse = new DelegateStreamedHttpResponse(nativeResponse, httpContentPublisher);
         io.netty.handler.codec.http.HttpHeaders headers = streamedResponse.headers();
-        headers.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
-        headers.add(HttpHeaderNames.CONTENT_TYPE, mediaType);
+        headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+        headers.set(HttpHeaderNames.CONTENT_TYPE, mediaType);
         context.writeAndFlush(streamedResponse);
         context.read();
     }

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -45,6 +45,7 @@
  */
 @ConfigurationProperties(AWSLambdaConfiguration.PREFIX)
 @Requires(classes = AWSLambdaAsyncClientBuilder.class)
+@Requires(property = AWSLambdaConfiguration.PREFIX)
 public class AWSLambdaConfiguration {
 
     /**

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -20,6 +20,8 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 
+import javax.inject.Singleton;
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -43,6 +45,7 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      * @return client object
      */
     @Requires(beans = AWSLambdaConfiguration.class)
+    @Singleton
     AWSLambdaAsync awsLambdaAsyncClient() {
         AWSLambdaAsyncClientBuilder builder = configuration.getBuilder();
         return builder.build();

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.management.endpoint;
 
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;

File: http-server/src/main/java/io/micronaut/http/server/context/ServerRequestContextInstrumentation.java
Patch:
@@ -51,9 +51,9 @@ public void beforeInvocation() {
             }
 
             @Override
-            public void afterInvocation() {
-                if (isSet) {
-                    ServerRequestContext.set(currentRequest);
+            public void afterInvocation(boolean cleanup) {
+                if (isSet || cleanup) {
+                    ServerRequestContext.set(cleanup ? null : currentRequest);
                     isSet = false;
                 }
             }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedCompletable.java
Patch:
@@ -50,7 +50,7 @@ protected void subscribeActual(CompletableObserver o) {
             instrumenter.beforeInvocation();
             source.subscribe(o);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedConnectableFlowable.java
Patch:
@@ -53,7 +53,7 @@ protected void subscribeActual(Subscriber<? super T> s) {
             instrumenter.beforeInvocation();
             source.subscribe(s);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 
@@ -63,7 +63,7 @@ public void connect(Consumer<? super Disposable> connection) {
             instrumenter.beforeInvocation();
             source.connect(connection);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedConnectableObservable.java
Patch:
@@ -53,7 +53,7 @@ protected void subscribeActual(Observer<? super T> o) {
             instrumenter.beforeInvocation();
             source.subscribe(o);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 
@@ -63,7 +63,7 @@ public void connect(Consumer<? super Disposable> connection) {
             instrumenter.beforeInvocation();
             source.connect(connection);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedFlowable.java
Patch:
@@ -57,7 +57,7 @@ protected void subscribeActual(Subscriber<? super T> s) {
             instrumenter.beforeInvocation();
             source.subscribe(s);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedMaybe.java
Patch:
@@ -52,7 +52,7 @@ protected void subscribeActual(MaybeObserver<? super T> o) {
             instrumenter.beforeInvocation();
             source.subscribe(o);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedObservable.java
Patch:
@@ -52,7 +52,7 @@ protected void subscribeActual(Observer<? super T> o) {
             instrumenter.beforeInvocation();
             source.subscribe(o);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedParallelFlowable.java
Patch:
@@ -68,7 +68,7 @@ public void subscribe(Subscriber<? super T>[] s) {
                 instrumenter.beforeInvocation();
                 source.subscribe(parents);
             } finally {
-                instrumenter.afterInvocation();
+                instrumenter.afterInvocation(false);
             }
         } else {
             source.subscribe(s);

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/RxInstrumentedSingle.java
Patch:
@@ -51,7 +51,7 @@ protected void subscribeActual(SingleObserver<? super T> o) {
             instrumenter.beforeInvocation();
             source.subscribe(o);
         } finally {
-            instrumenter.afterInvocation();
+            instrumenter.afterInvocation(false);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/scheduling/instrument/InvocationInstrumenterWrappedCallable.java
Patch:
@@ -54,7 +54,7 @@ public V call() throws Exception {
             invocationInstrumenter.beforeInvocation();
             return callable.call();
         } finally {
-            invocationInstrumenter.afterInvocation();
+            invocationInstrumenter.afterInvocation(true);
         }
     }
 

File: runtime/src/main/java/io/micronaut/scheduling/instrument/InvocationInstrumenterWrappedRunnable.java
Patch:
@@ -47,7 +47,7 @@ public void run() {
             invocationInstrumenter.beforeInvocation();
             runnable.run();
         } finally {
-            invocationInstrumenter.afterInvocation();
+            invocationInstrumenter.afterInvocation(true);
         }
     }
 }

File: runtime/src/main/java/io/micronaut/scheduling/instrument/MultipleInvocationInstrumenter.java
Patch:
@@ -59,12 +59,13 @@ public void beforeInvocation() {
 
     /**
      * Invokes afterInvocation for multiple instrumenters.
+     * @param cleanup Whether to cleanup
      */
     @Override
-    public void afterInvocation() {
+    public void afterInvocation(boolean cleanup) {
         while (!executedInstrumenters.isEmpty()) {
             try {
-                executedInstrumenters.pop().afterInvocation();
+                executedInstrumenters.pop().afterInvocation(cleanup);
             } catch (Exception e) {
                 LOG.warn("After instrumentation invocation error: {}", e.getMessage(), e);
             }

File: tracing/src/main/java/io/micronaut/tracing/brave/BraveTracingInvocationInstrumenter.java
Patch:
@@ -67,7 +67,7 @@ public void beforeInvocation() {
                 }
 
                 @Override
-                public void afterInvocation() {
+                public void afterInvocation(boolean cleanup) {
                     activeScope.close();
                 }
 

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava1TracingInstrumentation.java
Patch:
@@ -79,7 +79,7 @@ public Action0 call(Action0 action0) {
                         instrumenter.beforeInvocation();
                         action0.call();
                     } finally {
-                        instrumenter.afterInvocation();
+                        instrumenter.afterInvocation(false);
                     }
                 };
             } else {

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/MdcInstrumenter.java
Patch:
@@ -56,7 +56,7 @@ public void beforeInvocation() {
                 }
 
                 @Override
-                public void afterInvocation() {
+                public void afterInvocation(boolean cleanup) {
                     if (oldContextMap != null && !oldContextMap.isEmpty()) {
                         MDC.setContextMap(oldContextMap);
                     } else {

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/OpenTracingInvocationInstrumenter.java
Patch:
@@ -68,7 +68,7 @@ public void beforeInvocation() {
                 }
 
                 @Override
-                public void afterInvocation() {
+                public void afterInvocation(boolean cleanup) {
                     activeScope.close();
                 }
 

File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java
Patch:
@@ -33,7 +33,7 @@ class DefaultArgumentConversionContext<T> implements ArgumentConversionContext<T
     private final Argument<T> argument;
     private final Locale finalLocale;
     private final Charset finalCharset;
-    private final List<ConversionError> conversionErrors = new ArrayList<>();
+    private final List<ConversionError> conversionErrors = new ArrayList<>(3);
 
     /**
      * @param argument     The argument

File: discovery-client/src/main/java/io/micronaut/discovery/vault/config/VaultConfigurationClient.java
Patch:
@@ -98,11 +98,11 @@ public Publisher<PropertySource> getPropertySources(Environment environment) {
 
         Scheduler scheduler = executorService != null ? Schedulers.from(executorService) : null;
 
-        buildVaultKeys(applicationName, activeNames).entrySet().forEach(entry -> {
+        buildVaultKeys(applicationName, activeNames).forEach((key, value) -> {
             Flowable<PropertySource> propertySourceFlowable = Flowable.fromPublisher(
-                    configHttpClient.readConfigurationValues(token, engine, entry.getValue()))
+                    configHttpClient.readConfigurationValues(token, engine, value))
                     .filter(data -> !data.getSecrets().isEmpty())
-                    .map(data -> PropertySource.of(entry.getValue(), data.getSecrets(), entry.getKey()))
+                    .map(data -> PropertySource.of(value, data.getSecrets(), key))
                     .onErrorResumeNext(throwable -> {
                         //TODO: Discover why the below hack is necessary
                         Throwable t = (Throwable) throwable;

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -122,7 +122,7 @@ public class HttpServerConfiguration implements ServerContextPathProvider {
 
     private final ApplicationConfiguration applicationConfiguration;
     private Charset defaultCharset;
-    private ThreadSelection threadSelection = ThreadSelection.AUTO;
+    private ThreadSelection threadSelection = ThreadSelection.MANUAL;
 
     /**
      * Default constructor.

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -79,7 +79,7 @@ public RouteMatch<?> fulfillArgumentRequirements(RouteMatch<?> route, HttpReques
             // no required arguments so just execute
             argumentValues = Collections.emptyMap();
         } else {
-            argumentValues = new LinkedHashMap<>();
+            argumentValues = new LinkedHashMap<>(requiredArguments.size());
             // Begin try fulfilling the argument requirements
             for (Argument argument : requiredArguments) {
                 getValueForArgument(argument, request, satisfyOptionals).ifPresent((value) ->

File: runtime/src/main/java/io/micronaut/scheduling/executor/ExecutorSelector.java
Patch:
@@ -32,8 +32,9 @@ public interface ExecutorSelector {
      * Select an {@link ExecutorService} for the given {@link MethodReference}.
      *
      * @param method The {@link MethodReference}
+     * @param threadSelection The thread selection mode
      * @return An optional {@link ExecutorService}. If an {@link ExecutorService} cannot be established
      * {@link Optional#empty()} is returned
      */
-    Optional<ExecutorService> select(MethodReference method);
+    Optional<ExecutorService> select(MethodReference method, ThreadSelection threadSelection);
 }

File: test-suite/src/test/java/io/micronaut/docs/server/sse/HeadlineController.java
Patch:
@@ -18,6 +18,8 @@
 // tag::imports[]
 import io.micronaut.http.annotation.*;
 import io.micronaut.http.sse.Event;
+import io.micronaut.scheduling.TaskExecutors;
+import io.micronaut.scheduling.annotation.ScheduleOn;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 // end::imports[]
@@ -27,6 +29,7 @@
 public class HeadlineController {
 
     @Get
+    @ScheduleOn(TaskExecutors.IO)
     public Publisher<Event<Headline>> index() { // <1>
         String[] versions = new String[]{"1.0", "2.0"}; // <2>
 

File: validation/src/test/groovy/io/micronaut/validation/validator/pojo/NameAndLastNameValidator.java
Patch:
@@ -25,5 +25,5 @@
 @Target(ElementType.TYPE)
 @Constraint(validatedBy = {})
 @interface NameAndLastNameValidator {
-    String message() default "Both name and lastName can't be null";
-}
\ No newline at end of file
+    String message() default "Both name and lastName can''t be null";
+}

File: http/src/main/java/io/micronaut/http/uri/DefaultUriBuilder.java
Patch:
@@ -255,7 +255,7 @@ public UriBuilder replaceQueryParam(String name, Object... values) {
         return this;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public URI build() {
         try {

File: http/src/main/java/io/micronaut/http/uri/UriBuilder.java
Patch:
@@ -103,7 +103,7 @@ public interface UriBuilder {
      * @param values The values
      * @return This builder
      */
-    @Nonnull UriBuilder replaceQueryParam(String name, Object...values);
+    @NonNull UriBuilder replaceQueryParam(String name, Object...values);
 
     /**
      * The constructed URI.

File: inject/src/main/java/io/micronaut/context/DefaultMessageContext.java
Patch:
@@ -65,7 +65,7 @@ public Locale getLocale() {
      * @param defaultLocale The locale to use if no locale is present
      * @return The locale
      */
-    @Nonnull
+    @NonNull
     public Locale getLocale(@Nullable Locale defaultLocale) {
         if (locale != null) {
             return locale;

File: inject/src/main/java/io/micronaut/context/MessageSource.java
Patch:
@@ -119,7 +119,7 @@ interface MessageContext {
          * @param defaultLocale The locale to use if no locale is present
          * @return The locale
          */
-        @Nonnull default Locale getLocale(@Nullable Locale defaultLocale) {
+        @NonNull default Locale getLocale(@Nullable Locale defaultLocale) {
             return defaultLocale != null ? defaultLocale : getLocale();
         }
 

File: inject/src/main/java/io/micronaut/context/i18n/ResourceBundleMessageSource.java
Patch:
@@ -76,7 +76,7 @@ public ResourceBundleMessageSource(@NonNull String baseName, @Nullable Locale de
 
     @NonNull
     @Override
-    public Optional<String> getMessage(@Nonnull String code, @Nonnull MessageContext context) {
+    public Optional<String> getMessage(@NonNull String code, @NonNull MessageContext context) {
         final Locale locale = defaultBundle != null ? context.getLocale(defaultBundle.getLocale()) : context.getLocale();
         MessageKey messageKey = new MessageKey(locale, code);
         Optional<String> opt = messageCache.get(messageKey);

File: inject/src/main/java/io/micronaut/context/i18n/ResourceBundleMessageSource.java
Patch:
@@ -77,7 +77,7 @@ public ResourceBundleMessageSource(@Nonnull String baseName, @Nullable Locale de
     @Nonnull
     @Override
     public Optional<String> getMessage(@Nonnull String code, @Nonnull MessageContext context) {
-        final Locale locale = context.getLocale();
+        final Locale locale = defaultBundle != null ? context.getLocale(defaultBundle.getLocale()) : context.getLocale();
         MessageKey messageKey = new MessageKey(locale, code);
         Optional<String> opt = messageCache.get(messageKey);
         //noinspection OptionalAssignedToNull

File: http-netty/src/main/java/io/micronaut/http/netty/AbstractNettyHttpRequest.java
Patch:
@@ -178,7 +178,7 @@ private String decodePath(String uri) {
 
     private NettyHttpParameters decodeParameters(String uri) {
         QueryStringDecoder queryStringDecoder = createDecoder(uri);
-        return new NettyHttpParameters(queryStringDecoder.parameters(), conversionService);
+        return new NettyHttpParameters(queryStringDecoder.parameters(), conversionService, null);
     }
 
     @Override

File: runtime/src/main/java/io/micronaut/cache/CacheConfiguration.java
Patch:
@@ -173,7 +173,7 @@ public void setExpireAfterAccess(Duration expireAfterAccess) {
     }
 
     /**
-     * Set whether record stats is enabled. Default value ({@value #DEFAULT_RECORD_STATS}).
+     * Set whether record stats is enabled. Default value ({@value io.micronaut.cache.CacheConfiguration#DEFAULT_RECORD_STATS}).
      *
      * @param recordStats True if record status is enabled
      */
@@ -199,7 +199,7 @@ public boolean isTestMode() {
     }
 
     /**
-     * Set whether test mode is enabled. Default value ({@value #DEFAULT_TESTMODE}).
+     * Set whether test mode is enabled. Default value ({@value io.micronaut.cache.CacheConfiguration#DEFAULT_TESTMODE}).
      *
      * @param testMode True if test mode is eanbled
      */

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.async.publisher.Publishers;
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -139,6 +139,7 @@ private Object resolveValue(ArgumentConversionContext<T> context, ConvertibleVal
     protected BindingResult<T> doConvert(Object value, ArgumentConversionContext<T> context) {
         return doConvert(value, context, BindingResult.EMPTY);
     }
+
     /**
      * Convert the value and return a binding result.
      *

File: http/src/main/java/io/micronaut/http/bind/binders/ParameterAnnotationBinder.java
Patch:
@@ -102,8 +102,9 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         }
         Optional<T> val = result.getValue();
         if (!val.isPresent() && !hasAnnotation) {
-            // try attribute
-            result = doBind(context, source.getAttributes(), parameterName);
+            // attributes are sometimes added by filters, so this should return unsatisfied if not found
+            // so it can be picked up after the filters are executed
+            result = doBind(context, source.getAttributes(), parameterName, BindingResult.UNSATISFIED);
         }
 
         Class argumentType;

File: http/src/main/java/io/micronaut/http/bind/binders/RequestAttributeAnnotationBinder.java
Patch:
@@ -53,7 +53,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> argument, HttpRequest<
         MutableConvertibleValues<Object> parameters = source.getAttributes();
         AnnotationMetadata annotationMetadata = argument.getAnnotationMetadata();
         String parameterName = annotationMetadata.stringValue(RequestAttribute.class).orElse(argument.getArgument().getName());
-        return doBind(argument, parameters, parameterName);
+        return doBind(argument, parameters, parameterName, BindingResult.UNSATISFIED);
     }
 
     @Override

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -125,6 +125,7 @@ public class ClassUtils {
         COMMON_CLASS_MAP.put(Float.class.getName(), Float.class);
         COMMON_CLASS_MAP.put(Character.class.getName(), Character.class);
         COMMON_CLASS_MAP.put(String.class.getName(), String.class);
+        COMMON_CLASS_MAP.put(CharSequence.class.getName(), CharSequence.class);
 
         BASIC_TYPE_MAP.put(UUID.class.getName(), UUID.class);
         BASIC_TYPE_MAP.put(BigDecimal.class.getName(), BigDecimal.class);

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/WebSocketMessageEncoder.java
Patch:
@@ -59,7 +59,7 @@ public WebSocketMessageEncoder(MediaTypeCodecRegistry codecRegistry) {
     public WebSocketFrame encodeMessage(Object message, MediaType mediaType) {
         if (message instanceof byte[]) {
             return new BinaryWebSocketFrame(Unpooled.wrappedBuffer((byte[]) message));
-        } else if (ClassUtils.isJavaLangType(message.getClass())) {
+        } else if (ClassUtils.isJavaLangType(message.getClass()) || message instanceof CharSequence) {
             String s = message.toString();
             return new TextWebSocketFrame(s);
         } else if (message instanceof ByteBuf) {

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -33,6 +33,7 @@
 import io.micronaut.http.netty.NettyHttpHeaders;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
+import io.netty.buffer.ByteBufUtil;
 import io.netty.handler.codec.http.FullHttpResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -244,6 +245,8 @@ private <T> Optional convertByteBuf(ByteBuf content, Argument<T> type) {
             if (CharSequence.class.isAssignableFrom(type.getType())) {
                 Charset charset = getContentType().flatMap(MediaType::getCharset).orElse(StandardCharsets.UTF_8);
                 return Optional.of(content.toString(charset));
+            } else if (type.getType() == byte[].class) {
+                return Optional.of(ByteBufUtil.getBytes(content));
             } else {
                 Optional<MediaTypeCodec> foundCodec = mediaTypeCodecRegistry.findCodec(contentType.get());
                 if (foundCodec.isPresent()) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2041,7 +2041,7 @@ private <T> T getBeanInternal(
             if (concreteCandidate.isPresent()) {
                 BeanDefinition<T> definition = concreteCandidate.get();
 
-                bean = findExistingCompatibleSingleton(beanType, qualifier, definition);
+                bean = findExistingCompatibleSingleton(definition.getBeanType(), qualifier, definition);
                 if (bean != null) {
                     if (LOG.isDebugEnabled()) {
                         LOG.debug("Resolved existing bean [{}] for type [{}] and qualifier [{}]", bean, beanType, qualifier);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -29,6 +29,7 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.convert.TypeConverterRegistrar;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
+import io.micronaut.core.io.ResourceLoader;
 import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.io.service.ServiceDefinition;
 import io.micronaut.core.io.service.SoftServiceLoader;
@@ -121,6 +122,7 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
     private final ClassLoader classLoader;
     private final Set<Class> thisInterfaces = ReflectionUtils.getAllInterfaces(getClass());
     private final Set<Class> indexedTypes = CollectionUtils.setOf(
+            ResourceLoader.class,
             TypeConverter.class,
             TypeConverterRegistrar.class,
             ApplicationEventListener.class,

File: core/src/main/java/io/micronaut/core/io/ResourceLoader.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.core.io;
 
+import io.micronaut.core.annotation.Indexed;
+
 import java.io.InputStream;
 import java.net.URL;
 import java.util.Optional;
@@ -26,6 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Indexed(ResourceLoader.class)
 public interface ResourceLoader {
 
     /**

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -38,7 +38,7 @@
     /**
      * @return The map transformation to apply
      */
-    MapTransformation transformation() default MapTransformation.FLAT;
+    MapTransformation transformation() default MapTransformation.NESTED;
 
     /**
      * @return The key format to apply to keys

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.context.env;
 
-import io.micronaut.context.annotation.Property;
 import io.micronaut.context.exceptions.ConfigurationException;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.convert.ArgumentConversionContext;
@@ -408,7 +407,7 @@ protected Map<String, Object> resolveSubMap(String name, Map<String, Object> ent
                 MapFormat.class,
                 "transformation",
                 MapFormat.MapTransformation.class)
-                .orElse(conversionContext.isAnnotationPresent(Property.class) ? MapFormat.MapTransformation.FLAT : MapFormat.MapTransformation.NESTED);
+                .orElse(MapFormat.MapTransformation.NESTED);
         return resolveSubMap(name, entries, conversionContext, keyConvention, transformation);
     }
 

File: http/src/main/java/io/micronaut/http/uri/DefaultUriBuilder.java
Patch:
@@ -346,10 +346,10 @@ private String buildQueryParams(Map<String, ? super Object> values) {
             StringBuilder builder = new StringBuilder();
             final Iterator<String> nameIterator = queryParams.names().iterator();
             while (nameIterator.hasNext()) {
-                String name = nameIterator.next();
-                name = expandOrEncode(name, values);
+                String rawName = nameIterator.next();
+                String name = expandOrEncode(rawName, values);
 
-                final Iterator<String> i = queryParams.getAll(name).iterator();
+                final Iterator<String> i = queryParams.getAll(rawName).iterator();
                 while (i.hasNext()) {
                     String v = expandOrEncode(i.next(), values);
                     builder.append(name).append('=').append(v);

File: runtime/src/main/java/io/micronaut/health/HeartbeatEnabled.java
Patch:
@@ -28,10 +28,10 @@
  * @author graemerocher
  * @since 1.1
  */
+@Requires(notEnv = {Environment.ANDROID, Environment.FUNCTION})
 @Requires(property = ApplicationConfiguration.APPLICATION_NAME)
 @Requires(condition = HeartbeatDiscoveryClientCondition.class)
 @Requires(beans = EmbeddedServer.class)
-@Requires(notEnv = {Environment.ANDROID, Environment.FUNCTION})
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD})

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -264,7 +264,7 @@ protected boolean isAcceptable(MethodNode node) {
                             boolean validModifiers = node.isPublic() && !node.isStatic() && !node.isSynthetic() && !node.isAbstract();
                             if (validModifiers) {
                                 String methodName = node.getName();
-                                if (methodName.contains("$")) {
+                                if (methodName.contains("$") || methodName.equals("getMetaClass")) {
                                     return false;
                                 }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -838,7 +838,7 @@ public Object visitExecutable(ExecutableElement method, Object o) {
             boolean isExecutable =
                     !hasInvalidModifiers &&
                             (isExecutableThroughType(method.getEnclosingElement(), methodAnnotationMetadata, annotationMetadata, modifiers, isPublic) ||
-                                annotationMetadata.hasStereotype(AROUND_TYPE));
+                                    annotationMetadata.hasStereotype(AROUND_TYPE));
 
 
             boolean hasConstraints = false;
@@ -880,7 +880,7 @@ private boolean isExecutableThroughType(
                 AnnotationMetadata declaredMetadata, Set<Modifier> modifiers,
                 boolean isPublic) {
             return (isExecutableType && (isPublic || (modifiers.isEmpty()) && concreteClass.equals(enclosingElement))) ||
-                    annotationMetadataHierarchy.hasStereotype(Executable.class) ||
+                    annotationMetadataHierarchy.hasDeclaredStereotype(Executable.class) ||
                     declaredMetadata.hasAnnotation(Executable.class);
         }
 

File: http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupRegistry.java
Patch:
@@ -84,7 +84,7 @@ protected EventLoopGroup eventLoopGroup(EventLoopGroupConfiguration configuratio
     }
 
     /**
-     * Constructs an event loop group for each configuration.
+     * Constructs an event loop group with default Configuration.
      *
      * @return The event loop group
      */

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -294,6 +294,7 @@ void visitMethodInjectionPoint(Object declaringType,
      * @param argumentAnnotationMetadata The argument annotation metadata
      * @param genericTypes               The generic types of each argument. Can be null.
      * @param annotationMetadata         The annotation metadata for the method
+     * @param isInterface                If the method belongs to an interface
      * @return The {@link ExecutableMethodWriter}.
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,
@@ -305,7 +306,8 @@ ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                  Map<String, Object> genericArgumentTypes,
                                                  Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                  Map<String, Map<String, Object>> genericTypes,
-                                                 @Nullable AnnotationMetadata annotationMetadata);
+                                                 @Nullable AnnotationMetadata annotationMetadata,
+                                                 boolean isInterface);
 
     /**
      * Visits a field injection point.

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -817,7 +817,8 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                         Map<String, Object> genericArgumentTypes,
                                                         Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                         Map<String, Map<String, Object>> genericTypes,
-                                                        AnnotationMetadata annotationMetadata) {
+                                                        AnnotationMetadata annotationMetadata,
+                                                        boolean isInterface) {
 
         DefaultAnnotationMetadata.contributeDefaults(
                 this.annotationMetadata,
@@ -846,7 +847,7 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                 beanFullClassName,
                 methodExecutorClassName,
                 methodProxyShortName,
-                isInterface,
+                this.isInterface || isInterface,
                 isSuspend,
                 annotationMetadata);
 //        executableMethodWriter.makeStaticInner(beanDefinitionInternalName, (ClassWriter) classWriter);

File: http-client-core/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -230,6 +230,6 @@ default HttpClient refresh() {
      * @return The client
      */
     static HttpClient create(URL url) {
-        return new DefaultHttpClient(url);
+        return HttpClientConfiguration.createClient(url);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -31,7 +31,7 @@
  */
 public interface RxHttpClient extends HttpClient {
 
-    @Override
+       @Override
     default <I, O> Flowable<HttpResponse<O>> exchange(HttpRequest<I> request, Argument<O> bodyType) {
         return Flowable.fromPublisher(HttpClient.super.exchange(request, bodyType));
     }
@@ -104,6 +104,6 @@ default Flowable<String> retrieve(String uri) {
      * @return The client
      */
     static RxHttpClient create(URL url) {
-        return new DefaultHttpClient(url);
+        return HttpClientConfiguration.createClient(url);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/RxStreamingHttpClient.java
Patch:
@@ -57,6 +57,6 @@ default <I, O> Flowable<O> jsonStream(HttpRequest<I> request, Class<O> type) {
      * @return The client
      */
     static RxStreamingHttpClient create(URL url) {
-        return new DefaultHttpClient(url);
+        return HttpClientConfiguration.createStreamingClient(url);
     }
 }

File: http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -83,7 +83,7 @@
 @BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object> {
 
-    private static final Logger LOG = LoggerFactory.getLogger(DefaultHttpClient.class);
+    private static final Logger LOG = LoggerFactory.getLogger(RxHttpClient.class);
 
     /**
      * The default Accept-Types.

File: http-client-core/src/main/java/io/micronaut/http/client/loadbalance/LoadBalancerConverters.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.converters;
+package io.micronaut.http.client.loadbalance;
 
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;

File: http-client/src/main/java/io/micronaut/http/client/netty/ConnectTTLHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import io.netty.channel.ChannelDuplexHandler;
 import io.netty.channel.ChannelHandlerContext;

File: http-client/src/main/java/io/micronaut/http/client/netty/FullNettyClientHttpResponse.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.subscriber.Completable;
@@ -44,7 +44,7 @@
 import java.util.Optional;
 
 /**
- * Wraps a Netty {@link FullHttpResponse} for consumption by the {@link HttpClient}.
+ * Wraps a Netty {@link FullHttpResponse} for consumption by the {@link io.micronaut.http.client.HttpClient}.
  *
  * @param <B> The response type
  * @author Graeme Rocher

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionContext;
@@ -45,7 +45,7 @@
 import java.util.Set;
 
 /**
- * Default implementation of {@link MutableHttpRequest} for the {@link HttpClient}.
+ * Default implementation of {@link MutableHttpRequest} for the {@link io.micronaut.http.client.HttpClient}.
  *
  * @param <B> The request body
  * @author Graeme Rocher

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyClientHttpRequestFactory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.beans.BeanMap;

File: http-client/src/main/java/io/micronaut/http/client/netty/NettyStreamedHttpResponse.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import io.micronaut.http.netty.stream.StreamedHttpResponse;
 import io.micronaut.core.annotation.Internal;

File: http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;
 
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -31,10 +31,11 @@
 import io.micronaut.http.annotation.FilterMatcher;
 import io.micronaut.http.bind.DefaultRequestBinderRegistry;
 import io.micronaut.http.bind.RequestBinderRegistry;
+import io.micronaut.http.client.*;
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.exceptions.HttpClientException;
 import io.micronaut.http.client.filter.HttpClientFilterResolver;
-import io.micronaut.http.client.ssl.NettyClientSslBuilder;
+import io.micronaut.http.client.netty.ssl.NettyClientSslBuilder;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.http.codec.MediaTypeCodec;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;

File: http-client/src/main/java/io/micronaut/http/client/netty/converters/ClientResponseConverter.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.converters;
+package io.micronaut.http.client.netty.converters;
 
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;
-import io.micronaut.http.client.FullNettyClientHttpResponse;
+import io.micronaut.http.client.netty.FullNettyClientHttpResponse;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 
 import javax.inject.Singleton;

File: http-client/src/main/java/io/micronaut/http/client/netty/converters/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * Client scope.
+ * HTTP Client response converters.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.client.scope;
+package io.micronaut.http.client.netty.converters;

File: http-client/src/main/java/io/micronaut/http/client/netty/package-info.java
Patch:
@@ -19,4 +19,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.client;
+package io.micronaut.http.client.netty;

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/NettyClientSslBuilder.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.ssl;
+package io.micronaut.http.client.netty.ssl;
 
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;

File: http-client/src/main/java/io/micronaut/http/client/netty/ssl/package-info.java
Patch:
@@ -19,4 +19,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.client.ssl;
+package io.micronaut.http.client.netty.ssl;

File: http-client/src/main/java/io/micronaut/http/client/netty/websocket/NettyWebSocketClientHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.websocket;
+package io.micronaut.http.client.netty.websocket;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.async.publisher.Publishers;

File: http-client/src/main/java/io/micronaut/http/client/netty/websocket/package-info.java
Patch:
@@ -19,4 +19,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.http.client.websocket;
+package io.micronaut.http.client.netty.websocket;

File: http-client/src/test/groovy/io/micronaut/http/client/HttpGetTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
+import io.micronaut.http.client.netty.DefaultHttpClient;
 import io.reactivex.Flowable;
 import static org.junit.Assert.*;
 

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSender.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MutableHttpRequest;
 import io.micronaut.http.client.*;
+import io.micronaut.http.client.netty.DefaultHttpClient;
 import io.micronaut.tracing.brave.ZipkinServiceInstanceList;
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -83,6 +83,7 @@ protected final void doOnNext(ByteBufHolder message) {
     /**
      * @param receivedLength The length of the content received
      * @param expected The expected length of the content
+     * @param message The message to release
      */
     protected void fireExceedsLength(long receivedLength, long expected, ByteBufHolder message) {
         try {

File: http-client/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -25,20 +25,18 @@
 import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
 
-import javax.inject.Scope;
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 
 /**
- * A custom {@link Scope} for injecting {@link io.micronaut.http.client.HttpClient} implementations.
+ * Allows defining declarative HTTP clients and customizing injection for injecting {@link io.micronaut.http.client.HttpClient} implementations.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 @Documented
 @Retention(RUNTIME)
-@Scope
 @Introduction
 @Type(HttpClientIntroductionAdvice.class)
 @Recoverable

File: http-netty/src/main/java/io/micronaut/http/netty/channel/EpollAvailabilityCondition.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty;
+package io.micronaut.http.netty.channel;
 
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;

File: http-netty/src/main/java/io/micronaut/http/netty/channel/KQueueAvailabilityCondition.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.server.netty;
+package io.micronaut.http.netty.channel;
 
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1060,6 +1060,7 @@ protected final Object getValueForConstructorArgument(BeanResolutionContext reso
                 ArgumentConversionContext<?> conversionContext = ConversionContext.of(argument);
                 Optional<?> value = resolveValue(propertyResolver, conversionContext, valAnn.isPresent(), prop);
                 if (argument.getType() == Optional.class) {
+                    path.pop();
                     return resolveOptionalObject(value);
                 } else {
                     // can't use orElseThrow here due to compiler bug
@@ -1610,7 +1611,8 @@ private Object getBeanForMethodArgument(BeanResolutionContext resolutionContext,
             path.pushMethodArgumentResolve(this, injectionPoint, argument);
             try {
                 Qualifier qualifier = resolveQualifier(resolutionContext, argument);
-                @SuppressWarnings("unchecked") Object bean = ((DefaultBeanContext) context).getBean(resolutionContext, argumentType, qualifier);
+                @SuppressWarnings("unchecked")
+                Object bean = ((DefaultBeanContext) context).getBean(resolutionContext, argumentType, qualifier);
                 path.pop();
                 return bean;
             } catch (NoSuchBeanException e) {

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -404,8 +404,8 @@ public MediaType(String name, String extension, Map<String, String> params) {
             throw new IllegalArgumentException("Argument [name] cannot be null");
         }
         String withoutArgs;
+        this.parameters = new LinkedHashMap<>();
         if (name.contains(SEMICOLON)) {
-            this.parameters = new LinkedHashMap<>();
             String[] tokenWithArgs = name.split(SEMICOLON);
             withoutArgs = tokenWithArgs[0];
             String[] paramsList = Arrays.copyOfRange(tokenWithArgs, 1, tokenWithArgs.length);
@@ -416,7 +416,6 @@ public MediaType(String name, String extension, Map<String, String> params) {
                 }
             }
         } else {
-            this.parameters = Collections.emptyMap();
             withoutArgs = name;
         }
         this.name = withoutArgs;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -50,7 +50,6 @@
 import io.micronaut.http.client.filter.HttpClientFilterResolver;
 import io.micronaut.http.client.interceptor.configuration.ClientVersioningConfiguration;
 import io.micronaut.http.client.loadbalance.FixedLoadBalancer;
-import io.micronaut.http.client.scope.ClientScope;
 import io.micronaut.http.client.sse.SseClient;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.http.codec.MediaTypeCodec;

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -523,11 +523,9 @@ private boolean isAdditionalPathVar(String templateString, int len) {
                     default:
                         return true;
                 }
-            } else {
-                return templateString.charAt(0) != SLASH_OPERATOR;
             }
         }
-        return false;
+        return templateString.charAt(0) != SLASH_OPERATOR;
     }
 
     /**

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -281,6 +281,8 @@ public R execute(Map<String, Object> argumentValues) {
                         }
 
                     }
+                } else if (value instanceof NullArgument) {
+                    argumentList.add(null);
                 } else if (value instanceof ConversionError) {
                     throw new ConversionErrorException(argument, (ConversionError) value);
                 } else if (value == DefaultRouteBuilder.NO_VALUE) {
@@ -324,7 +326,7 @@ public RouteMatch<R> fulfill(Map<String, Object> argumentValues) {
 
                 if (value != null) {
                     String name = resolveInputName(requiredArgument);
-                    if (value instanceof UnresolvedArgument) {
+                    if (value instanceof UnresolvedArgument || value instanceof NullArgument) {
                         newVariables.put(name, value);
                     } else {
                         ArgumentConversionContext conversionContext = ConversionContext.of(requiredArgument);

File: router/src/main/java/io/micronaut/web/router/NullArgument.java
Patch:
@@ -21,7 +21,7 @@
  * @author James Kleeh
  * @since 1.3.1
  */
-public class NullArgument {
+public final class NullArgument {
 
     /**
      * The NullArgument instance.

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -281,6 +281,8 @@ public R execute(Map<String, Object> argumentValues) {
                         }
 
                     }
+                } else if (value instanceof NullArgument) {
+                    argumentList.add(null);
                 } else if (value instanceof ConversionError) {
                     throw new ConversionErrorException(argument, (ConversionError) value);
                 } else if (value == DefaultRouteBuilder.NO_VALUE) {
@@ -324,7 +326,7 @@ public RouteMatch<R> fulfill(Map<String, Object> argumentValues) {
 
                 if (value != null) {
                     String name = resolveInputName(requiredArgument);
-                    if (value instanceof UnresolvedArgument) {
+                    if (value instanceof UnresolvedArgument || value instanceof NullArgument) {
                         newVariables.put(name, value);
                     } else {
                         ArgumentConversionContext conversionContext = ConversionContext.of(requiredArgument);

File: runtime/src/main/java/io/micronaut/jackson/parser/JacksonProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
-import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import io.micronaut.core.async.processor.SingleThreadedBufferingProcessor;
 import org.slf4j.Logger;
@@ -398,7 +397,7 @@ private JsonNode array(JsonNode node) {
         } else if (node instanceof ArrayNode) {
             return ((ArrayNode) node).addArray();
         } else {
-            return JsonNodeFactory.instance.arrayNode();
+            return deserializationConfig.getNodeFactory().arrayNode();
         }
     }
 
@@ -408,7 +407,7 @@ private JsonNode node(JsonNode node) {
         } else if (node instanceof ArrayNode && !(streamArray && nodeStack.size() == 1)) {
             return ((ArrayNode) node).addObject();
         } else {
-            return JsonNodeFactory.instance.objectNode();
+            return deserializationConfig.getNodeFactory().objectNode();
         }
     }
 }

File: benchmarks/src/jmh/java/io/micronaut/http/server/binding/RequestArgumentSatisfierBenchmark.java
Patch:
@@ -33,7 +33,7 @@ public void setup() {
     @Benchmark
     public void benchmarkFulfillArgumentRequirements() {
         final MutableHttpRequest<Object> request = HttpRequest.GET("/arguments/foo/bar/10");
-        final UriRouteMatch<Object, Object> routeMatch = router.find(request.getMethod(), request.getUri(), request).findFirst().orElse(null);
+        final UriRouteMatch<Object, Object> routeMatch = router.find(request.getMethod(), request.getUri().toString(), request).findFirst().orElse(null);
         final RouteMatch<?> transformed = requestArgumentSatisfier.fulfillArgumentRequirements(
                 routeMatch,
                 request,

File: cli/src/main/groovy/io/micronaut/cli/util/NameUtils.java
Patch:
@@ -655,6 +655,7 @@ static String convertValidPropertyMethodSuffix(String suffix) {
      * @return true if it is a javabean property getter
      * @deprecated use {@link #isGetter(String, Class, Class[])} instead because this method has a defect for "is.." method with Boolean return types.
      */
+    @Deprecated
     public static boolean isGetter(String name, Class<?>[] args) {
         return isGetter(name, boolean.class, args);
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -127,7 +127,7 @@ public boolean acceptInboundMessage(Object msg) {
     @Override
     protected final void channelRead0(ChannelHandlerContext ctx, NettyHttpRequest<?> msg) {
 
-        Optional<UriRouteMatch<Object, Object>> routeMatch = router.find(HttpMethod.GET, msg.getUri())
+        Optional<UriRouteMatch<Object, Object>> routeMatch = router.find(HttpMethod.GET, msg.getUri().toString(), msg)
                 .filter(rm -> rm.isAnnotationPresent(OnMessage.class) || rm.isAnnotationPresent(OnOpen.class))
                 .findFirst();
 

File: spring/src/main/java/io/micronaut/spring/beans/MicronautBeanProcessor.java
Patch:
@@ -68,7 +68,7 @@ public MicronautBeanProcessor(Class<?>... qualifierTypes) {
     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
         if (environment != null) {
             micronautContext = new DefaultApplicationContext(environment.getActiveProfiles()) {
-                DefaultEnvironment env = new DefaultEnvironment(environment.getActiveProfiles()) {
+                DefaultEnvironment env = new DefaultEnvironment(() -> Arrays.asList(environment.getActiveProfiles())) {
                     @Override
                     public io.micronaut.context.env.Environment start() {
                         return this;

File: runtime/src/main/java/io/micronaut/discovery/event/ServiceReadyEvent.java
Patch:
@@ -18,12 +18,12 @@
 import io.micronaut.discovery.ServiceInstance;
 
 /**
- * An event fired when registering a service.
+ * An event fired when a service has completed starting and is ready to service requests.
  *
  * @author graemerocher
  * @since 1.0
  */
-public class ServiceStartedEvent extends AbstractServiceInstanceEvent {
+public class ServiceReadyEvent extends AbstractServiceInstanceEvent {
 
     /**
      * Constructs a prototypical Event.
@@ -32,7 +32,7 @@ public class ServiceStartedEvent extends AbstractServiceInstanceEvent {
      * @throws IllegalArgumentException if source is null.
      */
 
-    public ServiceStartedEvent(ServiceInstance source) {
+    public ServiceReadyEvent(ServiceInstance source) {
         super(source);
     }
 }

File: runtime/src/main/java/io/micronaut/discovery/event/ServiceStoppedEvent.java
Patch:
@@ -18,20 +18,20 @@
 import io.micronaut.discovery.ServiceInstance;
 
 /**
- * An event triggered when de-registering a {@link ServiceInstance}.
+ * An event triggered when a {@link ServiceInstance} has shutdown and will no longer service requests.
  *
  * @author graemerocher
  * @since 1.0
  */
-public class ServiceShutdownEvent extends AbstractServiceInstanceEvent {
+public class ServiceStoppedEvent extends AbstractServiceInstanceEvent {
 
     /**
      * Constructs a prototypical Event.
      *
      * @param source The object on which the Event initially occurred.
      * @throws IllegalArgumentException if source is null.
      */
-    public ServiceShutdownEvent(ServiceInstance source) {
+    public ServiceStoppedEvent(ServiceInstance source) {
         super(source);
     }
 }

File: runtime/src/main/java/io/micronaut/health/HeartbeatTask.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ApplicationEventListener;
 import io.micronaut.context.event.ApplicationEventPublisher;
 import io.micronaut.discovery.ServiceInstance;
-import io.micronaut.discovery.event.ServiceStartedEvent;
+import io.micronaut.discovery.event.ServiceReadyEvent;
 import io.micronaut.scheduling.annotation.Scheduled;
 
 import javax.inject.Singleton;
@@ -32,7 +32,7 @@
  */
 @Singleton
 @HeartbeatEnabled
-public class HeartbeatTask implements ApplicationEventListener<ServiceStartedEvent> {
+public class HeartbeatTask implements ApplicationEventListener<ServiceReadyEvent> {
 
     private AtomicReference<ServiceInstance> eventReference = new AtomicReference<>();
 
@@ -64,7 +64,7 @@ public void pulsate() {
     }
 
     @Override
-    public void onApplicationEvent(ServiceStartedEvent event) {
+    public void onApplicationEvent(ServiceReadyEvent event) {
         eventReference.set(event.getSource());
     }
 }

File: aop/src/main/java/io/micronaut/aop/MethodInvocationContext.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.inject.ExecutableMethod;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Extended version of {@link InvocationContext} for {@link MethodInterceptor} instances.
@@ -35,5 +35,5 @@ public interface MethodInvocationContext<T, R> extends InvocationContext<T, R>,
      *
      * @return The underlying method reference.
      */
-    @Nonnull ExecutableMethod<T, R> getExecutableMethod();
+    @NonNull ExecutableMethod<T, R> getExecutableMethod();
 }

File: aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
@@ -147,13 +147,13 @@ public Map<String, Argument<?>> getTypeVariables() {
                                 return argument.getTypeVariables();
                             }
 
-                            @Nonnull
+                            @NonNull
                             @Override
                             public String getName() {
                                 return argument.getName();
                             }
 
-                            @Nonnull
+                            @NonNull
                             @Override
                             public Class<Object> getType() {
                                 return argument.getType();

File: aop/src/main/java/io/micronaut/aop/chain/MethodInterceptorChain.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.type.ReturnType;
 import io.micronaut.inject.ExecutableMethod;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 
 /**
@@ -103,7 +103,7 @@ public String toString() {
         return executionHandle.toString();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ExecutableMethod<T, R> getExecutableMethod() {
         return executionHandle;

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.aop.writer;
 
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.aop.HotSwappableInterceptedProxy;
 import io.micronaut.aop.Intercepted;
 import io.micronaut.aop.InterceptedProxy;
@@ -54,8 +56,6 @@
 import org.objectweb.asm.commons.GeneratorAdapter;
 import org.objectweb.asm.commons.Method;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -380,7 +380,7 @@ public void visitBeanDefinitionConstructor(
 
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public String getBeanDefinitionReferenceClassName() {
         return proxyBeanDefinitionWriter.getBeanDefinitionReferenceClassName();

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.annotation;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 
@@ -32,7 +32,7 @@ public interface AnnotationMetadataProvider extends AnnotationSource {
      *
      * @return The {@link AnnotationMetadata}
      */
-    @Nonnull
+    @NonNull
     default AnnotationMetadata getAnnotationMetadata() {
         return AnnotationMetadata.EMPTY_METADATA;
     }

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospectionReference.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.annotation.UsedByGeneratedCode;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 
 /**
@@ -56,7 +56,7 @@ public final boolean isPresent() {
         return present;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return getBeanType().getName();

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionMap.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.util.CollectionUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -65,7 +65,7 @@ public int hashCode() {
     }
 
     @Override
-    public @Nonnull Class<T> getBeanType() {
+    public @NonNull Class<T> getBeanType() {
         return beanIntrospection.getBeanType();
     }
 

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionReference.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.naming.Named;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * A reference to a {@link BeanIntrospection} that may or may not be present on the classpath.
@@ -46,12 +46,12 @@ public interface BeanIntrospectionReference<T> extends AnnotationMetadataProvide
      * @return The type
      * @throws io.micronaut.core.beans.exceptions.IntrospectionException if the introspection cannot be loaded
      */
-    @Nonnull Class<T> getBeanType();
+    @NonNull Class<T> getBeanType();
 
     /**
      * Loads the introspection.
      * @return The loaded introspection.
      * @throws io.micronaut.core.beans.exceptions.IntrospectionException if the introspection cannot be loaded
      */
-    @Nonnull BeanIntrospection<T> load();
+    @NonNull BeanIntrospection<T> load();
 }

File: core/src/main/java/io/micronaut/core/beans/BeanMap.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.util.ArgumentUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Map;
 
 /**
@@ -32,7 +32,7 @@ public interface BeanMap<T> extends Map<String, Object> {
     /**
      * @return The bean type
      */
-    @Nonnull Class<T> getBeanType();
+    @NonNull Class<T> getBeanType();
 
     /**
      * Creates a {@link BeanMap} for the given bean.
@@ -42,7 +42,7 @@ public interface BeanMap<T> extends Map<String, Object> {
      * @return The bean map
      */
     @SuppressWarnings({"unchecked", "deprecation"})
-    static @Nonnull <B> BeanMap<B> of(@Nonnull B bean) {
+    static @NonNull <B> BeanMap<B> of(@NonNull B bean) {
         ArgumentUtils.requireNonNull("bean", bean);
         return BeanIntrospector.SHARED.findIntrospection(bean.getClass())
                 .map(i -> (BeanMap<B>) new BeanIntrospectionMap<>((BeanIntrospection<B>) i, bean))

File: core/src/main/java/io/micronaut/core/beans/PropertyDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.naming.Named;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Method;
 
 /**

File: core/src/main/java/io/micronaut/core/beans/ReflectionBeanMap.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.reflect.ReflectionUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 import java.util.Collection;
 import java.util.Map;
@@ -56,7 +56,7 @@ class ReflectionBeanMap<T> implements BeanMap<T> {
     }
 
     @Override
-    public @Nonnull Class<T> getBeanType() {
+    public @NonNull Class<T> getBeanType() {
         return beanInfo.getBeanClass();
     }
 

File: core/src/main/java/io/micronaut/core/bind/DefaultExecutableBinder.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.Executable;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.*;
 
 /**

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 

File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.ArrayUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.annotation.Annotation;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;

File: core/src/main/java/io/micronaut/core/convert/ConversionService.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.convert.exceptions.ConversionErrorException;
 import io.micronaut.core.type.Argument;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 import java.util.function.Function;
 

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.core.type.Argument;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleValues.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.convert.value;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Map;
 
 /**

File: core/src/main/java/io/micronaut/core/io/FileReadable.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.ArgumentUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.*;
 import java.nio.charset.Charset;
 import java.nio.file.Files;
@@ -38,12 +38,12 @@ class FileReadable implements Readable {
      * Default constructor.
      * @param file The file
      */
-    FileReadable(@Nonnull File file) {
+    FileReadable(@NonNull File file) {
         ArgumentUtils.requireNonNull("file", file);
         this.file = file;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public InputStream asInputStream() throws IOException {
         return Files.newInputStream(file.toPath());

File: core/src/main/java/io/micronaut/core/io/Streamable.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.io;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;

File: core/src/main/java/io/micronaut/core/io/UrlReadable.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -48,7 +48,7 @@ class UrlReadable implements Readable {
         this.url = url;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public InputStream asInputStream() throws IOException {
         URLConnection con = this.url.openConnection();

File: core/src/main/java/io/micronaut/core/io/Writable.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.io;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.io.ResourceLoader;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Abstraction to load resources from the the classpath.

File: core/src/main/java/io/micronaut/core/naming/Named.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.naming;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An interface for components that are named.
@@ -28,5 +28,5 @@ public interface Named {
     /**
      * @return The name of the component
      */
-    @Nonnull String getName();
+    @NonNull String getName();
 }

File: core/src/main/java/io/micronaut/core/serialize/ObjectSerializer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.serialize.exceptions.SerializationException;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: core/src/main/java/io/micronaut/core/util/ArgumentUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Utility methods for checking method argument values.
@@ -33,7 +33,7 @@ public class ArgumentUtils {
      * @throws IllegalArgumentException if the argument is not positive
      * @return The value
      */
-    public static @Nonnull Number requirePositive(String name, Number value) {
+    public static @NonNull Number requirePositive(String name, Number value) {
         requireNonNull(name, value);
         requirePositive(name, value.intValue());
         return value;

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Array;
 import java.util.*;
 

File: core/src/main/java/io/micronaut/core/util/KotlinUtils.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.annotation.Internal;
 import kotlin.coroutines.intrinsics.IntrinsicsKt;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * <p>Internal Utility methods for working with Kotlin <code>suspend</code> functions</p>.

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.util;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.*;
 import java.util.regex.Pattern;
 

File: core/src/main/java/io/micronaut/core/value/OptionalValues.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.core.value;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Map;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -37,7 +37,7 @@
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.util.Toggleable;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * This is the configuration class for the AWSParameterStoreConfigClient for AWS Parameter Store based configuration.
@@ -77,7 +77,7 @@ public void setEnabled(boolean enabled) {
      *
      * @return root level of parameter hierarchy
      */
-    @Nonnull
+    @NonNull
     public String getRootHierarchyPath() {
         return rootHierarchyPath;
     }
@@ -87,7 +87,7 @@ public String getRootHierarchyPath() {
      *
      * @param rootHierarchyPath root prefix used for all calls to get Parameter store values
      */
-    public void setRootHierarchyPath(@Nonnull String rootHierarchyPath) {
+    public void setRootHierarchyPath(@NonNull String rootHierarchyPath) {
         this.rootHierarchyPath = rootHierarchyPath;
     }
 

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/Route53ClientDiscoveryConfiguration.java
Patch:
@@ -25,8 +25,8 @@
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;
 import io.micronaut.discovery.registration.RegistrationConfiguration;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Configuration for AWS Route 53 discovery.
@@ -77,7 +77,7 @@ protected String getServiceID() {
      * Gets the discovery configuration.
      * @return configuration
      */
-    @Nonnull
+    @NonNull
     @Override
     public DiscoveryConfiguration getDiscovery() {
         return new Route53DiscoveryConfiguration();

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulServiceInstance.java
Patch:
@@ -26,8 +26,8 @@
 import io.micronaut.discovery.exceptions.DiscoveryException;
 import io.micronaut.health.HealthStatus;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.InetAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -56,7 +56,7 @@ public class ConsulServiceInstance implements ServiceInstance {
      * @param healthEntry The health entry
      * @param scheme      The scheme
      */
-    public ConsulServiceInstance(@Nonnull HealthEntry healthEntry, @Nullable String scheme) {
+    public ConsulServiceInstance(@NonNull HealthEntry healthEntry, @Nullable String scheme) {
         Objects.requireNonNull(healthEntry, "HealthEntry cannot be null");
         this.healthEntry = healthEntry;
         ServiceEntry service = healthEntry.getService();

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/CheckEntry.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.core.annotation.ReflectiveAccess;
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Locale;
 
 /**

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/ConsulOperations.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.retry.annotation.Retryable;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.validation.constraints.NotNull;
 import java.util.List;
 import java.util.Map;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/HTTPCheck.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.http.HttpMethod;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URL;
 import java.time.Duration;
 import java.util.List;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/ServiceEntry.java
Patch:
@@ -20,7 +20,7 @@
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * @author graemerocher

File: discovery-client/src/main/java/io/micronaut/discovery/consul/config/ConsulConfigurationClient.java
Patch:
@@ -44,7 +44,7 @@
 import io.reactivex.schedulers.Schedulers;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/EurekaConfiguration.java
Patch:
@@ -30,8 +30,8 @@
 import io.micronaut.discovery.registration.RegistrationConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -95,7 +95,7 @@ public EurekaConfiguration(
      * @return The default discovery configuration
      */
     @Override
-    @Nonnull
+    @NonNull
     public EurekaDiscoveryConfiguration getDiscovery() {
         return discovery;
     }

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/SpringCloudConfigurationClient.java
Patch:
@@ -36,7 +36,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.*;

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/client/ConfigServerPropertySource.java
Patch:
@@ -19,7 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.micronaut.core.annotation.Internal;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.Immutable;
 import java.util.Collections;
 import java.util.Map;
@@ -55,7 +55,7 @@ protected ConfigServerPropertySource(@JsonProperty("name") String name,
      *
      * @return the name of the property source
      */
-    public @Nonnull String getName() {
+    public @NonNull String getName() {
         return name;
     }
 
@@ -64,7 +64,7 @@ protected ConfigServerPropertySource(@JsonProperty("name") String name,
      *
      * @return the map containing the configuration entries
      */
-    public @Nonnull Map<String, Object> getSource() {
+    public @NonNull Map<String, Object> getSource() {
         return source;
     }
 

File: discovery-client/src/main/java/io/micronaut/discovery/vault/config/VaultConfigurationClient.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.*;

File: discovery-client/src/test/groovy/io/micronaut/discovery/vault/MockingVaultServerV1Controller.java
Patch:
@@ -22,7 +22,7 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -39,8 +39,8 @@ public class MockingVaultServerV1Controller {
     public static final String ENABLED = "enable.mock.vault-config-v1";
 
     @Get("/v1/{backend}/{vaultKey:.*}")
-    public Publisher<VaultResponseV1> readConfigurationValuesV1(@Nonnull String backend,
-                                                                @Nonnull String vaultKey) {
+    public Publisher<VaultResponseV1> readConfigurationValuesV1(@NonNull String backend,
+                                                                @NonNull String vaultKey) {
         Map<String, Object> properties = new HashMap<>();
 
         if (vaultKey.equals("myapp/second")) {

File: discovery-client/src/test/groovy/io/micronaut/discovery/vault/MockingVaultServerV2Controller.java
Patch:
@@ -23,7 +23,7 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -40,8 +40,8 @@ public class MockingVaultServerV2Controller {
     public static final String ENABLED = "enable.mock.vault-config-v2";
 
     @Get("/v2/{backend}/data/{vaultKey:.*}")
-    public Publisher<VaultResponseV2> readConfigurationValuesV2(@Nonnull String backend,
-                                                                @Nonnull String vaultKey) {
+    public Publisher<VaultResponseV2> readConfigurationValuesV2(@NonNull String backend,
+                                                                @NonNull String vaultKey) {
         Map<String, Object> properties = new HashMap<>();
 
         if (vaultKey.equals("myapp/second")) {

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.util.ArrayUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 /**

File: function/src/main/java/io/micronaut/function/executor/AbstractExecutor.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.function.LocalFunctionRegistry;
 import io.micronaut.inject.ExecutableMethod;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 
 /**
@@ -101,7 +101,7 @@ protected ApplicationContext buildApplicationContext(@Nullable C context) {
      *
      * @return The {@link ApplicationContextBuilder}
      */
-    protected @Nonnull ApplicationContextBuilder newApplicationContextBuilder() {
+    protected @NonNull ApplicationContextBuilder newApplicationContextBuilder() {
         return ApplicationContext.build(Environment.FUNCTION);
     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -111,7 +111,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.PreDestroy;
 import javax.inject.Inject;
 import javax.inject.Named;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.ssl.ClientSslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 /**

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.netty.channel.ChannelOption;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.*;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;

File: http-client/src/main/java/io/micronaut/http/client/LoadBalancer.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.client.loadbalance.FixedLoadBalancer;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URL;
 
 /**

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.time.Duration;
 import java.util.Collections;

File: http-client/src/main/java/io/micronaut/http/client/filter/HttpClientFilterResolver.java
Patch:
@@ -33,7 +33,7 @@
 import io.micronaut.http.filter.HttpClientFilter;
 import io.micronaut.http.filter.HttpFilterResolver;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: http-client/src/main/java/io/micronaut/http/client/loadbalance/FixedLoadBalancer.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.client.LoadBalancer;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URL;
 
 /**

File: http-client/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListRoundRobinLoadBalancer.java
Patch:
@@ -20,7 +20,7 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * @author Graeme Rocher

File: http-client/src/main/java/io/micronaut/http/client/multipart/AbstractFilePart.java
Patch:
@@ -22,7 +22,7 @@
 import io.netty.handler.codec.http.multipart.HttpDataFactory;
 import io.netty.handler.codec.http.multipart.InterfaceHttpData;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.nio.charset.Charset;
 

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/NettyRxWebSocketSession.java
Patch:
@@ -34,7 +34,7 @@
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Collections;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/EpollEventLoopGroupFactory.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 
 import io.micronaut.context.annotation.Requires;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/EventLoopGroupFactory.java
Patch:
@@ -22,7 +22,7 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.socket.ServerSocketChannel;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Factory for EventLoopGroup.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/KQueueEventLoopGroupFactory.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 
 import io.micronaut.context.annotation.Requires;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyEmbeddedServerInstance.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.micronaut.runtime.server.EmbeddedServerInstance;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.util.HashMap;
 import java.util.List;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -72,7 +72,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.io.File;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NioEventLoopGroupFactory.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 
 import io.micronaut.context.annotation.Requires;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.context.BeanContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonContentProcessor.java
Patch:
@@ -35,7 +35,7 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonHttpContentSubscriberFactory.java
Patch:
@@ -28,7 +28,7 @@
 import io.micronaut.http.server.netty.HttpContentSubscriberFactory;
 import io.micronaut.http.server.netty.NettyHttpRequest;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewCodecResolver.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.micronaut.jackson.codec.JsonMediaTypeCodec;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Interface for resolving codecs for {@link com.fasterxml.jackson.annotation.JsonView} types.
@@ -32,5 +32,5 @@ public interface JsonViewCodecResolver {
      * @param viewClass The view class
      * @return The codec
      */
-    @Nonnull JsonMediaTypeCodec resolveJsonViewCodec(@Nonnull Class<?> viewClass);
+    @NonNull JsonMediaTypeCodec resolveJsonViewCodec(@NonNull Class<?> viewClass);
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewMediaTypeCodecFactory.java
Patch:
@@ -25,8 +25,8 @@
 import io.micronaut.jackson.codec.JsonMediaTypeCodec;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.Map;
@@ -73,7 +73,7 @@ protected JsonViewMediaTypeCodecFactory(ObjectMapper objectMapper,
      * @return The codec
      */
     @Override
-    public @Nonnull JsonMediaTypeCodec resolveJsonViewCodec(@Nonnull Class<?> viewClass) {
+    public @NonNull JsonMediaTypeCodec resolveJsonViewCodec(@NonNull Class<?> viewClass) {
         ArgumentUtils.requireNonNull("viewClass", viewClass);
         JsonMediaTypeCodec codec = jsonViewCodecs.get(viewClass);
         if (codec == null) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandlerConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Allows configuration of properties for the {@link FileTypeHandler}.
@@ -90,7 +90,7 @@ public void setPublic(boolean publicCache) {
         /**
          * @return True if the cache control should be public
          */
-        @Nonnull
+        @NonNull
         public boolean getPublic() {
             return publicCache;
         }

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ParameterController.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/util/MockHttpHeaders.java
Patch:
@@ -4,7 +4,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.http.MutableHttpHeaders;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.scheduling.executor.ThreadSelection;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import java.io.File;
 import java.nio.charset.Charset;
@@ -146,7 +146,7 @@ public HttpServerConfiguration(ApplicationConfiguration applicationConfiguration
     /**
      * @return The {@link ThreadSelection} model to use for the server.
      */
-    public @Nonnull ThreadSelection getThreadSelection() {
+    public @NonNull ThreadSelection getThreadSelection() {
         return threadSelection;
     }
 

File: http-server/src/main/java/io/micronaut/http/server/codec/TextStreamCodec.java
Patch:
@@ -29,7 +29,7 @@
 import io.micronaut.http.sse.Event;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Provider;

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.HttpMethod;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Collections;
 import java.util.List;
 

File: http-server/src/main/java/io/micronaut/http/server/util/DefaultHttpClientAddressResolver.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.inject.Singleton;
 import java.util.List;
 
@@ -44,7 +44,7 @@ public DefaultHttpClientAddressResolver(HttpServerConfiguration serverConfigurat
     }
 
     @Override
-    public String resolve(@Nonnull HttpRequest request) {
+    public String resolve(@NonNull HttpRequest request) {
         String configuredHeader = serverConfiguration.getClientAddressHeader();
         if (configuredHeader != null) {
             return request.getHeaders().get(configuredHeader);

File: http-server/src/main/java/io/micronaut/http/server/util/DefaultHttpHostResolver.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.http.server.HttpServerConfiguration.HostResolutionConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Provider;
 import javax.inject.Singleton;
 import java.net.URI;
@@ -52,7 +52,7 @@ public DefaultHttpHostResolver(HttpServerConfiguration serverConfiguration,
         this.embeddedServer = embeddedServer;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public String resolve(@Nullable HttpRequest request) {
         if (request != null) {

File: http-server/src/main/java/io/micronaut/http/server/util/HttpClientAddressResolver.java
Patch:
@@ -19,8 +19,8 @@
 import io.micronaut.context.annotation.DefaultImplementation;
 import io.micronaut.http.HttpRequest;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Resolves the client IP address from the request.
@@ -36,6 +36,6 @@ public interface HttpClientAddressResolver {
      * @return The client address
      */
     @Nullable
-    String resolve(@Nonnull HttpRequest request);
+    String resolve(@NonNull HttpRequest request);
 
 }

File: http-server/src/main/java/io/micronaut/http/server/util/HttpHostResolver.java
Patch:
@@ -18,8 +18,8 @@
 import io.micronaut.context.annotation.DefaultImplementation;
 import io.micronaut.http.HttpRequest;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Resolves the host name of the current server.
@@ -37,6 +37,6 @@ public interface HttpHostResolver {
      * @param request The current request
      * @return The host information
      */
-    @Nonnull
+    @NonNull
     String resolve(@Nullable HttpRequest request);
 }

File: http-server/src/main/java/io/micronaut/http/server/util/ProxyHeaderParser.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -116,7 +116,7 @@ public ProxyHeaderParser(HttpRequest request) {
     /**
      * @return The client addresses
      */
-    @Nonnull
+    @NonNull
     public List<String> getFor() {
         return forwardedFor;
     }

File: http/src/main/java/io/micronaut/http/HttpResponse.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.exceptions.UriSyntaxException;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Set;

File: http/src/main/java/io/micronaut/http/MutableHttpResponse.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.cookie.Cookie;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.Locale;

File: http/src/main/java/io/micronaut/http/context/ServerContextPathProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.context;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * A contract for providing a context path to a server.

File: http/src/main/java/io/micronaut/http/context/event/HttpRequestReceivedEvent.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.http.HttpRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An event fired when an {@link HttpRequest} is received by the server. Not that the event is fired in a
@@ -34,12 +34,12 @@ public class HttpRequestReceivedEvent extends ApplicationEvent {
     /**
      * @param request The request. Never null.
      */
-    public HttpRequestReceivedEvent(@Nonnull HttpRequest<?> request) {
+    public HttpRequestReceivedEvent(@NonNull HttpRequest<?> request) {
         super(request);
     }
 
     @Override
-    @Nonnull
+    @NonNull
     public HttpRequest<?> getSource() {
         return (HttpRequest<?>) super.getSource();
     }

File: http/src/main/java/io/micronaut/http/context/event/HttpRequestTerminatedEvent.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.http.HttpRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An event fired when an {@link HttpRequest} is finalized by the server. Note that the event is fired asynchronously and
@@ -32,12 +32,12 @@ public class HttpRequestTerminatedEvent extends ApplicationEvent {
     /**
      * @param request The request. Never null.
      */
-    public HttpRequestTerminatedEvent(@Nonnull HttpRequest<?> request) {
+    public HttpRequestTerminatedEvent(@NonNull HttpRequest<?> request) {
         super(request);
     }
 
     @Override
-    @Nonnull
+    @NonNull
     public HttpRequest<?> getSource() {
         return (HttpRequest<?>) super.getSource();
     }

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.cookie;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 
@@ -30,7 +30,7 @@ public interface CookieConfiguration {
     /**
      * @return The name of the cookie
      */
-    @Nonnull
+    @NonNull
     String getCookieName();
 
     /**

File: http/src/main/java/io/micronaut/http/hateoas/AbstractResource.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Arrays;

File: http/src/main/java/io/micronaut/http/hateoas/JsonError.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 
 /**

File: http/src/main/java/io/micronaut/http/hateoas/Link.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.MediaType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.util.Optional;
 

File: http/src/main/java/io/micronaut/http/hateos/Link.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.http.MediaType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 
 /**

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.http.cookie.Cookies;
 import io.micronaut.http.simple.cookies.SimpleCookies;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 import java.util.Set;
 

File: http/src/main/java/io/micronaut/http/sse/Event.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.util.ArgumentUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.time.Duration;
 
 /**

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 /**

File: http/src/main/java/io/micronaut/http/ssl/ServerSslConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 /**

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -23,7 +23,7 @@
 import org.codehaus.groovy.control.CompilationUnit;
 import org.codehaus.groovy.control.SourceUnit;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Modifier;
 
 /**
@@ -94,7 +94,7 @@ public Object getNativeType() {
         return variable;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getType() {
         return new GroovyClassElement(sourceUnit, compilationUnit, variable.getType(), AstAnnotationUtils.getAnnotationMetadata(sourceUnit, compilationUnit, variable.getType()));

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -25,8 +25,8 @@
 import org.codehaus.groovy.control.CompilationUnit;
 import org.codehaus.groovy.control.SourceUnit;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Implementation of {@link ParameterElement} for Groovy.
@@ -84,7 +84,7 @@ public Object getNativeType() {
         return parameter;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getType() {
         ClassNode t = parameter.getType();

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/InterfaceWithGenerics.java
Patch:
@@ -1,14 +1,14 @@
 package io.micronaut.inject.visitor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import java.util.Optional;
 
 public interface InterfaceWithGenerics<ET, ID>  {
     <S extends ET> S save(S entity);
 
-    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
+    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @NonNull Iterable<S> entities);
 
     Optional<ET> find(ID id);
 

File: inject-java-test/src/test/groovy/io/micronaut/inject/annotation/ToTransformRetentionTransformer.java
Patch:
@@ -3,15 +3,15 @@
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Collections;
 import java.util.List;
 
 public class ToTransformRetentionTransformer implements NamedAnnotationTransformer {
 
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return ToTransformRetention.class.getName();

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/beans/TestEntityAnnotationMapper.java
Patch:
@@ -6,13 +6,13 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
 
 public class TestEntityAnnotationMapper implements NamedAnnotationMapper {
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "javax.persistence.Entity";

File: inject-java/src/main/java/io/micronaut/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.inject.writer.ClassWriterOutputVisitor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
@@ -246,7 +246,7 @@ private void illegalState() {
      * @param processingEnv The processing environment.
      * @return True if it is
      */
-    protected boolean isIncremental(@Nonnull ProcessingEnvironment processingEnv) {
+    protected boolean isIncremental(@NonNull ProcessingEnvironment processingEnv) {
         final Map<String, String> options = processingEnv.getOptions();
         final String v = options.get(MICRONAUT_PROCESSING_INCREMENTAL);
         if (v != null) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -27,7 +27,7 @@
 import io.micronaut.inject.annotation.AnnotatedElementValidator;
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -42,7 +42,7 @@
 import io.micronaut.inject.writer.BeanDefinitionWriter;
 import io.micronaut.inject.writer.ExecutableMethodWriter;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedOptions;

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -33,7 +33,7 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.inject.processing.JavaModelUtils;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.lang.model.element.*;
 import javax.lang.model.type.*;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -29,7 +29,7 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedOptions;
@@ -145,7 +145,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
      *
      * @return A collection of type element visitors.
      */
-    protected @Nonnull
+    protected @NonNull
     Collection<TypeElementVisitor> findTypeElementVisitors() {
         Map<String, TypeElementVisitor> typeElementVisitors = new HashMap<>(10);
         SoftServiceLoader<TypeElementVisitor> serviceLoader = SoftServiceLoader.load(TypeElementVisitor.class, getClass().getClassLoader());

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
@@ -64,7 +64,7 @@ class JavaFieldElement extends AbstractJavaElement implements FieldElement {
         this.declaringElement = declaringElement;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getType() {
         TypeMirror returnType = variableElement.asType();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;
 import java.util.Collections;
@@ -61,7 +61,7 @@ class JavaMethodElement extends AbstractJavaElement implements MethodElement {
         this.declaringClass = declaringClass;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getGenericReturnType() {
         Map<String, Map<String, TypeMirror>> info = declaringClass.getGenericTypeInfo();
@@ -74,7 +74,7 @@ public Optional<String> getDocumentation() {
     }
 
     @Override
-    @Nonnull
+    @NonNull
     public ClassElement getReturnType() {
         TypeMirror returnType = executableElement.getReturnType();
         return mirrorToClassElement(returnType, visitorContext, Collections.emptyMap());

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ParameterElement;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 import java.util.Map;
@@ -52,13 +52,13 @@ class JavaParameterElement extends AbstractJavaElement implements ParameterEleme
     }
 
     @Override
-    @Nonnull
+    @NonNull
     public ClassElement getType() {
         TypeMirror parameterType = getNativeType().asType();
         return mirrorToClassElement(parameterType, visitorContext);
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getGenericType() {
         TypeMirror returnType = getNativeType().asType();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPropertyElement.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.PropertyElement;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.lang.model.element.ExecutableElement;
 
 /**
@@ -72,7 +72,7 @@ public String toString() {
         return name;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ClassElement getType() {
         return type;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/inheritance/ParentEachPropsCtor.java
Patch:
@@ -4,7 +4,7 @@
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 @EachProperty("teams")
 public class ParentEachPropsCtor {

File: inject-java/src/test/groovy/io/micronaut/inject/constructor/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.constructor.nullableinjection;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 public class B {

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableDProcessor.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.micronaut.context.annotation.EachBean;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.concurrent.atomic.AtomicInteger;
 
 @EachBean(D.class)

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java
Patch:
@@ -5,7 +5,7 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Prototype;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
 

File: inject-java/src/test/groovy/io/micronaut/inject/factory/parameterizedfactory/D.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Prototype;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 @Prototype

File: inject-java/src/test/groovy/io/micronaut/inject/field/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.field.nullableinjection;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 
 public class B {

File: inject-java/src/test/groovy/io/micronaut/inject/field/nullableinjection/D.java
Patch:
@@ -1,6 +1,6 @@
 package io.micronaut.inject.field.nullableinjection;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/SomeConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 @EachProperty("someconf")
 public class SomeConfiguration {

File: inject-java/src/test/groovy/io/micronaut/inject/method/nullableinjection/B.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.method.nullableinjection;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/ConstructorPropertyInject.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 import java.util.Map;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/FieldPropertyInject.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 import java.util.Map;
 

File: inject-java/src/test/groovy/io/micronaut/inject/property/MethodPropertyInject.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.annotation.Property;
 import io.micronaut.core.convert.format.MapFormat;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.Map;

File: inject-java/src/test/groovy/io/micronaut/inject/value/nullablevalue/A.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.annotation.Value;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 

File: inject-java/src/test/groovy/io/micronaut/visitors/InterfaceWithGenerics.java
Patch:
@@ -1,14 +1,14 @@
 package io.micronaut.visitors;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import java.util.Optional;
 
 public interface InterfaceWithGenerics<ET, ID>  {
     <S extends ET> S save(S entity);
 
-    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
+    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @NonNull Iterable<S> entities);
 
     Optional<ET> find(ID id);
 

File: inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java
Patch:
@@ -26,7 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Abstract implementation of the {@link BeanContextConditional} interface.
@@ -40,7 +40,7 @@ abstract class AbstractBeanContextConditional implements BeanContextConditional,
     static final Logger LOG = LoggerFactory.getLogger(Condition.class);
 
     @Override
-    public boolean isEnabled(@Nonnull BeanContext context) {
+    public boolean isEnabled(@NonNull BeanContext context) {
         AnnotationMetadata annotationMetadata = getAnnotationMetadata();
         Condition condition = annotationMetadata.hasStereotype(Requires.class) ? new RequiresCondition(annotationMetadata) : null;
         DefaultConditionContext<AbstractBeanContextConditional> conditionContext = new DefaultConditionContext<>(context, this);

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -57,8 +57,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.inject.Scope;
@@ -202,7 +202,7 @@ protected AbstractBeanDefinition(Class<T> type,
     }
 
     @Override
-    public @Nonnull List<Argument<?>> getTypeArguments(String type) {
+    public @NonNull List<Argument<?>> getTypeArguments(String type) {
         if (type == null) {
             return Collections.emptyList();
         }

File: inject/src/main/java/io/micronaut/context/AbstractExecutable.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.type.Executable;
 import io.micronaut.core.util.ArrayUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.Objects;
@@ -108,7 +108,7 @@ public final Method getTargetMethod() {
      * Resolves the target method.
      * @return The target method
      */
-    @Nonnull
+    @NonNull
     @UsedByGeneratedCode
     protected Method resolveTargetMethod() {
         return ReflectionUtils.getRequiredMethod(declaringType, methodName, argTypes);

File: inject/src/main/java/io/micronaut/context/AbstractExecutableMethod.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.inject.annotation.AbstractEnvironmentAnnotationMetadata;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;

File: inject/src/main/java/io/micronaut/context/BeanContextConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.micronaut.context;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Configuration for the {@link BeanContext}.
@@ -30,7 +30,7 @@ public interface BeanContextConfiguration {
      * The class loader to use.
      * @return The class loader.
      */
-    default @Nonnull ClassLoader getClassLoader() {
+    default @NonNull ClassLoader getClassLoader() {
         return ApplicationContextConfiguration.class.getClassLoader();
     }
 }

File: inject/src/main/java/io/micronaut/context/BeanDefinitionDelegate.java
Patch:
@@ -28,8 +28,8 @@
 import io.micronaut.inject.*;
 import io.micronaut.inject.qualifiers.Qualifiers;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Provider;
 import java.util.*;
 
@@ -255,7 +255,7 @@ default T validate(BeanResolutionContext resolutionContext, T instance) {
         }
 
         @Override
-        default <V> void validateBeanArgument(@Nonnull BeanResolutionContext resolutionContext, @Nonnull InjectionPoint injectionPoint, @Nonnull Argument<V> argument, int index, @Nullable V value) {
+        default <V> void validateBeanArgument(@NonNull BeanResolutionContext resolutionContext, @NonNull InjectionPoint injectionPoint, @NonNull Argument<V> argument, int index, @Nullable V value) {
             BeanDefinition<T> definition = getTarget();
             if (definition instanceof ValidatedBeanDefinition) {
                 ((ValidatedBeanDefinition<T>) definition).validateBeanArgument(

File: inject/src/main/java/io/micronaut/context/BeanResolutionContext.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.value.ValueResolver;
 import io.micronaut.inject.*;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Deque;
 import java.util.Optional;
 

File: inject/src/main/java/io/micronaut/context/DefaultBeanResolutionContext.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.BeanIdentifier;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 

File: inject/src/main/java/io/micronaut/context/DefaultConditionContext.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.annotation.Internal;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -59,7 +59,7 @@ public BeanContext getBeanContext() {
     }
 
     @Override
-    public ConditionContext<T> fail(@Nonnull Failure failure) {
+    public ConditionContext<T> fail(@NonNull Failure failure) {
         failures.add(failure);
         return this;
     }

File: inject/src/main/java/io/micronaut/context/DefaultConstructorInjectionPoint.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.inject.annotation.AbstractEnvironmentAnnotationMetadata;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Constructor;
 import java.util.Arrays;
 import java.util.Objects;

File: inject/src/main/java/io/micronaut/context/DefaultFieldInjectionPoint.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.inject.annotation.AbstractEnvironmentAnnotationMetadata;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.util.Objects;

File: inject/src/main/java/io/micronaut/context/DefaultMethodConstructorInjectionPoint.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ConstructorInjectionPoint;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * A {@link ConstructorInjectionPoint} that invokes a method without relying on reflection.

File: inject/src/main/java/io/micronaut/context/DefaultMethodInjectionPoint.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.MethodInjectionPoint;
 import io.micronaut.inject.annotation.AbstractEnvironmentAnnotationMetadata;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
 import java.lang.reflect.Method;

File: inject/src/main/java/io/micronaut/context/EnvironmentAwareArgument.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.inject.annotation.AbstractEnvironmentAnnotationMetadata;
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * An argument that is aware of the environment to resolve property placeholders

File: inject/src/main/java/io/micronaut/context/ReflectionFieldInjectionPoint.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.inject.BeanDefinition;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * A field injection point invoked via reflection.

File: inject/src/main/java/io/micronaut/context/ReflectionMethodConstructorInjectionPoint.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ConstructorInjectionPoint;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * <p>Calls a method that constructs the object.</p>

File: inject/src/main/java/io/micronaut/context/ReflectionMethodInjectionPoint.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.inject.BeanDefinition;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Represents an injection point for a method that requires reflection.

File: inject/src/main/java/io/micronaut/context/UnresolvedProvider.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.annotation.Internal;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Provider;
 
 /**

File: inject/src/main/java/io/micronaut/context/annotation/AliasFor.java
Patch:
@@ -28,7 +28,7 @@
  * @since 1.0
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD})
 @Documented
 @Repeatable(Aliases.class)
 public @interface AliasFor {

File: inject/src/main/java/io/micronaut/context/condition/ConditionContext.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.context.BeanContext;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.List;
 
@@ -49,15 +49,15 @@ public interface ConditionContext<T extends AnnotationMetadataProvider> {
      * @param failure The failure
      * @return The {@link ConditionContext}
      */
-    ConditionContext<T> fail(@Nonnull Failure failure);
+    ConditionContext<T> fail(@NonNull Failure failure);
 
     /**
      * Fail the condition with the given message.
      *
      * @param failure The failure
      * @return The {@link ConditionContext}
      */
-    default ConditionContext<T> fail(@Nonnull String failure) {
+    default ConditionContext<T> fail(@NonNull String failure) {
         return fail(Failure.simple(failure));
     }
 

File: inject/src/main/java/io/micronaut/context/env/AbstractPropertySourceLoader.java
Patch:
@@ -22,7 +22,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Collections;

File: inject/src/main/java/io/micronaut/context/env/DefaultPropertyPlaceholderResolver.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.value.PropertyResolver;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -25,7 +25,7 @@
 import io.micronaut.core.value.PropertyResolver;
 import io.micronaut.inject.BeanConfiguration;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.annotation.Annotation;
 import java.util.Arrays;
 import java.util.Collection;

File: inject/src/main/java/io/micronaut/context/env/EnvironmentPropertySource.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.context.env;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;

File: inject/src/main/java/io/micronaut/context/env/PropertySourceLoader.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.io.ResourceLoader;
 import io.micronaut.core.util.Toggleable;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 
 /**

File: inject/src/main/java/io/micronaut/context/event/ApplicationEventPublisher.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.context.event;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances.</p>
@@ -33,5 +33,5 @@ public interface ApplicationEventPublisher {
      *
      * @param event The event to publish
      */
-    void publishEvent(@Nonnull Object event);
+    void publishEvent(@NonNull Object event);
 }

File: inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArgumentUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Map;
 
 /**
@@ -38,7 +38,7 @@ public final class ArgumentBeanType<T> implements BeanType<T>, Argument<T> {
      * Default constructor.
      * @param argument The argument
      */
-    public ArgumentBeanType(@Nonnull Argument<T> argument) {
+    public ArgumentBeanType(@NonNull Argument<T> argument) {
         ArgumentUtils.requireNonNull("argument", argument);
         this.argument = argument;
     }

File: inject/src/main/java/io/micronaut/inject/ArgumentInjectionPoint.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.type.Argument;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An injection point for a method or constructor argument.
@@ -32,10 +32,10 @@ public interface ArgumentInjectionPoint<B, T> extends InjectionPoint<B> {
     /**
      * @return The outer injection point (method or constructor)
      */
-    @Nonnull CallableInjectionPoint<B> getOuterInjectionPoint();
+    @NonNull CallableInjectionPoint<B> getOuterInjectionPoint();
 
     /**
      * @return The argument that is being injected
      */
-    @Nonnull Argument<T> getArgument();
+    @NonNull Argument<T> getArgument();
 }

File: inject/src/main/java/io/micronaut/inject/BeanContextConditional.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.context.BeanContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Interface for other types that are conditional within a context.
@@ -34,5 +34,5 @@ public interface BeanContextConditional {
      * @param context The context
      * @return True if it is
      */
-    boolean isEnabled(@Nonnull BeanContext context);
+    boolean isEnabled(@NonNull BeanContext context);
 }

File: inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.type.Argument;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.List;
@@ -163,7 +163,7 @@ default Optional<Class<?>> getDeclaringType() {
     }
 
     @Override
-    default @Nonnull List<Argument<?>> getTypeArguments(String type) {
+    default @NonNull List<Argument<?>> getTypeArguments(String type) {
         return getTarget().getTypeArguments(type);
     }
 }

File: inject/src/main/java/io/micronaut/inject/ExecutionHandle.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 
 /**
@@ -73,7 +73,7 @@ public interface ExecutionHandle<T, R> extends AnnotationMetadataDelegate {
      */
     static <T2, R2> MethodExecutionHandle<T2, R2> of(T2 bean, ExecutableMethod<T2, R2> method) {
         return new MethodExecutionHandle<T2, R2>() {
-            @Nonnull
+            @NonNull
             @Override
             public ExecutableMethod<?, R2> getExecutableMethod() {
                 return method;

File: inject/src/main/java/io/micronaut/inject/InjectionPoint.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An injection point as a point in a class definition where dependency injection is required.
@@ -31,7 +31,7 @@ public interface InjectionPoint<T> extends AnnotationMetadataProvider {
     /**
      * @return The bean that declares this injection point
      */
-    @Nonnull BeanDefinition<T> getDeclaringBean();
+    @NonNull BeanDefinition<T> getDeclaringBean();
 
     /**
      * @return Whether reflection is required to satisfy the injection point

File: inject/src/main/java/io/micronaut/inject/MethodExecutionHandle.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Represents an execution handle that invokes a method.
@@ -31,6 +31,6 @@ public interface MethodExecutionHandle<T, R> extends ExecutionHandle<T, R>, Meth
      *
      * @return The underlying method reference.
      */
-    @Nonnull
+    @NonNull
     ExecutableMethod<?, R> getExecutableMethod();
 }

File: inject/src/main/java/io/micronaut/inject/MethodReference.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
@@ -79,7 +79,7 @@ default String[] getArgumentNames() {
             .toArray(String[]::new);
     }
 
-    @Nonnull
+    @NonNull
     @Override
     default String getName() {
         return getMethodName();

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
 import javax.inject.*;
@@ -55,7 +55,7 @@ class AnnotationMetadataSupport {
         // some common ones for startup optimization
         Arrays.asList(
                 Nullable.class,
-                Nonnull.class,
+                NonNull.class,
                 PreDestroy.class,
                 PostConstruct.class,
                 Named.class,

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationRemapper.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.List;
 
 /**
@@ -42,7 +42,7 @@ public interface AnnotationRemapper {
     /**
      * @return The package name of the annotation.
      */
-    @Nonnull String getPackageName();
+    @NonNull String getPackageName();
 
     /**
      * The map method will be called for each instances of the annotation returned via this method.
@@ -51,6 +51,6 @@ public interface AnnotationRemapper {
      * @param visitorContext The context that is being visited
      * @return A list of zero or many annotations and values to map to
      */
-    @Nonnull List<AnnotationValue<?>> remap(AnnotationValue<?> annotation, VisitorContext visitorContext);
+    @NonNull List<AnnotationValue<?>> remap(AnnotationValue<?> annotation, VisitorContext visitorContext);
 
 }

File: inject/src/main/java/io/micronaut/inject/annotation/PackageRenameRemapper.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.List;
 
@@ -36,7 +36,7 @@ public interface PackageRenameRemapper extends AnnotationRemapper {
     /**
      * @return The target package name.
      */
-    @Nonnull String getTargetPackage();
+    @NonNull String getTargetPackage();
 
     @Override
     default List<AnnotationValue<?>> remap(AnnotationValue<?> annotation, VisitorContext visitorContext) {

File: inject/src/main/java/io/micronaut/inject/annotation/internal/FindBugsRemapper.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.inject.annotation.AnnotationRemapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.List;
 
@@ -37,12 +37,12 @@
 public final class FindBugsRemapper implements AnnotationRemapper {
 
     @Override
-    @Nonnull public String getPackageName() {
+    @NonNull public String getPackageName() {
         return "edu.umd.cs.findbugs.annotations";
     }
 
     @Override
-    @Nonnull public List<AnnotationValue<?>> remap(AnnotationValue<?> annotation, VisitorContext visitorContext) {
+    @NonNull public List<AnnotationValue<?>> remap(AnnotationValue<?> annotation, VisitorContext visitorContext) {
         String simpleName = NameUtils.getSimpleName(annotation.getAnnotationName());
         if ("nullable".equalsIgnoreCase(simpleName)) {
             return Collections.singletonList(

File: inject/src/main/java/io/micronaut/inject/annotation/internal/KotlinNotNullMapper.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
@@ -31,7 +31,7 @@
  * @since 1.1.4
  */
 public class KotlinNotNullMapper implements NamedAnnotationMapper {
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "org.jetbrains.annotations.NotNull";

File: inject/src/main/java/io/micronaut/inject/annotation/internal/KotlinNullableMapper.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
@@ -31,7 +31,7 @@
  * @since 1.1.4
  */
 public class KotlinNullableMapper implements NamedAnnotationMapper {
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "org.jetbrains.annotations.Nullable";

File: inject/src/main/java/io/micronaut/inject/ast/MethodElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.ast;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Stores data about an element that references a method.
@@ -28,7 +28,7 @@ public interface MethodElement extends MemberElement {
     /**
      * @return The return type of the method
      */
-    @Nonnull
+    @NonNull
     ClassElement getReturnType();
 
     /**
@@ -42,7 +42,7 @@ public interface MethodElement extends MemberElement {
      * @return The return type of the method
      * @since 1.1.1
      */
-    default @Nonnull ClassElement getGenericReturnType() {
+    default @NonNull ClassElement getGenericReturnType() {
         return getReturnType();
     }
 }

File: inject/src/main/java/io/micronaut/inject/ast/ParameterElement.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.jetbrains.annotations.NotNull;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Represents a parameter to a method or constructor.
@@ -32,6 +32,6 @@ public interface ParameterElement extends TypedElement {
      */
     @NotNull
     @Override
-    @Nonnull
+    @NonNull
     ClassElement getType();
 }

File: inject/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.jetbrains.annotations.NotNull;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Optional;
 
 /**
@@ -31,7 +31,7 @@ public interface PropertyElement extends TypedElement, MemberElement {
      * @return The type of the property
      */
     @NotNull
-    @Nonnull
+    @NonNull
     @Override
     ClassElement getType();
 

File: inject/src/main/java/io/micronaut/inject/ast/TypedElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.ast;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * An element that has an underlying type.
@@ -30,7 +30,7 @@ public interface TypedElement extends Element {
     /**
      * @return The type of the element
      */
-    @Nonnull
+    @NonNull
     ClassElement getType();
 
     /**
@@ -42,7 +42,7 @@ public interface TypedElement extends Element {
      * @return The generic type
      * @since 1.1.1
      */
-    @Nonnull
+    @NonNull
     default ClassElement getGenericType() {
         return getType();
     }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/EntityIntrospectedAnnotationMapper.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
@@ -35,7 +35,7 @@
  */
 // tag::class[]
 public class EntityIntrospectedAnnotationMapper implements NamedAnnotationMapper {
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "javax.persistence.Entity";

File: inject/src/main/java/io/micronaut/inject/beans/visitor/JsonCreatorAnnotationMapper.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
@@ -34,7 +34,7 @@
  */
 public class JsonCreatorAnnotationMapper implements NamedAnnotationMapper {
 
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "com.fasterxml.jackson.annotation.JsonCreator";

File: inject/src/main/java/io/micronaut/inject/beans/visitor/MappedSuperClassIntrospectionMapper.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.micronaut.inject.beans.visitor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Handle mapped super class.
@@ -25,7 +25,7 @@
  * @since 1.1.2
  */
 public class MappedSuperClassIntrospectionMapper extends EntityIntrospectedAnnotationMapper {
-    @Nonnull
+    @NonNull
     @Override
     public String getName() {
         return "javax.persistence.MappedSuperclass";

File: inject/src/main/java/io/micronaut/inject/configuration/ConfigurationMetadataBuilder.java
Patch:
@@ -19,8 +19,8 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.CollectionUtils;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
@@ -85,7 +85,7 @@ public ConfigurationMetadata visitProperties(T type,
      * @param annotationMetadata the annotation metadata
      * @return This {@link ConfigurationMetadata}
      */
-    public ConfigurationMetadata visitProperties(T type, @Nullable String description, @Nonnull AnnotationMetadata annotationMetadata) {
+    public ConfigurationMetadata visitProperties(T type, @Nullable String description, @NonNull AnnotationMetadata annotationMetadata) {
         String path = buildTypePath(type, type, annotationMetadata);
         ConfigurationMetadata configurationMetadata = new ConfigurationMetadata();
         configurationMetadata.name = NameUtils.hyphenate(path, true);

File: inject/src/main/java/io/micronaut/inject/qualifiers/TypeAnnotationQualifier.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.BeanType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;

File: inject/src/main/java/io/micronaut/inject/util/KotlinExecutableMethodUtils.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.inject.ExecutableMethod;
 import kotlin.Unit;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import static io.micronaut.core.util.KotlinUtils.KOTLIN_COROUTINES_SUPPORTED;
 
@@ -38,7 +38,7 @@ public class KotlinExecutableMethodUtils {
      * @param method method to be checked
      * @return True if given <code>suspend</code> function's return type is <code>Unit</code>.
      */
-    public static boolean isKotlinFunctionReturnTypeUnit(@Nonnull ExecutableMethod method) {
+    public static boolean isKotlinFunctionReturnTypeUnit(@NonNull ExecutableMethod method) {
         if (KOTLIN_COROUTINES_SUPPORTED) {
             final Argument[] arguments = method.getArguments();
             final int argumentsLength = arguments.length;

File: inject/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -26,7 +26,7 @@
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.GeneratorAdapter;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -92,7 +92,7 @@ protected void writeGetAnnotationMetadataMethod(ClassWriter classWriter) {
      * @param classWriter The class writer
      * @return The generator adapter
      */
-    protected @Nonnull
+    protected @NonNull
     GeneratorAdapter beginAnnotationMetadataMethod(ClassWriter classWriter) {
         return startPublicMethod(classWriter, "getAnnotationMetadata", AnnotationMetadata.class.getName());
     }

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -35,7 +35,7 @@
 import org.objectweb.asm.commons.GeneratorAdapter;
 import org.objectweb.asm.commons.Method;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.IOException;
@@ -413,7 +413,7 @@ public void writeTo(File targetDir) throws IOException {
      * @param type The element type
      * @return The type
      */
-    protected Type getTypeForElement(@Nonnull TypedElement type) {
+    protected Type getTypeForElement(@NonNull TypedElement type) {
         Type propertyType;
         final Optional<Class> pt;
         final String typeName = type.getName();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
 import org.objectweb.asm.Type;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.util.Map;
@@ -71,7 +71,7 @@ void visitBeanDefinitionConstructor(AnnotationMetadata annotationMetadata,
     /**
      * @return The name of the bean definition reference class.
      */
-    @Nonnull
+    @NonNull
     String getBeanDefinitionReferenceClassName();
 
     /**

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -50,8 +50,8 @@
 import org.objectweb.asm.signature.SignatureVisitor;
 import org.objectweb.asm.signature.SignatureWriter;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Singleton;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -285,7 +285,7 @@ public BeanDefinitionWriter(String packageName,
      * @return The name of the bean definition reference class.
      */
     @Override
-    @Nonnull
+    @NonNull
     public String getBeanDefinitionReferenceClassName() {
         return beanDefinitionName + BeanDefinitionReferenceWriter.REF_SUFFIX;
     }

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -30,7 +30,7 @@
 import org.objectweb.asm.commons.GeneratorAdapter;
 import org.objectweb.asm.commons.Method;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.*;
@@ -370,7 +370,7 @@ public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOE
         }
     }
 
-    @Nonnull
+    @NonNull
     @Override
     protected final GeneratorAdapter beginAnnotationMetadataMethod(ClassWriter classWriter) {
         return startProtectedMethod(classWriter, "resolveAnnotationMetadata", AnnotationMetadata.class.getName());

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.management.health.indicator.HealthResult;
 import io.reactivex.Single;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import java.security.Principal;
 import java.util.HashMap;

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggersEndpoint.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.management.endpoint.annotation.Write;
 import io.reactivex.Single;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.validation.constraints.NotBlank;
 import java.util.Map;
 

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggingSystem.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.management.endpoint.loggers;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.util.Collection;
@@ -33,15 +33,15 @@ public interface LoggingSystem extends io.micronaut.logging.LoggingSystem {
      *
      * @return A {@link Collection} of {@link LoggerConfiguration} instances for all existing loggers
      */
-    @Nonnull Collection<LoggerConfiguration> getLoggers();
+    @NonNull Collection<LoggerConfiguration> getLoggers();
 
     /**
      * Returns a {@link LoggerConfiguration} for the logger found by name (or created if not found).
      *
      * @param name the logger name
      * @return the logger configuration
      */
-    @Nonnull LoggerConfiguration getLogger(@NotBlank String name);
+    @NonNull LoggerConfiguration getLogger(@NotBlank String name);
 
     /**
      * Set the log level for the logger found by name (or created if not found).

File: management/src/main/java/io/micronaut/management/endpoint/processors/AbstractEndpointRouteBuilder.java
Patch:
@@ -32,7 +32,7 @@
 import io.micronaut.management.endpoint.annotation.Selector;
 import io.micronaut.web.router.DefaultRouteBuilder;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.annotation.Annotation;
 import java.util.Map;
 import java.util.Optional;

File: management/src/main/java/io/micronaut/management/endpoint/refresh/RefreshEndpoint.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.management.endpoint.annotation.Write;
 import io.micronaut.runtime.context.scope.refresh.RefreshEvent;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Map;
 import java.util.Set;
 

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -35,7 +35,7 @@
 import io.micronaut.inject.MethodExecutionHandle;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -89,7 +89,7 @@ public T getTarget() {
         return executableMethod.getTarget();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public ExecutableMethod<?, R> getExecutableMethod() {
         return executableMethod.getExecutableMethod();

File: router/src/main/java/io/micronaut/web/router/AnnotatedFilterRouteBuilder.java
Patch:
@@ -28,7 +28,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.qualifiers.Qualifiers;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
 import javax.inject.Singleton;

File: router/src/main/java/io/micronaut/web/router/BasicObjectRouteMatch.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;

File: router/src/main/java/io/micronaut/web/router/RouteMatch.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;

File: router/src/main/java/io/micronaut/web/router/StatusRoute.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.Optional;
 import java.util.function.Predicate;
 

File: router/src/main/java/io/micronaut/web/router/UriRoute.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.uri.UriMatchTemplate;
 import io.micronaut.http.uri.UriMatcher;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.net.URI;
 import java.util.Optional;
 import java.util.function.Predicate;

File: router/src/main/java/io/micronaut/web/router/naming/HyphenatedUriNamingStrategy.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.web.router.RouteBuilder;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.inject.Singleton;
 
 /**
@@ -42,15 +42,15 @@ public String resolveUri(Class type) {
     }
 
     @Override
-    public @Nonnull String resolveUri(BeanDefinition<?> beanDefinition) {
+    public @NonNull String resolveUri(BeanDefinition<?> beanDefinition) {
         String uri = beanDefinition.stringValue(UriMapping.class).orElseGet(() ->
                 beanDefinition.stringValue(Controller.class).orElse(UriMapping.DEFAULT_URI)
         );
         return normalizeUri(uri);
     }
 
     @Override
-    public @Nonnull String resolveUri(String property) {
+    public @NonNull String resolveUri(String property) {
         if (StringUtils.isEmpty(property)) {
             return "/";
         }

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceConfiguration.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.http.context.ServerContextPathProvider;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import java.util.ArrayList;
 import java.util.Collections;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataProvider.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.core.annotation;
 
+import javax.annotation.Nonnull;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 
@@ -31,6 +32,7 @@ public interface AnnotationMetadataProvider extends AnnotationSource {
      *
      * @return The {@link AnnotationMetadata}
      */
+    @Nonnull
     default AnnotationMetadata getAnnotationMetadata() {
         return AnnotationMetadata.EMPTY_METADATA;
     }

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1684,7 +1684,7 @@ private String getConfigurationPropertiesPath(BeanResolutionContext resolutionCo
 
     private String substituteWildCards(BeanResolutionContext resolutionContext, String valString) {
         if (valString.indexOf('*') > -1) {
-            Optional<String> namedBean = resolutionContext.get(Named.class.getName(), String.class);
+            Optional<String> namedBean = resolutionContext.get(Named.class.getName(), ArgumentConversionContext.STRING);
             if (namedBean.isPresent()) {
                 valString = valString.replace("*", namedBean.get());
             }
@@ -1825,7 +1825,7 @@ private Qualifier resolveQualifier(
                     if ((hasMetadata && argument.isAnnotationPresent(Parameter.class)) ||
                             (innerConfiguration && isIterable) ||
                             Qualifier.class == argument.getType()) {
-                        final Optional<String> n = resolutionContext.get(NAMED_ATTRIBUTE, String.class);
+                        final Optional<String> n = resolutionContext.get(NAMED_ATTRIBUTE, ArgumentConversionContext.STRING);
                         qualifier = n.map(Qualifiers::byName).orElse(null);
                     }
                 }

File: inject/src/main/java/io/micronaut/context/DefaultFieldInjectionPoint.java
Patch:
@@ -34,12 +34,13 @@
 /**
  * Represents an injection point for a field.
  *
+ * @param <B> The declaring bean type
  * @param <T> The field type
  * @author Graeme Rocher
  * @since 1.0
  */
 @Internal
-class DefaultFieldInjectionPoint<T> implements FieldInjectionPoint<T>, EnvironmentConfigurable {
+class DefaultFieldInjectionPoint<B, T> implements FieldInjectionPoint<B, T>, EnvironmentConfigurable {
 
     private final BeanDefinition declaringBean;
     private final Class declaringType;
@@ -91,7 +92,7 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        DefaultFieldInjectionPoint<?> that = (DefaultFieldInjectionPoint<?>) o;
+        DefaultFieldInjectionPoint<?, ?> that = (DefaultFieldInjectionPoint<?, ?>) o;
         return Objects.equals(declaringType, that.declaringType) &&
             Objects.equals(fieldType, that.fieldType) &&
             Objects.equals(field, that.field);

File: inject/src/main/java/io/micronaut/context/DefaultMethodConstructorInjectionPoint.java
Patch:
@@ -28,9 +28,10 @@
  *
  * @author graemerocher
  * @since 1.0
+ * @param <T> The constructed type
  */
 @Internal
-class DefaultMethodConstructorInjectionPoint extends DefaultMethodInjectionPoint implements ConstructorInjectionPoint {
+class DefaultMethodConstructorInjectionPoint<T> extends DefaultMethodInjectionPoint<T, T> implements ConstructorInjectionPoint<T> {
 
     /**
      * @param declaringBean      The declaring bean
@@ -49,7 +50,7 @@ class DefaultMethodConstructorInjectionPoint extends DefaultMethodInjectionPoint
     }
 
     @Override
-    public Object invoke(Object... args) {
+    public T invoke(Object... args) {
         throw new UnsupportedOperationException("Use MethodInjectionPoint#invoke(..) instead");
     }
 }

File: inject/src/main/java/io/micronaut/context/DefaultMethodInjectionPoint.java
Patch:
@@ -35,9 +35,11 @@
  *
  * @author graemerocher
  * @since 1.0
+ * @param <B> The bean type
+ * @param <T> The injectable type
  */
 @Internal
-class DefaultMethodInjectionPoint implements MethodInjectionPoint, EnvironmentConfigurable {
+class DefaultMethodInjectionPoint<B, T> implements MethodInjectionPoint<B, T>, EnvironmentConfigurable {
 
     private final BeanDefinition declaringBean;
     private final AnnotationMetadata annotationMetadata;

File: inject/src/main/java/io/micronaut/inject/CallableInjectionPoint.java
Patch:
@@ -22,8 +22,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @param <T> The injectable type
  */
-public interface CallableInjectionPoint extends InjectionPoint {
+public interface CallableInjectionPoint<T> extends InjectionPoint<T> {
 
     /**
      *

File: inject/src/main/java/io/micronaut/inject/ConstructorInjectionPoint.java
Patch:
@@ -18,11 +18,11 @@
 /**
  * A constructor injection point.
  *
- * @param <T> The constructor type
+ * @param <T> The constructed type
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface ConstructorInjectionPoint<T> extends CallableInjectionPoint {
+public interface ConstructorInjectionPoint<T> extends CallableInjectionPoint<T> {
 
     /**
      * Invoke the constructor.

File: aop/src/main/java/io/micronaut/aop/Around.java
Patch:
@@ -17,8 +17,6 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import io.micronaut.context.annotation.Executable;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -48,7 +46,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
-@Executable
 public @interface Around {
 
     /**

File: aop/src/main/java/io/micronaut/aop/Introduction.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.aop;
 
-import io.micronaut.context.annotation.Executable;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -49,7 +47,6 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})
-@Executable
 public @interface Introduction {
 
     /**

File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java
Patch:
@@ -429,7 +429,7 @@ public static NoSuchMethodError newNoSuchMethodError(Class declaringType, String
         Stream<String> stringStream = Arrays.stream(argumentTypes).map(Class::getSimpleName);
         String argsAsText = stringStream.collect(Collectors.joining(","));
 
-        return new NoSuchMethodError("Required method " + name + "(" + argsAsText + ") not found for class: " + declaringType.getName() + ". Most likely cause of this error is that an unsupported or older version of a dependency is present on the classpath. Check your classpath, and ensure the incompatible classes are not present and/or recompile classes as necessary.");
+        return new NoSuchMethodError("Required method " + name + "(" + argsAsText + ") not found for class: " + declaringType.getName() + ". Most likely cause of this error is the method declaration is not annotated with @Executable. Alternatively check that there is not an unsupported or older version of a dependency present on the classpath. Check your classpath, and ensure the incompatible classes are not present and/or recompile classes as necessary.");
     }
 
     private static NoSuchMethodError newNoSuchMethodInternalError(Class declaringType, String name, Class[] argumentTypes) {

File: inject-groovy/src/test/groovy/io/micronaut/aop/introduction/ListenerAdvice.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.aop.introduction;
 
 import io.micronaut.aop.Introduction;
+import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.annotation.Type;
 import io.micronaut.context.event.ApplicationEventListener;
 
@@ -32,5 +33,6 @@
 @Type(ListenerAdviceInterceptor.class)
 @Documented
 @Retention(RUNTIME)
+@Executable
 public @interface ListenerAdvice {
 }

File: inject-java/src/test/groovy/io/micronaut/aop/introduction/ListenerAdvice.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.aop.introduction;
 
 import io.micronaut.aop.Introduction;
+import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.annotation.Type;
 import io.micronaut.context.event.ApplicationEventListener;
 
@@ -32,5 +33,6 @@
 @Type(ListenerAdviceInterceptor.class)
 @Documented
 @Retention(RUNTIME)
+@Executable
 public @interface ListenerAdvice {
 }

File: inject-java/src/test/groovy/io/micronaut/aop/introduction/Stub.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.aop.introduction;
 
 import io.micronaut.aop.Introduction;
+import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.annotation.Type;
 
 import java.lang.annotation.Documented;

File: inject-java/src/test/groovy/io/micronaut/aop/simple/Mutating.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.aop.simple;
 
 import io.micronaut.aop.Around;
+import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.annotation.Type;
 
 import java.lang.annotation.Documented;

File: inject-java/src/main/java/io/micronaut/annotation/processing/PackageConfigurationInjectProcessor.java
Patch:
@@ -50,8 +50,8 @@ public final synchronized void init(ProcessingEnvironment processingEnv) {
     }
 
     @Override
-    public Set<String> getSupportedOptions() {
-        return Collections.singleton("org.gradle.annotation.processing.aggregating");
+    public Set<String> getSupportedAnnotationTypes() {
+        return Collections.singleton("io.micronaut.context.annotation.Configuration");
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/PackageConfigurationInjectProcessor.java
Patch:
@@ -50,8 +50,8 @@ public final synchronized void init(ProcessingEnvironment processingEnv) {
     }
 
     @Override
-    public Set<String> getSupportedOptions() {
-        return Collections.singleton("org.gradle.annotation.processing.aggregating");
+    public Set<String> getSupportedAnnotationTypes() {
+        return Collections.singleton("io.micronaut.context.annotation.Configuration");
     }
 
     @Override

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1769,7 +1769,9 @@ private <I> void prepareHttpHeaders(URI requestURI, io.micronaut.http.HttpReques
                     FullHttpRequest fullHttpRequest = (FullHttpRequest) nettyRequest;
                     headers.set(HttpHeaderNames.CONTENT_LENGTH, fullHttpRequest.content().readableBytes());
                 } else {
-                    headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+                    if (!headers.contains(HttpHeaderNames.CONTENT_LENGTH) && !headers.contains(HttpHeaderNames.TRANSFER_ENCODING)) {
+                        headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+                    }
                 }
             } else {
                 headers.set(HttpHeaderNames.CONTENT_LENGTH, 0);

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -19,7 +19,6 @@
 import com.amazonaws.services.lambda.AWSLambdaAsyncClientBuilder;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.runtime.context.scope.Refreshable;
 
 /**
  * @author graemerocher
@@ -43,7 +42,6 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      * The client returned from a builder.
      * @return client object
      */
-    @Refreshable
     @Requires(beans = AWSLambdaConfiguration.class)
     AWSLambdaAsync awsLambdaAsyncClient() {
         AWSLambdaAsyncClientBuilder builder = configuration.getBuilder();

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
@@ -50,6 +51,7 @@
  * @since 1.0
  */
 @Internal
+@TypeHint(value = NettyMutableHttpResponse.class)
 public class NettyMutableHttpResponse<B> implements MutableHttpResponse<B> {
 
     protected FullHttpResponse nettyResponse;

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.simple;
 
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
@@ -36,6 +37,7 @@
  * @author Vladimir Orany
  * @since 1.0
  */
+@TypeHint(value = SimpleHttpResponse.class)
 class SimpleHttpResponse<B> implements MutableHttpResponse<B> {
 
     private final MutableHttpHeaders headers = new SimpleHttpHeaders(ConversionService.SHARED);

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.http.netty;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.annotation.Introspected;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
@@ -51,7 +51,7 @@
  * @since 1.0
  */
 @Internal
-@Introspected
+@TypeHint(value = NettyMutableHttpResponse.class)
 public class NettyMutableHttpResponse<B> implements MutableHttpResponse<B> {
 
     protected FullHttpResponse nettyResponse;

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.http.simple;
 
-import io.micronaut.core.annotation.Introspected;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
@@ -37,7 +37,7 @@
  * @author Vladimir Orany
  * @since 1.0
  */
-@Introspected
+@TypeHint(value = SimpleHttpResponse.class)
 class SimpleHttpResponse<B> implements MutableHttpResponse<B> {
 
     private final MutableHttpHeaders headers = new SimpleHttpHeaders(ConversionService.SHARED);

File: http-client/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListRoundRobinLoadBalancer.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.client.loadbalance;
 
-import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.reactivex.Flowable;

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.netty;
 
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
@@ -50,6 +51,7 @@
  * @since 1.0
  */
 @Internal
+@Introspected
 public class NettyMutableHttpResponse<B> implements MutableHttpResponse<B> {
 
     protected FullHttpResponse nettyResponse;

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.simple;
 
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.convert.value.MutableConvertibleValuesMap;
@@ -36,6 +37,7 @@
  * @author Vladimir Orany
  * @since 1.0
  */
+@Introspected
 class SimpleHttpResponse<B> implements MutableHttpResponse<B> {
 
     private final MutableHttpHeaders headers = new SimpleHttpHeaders(ConversionService.SHARED);

File: management/src/main/java/io/micronaut/management/endpoint/info/source/BuildInfoSource.java
Patch:
@@ -22,10 +22,10 @@
 import io.micronaut.core.io.ResourceResolver;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
-import io.micronaut.runtime.context.scope.Refreshable;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
+import javax.inject.Singleton;
 import java.util.Optional;
 import java.util.function.Supplier;
 
@@ -35,7 +35,7 @@
  * @author Zachary Klein
  * @since 1.0
  */
-@Refreshable
+@Singleton
 @Requires(beans = InfoEndpoint.class)
 @Requires(property = "endpoints.info.build.enabled", notEquals = StringUtils.FALSE)
 public class BuildInfoSource implements PropertiesInfoSource {

File: management/src/main/java/io/micronaut/management/endpoint/info/source/GitInfoSource.java
Patch:
@@ -22,10 +22,10 @@
 import io.micronaut.core.io.ResourceResolver;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
-import io.micronaut.runtime.context.scope.Refreshable;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
+import javax.inject.Singleton;
 import java.util.Optional;
 import java.util.function.Supplier;
 
@@ -35,7 +35,7 @@
  * @author Zachary Klein
  * @since 1.0
  */
-@Refreshable
+@Singleton
 @Requires(beans = InfoEndpoint.class)
 @Requires(property = "endpoints.info.git.enabled", notEquals = StringUtils.FALSE)
 public class GitInfoSource implements PropertiesInfoSource {

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -867,7 +867,7 @@ protected <I, O> Function<URI, Flowable<O>> buildJsonStreamPublisher(io.micronau
 
                 boolean isJsonStream = response.getContentType().map(mediaType -> mediaType.equals(MediaType.APPLICATION_JSON_STREAM_TYPE)).orElse(false);
                 boolean streamArray = !Iterable.class.isAssignableFrom(type.getType()) && !isJsonStream;
-                JacksonProcessor jacksonProcessor = new JacksonProcessor(mediaTypeCodec.getObjectMapper().getFactory(), streamArray) {
+                JacksonProcessor jacksonProcessor = new JacksonProcessor(mediaTypeCodec.getObjectMapper().getFactory(), streamArray, mediaTypeCodec.getObjectMapper().getDeserializationConfig()) {
                     @Override
                     public void subscribe(Subscriber<? super JsonNode> downstreamSubscriber) {
                         httpContentFlowable.map(content -> {

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -891,7 +891,7 @@ protected <I, O> Function<URI, Flowable<O>> buildJsonStreamPublisher(io.micronau
 
                 boolean isJsonStream = response.getContentType().map(mediaType -> mediaType.equals(MediaType.APPLICATION_JSON_STREAM_TYPE)).orElse(false);
                 boolean streamArray = !Iterable.class.isAssignableFrom(type.getType()) && !isJsonStream;
-                JacksonProcessor jacksonProcessor = new JacksonProcessor(mediaTypeCodec.getObjectMapper().getFactory(), streamArray) {
+                JacksonProcessor jacksonProcessor = new JacksonProcessor(mediaTypeCodec.getObjectMapper().getFactory(), streamArray, mediaTypeCodec.getObjectMapper().getDeserializationConfig()) {
                     @Override
                     public void subscribe(Subscriber<? super JsonNode> downstreamSubscriber) {
                         httpContentFlowable.map(content -> {

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -35,7 +35,6 @@
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpVersion;
-import io.netty.handler.codec.http.cookie.ClientCookieEncoder;
 import io.netty.handler.codec.http.cookie.ServerCookieEncoder;
 
 import java.util.*;

File: test-suite/src/test/java/io/micronaut/docs/qualifiers/annotation/VehicleSpec.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.docs.qualifiers.annotation;
 
 import io.micronaut.context.DefaultBeanContext;
-import io.micronaut.docs.inject.qualifiers.named.Vehicle;
 import org.codehaus.groovy.runtime.DefaultGroovyMethods;
 import org.junit.Test;
 
@@ -11,7 +10,7 @@ public class VehicleSpec {
     @Test
     public void testStartVehicle() {
         // tag::start[]
-        io.micronaut.docs.inject.qualifiers.named.Vehicle vehicle = new DefaultBeanContext().start().getBean(Vehicle.class);
+        Vehicle vehicle = new DefaultBeanContext().start().getBean(Vehicle.class);
         DefaultGroovyMethods.println(this, vehicle.start());
         // end::start[]
 

File: test-suite/src/test/java/io/micronaut/docs/qualifiers/annotation/VehicleSpec.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.docs.qualifiers.annotation;
 
 import io.micronaut.context.DefaultBeanContext;
-import io.micronaut.docs.inject.qualifiers.named.Vehicle;
 import org.codehaus.groovy.runtime.DefaultGroovyMethods;
 import org.junit.Test;
 
@@ -11,7 +10,7 @@ public class VehicleSpec {
     @Test
     public void testStartVehicle() {
         // tag::start[]
-        io.micronaut.docs.inject.qualifiers.named.Vehicle vehicle = new DefaultBeanContext().start().getBean(Vehicle.class);
+        Vehicle vehicle = new DefaultBeanContext().start().getBean(Vehicle.class);
         DefaultGroovyMethods.println(this, vehicle.start());
         // end::start[]
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -104,7 +104,7 @@ public void visitClass(ClassElement element, VisitorContext context) {
                 for (AnnotationClassValue aClass : classes) {
                     final Optional<ClassElement> classElement = context.getClassElement(aClass.getName());
                     classElement.ifPresent(ce -> {
-                        if (!ce.isAbstract() && ce.isPublic() && !ce.hasDeclaredAnnotation(Introspected.class)) {
+                        if (!ce.isAbstract() && ce.isPublic() && !ce.hasStereotype(Introspected.class)) {
                             final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(
                                     element.getName(),
                                     index.getAndIncrement(),
@@ -127,7 +127,7 @@ public void visitClass(ClassElement element, VisitorContext context) {
                         ClassElement[] elements = context.getClassElements(aPackage, includedAnnotations.toArray(new String[0]));
                         int j = 0;
                         for (ClassElement classElement : elements) {
-                            if (classElement.isAbstract() || !classElement.isPublic() || classElement.hasDeclaredAnnotation(Introspected.class)) {
+                            if (classElement.isAbstract() || !classElement.isPublic() || classElement.hasStereotype(Introspected.class)) {
                                 continue;
                             }
                             final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(

File: inject-java-test/src/test/groovy/io/micronaut/inject/visitor/beans/OtherTestBean.java
Patch:
@@ -1,5 +1,6 @@
 package io.micronaut.inject.visitor.beans;
 
+@MarkerAnnotation
 public class OtherTestBean {
     private String name;
 

File: runtime/src/main/java/io/micronaut/reactive/flow/converters/FlowConverterRegistrar.java
Patch:
@@ -33,7 +33,7 @@
  * @since 1.3
  */
 @Singleton
-@Requires(classes = Flow.class)
+@Requires(classes = {Flow.class, ReactiveFlowKt.class})
 public class FlowConverterRegistrar implements TypeConverterRegistrar {
     @Override
     public void register(ConversionService<?> conversionService) {

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataHierarchy.java
Patch:
@@ -359,7 +359,7 @@ public boolean hasDeclaredAnnotation(@Nullable String annotation) {
     @Override
     public boolean hasAnnotation(@Nullable String annotation) {
         for (AnnotationMetadata annotationMetadata : hierarchy) {
-            if (annotationMetadata.hasStereotype(annotation)) {
+            if (annotationMetadata.hasAnnotation(annotation)) {
                 return true;
             }
         }

File: validation/src/main/java/io/micronaut/validation/internal/InternalApiTypeElementVisitor.java
Patch:
@@ -65,14 +65,14 @@ private void warnMember(MemberElement element, VisitorContext context) {
     private void warn(Element element, VisitorContext context) {
         if (element.hasAnnotation(Internal.class) || element.hasAnnotation(Experimental.class)) {
             warned = true;
-            context.warn("Element extends or implements an internal or experimental API", element);
+            context.warn("Element extends or implements an internal or experimental Micronaut API", element);
         }
     }
 
     @Override
     public void finish(VisitorContext visitorContext) {
         if (warned) {
-            visitorContext.warn("Overriding an internal API may result in breaking changes in minor or patch versions of the framework. Proceed with caution!", null);
+            visitorContext.warn("Overriding an internal Micronaut API may result in breaking changes in minor or patch versions of the framework. Proceed with caution!", null);
         }
     }
 }

File: core/src/main/java/io/micronaut/core/cli/CommandLineParser.java
Patch:
@@ -166,7 +166,7 @@ protected String processOption(DefaultCommandLine cl, String arg) {
             String[] split = arg.split("=");
             String name = split[0].trim();
             validateOptionName(name);
-            String value = split[1].trim();
+            String value = split.length > 1 ? split[1].trim() : "";
             if (declaredOptions.containsKey(name)) {
                 cl.addDeclaredOption(declaredOptions.get(name), value);
             } else {

File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java
Patch:
@@ -902,8 +902,9 @@ private class CacheOperation {
             this.defaultCacheNames = context.stringValues(CacheConfig.class, MEMBER_CACHE_NAMES);
             this.cacheable = context.hasStereotype(Cacheable.class);
             if (!isVoid && cacheable) {
-                if (ArrayUtils.isNotEmpty(defaultCacheNames)) {
-                    this.cacheableCacheName = defaultCacheNames[0];
+                String[] names = resolveCacheNames(defaultCacheNames, context.stringValues(Cacheable.class, MEMBER_CACHE_NAMES));
+                if (ArrayUtils.isNotEmpty(names)) {
+                    this.cacheableCacheName = names[0];
                 } else {
                     if (LOG.isWarnEnabled()) {
                         LOG.warn("No cache names defined for invocation [{}]. Skipping cache read operations.", context);

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -120,10 +120,10 @@ public static String hyphenate(String name) {
      */
     public static String hyphenate(String name, boolean lowerCase) {
         if (isHyphenatedLowerCase(name)) {
-            return name.replace('_', '-');
+            return name.replaceAll("[_ ]", "-");
         } else {
             char separatorChar = '-';
-            return separateCamelCase(name.replace('_', '-'), lowerCase, separatorChar);
+            return separateCamelCase(name.replaceAll("[_ ]", "-"), lowerCase, separatorChar);
         }
     }
 

File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java
Patch:
@@ -70,10 +70,10 @@ public String receiveBytes(byte[] data, String title) {
     }
 
     @Post(value = "/receive-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)
-    public Publisher<HttpResponse> receiveFileUpload(StreamingFileUpload data, String title) {
+    public Publisher<MutableHttpResponse<?>> receiveFileUpload(StreamingFileUpload data, String title) {
         long size = data.getDefinedSize();
         return Flowable.fromPublisher(data.transferTo(title + ".json"))
-                       .map(success -> success ? HttpResponse.ok( "Uploaded " + size  ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
+                       .map(success -> success ? HttpResponse.ok( "Uploaded " + size  ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened")).onErrorReturnItem(HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
     }
 
     @Post(value = "/receive-completed-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -931,6 +931,8 @@ public static <T extends Annotation> AnnotationValueBuilder<T> builder(Class<T>
             }
         } else if (enumType.isAssignableFrom(rawValue.getClass())) {
             list.add((E) rawValue);
+        } else {
+            convertToEnum(enumType, rawValue).ifPresent(list::add);
         }
         return list.toArray((E[]) Array.newInstance(enumType, 0));
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewMediaTypeCodecFactory.java
Patch:
@@ -29,7 +29,6 @@
 import javax.annotation.Nullable;
 import javax.inject.Named;
 import javax.inject.Singleton;
-
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -61,8 +60,8 @@ public class JsonViewMediaTypeCodecFactory implements JsonViewCodecResolver {
      * @param codecConfiguration       The configuration for the codec
      */
     protected JsonViewMediaTypeCodecFactory(ObjectMapper objectMapper,
-                              ApplicationConfiguration applicationConfiguration,
-                              @Named(CONFIGURATION_QUALIFIER) @Nullable CodecConfiguration codecConfiguration) {
+                          ApplicationConfiguration applicationConfiguration,
+                          @Named(CONFIGURATION_QUALIFIER) @Nullable CodecConfiguration codecConfiguration) {
         this.objectMapper = objectMapper;
         this.applicationConfiguration = applicationConfiguration;
         this.codecConfiguration = codecConfiguration;

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -17,8 +17,8 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
-import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.http.MediaType;
+import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
 import javax.annotation.Nullable;

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -32,7 +32,6 @@
 import java.net.URI;
 import java.util.*;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 /**

File: router/src/main/java/io/micronaut/web/router/exceptions/UnsatisfiedRouteException.java
Patch:
@@ -73,7 +73,7 @@ public static UnsatisfiedRouteException create(Argument<?> argument) {
             }
         }
 
-        throw new UnsatisfiedRouteException("Required argument [" + argument.getName() + "] not specified", argument);
+        throw new UnsatisfiedRouteException("Required argument [" + argument + "] not specified", argument);
     }
 
     /**

File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.ArrayUtils;
 
 import java.lang.reflect.ParameterizedType;
@@ -106,7 +105,7 @@ public DefaultArgument(Type type, String name, AnnotationMetadata annotationMeta
             throw new IllegalArgumentException(type.getClass().getSimpleName() + " types are not supported");
         }
         if (name == null) {
-            name = NameUtils.decapitalize(this.type.getSimpleName());
+            name = this.type.getSimpleName();
         }
         this.name = name;
         this.typeParameters = initializeTypeParameters(this.typeParameterArray);

File: router/src/main/java/io/micronaut/web/router/exceptions/UnsatisfiedRouteException.java
Patch:
@@ -52,8 +52,7 @@ public static UnsatisfiedRouteException create(Argument<?> argument) {
 
         if (classOptional.isPresent()) {
             Class<? extends Annotation> clazz = classOptional.get();
-            Optional<Object> valOptional = argument.getAnnotationMetadata().getValue(clazz);
-            String name = valOptional.orElse(argument).toString();
+            String name = argument.getAnnotationMetadata().stringValue(clazz).orElse(argument.getName());
 
             if (clazz == Body.class) {
                 throw new UnsatisfiedBodyRouteException(name, argument);
@@ -74,7 +73,7 @@ public static UnsatisfiedRouteException create(Argument<?> argument) {
             }
         }
 
-        throw new UnsatisfiedRouteException("Required argument [" + argument + "] not specified", argument);
+        throw new UnsatisfiedRouteException("Required argument [" + argument.getName() + "] not specified", argument);
     }
 
     /**

File: inject/src/main/java/io/micronaut/context/BeanContext.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.event.ApplicationEventPublisher;
 import io.micronaut.core.annotation.AnnotationMetadataResolver;
-import io.micronaut.core.attr.AttributeHolder;
 import io.micronaut.core.attr.MutableAttributeHolder;
 import io.micronaut.inject.BeanIdentifier;
 import io.micronaut.inject.validation.BeanDefinitionValidator;

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -81,16 +81,16 @@ public class DefaultEnvironment extends PropertySourcePropertyResolver implement
     private static final Boolean DEDUCE_ENVIRONMENT_DEFAULT = true;
 
     protected final ClassPathResourceLoader resourceLoader;
-    protected final List<PropertySource> refreshablePropertySources = new ArrayList<>();
+    protected final List<PropertySource> refreshablePropertySources = new ArrayList<>(10);
 
     private EnvironmentsAndPackage environmentsAndPackage;
 
     private final Set<String> names;
     private final ClassLoader classLoader;
     private final Collection<String> packages = new ConcurrentLinkedQueue<>();
     private final ClassPathAnnotationScanner annotationScanner;
-    private Collection<String> configurationIncludes = new HashSet<>();
-    private Collection<String> configurationExcludes = new HashSet<>();
+    private Collection<String> configurationIncludes = new HashSet<>(3);
+    private Collection<String> configurationExcludes = new HashSet<>(3);
     private final AtomicBoolean running = new AtomicBoolean(false);
     private Collection<PropertySourceLoader> propertySourceLoaderList;
     private final Map<String, PropertySourceLoader> loaderByFormatMap = new ConcurrentHashMap<>();

File: inject/src/main/java/io/micronaut/inject/BeanContextConditional.java
Patch:
@@ -17,6 +17,8 @@
 
 import io.micronaut.context.BeanContext;
 
+import javax.annotation.Nonnull;
+
 /**
  * Interface for other types that are conditional within a context.
  *
@@ -32,5 +34,5 @@ public interface BeanContextConditional {
      * @param context The context
      * @return True if it is
      */
-    boolean isEnabled(BeanContext context);
+    boolean isEnabled(@Nonnull BeanContext context);
 }

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -161,7 +161,7 @@ static boolean hasDefaultValues(String annotation) {
      */
     static void registerDefaultValues(String annotation, Map<String, Object> defaultValues) {
         if (StringUtils.isNotEmpty(annotation)) {
-            ANNOTATION_DEFAULTS.putIfAbsent(annotation, defaultValues);
+            ANNOTATION_DEFAULTS.put(annotation, defaultValues);
         }
     }
 

File: test-suite/src/test/java/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -94,7 +94,7 @@ public String throwError() {
     }
 
     // tag::globalError[]
-    @Error // <1>
+    @Error(global = true) // <1>
     public HttpResponse<JsonError> error(HttpRequest request, Throwable e) {
         JsonError error = new JsonError("Bad Things Happened: " + e.getMessage()) // <2>
                 .link(Link.SELF, Link.of(request.getUri()));

File: test-suite/src/test/java/io/micronaut/docs/config/builder/VehicleSpec.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.HashMap;
 
-import static org.testng.AssertJUnit.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 
 public class VehicleSpec {

File: test-suite/src/test/java/io/micronaut/docs/server/routes/IssuesControllerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.testng.Assert;
+import org.junit.jupiter.api.Assertions;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -48,15 +48,15 @@ public void testIssue() throws Exception {
 
     @Test
     public void testShowWithInvalidInteger() {
-        HttpClientResponseException e =Assert.expectThrows(HttpClientResponseException.class, () ->
+        HttpClientResponseException e =Assertions.assertThrows(HttpClientResponseException.class, () ->
                 client.toBlocking().exchange("/issues/hello"));
 
         assertEquals(400, e.getStatus().getCode()); // <5>
     }
 
     @Test
     public void testIssueWithoutNumber() {
-        HttpClientResponseException e =Assert.expectThrows(HttpClientResponseException.class, () ->
+        HttpClientResponseException e = Assertions.assertThrows(HttpClientResponseException.class, () ->
                 client.toBlocking().exchange("/issues/"));
 
         assertEquals(404, e.getStatus().getCode()); // <6>

File: test-suite/src/test/java/io/micronaut/docs/server/routes/IssuesControllerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.testng.Assert;
+import org.junit.jupiter.api.Assertions;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -48,15 +48,15 @@ public void testIssue() throws Exception {
 
     @Test
     public void testShowWithInvalidInteger() {
-        HttpClientResponseException e =Assert.expectThrows(HttpClientResponseException.class, () ->
+        HttpClientResponseException e =Assertions.assertThrows(HttpClientResponseException.class, () ->
                 client.toBlocking().exchange("/issues/hello"));
 
         assertEquals(400, e.getStatus().getCode()); // <5>
     }
 
     @Test
     public void testIssueWithoutNumber() {
-        HttpClientResponseException e =Assert.expectThrows(HttpClientResponseException.class, () ->
+        HttpClientResponseException e = Assertions.assertThrows(HttpClientResponseException.class, () ->
                 client.toBlocking().exchange("/issues/"));
 
         assertEquals(404, e.getStatus().getCode()); // <6>

File: test-suite/src/test/java/io/micronaut/docs/config/builder/VehicleSpec.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.HashMap;
 
-import static org.testng.AssertJUnit.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 
 public class VehicleSpec {

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.core.util.CollectionUtils;
-import io.micronaut.http.context.ContextPathProvider;
+import io.micronaut.http.context.ClientContextPathProvider;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
@@ -39,7 +39,7 @@
  * @since 1.0
  */
 @EachProperty(PREFIX)
-public class ServiceHttpClientConfiguration extends HttpClientConfiguration implements ContextPathProvider {
+public class ServiceHttpClientConfiguration extends HttpClientConfiguration implements ClientContextPathProvider {
 
     /**
      * Prefix for HTTP Client settings.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.server.netty.configuration;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Replaces;
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
@@ -34,6 +35,7 @@
  * @since 1.0
  */
 @ConfigurationProperties("netty")
+@Replaces(HttpServerConfiguration.class)
 public class NettyHttpServerConfiguration extends HttpServerConfiguration {
 
     /**

File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.util.Toggleable;
+import io.micronaut.http.context.ServerContextPathProvider;
 import io.micronaut.http.server.cors.CorsOriginConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 
@@ -40,7 +41,7 @@
  * @since 1.0
  */
 @ConfigurationProperties(value = HttpServerConfiguration.PREFIX, cliPrefix = "")
-public class HttpServerConfiguration {
+public class HttpServerConfiguration implements ServerContextPathProvider {
 
     /**
      * The default port value.
@@ -51,9 +52,9 @@ public class HttpServerConfiguration {
     /**
      * The prefix used for configuration.
      */
-
     public static final String PREFIX = "micronaut.server";
 
+
     /**
      * The default value random port.
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonViewMediaTypeCodecFactory.java
Patch:
@@ -59,7 +59,7 @@ public class JsonViewMediaTypeCodecFactory implements JsonViewCodecResolver {
     /**
      * @param objectMapper             To read/write JSON
      * @param applicationConfiguration The common application configurations
-     * @param beanContext
+     * @param beanContext              Bean context
      * @param codecConfiguration       The configuration for the codec
      */
     protected JsonViewMediaTypeCodecFactory(ObjectMapper objectMapper,

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -44,8 +44,9 @@ public class JsonMediaTypeCodec extends AbstractJacksonMediaTypeCodec {
     public static final String CONFIGURATION_QUALIFIER = "json";
 
     /**
-     * @param objectMapper             To read/write JSON
+     * @param objectMapper             To read/write JSON. If null, will be retrieved from beanContext
      * @param applicationConfiguration The common application configurations
+     * @param beanContext              Bean context that will be used to lookup object mapper if it was not provided
      * @param codecConfiguration       The configuration for the codec
      */
     @Inject

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -58,7 +58,8 @@ public JsonStreamMediaTypeCodec(ObjectMapper objectMapper,
             this.additionalTypes = codecConfiguration.getAdditionalTypes();
         } else {
             this.additionalTypes = Collections.emptyList();
-        }    }
+        }
+    }
 
     @Override
     public Collection<MediaType> getMediaTypes() {

File: xml/src/main/java/io/micronaut/xml/codec/XmlMediaTypeCodec.java
Patch:
@@ -45,8 +45,9 @@ public class XmlMediaTypeCodec extends AbstractJacksonMediaTypeCodec {
     public static final String CONFIGURATION_QUALIFIER = "xml";
 
     /**
-     * @param xmlMapper                Object mapper for xml
+     * @param xmlMapper                Object mapper for xml. If null, retrieved from beanContext
      * @param applicationConfiguration The common application configurations
+     * @param beanContext              Bean context that will be used to retrieve object mapper if one was not provided
      * @param codecConfiguration       The configuration for the codec
      */
     @Inject

File: xml/src/main/java/io/micronaut/xml/server/convert/XmlMapperFactory.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.xml.server.convert;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
@@ -65,7 +64,7 @@ public class XmlMapperFactory {
     protected BeanDeserializerModifier[] beanDeserializerModifiers = new BeanDeserializerModifier[0];
 
     /**
-     * Builds the core Jackson {@link ObjectMapper} from the optional configuration and {@link JsonFactory}.
+     * Builds the core Jackson {@link ObjectMapper} from the optional configuration and {@link com.fasterxml.jackson.core.JsonFactory}.
      *
      * @param jacksonConfiguration The configuration
      * @return The {@link ObjectMapper}

File: xml/src/main/java/io/micronaut/xml/server/convert/XmlStreamConvertibleValues.java
Patch:
@@ -77,14 +77,14 @@ public Collection<V> values() {
     public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {
         try {
             FromXmlParser parser = xmlMapper.getFactory().createParser(stream.copy());
-            FieldRenamerJsonParser fieldParser = new FieldRenamerJsonParser(
+            SelectiveJsonParser xmlParser = new SelectiveJsonParser(
                     name.toString(), ParsedValueHolder.VALUE_FIELD_NAME, parser
             );
 
             JavaType javaType = xmlMapper.getTypeFactory()
                     .constructParametricType(ParsedValueHolder.class, conversionContext.getArgument().getType());
 
-            ParsedValueHolder<T> valueHolder = xmlMapper.readValue(fieldParser, javaType);
+            ParsedValueHolder<T> valueHolder = xmlMapper.readValue(xmlParser, javaType);
             return Optional.of(valueHolder.getValue());
 
         } catch (Exception e) {

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.http.context.ClientContextPathProvider;
-import io.micronaut.http.context.ContextPathProvider;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 

File: http/src/main/java/io/micronaut/http/context/ServerContextPathProvider.java
Patch:
@@ -25,6 +25,9 @@
  */
 public interface ServerContextPathProvider {
 
+    /**
+     * @return The server context path, or null
+     */
     @Nullable
     String getContextPath();
 }

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceConfiguration.java
Patch:
@@ -75,6 +75,7 @@ public StaticResourceConfiguration(ResourceResolver resourceResolver) {
 
     /**
      * @param resourceResolver The {@linkplain ResourceResolver}
+     * @param contextPathProvider The context path provider
      */
     @Inject
     public StaticResourceConfiguration(ResourceResolver resourceResolver,

File: validation/src/main/java/io/micronaut/validation/ValidatingInterceptor.java
Patch:
@@ -29,6 +29,7 @@
 import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
+import javax.validation.Constraint;
 import javax.validation.ConstraintViolation;
 import javax.validation.ConstraintViolationException;
 import javax.validation.Valid;
@@ -120,7 +121,7 @@ public Object intercept(MethodInvocationContext context) {
             final boolean supportsReactive = micronautValidator instanceof ReactiveValidator;
             if (constraintViolations.isEmpty()) {
                 final Object result = context.proceed();
-                if (context.hasStereotype(Valid.class)) {
+                if (context.hasStereotype(Valid.class) || context.hasStereotype(Constraint.class)) {
                     final boolean hasResult = result != null;
                     if (supportsReactive & hasResult && Publishers.isConvertibleToPublisher(result)) {
                         ReactiveValidator reactiveValidator = (ReactiveValidator) micronautValidator;

File: spring/src/test/groovy/io/micronaut/spring/tx/MetaTransactionalBean.java
Patch:
@@ -8,7 +8,7 @@
 @MetaAnnotation
 public class MetaTransactionalBean {
 
-    String doSomething() {
+    public String doSomething() {
         // should not throw
         final TransactionStatus transactionStatus = TransactionAspectSupport.currentTransactionStatus();
         Assert.assertNotNull(transactionStatus);

File: spring/src/test/groovy/io/micronaut/spring/tx/TransactionalBean.java
Patch:
@@ -26,7 +26,7 @@
 @Singleton
 public class TransactionalBean {
 
-    String doSomething() {
+    public String doSomething() {
         // should not throw
         final TransactionStatus transactionStatus = TransactionAspectSupport.currentTransactionStatus();
         Assert.assertNotNull(transactionStatus);

File: function-web/src/test/groovy/io/micronaut/function/web/TestFunctionFactory.java
Patch:
@@ -75,7 +75,7 @@ Function<String, String> roundXml() {
     @FunctionBean("java/function/json")
     @Consumes(MediaType.APPLICATION_JSON)
     Function<String, String> roundJson() {
-        return (hi) -> hi;
+        return (String hi) -> hi;
     }
 
     static class Name {

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -29,6 +29,7 @@
 
 import javax.annotation.Nullable;
 import javax.inject.Inject;
+import javax.inject.Named;
 import javax.inject.Singleton;
 import java.text.SimpleDateFormat;
 import java.util.Locale;
@@ -78,6 +79,7 @@ public class ObjectMapperFactory {
      */
     @Singleton
     @Primary
+    @Named("json")
     @BootstrapContextCompatible
     public ObjectMapper objectMapper(@Nullable JacksonConfiguration jacksonConfiguration,
                                      @Nullable JsonFactory jsonFactory) {

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.jackson.codec;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.micronaut.context.BeanContext;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.codec.CodecConfiguration;
@@ -53,9 +52,8 @@ public class JsonStreamMediaTypeCodec extends JsonMediaTypeCodec {
     @Inject
     public JsonStreamMediaTypeCodec(ObjectMapper objectMapper,
                                     ApplicationConfiguration applicationConfiguration,
-                                    BeanContext beanContext,
                                     @Named(CONFIGURATION_QUALIFIER) @Nullable CodecConfiguration codecConfiguration) {
-        super(objectMapper, applicationConfiguration, beanContext, null);
+        super(objectMapper, applicationConfiguration, null);
         if (codecConfiguration != null) {
             this.additionalTypes = codecConfiguration.getAdditionalTypes();
         } else {

File: xml/src/main/java/io/micronaut/xml/server/convert/XmlStreamToObjectConverter.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.xml.XmlMapper;
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.convert.value.ConvertibleValues;
@@ -35,7 +34,6 @@
  */
 @Singleton
 @Internal
-@Requires(classes = XmlMapper.class)
 public class XmlStreamToObjectConverter implements TypeConverter<ByteArrayXmlStreamReader, Object> {
 
     private final XmlMapper xmlMapper;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/xml/XmlContentProcessor.java
Patch:
@@ -80,6 +80,7 @@ public class XmlContentProcessor extends AbstractBufferingHttpContentProcessor<O
 
 
     /**
+     * @param xmlMapper        Jackson mapper for xml
      * @param nettyHttpRequest The {@link NettyHttpRequest}
      * @param configuration    The {@link HttpServerConfiguration}
      */

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -192,7 +192,7 @@ private void processIntrospected(ClassElement element, VisitorContext context, A
                         final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(
                                 element.getName(),
                                 index.getAndIncrement(),
-                                ce.getName(),
+                                ce,
                                 metadata ? element.getAnnotationMetadata() : null
                         );
 
@@ -216,7 +216,7 @@ private void processIntrospected(ClassElement element, VisitorContext context, A
                         final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(
                                 element.getName(),
                                 j++,
-                                classElement.getName(),
+                                classElement,
                                 metadata ? element.getAnnotationMetadata() : null
                         );
 
@@ -227,7 +227,7 @@ private void processIntrospected(ClassElement element, VisitorContext context, A
         } else {
 
             final BeanIntrospectionWriter writer = new BeanIntrospectionWriter(
-                    element.getName(),
+                    element,
                     metadata ? element.getAnnotationMetadata() : null
             );
 

File: runtime/src/main/java/io/micronaut/cache/annotation/Cacheable.java
Patch:
@@ -51,6 +51,7 @@
      * @return The cache names
      */
     @AliasFor(member = "cacheNames")
+    @AliasFor(annotation = CacheConfig.class, member = "cacheNames")
     String[] value() default {};
 
     /**

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -40,7 +40,6 @@
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * Delegates to Netty's {@link FullHttpResponse}.

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.HashSet;
 import java.util.Optional;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 /**
  * Default implementation of {@link MutableHttpRequest} for the {@link HttpClient}.

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpRequest.java
Patch:
@@ -30,7 +30,6 @@
 import java.net.URISyntaxException;
 import java.util.Optional;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 /**
  * Simple {@link MutableHttpRequest} implementation.

File: cli/src/main/groovy/io/micronaut/cli/profile/Profile.java
Patch:
@@ -51,8 +51,9 @@ public interface Profile {
     String getMainClassName();
 
     /**
-     * Set the mainClassName
-     * @param mainClassName
+     * Set the mainClassName.
+     *
+     * @param mainClassName the name to set
      */
     void setMainClassName(String mainClassName);
 

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -40,7 +40,7 @@
 @TypeHint(value = {
         NioServerSocketChannel.class,
         NioSocketChannel.class
-}, typeNames = {"sun.security.ssl.SSLContextImpl$TLSContext", "sun.nio.ch.SelectorImpl"},
+}, typeNames = {"sun.security.ssl.SSLContextImpl$TLSContext"},
    accessType = {TypeHint.AccessType.ALL_DECLARED_CONSTRUCTORS, TypeHint.AccessType.ALL_DECLARED_FIELDS}
 )
 public class NettyThreadFactory {

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.HashSet;
 import java.util.Optional;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 /**
  * Default implementation of {@link MutableHttpRequest} for the {@link HttpClient}.

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpRequest.java
Patch:
@@ -30,7 +30,6 @@
 import java.net.URISyntaxException;
 import java.util.Optional;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 /**
  * Simple {@link MutableHttpRequest} implementation.

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceResolver.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.web.router.resource;
 
-import io.micronaut.context.annotation.Value;
 import io.micronaut.core.io.ResourceLoader;
 import io.micronaut.core.util.AntPathMatcher;
 import io.micronaut.core.util.CollectionUtils;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -30,7 +30,6 @@
 
 import javax.annotation.Nonnull;
 import javax.inject.Singleton;
-import java.util.Arrays;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.Supplier;

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -139,7 +139,7 @@ public MutableHttpRequest<B> cookies(Set<Cookie> cookies) {
             }
         });
 
-        if(cookieString.get().length() > 0) {
+        if (cookieString.get().length() > 0) {
             headers.add(HttpHeaderNames.COOKIE, cookieString.get());
         }
 

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -145,7 +145,7 @@ public MutableHttpResponse<B> cookies(Set<Cookie> cookies) {
             }
         });
 
-        if(cookieString.get().length() > 0) {
+        if (cookieString.get().length() > 0) {
             headers.add(HttpHeaderNames.COOKIE, cookieString.get());
         }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessorResolver.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.http.annotation.Body;
 import io.micronaut.http.server.netty.configuration.NettyHttpServerConfiguration;
 import io.micronaut.inject.ExecutionHandle;
-import io.micronaut.web.router.MethodBasedRouteMatch;
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;
 

File: test-suite/src/test/java/io/micronaut/docs/server/endpoint/MessageEndpoint.java
Patch:
@@ -41,7 +41,7 @@ public String message() {
 
     //tag::writeArg[]
     @Write(consumes = MediaType.APPLICATION_FORM_URLENCODED, produces = MediaType.TEXT_PLAIN)
-    public String updateMessage(String newMessage) {  //<1>
+    public String updateMessage(String newMessage) {
         this.message = newMessage;
 
         return "Message updated";

File: router/src/main/java/io/micronaut/web/router/Router.java
Patch:
@@ -57,7 +57,7 @@ public interface Router {
      */
     default @Nonnull <T, R> Stream<UriRouteMatch<T, R>> findAny(@Nonnull CharSequence uri, @Nullable HttpRequest<?> context) {
         return findAny(uri);
-    };
+    }
 
     /**
      * Finds all of the possible routes for the given HTTP method and URI.

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -40,7 +40,7 @@
 @TypeHint(value = {
         NioServerSocketChannel.class,
         NioSocketChannel.class
-}, typeNames = {"sun.security.ssl.SSLContextImpl$TLSContext", "sun.nio.ch.SelectorImpl"},
+}, typeNames = {"sun.security.ssl.SSLContextImpl$TLSContext"},
    accessType = {TypeHint.AccessType.ALL_DECLARED_CONSTRUCTORS, TypeHint.AccessType.ALL_DECLARED_FIELDS}
 )
 public class NettyThreadFactory {

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineController.java
Patch:
@@ -32,7 +32,7 @@
 public class HeadlineController {
 
     // tag::streaming[]
-    @Get(value = "/headlines", produces = MediaType.APPLICATION_JSON_STREAM) // <1>
+    @Get(value = "/headlines", processes = MediaType.APPLICATION_JSON_STREAM) // <1>
     Flowable<Headline> streamHeadlines() {
         return Flowable.fromCallable(() -> {  // <2>
             Headline headline = new Headline();

File: test-suite/src/test/java/io/micronaut/docs/sse/HeadlineController.java
Patch:
@@ -14,7 +14,7 @@
 public class HeadlineController {
 
     // tag::streaming[]
-    @Get(value = "/headlines", produces = MediaType.TEXT_EVENT_STREAM) // <1>
+    @Get(value = "/headlines", processes = MediaType.TEXT_EVENT_STREAM) // <1>
     Flux<Event<Headline>> streamHeadlines() {
         return Flux.<Event<Headline>>create((emitter) -> {  // <2>
             Headline headline = new Headline();

File: test-suite/src/test/java/io/micronaut/docs/streaming/HeadlineController.java
Patch:
@@ -34,7 +34,7 @@
 public class HeadlineController {
 
     // tag::streaming[]
-    @Get(value = "/headlines", produces = MediaType.APPLICATION_JSON_STREAM) // <1>
+    @Get(value = "/headlines", processes = MediaType.APPLICATION_JSON_STREAM) // <1>
     Flowable<Headline> streamHeadlines() {
         return Flowable.fromCallable(() -> {  // <2>
             Headline headline = new Headline();

File: router/src/main/java/io/micronaut/web/router/Router.java
Patch:
@@ -57,7 +57,7 @@ public interface Router {
      */
     default @Nonnull <T, R> Stream<UriRouteMatch<T, R>> findAny(@Nonnull CharSequence uri, @Nullable HttpRequest<?> context) {
         return findAny(uri);
-    };
+    }
 
     /**
      * Finds all of the possible routes for the given HTTP method and URI.

File: test-suite/src/test/java/io/micronaut/docs/server/endpoint/MessageEndpoint.java
Patch:
@@ -41,7 +41,7 @@ public String message() {
 
     //tag::writeArg[]
     @Write(consumes = MediaType.APPLICATION_FORM_URLENCODED, produces = MediaType.TEXT_PLAIN)
-    public String updateMessage(String newMessage) {  //<1>
+    public String updateMessage(String newMessage) {
         this.message = newMessage;
 
         return "Message updated";

File: router/src/main/java/io/micronaut/web/router/Router.java
Patch:
@@ -59,7 +59,7 @@ public interface Router {
      */
     default @Nonnull <T, R> Stream<UriRouteMatch<T, R>> findAny(@Nonnull CharSequence uri, @Nullable HttpRequest<?> context) {
         return findAny(uri);
-    };
+    }
 
     /**
      * Finds all of the possible routes for the given HTTP method and URI.
@@ -303,6 +303,4 @@ default <T, R> Optional<UriRouteMatch<T, R>> HEAD(@Nonnull CharSequence uri) {
         return route(HttpMethod.HEAD, uri);
     }
 
-
-
 }

File: test-suite/src/test/java/io/micronaut/docs/server/endpoint/CurrentDateEndpoint.java
Patch:
@@ -11,7 +11,6 @@
 //tag::mediaTypeImport[]
 import io.micronaut.http.MediaType;
 import io.micronaut.management.endpoint.annotation.Selector;
-
 //end::mediaTypeImport[]
 
 //tag::writeImport[]

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -253,7 +253,7 @@ protected void readAnnotationRawValues(
     }
 
     @Override
-    protected Object readAnnotationValue(Element originatingElement, String memberName, Object annotationValue) {
+    protected Object readAnnotationValue(Element originatingElement, Element member, String memberName, Object annotationValue) {
         if (memberName != null && annotationValue instanceof javax.lang.model.element.AnnotationValue) {
             final MetadataAnnotationValueVisitor visitor = new MetadataAnnotationValueVisitor(originatingElement);
             ((javax.lang.model.element.AnnotationValue) annotationValue).accept(visitor, this);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -120,7 +120,7 @@ protected void doOnNext(Object message) {
                                     if (LOG.isDebugEnabled()) {
                                         LOG.debug("Cannot convert message for argument [{}] and value: {}", context.getArgument(), message);
                                     }
-                                    subscriber.onError(new UnsatisfiedRouteException(context.getArgument()));
+                                    subscriber.onError(UnsatisfiedRouteException.create(context.getArgument()));
                                 }
                             } finally {
                                 s.cancel();

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -275,15 +275,15 @@ public R execute(Map<String, Object> argumentValues) {
                                 ConversionError conversionError = conversionErrors.iterator().next();
                                 throw new ConversionErrorException(argument, conversionError);
                             } else {
-                                throw new UnsatisfiedRouteException(argument);
+                                throw UnsatisfiedRouteException.create(argument);
                             }
                         }
 
                     }
                 } else if (value instanceof ConversionError) {
                     throw new ConversionErrorException(argument, (ConversionError) value);
                 } else if (value == DefaultRouteBuilder.NO_VALUE) {
-                    throw new UnsatisfiedRouteException(argument);
+                    throw UnsatisfiedRouteException.create(argument);
                 } else {
                     ConversionContext conversionContext = ConversionContext.of(argument);
                     Optional<?> result = conversionService.convert(value, argument.getType(), conversionContext);
@@ -355,7 +355,7 @@ protected Object resolveValueOrError(Argument argument, ConversionContext conver
                 return null;
             }
             throw lastError.map(conversionError ->
-                (RuntimeException) new ConversionErrorException(argument, conversionError)).orElseGet(() -> new UnsatisfiedRouteException(argument)
+                (RuntimeException) new ConversionErrorException(argument, conversionError)).orElseGet(() -> UnsatisfiedRouteException.create(argument)
             );
         } else {
             return result.get();

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.io.buffer.ByteBufferFactory;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
-import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
 
 import javax.inject.Singleton;
@@ -54,7 +53,6 @@ public class NettyByteBufferFactory implements ByteBufferFactory<ByteBufAllocato
             }
             throw new IllegalArgumentException("Unconvertible buffer type " + byteBuffer);
         });
-        ConversionService.SHARED.addConverter(CompositeByteBuf.class, ByteBuffer.class, (Function<CompositeByteBuf, ByteBuffer>) DEFAULT::wrap);
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/ByteBufConverters.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;
-import io.micronaut.core.io.buffer.ByteBuffer;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.CompositeByteBuf;
@@ -80,6 +79,7 @@ TypeConverter<CompositeByteBuf, byte[]> compositeByteBufTypeConverter() {
     }
 
     /**
+     * @param conversionService The conversion service
      * @return A converter that converts composite bytebufs to object
      */
     @Singleton

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.core.io.buffer.ByteBufferFactory;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
+import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
 
 import javax.inject.Singleton;
@@ -53,6 +54,7 @@ public class NettyByteBufferFactory implements ByteBufferFactory<ByteBufAllocato
             }
             throw new IllegalArgumentException("Unconvertible buffer type " + byteBuffer);
         });
+        ConversionService.SHARED.addConverter(CompositeByteBuf.class, ByteBuffer.class, (Function<CompositeByteBuf, ByteBuffer>) DEFAULT::wrap);
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -303,7 +303,7 @@ public RouteMatch<?> getMatchedRoute() {
      * @param httpContent The HttpContent as {@link ByteBufHolder}
      */
     @Internal
-    void addContent(ByteBufHolder httpContent) {
+    public void addContent(ByteBufHolder httpContent) {
         if (httpContent instanceof AbstractHttpData) {
             receivedData.computeIfAbsent(System.identityHashCode(httpContent), (key) -> {
                 httpContent.retain();

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -70,7 +70,7 @@ default Class<V> getValueType() {
      * @return True if it is
      */
     default boolean contains(String name) {
-        return get(name, Object.class).isPresent();
+        return get(name, Argument.OBJECT_ARGUMENT).isPresent();
     }
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java
Patch:
@@ -71,7 +71,7 @@ default Argument<?> getErrorType(MediaType mediaType) {
         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {
             return Argument.of(VndError.class);
         } else {
-            return Argument.of(String.class);
+            return Argument.STRING;
         }
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -141,6 +141,7 @@ class RoutingInBoundHandler extends SimpleChannelInboundHandler<io.micronaut.htt
     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);
     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
             "^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$", Pattern.CASE_INSENSITIVE);
+    private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);
 
     private final Router router;
     private final ExecutorSelector executorSelector;
@@ -769,7 +770,7 @@ protected void doOnNext(Object message) {
                                 Argument typeVariable;
 
                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {
-                                    typeVariable = Argument.of(PartData.class);
+                                    typeVariable = ARGUMENT_PART_DATA;
                                 } else {
                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
                                 }
@@ -784,7 +785,7 @@ protected void doOnNext(Object message) {
                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {
                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);
                                     if (streamingFileUpload) {
-                                        typeVariable = Argument.of(PartData.class);
+                                        typeVariable = ARGUMENT_PART_DATA;
                                     } else {
                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
                                     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -49,6 +49,8 @@
 public class CompletableFutureBodyBinder extends DefaultBodyAnnotationBinder<CompletableFuture>
     implements NonBlockingBodyArgumentBinder<CompletableFuture> {
 
+    private static final Argument<CompletableFuture> TYPE = Argument.of(CompletableFuture.class);
+
     private final BeanLocator beanLocator;
     private final HttpServerConfiguration httpServerConfiguration;
 
@@ -65,7 +67,7 @@ public CompletableFutureBodyBinder(BeanLocator beanLocator, HttpServerConfigurat
 
     @Override
     public Argument<CompletableFuture> argumentType() {
-        return Argument.of(CompletableFuture.class);
+        return TYPE;
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -54,6 +54,7 @@
 public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {
 
     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);
+    private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);
 
     private final BeanLocator beanLocator;
     private final HttpServerConfiguration httpServerConfiguration;
@@ -71,7 +72,7 @@ public PublisherBodyBinder(ConversionService conversionService, BeanLocator bean
 
     @Override
     public Argument<Publisher> argumentType() {
-        return Argument.of(Publisher.class);
+        return TYPE;
     }
 
     @Override

File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java
Patch:
@@ -259,7 +259,7 @@ protected Object interceptCompletableFuture(MethodInvocationContext<Object, Obje
             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));
             Object key = keyGenerator.generateKey(context, params);
             CompletableFuture<Object> thisFuture = new CompletableFuture<>();
-            Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));
+            Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {
                 if (throwable == null && o.isPresent()) {
                     // cache hit, return result
@@ -503,7 +503,7 @@ private Publisher<Object> buildCacheablePublisher(
         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);
         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));
         Object key = keyGenerator.generateKey(context, params);
-        Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));
+        Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
 
         Maybe<Object> maybe = Maybe.create(emitter -> {
             asyncCache.get(key, firstTypeVariable).whenComplete((opt, throwable) -> {

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java
Patch:
@@ -20,7 +20,7 @@
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
 import io.micronaut.core.annotation.Introspected;
-import io.micronaut.core.type.Argument;
+import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.util.CollectionUtils;
 
 import java.io.File;
@@ -40,7 +40,7 @@ public boolean matches(ConditionContext context) {
         if (beanContext instanceof ApplicationContext) {
             List<String> paths = ((ApplicationContext) beanContext)
                     .getEnvironment()
-                    .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))
+                    .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)
                     .orElse(null);
 
             if (CollectionUtils.isNotEmpty(paths)) {

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -42,6 +42,8 @@
 @Requires(classes = HttpServerConfiguration.class)
 public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {
 
+    private static final Argument<Session> TYPE = Argument.of(Session.class);
+
     private final SessionStore<Session> sessionStore;
 
     /**
@@ -55,7 +57,7 @@ public SessionArgumentBinder(SessionStore<Session> sessionStore) {
 
     @Override
     public Argument<Session> argumentType() {
-        return Argument.of(Session.class);
+        return TYPE;
     }
 
     @Override

File: core/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -285,8 +285,8 @@ public static boolean isConvertibleToPublisher(Object object) {
      * @return The Resulting in publisher
      */
     public static <T> T convertPublisher(Object object, Class<T> publisherType) {
-        Objects.requireNonNull(object, "Invalid argument [object]: " + object);
-        Objects.requireNonNull(object, "Invalid argument [publisherType]: " + publisherType);
+        Objects.requireNonNull(object, "Argument [object] cannot be null");
+        Objects.requireNonNull(publisherType, "Argument [publisherType] cannot be null");
         if (object instanceof CompletableFuture) {
             @SuppressWarnings("unchecked") Publisher<T> futurePublisher = (Publisher<T>) Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));
             return ConversionService.SHARED.convert(futurePublisher, publisherType)

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -205,7 +205,7 @@ public String expand(Map<String, Object> parameters) {
         for (PathSegment segment : segments) {
             String result = segment.expand(parameters, anyPreviousHasContent, anyPreviousHasOperator);
             if (result == null) {
-                break;
+                continue;
             }
             if (segment instanceof UriTemplateParser.VariablePathSegment) {
                 UriTemplateParser.VariablePathSegment varPathSegment = (UriTemplateParser.VariablePathSegment) segment;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.aop.Introduction;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.io.service.ServiceDefinition;
 import io.micronaut.core.io.service.SoftServiceLoader;
 import io.micronaut.core.order.OrderUtil;
@@ -194,7 +195,7 @@ public Object visitType(TypeElement classElement, Object o) {
                     concreteClass.getQualifiedName().equals(classElement.getQualifiedName());
 
             if (shouldVisit) {
-                if (typeAnnotationMetadata.hasStereotype(Introduction.class)) {
+                if (typeAnnotationMetadata.hasStereotype(Introduction.class) || (typeAnnotationMetadata.hasStereotype(Introspected.class) && modelUtils.isAbstract(classElement))) {
                     classElement.asType().accept(new PublicAbstractMethodVisitor<Object, Object>(classElement, modelUtils, elementUtils) {
                         @Override
                         protected void accept(DeclaredType type, Element element, Object o) {

File: core/src/main/java/io/micronaut/core/bind/annotation/Bindable.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.ANNOTATION_TYPE})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.PARAMETER})
 public @interface Bindable {
 
     /**

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationProperties.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micronaut.context.annotation;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 /**
  * <p>Defines a singleton bean whose property values are resolved from a {@link io.micronaut.core.value.PropertyResolver}.</p>
  * <p>
@@ -41,7 +41,7 @@
 @Singleton
 @Documented
 @Retention(RUNTIME)
-@Target(ElementType.TYPE)
+@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR})
 @ConfigurationReader
 public @interface ConfigurationProperties {
 

File: test-suite/src/test/java/io/micronaut/docs/config/properties/VehicleSpec.java
Patch:
@@ -19,10 +19,11 @@ public void testStartVehicle() {
         ApplicationContext applicationContext = ApplicationContext.run(map, "test");
 
         Vehicle vehicle = applicationContext.getBean(Vehicle.class);
-        DefaultGroovyMethods.println(this, vehicle.start());
+        System.out.println(vehicle.start());
         // end::start[]
 
         assertEquals("Ford Engine Starting V8 [rodLength=6.0]", vehicle.start());
+        applicationContext.close();
     }
 
 }

File: validation/src/main/java/io/micronaut/validation/ValidatingInterceptor.java
Patch:
@@ -116,7 +116,7 @@ public Object intercept(MethodInvocationContext context) {
             Set<ConstraintViolation<Object>> constraintViolations = this.micronautValidator.validateParameters(
                     target,
                     executableMethod,
-                    context.getParameters().values());
+                    context.getParameterValues());
             final boolean supportsReactive = micronautValidator instanceof ReactiveValidator;
             if (constraintViolations.isEmpty()) {
                 final Object result = context.proceed();

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -205,7 +205,7 @@ public String expand(Map<String, Object> parameters) {
         for (PathSegment segment : segments) {
             String result = segment.expand(parameters, anyPreviousHasContent, anyPreviousHasOperator);
             if (result == null) {
-                break;
+                continue;
             }
             if (segment instanceof UriTemplateParser.VariablePathSegment) {
                 UriTemplateParser.VariablePathSegment varPathSegment = (UriTemplateParser.VariablePathSegment) segment;

File: core/src/main/java/io/micronaut/core/annotation/Creator.java
Patch:
@@ -31,6 +31,6 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE})
+@Target({ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE, ElementType.METHOD})
 public @interface Creator {
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -52,7 +52,9 @@ protected SuperclassAwareTypeVisitor(Types types) {
     public R visitDeclared(DeclaredType type, P p) {
         Element element = type.asElement();
 
-        while ((JavaModelUtils.isClassOrInterface(element)) && !element.toString().equals(Object.class.getName())) {
+        while ((JavaModelUtils.isClassOrInterface(element) || JavaModelUtils.isEnum(element)) &&
+                !element.toString().equals(Object.class.getName()) &&
+                !element.toString().equals(Enum.class.getName())) {
             TypeElement typeElement = (TypeElement) element;
             List<? extends Element> enclosedElements = typeElement.getEnclosedElements();
             for (Element enclosedElement : enclosedElements) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -96,7 +96,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
 
         roundEnv.getRootElements()
                 .stream()
-                .filter(JavaModelUtils::isClassOrInterface)
+                .filter(element -> JavaModelUtils.isClassOrInterface(element) || JavaModelUtils.isEnum(element))
                 .map(modelUtils::classElementFor)
                 .filter(typeElement -> typeElement == null || (groovyObjectType == null || !typeUtils.isAssignable(typeElement.asType(), groovyObjectType)))
                 .forEach((typeElement) -> {

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -197,6 +197,9 @@ public boolean containsProperties(@Nullable String name) {
                 if (keyFormat == null) {
                     keyFormat = StringConvention.RAW;
                 }
+                if (entries == null) {
+                    return Collections.emptyMap();
+                }
                 return resolveSubMap(
                         name,
                         entries,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -23,7 +23,7 @@
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;
-import io.reactivex.subjects.ReplaySubject;
+import io.reactivex.processors.UnicastProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,7 +49,7 @@ public class HttpDataReference {
 
     private static final Logger LOG = LoggerFactory.getLogger(HttpDataReference.class);
 
-    final AtomicReference<ReplaySubject> subject = new AtomicReference<>();
+    final AtomicReference<UnicastProcessor> subject = new AtomicReference<>();
     final AtomicReference<StreamingFileUpload> upload = new AtomicReference<>();
 
     private final HttpData data;

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.core.order.OrderUtil;
 import io.micronaut.core.reflect.ClassUtils;
-import io.micronaut.core.util.StreamUtils;
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpStatus;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1189,6 +1189,7 @@ protected Object getLoadBalancerDiscriminator() {
      * @param uri      The URI to connect to
      * @param sslCtx   The SslContext instance
      * @param isStream Is the connection a stream connection
+     * @throws HttpClientException If the URI is invalid
      * @return A ChannelFuture
      */
     protected ChannelFuture doConnect(

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospection.java
Patch:
@@ -82,7 +82,7 @@ public Optional<BeanProperty<T, Object>> getIndexedProperty(@Nonnull Class<? ext
 
     @Nonnull
     @Override
-    public T instantiate(Object... arguments) throws InstantiationException {
+    public T instantiate(boolean strictNullable, Object... arguments) throws InstantiationException {
         ArgumentUtils.requireNonNull("arguments", arguments);
         final Argument<?>[] constructorArguments = getConstructorArguments();
         if (constructorArguments.length != arguments.length) {
@@ -93,7 +93,7 @@ public T instantiate(Object... arguments) throws InstantiationException {
             Argument<?> constructorArgument = constructorArguments[i];
             final Object specified = arguments[i];
             if (specified == null) {
-                if (constructorArgument.isDeclaredNullable()) {
+                if (constructorArgument.isDeclaredNullable() || !strictNullable) {
                     continue;
                 } else {
                     throw new InstantiationException("Null argument specified for [" + constructorArgument.getName() + "]. If this argument is allowed to be null annotate it with @Nullable");

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/MyDataCenterInfo.java
Patch:
@@ -17,10 +17,12 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.micronaut.core.annotation.Introspected;
 
 /**
  * @author Tomasz Bak
  */
+@Introspected
 public class MyDataCenterInfo implements DataCenterInfo {
 
     private final Name name;

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -448,8 +448,8 @@ private Map<String, Object> toTypeArguments(@NotNull Map<String, ClassElement> t
         for (Map.Entry<String, ClassElement> entry : typeArguments.entrySet()) {
             final ClassElement ce = entry.getValue();
             String className = ce.getName();
-            if (!visitedTypes.contains(className)) {
-                visitedTypes.add(className);
+            if (!visitedTypes.contains(entry.getKey())) {
+                visitedTypes.add(entry.getKey());
                 final Map<String, ClassElement> subArgs = ce.getTypeArguments();
                 if (CollectionUtils.isNotEmpty(subArgs)) {
                     Map<String, Object> m = toTypeArguments(subArgs, visitedTypes);

File: validation/src/main/java/io/micronaut/validation/validator/messages/DefaultValidationMessages.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.validation.validator.messages;
 
 import io.micronaut.context.StaticMessageSource;
+import io.micronaut.core.annotation.Introspected;
 
 import javax.inject.Singleton;
 import javax.validation.constraints.*;
@@ -60,5 +61,7 @@ public DefaultValidationMessages() {
         addMessage(Positive.class.getName() + MESSAGE_SUFFIX, "must be greater than 0");
         addMessage(PositiveOrZero.class.getName() + MESSAGE_SUFFIX, "must be greater than or equal to 0");
         addMessage(Size.class.getName() + MESSAGE_SUFFIX, "size must be between {min} and {max}");
+
+        addMessage(Introspected.class.getName() + MESSAGE_SUFFIX, "Cannot validate {type}. No bean introspection present. Please add @Introspected to the class and ensure Micronaut annotation processing is enabled");
     }
 }

File: validation/src/main/java/io/micronaut/validation/validator/messages/DefaultValidationMessages.java
Patch:
@@ -62,6 +62,6 @@ public DefaultValidationMessages() {
         addMessage(PositiveOrZero.class.getName() + MESSAGE_SUFFIX, "must be greater than or equal to 0");
         addMessage(Size.class.getName() + MESSAGE_SUFFIX, "size must be between {min} and {max}");
 
-        addMessage(Introspected.class.getName() + MESSAGE_SUFFIX, "Cannot validate {type}. No bean introspection present");
+        addMessage(Introspected.class.getName() + MESSAGE_SUFFIX, "Cannot validate {type}. No bean introspection present. Please add @Introspected to the class and ensure Micronaut annotation processing is enabled");
     }
 }

File: session/src/main/java/io/micronaut/session/InMemorySessionStore.java
Patch:
@@ -28,7 +28,6 @@
 import java.time.Instant;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ScheduledExecutorService;
 
 /**
  * Default implementation that stores sessions in-memory.

File: core/src/main/java/io/micronaut/core/io/ResourceResolver.java
Patch:
@@ -39,14 +39,14 @@ public class ResourceResolver {
     private final List<ResourceLoader> resourceLoaders;
 
     /**
-     * @param resourceLoaders The resouce loaders
+     * @param resourceLoaders The resource loaders
      */
     public ResourceResolver(@Nonnull ResourceLoader[] resourceLoaders) {
         this(Arrays.asList(resourceLoaders));
     }
 
     /**
-     * @param resourceLoaders The resouce loaders
+     * @param resourceLoaders The resource loaders
      */
     public ResourceResolver(@Nonnull List<ResourceLoader> resourceLoaders) {
         ArgumentUtils.requireNonNull("resourceLoaders", resourceLoaders);

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -189,7 +189,7 @@ public T next() {
      */
     public static <T> Set<T> setOf(T... objects) {
         if (objects == null || objects.length == 0) {
-            return Collections.emptySet();
+            return new HashSet<>(0);
         }
         return new HashSet<>(Arrays.asList(objects));
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -103,7 +103,7 @@ public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
 
     @Override
     public String toString() {
-        return getMethod() + " " + getUri();
+        return getMethodName() + " " + getUri();
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/SmartHttpContentCompressor.java
Patch:
@@ -42,6 +42,7 @@ public class SmartHttpContentCompressor extends HttpContentCompressor {
      * @param httpCompressionStrategy The compression strategy
      */
     SmartHttpContentCompressor(HttpCompressionStrategy httpCompressionStrategy) {
+        super(httpCompressionStrategy.getCompressionLevel());
         this.httpCompressionStrategy = httpCompressionStrategy;
     }
 

File: http/src/main/java/io/micronaut/http/annotation/Headers.java
Patch:
@@ -36,7 +36,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE})
+@Target({ElementType.TYPE, ElementType.METHOD})
 public @interface Headers {
 
     /***

File: http/src/main/java/io/micronaut/http/cookie/Cookie.java
Patch:
@@ -161,7 +161,9 @@ public interface Cookie extends Comparable<Cookie>, Serializable {
      *
      * @param maxAge The max age
      * @return This cookie
+     * @deprecated Use {@link #maxAge(Duration)} instead
      */
+    @Deprecated
     default @Nonnull Cookie maxAge(@Nonnull TemporalAmount maxAge) {
         ArgumentUtils.requireNonNull("maxAge", maxAge);
         return maxAge(maxAge.get(ChronoUnit.SECONDS));

File: http/src/main/java/io/micronaut/http/multipart/CompletedFileUpload.java
Patch:
@@ -23,7 +23,7 @@
  * well as the contents.
  *
  * @author Zachary Klein
- * @since 1.0
+ * @since 1.0.0
  */
-public interface CompletedFileUpload extends FileUpload, PartData {
+public interface CompletedFileUpload extends FileUpload, CompletedPart {
 }

File: inject/src/main/java/io/micronaut/context/annotation/DefaultImplementation.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.micronaut.context.annotation;
 
+import io.micronaut.core.annotation.Experimental;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -57,6 +59,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target(ElementType.TYPE)
+@Experimental
 public @interface DefaultImplementation {
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -63,7 +63,7 @@ public EndpointsFilter(EndpointSensitivityProcessor endpointSensitivityProcessor
      */
     @Override
     protected Publisher<MutableHttpResponse<?>> doFilterOnce(HttpRequest<?> request, ServerFilterChain chain) {
-        Optional<RouteMatch> routeMatch = RouteMatchUtils.findRouteMatchAtRequest(request);
+        Optional<RouteMatch> routeMatch = RouteMatchUtils.findRouteMatch(request);
         if (routeMatch.isPresent() && routeMatch.get() instanceof MethodBasedRouteMatch) {
             ExecutableMethod method = ((MethodBasedRouteMatch) routeMatch.get()).getExecutableMethod();
             if (endpointMethods.getOrDefault(method, false)) {

File: management/src/main/java/io/micronaut/management/endpoint/routes/RoutesEndpoint.java
Patch:
@@ -54,7 +54,7 @@ public Single getRoutes() {
         Stream<UriRoute> uriRoutes = router.uriRoutes()
                 .sorted(Comparator
                         .comparing((UriRoute r) -> r.getUriMatchTemplate().toPathString())
-                        .thenComparing((UriRoute r) -> r.getHttpMethod().ordinal()));
+                        .thenComparing((UriRoute r) -> r.getHttpMethodName()));
         return Single.fromPublisher(routeDataCollector.getData(uriRoutes));
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/routes/impl/RxJavaRouteDataCollector.java
Patch:
@@ -85,7 +85,7 @@ protected String getRouteKey(UriRoute route) {
         return new StringBuilder("{[")
             .append(route.getUriMatchTemplate())
             .append("],method=[")
-            .append(route.getHttpMethod().name())
+            .append(route.getHttpMethodName())
             .append("],produces=[")
             .append(produces)
             .append("]}")

File: runtime/src/main/java/io/micronaut/runtime/context/env/CommandLinePropertySource.java
Patch:
@@ -28,7 +28,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link io.micronaut.context.env.CommandLinePropertySource} instead
  */
+@Deprecated
 public class CommandLinePropertySource extends MapPropertySource {
 
     /**

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -88,6 +88,9 @@ public <T> T get(BeanResolutionContext resolutionContext, BeanDefinition<T> bean
                 bean = (T) scopedBeanMap.get(identifier);
                 if (bean == null) {
                     bean = provider.get();
+                    if (bean instanceof RequestAware) {
+                        ((RequestAware) bean).setRequest(httpRequest);
+                    }
                     scopedBeanMap.put(identifier, bean);
                 }
             }

File: test-suite/src/test/java/io/micronaut/docs/basics/HelloController.java
Patch:
@@ -1,5 +1,6 @@
 package io.micronaut.docs.basics;
 
+import io.micronaut.context.annotation.Requires;
 // tag::imports[]
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
@@ -11,6 +12,7 @@
 import static io.micronaut.http.HttpRequest.GET;
 // end::imports[]
 
+@Requires(property = "spec.name", value = "HelloControllerSpec")
 @Controller("/")
 public class HelloController {
 

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/AbstractBraveTracingFilter.java
Patch:
@@ -79,7 +79,7 @@ void afterTerminate(HttpRequest<?> request) {
     Optional<Span> configuredSpan(HttpRequest<?> request, HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethodName());
         return request.getAttribute(TraceRequestAttributes.CURRENT_SPAN, Span.class);
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -124,14 +124,14 @@ public void onComplete() {
 
     private void configureSpan(Span span) {
         span.kind(Span.Kind.CLIENT);
-        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethod().name());
+        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethodName());
         String path = request.getPath();
         span.tag(AbstractOpenTracingFilter.TAG_PATH, path);
     }
 
     private void configureAttributes(HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethodName());
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpServerTracingPublisher.java
Patch:
@@ -79,7 +79,7 @@ public void subscribe(Subscriber<? super MutableHttpResponse<?>> actual) {
         Span span = initialSpan;
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o ->
-                span.name(request.getMethod() + " " + o.toString())
+                span.name(request.getMethodName() + " " + o.toString())
         );
         request.setAttribute(TraceRequestAttributes.CURRENT_SPAN, span);
         try (Tracer.SpanInScope ignored = tracer.withSpanInScope(span)) {
@@ -148,13 +148,13 @@ public void onComplete() {
 
     private void configureSpan(Span span) {
         span.kind(Span.Kind.SERVER);
-        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethod().name());
+        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethodName());
         span.tag(AbstractOpenTracingFilter.TAG_PATH, request.getPath());
     }
 
     private void configureAttributes(HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethodName());
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpTracingFactory.java
Patch:
@@ -63,7 +63,7 @@ HttpClientHandler<HttpRequest<?>, HttpResponse<?>> httpClientHandler(HttpTracing
         return HttpClientHandler.create(httpTracing, new HttpClientAdapter<HttpRequest<?>, HttpResponse<?>>() {
             @Override
             public String method(HttpRequest<?> request) {
-                return request.getMethod().name();
+                return request.getMethodName();
             }
 
             @Override
@@ -112,7 +112,7 @@ HttpServerHandler<HttpRequest<?>, HttpResponse<?>> httpServerHandler(HttpTracing
         return HttpServerHandler.create(httpTracing, new HttpServerAdapter<HttpRequest<?>, HttpResponse<?>>() {
             @Override
             public String method(HttpRequest<?> request) {
-                return request.getMethod().name();
+                return request.getMethodName();
             }
 
             @Override

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -95,7 +95,7 @@ protected void setErrorTags(Span span, Throwable error) {
      */
     protected String resolveSpanName(HttpRequest<?> request) {
         Optional<String> route = request.getAttribute(HttpAttributes.URI_TEMPLATE, String.class);
-        return route.map(s -> request.getMethod() + " " + s).orElse(request.getMethod() + " " + request.getPath());
+        return route.map(s -> request.getMethodName() + " " + s).orElse(request.getMethodName() + " " + request.getPath());
     }
 
     /**
@@ -111,7 +111,7 @@ protected Tracer.SpanBuilder newSpan(HttpRequest<?> request, SpanContext spanCon
                 spanName
         ).asChildOf(spanContext);
 
-        spanBuilder.withTag(TAG_METHOD, request.getMethod().name());
+        spanBuilder.withTag(TAG_METHOD, request.getMethodName());
         String path = request.getPath();
         spanBuilder.withTag(TAG_PATH, path);
         return spanBuilder;

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/InstanceInfo.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.discovery.eureka.client.v2;
 
 import com.fasterxml.jackson.annotation.*;
-import io.micronaut.core.annotation.Creator;
 import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospection.java
Patch:
@@ -82,7 +82,7 @@ public Optional<BeanProperty<T, Object>> getIndexedProperty(@Nonnull Class<? ext
 
     @Nonnull
     @Override
-    public T instantiate(Object... arguments) throws InstantiationException {
+    public T instantiate(boolean strictNullable, Object... arguments) throws InstantiationException {
         ArgumentUtils.requireNonNull("arguments", arguments);
         final Argument<?>[] constructorArguments = getConstructorArguments();
         if (constructorArguments.length != arguments.length) {
@@ -93,7 +93,7 @@ public T instantiate(Object... arguments) throws InstantiationException {
             Argument<?> constructorArgument = constructorArguments[i];
             final Object specified = arguments[i];
             if (specified == null) {
-                if (constructorArgument.isDeclaredNullable()) {
+                if (constructorArgument.isDeclaredNullable() || !strictNullable) {
                     continue;
                 } else {
                     throw new InstantiationException("Null argument specified for [" + constructorArgument.getName() + "]. If this argument is allowed to be null annotate it with @Nullable");

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/MyDataCenterInfo.java
Patch:
@@ -17,10 +17,12 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.micronaut.core.annotation.Introspected;
 
 /**
  * @author Tomasz Bak
  */
+@Introspected
 public class MyDataCenterInfo implements DataCenterInfo {
 
     private final Name name;

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -448,8 +448,8 @@ private Map<String, Object> toTypeArguments(@NotNull Map<String, ClassElement> t
         for (Map.Entry<String, ClassElement> entry : typeArguments.entrySet()) {
             final ClassElement ce = entry.getValue();
             String className = ce.getName();
-            if (!visitedTypes.contains(className)) {
-                visitedTypes.add(className);
+            if (!visitedTypes.contains(entry.getKey())) {
+                visitedTypes.add(entry.getKey());
                 final Map<String, ClassElement> subArgs = ce.getTypeArguments();
                 if (CollectionUtils.isNotEmpty(subArgs)) {
                     Map<String, Object> m = toTypeArguments(subArgs, visitedTypes);

File: session/src/main/java/io/micronaut/session/InMemorySessionStore.java
Patch:
@@ -29,9 +29,6 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
-
-import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
 /**
  * Default implementation that stores sessions in-memory.

File: validation/src/main/java/io/micronaut/validation/validator/messages/DefaultValidationMessages.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.validation.validator.messages;
 
 import io.micronaut.context.StaticMessageSource;
+import io.micronaut.core.annotation.Introspected;
 
 import javax.inject.Singleton;
 import javax.validation.constraints.*;
@@ -60,5 +61,7 @@ public DefaultValidationMessages() {
         addMessage(Positive.class.getName() + MESSAGE_SUFFIX, "must be greater than 0");
         addMessage(PositiveOrZero.class.getName() + MESSAGE_SUFFIX, "must be greater than or equal to 0");
         addMessage(Size.class.getName() + MESSAGE_SUFFIX, "size must be between {min} and {max}");
+
+        addMessage(Introspected.class.getName() + MESSAGE_SUFFIX, "Cannot validate {type}. No bean introspection present");
     }
 }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.micronaut.inject.beans.visitor;
 
-import io.micronaut.context.ExecutionHandleLocator;
-import io.micronaut.context.Qualifier;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.annotation.Internal;
@@ -80,6 +78,7 @@ class BeanIntrospectionWriter extends AbstractAnnotationMetadataWriter {
      * Default constructor.
      * @param className The class name
      * @param beanAnnotationMetadata The bean annotation metadata
+     * @param hasDefaultConstructor Whether the class has a default constructor
      */
     BeanIntrospectionWriter(String className, AnnotationMetadata beanAnnotationMetadata, boolean hasDefaultConstructor) {
         super(computeReferenceName(className), beanAnnotationMetadata, true);
@@ -97,6 +96,7 @@ class BeanIntrospectionWriter extends AbstractAnnotationMetadataWriter {
      * @param index A unique index
      * @param className The class name
      * @param beanAnnotationMetadata The bean annotation metadata
+     * @param hasDefaultConstructor Whether the class has a default constructor
      */
     BeanIntrospectionWriter(String generatingType, int index, String className, AnnotationMetadata beanAnnotationMetadata, boolean hasDefaultConstructor) {
         super(computeReferenceName(generatingType) + index, beanAnnotationMetadata, true);

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospection.java
Patch:
@@ -66,7 +66,7 @@ public interface BeanIntrospection<T> extends AnnotationMetadataDelegate {
      * Instantiates an instance of the bean, throwing an exception is instantiation is not possible.
      *
      * @return An instance
-     * @throws InstantiationException If the bean cannot be insantiated or the arguments are not satisfied.
+     * @throws InstantiationException If the bean cannot be instantiated or the arguments are not satisfied.
      */
     @Nonnull T instantiate() throws InstantiationException;
 

File: runtime/src/main/java/io/micronaut/jackson/serialize/JacksonObjectSerializer.java
Patch:
@@ -47,7 +47,7 @@ public JacksonObjectSerializer(ObjectMapper objectMapper) {
     @Override
     public Optional<byte[]> serialize(Object object) throws SerializationException {
         try {
-            return Optional.of(objectMapper.writeValueAsBytes(object));
+            return Optional.ofNullable(objectMapper.writeValueAsBytes(object));
         } catch (JsonProcessingException e) {
             throw new SerializationException("Error serializing object to JSON: " + e.getMessage(), e);
         }
@@ -65,7 +65,7 @@ public void serialize(Object object, OutputStream outputStream) throws Serializa
     @Override
     public <T> Optional<T> deserialize(byte[] bytes, Class<T> requiredType) throws SerializationException {
         try {
-            return Optional.of(objectMapper.readValue(bytes, requiredType));
+            return Optional.ofNullable(objectMapper.readValue(bytes, requiredType));
         } catch (IOException e) {
             throw new SerializationException("Error deserializing object from JSON: " + e.getMessage(), e);
         }
@@ -74,7 +74,7 @@ public <T> Optional<T> deserialize(byte[] bytes, Class<T> requiredType) throws S
     @Override
     public <T> Optional<T> deserialize(InputStream inputStream, Class<T> requiredType) throws SerializationException {
         try {
-            return Optional.of(objectMapper.readValue(inputStream, requiredType));
+            return Optional.ofNullable(objectMapper.readValue(inputStream, requiredType));
         } catch (IOException e) {
             throw new SerializationException("Error deserializing object from JSON: " + e.getMessage(), e);
         }

File: runtime/src/main/java/io/micronaut/cache/DefaultCacheManager.java
Patch:
@@ -66,7 +66,7 @@ public DefaultCacheManager(List<SyncCache<C>> caches) {
     @Inject public DefaultCacheManager(List<SyncCache<C>> caches, @Nullable Provider<DynamicCacheManager<C>> dynamicCacheManager) {
         this.dynamicCacheManager = dynamicCacheManager;
         if (CollectionUtils.isEmpty(caches)) {
-            this.cacheMap = Collections.emptyMap();
+            this.cacheMap = new LinkedHashMap<>();
         } else {
             this.cacheMap = new LinkedHashMap<>(caches.size());
             for (SyncCache<C> cache : caches) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java
Patch:
@@ -69,6 +69,7 @@ default <E extends Enum> Optional<E> enumValue(@Nonnull Class<E> enumType) {
     default <E extends Enum> E[] enumValues(@Nonnull Class<E> enumType) {
         return enumValues(AnnotationMetadata.VALUE_MEMBER, enumType);
     }
+
     /**
      * The value of the annotation as a Class.
      *

File: inject/src/main/java/io/micronaut/context/annotation/Requires.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.context.annotation;
 
 import io.micronaut.context.condition.Condition;
-import io.micronaut.context.condition.OperatingSystem;
 import io.micronaut.context.condition.TrueCondition;
 import io.micronaut.core.annotation.InstantiatedMember;
 
@@ -215,6 +214,9 @@ enum Sdk {
         MICRONAUT
     }
 
+    /**
+     * Used to express an operation system family.
+     */
     enum Family {
         LINUX, MAC_OS, WINDOWS, SOLARIS, OTHER
     }

File: inject/src/main/java/io/micronaut/context/condition/OperatingSystem.java
Patch:
@@ -38,7 +38,7 @@ private OperatingSystem(Family family) {
      */
     public static OperatingSystem getCurrent() {
         if (instance == null) {
-            synchronized(OperatingSystem.class) {
+            synchronized (OperatingSystem.class) {
                 if (instance == null) {
                     String osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH);
                     Family osFamily;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -197,6 +197,7 @@ public class DefaultHttpClient implements RxWebSocketClient, RxHttpClient, RxStr
      * @param threadFactory              The thread factory to use for client threads
      * @param nettyClientSslBuilder      The SSL builder
      * @param codecRegistry              The {@link MediaTypeCodecRegistry} to use for encoding and decoding objects
+     * @param annotationMetadataResolver The annotation metadata resolver
      * @param filters                    The filters to use
      */
     public DefaultHttpClient(@Parameter LoadBalancer loadBalancer,
@@ -216,7 +217,7 @@ public DefaultHttpClient(@Parameter LoadBalancer loadBalancer,
      * @param loadBalancer               The {@link LoadBalancer} to use for selecting servers
      * @param configuration              The {@link HttpClientConfiguration} object
      * @param contextPath                The base URI to prepend to request uris
-     * @param filterResolver             The resolver to get filters applicable to request
+     * @param filterResolver             The http client filter resolver
      * @param threadFactory              The thread factory to use for client threads
      * @param nettyClientSslBuilder      The SSL builder
      * @param codecRegistry              The {@link MediaTypeCodecRegistry} to use for encoding and decoding objects

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.annotation.*;
-import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.discovery.StaticServiceInstanceList;
 import io.micronaut.http.HttpRequest;

File: test-suite/src/test/java/io/micronaut/docs/basics/HelloController.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.docs.basics;
 
 // tag::imports[]
-
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.*;

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -88,11 +88,12 @@ public interface PropertyResolver extends ValueResolver<String> {
      * @return The properties
      */
     default @Nonnull Map<String, Object> getProperties(@Nonnull String name) {
-        return getProperties(name, StringConvention.RAW);
+        return getProperties(name, null);
     }
 
     /**
-     * Return all the properties under the given key.
+     * Return all the properties under the given key. By default Micronaut stores keys in keb-case, such that normalized lookups
+     * are more efficient. You can obtain the raw key values by passing in {@link StringConvention#RAW}.
      *
      * @param name The name
      * @param keyFormat The key format to use for the keys. Default is kebab-case.

File: discovery-client/src/main/java/io/micronaut/discovery/consul/registration/ConsulAutoRegistration.java
Patch:
@@ -92,7 +92,7 @@ protected ConsulAutoRegistration(
     @Override
     protected void pulsate(ServiceInstance instance, HealthStatus status) {
         ConsulConfiguration.ConsulRegistrationConfiguration registration = consulConfiguration.getRegistration();
-        if (registration != null && !registration.getCheck().isHttp() && registration.getCheck().isEnabled()) {
+        if (registration != null && !registration.getCheck().isHttp() && registration.getCheck().isEnabled() && registered.get()) {
 
             String checkId = "service:" + idGenerator.generateId(environment, instance);
             if (LOG.isDebugEnabled()) {

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/registration/EurekaAutoRegistration.java
Patch:
@@ -83,7 +83,7 @@ protected EurekaAutoRegistration(
     @Override
     protected void pulsate(ServiceInstance instance, HealthStatus status) {
         EurekaConfiguration.EurekaRegistrationConfiguration registration = eurekaConfiguration.getRegistration();
-        if (heartbeatConfiguration.isEnabled() && registration != null) {
+        if (heartbeatConfiguration.isEnabled() && registration != null && registered.get()) {
             InstanceInfo instanceInfo = registration.getInstanceInfo();
             if (status.equals(HealthStatus.UP)) {
                 Single<HttpStatus> heartbeatPublisher = Single.fromPublisher(eurekaClient.heartbeat(instanceInfo.getApp(), instanceInfo.getId()));

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -67,19 +67,21 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
 
     /**
      * @param fullHttpResponse       The full Http response
+     * @param httpStatus             The Http status
      * @param mediaTypeCodecRegistry The media type codec registry
      * @param byteBufferFactory      The byte buffer factory
      * @param bodyType               The body type
      * @param errorStatus            The error status
      */
     FullNettyClientHttpResponse(
             FullHttpResponse fullHttpResponse,
+            HttpStatus httpStatus,
             MediaTypeCodecRegistry mediaTypeCodecRegistry,
             ByteBufferFactory<ByteBufAllocator,
             ByteBuf> byteBufferFactory,
             Argument<B> bodyType, boolean errorStatus) {
 
-        this.status = HttpStatus.valueOf(fullHttpResponse.status().code());
+        this.status = httpStatus;
         this.headers = new NettyHttpHeaders(fullHttpResponse.headers(), ConversionService.SHARED);
         this.attributes = new MutableConvertibleValuesMap<>();
         this.nettyHttpResponse = fullHttpResponse;

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -183,7 +183,7 @@ HttpRequest getFullRequest(ByteBuf content) {
         io.netty.handler.codec.http.HttpMethod method = io.netty.handler.codec.http.HttpMethod.valueOf(httpMethod.name());
         DefaultFullHttpRequest req = content != null ? new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr, content) :
             new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr);
-        req.headers().setAll(headers.getNettyHeaders());
+        req.headers().set(headers.getNettyHeaders());
         return req;
     }
 
@@ -196,7 +196,7 @@ HttpRequest getStreamedRequest(Publisher<HttpContent> publisher) {
         io.netty.handler.codec.http.HttpMethod method = io.netty.handler.codec.http.HttpMethod.valueOf(httpMethod.name());
         HttpRequest req = publisher != null ? new DefaultStreamedHttpRequest(HttpVersion.HTTP_1_1, method, uriStr, publisher) :
             new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr);
-        req.headers().setAll(headers.getNettyHeaders());
+        req.headers().set(headers.getNettyHeaders());
         return req;
     }
 

File: http-client/src/main/java/io/micronaut/http/client/NettyStreamedHttpResponse.java
Patch:
@@ -45,10 +45,11 @@ class NettyStreamedHttpResponse<B> implements HttpResponse<B> {
 
     /**
      * @param response The streamed Http response
+     * @param httpStatus The Http status
      */
-    NettyStreamedHttpResponse(StreamedHttpResponse response) {
+    NettyStreamedHttpResponse(StreamedHttpResponse response, HttpStatus httpStatus) {
         this.nettyResponse = response;
-        this.status = HttpStatus.valueOf(response.status().code());
+        this.status = httpStatus;
         this.headers = new NettyHttpHeaders(response.headers(), ConversionService.SHARED);
     }
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -634,7 +634,7 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
         }
 
         return clients.computeIfAbsent(clientKey, integer -> {
-            HttpClient clientBean = beanContext.findBean(HttpClient.class, Qualifiers.byName(clientId)).orElse(null);
+            HttpClient clientBean = beanContext.findBean(HttpClient.class, Qualifiers.byName(NameUtils.hyphenate(clientId))).orElse(null);
             AnnotationValue<JacksonFeatures> jacksonFeatures = context.findAnnotation(JacksonFeatures.class).orElse(null);
             Optional<Class<?>> configurationClass = clientAnn.classValue("configuration");
 

File: http-client/src/test/groovy/io/micronaut/http/client/MyJavaService.java
Patch:
@@ -23,8 +23,7 @@
 @Singleton
 public class MyJavaService {
 
-    @Inject
-    @Client("/")
+    @Inject @Client("/")
     HttpClient client;
 
     @Inject @Client("/")

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -94,6 +94,7 @@ private long resolveLength(ByteBufHolder message) {
     private void fireExceedsLength(long receivedLength, long expected) {
         upstreamState = SingleThreadedBufferingSubscriber.BackPressureState.DONE;
         upstreamSubscription.cancel();
+        upstreamBuffer.clear();
         currentDownstreamSubscriber().ifPresent(subscriber -> subscriber.onError(new ContentLengthExceededException(expected, receivedLength)));
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/ServerSslBuilder.java
Patch:
@@ -25,6 +25,7 @@
  * an the SSLContext supplied later to the micronaut http server.
  */
 public interface ServerSslBuilder {
+
     /**
      * @return The SSL configuration
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -184,8 +184,8 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
             beanDefinitions.forEach(className -> {
                 if (processed.add(className)) {
                     final TypeElement refreshedClassElement = elementUtils.getTypeElement(className);
-                    final AnnBeanElementVisitor visitor = new AnnBeanElementVisitor(refreshedClassElement);
                     try {
+                        final AnnBeanElementVisitor visitor = new AnnBeanElementVisitor(refreshedClassElement);
                         refreshedClassElement.accept(visitor, className);
                         visitor.getBeanDefinitionWriters().forEach((name, writer) -> {
                             String beanDefinitionName = writer.getBeanDefinitionName();
@@ -752,6 +752,7 @@ private void visitConfigurationPropertySetter(ExecutableElement method) {
 
                     writer.visitSetterValue(
                             modelUtils.resolveTypeReference(declaringClass),
+                            modelUtils.resolveTypeReference(method.getReturnType()),
                             annotationMetadata,
                             requiresReflection,
                             fieldType,

File: inject/src/main/java/io/micronaut/context/AbstractBeanConfiguration.java
Patch:
@@ -42,7 +42,7 @@ protected AbstractBeanConfiguration(String thePackage) {
 
     @Override
     public Package getPackage() {
-        return Package.getPackage(packageName);
+        return getClass().getPackage();
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/condition/Condition.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.context.condition;
 
+import io.micronaut.core.annotation.Introspected;
+
 import java.util.function.Predicate;
 
 /**
@@ -24,6 +26,7 @@
  * @since 1.0
  */
 @FunctionalInterface
+@Introspected
 public interface Condition extends Predicate<ConditionContext> {
 
     /**

File: jdbc/src/main/java/io/micronaut/jdbc/spring/SpringDataSourceResolver.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.jdbc.spring;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.jdbc.DataSourceResolver;
 import org.springframework.jdbc.datasource.DelegatingDataSource;
@@ -30,6 +31,7 @@
  */
 @Singleton
 @Internal
+@Requires(classes = DelegatingDataSource.class)
 public final class SpringDataSourceResolver implements DataSourceResolver {
 
     @Override

File: runtime/src/main/java/io/micronaut/discovery/registration/AutoRegistration.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 
 /**
@@ -38,7 +39,7 @@ public abstract class AutoRegistration implements ApplicationEventListener<Abstr
 
     protected static final Logger LOG = LoggerFactory.getLogger(AutoRegistration.class);
     private static final Pattern APPLICATION_NAME_PATTERN = Pattern.compile("^[a-zA-Z][\\w\\d-]*[a-zA-Z\\d]$");
-
+    protected final AtomicBoolean registered = new AtomicBoolean(false);
     private final RegistrationConfiguration registrationConfiguration;
 
     /**

File: test-suite/src/test/java/io/micronaut/docs/aop/introduction/generics/SpecificEvent.java
Patch:
@@ -0,0 +1,3 @@
+package io.micronaut.docs.aop.introduction.generics;
+
+public class SpecificEvent {}

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingCallable.java
Patch:
@@ -49,7 +49,7 @@ public TracingCallable(Callable<V> callable, Tracer tracer) {
 
     @Override
     public V call() throws Exception {
-        if (span == null) {
+        if (span == null || span == tracer.scopeManager().activeSpan()) {
             return callable.call();
         } else {
             try (Scope ignored = tracer.scopeManager().activate(span)) {

File: validation/src/main/java/io/micronaut/validation/properties/MixedCasePropertyTypeElementVisitor.java
Patch:
@@ -40,7 +40,9 @@
  *
  * @author Iván López
  * @since 1.1.0
+ * @deprecated No replacement because mixed case keys can now be resolved
  */
+@Deprecated
 public class MixedCasePropertyTypeElementVisitor implements TypeElementVisitor<Object, Object> {
 
     private boolean skipValidation = false;

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -183,7 +183,7 @@ HttpRequest getFullRequest(ByteBuf content) {
         io.netty.handler.codec.http.HttpMethod method = io.netty.handler.codec.http.HttpMethod.valueOf(httpMethod.name());
         DefaultFullHttpRequest req = content != null ? new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr, content) :
             new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr);
-        req.headers().setAll(headers.getNettyHeaders());
+        req.headers().set(headers.getNettyHeaders());
         return req;
     }
 
@@ -196,7 +196,7 @@ HttpRequest getStreamedRequest(Publisher<HttpContent> publisher) {
         io.netty.handler.codec.http.HttpMethod method = io.netty.handler.codec.http.HttpMethod.valueOf(httpMethod.name());
         HttpRequest req = publisher != null ? new DefaultStreamedHttpRequest(HttpVersion.HTTP_1_1, method, uriStr, publisher) :
             new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, method, uriStr);
-        req.headers().setAll(headers.getNettyHeaders());
+        req.headers().set(headers.getNettyHeaders());
         return req;
     }
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -81,7 +81,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.function.Supplier;
-import java.util.stream.Stream;
 
 /**
  * Introduction advice that implements the {@link Client} annotation.

File: http-client/src/main/java/io/micronaut/http/client/MatchingFilterResolver.java
Patch:
@@ -128,7 +128,7 @@ private FilterProperties buildFilterProperties(HttpClientFilter filter) {
 
         FilterProperties annotationFilterProperties = filterAnnotationMetadataOpt
                 .map(f -> new FilterProperties(
-                        f.stringValues("patterns"),
+                        f.stringValues(),
                         f.get("methods", io.micronaut.http.HttpMethod[].class, null),
                         f.stringValues("serviceId"),
                         declaredFilterAnnotations)

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -196,6 +196,7 @@ public class DefaultHttpClient implements RxWebSocketClient, RxHttpClient, RxStr
      * @param threadFactory              The thread factory to use for client threads
      * @param nettyClientSslBuilder      The SSL builder
      * @param codecRegistry              The {@link MediaTypeCodecRegistry} to use for encoding and decoding objects
+     * @param filters                    The filters to use
      */
     public DefaultHttpClient(@Parameter LoadBalancer loadBalancer,
                              @Parameter HttpClientConfiguration configuration,

File: http-client/src/main/java/io/micronaut/http/client/SimpleFilterResolver.java
Patch:
@@ -12,9 +12,7 @@
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
- *
  */
-
 package io.micronaut.http.client;
 
 import io.micronaut.core.annotation.Internal;
@@ -37,7 +35,9 @@ public class SimpleFilterResolver implements FilterResolver {
 
     private final Collection<HttpClientFilter> filters;
 
-
+    /**
+     * @param filters set of filters this instance always will resolve to
+     */
     public SimpleFilterResolver(HttpClientFilter... filters) {
         this.filters = Arrays.asList(filters);
     }

File: http/src/main/java/io/micronaut/http/annotation/FilterAnnotation.java
Patch:
@@ -12,9 +12,7 @@
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
- *
  */
-
 package io.micronaut.http.annotation;
 
 import java.lang.annotation.*;

File: test-suite/src/test/java/io/micronaut/docs/basics/HelloController.java
Patch:
@@ -1,7 +1,7 @@
 package io.micronaut.docs.basics;
 
+import io.micronaut.context.annotation.Requires;
 // tag::imports[]
-
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.*;
@@ -12,6 +12,7 @@
 import static io.micronaut.http.HttpRequest.GET;
 // end::imports[]
 
+@Requires(property = "spec.name", value = "HelloControllerSpec")
 @Controller("/")
 public class HelloController {
 

File: http-client/src/main/java/io/micronaut/http/client/BasicAuth.java
Patch:
@@ -15,15 +15,13 @@
  */
 package io.micronaut.http.client;
 
-import io.micronaut.context.annotation.Prototype;
-
 /**
  * A class representing basic auth authorization header.
  * To be used in {@link io.micronaut.http.client.annotation.Client}
  *
  * @author Ashwini Mutalik Desai
+ * @since 1.3.0
  */
-@Prototype
 public final class BasicAuth {
 
     private final String username;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -752,6 +752,7 @@ private void visitConfigurationPropertySetter(ExecutableElement method) {
 
                     writer.visitSetterValue(
                             modelUtils.resolveTypeReference(declaringClass),
+                            modelUtils.resolveTypeReference(method.getReturnType()),
                             annotationMetadata,
                             requiresReflection,
                             fieldType,

File: inject/src/main/java/io/micronaut/inject/configuration/ConfigurationMetadataBuilder.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Set;
 
 /**
  * <p>A builder for producing metadata for the available {@link io.micronaut.context.annotation.ConfigurationProperties}.</p>

File: runtime/src/main/java/io/micronaut/cache/DefaultCacheManager.java
Patch:
@@ -61,6 +61,7 @@ public DefaultCacheManager(List<SyncCache<C>> caches) {
      * Create default cache manager for the given caches.
      *
      * @param caches List of synchronous cache implementations
+     * @param dynamicCacheManager The dynamic cache manager
      */
     @Inject public DefaultCacheManager(List<SyncCache<C>> caches, @Nullable Provider<DynamicCacheManager<C>> dynamicCacheManager) {
         this.dynamicCacheManager = dynamicCacheManager;

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/PrimarySpec.java
Patch:
@@ -44,7 +44,7 @@ public static void teardown(){
     public void testPrimaryAnnotatedBeanIsInjectedWhenMultipleOptionsExist() {
         assertEquals(embeddedServer.getApplicationContext().getBeansOfType(ColorPicker.class).size(), 2);
 
-        HttpResponse<String> rsp = rxClient.toBlocking().exchange(HttpRequest.GET("/test"), String.class);
+        HttpResponse<String> rsp = rxClient.toBlocking().exchange(HttpRequest.GET("/testPrimary"), String.class);
 
         assertEquals(rsp.status(), HttpStatus.OK);
         assertEquals(rsp.body(), "green");

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/TestController.java
Patch:
@@ -6,7 +6,7 @@
 
 @Requires(property = "spec.name", value = "primaryspec")
 //tag::clazz[]
-@Controller("/test")
+@Controller("/testPrimary")
 public class TestController {
 
     protected final ColorPicker colorPicker;

File: test-suite/src/test/java/io/micronaut/docs/httpclientexceptionbody/BooksController.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.client.docs.httpclientexceptionbody;
+package io.micronaut.docs.httpclientexceptionbody;
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpResponse;

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloControllerSpec.java
Patch:
@@ -31,7 +31,7 @@
 @Property(name = "spec.name", value = "HelloControllerSpec")
 // tag::class[]
 @MicronautTest
-class HelloControllerSpec {
+public class HelloControllerSpec {
     @Inject
     EmbeddedServer server; // <1>
 

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -88,11 +88,12 @@ public interface PropertyResolver extends ValueResolver<String> {
      * @return The properties
      */
     default @Nonnull Map<String, Object> getProperties(@Nonnull String name) {
-        return getProperties(name, StringConvention.RAW);
+        return getProperties(name, null);
     }
 
     /**
-     * Return all the properties under the given key.
+     * Return all the properties under the given key. By default Micronaut stores keys in keb-case, such that normalized lookups
+     * are more efficient. You can obtain the raw key values by passing in {@link StringConvention#RAW}.
      *
      * @param name The name
      * @param keyFormat The key format to use for the keys. Default is kebab-case.

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1579,7 +1579,7 @@ <T> T doCreateBean(@Nonnull BeanResolutionContext resolutionContext,
                         String argumentName = requiredArgument.getName();
                         Object val = argumentValues.get(argumentName);
                         if (val == null && !requiredArgument.isDeclaredNullable()) {
-                            throw new BeanInstantiationException(resolutionContext, "Missing bean argument [" + requiredArgument + "] for type: " + beanType.getName() + ". Requires arguments: " + ArrayUtils.toString(requiredArguments));
+                            throw new BeanInstantiationException(resolutionContext, "Missing bean argument [" + requiredArgument + "] for type: " + beanType.getName() + ". Required arguments: " + ArrayUtils.toString(requiredArguments));
                         }
                         BeanResolutionContext finalResolutionContext = resolutionContext;
                         Object convertedValue = null;

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -88,11 +88,12 @@ public interface PropertyResolver extends ValueResolver<String> {
      * @return The properties
      */
     default @Nonnull Map<String, Object> getProperties(@Nonnull String name) {
-        return getProperties(name, StringConvention.RAW);
+        return getProperties(name, null);
     }
 
     /**
-     * Return all the properties under the given key.
+     * Return all the properties under the given key. By default Micronaut stores keys in keb-case, such that normalized lookups
+     * are more efficient. You can obtain the raw key values by passing in {@link StringConvention#RAW}.
      *
      * @param name The name
      * @param keyFormat The key format to use for the keys. Default is kebab-case.

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -630,7 +630,7 @@ protected Object postConstruct(BeanResolutionContext resolutionContext, BeanCont
             // this is to ensure that if the post construct method does anything funky to
             // cause recreation of this bean then we don't have a circular problem
             key = new DefaultBeanContext.BeanKey(this, resolutionContext.getCurrentQualifier());
-            defaultContext.singlesInCreation.put(key, bean);
+            resolutionContext.addInFlightBean(key, bean);
         }
         Collection<BeanRegistration<BeanInitializedEventListener>> beanInitializedEventListeners = ((DefaultBeanContext) context).beanInitializedEventListeners;
         if (CollectionUtils.isNotEmpty(beanInitializedEventListeners)) {
@@ -663,7 +663,7 @@ protected Object postConstruct(BeanResolutionContext resolutionContext, BeanCont
                 // ensure registration as an inflight bean if a post construct is present
                 // this is to ensure that if the post construct method does anything funky to
                 // cause recreation of this bean then we don't have a circular problem
-                defaultContext.singlesInCreation.remove(key);
+                resolutionContext.removeInFlightBean(key);
             }
         }
     }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1579,7 +1579,7 @@ <T> T doCreateBean(@Nonnull BeanResolutionContext resolutionContext,
                         String argumentName = requiredArgument.getName();
                         Object val = argumentValues.get(argumentName);
                         if (val == null && !requiredArgument.isDeclaredNullable()) {
-                            throw new BeanInstantiationException(resolutionContext, "Missing bean argument [" + requiredArgument + "].");
+                            throw new BeanInstantiationException(resolutionContext, "Missing bean argument [" + requiredArgument + "] for type: " + beanType.getName() + ". Requires arguments: " + ArrayUtils.toString(requiredArguments));
                         }
                         BeanResolutionContext finalResolutionContext = resolutionContext;
                         Object convertedValue = null;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/ssl/ServerSslBuilder.java
Patch:
@@ -25,6 +25,7 @@
  * an the SSLContext supplied later to the micronaut http server.
  */
 public interface ServerSslBuilder {
+
     /**
      * @return The SSL configuration
      */

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -189,7 +189,7 @@ public T next() {
      */
     public static <T> Set<T> setOf(T... objects) {
         if (objects == null || objects.length == 0) {
-            return Collections.emptySet();
+            return new HashSet<>(0);
         }
         return new HashSet<>(Arrays.asList(objects));
     }

File: runtime/src/main/java/io/micronaut/runtime/context/env/CommandLinePropertySource.java
Patch:
@@ -28,7 +28,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link io.micronaut.context.env.CommandLinePropertySource} instead
  */
+@Deprecated
 public class CommandLinePropertySource extends MapPropertySource {
 
     /**

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1806,7 +1806,7 @@ private Qualifier resolveQualifier(
                 return Qualifiers.byType(byType);
             } else {
                 Qualifier qualifier = null;
-                boolean isIterable = isIterable();
+                boolean isIterable = isIterable() || resolutionContext.get(EachProperty.class.getName(), Class.class).map(getBeanType()::equals).orElse(false);
                 if (isIterable) {
                     Optional<Qualifier> optional = resolutionContext.get(javax.inject.Qualifier.class.getName(), Map.class)
                             .map(map -> (Qualifier) map.get(argument));

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -113,6 +113,9 @@ public ObjectMapper objectMapper(@Nullable JacksonConfiguration jacksonConfigura
                 for (Class aClass : value) {
                     module.addDeserializer(aClass, deserializer);
                 }
+            } else {
+                Optional<Class> targetType = GenericTypeUtils.resolveSuperGenericTypeArgument(type);
+                targetType.ifPresent(aClass -> module.addDeserializer(aClass, deserializer));
             }
         }
 
@@ -124,9 +127,6 @@ public ObjectMapper objectMapper(@Nullable JacksonConfiguration jacksonConfigura
                 for (Class clazz : value) {
                     module.addKeyDeserializer(clazz, keyDeserializer);
                 }
-            } else {
-                Optional<Class> targetType = GenericTypeUtils.resolveSuperGenericTypeArgument(type);
-                targetType.ifPresent(clazz -> module.addKeyDeserializer(clazz, keyDeserializer));
             }
         }
         objectMapper.registerModule(module);

File: jdbc/src/main/java/io/micronaut/jdbc/spring/SpringDataSourceResolver.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.jdbc.spring;
 
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.jdbc.DataSourceResolver;
 import org.springframework.jdbc.datasource.DelegatingDataSource;
@@ -30,6 +31,7 @@
  */
 @Singleton
 @Internal
+@Requires(classes = DelegatingDataSource.class)
 public final class SpringDataSourceResolver implements DataSourceResolver {
 
     @Override

File: inject/src/main/java/io/micronaut/context/AbstractBeanConfiguration.java
Patch:
@@ -42,7 +42,7 @@ protected AbstractBeanConfiguration(String thePackage) {
 
     @Override
     public Package getPackage() {
-        return Package.getPackage(packageName);
+        return getClass().getPackage();
     }
 
     @Override

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -67,6 +67,7 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
 
     /**
      * @param fullHttpResponse       The full Http response
+     * @param httpStatus             The Http status
      * @param mediaTypeCodecRegistry The media type codec registry
      * @param byteBufferFactory      The byte buffer factory
      * @param bodyType               The body type

File: http-client/src/main/java/io/micronaut/http/client/NettyStreamedHttpResponse.java
Patch:
@@ -45,6 +45,7 @@ class NettyStreamedHttpResponse<B> implements HttpResponse<B> {
 
     /**
      * @param response The streamed Http response
+     * @param httpStatus The Http status
      */
     NettyStreamedHttpResponse(StreamedHttpResponse response, HttpStatus httpStatus) {
         this.nettyResponse = response;

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -74,12 +74,13 @@ public class FullNettyClientHttpResponse<B> implements HttpResponse<B>, Completa
      */
     FullNettyClientHttpResponse(
             FullHttpResponse fullHttpResponse,
+            HttpStatus httpStatus,
             MediaTypeCodecRegistry mediaTypeCodecRegistry,
             ByteBufferFactory<ByteBufAllocator,
             ByteBuf> byteBufferFactory,
             Argument<B> bodyType, boolean errorStatus) {
 
-        this.status = HttpStatus.valueOf(fullHttpResponse.status().code());
+        this.status = httpStatus;
         this.headers = new NettyHttpHeaders(fullHttpResponse.headers(), ConversionService.SHARED);
         this.attributes = new MutableConvertibleValuesMap<>();
         this.nettyHttpResponse = fullHttpResponse;

File: http-client/src/main/java/io/micronaut/http/client/NettyStreamedHttpResponse.java
Patch:
@@ -46,9 +46,9 @@ class NettyStreamedHttpResponse<B> implements HttpResponse<B> {
     /**
      * @param response The streamed Http response
      */
-    NettyStreamedHttpResponse(StreamedHttpResponse response) {
+    NettyStreamedHttpResponse(StreamedHttpResponse response, HttpStatus httpStatus) {
         this.nettyResponse = response;
-        this.status = HttpStatus.valueOf(response.status().code());
+        this.status = httpStatus;
         this.headers = new NettyHttpHeaders(response.headers(), ConversionService.SHARED);
     }
 

File: inject/src/main/java/io/micronaut/context/condition/Condition.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.context.condition;
 
+import io.micronaut.core.annotation.Introspected;
+
 import java.util.function.Predicate;
 
 /**
@@ -24,6 +26,7 @@
  * @since 1.0
  */
 @FunctionalInterface
+@Introspected
 public interface Condition extends Predicate<ConditionContext> {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -94,6 +94,7 @@ private long resolveLength(ByteBufHolder message) {
     private void fireExceedsLength(long receivedLength, long expected) {
         upstreamState = SingleThreadedBufferingSubscriber.BackPressureState.DONE;
         upstreamSubscription.cancel();
+        upstreamBuffer.clear();
         currentDownstreamSubscriber().ifPresent(subscriber -> subscriber.onError(new ContentLengthExceededException(expected, receivedLength)));
     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -260,7 +260,6 @@ protected ChannelPool newPool(RequestKey key) {
                         Bootstrap newBootstrap = bootstrap.clone(group);
                         newBootstrap.remoteAddress(key.getRemoteAddress());
 
-
                         AbstractChannelPoolHandler channelPoolHandler = newPoolHandler(key);
                         final Long acquireTimeoutMillis = connectionPoolConfiguration.getAcquireTimeout().map(Duration::toMillis).orElse(-1L);
                         return new FixedChannelPool(
@@ -281,6 +280,7 @@ protected ChannelPool newPool(RequestKey key) {
                     protected ChannelPool newPool(RequestKey key) {
                         Bootstrap newBootstrap = bootstrap.clone(group);
                         newBootstrap.remoteAddress(key.getRemoteAddress());
+
                         AbstractChannelPoolHandler channelPoolHandler = newPoolHandler(key);
                         return new SimpleChannelPool(
                                 newBootstrap,
@@ -2303,7 +2303,7 @@ public RequestKey(URI requestURI) {
         }
 
         public InetSocketAddress getRemoteAddress() {
-            return new InetSocketAddress(host, port);
+            return InetSocketAddress.createUnresolved(host, port);
         }
 
         public boolean isSecure() {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -184,8 +184,8 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
             beanDefinitions.forEach(className -> {
                 if (processed.add(className)) {
                     final TypeElement refreshedClassElement = elementUtils.getTypeElement(className);
-                    final AnnBeanElementVisitor visitor = new AnnBeanElementVisitor(refreshedClassElement);
                     try {
+                        final AnnBeanElementVisitor visitor = new AnnBeanElementVisitor(refreshedClassElement);
                         refreshedClassElement.accept(visitor, className);
                         visitor.getBeanDefinitionWriters().forEach((name, writer) -> {
                             String beanDefinitionName = writer.getBeanDefinitionName();

File: test-suite/src/test/java/io/micronaut/docs/aop/introduction/generics/SpecificEvent.java
Patch:
@@ -0,0 +1,3 @@
+package io.micronaut.docs.aop.introduction.generics;
+
+public class SpecificEvent {}

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingCallable.java
Patch:
@@ -49,7 +49,7 @@ public TracingCallable(Callable<V> callable, Tracer tracer) {
 
     @Override
     public V call() throws Exception {
-        if (span == null) {
+        if (span == null || span == tracer.scopeManager().activeSpan()) {
             return callable.call();
         } else {
             try (Scope ignored = tracer.scopeManager().activate(span)) {

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -634,7 +634,7 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
         }
 
         return clients.computeIfAbsent(clientKey, integer -> {
-            HttpClient clientBean = beanContext.findBean(HttpClient.class, Qualifiers.byName(clientId)).orElse(null);
+            HttpClient clientBean = beanContext.findBean(HttpClient.class, Qualifiers.byName(NameUtils.hyphenate(clientId))).orElse(null);
             AnnotationValue<JacksonFeatures> jacksonFeatures = context.findAnnotation(JacksonFeatures.class).orElse(null);
             Optional<Class<?>> configurationClass = clientAnn.classValue("configuration");
 

File: core/src/main/java/io/micronaut/core/io/ResourceResolver.java
Patch:
@@ -39,14 +39,14 @@ public class ResourceResolver {
     private final List<ResourceLoader> resourceLoaders;
 
     /**
-     * @param resourceLoaders The resouce loaders
+     * @param resourceLoaders The resource loaders
      */
     public ResourceResolver(@Nonnull ResourceLoader[] resourceLoaders) {
         this(Arrays.asList(resourceLoaders));
     }
 
     /**
-     * @param resourceLoaders The resouce loaders
+     * @param resourceLoaders The resource loaders
      */
     public ResourceResolver(@Nonnull List<ResourceLoader> resourceLoaders) {
         ArgumentUtils.requireNonNull("resourceLoaders", resourceLoaders);

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/PrimarySpec.java
Patch:
@@ -44,7 +44,7 @@ public static void teardown(){
     public void testPrimaryAnnotatedBeanIsInjectedWhenMultipleOptionsExist() {
         assertEquals(embeddedServer.getApplicationContext().getBeansOfType(ColorPicker.class).size(), 2);
 
-        HttpResponse<String> rsp = rxClient.toBlocking().exchange(HttpRequest.GET("/test"), String.class);
+        HttpResponse<String> rsp = rxClient.toBlocking().exchange(HttpRequest.GET("/testPrimary"), String.class);
 
         assertEquals(rsp.status(), HttpStatus.OK);
         assertEquals(rsp.body(), "green");

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/TestController.java
Patch:
@@ -6,7 +6,7 @@
 
 @Requires(property = "spec.name", value = "primaryspec")
 //tag::clazz[]
-@Controller("/test")
+@Controller("/testPrimary")
 public class TestController {
 
     protected final ColorPicker colorPicker;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -140,9 +140,9 @@
  * @since 1.0
  */
 @Prototype
-@Primary
 @Internal
 @BootstrapContextCompatible
+@Primary
 public class DefaultHttpClient implements RxWebSocketClient, RxHttpClient, RxStreamingHttpClient, RxSseClient, Closeable, AutoCloseable {
 
     protected static final String HANDLER_AGGREGATOR = "http-aggregator";

File: http-client/src/test/groovy/io/micronaut/http/client/MyJavaService.java
Patch:
@@ -23,8 +23,7 @@
 @Singleton
 public class MyJavaService {
 
-    @Inject
-    @Client("/")
+    @Inject @Client("/")
     HttpClient client;
 
     @Inject @Client("/")

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2269,7 +2269,7 @@ private <T> T createAndRegisterSingleton(BeanResolutionContext resolutionContext
         synchronized (singletonObjects) {
             if (definition instanceof NoInjectionBeanDefinition) {
                 NoInjectionBeanDefinition<T> manuallyRegistered = (NoInjectionBeanDefinition) definition;
-                BeanRegistration<T> reg = (BeanRegistration<T>) singletonObjects.get(new BeanKey(beanType, manuallyRegistered.getQualifier()));
+                BeanRegistration<T> reg = (BeanRegistration<T>) singletonObjects.get(new BeanKey(manuallyRegistered.getBeanType(), manuallyRegistered.getQualifier()));
                 if (reg == null) {
                     throw new IllegalStateException("Manually registered singleton no longer present in bean context");
                 }

File: runtime/src/main/java/io/micronaut/discovery/registration/AutoRegistration.java
Patch:
@@ -38,9 +38,8 @@
 public abstract class AutoRegistration implements ApplicationEventListener<AbstractServiceInstanceEvent> {
 
     protected static final Logger LOG = LoggerFactory.getLogger(AutoRegistration.class);
-    protected final AtomicBoolean registered = new AtomicBoolean(false);
     private static final Pattern APPLICATION_NAME_PATTERN = Pattern.compile("^[a-zA-Z][\\w\\d-]*[a-zA-Z\\d]$");
-
+    protected final AtomicBoolean registered = new AtomicBoolean(false);
     private final RegistrationConfiguration registrationConfiguration;
 
     /**

File: discovery-client/src/main/java/io/micronaut/discovery/consul/registration/ConsulAutoRegistration.java
Patch:
@@ -92,7 +92,7 @@ protected ConsulAutoRegistration(
     @Override
     protected void pulsate(ServiceInstance instance, HealthStatus status) {
         ConsulConfiguration.ConsulRegistrationConfiguration registration = consulConfiguration.getRegistration();
-        if (registration != null && !registration.getCheck().isHttp() && registration.getCheck().isEnabled()) {
+        if (registration != null && !registration.getCheck().isHttp() && registration.getCheck().isEnabled() && registered.get()) {
 
             String checkId = "service:" + idGenerator.generateId(environment, instance);
             if (LOG.isDebugEnabled()) {

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/registration/EurekaAutoRegistration.java
Patch:
@@ -83,7 +83,7 @@ protected EurekaAutoRegistration(
     @Override
     protected void pulsate(ServiceInstance instance, HealthStatus status) {
         EurekaConfiguration.EurekaRegistrationConfiguration registration = eurekaConfiguration.getRegistration();
-        if (heartbeatConfiguration.isEnabled() && registration != null) {
+        if (heartbeatConfiguration.isEnabled() && registration != null && registered.get()) {
             InstanceInfo instanceInfo = registration.getInstanceInfo();
             if (status.equals(HealthStatus.UP)) {
                 Single<HttpStatus> heartbeatPublisher = Single.fromPublisher(eurekaClient.heartbeat(instanceInfo.getApp(), instanceInfo.getId()));

File: runtime/src/main/java/io/micronaut/discovery/registration/AutoRegistration.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 
 /**
@@ -37,6 +38,7 @@
 public abstract class AutoRegistration implements ApplicationEventListener<AbstractServiceInstanceEvent> {
 
     protected static final Logger LOG = LoggerFactory.getLogger(AutoRegistration.class);
+    protected final AtomicBoolean registered = new AtomicBoolean(false);
     private static final Pattern APPLICATION_NAME_PATTERN = Pattern.compile("^[a-zA-Z][\\w\\d-]*[a-zA-Z\\d]$");
 
     private final RegistrationConfiguration registrationConfiguration;

File: session/src/main/java/io/micronaut/session/http/CookieHttpSessionStrategy.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Singleton;
+import java.time.temporal.ChronoUnit;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -104,7 +105,7 @@ public void encodeId(HttpRequest<?> request,
             if (configuration.isRememberMe()) {
                 cookie.maxAge(Integer.MAX_VALUE);
             } else {
-                configuration.getCookieMaxAge().ifPresent(cookie::maxAge);
+                configuration.getCookieMaxAge().ifPresent(maxAge -> cookie.maxAge(maxAge.get(ChronoUnit.SECONDS)));
             }
         }
 

File: session/src/main/java/io/micronaut/session/http/HttpSessionConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.session.SessionConfiguration;
 
 import java.time.Duration;
+import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 
 /**
@@ -173,7 +174,7 @@ public void setCookieDomain(String cookieDomain) {
     /**
      * @return The max age to use for the cookie
      */
-    public Optional<Duration> getCookieMaxAge() {
+    public Optional<TemporalAmount> getCookieMaxAge() {
         return Optional.ofNullable(cookieMaxAge);
     }
 

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.http.cookie;
 
 import javax.annotation.Nonnull;
-import java.time.Duration;
 import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/EurekaConfiguration.java
Patch:
@@ -225,7 +225,7 @@ public static class EurekaRegistrationConfiguration extends RegistrationConfigur
          * @param applicationConfiguration The application configuration
          * @param ipAddress                The IP address
          * @param dataCenterInfo           The data center info
-         * @deprecated Use {@link #EurekaConfiguration(EurekaConnectionPoolConfiguration, ApplicationConfiguration, EurekaRegistrationConfiguration)} instead
+         * @deprecated Use {@link #EurekaRegistrationConfiguration(EmbeddedServer, ApplicationConfiguration, DataCenterInfo, String, String, Integer, String, String, Boolean)} instead
          */
         @Deprecated
         public EurekaRegistrationConfiguration(

File: http/src/main/java/io/micronaut/http/hateos/package-info.java
Patch:
@@ -16,6 +16,6 @@
 /**
  * @author Graeme Rocher
  * @since 1.0
- * @deprecated Use the classes in {@link io.micronaut.http.hateoas} instead
+ * @deprecated Use the classes in io.micronaut.http.hateoas instead
  */
 package io.micronaut.http.hateos;

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/JavaParser.java
Patch:
@@ -107,7 +107,7 @@ public Iterable<? extends Element> parse(JavaFileObject... sources) {
     }
 
     /**
-     * Parses {@code sources} into {@linkplain CompilationUnitTree compilation units}. This method
+     * Parses {@code sources} into {@code CompilationUnitTree} units. This method
      * <b>does not</b> compile the sources.
      *
      * @param className The class name
@@ -138,7 +138,7 @@ public Iterable<? extends JavaFileObject> generate(String className, String code
     }
 
     /**
-     * Parses {@code sources} into {@linkplain CompilationUnitTree compilation units}. This method
+     * Parses {@code sources} into {@code CompilationUnitTree} units. This method
      * <b>does not</b> compile the sources.
      *
      * @param sources The sources

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/Parser.java
Patch:
@@ -118,7 +118,7 @@ private static boolean isTrue(Boolean p) {
      *
      * <p>Note: It is possible for the {@link Trees} instance contained within a {@code ParseResult}
      * to be invalidated by a call to {@link com.sun.tools.javac.api.JavacTaskImpl#cleanup()}. Though
-     * we do not currently expose the {@link JavacTask} used to create a {@code ParseResult} to {@code
+     * we do not currently expose the {@link com.sun.source.util.JavacTask} used to create a {@code ParseResult} to {@code
      * cleanup()} calls on its underlying implementation, this should be acknowledged as an
      * implementation detail that could cause unexpected behavior when making calls to methods in
      * {@link Trees}.

File: test-suite/src/test/java/io/micronaut/docs/config/mapFormat/EngineConfig.java
Patch:
@@ -1,10 +1,9 @@
 package io.micronaut.docs.config.mapFormat;
 
+// tag::imports[]
 import io.micronaut.context.annotation.ConfigurationProperties;
 import javax.validation.constraints.Min;
 import java.util.Map;
-
-// tag::imports[]
 import io.micronaut.core.convert.format.MapFormat;
 // end::imports[]
 

File: http/src/main/java/io/micronaut/http/cookie/Cookie.java
Patch:
@@ -147,7 +147,7 @@ public interface Cookie extends Comparable<Cookie>, Serializable {
         ArgumentUtils.requireNonNull("configuration", configuration);
         configuration.getCookiePath().ifPresent(this::path);
         configuration.getCookieDomain().ifPresent(this::domain);
-        configuration.getCookieMaxAge().ifPresent(this::maxAge);
+        configuration.getCookieMaxAge().ifPresent(maxAge -> this.maxAge(maxAge.get(ChronoUnit.SECONDS)));
         configuration.isCookieHttpOnly().ifPresent(this::httpOnly);
         if (isSecure) {
             configuration.isCookieSecure().ifPresent(this::secure);

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 import javax.annotation.Nonnull;
 import java.time.Duration;
+import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 
 /**
@@ -62,5 +63,5 @@ public interface CookieConfiguration {
     /**
      * @return The max age to use for the cookie
      */
-    Optional<Duration> getCookieMaxAge();
+    Optional<TemporalAmount> getCookieMaxAge();
 }

File: multitenancy/src/main/java/io/micronaut/multitenancy/writer/CookieTenantWriter.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.inject.Singleton;
 import java.io.Serializable;
+import java.time.temporal.ChronoUnit;
 
 /**
  *  Writes the tenantId to in a cookie.
@@ -57,7 +58,7 @@ public void writeTenant(MutableHttpRequest<?> request, Serializable tenant) {
             );
             cookie.configure(cookieTenantWriterConfiguration, request.isSecure());
             if (cookieTenantWriterConfiguration.getCookieMaxAge().isPresent()) {
-                cookie.maxAge(cookieTenantWriterConfiguration.getCookieMaxAge().get());
+                cookie.maxAge(cookieTenantWriterConfiguration.getCookieMaxAge().get().get(ChronoUnit.SECONDS));
             } else {
                 cookie.maxAge(Integer.MAX_VALUE);
             }

File: multitenancy/src/main/java/io/micronaut/multitenancy/writer/CookieTenantWriterConfigurationProperties.java
Patch:
@@ -20,6 +20,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.time.Duration;
+import java.time.temporal.TemporalAmount;
 import java.util.Optional;
 
 /**
@@ -152,7 +153,7 @@ public Optional<Boolean> isCookieSecure() {
      * @return The max age to use for the cookie
      */
     @Override
-    public Optional<Duration> getCookieMaxAge() {
+    public Optional<TemporalAmount> getCookieMaxAge() {
         return Optional.ofNullable(cookieMaxAge);
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -357,7 +357,7 @@ private void exceptionCaughtInternal(ChannelHandlerContext ctx,
 
             if (exceptionHandler.isPresent()) {
                 ExceptionHandler handler = exceptionHandler.get();
-                MediaType defaultResponseMediaType = MediaType.fromType(exceptionHandler.getClass()).orElse(MediaType.APPLICATION_JSON_TYPE);
+                MediaType defaultResponseMediaType = MediaType.fromType(handler.getClass()).orElse(MediaType.APPLICATION_JSON_TYPE);
                 try {
                     Flowable resultFlowable = Flowable.defer(() -> {
                         Object result = handler.handle(nettyHttpRequest, cause);

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/EurekaConfiguration.java
Patch:
@@ -27,7 +27,6 @@
 import io.micronaut.discovery.eureka.client.v2.EurekaClient;
 import io.micronaut.discovery.eureka.client.v2.InstanceInfo;
 import io.micronaut.discovery.eureka.client.v2.LeaseInfo;
-import io.micronaut.discovery.eureka.condition.RequiresEureka;
 import io.micronaut.discovery.registration.RegistrationConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -357,7 +357,7 @@ private void exceptionCaughtInternal(ChannelHandlerContext ctx,
 
             if (exceptionHandler.isPresent()) {
                 ExceptionHandler handler = exceptionHandler.get();
-                MediaType defaultResponseMediaType = MediaType.fromType(exceptionHandler.getClass()).orElse(MediaType.APPLICATION_JSON_TYPE);
+                MediaType defaultResponseMediaType = MediaType.fromType(handler.getClass()).orElse(MediaType.APPLICATION_JSON_TYPE);
                 try {
                     Flowable resultFlowable = Flowable.defer(() -> {
                         Object result = handler.handle(nettyHttpRequest, cause);

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/condition/RequiresEureka.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.discovery.eureka.condition;
 
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.discovery.eureka.EurekaConfiguration;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: session/src/main/java/io/micronaut/session/SessionConfiguration.java
Patch:
@@ -29,6 +29,9 @@
 @ConfigurationProperties(SessionSettings.PREFIX)
 public class SessionConfiguration {
 
+    /**
+     * @deprecated Use {@link #DEFAULT_MAXINACTIVEINTERVAL_MINUTES} instead.
+     */
     @Deprecated
     public static final int DEFAULT_MAXINACTIVEINTERVAL_SECONDS = 30;
 

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/condition/RequiresEureka.java
Patch:
@@ -33,6 +33,6 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PACKAGE, ElementType.TYPE})
-@Requires(property = EurekaConfiguration.PREFIX)
+@Requires(condition = RequiresEurekaCondition.class)
 public @interface RequiresEureka {
 }

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/ConsulAslTokenFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.discovery.consul.client.v1;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.discovery.consul.ConsulConfiguration;
@@ -35,6 +36,7 @@
  */
 @Filter(patterns = "/v1/**", serviceId = ConsulClient.SERVICE_ID)
 @Requires(beans = ConsulConfiguration.class)
+@BootstrapContextCompatible
 public class ConsulAslTokenFilter implements HttpClientFilter, Toggleable {
 
     /**

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -254,7 +254,7 @@ public int compareTo(UriTemplate o) {
 
         for (PathSegment segment: this.segments) {
             if (segment.isVariable()) {
-                if (!segment.isQuerySegment()){
+                if (!segment.isQuerySegment()) {
                     thisVariableCount++;
                 }
             } else {

File: router/src/main/java/io/micronaut/web/router/DefaultRouter.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.filter.HttpFilter;
 import io.micronaut.http.uri.UriMatchTemplate;
-import io.micronaut.http.uri.UriTemplate;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -268,7 +268,7 @@ public DefaultConstraintValidators() {
     @Inject
     protected DefaultConstraintValidators(@Nullable BeanContext beanContext) {
         this.beanContext = beanContext;
-        BeanWrapper<DefaultConstraintValidators> wrapper = BeanWrapper.findWrapper(this).orElse(null);
+        BeanWrapper<DefaultConstraintValidators> wrapper = BeanWrapper.findWrapper(DefaultConstraintValidators.class, this).orElse(null);
         if (wrapper != null) {
 
             final Collection<BeanProperty<DefaultConstraintValidators, Object>> beanProperties = wrapper.getBeanProperties();

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientException.java
Patch:
@@ -43,6 +43,7 @@ public HttpClientException(String message, Throwable cause) {
     /**
      * @param message The message
      * @param cause   The throwable
+     * @param shared Shared instance
      */
     public HttpClientException(String message, Throwable cause, boolean shared) {
         super(message, cause, false, true);

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -34,8 +34,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-import static io.micronaut.management.endpoint.EndpointDefaultConfiguration.PATH;
-
 /**
  * Returns 401 for {@link io.micronaut.management.endpoint.annotation.Endpoint} requests which have sensitive true. Disabled if micronaut.security is enabled.
  *

File: http-client/src/main/java/io/micronaut/http/client/exceptions/ReadTimeoutException.java
Patch:
@@ -26,6 +26,6 @@ public final class ReadTimeoutException extends HttpClientException {
     public static final ReadTimeoutException TIMEOUT_EXCEPTION = new ReadTimeoutException();
 
     private ReadTimeoutException() {
-        super("Read Timeout");
+        super("Read Timeout", null, true);
     }
 }

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1795,7 +1795,9 @@ private Qualifier resolveQualifier(
                     qualifier = optional.orElse(null);
                 }
                 if (qualifier == null) {
-                    if ((hasMetadata && argument.isAnnotationPresent(Parameter.class)) || innerConfiguration || Qualifier.class == argument.getType()) {
+                    if ((hasMetadata && argument.isAnnotationPresent(Parameter.class)) ||
+                            (innerConfiguration && isIterable) ||
+                            Qualifier.class == argument.getType()) {
                         final Optional<String> n = resolutionContext.get(NAMED_ATTRIBUTE, String.class);
                         qualifier = n.map(Qualifiers::byName).orElse(null);
                     }

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospectionMap.java
Patch:
@@ -76,7 +76,7 @@ public int size() {
 
     @Override
     public boolean isEmpty() {
-        return size() > 0;
+        return size() == 0;
     }
 
     @Override

File: http/src/main/java/io/micronaut/http/cookie/Cookie.java
Patch:
@@ -20,7 +20,7 @@
 import javax.annotation.Nullable;
 import java.io.Serializable;
 import java.time.temporal.ChronoUnit;
-import java.time.temporal.TemporalAmount;
+import java.time.Duration;
 
 /**
  * An interface representing a Cookie. See https://tools.ietf.org/html/rfc6265.
@@ -156,12 +156,12 @@ public interface Cookie extends Comparable<Cookie>, Serializable {
     }
 
     /**
-     * Sets the max age of the cookie in seconds.
+     * Sets the max age of the cookie.
      *
      * @param maxAge The max age
      * @return This cookie
      */
-    default @Nonnull Cookie maxAge(@Nonnull TemporalAmount maxAge) {
+    default @Nonnull Cookie maxAge(@Nonnull Duration maxAge) {
         ArgumentUtils.requireNonNull("maxAge", maxAge);
         return maxAge(maxAge.get(ChronoUnit.SECONDS));
     }

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 package io.micronaut.http.cookie;
 
 import javax.annotation.Nonnull;
-import java.time.temporal.TemporalAmount;
+import java.time.Duration;
 import java.util.Optional;
 
 /**
@@ -62,5 +62,5 @@ public interface CookieConfiguration {
     /**
      * @return The max age to use for the cookie
      */
-    Optional<TemporalAmount> getCookieMaxAge();
+    Optional<Duration> getCookieMaxAge();
 }

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -179,7 +179,8 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
 
             Class<? extends Annotation> annotationType = httpMethodMapping.get();
 
-            HttpMethod httpMethod = HttpMethod.valueOf(annotationType.getSimpleName().toUpperCase());
+            HttpMethod httpMethod = HttpMethod.parse(annotationType.getSimpleName().toUpperCase());
+            String httpMethodName = context.getValue(CustomHttpMethod.class, "method", String.class).orElse(httpMethod.name());
 
             ReturnType returnType = context.getReturnType();
             Class<?> javaReturnType = returnType.getType();
@@ -353,7 +354,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             uri = uriTemplate.expand(paramMap);
             uriVariables.forEach(queryParams::remove);
 
-            request = HttpRequest.create(httpMethod, appendQuery(uri, queryParams));
+            request = HttpRequest.create(httpMethod, appendQuery(uri, queryParams), httpMethodName);
             if (body != null) {
                 request.body(body);
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -103,7 +103,7 @@ public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
 
     @Override
     public String toString() {
-        return getMethod() + " " + getUri();
+        return getHttpMethodName() + " " + getUri();
     }
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/routes/RoutesEndpoint.java
Patch:
@@ -54,7 +54,7 @@ public Single getRoutes() {
         Stream<UriRoute> uriRoutes = router.uriRoutes()
                 .sorted(Comparator
                         .comparing((UriRoute r) -> r.getUriMatchTemplate().toPathString())
-                        .thenComparing((UriRoute r) -> r.getHttpMethod().ordinal()));
+                        .thenComparing((UriRoute r) -> r.getHttpMethodName()));
         return Single.fromPublisher(routeDataCollector.getData(uriRoutes));
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/routes/impl/RxJavaRouteDataCollector.java
Patch:
@@ -85,7 +85,7 @@ protected String getRouteKey(UriRoute route) {
         return new StringBuilder("{[")
             .append(route.getUriMatchTemplate())
             .append("],method=[")
-            .append(route.getHttpMethod().name())
+            .append(route.getHttpMethodName())
             .append("],produces=[")
             .append(produces)
             .append("]}")

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/AbstractBraveTracingFilter.java
Patch:
@@ -79,7 +79,7 @@ void afterTerminate(HttpRequest<?> request) {
     Optional<Span> configuredSpan(HttpRequest<?> request, HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getHttpMethodName());
         return request.getAttribute(TraceRequestAttributes.CURRENT_SPAN, Span.class);
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -124,14 +124,14 @@ public void onComplete() {
 
     private void configureSpan(Span span) {
         span.kind(Span.Kind.CLIENT);
-        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethod().name());
+        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getHttpMethodName());
         String path = request.getPath();
         span.tag(AbstractOpenTracingFilter.TAG_PATH, path);
     }
 
     private void configureAttributes(HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getHttpMethodName());
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpServerTracingPublisher.java
Patch:
@@ -79,7 +79,7 @@ public void subscribe(Subscriber<? super MutableHttpResponse<?>> actual) {
         Span span = initialSpan;
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o ->
-                span.name(request.getMethod() + " " + o.toString())
+                span.name(request.getHttpMethodName() + " " + o.toString())
         );
         request.setAttribute(TraceRequestAttributes.CURRENT_SPAN, span);
         try (Tracer.SpanInScope ignored = tracer.withSpanInScope(span)) {
@@ -148,13 +148,13 @@ public void onComplete() {
 
     private void configureSpan(Span span) {
         span.kind(Span.Kind.SERVER);
-        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getMethod().name());
+        span.tag(AbstractOpenTracingFilter.TAG_METHOD, request.getHttpMethodName());
         span.tag(AbstractOpenTracingFilter.TAG_PATH, request.getPath());
     }
 
     private void configureAttributes(HttpResponse<?> response) {
         Optional<Object> routeTemplate = request.getAttribute(HttpAttributes.URI_TEMPLATE);
         routeTemplate.ifPresent(o -> response.setAttribute(HttpAttributes.URI_TEMPLATE, o));
-        response.setAttribute(HttpAttributes.METHOD_NAME, request.getMethod().name());
+        response.setAttribute(HttpAttributes.METHOD_NAME, request.getHttpMethodName());
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpTracingFactory.java
Patch:
@@ -63,7 +63,7 @@ HttpClientHandler<HttpRequest<?>, HttpResponse<?>> httpClientHandler(HttpTracing
         return HttpClientHandler.create(httpTracing, new HttpClientAdapter<HttpRequest<?>, HttpResponse<?>>() {
             @Override
             public String method(HttpRequest<?> request) {
-                return request.getMethod().name();
+                return request.getHttpMethodName();
             }
 
             @Override
@@ -112,7 +112,7 @@ HttpServerHandler<HttpRequest<?>, HttpResponse<?>> httpServerHandler(HttpTracing
         return HttpServerHandler.create(httpTracing, new HttpServerAdapter<HttpRequest<?>, HttpResponse<?>>() {
             @Override
             public String method(HttpRequest<?> request) {
-                return request.getMethod().name();
+                return request.getHttpMethodName();
             }
 
             @Override

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -95,7 +95,7 @@ protected void setErrorTags(Span span, Throwable error) {
      */
     protected String resolveSpanName(HttpRequest<?> request) {
         Optional<String> route = request.getAttribute(HttpAttributes.URI_TEMPLATE, String.class);
-        return route.map(s -> request.getMethod() + " " + s).orElse(request.getMethod() + " " + request.getPath());
+        return route.map(s -> request.getHttpMethodName() + " " + s).orElse(request.getHttpMethodName() + " " + request.getPath());
     }
 
     /**
@@ -111,7 +111,7 @@ protected Tracer.SpanBuilder newSpan(HttpRequest<?> request, SpanContext spanCon
                 spanName
         ).asChildOf(spanContext);
 
-        spanBuilder.withTag(TAG_METHOD, request.getMethod().name());
+        spanBuilder.withTag(TAG_METHOD, request.getHttpMethodName());
         String path = request.getPath();
         spanBuilder.withTag(TAG_PATH, path);
         return spanBuilder;

File: http/src/main/java/io/micronaut/http/annotation/Controller.java
Patch:
@@ -47,9 +47,7 @@
 public @interface Controller {
 
     /**
-     * <p>This attribute returns the base URI of the controller. If not specified the URI will be
-     * formulated from the controller class name without the "Controller" suffix (ie. {@code MessageController becomes}
-     * {@code /message}).</p>
+     * <p>This attribute returns the base URI of the controller</p>
      * <p>
      * <p>A value of {@code /} can be used to map a controller
      * to the root URI.</p>

File: http/src/main/java/io/micronaut/http/annotation/Delete.java
Patch:
@@ -38,14 +38,14 @@
 public @interface Delete {
 
     /**
-     * @return The URI of the DELETE route if not specified inferred from the method name and arguments
+     * @return The URI of the DELETE route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the DELETE route if not specified inferred from the method name and arguments
+     * @return The URI of the DELETE route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Get.java
Patch:
@@ -38,14 +38,14 @@
 public @interface Get {
 
     /**
-     * @return The URI of the GET route if not specified inferred from the method name and arguments
+     * @return The URI of the GET route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the TRACE route if not specified inferred from the method name and arguments
+     * @return The URI of the GET route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Head.java
Patch:
@@ -37,14 +37,14 @@
 public @interface Head {
 
     /**
-     * @return The URI of the HEAD route if not specified inferred from the method name and arguments
+     * @return The URI of the HEAD route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the HEAD route if not specified inferred from the method name and arguments
+     * @return The URI of the HEAD route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Options.java
Patch:
@@ -38,14 +38,14 @@
 public @interface Options {
 
     /**
-     * @return The URI of the OPTIONS route if not specified inferred from the method name and arguments
+     * @return The URI of the OPTIONS route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the OPTIONS route if not specified inferred from the method name and arguments
+     * @return The URI of the OPTIONS route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Patch.java
Patch:
@@ -38,13 +38,13 @@
 public @interface Patch {
 
     /**
-     * @return The URI of the PATCH route if not specified inferred from the method name and arguments
+     * @return The URI of the PATCH route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     String value() default "";
 
     /**
-     * @return The URI of the PATCH route if not specified inferred from the method name and arguments
+     * @return The URI of the PATCH route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     String uri() default "";

File: http/src/main/java/io/micronaut/http/annotation/Post.java
Patch:
@@ -38,14 +38,14 @@
 public @interface Post {
 
     /**
-     * @return The URI of the POST route if not specified inferred from the method name and arguments
+     * @return The URI of the POST route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the POST route if not specified inferred from the method name and arguments
+     * @return The URI of the POST route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Put.java
Patch:
@@ -38,14 +38,14 @@
 public @interface Put {
 
     /**
-     * @return The URI of the PUT route if not specified inferred from the method name and arguments
+     * @return The URI of the PUT route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the PUT route if not specified inferred from the method name and arguments
+     * @return The URI of the PUT route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http/src/main/java/io/micronaut/http/annotation/Trace.java
Patch:
@@ -37,14 +37,14 @@
 public @interface Trace {
 
     /**
-     * @return The URI of the TRACE route if not specified inferred from the method name and arguments
+     * @return The URI of the TRACE route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")
     String value() default UriMapping.DEFAULT_URI;
 
     /**
-     * @return The URI of the TRACE route if not specified inferred from the method name and arguments
+     * @return The URI of the TRACE route
      */
     @AliasFor(annotation = HttpMethodMapping.class, member = "value")
     @AliasFor(annotation = UriMapping.class, member = "value")

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1290,7 +1290,7 @@ protected List<HttpClientFilter> resolveFilters(
         if (parentRequest != null) {
             filterList.add(new ClientServerContextFilter(parentRequest));
         }
-        String requestPath = requestURI.getPath();
+        String requestPath = StringUtils.prependUri("/", requestURI.getPath());
         io.micronaut.http.HttpMethod method = request.getMethod();
         for (HttpClientFilter filter : filters) {
             if (filter instanceof Toggleable && !((Toggleable) filter).isEnabled()) {

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -184,7 +184,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             ReturnType returnType = context.getReturnType();
             Class<?> javaReturnType = returnType.getType();
 
-            UriMatchTemplate uriTemplate = UriMatchTemplate.of("/");
+            UriMatchTemplate uriTemplate = UriMatchTemplate.of("");
             if (!(uri.length() == 1 && uri.charAt(0) == '/')) {
                 uriTemplate = uriTemplate.nest(uri);
             }

File: session/src/main/java/io/micronaut/session/InMemorySessionStore.java
Patch:
@@ -31,7 +31,6 @@
 import java.time.Instant;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.TimeUnit;
 
 /**
  * Default implementation that stores sessions in-memory.

File: session/src/main/java/io/micronaut/session/InMemorySessionStore.java
Patch:
@@ -147,8 +147,7 @@ public long expireAfterRead(String key, InMemorySession value, long currentTime,
             private long newExpiry(InMemorySession value) {
                 Instant current = Instant.now();
                 value.setLastAccessedTime(current);
-                long newExpiry = current.plus(value.getMaxInactiveInterval()).toEpochMilli();
-                return TimeUnit.MILLISECONDS.toNanos(newExpiry);
+                return value.getMaxInactiveInterval().toNanos();
             }
         };
     }

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -530,6 +530,7 @@ private static void invokeLoadClassValueMethod(
 
             ), ACC_STATIC | ACC_SYNTHETIC, methodName, desc);
 
+            loadTypeGenerator.visitCode();
             Label tryStart = new Label();
             Label tryEnd = new Label();
             Label exceptionHandler = new Label();
@@ -553,6 +554,7 @@ private static void invokeLoadClassValueMethod(
             loadTypeGenerator.visitLabel(tryEnd);
             loadTypeGenerator.returnValue();
             loadTypeGenerator.visitLabel(exceptionHandler);
+            loadTypeGenerator.visitFrame(Opcodes.F_NEW, 0, new Object[] {}, 1, new Object[] {"java/lang/Throwable"});
             // Try load the class
 
             // fallback to return a class value that is just a string

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -826,6 +826,9 @@ public void visitBeanDefinitionEnd() {
             proxyConstructorGenerator.loadArg(beanContextArgumentIndex);
             proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_LOCATOR, TYPE_BEAN_LOCATOR);
 
+            proxyConstructorGenerator.loadThis();
+            proxyConstructorGenerator.loadArg(qualifierIndex);
+            proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_QUALIFIER, Type.getType(Qualifier.class));
 
             Method resolveTargetMethodDesc = writeResolveTargetMethod(proxyClassWriter, targetType);
 

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -826,6 +826,9 @@ public void visitBeanDefinitionEnd() {
             proxyConstructorGenerator.loadArg(beanContextArgumentIndex);
             proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_LOCATOR, TYPE_BEAN_LOCATOR);
 
+            proxyConstructorGenerator.loadThis();
+            proxyConstructorGenerator.loadArg(qualifierIndex);
+            proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_QUALIFIER, Type.getType(Qualifier.class));
 
             Method resolveTargetMethodDesc = writeResolveTargetMethod(proxyClassWriter, targetType);
 

File: router/src/main/java/io/micronaut/web/router/UriRoute.java
Patch:
@@ -85,4 +85,5 @@ default Optional<UriRouteMatch> match(URI uri) {
 
     @Override
     UriRoute body(String argument);
+
 }

File: runtime/src/main/java/io/micronaut/runtime/http/scope/RequestCustomScope.java
Patch:
@@ -88,6 +88,9 @@ public <T> T get(BeanResolutionContext resolutionContext, BeanDefinition<T> bean
                 bean = (T) scopedBeanMap.get(identifier);
                 if (bean == null) {
                     bean = provider.get();
+                    if (bean instanceof RequestAware) {
+                        ((RequestAware) bean).setRequest(httpRequest);
+                    }
                     scopedBeanMap.put(identifier, bean);
                 }
             }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -102,7 +102,7 @@ public class NettyHttpServerConfiguration extends HttpServerConfiguration {
     private int initialBufferSize = DEFAULT_INITIALBUFFERSIZE;
     private LogLevel logLevel;
     private int compressionThreshold = DEFAULT_COMPRESSIONTHRESHOLD;
-    private int compressionLevel = DEFAULT_COMPRESSIONTHRESHOLD;
+    private int compressionLevel = DEFAULT_COMPRESSIONLEVEL;
     private boolean useNativeTransport = DEFAULT_USE_NATIVE_TRANSPORT;
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/multipart/BytePart.java
Patch:
@@ -16,11 +16,9 @@
 package io.micronaut.http.client.multipart;
 
 import io.micronaut.http.MediaType;
-import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.multipart.FileUpload;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -30,7 +30,6 @@
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
@@ -47,8 +46,7 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor<H
     private final HttpPostRequestDecoder decoder;
     private final boolean enabled;
     private AtomicLong extraMessages = new AtomicLong(0);
-    private final ConcurrentHashMap<Integer, Long> partLengths = new ConcurrentHashMap<>();
-    protected final long partMaxSize;
+    private final long partMaxSize;
 
     /**
      * @param nettyHttpRequest The {@link NettyHttpRequest}

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -252,7 +252,7 @@ public synchronized EmbeddedServer start() {
                     final HttpRequestDecoder requestDecoder = new HttpRequestDecoder(NettyHttpServer.this, environment, serverConfiguration);
                     final HttpResponseEncoder responseDecoder = new HttpResponseEncoder(mediaTypeCodecRegistry, serverConfiguration);
                     final RoutingInBoundHandler routingHandler = new RoutingInBoundHandler(
-                        beanLocator,
+                        applicationContext,
                         router,
                         mediaTypeCodecRegistry,
                         customizableResponseTypeHandlerRegistry,

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -320,8 +320,10 @@ class AnnBeanElementVisitor extends ElementScanner8<Object, Object> {
             this.isConfigurationPropertiesType = isConfigurationProperties(concreteClass);
             this.isAopProxyType = concreteClassMetadata.hasStereotype(AROUND_TYPE) && !modelUtils.isAbstract(concreteClass);
             this.aopSettings = isAopProxyType ? concreteClassMetadata.getValues(AROUND_TYPE, Boolean.class) : OptionalValues.empty();
+            ExecutableElement constructor = modelUtils.concreteConstructorFor(concreteClass, annotationUtils);
+            this.constructorParameterInfo = populateParameterData(null, constructor, Collections.emptyMap());
             this.isExecutableType = isAopProxyType || concreteClassMetadata.hasStereotype(Executable.class);
-            this.isDeclaredBean = isExecutableType || isConfigurationPropertiesType || isFactoryType || concreteClassMetadata.hasStereotype(Scope.class) || concreteClassMetadata.hasStereotype(DefaultScope.class);
+            this.isDeclaredBean = isExecutableType || isConfigurationPropertiesType || isFactoryType || concreteClassMetadata.hasStereotype(Scope.class) || concreteClassMetadata.hasStereotype(DefaultScope.class) || constructorParameterInfo.getAnnotationMetadata().hasStereotype(Inject.class);
         }
 
         /**
@@ -398,8 +400,6 @@ public Object visitType(TypeElement classElement, Object o) {
                         qualifiedName.equals(classElementQualifiedName)) {
 
                     if (qualifiedName.equals(classElementQualifiedName)) {
-                        ExecutableElement constructor = modelUtils.concreteConstructorFor(classElement, annotationUtils);
-                        this.constructorParameterInfo = populateParameterData(null, constructor, Collections.emptyMap());
                         final boolean isBean = isAopProxyType ||
                                 isConfigurationPropertiesType ||
                                 typeAnnotationMetadata.hasStereotype(ANNOTATION_STEREOTYPES) ||

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -826,6 +826,9 @@ public void visitBeanDefinitionEnd() {
             proxyConstructorGenerator.loadArg(beanContextArgumentIndex);
             proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_LOCATOR, TYPE_BEAN_LOCATOR);
 
+            proxyConstructorGenerator.loadThis();
+            proxyConstructorGenerator.loadArg(qualifierIndex);
+            proxyConstructorGenerator.putField(proxyType, FIELD_BEAN_QUALIFIER, Type.getType(Qualifier.class));
 
             Method resolveTargetMethodDesc = writeResolveTargetMethod(proxyClassWriter, targetType);
 

File: inject/src/main/java/io/micronaut/context/BeanDefinitionDelegate.java
Patch:
@@ -28,9 +28,7 @@
 import io.micronaut.inject.*;
 import io.micronaut.inject.qualifiers.Qualifiers;
 
-import java.lang.annotation.Annotation;
 import java.util.*;
-import java.util.stream.Stream;
 
 /**
  * A delegate bean definition.

File: test-suite/src/test/groovy/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -93,7 +93,7 @@ public HttpResponse<String> uploadBytes(byte[] file, String fileName) { // <2>
     // end::bytesUpload[]
 
     // tag::wholeBodyUpload[]
-    @Post(value = "/bytes", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/whole-body", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
     public Single<String> uploadBytes(@Body MultipartBody body) { // <2>
         return Single.create(emitter -> {
             body.subscribe(new Subscriber<CompletedPart>() {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -849,8 +849,7 @@ public static <T extends Annotation> AnnotationValueBuilder<T> builder(Class<T>
         if (value instanceof CharSequence) {
             return new String[] { value.toString() };
         } else if (value instanceof String[]) {
-            String[] strs = (String[]) value;
-            return resolveStringArray(strs, valueMapper);
+            return (String[]) value;
         } else if (value != null) {
             if (value.getClass().isArray()) {
                 int len = Array.getLength(value);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/MultipartBodyArgumentBinder.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.http.multipart.CompletedPart;
 import io.micronaut.http.netty.stream.StreamedHttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.multipart.MultipartBody;
 import io.micronaut.http.server.netty.*;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;
 import io.netty.buffer.ByteBufHolder;
@@ -44,7 +43,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
- * A {@link io.micronaut.http.annotation.Body} argument binder for a {@link MultipartBody} argument.
+ * A {@link io.micronaut.http.annotation.Body} argument binder for a {@link Publisher<CompletedPart>} argument.
  *
  * @author James Kleeh
  * @since 1.3.0

File: runtime/src/main/java/io/micronaut/discovery/ServiceInstance.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.discovery;
 
-import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.health.HealthStatus;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -194,13 +194,14 @@ public List<PropertyElement> getBeanProperties() {
         for (PropertyNode propertyNode : propertyNodes) {
             if (propertyNode.isPublic() && !propertyNode.isStatic()) {
                 groovyProps.add(propertyNode.getName());
+                boolean readOnly = propertyNode.getField().isFinal();
                 GroovyPropertyElement groovyPropertyElement = new GroovyPropertyElement(
                         sourceUnit,
                         this,
                         propertyNode.getField(),
                         AstAnnotationUtils.getAnnotationMetadata(sourceUnit, propertyNode.getField()),
                         propertyNode.getName(),
-                        false,
+                        readOnly,
                         propertyNode
                 ) {
                     @Nonnull

File: inject/src/main/java/io/micronaut/context/annotation/DefaultImplementation.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.micronaut.context.annotation;
 
+import io.micronaut.core.annotation.Experimental;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -57,6 +59,7 @@
 @Documented
 @Retention(RUNTIME)
 @Target(ElementType.TYPE)
+@Experimental
 public @interface DefaultImplementation {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -32,7 +32,7 @@
  * A Netty implementation of {@link CompletedFileUpload}.
  *
  * @author Zachary Klein
- * @since 1.0
+ * @since 1.0.0
  */
 @Internal
 public class NettyCompletedFileUpload implements CompletedFileUpload {
@@ -49,6 +49,7 @@ public NettyCompletedFileUpload(FileUpload fileUpload) {
 
     /**
      * @param fileUpload The file upload
+     * @param controlRelease If true, release after retrieving the data
      */
     public NettyCompletedFileUpload(FileUpload fileUpload, boolean controlRelease) {
         this.fileUpload = fileUpload;

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/Green.java
Patch:
@@ -1,9 +1,9 @@
 package io.micronaut.docs.context.annotation.primary;
 
-import io.micronaut.context.annotation.Primary;
+import io.micronaut.context.annotation.Requires;
 
 //tag::imports[]
-import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.annotation.Primary;
 import javax.inject.Singleton;
 //end::imports[]
 

File: test-suite/src/test/java/io/micronaut/docs/context/annotation/primary/Green.java
Patch:
@@ -1,9 +1,9 @@
 package io.micronaut.docs.context.annotation.primary;
 
-import io.micronaut.context.annotation.Primary;
+import io.micronaut.context.annotation.Requires;
 
 //tag::imports[]
-import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.annotation.Primary;
 import javax.inject.Singleton;
 //end::imports[]
 

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -105,7 +105,6 @@ public PropertySourcePropertyResolver(PropertySource... propertySources) {
      */
     public PropertySourcePropertyResolver addPropertySource(@Nullable PropertySource propertySource) {
         if (propertySource != null) {
-            propertySources.put(propertySource.getName(), propertySource);
             processPropertySource(propertySource, propertySource.getConvention());
         }
         return this;

File: runtime/src/main/java/io/micronaut/jackson/bind/MapToObjectConverter.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.BiFunction;
-import java.util.function.Function;
 
 /**
  * A class that uses the {@link BeanPropertyBinder} to bind maps to {@link Object} instances.

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -183,7 +183,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             ReturnType returnType = context.getReturnType();
             Class<?> javaReturnType = returnType.getType();
 
-            UriMatchTemplate uriTemplate = UriMatchTemplate.of("");
+            UriMatchTemplate uriTemplate = UriMatchTemplate.of("/");
             if (!(uri.length() == 1 && uri.charAt(0) == '/')) {
                 uriTemplate = uriTemplate.nest(uri);
             }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineClient.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.client.annotation.Client;
 import io.reactivex.Flowable;
-// end::imports[]
 import reactor.core.publisher.Flux;
+// end::imports[]
 
 // tag::class[]
 @Client("/streaming")

File: test-suite/src/test/java/io/micronaut/docs/context/events/application/SampleEventListenerSpec.java
Patch:
@@ -1,10 +1,12 @@
 package io.micronaut.docs.context.events.application;
 
+// tag::imports[]
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.docs.context.events.SampleEventEmitterBean;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+// end::imports[]
 
 // tag::class[]
 public class SampleEventListenerSpec {

File: test-suite/src/test/java/io/micronaut/docs/context/events/async/SampleEventListenerSpec.java
Patch:
@@ -1,5 +1,6 @@
 package io.micronaut.docs.context.events.async;
 
+// tag::imports[]
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.docs.context.events.SampleEventEmitterBean;
 import org.junit.Test;
@@ -8,6 +9,7 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.awaitility.Awaitility.await;
 import static org.hamcrest.Matchers.equalTo;
+// end::imports[]
 
 // tag::class[]
 public class SampleEventListenerSpec {

File: test-suite/src/test/java/io/micronaut/docs/factories/nullable/EngineConfiguration.java
Patch:
@@ -5,6 +5,7 @@
 
 import javax.validation.constraints.NotNull;
 
+// tag::class[]
 @EachProperty("engines")
 public class EngineConfiguration implements Toggleable {
 
@@ -30,3 +31,4 @@ public void setEnabled(boolean enabled) {
     }
 
 }
+// end::class[]

File: test-suite/src/test/java/io/micronaut/docs/ioc/validation/custom/DurationPattern.java
Patch:
@@ -25,4 +25,4 @@
         DurationPattern[] value(); // <3>
     }
 }
-// end::imports[]
+// end::class[]

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidatorConfiguration.java
Patch:
@@ -197,8 +197,7 @@ public ExecutionHandleLocator getExecutionHandleLocator() {
         if (executionHandleLocator != null) {
             return executionHandleLocator;
         } else {
-            return new ExecutionHandleLocator() {
-            };
+            return ExecutionHandleLocator.EMPTY;
         }
     }
 

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -237,8 +237,8 @@ protected void initializeContext(List<BeanDefinitionReference> contextScopeBeans
     }
 
     @Override
-    protected <T> Collection<BeanDefinition<T>> findBeanCandidates(Class<T> beanType, BeanDefinition<?> filter) {
-        Collection<BeanDefinition<T>> candidates = super.findBeanCandidates(beanType, filter);
+    protected <T> Collection<BeanDefinition<T>> findBeanCandidates(Class<T> beanType, BeanDefinition<?> filter, boolean filterProxied) {
+        Collection<BeanDefinition<T>> candidates = super.findBeanCandidates(beanType, filter, filterProxied);
         if (!candidates.isEmpty()) {
 
             List<BeanDefinition<T>> transformedCandidates = new ArrayList<>();
@@ -274,7 +274,7 @@ protected <T> Collection<BeanDefinition<T>> findBeanCandidates(Class<T> beanType
                         continue;
                     }
 
-                    Collection<BeanDefinition> dependentCandidates = findBeanCandidates(dependentType, null);
+                    Collection<BeanDefinition> dependentCandidates = findBeanCandidates(dependentType, null, filterProxied);
                     if (!dependentCandidates.isEmpty()) {
                         for (BeanDefinition dependentCandidate : dependentCandidates) {
 

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -545,7 +545,7 @@ private boolean matchesAbsenceOfBeans(ConditionContext context, AnnotationValue<
 
             for (Class<?> type : missingBeans) {
                 // remove self by passing definition as filter
-                Collection<? extends BeanDefinition<?>> beanDefinitions = new ArrayList<>(beanContext.findBeanCandidates(type, bd));
+                Collection<? extends BeanDefinition<?>> beanDefinitions = new ArrayList<>(beanContext.findBeanCandidates(type, bd, true));
 
                 if (!beanDefinitions.isEmpty()) {
                     // remove abstract beans

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -2273,7 +2273,7 @@ private final class RequestKey {
         public RequestKey(URI requestURI) {
             this.secure = "https".equalsIgnoreCase(requestURI.getScheme());
             this.host = requestURI.getHost();
-            this.port = requestURI.getPort() > -1 ? requestURI.getPort() : sslContext != null ? DEFAULT_HTTPS_PORT : DEFAULT_HTTP_PORT;
+            this.port = requestURI.getPort() > -1 ? requestURI.getPort() : this.secure ? DEFAULT_HTTPS_PORT : DEFAULT_HTTP_PORT;
 
         }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -526,8 +526,8 @@ private void visitIntroductionAdviceInterface(TypeElement classElement, Annotati
             classElement.asType().accept(new PublicAbstractMethodVisitor<Object, AopProxyWriter>(classElement, modelUtils, elementUtils) {
 
                 @Override
-                protected boolean isAcceptable(Element element) {
-                    return super.isAcceptable(element) || (element.getKind() == METHOD && annotationUtils.hasStereotype(element, AROUND_TYPE));
+                protected boolean isAcceptableMethod(ExecutableElement executableElement) {
+                    return super.isAcceptableMethod(executableElement) || annotationUtils.getAnnotationMetadata(executableElement).hasDeclaredStereotype(AROUND_TYPE);
                 }
 
                 @Override

File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java
Patch:
@@ -673,7 +673,7 @@ protected void registerDefaultConverters() {
             Argument<?> componentType = typeVariable.orElse(Argument.OBJECT_ARGUMENT);
             Class<?> targetComponentType = ReflectionUtils.getWrapperType(componentType.getType());
 
-            ConversionContext newContext = context.with(componentType);
+            ConversionContext newContext = context.with(componentType).with(context.getAnnotationMetadata());
             Optional converted = convert(object, targetComponentType, newContext);
             if (converted.isPresent()) {
                 return Optional.of(converted);

File: test-suite/src/test/java/io/micronaut/docs/context/events/SampleEventEmitterBean.java
Patch:
@@ -6,13 +6,13 @@
 import javax.inject.Singleton;
 
 @Singleton
-public class MyBean {
+public class SampleEventEmitterBean {
 
     @Inject
     ApplicationEventPublisher eventPublisher;
 
-    void doSomething() {
-        eventPublisher.publishEvent("SampleEvent");
+    public void publishSampleEvent() {
+        eventPublisher.publishEvent(new SampleEvent());
     }
 
 }

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValuesMap.java
Patch:
@@ -79,7 +79,7 @@ public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conve
                 return conversionService.convert(values.get(0), conversionContext);
             } else if (hasValue && hasSingleEntry) {
                 T result = converted.get();
-                if (result instanceof List && ((List) result).isEmpty()) {
+                if (result instanceof Collection && ((Collection) result).isEmpty()) {
                     return conversionService.convert(values.get(0), conversionContext);
                 } else if (result instanceof Optional && !((Optional) result).isPresent()) {
                     return conversionService.convert(values.get(0), conversionContext);

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -315,6 +315,7 @@ class AnnBeanElementVisitor extends ElementScanner8<Object, Object> {
         private AtomicInteger adaptedMethodIndex = new AtomicInteger(0);
         private AtomicInteger factoryMethodIndex = new AtomicInteger(0);
         private Set<Name> visitedTypes = new HashSet<>();
+
         /**
          * @param concreteClass The {@link TypeElement}
          */

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.inject.annotation.AbstractAnnotationMetadataBuilder;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MemberElement;
-import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.annotation.Nonnull;
 import javax.lang.model.element.Element;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1580,7 +1580,8 @@ private void writeDefaultErrorResponse(ChannelHandlerContext ctx, NettyHttpReque
 
     private void logException(Throwable cause) {
         //handling connection reset by peer exceptions
-        if (cause instanceof IOException && IGNORABLE_ERROR_MESSAGE.matcher(cause.getMessage()).matches()) {
+        String message = cause.getMessage();
+        if (cause instanceof IOException && message != null && IGNORABLE_ERROR_MESSAGE.matcher(message).matches()) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Swallowed an IOException caused by client connectivity: " + cause.getMessage(), cause);
             }

File: runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java
Patch:
@@ -38,7 +38,7 @@ class AnnotationRetryStateBuilder implements RetryStateBuilder {
     private static final String MULTIPLIER = "multiplier";
     private static final String DELAY = "delay";
     private static final String MAX_DELAY = "maxDelay";
-    private static final String INCLUDES = "value";
+    private static final String INCLUDES = "includes";
     private static final String EXCLUDES = "excludes";
     private static final int DEFAULT_RETRY_ATTEMPTS = 3;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -182,7 +182,7 @@ public String toString() {
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;
                 Map<String, TypeMirror> boundGenerics = resolveBoundGenerics(visitorContext, genericsInfo);
-                if (JavaModelUtils.resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
+                if (visitorContext.getModelUtils().resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
                     return new JavaEnumElement(
                             typeElement,
                             visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement),

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -523,7 +523,7 @@ private void processAnnotationDefaults(DefaultAnnotationMetadata metadata, Strin
     }
 
     private AnnotationMetadata lookupExisting(String declaringType, T element) {
-        return isMethodOrClassElement(element) ? MUTATED_ANNOTATION_METADATA.get(new MetadataKey(declaringType, element)) : null;
+        return MUTATED_ANNOTATION_METADATA.get(new MetadataKey(declaringType, element));
     }
 
     private void processAnnotationAlias(

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -101,7 +101,7 @@ public class DefaultConstraintValidators implements ConstraintValidatorRegistry
             } else if (value instanceof BigDecimal) {
                 return ((BigDecimal) value).compareTo(BigDecimal.valueOf(max)) < 0;
             }
-            return value.longValue() < max;
+            return value.longValue() <= max;
         };
 
     private final ConstraintValidator<Min, Number> minNumberValidator =

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -833,7 +833,7 @@ protected <I> Function<URI, Flowable<io.micronaut.http.HttpResponse<ByteBuffer<?
                         .map((Function<HttpContent, io.micronaut.http.HttpResponse<ByteBuffer<?>>>) message -> {
                     ByteBuf byteBuf = message.content();
                     if (log.isTraceEnabled()) {
-                        log.trace("HTTP Client Streaming Response Received Chunk (length: {})", byteBuf.readableBytes());
+                        log.trace("HTTP Client Streaming Response Received Chunk (length: {}) for Request: {} {}", byteBuf.readableBytes(), request.getMethod(), request.getUri());
                         traceBody("Response", byteBuf);
                     }
                     ByteBuffer<?> byteBuffer = byteBufferFactory.wrap(byteBuf);
@@ -878,7 +878,7 @@ public void subscribe(Subscriber<? super JsonNode> downstreamSubscriber) {
                         httpContentFlowable.map(content -> {
                             ByteBuf chunk = content.content();
                             if (log.isTraceEnabled()) {
-                                log.trace("HTTP Client Streaming Response Received Chunk (length: {})", chunk.readableBytes());
+                                log.trace("HTTP Client Streaming Response Received Chunk (length: {}) for Request: {} {}", chunk.readableBytes(), request.getMethod(), request.getUri());
                                 traceBody("Chunk", chunk);
                             }
                             try {
@@ -1598,7 +1598,7 @@ protected void channelRead0(ChannelHandlerContext ctx, StreamedHttpResponse msg)
                     NettyStreamedHttpResponse response = new NettyStreamedHttpResponse(msg);
                     HttpHeaders headers = msg.headers();
                     if (log.isTraceEnabled()) {
-                        log.trace("HTTP Client Streaming Response Received: {}", msg.status());
+                        log.trace("HTTP Client Streaming Response Received ({}) for Request: {} {}", msg.status(), nettyRequest.method().name(), nettyRequest.uri());
                         traceHeaders(headers);
                     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -833,7 +833,7 @@ protected <I> Function<URI, Flowable<io.micronaut.http.HttpResponse<ByteBuffer<?
                         .map((Function<HttpContent, io.micronaut.http.HttpResponse<ByteBuffer<?>>>) message -> {
                     ByteBuf byteBuf = message.content();
                     if (log.isTraceEnabled()) {
-                        log.trace("HTTP Client Streaming Response Received Chunk (length: {})", byteBuf.readableBytes());
+                        log.trace("HTTP Client Streaming Response Received Chunk (length: {}) for Request: {} {}", byteBuf.readableBytes(), request.getMethod(), request.getUri());
                         traceBody("Response", byteBuf);
                     }
                     ByteBuffer<?> byteBuffer = byteBufferFactory.wrap(byteBuf);
@@ -878,7 +878,7 @@ public void subscribe(Subscriber<? super JsonNode> downstreamSubscriber) {
                         httpContentFlowable.map(content -> {
                             ByteBuf chunk = content.content();
                             if (log.isTraceEnabled()) {
-                                log.trace("HTTP Client Streaming Response Received Chunk (length: {})", chunk.readableBytes());
+                                log.trace("HTTP Client Streaming Response Received Chunk (length: {}) for Request: {} {}", chunk.readableBytes(), request.getMethod(), request.getUri());
                                 traceBody("Chunk", chunk);
                             }
                             try {
@@ -1598,7 +1598,7 @@ protected void channelRead0(ChannelHandlerContext ctx, StreamedHttpResponse msg)
                     NettyStreamedHttpResponse response = new NettyStreamedHttpResponse(msg);
                     HttpHeaders headers = msg.headers();
                     if (log.isTraceEnabled()) {
-                        log.trace("HTTP Client Streaming Response Received: {}", msg.status());
+                        log.trace("HTTP Client Streaming Response Received ({}) for Request: {} {}", msg.status(), nettyRequest.method().name(), nettyRequest.uri());
                         traceHeaders(headers);
                     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -870,7 +870,7 @@ protected <I, O> Function<URI, Flowable<O>> buildJsonStreamPublisher(io.micronau
                 NettyStreamedHttpResponse<?> nettyStreamedHttpResponse = (NettyStreamedHttpResponse) response;
                 Flowable<HttpContent> httpContentFlowable = Flowable.fromPublisher(nettyStreamedHttpResponse.getNettyResponse());
 
-                boolean isJsonStream = request.getContentType().map(mediaType -> mediaType.equals(MediaType.APPLICATION_JSON_STREAM_TYPE)).orElse(false);
+                boolean isJsonStream = response.getContentType().map(mediaType -> mediaType.equals(MediaType.APPLICATION_JSON_STREAM_TYPE)).orElse(false);
                 boolean streamArray = !Iterable.class.isAssignableFrom(type.getType()) && !isJsonStream;
                 JacksonProcessor jacksonProcessor = new JacksonProcessor(mediaTypeCodec.getObjectMapper().getFactory(), streamArray) {
                     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/AbstractHttpContentProcessor.java
Patch:
@@ -35,7 +35,7 @@
 @Internal
 public abstract class AbstractHttpContentProcessor<T> extends SingleSubscriberProcessor<ByteBufHolder, T> implements HttpContentProcessor<T> {
 
-    protected final NettyHttpRequest nettyHttpRequest;
+    protected final NettyHttpRequest<?> nettyHttpRequest;
     protected final long advertisedLength;
     protected final long requestMaxSize;
     protected final AtomicLong receivedLength = new AtomicLong();

File: inject/src/main/java/io/micronaut/inject/beans/visitor/EntityIntrospectedAnnotationMapper.java
Patch:
@@ -51,4 +51,4 @@ public List<AnnotationValue<?>> map(AnnotationValue<Annotation> annotation, Visi
         );
     }
 }
-// end::class[]
\ No newline at end of file
+// end::class[]

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -173,19 +173,19 @@ public UriTemplate nest(CharSequence uriTemplate) {
      */
     public String expand(Map<String, Object> parameters) {
         StringBuilder builder = new StringBuilder();
-        boolean previousHasContent = false;
+        boolean anyPreviousHasContent = false;
         boolean anyPreviousHasOperator = false;
         for (PathSegment segment : segments) {
-            String result = segment.expand(parameters, previousHasContent, anyPreviousHasOperator);
+            String result = segment.expand(parameters, anyPreviousHasContent, anyPreviousHasOperator);
             if (result == null) {
                 break;
             }
             if (segment instanceof UriTemplateParser.VariablePathSegment) {
                 if (result.contains(String.valueOf(((UriTemplateParser.VariablePathSegment) segment).getOperator()))) {
                     anyPreviousHasOperator = true;
                 }
+                anyPreviousHasContent = anyPreviousHasContent || result.length() > 0;
             }
-            previousHasContent = result.length() > 0;
             builder.append(result);
         }
 

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -540,11 +540,12 @@ private <T> void validateParametersInternal(
             final boolean hasValid = annotationMetadata.hasStereotype(Valid.class);
             final boolean hasConstraint = annotationMetadata.hasStereotype(Constraint.class);
 
+            final MutableArgumentValue<Object> argumentValue = (MutableArgumentValue<Object>) iterator.next();
+
             if (!hasValid && !hasConstraint) {
                 continue;
             }
 
-            final MutableArgumentValue<Object> argumentValue = (MutableArgumentValue<Object>) iterator.next();
             Object parameterValue = argumentValue.getValue();
 
             ValueExtractor<Object> valueExtractor = null;

File: runtime/src/main/java/io/micronaut/scheduling/cron/CronExpression.java
Patch:
@@ -130,7 +130,7 @@
  * the constraints of each field are met. Overlap of intervals are not allowed. That is: for
  * Day-of-week field &quot;FRI-MON&quot; is invalid,but &quot;FRI-SUN,MON&quot; is valid
  */
-public class CronExpression {
+public final class CronExpression {
 
     /**
      * Represents a field in the cron expression.

File: validation/src/main/java/io/micronaut/validation/routes/rules/NullableParameterRule.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.naming.NameUtils;
-import io.micronaut.http.annotation.PathVariable;
 import io.micronaut.http.uri.UriMatchTemplate;
 import io.micronaut.http.uri.UriMatchVariable;
 import io.micronaut.inject.ast.ClassElement;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/CheckEntry.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.core.annotation.ReflectiveAccess;
 import io.micronaut.core.util.StringUtils;
 
+import javax.annotation.Nullable;
 import java.util.Locale;
 
 /**
@@ -43,7 +44,7 @@ public class CheckEntry implements Check {
      * @param id The id
      */
     @JsonCreator
-    protected CheckEntry(@JsonProperty("CheckID") String id) {
+    protected CheckEntry(@Nullable @JsonProperty("CheckID") String id) {
         this.id = id;
     }
 

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/HTTPCheck.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.http.HttpMethod;
 
+import javax.annotation.Nullable;
 import java.net.URL;
 import java.time.Duration;
 import java.util.List;
@@ -51,7 +52,7 @@ public class HTTPCheck extends NewCheck {
      * @param url  The URL
      */
     @JsonCreator
-    public HTTPCheck(@JsonProperty("Name") String name, @JsonProperty("HTTP") URL url) {
+    public HTTPCheck(@Nullable @JsonProperty("Name") String name, @Nullable @JsonProperty("HTTP") URL url) {
         super(name);
         this.url = url;
     }

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/ServiceEntry.java
Patch:
@@ -20,6 +20,8 @@
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
 
+import javax.annotation.Nullable;
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -32,7 +34,7 @@ public class ServiceEntry extends AbstractServiceEntry {
      * @param id   The id
      */
     @JsonCreator
-    public ServiceEntry(@JsonProperty("Service") String name, @JsonProperty("ID") String id) {
+    public ServiceEntry(@Nullable @JsonProperty("Service") String name, @Nullable @JsonProperty("ID") String id) {
         super(name);
         setID(id);
     }

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1074,7 +1074,7 @@ protected <I, O, E> Function<URI, Publisher<? extends io.micronaut.http.HttpResp
                     });
                 }
             }
-            return finalFlowable.subscribeOn(scheduler);
+            return finalFlowable;
         };
     }
 

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -106,7 +106,7 @@ private Object resolveValue(ArgumentConversionContext<T> context, ConvertibleVal
             annotationValue = argument.getName();
         }
         return values.get(annotationValue, context).orElseGet(() ->
-                conversionService.convert(argument.getAnnotationMetadata().getValue(Bindable.class, DEFAULT_VALUE_MEMBER, String.class).orElse(null), context).orElse(null)
+                conversionService.convert(argument.getAnnotationMetadata().stringValue(Bindable.class, DEFAULT_VALUE_MEMBER).orElse(null), context).orElse(null)
         );
     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -752,7 +752,7 @@ private <T> Flowable<T> connectWebSocket(URI uri, MutableHttpRequest<?> request,
         WebSocketBean<T> finalWebSocketBean = webSocketBean;
         return Flowable.create(emitter -> {
             SslContext sslContext = buildSslContext(uri);
-            WebSocketVersion protocolVersion = finalWebSocketBean.getBeanDefinition().getValue(ClientWebSocket.class, "version", WebSocketVersion.class).orElse(WebSocketVersion.V13);
+            WebSocketVersion protocolVersion = finalWebSocketBean.getBeanDefinition().enumValue(ClientWebSocket.class, "version", WebSocketVersion.class).orElse(WebSocketVersion.V13);
             int maxFramePayloadLength = finalWebSocketBean.messageMethod().flatMap(m -> m.getValue(OnMessage.class, "maxPayloadLength", Integer.class)).orElse(65536);
 
             bootstrap.remoteAddress(uri.getHost(), uri.getPort());

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -972,7 +972,7 @@ private RouteMatch<?> prepareRouteForExecution(RouteMatch<?> route, NettyHttpReq
                     isReactiveReturnType && Publishers.isSingle(javaReturnType) ||
                             isResponsePublisher(genericReturnType, javaReturnType) ||
                                 isFuture ||
-                                    finalRoute.getAnnotationMetadata().getValue(Produces.class, "single", Boolean.class).orElse(false);
+                                    finalRoute.getAnnotationMetadata().booleanValue(Produces.class, "single").orElse(false);
 
             // build the result emitter. This result emitter emits the response from a controller action
             Flowable<?> resultEmitter = buildResultEmitter(

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1175,7 +1175,7 @@ protected void accept(DeclaredType type, Element element, AopProxyWriter aopProx
                                     }
 
                                     Map members = CollectionUtils.mapOf(
-                                            Adapter.InternalAttributes.ADAPTED_BEAN, modelUtils.resolveTypeName(concreteClass.asType()),
+                                            Adapter.InternalAttributes.ADAPTED_BEAN, new AnnotationClassValue<>(modelUtils.resolveTypeName(concreteClass.asType())),
                                             Adapter.InternalAttributes.ADAPTED_METHOD, method.getSimpleName().toString(),
                                             Adapter.InternalAttributes.ADAPTED_ARGUMENT_TYPES, adaptedArgumentTypes
                                     );

File: inject/src/main/java/io/micronaut/context/AnnotationProcessorListener.java
Patch:
@@ -72,7 +72,7 @@ public AnnotationProcessor onCreated(BeanCreatedEvent<AnnotationProcessor> event
                                             if (LOG.isErrorEnabled()) {
                                                 LOG.error("Error processing bean method " + beanDefinition + "." + executableMethod + " with processor (" + processor + "): " + e.getMessage(), e);
                                             }
-                                            Boolean shutdownOnError = executableMethod.getAnnotationMetadata().getValue(Parallel.class, "shutdownOnError", Boolean.class).orElse(true);
+                                            Boolean shutdownOnError = executableMethod.getAnnotationMetadata().booleanValue(Parallel.class, "shutdownOnError").orElse(true);
                                             if (shutdownOnError) {
                                                 beanContext.stop();
                                             }

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -316,7 +316,7 @@ protected <T> Collection<BeanDefinition<T>> findBeanCandidates(Class<T> beanType
                 } else {
                     if (candidate.hasStereotype(ConfigurationReader.class)) {
 
-                        candidate.getValue(ConfigurationReader.class, "prefix", String.class)
+                        candidate.stringValue(ConfigurationReader.class, "prefix")
                                 .ifPresent(prefix -> {
                                     int starIndex = prefix.indexOf("*");
                                     if (starIndex > -1) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1259,7 +1259,7 @@ protected void initializeContext(
                                                 if (LOG.isErrorEnabled()) {
                                                     LOG.error("Error processing bean method " + beanDefinition + "." + method + " with processor (" + processor + "): " + e.getMessage(), e);
                                                 }
-                                                Boolean shutdownOnError = method.getValue(Parallel.class, "shutdownOnError", Boolean.class).orElse(true);
+                                                Boolean shutdownOnError = method.booleanValue(Parallel.class, "shutdownOnError").orElse(true);
                                                 if (shutdownOnError) {
                                                     stop();
                                                 }
@@ -1627,7 +1627,7 @@ protected void processParallelBeans() {
                     }
                 } catch (Throwable e) {
                     LOG.error("Parallel Bean definition [" + beanDefinitionReference.getName() + "] could not be loaded: " + e.getMessage(), e);
-                    Boolean shutdownOnError = beanDefinitionReference.getAnnotationMetadata().getValue(Parallel.class, "shutdownOnError", Boolean.class).orElse(true);
+                    Boolean shutdownOnError = beanDefinitionReference.getAnnotationMetadata().booleanValue(Parallel.class, "shutdownOnError").orElse(true);
                     if (shutdownOnError) {
                         stop();
                     }
@@ -1646,7 +1646,7 @@ protected void processParallelBeans() {
                     }
                 } catch (Throwable e) {
                     LOG.error("Parallel Bean definition [" + beanDefinition.getName() + "] could not be loaded: " + e.getMessage(), e);
-                    Boolean shutdownOnError = beanDefinition.getAnnotationMetadata().getValue(Parallel.class, "shutdownOnError", Boolean.class).orElse(true);
+                    Boolean shutdownOnError = beanDefinition.getAnnotationMetadata().booleanValue(Parallel.class, "shutdownOnError").orElse(true);
                     if (shutdownOnError) {
                         stop();
                     }

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -329,7 +329,7 @@ protected Properties resolveSubProperties(String name, Map<String, Object> entri
         // special handling for maps for resolving sub keys
         Properties properties = new Properties();
         AnnotationMetadata annotationMetadata = conversionContext.getAnnotationMetadata();
-        StringConvention keyConvention = annotationMetadata.getValue(MapFormat.class, "keyFormat", StringConvention.class)
+        StringConvention keyConvention = annotationMetadata.enumValue(MapFormat.class, "keyFormat", StringConvention.class)
                                                            .orElse(StringConvention.RAW);
         String prefix = name + '.';
         entries.entrySet().stream()
@@ -355,8 +355,8 @@ protected Properties resolveSubProperties(String name, Map<String, Object> entri
     protected Map<String, Object> resolveSubMap(String name, Map<String, Object> entries, ArgumentConversionContext<?> conversionContext) {
         // special handling for maps for resolving sub keys
         AnnotationMetadata annotationMetadata = conversionContext.getAnnotationMetadata();
-        StringConvention keyConvention = annotationMetadata.getValue(MapFormat.class, "keyFormat", StringConvention.class).orElse(StringConvention.RAW);
-        MapFormat.MapTransformation transformation = annotationMetadata.getValue(
+        StringConvention keyConvention = annotationMetadata.enumValue(MapFormat.class, "keyFormat", StringConvention.class).orElse(StringConvention.RAW);
+        MapFormat.MapTransformation transformation = annotationMetadata.enumValue(
                 MapFormat.class,
                 "transformation",
                 MapFormat.MapTransformation.class)

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -183,7 +183,7 @@ public AnnotatedMethodRouteBuilder(ExecutionHandleLocator executionHandleLocator
                 boolean isGlobal = method.isTrue(Error.class, "global");
                 Class declaringType = bean.getBeanType();
                 if (method.isPresent(Error.class, "status")) {
-                    Optional<HttpStatus> value = method.getValue(Error.class, "status", HttpStatus.class);
+                    Optional<HttpStatus> value = method.enumValue(Error.class, "status", HttpStatus.class);
                     value.ifPresent(httpStatus -> {
                         if (isGlobal) {
                             status(httpStatus, declaringType, method.getMethodName(), method.getArgumentTypes());

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -82,7 +82,7 @@ private JavaType newType(Argument<?> argument, TypeFactory typeFactory) {
 
     private PropertyMetadata newPropertyMetadata(Argument<?> argument, AnnotationMetadata annotationMetadata) {
         final Boolean required = argument.isAnnotationPresent(Nonnull.class) ||
-                annotationMetadata.getValue(JsonProperty.class, "required", Boolean.class).orElse(false);
+                annotationMetadata.booleanValue(JsonProperty.class, "required").orElse(false);
 
         int index = annotationMetadata.intValue(JsonProperty.class, "index").orElse(-1);
         return PropertyMetadata.construct(

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -165,7 +165,7 @@ private void refreshSubsetOfConfigurationProperties(Set<String> keySet) {
             beanContext.getActiveBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
         for (BeanRegistration<?> registration : registrations) {
             BeanDefinition<?> definition = registration.getBeanDefinition();
-            Optional<String> value = definition.getValue(ConfigurationReader.class, "prefix", String.class);
+            Optional<String> value = definition.stringValue(ConfigurationReader.class, "prefix");
             if (value.isPresent()) {
                 String configPrefix = value.get();
                 if (keySet.stream().anyMatch(key -> key.startsWith(configPrefix))) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -60,7 +60,6 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.http.HttpServerKeepAliveHandler;
 import io.netty.handler.codec.http.multipart.DiskFileUpload;
-import io.netty.handler.flow.FlowControlHandler;
 import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.stream.ChunkedWriteHandler;

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/CookieTenantResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.http.cookie.Cookie;
@@ -33,7 +34,7 @@
  */
 @Singleton
 @Requires(beans = CookieTenantResolverConfiguration.class)
-@Requires(property = CookieTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = CookieTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 public class CookieTenantResolver implements TenantResolver {
 
     /**

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/FixedTenantResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.multitenancy.exceptions.TenantNotFoundException;
 
 import javax.inject.Singleton;
@@ -28,7 +29,7 @@
  * @since 1.0.0
  */
 @Requires(beans = FixedTenantResolverConfiguration.class)
-@Requires(property = FixedTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = FixedTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 @Singleton
 public class FixedTenantResolver implements TenantResolver {
 

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/HttpHeaderTenantResolver.java
Patch:
@@ -16,9 +16,11 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.multitenancy.exceptions.TenantNotFoundException;
+
 import javax.inject.Singleton;
 import java.io.Serializable;
 import java.util.Optional;
@@ -31,7 +33,7 @@
  */
 @Singleton
 @Requires(beans = HttpHeaderTenantResolverConfiguration.class)
-@Requires(property = HttpHeaderTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = HttpHeaderTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 public class HttpHeaderTenantResolver implements TenantResolver {
 
     /**

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/PrincipalTenantResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpAttributes;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
@@ -30,10 +31,10 @@
  * A tenant resolver that resolves the tenant from the authenticated principal.
  *
  * @author Sergio del Amo
- * @since 6.0
+ * @since 1.0.0
  */
 @Singleton
-@Requires(property = PrincipalTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = PrincipalTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 public class PrincipalTenantResolver implements TenantResolver {
 
     @Override

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/SessionTenantResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.multitenancy.exceptions.TenantNotFoundException;
@@ -34,7 +35,7 @@
  */
 @Requires(classes = {Session.class, HttpSessionFilter.class})
 @Requires(beans = SessionTenantResolverConfiguration.class)
-@Requires(property = SessionTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = SessionTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 @Singleton
 public class SessionTenantResolver implements TenantResolver {
 

File: multitenancy/src/main/java/io/micronaut/multitenancy/tenantresolver/SubdomainTenantResolver.java
Patch:
@@ -16,10 +16,12 @@
 package io.micronaut.multitenancy.tenantresolver;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.context.ServerRequestContext;
 import io.micronaut.multitenancy.exceptions.TenantNotFoundException;
+
 import javax.inject.Singleton;
 import java.io.Serializable;
 import java.util.Optional;
@@ -31,7 +33,7 @@
  * @since 6.0
  */
 @Singleton
-@Requires(property = SubdomainTenantResolverConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = SubdomainTenantResolverConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
 public class SubdomainTenantResolver implements TenantResolver {
 
     @Override

File: function/src/main/java/io/micronaut/function/executor/FunctionInitializer.java
Patch:
@@ -45,7 +45,7 @@ public FunctionInitializer() {
         ApplicationContext applicationContext = buildApplicationContext(null);
         startThis(applicationContext);
         injectThis(applicationContext);
-        applicationContext.registerSingleton(this);
+        applicationContext.registerSingleton(this, false);
         this.closeContext = true;
     }
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -2305,7 +2305,9 @@ private void closeChannel(Channel channel, FlowableEmitter<?> emitter, ChannelFu
             channelFuture.addListener(f -> {
                 try {
                     if (!f.isSuccess()) {
-                        emitter.onError(f.cause());
+                        if (!emitter.isCancelled()) {
+                            emitter.onError(f.cause());
+                        }
                     } else {
                         channel.read();
                     }

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -101,7 +101,9 @@ private Class<?> getErrorType(HttpResponse<?> response) {
         Class<?> errorType = null;
         if (contentType.isPresent() && response.getStatus().getCode() > 399) {
             MediaType mediaType = contentType.get();
-            errorType = errorDecoder.getErrorType(mediaType);
+            if (errorDecoder != null) {
+                errorType = errorDecoder.getErrorType(mediaType);
+            }
         }
         return errorType;
     }

File: inject-java/src/test/groovy/io/micronaut/aop/proxytarget/ProxyingClass.java
Patch:
@@ -18,13 +18,15 @@
 import io.micronaut.aop.simple.*;
 
 import javax.annotation.PostConstruct;
+import javax.inject.Singleton;
 import java.util.Collections;
 import java.util.List;
 
 /**
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class ProxyingClass<A extends CharSequence> {
 
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/arrayinjection/B.java
Patch:
@@ -16,9 +16,11 @@
 package io.micronaut.inject.method.arrayinjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.util.Arrays;
 import java.util.List;
 
+@Singleton
 public class B {
     private List<A> all;
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/nullableinjection/B.java
Patch:
@@ -17,7 +17,9 @@
 
 import javax.annotation.Nullable;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
+@Singleton
 public class B {
     A a;
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/nullableinjection/C.java
Patch:
@@ -16,7 +16,9 @@
 package io.micronaut.inject.method.nullableinjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
+@Singleton
 public class C {
 
     A a;

File: inject-java/src/test/groovy/io/micronaut/inject/method/optionalinjection/B.java
Patch:
@@ -16,8 +16,10 @@
 package io.micronaut.inject.method.optionalinjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.util.Optional;
 
+@Singleton
 public class B {
     Optional<A> a;
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/qualifierinjection/B.java
Patch:
@@ -19,7 +19,9 @@
 
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Singleton;
 
+@Singleton
 public class B {
     private A a;
     private A a2;

File: inject-java/src/test/groovy/io/micronaut/inject/method/setinjection/B.java
Patch:
@@ -16,8 +16,10 @@
 package io.micronaut.inject.method.setinjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.util.Set;
 
+@Singleton
 public class B {
     private Set<A> all;
 

File: inject-java/src/test/groovy/io/micronaut/inject/method/simpleinjection/B.java
Patch:
@@ -16,7 +16,9 @@
 package io.micronaut.inject.method.simpleinjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
+@Singleton
 public class B {
 
     private A a;

File: inject-java/src/test/groovy/io/micronaut/inject/method/streaminjection/B.java
Patch:
@@ -16,10 +16,12 @@
 package io.micronaut.inject.method.streaminjection;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+@Singleton
 public class B {
     private Stream<A> all;
     private Stream<A> another;

File: core/src/main/java/io/micronaut/core/util/AntPathMatcher.java
Patch:
@@ -53,7 +53,7 @@
  * <p><b>N.B.</b>: This class was forked from Apache Shiro with modifications.</p>
  * <p>
  * <p>As per the Apache 2.0 license, the original copyright notice and all author and copyright information have
- * remained in tact.</p>
+ * remained intact.</p>
  *
  * @since 1.0
  */

File: validation/src/test/groovy/io/micronaut/validation/validator/ast/SomeAnn.java
Patch:
@@ -10,5 +10,6 @@
 @Retention(RUNTIME)
 public @interface SomeAnn {
     @NotBlank
+    @SomeAnn("good")
     String value();
 }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -38,6 +38,8 @@ public class AnnotationUtil {
 
     public static final List<String> INTERNAL_ANNOTATION_NAMES = Arrays.asList(
         Retention.class.getName(),
+        "javax.annotation.meta.TypeQualifier",
+        "javax.annotation.meta.TypeQualifierNickname",
         "kotlin.annotation.Retention",
         Inherited.class.getName(),
         SuppressWarnings.class.getName(),

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1737,7 +1737,7 @@ private Qualifier resolveQualifier(BeanResolutionContext resolutionContext, Argu
         }
 
         if (qualifier == null) {
-            Class<?>[] byType = annotationMetadata.findAnnotation(Type.class).map(av -> av.classValues(AnnotationMetadata.VALUE_MEMBER)).orElse(null);
+            Class<?>[] byType = annotationMetadata.hasDeclaredStereotype(Type.class) ? annotationMetadata.classValues(Type.class) : null;
             if (byType != null) {
                 qualifier = Qualifiers.byType(byType);
             } else {

File: test-suite/src/test/java/io/micronaut/docs/context/events/SampleEvent.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.docs.context.events;
 // tag::class[]
 public class SampleEvent {
-
     private String message = "Something happened";
 
     public String getMessage() {

File: test-suite/src/test/java/io/micronaut/docs/context/events/application/SampleEventListener.java
Patch:
@@ -9,7 +9,6 @@
 // tag::class[]
 @Singleton
 public class SampleEventListener implements ApplicationEventListener<SampleEvent> {
-
     private int invocationCounter = 0;
 
     @Override
@@ -20,5 +19,4 @@ public void onApplicationEvent(SampleEvent event) {
     public int getInvocationCounter() {
         return invocationCounter;
     }
-
 }

File: test-suite/src/test/java/io/micronaut/docs/context/events/async/SampleEventListener.java
Patch:
@@ -10,7 +10,6 @@
 // tag::class[]
 @Singleton
 public class SampleEventListener {
-
     private int invocationCounter = 0;
 
     @EventListener
@@ -22,6 +21,5 @@ public void onSampleEvent(SampleEvent event) {
     public int getInvocationCounter() {
         return invocationCounter;
     }
-
 }
 // end::class[]

File: test-suite/src/test/java/io/micronaut/docs/context/events/listener/SampleEventListener.java
Patch:
@@ -9,7 +9,6 @@
 // tag::class[]
 @Singleton
 public class SampleEventListener {
-
     private int invocationCounter = 0;
 
     @EventListener

File: test-suite/src/test/java/io/micronaut/docs/context/events/application/SampleEventListener.java
Patch:
@@ -14,7 +14,7 @@ public class SampleEventListener implements ApplicationEventListener<SampleEvent
 
     @Override
     public void onApplicationEvent(SampleEvent event) {
-        invocationCounter = invocationCounter++;
+        invocationCounter++;
     }
 
     public int getInvocationCounter() {

File: test-suite/src/test/java/io/micronaut/docs/context/events/async/SampleEventListener.java
Patch:
@@ -16,7 +16,7 @@ public class SampleEventListener {
     @EventListener
     @Async
     public void onSampleEvent(SampleEvent event) {
-        invocationCounter = invocationCounter++;
+        invocationCounter++;
     }
 
     public int getInvocationCounter() {

File: test-suite/src/test/java/io/micronaut/docs/context/events/async/SampleEventListenerSpec.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.docs.context.events.SampleEventEmitterBean;
-import io.micronaut.docs.context.events.application.SampleEventListener;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: test-suite/src/test/java/io/micronaut/docs/context/events/listener/SampleEventListener.java
Patch:
@@ -14,7 +14,7 @@ public class SampleEventListener {
 
     @EventListener
     public void onSampleEvent(SampleEvent event) {
-        invocationCounter = invocationCounter++;
+        invocationCounter++;
     }
 
     public int getInvocationCounter() {

File: test-suite/src/test/java/io/micronaut/docs/context/events/listener/SampleEventListenerSpec.java
Patch:
@@ -2,11 +2,9 @@
 
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.docs.context.events.SampleEventEmitterBean;
-import io.micronaut.docs.context.events.application.SampleEventListener;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
-import static org.testng.Assert.assertTrue;
 
 // tag::class[]
 public class SampleEventListenerSpec {

File: validation/src/main/java/io/micronaut/validation/routes/RouteValidationVisitor.java
Patch:
@@ -70,7 +70,7 @@ public void visitMethod(MethodElement element, VisitorContext context) {
                     .toArray(RouteParameterElement[]::new);
 
             for (RouteValidationRule rule: rules) {
-                RouteValidationResult result = rule.validate(template, parameters);
+                RouteValidationResult result = rule.validate(template, parameters, element);
 
                 if (!result.isValid()) {
                     for (String err: result.getErrorMessages()) {

File: validation/src/main/java/io/micronaut/validation/routes/rules/MissingParameterRule.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micronaut.http.annotation.Body;
 import io.micronaut.http.uri.UriMatchTemplate;
+import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.inject.ast.PropertyElement;
 import io.micronaut.validation.routes.RouteValidationResult;
@@ -36,7 +37,7 @@
 public class MissingParameterRule implements RouteValidationRule {
 
     @Override
-    public RouteValidationResult validate(UriMatchTemplate template, ParameterElement[] parameters) {
+    public RouteValidationResult validate(UriMatchTemplate template, ParameterElement[] parameters, MethodElement method) {
 
         List<String> variables = template.getVariableNames();
         List<String> routeVariables = Arrays.stream(parameters).map(ParameterElement::getName).collect(Collectors.toList());

File: validation/src/main/java/io/micronaut/validation/routes/rules/RouteValidationRule.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.validation.routes.rules;
 
 import io.micronaut.http.uri.UriMatchTemplate;
+import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 import io.micronaut.validation.routes.RouteValidationResult;
 
@@ -32,8 +33,9 @@ public interface RouteValidationRule {
      *
      * @param template The URI match template
      * @param parameters The route parameters
+     * @param method The route method
      * @return A {@link RouteValidationResult}
      */
-    RouteValidationResult validate(UriMatchTemplate template, ParameterElement[] parameters);
+    RouteValidationResult validate(UriMatchTemplate template, ParameterElement[] parameters, MethodElement method);
 
 }

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -430,7 +430,7 @@ protected void initializeTypeConverters(BeanContext beanContext) {
     }
 
     /**
-     * Bootstraop property source implementation.
+     * Bootstrap property source implementation.
      */
     @SuppressWarnings("MagicNumber")
     private static class BootstrapPropertySource implements PropertySource {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MemberElement;
-import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.annotation.Nonnull;
 import javax.lang.model.element.Element;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/binding/generic/GenericController.java
Patch:
@@ -10,6 +10,7 @@
 public class GenericController<T, ID extends Serializable> {
     @Post
     Mono<HttpResponse<T>> save(@Body T entity) {
-        return Mono.just(HttpResponse.created(entity));
+        assert entity instanceof Status;
+        return Mono.just(HttpResponse.created((entity)));
     }
 }
\ No newline at end of file

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -184,7 +184,7 @@ public String toString() {
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;
                 Map<String, TypeMirror> boundGenerics = resolveBoundGenerics(visitorContext, genericsInfo);
-                if (JavaModelUtils.resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
+                if (visitorContext.getModelUtils().resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
                     return new JavaEnumElement(
                             typeElement,
                             visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement),

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.inject.annotation.DefaultAnnotationMetadata;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MemberElement;
-import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.annotation.Nonnull;
 import javax.lang.model.element.Element;

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/binding/generic/GenericController.java
Patch:
@@ -10,6 +10,7 @@
 public class GenericController<T, ID extends Serializable> {
     @Post
     Mono<HttpResponse<T>> save(@Body T entity) {
-        return Mono.just(HttpResponse.created(entity));
+        assert entity instanceof Status;
+        return Mono.just(HttpResponse.created((entity)));
     }
 }
\ No newline at end of file

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -184,7 +184,7 @@ public String toString() {
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;
                 Map<String, TypeMirror> boundGenerics = resolveBoundGenerics(visitorContext, genericsInfo);
-                if (JavaModelUtils.resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
+                if (visitorContext.getModelUtils().resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
                     return new JavaEnumElement(
                             typeElement,
                             visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement),

File: core/src/main/java/io/micronaut/core/annotation/AnnotationClassValue.java
Patch:
@@ -56,7 +56,7 @@ public AnnotationClassValue(String name) {
      */
     @UsedByGeneratedCode
     public AnnotationClassValue(Class<T> theClass) {
-        this.name = theClass.getName().intern();
+        this.name = theClass.getName();
         this.theClass = theClass;
         this.instantiated = false;
         this.instance = null;
@@ -72,7 +72,7 @@ public AnnotationClassValue(Class<T> theClass) {
     @Internal
     public AnnotationClassValue(@Nonnull String name, boolean instantiated) {
         ArgumentUtils.requireNonNull("name", name);
-        this.name = name.intern();
+        this.name = name;
         this.theClass = null;
         this.instance = null;
         this.instantiated = instantiated;
@@ -89,7 +89,7 @@ public AnnotationClassValue(@Nonnull String name, boolean instantiated) {
     public AnnotationClassValue(@Nonnull T instance) {
         ArgumentUtils.requireNonNull("instance", instance);
         this.theClass = (Class<T>) instance.getClass();
-        this.name = theClass.getName().intern();
+        this.name = theClass.getName();
         this.instance = instance;
         this.instantiated = true;
     }

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanProperty.java
Patch:
@@ -67,7 +67,7 @@ protected AbstractBeanProperty(
         this.introspection = introspection;
         this.type = type;
         this.beanType = introspection.getBeanType();
-        this.name = name.intern();
+        this.name = name;
         this.annotationMetadata = annotationMetadata == null ? AnnotationMetadata.EMPTY_METADATA : annotationMetadata;
         this.typeArguments = typeArguments;
     }

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -107,7 +107,7 @@ public static List<String> internListOf(Object... objects) {
         }
         List<String> strings = new ArrayList<>(objects.length);
         for (Object object : objects) {
-            strings.add(object.toString().intern());
+            strings.add(object.toString());
         }
         return Collections.unmodifiableList(strings);
     }
@@ -132,7 +132,7 @@ public static Map<String, Object> internMapOf(Object... values) {
         Map<String, Object> answer = new HashMap<>((int) (len / 2 / 0.75));
         int i = 0;
         while (i < values.length - 1) {
-            String key = values[i++].toString().intern();
+            String key = values[i++].toString();
             Object val = values[i++];
             answer.put(key, val);
         }

File: inject/src/main/java/io/micronaut/context/AbstractBeanConfiguration.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AbstractBeanConfiguration extends AbstractBeanContextCondi
      * @param thePackage The package name
      */
     protected AbstractBeanConfiguration(String thePackage) {
-        this.packageName = thePackage.intern();
+        this.packageName = thePackage;
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadata.java
Patch:
@@ -72,7 +72,7 @@ protected AbstractAnnotationMetadata() {
             return null;
         }
         if (hasAnnotation(annotationClass) || hasStereotype(annotationClass)) {
-            String annotationName = annotationClass.getName().intern();
+            String annotationName = annotationClass.getName();
             return (T) annotationMap.computeIfAbsent(annotationName, s -> {
                 ConvertibleValues<Object> annotationValues = findAnnotation(annotationClass).map(AnnotationValue::getConvertibleValues).orElse(ConvertibleValues.empty());
                 return AnnotationMetadataSupport.buildAnnotation(annotationClass, annotationValues);
@@ -89,7 +89,7 @@ protected AbstractAnnotationMetadata() {
         if (declaredAnnotationMap == null) {
             return null;
         }
-        String annotationName = annotationClass.getName().intern();
+        String annotationName = annotationClass.getName();
         if (hasAnnotation(annotationName) || hasStereotype(annotationName)) {
             return (T) declaredAnnotationMap.computeIfAbsent(annotationName, s -> {
                 ConvertibleValues<Object> annotationValues = findAnnotation(annotationClass).map(AnnotationValue::getConvertibleValues).orElse(ConvertibleValues.empty());

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -165,7 +165,7 @@ static boolean hasDefaultValues(String annotation) {
      */
     static void registerDefaultValues(String annotation, Map<String, Object> defaultValues) {
         if (StringUtils.isNotEmpty(annotation)) {
-            ANNOTATION_DEFAULTS.put(annotation.intern(), defaultValues);
+            ANNOTATION_DEFAULTS.put(annotation, defaultValues);
         }
     }
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -658,7 +658,7 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
                 HttpClientConfiguration.class,
                 Qualifiers.byName(clientId)
             );
-            Class<HttpClientConfiguration> defaultConfiguration = (Class<HttpClientConfiguration>)configurationClass.orElse(HttpClientConfiguration.class);
+            Class<HttpClientConfiguration> defaultConfiguration = (Class<HttpClientConfiguration>) configurationClass.orElse(HttpClientConfiguration.class);
             configuration = clientSpecificConfig.orElseGet(() -> beanContext.getBean(defaultConfiguration));
             HttpClient client = beanContext.createBean(HttpClient.class, loadBalancer, configuration, contextPath);
             if (client instanceof DefaultHttpClient) {

File: runtime/src/main/java/io/micronaut/jackson/bind/MapToObjectConverter.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.InstantiationUtils;
-import io.micronaut.core.reflect.exception.InstantiationException;
 
 import javax.inject.Inject;
 import javax.inject.Provider;

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -92,7 +92,7 @@ public static Optional<?> tryInstantiate(String name, ClassLoader classLoader) {
             List<Object> arguments = new ArrayList<>(constructorArguments.length);
 
             try {
-                if ( constructorArguments.length > 0) {
+                if (constructorArguments.length > 0) {
 
                     Map bindMap = new LinkedHashMap(propertiesMap.size());
                     Set<Map.Entry<?, ?>> entries = propertiesMap.entrySet();

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -437,7 +437,7 @@ private static void pushValue(Type declaringType, ClassVisitor declaringClassWri
             Enum enumObject = (Enum) value;
             Class declaringClass = enumObject.getDeclaringClass();
             Type t = Type.getType(declaringClass);
-            methodVisitor.getStatic(t, value.toString(), t);
+            methodVisitor.getStatic(t, enumObject.name(), t);
         } else if (value.getClass().isArray()) {
             final Class<?> componentType = ReflectionUtils.getWrapperType(value.getClass().getComponentType());
             int len = Array.getLength(value);

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -42,6 +42,7 @@
  */
 public class InstantiationUtils {
 
+
     /**
      * Try to instantiate the given class.
      *

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -42,7 +42,6 @@
  */
 public class InstantiationUtils {
 
-
     /**
      * Try to instantiate the given class.
      *

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -619,6 +619,9 @@ private Object resolvePlaceHoldersIfNecessary(Object value) {
     private List<String> resolvePropertiesForConvention(String property, PropertySource.PropertyConvention convention) {
         switch (convention) {
             case ENVIRONMENT_VARIABLE:
+                if (StringUtils.isEmpty(property)) {
+                    return Collections.singletonList(property);
+                }
                 String[] tokens = property.toLowerCase(Locale.ENGLISH).split("_");
 
                 if (tokens.length > 1) {

File: core/src/main/java/io/micronaut/core/annotation/NonBlocking.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A marker annotation for methods that are blocking.
+ * A marker annotation for methods that are non-blocking.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -71,8 +71,9 @@ public static Optional<?> tryInstantiate(String name, ClassLoader classLoader) {
      * @param context The Conversion context
      * @param <T> The generic type
      * @return The instantiated instance or {@link Optional#empty()}
+     * @throws InstantiationException When an error occurs
      */
-    public static @Nonnull <T> Optional<T> tryInstantiate(@Nonnull Class<T> type, Map propertiesMap, ConversionContext context) {
+    public static @Nonnull <T> Optional<T> tryInstantiate(@Nonnull Class<T> type, Map propertiesMap, ConversionContext context) throws InstantiationException {
         ArgumentUtils.requireNonNull("type", type);
         if (propertiesMap.isEmpty()) {
             return tryInstantiate(type);
@@ -113,7 +114,7 @@ public static Optional<?> tryInstantiate(String name, ClassLoader classLoader) {
                 }
                 instance = introspection.instantiate(arguments.toArray());
             } else {
-                instance = introspection.instantiate(type);
+                instance = introspection.instantiate();
                 Collection<BeanProperty<T, Object>> beanProperties = introspection.getBeanProperties();
                 T finalInstance = instance;
                 beanProperties.forEach(beanProperty -> {

File: core/src/main/java/io/micronaut/core/annotation/NonBlocking.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A marker annotation for methods that are blocking.
+ * A marker annotation for methods that are non-blocking.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -64,7 +64,7 @@ public static Optional<?> tryInstantiate(String name, ClassLoader classLoader) {
     }
 
     /**
-     * Try to instantiate the given class using {@link io.micronaut.core.beans.BeanIntrospector}
+     * Try to instantiate the given class using {@link io.micronaut.core.beans.BeanIntrospector}.
      *
      * @param type The type
      * @param propertiesMap The properties values {@link Map} of the instance

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 /**
  * <p>A {@link PropertyResolver} that resolves from one or many {@link PropertySource} instances.</p>
@@ -634,7 +633,7 @@ private List<String> resolvePropertiesForConvention(String property, PropertySou
                     //initialize the halves
                     //ex 4, 2, 1 for A_B_C_D
                     for (int i = 0; i < halves.length; i++) {
-                        int start = (i == 0) ? permutations : halves[i-1];
+                        int start = (i == 0) ? permutations : halves[i - 1];
                         halves[i] = start / 2;
                     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.MediaType;
 import io.micronaut.http.cookie.Cookies;
 import io.micronaut.http.netty.AbstractNettyHttpRequest;
 import io.micronaut.http.netty.NettyHttpHeaders;
@@ -45,9 +44,7 @@
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
-import java.net.URLDecoder;
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Supplier;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -32,7 +32,6 @@
 import io.micronaut.http.server.netty.*;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;
-import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.buffer.EmptyByteBuf;
 import io.netty.util.ReferenceCounted;

File: runtime/src/main/java/io/micronaut/scheduling/executor/DefaultExecutorSelector.java
Patch:
@@ -25,7 +25,6 @@
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.Optional;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.ExecutorService;
 

File: management/src/main/java/io/micronaut/management/endpoint/info/source/PropertiesInfoSource.java
Patch:
@@ -61,7 +61,7 @@ default Optional<PropertySource> retrievePropertiesPropertySource(String path, S
         Optional<ResourceLoader> resourceLoader = resourceResolver.getSupportingLoader(propertiesPath);
         if (resourceLoader.isPresent()) {
             PropertiesPropertySourceLoader propertySourceLoader = new PropertiesPropertySourceLoader();
-            return propertySourceLoader.load(propertiesPath, resourceLoader.get(), null);
+            return propertySourceLoader.load(propertiesPath, resourceLoader.get());
         }
 
         return Optional.empty();

File: inject/src/main/java/io/micronaut/context/annotation/EachProperty.java
Patch:
@@ -42,7 +42,7 @@
  * <pre><code>
  *  {@literal @}EachProperty("foo.bar")
  *   public class ExampleConfiguration {
- *      ExampleConfiguration({@literal @}Argument String name) {
+ *      ExampleConfiguration({@literal @}Parameter String name) {
  *          ...
  *      }
  *   }

File: discovery-client/src/main/java/io/micronaut/discovery/consul/config/ConsulConfigurationClient.java
Patch:
@@ -51,7 +51,6 @@
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * A {@link ConfigurationClient} for Consul.
@@ -354,6 +353,9 @@ private String resolvePropertyName(String commonConfigPath, String key) {
         return null;
     }
 
+    /**
+     * A local property source.
+     */
     private static class LocalSource {
 
         private final boolean appSpecific;

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/SpringCloudClientConfiguration.java
Patch:
@@ -37,9 +37,10 @@
 public class SpringCloudClientConfiguration extends HttpClientConfiguration {
 
     public static final String PREFIX = "spring.cloud.config";
-    public static final String SPRING_CLOUD_CONFIG_ENDPOINT = "${" + SpringCloudClientConfiguration.PREFIX + ".uri}";
 
     private static final String DEFAULT_URI = "http://localhost:8888";
+    public static final String SPRING_CLOUD_CONFIG_ENDPOINT = "${" + SpringCloudClientConfiguration.PREFIX + ".uri:`" + DEFAULT_URI + "`}";
+
     private static final Boolean DEFAULT_FAIL_FAST = false;
 
     private String uri = DEFAULT_URI;

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/client/SpringCloudConfigClient.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.discovery.spring.config.client;
 
 import io.micronaut.context.annotation.BootstrapContextCompatible;
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.discovery.spring.config.SpringCloudClientConfiguration;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Produces;
@@ -34,7 +33,6 @@
  * @since 1.0
  */
 @Client(value = SpringCloudClientConfiguration.SPRING_CLOUD_CONFIG_ENDPOINT, configuration = SpringCloudClientConfiguration.class)
-@Requires(beans = SpringCloudClientConfiguration.class)
 @BootstrapContextCompatible
 public interface SpringCloudConfigClient {
 

File: inject/src/main/java/io/micronaut/context/annotation/EachProperty.java
Patch:
@@ -42,7 +42,7 @@
  * <pre><code>
  *  {@literal @}EachProperty("foo.bar")
  *   public class ExampleConfiguration {
- *      ExampleConfiguration({@literal @}Argument String name) {
+ *      ExampleConfiguration({@literal @}Parameter String name) {
  *          ...
  *      }
  *   }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractGroovyElement implements AnnotationMetadataDelegat
 
     /**
      * Default constructor.
-     * @param sourceUnit  The source unit
+     * @param sourceUnit The source unit
      * @param annotatedNode The annotated node
      * @param annotationMetadata The annotation metadata
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -19,7 +19,6 @@
 import static javax.lang.model.type.TypeKind.VOID;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.util.CollectionUtils;
 
 import javax.annotation.Nonnull;

File: discovery-client/src/main/java/io/micronaut/discovery/spring/SpringCloudConfigConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public class SpringCloudConfigConfiguration extends HttpClientConfiguration {
     public static final String PREFIX = SpringCloudConstants.PREFIX + ".config";
     public static final String SPRING_CLOUD_CONFIG_ENDPOINT = "${" + SpringCloudConfigConfiguration.PREFIX + ".uri}";
 
-    private String uri = "http://locahost:8888";
+    private String uri = "http://localhost:8888";
     private String label;
     private boolean failFast;
 

File: discovery-client/src/main/java/io/micronaut/discovery/spring/SpringCloudConfigConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public class SpringCloudConfigConfiguration extends HttpClientConfiguration {
     public static final String PREFIX = SpringCloudConstants.PREFIX + ".config";
     public static final String SPRING_CLOUD_CONFIG_ENDPOINT = "${" + SpringCloudConfigConfiguration.PREFIX + ".uri}";
 
-    private String uri = "http://locahost:8888";
+    private String uri = "http://localhost:8888";
     private String label;
     private boolean failFast;
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/AbstractGroovyElement.java
Patch:
@@ -52,15 +52,17 @@ public abstract class AbstractGroovyElement implements AnnotationMetadataDelegat
 
     private final AnnotatedNode annotatedNode;
     private AnnotationMetadata annotationMetadata;
+    protected final SourceUnit sourceUnit;
 
     /**
      * Default constructor.
      * @param annotatedNode The annotated node
      * @param annotationMetadata The annotation metadata
      */
-    public AbstractGroovyElement(AnnotatedNode annotatedNode, AnnotationMetadata annotationMetadata) {
+    public AbstractGroovyElement(SourceUnit sourceUnit, AnnotatedNode annotatedNode, AnnotationMetadata annotationMetadata) {
         this.annotatedNode = annotatedNode;
         this.annotationMetadata = annotationMetadata;
+        this.sourceUnit = sourceUnit;
     }
 
     @Override

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -67,7 +67,6 @@ public class GroovyClassElement extends AbstractGroovyElement implements ClassEl
     GroovyClassElement(SourceUnit sourceUnit, ClassNode classNode, AnnotationMetadata annotationMetadata, Map<String, Map<String, ClassNode>> genericInfo) {
         super(sourceUnit, classNode, annotationMetadata);
         this.classNode = classNode;
-        this.sourceUnit = sourceUnit;
         this.genericInfo = genericInfo;
     }
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -22,7 +22,7 @@
 import org.codehaus.groovy.ast.*;
 import org.codehaus.groovy.control.SourceUnit;
 
-import javax.annotation.Nullable;
+import javax.annotation.Nonnull;
 import java.lang.reflect.Modifier;
 
 /**
@@ -91,7 +91,7 @@ public Object getNativeType() {
         return variable;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getType() {
         return new GroovyClassElement(sourceUnit, variable.getType(), AstAnnotationUtils.getAnnotationMetadata(sourceUnit, variable.getType()));

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyPropertyElement.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.inject.ast.PropertyElement;
 import org.codehaus.groovy.ast.AnnotatedNode;
 
-import javax.annotation.Nullable;
+import javax.annotation.Nonnull;
 
 /**
  * Implementation of {@link PropertyElement} for Groovy.
@@ -64,7 +64,7 @@ class GroovyPropertyElement extends AbstractGroovyElement implements PropertyEle
         this.declaringElement = declaringElement;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getType() {
         return type;

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -711,7 +711,7 @@ void visitBeanFactoryMethod(ExecutableElement beanMethod) {
 
             if (returnType instanceof DeclaredType) {
                 DeclaredType dt = (DeclaredType) returnType;
-                Map<String, Map<String, Object>> beanTypeArguments = genericUtils.buildTypeArgumentInfo(dt);
+                Map<String, Map<String, Object>> beanTypeArguments = genericUtils.buildGenericTypeArgumentInfo(dt);
                 beanMethodWriter.visitTypeArguments(beanTypeArguments);
             }
 
@@ -1687,7 +1687,7 @@ private BeanDefinitionWriter createBeanDefinitionWriterFor(TypeElement typeEleme
         }
 
         private void visitTypeArguments(TypeElement typeElement, BeanDefinitionWriter beanDefinitionWriter) {
-            Map<String, Map<String, Object>> typeArguments = genericUtils.buildTypeArgumentInfo(typeElement);
+            Map<String, Map<String, Object>> typeArguments = genericUtils.buildGenericTypeArgumentInfo(typeElement);
             beanDefinitionWriter.visitTypeArguments(
                     typeArguments
             );

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -159,7 +159,7 @@ public String toString() {
      * @param visitorContext The visitor context
      * @return The class element
      */
-    protected ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorContext visitorContext) {
+    protected @Nonnull ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorContext visitorContext) {
         return mirrorToClassElement(returnType, visitorContext, Collections.emptyMap());
     }
 
@@ -171,7 +171,7 @@ protected ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorCo
      * @param genericsInfo The generic informatino
      * @return The class element
      */
-    protected ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorContext visitorContext, Map<String, Map<String, TypeMirror>> genericsInfo) {
+    protected @Nonnull ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorContext visitorContext, Map<String, Map<String, TypeMirror>> genericsInfo) {
         if (genericsInfo == null) {
             genericsInfo = Collections.emptyMap();
         }
@@ -243,7 +243,7 @@ public boolean isArray() {
             PrimitiveType pt = (PrimitiveType) returnType;
             return JavaPrimitiveElement.valueOf(pt.getKind().name());
         }
-        return null;
+        return new JavaVoidElement();
     }
 
     private Map<String, TypeMirror> resolveBoundGenerics(JavaVisitorContext visitorContext, Map<String, Map<String, TypeMirror>> genericsInfo) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -84,7 +84,7 @@ public class JavaClassElement extends AbstractJavaElement implements ClassElemen
     @Override
     public Map<String, ClassElement> getTypeArguments(@Nonnull String type) {
         if (StringUtils.isNotEmpty(type)) {
-            Map<String, Map<String, Object>> data = visitorContext.getGenericUtils().buildTypeArgumentInfo(classElement);
+            Map<String, Map<String, Object>> data = visitorContext.getGenericUtils().buildGenericTypeArgumentInfo(classElement);
             Map<String, Object> forType = data.get(type);
             if (forType != null) {
                 Map<String, ClassElement> typeArgs = new LinkedHashMap<>(forType.size());
@@ -393,7 +393,7 @@ Map<String, ClassElement> getTypeArguments() {
      */
     Map<String, Map<String, TypeMirror>> getGenericTypeInfo() {
         if (genericTypeInfo == null) {
-            genericTypeInfo = visitorContext.getGenericUtils().buildTypeArgumentElementInfo(classElement);
+            genericTypeInfo = visitorContext.getGenericUtils().buildGenericTypeArgumentElementInfo(classElement);
         }
         return genericTypeInfo;
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -64,7 +65,7 @@ class JavaFieldElement extends AbstractJavaElement implements FieldElement {
         this.declaringElement = declaringElement;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getType() {
         TypeMirror returnType = variableElement.asType();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;
@@ -60,7 +61,7 @@ class JavaMethodElement extends AbstractJavaElement implements MethodElement {
         this.declaringClass = declaringClass;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getGenericReturnType() {
         Map<String, Map<String, TypeMirror>> info = declaringClass.getGenericTypeInfo();
@@ -73,6 +74,7 @@ public Optional<String> getDocumentation() {
     }
 
     @Override
+    @Nonnull
     public ClassElement getReturnType() {
         TypeMirror returnType = executableElement.getReturnType();
         return mirrorToClassElement(returnType, visitorContext, Collections.emptyMap());

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ParameterElement;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
@@ -52,12 +53,13 @@ class JavaParameterElement extends AbstractJavaElement implements ParameterEleme
     }
 
     @Override
+    @Nonnull
     public ClassElement getType() {
         TypeMirror parameterType = getNativeType().asType();
         return mirrorToClassElement(parameterType, visitorContext);
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getGenericType() {
         TypeMirror returnType = getNativeType().asType();

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPropertyElement.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.PropertyElement;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.lang.model.element.ExecutableElement;
 
@@ -72,7 +73,7 @@ public String toString() {
         return name;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getType() {
         return type;

File: inject/src/main/java/io/micronaut/inject/ast/ClassElement.java
Patch:
@@ -17,9 +17,7 @@
 
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.ArgumentUtils;
-
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import java.util.*;
 import java.util.function.Predicate;
 
@@ -67,7 +65,7 @@ default Optional<ClassElement> getSuperType() {
         return Optional.empty();
     }
 
-    @Nullable
+    @Nonnull
     @Override
     default ClassElement getType() {
         return this;

File: inject/src/main/java/io/micronaut/inject/ast/TypedElement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.ast;
 
-import javax.annotation.Nullable;
+import javax.annotation.Nonnull;
 
 /**
  * An element that has an underlying type.
@@ -30,7 +30,7 @@ public interface TypedElement extends Element {
     /**
      * @return The type of the element
      */
-    @Nullable
+    @Nonnull
     ClassElement getType();
 
     /**
@@ -42,7 +42,7 @@ public interface TypedElement extends Element {
      * @return The generic type
      * @since 1.1.1
      */
-    @Nullable
+    @Nonnull
     default ClassElement getGenericType() {
         return getType();
     }

File: validation/src/main/java/io/micronaut/validation/routes/RouteParameterElement.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ParameterElement;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 /**
@@ -48,7 +49,7 @@ public AnnotationMetadata getAnnotationMetadata() {
         return delegate;
     }
 
-    @Nullable
+    @Nonnull
     @Override
     public ClassElement getType() {
         return delegate.getType();

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -97,6 +97,7 @@ public interface Argument<T> extends TypeVariableResolver, Named, AnnotationMeta
      * Constant representing zero arguments. Used by generated code, do not remove.
      */
     @SuppressWarnings("unused")
+    @UsedByGeneratedCode
     Argument[] ZERO_ARGUMENTS = new Argument[0];
 
     /**

File: core/src/main/java/io/micronaut/core/annotation/UsedByGeneratedCode.java
Patch:
@@ -27,7 +27,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.CONSTRUCTOR})
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.CONSTRUCTOR, ElementType.FIELD})
 @Retention(RetentionPolicy.SOURCE)
 @Internal
 public @interface UsedByGeneratedCode {

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -549,7 +549,7 @@ public String toString() {
     /**
      * {@inheritDoc}
      * <p>
-     * Beware that the parameters are not taken into account.
+     * Only the name is matched. Parameters are not included.
      */
     @Override
     public boolean equals(Object o) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -366,6 +366,7 @@ static NettyHttpRequest get(ChannelHandlerContext ctx) {
      */
     static NettyHttpRequest remove(ChannelHandlerContext ctx) {
         Channel channel = ctx.channel();
+
         io.netty.util.Attribute<NettyHttpRequest> attr = channel.attr(KEY);
         return attr.getAndSet(null);
     }

File: configurations/hibernate-validator/src/main/java/io/micronaut/configuration/hibernate/validator/ValidatorFactoryProvider.java
Patch:
@@ -43,7 +43,7 @@
  */
 @Factory
 @Requires(classes = HibernateValidator.class)
-@TypeHint(value = HibernateValidator.class)
+@TypeHint(value = {HibernateValidator.class, com.sun.el.ExpressionFactoryImpl.class})
 public class ValidatorFactoryProvider {
 
     @Inject

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -213,7 +213,7 @@ public ByteBuf getByteBuf() throws IOException {
                 if (byteBuf instanceof CompositeByteBuf) {
                     CompositeByteBuf compositeByteBuf = (CompositeByteBuf) byteBuf;
                     return createDelegate(compositeByteBuf.component(index), (buf, count) -> {
-                        ((CompositeByteBuf) buf).removeComponent(index);
+                        compositeByteBuf.removeComponent(index);
                         removeComponent(index);
                         return true;
                     });

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -212,8 +212,8 @@ public ByteBuf getByteBuf() throws IOException {
                 int index = components.indexOf(this);
                 if (byteBuf instanceof CompositeByteBuf) {
                     CompositeByteBuf compositeByteBuf = (CompositeByteBuf) byteBuf;
-                    return createDelegate(compositeByteBuf.component(index), (buf, count) -> {
-                        ((CompositeByteBuf) buf).removeComponent(index);
+                    return createDelegate(compositeByteBuf.component(index), (buf, count) -> { // what happens when it get released
+                        compositeByteBuf.removeComponent(index);
                         removeComponent(index);
                         return true;
                     });

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1557,7 +1557,7 @@ private void visitConfigurationBuilder(Element builderElement, TypeMirror builde
             AnnotationMetadata annotationMetadata = annotationUtils.getAnnotationMetadata(builderElement);
             Boolean allowZeroArgs = annotationMetadata.getValue(ConfigurationBuilder.class, "allowZeroArgs", Boolean.class).orElse(false);
             List<String> prefixes = Arrays.asList(annotationMetadata.getValue(ConfigurationBuilder.class, "prefixes", String[].class).orElse(new String[]{"set"}));
-            String configurationPrefix = annotationMetadata.getValue(ConfigurationBuilder.class, "configurationPrefix", String.class).orElse("");
+            String configurationPrefix = annotationMetadata.getValue(ConfigurationBuilder.class, String.class).orElse("");
             Set<String> includes = annotationMetadata.getValue(ConfigurationBuilder.class, "includes", Set.class).orElse(Collections.emptySet());
             Set<String> excludes = annotationMetadata.getValue(ConfigurationBuilder.class, "excludes", Set.class).orElse(Collections.emptySet());
 

File: runtime/src/main/java/io/micronaut/discovery/CompositeDiscoveryClient.java
Patch:
@@ -18,7 +18,6 @@
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.ArrayUtils;
 import io.reactivex.Flowable;
-import io.reactivex.Maybe;
 import io.reactivex.Single;
 
 import java.io.IOException;
@@ -27,7 +26,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 /**
  * A composite implementation combining all registered {@link DiscoveryClient} instances.

File: core/src/main/java/io/micronaut/core/annotation/AnnotatedElement.java
Patch:
@@ -30,13 +30,13 @@ public interface AnnotatedElement extends AnnotationMetadataProvider, Named {
      * @return Whether the element is nullable.
      */
     default boolean isDeclaredNullable() {
-        return getAnnotationMetadata().hasSimpleDeclaredAnnotation(AnnotationUtil.NULLABLE);
+        return getAnnotationMetadata().hasDeclaredAnnotation(AnnotationUtil.NULLABLE);
     }
 
     /**
      * @return Whether the element is nullable.
      */
     default boolean isNullable() {
-        return getAnnotationMetadata().hasSimpleAnnotation(AnnotationUtil.NULLABLE);
+        return getAnnotationMetadata().hasAnnotation(AnnotationUtil.NULLABLE);
     }
 }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nullable;
 import java.lang.annotation.*;
 import java.lang.reflect.AnnotatedElement;
 import java.util.*;

File: session/src/main/java/io/micronaut/session/package-info.java
Patch:
@@ -23,4 +23,4 @@
 @Configuration
 package io.micronaut.session;
 
-import io.micronaut.context.annotation.Configuration;
\ No newline at end of file
+import io.micronaut.context.annotation.Configuration;

File: core/src/main/java/io/micronaut/core/beans/AbstractBeanIntrospection.java
Patch:
@@ -93,7 +93,7 @@ public T instantiate(Object... arguments) throws InstantiationException {
             Argument<?> constructorArgument = constructorArguments[i];
             final Object specified = arguments[i];
             if (specified == null) {
-                if (constructorArgument.isAnnotationPresent(Nullable.class)) {
+                if (constructorArgument.isDeclaredNullable()) {
                     continue;
                 } else {
                     throw new InstantiationException("Null argument specified for [" + constructorArgument.getName() + "]. If this argument is allowed to be null annotate it with @Nullable");

File: core/src/main/java/io/micronaut/core/bind/DefaultExecutableBinder.java
Patch:
@@ -78,7 +78,7 @@ public <T, R> BoundExecutable<T, R> bind(
                     );
 
                     if (!bindingResult.isPresentAndSatisfied()) {
-                        if (argument.getAnnotationMetadata().hasAnnotation(Nullable.class)) {
+                        if (argument.isDeclaredNullable()) {
                             boundArguments[i] = null;
                         } else {
                             final Optional<ConversionError> lastError = conversionContext.getLastError();
@@ -143,7 +143,7 @@ public <T, R> BoundExecutable<T, R> tryBind(Executable<T, R> target, ArgumentBin
                     );
 
                     if (!bindingResult.isPresentAndSatisfied()) {
-                        if (argument.getAnnotationMetadata().hasAnnotation(Nullable.class)) {
+                        if (argument.isDeclaredNullable()) {
                             boundArguments[i] = null;
                         } else {
                             boundArguments[i] = null;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -68,7 +68,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
 import javax.annotation.PreDestroy;
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -255,9 +254,9 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
                     definedValue = argument.getAnnotationMetadata().getValue(Bindable.class, "defaultValue", String.class).orElse(null);
                 }
 
-                if (definedValue == null && !argument.isAnnotationPresent(Nullable.class)) {
+                if (definedValue == null && !argument.isNullable()) {
                     throw new IllegalArgumentException(
-                            String.format("Null values are not allowed to be passed to client methods (%s). Add @javax.validation.Nullable if that is the desired behavior", context.getExecutableMethod().toString())
+                            String.format("Argument [%s] is null. Null values are not allowed to be passed to client methods (%s). Add a supported Nullable annotation type if that is the desired behavior", argument.getName(), context.getExecutableMethod().toString())
                     );
                 }
 

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -29,7 +29,6 @@
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.UnresolvedArgument;
 
-import javax.annotation.Nullable;
 import javax.inject.Singleton;
 import java.util.Collection;
 import java.util.Collections;
@@ -136,7 +135,7 @@ protected Optional<Object> getValueForArgument(Argument argument, HttpRequest<?>
                     }
                 } else if (bindingResult.isPresentAndSatisfied()) {
                     value = bindingResult.get();
-                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isAnnotationPresent(Nullable.class)) {
+                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isDeclaredNullable()) {
                     value = (UnresolvedArgument) () -> {
                         ArgumentBinder.BindingResult result = argumentBinder.bind(conversionContext, request);
                         Optional<ConversionError> lastError = conversionContext.getLastError();

File: inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ParametrizedBeanFactory;
 
-import javax.annotation.Nullable;
 import javax.inject.Qualifier;
 import java.lang.annotation.Annotation;
 import java.util.Arrays;
@@ -97,7 +96,7 @@ public final T build(BeanResolutionContext resolutionContext,
             try {
                 path.pushConstructorResolve(this, requiredArgument);
                 String argumentName = requiredArgument.getName();
-                if (!requiredArgumentValues.containsKey(argumentName) && !requiredArgument.isAnnotationPresent(Nullable.class)) {
+                if (!requiredArgumentValues.containsKey(argumentName) && !requiredArgument.isDeclaredNullable()) {
                     if (eachBeanType.filter(type -> type == requiredArgument.getType()).isPresent()) {
                         return null;
                     }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -708,7 +708,7 @@ protected <T> Stream<T> streamOfType(BeanResolutionContext resolutionContext, Cl
                                     new BeanInstantiationException(resolutionContext, "Invalid bean @Argument [" + requiredArgument + "]. Cannot convert object [" + val + "] to required type: " + requiredArgument.getType())
                             ));
                         } else {
-                            if (!requiredArgument.getAnnotationMetadata().hasDeclaredAnnotation(Nullable.class)) {
+                            if (!requiredArgument.isDeclaredNullable()) {
                                 throw new BeanInstantiationException(resolutionContext, "Invalid bean @Argument [" + requiredArgument + "]. Argument cannot be null");
                             }
                         }
@@ -718,7 +718,7 @@ protected <T> Stream<T> streamOfType(BeanResolutionContext resolutionContext, Cl
                         if (existingBean.isPresent()) {
                             argumentValues.put(requiredArgument.getName(), existingBean.get());
                         } else {
-                            if (!requiredArgument.getAnnotationMetadata().hasDeclaredAnnotation(Nullable.class)) {
+                            if (!requiredArgument.isDeclaredNullable()) {
                                 throw new BeanInstantiationException(resolutionContext, "Invalid bean @Argument [" + requiredArgument + "]. No bean found for type: " + requiredArgument.getType());
                             }
                         }
@@ -1478,7 +1478,7 @@ protected void registerConfiguration(@Nonnull BeanConfiguration configuration) {
                     Map<String, Object> convertedValues = new LinkedHashMap<>(argumentValues);
                     for (Argument<?> requiredArgument : requiredArguments) {
                         Object val = argumentValues.get(requiredArgument.getName());
-                        if (val == null && !requiredArgument.getAnnotationMetadata().hasDeclaredAnnotation(Nullable.class)) {
+                        if (val == null && !requiredArgument.isDeclaredNullable()) {
                             throw new BeanInstantiationException(resolutionContext, "Missing bean argument [" + requiredArgument + "].");
                         }
                         BeanResolutionContext finalResolutionContext = resolutionContext;

File: inject/src/main/java/io/micronaut/inject/FieldInjectionPoint.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.inject;
 
+import io.micronaut.core.annotation.AnnotatedElement;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.type.Argument;
 import java.lang.reflect.Field;
@@ -26,7 +27,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface FieldInjectionPoint<T> extends InjectionPoint, AnnotationMetadataProvider {
+public interface FieldInjectionPoint<T> extends InjectionPoint, AnnotationMetadataProvider, AnnotatedElement {
 
     /**
      * @return The name of the field

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.exceptions.BeanContextException;
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.AnnotationUtil;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
@@ -1868,7 +1869,7 @@ private Map<String, Integer> processEachBeanArgument(AnnotationMetadata ownerMet
                         buildMethodVisitor.visitJumpInsn(GOTO, catchEnd);
 
                         buildMethodVisitor.visitLabel(catchStart);
-                        if (!argMetadata.isAnnotationPresent(Nullable.class)) {
+                        if (!argMetadata.hasSimpleDeclaredAnnotation(AnnotationUtil.NULLABLE)) {
                             buildMethodVisitor.visitInsn(ACONST_NULL);
                             buildMethodVisitor.visitInsn(ARETURN);
                         } else {

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -35,7 +35,6 @@
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -265,7 +264,7 @@ public R execute(Map<String, Object> argumentValues) {
                             argumentList.add(resolveValueOrError(argument, conversionContext, result));
                         }
                     } else {
-                        if (argument.isAnnotationPresent(Nullable.class)) {
+                        if (argument.isNullable()) {
                             argumentList.add(null);
                             continue;
                         } else {
@@ -347,7 +346,7 @@ public RouteMatch<R> fulfill(Map<String, Object> argumentValues) {
     protected Object resolveValueOrError(Argument argument, ConversionContext conversionContext, Optional<?> result) {
         if (!result.isPresent()) {
             Optional<ConversionError> lastError = conversionContext.getLastError();
-            if (!lastError.isPresent() && argument.isAnnotationPresent(Nullable.class)) {
+            if (!lastError.isPresent() && argument.isDeclaredNullable()) {
                 return null;
             }
             throw lastError.map(conversionError ->

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.session.SessionStore;
 import io.micronaut.session.http.HttpSessionFilter;
 
-import javax.annotation.Nullable;
 import javax.inject.Singleton;
 import java.util.Optional;
 
@@ -73,7 +72,7 @@ public ArgumentBinder.BindingResult<Session> bind(ArgumentConversionContext<Sess
             return () -> existing;
         } else {
             // create a new session store it in the attribute
-            if (!context.isAnnotationPresent(Nullable.class)) {
+            if (!context.getArgument().isDeclaredNullable()) {
                 Session newSession = sessionStore.newSession();
                 attrs.put(HttpSessionFilter.SESSION_ATTRIBUTE, newSession);
                 return () -> Optional.of(newSession);

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -187,11 +187,12 @@ public AnnotationMetadata getAnnotationMetadata(Element parent, Element element)
     /**
      * Check whether the method is annotated.
      *
+     * @param declaringType The declaring type
      * @param method The method
      * @return True if it is annotated with non internal annotations
      */
-    public boolean isAnnotated(ExecutableElement method) {
-        if (AbstractAnnotationMetadataBuilder.isMetadataMutated(method)) {
+    public boolean isAnnotated(String declaringType, ExecutableElement method) {
+        if (AbstractAnnotationMetadataBuilder.isMetadataMutated(declaringType, method)) {
             return true;
         }
         List<? extends AnnotationMirror> annotationMirrors = method.getAnnotationMirrors();

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -143,6 +143,7 @@ void visitProperty(
         propertyDefinitions.add(
                 new BeanPropertyWriter(
                         this,
+                        type,
                         propertyType,
                         name,
                         readMethod,

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -53,8 +53,8 @@ class JavaParameterElement extends AbstractJavaElement implements ParameterEleme
 
     @Override
     public ClassElement getType() {
-        TypeMirror returnType = getNativeType().asType();
-        return mirrorToClassElement(returnType, visitorContext);
+        TypeMirror parameterType = getNativeType().asType();
+        return mirrorToClassElement(parameterType, visitorContext);
     }
 
     @Nullable

File: inject-java/src/test/groovy/io/micronaut/visitors/InterfaceWithGenerics.java
Patch:
@@ -11,4 +11,6 @@ public interface InterfaceWithGenerics<ET, ID>  {
     <S extends ET> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
 
     Optional<ET> find(ID id);
+
+    void deleteAll(Iterable<? extends ET> iterable);
 }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanPropertyWriter.java
Patch:
@@ -61,7 +61,7 @@ class BeanPropertyWriter extends AbstractClassFileWriter implements Named {
     private final AnnotationMetadata annotationMetadata;
     private final Type type;
     private final ClassWriter classWriter;
-    private final Map<String, Object> typeArguments;
+    private final Map<String, ClassElement> typeArguments;
     private final Type beanType;
     private final boolean readOnly;
     private final MethodElement readMethod;
@@ -101,7 +101,7 @@ class BeanPropertyWriter extends AbstractClassFileWriter implements Named {
         this.type = getTypeReference(introspectionType.getClassName() + "$$" + index);
         this.classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
         if (CollectionUtils.isNotEmpty(typeArguments)) {
-            this.typeArguments = toTypeArguments(typeArguments);
+            this.typeArguments = typeArguments;
         } else {
             this.typeArguments = null;
         }
@@ -231,7 +231,7 @@ private void writeConstructor() {
 
         // 5th argument: The type arguments
         if (typeArguments != null) {
-            pushTypeArguments(constructor, typeArguments);
+            pushTypeArgumentElements(constructor, typeArguments);
         } else {
             constructor.visitInsn(ACONST_NULL);
         }

File: test-suite/src/test/java/io/micronaut/docs/config/builder/EngineFactory.java
Patch:
@@ -16,7 +16,7 @@ class EngineFactory {
 
     @Singleton
     EngineImpl buildEngine(EngineConfig engineConfig) {
-        return engineConfig.builder.build(engineConfig.crankShaft, engineConfig.sparkPlug);
+        return engineConfig.builder.build(engineConfig.crankShaft, engineConfig.getSparkPlug());
     }
 }
 // end::class[]
\ No newline at end of file

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1863,7 +1863,7 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                                 type
                         );
 
-                        Map<String, Object> resolvedParameters = genericUtils.resolveGenericTypes(declaredType, typeElement, Collections.emptyMap());
+                        Map<String, Object> resolvedParameters = genericUtils.resolveGenericTypes(declaredType, typeElement, boundTypes);
                         if (!resolvedParameters.isEmpty()) {
                             params.addGenericTypes(argName, resolvedParameters);
                         }

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -262,9 +262,9 @@ protected Map<String, Object> resolveGenericTypes(DeclaredType type, TypeElement
                             TypeMirror upperBound = tv.getUpperBound();
                             TypeMirror lowerBound = tv.getLowerBound();
                             if (upperBound.getKind() != TypeKind.NULL) {
-                                resolvedParameters.put(parameterName, resolveTypeReference(upperBound, Collections.emptyMap()));
+                                resolvedParameters.put(parameterName, resolveTypeReference(upperBound, boundTypes));
                             } else if (lowerBound.getKind() != TypeKind.NULL) {
-                                resolvedParameters.put(parameterName, resolveTypeReference(lowerBound, Collections.emptyMap()));
+                                resolvedParameters.put(parameterName, resolveTypeReference(lowerBound, boundTypes));
                             }
                         }
                         continue;

File: inject-groovy/src/test/groovy/io/micronaut/inject/visitor/InterfaceWithGenerics.java
Patch:
@@ -4,9 +4,9 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 
-public interface InterfaceWithGenerics<T, ID>  {
-    <S extends T> S save(S entity);
+public interface InterfaceWithGenerics<ET, ID>  {
+    <S extends ET> S save(S entity);
 
-    <S extends T> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
+    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
 }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.inject.ast.ParameterElement;
 
 import javax.annotation.Nullable;
-import javax.lang.model.element.Element;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 import java.util.Map;
@@ -62,7 +61,7 @@ public ClassElement getType() {
     @Override
     public ClassElement getGenericType() {
         TypeMirror returnType = getNativeType().asType();
-        Map<String, Map<String, Element>> declaredGenericInfo = declaringClass.getGenericTypeInfo();
+        Map<String, Map<String, TypeMirror>> declaredGenericInfo = declaringClass.getGenericTypeInfo();
         return parameterizedClassElement(returnType, visitorContext, declaredGenericInfo);
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -136,7 +136,7 @@ public Iterable<URL> getClasspathResources(@Nonnull String path) {
     public Optional<ClassElement> getClassElement(String name) {
         TypeElement typeElement = elements.getTypeElement(name);
         return Optional.ofNullable(typeElement).map(typeElement1 ->
-                new JavaClassElement(typeElement1, annotationUtils.getAnnotationMetadata(typeElement1), this, Collections.emptyList(), Collections.emptyMap())
+                new JavaClassElement(typeElement1, annotationUtils.getAnnotationMetadata(typeElement1), this, Collections.emptyMap())
         );
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -27,7 +27,6 @@
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;
-import java.util.Collections;
 import java.util.List;
 
 /**
@@ -167,8 +166,7 @@ public boolean matches(AnnotationMetadata annotationMetadata) {
                 this.rootClassElement = new JavaEnumElement(
                         typeElement,
                         annotationMetadata,
-                        visitorContext,
-                        Collections.emptyList());
+                        visitorContext);
                 visitor.visitClass(
                         rootClassElement,
                         visitorContext

File: inject-java/src/test/groovy/io/micronaut/visitors/InterfaceWithGenerics.java
Patch:
@@ -4,8 +4,8 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 
-public interface InterfaceWithGenerics<T, ID>  {
-    <S extends T> S save(S entity);
+public interface InterfaceWithGenerics<ET, ID>  {
+    <S extends ET> S save(S entity);
 
-    <S extends T> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
+    <S extends ET> Iterable<S> saveAll(@Valid @NotNull @Nonnull Iterable<S> entities);
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -325,7 +325,7 @@ protected Object resolveTypeReference(TypeMirror mirror, Map<String, Object> bou
                 if (boundTypes.containsKey(name)) {
                     return boundTypes.get(name);
                 } else {
-                    return modelUtils.resolveTypeReference(mirror);
+                    return resolveTypeReference(tv.getUpperBound(), boundTypes);
                 }
             case WILDCARD:
                 WildcardType wcType = (WildcardType) mirror;

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -797,6 +797,7 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                                         Map<String, Object> returnTypeGenericTypes,
                                                         String methodName,
                                                         Map<String, Object> argumentTypes,
+                                                        Map<String, Object> genericArgumentTypes,
                                                         Map<String, AnnotationMetadata> argumentAnnotationMetadata,
                                                         Map<String, Map<String, Object>> genericTypes,
                                                         AnnotationMetadata annotationMetadata) {
@@ -817,6 +818,7 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                 returnTypeGenericTypes,
                 methodName,
                 argumentTypes,
+                genericArgumentTypes,
                 argumentAnnotationMetadata,
                 genericTypes
         );

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaEnumElement.java
Patch:
@@ -41,7 +41,7 @@ class JavaEnumElement extends JavaClassElement implements EnumElement {
      * @param typeArguments The type arguments
      */
     JavaEnumElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext, List<? extends TypeMirror> typeArguments) {
-        super(classElement, annotationMetadata, visitorContext, typeArguments);
+        super(classElement, annotationMetadata, visitorContext, typeArguments, Collections.emptyMap());
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -136,7 +136,7 @@ public Iterable<URL> getClasspathResources(@Nonnull String path) {
     public Optional<ClassElement> getClassElement(String name) {
         TypeElement typeElement = elements.getTypeElement(name);
         return Optional.ofNullable(typeElement).map(typeElement1 ->
-                new JavaClassElement(typeElement1, annotationUtils.getAnnotationMetadata(typeElement1), this, Collections.emptyList())
+                new JavaClassElement(typeElement1, annotationUtils.getAnnotationMetadata(typeElement1), this, Collections.emptyList(), Collections.emptyMap())
         );
     }
 

File: core/src/main/java/io/micronaut/core/beans/DefaultBeanIntrospector.java
Patch:
@@ -19,9 +19,9 @@
 import io.micronaut.core.beans.exceptions.IntrospectionException;
 import io.micronaut.core.io.service.ServiceDefinition;
 import io.micronaut.core.io.service.SoftServiceLoader;
+import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.util.ArgumentUtils;
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nonnull;
 import java.util.*;
@@ -39,7 +39,7 @@
  */
 class DefaultBeanIntrospector implements BeanIntrospector {
 
-    private static final Logger LOG = LoggerFactory.getLogger(DefaultBeanIntrospector.class);
+    private static final Logger LOG = ClassUtils.getLogger(DefaultBeanIntrospector.class);
 
     private Map<String, BeanIntrospectionReference<Object>> introspectionMap;
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyConstructorElement.java
Patch:
@@ -28,11 +28,12 @@
  */
 public class GroovyConstructorElement extends GroovyMethodElement implements ConstructorElement {
     /**
+     * @param declaringClass     The declaring class
      * @param sourceUnit         The source unit
      * @param methodNode         The {@link ConstructorNode}
      * @param annotationMetadata The annotation metadata
      */
-    GroovyConstructorElement(SourceUnit sourceUnit, ConstructorNode methodNode, AnnotationMetadata annotationMetadata) {
-        super(sourceUnit, methodNode, annotationMetadata);
+    GroovyConstructorElement(GroovyClassElement declaringClass, SourceUnit sourceUnit, ConstructorNode methodNode, AnnotationMetadata annotationMetadata) {
+        super(declaringClass, sourceUnit, methodNode, annotationMetadata);
     }
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -84,7 +84,7 @@ public Types getTypeUtils() {
      * @param element The element
      * @return The {@link TypeElement}
      */
-    @Nullable final TypeElement classElementFor(Element element) {
+    @Nullable public final TypeElement classElementFor(Element element) {
         while (element != null && !(JavaModelUtils.isClassOrInterface(element) || JavaModelUtils.isEnum(element))) {
             element = element.getEnclosingElement();
         }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaConstructorElement.java
Patch:
@@ -31,11 +31,12 @@
 class JavaConstructorElement extends JavaMethodElement implements ConstructorElement {
 
     /**
+     * @param declaringClass     The declaring class
      * @param executableElement  The {@link ExecutableElement}
      * @param annotationMetadata The annotation metadata
      * @param visitorContext     The visitor context
      */
-    JavaConstructorElement(ExecutableElement executableElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
-        super(executableElement, annotationMetadata, visitorContext);
+    JavaConstructorElement(JavaClassElement declaringClass, ExecutableElement executableElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
+        super(declaringClass, executableElement, annotationMetadata, visitorContext);
     }
 }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -359,7 +359,7 @@ public Object getNativeType() {
 
     @Override
     public boolean isAssignable(String type) {
-        return AstClassUtils.isSubclassOf(classNode, type);
+        return AstClassUtils.isSubclassOfOrImplementsInterface(classNode, type);
     }
 
     private ConstructorNode findConcreteConstructor(List<ConstructorNode> constructors) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -320,7 +320,7 @@ private void exceptionCaughtInternal(ChannelHandlerContext ctx, Throwable cause,
         } else {
 
             Optional<ExceptionHandler> exceptionHandler = beanLocator
-                    .findBean(ExceptionHandler.class, Qualifiers.byTypeArguments(cause.getClass(), Object.class));
+                    .findBean(ExceptionHandler.class, Qualifiers.byTypeArgumentsClosest(cause.getClass(), Object.class));
 
             if (exceptionHandler.isPresent()) {
                 ExceptionHandler handler = exceptionHandler.get();

File: runtime/src/main/java/io/micronaut/jackson/convert/ArrayNodeToIterableConverter.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.core.type.Argument;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
 import javax.inject.Singleton;
 import java.util.ArrayList;
 import java.util.List;

File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/FactoryConstructor.java
Patch:
@@ -5,5 +5,5 @@
 @Factory
 public class FactoryConstructor {
 
-    FactoryConstructor(E e) {}
+    FactoryConstructor(F f) {}
 }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1501,7 +1501,7 @@ protected void registerConfiguration(@Nonnull BeanConfiguration configuration) {
                     bean = beanFactory.build(resolutionContext, this, beanDefinition);
 
                     if (bean == null) {
-                        if (!beanDefinition.getAnnotationMetadata().hasAnnotation(Factory.class)) {
+                        if (!(beanDefinition.isIterable() || beanDefinition.getAnnotationMetadata().hasAnnotation(Factory.class))) {
                             throw new BeanInstantiationException(resolutionContext, "Bean Factory [" + beanFactory + "] returned null");
                         }
                     } else {

File: test-suite/src/test/java/io/micronaut/docs/config/builder/CrankShaft.java
Patch:
@@ -18,7 +18,7 @@ static Builder builder() {
     static final class Builder {
         private Optional<Double> rodLength = Optional.empty();
 
-        Builder withRodLength(Double rodLength) {
+        public Builder withRodLength(Double rodLength) {
             this.rodLength = Optional.ofNullable(rodLength);
             return this;
         }

File: test-suite/src/test/java/io/micronaut/docs/config/builder/EngineImpl.java
Patch:
@@ -47,12 +47,12 @@ static final class Builder {
         private String manufacturer = "Ford";
         private int cylinders;
 
-        Builder withManufacturer(String manufacturer) {
+        public Builder withManufacturer(String manufacturer) {
             this.manufacturer = manufacturer;
             return this;
         }
 
-        Builder withCylinders(int cylinders) {
+        public Builder withCylinders(int cylinders) {
             this.cylinders = cylinders;
             return this;
         }

File: discovery-client/src/main/java/io/micronaut/discovery/client/DiscoveryClientCacheConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 import static io.micronaut.discovery.client.DiscoveryClientCacheConfiguration.CACHE_NAME;
 
 import io.micronaut.cache.CacheConfiguration;
-import io.micronaut.cache.DefaultCacheConfiguration;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
@@ -35,9 +34,9 @@
  * @since 1.0
  */
 @Named(CACHE_NAME)
-@ConfigurationProperties(CACHE_NAME)
+@ConfigurationProperties(CacheConfiguration.PREFIX + "." + CACHE_NAME)
 @Requires(property = DiscoveryClientCacheConfiguration.SETTING_ENABLED, notEquals = StringUtils.FALSE)
-public class DiscoveryClientCacheConfiguration extends DefaultCacheConfiguration implements Toggleable {
+public class DiscoveryClientCacheConfiguration extends CacheConfiguration implements Toggleable {
 
     /**
      * The prefix to use for all discovery client settings.

File: runtime/src/main/java/io/micronaut/cache/DefaultSyncCache.java
Patch:
@@ -46,7 +46,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@EachBean(DefaultCacheConfiguration.class)
+@EachBean(CacheConfiguration.class)
 public class DefaultSyncCache implements SyncCache<com.github.benmanes.caffeine.cache.Cache> {
 
     private final CacheConfiguration cacheConfiguration;
@@ -61,7 +61,7 @@ public class DefaultSyncCache implements SyncCache<com.github.benmanes.caffeine.
      * @param applicationContext The application context
      * @param conversionService To convert the value from the cache into given required type
      */
-    @Inject public DefaultSyncCache(
+    public DefaultSyncCache(
             DefaultCacheConfiguration cacheConfiguration,
             ApplicationContext applicationContext,
             ConversionService<?> conversionService) {
@@ -75,6 +75,7 @@ public class DefaultSyncCache implements SyncCache<com.github.benmanes.caffeine.
      * @param applicationContext The application context
      * @param conversionService To convert the value from the cache into given required type
      */
+    @Inject
     public DefaultSyncCache(
             CacheConfiguration cacheConfiguration,
             ApplicationContext applicationContext,

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -101,6 +101,7 @@ DefaultHttpClient serviceHttpClient(
             httpClient = beanContext.createBean(DefaultHttpClient.class, loadBalancer, configuration);
         }
 
+        httpClient.setClientIdentifiers(configuration.getServiceId());
 
         if (isHealthCheck) {
             taskScheduler.scheduleWithFixedDelay(configuration.getHealthCheckInterval(), configuration.getHealthCheckInterval(), () -> Flowable.fromIterable(originalURLs).flatMap(originalURI -> {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1411,13 +1411,13 @@ public Object visitConfigurationProperty(VariableElement field, AnnotationMetada
 
                 String fieldName = field.getSimpleName().toString();
                 if (fieldAnnotationMetadata.hasStereotype(ConfigurationBuilder.class)) {
-                    if(modelUtils.isPrivate(field)) {
+                    if (modelUtils.isPrivate(field)) {
                         // Using the field would throw a IllegalAccessError, use the method instead
                         Optional<ExecutableElement> getterMethod = modelUtils.findGetterMethodFor(field);
-                        if(getterMethod.isPresent()) {
+                        if (getterMethod.isPresent()) {
                             writer.visitConfigBuilderMethod(fieldType, getterMethod.get().getSimpleName().toString(), fieldAnnotationMetadata, metadataBuilder);
                         } else {
-                            error(field,"ConfigurationBuilder applied to a private field must have a corresponding non-private getter method.");
+                            error(field, "ConfigurationBuilder applied to a private field must have a corresponding non-private getter method.");
                         }
                     } else {
                         writer.visitConfigBuilderField(fieldType, fieldName, fieldAnnotationMetadata, metadataBuilder);

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -239,7 +239,8 @@ void visitPreDestroyMethod(Object declaringType,
                                String methodName,
                                Map<String, Object> argumentTypes,
                                Map<String, AnnotationMetadata> argumentAnnotationMetadata,
-                               Map<String, Map<String, Object>> genericTypes, AnnotationMetadata annotationMetadata);
+                               Map<String, Map<String, Object>> genericTypes,
+                               AnnotationMetadata annotationMetadata);
 
     /**
      * Visits a method injection point.

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -614,7 +614,7 @@ private void visitConfigurationPropertySetter(ExecutableElement method) {
                 if (methodAnnotationMetadata.hasStereotype(ConfigurationBuilder.class)) {
                     writer.visitConfigBuilderMethod(
                             fieldType,
-                            NameUtils.getterNameFor(parameter.getSimpleName().toString()),
+                            NameUtils.getterNameFor(NameUtils.getPropertyNameForSetter(method.getSimpleName().toString())),
                             methodAnnotationMetadata,
                             metadataBuilder);
                     try {

File: runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java
Patch:
@@ -25,7 +25,6 @@
 
 import java.time.Duration;
 import java.util.*;
-import java.util.stream.Collectors;
 
 /**
  * Builds a {@link RetryState} from {@link AnnotationMetadata}.

File: runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java
Patch:
@@ -80,7 +80,7 @@ private Set<Class<? extends Throwable>> resolveIncludes(AnnotationValue<Retryabl
         if (value.isPresent()) {
             for (AnnotationClassValue classValue: value.get()) {
                 classValue.getType().ifPresent(clazz -> {
-                    classes.add((Class)clazz);
+                    classes.add((Class) clazz);
                 });
             }
         }

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -77,6 +77,7 @@ public class AWSParameterStoreConfigClient implements ConfigurationClient {
      * @param awsParameterStoreConfiguration      configuration for the parameter store
      * @param applicationConfiguration            the application configuration
      * @param route53ClientDiscoveryConfiguration configuration for route53 service discovery, if you are using this (not required)
+     * @throws SdkClientException If the aws sdk client could not be created
      */
     AWSParameterStoreConfigClient(
             AWSClientConfiguration awsConfiguration,

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1465,7 +1465,7 @@ protected NettyRequestWriter buildNettyRequest(
                             throw new CodecException("Cannot encode value [" + o + "]. No possible encoders found");
                         });
 
-                        if (!isSingle && requestContentType == MediaType.APPLICATION_JSON_TYPE) {
+                        if (!isSingle && MediaType.APPLICATION_JSON_TYPE.equals(requestContentType)) {
                             requestBodyPublisher = requestBodyPublisher.map(new Function<HttpContent, HttpContent>() {
                                 boolean first = true;
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1465,7 +1465,7 @@ protected NettyRequestWriter buildNettyRequest(
                             throw new CodecException("Cannot encode value [" + o + "]. No possible encoders found");
                         });
 
-                        if (!isSingle && requestContentType == MediaType.APPLICATION_JSON_TYPE) {
+                        if (!isSingle && MediaType.APPLICATION_JSON_TYPE.equals(requestContentType)) {
                             requestBodyPublisher = requestBodyPublisher.map(new Function<HttpContent, HttpContent>() {
                                 boolean first = true;
 

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -40,7 +40,7 @@ public class DefaultApplicationContextBuilder implements ApplicationContextBuild
     private Collection<String> configurationIncludes = new HashSet<>();
     private Collection<String> configurationExcludes = new HashSet<>();
     private Boolean deduceEnvironments = null;
-    private ClassLoader classLoader;
+    private ClassLoader classLoader = getClass().getClassLoader();
 
     /**
      * Default constructor.

File: inject/src/main/java/io/micronaut/context/BeanContextConfiguration.java
Patch:
@@ -30,8 +30,7 @@ public interface BeanContextConfiguration {
      * The class loader to use.
      * @return The class loader.
      */
-    default @Nonnull
-    ClassLoader getClassLoader() {
+    default @Nonnull ClassLoader getClassLoader() {
         return ApplicationContextConfiguration.class.getClassLoader();
     }
 }

File: session/src/main/java/io/micronaut/session/http/SessionForRequest.java
Patch:
@@ -51,7 +51,8 @@ public static Optional<Session> find(HttpRequest<?> request) {
 
     /**
      *
-     * @param request the Http Request
+     * @param request The Http Request
+     * @param sessionStore The session store to create the session if not found
      * @return A session if found in the request attributes.
      */
     public static Session findOrCreate(HttpRequest<?> request, SessionStore sessionStore) {

File: security-session/src/main/java/io/micronaut/security/session/SessionLoginHandler.java
Patch:
@@ -78,7 +78,7 @@ public SessionLoginHandler(SecuritySessionConfiguration securitySessionConfigura
 
     @Override
     public HttpResponse loginSuccess(UserDetails userDetails, HttpRequest<?> request) {
-        Session session = SessionForRequest.find(request).orElse(SessionForRequest.create(sessionStore, request));
+        Session session = SessionForRequest.findOrCreate(request, sessionStore);
         session.put(SecurityFilter.AUTHENTICATION, new AuthenticationUserDetailsAdapter(userDetails, rolesKeyName));
         try {
             URI location = new URI(securitySessionConfiguration.getLoginSuccessTargetUrl());

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -110,7 +110,7 @@ public <BT extends BeanType<Object>> Stream<BT> reduce(Class<Object> beanType, S
     private final Map<BeanKey, Collection<Object>> initializedObjectsByType = new ConcurrentLinkedHashMap.Builder<BeanKey, Collection<Object>>().maximumWeightedCapacity(30).build();
     private final Map<BeanKey, Optional<BeanDefinition>> beanConcreteCandidateCache = new ConcurrentLinkedHashMap.Builder<BeanKey, Optional<BeanDefinition>>().maximumWeightedCapacity(30).build();
     private final Map<Class, Collection<BeanDefinition>> beanCandidateCache = new ConcurrentLinkedHashMap.Builder<Class, Collection<BeanDefinition>>().maximumWeightedCapacity(30).build();
-    private final Map<Class, Collection<BeanDefinitionReference>> beanIndex = new ConcurrentLinkedHashMap.Builder<Class, Collection<BeanDefinitionReference>>().maximumWeightedCapacity(10).build();
+    private final Map<Class, Collection<BeanDefinitionReference>> beanIndex = new ConcurrentHashMap<>(12);
 
     private final ClassLoader classLoader;
     private final Set<Class> thisInterfaces = ReflectionUtils.getAllInterfaces(getClass());
@@ -1265,7 +1265,7 @@ protected void initializeContext(
      * @return The candidates
      */
     @SuppressWarnings("unchecked")
-    protected @Nonnull <T> Collection<BeanDefinition<T>> findBeanCandidates(@Nonnull Class<T> beanType, @Nullable BeanDefinition<?> filter) {
+    protected @Nonnull <T> Collection<BeanDefinition<T>>  findBeanCandidates(@Nonnull Class<T> beanType, @Nullable BeanDefinition<?> filter) {
         ArgumentUtils.requireNonNull("beanType", beanType);
 
         if (LOG.isDebugEnabled()) {

File: inject/src/main/java/io/micronaut/inject/qualifiers/TypeArgumentQualifier.java
Patch:
@@ -19,14 +19,12 @@
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.GenericTypeUtils;
-import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.BeanType;
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.Arrays;
 import java.util.List;

File: validation/src/main/java/io/micronaut/validation/ValidatingInterceptor.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
 import io.micronaut.core.async.publisher.Publishers;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.validation.validator.ExecutableMethodValidator;
 import io.micronaut.validation.validator.ReactiveValidator;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -33,7 +33,6 @@
 import javax.lang.model.type.*;
 import java.lang.annotation.Annotation;
 import java.util.List;
-import java.util.Locale;
 import java.util.function.Consumer;
 
 /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -160,9 +160,6 @@ protected ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorCo
                     );
                 }
             }
-        } else if (returnType instanceof PrimitiveType) {
-            PrimitiveType pt = (PrimitiveType) returnType;
-            return JavaPrimitiveElement.valueOf(pt.toString().toUpperCase(Locale.ENGLISH));
         } else if (returnType instanceof TypeVariable) {
             TypeVariable tv = (TypeVariable) returnType;
             TypeMirror upperBound = tv.getUpperBound();
@@ -189,6 +186,9 @@ public boolean isArray() {
                     };
                 }
             }
+        } else if (returnType instanceof PrimitiveType) {
+            PrimitiveType pt = (PrimitiveType) returnType;
+            return JavaPrimitiveElement.valueOf(pt.getKind().name());
         }
         return null;
     }

File: aop/src/main/java/io/micronaut/aop/Interceptor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.aop;
 
+import io.micronaut.core.annotation.Indexed;
 import io.micronaut.core.order.Ordered;
 
 /**
@@ -36,6 +37,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Indexed(Interceptor.class)
 public interface Interceptor<T, R> extends Ordered {
 
     /**

File: router/src/main/java/io/micronaut/web/router/RouteBuilder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.web.router;
 
+import io.micronaut.core.annotation.Indexed;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.naming.conventions.MethodConvention;
 import io.micronaut.core.naming.conventions.PropertyConvention;
@@ -41,6 +42,7 @@
  * @since 1.0
  */
 @SuppressWarnings("MethodName")
+@Indexed(RouteBuilder.class)
 public interface RouteBuilder {
 
     /**

File: runtime/src/test/groovy/io/micronaut/runtime/event/annotation/TestListener.java
Patch:
@@ -22,14 +22,14 @@
 @Singleton
 public class TestListener {
 
-    boolean invoked = false;
+    int invocationCount = 0;
 
     @EventListener
     void onStartup(StartupEvent event) {
-        invoked = true;
+        invocationCount++;
     }
 
     public boolean isInvoked() {
-        return invoked;
+        return invocationCount > 0;
     }
 }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1940,7 +1940,7 @@ private <T> Class<?> resolveProxiedType(Class<T> beanType, BeanDefinition<T> def
         Class<?> proxiedType;
         if (definition instanceof ProxyBeanDefinition) {
             proxiedType = ((ProxyBeanDefinition<T>) definition).getTargetType();
-        } else if(definition instanceof BeanDefinitionDelegate) {
+        } else if (definition instanceof BeanDefinitionDelegate) {
             BeanDefinition<T> delegate = ((BeanDefinitionDelegate<T>) definition).getDelegate();
             if (delegate instanceof ProxyBeanDefinition) {
                 proxiedType = ((ProxyBeanDefinition<T>) delegate).getTargetType();
@@ -2099,7 +2099,7 @@ private <T> void filterProxiedTypes(Collection<BeanDefinition<T>> candidates, bo
                     if (!delegates.contains(delegate)) {
                         delegates.add(delegate);
                     }
-                } else if(filterProxied && delegate instanceof ProxyBeanDefinition) {
+                } else if (filterProxied && delegate instanceof ProxyBeanDefinition) {
                     proxiedTypes.add(((ProxyBeanDefinition) delegate).getTargetDefinitionType());
                 }
             }

File: security/src/main/java/io/micronaut/security/endpoints/LogoutController.java
Patch:
@@ -86,7 +86,7 @@ public LogoutController(@Nullable LogoutHandler logoutHandler,
      */
     @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
     @Post
-    public HttpResponse index(HttpRequest<?> request, Authentication authentication) {
+    public HttpResponse index(HttpRequest request, Authentication authentication) {
         return handleLogout(request, authentication);
     }
 
@@ -98,7 +98,7 @@ public HttpResponse index(HttpRequest<?> request, Authentication authentication)
      * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
      */
     @Get
-    public HttpResponse indexGet(HttpRequest<?> request, Authentication authentication) {
+    public HttpResponse indexGet(HttpRequest request, Authentication authentication) {
         if (!getAllowed) {
            return HttpResponse.status(HttpStatus.METHOD_NOT_ALLOWED);
         }

File: test-suite/src/test/groovy/io/micronaut/docs/server/request/MessageController.java
Patch:
@@ -31,7 +31,7 @@
 public class MessageController {
 
     @Get("/hello") // <2>
-    HttpResponse<String> hello(HttpRequest<?> request) {
+    HttpResponse<String> hello(HttpRequest request) {
         String name = request.getParameters()
                              .getFirst("name")
                              .orElse("Nobody"); // <3>

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -46,7 +46,6 @@
  */
 public class GroovyClassElement extends AbstractGroovyElement implements ClassElement {
 
-    private final SourceUnit sourceUnit;
     private final ClassNode classNode;
 
     /**
@@ -55,7 +54,7 @@ public class GroovyClassElement extends AbstractGroovyElement implements ClassEl
      * @param annotationMetadata The annotation metadata
      */
     GroovyClassElement(SourceUnit sourceUnit, ClassNode classNode, AnnotationMetadata annotationMetadata) {
-        super(classNode, annotationMetadata);
+        super(sourceUnit, classNode, annotationMetadata);
         this.classNode = classNode;
         this.sourceUnit = sourceUnit;
     }
@@ -118,6 +117,7 @@ public List<PropertyElement> getBeanProperties() {
             if (propertyNode.isPublic() && !propertyNode.isStatic()) {
                 groovyProps.add(propertyNode.getName());
                 GroovyPropertyElement groovyPropertyElement = new GroovyPropertyElement(
+                        sourceUnit,
                         this,
                         propertyNode.getField(),
                         AstAnnotationUtils.getAnnotationMetadata(sourceUnit, propertyNode.getField()),
@@ -237,6 +237,7 @@ private void configureDeclaringType(ClassNode declaringTypeElement, GetterAndSet
                         annotationMetadata = groovyAnnotationMetadataBuilder.buildForMethod(value.getter);
                     }
                     GroovyPropertyElement propertyElement = new GroovyPropertyElement(
+                            sourceUnit,
                             value.declaringType == null ? this : value.declaringType,
                             value.getter,
                             annotationMetadata,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyFieldElement.java
Patch:
@@ -46,7 +46,7 @@ public class GroovyFieldElement extends AbstractGroovyElement implements FieldEl
     GroovyFieldElement(
             SourceUnit sourceUnit,
             Variable variable, AnnotatedNode annotatedNode, AnnotationMetadata annotationMetadata) {
-        super(annotatedNode, annotationMetadata);
+        super(sourceUnit, annotatedNode, annotationMetadata);
         this.variable = variable;
         this.sourceUnit = sourceUnit;
     }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -46,7 +46,7 @@ public class GroovyMethodElement extends AbstractGroovyElement implements Method
      * @param annotationMetadata The annotation metadata
      */
     GroovyMethodElement(SourceUnit sourceUnit, MethodNode methodNode, AnnotationMetadata annotationMetadata) {
-        super(methodNode, annotationMetadata);
+        super(sourceUnit, methodNode, annotationMetadata);
         this.methodNode = methodNode;
         this.sourceUnit = sourceUnit;
     }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -46,7 +46,7 @@ public class GroovyParameterElement extends AbstractGroovyElement implements Par
      * @param annotationMetadata The annotation metadata
      */
     GroovyParameterElement(SourceUnit sourceUnit, Parameter parameter, AnnotationMetadata annotationMetadata) {
-        super(parameter, annotationMetadata);
+        super(sourceUnit, parameter, annotationMetadata);
         this.parameter = parameter;
         this.sourceUnit = sourceUnit;
     }

File: validation/src/main/java/io/micronaut/validation/validator/DefaultValidator.java
Patch:
@@ -612,7 +612,7 @@ public void keyedValue(String nodeName, Object key, Object keyedValue) {
                         }
                     });
                 } else {
-                    final BeanIntrospection<Object> beanIntrospection = getBeanIntrospection(parameterValue);
+                    final BeanIntrospection<Object> beanIntrospection = getBeanIntrospection(parameterType);
                     if (beanIntrospection != null) {
                         try {
                             context.addParameterNode(argument.getName(), i);

File: validation/src/test/groovy/io/micronaut/validation/ValidatedController.java
Patch:
@@ -27,7 +27,6 @@
  * @since 1.0
  */
 @Controller("/validated")
-@Validated
 public class ValidatedController {
 
 

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -587,9 +587,9 @@ private Schema getSchemaDefinition(
         Map<String, Schema> schemas = resolveSchemas(openAPI);
         if (schemaValue != null) {
             String schemaName = schemaValue.get("name", String.class).orElse(computeDefaultSchemaName(definingElement, type));
-            inProgressSchemas.add(schemaName);
             schema = schemas.get(schemaName);
             if (schema == null) {
+                inProgressSchemas.add(schemaName);
                 JsonNode schemaJson = toJson(schemaValue.getValues(), context);
                 try {
                     schema = jsonMapper.treeToValue(schemaJson, Schema.class);

File: runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.discovery.CompositeDiscoveryClient;
 
@@ -27,6 +28,7 @@
  * @author graemerocher
  * @since 1.1
  */
+@Introspected
 public final class HeartbeatDiscoveryClientCondition implements Condition {
     @Override
     public boolean matches(ConditionContext context) {

File: validation/src/main/java/io/micronaut/validation/validator/constraints/ConstraintValidatorContext.java
Patch:
@@ -17,7 +17,6 @@
 
 import javax.annotation.Nonnull;
 import javax.validation.ClockProvider;
-import java.time.Clock;
 
 /**
  * Subset of the {@link javax.validation.ConstraintValidatorContext} interface without the unnecessary parts.
@@ -28,13 +27,13 @@
 public interface ConstraintValidatorContext {
 
     /**
-     * Returns the provider for obtaining the current time in the form of a {@link Clock},
+     * Returns the provider for obtaining the current time in the form of a {@link java.time.Clock},
      * e.g. when validating the {@code Future} and {@code Past} constraints.
      *
      * @return the provider for obtaining the current time, never {@code null}. If no
      * specific provider has been configured during bootstrap, a default implementation using
      * the current system time and the current default time zone as returned by
-     * {@link Clock#systemDefaultZone()} will be returned.
+     * {@link java.time.Clock#systemDefaultZone()} will be returned.
      *
      * @since 2.0
      */

File: validation/src/main/java/io/micronaut/validation/validator/extractors/UnwrapByDefaultValueExtractor.java
Patch:
@@ -22,6 +22,8 @@
  *
  * @author graemerocher
  * @since 1.2
+ * @param <T> the extracted type
  */
+@SuppressWarnings("WeakerAccess")
 public interface UnwrapByDefaultValueExtractor<T> extends ValueExtractor<T> {
 }

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -261,7 +261,7 @@ public ConstraintValidator<NotBlank, CharSequence> notBlankValidator() {
     @Singleton
     @Bean
     @Named("notNullValidator")
-    public ConstraintValidator<NotBlank, Object> notNullValidator() {
+    public ConstraintValidator<NotNull, Object> notNullValidator() {
         return (value, annotationMetadata, context) -> value != null;
     }
 

File: function/src/main/java/io/micronaut/function/executor/FunctionInitializer.java
Patch:
@@ -43,9 +43,9 @@ public class FunctionInitializer extends AbstractExecutor implements Closeable,
      */
     public FunctionInitializer() {
         ApplicationContext applicationContext = buildApplicationContext(null);
-        applicationContext.registerSingleton(this);
         startThis(applicationContext);
         injectThis(applicationContext);
+        applicationContext.registerSingleton(this);
         this.closeContext = true;
     }
 

File: runtime/src/main/java/io/micronaut/jackson/parser/JacksonProcessor.java
Patch:
@@ -184,7 +184,7 @@ private JsonNode asJsonNode(JsonToken event) throws IOException {
                 if (nodeStack.isEmpty()) {
                     return current;
                 } else {
-                    if (streamArray && event == JsonToken.END_OBJECT && nodeStack.size() == 1) {
+                    if (streamArray && nodeStack.size() == 1) {
                         JsonNode jsonNode = nodeStack.peekFirst();
                         if (jsonNode instanceof ArrayNode) {
                             return current;
@@ -313,7 +313,7 @@ private JsonNode asJsonNode(JsonToken event) throws IOException {
         }
 
         //its an array and the stack size is 1 which means the value is scalar
-        if (rootIsArray && nodeStack.size() == 1) {
+        if (rootIsArray && streamArray && nodeStack.size() == 1) {
             ArrayNode arrayNode = (ArrayNode) nodeStack.peekFirst();
             if (arrayNode.size() > 0) {
                 return arrayNode.get(arrayNode.size() - 1);

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1718,7 +1718,7 @@ private <O, E> void addFullHttpResponseHandler(
             Emitter<io.micronaut.http.HttpResponse<O>> emitter,
             Argument<O> bodyType, Argument<E> errorType) {
         ChannelPipeline pipeline = channel.pipeline();
-        final boolean replace = pipeline.get(HANDLER_MICRONAUT_HTTP_RESPONSE_STREAM) != null;
+        final boolean replace = pipeline.get(HANDLER_MICRONAUT_FULL_HTTP_RESPONSE) != null;
         final SimpleChannelInboundHandler<FullHttpResponse> newHandler = new SimpleChannelInboundHandler<FullHttpResponse>(false) {
 
             AtomicBoolean complete = new AtomicBoolean(false);

File: validation/src/main/java/io/micronaut/validation/validator/constraints/ConstraintValidatorContext.java
Patch:
@@ -17,7 +17,6 @@
 
 import javax.annotation.Nonnull;
 import javax.validation.ClockProvider;
-import java.time.Clock;
 
 /**
  * Subset of the {@link javax.validation.ConstraintValidatorContext} interface without the unnecessary parts.
@@ -28,13 +27,13 @@
 public interface ConstraintValidatorContext {
 
     /**
-     * Returns the provider for obtaining the current time in the form of a {@link Clock},
+     * Returns the provider for obtaining the current time in the form of a {@link java.time.Clock},
      * e.g. when validating the {@code Future} and {@code Past} constraints.
      *
      * @return the provider for obtaining the current time, never {@code null}. If no
      * specific provider has been configured during bootstrap, a default implementation using
      * the current system time and the current default time zone as returned by
-     * {@link Clock#systemDefaultZone()} will be returned.
+     * {@link java.time.Clock#systemDefaultZone()} will be returned.
      *
      * @since 2.0
      */

File: validation/src/main/java/io/micronaut/validation/validator/extractors/UnwrapByDefaultValueExtractor.java
Patch:
@@ -22,6 +22,8 @@
  *
  * @author graemerocher
  * @since 1.2
+ * @param <T> the extracted type
  */
+@SuppressWarnings("WeakerAccess")
 public interface UnwrapByDefaultValueExtractor<T> extends ValueExtractor<T> {
 }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -427,6 +427,8 @@ protected Map<CharSequence, Object> populateAnnotationData(
                             }
 
                             mappedMirror.ifPresent(annMirror -> {
+                                final Map<? extends T, ?> defaultValues = readAnnotationDefaultValues(mappedAnnotationName, annMirror);
+                                processAnnotationDefaults(metadata, mappedAnnotationName, defaultValues);
                                 final ArrayList<String> parents = new ArrayList<>();
                                 processAnnotationStereotype(
                                         parents,

File: views/src/main/java/io/micronaut/views/ViewsFilter.java
Patch:
@@ -129,7 +129,7 @@ public final Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request,
                             String view = modelAndView.getView().orElse(optionalView.get());
                             if (viewsRenderer.exists(view)) {
 
-                                Writable writable = viewsRenderer.render(view, model);
+                                Writable writable = viewsRenderer.render(view, model, request);
                                 response.contentType(type);
                                 ((MutableHttpResponse<Object>) response).body(writable);
                                 return Flowable.just(response);

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -70,7 +70,7 @@ public R visitDeclared(DeclaredType type, P p) {
                             accept(type, enclosedElement, p);
                         }
                     } else {
-                        String qualifiedName = types.erasure(enclosedElement.asType()).toString();
+                        String qualifiedName = enclosedElement.getSimpleName().toString();
                         // if the method has already been processed then it is overridden so ignore
                         if (!processed.contains(qualifiedName)) {
                             processed.add(qualifiedName);

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -85,7 +85,7 @@ public Types getTypeUtils() {
      * @return The {@link TypeElement}
      */
     @Nullable final TypeElement classElementFor(Element element) {
-        while (element != null && !(JavaModelUtils.isClass(element) || JavaModelUtils.isInterface(element))) {
+        while (element != null && !(JavaModelUtils.isClassOrInterface(element) || JavaModelUtils.isEnum(element))) {
             element = element.getEnclosingElement();
         }
         if (element instanceof  TypeElement) {

File: management/src/main/java/io/micronaut/management/health/indicator/discovery/DiscoveryClientHealthIndicatorConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 @Requires(property = PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 public class DiscoveryClientHealthIndicatorConfiguration implements Toggleable {
 
-    static final String PREFIX = "endpoints.health.discovery-client.indicator";
+    static final String PREFIX = "endpoints.health.discovery-client";
 
     private boolean enabled = true;
 

File: management/src/main/java/io/micronaut/management/health/indicator/discovery/DiscoveryClientHealthIndicatorConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 @Requires(property = PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 public class DiscoveryClientHealthIndicatorConfiguration implements Toggleable {
 
-    static final String PREFIX = "discovery-client.indicator";
+    static final String PREFIX = "endpoints.health.discovery-client.indicator";
 
     private boolean enabled = true;
 

File: multitenancy/src/main/java/io/micronaut/multitenancy/writer/CookieTenantWriterConfigurationProperties.java
Patch:
@@ -165,23 +165,23 @@ public void setCookieDomain(@Nullable String cookieDomain) {
     }
 
     /**
-     * Sets the path of the cookie. Default value ({@value DEFAULT_COOKIEPATH}.
+     * Sets the path of the cookie. Default value ({@value #DEFAULT_COOKIEPATH}.
      * @param cookiePath The path of the cookie.
      */
     public void setCookiePath(@Nullable String cookiePath) {
         this.cookiePath = cookiePath;
     }
 
     /**
-     * Whether the Cookie can only be accessed via HTTP. Default value ({@value DEFAULT_HTTPONLY}.
+     * Whether the Cookie can only be accessed via HTTP. Default value ({@value #DEFAULT_HTTPONLY}.
      * @param cookieHttpOnly Whether the Cookie can only be accessed via HTTP.
      */
     public void setCookieHttpOnly(boolean cookieHttpOnly) {
         this.cookieHttpOnly = cookieHttpOnly;
     }
 
     /**
-     * Sets whether the cookie is secured. Default value ({@value DEFAULT_SECURE}.
+     * Sets whether the cookie is secured. Default value ({@value #DEFAULT_SECURE}.
      * @param cookieSecure True if the cookie is secure
      */
     public void setCookieSecure(boolean cookieSecure) {

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/cookie/JwtCookieConfigurationProperties.java
Patch:
@@ -235,23 +235,23 @@ public void setCookieDomain(@Nullable String cookieDomain) {
     }
 
     /**
-     * Sets the path of the cookie. Default value ({@value DEFAULT_COOKIEPATH}.
+     * Sets the path of the cookie. Default value ({@value #DEFAULT_COOKIEPATH}.
      * @param cookiePath The path of the cookie.
      */
     public void setCookiePath(@Nullable String cookiePath) {
         this.cookiePath = cookiePath;
     }
 
     /**
-     * Whether the Cookie can only be accessed via HTTP. Default value ({@value DEFAULT_HTTPONLY}.
+     * Whether the Cookie can only be accessed via HTTP. Default value ({@value #DEFAULT_HTTPONLY}.
      * @param cookieHttpOnly Whether the Cookie can only be accessed via HTTP
      */
     public void setCookieHttpOnly(Boolean cookieHttpOnly) {
         this.cookieHttpOnly = cookieHttpOnly;
     }
 
     /**
-     * Sets whether the cookie is secured. Default value ({@value DEFAULT_SECURE}.
+     * Sets whether the cookie is secured. Default value ({@value #DEFAULT_SECURE}.
      * @param cookieSecure True if the cookie is secure
      */
     public void setCookieSecure(Boolean cookieSecure) {

File: security-session/src/main/java/io/micronaut/security/session/SecuritySessionConfigurationProperties.java
Patch:
@@ -82,7 +82,7 @@ public boolean isLegacyRejectionHandler() {
     }
 
     /**
-     * Decides whether the deprecated {@link SessionSecurityFilterOrderProvider} is loaded, instead of the new {@link io.micronaut.security.handlers.RedirectRejectionHandler}. Defaults to (#DEFAULT_LEGACYREJECTIONHANDLER).
+     * Decides whether the deprecated {@link SessionSecurityFilterOrderProvider} is loaded, instead of the new {@link io.micronaut.security.handlers.RedirectRejectionHandler}. Defaults to ({@value #DEFAULT_LEGACYREJECTIONHANDLER}).
      * @param legacyRejectionHandler whether the deprecated {@link SessionSecurityFilterOrderProvider} is loaded
      */
     public void setLegacyRejectionHandler(boolean legacyRejectionHandler) {

File: security/src/main/java/io/micronaut/security/token/config/TokenConfigurationProperties.java
Patch:
@@ -71,7 +71,7 @@ public void setEnabled(boolean enabled) {
     }
 
     /**
-     * Name of the roles property. Default value {@value #DEFAULT_ROLES_NAME}.
+     * Name of the roles property. Default value {@value io.micronaut.security.token.config.TokenConfiguration#DEFAULT_ROLES_NAME}.
      * @param rolesName The roles name
      */
     public void setRolesName(String rolesName) {

File: session/src/main/java/io/micronaut/session/http/HttpSessionConfiguration.java
Patch:
@@ -131,7 +131,7 @@ public Optional<String> getCookiePath() {
     }
 
     /**
-     * @param cookiePath Set the cookie path to use. Default value ({@value DEFAULT_COOKIEPATH}).
+     * @param cookiePath Set the cookie path to use. Default value ({@value #DEFAULT_COOKIEPATH}).
      */
     public void setCookiePath(String cookiePath) {
         this.cookiePath = cookiePath;

File: validation/src/main/java/io/micronaut/validation/validator/constraints/DefaultConstraintValidators.java
Patch:
@@ -261,7 +261,7 @@ public ConstraintValidator<NotBlank, CharSequence> notBlankValidator() {
     @Singleton
     @Bean
     @Named("notNullValidator")
-    public ConstraintValidator<NotBlank, Object> notNullValidator() {
+    public ConstraintValidator<NotNull, Object> notNullValidator() {
         return (value, annotationMetadata, context) -> value != null;
     }
 

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloControllerSpec.java
Patch:
@@ -32,14 +32,14 @@
 
 // end::imports[]
 
-// tag::classinit[]
+// tag::class-init[]
 public class HelloControllerSpec {
     private static EmbeddedServer server;
     private static HttpClient client;
 
     @BeforeClass
     public static void setupServer() {
-        // end::classinit[]
+        // end::class-init[]
         server = ApplicationContext.run(EmbeddedServer.class,
                 new HashMap<String, Object>() {{
                     put("spec.name", HelloControllerSpec.class.getSimpleName());

File: configurations/hibernate-validator/src/main/java/io/micronaut/configuration/hibernate/validator/ValidatorFactoryProvider.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.configuration.hibernate.validator;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
@@ -68,7 +67,6 @@ public class ValidatorFactoryProvider {
      * @return validator factory
      */
     @Singleton
-    @Bean
     @Requires(classes = HibernateValidator.class)
     ValidatorFactory validatorFactory(Optional<Environment> environment) {
         Configuration validatorConfiguration = Validation.byDefaultProvider()

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.amazonaws.services.lambda.AWSLambdaAsync;
 import com.amazonaws.services.lambda.AWSLambdaAsyncClientBuilder;
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.runtime.context.scope.Refreshable;
@@ -44,7 +43,6 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      * The client returned from a builder.
      * @return client object
      */
-    @Bean
     @Refreshable
     @Requires(beans = AWSLambdaConfiguration.class)
     AWSLambdaAsync awsLambdaAsyncClient() {

File: http-client/src/test/groovy/io/micronaut/http/client/convert/TypeConverters.java
Patch:
@@ -24,7 +24,6 @@
 @Factory
 public class TypeConverters {
 
-    @Bean
     @Singleton
     public TypeConverter<String, Bar> stringToBarConverter() {
         return TypeConverter.of(
@@ -34,7 +33,6 @@ public TypeConverter<String, Bar> stringToBarConverter() {
         );
     }
 
-    @Bean
     @Singleton
     public TypeConverter<String, Foo> stringToFooConverter() {
         return TypeConverter.of(

File: http-netty/src/main/java/io/micronaut/http/netty/channel/NettyThreadFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.netty.channel;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.core.annotation.TypeHint;
 import io.netty.channel.nio.NioEventLoopGroup;
@@ -61,7 +60,6 @@ public class NettyThreadFactory {
      *
      * @return The thread factory
      */
-    @Bean
     @Singleton
     @Named(NAME)
     ThreadFactory nettyThreadFactory() {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -86,7 +86,6 @@
 import io.netty.handler.codec.DecoderResult;
 import io.netty.handler.codec.TooLongFrameException;
 import io.netty.handler.codec.http.*;
-import io.netty.handler.codec.http.HttpHeaderValues;
 import io.netty.handler.codec.http.multipart.Attribute;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;

File: http/src/main/java/io/micronaut/http/bind/DefaultRequestBinderRegistry.java
Patch:
@@ -29,7 +29,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Body;
-import io.micronaut.http.bind.binders.RequestAttributeAnnotationBinder;
 import io.micronaut.http.bind.binders.*;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.Cookies;

File: http/src/main/java/io/micronaut/http/resource/ResourceLoaderFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http.resource;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.env.Environment;
@@ -74,7 +73,6 @@ public ResourceLoaderFactory(Environment environment) {
      * @return The class path resource loader
      */
     @Singleton
-    @Bean
     @BootstrapContextCompatible
     protected @Nonnull ClassPathResourceLoader getClassPathResourceLoader() {
         return new DefaultClassPathResourceLoader(classLoader);

File: inject-java/src/test/groovy/io/micronaut/aop/factory/InterfaceFactory.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.inject.Named;
 
@@ -29,14 +30,14 @@
 @Factory
 public class InterfaceFactory {
 
-    @Bean
+    @Prototype
     @Mutating("name")
     @Primary
     InterfaceClass interfaceClass() {
         return new InterfaceImpl();
     }
 
-    @Bean
+    @Prototype
     @Mutating("name")
     @Named("another")
     InterfaceClass anotherImpl() {

File: inject-java/src/test/groovy/io/micronaut/aop/factory/SessionFactoryFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.aop.factory;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryDelegatingImpl;
 import io.micronaut.aop.simple.Mutating;
@@ -29,7 +29,7 @@
 public class SessionFactoryFactory {
 
     @Mutating("name")
-    @Bean
+    @Prototype
     SessionFactory sessionFactory() {
         return new SessionFactoryDelegatingImpl(null);
     }

File: inject-java/src/test/groovy/io/micronaut/inject/factory/beanwithfactory/BFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.inject.factory.beanwithfactory;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
@@ -60,7 +60,7 @@ void init() {
         name = name.toUpperCase();
     }
 
-    @Bean
+    @Prototype
     public B get() {
         getCalled = true;
         B b = new B();

File: inject-java/src/test/groovy/io/micronaut/inject/factory/factorydefinition/BFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.inject.factory.factorydefinition;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
@@ -69,7 +69,7 @@ public B get() {
         return b;
     }
 
-    @Bean
+    @Prototype
     public C buildC(B b) {
         C c = new C();
         c.setB(b);

File: inject-java/src/test/groovy/io/micronaut/inject/factory/inject/MyFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micronaut.inject.factory.inject;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.inject.Inject;
 
@@ -27,7 +27,7 @@ public class MyFactory {
     MyService myService;
 
 
-    @Bean
+    @Prototype
     MyService myService() {
         return new MyService();
     }

File: inject-java/src/test/groovy/io/micronaut/inject/factory/named/TemplateFactory.java
Patch:
@@ -15,21 +15,21 @@
  */
 package io.micronaut.inject.factory.named;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.inject.Named;
 
 @Factory
 public class TemplateFactory {
 
-    @Bean
+    @Prototype
     @Named("csw-test-template")
     public Template cswTemplate() {
         return new CSWTestTemplate();
     }
 
-    @Bean
+    @Prototype
     @Named("ias-test-template")
     public Template iasTemplate() {
         return new IASTestTemplate();

File: inject-java/src/test/groovy/io/micronaut/inject/factory/named/TestCacheFactory.java
Patch:
@@ -38,14 +38,12 @@ public class TestCacheFactory {
             .expireAfterWrite(30, TimeUnit.DAYS)
             .build();
 
-    @Bean
     @Singleton
     @Named("orgRepositoryCache")
     public Cache<String, Flowable<String>> orgRepositoryCache() {
         return orgRepoCache;
     }
 
-    @Bean
     @Singleton
     @Named("repositoryCache")
     public Cache<String, Maybe<String>> repositoryCache() {

File: inject-java/src/test/groovy/io/micronaut/inject/factory/parameterizedfactory/BFactory.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Prototype;
 
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
@@ -67,7 +68,7 @@ B get() {
         return b;
     }
 
-    @Bean
+    @Prototype
     C buildC(B b, @Parameter int count) {
         return new C(b, count);
     }

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.inject.annotation;
 
 import io.micronaut.core.annotation.*;
-import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.convert.value.ConvertibleValues;

File: runtime/src/main/java/io/micronaut/discovery/cloud/gcp/GoogleComputeInstanceMetadataResolver.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static io.micronaut.discovery.cloud.ComputeInstanceMetadataResolverUtils.*;
-import static io.micronaut.discovery.cloud.ComputeInstanceMetadataResolverUtils.readMetadataUrl;
 
 /**
  * Resolves {@link ComputeInstanceMetadata} for Google Cloud Platform.

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -74,7 +74,6 @@ public class ObjectMapperFactory {
      * @param jsonFactory          The JSON factory
      * @return The {@link ObjectMapper}
      */
-    @Bean
     @Singleton
     @Primary
     @BootstrapContextCompatible

File: runtime/src/main/java/io/micronaut/runtime/http/codec/MediaTypeCodecRegistryFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.runtime.http.codec;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
@@ -41,7 +40,6 @@ public class MediaTypeCodecRegistryFactory {
      */
     @Singleton
     @Primary
-    @Bean
     @BootstrapContextCompatible
     MediaTypeCodecRegistry mediaTypeCodecRegistry(List<MediaTypeCodec> codecs) {
         return MediaTypeCodecRegistry.of(codecs);

File: runtime/src/main/java/io/micronaut/scheduling/executor/DefaultThreadFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.scheduling.executor;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
 
@@ -35,7 +34,6 @@ public class DefaultThreadFactory {
     /**
      * @return The default thread factory
      */
-    @Bean
     @Singleton
     @Primary
     ThreadFactory threadFactory() {

File: runtime/src/main/java/io/micronaut/scheduling/executor/IOExecutorServiceConfig.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.scheduling.executor;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.TaskExecutors;
@@ -37,7 +36,6 @@ public class IOExecutorServiceConfig {
      * @return The default thread pool configurations
      */
     @Singleton
-    @Bean
     @Named(TaskExecutors.IO)
     ExecutorConfiguration configuration() {
         return UserExecutorConfiguration.of(ExecutorType.CACHED);

File: runtime/src/main/java/io/micronaut/scheduling/executor/ScheduledExecutorServiceConfig.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.scheduling.executor;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.scheduling.TaskExecutors;
@@ -38,7 +37,6 @@ public class ScheduledExecutorServiceConfig {
      * @return The executor configurations
      */
     @Singleton
-    @Bean
     @Named(TaskExecutors.SCHEDULED)
     ExecutorConfiguration configuration() {
         return UserExecutorConfiguration.of(ExecutorType.SCHEDULED);

File: test-suite/src/test/java/io/micronaut/docs/factories/EngineFactory.java
Patch:
@@ -28,7 +28,6 @@
 @Factory
 class EngineFactory {
 
-    @Bean
     @Singleton
     Engine v8Engine(CrankShaft crankShaft) {
         return new V8Engine(crankShaft);

File: test-suite/src/test/java/io/micronaut/docs/whatsNew/CacheFactory.java
Patch:
@@ -15,7 +15,6 @@
 class CacheFactory {
 
     @Singleton
-    @Bean
     CacheManager cacheManager() {
         CacheManager cacheManager = Caching.getCachingProvider()
                 .getCacheManager();

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSenderFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.tracing.brave.sender;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.client.LoadBalancerResolver;
@@ -49,7 +48,6 @@ protected HttpClientSenderFactory(BraveTracerConfiguration.HttpClientSenderConfi
      * @param loadBalancerResolver A resolver capable of resolving references to services into a concrete loadbalance
      * @return The {@link Sender}
      */
-    @Bean
     @Singleton
     @Requires(missingBeans = Sender.class)
     Sender zipkinSender(Provider<LoadBalancerResolver> loadBalancerResolver) {

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/client/Route53AutoNamingClient.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.discovery.aws.route53.Route53ClientDiscoveryConfiguration;
 import io.micronaut.discovery.aws.route53.Route53DiscoveryConfiguration;
 import io.micronaut.discovery.aws.route53.registration.EC2ServiceInstance;
-import io.micronaut.http.client.annotation.Client;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 import javax.inject.Singleton;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1592,6 +1592,9 @@ protected void processParallelBeans() {
         }).start();
     }
 
+    /**
+     * Make sure the context is running to avoid race conditions.
+     */
     protected void assertRunning() {
         if (!isRunning()) {
             throw new BeanContextNotAvailableException();

File: inject/src/main/java/io/micronaut/context/exceptions/BeanContextNotAvailableException.java
Patch:
@@ -25,7 +25,7 @@
 public class BeanContextNotAvailableException extends BeanContextException {
 
     /**
-     * thrown if service is in the processing of shutting down
+     * Thrown if service is in the processing of shutting down or not running.
      *
      * @param cause   The throwable
      */
@@ -34,7 +34,7 @@ public BeanContextNotAvailableException(Throwable cause) {
     }
 
     /**
-     * thrown if service is in the processing of shutting down
+     * Thrown if service is in the processing of shutting down or not running.
      */
     public BeanContextNotAvailableException() {
         super("Bean context is not running or has been shut down.");

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1573,6 +1573,9 @@ protected void processParallelBeans() {
         }).start();
     }
 
+    /**
+     * Make sure the context is running to avoid race conditions.
+     */
     protected void assertRunning() {
         if (!isRunning()) {
             throw new BeanContextNotAvailableException();

File: inject/src/main/java/io/micronaut/context/exceptions/BeanContextNotAvailableException.java
Patch:
@@ -25,7 +25,7 @@
 public class BeanContextNotAvailableException extends BeanContextException {
 
     /**
-     * thrown if service is in the processing of shutting down
+     * Thrown if service is in the processing of shutting down or not running.
      *
      * @param cause   The throwable
      */
@@ -34,7 +34,7 @@ public BeanContextNotAvailableException(Throwable cause) {
     }
 
     /**
-     * thrown if service is in the processing of shutting down
+     * Thrown if service is in the processing of shutting down or not running.
      */
     public BeanContextNotAvailableException() {
         super("Bean context is not running or has been shut down.");

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -522,7 +522,8 @@ private void processAnnotationAlias(
     private AnnotationMetadata buildInternal(T parent, T element, DefaultAnnotationMetadata annotationMetadata, boolean inheritTypeAnnotations) {
         List<T> hierarchy = buildHierarchy(element, inheritTypeAnnotations);
         if (parent != null) {
-            hierarchy.add(0, parent);
+            final List<T> parentHierarchy = buildHierarchy(parent, inheritTypeAnnotations);
+            hierarchy.addAll(0, parentHierarchy);
         }
         Collections.reverse(hierarchy);
         for (T currentElement : hierarchy) {

File: inject/src/main/java/io/micronaut/context/BeanContext.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.context;
 
 import io.micronaut.context.event.ApplicationEventPublisher;
+import io.micronaut.context.exceptions.ApplicationStoppingException;
 import io.micronaut.core.annotation.AnnotationMetadataResolver;
 import io.micronaut.inject.BeanIdentifier;
 import org.jetbrains.annotations.NotNull;
@@ -234,4 +235,6 @@ default BeanContext registerSingleton(@NotNull Object singleton, boolean inject)
     static @Nonnull BeanContext build(ClassLoader classLoader) {
         return new DefaultBeanContext(classLoader);
     }
+
+    default void assertRunning() throws ApplicationStoppingException { if (!isRunning()) { throw new ApplicationStoppingException(); }}
 }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -169,7 +169,7 @@ public DefaultBeanContext(@Nonnull BeanContextConfiguration contextConfiguration
 
     @Override
     public boolean isRunning() {
-        return running.get() && !initializing.get();
+        return running.get() && !initializing.get() && !terminating.get();
     }
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/stop/ServerStopEndpoint.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- * <p>Exposes an {@link Endpoint} to stor the server.</p>
+ * <p>Exposes an {@link Endpoint} to stop the server.</p>
  *
  * @author James Kleeh
  * @since 1.0

File: management/src/main/java/io/micronaut/management/endpoint/stop/ServerStopEndpoint.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- * <p>Exposes an {@link Endpoint} to stor the server.</p>
+ * <p>Exposes an {@link Endpoint} to stop the server.</p>
  *
  * @author James Kleeh
  * @since 1.0

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -41,7 +41,7 @@ public class NameUtils {
     private static final String PREFIX_GET = "get";
     private static final String PREFIX_SET = "set";
     private static final Pattern ENVIRONMENT_VAR_SEQUENCE = Pattern.compile("^[\\p{Lu}_{0-9}]+");
-    private static final Pattern KEBAB_CASE_SEQUENCE = Pattern.compile("^(([a-z0-9])+(\\-|\\.)?)*([a-z0-9])+$");
+    private static final Pattern KEBAB_CASE_SEQUENCE = Pattern.compile("^(([a-z0-9])+(\\-|\\.|:)?)*([a-z0-9])+$");
 
 
     /**

File: runtime/src/main/java/io/micronaut/cache/annotation/Cacheable.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.cache.interceptor.DefaultCacheKeyGenerator;
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Type;
+import io.micronaut.core.annotation.InstantiatedMember;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -74,6 +75,7 @@
      * @return The cache key generator class
      */
     @AliasFor(annotation = CacheConfig.class, member = "keyGenerator")
+    @InstantiatedMember
     Class<? extends CacheKeyGenerator> keyGenerator() default DefaultCacheKeyGenerator.class;
 
     /**

File: runtime/src/main/java/io/micronaut/cache/interceptor/DefaultCacheKeyGenerator.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.cache.interceptor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.ArrayUtils;
 
 /**
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Introspected
 public class DefaultCacheKeyGenerator implements CacheKeyGenerator {
 
     @Override

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -214,7 +214,7 @@ public final void finish(VisitorContext visitorContext) {
                 json = new ArrayList<>();
             }
 
-            if (CollectionUtils.isEmpty(beans) && CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays)) {
+            if (CollectionUtils.isEmpty(beans) && CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {
                 return;
             }
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -31,7 +31,6 @@
 import io.micronaut.inject.visitor.VisitorContext;
 import io.micronaut.inject.writer.ClassGenerationException;
 
-import javax.validation.Constraint;
 import java.io.IOException;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -51,6 +50,8 @@ public class IntrospectedTypeElementVisitor implements TypeElementVisitor<Intros
      */
     public static final int POSITION = -100;
 
+    private static final String JAVAX_VALIDATION_CONSTRAINT = "javax.validation.Constraint";
+
     private Map<String, BeanIntrospectionWriter> writers = new LinkedHashMap<>(10);
 
     @Override
@@ -76,7 +77,7 @@ public void visitClass(ClassElement element, VisitorContext context) {
 
             indexedAnnotations.add(
                     AnnotationValue.builder(Introspected.IndexedAnnotation.class)
-                        .member("annotation", Constraint.class)
+                        .member("annotation", new AnnotationClassValue<>(JAVAX_VALIDATION_CONSTRAINT))
                         .build()
             );
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -261,12 +261,13 @@ protected ChannelPool newPool(RequestKey key) {
 
 
                         AbstractChannelPoolHandler channelPoolHandler = newPoolHandler(key);
+                        final Long acquireTimeoutMillis = connectionPoolConfiguration.getAcquireTimeout().map(Duration::toMillis).orElse(-1L);
                         return new FixedChannelPool(
                                 newBootstrap,
                                 channelPoolHandler,
                                 ChannelHealthChecker.ACTIVE,
-                                null,
-                                connectionPoolConfiguration.getAcquireTimeout().map(Duration::toMillis).orElse(-1L),
+                                acquireTimeoutMillis > -1 ? FixedChannelPool.AcquireTimeoutAction.FAIL : null,
+                                acquireTimeoutMillis,
                                 maxConnections,
                                 connectionPoolConfiguration.getMaxPendingAcquires()
 

File: runtime/src/main/java/io/micronaut/cache/Cache.java
Patch:
@@ -18,8 +18,6 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-import java.util.Optional;
-
 /**
  * <p>Base cache interface implemented by both {@link SyncCache} and {@link AsyncCache}.</p>
  *

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.http;
 
-import io.micronaut.core.annotation.ReflectiveAccess;
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.naming.NameUtils;

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -155,7 +155,7 @@ private boolean isDirectory(String path) {
                 try {
                     URI uri = url.toURI();
                     Path pathObject;
-                    synchronized(DefaultClassPathResourceLoader.class) {
+                    synchronized (DefaultClassPathResourceLoader.class) {
 
                         if (uri.getScheme().equals("jar")) {
                             FileSystem fileSystem = null;

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -159,7 +159,7 @@ private boolean isDirectory(String path) {
                 try {
                     URI uri = url.toURI();
                     Path pathObject;
-                    synchronized (this) {
+                    synchronized(DefaultClassPathResourceLoader.class) {
 
                         if (uri.getScheme().equals("jar")) {
                             FileSystem fileSystem = null;

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -167,6 +167,9 @@ private boolean isDirectory(String path) {
                                 try {
                                     fileSystem = FileSystems.getFileSystem(uri);
                                 } catch (FileSystemNotFoundException e) {
+                                    //no-op
+                                }
+                                if (fileSystem == null || !fileSystem.isOpen()) {
                                     fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap(), classLoader);
                                 }
 

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulConfiguration.java
Patch:
@@ -370,6 +370,7 @@ public String toString() {
          * Configuration for the HTTP check. See https://www.consul.io/api/agent/check.html.
          */
         @ConfigurationProperties("check")
+        @BootstrapContextCompatible
         public static class CheckConfiguration implements Toggleable {
 
             /**

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1242,6 +1242,7 @@ private void visitFieldInjectionPointInternal(
             String fieldName,
             Method methodToInvoke,
             boolean isValueOptional) {
+        DefaultAnnotationMetadata.contributeDefaults(this.annotationMetadata, annotationMetadata);
         // ready this
         GeneratorAdapter constructorVisitor = this.constructorVisitor;
 

File: core/src/main/java/io/micronaut/core/annotation/Indexes.java
Patch:
@@ -28,5 +28,8 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
 public @interface Indexes {
+    /**
+     * @return A group of indexes
+     */
     Indexed[] value() default {};
 }

File: core/src/main/java/io/micronaut/core/beans/BeanIntrospection.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.core.beans;
 
 import io.micronaut.core.annotation.AnnotationMetadataDelegate;
-import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.beans.exceptions.IntrospectionException;
 import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.core.type.Argument;

File: core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java
Patch:
@@ -16,7 +16,6 @@
 package io.micronaut.core.io.service;
 
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.reflect.InstantiationUtils;
 
 import java.util.Optional;
 import java.util.ServiceConfigurationError;

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -21,7 +21,6 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.lang.reflect.Constructor;
-import java.net.URL;
 import java.util.*;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -62,7 +62,6 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.group.ChannelGroup;
 import io.netty.channel.group.DefaultChannelGroup;
-import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.http.HttpServerKeepAliveHandler;
 import io.netty.handler.codec.http.multipart.DiskFileUpload;
@@ -90,7 +89,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.OptionalInt;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicBoolean;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.Collections;
 import java.util.Map;
 import java.util.Optional;
-import java.util.OptionalInt;
 
 /**
  * Allows configuring Netty within {@link io.micronaut.http.server.netty.NettyHttpServer}.

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -47,7 +47,6 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 

File: runtime/src/main/java/io/micronaut/scheduling/cron/CronExpression.java
Patch:
@@ -12,7 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
+ *MapClaims.java
  * Note: rewritten to standard Java 8 DateTime by zemiak (c) 2016
  * Forked from: https://github.com/frode-carlsen/cron
  */

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/KeysController.java
Patch:
@@ -42,13 +42,15 @@
 @Secured(SecurityRule.IS_ANONYMOUS)
 public class KeysController {
 
+    private static final JSONObject EMPTY_KEYS = new JSONObject().appendField("keys", new ArrayList<>());
+
     private final Collection<JwkProvider> jwkProviders;
     private final ObjectMapper objectMapper;
-    private static final JSONObject EMPTY_KEYS = new JSONObject().appendField("keys", new ArrayList<>());
 
     /**
      * Instantiates a {@link io.micronaut.security.token.jwt.endpoints.KeysController}.
      * @param jwkProviders a collection of JSON Web Key providers.
+     * @param objectMapper Jackson ObjectMapper used to do serialization.
      */
     public KeysController(Collection<JwkProvider> jwkProviders, ObjectMapper objectMapper) {
         this.jwkProviders = jwkProviders;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/render/BearerAccessRefreshToken.java
Patch:
@@ -41,6 +41,7 @@ public BearerAccessRefreshToken() { }
      * @param expiresIn Access Token expiration
      * @param accessToken JWT token
      * @param refreshToken  JWT token
+     * @param tokenType Type of token
      */
     public BearerAccessRefreshToken(String username,
                                     Collection<String> roles,

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/jwks/JwksSignature.java
Patch:
@@ -67,6 +67,7 @@ public class JwksSignature implements SignatureConfiguration {
     /**
      *
      * @param jwksSignatureConfiguration JSON Web Key Set configuration.
+     * @param jwkValidator JWK Validator to be used.
      */
     public JwksSignature(JwksSignatureConfiguration jwksSignatureConfiguration,
                          JwkValidator jwkValidator) {

File: views/src/main/java/io/micronaut/views/csp/CspFilter.java
Patch:
@@ -58,7 +58,7 @@
  * @author Arul Dhesiaseelan
  * @since 1.1.0
  */
-@Filter("${" + FILTER_PATH + ":" + DEFAULT_FILTER_PATH +"}")
+@Filter("${" + FILTER_PATH + ":" + DEFAULT_FILTER_PATH + "}")
 public class CspFilter implements HttpServerFilter {
 
     public static final String CSP_HEADER = "Content-Security-Policy";

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -71,7 +71,7 @@ public class PropertySourcePropertyResolver implements PropertyResolver {
      */
     public PropertySourcePropertyResolver(ConversionService<?> conversionService) {
         this.conversionService = conversionService;
-        this.propertyPlaceholderResolver = new DefaultPropertyPlaceholderResolver(this);
+        this.propertyPlaceholderResolver = new DefaultPropertyPlaceholderResolver(this, conversionService);
     }
 
     /**

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1819,8 +1819,8 @@ private <T> T getScopedBeanForDefinition(@Nullable BeanResolutionContext resolut
             }
 
             if (!isProxy && isScopedProxyDefinition && !registeredScope.isPresent()) {
-                final List<String> scopeHierarchy = definition.getAnnotationNamesByStereotype(Scope.class);
-                for (String scope : scopeHierarchy) {
+                final List<Class<? extends Annotation>> scopeHierarchy = definition.getAnnotationTypesByStereotype(Scope.class);
+                for (Class<? extends Annotation> scope : scopeHierarchy) {
                     registeredScope = customScopeRegistry.findScope(scope);
                     if (registeredScope.isPresent()) {
                         break;

File: management/src/main/java/io/micronaut/management/health/indicator/DefaultHealthResult.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.health.HealthStatus;
 
 import java.util.Map;
@@ -27,6 +28,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Introspected
 class DefaultHealthResult implements HealthResult {
     private final String name;
     private final HealthStatus healthStatus;

File: runtime/src/main/java/io/micronaut/health/HealthStatus.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.health;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.micronaut.core.annotation.Introspected;
 
 import javax.annotation.concurrent.Immutable;
 import javax.validation.constraints.NotNull;
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Immutable
+@Introspected
 public class HealthStatus implements Comparable<HealthStatus> {
 
     /**

File: graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java
Patch:
@@ -197,7 +197,7 @@ public final void finish(VisitorContext visitorContext) {
                     if (basePackage.contains(".")) {
                         final int i = basePackage.lastIndexOf('.');
                         module = basePackage.substring(i + 1);
-                        basePackage = basePackage.substring(0, i - 1);
+                        basePackage = basePackage.substring(0, i);
                     } else {
                         module = basePackage;
                     }

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -163,6 +163,9 @@ private boolean isDirectory(String path) {
                                 try {
                                     fileSystem = FileSystems.getFileSystem(uri);
                                 } catch (FileSystemNotFoundException e) {
+                                    //no-op
+                                }
+                                if (fileSystem == null || !fileSystem.isOpen()) {
                                     fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap(), classLoader);
                                 }
 

File: router/src/main/java/io/micronaut/web/router/naming/HyphenatedUriNamingStrategy.java
Patch:
@@ -44,9 +44,10 @@ public String resolveUri(Class type) {
 
     @Override
     public @Nonnull String resolveUri(BeanDefinition<?> beanDefinition) {
-        return beanDefinition.getValue(UriMapping.class, String.class).orElseGet(() ->
+        String uri = beanDefinition.getValue(UriMapping.class, String.class).orElseGet(() ->
                 beanDefinition.getValue(Controller.class, String.class).orElse(UriMapping.DEFAULT_URI)
         );
+        return normalizeUri(uri);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -454,7 +454,7 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
                                 if (v instanceof List) {
                                     list = (List) v;
                                 } else {
-                                    list = new ArrayList();
+                                    list = new ArrayList(10);
                                     entries.put(resolvedProperty, list);
                                 }
                                 list = fill(list, number, null);

File: http-client/src/main/java/io/micronaut/http/client/multipart/AbstractFilePart.java
Patch:
@@ -25,6 +25,7 @@
 
 import javax.annotation.Nullable;
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 /**
  * The base class used by a {@link FilePart}, {@link BytePart}, & {@link InputStreamPart} to build a Netty multipart
@@ -80,9 +81,9 @@ InterfaceHttpData getData(HttpRequest request, HttpDataFactory factory) {
         MediaType mediaType = contentType;
         String contentType = mediaType.toString();
         String encoding = mediaType.isTextBased() ? null : "binary";
-
+        Charset charset = mediaType.getCharset().orElse(null);
         FileUpload fileUpload = factory.createFileUpload(request, name, filename, contentType,
-            encoding, null, getLength());
+            encoding, charset, getLength());
         try {
             setContent(fileUpload);
         } catch (IOException e) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -41,7 +41,6 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
-import javax.tools.FileObject;
 import javax.tools.JavaFileManager;
 import javax.tools.StandardLocation;
 import java.io.IOException;

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -454,7 +454,7 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
                                 if (v instanceof List) {
                                     list = (List) v;
                                 } else {
-                                    list = new ArrayList(number);
+                                    list = Arrays.stream(new int[number]).boxed().collect(Collectors.toList());
                                     entries.put(resolvedProperty, list);
                                 }
                                 list.add(number, value);

File: test-suite/src/test/java/io/micronaut/docs/factories/VehicleSpec.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-class VehicleSpec {
+public class VehicleSpec {
 
     @Test
     public void testStartVehicle() {

File: core/src/main/java/io/micronaut/core/version/annotation/Version.java
Patch:
@@ -27,7 +27,7 @@
  * @author graemerocher
  * @since 1.1.0
  */
-@Target({ElementType.TYPE, ElementType.METHOD})
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Version {
 

File: inject/src/main/java/io/micronaut/inject/visitor/TypeElementVisitor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.inject.visitor;
 
+import io.micronaut.core.order.Ordered;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ConstructorElement;
 import io.micronaut.inject.ast.FieldElement;
@@ -28,7 +29,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface TypeElementVisitor<C, E> {
+public interface TypeElementVisitor<C, E> extends Ordered {
 
     /**
      * Executed when a class is encountered that matches the <C> generic.

File: test-suite/src/test/java/io/micronaut/docs/server/intro/HelloControllerSpec.java
Patch:
@@ -47,9 +47,9 @@ public static void setupServer() {
                 }}
                 , Environment.TEST);
         /*
-        // tag::embeddedServer[]
-            server = ApplicationContext.run(EmbeddedServer) // <1>
-        // end::embeddedServer[]
+// tag::embeddedServer[]
+        server = ApplicationContext.run(EmbeddedServer) // <1>
+// end::embeddedServer[]
         */
         // tag::class[]
         client = server

File: inject/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -37,7 +37,9 @@ public interface PropertyElement extends TypedElement, MemberElement {
      *
      * @return True if the property is read only.
      */
-    boolean isReadOnly();
+    default boolean isReadOnly() {
+        return !getWriteMethod().isPresent();
+    }
 
     /**
      * @return The name of the method used to write the property

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/bearer/BearerTokenConfigurationProperties.java
Patch:
@@ -57,7 +57,7 @@ public String getHeaderName() {
 
 
     /**
-     * Set whether to enable basic auth. Default value {@value #DEFAULT_ENABLED}
+     * Set whether to enable bearer token authentication. Default value {@value #DEFAULT_ENABLED}.
      *
      * @param enabled True if enabled
      */
@@ -75,7 +75,7 @@ public void setHeaderName(String headerName) {
     }
 
     /**
-     * Sets the prefix to use for the auth token. Default value {@value io.micronaut.http.HttpHeaderValues#AUTHORIZATION_PREFIX_BEARER}
+     * Sets the prefix to use for the auth token. Default value {@value io.micronaut.http.HttpHeaderValues#AUTHORIZATION_PREFIX_BEARER}.
      * @param prefix The prefix to use
      */
     public void setPrefix(String prefix) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1481,7 +1481,7 @@ protected void processParallelBeans() {
 
 
             Collection<BeanDefinition> parallelDefinitions = new ArrayList<>();
-            parallelBeans.forEach(beanDefinitionReference -> ForkJoinPool.commonPool().execute(() -> {
+            parallelBeans.forEach(beanDefinitionReference -> {
                 try {
                     if (isRunning()) {
                         synchronized (singletonObjects) {
@@ -1495,7 +1495,7 @@ protected void processParallelBeans() {
                         stop();
                     }
                 }
-            }));
+            });
 
             filterProxiedTypes((Collection) parallelDefinitions, true, false);
             filterReplacedBeans((Collection) parallelDefinitions);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1628,7 +1628,7 @@ private void loadContextScopeBean(BeanDefinitionReference contextScopeBean) {
         loadContextScopeBean(contextScopeBean, this::loadContextScopeBean);
     }
 
-    private void loadContextScopeBean(BeanDefinitionReference contextScopeBean, Consumer<BeanDefinition<T>> beanDefinitionConsumer) {
+    private void loadContextScopeBean(BeanDefinitionReference contextScopeBean, Consumer<BeanDefinition> beanDefinitionConsumer) {
         if (contextScopeBean.isEnabled(this)) {
             BeanDefinition beanDefinition = contextScopeBean.load(this);
             if (beanDefinition.isEnabled(this)) {

File: runtime/src/main/java/io/micronaut/retry/intercept/RecoveryInterceptor.java
Patch:
@@ -127,7 +127,7 @@ private <T> T fallbackForReactiveType(MethodInvocationContext<Object, Object> co
      * @return The fallback method if it is present
      */
     public Optional<? extends MethodExecutionHandle<?, Object>> findFallbackMethod(MethodInvocationContext<Object, Object> context) {
-        Class<?> declaringType = context.getTarget().getClass();
+        Class<?> declaringType = context.getDeclaringType();
         Optional<? extends MethodExecutionHandle<?, Object>> result = beanContext
                 .findExecutionHandle(declaringType, Qualifiers.byStereotype(Fallback.class), context.getMethodName(), context.getArgumentTypes());
         if (!result.isPresent()) {

File: validation/src/main/java/io/micronaut/validation/websocket/WebSocketVisitor.java
Patch:
@@ -36,6 +36,7 @@ public class WebSocketVisitor implements TypeElementVisitor<WebSocketComponent,
 
     private static final String WEB_SOCKET_COMPONENT = "io.micronaut.websocket.annotation.WebSocketComponent";
     private static final String WEB_SOCKET_SESSION = "io.micronaut.websocket.WebSocketSession";
+    private static final String HTTP_REQUEST = "io.micronaut.http.HttpRequest";
     private static final String CLOSE_REASON = "io.micronaut.websocket.CloseReason";
     private static final String ON_OPEN = "io.micronaut.websocket.annotation.OnOpen";
     private static final String ON_CLOSE = "io.micronaut.websocket.annotation.OnClose";
@@ -54,8 +55,8 @@ public void visitMethod(MethodElement element, VisitorContext context) {
 
             if (element.hasAnnotation(ON_OPEN)) {
                 for (ParameterElement parameter : parameters) {
-                    if (isInvalidParameter(variables, parameter, WEB_SOCKET_SESSION)) {
-                        context.fail("Parameter to @OnOpen must either be a URI variable, a WebSocketSession or annotated with an HTTP binding annotation (such as @Header)", parameter);
+                    if (isInvalidParameter(variables, parameter, WEB_SOCKET_SESSION, HTTP_REQUEST)) {
+                        context.fail("Parameter to @OnOpen must either be a URI variable, a WebSocketSession , the HttpRequest, or annotated with an HTTP binding annotation (such as @Header)", parameter);
                         break;
                     }
                 }

File: management/src/main/java/io/micronaut/management/endpoint/beans/impl/DefaultBeanDefinitionData.java
Patch:
@@ -60,7 +60,7 @@ public Map<String, Object> getData(BeanDefinition<?> beanDefinition) {
      * @return A list of dependencies for the bean definition
      */
     protected List getDependencies(BeanDefinition<?> beanDefinition) {
-        return beanDefinition.getRequiredComponents().stream().map(Class::getName).collect(Collectors.toList());
+        return beanDefinition.getRequiredComponents().stream().map(Class::getName).sorted().collect(Collectors.toList());
     }
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/beans/impl/RxJavaBeanDefinitionDataCollector.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Collection;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutorService;
 
 /**
@@ -72,7 +71,7 @@ public Publisher<Map<String, Object>> getData(Collection<BeanDefinition<?>> bean
      * @return A {@link Single} that wraps a Map
      */
     protected Single<Map<String, Object>> getBeans(Collection<BeanDefinition<?>> definitions) {
-        Map<String, Object> beans = new ConcurrentHashMap<>(definitions.size());
+        Map<String, Object> beans = new LinkedHashMap<>(definitions.size());
 
         return Flowable
             .fromIterable(definitions)

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggerConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.management.endpoint.loggers;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -70,7 +70,7 @@ public LogLevel getEffectiveLevel() {
      * @return a Map of data to emit (less the name)
      */
     public Map<String, Object> getData() {
-        Map<String, Object> data = new HashMap<>(2);
+        Map<String, Object> data = new LinkedHashMap<>(2);
         data.put(CONFIGURED_LEVEL, getConfiguredLevel());
         data.put(EFFECTIVE_LEVEL, getEffectiveLevel());
         return data;

File: management/src/main/java/io/micronaut/management/endpoint/routes/impl/RxJavaRouteDataCollector.java
Patch:
@@ -28,9 +28,9 @@
 
 import javax.inject.Named;
 import javax.inject.Singleton;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutorService;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -61,7 +61,7 @@ public RxJavaRouteDataCollector(RouteData routeData,
     @Override
     public Publisher<Map<String, Object>> getData(Stream<UriRoute> routes) {
         List<UriRoute> routeList = routes.collect(Collectors.toList());
-        Map<String, Object> routeMap = new ConcurrentHashMap<>(routeList.size());
+        Map<String, Object> routeMap = new LinkedHashMap<>(routeList.size());
 
         return Flowable
             .fromIterable(routeList)

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -26,6 +26,7 @@
 import io.micronaut.context.BeanLocator;
 import io.micronaut.context.ExecutionHandleLocator;
 import io.micronaut.context.Qualifier;
+import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
@@ -566,7 +567,7 @@ public void visitBeanDefinitionEnd() {
         this.constructArgumentMetadata = new LinkedHashMap<>(this.constructArgumentMetadata);
         this.constructArgumentMetadata.put("interceptors", new DefaultAnnotationMetadata() {{
             addDeclaredAnnotation(io.micronaut.context.annotation.Type.class.getName(), Collections.singletonMap(
-                "value", Arrays.stream(interceptorTypes).map(Type::getClassName).toArray()
+                "value", Arrays.stream(interceptorTypes).map(t -> new AnnotationClassValue(t.getClassName())).toArray()
             ));
         }});
         String constructorDescriptor = getConstructorDescriptor(constructorNewArgumentTypes.values());

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.convert.TypeConverterRegistrar;
-import io.micronaut.core.io.ResourceLoader;
 import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.io.service.ServiceDefinition;
 import io.micronaut.core.io.service.SoftServiceLoader;
@@ -157,6 +156,8 @@ public ClassLoader getClassLoader() {
      */
     public DefaultBeanContext(@Nonnull BeanContextConfiguration contextConfiguration) {
         ArgumentUtils.requireNonNull("contextConfiguration", contextConfiguration);
+        // enable classloader logging
+        System.setProperty(ClassUtils.PROPERTY_MICRONAUT_CLASSLOADER_LOGGING, "true");
         this.classLoader = contextConfiguration.getClassLoader();
         this.customScopeRegistry = new DefaultCustomScopeRegistry(this, classLoader);
 

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -446,6 +446,8 @@ private void processAnnotationDefaults(DefaultAnnotationMetadata metadata, Strin
                 annotationDefaults.put(entry.getKey().toString(), entry.getValue());
             }
             DefaultAnnotationMetadata.registerAnnotationDefaults(annotationName, annotationDefaults);
+        } else {
+            metadata.addDefaultAnnotationValues(annotationName, Collections.emptyMap());
         }
     }
 

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -45,7 +45,6 @@
 @Internal
 class AnnotationMetadataSupport {
 
-    static final Map<String, Map<String, Object>> CURRENT_DEFAULTS = new ConcurrentHashMap<>(20);
     private static final Map<String, Map<String, Object>> ANNOTATION_DEFAULTS = new ConcurrentHashMap<>(20);
 
     private static final Map<Class<? extends Annotation>, Optional<Constructor<InvocationHandler>>> ANNOTATION_PROXY_CACHE = new ConcurrentHashMap<>(20);
@@ -140,7 +139,6 @@ static boolean hasDefaultValues(String annotation) {
     static void registerDefaultValues(String annotation, Map<String, Object> defaultValues) {
         if (StringUtils.isNotEmpty(annotation)) {
             ANNOTATION_DEFAULTS.put(annotation.intern(), defaultValues);
-            CURRENT_DEFAULTS.put(annotation.intern(), defaultValues);
         }
     }
 
@@ -151,7 +149,9 @@ static void registerDefaultValues(String annotation, Map<String, Object> default
      * @param defaultValues The default values
      */
     static void registerDefaultValues(AnnotationClassValue<?> annotation, Map<String, Object> defaultValues) {
-        registerDefaultValues(annotation.getName(), defaultValues);
+        if (defaultValues != null) {
+            registerDefaultValues(annotation.getName(), defaultValues);
+        }
         registerAnnotationType(annotation);
     }
 

File: inject/src/main/java/io/micronaut/inject/beans/visitor/BeanIntrospectionWriter.java
Patch:
@@ -170,7 +170,6 @@ public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOE
         // write the annotation metadata
         if (annotationMetadataWriter != null) {
             annotationMetadataWriter.accept(classWriterOutputVisitor);
-            annotationMetadataWriter.clearDefaults();
         }
         // write the reference
         writeIntrospectionReference(classWriterOutputVisitor);

File: inject/src/main/java/io/micronaut/inject/writer/BeanConfigurationWriter.java
Patch:
@@ -62,7 +62,6 @@ public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOE
         AnnotationMetadataWriter annotationMetadataWriter = getAnnotationMetadataWriter();
         if (annotationMetadataWriter != null) {
             annotationMetadataWriter.accept(classWriterOutputVisitor);
-            annotationMetadataWriter.clearDefaults();
         }
         try (OutputStream outputStream = classWriterOutputVisitor.visitClass(configurationClassName)) {
             ClassWriter classWriter = generateClassBytes();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -72,7 +72,6 @@ public BeanDefinitionReferenceWriter(String beanTypeName, String beanDefinitionN
     public void accept(ClassWriterOutputVisitor outputVisitor) throws IOException {
         if (annotationMetadataWriter != null) {
             annotationMetadataWriter.accept(outputVisitor);
-            annotationMetadataWriter.clearDefaults();
         }
         try (OutputStream outputStream = outputVisitor.visitClass(getBeanDefinitionQualifiedClassName())) {
             ClassWriter classWriter = generateClassBytes();

File: runtime/src/main/java/io/micronaut/runtime/Micronaut.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.context.env.PropertySource;
 import io.micronaut.core.cli.CommandLine;
 import io.micronaut.core.naming.Described;
+import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.runtime.context.env.CommandLinePropertySource;
 import io.micronaut.runtime.exceptions.ApplicationStartupException;
 import io.micronaut.runtime.server.EmbeddedServer;

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -577,7 +577,7 @@ private Schema getSchemaDefinition(
             final boolean isBasicType = ClassUtils.isJavaBasicType(type.getName());
             final PrimitiveType primitiveType;
             if (isBasicType) {
-                primitiveType = ClassUtils.forName(type.getName(), getClass().getClassLoader()).map(PrimitiveType::fromType).orElse(null);
+                primitiveType = ClassUtils.getPrimitiveType(type.getName()).map(PrimitiveType::fromType).orElse(null);
             } else {
                 primitiveType = null;
             }
@@ -748,7 +748,7 @@ private ArraySchema arraySchema(Schema schema) {
 
     private Schema getPrimitiveType(String typeName) {
         Schema schema = null;
-        Optional<Class> aClass = ClassUtils.forName(typeName, getClass().getClassLoader());
+        Optional<Class> aClass = ClassUtils.getPrimitiveType(typeName);
         if (aClass.isPresent()) {
             Class concreteType = aClass.get();
             Class wrapperType = ReflectionUtils.getWrapperType(concreteType);

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -288,7 +288,7 @@ protected Object resolveTypeReference(TypeMirror mirror, Map<String, Object> bou
             case INT:
             case LONG:
             case SHORT:
-                Optional<Class> type = ClassUtils.forName(mirror.toString(), getClass().getClassLoader());
+                Optional<Class> type = ClassUtils.getPrimitiveType(mirror.toString());
                 if (type.isPresent()) {
                     return type.get();
                 } else {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaPrimitiveElement.java
Patch:
@@ -93,7 +93,7 @@ public boolean isPublic() {
 
     @Override
     public Object getNativeType() {
-        return ClassUtils.forName(typeName, getClass().getClassLoader());
+        return ClassUtils.getPrimitiveType(typeName).orElse(null);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -82,11 +82,11 @@ public class DefaultAnnotationMetadata extends AbstractAnnotationMetadata implem
     @Nullable Map<String, Map<CharSequence, Object>> declaredStereotypes;
     @Nullable Map<String, Map<CharSequence, Object>> allStereotypes;
     @Nullable Map<String, List<String>> annotationsByStereotype;
+    @Nullable Map<String, Map<CharSequence, Object>> annotationDefaultValues;
     private Map<Class, List> annotationValuesByType = new ConcurrentHashMap<>(2);
 
     // should not be used in any of the read methods
     // The following fields are used only at compile time, and
-    private Map<String, Map<CharSequence, Object>> annotationDefaultValues;
     private Map<String, String> repeated = null;
 
     /**

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -628,7 +628,7 @@ protected Object postConstruct(BeanResolutionContext resolutionContext, BeanCont
                     BeanInitializedEventListener listener = registration.getBean();
                     bean = listener.onInitialized(new BeanInitializingEvent(context, this, bean));
                     if (bean == null) {
-                        throw new BeanInstantiationException(resolutionContext, "Listener [" + listener + "] returned null from onCreated event");
+                        throw new BeanInstantiationException(resolutionContext, "Listener [" + listener + "] returned null from onInitialized event");
                     }
                 }
             }
@@ -660,7 +660,7 @@ protected Object preDestroy(BeanResolutionContext resolutionContext, BeanContext
         DefaultBeanContext defaultContext = (DefaultBeanContext) context;
         for (int i = 0; i < methodInjectionPoints.size(); i++) {
             MethodInjectionPoint methodInjectionPoint = methodInjectionPoints.get(i);
-            if (methodInjectionPoint.isPostConstructMethod() && methodInjectionPoint.requiresReflection()) {
+            if (methodInjectionPoint.isPreDestroyMethod() && methodInjectionPoint.requiresReflection()) {
                 injectBeanMethod(resolutionContext, defaultContext, i, bean);
             }
         }

File: inject/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -42,14 +42,14 @@ public interface PropertyElement extends TypedElement, MemberElement {
     /**
      * @return The name of the method used to write the property
      */
-    default Optional<String> getWriteMethodName() {
+    default Optional<MethodElement> getWriteMethod() {
         return Optional.empty();
     }
 
     /**
      * @return The name of the method used to read the property
      */
-    default Optional<String> getReadMethodName() {
+    default Optional<MethodElement> getReadMethod() {
         return Optional.empty();
     }
 }

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -179,8 +179,8 @@ private void process(
                 writer.visitProperty(
                         type,
                         name,
-                        beanProperty.getReadMethodName().orElse(null),
-                        beanProperty.getWriteMethodName().orElse(null),
+                        beanProperty.getReadMethod().orElse(null),
+                        beanProperty.getWriteMethod().orElse(null),
                         beanProperty.isReadOnly(),
                         metadata ? beanProperty.getAnnotationMetadata() : null,
                         beanProperty.getType().getTypeArguments()

File: runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.type.TypeBindings;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.core.annotation.Experimental;

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/InstanceInfo.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonRootName;
-import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 
 import javax.validation.constraints.Min;
@@ -41,7 +40,6 @@
  * @since 1.0
  */
 @JsonRootName("instance")
-@Introspected
 public class InstanceInfo implements ConfigurableInstanceInfo {
 
     /**

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/AbstractServiceEntry.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.http.client.exceptions.HttpClientException;
 
 import java.net.InetAddress;
@@ -35,6 +36,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public abstract class AbstractServiceEntry {
 
     protected final String name;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/CheckEntry.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 
 import java.util.Locale;
@@ -28,6 +29,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public class CheckEntry implements Check {
 
     private final String id;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/HealthEntry.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 
 import java.util.Collections;
 import java.util.List;
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public class HealthEntry {
 
     private NodeEntry node;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/KeyValue.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 
 /**
  * Represents a Key/Value pair returned from Consul via /kv/:key.
@@ -27,6 +28,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public class KeyValue {
     private String key;
     private String value;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/LocalAgentConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 
 import java.util.Map;
 
@@ -27,6 +28,7 @@
  * @author Álvaro Sánchez-Mariscal
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public class LocalAgentConfiguration {
 
     private Map<String, String> configuration;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/MemberEntry.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 
 import java.net.InetAddress;
 import java.util.Map;
@@ -27,7 +28,7 @@
  * @author Álvaro Sánchez-Mariscal
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
-
+@Introspected
 public class MemberEntry {
 
     private String name;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/NewCheck.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.convert.ConversionService;
 
 import java.time.Duration;
@@ -33,6 +34,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public abstract class NewCheck implements Check {
 
     private Duration deregisterCriticalServiceAfter;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/NodeEntry.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 
 import java.net.InetAddress;
@@ -31,6 +32,7 @@
  * @since 1.0
  */
 @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
+@Introspected
 public class NodeEntry {
 
     private final String node;

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/InstanceInfo.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonRootName;
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.core.util.StringUtils;
 
 import javax.validation.constraints.Min;
@@ -40,6 +41,7 @@
  * @since 1.0
  */
 @JsonRootName("instance")
+@Introspected
 public class InstanceInfo implements ConfigurableInstanceInfo {
 
     /**

File: http/src/main/java/io/micronaut/http/hateoas/DefaultLink.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.http.hateoas;
 
+import io.micronaut.core.annotation.Introspected;
 import io.micronaut.http.MediaType;
 
 import java.net.URI;
@@ -26,6 +27,7 @@
  * @author Graeme Rocher
  * @since 1.1
  */
+@Introspected
 public class DefaultLink implements Link, Link.Builder {
 
     final URI href;

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceDeserializerModifier.java
Patch:
@@ -19,8 +19,10 @@
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.hateoas.Resource;
+import io.micronaut.jackson.modules.BeanIntrospectionModule;
 
 import java.util.List;
 
@@ -29,6 +31,7 @@
  * @since 1.0
  */
 @Internal
+@Requires(missingBeans = BeanIntrospectionModule.class)
 public class ResourceDeserializerModifier extends BeanDeserializerModifier {
 
     @Override

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceSerializerModifier.java
Patch:
@@ -20,8 +20,10 @@
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.databind.util.NameTransformer;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.http.hateoas.Resource;
+import io.micronaut.jackson.modules.BeanIntrospectionModule;
 
 import javax.inject.Singleton;
 import java.util.Iterator;
@@ -35,6 +37,7 @@
  */
 @Internal
 @Singleton
+@Requires(missingBeans = BeanIntrospectionModule.class)
 class ResourceSerializerModifier extends BeanSerializerModifier {
 
     @Override

File: inject/src/main/java/io/micronaut/inject/beans/visitor/IntrospectedTypeElementVisitor.java
Patch:
@@ -32,10 +32,8 @@
 import io.micronaut.inject.writer.ClassGenerationException;
 
 import java.io.IOException;
-import java.lang.annotation.Annotation;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Consumer;
 
 /**
  * A {@link TypeElementVisitor} that visits classes annotated with {@link Introspected} and produces
@@ -181,6 +179,8 @@ private void process(
                 writer.visitProperty(
                         type,
                         name,
+                        beanProperty.getReadMethodName().orElse(null),
+                        beanProperty.getWriteMethodName().orElse(null),
                         beanProperty.isReadOnly(),
                         metadata ? beanProperty.getAnnotationMetadata() : null,
                         beanProperty.getType().getTypeArguments()

File: runtime/src/main/java/io/micronaut/jackson/modules/BeanIntrospectionModule.java
Patch:
@@ -94,7 +94,8 @@ private class BeanIntrospectionSerializerModifier extends BeanSerializerModifier
         @Override
         public BeanSerializerBuilder updateBuilder(SerializationConfig config, BeanDescription beanDesc, BeanSerializerBuilder builder) {
             final Class<?> beanClass = beanDesc.getBeanClass();
-            final BeanIntrospection<Object> introspection = (BeanIntrospection<Object>) BeanIntrospector.SHARED.findIntrospection(beanClass).orElse(null);
+            final BeanIntrospection<Object> introspection =
+                    (BeanIntrospection<Object>) BeanIntrospector.SHARED.findIntrospection(beanClass).orElse(null);
             if (introspection == null) {
                 return super.updateBuilder(config, beanDesc, builder);
             } else {

File: views/src/main/java/io/micronaut/views/csp/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * @since 1.1
  */
 @Configuration
-@Requires(property = CspConfiguration.PREFIX + ".enabled", value = StringUtils.TRUE)
+@Requires(property = CspConfiguration.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 package io.micronaut.views.csp;
 
 import io.micronaut.context.annotation.Configuration;

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -684,9 +684,7 @@ public void visitBeanDefinitionEnd() {
                         null, null
                     );
                     proxyConstructorGenerator.loadThis();
-                    proxyConstructorGenerator.newInstance(TYPE_READ_WRITE_LOCK);
-                    proxyConstructorGenerator.dup();
-                    proxyConstructorGenerator.invokeConstructor(TYPE_READ_WRITE_LOCK, METHOD_DEFAULT_CONSTRUCTOR);
+                    pushNewInstance(proxyConstructorGenerator, TYPE_READ_WRITE_LOCK);
                     proxyConstructorGenerator.putField(proxyType, FIELD_READ_WRITE_LOCK, TYPE_READ_WRITE_LOCK);
 
                     // Add Read Lock field

File: core/src/main/java/io/micronaut/core/beans/BeanInfo.java
Patch:
@@ -23,7 +23,9 @@
  * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link BeanIntrospection} instead
  */
+@Deprecated
 public interface BeanInfo<T> {
 
     /**

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -25,8 +25,10 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Replaced by {@link BeanIntrospector}
  */
 @Internal
+@Deprecated
 public final class Introspector {
 
     /* The cache to store Bean Info objects that have been found or created */

File: core/src/main/java/io/micronaut/core/beans/PropertyDescriptor.java
Patch:
@@ -26,7 +26,9 @@
  *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use {@link BeanProperty} instead
  */
+@Deprecated
 public class PropertyDescriptor implements Named {
     private final String propertyName;
     private final Method getter;

File: core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java
Patch:
@@ -35,8 +35,10 @@
  *
  * @author graemerocher
  * @since 1.0
+ * @deprecated Replaced by {@link BeanIntrospection}
  */
 @Internal
+@Deprecated
 class SimpleBeanInfo implements BeanInfo {
     private static final Set<String> EXCLUDED_PROPERTIES = CollectionUtils.setOf("class", "metaClass");
 

File: core/src/main/java/io/micronaut/core/naming/Named.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.core.naming;
 
+import javax.annotation.Nonnull;
+
 /**
  * An interface for components that are named.
  *
@@ -26,5 +28,5 @@ public interface Named {
     /**
      * @return The name of the component
      */
-    String getName();
+    @Nonnull String getName();
 }

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -69,7 +69,7 @@ public R visitDeclared(DeclaredType type, P p) {
                             accept(type, enclosedElement, p);
                         }
                     } else {
-                        String qualifiedName = types.erasure(enclosedElement.asType()).toString();
+                        String qualifiedName = types.erasure(enclosedElement.asType()).toString() + "." + enclosedElement.getSimpleName().toString();
                         // if the method has already been processed then it is overridden so ignore
                         if (!processed.contains(qualifiedName)) {
                             processed.add(qualifiedName);

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -104,6 +104,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             }
         }
 
+        javaVisitorContext.finish();
         executed = true;
         return false;
     }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -517,6 +517,9 @@ private AnnotationMetadata buildInternal(T parent, T element, DefaultAnnotationM
         }
         Collections.reverse(hierarchy);
         for (T currentElement : hierarchy) {
+            if (currentElement == null) {
+                continue;
+            }
             List<? extends A> annotationHierarchy = getAnnotationsForType(currentElement);
 
             if (annotationHierarchy.isEmpty()) {

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -537,7 +537,6 @@ private static void invokeLoadClassValueMethod(
             loadTypeGenerator.push(typeName);
             loadTypeGenerator.invokeConstructor(TYPE_ANNOTATION_CLASS_VALUE, CONSTRUCTOR_CLASS_VALUE);
             loadTypeGenerator.returnValue();
-
             return loadTypeGenerator;
         });
 

File: inject/src/main/java/io/micronaut/inject/ast/Element.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micronaut.inject.ast;
 
-import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.AnnotationMetadataDelegate;
 import io.micronaut.core.annotation.AnnotationValueBuilder;
 import io.micronaut.core.util.ArgumentUtils;
 
@@ -30,7 +30,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface Element extends AnnotationMetadata {
+public interface Element extends AnnotationMetadataDelegate {
 
     /**
      * @return The name of the element.
@@ -79,7 +79,7 @@ default <T extends Annotation> Element annotate(@Nonnull String annotationType,
      */
     @Nonnull
     default <T extends Annotation> Element annotate(@Nonnull String annotationType) {
-        return annotate(annotationType, (Consumer<AnnotationValueBuilder<T>>) annotationValueBuilder -> {});
+        return annotate(annotationType, (Consumer<AnnotationValueBuilder<T>>) annotationValueBuilder -> { });
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -126,9 +126,7 @@ protected void initializeAnnotationMetadata(GeneratorAdapter staticInit, ClassWr
             staticInit.getStatic(Type.getType(AnnotationMetadata.class), "EMPTY_METADATA", Type.getType(AnnotationMetadata.class));
         } else {
             Type concreteMetadataType = getTypeReference(annotationMetadataWriter.getClassName());
-            staticInit.newInstance(concreteMetadataType);
-            staticInit.dup();
-            staticInit.invokeConstructor(concreteMetadataType, METHOD_DEFAULT_CONSTRUCTOR);
+            pushNewInstance(staticInit, concreteMetadataType);
         }
 
         staticInit.putStatic(targetClassType, FIELD_ANNOTATION_METADATA, annotationMetadataType);

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -145,9 +145,7 @@ private ClassWriter generateClassBytes() {
         GeneratorAdapter loadMethod = startPublicMethodZeroArgs(classWriter, BeanDefinition.class, "load");
 
         // return new BeanDefinition()
-        loadMethod.newInstance(beanDefinitionType);
-        loadMethod.dup();
-        loadMethod.invokeConstructor(beanDefinitionType, METHOD_DEFAULT_CONSTRUCTOR);
+        pushNewInstance(loadMethod, beanDefinitionType);
 
         // RETURN
         loadMethod.returnValue();

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micronaut.inject.writer;
 
-import static io.micronaut.inject.writer.BeanDefinitionWriter.buildArgumentWithGenerics;
 import static io.micronaut.inject.writer.BeanDefinitionWriter.pushBuildArgumentsForMethod;
 
 import io.micronaut.context.AbstractExecutableMethod;

File: runtime/src/main/java/io/micronaut/discovery/cloud/gcp/GoogleComputeInstanceMetadataResolver.java
Patch:
@@ -115,8 +115,8 @@ public Optional<ComputeInstanceMetadata> resolve(Environment environment) {
                     LOG.debug("No project metadata found at: " + configuration.getProjectMetadataUrl() + "?recursive=true", fnfe);
                 }
             } catch (IOException ioe) {
-                if (LOG.isErrorEnabled()) {
-                    LOG.error("Error connecting to" + configuration.getProjectMetadataUrl() + "?recursive=true reading project metadata. Not a Google environment?", ioe);
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("Error connecting to" + configuration.getProjectMetadataUrl() + "?recursive=true reading project metadata. Not a Google environment?", ioe);
                 }
             }
             JsonNode instanceMetadataJson = readMetadataUrl(new URL(configuration.getMetadataUrl() + "?recursive=true"), connectionTimeoutMs, readTimeoutMs, objectMapper, requestProperties);
@@ -192,7 +192,7 @@ public Optional<ComputeInstanceMetadata> resolve(Environment environment) {
             }
         } catch (IOException ioe) {
             if (LOG.isErrorEnabled()) {
-                LOG.error("Error connecting to" + configuration.getMetadataUrl() + "?recursive=true reading instance metadata", ioe);
+                LOG.debug("Error connecting to" + configuration.getMetadataUrl() + "?recursive=true reading instance metadata", ioe);
             }
         }
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -307,9 +307,10 @@ public boolean equals(Object obj) {
      * Start building a new annotation for the given name.
      *
      * @param annotationName The annotation name
+     * @param <T> The annotation type
      * @return The builder
      */
-    public static AnnotationValueBuilder<?> builder(String annotationName) {
+    public static <T extends Annotation> AnnotationValueBuilder<T> builder(String annotationName) {
         return new AnnotationValueBuilder<>(annotationName);
     }
 

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -49,7 +49,7 @@ public class GroovyClassElement extends AbstractGroovyElement implements ClassEl
      * @param annotationMetadata The annotation metadata
      */
     GroovyClassElement(SourceUnit sourceUnit, ClassNode classNode, AnnotationMetadata annotationMetadata) {
-        super(annotationMetadata);
+        super(classNode, annotationMetadata);
         this.classNode = classNode;
         this.sourceUnit = sourceUnit;
     }
@@ -99,6 +99,7 @@ public List<PropertyElement> getBeanProperties() {
                 groovyProps.add(propertyNode.getName());
                 GroovyPropertyElement groovyPropertyElement = new GroovyPropertyElement(
                         this,
+                        propertyNode.getField(),
                         AstAnnotationUtils.getAnnotationMetadata(sourceUnit, propertyNode.getField()),
                         new GroovyClassElement(sourceUnit, propertyNode.getType(),
                                 AnnotationMetadata.EMPTY_METADATA),
@@ -203,6 +204,7 @@ private void configureDeclaringType(ClassNode declaringTypeElement, GetterAndSet
                 if (value.getter != null) {
                     GroovyPropertyElement propertyElement = new GroovyPropertyElement(
                             value.declaringType == null ? this : value.declaringType,
+                            value.getter,
                             AstAnnotationUtils.getAnnotationMetadata(sourceUnit, value.getter),
                             value.type,
                             propertyName,

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -46,7 +46,7 @@ public class GroovyMethodElement extends AbstractGroovyElement implements Method
      * @param annotationMetadata The annotation metadata
      */
     GroovyMethodElement(SourceUnit sourceUnit, MethodNode methodNode, AnnotationMetadata annotationMetadata) {
-        super(annotationMetadata);
+        super(methodNode, annotationMetadata);
         this.methodNode = methodNode;
         this.sourceUnit = sourceUnit;
     }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -46,7 +46,7 @@ public class GroovyParameterElement extends AbstractGroovyElement implements Par
      * @param annotationMetadata The annotation metadata
      */
     GroovyParameterElement(SourceUnit sourceUnit, Parameter parameter, AnnotationMetadata annotationMetadata) {
-        super(annotationMetadata);
+        super(parameter, annotationMetadata);
         this.parameter = parameter;
         this.sourceUnit = sourceUnit;
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -217,6 +217,7 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
             }
         }
         AnnotationUtils.invalidateCache();
+        AbstractAnnotationMetadataBuilder.clearMutated();
         return false;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaFieldElement.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.annotation.processing.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.FieldElement;
 
@@ -31,6 +32,7 @@
  * @author James Kleeh
  * @since 1.0
  */
+@Internal
 class JavaFieldElement extends AbstractJavaElement implements FieldElement {
 
     private final JavaVisitorContext visitorContext;
@@ -43,7 +45,7 @@ class JavaFieldElement extends AbstractJavaElement implements FieldElement {
      * @param visitorContext     The visitor context
      */
     JavaFieldElement(VariableElement variableElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
-        super(variableElement, annotationMetadata);
+        super(variableElement, annotationMetadata, visitorContext);
         this.variableElement = variableElement;
         this.visitorContext = visitorContext;
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.annotation.processing.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.MethodElement;
 import io.micronaut.inject.ast.ParameterElement;
@@ -35,6 +36,7 @@
  * @author James Kleeh
  * @since 1.0
  */
+@Internal
 class JavaMethodElement extends AbstractJavaElement implements MethodElement {
 
     private final ExecutableElement executableElement;
@@ -49,7 +51,7 @@ class JavaMethodElement extends AbstractJavaElement implements MethodElement {
             ExecutableElement executableElement,
             AnnotationMetadata annotationMetadata,
             JavaVisitorContext visitorContext) {
-        super(executableElement, annotationMetadata);
+        super(executableElement, annotationMetadata, visitorContext);
         this.executableElement = executableElement;
         this.visitorContext = visitorContext;
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -42,7 +42,7 @@ class JavaParameterElement extends AbstractJavaElement implements ParameterEleme
      * @param visitorContext The visitor context
      */
     JavaParameterElement(VariableElement element, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext) {
-        super(element, annotationMetadata);
+        super(element, annotationMetadata, visitorContext);
         this.visitorContext = visitorContext;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -202,7 +202,7 @@ List<ExecutableElement> findNonPrivateConstructors(TypeElement classElement) {
      * @return The executable element
      */
     Optional<ExecutableElement> findAccessibleNoArgumentInstanceMethod(TypeElement classElement, String methodName) {
-        return ElementFilter.methodsIn(classElement.getEnclosedElements())
+        return ElementFilter.methodsIn(elementUtils.getAllMembers(classElement))
                 .stream().filter(m -> m.getSimpleName().toString().equals(methodName) && !isPrivate(m) && !isStatic(m))
                 .findFirst();
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/decoders/HttpRequestDecoder.java
Patch:
@@ -27,7 +27,6 @@
 import io.netty.handler.codec.MessageToMessageDecoder;
 import io.netty.handler.codec.http.DefaultHttpRequest;
 import io.netty.handler.codec.http.HttpRequest;
-import io.netty.handler.codec.http.HttpVersion;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: http/src/main/java/io/micronaut/http/MutableHttpRequest.java
Patch:
@@ -19,10 +19,8 @@
 import io.micronaut.http.cookie.Cookie;
 
 import java.net.URI;
-import java.util.Arrays;
 import java.util.Map;
 import java.util.function.Consumer;
-import java.util.stream.Collectors;
 
 /**
  * An extended version of {@link HttpRequest} that allows mutating headers, the body etc.

File: http/src/main/java/io/micronaut/http/cookie/CookieConfiguration.java
Patch:
@@ -49,6 +49,8 @@ public interface CookieConfiguration {
 
     /**
      * Checks to see if this {@link Cookie} can only be accessed via HTTP.
+     *
+     * @return True if the cookie is HTTP only
      */
     Optional<Boolean> isCookieHttpOnly();
 

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.util.StringUtils;
 
-import javax.annotation.Nonnull;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 import java.util.ArrayList;

File: inject/src/main/java/io/micronaut/context/ApplicationContextConfiguration.java
Patch:
@@ -30,5 +30,4 @@ public interface ApplicationContextConfiguration {
      */
     Boolean getDeduceEnvironments();
 
-
 }

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -141,7 +141,7 @@ protected DefaultEnvironment createEnvironment(String... environmentNames) {
     protected DefaultEnvironment createEnvironment(@Nullable  ApplicationContextConfiguration configuration, String... environmentNames) {
 
         Boolean deduceEnvironments = null;
-        if(configuration != null) {
+        if (configuration != null) {
             deduceEnvironments = configuration.getDeduceEnvironments();
         }
 

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -101,7 +101,6 @@ public ApplicationContextBuilder propertySources(@Nullable PropertySource... pro
         return this;
     }
 
-
     @Override
     public Boolean getDeduceEnvironments() {
         return deduceEnvironments;

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -136,6 +136,7 @@ public AnnotationMetadata buildForParent(T parent, T element) {
      * @return True if the annotation is present
      */
     protected abstract boolean hasAnnotation(T element, Class<? extends Annotation> annotation);
+
     /**
      * Get the given type of the annotation.
      *

File: messaging/src/main/java/io/micronaut/messaging/Acknowledgement.java
Patch:
@@ -27,11 +27,13 @@ public interface Acknowledgement {
 
     /**
      * Acknowledges the message.
+     * @throws MessageAcknowledgementException may throw a MessageAcknowledgementException
      */
     void ack() throws MessageAcknowledgementException;
 
     /**
      * Rejects the message.
+     * @throws MessageAcknowledgementException may throw a MessageAcknowledgementException
      */
     void nack() throws MessageAcknowledgementException;
 }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/package-info.java
Patch:
@@ -27,5 +27,4 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
-import io.micronaut.security.config.SecurityConfigurationProperties;
 import io.micronaut.security.token.jwt.config.JwtConfigurationProperties;

File: security/src/main/java/io/micronaut/security/authentication/UserDetails.java
Patch:
@@ -58,6 +58,8 @@ public UserDetails(String username, Collection<String> roles, Map<String, Object
     }
 
     /**
+     * @param rolesKey the key for the roles attribute
+     * @param usernameKey the key for the username attribute
      * @return User's attributes
      */
     public Map<String, Object> getAttributes(String rolesKey, String usernameKey) {

File: session/src/main/java/io/micronaut/session/SessionStore.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.session;
 
-import io.micronaut.http.HttpRequest;
-import io.micronaut.session.http.HttpSessionFilter;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 

File: session/src/main/java/io/micronaut/session/http/SessionForRequest.java
Patch:
@@ -30,6 +30,7 @@ public class SessionForRequest {
 
     /**
      *
+     * @param sessionStore the session store
      * @param request the Http Request
      * @return A new session stored in the request attributes
      */

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -22,11 +22,9 @@
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collectors;
 
 /**
  * A property resolver is capable of resolving properties from an underlying property source.

File: discovery-client/src/main/java/io/micronaut/discovery/client/ClientUtil.java
Patch:
@@ -28,7 +28,7 @@ public class ClientUtil {
      * Calculates property source names. This is used across several clients to make naming consistent.
      * @param prefix fullName or prefix to the environment, or application specific configuration
      * @param activeNames active environments which configurations can be created for
-     * @param separator
+     * @param separator The separator string
      * @return Set of names to be used for each PropertySource
      */
     public static Set<String> calcPropertySourceNames(String prefix, Set<String> activeNames, String separator) {

File: core/src/main/java/io/micronaut/core/annotation/InstantiatedMember.java
Patch:
@@ -32,7 +32,7 @@
  * <p>Note that the member should be a simple POJO with a public no argument constructor.</p>
  *
  * @author graemerocher
- * @since 1.0
+ * @since 1.1
  */
 @Documented
 @Retention(RUNTIME)

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -45,7 +45,7 @@ public class DefaultApplicationContextBuilder implements ApplicationContextBuild
     private ClassPathResourceLoader classPathResourceLoader;
     private Collection<String> configurationIncludes = new HashSet<>();
     private Collection<String> configurationExcludes = new HashSet<>();
-    private Boolean deduceEnvironments = true;
+    private Boolean deduceEnvironments = null;
 
     /**
      * Default constructor.
@@ -128,6 +128,7 @@ public ApplicationContext build() {
         ClassLoader classLoader = ApplicationContext.class.getClassLoader();
         DefaultApplicationContext applicationContext = new DefaultApplicationContext(
             classPathResourceLoader != null ? classPathResourceLoader : ClassPathResourceLoader.defaultLoader(classLoader),
+            deduceEnvironments,
             environments.toArray(new String[0])
         );
 

File: inject/src/main/java/io/micronaut/context/ApplicationContextBuilder.java
Patch:
@@ -37,7 +37,7 @@ public interface ApplicationContextBuilder {
     ApplicationContextBuilder singletons(Object... beans);
 
     /**
-     * Boolean flag to toggle environments deduction
+     * Boolean flag to toggle environments deduction.
      *
      * @param deduceEnvironment The boolean
      * @return This builder

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -61,7 +61,6 @@ public ApplicationContextBuilder singletons(Object... beans) {
         return this;
     }
 
-
     @Override
     public ApplicationContextBuilder deduceEnvironment(@Nullable Boolean deduceEnvironments) {
         if (deduceEnvironments != null) {
@@ -70,7 +69,6 @@ public ApplicationContextBuilder deduceEnvironment(@Nullable Boolean deduceEnvir
         return this;
     }
 
-
     @Override
     public ApplicationContextBuilder environments(@Nullable String... environments) {
         if (environments != null) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -30,7 +30,6 @@
 import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.io.service.ServiceDefinition;
 import io.micronaut.core.io.service.SoftServiceLoader;
-import io.micronaut.core.io.service.StreamSoftServiceLoader;
 import io.micronaut.core.naming.Named;
 import io.micronaut.core.order.OrderUtil;
 import io.micronaut.core.order.Ordered;
@@ -66,7 +65,6 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -196,7 +196,8 @@ List<ExecutableElement> findNonPrivateConstructors(TypeElement classElement) {
     }
 
     /**
-     * Finds a no argument method of the given name
+     * Finds a no argument method of the given name.
+     * 
      * @param classElement The class element
      * @param methodName The method name
      * @return The executable element

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -829,6 +829,7 @@ protected void accept(DeclaredType type, Element element, BeanDefinitionWriter b
                                 TypeElement destroyMethodDeclaringClass = (TypeElement) typeUtils.asElement(returnType);
                                 beanMethodWriter.visitPreDestroyMethod(
                                         destroyMethodDeclaringClass.getQualifiedName().toString(),
+                                        modelUtils.resolveTypeReference(returnType),
                                         destroyMethodName
                                 );
                             }

File: views/src/main/java/io/micronaut/views/ViewsConfigurationProperties.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.views;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
@@ -63,7 +64,7 @@ public boolean isEnabled() {
      */
     @Override
     public String getFolder() {
-        return this.folder;
+        return ViewUtils.normalizeFolder(folder);
     }
 
     /**
@@ -96,4 +97,5 @@ public void setDir(String folder) {
             this.folder = folder;
         }
     }
+
 }

File: views/src/main/java/io/micronaut/views/freemarker/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Contains classes specific to Views rendered with FreeMarker.
  * @see <a href="https://freemarker.apache.org/">FreeMarker</a>

File: views/src/main/java/io/micronaut/views/handlebars/HandlebarsViewsRendererConfigurationProperties.java
Patch:
@@ -15,9 +15,7 @@
  */
 package io.micronaut.views.handlebars;
 
-import com.github.jknack.handlebars.Handlebars;
 import io.micronaut.context.annotation.ConfigurationProperties;
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.views.ViewsConfigurationProperties;
 
@@ -27,7 +25,6 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(classes = Handlebars.class)
 @ConfigurationProperties(HandlebarsViewsRendererConfigurationProperties.PREFIX)
 public class HandlebarsViewsRendererConfigurationProperties implements HandlebarsViewsRendererConfiguration {
 

File: views/src/main/java/io/micronaut/views/handlebars/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Contains classes specific to Views rendered with Handlebars.
  * @see <a href="https://jknack.github.io/handlebars.java/">Handlebars.java</a>
@@ -21,9 +22,11 @@
  * @since 1.0
  */
 @Configuration
+@Requires(property = HandlebarsViewsRendererConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Requires(classes = Handlebars.class)
 package io.micronaut.views.handlebars;
 
 import com.github.jknack.handlebars.Handlebars;
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;

File: views/src/main/java/io/micronaut/views/thymeleaf/ThymeleafViewsRendererConfigurationProperties.java
Patch:
@@ -13,13 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.views.thymeleaf;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.views.ViewsConfigurationProperties;
-import org.thymeleaf.TemplateEngine;
 import org.thymeleaf.templatemode.TemplateMode;
 import org.thymeleaf.templateresolver.AbstractConfigurableTemplateResolver;
 
@@ -31,7 +30,6 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(classes = TemplateEngine.class)
 @ConfigurationProperties(ThymeleafViewsRendererConfigurationProperties.PREFIX)
 public class ThymeleafViewsRendererConfigurationProperties implements ThymeleafViewsRendererConfiguration {
 

File: views/src/main/java/io/micronaut/views/thymeleaf/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Contains classes specific to Views rendered with Thymeleaf.
  * @see <a href="https://www.thymeleaf.org">Thymeleaf</a>
@@ -21,9 +22,11 @@
  * @since 1.0
  */
 @Configuration
+@Requires(property = ThymeleafViewsRendererConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Requires(classes = TemplateEngine.class)
 package io.micronaut.views.thymeleaf;
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import org.thymeleaf.TemplateEngine;

File: views/src/main/java/io/micronaut/views/velocity/VelocityViewsRendererConfigurationProperties.java
Patch:
@@ -16,19 +16,17 @@
 package io.micronaut.views.velocity;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.views.ViewsConfigurationProperties;
-import org.apache.velocity.app.VelocityEngine;
 
 /**
  * {@link ConfigurationProperties} implementation of {@link VelocityViewsRendererConfiguration}.
  *
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(classes = VelocityEngine.class)
 @ConfigurationProperties(VelocityViewsRendererConfigurationProperties.PREFIX)
 public class VelocityViewsRendererConfigurationProperties implements VelocityViewsRendererConfiguration {
+
     public static final String PREFIX = ViewsConfigurationProperties.PREFIX + ".velocity";
 
     /**

File: views/src/main/java/io/micronaut/views/velocity/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Contains classes specific to Views rendered with Velocity.
  * @see <a href="http://velocity.apache.org">Velocity</a>
@@ -21,9 +22,11 @@
  * @since 1.0
  */
 @Configuration
+@Requires(property = VelocityViewsRendererConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Requires(classes = VelocityEngine.class)
 package io.micronaut.views.velocity;
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import org.apache.velocity.app.VelocityEngine;

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -84,7 +84,7 @@ public ObjectMapper objectMapper(@Nullable JacksonConfiguration jacksonConfigura
         ObjectMapper objectMapper = jsonFactory != null ? new ObjectMapper(jsonFactory) : new ObjectMapper();
 
         final boolean hasConfiguration = jacksonConfiguration != null;
-        if (hasConfiguration && jacksonConfiguration.isModuleScan()) {
+        if (!hasConfiguration || jacksonConfiguration.isModuleScan()) {
             objectMapper.findAndRegisterModules();
         }
         objectMapper.registerModules(jacksonModules);

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -116,7 +116,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
                 .stream()
                 .filter(JavaModelUtils::isClassOrInterface)
                 .map(modelUtils::classElementFor)
-                .filter(typeElement -> groovyObjectType == null || !typeUtils.isAssignable(typeElement.asType(), groovyObjectType))
+                .filter(typeElement -> typeElement == null || (groovyObjectType == null || !typeUtils.isAssignable(typeElement.asType(), groovyObjectType)))
                 .forEach((typeElement) -> {
                     String className = typeElement.getQualifiedName().toString();
                     List<LoadedVisitor> matchedVisitors = loadedVisitors.values().stream().filter((v) -> v.matches(typeElement)).collect(Collectors.toList());

File: runtime/src/main/java/io/micronaut/discovery/cloud/gcp/GoogleComputeInstanceMetadataResolver.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.type.MapType;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.discovery.cloud.ComputeInstanceMetadata;
@@ -177,8 +176,8 @@ public Optional<ComputeInstanceMetadata> resolve(Environment environment) {
                             });
                     instanceMetadata.setInterfaces(interfaces);
                 }
-                final MapType mapType = objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class);
-                instanceMetadata.setMetadata(objectMapper.convertValue(instanceMetadata, mapType));
+                final Map<?, ?> metadata = objectMapper.convertValue(instanceMetadata, Map.class);
+                populateMetadata(instanceMetadata, metadata);
                 cachedMetadata = instanceMetadata;
 
                 return Optional.of(instanceMetadata);

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java
Patch:
@@ -48,6 +48,7 @@
 @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)
 @Requires(property = FileWatchConfiguration.PATHS)
 @Requires(notEnv = {Environment.FUNCTION, Environment.ANDROID})
+@Requires(beans = WatchService.class)
 @Parallel
 public class DefaultWatchThread implements LifeCycle<DefaultWatchThread> {
 

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java
Patch:
@@ -53,7 +53,7 @@ public WatchService watchService() throws IOException {
         String name = System.getProperty("os.name").toLowerCase();
         boolean isMacOS = "Mac OS X".equalsIgnoreCase(name) || "Darwin".equalsIgnoreCase(name);
         if (isMacOS) {
-            LOG.warn("Using default File WatchService on OS X is slow. Consider adding 'io.methvin:directory-watcher' and 'net.java.dev.jna:jna' dependencies to use native file watch");
+            LOG.warn("Using default File WatchService on OS X is slow. Consider adding 'io.micronaut:micronaut-runtime-osx' dependencies to use native file watch");
         }
         return FileSystems.getDefault().newWatchService();
     }

File: http-client/src/main/java/io/micronaut/http/client/exceptions/ContentLengthExceededException.java
Patch:
@@ -27,13 +27,13 @@ public class ContentLengthExceededException extends HttpClientException {
      * @param receivedLength The received length
      */
     public ContentLengthExceededException(long maxLength, long receivedLength) {
-        super("The received length [" + receivedLength + "] exceeds the maximum content length [" + maxLength + "]");
+        super("The received length [" + receivedLength + "] exceeds the maximum allowed content length [" + maxLength + "]");
     }
 
     /**
      * @param maxLength The maximum length
      */
     public ContentLengthExceededException(long maxLength) {
-        super("The received length exceeds the maximum content length [" + maxLength + "]");
+        super("The received length exceeds the maximum allowed content length [" + maxLength + "]");
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/DefaultHttpContentProcessor.java
Patch:
@@ -78,7 +78,7 @@ protected void onUpstreamMessage(ByteBufHolder message) {
         long receivedLength = this.receivedLength.addAndGet(resolveLength(message));
 
         if ((advertisedLength != -1 && receivedLength > advertisedLength) || (receivedLength > requestMaxSize)) {
-            fireExceedsLength(receivedLength, advertisedLength == -1 ? requestMaxSize : advertisedLength);
+            fireExceedsLength(advertisedLength == -1 ? receivedLength : advertisedLength, requestMaxSize);
         } else {
             if (verifyPartDefinedSize(message)) {
                 publishVerifiedContent(message);

File: http/src/main/java/io/micronaut/http/exceptions/ContentLengthExceededException.java
Patch:
@@ -44,6 +44,6 @@ public ContentLengthExceededException(String message, Throwable cause) {
      * @param receivedLength   The received length
      */
     public ContentLengthExceededException(long advertisedLength, long receivedLength) {
-        this("The received length [" + receivedLength + "] exceeds the maximum content length [" + advertisedLength + "]");
+        this("The content length [" + receivedLength + "] exceeds the maximum allowed content length [" + advertisedLength + "]");
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/SingleBodyBinder.java
Patch:
@@ -70,7 +70,7 @@ public BindingResult<Single> bind(ArgumentConversionContext<Single> context, Htt
         Collection<Argument<?>> typeVariables = context.getArgument().getTypeVariables().values();
 
         BindingResult<Publisher> result = publisherBodyBinder.bind(
-            ConversionContext.of(Argument.of(Publisher.class, (Argument[]) typeVariables.toArray(new Argument[typeVariables.size()]))),
+            ConversionContext.of(Argument.of(Publisher.class, (Argument[]) typeVariables.toArray(Argument.ZERO_ARGUMENTS))),
             source
         );
         if (result.isPresentAndSatisfied()) {

File: core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java
Patch:
@@ -63,7 +63,7 @@ class SimpleBeanInfo implements BeanInfo {
     SimpleBeanInfo(Class<?> beanClass) {
         this.beanClass = beanClass;
         List<PropertyDescriptor> propertyList = introspectProperties(introspectMethods(beanClass));
-        if (propertyList.isEmpty()) {
+        if (CollectionUtils.isEmpty(propertyList)) {
             this.properties = Collections.emptyMap();
         } else {
             HashMap<String, PropertyDescriptor> propertyMap = new HashMap<>(propertyList.size());

File: security-session/src/main/java/io/micronaut/security/session/SessionLoginHandler.java
Patch:
@@ -77,7 +77,7 @@ public SessionLoginHandler(SecuritySessionConfiguration securitySessionConfigura
     @Override
     public HttpResponse loginSuccess(UserDetails userDetails, HttpRequest<?> request) {
         Session session = SessionForRequest.find(request).orElse(SessionForRequest.create(sessionStore, request));
-        session.put(SecurityFilter.AUTHENTICATION, new AuthenticationUserDetailsAdapter(userDetails));
+        session.put(SecurityFilter.AUTHENTICATION, new AuthenticationUserDetailsAdapter(userDetails, rolesKeyName));
         try {
             URI location = new URI(securitySessionConfiguration.getLoginSuccessTargetUrl());
             return HttpResponse.seeOther(location);

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -415,8 +415,8 @@ private static void pushValue(Type declaringType, ClassVisitor declaringClassWri
                         pushValue(declaringType, declaringClassWriter, methodVisitor, v, loadTypeMethods)
                 );
             }
-        } else if (value instanceof List) {
-            List array = (List) value;
+        } else if (value instanceof Collection) {
+            List array = Arrays.asList(((Collection) value).toArray());
             int len = array.size();
             if (len == 0) {
                 pushNewArray(methodVisitor, Object.class, len);

File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java
Patch:
@@ -423,7 +423,7 @@ private Publisher<Object> buildCacheInvalidatePublisher(
                                         emitter.onNext(o);
                                         emitter.onComplete();
                                     }
-                                });
+                                }, ioExecutor);
                             } else {
                                 CacheKeyGenerator keyGenerator = cacheOperation.getCacheInvalidateKeyGenerator(invalidateOperation);
                                 String[] parameterNames = invalidateOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY);

File: messaging/src/main/java/io/micronaut/messaging/annotation/Headers.java
Patch:
@@ -38,7 +38,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE})
+@Target({ElementType.TYPE, ElementType.METHOD})
 public @interface Headers {
 
     /***

File: configurations/hibernate-validator/src/test/groovy/io/micronaut/configuration/hibernate/validator/NoBean.java
Patch:
@@ -3,7 +3,6 @@
 import javax.validation.Payload;
 
 import javax.validation.Constraint;
-import javax.validation.Payload;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;

File: configurations/openapi/src/main/java/io/micronaut/openapi/util/YAMLGenerator.java
Patch:
@@ -14,6 +14,7 @@
 import java.io.*;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
@@ -554,7 +555,7 @@ public void writeRawUTF8String(byte[] text, int offset, int len) {
     @Override
     public final void writeUTF8String(byte[] text, int offset, int len)
             throws IOException {
-        writeString(new String(text, offset, len, "UTF-8"));
+        writeString(new String(text, offset, len, StandardCharsets.UTF_8));
     }
 
     /*

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/OpenApiApplicationVisitor.java
Patch:
@@ -58,7 +58,7 @@ public class OpenApiApplicationVisitor extends AbstractOpenApiVisitor implements
 
     @Override
     public void visitClass(ClassElement element, VisitorContext context) {
-        context.info("Generating OpenAPI Documentation");
+        context.info("Generating OpenAPI Documentation", element);
         Optional<OpenAPI> attr = context.get(ATTR_OPENAPI, OpenAPI.class);
         OpenAPI openAPI = readOpenAPI(element, context);
         if (attr.isPresent()) {
@@ -160,7 +160,7 @@ public void finish(VisitorContext visitorContext) {
                 String property = System.getProperty(MICRONAUT_OPENAPI_TARGET_FILE);
                 if (StringUtils.isNotEmpty(property)) {
                     File f = new File(property);
-                    visitorContext.info("Writing OpenAPI YAML to destination: " + f);
+                    visitorContext.info("Writing OpenAPI YAML to destination: " + f, classElement);
                     try {
                         f.getParentFile().mkdirs();
                         yamlMapper.writeValue(f, openAPI);
@@ -183,7 +183,7 @@ public void finish(VisitorContext visitorContext) {
                     if (generatedFile.isPresent()) {
                         GeneratedFile f = generatedFile.get();
                         try {
-                            visitorContext.info("Writing OpenAPI YAML to destination: " + f.toURI());
+                            visitorContext.info("Writing OpenAPI YAML to destination: " + f.toURI(), classElement);
                             Writer writer = f.openWriter();
                             yamlMapper.writeValue(writer, openAPI);
                         } catch (Exception e) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -92,11 +92,11 @@ public Annotation[] getDeclaredAnnotations() {
      * @param objects The objects
      * @return A unmodifiable, pooled set of strings
      */
-    @SuppressWarnings({"unused", "unchecked"})
+    @SuppressWarnings({"unused"})
     @UsedByGeneratedCode
     public static List<String> internListOf(Object... objects) {
         if (objects == null || objects.length == 0) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
 
         Integer hash = Arrays.hashCode(objects);
@@ -130,7 +130,7 @@ public static Map<String, Object> internMapOf(Object... values) {
             if (value == Collections.EMPTY_MAP) {
                 String key = values[0].toString().intern();
                 return INTERN_MAP_POOL.computeIfAbsent(key, s ->
-                        Collections.singletonMap(s, Collections.EMPTY_MAP)
+                        Collections.singletonMap(s, Collections.emptyMap())
                 );
             } else {
                 return StringUtils.internMapOf(values);

File: core/src/main/java/io/micronaut/core/bind/ArgumentBinder.java
Patch:
@@ -88,9 +88,8 @@ public boolean isSatisfied() {
         /**
          * @return The {@link ConversionError} instances that occurred
          */
-        @SuppressWarnings("unchecked")
         default List<ConversionError> getConversionErrors() {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
 
         /**

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathAnnotationScanner.java
Patch:
@@ -32,6 +32,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.List;
@@ -121,7 +122,7 @@ protected List<Class> doScan(String annotation, String pkg) {
                             LOG.debug("Ignoring file [" + url + "] due to URI error: " + e.getMessage(), e);
                         }
                     }
-                } else if (includeJars && Stream.of("jar", "zip", "war").anyMatch(it -> it.equals(protocol))) {
+                } else if (includeJars && Arrays.asList("jar", "zip", "war").contains(protocol)) {
                     URLConnection con = url.openConnection();
                     if (con instanceof JarURLConnection) {
                         JarURLConnection jarCon = (JarURLConnection) con;

File: core/src/main/java/io/micronaut/core/value/OptionalValues.java
Patch:
@@ -36,7 +36,7 @@ public interface OptionalValues<V> extends Iterable<CharSequence> {
     /**
      * Constant for empty values.
      */
-    OptionalValues EMPTY_VALUES = of(Object.class, Collections.EMPTY_MAP);
+    OptionalValues EMPTY_VALUES = of(Object.class, Collections.emptyMap());
 
     /**
      * Retrieve a value if it is present.

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -172,6 +172,6 @@ default <T> T getRequiredProperty(String name, Class<T> requiredType) throws Pro
      * @return The property name
      */
     static String nameOf(String... path) {
-        return Arrays.stream(path).collect(Collectors.joining("."));
+        return String.join(".", path);
     }
 }

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -299,7 +299,7 @@ void setExecutionService(@Named(TaskExecutors.IO) @Nullable ExecutorService exec
      * @return A set of calculated property names
      */
     private Set<String> calcPropertySourceNames(String prefix, Set<String> activeNames) {
-        return ClientUtil.calcPropertySourceNames(prefix, activeNames);
+        return ClientUtil.calcPropertySourceNames(prefix, activeNames, "_");
     }
 
     /**

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/HealthEntry.java
Patch:
@@ -34,8 +34,7 @@ public class HealthEntry {
 
     private NodeEntry node;
     private ServiceEntry service;
-    @SuppressWarnings("unchecked")
-    private List<Check> checks = Collections.EMPTY_LIST;
+    private List<Check> checks = Collections.emptyList();
 
     /**
      * @return The node for this health entry

File: function/src/test/groovy/io/micronaut/function/executor/FunctionInitializerSpec.java
Patch:
@@ -31,7 +31,7 @@ public class FunctionInitializerSpec   {
 
     @Test
     public void testFunctionInitializer() {
-        Assert.assertEquals(new MathFunction().round(1.6f) , 2);
+        Assert.assertEquals(2, new MathFunction().round(1.6f));
     }
 
     @Singleton

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/HeaderTest.java
Patch:
@@ -25,7 +25,7 @@ public void testSenderHeaders() throws Exception {
 
             Assert.assertNotNull(pet);
 
-            Assert.assertEquals(pet.getAge(), 11);
+            Assert.assertEquals(11, pet.getAge());
         }
 
     }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/PetController.java
Patch:
@@ -5,7 +5,6 @@
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Header;
 import io.micronaut.http.client.docs.annotation.Pet;
-import io.reactivex.Single;
 
 @Controller("/pets")
 public class PetController {

File: http-client/src/test/groovy/io/micronaut/http/client/docs/httpstatus/StatusController.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.http.client.docs.httpstatus;
 
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Controller;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/sse/HeadlineControllerTest.java
Patch:
@@ -5,7 +5,6 @@
 import io.micronaut.http.sse.Event;
 import io.micronaut.runtime.server.EmbeddedServer;
 import org.junit.Test;
-import reactor.core.publisher.Mono;
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerPublisher.java
Patch:
@@ -357,7 +357,7 @@ private void illegalDemand() {
     private void flushBuffer() {
         while (!buffer.isEmpty() && (outstandingDemand > 0 || outstandingDemand == Long.MAX_VALUE)) {
             if (LOG.isTraceEnabled()) {
-                LOG.trace("HandlerPublisher (state: {}) release message from buffer to satisfy demand: ", state, outstandingDemand);
+                LOG.trace("HandlerPublisher (state: {}) release message from buffer to satisfy demand: {}", state, outstandingDemand);
             }
             publishMessage(buffer.remove());
         }

File: http/src/main/java/io/micronaut/http/MutableHttpRequest.java
Patch:
@@ -67,7 +67,7 @@ public interface MutableHttpRequest<B> extends HttpRequest<B>, MutableHttpMessag
      */
     default MutableHttpRequest<B> accept(MediaType... mediaTypes) {
         if (ArrayUtils.isNotEmpty(mediaTypes)) {
-            String acceptString = Arrays.stream(mediaTypes).collect(Collectors.joining(","));
+            String acceptString = String.join(",", mediaTypes);
             header(HttpHeaders.ACCEPT, acceptString);
         }
         return this;

File: inject-groovy/src/test/groovy/io/micronaut/inject/configproperties/TestEndpoint.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.ConfigurationReader;
-import io.micronaut.context.annotation.Requires;
 
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;

File: inject-java/src/test/groovy/io/micronaut/inject/annotation/TestMetadata.java
Patch:
@@ -2,11 +2,8 @@
 
 import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.annotation.AnnotationUtil;
-import io.micronaut.core.annotation.AnnotationValue;
 import io.reactivex.Flowable;
 
-import java.util.Collections;
-
 public class TestMetadata extends DefaultAnnotationMetadata {
     public TestMetadata() {
     }

File: inject-java/src/test/groovy/io/micronaut/inject/configproperties/ValidatedConfig.java
Patch:
@@ -16,13 +16,14 @@
 package io.micronaut.inject.configproperties;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-import org.hibernate.validator.constraints.NotBlank;
 
 import javax.validation.constraints.NotNull;
+import javax.validation.constraints.NotBlank;
 import java.net.URL;
 
 @ConfigurationProperties("foo.bar")
 public class ValidatedConfig {
+
     @NotNull
     URL url;
 

File: inject-java/src/test/groovy/io/micronaut/inject/context/processor/ProcessedAnnotation.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.DefaultScope;
-import io.micronaut.context.annotation.Executable;
 
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;

File: inject-java/src/test/groovy/io/micronaut/inject/factory/inject/MyFactory.java
Patch:
@@ -4,7 +4,6 @@
 import io.micronaut.context.annotation.Factory;
 
 import javax.inject.Inject;
-import javax.inject.Singleton;
 
 @Factory
 public class MyFactory {

File: inject-java/src/test/groovy/io/micronaut/inject/foreach/SomeConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.context.annotation.Parameter;
 
 import javax.annotation.Nullable;
-import javax.sql.DataSource;
 
 @EachProperty("someconf")
 public class SomeConfiguration {
@@ -41,4 +40,4 @@ public MyConfiguration getOtherConfig() {
     public String getNameQualifier() {
         return nameQualifier;
     }
-}
\ No newline at end of file
+}

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/compose/Composes.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.annotation.DefaultScope;
 import io.micronaut.context.annotation.Primary;
-import io.micronaut.context.annotation.Requires;
 
 import javax.inject.Singleton;
 import java.lang.annotation.Retention;

File: inject-java/src/test/groovy/io/micronaut/inject/qualifiers/replaces/E1Replacement.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.micronaut.context.annotation.Replaces;
 
-import javax.inject.Named;
 import javax.inject.Singleton;
 
 @Singleton

File: inject-java/src/test/java/io/micronaut/docs/env/EachBeanTest.java
Patch:
@@ -47,7 +47,7 @@ public void testEachBean() throws URISyntaxException {
 
         // tag::beans[]
         Collection<DataSource> beansOfType = applicationContext.getBeansOfType(DataSource.class);
-        assertEquals(beansOfType.size(), 2); // <1>
+        assertEquals(2, beansOfType.size()); // <1>
 
         DataSource firstConfig = applicationContext.getBean(
                 DataSource.class,

File: inject-java/src/test/java/io/micronaut/docs/env/EachPropertyTest.java
Patch:
@@ -46,16 +46,16 @@ public void testEachProperty() throws URISyntaxException {
 
         // tag::beans[]
         Collection<DataSourceConfiguration> beansOfType = applicationContext.getBeansOfType(DataSourceConfiguration.class);
-        assertEquals(beansOfType.size(), 2); // <1>
+        assertEquals(2, beansOfType.size()); // <1>
 
         DataSourceConfiguration firstConfig = applicationContext.getBean(
                 DataSourceConfiguration.class,
                 Qualifiers.byName("one") // <2>
         );
 
         assertEquals(
-                firstConfig.getUrl(),
-                new URI("jdbc:mysql://localhost/one")
+                new URI("jdbc:mysql://localhost/one"),
+                firstConfig.getUrl()
         );
         // end::beans[]
     }

File: inject-java/src/test/java/io/micronaut/docs/env/EnvironmentTest.java
Patch:
@@ -57,8 +57,8 @@ public void testRunEnvironmentWithProperties() {
         Environment environment = applicationContext.getEnvironment();
 
         assertEquals(
-                environment.getProperty("micronaut.server.host", String.class).orElse("localhost"),
-                "foo"
+                "foo",
+                environment.getProperty("micronaut.server.host", String.class).orElse("localhost")
         );
         // end::envProps[]
 

File: inject-java/src/test/java/io/micronaut/docs/replaces/MockBookService.java
Patch:
@@ -17,8 +17,6 @@
 package io.micronaut.docs.replaces;
 
 import io.micronaut.context.annotation.Replaces;
-import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.env.Environment;
 import io.micronaut.docs.requires.Book;
 
 import javax.inject.Singleton;

File: inject-java/src/test/java/org/atinject/tck/auto/Convertible.java
Patch:
@@ -194,7 +194,7 @@ public void testFieldsInjected() {
         }
 
         public void testProviderReturnedValues() {
-            assertTrue(engine != null);
+            assertNotNull(engine);
         }
 
         // injecting different kinds of members

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2091,7 +2091,7 @@ private <T> Collection<T> getBeansOfTypeInternal(@Nullable BeanResolutionContext
                             if (LOG.isTraceEnabled()) {
 
                                 if (registeredQualifier != null) {
-                                    LOG.trace("Found existing bean for type {} {}: {} ", beanType.getName(), instance);
+                                    LOG.trace("Found existing bean for type {}: {} ", beanType.getName(), instance);
                                 } else {
                                     LOG.trace("Found existing bean for type {}: {} ", beanType.getName(), instance);
                                 }

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -58,9 +58,8 @@ class AnnotationMetadataSupport {
      * @param annotation The annotation
      * @return The default values for the annotation
      */
-    @SuppressWarnings("unchecked")
     static Map<String, Object> getDefaultValues(String annotation) {
-        return ANNOTATION_DEFAULTS.computeIfAbsent(annotation, s -> Collections.EMPTY_MAP);
+        return ANNOTATION_DEFAULTS.computeIfAbsent(annotation, s -> Collections.emptyMap());
     }
 
     /**

File: router/src/test/groovy/io/micronaut/context/router/RouteBuilderTests.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.http.HttpMethod;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.annotation.Controller;
 import org.junit.Test;
 import io.micronaut.web.router.*;
 

File: runtime/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -128,8 +128,7 @@ public static class InstanceConfiguration {
         private String id;
         private String group;
         private String zone;
-        @SuppressWarnings("unchecked")
-        private Map<String, String> metadata = Collections.EMPTY_MAP;
+        private Map<String, String> metadata = Collections.emptyMap();
 
         /**
          * @return An optional instance identifier

File: runtime/src/test/groovy/io/micronaut/runtime/event/annotation/AsyncListener.java
Patch:
@@ -5,7 +5,6 @@
 
 import javax.inject.Singleton;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionStage;
 
 @Singleton
 public class AsyncListener {

File: runtime/src/test/groovy/io/micronaut/scheduling/exceptions/ThrowsExceptionJob3.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.scheduling.exceptions;
 
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.core.reflect.exception.InstantiationException;
 import io.micronaut.core.reflect.exception.InvocationException;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.annotation.Scheduled;

File: spring/src/main/java/io/micronaut/spring/beans/MicronautBeanProcessor.java
Patch:
@@ -107,7 +107,6 @@ public io.micronaut.context.env.Environment getEnvironment() {
         micronautContext.start();
 
         micronautBeanQualifierTypes
-                .stream()
                 .forEach(micronautBeanQualifierType -> {
             Qualifier<Object> micronautBeanQualifier;
             if (micronautBeanQualifierType.isAnnotation()) {
@@ -116,7 +115,6 @@ public io.micronaut.context.env.Environment getEnvironment() {
                 micronautBeanQualifier = Qualifiers.byType(micronautBeanQualifierType);
             }
             micronautContext.getBeanDefinitions(micronautBeanQualifier)
-                    .stream()
                     .forEach(definition -> {
                         final BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder
                                 .rootBeanDefinition(MicronautSpringBeanFactory.class.getName());

File: test-suite/src/test/groovy/io/micronaut/docs/server/routes/IssuesControllerTest.java
Patch:
@@ -58,8 +58,8 @@ public void testIssue() throws Exception {
         String body = client.toBlocking().retrieve("/issues/12"); // <2>
         assertNotNull(body);
         assertEquals( // <3>
-                body,
-                "Issue # 12!"
+                "Issue # 12!",
+                body
         );
     }
     // end::test[]

File: test-suite/src/test/groovy/io/micronaut/docs/server/uris/UriTemplateTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.micronaut.docs.server.uris;
 
 import io.micronaut.http.uri.UriMatchTemplate;
-import io.micronaut.http.uri.UriTemplate;
 import static org.junit.Assert.*;
 import org.junit.Test;
 
@@ -16,9 +15,9 @@ public void testUriTemplate() {
         UriMatchTemplate template = UriMatchTemplate.of("/hello/{name}");
 
         assertTrue(template.match("/hello/John").isPresent()); // <1>
-        assertEquals(template.expand(  // <2>
+        assertEquals("/hello/John", template.expand(  // <2>
                 Collections.singletonMap("name", "John")
-        ), "/hello/John");
+        ));
         // end::match[]
     }
 }

File: validation/src/test/groovy/io/micronaut/validation/BookmarkController.java
Patch:
@@ -3,7 +3,6 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
-import io.micronaut.http.annotation.QueryValue;
 
 import javax.annotation.Nullable;
 import javax.validation.Valid;

File: core/src/main/java/io/micronaut/core/io/file/DefaultFileSystemResourceLoader.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.core.io.ResourceLoader;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;

File: core/src/main/java/io/micronaut/core/util/functional/ThrowingSupplier.java
Patch:
@@ -20,6 +20,7 @@ public interface ThrowingSupplier<T, E extends Throwable> {
     /**
      * Gets a result.
      *
+     * @throws E the type of exception that can be thrown
      * @return a result
      */
     T get() throws E;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/configuration/NamedClientVersioningConfiguration.java
Patch:
@@ -18,19 +18,19 @@
 
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
-import io.micronaut.http.client.annotation.Client;
 
 import static io.micronaut.http.client.interceptor.configuration.ClientVersioningConfiguration.DEFAULT;
 
 /**
- * Client versioning configuration for named configurations nested under {@code micronaut.http.client.versioning}
+ * Client versioning configuration for named configurations nested under {@code micronaut.http.client.versioning}.
  */
 @EachProperty(value = ClientVersioningConfiguration.PREFIX, primary = DEFAULT)
 public class NamedClientVersioningConfiguration extends ClientVersioningConfiguration {
+
     /**
      * Creates a new configuration for the given client ID.
      *
-     * @param clientName ID of the {@link Client} to apply configuration for.
+     * @param clientName ID of the {@link io.micronaut.http.client.annotation.Client} to apply configuration for.
      */
     NamedClientVersioningConfiguration(@Parameter String clientName) {
         super(clientName);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
-import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.DefaultHttpResponse;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
-import io.micronaut.http.server.types.CustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 import io.micronaut.http.server.types.files.SystemFile;

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.http.uri;
 
 import java.util.*;
-import java.util.function.Predicate;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.annotation.processing;
 
-import io.micronaut.annotation.processing.visitor.JavaVisitorContext;
 import io.micronaut.core.annotation.AnnotationUtil;
 import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.util.StringUtils;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.annotation.processing.PublicMethodVisitor;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.naming.NameUtils;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.ElementModifier;
 import io.micronaut.inject.ast.FieldElement;

File: inject/src/main/java/io/micronaut/context/env/ComputePlatform.java
Patch:
@@ -38,7 +38,7 @@ public enum ComputePlatform {
     AZURE,
 
     /**
-     * Digital Ocean
+     * Digital Ocean.
      */
     DIGITAL_OCEAN,
 
@@ -55,5 +55,5 @@ public enum ComputePlatform {
     /**
      * Other.
      */
-    OTHER;
+    OTHER
 }

File: inject/src/main/java/io/micronaut/inject/writer/FileBackedGeneratedFile.java
Patch:
@@ -19,8 +19,6 @@
 import io.micronaut.core.annotation.Internal;
 
 import java.io.File;
-import java.io.FileReader;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;

File: security/src/main/java/io/micronaut/security/authentication/jackson/SecurityJacksonModule.java
Patch:
@@ -40,6 +40,9 @@ public SecurityJacksonModule() {
         super("micronaut.security");
     }
 
+    /**
+     * Customizes the module.
+     */
     @PostConstruct
     protected void customize() {
         SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();

File: security/src/main/java/io/micronaut/security/token/TokenAuthenticationFetcher.java
Patch:
@@ -53,8 +53,8 @@ public class TokenAuthenticationFetcher implements AuthenticationFetcher {
     public static final Integer ORDER = 0;
 
     protected final Collection<TokenValidator> tokenValidators;
-    private final TokenResolver tokenResolver;
     protected final ApplicationEventPublisher eventPublisher;
+    private final TokenResolver tokenResolver;
 
     /**
      * @param tokenValidators The list of {@link TokenValidator} which attempt to validate the request
@@ -85,7 +85,6 @@ public TokenAuthenticationFetcher(Collection<TokenValidator> tokenValidators,
         this(tokenValidators, new DefaultTokenResolver(tokenReaders), eventPublisher);
     }
 
-
     @Override
     public Publisher<Authentication> fetchAuthentication(HttpRequest<?> request) {
 

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -22,7 +22,6 @@
 import brave.http.HttpClientHandler;
 import brave.http.HttpTracing;
 import brave.propagation.TraceContext;
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.*;
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
 import io.micronaut.tracing.instrument.http.AbstractOpenTracingFilter;

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.tracing.instrument.http;
 
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.*;
 import io.micronaut.http.filter.HttpFilter;
 import io.opentracing.Span;

File: views/src/main/java/io/micronaut/views/freemarker/FreemarkerViewsRenderer.java
Patch:
@@ -22,9 +22,7 @@
 import freemarker.template.TemplateException;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.cli.exceptions.ParseException;
-import io.micronaut.core.io.ResourceLoader;
 import io.micronaut.core.io.Writable;
-import io.micronaut.core.io.scan.ClassPathResourceLoader;
 import io.micronaut.core.util.ArgumentUtils;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Produces;

File: core/src/main/java/io/micronaut/core/io/Streamable.java
Patch:
@@ -18,11 +18,11 @@
 
 import javax.annotation.Nullable;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 
 /**
  * Interface for types that can be written to an {@link java.io.OutputStream}.
@@ -48,7 +48,7 @@ public interface Streamable {
      * @throws IOException if an error occurred while outputting data to the writer
      */
     default void writeTo(File file) throws IOException {
-        try (FileOutputStream outputStream = new FileOutputStream(file)) {
+        try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {
             writeTo(outputStream);
         }
     }

File: core/src/main/java/io/micronaut/core/io/Writable.java
Patch:
@@ -18,13 +18,13 @@
 
 import javax.annotation.Nullable;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 
 /**
  * <p>An interface for classes to implement that are capable of writing themselves to a {@link Writer}</p>.
@@ -58,7 +58,7 @@ default void writeTo(OutputStream outputStream) throws IOException {
      * @throws IOException if an error occurred while outputting data to the writer
      */
     default void writeTo(File file) throws IOException {
-        try (FileOutputStream outputStream = new FileOutputStream(file)) {
+        try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {
             writeTo(outputStream);
         }
     }

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathAnnotationScanner.java
Patch:
@@ -22,7 +22,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.JarURLConnection;
@@ -199,7 +198,7 @@ protected void scanFile(String annotation, File file, List<Class> classes) {
         if (fileName.endsWith(".class")) {
             // ignore generated classes
             if (fileName.indexOf('$') == -1) {
-                try (FileInputStream inputStream = new FileInputStream(file)) {
+                try (InputStream inputStream = Files.newInputStream(file.toPath())) {
                     scanInputStream(annotation, inputStream, classes);
                 } catch (IOException e) {
                     if (LOG.isDebugEnabled()) {

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -28,9 +28,9 @@
 
 import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.Files;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
@@ -519,7 +519,7 @@ protected void writeClassToDisk(File targetDir, ClassWriter classWriter, String
             File targetFile = new File(targetDir, fileName);
             targetFile.getParentFile().mkdirs();
 
-            try (FileOutputStream outputStream = new FileOutputStream(targetFile)) {
+            try (OutputStream outputStream = Files.newOutputStream(targetFile.toPath())) {
                 writeClassToDisk(outputStream, classWriter);
             }
         }

File: inject/src/main/java/io/micronaut/inject/writer/DirectoryClassWriterOutputVisitor.java
Patch:
@@ -19,9 +19,9 @@
 import io.micronaut.core.annotation.Internal;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.Files;
 import java.util.Optional;
 
 /**
@@ -49,7 +49,7 @@ public OutputStream visitClass(String className) throws IOException {
         if (!parentDir.exists() && !parentDir.mkdirs()) {
             throw new IOException("Cannot create parent directory: " + targetFile.getParentFile());
         }
-        return new FileOutputStream(targetFile);
+        return Files.newOutputStream(targetFile.toPath());
     }
 
     @Override

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfiguration.java
Patch:
@@ -37,8 +37,9 @@ public class AWSParameterStoreConfiguration extends AWSClientConfiguration imple
      * Constant for whether AWS parameter store is enabled or not.
      */
     public static final String ENABLED = "aws.client.system-manager.parameterstore.enabled";
+
     /**
-     * The perfix for configuration.
+     * The prefix for configuration.
      */
     public static final String CONFIGURATION_PREFIX = "system-manager.parameterstore";
 

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -122,8 +122,7 @@ protected BindingResult<T> doConvert(Object value, ArgumentConversionContext<T>
         Optional<T> result = conversionService.convert(value, context);
         if (result.isPresent() && context.getArgument().getType() == Optional.class) {
             return () -> (Optional<T>) result.get();
-        } else {
-            return () -> result;
         }
+        return () -> result;
     }
 }

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathAnnotationScanner.java
Patch:
@@ -92,10 +92,9 @@ protected ClassPathAnnotationScanner includeJars(boolean includeJars) {
     public Stream<Class> scan(String annotation, String pkg) {
         if (pkg == null) {
             return Stream.empty();
-        } else {
-            List<Class> classes = doScan(annotation, pkg);
-            return classes.stream();
         }
+        List<Class> classes = doScan(annotation, pkg);
+        return classes.stream();
     }
 
     /**

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -41,8 +41,8 @@
 public class ClassUtils {
 
     public static final int EMPTY_OBJECT_ARRAY_HASH_CODE = Arrays.hashCode(ArrayUtils.EMPTY_OBJECT_ARRAY);
-    public static final Map<String, Class> COMMON_CLASS_MAP = new HashMap<>(25);
-    public static final Map<String, Class> BASIC_TYPE_MAP = new HashMap<>(10);
+    public static final Map<String, Class> COMMON_CLASS_MAP = new HashMap<>(34);
+    public static final Map<String, Class> BASIC_TYPE_MAP = new HashMap<>(18);
     public static final String CLASS_EXTENSION = ".class";
     
     static final List<ClassLoadingReporter> CLASS_LOADING_REPORTERS;

File: core/src/main/java/io/micronaut/core/reflect/GenericTypeUtils.java
Patch:
@@ -188,7 +188,8 @@ private static Optional<Class> resolveParameterizedTypeArgument(Type actualTypeA
         ParameterizedType pt;
         if (actualTypeArgument instanceof Class) {
             return Optional.of((Class) actualTypeArgument);
-        } else if (actualTypeArgument instanceof ParameterizedType) {
+        }
+        if (actualTypeArgument instanceof ParameterizedType) {
             pt = (ParameterizedType) actualTypeArgument;
             Type rawType = pt.getRawType();
             if (rawType instanceof Class) {

File: core/src/main/java/io/micronaut/core/serialize/JdkSerializer.java
Patch:
@@ -105,9 +105,8 @@ protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, Clas
                 Optional<Class> aClass = ClassUtils.forName(desc.getName(), requiredType.getClassLoader());
                 if (aClass.isPresent()) {
                     return aClass.get();
-                } else {
-                    return super.resolveClass(desc);
                 }
+                return super.resolveClass(desc);
             }
         };
     }

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -102,9 +102,8 @@ public static String toString(@Nullable Object[] array) {
     public static String toString(String delimiter, @Nullable Object[] array) {
         if (isEmpty(array)) {
             return "";
-        } else {
-            List<Object> list = Arrays.asList(array);
-            return CollectionUtils.toString(delimiter, list);
         }
+        List<Object> list = Arrays.asList(array);
+        return CollectionUtils.toString(delimiter, list);
     }
 }

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -130,7 +130,7 @@ public static Map<String, Object> internMapOf(Object... values) {
             throw new IllegalArgumentException("Number of arguments should be an even number representing the keys and values");
         }
 
-        Map<String, Object> answer = new HashMap<>(len / 2);
+        Map<String, Object> answer = new HashMap<>((int) (len / 2 / 0.75));
         int i = 0;
         while (i < values.length - 1) {
             String key = values[i++].toString().intern();

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -121,10 +121,11 @@ PathItem resolvePathItem(VisitorContext context, UriMatchTemplate matchTemplate)
         }
 
 
-        PathItem pathItem = paths.get(matchTemplate.toString());
+        final String pathString = matchTemplate.toPathString();
+        PathItem pathItem = paths.get(pathString);
         if (pathItem == null) {
             pathItem = new PathItem();
-            paths.put(matchTemplate.toString(), pathItem);
+            paths.put(pathString, pathItem);
         }
         return pathItem;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -183,9 +183,6 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
-                FullHttpMessage message = (FullHttpMessage) inMsg;
-                // will be released by fireChannelRead
-                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/SpringCloudConfigurationClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.spring.config;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
 import io.micronaut.context.env.Environment;
@@ -56,6 +57,7 @@
 @RequiresSpringCloudConfig
 @Requires(beans = SpringCloudConfigClient.class)
 @Requires(property = ConfigurationClient.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)
+@BootstrapContextCompatible
 public class SpringCloudConfigurationClient implements ConfigurationClient {
 
     private static final Logger LOG = LoggerFactory.getLogger(SpringCloudConfigurationClient.class);

File: discovery-client/src/main/java/io/micronaut/discovery/spring/config/client/SpringCloudConfigClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.spring.config.client;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.discovery.spring.SpringCloudConfigConfiguration;
 import io.micronaut.http.client.annotation.Client;
@@ -28,6 +29,7 @@
  */
 @Client(value = SpringCloudConfigConfiguration.SPRING_CLOUD_CONFIG_ENDPOINT, configuration = SpringCloudConfigConfiguration.class)
 @Requires(beans = SpringCloudConfigConfiguration.class)
+@BootstrapContextCompatible
 public interface SpringCloudConfigClient extends SpringCloudConfigOperations {
 
     String CLIENT_DESCRIPTION = "spring-cloud-config-client";

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/converters/RxJavaConverterRegistrar.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.reactive.rxjava2.converters;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.TypeConverterRegistrar;
@@ -37,6 +38,7 @@
  */
 @Singleton
 @Requires(classes = Flowable.class)
+@BootstrapContextCompatible
 public class RxJavaConverterRegistrar implements TypeConverterRegistrar {
 
     @SuppressWarnings("unchecked")

File: security/src/main/java/io/micronaut/security/token/basicauth/BasicAuthTokenReaderConfigurationProperties.java
Patch:
@@ -32,7 +32,7 @@
 @ConfigurationProperties(BasicAuthTokenReaderConfigurationProperties.PREFIX)
 public class BasicAuthTokenReaderConfigurationProperties implements BasicAuthTokenReaderConfiguration {
 
-    public static final String PREFIX = TokenConfigurationProperties.PREFIX + ".basicAuth";
+    public static final String PREFIX = TokenConfigurationProperties.PREFIX + ".basic-auth";
 
     /**
      * The default enable value.

File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.buffer.netty;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.io.buffer.ByteBuffer;
@@ -35,6 +36,7 @@
  */
 @Internal
 @Singleton
+@BootstrapContextCompatible
 public class NettyByteBufferFactory implements ByteBufferFactory<ByteBufAllocator, ByteBuf> {
 
     /**

File: configurations/aws-common/src/main/java/io/micronaut/configuration/aws/AWSClientConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.configuration.aws;
 
 import com.amazonaws.ClientConfiguration;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationBuilder;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
@@ -29,6 +30,7 @@
  */
 @ConfigurationProperties("client")
 @Requires(classes = com.amazonaws.ClientConfiguration.class)
+@BootstrapContextCompatible
 public class AWSClientConfiguration extends AWSConfiguration {
 
     @ConfigurationBuilder

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -21,6 +21,7 @@
 import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementAsyncClient;
 import com.amazonaws.services.simplesystemsmanagement.model.*;
 import io.micronaut.configuration.aws.AWSClientConfiguration;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.EnvironmentPropertySource;
@@ -58,6 +59,7 @@
 @Requires(classes = {AWSSimpleSystemsManagementAsyncClient.class, AWSClientConfiguration.class})
 @Requires(env = Environment.AMAZON_EC2)
 @Requires(beans = AWSParameterStoreConfiguration.class)
+@BootstrapContextCompatible
 public class AWSParameterStoreConfigClient implements ConfigurationClient {
 
     private static final Logger LOG = LoggerFactory.getLogger(AWSParameterStoreConfiguration.class);

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.discovery.aws.parameterstore;
 
 import io.micronaut.configuration.aws.AWSClientConfiguration;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
@@ -29,6 +30,7 @@
 @Requires(env = Environment.AMAZON_EC2)
 @Requires(property = AWSParameterStoreConfiguration.ENABLED, value = "true", defaultValue = "false")
 @ConfigurationProperties(AWSParameterStoreConfiguration.CONFIGURATION_PREFIX)
+@BootstrapContextCompatible
 public class AWSParameterStoreConfiguration extends AWSClientConfiguration implements Toggleable  {
 
     /**

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/Route53ClientDiscoveryConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.aws.route53;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
@@ -37,6 +38,7 @@
 @Requires(env = Environment.AMAZON_EC2)
 @Requires(property = Route53AutoNamingClient.ENABLED, value = "true", defaultValue = "false")
 @ConfigurationProperties(Route53ClientDiscoveryConfiguration.PREFIX)
+@BootstrapContextCompatible
 public class Route53ClientDiscoveryConfiguration extends DiscoveryClientConfiguration {
 
     public static final String SERVICE_ID = "route53";

File: discovery-client/src/main/java/io/micronaut/discovery/client/config/DistributedPropertySourceLocator.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.client.config;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.annotation.Value;
 import io.micronaut.context.env.BootstrapPropertySourceLocator;
@@ -46,6 +47,7 @@
  */
 @Singleton
 @Requires(property = ConfigurationClient.ENABLED, value = "true", defaultValue = "false")
+@BootstrapContextCompatible
 public class DistributedPropertySourceLocator implements BootstrapPropertySourceLocator {
     private static final Logger LOG = LoggerFactory.getLogger(DistributedPropertySourceLocator.class);
     private final ConfigurationClient configurationClient;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulServiceInstanceList.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.consul;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.discovery.client.DiscoveryServerInstanceList;
 import io.micronaut.discovery.consul.client.v1.ConsulClient;
 import io.micronaut.discovery.consul.condition.RequiresConsul;
@@ -36,6 +37,7 @@
  */
 @Singleton
 @RequiresConsul
+@BootstrapContextCompatible
 public class ConsulServiceInstanceList extends DiscoveryServerInstanceList {
 
     /**

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/AbstractConsulClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.consul.client.v1;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.async.publisher.Publishers;
@@ -44,6 +45,7 @@
 @Client(id = ConsulClient.SERVICE_ID, path = "/v1", configuration = ConsulConfiguration.class)
 @Requires(beans = ConsulConfiguration.class)
 @TypeHint({TTLCheck.class, HTTPCheck.class})
+@BootstrapContextCompatible
 public abstract class AbstractConsulClient implements ConsulClient {
 
     static final String CONSUL_REGISTRATION_RETRY_COUNT = "${" + ConsulConfiguration.ConsulRegistrationConfiguration.PREFIX + ".retry-count:10}";

File: discovery-client/src/main/java/io/micronaut/discovery/consul/config/ConsulConfigurationClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.consul.config;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.EnvironmentPropertySource;
@@ -66,6 +67,7 @@
 @RequiresConsul
 @Requires(beans = ConsulClient.class)
 @Requires(property = ConfigurationClient.ENABLED, value = "true", defaultValue = "false")
+@BootstrapContextCompatible
 public class ConsulConfigurationClient implements ConfigurationClient {
 
     private final ConsulClient consulClient;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.buffer.netty.NettyByteBufferFactory;
 import io.micronaut.context.BeanContext;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Prototype;
@@ -140,6 +141,7 @@
 @Prototype
 @Primary
 @Internal
+@BootstrapContextCompatible
 public class DefaultHttpClient implements RxWebSocketClient, RxHttpClient, RxStreamingHttpClient, RxSseClient, Closeable, AutoCloseable {
 
     protected static final String HANDLER_AGGREGATOR = "http-aggregator";

File: http-client/src/main/java/io/micronaut/http/client/DefaultLoadBalancerResolver.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.http.client;
 
 import io.micronaut.context.BeanContext;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.CollectionUtils;
@@ -45,6 +46,7 @@
  * @since 1.0
  */
 @Singleton
+@BootstrapContextCompatible
 public class DefaultLoadBalancerResolver implements LoadBalancerResolver {
 
     private final Map<String, ServiceInstanceList> serviceInstanceLists;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -21,6 +21,7 @@
 import com.fasterxml.jackson.databind.SerializationFeature;
 import io.micronaut.aop.MethodInterceptor;
 import io.micronaut.aop.MethodInvocationContext;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.exceptions.ConfigurationException;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionContext;
@@ -93,6 +94,7 @@
  */
 @Singleton
 @Internal
+@BootstrapContextCompatible
 public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, Object>, Closeable, AutoCloseable {
 
     private static final Logger LOG = LoggerFactory.getLogger(DefaultHttpClient.class);

File: http-client/src/main/java/io/micronaut/http/client/loadbalance/ServiceInstanceListLoadBalancerFactory.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.http.client.loadbalance;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.http.client.LoadBalancer;
 
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Singleton
+@BootstrapContextCompatible
 public class ServiceInstanceListLoadBalancerFactory {
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/ssl/NettyClientSslBuilder.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.http.client.ssl;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.io.ResourceResolver;
 import io.micronaut.http.ssl.*;
@@ -41,6 +42,7 @@
  */
 @Singleton
 @Internal
+@BootstrapContextCompatible
 public class NettyClientSslBuilder extends SslBuilder<SslContext> {
 
     /**

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.http.ssl;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import javax.annotation.Nullable;
@@ -28,6 +29,7 @@
  * @since 1.0
  */
 @ConfigurationProperties(ClientSslConfiguration.PREFIX)
+@BootstrapContextCompatible
 public class ClientSslConfiguration extends SslConfiguration {
 
     /**

File: runtime/src/main/java/io/micronaut/discovery/config/DefaultCompositeConfigurationClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.config;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.PropertySource;
@@ -36,6 +37,7 @@
  */
 @Singleton
 @Primary
+@BootstrapContextCompatible
 public class DefaultCompositeConfigurationClient implements ConfigurationClient {
 
     private final ConfigurationClient[] configurationClients;

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -21,6 +21,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.io.buffer.ByteBufferFactory;
@@ -45,6 +46,7 @@
  * @since 1.0
  */
 @Singleton
+@BootstrapContextCompatible
 public class JsonMediaTypeCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json";

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonStreamMediaTypeCodec.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.jackson.codec;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.http.MediaType;
 import io.micronaut.runtime.ApplicationConfiguration;
@@ -36,6 +37,7 @@
  * @since 1.0
  */
 @Singleton
+@BootstrapContextCompatible
 public class JsonStreamMediaTypeCodec extends JsonMediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "json-stream";

File: runtime/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.runtime;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.naming.NameUtils;
@@ -35,6 +36,7 @@
  */
 @ConfigurationProperties(ApplicationConfiguration.PREFIX)
 @Primary
+@BootstrapContextCompatible
 public class ApplicationConfiguration {
 
     /**
@@ -111,6 +113,7 @@ public void setInstance(InstanceConfiguration instance) {
      * Configuration for instance settings.
      */
     @ConfigurationProperties(InstanceConfiguration.PREFIX)
+    @BootstrapContextCompatible
     public static class InstanceConfiguration {
         /**
          * Prefix for Micronaut instance settings.

File: runtime/src/main/java/io/micronaut/runtime/converters/time/TimeConverterRegistrar.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.runtime.converters.time;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.convert.ConversionContext;
@@ -46,6 +47,7 @@
 @Singleton
 // Android doesn't support java.time
 @Requires(notEnv = Environment.ANDROID)
+@BootstrapContextCompatible
 public class TimeConverterRegistrar implements TypeConverterRegistrar {
 
     private static final Pattern DURATION_MATCHER = Pattern.compile("^(-?\\d+)([unsmhd])(s?)$");

File: runtime/src/main/java/io/micronaut/runtime/http/codec/MediaTypeCodecRegistryFactory.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.runtime.http.codec;
 
 import io.micronaut.context.annotation.Bean;
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.http.codec.MediaTypeCodec;
@@ -32,6 +33,7 @@
  * @since 1.0
  */
 @Factory
+@BootstrapContextCompatible
 public class MediaTypeCodecRegistryFactory {
 
     /**
@@ -41,6 +43,7 @@ public class MediaTypeCodecRegistryFactory {
     @Singleton
     @Primary
     @Bean
+    @BootstrapContextCompatible
     MediaTypeCodecRegistry mediaTypeCodecRegistry(List<MediaTypeCodec> codecs) {
         return MediaTypeCodecRegistry.of(codecs);
     }

File: runtime/src/main/java/io/micronaut/runtime/http/codec/TextPlainCodec.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.runtime.http.codec;
 
+import io.micronaut.context.annotation.BootstrapContextCompatible;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.context.annotation.Value;
 import io.micronaut.core.convert.ConversionService;
@@ -48,6 +49,7 @@
  * @since 1.0
  */
 @Singleton
+@BootstrapContextCompatible
 public class TextPlainCodec implements MediaTypeCodec {
 
     public static final String CONFIGURATION_QUALIFIER = "text";

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1686,6 +1686,8 @@ private <I> void prepareHttpHeaders(URI requestURI, io.micronaut.http.HttpReques
                 } else {
                     headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
                 }
+            } else {
+                headers.set(HttpHeaderNames.CONTENT_LENGTH, 0);
             }
         }
     }

File: inject/src/main/java/io/micronaut/context/UnresolvedProvider.java
Patch:
@@ -45,6 +45,7 @@ class UnresolvedProvider<T> implements Provider<T> {
 
     /**
      * @param beanType The bean type
+     * @param qualifier The qualifier to use
      * @param context  The bean context
      */
     UnresolvedProvider(Class<T> beanType, @Nullable Qualifier<T> qualifier, BeanContext context) {

File: inject/src/main/java/io/micronaut/inject/BeanDefinition.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.context.BeanResolutionContext;
 import io.micronaut.core.annotation.AnnotationMetadataDelegate;
 import io.micronaut.core.naming.Named;
-import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 

File: core/src/main/java/io/micronaut/core/reflect/GenericTypeUtils.java
Patch:
@@ -89,7 +89,7 @@ public static Class[] resolveInterfaceTypeArguments(Class<?> type, Class<?> inte
      */
     public static Class[] resolveSuperTypeGenericArguments(Class<?> type, Class<?> superType) {
         Type superclass = type.getGenericSuperclass();
-        while (superclass != null) {
+        while (superclass != null && superclass != Object.class) {
             if (superclass instanceof ParameterizedType) {
                 ParameterizedType pt = (ParameterizedType) superclass;
                 if (pt.getRawType() == superType) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -213,7 +213,6 @@ public final boolean process(Set<? extends TypeElement> annotations, RoundEnviro
                 }
 
                 AnnotationUtils.invalidateCache();
-                return true;
             }
         }
         AnnotationUtils.invalidateCache();

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1773,7 +1773,7 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                             params.addParameter(argName, modelUtils.resolveTypeReference(parameterType));
                             params.addGenericTypes(argName, Collections.singletonMap(typeVariable.toString(), modelUtils.resolveTypeReference(parameterType)));
                         } else {
-                            error(element, "Unprocessable generic type %s for param %s of element %s", typeVariable, paramElement, element);
+                            error(element, "Unprocessable generic type [%s] for param [%s] of element %s", typeVariable, paramElement, element);
                         }
 
                         break;
@@ -1805,7 +1805,7 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                             Object argType = modelUtils.classOfPrimitiveFor(typeName);
                             params.addParameter(argName, argType);
                         } else {
-                            error(element, "Unprocessable element type %s for param %s of element %s", kind, paramElement, element);
+                            error(element, "Unprocessable element type [%s] for param [%s] of element %s", kind, paramElement, element);
                         }
                 }
             });

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1804,6 +1804,8 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                             }
                             Object argType = modelUtils.classOfPrimitiveFor(typeName);
                             params.addParameter(argName, argType);
+                        } else {
+                            error(element, "Unprocessable element type %s for param %s of element %s", kind, paramElement, element);
                         }
                 }
             });

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -984,8 +984,7 @@ protected <T> Provider<T> getBeanProvider(BeanResolutionContext resolutionContex
 
         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, qualifier, true, false);
         if (concreteCandidate.isPresent()) {
-            BeanDefinition<T> definition = concreteCandidate.get();
-            return new UnresolvedProvider<>(definition.getBeanType(), qualifier,this);
+            return new UnresolvedProvider<>(beanType, qualifier,this);
         } else {
             throw new NoSuchBeanException(beanType);
         }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -985,7 +985,7 @@ protected <T> Provider<T> getBeanProvider(BeanResolutionContext resolutionContex
         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, qualifier, true, false);
         if (concreteCandidate.isPresent()) {
             BeanDefinition<T> definition = concreteCandidate.get();
-            return new UnresolvedProvider<>(definition.getBeanType(), this);
+            return new UnresolvedProvider<>(definition.getBeanType(), qualifier,this);
         } else {
             throw new NoSuchBeanException(beanType);
         }

File: inject/src/main/java/io/micronaut/context/DefaultMethodInjectionPoint.java
Patch:
@@ -169,6 +169,8 @@ public int hashCode() {
     private AnnotationMetadata initAnnotationMetadata(@Nullable AnnotationMetadata annotationMetadata) {
         if (annotationMetadata instanceof DefaultAnnotationMetadata) {
             return new MethodAnnotationMetadata((DefaultAnnotationMetadata) annotationMetadata);
+        } else if (annotationMetadata != null) {
+            return annotationMetadata;
         }
         return AnnotationMetadata.EMPTY_METADATA;
     }

File: test-suite/src/test/java/io/micronaut/docs/client/versioning/HelloClient.java
Patch:
@@ -13,10 +13,10 @@
 public interface HelloClient {
 
     @Get("/greeting/{name}")
-    String sayHello();
+    String sayHello(String name);
 
     @Version("2")
     @Get("/greeting/{name}")
-    Single<String> sayHelloTwo(); // <2>
+    Single<String> sayHelloTwo(String name); // <2>
 }
 // end::clazz[]

File: views/src/main/java/io/micronaut/views/ViewsFilterOrderProvider.java
Patch:
@@ -24,6 +24,6 @@
  * @author James Kleeh
  * @since 1.0
  */
-interface ViewsFilterOrderProvider extends FilterOrderProvider {
+public interface ViewsFilterOrderProvider extends FilterOrderProvider {
 
 }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/encryption/secret/SecretEncryption.java
Patch:
@@ -49,7 +49,7 @@ public SecretEncryption(SecretEncryptionConfiguration secretEncryptionConfigurat
         if (secretEncryptionConfiguration.getSecret() == null) {
             throw new ConfigurationException("Secret encryption Configuration 'secret' is required");
         }
-        if (supports(secretEncryptionConfiguration.getJweAlgorithm(), secretEncryptionConfiguration.getEncryptionMethod())) {
+        if (!supports(secretEncryptionConfiguration.getJweAlgorithm(), secretEncryptionConfiguration.getEncryptionMethod())) {
             StringBuilder sb = new StringBuilder();
             sb.append("Encryption Method: ");
             sb.append(secretEncryptionConfiguration.getEncryptionMethod().toString());

File: runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java
Patch:
@@ -14,12 +14,14 @@
  * limitations under the License.
  */
 
-package io.micronaut.scheduling.io.watch;
+package io.micronaut.scheduling.io.watch.osx;
 
 import com.sun.jna.Library;
 import io.methvin.watchservice.MacOSXListeningWatchService;
 import io.micronaut.context.annotation.*;
 import io.micronaut.core.util.StringUtils;
+import io.micronaut.scheduling.io.watch.FileWatchConfiguration;
+import io.micronaut.scheduling.io.watch.WatchServiceFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.scheduling.io.watch;
+package io.micronaut.scheduling.io.watch.osx;
 
 import com.sun.jna.Library;
 import io.methvin.watchservice.MacOSXListeningWatchService;
@@ -24,6 +24,8 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.ApplicationEventPublisher;
 import io.micronaut.core.util.StringUtils;
+import io.micronaut.scheduling.io.watch.DefaultWatchThread;
+import io.micronaut.scheduling.io.watch.FileWatchConfiguration;
 
 import javax.annotation.Nonnull;
 import java.io.IOException;

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java
Patch:
@@ -51,7 +51,7 @@ public class WatchServiceFactory {
     @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)
     @Requires(property = FileWatchConfiguration.PATHS)
     @Primary
-    protected WatchService watchService() throws IOException {
+    public WatchService watchService() throws IOException {
         String name = System.getProperty("os.name").toLowerCase();
         boolean isMacOS = "Mac OS X".equalsIgnoreCase(name) || "Darwin".equalsIgnoreCase(name);
         if (isMacOS) {

File: runtime/src/main/java/io/micronaut/reactive/reactor/ReactorInstrumentation.java
Patch:
@@ -46,7 +46,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Requires(classes = Flux.class)
+@Requires(classes = {Flux.class, Schedulers.Factory.class})
 @Context
 @Internal
 class ReactorInstrumentation {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java
Patch:
@@ -62,7 +62,7 @@ public Optional<Object> convert(FileUpload object, Class<Object> targetType, Con
 
             String contentType = object.getContentType();
             ByteBuf byteBuf = object.getByteBuf();
-            if (contentType != null) {
+            if (String) {
                 MediaType mediaType = new MediaType(contentType);
                 Optional<MediaTypeCodec> registered = decoderRegistryProvider.get().findCodec(mediaType);
                 if (registered.isPresent()) {

File: http/src/main/java/io/micronaut/http/bind/binders/AnnotatedRequestArgumentBinder.java
Patch:
@@ -33,6 +33,7 @@
  * @see CookieAnnotationBinder
  * @see ParameterAnnotationBinder
  * @see HeaderAnnotationBinder
+ * @see RequestAttributeAnnotationBinder
  * @since 1.0
  */
 public interface AnnotatedRequestArgumentBinder<A extends Annotation, T> extends RequestArgumentBinder<T>, AnnotatedArgumentBinder<A, T, HttpRequest<?>> {

File: http/src/main/java/io/micronaut/http/bind/binders/ParameterAnnotationBinder.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;
 import io.micronaut.core.convert.ArgumentConversionContext;
-import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 import io.micronaut.core.convert.value.ConvertibleValues;

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -150,6 +150,7 @@ default Properties asProperties() {
         }
         return props;
     }
+
     /**
      * Returns a submap for all the keys with the given prefix.
      *

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -53,10 +53,8 @@ public final class StringUtils {
      */
     public static final char SPACE = 0x20;
 
-
     private static final Pattern DIGIT_PATTERN = Pattern.compile("\\d+");
 
-
     /**
      * Return whether the given string is empty.
      *

File: core/src/main/java/io/micronaut/core/util/functional/ThrowingFunction.java
Patch:
@@ -23,6 +23,7 @@ public interface ThrowingFunction<T, R, E extends Throwable> {
      *
      * @param t the function argument
      * @return the function result
+     * @throws E The exception to throw when something goes wrong
      */
     R apply(T t) throws E;
 

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingReporter.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 
 import java.io.File;
 import java.io.IOException;
@@ -69,7 +69,7 @@ public class GraalClassLoadingReporter implements ClassLoadingReporter {
     );
 
     private static final List<String> KNOWN_BEANS = Arrays.asList(
-            JsonError.class.getName(), "io.micronaut.http.hateos.DefaultLink"
+            JsonError.class.getName(), "io.micronaut.http.hateoas.DefaultLink"
     );
 
     private final Set<String> classes = new ConcurrentSkipListSet<>();

File: http-client/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 import org.reactivestreams.Publisher;
 
 import java.io.Closeable;

File: http-client/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.context.annotation.Type;
 import io.micronaut.http.client.HttpClientConfiguration;
 import io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
 
 import javax.inject.Scope;

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.micronaut.core.naming.Described;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.VndError;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.VndError;
 
 import java.util.Optional;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -45,8 +45,8 @@
 import io.micronaut.http.filter.HttpFilter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.multipart.PartData;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import io.micronaut.http.netty.NettyMutableHttpResponse;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/DuplicateRouteHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/UnsatisfiedRouteHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 import org.slf4j.Logger;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/HttpStatusHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.HttpStatusException;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.JsonError;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/JsonExceptionHandler.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/UnsatisfiedArgumentHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http/src/main/java/io/micronaut/http/hateos/package-info.java
Patch:
@@ -15,9 +15,8 @@
  */
 
 /**
- * Hateos.
- *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use the classes in {@link io.micronaut.http.hateoas} instead
  */
 package io.micronaut.http.hateos;

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceDeserializerModifier.java
Patch:
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.Resource;
 
 import java.util.List;
 

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceModule.java
Patch:
@@ -20,7 +20,7 @@
 import javax.inject.Singleton;
 
 /**
- * Modifies deserialization for {@link io.micronaut.http.hateos.Resource}.
+ * Modifies deserialization for {@link io.micronaut.http.hateoas.Resource}.
  *
  * @author graemerocher
  * @since 1.0
@@ -29,7 +29,7 @@
 public class ResourceModule extends SimpleModule {
 
     /**
-     * Construct a new resource module with default deserializer for {@link io.micronaut.http.hateos.Resource}.
+     * Construct a new resource module with default deserializer for {@link io.micronaut.http.hateoas.Resource}.
      */
     public ResourceModule() {
         setDeserializerModifier(new ResourceDeserializerModifier());

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceSerializerModifier.java
Patch:
@@ -22,7 +22,7 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.Resource;
 
 import javax.inject.Singleton;
 import java.util.Iterator;

File: security/src/main/java/io/micronaut/security/authentication/AuthenticationExceptionHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 
 import javax.inject.Singleton;

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.http.annotation.Error;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.reactivex.*;
 
 import java.util.*;

File: validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java
Patch:
@@ -21,9 +21,9 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.Resource;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 
 import javax.inject.Singleton;

File: validation/src/main/java/io/micronaut/validation/exceptions/ValidationExceptionHandler.java
Patch:
@@ -19,8 +19,8 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import org.grails.datastore.mapping.validation.ValidationException;
 import org.springframework.validation.Errors;

File: http/src/main/java/io/micronaut/http/hateoas/DefaultLink.java
Patch:
@@ -27,7 +27,7 @@
  * @author Graeme Rocher
  * @since 1.1
  */
-class DefaultLink implements Link, Link.Builder {
+public class DefaultLink implements Link, Link.Builder {
 
     final URI href;
     private boolean templated;
@@ -41,7 +41,7 @@ class DefaultLink implements Link, Link.Builder {
     /**
      * @param uri The URI
      */
-    DefaultLink(URI uri) {
+    protected DefaultLink(URI uri) {
         this.href = uri;
     }
 

File: http/src/main/java/io/micronaut/http/hateoas/Resource.java
Patch:
@@ -39,14 +39,14 @@ public interface Resource {
     /**
      * @return The links for this resource
      */
-    default OptionalMultiValues<Link> getLinks() {
+    default OptionalMultiValues<? extends Link> getLinks() {
         return OptionalMultiValues.empty();
     }
 
     /**
      * @return The embedded resources
      */
-    default OptionalMultiValues<Resource> getEmbedded() {
+    default OptionalMultiValues<? extends Resource> getEmbedded() {
         return OptionalMultiValues.empty();
     }
 }

File: http/src/main/java/io/micronaut/http/hateos/VndError.java
Patch:
@@ -42,7 +42,6 @@ public VndError(String message) {
      */
     @Internal
     VndError() {
-        //TODO AGB is this correct?
-        this("");
+        this(null);
     }
 }

File: http/src/main/java/io/micronaut/http/hateos/package-info.java
Patch:
@@ -15,9 +15,8 @@
  */
 
 /**
- * hateos.
- *
  * @author Graeme Rocher
  * @since 1.0
+ * @deprecated Use the classes in {@link io.micronaut.http.hateoas} instead
  */
 package io.micronaut.http.hateos;

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingReporter.java
Patch:
@@ -26,7 +26,7 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 
 import java.io.File;
 import java.io.IOException;
@@ -69,7 +69,7 @@ public class GraalClassLoadingReporter implements ClassLoadingReporter {
     );
 
     private static final List<String> KNOWN_BEANS = Arrays.asList(
-            JsonError.class.getName(), "io.micronaut.http.hateos.DefaultLink"
+            JsonError.class.getName(), "io.micronaut.http.hateoas.DefaultLink"
     );
 
     private final Set<String> classes = new ConcurrentSkipListSet<>();

File: http-client/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 import org.reactivestreams.Publisher;
 
 import java.io.Closeable;

File: http-client/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.context.annotation.Type;
 import io.micronaut.http.client.HttpClientConfiguration;
 import io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.retry.annotation.Recoverable;
 
 import javax.inject.Scope;

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.micronaut.core.naming.Described;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.VndError;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.VndError;
 
 import java.util.Optional;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -45,8 +45,8 @@
 import io.micronaut.http.filter.HttpFilter;
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.multipart.PartData;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import io.micronaut.http.netty.NettyMutableHttpResponse;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/DuplicateRouteHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/UnsatisfiedRouteHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.JsonError;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 import org.slf4j.Logger;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/HttpStatusHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.HttpStatusException;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.JsonError;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/JsonExceptionHandler.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/UnsatisfiedArgumentHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 
 import javax.inject.Singleton;
 

File: http/src/main/java/io/micronaut/http/hateos/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Hateos.
+ * hateos.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceDeserializerModifier.java
Patch:
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.Resource;
 
 import java.util.List;
 

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceModule.java
Patch:
@@ -20,7 +20,7 @@
 import javax.inject.Singleton;
 
 /**
- * Modifies deserialization for {@link io.micronaut.http.hateos.Resource}.
+ * Modifies deserialization for {@link io.micronaut.http.hateoas.Resource}.
  *
  * @author graemerocher
  * @since 1.0
@@ -29,7 +29,7 @@
 public class ResourceModule extends SimpleModule {
 
     /**
-     * Construct a new resource module with default deserializer for {@link io.micronaut.http.hateos.Resource}.
+     * Construct a new resource module with default deserializer for {@link io.micronaut.http.hateoas.Resource}.
      */
     public ResourceModule() {
         setDeserializerModifier(new ResourceDeserializerModifier());

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceSerializerModifier.java
Patch:
@@ -22,7 +22,7 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.Resource;
 
 import javax.inject.Singleton;
 import java.util.Iterator;

File: security/src/main/java/io/micronaut/security/authentication/AuthenticationExceptionHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 
 import javax.inject.Singleton;

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.http.annotation.Error;
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.reactivex.*;
 
 import java.util.*;

File: validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java
Patch:
@@ -21,9 +21,9 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Produces;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.Resource;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
+import io.micronaut.http.hateoas.Resource;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 
 import javax.inject.Singleton;

File: validation/src/main/java/io/micronaut/validation/exceptions/ValidationExceptionHandler.java
Patch:
@@ -19,8 +19,8 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
-import io.micronaut.http.hateos.JsonError;
-import io.micronaut.http.hateos.Link;
+import io.micronaut.http.hateoas.JsonError;
+import io.micronaut.http.hateoas.Link;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import org.grails.datastore.mapping.validation.ValidationException;
 import org.springframework.validation.Errors;

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.event.*;
 import io.micronaut.context.exceptions.*;
-import io.micronaut.context.processor.AnnotationProcessor;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.context.scope.CustomScope;
 import io.micronaut.context.scope.CustomScopeRegistry;

File: inject/src/main/java/io/micronaut/context/processor/BeanDefinitionProcessor.java
Patch:
@@ -17,14 +17,13 @@
 package io.micronaut.context.processor;
 
 import io.micronaut.context.BeanContext;
-import io.micronaut.inject.BeanDefinition;
 
 import java.lang.annotation.Annotation;
 
 /**
  * A bean definition processor is a processor that is called once for each bean annotated with the given annotation type.
  *
- * <p>The {@link #process(BeanDefinition, Object)} method will receive each {@link BeanDefinition} and the {@link BeanContext} as arguments.</p>
+ * <p>The {@link #process(io.micronaut.inject.BeanDefinition, Object)} method will receive each {@link io.micronaut.inject.BeanDefinition} and the {@link BeanContext} as arguments.</p>
  *
  * <p>If the processor needs to be executed as startup it should be define as a {@link io.micronaut.context.annotation.Context} scoped bean.</p>
  *

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -90,8 +90,8 @@ public AnnotationMetadata build(T element) {
                 return AnnotationMetadata.EMPTY_METADATA;
             }
             return metadata;
-        } catch(RuntimeException e) {
-            if("org.eclipse.jdt.internal.compiler.problem.AbortCompilation".equals(e.getClass().getName())) {
+        } catch (RuntimeException e) {
+            if ("org.eclipse.jdt.internal.compiler.problem.AbortCompilation".equals(e.getClass().getName())) {
                 // workaround for a bug in the Eclipse APT implementation. See bug 541466 on their Bugzilla.
                 return AnnotationMetadata.EMPTY_METADATA;
             } else {

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.core.annotation.AnnotationUtil;
 import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.annotation.Internal;
-import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.inject.writer.AbstractClassFileWriter;

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -106,5 +106,4 @@ default Optional<ClassElement> getClassElement(Class<?> type) {
         return Optional.empty();
     }
 
-
 }

File: inject/src/main/java/io/micronaut/inject/annotation/internal/PersistenceContextAnnotationMapper.java
Patch:
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package io.micronaut.inject.annotation;
+package io.micronaut.inject.annotation.internal;
 
 import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.util.StringUtils;
+import io.micronaut.inject.annotation.NamedAnnotationMapper;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.visitor.VisitorContext;
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -262,7 +262,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
                 } else if (annotationMetadata.isAnnotationPresent(QueryValue.class)) {
                     String parameterName = annotationMetadata.getValue(QueryValue.class, String.class).orElse(null);
                     conversionService.convert(definedValue, ConversionContext.of(String.class).with(annotationMetadata)).ifPresent(o -> {
-                        if (!StringUtils.isEmpty(o)) {
+                        if (!StringUtils.isEmpty(parameterName)) {
                             paramMap.put(parameterName, o);
                             queryParams.put(parameterName, o);
                         } else {

File: http/src/main/java/io/micronaut/http/annotation/CookieValue.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.PARAMETER})
+@Target({ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
 public @interface CookieValue {
 

File: http/src/main/java/io/micronaut/http/annotation/Header.java
Patch:
@@ -54,7 +54,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.PARAMETER, ElementType.TYPE, ElementType.METHOD}) // this can be either type or param
+@Target({ElementType.PARAMETER, ElementType.TYPE, ElementType.METHOD, ElementType.ANNOTATION_TYPE}) // this can be either type or param
 @Repeatable(value = Headers.class)
 @Bindable
 public @interface Header {

File: http/src/main/java/io/micronaut/http/annotation/QueryValue.java
Patch:
@@ -36,7 +36,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.PARAMETER})
+@Target({ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 @Bindable
 public @interface QueryValue {
 

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/OpenApiControllerVisitor.java
Patch:
@@ -162,7 +162,7 @@ public void visitMethod(MethodElement element, VisitorContext context) {
                 }
 
                 ClassElement returnType = element.getReturnType();
-                if (isResponseType(returnType)) {
+                if (returnType != null && isResponseType(returnType)) {
                     returnType = returnType.getFirstTypeArgument().orElse(returnType);
                 }
                 if (returnType != null) {

File: router/src/main/java/io/micronaut/web/router/filter/FilteredRouter.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.web.router.Router;
 import io.micronaut.web.router.UriRoute;
 import io.micronaut.web.router.UriRouteMatch;
-import io.micronaut.web.router.version.VersionAwareRouterListener;
 
 import java.net.URI;
 import java.util.List;
@@ -37,7 +36,7 @@
  * <p>Filters themselves should be supplied via the {@link RouteMatchFilter} interface.</p>
  *
  * <p>A filtered router can be enabled by implementing a {@link io.micronaut.context.event.BeanCreatedEventListener} for
- * the existing {@link Router} and decorating appropriately. See for example {@link VersionAwareRouterListener}</p>
+ * the existing {@link Router} and decorating appropriately. See for example {@link io.micronaut.web.router.version.VersionAwareRouterListener}</p>
  *
  * @see RouteMatchFilter
  * @author Bogdan Oros

File: router/src/main/java/io/micronaut/web/router/filter/RouteMatchFilter.java
Patch:
@@ -19,9 +19,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.web.router.UriRouteMatch;
 
-import java.util.List;
 import java.util.function.Predicate;
-import java.util.stream.Stream;
 
 /**
  * A filter responsible for filtering route matches.
@@ -35,6 +33,7 @@ public interface RouteMatchFilter {
      * A method responsible for filtering route matches based on request.
      *
      * @param <T>     The target type
+     * @param <R>     The result type
      * @param request The HTTP request
      * @return A filtered list of route matches
      */

File: router/src/main/java/io/micronaut/web/router/version/VersionAwareRouterListener.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.event.BeanCreatedEventListener;
 import io.micronaut.web.router.Router;
 import io.micronaut.web.router.filter.FilteredRouter;
-import io.micronaut.web.router.filter.RouteMatchFilter;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -41,7 +40,7 @@ public class VersionAwareRouterListener implements BeanCreatedEventListener<Rout
     /**
      * Creates a configuration to decorate existing {@link Router} beans with a {@link FilteredRouter}.
      *
-     * @param filter A {@link RouteMatchFilter} to delegate routes filtering
+     * @param filter A {@link io.micronaut.web.router.filter.RouteMatchFilter} to delegate routes filtering
      */
     @Inject
     public VersionAwareRouterListener(RouteVersionFilter filter) {

File: router/src/main/java/io/micronaut/web/router/version/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author James Kleeh
  * @since 1.1.0
  */
-package io.micronaut.web.router.version;
\ No newline at end of file
+package io.micronaut.web.router.version;

File: discovery-client/src/main/java/io/micronaut/discovery/spring/SpringCloudConstants.java
Patch:
@@ -17,7 +17,7 @@
  * @author Thiago Locatelli
  * @since 1.0
  */
-public class Constants {
+public class SpringCloudConstants {
 
     public static final String PREFIX = "spring.cloud";
 }

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -73,6 +73,7 @@
     class InternalAttributes {
         public static final String ADAPTED_BEAN = "adaptedBean";
         public static final String ADAPTED_METHOD = "adaptedMethod";
+        public static final String ADAPTED_ARGUMENT_TYPES = "adaptedArgumentTypes";
         public static final String ADAPTED_QUALIFIER = "adaptedQualifier";
     }
 }

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1527,6 +1527,9 @@ private void visitMethodInjectionPointInternal(Object declaringType,
             injectMethodVisitor.visitMethodInsn(isInterface ? INVOKEINTERFACE : INVOKEVIRTUAL,
                     declaringTypeRef.getInternalName(), methodName,
                     methodDescriptor, isInterface);
+            if (isConfigurationProperties && returnType != void.class) {
+                injectMethodVisitor.pop();
+            }
         } else {
             // otherwise use injectBeanMethod instead which triggers reflective injection
             pushInjectMethodForIndex(injectMethodVisitor, injectInstanceIndex, currentMethodIndex, "injectBeanMethod");

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/DataCenterTypeInfoResolver.java
Patch:
@@ -53,7 +53,7 @@ public JavaType typeFromId(DatabindContext context, String id) throws IOExceptio
 
     @Override
     public String idFromValue(Object value) {
-        if (value.getClass().equals(AmazonInfo.class)) {
+        if (value.getClass().getSimpleName().equals(AmazonInfo.class.getSimpleName())) {
             return AmazonInfo.class.getName();
         }
         return MY_DATA_CENTER_INFO_TYPE_MARKER;

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -21,7 +21,9 @@
 import io.micronaut.core.naming.conventions.StringConvention;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
 /**
  * Allows configuration how map property values are injected.
@@ -31,6 +33,7 @@
  */
 @Documented
 @Retention(RUNTIME)
+@Target({ElementType.PARAMETER, ElementType.FIELD})
 public @interface MapFormat {
 
     /**

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponseFactory.java
Patch:
@@ -32,7 +32,7 @@ public class SimpleHttpResponseFactory implements HttpResponseFactory {
 
     @Override
     public <T> MutableHttpResponse<T> ok(T body) {
-        return new SimpleHttpResponse<>();
+        return new SimpleHttpResponse<T>().body(body);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1050,7 +1050,7 @@ private void visitConfigBuilderMethodInternal(
 
             // visit the property metadata
             metadataBuilder.visitProperty(
-                    paramTypeRef != null ? paramTypeRef.getClassName() : Boolean.class.getName(),
+                    paramTypeRef != null ? paramTypeRef.getClassName() : boolean.class.getName(),
                     String.join(".", propertyPath),
                     null,
                     null

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.event.*;
 import io.micronaut.context.exceptions.*;
-import io.micronaut.context.processor.AnnotationProcessor;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.context.scope.CustomScope;
 import io.micronaut.context.scope.CustomScopeRegistry;

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -140,7 +140,7 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String AZURE = "azure";
 
     /**
-     * Cloud provider Digital Ocean
+     * Cloud provider Digital Ocean.
      */
     String DIGITAL_OCEAN = "digitalocean";
     /**

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -90,8 +90,8 @@ public AnnotationMetadata build(T element) {
                 return AnnotationMetadata.EMPTY_METADATA;
             }
             return metadata;
-        } catch(RuntimeException e) {
-            if("org.eclipse.jdt.internal.compiler.problem.AbortCompilation".equals(e.getClass().getName())) {
+        } catch (RuntimeException e) {
+            if ("org.eclipse.jdt.internal.compiler.problem.AbortCompilation".equals(e.getClass().getName())) {
                 // workaround for a bug in the Eclipse APT implementation. See bug 541466 on their Bugzilla.
                 return AnnotationMetadata.EMPTY_METADATA;
             } else {

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -109,5 +109,4 @@ default Optional<ClassElement> getClassElement(Class<?> type) {
         return Optional.empty();
     }
 
-
 }

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -302,8 +302,11 @@ private Map toTupleSubMap(Object[] a, String entryKey, String entryValue) {
             if (type != null) {
 
                 String typeName = type.getName();
+                PrimitiveType primitiveType = PrimitiveType.fromName(typeName);
                 if (ClassUtils.isJavaLangType(typeName)) {
                     schema = getPrimitiveType(typeName);
+                } else if (primitiveType != null) {
+                    schema = primitiveType.createProperty();
                 } else if (type.isIterable()) {
                     Optional<ClassElement> componentType = type.getFirstTypeArgument();
                     if (componentType.isPresent()) {

File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java
Patch:
@@ -39,8 +39,6 @@
 import io.micronaut.scheduling.TaskExecutors;
 import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
-import io.reactivex.FlowableEmitter;
-import io.reactivex.FlowableOnSubscribe;
 import io.reactivex.functions.Function;
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
@@ -428,7 +426,7 @@ private Publisher<Object> buildCacheInvalidatePublisher(
                                 allFutures.whenCompleteAsync((aBoolean, throwable) -> {
                                     if (throwable != null) {
                                         SyncCache cache = cacheManager.getCache(cacheNames[0]);
-                                        if (asyncCacheErrorHandler.handleInvalidateError(cache,key, asRuntimeException(throwable))) {
+                                        if (asyncCacheErrorHandler.handleInvalidateError(cache, key, asRuntimeException(throwable))) {
                                             emitter.onError(throwable);
                                             return;
                                         }

File: runtime/src/main/java/io/micronaut/discovery/registration/RegistrationConfiguration.java
Patch:
@@ -101,6 +101,7 @@ public void setIpAddr(@Nullable String ipAddr) {
     public boolean isPreferIpAddress() {
         return preferIpAddress;
     }
+
     /**
      * Sets whether the IP address by used to register with the discovery server. Defaults to false.
      * @param preferIpAddress True if the IP address should be used

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java
Patch:
@@ -23,7 +23,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Singleton;
 import java.io.IOException;
 import java.nio.file.FileSystems;
 import java.nio.file.WatchService;

File: runtime/src/main/java/io/micronaut/scheduling/io/watch/event/FileChangedEvent.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.core.util.ArgumentUtils;
-import io.micronaut.scheduling.io.watch.FileWatchConfiguration;
 
 import javax.annotation.Nonnull;
 import javax.annotation.concurrent.Immutable;
@@ -30,7 +29,7 @@
  *
  * @author graemerocher
  * @since 1.1.0
- * @see FileWatchConfiguration
+ * @see io.micronaut.scheduling.io.watch.FileWatchConfiguration
  */
 @Immutable
 public class FileChangedEvent extends ApplicationEvent {

File: runtime/src/main/java/io/micronaut/cache/CacheManager.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.cache;
 
+import javax.annotation.Nonnull;
 import java.util.Set;
 
 /**
@@ -31,6 +32,7 @@ public interface CacheManager<C> {
     /**
      * @return The names of the active caches
      */
+    @Nonnull
     Set<String> getCacheNames();
 
     /**
@@ -40,5 +42,5 @@ public interface CacheManager<C> {
      * @return The {@link SyncCache} instance
      * @throws io.micronaut.context.exceptions.ConfigurationException If no cache is found for the given name
      */
-    SyncCache<C> getCache(String name);
+    @Nonnull SyncCache<C> getCache(String name);
 }

File: runtime/src/main/java/io/micronaut/cache/DefaultCacheManager.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.exceptions.ConfigurationException;
 import io.micronaut.core.util.CollectionUtils;
 
+import javax.annotation.Nonnull;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.util.*;
@@ -68,11 +69,13 @@ public DefaultCacheManager(SyncCache<C>... caches) {
     }
 
     @Override
+    @Nonnull
     public Set<String> getCacheNames() {
         return cacheMap.keySet();
     }
 
     @Override
+    @Nonnull
     public SyncCache<C> getCache(String name) {
         SyncCache<C> cache = cacheMap.get(name);
         if (cache == null) {

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -973,7 +973,7 @@ protected final Object getBeanForConstructorArgument(BeanResolutionContext resol
                     bean = ((DefaultBeanContext) context).getBean(resolutionContext, argumentType, qualifier);
                     path.pop();
                     return bean;
-                } catch (NoSuchBeanException | BeanInstantiationException e) {
+                } catch (NoSuchBeanException e) {
                     if (isNullable) {
                         path.pop();
                         return null;

File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java
Patch:
@@ -308,8 +308,7 @@ public static Field getRequiredField(Class type, String name) {
     public static Optional<Field> findField(Class type, String name) {
         Optional<Field> declaredField = findDeclaredField(type, name);
         if (!declaredField.isPresent()) {
-            type = type.getSuperclass();
-            while (type != null) {
+            while ((type = type.getSuperclass()) != null) {
                 declaredField = findField(type, name);
                 if (declaredField.isPresent()) {
                     break;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/encryption/ec/ECEncryption.java
Patch:
@@ -24,7 +24,8 @@
 import com.nimbusds.jose.crypto.ECDHDecrypter;
 import com.nimbusds.jose.crypto.ECDHEncrypter;
 import io.micronaut.security.token.jwt.encryption.AbstractEncryptionConfiguration;
-import javax.validation.constraints.NotNull;
+
+import javax.annotation.Nonnull;
 import java.security.interfaces.ECPrivateKey;
 import java.security.interfaces.ECPublicKey;
 
@@ -79,7 +80,7 @@ protected JWEEncrypter buildEncrypter() throws JOSEException {
      * @return Instance of {@link ECDHEncrypter}
      * @throws JOSEException if the {@link ECDHEncrypter} cannot be intantiated
      */
-    protected JWEEncrypter buildEncrypterWithPublicKey(@NotNull ECPublicKey publicKey) throws JOSEException {
+    protected JWEEncrypter buildEncrypterWithPublicKey(@Nonnull ECPublicKey publicKey) throws JOSEException {
         return new ECDHEncrypter(publicKey);
     }
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/TokenRefreshRequest.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Pattern;
 
 /**
@@ -31,12 +30,10 @@
 public class TokenRefreshRequest {
 
     @NotBlank
-    @NotNull
     @Pattern(regexp = "refresh_token")
     @JsonProperty("grant_type")
     private String grantType;
 
-    @NotNull
     @NotBlank
     @JsonProperty("refresh_token")
     private String refreshToken;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/ec/ECSignature.java
Patch:
@@ -26,7 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.validation.constraints.NotNull;
+import javax.annotation.Nonnull;
 import java.security.interfaces.ECPublicKey;
 
 /**
@@ -73,7 +73,7 @@ public boolean verify(final SignedJWT jwt) throws JOSEException {
         return verify(jwt, this.publicKey);
     }
 
-    private boolean verify(final SignedJWT jwt, @NotNull ECPublicKey publicKey) throws JOSEException {
+    private boolean verify(final SignedJWT jwt, @Nonnull ECPublicKey publicKey) throws JOSEException {
         final JWSVerifier verifier = new ECDSAVerifier(this.publicKey);
         return jwt.verify(verifier);
     }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/ec/ECSignatureGenerator.java
Patch:
@@ -24,7 +24,7 @@
 import com.nimbusds.jwt.SignedJWT;
 import io.micronaut.security.token.jwt.signature.SignatureGeneratorConfiguration;
 
-import javax.validation.constraints.NotNull;
+import javax.annotation.Nonnull;
 import java.security.interfaces.ECPrivateKey;
 
 /**
@@ -60,7 +60,7 @@ public SignedJWT sign(JWTClaimsSet claims) throws JOSEException {
      * @return A signed JWT
      * @throws JOSEException thrown in the JWT signing
      */
-    protected SignedJWT signWithPrivateKey(JWTClaimsSet claims, @NotNull ECPrivateKey privateKey) throws JOSEException {
+    protected SignedJWT signWithPrivateKey(JWTClaimsSet claims, @Nonnull ECPrivateKey privateKey) throws JOSEException {
         final JWSSigner signer = new ECDSASigner(privateKey);
         final SignedJWT signedJWT = new SignedJWT(new JWSHeader(algorithm), claims);
         signedJWT.sign(signer);

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/rsa/RSASignature.java
Patch:
@@ -23,7 +23,7 @@
 import com.nimbusds.jwt.SignedJWT;
 import io.micronaut.security.token.jwt.signature.AbstractSignatureConfiguration;
 
-import javax.validation.constraints.NotNull;
+import javax.annotation.Nonnull;
 import java.security.interfaces.RSAPublicKey;
 
 /**
@@ -64,7 +64,7 @@ public boolean verify(final SignedJWT jwt) throws JOSEException {
         return verifyWithPublicKey(jwt, this.publicKey);
     }
 
-    private boolean verifyWithPublicKey(final SignedJWT jwt, @NotNull RSAPublicKey publicKey) throws JOSEException {
+    private boolean verifyWithPublicKey(final SignedJWT jwt, @Nonnull RSAPublicKey publicKey) throws JOSEException {
         final JWSVerifier verifier = new RSASSAVerifier(publicKey);
         return jwt.verify(verifier);
     }

File: http-client/src/main/java/io/micronaut/http/client/annotation/Client.java
Patch:
@@ -60,7 +60,8 @@
     String id() default "";
 // end::value[]
     /**
-     * The base URI for the client.
+     * The base URI for the client. Only to be used in
+     * conjunction with {@link #id()}.
      *
      * @return The base URI
      */

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -547,6 +547,9 @@ private String resolveTemplate(AnnotationValue<Client> clientAnnotation, String
      */
     private HttpClient getClient(MethodInvocationContext<Object, Object> context, AnnotationValue<Client> clientAnn) {
         String clientId = clientAnn.getValue(String.class).orElse(null);
+        if (clientId == null) {
+            throw new HttpClientException("Either the id or value of the @Client annotation must be specified");
+        }
         String path = clientAnn.get("path", String.class).orElse(null);
         String clientKey = computeClientKey(clientId, path);
         if (clientKey == null) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -857,7 +857,7 @@ void visitExecutableMethod(ExecutableElement method, AnnotationMetadata methodAn
 
             // shouldn't visit around advice on an introduction advice instance
             if (!(beanWriter instanceof AopProxyWriter)) {
-                boolean hasAround = methodAnnotationMetadata.hasDeclaredStereotype(AROUND_TYPE);
+                boolean hasAround = methodAnnotationMetadata.hasStereotype(AROUND_TYPE);
                 if (isAopProxyType || hasAround) {
                     if (isAopProxyType && !hasAround && !method.getModifiers().contains(Modifier.PUBLIC)) {
                         // ignore methods that are not public and have no explicit advise

File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java
Patch:
@@ -308,8 +308,7 @@ public static Field getRequiredField(Class type, String name) {
     public static Optional<Field> findField(Class type, String name) {
         Optional<Field> declaredField = findDeclaredField(type, name);
         if (!declaredField.isPresent()) {
-            type = type.getSuperclass();
-            while (type != null) {
+            while ((type = type.getSuperclass()) != null) {
                 declaredField = findField(type, name);
                 if (declaredField.isPresent()) {
                     break;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -311,10 +311,10 @@ public RouteMatch<?> getMatchedRoute() {
     @Internal
     void addContent(ByteBufHolder httpContent) {
         if (httpContent instanceof AbstractHttpData) {
-            if (httpContent.refCnt() == 1) {
+            receivedData.computeIfAbsent(System.identityHashCode(httpContent), (key) -> {
                 httpContent.retain();
-            }
-            receivedData.putIfAbsent(System.identityHashCode(httpContent), (AbstractHttpData) httpContent);
+                return (AbstractHttpData) httpContent;
+            });
         } else {
             receivedContent.add(httpContent);
         }

File: views/src/main/java/io/micronaut/views/freemarker/FreemarkerViewsRenderer.java
Patch:
@@ -63,7 +63,7 @@ public class FreemarkerViewsRenderer implements ViewsRenderer {
         this.viewsConfiguration = viewsConfiguration;
         this.freemarkerMicronautConfiguration = freemarkerMicronautConfiguration;
         this.freemarkerConfiguration = freemarkerMicronautConfiguration.getConfiguration();
-        this.extension = freemarkerMicronautConfiguration.getDefaultExtension();
+        this.extension = EXTENSION_SEPARATOR + freemarkerMicronautConfiguration.getDefaultExtension();
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -229,7 +229,7 @@ public ByteBuf getByteBuf() throws IOException {
                             } else {
                                 data.delete();
                             }
-                        } catch (IOException e) {}
+                        } catch (IOException e) { }
                         removeComponent(index);
                         return true;
                     });

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -101,7 +101,7 @@ public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
         this.attributes = new MutableConvertibleValuesMap<>(new ConcurrentHashMap<>(4), conversionService);
         this.channelHandlerContext = ctx;
         this.headers = new NettyHttpHeaders(nettyRequest.headers(), conversionService);
-        this.body = SupplierUtil.memoizedNonEmpty(() -> Optional.ofNullable((T)buildBody()));
+        this.body = SupplierUtil.memoizedNonEmpty(() -> Optional.ofNullable((T) buildBody()));
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.netty.handler.codec.http.multipart.DiskFileUpload;
 import io.reactivex.Flowable;
-import io.reactivex.Observable;
 import io.reactivex.Single;
 import io.reactivex.schedulers.Schedulers;
 import org.reactivestreams.Publisher;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
-import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
@@ -32,7 +31,6 @@
 import io.netty.handler.codec.http.LastHttpContent;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.stream.ChunkedFile;
-import io.netty.util.concurrent.GenericFutureListener;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -753,7 +753,6 @@ protected void doOnNext(Object message) {
                             }
 
                             if (!executed) {
-
                                 String argumentName = argument.getName();
                                 if (!routeMatch.isSatisfied(argumentName)) {
                                     routeMatch = routeMatch.fulfill(Collections.singletonMap(argumentName, value.get()));

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1698,7 +1698,7 @@ private <O, E> void addFullHttpResponseHandler(
             Emitter<io.micronaut.http.HttpResponse<O>> emitter,
             Argument<O> bodyType, Argument<E> errorType) {
         ChannelPipeline pipeline = channel.pipeline();
-        pipeline.addLast(HANDLER_MICRONAUT_FULL_HTTP_RESPONSE, new SimpleChannelInboundHandler<FullHttpResponse>() {
+        pipeline.addLast(HANDLER_MICRONAUT_FULL_HTTP_RESPONSE, new SimpleChannelInboundHandler<FullHttpResponse>(false) {
 
             AtomicBoolean complete = new AtomicBoolean(false);
 
@@ -1773,7 +1773,7 @@ public Class<?> getErrorType(MediaType mediaType) {
                     }
                 } finally {
                     pipeline.remove(this);
-                    if (fullResponse.refCnt() > 1) {
+                    if (fullResponse.refCnt() > 0) {
                         try {
                             ReferenceCountUtil.release(fullResponse);
                         } catch (Throwable e) {

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1698,7 +1698,7 @@ private <O, E> void addFullHttpResponseHandler(
             Emitter<io.micronaut.http.HttpResponse<O>> emitter,
             Argument<O> bodyType, Argument<E> errorType) {
         ChannelPipeline pipeline = channel.pipeline();
-        pipeline.addLast(HANDLER_MICRONAUT_FULL_HTTP_RESPONSE, new SimpleChannelInboundHandler<FullHttpResponse>() {
+        pipeline.addLast(HANDLER_MICRONAUT_FULL_HTTP_RESPONSE, new SimpleChannelInboundHandler<FullHttpResponse>(false) {
 
             AtomicBoolean complete = new AtomicBoolean(false);
 
@@ -1773,7 +1773,7 @@ public Class<?> getErrorType(MediaType mediaType) {
                     }
                 } finally {
                     pipeline.remove(this);
-                    if (fullResponse.refCnt() > 1) {
+                    if (fullResponse.refCnt() > 0) {
                         try {
                             ReferenceCountUtil.release(fullResponse);
                         } catch (Throwable e) {

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava1TracingInstrumentation.java
Patch:
@@ -70,7 +70,7 @@ private static class InstrumentScheduleAction implements Func1<Action0, Action0>
 
         @Override
         public Action0 call(Action0 action0) {
-            return () -> instrumenter.apply(action0::call);
+            return () -> instrumenter.apply(action0::call).run();
         }
     }
 }

File: configurations/redis-lettuce/src/test/groovy/io/micronaut/configuration/lettuce/cache/CounterService.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.configuration.lettuce.cache;
 
 import io.micronaut.cache.annotation.*;
+import io.micronaut.core.async.annotation.SingleResult;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -63,6 +64,7 @@ public CompletableFuture<Integer> futureValue(String name) {
     }
 
     @Cacheable
+    @SingleResult
     public Flux<Integer> flowableValue(String name) {
         return Flux.just(counters.computeIfAbsent(name, (key)-> 0));
     }

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/DefaultKafkaListenerExceptionHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.configuration.kafka.exceptions;
 
+import io.micronaut.context.annotation.Primary;
 import org.apache.kafka.clients.consumer.ConsumerRecord;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,6 +32,7 @@
  * @since 1.0
  */
 @Singleton
+@Primary
 public class DefaultKafkaListenerExceptionHandler implements KafkaListenerExceptionHandler {
     private static final Logger LOG = LoggerFactory.getLogger(KafkaListenerExceptionHandler.class);
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/processor/KafkaConsumerProcessor.java
Patch:
@@ -323,10 +323,9 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
 
                         //noinspection InfiniteLoopStatement
                         while (true) {
-                            ConsumerRecords<?, ?> consumerRecords = kafkaConsumer.poll(pollTimeout.toMillis());
-                            Map<TopicPartition, OffsetAndMetadata> currentOffsets = trackPartitions ? new HashMap<>() : null;
-
                             try {
+                                ConsumerRecords<?, ?> consumerRecords = kafkaConsumer.poll(pollTimeout);
+                                Map<TopicPartition, OffsetAndMetadata> currentOffsets = trackPartitions ? new HashMap<>() : null;
                                 if (consumerRecords != null && consumerRecords.count() > 0) {
 
                                     if (isBatch) {

File: configurations/kafka/src/test/groovy/io/micronaut/configuration/kafka/docs/consumer/config/ProductListener.java
Patch:
@@ -11,7 +11,7 @@
 @KafkaListener(
     groupId = "products",
     pollTimeout = "500ms",
-    properties = @Property(name = ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, value = "5000")
+    properties = @Property(name = ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, value = "10000")
 )
 public class ProductListener {
 // end::clazz[]

File: http/src/main/java/io/micronaut/http/annotation/Delete.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.core.async.annotation.SingleResult;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -79,6 +80,7 @@
      */
     @AliasFor(annotation = Produces.class, member = "single")
     @AliasFor(annotation = Consumes.class, member = "single")
+    @AliasFor(annotation = SingleResult.class, member = "value")
     boolean single() default false;
 
 }

File: http/src/main/java/io/micronaut/http/annotation/Get.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.core.async.annotation.SingleResult;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -82,6 +83,7 @@
      */
     @AliasFor(annotation = Produces.class, member = "single")
     @AliasFor(annotation = Consumes.class, member = "single")
+    @AliasFor(annotation = SingleResult.class, member = "value")
     boolean single() default false;
 
 }

File: http/src/main/java/io/micronaut/http/annotation/Patch.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.core.async.annotation.SingleResult;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -77,6 +78,7 @@
      */
     @AliasFor(annotation = Produces.class, member = "single")
     @AliasFor(annotation = Consumes.class, member = "single")
+    @AliasFor(annotation = SingleResult.class, member = "value")
     boolean single() default false;
 
 }

File: http/src/main/java/io/micronaut/http/annotation/Post.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.core.async.annotation.SingleResult;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -79,6 +80,7 @@
      */
     @AliasFor(annotation = Produces.class, member = "single")
     @AliasFor(annotation = Consumes.class, member = "single")
+    @AliasFor(annotation = SingleResult.class, member = "value")
     boolean single() default false;
 
 }

File: http/src/main/java/io/micronaut/http/annotation/Put.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.core.async.annotation.SingleResult;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -79,5 +80,6 @@
      */
     @AliasFor(annotation = Produces.class, member = "single")
     @AliasFor(annotation = Consumes.class, member = "single")
+    @AliasFor(annotation = SingleResult.class, member = "value")
     boolean single() default false;
 }

File: runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery;
 
+import io.micronaut.core.async.annotation.SingleResult;
 import io.micronaut.core.naming.Described;
 import org.reactivestreams.Publisher;
 
@@ -36,10 +37,12 @@ public interface DiscoveryClient extends Closeable, AutoCloseable, Described {
      * @param serviceId The service id
      * @return A {@link Publisher} that emits a list of {@link ServiceInstance}
      */
+    @SingleResult
     Publisher<List<ServiceInstance>> getInstances(String serviceId);
 
     /**
      * @return The known service IDs
      */
+    @SingleResult
     Publisher<List<String>> getServiceIds();
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpDataReference.java
Patch:
@@ -200,9 +200,8 @@ public ByteBuf getByteBuf() throws IOException {
             if (length == 0) {
                 return Unpooled.EMPTY_BUFFER;
             }
-            FileUpload fileUpload = (FileUpload) data;
             if (data.isInMemory()) {
-                ByteBuf byteBuf = fileUpload.getByteBuf();
+                ByteBuf byteBuf = data.getByteBuf();
                 int index = components.indexOf(this);
                 if (byteBuf instanceof CompositeByteBuf) {
                     CompositeByteBuf compositeByteBuf = (CompositeByteBuf) byteBuf;
@@ -213,7 +212,7 @@ public ByteBuf getByteBuf() throws IOException {
                     });
                 } else {
                     return createDelegate(byteBuf, (buf, count) -> {
-                        fileUpload.delete();
+                        data.delete();
                         removeComponent(index);
                         return true;
                     });

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -44,6 +44,7 @@ public class FormDataHttpContentProcessor extends AbstractHttpContentProcessor<H
 
     private final HttpPostRequestDecoder decoder;
     private final boolean enabled;
+    private AtomicLong extraMessages = new AtomicLong(0);
 
     /**
      * @param nettyHttpRequest The {@link NettyHttpRequest}
@@ -72,8 +73,6 @@ public boolean isEnabled() {
         return enabled;
     }
 
-    private AtomicLong extraMessages = new AtomicLong(0);
-
     @Override
     protected void doOnSubscribe(Subscription subscription, Subscriber<? super HttpData> subscriber) {
         subscriber.onSubscribe(new Subscription() {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -37,13 +37,10 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.multipart.AbstractMemoryHttpData;
-import io.netty.handler.codec.http.multipart.Attribute;
-import io.netty.handler.codec.http.multipart.MemoryAttribute;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.util.AttributeKey;
 import io.netty.util.ReferenceCounted;
 
-import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.nio.charset.Charset;
 import java.util.*;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/NettyPartDataToArrayConverter.java
Patch:
@@ -44,7 +44,7 @@ protected NettyPartDataToArrayConverter(ConversionService conversionService) {
     @Override
     public Optional<byte[]> convert(NettyPartData object, Class<byte[]> targetType, ConversionContext context) {
         try {
-            return conversionService.convert(object.getByteBuf(), targetType, context);
+            return Optional.of(object.getBytes());
         } catch (IOException e) {
             context.reject(e);
             return Optional.empty();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -114,8 +114,6 @@ public Publisher<Boolean> transferTo(File destination) {
                 return destination != null && fileUpload.renameTo(destination);
             } catch (IOException e) {
                 throw new MultipartException("Error transferring file: " + fileUpload.getName(), e);
-            } finally {
-                fileUpload.release();
             }
         };
 

File: inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java
Patch:
@@ -105,4 +105,6 @@ default Optional<ClassElement> getClassElement(Class<?> type) {
         }
         return Optional.empty();
     }
+
+
 }

File: discovery-client/src/main/java/io/micronaut/discovery/client/DiscoveryClientCacheConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import static io.micronaut.discovery.client.DiscoveryClientCacheConfiguration.CACHE_NAME;
 
 import io.micronaut.cache.CacheConfiguration;
+import io.micronaut.cache.DefaultCacheConfiguration;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.Toggleable;
@@ -36,7 +37,7 @@
 @Named(CACHE_NAME)
 @ConfigurationProperties(CACHE_NAME)
 @Requires(property = DiscoveryClientCacheConfiguration.SETTING_ENABLED, notEquals = "false")
-public class DiscoveryClientCacheConfiguration extends CacheConfiguration implements Toggleable {
+public class DiscoveryClientCacheConfiguration extends DefaultCacheConfiguration implements Toggleable {
 
     /**
      * The prefix to use for all discovery client settings.

File: runtime/src/main/java/io/micronaut/cache/CacheConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.cache;
 
-import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.runtime.ApplicationConfiguration;
 
@@ -32,7 +31,6 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@EachProperty(CacheConfiguration.PREFIX)
 public class CacheConfiguration {
 
     /**

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/AbstractRedisConfiguration.java
Patch:
@@ -77,4 +77,5 @@ public List<RedisURI> getUris() {
     public void setUris(URI... uris) {
         this.uris = Arrays.stream(uris).map(RedisURI::create).collect(Collectors.toList());
     }
+
 }

File: http-client/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.File;
 import java.io.InputStream;
 import java.util.ArrayList;
-import java.util.Comparator;
 import java.util.List;
 
 /**
@@ -44,7 +43,6 @@ public final class MultipartBody {
      * @param parts The List of all parts to be sent in the body of Netty multipart request, such a File, String, Bytes etc.
      */
     private MultipartBody(List<Part> parts) {
-        parts.sort(Comparator.comparing(o -> o.name));
         this.parts = parts;
     }
 

File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java
Patch:
@@ -207,7 +207,7 @@ public Single<HttpResponse> receiveMultiplePublishers(Flowable<Flowable<byte[]>>
     }
 
     @Post(value =  "/receive-flow-control", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)
-    Single<String> go(Flowable<byte[]> file) {
+    Single<String> go(Map json, Flowable<byte[]> file) {
         return Single.create(singleEmitter -> {
             file.subscribe(new Subscriber<byte[]>() {
                 private Subscription subscription;

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -255,7 +255,7 @@ private boolean matchesEnvironment(ConditionContext context, AnnotationValue<Req
                     ApplicationContext applicationContext = (ApplicationContext) beanContext;
                     Environment environment = applicationContext.getEnvironment();
                     Set<String> activeNames = environment.getActiveNames();
-                    boolean result = Arrays.stream(env).anyMatch(s -> !activeNames.contains(s));
+                    boolean result = Arrays.stream(env).noneMatch(activeNames::contains);
                     if (!result) {
                         context.fail("Disallowed environments [" + ArrayUtils.toString(env) + "] are active: " + activeNames);
                     }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/cookie/JwtCookieConfigurationProperties.java
Patch:
@@ -45,7 +45,7 @@ public class JwtCookieConfigurationProperties implements JwtCookieConfiguration
      * The default cookie path.
      */
     @SuppressWarnings("WeakerAccess")
-    public static final String DEFAULT_COOKIEPATH = null;
+    public static final String DEFAULT_COOKIEPATH = "/";
 
     /**
      * The default logout target URL.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.io.Writable;
 import io.micronaut.core.io.buffer.ByteBuffer;
+import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
 import io.micronaut.core.util.StreamUtils;
@@ -671,7 +672,8 @@ protected void doOnNext(Object message) {
                                 ReplaySubject namedSubject = subjects.computeIfAbsent(name, (key) -> ReplaySubject.create());
 
                                 boolean partialUpload = PartData.class.equals(typeVariableType) ||
-                                        Publishers.isConvertibleToPublisher(typeVariableType);
+                                        Publishers.isConvertibleToPublisher(typeVariableType) ||
+                                        ClassUtils.isJavaLangType(typeVariableType);
 
                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {
                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java
Patch:
@@ -62,9 +62,6 @@ public Optional<Object> convert(FileUpload object, Class<Object> targetType, Con
 
             String contentType = object.getContentType();
             ByteBuf byteBuf = object.getByteBuf();
-            if (targetType.equals(String.class)) {
-                return Optional.of(byteBuf.toString(context.getCharset()));
-            }
             if (contentType != null) {
                 MediaType mediaType = new MediaType(contentType);
                 Optional<MediaTypeCodec> registered = decoderRegistryProvider.get().findCodec(mediaType);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -91,7 +91,9 @@ protected void onData(ByteBufHolder message) {
                                 // no-op
                         }
                     } finally {
-                        data.release();
+                        if (!(data instanceof FileUpload) || ((FileUpload) data).isInMemory()) {
+                            data.release();
+                        }
                     }
                 }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java
Patch:
@@ -62,6 +62,9 @@ public Optional<Object> convert(FileUpload object, Class<Object> targetType, Con
 
             String contentType = object.getContentType();
             ByteBuf byteBuf = object.getByteBuf();
+            if (targetType.equals(String.class)) {
+                return Optional.of(byteBuf.toString(context.getCharset()));
+            }
             if (contentType != null) {
                 MediaType mediaType = new MediaType(contentType);
                 Optional<MediaTypeCodec> registered = decoderRegistryProvider.get().findCodec(mediaType);

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -156,7 +156,9 @@ public ObjectMapper objectMapper(@Nullable JacksonConfiguration jacksonConfigura
             jacksonConfiguration.getParserSettings().forEach(objectMapper::configure);
             jacksonConfiguration.getGeneratorSettings().forEach(objectMapper::configure);
 
-            objectMapper.setPropertyNamingStrategy(jacksonConfiguration.getPropertyNamingStrategy().propertyNamingStrategy);
+
+            Optional.ofNullable(jacksonConfiguration.getPropertyNamingStrategy())
+                    .ifPresent(objectMapper::setPropertyNamingStrategy);
         }
         return objectMapper;
     }

File: core/src/main/java/io/micronaut/core/util/functional/ThrowingFunction.java
Patch:
@@ -76,4 +76,4 @@ default <V> ThrowingFunction<T, V, E> andThen(Function<? super R, ? extends V> a
     static <T, E extends Throwable> ThrowingFunction<T, T, E> identity() {
         return t -> t;
     }
-}
\ No newline at end of file
+}

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -682,7 +682,7 @@ protected void doOnNext(Object message) {
                                 } else if (StreamingFileUpload.class.isAssignableFrom(typeVariableType)) {
                                     typeVariable = Argument.of(PartData.class);
                                 } else if (!ClassUtils.isJavaLangType(typeVariableType) &&
-                                        !PartData.class.isAssignableFrom(typeVariableType)) {
+                                        !PartData.class.equals(typeVariableType)) {
                                     partialUpload = false;
                                 }
 

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -275,7 +275,8 @@ public static String capitalize(String str) {
      * @param string the string to trim
      * @return the trimmed string or null
      */
-    public static String trimToNull(String string) {
+    @Nullable
+    public static String trimToNull(@Nullable String string) {
         if (string == null) {
             return null;
         }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/jwks/JwksSignature.java
Patch:
@@ -57,9 +57,10 @@
 @EachBean(JwksSignatureConfiguration.class)
 public class JwksSignature implements SignatureConfiguration {
 
-    private static final Logger LOG = LoggerFactory.getLogger(JwksSignature.class);
     public static final int DEFAULT_REFRESH_JWKS_ATTEMPTS = 1;
 
+    private static final Logger LOG = LoggerFactory.getLogger(JwksSignature.class);
+
     @Nullable
     private JWKSet jwkSet;
 
@@ -82,7 +83,6 @@ public JwksSignature(JwksSignatureConfiguration jwksSignatureConfiguration) {
         this.keyType = jwksSignatureConfiguration.getKeyType();
     }
 
-
     private Optional<JWKSet> getJWKSet() {
         return Optional.ofNullable(jwkSet);
     }
@@ -201,7 +201,6 @@ protected Optional<JWSVerifier> getVerifier(JWK jwk) {
         return Optional.empty();
     }
 
-
     private <T, R extends JWSVerifier> Optional<R> getVerifier(ThrowingSupplier<T, JOSEException> supplier, ThrowingFunction<T, R, JOSEException> consumer) {
         T publicKey = null;
         try {

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -807,6 +807,6 @@ private static boolean isEC2Windows() {
      */
     private static class EnvironmentsAndPackage {
         String aPackage;
-        Set<String> enviroments = new HashSet<>(1);
+        Set<String> enviroments = new LinkedHashSet<>(1);
     }
 }

File: security-session/src/main/java/io/micronaut/security/session/SessionLoginHandler.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.security.authentication.AuthenticationFailed;
+import io.micronaut.security.authentication.AuthenticationUserDetailsAdapter;
 import io.micronaut.security.authentication.UserDetails;
 import io.micronaut.security.handlers.LoginHandler;
 import io.micronaut.security.filters.SecurityFilter;
@@ -57,7 +58,7 @@ public SessionLoginHandler(SecuritySessionConfiguration securitySessionConfigura
     @Override
     public HttpResponse loginSuccess(UserDetails userDetails, HttpRequest<?> request) {
         Session session = findSession(request);
-        session.put(SecurityFilter.AUTHENTICATION, userDetails);
+        session.put(SecurityFilter.AUTHENTICATION, new AuthenticationUserDetailsAdapter(userDetails));
         try {
             URI location = new URI(securitySessionConfiguration.getLoginSuccessTargetUrl());
             return HttpResponse.seeOther(location);

File: security/src/main/java/io/micronaut/security/authentication/PrincipalArgumentBinder.java
Patch:
@@ -49,7 +49,7 @@ public BindingResult<Principal> bind(ArgumentConversionContext<Principal> contex
             MutableConvertibleValues<Object> attrs = source.getAttributes();
             Optional<Authentication> existing = attrs.get(SecurityFilter.AUTHENTICATION, Authentication.class);
             if (existing.isPresent()) {
-                return () -> existing.map(e -> (Principal) e::getName);
+                return () -> existing.map(Principal.class::cast);
             }
         }
 

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Delete.java
Patch:
@@ -18,6 +18,7 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Executable;
 
 import java.lang.annotation.Documented;
@@ -45,5 +46,6 @@
     /**
      * @return The produced MediaType values. Defaults to application/json
      */
+    @AliasFor(annotationName = "io.micronaut.http.annotation.Produces", member = "value")
     String[] produces() default {"application/json"};
 }

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Read.java
Patch:
@@ -18,6 +18,7 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Executable;
 
 import java.lang.annotation.Documented;
@@ -45,5 +46,6 @@
     /**
      * @return The produced MediaType values. Defaults to application/json
      */
+    @AliasFor(annotationName = "io.micronaut.http.annotation.Produces", member = "value")
     String[] produces() default {"application/json"};
 }

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloClient.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.docs.server.intro.javacode;
+package io.micronaut.docs.server.intro;
 
 // tag::imports[]
 import io.micronaut.http.annotation.Get;

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloController.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.docs.server.intro.javacode;
+package io.micronaut.docs.server.intro;
 
 import io.micronaut.context.annotation.Requires;
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/validator/JwtTokenValidator.java
Patch:
@@ -175,7 +175,7 @@ protected  Publisher<Authentication> validateSignedJWT(SignedJWT signedJWT) thro
      */
     protected boolean verifyClaims(JWTClaimsSet jwtClaimsSet) {
         return this.jwtClaimsValidators.stream()
-                .allMatch(jwtClaimsValidator -> jwtClaimsValidator.isValid(jwtClaimsSet));
+                .allMatch(jwtClaimsValidator -> jwtClaimsValidator.validate(jwtClaimsSet));
     }
 
     /**

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/validator/SubjectNotNullJwtClaimsValidator.java
Patch:
@@ -46,8 +46,8 @@ public boolean validate(JWTClaimsSet claimsSet) {
         final String subject = claimsSet.getSubject();
         boolean hasSubject = subject != null;
         if (!hasSubject) {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("JWT must contain a subject ('sub' claim)");
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("JWT must contain a subject ('sub' claim)");
             }
         }
         return hasSubject;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/jwks/JwksSignatureConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class JwksSignatureConfiguration implements SignatureConfiguration {
      */
     public JwksSignatureConfiguration(JwksSignatureConfigurationProperties jwksSignatureConfigurationProperties) {
         if (LOG.isDebugEnabled()) {
-            LOG.error("JWT validation URL: {}", jwksSignatureConfigurationProperties.getUrl());
+            LOG.debug("JWT validation URL: {}", jwksSignatureConfigurationProperties.getUrl());
         }
         this.url = jwksSignatureConfigurationProperties.getUrl();
         this.jwkSet = jwkSetByUrl(jwksSignatureConfigurationProperties.getUrl());

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/validator/SubjectNotNullJwtClaimsValidator.java
Patch:
@@ -44,12 +44,12 @@ public class SubjectNotNullJwtClaimsValidator implements JwtClaimsValidator {
     @Override
     public boolean validate(JWTClaimsSet claimsSet) {
         final String subject = claimsSet.getSubject();
-        boolean condition = subject == null;
-        if (!condition) {
+        boolean hasSubject = subject != null;
+        if (!hasSubject) {
             if (LOG.isWarnEnabled()) {
                 LOG.warn("JWT must contain a subject ('sub' claim)");
             }
         }
-        return condition;
+        return hasSubject;
     }
 }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1130,9 +1130,9 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, AtomicRefer
             nettyHeaders.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
         }
 
-        Optional<NettyCustomizableResponseTypeHandlerInvoker> customizableTypeBody = message.getBody(NettyCustomizableResponseTypeHandlerInvoker.class);
-        if (customizableTypeBody.isPresent()) {
-            NettyCustomizableResponseTypeHandlerInvoker handler = customizableTypeBody.get();
+        final Object body = message.body();
+        if (body instanceof NettyCustomizableResponseTypeHandlerInvoker) {
+            NettyCustomizableResponseTypeHandlerInvoker handler = (NettyCustomizableResponseTypeHandlerInvoker) body;
             handler.invoke(httpRequest, nettyHttpResponse, context);
         } else {
             // close handled by HttpServerKeepAliveHandler

File: runtime/src/main/java/io/micronaut/jackson/convert/JsonNodeToObjectConverter.java
Patch:
@@ -51,7 +51,7 @@ public Optional<Object> convert(JsonNode node, Class<Object> targetType, Convers
                 return Optional.of(node.toString());
             } else {
                 Object result = objectMapper.treeToValue(node, targetType);
-                return Optional.of(result);
+                return Optional.ofNullable(result);
             }
         } catch (JsonProcessingException e) {
             context.reject(e);

File: runtime/src/main/java/io/micronaut/scheduling/TaskExceptionHandler.java
Patch:
@@ -24,7 +24,7 @@
  * @author graemerocher
  * @since 1.0
  * @param <T> The generic type of the task bean
- * @param <E> The generic type of the exceptoin
+ * @param <E> The generic type of the exception
  */
 public interface TaskExceptionHandler<T, E extends Throwable> extends BeanExceptionHandler<T, E> {
 }

File: runtime/src/main/java/io/micronaut/scheduling/processor/ScheduledMethodProcessor.java
Patch:
@@ -104,8 +104,9 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
                     .orElse(null);
 
                 Class<Object> beanType = (Class<Object>) beanDefinition.getBeanType();
-                Object bean = beanContext.getBean(beanType, qualifer);
+                Object bean = null;
                 try {
+                    bean = beanContext.getBean(beanType, qualifer);
                     if (method.getArguments().length == 0) {
                         ((ExecutableMethod) method).invoke(bean);
                     }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractEnvironmentAnnotationMetadata.java
Patch:
@@ -144,7 +144,7 @@ public Set<String> getDeclaredAnnotationNames() {
 
     @Override
     public List<String> getDeclaredAnnotationNamesByStereotype(String stereotype) {
-        return annotationMetadata.getAnnotationNamesByStereotype(stereotype);
+        return annotationMetadata.getDeclaredAnnotationNamesByStereotype(stereotype);
     }
 
     @Override

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -60,7 +60,6 @@
 import org.reactivestreams.Publisher;
 
 import javax.annotation.Nullable;
-import javax.lang.model.element.TypeElement;
 import javax.validation.constraints.*;
 import java.io.IOException;
 import java.math.BigDecimal;

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/OpenApiControllerVisitor.java
Patch:
@@ -513,7 +513,7 @@ private void readTags(MethodElement element, io.swagger.v3.oas.models.Operation
     private Content buildContent(Element definingElement, ClassElement type, String mediaType, OpenAPI openAPI, VisitorContext context) {
         Content content = new Content();
         io.swagger.v3.oas.models.media.MediaType mt = new io.swagger.v3.oas.models.media.MediaType();
-        mt.setSchema(resolveSchema(openAPI,definingElement, type, context, mediaType));
+        mt.setSchema(resolveSchema(openAPI, definingElement, type, context, mediaType));
         content.addMediaType(mediaType, mt);
         return content;
     }

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/NamedRedisClientFactory.java
Patch:
@@ -23,8 +23,6 @@
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 
-import javax.inject.Singleton;
-
 /**
  * A factory bean for constructing {@link RedisClient} instances from {@link NamedRedisServersConfiguration} instances.
  *

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingAnalyzer.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.reflect.ClassLoadingReporter;
 import io.micronaut.core.reflect.ClassUtils;
-import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
 import io.micronaut.core.util.ArrayUtils;

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.discovery.StaticServiceInstanceList;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -65,7 +64,7 @@ public ServiceHttpClientFactory(
     }
 
     /**
-     * Create a {@link ServiceInstanceList} for each configured client.
+     * Create a {@link io.micronaut.discovery.ServiceInstanceList} for each configured client.
      *
      * @param configuration The configuration
      * @return The instance list
@@ -76,7 +75,7 @@ StaticServiceInstanceList serviceInstanceList(ServiceHttpClientConfiguration con
         List<URI> originalURLs = configuration.getUrls();
         Collection<URI> loadBalancedURIs = new ConcurrentLinkedQueue<>(originalURLs);
         return new StaticServiceInstanceList(configuration.getServiceId(), loadBalancedURIs);
-    };
+    }
 
     /**
      * Creates {@link HttpClient} instances for each defined {@link ServiceHttpClientConfiguration}.

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -144,6 +144,7 @@ public HttpClientIntroductionAdvice(
         this.loadBalancerResolver = loadBalancerResolver;
         this.transformers = transformers != null ? transformers : Collections.emptyList();
     }
+
     /**
      * Interceptor to apply headers, cookies, parameter and body arguements.
      *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonHttpContentSubscriberFactory.java
Patch:
@@ -34,7 +34,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Consumes({MediaType.APPLICATION_JSON_STREAM,MediaType.APPLICATION_JSON})
+@Consumes({MediaType.APPLICATION_JSON_STREAM, MediaType.APPLICATION_JSON})
 @Singleton
 @Internal
 public class JsonHttpContentSubscriberFactory implements HttpContentSubscriberFactory {

File: http/src/main/java/io/micronaut/http/MutableHttpHeaders.java
Patch:
@@ -251,5 +251,4 @@ default MutableHttpHeaders add(CharSequence header, Integer value) {
         return this;
     }
 
-
 }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -38,6 +38,7 @@ public class GroovyParameterElement extends AbstractGroovyElement implements Par
 
     private final SourceUnit sourceUnit;
     private final Parameter parameter;
+
     /**
      * Default constructor.
      *

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.annotation.processing;
 
 import static javax.lang.model.element.ElementKind.ANNOTATION_TYPE;
-import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.ElementKind.FIELD;
 import static javax.lang.model.type.TypeKind.ARRAY;
@@ -55,7 +54,6 @@
 import javax.inject.Named;
 import javax.inject.Provider;
 import javax.inject.Scope;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.*;

File: inject/src/main/java/io/micronaut/context/BeanResolutionContext.java
Patch:
@@ -62,7 +62,7 @@ public interface BeanResolutionContext extends Map<String, Object>, ValueResolve
     <T> void addInFlightBean(BeanIdentifier beanIdentifier, T instance);
 
     /**
-     * Obtains an inflight bean for the given identifier
+     * Obtains an inflight bean for the given identifier.
      * @param beanIdentifier The bean identifier
      * @param <T> The bean type
      * @return The bean

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -385,8 +385,6 @@ protected Map<CharSequence, Object> populateAnnotationData(
      */
     protected abstract VisitorContext createVisitorContext();
 
-
-
     private void processAnnotationDefaults(A annotationMirror, DefaultAnnotationMetadata metadata, String annotationName) {
         Map<? extends T, ?> elementDefaultValues = readAnnotationDefaultValues(annotationMirror);
         processAnnotationDefaults(metadata, annotationName, elementDefaultValues);

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceResolver.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.PathMatcher;
 import io.micronaut.core.util.StringUtils;
-import io.micronaut.http.hateos.Resource;
 
 import javax.inject.Singleton;
 import java.net.URL;

File: validation/src/main/java/io/micronaut/validation/routes/RouteValidationVisitor.java
Patch:
@@ -48,7 +48,7 @@ public class RouteValidationVisitor implements TypeElementVisitor<Object, HttpMe
         protected boolean resolveReplacement(StringBuilder builder, String str, String expr) {
             builder.append("tmp");
             return true;
-        };
+        }
     };
 
     @Override

File: views/src/main/java/io/micronaut/views/ViewsFilter.java
Patch:
@@ -24,9 +24,7 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.filter.HttpServerFilter;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.micronaut.inject.MethodExecutionHandle;
 import io.micronaut.web.router.qualifier.ProducesMediaTypeQualifier;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -60,7 +60,6 @@
 import org.reactivestreams.Publisher;
 
 import javax.annotation.Nullable;
-import javax.lang.model.element.TypeElement;
 import javax.validation.constraints.*;
 import java.io.IOException;
 import java.math.BigDecimal;

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/OpenApiControllerVisitor.java
Patch:
@@ -513,7 +513,7 @@ private void readTags(MethodElement element, io.swagger.v3.oas.models.Operation
     private Content buildContent(Element definingElement, ClassElement type, String mediaType, OpenAPI openAPI, VisitorContext context) {
         Content content = new Content();
         io.swagger.v3.oas.models.media.MediaType mt = new io.swagger.v3.oas.models.media.MediaType();
-        mt.setSchema(resolveSchema(openAPI,definingElement, type, context, mediaType));
+        mt.setSchema(resolveSchema(openAPI, definingElement, type, context, mediaType));
         content.addMediaType(mediaType, mt);
         return content;
     }

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/NamedRedisClientFactory.java
Patch:
@@ -23,8 +23,6 @@
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 
-import javax.inject.Singleton;
-
 /**
  * A factory bean for constructing {@link RedisClient} instances from {@link NamedRedisServersConfiguration} instances.
  *

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingAnalyzer.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.reflect.ClassLoadingReporter;
 import io.micronaut.core.reflect.ClassUtils;
-import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
 import io.micronaut.core.util.ArrayUtils;

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.discovery.StaticServiceInstanceList;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
@@ -65,7 +64,7 @@ public ServiceHttpClientFactory(
     }
 
     /**
-     * Create a {@link ServiceInstanceList} for each configured client.
+     * Create a {@link io.micronaut.discovery.ServiceInstanceList} for each configured client.
      *
      * @param configuration The configuration
      * @return The instance list
@@ -76,7 +75,7 @@ StaticServiceInstanceList serviceInstanceList(ServiceHttpClientConfiguration con
         List<URI> originalURLs = configuration.getUrls();
         Collection<URI> loadBalancedURIs = new ConcurrentLinkedQueue<>(originalURLs);
         return new StaticServiceInstanceList(configuration.getServiceId(), loadBalancedURIs);
-    };
+    }
 
     /**
      * Creates {@link HttpClient} instances for each defined {@link ServiceHttpClientConfiguration}.

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -144,6 +144,7 @@ public HttpClientIntroductionAdvice(
         this.loadBalancerResolver = loadBalancerResolver;
         this.transformers = transformers != null ? transformers : Collections.emptyList();
     }
+
     /**
      * Interceptor to apply headers, cookies, parameter and body arguements.
      *

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/jackson/JsonHttpContentSubscriberFactory.java
Patch:
@@ -34,7 +34,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Consumes({MediaType.APPLICATION_JSON_STREAM,MediaType.APPLICATION_JSON})
+@Consumes({MediaType.APPLICATION_JSON_STREAM, MediaType.APPLICATION_JSON})
 @Singleton
 @Internal
 public class JsonHttpContentSubscriberFactory implements HttpContentSubscriberFactory {

File: http/src/main/java/io/micronaut/http/MutableHttpHeaders.java
Patch:
@@ -251,5 +251,4 @@ default MutableHttpHeaders add(CharSequence header, Integer value) {
         return this;
     }
 
-
 }

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyParameterElement.java
Patch:
@@ -38,6 +38,7 @@ public class GroovyParameterElement extends AbstractGroovyElement implements Par
 
     private final SourceUnit sourceUnit;
     private final Parameter parameter;
+
     /**
      * Default constructor.
      *

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.annotation.processing;
 
 import static javax.lang.model.element.ElementKind.ANNOTATION_TYPE;
-import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.ElementKind.FIELD;
 import static javax.lang.model.type.TypeKind.ARRAY;
@@ -55,7 +54,6 @@
 import javax.inject.Named;
 import javax.inject.Provider;
 import javax.inject.Scope;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.*;

File: inject/src/main/java/io/micronaut/context/BeanResolutionContext.java
Patch:
@@ -62,7 +62,7 @@ public interface BeanResolutionContext extends Map<String, Object>, ValueResolve
     <T> void addInFlightBean(BeanIdentifier beanIdentifier, T instance);
 
     /**
-     * Obtains an inflight bean for the given identifier
+     * Obtains an inflight bean for the given identifier.
      * @param beanIdentifier The bean identifier
      * @param <T> The bean type
      * @return The bean

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -385,8 +385,6 @@ protected Map<CharSequence, Object> populateAnnotationData(
      */
     protected abstract VisitorContext createVisitorContext();
 
-
-
     private void processAnnotationDefaults(A annotationMirror, DefaultAnnotationMetadata metadata, String annotationName) {
         Map<? extends T, ?> elementDefaultValues = readAnnotationDefaultValues(annotationMirror);
         processAnnotationDefaults(metadata, annotationName, elementDefaultValues);

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceResolver.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.PathMatcher;
 import io.micronaut.core.util.StringUtils;
-import io.micronaut.http.hateos.Resource;
 
 import javax.inject.Singleton;
 import java.net.URL;

File: validation/src/main/java/io/micronaut/validation/routes/RouteValidationVisitor.java
Patch:
@@ -48,7 +48,7 @@ public class RouteValidationVisitor implements TypeElementVisitor<Object, HttpMe
         protected boolean resolveReplacement(StringBuilder builder, String str, String expr) {
             builder.append("tmp");
             return true;
-        };
+        }
     };
 
     @Override

File: views/src/main/java/io/micronaut/views/ViewsFilter.java
Patch:
@@ -24,9 +24,7 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.filter.HttpServerFilter;
-import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.micronaut.inject.MethodExecutionHandle;
 import io.micronaut.web.router.qualifier.ProducesMediaTypeQualifier;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestArgumentSatisfier.java
Patch:
@@ -137,7 +137,7 @@ protected Optional<Object> getValueForArgument(Argument argument, HttpRequest<?>
                     }
                 } else if (bindingResult.isPresentAndSatisfied()) {
                     value = bindingResult.get();
-                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isDeclaredAnnotationPresent(Nullable.class)) {
+                } else if (HttpMethod.requiresRequestBody(request.getMethod()) || argument.isAnnotationPresent(Nullable.class)) {
                     value = (UnresolvedArgument) () -> {
                         ArgumentBinder.BindingResult result = argumentBinder.bind(conversionContext, request);
                         Optional<ConversionError> lastError = conversionContext.getLastError();

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -266,7 +266,7 @@ public R execute(Map<String, Object> argumentValues) {
                             argumentList.add(resolveValueOrError(argument, conversionContext, result));
                         }
                     } else {
-                        if (argument.isDeclaredAnnotationPresent(Nullable.class)) {
+                        if (argument.isAnnotationPresent(Nullable.class)) {
                             argumentList.add(null);
                             continue;
                         } else {
@@ -348,7 +348,7 @@ public RouteMatch<R> fulfill(Map<String, Object> argumentValues) {
     protected Object resolveValueOrError(Argument argument, ConversionContext conversionContext, Optional<?> result) {
         if (!result.isPresent()) {
             Optional<ConversionError> lastError = conversionContext.getLastError();
-            if (!lastError.isPresent() && argument.isDeclaredAnnotationPresent(Nullable.class)) {
+            if (!lastError.isPresent() && argument.isAnnotationPresent(Nullable.class)) {
                 return null;
             }
             throw lastError.map(conversionError ->

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1911,7 +1911,7 @@ private void traceHeaders(HttpHeaders headers) {
     }
 
     private static MediaTypeCodecRegistry createDefaultMediaTypeRegistry() {
-        ObjectMapper objectMapper = new ObjectMapperFactory().objectMapper(Optional.empty(), Optional.empty());
+        ObjectMapper objectMapper = new ObjectMapperFactory().objectMapper(null, null);
         ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
         return MediaTypeCodecRegistry.of(
                 new JsonMediaTypeCodec(objectMapper, applicationConfiguration, null), new JsonStreamMediaTypeCodec(objectMapper, applicationConfiguration, null)

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -597,7 +597,7 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
                         }
                     }
                     if (objectMapper == null) {
-                        objectMapper = new ObjectMapperFactory().objectMapper(Optional.empty(), Optional.empty());
+                        objectMapper = new ObjectMapperFactory().objectMapper(null, null);
                     }
 
                     SerializationFeature[] enabledSerializationFeatures = jacksonFeatures.get("enabledSerializationFeatures", SerializationFeature[].class).orElse(null);

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/Route53ClientDiscoveryConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.discovery.DiscoveryConfiguration;
+import io.micronaut.discovery.aws.route53.client.Route53AutoNamingClient;
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;
 import io.micronaut.discovery.registration.RegistrationConfiguration;
 
@@ -34,7 +35,7 @@
  * See https://docs.aws.amazon.com/Route53/latest/APIReference/overview-service-discovery.html for details info
  */
 @Requires(env = Environment.AMAZON_EC2)
-@Requires(property = Route53ClientDiscoveryConfiguration.PREFIX)
+@Requires(property = Route53AutoNamingClient.ENABLED, value = "true", defaultValue = "false")
 @ConfigurationProperties(Route53ClientDiscoveryConfiguration.PREFIX)
 public class Route53ClientDiscoveryConfiguration extends DiscoveryClientConfiguration {
 

File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java
Patch:
@@ -699,7 +699,7 @@ protected void registerDefaultConverters() {
                         continue;
                     }
                 }
-                if (!valueType.isInstance(value)) {
+                if (!valueType.isInstance(value) || Map.class.isAssignableFrom(valueType)) {
                     Optional converted = convert(value, valueType, valContext);
                     if (converted.isPresent()) {
                         value = converted.get();

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulServiceInstanceList.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.discovery.consul;
 
-import io.micronaut.discovery.client.DiscoveryClientConfiguration;
 import io.micronaut.discovery.client.DiscoveryServerInstanceList;
 import io.micronaut.discovery.consul.client.v1.ConsulClient;
 import io.micronaut.discovery.consul.condition.RequiresConsul;
@@ -44,7 +43,7 @@ public class ConsulServiceInstanceList extends DiscoveryServerInstanceList {
      * @param configuration The discovery config
      * @param instanceConfiguration The instance config
      */
-    public ConsulServiceInstanceList(DiscoveryClientConfiguration configuration, ApplicationConfiguration.InstanceConfiguration instanceConfiguration) {
+    public ConsulServiceInstanceList(ConsulConfiguration configuration, ApplicationConfiguration.InstanceConfiguration instanceConfiguration) {
         super(configuration, instanceConfiguration);
     }
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -109,7 +109,7 @@ public NettyServerWebSocketUpgradeHandler(
     }
 
     @Override
-    public boolean acceptInboundMessage(Object msg) throws Exception {
+    public boolean acceptInboundMessage(Object msg) {
         if (msg instanceof NettyHttpRequest) {
             NettyHttpRequest<?> request = (NettyHttpRequest) msg;
             HttpHeaders headers = request.getHeaders();

File: websocket/src/main/java/io/micronaut/websocket/annotation/ServerWebSocket.java
Patch:
@@ -17,8 +17,10 @@
 package io.micronaut.websocket.annotation;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.context.annotation.DefaultScope;
 import io.micronaut.websocket.WebSocketVersion;
 
+import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -37,6 +39,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @WebSocketComponent
+@DefaultScope(Singleton.class)
 public @interface ServerWebSocket {
 
     /**

File: inject/src/main/java/io/micronaut/inject/ast/MemberElement.java
Patch:
@@ -17,7 +17,8 @@
 package io.micronaut.inject.ast;
 
 /**
- * An inner element is an element that is contained within a class.
+ * A member element is an element that is contained within a {@link ClassElement}.
+ * The {@link #getDeclaringType()} method returns the class that declares the element.
  *
  * @author graemerocher
  * @since 1.0

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/package-info.java
Patch:
@@ -20,4 +20,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Internal
 package io.micronaut.ast.groovy.visitor;
+
+import io.micronaut.core.annotation.Internal;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaConstructorElement.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.annotation.processing.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ConstructorElement;
 
 import javax.lang.model.element.ExecutableElement;
@@ -27,7 +28,8 @@
  * @author graemerocher
  * @since 1.0
  */
-public class JavaConstructorElement extends JavaMethodElement implements ConstructorElement {
+@Internal
+class JavaConstructorElement extends JavaMethodElement implements ConstructorElement {
 
     /**
      * @param executableElement  The {@link ExecutableElement}

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaEnumElement.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.annotation.processing.visitor;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.EnumElement;
 
 import javax.lang.model.element.ElementKind;
@@ -32,14 +33,15 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 class JavaEnumElement extends JavaClassElement implements EnumElement {
     /**
      * @param classElement       The {@link TypeElement}
      * @param annotationMetadata The annotation metadata
      * @param visitorContext The visitor context
      * @param typeArguments The type arguments
      */
-    public JavaEnumElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext, List<? extends TypeMirror> typeArguments) {
+    JavaEnumElement(TypeElement classElement, AnnotationMetadata annotationMetadata, JavaVisitorContext visitorContext, List<? extends TypeMirror> typeArguments) {
         super(classElement, annotationMetadata, visitorContext, typeArguments);
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaParameterElement.java
Patch:
@@ -31,7 +31,7 @@
  * @since 1.0
  */
 @Internal
-public class JavaParameterElement extends AbstractJavaElement implements ParameterElement {
+class JavaParameterElement extends AbstractJavaElement implements ParameterElement {
 
     private final JavaVisitorContext visitorContext;
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVoidElement.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataDelegate;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.ast.ClassElement;
 
 /**
@@ -26,6 +27,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 final class JavaVoidElement implements ClassElement, AnnotationMetadataDelegate {
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/package-info.java
Patch:
@@ -20,4 +20,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 package io.micronaut.annotation.processing.visitor;
+
+import io.micronaut.core.annotation.Internal;

File: inject/src/main/java/io/micronaut/inject/ast/FieldElement.java
Patch:
@@ -22,5 +22,5 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface FieldElement extends TypedElement {
+public interface FieldElement extends TypedElement, MemberElement {
 }

File: inject/src/main/java/io/micronaut/inject/ast/MethodElement.java
Patch:
@@ -24,7 +24,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface MethodElement extends Element {
+public interface MethodElement extends MemberElement {
 
     /**
      * @return The return type of the method

File: inject/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -24,7 +24,7 @@
  * @author graemerocher
  * @since 1.0
  */
-public interface PropertyElement extends TypedElement {
+public interface PropertyElement extends TypedElement, MemberElement {
     /**
      * @return The type of the property
      */

File: inject/src/main/java/io/micronaut/context/env/AbstractPropertySourceLoader.java
Patch:
@@ -139,7 +139,7 @@ protected void processMap(Map<String, Object> finalMap, Map map, String prefix)
             Map.Entry entry = (Map.Entry) o;
             String key = entry.getKey().toString();
             Object value = entry.getValue();
-            if (value instanceof Map) {
+            if (value instanceof Map && !((Map) value).isEmpty()) {
                 processMap(finalMap, (Map) value, prefix + key + '.');
             } else {
                 finalMap.put(prefix + key, value);

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
+import io.micronaut.http.HttpResponseProvider;
 
 import java.util.Optional;
 
@@ -28,7 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class HttpClientResponseException extends HttpClientException {
+public class HttpClientResponseException extends HttpClientException implements HttpResponseProvider {
     private final HttpResponse<?> response;
     private final HttpClientErrorDecoder errorDecoder;
 

File: inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java
Patch:
@@ -26,6 +26,7 @@
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.ParametrizedBeanFactory;
 
+import javax.annotation.Nullable;
 import javax.inject.Qualifier;
 import java.lang.annotation.Annotation;
 import java.util.Arrays;
@@ -95,8 +96,8 @@ public final T build(BeanResolutionContext resolutionContext,
             try {
                 path.pushConstructorResolve(this, requiredArgument);
                 String argumentName = requiredArgument.getName();
-                if (!requiredArgumentValues.containsKey(argumentName)) {
-                    throw new BeanInstantiationException(resolutionContext, "Missing argument value: " + argumentName);
+                if (!requiredArgumentValues.containsKey(argumentName) && !requiredArgument.isAnnotationPresent(Nullable.class)) {
+                    throw new BeanInstantiationException(resolutionContext, "Missing bean argument value: " + argumentName);
                 }
                 Object value = requiredArgumentValues.get(argumentName);
                 boolean requiresConversion = value != null && !requiredArgument.getType().isInstance(value);

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/session/RedisSessionCommands.java
Patch:
@@ -40,7 +40,7 @@ public interface RedisSessionCommands extends Commands {
      * @param attributes The attributes
      * @return String simple-string-reply
      */
-    @Command("HMSET :sessionId :value")
+    @Command("HMSET :sessionId :attributes")
     CompletableFuture<Void> saveSessionData(@Param("sessionId") byte[] sessionId, @Param("value") Map<byte[], byte[]> attributes);
 
     /**
@@ -107,7 +107,7 @@ public interface RedisSessionCommands extends Commands {
      * @param key The key to get
      * @return Long integer-reply the number of found keys.
      */
-    CompletableFuture<byte[]> get(@Param("keys") byte[] key);
+    CompletableFuture<byte[]> get(@Param("key") byte[] key);
 
     /**
      * Return a range of members in a sorted set, by score.

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/intercept/KafkaClientIntroductionAdvice.java
Patch:
@@ -539,10 +539,10 @@ private KafkaProducer getProducer(Argument bodyArgument, @Nullable Argument keyA
                 if (namedConfig.isPresent()) {
                     configuration = namedConfig.get();
                 } else {
-                    configuration = beanContext.getBean(DefaultKafkaProducerConfiguration.class);
+                    configuration = beanContext.getBean(AbstractKafkaProducerConfiguration.class);
                 }
             } else {
-                configuration = beanContext.getBean(DefaultKafkaProducerConfiguration.class);
+                configuration = beanContext.getBean(AbstractKafkaProducerConfiguration.class);
             }
 
             DefaultKafkaProducerConfiguration<?, ?> newConfiguration = new DefaultKafkaProducerConfiguration<>(

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/scope/KafkaClientScope.java
Patch:
@@ -134,7 +134,7 @@ private <T> T getKafkaProducer(@Nullable String id, Argument<?> keyType, Argumen
         );
 
         return (T) clients.computeIfAbsent(key, clientKey -> {
-            Supplier<AbstractKafkaProducerConfiguration> defaultResolver = () -> beanContext.getBean(DefaultKafkaProducerConfiguration.class);
+            Supplier<AbstractKafkaProducerConfiguration> defaultResolver = () -> beanContext.getBean(AbstractKafkaProducerConfiguration.class);
             AbstractKafkaProducerConfiguration config;
             boolean hasId = StringUtils.isNotEmpty(id);
             if (hasId) {

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/AbstractEurekaClient.java
Patch:
@@ -51,7 +51,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Client(id = EurekaClient.SERVICE_ID, path = "/eureka", configuration = EurekaConfiguration.class)
+@Client(id = EurekaClient.SERVICE_ID, path = EurekaConfiguration.CONTEXT_PATH_PLACEHOLDER, configuration = EurekaConfiguration.class)
 @JacksonFeatures(
     enabledSerializationFeatures = WRAP_ROOT_VALUE,
     disabledSerializationFeatures = WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED,

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -85,7 +85,7 @@ public Types getTypeUtils() {
      * @return The {@link TypeElement}
      */
     final TypeElement classElementFor(Element element) {
-        while (!(element.getKind().isClass() || element.getKind().isInterface())) {
+        while (!(JavaModelUtils.isClass(element) || JavaModelUtils.isInterface(element))) {
             element = element.getEnclosingElement();
         }
         return (TypeElement) element;

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.micronaut.annotation.processing;
 
+import io.micronaut.inject.processing.JavaModelUtils;
+
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
@@ -52,7 +54,7 @@ protected SuperclassAwareTypeVisitor(Types types) {
     public R visitDeclared(DeclaredType type, P p) {
         Element element = type.asElement();
 
-        while ((element.getKind() == ElementKind.CLASS || element.getKind() == ElementKind.INTERFACE) && !element.toString().equals(Object.class.getName())) {
+        while ((JavaModelUtils.isClassOrInterface(element)) && !element.toString().equals(Object.class.getName())) {
             TypeElement typeElement = (TypeElement) element;
             List<? extends Element> enclosedElements = typeElement.getEnclosedElements();
             for (Element enclosedElement : enclosedElements) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.core.io.service.SoftServiceLoader;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.version.VersionUtils;
+import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
 import javax.annotation.processing.Messager;
@@ -122,7 +123,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
 
         roundEnv.getRootElements()
                 .stream()
-                .filter(element -> element.getKind().isClass() || element.getKind().isInterface())
+                .filter(JavaModelUtils::isClassOrInterface)
                 .map(modelUtils::classElementFor)
                 .filter(typeElement -> {
                     return groovyObjectType == null || !typeUtils.isAssignable(typeElement.asType(), groovyObjectType);
@@ -168,7 +169,7 @@ public Object visitType(TypeElement classElement, Object o) {
 
             Element enclosingElement = classElement.getEnclosingElement();
             // don't process inner class unless this is the visitor for it
-            boolean shouldVisit = !enclosingElement.getKind().isClass() ||
+            boolean shouldVisit = !JavaModelUtils.isClass(enclosingElement) ||
                     concreteClass.getQualifiedName().equals(classElement.getQualifiedName());
 
             if (shouldVisit) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataDelegate;
 import io.micronaut.inject.ast.ClassElement;
+import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
@@ -118,7 +119,7 @@ protected ClassElement mirrorToClassElement(TypeMirror returnType, JavaVisitorCo
             List<? extends TypeMirror> typeArguments = dt.getTypeArguments();
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;
-                if (typeElement.getKind() == ElementKind.ENUM) {
+                if (JavaModelUtils.resolveKind(typeElement, ElementKind.ENUM).isPresent()) {
                     return new JavaEnumElement(
                             typeElement,
                             visitorContext.getAnnotationUtils().getAnnotationMetadata(typeElement),

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.inject.ast.ClassElement;
 import io.micronaut.inject.ast.PropertyElement;
+import io.micronaut.inject.processing.JavaModelUtils;
 
 import javax.lang.model.element.*;
 import javax.lang.model.type.DeclaredType;
@@ -75,7 +76,7 @@ public boolean isAbstract() {
 
     @Override
     public boolean isInterface() {
-        return classElement.getKind() == ElementKind.INTERFACE;
+        return JavaModelUtils.isInterface(classElement);
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.reflect.GenericTypeUtils;
+import io.micronaut.inject.processing.JavaModelUtils;
 import io.micronaut.inject.visitor.TypeElementVisitor;
 
 import javax.annotation.processing.ProcessingEnvironment;
@@ -139,7 +140,7 @@ public void visit(Element element, AnnotationMetadata annotationMetadata) {
             }
         } else if (element instanceof TypeElement) {
             TypeElement typeElement = (TypeElement) element;
-            boolean isEnum = typeElement.getKind() == ElementKind.ENUM;
+            boolean isEnum = JavaModelUtils.resolveKind(typeElement, ElementKind.ENUM).isPresent();
             if (isEnum) {
                 visitor.visitClass(
                         new JavaEnumElement(

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -293,6 +293,7 @@ public class MediaType implements CharSequence {
         textTypePatterns.add(Pattern.compile("^.*\\+json$"));
         textTypePatterns.add(Pattern.compile("^.*\\+text$"));
         textTypePatterns.add(Pattern.compile("^.*\\+xml$"));
+        textTypePatterns.add(Pattern.compile("^application/javascript$"));
     }
 
     /**

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -293,6 +293,7 @@ public class MediaType implements CharSequence {
         textTypePatterns.add(Pattern.compile("^.*\\+json$"));
         textTypePatterns.add(Pattern.compile("^.*\\+text$"));
         textTypePatterns.add(Pattern.compile("^.*\\+xml$"));
+        textTypePatterns.add(Pattern.compile("^application/javascript$"));
     }
 
     /**

File: function-aws/src/main/java/io/micronaut/function/aws/MicronautRequestStreamHandler.java
Patch:
@@ -34,6 +34,7 @@
  * @since 1.0
  */
 public class MicronautRequestStreamHandler extends StreamFunctionExecutor<Context> implements RequestStreamHandler {
+
     @Override
     public void handleRequest(InputStream input, OutputStream output, Context context) throws IOException {
         execute(input, output, context);

File: function/src/main/java/io/micronaut/function/executor/FunctionInitializer.java
Patch:
@@ -36,7 +36,6 @@
  */
 public class FunctionInitializer extends AbstractExecutor implements Closeable, AutoCloseable {
 
-    protected final ApplicationContext applicationContext;
     protected final boolean closeContext;
     private FunctionExitHandler functionExitHandler = new DefaultFunctionExitHandler();
 
@@ -45,7 +44,6 @@ public class FunctionInitializer extends AbstractExecutor implements Closeable,
      */
     public FunctionInitializer() {
         ApplicationContext applicationContext = buildApplicationContext(null);
-        this.applicationContext = applicationContext;
         startThis(applicationContext);
         injectThis(applicationContext);
         this.closeContext = true;

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSenderFactory.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.tracing.brave.BraveTracerConfiguration;
 import zipkin2.reporter.Sender;
 
+import javax.inject.Provider;
 import javax.inject.Singleton;
 
 /**
@@ -52,7 +53,7 @@ protected HttpClientSenderFactory(BraveTracerConfiguration.HttpClientSenderConfi
     @Bean
     @Singleton
     @Requires(missingBeans = Sender.class)
-    Sender zipkinSender(LoadBalancerResolver loadBalancerResolver) {
+    Sender zipkinSender(Provider<LoadBalancerResolver> loadBalancerResolver) {
         return configuration.getBuilder().build(loadBalancerResolver);
     }
 }

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/HibernateTransactionManagerFactory.java
Patch:
@@ -17,11 +17,10 @@
 package io.micronaut.configuration.hibernate.jpa;
 
 import io.micronaut.context.annotation.*;
-import io.micronaut.spring.tx.datasource.DataSourceTransactionManagerFactory;
+import io.micronaut.jdbc.spring.DataSourceTransactionManagerFactory;
 import org.hibernate.SessionFactory;
 import org.springframework.orm.hibernate5.HibernateTransactionManager;
 
-import javax.inject.Singleton;
 import javax.sql.DataSource;
 
 /**

File: jdbc/src/main/java/io/micronaut/jdbc/spring/DataSourceTransactionManagerFactory.java
Patch:
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package io.micronaut.spring.tx.datasource;
+package io.micronaut.jdbc.spring;
 
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
+import io.micronaut.core.annotation.Internal;
 import org.springframework.jdbc.datasource.DataSourceTransactionManager;
 import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;
 
@@ -36,6 +37,7 @@
 @Factory
 @Requires(classes = DataSourceTransactionManager.class)
 @Requires(condition = HibernatePresenceCondition.class)
+@Internal
 public class DataSourceTransactionManagerFactory {
 
     /**

File: jdbc/src/main/java/io/micronaut/jdbc/spring/HibernatePresenceCondition.java
Patch:
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package io.micronaut.spring.tx.datasource;
+package io.micronaut.jdbc.spring;
 
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.condition.Condition;
 import io.micronaut.context.condition.ConditionContext;
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.reflect.ClassUtils;
 
 /**
@@ -27,6 +28,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@Internal
 public final class HibernatePresenceCondition implements Condition {
     @Override
     public boolean matches(ConditionContext context) {

File: jdbc/src/main/java/io/micronaut/jdbc/spring/SpringDataSourceResolver.java
Patch:
@@ -14,8 +14,9 @@
  * limitations under the License.
  */
 
-package io.micronaut.spring.tx.datasource;
+package io.micronaut.jdbc.spring;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.jdbc.DataSourceResolver;
 import org.springframework.jdbc.datasource.DelegatingDataSource;
 
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Singleton
+@Internal
 public final class SpringDataSourceResolver implements DataSourceResolver {
 
     @Override

File: jdbc/src/main/java/io/micronaut/jdbc/spring/package-info.java
Patch:
@@ -15,9 +15,9 @@
  */
 
 /**
- * Classes for configuring transaction management for data sources.
+ * Classes for configuring transaction management via Spring for data sources.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.spring.tx.datasource;
+package io.micronaut.jdbc.spring;

File: spring/src/main/java/io/micronaut/spring/tx/annotation/TransactionInterceptor.java
Patch:
@@ -59,7 +59,7 @@ public TransactionInterceptor(BeanLocator beanLocator) {
 
     @Override
     public final Object intercept(MethodInvocationContext<Object, Object> context) {
-        if (context.hasDeclaredAnnotation(Transactional.class)) {
+        if (context.hasAnnotation(Transactional.class)) {
             String transactionManagerName = context.getValue(Transactional.class, String.class).orElse(null);
             if (StringUtils.isEmpty(transactionManagerName)) {
                 transactionManagerName = null;

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -202,7 +202,7 @@ Class<?> classOfPrimitiveFor(String primitiveType) {
      */
     Class<?> classOfPrimitiveArrayFor(String primitiveType) {
         try {
-            
+
             switch (primitiveType) {
                 case "byte":
                     return Class.forName("[B");

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1748,7 +1748,7 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                                 DeclaredType dt = (DeclaredType) typeMirror;
                                 typeName = dt.asElement().getSimpleName().toString();
                             } else {
-                                typeName = typeMirror.toString();
+                                typeName = modelUtils.resolveTypeName(typeMirror);
                             }
                             Object argType = modelUtils.classOfPrimitiveFor(typeName);
                             params.addParameter(argName, argType);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1111,8 +1111,9 @@ private void writeFinalNettyResponse(MutableHttpResponse<?> message, AtomicRefer
 
         // default Connection header if not set explicitly
         if (!nettyHeaders.contains(HttpHeaderNames.CONNECTION)) {
+            boolean expectKeepAlive = nettyResponse.protocolVersion().isKeepAliveDefault() || httpRequest.getHeaders().isKeepAlive();
             HttpStatus status = nettyHttpResponse.status();
-            if (status.getCode() > 299 || !httpRequest.getHeaders().isKeepAlive()) {
+            if (!expectKeepAlive || status.getCode() > 299) {
                 nettyHeaders.add(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);
             } else {
                 nettyHeaders.add(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/EurekaConfiguration.java
Patch:
@@ -33,7 +33,6 @@
 import javax.annotation.Nullable;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
-import java.util.Optional;
 
 /**
  * Configuration options for the Eureka client.
@@ -74,9 +73,9 @@ public class EurekaConfiguration extends DiscoveryClientConfiguration {
     public EurekaConfiguration(
         EurekaConnectionPoolConfiguration eurekaConnectionPoolConfiguration,
         ApplicationConfiguration applicationConfiguration,
-        Optional<EurekaRegistrationConfiguration> eurekaRegistrationConfiguration) {
+        @Nullable EurekaRegistrationConfiguration eurekaRegistrationConfiguration) {
         super(applicationConfiguration);
-        this.registration = eurekaRegistrationConfiguration.orElse(null);
+        this.registration = eurekaRegistrationConfiguration;
         this.eurekaConnectionPoolConfiguration = eurekaConnectionPoolConfiguration;
         setPort(EUREKA_DEFAULT_PORT);
     }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -915,6 +915,9 @@ public void publishEvent(Object event) {
                 EVENT_LOGGER.debug("Publishing event: {}", event);
             }
             Collection<ApplicationEventListener> eventListeners = getBeansOfType(ApplicationEventListener.class, Qualifiers.byTypeArguments(event.getClass()));
+
+            eventListeners = eventListeners.stream().sorted(OrderUtil.COMPARATOR).collect(Collectors.toList());
+
             if (!eventListeners.isEmpty()) {
                 if (EVENT_LOGGER.isTraceEnabled()) {
                     EVENT_LOGGER.trace("Established event listeners {} for event: {}", eventListeners, event);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -923,7 +923,7 @@ private RouteMatch<?> prepareRouteForExecution(RouteMatch<?> route, NettyHttpReq
                         isStreaming = Publishers.isConvertibleToPublisher(genericType) && !Publishers.isSingle(genericType);
 
                         if (isStreaming) {
-                            javaPayloadType = generic.get().getFirstTypeVariable().map(arg -> arg.getType());
+                            javaPayloadType = generic.get().getFirstTypeVariable().map(Argument::getType);
                         }
                     }
                 }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -183,6 +183,9 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
+                FullHttpMessage message = (FullHttpMessage) inMsg;
+                // will be released by fireChannelRead
+                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationProperties.java
Patch:
@@ -47,6 +47,8 @@
 public @interface ConfigurationProperties {
 
     /**
+     * The prefix to use when resolving properties. The prefix should be defined in kebab case. Example: my-app.foo.
+     *
      * @return The prefix to use to resolve the properties
      */
     @AliasFor(annotation = ConfigurationReader.class, member = "value")

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationReader.java
Patch:
@@ -36,6 +36,8 @@
 public @interface ConfigurationReader {
 
     /**
+     * The prefix to use when resolving properties. The prefix should be defined in kebab case. Example: my-app.foo.
+     *
      * @return The configuration entry to read
      */
     String value() default "";

File: inject/src/main/java/io/micronaut/context/annotation/EachProperty.java
Patch:
@@ -85,6 +85,8 @@
 public @interface EachProperty {
 
     /**
+     * Defines the property this {@link EachProperty} is driven by. Should be in kebab case form. Example: "my-app.bar".
+     *
      * @return The property that this bean is driven by
      */
     @AliasFor(annotation = ConfigurationReader.class, member = "value")

File: inject/src/main/java/io/micronaut/context/annotation/Property.java
Patch:
@@ -33,6 +33,8 @@
 public @interface Property {
 
     /**
+     * The name of the property in kebab case. Example: my-app.bar.
+     *
      * @return The name of the property
      */
     String name();

File: inject/src/main/java/io/micronaut/context/annotation/Value.java
Patch:
@@ -38,7 +38,9 @@
 public @interface Value {
 
     /**
-     * @return The name of the property to inject.
+     * A string containing a value, which my optionally contain property placeholder expressions.
+     *
+     * @return The value to inject.
      */
     String value();
 }

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -183,9 +183,6 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
-                FullHttpMessage message = (FullHttpMessage) inMsg;
-                // will be released by fireChannelRead
-                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/bearer/AccessRefreshTokenLoginHandler.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.bearer;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.security.authentication.AuthenticationException;
@@ -35,7 +36,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = "false")
+@Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Singleton
 public class AccessRefreshTokenLoginHandler implements LoginHandler {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/bearer/BearerTokenConfigurationProperties.java
Patch:
@@ -17,6 +17,8 @@
 package io.micronaut.security.token.jwt.bearer;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpHeaderValues;
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.security.token.jwt.config.JwtConfigurationProperties;
@@ -27,6 +29,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
+@Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @ConfigurationProperties(BearerTokenConfigurationProperties.PREFIX)
 public class BearerTokenConfigurationProperties implements BearerTokenConfiguration {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/bearer/BearerTokenReader.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.bearer;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.token.jwt.cookie.JwtCookieTokenReader;
 import io.micronaut.security.token.reader.HttpHeaderTokenReader;
 import io.micronaut.security.token.reader.TokenReader;
@@ -29,7 +30,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = "false")
+@Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Singleton
 public class BearerTokenReader extends HttpHeaderTokenReader implements TokenReader {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/cookie/JwtCookieClearerLogoutHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.security.token.jwt.cookie;
 
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.cookie.Cookie;
@@ -32,7 +31,6 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = JwtCookieConfigurationProperties.PREFIX + ".enabled")
 @Singleton
 public class JwtCookieClearerLogoutHandler implements LogoutHandler {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/cookie/JwtCookieLoginHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.security.token.jwt.cookie;
 
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.cookie.Cookie;
@@ -37,7 +36,6 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = JwtCookieConfigurationProperties.PREFIX + ".enabled")
 @Singleton
 public class JwtCookieLoginHandler implements LoginHandler {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/cookie/JwtCookieTokenReader.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.security.token.jwt.cookie;
 
-import io.micronaut.context.annotation.Requires;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.security.token.reader.TokenReader;
@@ -30,7 +29,6 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = JwtCookieConfigurationProperties.PREFIX + ".enabled")
 @Singleton
 public class JwtCookieTokenReader implements TokenReader {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthController.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.endpoints;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
@@ -49,7 +50,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Requires(property = OauthControllerConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = OauthControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @Controller("${" + OauthControllerConfigurationProperties.PREFIX + ".path:/oauth/access_token}")
 @Secured(SecurityRule.IS_ANONYMOUS)
 @Validated

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthControllerConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.endpoints;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.config.SecurityConfigurationProperties;
 
@@ -26,6 +27,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
+@Requires(property = OauthControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @ConfigurationProperties(OauthControllerConfigurationProperties.PREFIX)
 public class OauthControllerConfigurationProperties implements OauthControllerConfiguration {
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/package-info.java
Patch:
@@ -22,11 +22,12 @@
  */
 
 @Configuration
-@Requires(property = SecurityConfigurationProperties.PREFIX + ".enabled")
-@Requires(property = JwtConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = SecurityConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
+@Requires(property = JwtConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 package io.micronaut.security.token.jwt;
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.config.SecurityConfigurationProperties;
 import io.micronaut.security.token.jwt.config.JwtConfigurationProperties;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignatureFactory.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.signature.SignatureConfiguration;
 import io.micronaut.security.token.jwt.signature.SignatureGeneratorConfiguration;
-import io.micronaut.security.token.jwt.signature.rsa.RSASignatureConfiguration;
 
 /**
  * Creates {@link SignatureConfiguration} and {@link SignatureGeneratorConfiguration} for each {@link SecretSignatureConfiguration} beans.

File: security/src/main/java/io/micronaut/security/endpoints/LoginController.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.ApplicationEventPublisher;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
@@ -49,7 +50,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Requires(property = LoginControllerConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = LoginControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @Controller("${" + LoginControllerConfigurationProperties.PREFIX + ".path:/login}")
 @Secured(SecurityRule.IS_ANONYMOUS)
 @Validated

File: security/src/main/java/io/micronaut/security/endpoints/LoginControllerConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.endpoints;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.config.SecurityConfigurationProperties;
 
@@ -25,6 +26,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
+@Requires(property = LoginControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @ConfigurationProperties(LoginControllerConfigurationProperties.PREFIX)
 public class LoginControllerConfigurationProperties implements LoginControllerConfiguration {
     public static final String PREFIX = SecurityConfigurationProperties.PREFIX + ".endpoints.login";

File: security/src/main/java/io/micronaut/security/endpoints/LogoutController.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.ApplicationEventPublisher;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.MediaType;
@@ -36,7 +37,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-@Requires(property = LogoutControllerConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = LogoutControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @Controller("${" + LogoutControllerConfigurationProperties.PREFIX + ".path:/logout}")
 @Secured(SecurityRule.IS_ANONYMOUS)
 public class LogoutController {

File: security/src/main/java/io/micronaut/security/endpoints/LogoutControllerConfigurationProperties.java
Patch:
@@ -17,13 +17,16 @@
 package io.micronaut.security.endpoints;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.config.SecurityConfigurationProperties;
 
 /**
  *
  * @author Sergio del Amo
  * @since 1.0
  */
+@Requires(property = LogoutControllerConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 @ConfigurationProperties(LogoutControllerConfigurationProperties.PREFIX)
 public class LogoutControllerConfigurationProperties implements LogoutControllerConfiguration {
     public static final String PREFIX = SecurityConfigurationProperties.PREFIX + ".endpoints.logout";

File: security/src/main/java/io/micronaut/security/package-info.java
Patch:
@@ -22,9 +22,10 @@
  */
 
 @Configuration
-@Requires(property = SecurityConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = SecurityConfigurationProperties.PREFIX + ".enabled", value = StringUtils.TRUE)
 package io.micronaut.security;
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.security.config.SecurityConfigurationProperties;

File: security/src/main/java/io/micronaut/security/token/writer/HttpHeaderTokenWriter.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.writer;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.MutableHttpRequest;
 
 import javax.inject.Singleton;
@@ -28,7 +29,7 @@
  * @since 1.0
  */
 @Singleton
-@Requires(property = HttpHeaderTokenWriterConfigurationProperties.PREFIX + ".enabled")
+@Requires(property = HttpHeaderTokenWriterConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @Requires(beans = {HttpHeaderTokenWriterConfiguration.class})
 public class HttpHeaderTokenWriter implements TokenWriter {
     protected final HttpHeaderTokenWriterConfiguration httpHeaderTokenWriterConfiguration;

File: security/src/main/java/io/micronaut/security/token/writer/HttpHeaderTokenWriterConfigurationProperties.java
Patch:
@@ -17,6 +17,8 @@
 package io.micronaut.security.token.writer;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpHeaderValues;
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.security.token.config.TokenConfigurationProperties;
@@ -27,6 +29,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
+@Requires(property = HttpHeaderTokenWriterConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE)
 @ConfigurationProperties(HttpHeaderTokenWriterConfigurationProperties.PREFIX)
 public class HttpHeaderTokenWriterConfigurationProperties implements HttpHeaderTokenWriterConfiguration {
     public static final String PREFIX = TokenConfigurationProperties.PREFIX + ".writer.header";

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1751,9 +1751,6 @@ public Class<?> getErrorType(MediaType mediaType) {
                     }
                 } finally {
                     pipeline.remove(this);
-                    if (fullResponse.refCnt() > 1) {
-                        ReferenceCountUtil.safeRelease(fullResponse);
-                    }
                     if (channelPool != null) {
                         Channel ch = channelHandlerContext.channel();
                         if (!HttpUtil.isKeepAlive(fullResponse)) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -114,6 +114,8 @@ public Publisher<Boolean> transferTo(File destination) {
                 return destination != null && fileUpload.renameTo(destination);
             } catch (IOException e) {
                 throw new MultipartException("Error transferring file: " + fileUpload.getName(), e);
+            } finally {
+                fileUpload.release();
             }
         };
         if (isComplete()) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -116,7 +116,8 @@ public void visit(Element element, AnnotationMetadata annotationMetadata) {
             visitor.visitField(
                     new JavaFieldElement(
                             (VariableElement) element,
-                            annotationMetadata),
+                            annotationMetadata,
+                            visitorContext),
                     visitorContext
             );
         } else if (element instanceof ExecutableElement) {

File: inject/src/main/java/io/micronaut/inject/ast/FieldElement.java
Patch:
@@ -22,5 +22,5 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface FieldElement extends Element {
+public interface FieldElement extends TypedElement {
 }

File: inject/src/main/java/io/micronaut/inject/ast/ParameterElement.java
Patch:
@@ -24,10 +24,11 @@
  * @author graemerocher
  * @since 1.0
  */
-public interface ParameterElement extends Element {
+public interface ParameterElement extends TypedElement {
 
     /**
      * @return The type of the parameter
      */
+    @Override
     @Nullable ClassElement getType();
 }

File: inject/src/main/java/io/micronaut/inject/ast/PropertyElement.java
Patch:
@@ -24,11 +24,12 @@
  * @author graemerocher
  * @since 1.0
  */
-public interface PropertyElement extends Element {
+public interface PropertyElement extends TypedElement {
     /**
      * @return The type of the property
      */
     @Nullable
+    @Override
     ClassElement getType();
 
     /**

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -23,7 +23,6 @@
 import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.reflect.InstantiationUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 
 import java.lang.annotation.Annotation;
@@ -49,7 +48,8 @@
 @Internal
 class AnnotationMetadataSupport {
 
-    static final Map<String, Map<String, Object>> ANNOTATION_DEFAULTS = new ConcurrentHashMap<>(20);
+    static final Map<String, Map<String, Object>> CURRENT_DEFAULTS = new ConcurrentHashMap<>(20);
+    private static final Map<String, Map<String, Object>> ANNOTATION_DEFAULTS = new ConcurrentHashMap<>(20);
 
     private static final Map<Class<? extends Annotation>, Optional<Constructor<InvocationHandler>>> ANNOTATION_PROXY_CACHE = new ConcurrentHashMap<>(20);
     private static final Map<String, Class<? extends Annotation>> ANNOTATION_TYPES = new ConcurrentHashMap<>(20);
@@ -114,6 +114,7 @@ static boolean hasDefaultValues(String annotation) {
     static void registerDefaultValues(String annotation, Map<String, Object> defaultValues) {
         if (StringUtils.isNotEmpty(annotation)) {
             ANNOTATION_DEFAULTS.put(annotation.intern(), defaultValues);
+            CURRENT_DEFAULTS.put(annotation.intern(), defaultValues);
         }
     }
 

File: build-projects/asciidoc-config-props/src/main/groovy/io/micronaut/documentation/asciidoc/AsciiDocPropertyReferenceWriter.java
Patch:
@@ -125,7 +125,7 @@ public void write(ConfigurationMetadataBuilder<?> metadataBuilder, ClassWriterOu
                                 }
 
                                 w.newLine();
-                                w.append("| `").append(path).append('`');
+                                w.append("| `+").append(path).append("+`");
                                 w.newLine();
                                 w.append("|").append(type);
                                 w.newLine();

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -358,7 +358,7 @@ private static String separateCamelCase(String name, boolean lowerCase, char sep
                     if (first) {
                         first = false;
                         newName.append(lowerCaseChar);
-                    } else if (Character.isUpperCase(last) || last == '.') {
+                    } else if (Character.isUpperCase(last) || Character.isDigit(last) || last == '.') {
                         newName.append(lowerCaseChar);
                     } else {
                         newName.append(separatorChar).append(lowerCaseChar);

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -679,7 +679,7 @@ void visitBeanFactoryMethod(ExecutableElement beanMethod) {
                         constructorData,
                         interceptorTypes);
 
-                returnType.accept(new PublicMethodVisitor<Object, AopProxyWriter>() {
+                returnType.accept(new PublicMethodVisitor<Object, AopProxyWriter>(typeUtils) {
                     @Override
                     protected void accept(DeclaredType type, Element element, AopProxyWriter aopProxyWriter) {
                         ExecutableElement method = (ExecutableElement) element;
@@ -739,7 +739,7 @@ protected void accept(DeclaredType type, Element element, AopProxyWriter aopProx
                 }, proxyWriter);
             } else if (methodAnnotationMetadata.hasStereotype(Executable.class)) {
 
-                returnType.accept(new PublicMethodVisitor<Object, BeanDefinitionWriter>() {
+                returnType.accept(new PublicMethodVisitor<Object, BeanDefinitionWriter>(typeUtils) {
                     @Override
                     protected void accept(DeclaredType type, Element element, BeanDefinitionWriter beanWriter) {
                         ExecutableElement method = (ExecutableElement) element;
@@ -1382,7 +1382,7 @@ private void visitConfigurationBuilder(Element builderElement, TypeMirror builde
             Set<String> includes = annotationMetadata.getValue(ConfigurationBuilder.class, "includes", Set.class).orElse(Collections.emptySet());
             Set<String> excludes = annotationMetadata.getValue(ConfigurationBuilder.class, "excludes", Set.class).orElse(Collections.emptySet());
 
-            PublicMethodVisitor visitor = new PublicMethodVisitor() {
+            PublicMethodVisitor visitor = new PublicMethodVisitor(typeUtils) {
                 @Override
                 protected void accept(DeclaredType type, Element element, Object o) {
                     ExecutableElement method = (ExecutableElement) element;

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicAbstractMethodVisitor.java
Patch:
@@ -47,6 +47,7 @@ public abstract class PublicAbstractMethodVisitor<R, P> extends PublicMethodVisi
      * @param elementUtils The {@link Elements}
      */
     PublicAbstractMethodVisitor(TypeElement classElement, ModelUtils modelUtils, Elements elementUtils) {
+        super(modelUtils.getTypeUtils());
         this.classElement = classElement;
         this.modelUtils = modelUtils;
         this.elementUtils = elementUtils;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -82,7 +82,7 @@ public List<PropertyElement> getBeanProperties() {
         Map<String, BeanPropertyData> props = new LinkedHashMap<>();
         Map<String, VariableElement> fields = new LinkedHashMap<>();
 
-        classElement.asType().accept(new PublicMethodVisitor<Object, Object>() {
+        classElement.asType().accept(new PublicMethodVisitor<Object, Object>(visitorContext.getTypes()) {
 
             @Override
             protected boolean isAcceptable(javax.lang.model.element.Element element) {

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/rsa/RSASignatureFactory.java
Patch:
@@ -21,6 +21,8 @@
 import io.micronaut.security.token.jwt.signature.SignatureConfiguration;
 
 /**
+ * Creates {@link SignatureConfiguration} for each {@link RSASignatureConfiguration} bean.
+ *
  * @author Sergio del Amo
  * @since 1.0
  */

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignature.java
Patch:
@@ -26,6 +26,7 @@
 import com.nimbusds.jose.crypto.MACSigner;
 import com.nimbusds.jose.crypto.MACVerifier;
 import io.micronaut.security.token.jwt.signature.AbstractSignatureConfiguration;
+import io.micronaut.security.token.jwt.signature.SignatureGeneratorConfiguration;
 
 import java.util.Base64;
 
@@ -36,7 +37,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-public class SecretSignature extends AbstractSignatureConfiguration {
+public class SecretSignature extends AbstractSignatureConfiguration implements SignatureGeneratorConfiguration {
 
     private byte[] secret;
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignatureConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import io.micronaut.security.token.jwt.config.JwtConfigurationProperties;
 
 /**
+ * Create a {@link io.micronaut.context.annotation.ConfigurationProperties} bean for each sub-property of micronaut.security.token.jwt.signatures.secret.*.
  * @author Sergio del Amo
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -33,6 +33,7 @@
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.core.value.PropertyResolver;
 import io.micronaut.core.version.SemanticVersion;
+import io.micronaut.core.version.VersionUtils;
 import io.micronaut.inject.BeanConfiguration;
 import io.micronaut.inject.BeanDefinition;
 import io.micronaut.inject.BeanDefinitionReference;
@@ -352,10 +353,9 @@ private boolean matchesSdk(ConditionContext context, AnnotationValue<Requires> r
 
                     return context.isFailing();
                 default:
-                    String micronautVersion = getClass().getPackage().getImplementationVersion();
-                    boolean versionCheck = SemanticVersion.isAtLeast(micronautVersion, version);
+                    boolean versionCheck = VersionUtils.isAtLeastMicronautVersion(version);
                     if (!versionCheck) {
-                        context.fail("Micronaut version [" + micronautVersion + "] must be at least " + version);
+                        context.fail("Micronaut version [" + VersionUtils.MICRONAUT_VERSION + "] must be at least " + version);
                     }
                     return versionCheck;
             }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/encryption/ec/ECEncryptionFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.encryption.EncryptionConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * Creates {@link EncryptionConfiguration} for each {@link ECEncryptionConfiguration} bean.
  *

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/encryption/rsa/RSAEncryptionFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.encryption.EncryptionConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * Creates {@link EncryptionConfiguration} for each {@link RSAEncryptionConfiguration} bean.
  *

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/encryption/secret/SecretEncryptionFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.encryption.EncryptionConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * Creates {@link EncryptionConfiguration} for each {@link SecretEncryptionConfiguration} bean.
  * @author Sergio del Amo

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/ec/ECSignatureFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.signature.SignatureConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * Creates {@link SignatureConfiguration} for each {@link ECSignatureConfiguration} bean.
  *

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/rsa/RSASignatureFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.signature.SignatureConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * @author Sergio del Amo
  * @since 1.0

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignatureFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.security.token.jwt.signature.SignatureConfiguration;
 
-import javax.inject.Singleton;
-
 /**
  * @author Sergio del Amo
  * @since 1.0

File: cli/src/main/groovy/io/micronaut/cli/profile/Profile.java
Patch:
@@ -79,7 +79,7 @@ public interface Profile {
     /**
      * @return The oneOf features for this profile
      */
-    Iterable<OneOfFeature> getOneOfFeatures();
+    Iterable<OneOfFeatureGroup> getOneOfFeatures();
 
     /**
      * @return The required features for this profile

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/AbstractConsulClient.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.discovery.consul.client.v1;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.discovery.ServiceInstance;
@@ -42,6 +43,7 @@
 @SuppressWarnings("unused")
 @Client(id = ConsulClient.SERVICE_ID, path = "/v1", configuration = ConsulConfiguration.class)
 @Requires(beans = ConsulConfiguration.class)
+@TypeHint({TTLCheck.class, HTTPCheck.class})
 public abstract class AbstractConsulClient implements ConsulClient {
 
     static final String CONSUL_REGISTRATION_RETRY_COUNT = "${" + ConsulConfiguration.ConsulRegistrationConfiguration.PREFIX + ".retry-count:10}";

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -52,7 +52,6 @@
 import io.micronaut.http.codec.MediaTypeCodec;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
 import io.micronaut.http.context.ServerRequestContext;
-import io.micronaut.http.context.ServerRequestTracingPublisher;
 import io.micronaut.http.filter.ClientFilterChain;
 import io.micronaut.http.filter.HttpClientFilter;
 import io.micronaut.http.multipart.MultipartException;

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaAnnotationMetadataBuilder.java
Patch:
@@ -251,9 +251,7 @@ protected Object readAnnotationValue(String memberName, Object annotationValue)
                                 defaultValues.put(executableElement, executableElement.getDefaultValue())
                         );
 
-                if (!defaultValues.isEmpty()) {
-                    defaults.put(annotationName, defaultValues);
-                }
+                defaults.put(annotationName, defaultValues);
             }
         }
         return ANNOTATION_DEFAULTS.get(getAnnotationTypeName(annotationMirror));

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -67,7 +67,6 @@ public class DefaultEnvironment extends PropertySourcePropertyResolver implement
 
     private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
     private static final String EC2_WINDOWS_HYPERVISOR_CMD = "wmic path win32_computersystemproduct get uuid";
-    private static final String PROPERTY_SOURCES_KEY = "micronaut.config.files";
     private static final String FILE_SEPARATOR = ",";
     private static final Logger LOG = LoggerFactory.getLogger(DefaultEnvironment.class);
     private static final String K8S_ENV = "KUBERNETES_SERVICE_HOST";
@@ -350,7 +349,7 @@ protected String getPropertySourceRootName() {
     protected void readPropertySources(String name) {
         List<PropertySource> propertySources = readPropertySourceList(name);
         propertySources.addAll(this.propertySources.values());
-        propertySources.addAll(readPropertySourceListFromFiles(System.getProperty(PROPERTY_SOURCES_KEY)));
+        propertySources.addAll(readPropertySourceListFromFiles(System.getProperty(Environment.PROPERTY_SOURCES_KEY)));
         propertySources.addAll(readPropertySourceListFromFiles(
             readPropertySourceListKeyFromEnvironment())
         );
@@ -369,7 +368,7 @@ protected void readPropertySources(String name) {
      * @return The comma-separated list of files
      */
     protected String readPropertySourceListKeyFromEnvironment() {
-        return System.getenv(StringUtils.convertDotToUnderscore(PROPERTY_SOURCES_KEY));
+        return System.getenv(StringUtils.convertDotToUnderscore(Environment.PROPERTY_SOURCES_KEY));
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/annotation/AnnotationMetadataSupport.java
Patch:
@@ -112,7 +112,7 @@ static boolean hasDefaultValues(String annotation) {
      * @param defaultValues The default values
      */
     static void registerDefaultValues(String annotation, Map<String, Object> defaultValues) {
-        if (StringUtils.isNotEmpty(annotation) && CollectionUtils.isNotEmpty(defaultValues)) {
+        if (StringUtils.isNotEmpty(annotation)) {
             ANNOTATION_DEFAULTS.put(annotation.intern(), defaultValues);
         }
     }

File: inject/src/main/java/io/micronaut/inject/writer/BeanConfigurationWriter.java
Patch:
@@ -63,6 +63,7 @@ public void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOE
         AnnotationMetadataWriter annotationMetadataWriter = getAnnotationMetadataWriter();
         if (annotationMetadataWriter != null) {
             annotationMetadataWriter.accept(classWriterOutputVisitor);
+            annotationMetadataWriter.clearDefaults();
         }
         try (OutputStream outputStream = classWriterOutputVisitor.visitClass(configurationClassName)) {
             ClassWriter classWriter = generateClassBytes();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -73,6 +73,7 @@ public BeanDefinitionReferenceWriter(String beanTypeName, String beanDefinitionN
     public void accept(ClassWriterOutputVisitor outputVisitor) throws IOException {
         if (annotationMetadataWriter != null) {
             annotationMetadataWriter.accept(outputVisitor);
+            annotationMetadataWriter.clearDefaults();
         }
         try (OutputStream outputStream = outputVisitor.visitClass(getBeanDefinitionQualifiedClassName())) {
             ClassWriter classWriter = generateClassBytes();

File: http/src/main/java/io/micronaut/http/filter/OncePerRequestHttpServerFilter.java
Patch:
@@ -22,7 +22,8 @@
 import org.reactivestreams.Publisher;
 
 /**
- * A filter that is only executed once per request.
+ * A filter that is only executed once per request. A filter may be executed more
+ * than once per request if the original route throws an exception.
  *
  * @author Graeme Rocher
  * @since 1.0

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingReporter.java
Patch:
@@ -56,7 +56,8 @@ public class GraalClassLoadingReporter implements ClassLoadingReporter {
             "io.netty.channel.socket.nio.NioServerSocketChannel",
             "io.micronaut.http.netty.cookies.NettyCookieFactory",
             "io.micronaut.http.client.NettyClientHttpRequestFactory",
-            "io.micronaut.http.server.netty.NettyHttpResponseFactory"
+            "io.micronaut.http.server.netty.NettyHttpResponseFactory",
+            "org.hibernate.validator.HibernateValidator"
     );
     private final Set<String> classes = new ConcurrentSkipListSet<>();
     private final Set<String> beans = new ConcurrentSkipListSet<>();

File: core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java
Patch:
@@ -68,7 +68,7 @@ public Set<String> getDeclaredAnnotationNames() {
     }
 
     @Override
-    public List<String> getDeclaredAnnotationNamesTypeByStereotype(String stereotype) {
+    public List<String> getDeclaredAnnotationNamesByStereotype(String stereotype) {
         return Collections.emptyList();
     }
 

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1602,7 +1602,7 @@ private <T> T getScopedBeanForDefinition(BeanResolutionContext resolutionContext
 
             if (currentSegment.isPresent()) {
                 Argument argument = currentSegment.get().getArgument();
-                Optional<String> scope = argument.getAnnotationMetadata().getAnnotationNameByStereotype(Scope.class);
+                final Optional<Class<? extends Annotation>> scope = argument.getAnnotationMetadata().getAnnotationTypeByStereotype(Scope.class);
                 registeredScope = scope.flatMap(customScopeRegistry::findScope);
             }
 

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractEnvironmentAnnotationMetadata.java
Patch:
@@ -142,7 +142,7 @@ public Set<String> getDeclaredAnnotationNames() {
     }
 
     @Override
-    public List<String> getDeclaredAnnotationNamesTypeByStereotype(String stereotype) {
+    public List<String> getDeclaredAnnotationNamesByStereotype(String stereotype) {
         return annotationMetadata.getAnnotationNamesByStereotype(stereotype);
     }
 

File: inject/src/main/java/io/micronaut/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -47,13 +47,14 @@ public abstract class AbstractAnnotationMetadataWriter extends AbstractClassFile
     /**
      * @param className          The class name
      * @param annotationMetadata The annotation metadata
+     * @param writeAnnotationDefaults Whether to write annotation defaults
      */
-    protected AbstractAnnotationMetadataWriter(String className, AnnotationMetadata annotationMetadata) {
+    protected AbstractAnnotationMetadataWriter(String className, AnnotationMetadata annotationMetadata, boolean writeAnnotationDefaults) {
         this.targetClassType = getTypeReference(className);
         if (annotationMetadata == AnnotationMetadata.EMPTY_METADATA) {
             this.annotationMetadataWriter = null;
         } else {
-            this.annotationMetadataWriter = annotationMetadata instanceof AnnotationMetadataReference ? null : new AnnotationMetadataWriter(className, annotationMetadata);
+            this.annotationMetadataWriter = annotationMetadata instanceof AnnotationMetadataReference ? null : new AnnotationMetadataWriter(className, annotationMetadata, writeAnnotationDefaults);
         }
         this.annotationMetadata = annotationMetadata;
     }

File: inject/src/main/java/io/micronaut/inject/writer/BeanConfigurationWriter.java
Patch:
@@ -52,7 +52,7 @@ public class BeanConfigurationWriter extends AbstractAnnotationMetadataWriter {
      * @param annotationMetadata The annotation metadata
      */
     public BeanConfigurationWriter(String packageName, AnnotationMetadata annotationMetadata) {
-        super(packageName + '.' + CLASS_SUFFIX, annotationMetadata);
+        super(packageName + '.' + CLASS_SUFFIX, annotationMetadata, true);
         this.packageName = packageName;
         this.configurationClassName = targetClassType.getClassName();
         this.configurationClassInternalName = targetClassType.getInternalName();

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionReferenceWriter.java
Patch:
@@ -56,7 +56,7 @@ public class BeanDefinitionReferenceWriter extends AbstractAnnotationMetadataWri
      * @param annotationMetadata The annotation metadata
      */
     public BeanDefinitionReferenceWriter(String beanTypeName, String beanDefinitionName, AnnotationMetadata annotationMetadata) {
-        super(beanDefinitionName + REF_SUFFIX, annotationMetadata);
+        super(beanDefinitionName + REF_SUFFIX, annotationMetadata, true);
         this.beanTypeName = beanTypeName;
         this.beanDefinitionName = beanDefinitionName;
         this.beanDefinitionReferenceClassName = beanDefinitionName + REF_SUFFIX;

File: inject/src/main/java/io/micronaut/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -73,7 +73,7 @@ public class ExecutableMethodWriter extends AbstractAnnotationMetadataWriter imp
      * @param annotationMetadata   The annotation metadata
      */
     public ExecutableMethodWriter(String beanFullClassName, String methodClassName, String methodProxyShortName, boolean isInterface, AnnotationMetadata annotationMetadata) {
-        super(methodClassName, annotationMetadata);
+        super(methodClassName, annotationMetadata, false);
         this.classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
         this.beanFullClassName = beanFullClassName;
         this.methodProxyShortName = methodProxyShortName;

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -242,7 +242,9 @@ public final <T> Optional<T> getValue(Class<T> type) {
             List<AnnotationValue<T>> list = new ArrayList<>(values.length);
             String typeName = type.getName();
             for (AnnotationValue value : values) {
-                if (value == null) continue;
+                if (value == null) {
+                    continue;
+                }
                 if (value.getAnnotationName().equals(typeName)) {
                     //noinspection unchecked
                     list.add(value);

File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java
Patch:
@@ -20,7 +20,6 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 import io.micronaut.core.annotation.AnnotationClassValue;
 import io.micronaut.core.annotation.AnnotationMetadata;
-import io.micronaut.core.annotation.AnnotationValue;
 import io.micronaut.core.convert.format.Format;
 import io.micronaut.core.convert.format.FormattingTypeConverter;
 import io.micronaut.core.convert.format.ReadableBytesTypeConverter;
@@ -718,7 +717,7 @@ protected void registerDefaultConverters() {
         // Micronaut ByteBuffer -> byte for streamed results from HTTP clients
         addConverter(io.micronaut.core.io.buffer.ByteBuffer.class, byte[].class, (object, targetType, context) -> {
             byte[] result = object.toByteArray();
-            ((ReferenceCounted)object).release();
+            ((ReferenceCounted) object).release();
             return Optional.of(result);
         });
 

File: core/src/main/java/io/micronaut/core/exceptions/BeanExceptionHandler.java
Patch:
@@ -34,6 +34,7 @@ public interface BeanExceptionHandler<T, E extends Throwable> extends BiConsumer
      * @param throwable The error
      */
     void handle(T bean, E throwable);
+
     /**
      * Handles the exception.
      *

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -203,7 +203,7 @@ public static String toString(String delimiter, Iterable<?> iterable) {
     }
 
     /**
-     * Converts an {@link Iterable} to a {@link List}
+     * Converts an {@link Iterable} to a {@link List}.
      *
      * @param iterable The iterable
      * @param <T>      The generic type
@@ -231,7 +231,7 @@ public static <T> List<T> iterableToList(Iterable<T> iterable) {
     }
 
     /**
-     * Null safe version of {@link Collections#unmodifiableList(List)}
+     * Null safe version of {@link Collections#unmodifiableList(List)}.
      *
      * @param list The list
      * @param <T> The generic type

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -67,6 +67,7 @@ public AnnotationValue(String annotationName, Map<CharSequence, Object> values)
      * @param defaultValues The default values
      */
     @SuppressWarnings("unchecked")
+    @UsedByGeneratedCode
     public AnnotationValue(String annotationName, Map<CharSequence, Object> values, Map<String, Object> defaultValues) {
         this.annotationName = annotationName.intern();
         this.convertibleValues = newConvertibleValues(values);
@@ -106,6 +107,7 @@ public AnnotationValue(String annotationName, ConvertibleValues<Object> converti
      * @param convertibleValues The convertible values
      */
     @Internal
+    @UsedByGeneratedCode
     protected AnnotationValue(AnnotationValue<A> target, Map<String, Object> defaultValues, ConvertibleValues<Object> convertibleValues) {
         this.annotationName = target.annotationName;
         this.defaultValues = defaultValues != null ? defaultValues : target.defaultValues;

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -166,7 +166,8 @@ public static Optional<Class> getPrimitiveType(String primitiveType) {
     }
 
     /**
-     * Attempt to load a class for the given name from the given class loader.
+     * Attempt to load a class for the given name from the given class loader. This method should be used
+     * as a last resort, and note that any usage of this method will create complications on GraalVM.
      *
      * @param name        The name of the class
      * @param classLoader The classloader. If null will fallback to attempt the thread context loader, otherwise the system loader

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/NamedReactiveMongoConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class NamedReactiveMongoConfiguration extends AbstractReactiveMongoConfig
     @ConfigurationBuilder(prefixes = "", configurationPrefix = "server")
     protected ServerSettings.Builder serverSettings = ServerSettings.builder();
 
-    @ConfigurationBuilder(prefixes = "", configurationPrefix = "connectionPool")
+    @ConfigurationBuilder(prefixes = "", configurationPrefix = "connection-pool")
     protected ConnectionPoolSettings.Builder poolSettings = ConnectionPoolSettings.builder();
 
     @ConfigurationBuilder(prefixes = "", configurationPrefix = "socket")

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/DefaultReactiveMongoConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public class DefaultReactiveMongoConfiguration extends AbstractReactiveMongoConf
     @ConfigurationBuilder(prefixes = "", configurationPrefix = "server")
     protected ServerSettings.Builder serverSettings = ServerSettings.builder();
 
-    @ConfigurationBuilder(prefixes = "", configurationPrefix = "connectionPool")
+    @ConfigurationBuilder(prefixes = "", configurationPrefix = "connection-pool")
     protected ConnectionPoolSettings.Builder poolSettings = ConnectionPoolSettings.builder();
 
     @ConfigurationBuilder(prefixes = "", configurationPrefix = "socket")

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -93,6 +93,7 @@ public Annotation[] getDeclaredAnnotations() {
      * @return A unmodifiable, pooled set of strings
      */
     @SuppressWarnings({"unused", "unchecked"})
+    @UsedByGeneratedCode
     public static List<String> internListOf(Object... objects) {
         if (objects == null || objects.length == 0) {
             return Collections.EMPTY_LIST;
@@ -113,6 +114,7 @@ public static List<String> internListOf(Object... objects) {
      * @see io.micronaut.core.util.CollectionUtils#mapOf(Object...)
      */
     @SuppressWarnings("unused")
+    @UsedByGeneratedCode
     public static Map<String, Object> internMapOf(Object... values) {
         if (values == null || values.length == 0) {
             return Collections.emptyMap();

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -53,6 +53,7 @@ public class AnnotationValue<A extends Annotation> implements ValueResolver<Char
      * @param values         The values
      */
     @SuppressWarnings("unchecked")
+    @UsedByGeneratedCode
     public AnnotationValue(String annotationName, Map<CharSequence, Object> values) {
         this.annotationName = annotationName.intern();
         this.convertibleValues = newConvertibleValues(values);
@@ -77,6 +78,7 @@ public AnnotationValue(String annotationName, Map<CharSequence, Object> values,
      * @param annotationName The annotation name
      */
     @SuppressWarnings("unchecked")
+    @UsedByGeneratedCode
     public AnnotationValue(String annotationName) {
         this.annotationName = annotationName.intern();
         this.convertibleValues = ConvertibleValues.EMPTY;

File: core/src/main/java/io/micronaut/core/util/CollectionUtils.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.core.util;
 
+import io.micronaut.core.annotation.UsedByGeneratedCode;
 import io.micronaut.core.convert.ConversionService;
 
 import javax.annotation.Nullable;
@@ -106,6 +107,7 @@ public static <T> Optional<Iterable<T>> convertCollection(Class<? extends Iterab
      * @param values The values
      * @return The created map
      */
+    @UsedByGeneratedCode
     public static Map mapOf(Object... values) {
         int len = values.length;
         if (len % 2 != 0) {

File: inject/src/main/java/io/micronaut/context/AbstractExecutableMethod.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.Internal;
+import io.micronaut.core.annotation.UsedByGeneratedCode;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
@@ -150,6 +151,7 @@ public final Object invoke(Object instance, Object... arguments) {
      * @return The result
      */
     @SuppressWarnings("WeakerAccess")
+    @UsedByGeneratedCode
     protected abstract Object invokeInternal(Object instance, Object[] arguments);
 
     /**

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -27,6 +27,7 @@
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.annotation.AnnotationValue;
+import io.micronaut.core.annotation.UsedByGeneratedCode;
 import io.micronaut.core.async.subscriber.Completable;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.io.ResourceLoader;
@@ -857,6 +858,7 @@ public Collection<BeanDefinition<?>> getAllBeanDefinitions() {
      * @param <T>               The bean type parameter
      * @return The found bean
      */
+    @UsedByGeneratedCode
     public <T> T getBean(BeanResolutionContext resolutionContext, Class<T> beanType) {
         return getBeanInternal(resolutionContext, beanType, null, true, true);
     }

File: cli/src/main/groovy/io/micronaut/cli/console/logging/MicronautConsole.java
Patch:
@@ -1030,7 +1030,7 @@ public String showPrompt() {
     private Ansi ansiPrompt(String prompt) {
         return ansi()
             .a(Ansi.Attribute.INTENSITY_BOLD)
-            .fg(BLUE)
+            .fgBright(BLUE)
             .a(prompt)
             .a(Ansi.Attribute.INTENSITY_BOLD_OFF)
             .fg(DEFAULT);
@@ -1079,7 +1079,7 @@ private String createQuestion(String message, String[] validResponses) {
     private Ansi outputCategory(Ansi ansi, String categoryName) {
         return ansi
             .a(Ansi.Attribute.INTENSITY_BOLD)
-            .fg(BLUE)
+            .fgBright(BLUE)
             .a(categoryName)
             .a(SPACE)
             .a(Ansi.Attribute.INTENSITY_BOLD_OFF);

File: http/src/main/java/io/micronaut/http/annotation/Error.java
Patch:
@@ -41,13 +41,13 @@
     /**
      * @return The exception to map to
      */
-    @AliasFor("exception")
+    @AliasFor(member = "exception")
     Class<? extends Throwable> value() default Throwable.class;
 
     /**
      * @return The exception to map to
      */
-    @AliasFor("value")
+    @AliasFor(member = "value")
     Class<? extends Throwable> exception() default Throwable.class;
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/annotation/Write.java
Patch:
@@ -49,12 +49,12 @@
     /**
      * @return The produced MediaType values. Defaults to application/json
      */
-    @AliasFor(annotation = Produces.class, value = "value")
+    @AliasFor(annotation = Produces.class, member = "value")
     String[] produces() default MediaType.APPLICATION_JSON;
 
     /**
      * @return The consumed MediaType for request bodies Defaults to application/json
      */
-    @AliasFor(annotation = Consumes.class, value = "value")
+    @AliasFor(annotation = Consumes.class, member = "value")
     String[] consumes() default MediaType.APPLICATION_JSON;
 }

File: router/src/main/java/io/micronaut/web/router/StatusRoute.java
Patch:
@@ -20,6 +20,7 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
 
+import javax.annotation.Nullable;
 import java.util.Optional;
 import java.util.function.Predicate;
 
@@ -33,6 +34,7 @@ public interface StatusRoute extends MethodBasedRoute {
     /**
      * @return The type the exception originates from. Null if the error route is global.
      */
+    @Nullable
     Class<?> originatingType();
 
     /**

File: security/src/main/java/io/micronaut/security/token/propagation/TokenPropagationConfigurationProperties.java
Patch:
@@ -50,9 +50,9 @@ public class TokenPropagationConfigurationProperties implements TokenPropagation
 
     private String uriRegex;
 
-    Pattern serviceIdPattern;
+    private Pattern serviceIdPattern;
 
-    Pattern uriPattern;
+    private Pattern uriPattern;
 
     private String path = DEFAULT_PATH;
 

File: http/src/main/java/io/micronaut/http/HttpHeaders.java
Patch:
@@ -23,6 +23,7 @@
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeParseException;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.OptionalLong;
@@ -504,6 +505,7 @@ default OptionalLong contentLength() {
     default List<MediaType> accept() {
         return getAll(HttpHeaders.ACCEPT)
             .stream()
+            .flatMap(x -> Arrays.stream(x.split(",")))
             .map(MediaType::new)
             .distinct()
             .collect(Collectors.toList());

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloController.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.docs.server.intro;
 
 // tag::imports[]
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.*;
 // end::imports[]
 
@@ -26,7 +27,7 @@
 // tag::class[]
 @Controller("/hello") // <1>
 public class HelloController {
-    @Get // <2>
+    @Get(produces = MediaType.TEXT_PLAIN) // <2>
     public String index() {
         return "Hello World"; // <3>
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -86,7 +86,9 @@ public List<PropertyElement> getBeanProperties() {
 
             @Override
             protected boolean isAcceptable(javax.lang.model.element.Element element) {
-                if (element.getKind() == ElementKind.FIELD) return true;
+                if (element.getKind() == ElementKind.FIELD) {
+                    return true;
+                }
                 if (element.getKind() == ElementKind.METHOD && element instanceof ExecutableElement) {
                     Set<Modifier> modifiers = element.getModifiers();
                     if (modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC) && !modifiers.contains(Modifier.ABSTRACT)) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -34,7 +34,6 @@
 import javax.tools.Diagnostic;
 import java.util.Collections;
 import java.util.Optional;
-import java.util.function.Function;
 
 /**
  * The visitor context when visiting Java code.

File: security/src/main/java/io/micronaut/security/annotation/DenyAllAnnotationMapper.java
Patch:
@@ -17,7 +17,7 @@
 package io.micronaut.security.annotation;
 
 import io.micronaut.core.annotation.AnnotationValue;
-import io.micronaut.inject.annotation.AnnotationMapper;
+import io.micronaut.inject.annotation.TypedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 import io.micronaut.security.rules.SecurityRule;
 
@@ -31,7 +31,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-public class DenyAllAnnotationMapper implements AnnotationMapper<DenyAll> {
+public class DenyAllAnnotationMapper implements TypedAnnotationMapper<DenyAll> {
     @Override
     public Class<DenyAll> annotationType() {
         return DenyAll.class;

File: security/src/main/java/io/micronaut/security/annotation/PermitAllAnnotationMapper.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.micronaut.security.annotation;
 
-import io.micronaut.inject.annotation.AnnotationMapper;
 import io.micronaut.core.annotation.AnnotationValue;
+import io.micronaut.inject.annotation.TypedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 import io.micronaut.security.rules.SecurityRule;
 
@@ -32,7 +32,7 @@
  * @since 1.0
  */
 // tag::clazz[]
-public class PermitAllAnnotationMapper implements AnnotationMapper<PermitAll> { // <1>
+public class PermitAllAnnotationMapper implements TypedAnnotationMapper<PermitAll> { // <1>
     @Override
     public Class<PermitAll> annotationType() {
         return PermitAll.class;

File: security/src/main/java/io/micronaut/security/annotation/RolesAllowedAnnotationMapper.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.micronaut.security.annotation;
 
-import io.micronaut.inject.annotation.AnnotationMapper;
 import io.micronaut.core.annotation.AnnotationValue;
+import io.micronaut.inject.annotation.TypedAnnotationMapper;
 import io.micronaut.inject.visitor.VisitorContext;
 
 import javax.annotation.security.RolesAllowed;
@@ -30,7 +30,7 @@
  * @author Sergio del Amo
  * @since 1.0
  */
-public class RolesAllowedAnnotationMapper implements AnnotationMapper<RolesAllowed> {
+public class RolesAllowedAnnotationMapper implements TypedAnnotationMapper<RolesAllowed> {
     @Override
     public Class<RolesAllowed> annotationType() {
         return RolesAllowed.class;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/configuration/LdapConfiguration.java
Patch:
@@ -39,9 +39,9 @@ public class LdapConfiguration implements Toggleable {
     private static final boolean DEFAULT_ENABLED = true;
 
     private boolean enabled = DEFAULT_ENABLED;
-    private ContextConfiguration context;
-    private SearchConfiguration search;
-    private GroupConfiguration group;
+    private ContextConfiguration context = new ContextConfiguration();
+    private SearchConfiguration search = new SearchConfiguration();
+    private GroupConfiguration group = new GroupConfiguration();
     private final String name;
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -115,7 +115,7 @@ public String getFilename() {
 
     @Override
     public long getSize() {
-        return fileUpload.definedLength();
+        return fileUpload.length();
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -87,7 +87,7 @@ public String getFilename() {
 
     @Override
     public long getSize() {
-        return fileUpload.definedLength();
+        return fileUpload.length();
     }
 
     @Override

File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java
Patch:
@@ -69,7 +69,7 @@ public String receiveBytes(byte[] data, String title) {
     @Post(value = "/receive-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)
     public Publisher<HttpResponse> receiveFileUpload(StreamingFileUpload data, String title) {
         return Flowable.fromPublisher(data.transferTo(title + ".json"))
-                       .map(success -> success ? HttpResponse.ok( "Uploaded" ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
+                       .map(success -> success ? HttpResponse.ok( "Uploaded " + data.getSize()  ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
     }
 
     @Post(value = "/receive-completed-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationUtils.java
Patch:
@@ -60,7 +60,7 @@ public class AnnotationUtils {
      * @param modelUtils   The model utils
      * @param filer        The filer
      */
-    AnnotationUtils(Elements elementUtils, Messager messager, Types types, ModelUtils modelUtils, Filer filer) {
+    protected AnnotationUtils(Elements elementUtils, Messager messager, Types types, ModelUtils modelUtils, Filer filer) {
         this.elementUtils = elementUtils;
         this.messager = messager;
         this.types = types;

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -69,7 +69,7 @@ public class ModelUtils {
      * @param elementUtils The {@link Elements}
      * @param typeUtils    The {@link Types}
      */
-    ModelUtils(Elements elementUtils, Types typeUtils) {
+    protected ModelUtils(Elements elementUtils, Types typeUtils) {
         this.elementUtils = elementUtils;
         this.typeUtils = typeUtils;
     }

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.core.convert.ConversionContext;
 import io.micronaut.core.convert.format.Format;
 import io.micronaut.core.io.buffer.ByteBuffer;
-import io.micronaut.core.io.buffer.ReferenceCounted;
 import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.codec.CodecConfiguration;
 import io.micronaut.context.BeanContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -115,7 +115,7 @@ public String getFilename() {
 
     @Override
     public long getSize() {
-        return fileUpload.definedLength();
+        return fileUpload.length();
     }
 
     @Override

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java
Patch:
@@ -87,7 +87,7 @@ public String getFilename() {
 
     @Override
     public long getSize() {
-        return fileUpload.definedLength();
+        return fileUpload.length();
     }
 
     @Override

File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java
Patch:
@@ -69,7 +69,7 @@ public String receiveBytes(byte[] data, String title) {
     @Post(value = "/receive-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)
     public Publisher<HttpResponse> receiveFileUpload(StreamingFileUpload data, String title) {
         return Flowable.fromPublisher(data.transferTo(title + ".json"))
-                       .map(success -> success ? HttpResponse.ok( "Uploaded" ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
+                       .map(success -> success ? HttpResponse.ok( "Uploaded " + data.getSize()  ) : HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR, "Something bad happened"));
     }
 
     @Post(value = "/receive-completed-file-upload", consumes = MediaType.MULTIPART_FORM_DATA)

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -69,6 +69,7 @@
 import io.netty.handler.flow.FlowControlHandler;
 import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslContext;
+import io.netty.handler.stream.ChunkedWriteHandler;
 import io.netty.handler.timeout.IdleStateHandler;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GlobalEventExecutor;
@@ -104,6 +105,7 @@
 @Singleton
 public class NettyHttpServer implements EmbeddedServer, WebSocketSessionRepository {
     public static final String HTTP_STREAMS_CODEC = "http-streams-codec";
+    public static final String HTTP_CHUNKED_HANDLER = "http-chunked-handler";
     @SuppressWarnings("WeakerAccess")
     public static final String HTTP_CODEC = "http-codec";
     @SuppressWarnings("WeakerAccess")
@@ -260,6 +262,7 @@ protected void initChannel(Channel ch) {
                         pipeline.addLast(HTTP_KEEP_ALIVE_HANDLER, new HttpServerKeepAliveHandler());
                         pipeline.addLast(HTTP_COMPRESSOR, new SmartHttpContentCompressor());
                         pipeline.addLast(HTTP_STREAMS_CODEC, new HttpStreamsServerHandler());
+                        pipeline.addLast(HTTP_CHUNKED_HANDLER, new ChunkedWriteHandler());
                         pipeline.addLast(HttpRequestDecoder.ID, new HttpRequestDecoder(
                                 NettyHttpServer.this,
                                 environment,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -19,19 +19,16 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
-import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.DefaultHttpResponse;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpChunkedInput;
 import io.netty.handler.stream.ChunkedStream;
-import io.netty.handler.stream.ChunkedWriteHandler;
 
 import java.io.InputStream;
 import java.net.URL;
-import java.util.Optional;
 
 /**
  * Writes an {@link InputStream} to the Netty context.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.NettyMutableHttpResponse;
-import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
@@ -29,12 +28,10 @@
 import io.netty.handler.codec.http.DefaultHttpResponse;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpChunkedInput;
-import io.netty.handler.codec.http.HttpContentCompressor;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.LastHttpContent;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.stream.ChunkedFile;
-import io.netty.handler.stream.ChunkedWriteHandler;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -69,6 +69,7 @@
 import io.netty.handler.flow.FlowControlHandler;
 import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslContext;
+import io.netty.handler.stream.ChunkedWriteHandler;
 import io.netty.handler.timeout.IdleStateHandler;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GlobalEventExecutor;
@@ -104,6 +105,7 @@
 @Singleton
 public class NettyHttpServer implements EmbeddedServer, WebSocketSessionRepository {
     public static final String HTTP_STREAMS_CODEC = "http-streams-codec";
+    public static final String HTTP_CHUNKED_HANDLER = "http-chunked-handler";
     @SuppressWarnings("WeakerAccess")
     public static final String HTTP_CODEC = "http-codec";
     @SuppressWarnings("WeakerAccess")
@@ -260,6 +262,7 @@ protected void initChannel(Channel ch) {
                         pipeline.addLast(HTTP_KEEP_ALIVE_HANDLER, new HttpServerKeepAliveHandler());
                         pipeline.addLast(HTTP_COMPRESSOR, new SmartHttpContentCompressor());
                         pipeline.addLast(HTTP_STREAMS_CODEC, new HttpStreamsServerHandler());
+                        pipeline.addLast(HTTP_CHUNKED_HANDLER, new ChunkedWriteHandler());
                         pipeline.addLast(HttpRequestDecoder.ID, new HttpRequestDecoder(
                                 NettyHttpServer.this,
                                 environment,

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.core.type.Argument;
 
+import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -53,7 +54,7 @@ public interface ConvertibleMultiValues<V> extends ConvertibleValues<List<V>> {
      * @return The raw value or null
      * @see #getFirst(CharSequence)
      */
-    V get(CharSequence name);
+    @Nullable V get(CharSequence name);
 
     /**
      * @return Whether this values is empty

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -455,6 +455,8 @@ private boolean isAdditionalPathVar(String templateString, int len) {
                     default:
                         return true;
                 }
+            } else {
+                return templateString.charAt(0) != SLASH_OPERATOR;
             }
         }
         return false;

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -34,7 +34,6 @@
 import java.lang.annotation.Repeatable;
 import java.lang.reflect.Array;
 import java.util.*;
-import java.util.function.Consumer;
 
 /**
  * Default implementation of {@link AnnotationMetadata}.

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationMetadataQualifier.java
Patch:
@@ -65,11 +65,12 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
         String v = annotationMetadata.getValue(Named.class, String.class).orElse(null);
         if (StringUtils.isNotEmpty(v)) {
             name = Character.toUpperCase(v.charAt(0)) + v.substring(1);
+            return reduceByName(beanType, candidates, name);
         } else {
             name = getName();
+            return reduceByAnnotation(beanType, candidates, name, qualifiedName);
         }
 
-        return reduceByAnnotation(beanType, candidates, name, qualifiedName);
     }
 
     @Override

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/BookController.java
Patch:
@@ -29,7 +29,7 @@ public class BookController {
 
     @Post(value = "/book/{title}", consumes = {MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED})
     @Status(HttpStatus.CREATED)
-    Book save(@Body Book book) {
-        return book;
+    Book save(String title) {
+        return new Book(title);
     }
 }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookController.java
Patch:
@@ -30,7 +30,7 @@
 @Controller("/binding")
 public class BookController {
 
-    @Post(value = "/book/{title}", consumes = {MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED})
+    @Post(value = "/book", consumes = {MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED})
     @Status(HttpStatus.CREATED)
     Book save(@Body Book book) {
         return book;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookControllerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testPostInvalidFormData() {
         data.put("pages", "notnumber");
         data.put("url", "noturl");
         Flowable<HttpResponse<Book>> call = client.exchange(
-                POST("/binding/book/{title}", data)
+                POST("/binding/book", data)
                         .contentType(MediaType.APPLICATION_FORM_URLENCODED),
                 Book.class
         );

File: http/src/main/java/io/micronaut/http/uri/UriMatchVariable.java
Patch:
@@ -61,6 +61,9 @@ public boolean isExploded() {
     }
 
     /**
+     * An optional variable is one that will allow the route to match
+     * if it is not present.
+     *
      * @return True if the variable is optional
      */
     public boolean isOptional() {

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicMethodVisitor.java
Patch:
@@ -35,7 +35,7 @@ public abstract class PublicMethodVisitor<R, P> extends SuperclassAwareTypeVisit
 
 
     /**
-     * Only accepts public non file or static methods
+     * Only accepts public non file or static methods.
      *
      * @param element The {@link Element}
      * @return If the element is acceptable

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationQualifier.java
Patch:
@@ -53,7 +53,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
             name = qualifier.annotationType().getSimpleName();
         }
 
-        return reduceByAnnotation(beanType, candidates, name);
+        return reduceByAnnotation(beanType, candidates, name, qualifier.annotationType().getName());
     }
 
     @Override

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/render/BearerAccessRefreshToken.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 
 /**
+ * Encapsulates an Access Token response as described in <a href="https://tools.ietf.org/html/rfc6749#section-4.1.4">RFC 6749</a>.
  *
  * @author Sergio del Amo
  * @since 1.0

File: validation/src/main/java/io/micronaut/validation/async/AsyncTypeElementVisitor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.validation.visitor;
+package io.micronaut.validation.async;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.visitor.ClassElement;

File: validation/src/main/java/io/micronaut/validation/async/package-info.java
Patch:
@@ -15,9 +15,9 @@
  */
 
 /**
- * This package includes visitors specific to compile time validation and checks.
+ * This package includes visitors specific to compile time validation and checks for async related elements.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.validation.visitor;
+package io.micronaut.validation.async;

File: validation/src/main/java/io/micronaut/validation/websocket/WebSocketVisitor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.validation.visitor;
+package io.micronaut.validation.websocket;
 
 import io.micronaut.core.bind.annotation.Bindable;
 import io.micronaut.core.util.ArrayUtils;

File: inject/src/main/java/io/micronaut/inject/qualifiers/AnnotationQualifier.java
Patch:
@@ -53,7 +53,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
             name = qualifier.annotationType().getSimpleName();
         }
 
-        return reduceByAnnotation(beanType, candidates, name);
+        return reduceByAnnotation(beanType, candidates, name, qualifier.annotationType().getName());
     }
 
     @Override

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/render/BearerAccessRefreshToken.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 
 /**
+ * Encapsulates an Access Token response as described in <a href="https://tools.ietf.org/html/rfc6749#section-4.1.4">RFC 6749</a>.
  *
  * @author Sergio del Amo
  * @since 1.0

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -256,8 +256,10 @@ private String resolveUri(BeanDefinition bean, String value, ExecutableMethod me
         if (StringUtils.isNotEmpty(value)) {
             boolean isFirstCharSlash = value.charAt(0) == '/';
             boolean isFirstCharVar = value.charAt(0) == '{';
-            if (value.length() == 1 && isFirstCharSlash) {
+            if (isFirstCharSlash && value.length() == 1) {
                 return rootUri.toString();
+            } else if (isFirstCharSlash && value.indexOf("{?") == 1) {
+                return rootUri.nest(value.substring(1)).toString();
             } else {
                 return rootUri.nest(isFirstCharSlash || isFirstCharVar ? value : '/' + value).toString();
             }

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -41,7 +41,6 @@
 import io.micronaut.http.MutableHttpRequest;
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.bind.RequestBinderRegistry;
-import io.micronaut.http.client.annotation.Client;
 import io.micronaut.http.client.exceptions.*;
 import io.micronaut.http.client.multipart.MultipartBody;
 import io.micronaut.http.client.sse.RxSseClient;
@@ -438,7 +437,7 @@ public HttpClient stop() {
 
     /**
      * Sets the client identifiers that this client applies to. Used to select a subset of {@link HttpClientFilter}.
-     * The client identifiers are equivalents to the value of {@link Client#id()}
+     * The client identifiers are equivalents to the value of {@link io.micronaut.http.client.annotation.Client#id()}
      *
      * @param clientIdentifiers The client identifiers
      */

File: http/src/main/java/io/micronaut/http/uri/UriMatchVariable.java
Patch:
@@ -72,7 +72,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (!(o instanceof UriMatchVariable)){
+        if (!(o instanceof UriMatchVariable)) {
             return false;
         }
         UriMatchVariable that = (UriMatchVariable) o;

File: http/src/main/java/io/micronaut/http/util/OutgoingHttpRequestProcessorImpl.java
Patch:
@@ -21,11 +21,11 @@
 
 import javax.inject.Singleton;
 import java.util.Optional;
-import java.util.regex.Pattern;
 
 /**
  *
  * Implementation of {@link OutgoingHttpRequestProcessor}.
+ *
  * @author Sergio del Amo
  * @since 1.0
  */

File: inject-java-test/src/main/groovy/io/micronaut/annotation/processing/test/InMemoryJavaFileManager.java
Patch:
@@ -36,6 +36,7 @@
  *
  * @author Gregory Kick
  */
+@SuppressWarnings("all")
 final class InMemoryJavaFileManager extends ForwardingJavaFileManager<JavaFileManager> {
     private final LoadingCache<URI, JavaFileObject> inMemoryFileObjects =
             CacheBuilder.newBuilder().build(new CacheLoader<URI, JavaFileObject>() {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java
Patch:
@@ -242,7 +242,6 @@ private class GetterAndSetter {
         ExecutableElement setter;
         final String propertyName;
 
-
         public GetterAndSetter(String propertyName) {
             this.propertyName = propertyName;
         }

File: inject/src/main/java/io/micronaut/inject/visitor/Element.java
Patch:
@@ -27,10 +27,12 @@
  * @since 1.0
  */
 public interface Element extends AnnotationMetadata {
+
     /**
      * @return The name of the element.
      */
     String getName();
+
     /**
      * @return True if the element is protected.
      */

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -127,6 +127,8 @@ public ObjectMapper objectMapper(Optional<JacksonConfiguration> jacksonConfigura
         }
 
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        objectMapper.configure(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, true);
         jacksonConfiguration.ifPresent((configuration) -> {
             JsonInclude.Include include = configuration.getSerializationInclusion();
             if (include != null) {

File: validation/src/test/groovy/io/micronaut/validation/BookmarkController.java
Patch:
@@ -24,8 +24,8 @@ public HttpStatus index(@PositiveOrZero @Nullable Integer offset,
     }
 
     @Get("/bookmarks/list{?paginationCommand*}")
-    public HttpStatus list(@Valid @Nullable PaginationCommand paginationCommand) {
-        return HttpStatus.OK;
+    public PaginationCommand list(@Valid @Nullable PaginationCommand paginationCommand) {
+        return paginationCommand;
     }
 
 }

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -32,8 +32,8 @@ public class UriMatchTemplate extends UriTemplate implements UriMatcher {
 
     protected static final String VARIABLE_MATCH_PATTERN = "([^\\/\\?#&;\\+]";
     protected StringBuilder pattern;
-    private final Pattern matchPattern;
     protected List<UriMatchVariable> variables;
+    private final Pattern matchPattern;
     private final boolean isRoot;
 
     /**
@@ -190,7 +190,8 @@ protected static class DefaultUriMatchInfo implements UriMatchInfo {
 
         /**
          * @param uri       The URI
-         * @param variables The variables
+         * @param variableValues Actual variable values
+         * @param variables Information about the URI template's expected variables
          */
         protected DefaultUriMatchInfo(String uri, Map<String, Object> variableValues, List<UriMatchVariable> variables) {
             this.uri = uri;

File: http/src/main/java/io/micronaut/http/uri/UriMatchVariable.java
Patch:
@@ -72,7 +72,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (!(o instanceof UriMatchVariable)){
+        if (!(o instanceof UriMatchVariable)) {
             return false;
         }
         UriMatchVariable that = (UriMatchVariable) o;

File: http/src/main/java/io/micronaut/http/util/OutgoingHttpRequestProcessorImpl.java
Patch:
@@ -21,7 +21,6 @@
 
 import javax.inject.Singleton;
 import java.util.Optional;
-import java.util.regex.Pattern;
 
 /**
  *

File: core/src/main/java/io/micronaut/core/io/scan/DefaultClassPathResourceLoader.java
Patch:
@@ -158,7 +158,7 @@ private boolean isDirectory(String path) {
             if (url != null) {
                 try {
                     URI uri = url.toURI();
-                    Path pathObject = null;
+                    Path pathObject;
                     synchronized (this) {
 
                         if (uri.getScheme().equals("jar")) {

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -61,9 +61,9 @@ public Map<String, ClassElement> getTypeArguments() {
                 ClassNode cn = entry.getValue();
                 GroovyClassElement classElement;
                 if (cn.isEnum()) {
-                    classElement = new GroovyEnumElement(cn, getAnnotationMetadata());
+                    classElement = new GroovyEnumElement(cn, AstAnnotationUtils.getAnnotationMetadata(cn));
                 } else {
-                    classElement = new GroovyClassElement(cn, getAnnotationMetadata());
+                    classElement = new GroovyClassElement(cn, AstAnnotationUtils.getAnnotationMetadata(cn));
                 }
                 map.put(entry.getKey(), classElement);
             }
@@ -263,7 +263,6 @@ private class GetterAndSetter {
         MethodNode setter;
         final String propertyName;
 
-
         GetterAndSetter(String propertyName) {
             this.propertyName = propertyName;
         }

File: configurations/openapi/src/main/java/io/micronaut/openapi/visitor/AbstractOpenApiVisitor.java
Patch:
@@ -142,8 +142,7 @@ protected Map<CharSequence, Object> toValueMap(Map<CharSequence, Object> values)
                                     }
                                 }
                                 newValues.put(key, mediaTypes);
-                            }
-                            else if (ApiResponse.class.getName().equals(annotationName)) {
+                            } else if (ApiResponse.class.getName().equals(annotationName)) {
                                 Map responses = new LinkedHashMap();
                                 for (Object o : a) {
                                     AnnotationValue<ApiResponse> sv = (AnnotationValue<ApiResponse>) o;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyMethodElement.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.ast.groovy.visitor;
 
 import io.micronaut.ast.groovy.utils.AstAnnotationUtils;
+import io.micronaut.ast.groovy.utils.ExtendedParameter;
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.inject.visitor.ClassElement;
 import io.micronaut.inject.visitor.MethodElement;
@@ -101,7 +102,7 @@ public ClassElement getReturnType() {
     public ParameterElement[] getParameters() {
         Parameter[] parameters = methodNode.getParameters();
         return Arrays.stream(parameters).map((Function<Parameter, ParameterElement>) parameter ->
-                new GroovyParameterElement(parameter, AstAnnotationUtils.getAnnotationMetadata(parameter))
+                new GroovyParameterElement(parameter, AstAnnotationUtils.getAnnotationMetadata(new ExtendedParameter(methodNode, parameter)))
         ).toArray(ParameterElement[]::new);
     }
 }

File: core/src/main/java/io/micronaut/core/naming/NameUtils.java
Patch:
@@ -224,9 +224,11 @@ public static boolean isGetterName(String methodName) {
             prefixLength = PREFIX_LENTGH;
         } else if (methodName.startsWith("is")) {
             prefixLength = IS_LENTGH;
+        } else {
+            return false;
         }
         if (len > prefixLength) {
-            return Character.isUpperCase(methodName.charAt(PREFIX_LENTGH));
+            return Character.isUpperCase(methodName.charAt(prefixLength));
         }
         return false;
     }

File: configurations/jmx/src/main/java/io/micronaut/configuration/jmx/JmxConfiguration.java
Patch:
@@ -100,7 +100,7 @@ public boolean isAddToFactory() {
     }
 
     /**
-     * Sets if the server should be kept in the factory. Default {@value DEFAULT_ADD_FACTORY}.
+     * Sets if the server should be kept in the factory. Default {@value #DEFAULT_ADD_FACTORY}.
      *
      * @param addToFactory The add to factory flag
      */
@@ -120,7 +120,7 @@ public boolean isIgnoreAgentNotFound() {
     }
 
     /**
-     * Sets to ignore the exception if the agent is not found. Default {@value DEFAULT_IGNORE_AGENT}.
+     * Sets to ignore the exception if the agent is not found. Default {@value #DEFAULT_IGNORE_AGENT}.
      *
      * @param ignoreAgentNotFound The ignoreAgentNotFound
      */
@@ -138,7 +138,7 @@ public boolean isRegisterEndpoints() {
     }
 
     /**
-     * Sets if endpoints should be registered. Default {@value DEFAULT_REG_ENDPOINTS}.
+     * Sets if endpoints should be registered. Default {@value #DEFAULT_REG_ENDPOINTS}.
      *
      * @param registerEndpoints The flag
      */

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/configuration/LdapConfiguration.java
Patch:
@@ -281,7 +281,7 @@ public String getFilter() {
         }
 
         /**
-         * Sets the search filter. Default {@value DEFAULT_FILTER}
+         * Sets the search filter. Default {@value #DEFAULT_FILTER}
          *
          * @param filter The search filter
          */

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/LoadedVisitor.java
Patch:
@@ -90,7 +90,7 @@ public boolean matches(AnnotationMetadata annotationMetadata) {
         if (elementAnnotation.equals("java.lang.Object")) {
             return true;
         }
-        return annotationMetadata.hasDeclaredStereotype(elementAnnotation);
+        return annotationMetadata.hasStereotype(elementAnnotation);
     }
 
     /**

File: configurations/jdbc-dbcp/src/main/java/io/micronaut/configuration/jdbc/dbcp/metadata/DbcpDataSourcePoolMetadata.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/metadata/TomcatDataSourcePoolMetadata.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: jdbc/src/main/java/io/micronaut/jdbc/metadata/AbstractDataSourcePoolMetadata.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: jdbc/src/main/java/io/micronaut/jdbc/metadata/DataSourcePoolMetadata.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: jdbc/src/main/java/io/micronaut/jdbc/metadata/DataSourcePoolMetadataProvider.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: security/src/main/java/io/micronaut/security/token/writer/HttpHeaderTokenWriter.java
Patch:
@@ -67,6 +67,9 @@ protected String headerValue(String token) {
         StringBuilder sb = new StringBuilder();
         if (httpHeaderTokenWriterConfiguration.getPrefix() != null) {
             sb.append(httpHeaderTokenWriterConfiguration.getPrefix());
+            if (!httpHeaderTokenWriterConfiguration.getPrefix().endsWith(" ")) {
+                sb.append(" ");
+            }
         }
         sb.append(token);
         return sb.toString();

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -43,7 +43,7 @@ public class InstantiationUtils {
     public static Optional<?> tryInstantiate(String name, ClassLoader classLoader) {
         try {
             return ClassUtils.forName(name, classLoader)
-                .map((Function<Class, Optional>) InstantiationUtils::tryInstantiate);
+                .flatMap(InstantiationUtils::tryInstantiate);
         } catch (Throwable e) {
             Logger log = LoggerFactory.getLogger(InstantiationUtils.class);
             if (log.isDebugEnabled()) {

File: router/src/main/java/io/micronaut/web/router/DefaultFilterRoute.java
Patch:
@@ -74,6 +74,9 @@ public HttpFilter getFilter() {
 
     @Override
     public Optional<HttpFilter> match(HttpMethod method, URI uri) {
+        if (httpMethods != null && !httpMethods.contains(method)) {
+            return Optional.empty();
+        }
         String uriStr = uri.toString();
         for (String pattern : patterns) {
             if (PathMatcher.ANT.matches(pattern, uriStr)) {

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -171,7 +171,7 @@ protected UriTemplate newUriTemplate(CharSequence uriTemplate, List<PathSegment>
         pattern = null;
         variableModifiers = null;
         String[] variables = newList.toArray(new String[newList.size()]);
-        return newUriMatchTemplate(uriTemplate, newSegments, newPattern, variables, newMap);
+        return newUriMatchTemplate(normalizeNested(toString(), uriTemplate), newSegments, newPattern, variables, newMap);
     }
 
     @Override

File: inject-java/src/main/java/io/micronaut/annotation/processing/AnnotationProcessingOutputVisitor.java
Patch:
@@ -49,7 +49,7 @@ public class AnnotationProcessingOutputVisitor extends AbstractClassWriterOutput
     /**
      * @param filer The {@link Filer} for creating new files
      */
-    AnnotationProcessingOutputVisitor(Filer filer) {
+    public AnnotationProcessingOutputVisitor(Filer filer) {
         this.filer = filer;
     }
 

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/WebSocketMessageEncoder.java
Patch:
@@ -50,6 +50,7 @@ public class WebSocketMessageEncoder {
     public WebSocketMessageEncoder(MediaTypeCodecRegistry codecRegistry) {
         this.codecRegistry = codecRegistry;
     }
+
     /**
      * Encode the given message with the given media type.
      * @param message The message

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/configuration/LdapConfiguration.java
Patch:
@@ -323,7 +323,7 @@ public static class GroupConfiguration implements Toggleable {
         public static final String PREFIX = LdapConfiguration.PREFIX + ".groups";
 
         private static final boolean DEFAULT_ENABLED = false;
-        private static final boolean DEFAULT_SUBTREE= true;
+        private static final boolean DEFAULT_SUBTREE = true;
         private static final String DEFAULT_FILTER = "uniquemember={0}";
         private static final String DEFAULT_ATTR = "cn";
 

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/DatasourceFactory.java
Patch:
@@ -85,7 +85,6 @@ public TomcatDataSourcePoolMetadata tomcatPoolDataSourceMetadataProvider(
         return dataSourcePoolMetadata;
     }
 
-
     @Override
     @PreDestroy
     public void close() {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueBuilder.java
Patch:
@@ -20,7 +20,6 @@
 
 import javax.annotation.Nullable;
 import java.lang.annotation.Annotation;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 

File: core/src/main/java/io/micronaut/core/reflect/ClassLoadingReporter.java
Patch:
@@ -67,6 +67,7 @@ static void reportPresent(Class<?> type) {
             }
         }
     }
+
     /**
      * Report a class that is present.
      *

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.discovery.DiscoveryConfiguration;
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -16,17 +16,14 @@
 
 package io.micronaut.http.client;
 
-import io.micronaut.context.BeanContext;
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.http.ssl.ClientSslConfiguration;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
-import io.micronaut.websocket.context.WebSocketBeanRegistry;
 import io.netty.channel.ChannelOption;
 
 import javax.annotation.Nullable;
-import javax.inject.Inject;
 import java.net.Proxy;
 import java.net.SocketAddress;
 import java.nio.charset.Charset;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -505,7 +505,9 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
         String clientId = clientAnn.getValue(String.class).orElse(null);
         String path = clientAnn.get("path", String.class).orElse(null);
         String clientKey = computeClientKey(clientId, path);
-        if (clientKey == null) return null;
+        if (clientKey == null) {
+            return null;
+        }
 
         return clients.computeIfAbsent(clientKey, integer -> {
             HttpClient clientBean = beanContext.findBean(HttpClient.class, Qualifiers.byName(clientId)).orElse(null);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -130,7 +130,6 @@ private void applyConfiguredHeaders(MutableHttpHeaders headers) {
         });
     }
 
-
     private MutableHttpResponse<?> encodeBodyWithCodec(MutableHttpResponse<?> response,
                                                        Object body,
                                                        MediaTypeCodec codec,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -195,8 +195,7 @@ public Publisher<MutableHttpResponse<?>> proceed(io.micronaut.http.HttpRequest<?
                             ctx.writeAndFlush(actualResponse);
                         }
                     });
-                }
-                else {
+                } else {
                     ctx.fireExceptionCaught(new HttpStatusException(HttpStatus.NOT_FOUND, "WebSocket Not Found"));
                 }
             } else {

File: http-server/src/main/java/io/micronaut/http/server/websocket/ServerWebSocketProcessor.java
Patch:
@@ -42,8 +42,8 @@
 @Internal
 public class ServerWebSocketProcessor extends DefaultRouteBuilder implements ExecutableMethodProcessor<ServerWebSocket> {
 
-
     private Set<Class> mappedWebSockets = new HashSet<>(4);
+
     /**
      * Default constructor.
      *

File: http/src/main/java/io/micronaut/http/HttpRequest.java
Patch:
@@ -17,12 +17,9 @@
 package io.micronaut.http;
 
 import io.micronaut.http.cookie.Cookies;
-import io.micronaut.http.util.HttpUtil;
 
 import java.net.InetSocketAddress;
 import java.net.URI;
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;

File: http/src/main/java/io/micronaut/http/bind/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.http.bind;
\ No newline at end of file
+package io.micronaut.http.bind;

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyClassElement.java
Patch:
@@ -26,7 +26,6 @@
 import org.codehaus.groovy.ast.ClassNode;
 import org.codehaus.groovy.ast.FieldNode;
 import org.codehaus.groovy.ast.MethodNode;
-import org.codehaus.groovy.ast.Variable;
 
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
@@ -117,6 +116,7 @@ public void visitField(FieldNode node) {
                     elements.add(new GroovyFieldElement(node, AstAnnotationUtils.getAnnotationMetadata(node)));
                 }
             }
+
             @Override
             public void accept(ClassNode classNode, MethodNode methodNode) {
                 elements.add(new GroovyMethodElement(methodNode, AstAnnotationUtils.getAnnotationMetadata(methodNode)));

File: inject-groovy/src/main/groovy/io/micronaut/ast/groovy/visitor/GroovyVisitorContext.java
Patch:
@@ -58,6 +58,9 @@ public void warn(String message, Element element) {
 
     }
 
+    /**
+     * @return The source unit
+     */
     SourceUnit getSourceUnit() {
         return sourceUnit;
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicMethodVisitor.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Set;
 
 /**
- * An adapter that implements all methods of the {@link javax.lang.model.type.TypeVisitor} interface. Subclasses can
- * selectively override.
+ * An adapter that implements all methods of the {@link javax.lang.model.type.TypeVisitor}
+ * interface subclasses can selectively override.
  *
  * @param <R> The return type of the visitor's method
  * @param <P> The type of the additional parameter to the visitor's methods.

File: inject-java/src/main/java/io/micronaut/annotation/processing/SuperclassAwareTypeVisitor.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Set;
 
 /**
- * Processes the type and its super classes
+ * Processes the type and its super classes.
  *
  * @param <R>
  * @param <P>

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -38,9 +38,6 @@ public class JavaVisitorContext implements VisitorContext {
     private final Elements elements;
     private final AnnotationUtils annotationUtils;
     private final Types types;
-
-
-
     private final ModelUtils modelUtils;
 
     /**
@@ -50,6 +47,7 @@ public class JavaVisitorContext implements VisitorContext {
      * @param elements The elements
      * @param annotationUtils The annotation utils
      * @param types Type types
+     * @param modelUtils The model utils
      */
     public JavaVisitorContext(Messager messager, Elements elements, AnnotationUtils annotationUtils, Types types, ModelUtils modelUtils) {
         this.messager = messager;

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -33,7 +33,6 @@
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.order.OrderUtil;
 import io.micronaut.core.reflect.ClassUtils;
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.inject.BeanConfiguration;
 import org.slf4j.Logger;

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -143,7 +143,7 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String HEROKU = "heroku";
 
     /**
-     * Should respect the order as provided
+     * Should respect the order as provided.
      *
      * @return The active environment names
      */

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -31,7 +31,6 @@
 import io.micronaut.web.router.RouteMatchUtils;
 import org.reactivestreams.Publisher;
 
-import java.lang.reflect.Method;
 import java.util.Map;
 import java.util.Optional;
 

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthController.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.MediaType;
-import io.micronaut.http.annotation.Body;
 import io.micronaut.http.annotation.Consumes;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Post;

File: security/src/main/java/io/micronaut/security/rules/InterceptUrlMapRule.java
Patch:
@@ -24,7 +24,6 @@
 import io.micronaut.security.token.config.TokenConfiguration;
 import io.micronaut.web.router.RouteMatch;
 import javax.annotation.Nullable;
-import java.net.URI;
 import java.util.*;
 
 /**

File: security/src/main/java/io/micronaut/security/utils/DefaultSecurityService.java
Patch:
@@ -33,6 +33,7 @@
  */
 @Singleton
 public class DefaultSecurityService implements SecurityService {
+
     /**
      * Get the username of the current user.
      *
@@ -88,7 +89,7 @@ public boolean hasRole(String role, String rolesKey) {
             return false;
         }
         return getAuthentication().map(authentication -> {
-            if (authentication.getAttributes() !=null && authentication.getAttributes().containsKey(rolesKey)) {
+            if (authentication.getAttributes() != null && authentication.getAttributes().containsKey(rolesKey)) {
                 Object authorities = authentication.getAttributes().get(rolesKey);
                 if (authorities instanceof List) {
                     return ((List) authorities).contains(role);

File: session/src/main/java/io/micronaut/session/annotation/SessionValue.java
Patch:
@@ -46,6 +46,7 @@
 
     /**
      * @see Bindable#defaultValue()
+     * @return The default value if not found
      */
     @AliasFor(annotation = Bindable.class, member = "defaultValue")
     String defaultValue() default "";

File: tracing/src/main/java/io/micronaut/tracing/brave/BraveTracerConfiguration.java
Patch:
@@ -49,15 +49,15 @@ public class BraveTracerConfiguration implements Toggleable {
     public static final String PREFIX = "tracing.zipkin";
     public static final float DEFAULT_SAMPLER_PROBABILITY = 0.1f;
 
-    @ConfigurationBuilder(prefixes = "", excludes = {"errorParser", "clock", "endpoint", "spanReporter", "propagationFactory", "currentTraceContext", "sampler"})
-    protected Tracing.Builder tracingBuilder = Tracing.newBuilder();
-
     /**
      * The default enable value.
      */
     @SuppressWarnings("WeakerAccess")
     public static final boolean DEFAULT_ENABLED = false;
 
+    @ConfigurationBuilder(prefixes = "", excludes = {"errorParser", "clock", "endpoint", "spanReporter", "propagationFactory", "currentTraceContext", "sampler"})
+    protected Tracing.Builder tracingBuilder = Tracing.newBuilder();
+
     private boolean enabled = DEFAULT_ENABLED;
     private float samplerProbability = DEFAULT_SAMPLER_PROBABILITY;
 

File: websocket/src/main/java/io/micronaut/websocket/WebSocketClient.java
Patch:
@@ -23,7 +23,6 @@
 import java.net.URI;
 import java.util.Map;
 
-
 /**
  * Interface that provides a way to connect a client over WebSocket.
  *

File: configurations/jmx/src/main/java/io/micronaut/configuration/jmx/context/AbstractDynamicMBeanFactory.java
Patch:
@@ -99,7 +99,7 @@ public MBeanInfo getMBeanInfo() {
     }
 
     /**
-     * Returns the management bean description
+     * Returns the management bean description.
      * @see MBeanInfo#getDescription()
      *
      * @param beanDefinition The bean definition

File: configurations/jmx/src/main/java/io/micronaut/configuration/jmx/endpoint/EndpointNameGenerator.java
Patch:
@@ -22,7 +22,7 @@
 import javax.inject.Singleton;
 
 /**
- * Generates object names for endpoint bean definitions
+ * Generates object names for endpoint bean definitions.
  */
 @Singleton
 @Named("endpoint")

File: configurations/jmx/src/main/java/io/micronaut/configuration/jmx/endpoint/package-info.java
Patch:
@@ -23,4 +23,4 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.core.annotation.Experimental;
-import io.micronaut.management.endpoint.annotation.Endpoint;
\ No newline at end of file
+import io.micronaut.management.endpoint.annotation.Endpoint;

File: configurations/jmx/src/main/java/io/micronaut/configuration/jmx/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * A configuration that creates beans for JMX
+ * A configuration that creates beans for JMX.
  */
-package io.micronaut.configuration.jmx;
\ No newline at end of file
+package io.micronaut.configuration.jmx;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/generator/JwtGeneratorConfigurationProperties.java
Patch:
@@ -57,7 +57,7 @@ public void setRefreshTokenExpiration(Integer refreshTokenExpiration) {
     }
 
     /**
-     * Access token expiration. Default value ({@value #DEFAULT_EXPIRATION}).
+     * Access token expiration. Default value ({@value DEFAULT_EXPIRATION}).
      * @param accessTokenExpiration The expiration
      */
     public void setAccessTokenExpiration(Integer accessTokenExpiration) {

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/ContextAuthenticationMapper.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap;
+package io.micronaut.configuration.security.ldap;
 
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.security.authentication.AuthenticationResponse;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/DefaultContextAuthenticationMapper.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap;
+package io.micronaut.configuration.security.ldap;
 
 import io.micronaut.core.convert.value.ConvertibleValues;
 import io.micronaut.security.authentication.AuthenticationResponse;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/configuration/GroupPropertiesSearchSettings.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.configuration;
+package io.micronaut.configuration.security.ldap.configuration;
 
-import io.micronaut.security.ldap.context.SearchSettings;
+import io.micronaut.configuration.security.ldap.context.SearchSettings;
 
 /**
  * Implementation of {@link SearchSettings} that derives values from an

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/configuration/SearchPropertiesSearchSettings.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.configuration;
+package io.micronaut.configuration.security.ldap.configuration;
 
-import io.micronaut.security.ldap.context.SearchSettings;
+import io.micronaut.configuration.security.ldap.context.SearchSettings;
 
 /**
  * Implementation of {@link SearchSettings} that derives values from an

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/AttributesConvertibleValues.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionService;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/ContextBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import javax.annotation.Nullable;
 import javax.naming.NamingException;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/ContextConfigurationContextSettings.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
-import io.micronaut.security.ldap.configuration.LdapConfiguration;
+import io.micronaut.configuration.security.ldap.configuration.LdapConfiguration;
 
 /**
  * Implementation of {@link ContextSettings} that derives its values from

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/ContextSettings.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 /**
  * Contract to hold settings for creating an LDAP context.

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/DefaultContextBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/DefaultLdapSearchService.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import javax.inject.Singleton;
 import javax.naming.NamingEnumeration;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/LdapSearchResult.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import io.micronaut.core.convert.value.ConvertibleValues;
 

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/LdapSearchService.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import javax.naming.NamingException;
 import javax.naming.directory.DirContext;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/SearchProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 import javax.naming.NamingException;
 import java.util.List;

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/context/SearchSettings.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.context;
+package io.micronaut.configuration.security.ldap.context;
 
 /**
  * Contract to provide settings to search LDAP.

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/group/DefaultLdapGroupProcessor.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.group;
+package io.micronaut.configuration.security.ldap.group;
 
-import io.micronaut.security.ldap.context.LdapSearchResult;
-import io.micronaut.security.ldap.context.SearchProvider;
+import io.micronaut.configuration.security.ldap.context.LdapSearchResult;
+import io.micronaut.configuration.security.ldap.context.SearchProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: configurations/security-ldap/src/main/java/io/micronaut/configuration/security/ldap/group/LdapGroupProcessor.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.micronaut.security.ldap.group;
+package io.micronaut.configuration.security.ldap.group;
 
-import io.micronaut.security.ldap.context.LdapSearchResult;
-import io.micronaut.security.ldap.context.SearchProvider;
+import io.micronaut.configuration.security.ldap.context.LdapSearchResult;
+import io.micronaut.configuration.security.ldap.context.SearchProvider;
 
 import javax.naming.NamingException;
 import java.util.Collections;

File: security/src/main/java/io/micronaut/security/rules/InterceptUrlMapRule.java
Patch:
@@ -69,14 +69,13 @@ abstract class InterceptUrlMapRule extends AbstractSecurityRule {
      */
     @Override
     public SecurityRuleResult check(HttpRequest request, @Nullable RouteMatch routeMatch, @Nullable Map<String, Object> claims) {
-        final URI uri = request.getUri();
-        final String uriString = uri.toString();
+        final String path = request.getUri().getPath();
         final HttpMethod httpMethod = request.getMethod();
 
         Optional<InterceptUrlMapPattern> matchedPattern = getPatternList()
                 .stream()
                 .filter(p -> p.getHttpMethod().map(method -> method.equals(httpMethod)).orElse(true))
-                .filter(p -> pathMatcher.matches(p.getPattern(), uriString))
+                .filter(p -> pathMatcher.matches(p.getPattern(), path))
                 .findFirst();
 
         return matchedPattern

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/AbstractEurekaClient.java
Patch:
@@ -130,7 +130,7 @@ public Publisher<List<String>> getServiceIds() {
     }
 
     /**
-     * @return A {@link Publisher} with applications info
+     * @return A {@link Publisher} with applications info.
      */
     @SuppressWarnings("WeakerAccess")
     @Get("/apps")

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -99,8 +99,6 @@ void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
         }
     }
 
-
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyConfiguration}.
      */
@@ -110,7 +108,6 @@ void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
     public static class DefaultKeyConfiguration extends KeyConfiguration {
     }
 
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyStoreConfiguration}.
      */

File: http/src/main/java/io/micronaut/http/ssl/DefaultSslConfiguration.java
Patch:
@@ -63,8 +63,6 @@ void setTrustStore(DefaultTrustStoreConfiguration trustStore) {
         super.setTrustStore(trustStore);
     }
 
-
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyConfiguration}.
      */
@@ -74,7 +72,6 @@ void setTrustStore(DefaultTrustStoreConfiguration trustStore) {
     public static class DefaultKeyConfiguration extends KeyConfiguration {
     }
 
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyStoreConfiguration}.
      */

File: http/src/main/java/io/micronaut/http/ssl/ServerSslConfiguration.java
Patch:
@@ -96,8 +96,6 @@ void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
         }
     }
 
-
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyConfiguration}.
      */
@@ -107,7 +105,6 @@ void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
     public static class DefaultKeyConfiguration extends KeyConfiguration {
     }
 
-
     /**
      * The default {@link io.micronaut.http.ssl.SslConfiguration.KeyStoreConfiguration}.
      */

File: runtime/src/main/java/io/micronaut/discovery/registration/RegistrationConfiguration.java
Patch:
@@ -54,13 +54,13 @@ public abstract class RegistrationConfiguration implements Toggleable {
     public static final int DEFAULT_RETRYDELAY_SECONDS = 1;
 
     /**
-     * The default deregister value
+     * The default deregister value.
      */
     @SuppressWarnings("WeakerAccess")
     public static final boolean DEFAULT_DEREGISTER = true;
 
     /**
-     * The default fail fast value
+     * The default fail fast value.
      */
     @SuppressWarnings("WeakerAccess")
     public static final boolean DEFAULT_FAILFAST = true;

File: runtime/src/main/java/io/micronaut/health/HeartbeatConfiguration.java
Patch:
@@ -37,7 +37,7 @@ public class HeartbeatConfiguration implements Toggleable {
     public static final boolean DEFAULT_ENABLED = true;
 
     /**
-     * The default interval seconds
+     * The default interval seconds.
      */
     @SuppressWarnings("WeakerAccess")
     public static final int DEFAULT_INTERVAL_SECONDS = 15;

File: http-netty/src/main/java/io/micronaut/http/netty/websocket/AbstractNettyWebSocketHandler.java
Patch:
@@ -354,7 +354,6 @@ protected void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame ms
             handleCloseFrame(ctx, cwsf);
         } else {
             ctx.channel().writeAndFlush(new CloseWebSocketFrame(CloseReason.UNSUPPORTED_DATA.getCode(), CloseReason.UNSUPPORTED_DATA.getReason())).addListener(ChannelFutureListener.CLOSE);
-
         }
     }
 
@@ -371,11 +370,12 @@ protected void messageHandled(ChannelHandlerContext ctx, NettyRxWebSocketSession
 
     private void handleCloseFrame(ChannelHandlerContext ctx, CloseWebSocketFrame cwsf) {
         if (closed.compareAndSet(false, true)) {
+            ctx.pipeline().remove(this);
             Optional<? extends MethodExecutionHandle<?, ?>> opt = webSocketBean.closeMethod();
             if (getSession().isOpen()) {
                 CloseReason cr = new CloseReason(cwsf.statusCode(), cwsf.reasonText());
                 if (LOG.isDebugEnabled()) {
-                    LOG.debug("Closing WebSocket session {} with reason {}", session, cr);
+                    LOG.debug("Closing WebSocket session {} with reason {}", getSession(), cr);
                 }
                 if (opt.isPresent()) {
                     MethodExecutionHandle<?, ?> methodExecutionHandle = opt.get();

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketHandler.java
Patch:
@@ -231,6 +231,9 @@ protected void messageHandled(ChannelHandlerContext ctx, NettyRxWebSocketSession
     public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
         Channel channel = ctx.channel();
         channel.attr(NettyRxWebSocketSession.WEB_SOCKET_SESSION_KEY).set(null);
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("Removing WebSocket Server session: " + session);
+        }
         webSocketSessions.remove(channel);
         try {
             eventPublisher.publishEvent(new WebSocketSessionClosedEvent(session));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/websocket/NettyServerWebSocketUpgradeHandler.java
Patch:
@@ -171,6 +171,8 @@ public Publisher<MutableHttpResponse<?>> proceed(io.micronaut.http.HttpRequest<?
 
                             try {
                                 // re-configure the pipeline
+                                pipeline.remove(NettyHttpServer.HTTP_STREAMS_CODEC);
+                                pipeline.remove(NettyServerWebSocketUpgradeHandler.this);
                                 NettyServerWebSocketHandler webSocketHandler = new NettyServerWebSocketHandler(
                                         webSocketSessions,
                                         handshaker,
@@ -183,8 +185,7 @@ public Publisher<MutableHttpResponse<?>> proceed(io.micronaut.http.HttpRequest<?
                                         ctx
                                 );
                                 pipeline.addAfter("wsdecoder", NettyServerWebSocketHandler.ID, webSocketHandler);
-                                pipeline.remove(NettyHttpServer.HTTP_STREAMS_CODEC);
-                                pipeline.remove(NettyServerWebSocketUpgradeHandler.this);
+
                             } catch (Throwable e) {
                                 if (LOG.isErrorEnabled()) {
                                     LOG.error("Error opening WebSocket: " + e.getMessage(), e);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -77,6 +77,7 @@
 import io.netty.handler.codec.DecoderResult;
 import io.netty.handler.codec.TooLongFrameException;
 import io.netty.handler.codec.http.*;
+import io.netty.handler.codec.http.HttpHeaderValues;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;
 import io.netty.handler.timeout.IdleState;

File: http/src/main/java/io/micronaut/http/HttpHeaders.java
Patch:
@@ -121,7 +121,6 @@ public interface HttpHeaders extends ConvertibleMultiValues<String> {
      */
     String AUTHORIZATION = "Authorization";
 
-
     /**
      * {@code "Authorization"}.
      */

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/render/BearerAccessRefreshToken.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.render;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.micronaut.http.HttpHeaderValues;
 
 import java.util.Collection;
 import java.util.List;
@@ -35,7 +36,7 @@ public class BearerAccessRefreshToken extends AccessRefreshToken {
     private Integer expiresIn;
 
     @JsonProperty("token_type")
-    private String tokenType = "Bearer";
+    private String tokenType = HttpHeaderValues.AUTHORIZATION_PREFIX_BEARER;
 
     /**
      * Necessary for JSON serialization.

File: security/src/main/java/io/micronaut/security/rules/SensitiveEndpointRule.java
Patch:
@@ -24,8 +24,7 @@
 
 import javax.annotation.Nullable;
 import javax.inject.Singleton;
-import java.lang.reflect.Method;
-import java.util.*;
+import java.util.Map;
 
 /**
  * Finds any sensitive endpoints and processes requests that match their

File: websocket/src/main/java/io/micronaut/websocket/RxWebSocketSession.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.websocket;
 
+import io.micronaut.http.MediaType;
 import io.reactivex.Flowable;
 
 import java.util.Set;
@@ -40,9 +41,10 @@ public interface RxWebSocketSession extends WebSocketSession {
      * Broadcast a message and return a {@link Flowable}.
      *
      * @param message The message
+     * @param mediaType The media type
      * @param <T> The message generic type
      * @return The {@link Flowable}
      */
     @Override
-    <T> Flowable<T> send(T message);
+    <T> Flowable<T> send(T message, MediaType mediaType);
 }

File: inject/src/main/java/io/micronaut/context/exceptions/NoSuchBeanException.java
Patch:
@@ -30,7 +30,7 @@ public class NoSuchBeanException extends BeanContextException {
      * @param beanType The bean type
      */
     public NoSuchBeanException(Class beanType) {
-        super("No bean of type [" + beanType.getName() + "] exists. Ensure the class is is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
+        super("No bean of type [" + beanType.getName() + "] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
     }
 
     /**
@@ -39,7 +39,7 @@ public NoSuchBeanException(Class beanType) {
      * @param <T>       The type
      */
     public <T> NoSuchBeanException(Class<T> beanType, Qualifier<T> qualifier) {
-        super("No bean of type [" + beanType.getName() + "] exists" + (qualifier != null ? " for the given qualifier: " + qualifier : "") + ". Ensure the class is is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
+        super("No bean of type [" + beanType.getName() + "] exists" + (qualifier != null ? " for the given qualifier: " + qualifier : "") + ". Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
     }
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -77,6 +77,7 @@
 import io.netty.handler.codec.DecoderResult;
 import io.netty.handler.codec.TooLongFrameException;
 import io.netty.handler.codec.http.*;
+import io.netty.handler.codec.http.HttpHeaderValues;
 import io.netty.handler.codec.http.multipart.FileUpload;
 import io.netty.handler.codec.http.multipart.HttpData;
 import io.netty.handler.timeout.IdleState;

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/HibernateTransactionManagerFactory.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Factory
 @Requires(classes = HibernateTransactionManager.class)
-@Replaces(DataSourceTransactionManagerFactory.class)
+@Replaces(factory = DataSourceTransactionManagerFactory.class)
 public class HibernateTransactionManagerFactory {
 
     /**

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.core.convert.format.MapFormat;
+import io.micronaut.core.naming.conventions.StringConvention;
 import io.micronaut.core.util.ArrayUtils;
 import org.hibernate.boot.registry.BootstrapServiceRegistry;
 import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;
@@ -100,7 +101,7 @@ public String[] getPackagesToScan() {
      * @param jpaProperties The JPA properties
      */
     public final void setProperties(
-        @MapFormat(transformation = MapFormat.MapTransformation.FLAT)
+        @MapFormat(transformation = MapFormat.MapTransformation.FLAT, keyFormat = StringConvention.UNDER_SCORE_SEPARATED_LOWER_CASE)
             Map<String, Object> jpaProperties) {
         this.jpaProperties = jpaProperties;
     }

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/aggregator/MicrometerMeterRegistryConfigurer.java
Patch:
@@ -84,9 +84,9 @@ private void addFilters(@NotNull MeterRegistry meterRegistry) {
     /**
      * Add binders to the meter registry.  There are default binders available.
      * <p>
-     * {@link io.micronaut.configuration.metrics.binder.jvm.JvmMeterRegistryBinder}
-     * {@link io.micronaut.configuration.metrics.binder.logging.LogbackMeterRegistryBinder}
-     * {@link io.micronaut.configuration.metrics.binder.system.SystemMeterRegistryBinder}
+     * {@link io.micronaut.configuration.metrics.binder.jvm.JvmMeterRegistryBinderFactory}
+     * {@link io.micronaut.configuration.metrics.binder.logging.LogbackMeterRegistryBinderFactory}
+     * {@link io.micronaut.configuration.metrics.binder.system.SystemMeterRegistryBinderFactoryFactory}
      *
      * @param meterRegistry the meter registry
      */

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/binder/jvm/JvmMeterRegistryBinderFactory.java
Patch:
@@ -39,7 +39,7 @@
 @Factory
 @RequiresMetrics
 @Requires(property = MICRONAUT_METRICS_BINDERS + ".jvm.enabled", value = "true", defaultValue = "true")
-public class JvmMeterRegistryBinder {
+public class JvmMeterRegistryBinderFactory {
 
     /**
      * JVM GC metrics bean.

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/binder/logging/LogbackMeterRegistryBinderFactory.java
Patch:
@@ -38,7 +38,7 @@
 @Requires(classes = LoggerFactory.class)
 @RequiresMetrics
 @Requires(property = MICRONAUT_METRICS_BINDERS + ".logback.enabled", value = "true", defaultValue = "true")
-public class LogbackMeterRegistryBinder {
+public class LogbackMeterRegistryBinderFactory {
 
     /**
      * Logback metrics bean.

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/binder/system/SystemMeterRegistryBinderFactoryFactory.java
Patch:
@@ -37,7 +37,7 @@
  */
 @Factory
 @RequiresMetrics
-public class SystemMeterRegistryBinder {
+public class SystemMeterRegistryBinderFactoryFactory {
 
     /**
      * Uptime metrics bean.

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -43,6 +43,7 @@
      */
     StringConvention keyFormat() default StringConvention.RAW;
 
+
     /**
      * Specifies the type of the map that should be injected.
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -60,7 +60,7 @@
  * @since 1.0
  */
 @Internal
-class ModelUtils {
+public class ModelUtils {
 
     private final Elements elementUtils;
     private final Types typeUtils;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -57,7 +57,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             return false;
         }
 
-        JavaVisitorContext visitorContext = new JavaVisitorContext(processingEnv.getMessager(), elementUtils, annotationUtils, typeUtils);
+        JavaVisitorContext visitorContext = new JavaVisitorContext(processingEnv.getMessager(), elementUtils, annotationUtils, typeUtils, modelUtils);
         SoftServiceLoader<TypeElementVisitor> serviceLoader = SoftServiceLoader.load(TypeElementVisitor.class, getClass().getClassLoader());
         Map<String, LoadedVisitor> loadedVisitors = new HashMap<>();
         for (ServiceDefinition<TypeElementVisitor> definition : serviceLoader) {

File: inject-java/src/test/java/io/micronaut/docs/replaces/MockBookService.java
Patch:
@@ -31,7 +31,6 @@
  */
 // tag::class[]
 @Replaces(JdbcBookService.class) // <1>
-@Requires(env = Environment.TEST) // <2>
 @Singleton
 public class MockBookService implements BookService {
 

File: inject-java/src/test/java/io/micronaut/docs/replaces/ReplacesTest.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.docs.replaces;
 
 import io.micronaut.context.ApplicationContext;
+import io.micronaut.docs.requires.Book;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -33,6 +34,8 @@ public void testReplaces() {
         Assert.assertTrue(
                 applicationContext.getBean(BookService.class) instanceof MockBookService
         );
+        Assert.assertEquals("An OK Novel", applicationContext.getBean(Book.class).getTitle());
+        Assert.assertEquals("Learning 305", applicationContext.getBean(TextBook.class).getTitle());
 
         applicationContext.stop();
     }

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -143,6 +143,8 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String HEROKU = "heroku";
 
     /**
+     * Should respect the order as provided
+     *
      * @return The active environment names
      */
     Set<String> getActiveNames();

File: views/src/main/java/io/micronaut/views/ViewsRenderer.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.core.io.Writable;
 
+import javax.annotation.Nullable;
 import java.io.File;
 
 /**
@@ -42,7 +43,7 @@ public interface ViewsRenderer {
      * @param data     response body to render it with a view
      * @return A writable where the view will be written to.
      */
-    Writable render(String viewName, Object data);
+    Writable render(String viewName, @Nullable Object data);
 
     /**
      * @param viewName view name to be render

File: views/src/main/java/io/micronaut/views/handlebars/HandlebarsViewsRenderer.java
Patch:
@@ -27,6 +27,8 @@
 import io.micronaut.views.ViewsConfiguration;
 import io.micronaut.views.ViewsRenderer;
 import io.micronaut.views.exceptions.ViewRenderingException;
+
+import javax.annotation.Nullable;
 import javax.inject.Singleton;
 
 /**
@@ -65,7 +67,7 @@ public HandlebarsViewsRenderer(ViewsConfiguration viewsConfiguration,
     }
 
     @Override
-    public Writable render(String viewName, Object data) {
+    public Writable render(String viewName, @Nullable Object data) {
         return (writer) -> {
             String location = viewLocation(viewName);
             try {

File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -96,7 +96,7 @@ private Object resolveValue(ArgumentConversionContext<T> context, ConvertibleVal
         );
     }
 
-    private BindingResult<T> doConvert(Object value, ArgumentConversionContext<T> context) {
+    protected BindingResult<T> doConvert(Object value, ArgumentConversionContext<T> context) {
         Optional<T> result = conversionService.convert(value, context);
         if (result.isPresent() && context.getArgument().getType() == Optional.class) {
             return () -> (Optional<T>) result.get();

File: inject/src/main/java/io/micronaut/inject/visitor/ClassElement.java
Patch:
@@ -45,6 +45,7 @@ default boolean isAssignable(Class<?> type) {
     }
 
     /**
+     * @param visitorContext The visitor context.
      * @return The elements contained in this class element
      */
     List<Element> getElements(VisitorContext visitorContext);

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/ParameterAnnotationBinder.java
Patch:
@@ -72,8 +72,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
         Optional route = source.getAttribute(HttpAttributes.ROUTE_MATCH);
         if (route.isPresent()) {
             UriRouteMatch routeMatch = (UriRouteMatch) route.get();
-            Character modifierChar = routeMatch.getVariableModifiers().get(parameterName);
-            bindAll = (modifierChar != null && modifierChar == '*');
+            bindAll = routeMatch.isExploded(parameterName);
         }
 
         BindingResult<T> result;

File: inject/src/main/java/io/micronaut/inject/visitor/ClassElement.java
Patch:
@@ -45,6 +45,7 @@ default boolean isAssignable(Class<?> type) {
     }
 
     /**
+     * @param visitorContext The visitor context.
      * @return The elements contained in this class element
      */
     List<Element> getElements(VisitorContext visitorContext);

File: router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java
Patch:
@@ -138,8 +138,8 @@ public Map<String, Object> getVariables() {
     }
 
     @Override
-    public Map<String, Character> getVariableModifiers() {
-        return matchInfo.getVariableModifiers();
+    public boolean isExploded(String variable) {
+        return matchInfo.isExploded(variable);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/env/DefaultPropertyPlaceholderResolver.java
Patch:
@@ -43,7 +43,7 @@ public class DefaultPropertyPlaceholderResolver implements PropertyPlaceholderRe
     public static final String SUFFIX = "}";
 
     private static final Pattern ESCAPE_SEQUENCE = Pattern.compile("(.+)?:`([^`]+?)`");
-    private static final Pattern ENVIRONMENT_VAR_SEQUENCE = Pattern.compile("^[\\p{Lu}_]+");
+    private static final Pattern ENVIRONMENT_VAR_SEQUENCE = Pattern.compile("^[\\p{Lu}_{0-9}]+");
     private static final char COLON = ':';
 
     private final PropertyResolver environment;

File: aop/src/main/java/io/micronaut/aop/chain/AdapterIntroduction.java
Patch:
@@ -39,7 +39,7 @@
 @Internal
 final class AdapterIntroduction implements MethodInterceptor<Object, Object> {
 
-    private final ExecutionHandle<Object> executionHandle;
+    private final ExecutionHandle<?, ?> executionHandle;
 
     /**
      * Default constructor.
@@ -48,7 +48,7 @@ final class AdapterIntroduction implements MethodInterceptor<Object, Object> {
      * @param method The target method
      */
     AdapterIntroduction(BeanContext beanContext, ExecutableMethod<?, ?> method) {
-        Class beanType = method.getValue(Adapter.class, ADAPTED_BEAN, Class.class).orElse(null);
+        Class<?> beanType = method.getValue(Adapter.class, ADAPTED_BEAN, Class.class).orElse(null);
         String beanMethod  = method.getValue(Adapter.class, ADAPTED_METHOD, String.class).orElse(null);
         String beanQualifier  = method.getValue(Adapter.class, ADAPTED_QUALIFIER, String.class).orElse(null);
 

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -16,14 +16,17 @@
 
 package io.micronaut.http.client;
 
+import io.micronaut.context.BeanContext;
 import io.micronaut.core.convert.format.ReadableBytes;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.http.ssl.ClientSslConfiguration;
 import io.micronaut.http.ssl.SslConfiguration;
 import io.micronaut.runtime.ApplicationConfiguration;
+import io.micronaut.websocket.context.WebSocketBeanRegistry;
 import io.netty.channel.ChannelOption;
 
 import javax.annotation.Nullable;
+import javax.inject.Inject;
 import java.net.Proxy;
 import java.net.SocketAddress;
 import java.nio.charset.Charset;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyRequestArgumentSatisfier.java
Patch:
@@ -4,7 +4,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.binding.RequestArgumentSatisfier;
-import io.micronaut.http.server.binding.RequestBinderRegistry;
+import io.micronaut.http.bind.RequestBinderRegistry;
 
 import javax.inject.Singleton;
 import java.util.Optional;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -25,8 +25,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.DefaultBodyAnnotationBinder;
-import io.micronaut.http.server.binding.binders.NonBlockingBodyArgumentBinder;
+import io.micronaut.http.bind.binders.DefaultBodyAnnotationBinder;
+import io.micronaut.http.bind.binders.NonBlockingBodyArgumentBinder;
 import io.micronaut.http.server.netty.DefaultHttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentProcessor;
 import io.micronaut.http.server.netty.HttpContentSubscriberFactory;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/ObservableBodyBinder.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.DefaultBodyAnnotationBinder;
-import io.micronaut.http.server.binding.binders.NonBlockingBodyArgumentBinder;
+import io.micronaut.http.bind.binders.DefaultBodyAnnotationBinder;
+import io.micronaut.http.bind.binders.NonBlockingBodyArgumentBinder;
 import io.reactivex.Observable;
 import org.reactivestreams.Publisher;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java
Patch:
@@ -27,8 +27,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.DefaultBodyAnnotationBinder;
-import io.micronaut.http.server.binding.binders.NonBlockingBodyArgumentBinder;
+import io.micronaut.http.bind.binders.DefaultBodyAnnotationBinder;
+import io.micronaut.http.bind.binders.NonBlockingBodyArgumentBinder;
 import io.micronaut.http.server.netty.*;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 import io.micronaut.web.router.qualifier.ConsumesMediaTypeQualifier;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/SingleBodyBinder.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.DefaultBodyAnnotationBinder;
-import io.micronaut.http.server.binding.binders.NonBlockingBodyArgumentBinder;
+import io.micronaut.http.bind.binders.DefaultBodyAnnotationBinder;
+import io.micronaut.http.bind.binders.NonBlockingBodyArgumentBinder;
 import io.reactivex.Single;
 import org.reactivestreams.Publisher;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/decoders/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Netty converters for various data types.
+ * Netty decoders for Micronaut.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/encoders/package-info.java
Patch:
@@ -0,0 +1 @@
+package io.micronaut.http.server.netty.encoders;
\ No newline at end of file

File: http/src/main/java/io/micronaut/http/bind/RequestBinderRegistry.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding;
+package io.micronaut.http.bind;
 
 import io.micronaut.core.bind.ArgumentBinderRegistry;
 import io.micronaut.http.HttpRequest;

File: http/src/main/java/io/micronaut/http/bind/binders/AnnotatedRequestArgumentBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.bind.ArgumentBinder;
 import io.micronaut.core.bind.annotation.AnnotatedArgumentBinder;

File: http/src/main/java/io/micronaut/http/bind/binders/BodyArgumentBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.http.annotation.Body;
 

File: http/src/main/java/io/micronaut/http/bind/binders/CookieAnnotationBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;

File: http/src/main/java/io/micronaut/http/bind/binders/DefaultBodyAnnotationBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionError;

File: http/src/main/java/io/micronaut/http/bind/binders/HeaderAnnotationBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;

File: http/src/main/java/io/micronaut/http/bind/binders/NonBlockingBodyArgumentBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 /**
  * A marker interface for argument binders that are non-blocking.

File: http/src/main/java/io/micronaut/http/bind/binders/ParameterAnnotationBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.annotation.AnnotationMetadata;
 import io.micronaut.core.bind.annotation.AbstractAnnotatedArgumentBinder;

File: http/src/main/java/io/micronaut/http/bind/binders/RequestArgumentBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.bind.ArgumentBinder;
 import io.micronaut.http.HttpRequest;

File: http/src/main/java/io/micronaut/http/bind/binders/TypedRequestArgumentBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;
 
 import io.micronaut.core.bind.TypeArgumentBinder;
 import io.micronaut.http.HttpRequest;

File: http/src/main/java/io/micronaut/http/bind/binders/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.server.binding.binders;
+package io.micronaut.http.bind.binders;

File: http/src/main/java/io/micronaut/http/util/HttpUtil.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.http.util;
 
 import io.micronaut.http.HttpHeaders;
+import io.micronaut.http.HttpMessage;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MediaType;
 
@@ -54,7 +55,7 @@ public static boolean isFormData(HttpRequest<?> request) {
      * @param request The request
      * @return An {@link Optional} of {@link Charset}
      */
-    public static Optional<Charset> resolveCharset(HttpRequest<?> request) {
+    public static Optional<Charset> resolveCharset(HttpMessage<?> request) {
         try {
             Optional<Charset> contentTypeCharset = request
                 .getContentType()

File: inject/src/main/java/io/micronaut/context/exceptions/NoSuchBeanException.java
Patch:
@@ -30,7 +30,7 @@ public class NoSuchBeanException extends BeanContextException {
      * @param beanType The bean type
      */
     public NoSuchBeanException(Class beanType) {
-        super("No bean of type [" + beanType.getName() + "] exists. If you are using Java or Kotlin make sure you have enabled annotation processing.");
+        super("No bean of type [" + beanType.getName() + "] exists. Ensure the class is is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
     }
 
     /**
@@ -39,7 +39,7 @@ public NoSuchBeanException(Class beanType) {
      * @param <T>       The type
      */
     public <T> NoSuchBeanException(Class<T> beanType, Qualifier<T> qualifier) {
-        super("No bean of type [" + beanType.getName() + "] exists" + (qualifier != null ? " for the given qualifier: " + qualifier : "") + ". If you are using Java or Kotlin make sure you have enabled annotation processing.");
+        super("No bean of type [" + beanType.getName() + "] exists" + (qualifier != null ? " for the given qualifier: " + qualifier : "") + ". Ensure the class is is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.");
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/MethodExecutionHandle.java
Patch:
@@ -21,11 +21,12 @@
 /**
  * Represents an execution handle that invokes a method.
  *
+ * @param <T> The target type
  * @param <R> The result type
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface MethodExecutionHandle<R> extends ExecutionHandle<R>, MethodReference {
+public interface MethodExecutionHandle<T, R> extends ExecutionHandle<T, R>, MethodReference {
     /**
      * The underlying {@link ExecutableMethod} reference.
      *

File: router/src/main/java/io/micronaut/web/router/ErrorRouteMatch.java
Patch:
@@ -30,12 +30,13 @@
 /**
  * Represents a match for an error.
  *
- * @param <T> The type
+ * @param <T> The target type
+ * @param <R> The return type
  * @author Graeme Rocher
  * @since 1.0
  */
 @Internal
-class ErrorRouteMatch<T> extends StatusRouteMatch<T> {
+class ErrorRouteMatch<T, R> extends StatusRouteMatch<T, R> {
 
     private final Throwable error;
     private final Map<String, Object> variables;

File: router/src/main/java/io/micronaut/web/router/MethodBasedRouteMatch.java
Patch:
@@ -25,9 +25,10 @@
 /**
  * Match a route based on a method.
  *
+ * @param <T> The target
  * @param <R> The route
  */
-public interface MethodBasedRouteMatch<R> extends RouteMatch<R>, MethodExecutionHandle<R> {
+public interface MethodBasedRouteMatch<T, R> extends RouteMatch<R>, MethodExecutionHandle<T, R> {
 
     /**
      * <p>Returns the required arguments for this RouteMatch<./p>

File: router/src/main/java/io/micronaut/web/router/exceptions/DuplicateRouteException.java
Patch:
@@ -35,7 +35,7 @@ public class DuplicateRouteException extends RoutingException {
      * @param uri The URI
      * @param uriRoutes The routes
      */
-    public DuplicateRouteException(String uri, List<UriRouteMatch<Object>> uriRoutes) {
+    public DuplicateRouteException(String uri, List<UriRouteMatch<Object, Object>> uriRoutes) {
         super(buildMessage(uri, uriRoutes));
         this.uri = uri;
     }
@@ -47,7 +47,7 @@ public String getUri() {
         return uri;
     }
 
-    private static String buildMessage(String uri, List<UriRouteMatch<Object>> uriRoutes) {
+    private static String buildMessage(String uri, List<UriRouteMatch<Object, Object>> uriRoutes) {
         StringBuilder message = new StringBuilder("More than 1 route matched the incoming request. The following routes matched ");
         message.append(uri).append(": ");
         message.append(uriRoutes

File: security/src/main/java/io/micronaut/security/authentication/AuthenticationArgumentBinder.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
 import io.micronaut.security.filters.SecurityFilter;
 
 import javax.inject.Singleton;

File: security/src/main/java/io/micronaut/security/authentication/PrincipalArgumentBinder.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
 import io.micronaut.security.filters.SecurityFilter;
 
 import javax.inject.Singleton;

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionArgumentBinder.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
 import io.micronaut.session.Session;
 import io.micronaut.session.http.HttpSessionFilter;
 

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionValueArgumentBinder.java
Patch:
@@ -24,8 +24,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.AnnotatedRequestArgumentBinder;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.AnnotatedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
 import io.micronaut.session.Session;
 import io.micronaut.session.annotation.SessionValue;
 import io.micronaut.session.http.HttpSessionFilter;

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;
 import io.micronaut.session.Session;
 import io.micronaut.session.SessionStore;
 import io.micronaut.session.http.HttpSessionFilter;

File: session/src/main/java/io/micronaut/session/binder/SessionValueArgumentBinder.java
Patch:
@@ -24,7 +24,7 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
-import io.micronaut.http.server.binding.binders.AnnotatedRequestArgumentBinder;
+import io.micronaut.http.bind.binders.AnnotatedRequestArgumentBinder;
 import io.micronaut.session.Session;
 import io.micronaut.session.annotation.SessionValue;
 import io.micronaut.session.http.HttpSessionFilter;

File: websocket/src/main/java/io/micronaut/websocket/RxWebSocketSession.java
Patch:
@@ -44,5 +44,5 @@ public interface RxWebSocketSession extends WebSocketSession {
      * @return The {@link Flowable}
      */
     @Override
-    <T> Flowable<T> broadcast(T message);
+    <T> Flowable<T> send(T message);
 }

File: websocket/src/main/java/io/micronaut/websocket/annotation/ClientWebSocket.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.websocket.annotation;
 
 import io.micronaut.context.annotation.AliasFor;
+import io.micronaut.context.annotation.Bean;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -34,7 +35,8 @@
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
-public @interface ClientEndpoint {
+@Bean
+public @interface ClientWebSocket {
     /**
      * The default websocket URI.
      */

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -123,8 +123,8 @@ public DefaultEnvironment(ClassLoader classLoader, ConversionService conversionS
     @SuppressWarnings("MagicNumber")
     public DefaultEnvironment(ClassPathResourceLoader resourceLoader, ConversionService conversionService, String... names) {
         super(conversionService);
-        Set<String> specifiedNames = new HashSet<>(3);
-        specifiedNames.addAll(CollectionUtils.setOf(names));
+        Set<String> specifiedNames = new LinkedHashSet<>(3);
+        specifiedNames.addAll(Arrays.asList(names));
 
         if (!specifiedNames.contains(Environment.FUNCTION) && shouldDeduceEnvironments()) {
             EnvironmentsAndPackage environmentsAndPackage = getEnvironmentsAndPackage();

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -143,6 +143,8 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String HEROKU = "heroku";
 
     /**
+     * Should respect the order as provided
+     *
      * @return The active environment names
      */
     Set<String> getActiveNames();

File: inject-java/src/main/java/io/micronaut/annotation/processing/ModelUtils.java
Patch:
@@ -60,7 +60,7 @@
  * @since 1.0
  */
 @Internal
-class ModelUtils {
+public class ModelUtils {
 
     private final Elements elementUtils;
     private final Types typeUtils;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -57,7 +57,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             return false;
         }
 
-        JavaVisitorContext visitorContext = new JavaVisitorContext(processingEnv.getMessager(), elementUtils, annotationUtils, typeUtils);
+        JavaVisitorContext visitorContext = new JavaVisitorContext(processingEnv.getMessager(), elementUtils, annotationUtils, typeUtils, modelUtils);
         SoftServiceLoader<TypeElementVisitor> serviceLoader = SoftServiceLoader.load(TypeElementVisitor.class, getClass().getClassLoader());
         Map<String, LoadedVisitor> loadedVisitors = new HashMap<>();
         for (ServiceDefinition<TypeElementVisitor> definition : serviceLoader) {

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/bearer/BearerTokenConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.bearer;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.http.HttpHeaderAuthorization;
 import io.micronaut.security.token.jwt.config.JwtConfigurationProperties;
 
 /**
@@ -32,7 +33,7 @@ public class BearerTokenConfigurationProperties implements BearerTokenConfigurat
 
     private boolean enabled = true;
     private String headerName = "Authorization";
-    private String prefix = "Bearer";
+    private String prefix = HttpHeaderAuthorization.AUTHORIZATION_PREFIX_BEARER;
 
     @Override
     public boolean isEnabled() {
@@ -69,7 +70,7 @@ public void setHeaderName(String headerName) {
     }
 
     /**
-     * Sets the prefix to use for the auth token. Defaults to "Basic".
+     * Sets the prefix to use for the auth token. Default value {@value io.micronaut.http.HttpHeaderAuthorization#AUTHORIZATION_PREFIX_BEARER}
      * @param prefix The prefix to use
      */
     public void setPrefix(String prefix) {

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/render/BearerAccessRefreshToken.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.jwt.render;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.micronaut.http.HttpHeaderAuthorization;
 
 import java.util.Collection;
 import java.util.List;
@@ -35,7 +36,7 @@ public class BearerAccessRefreshToken extends AccessRefreshToken {
     private Integer expiresIn;
 
     @JsonProperty("token_type")
-    private String tokenType = "Bearer";
+    private String tokenType = HttpHeaderAuthorization.AUTHORIZATION_PREFIX_BEARER;
 
     /**
      * Necessary for JSON serialization.

File: security/src/main/java/io/micronaut/security/token/basicauth/BasicAuthTokenReaderConfigurationProperties.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.http.HttpHeaderAuthorization;
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.security.token.config.TokenConfigurationProperties;
 
@@ -35,7 +36,7 @@ public class BasicAuthTokenReaderConfigurationProperties implements BasicAuthTok
 
     private boolean enabled = true;
     private String headerName = HttpHeaders.AUTHORIZATION;
-    private String prefix = "Basic";
+    private String prefix = HttpHeaderAuthorization.AUTHORIZATION_PREFIX_BASIC;
 
     @Override
     public boolean isEnabled() {
@@ -71,7 +72,7 @@ public void setHeaderName(String headerName) {
     }
 
     /**
-     * Sets the prefix to use for the auth token. Defaults to "Basic".
+     * Sets the prefix to use for the auth token. Default value {@value io.micronaut.http.HttpHeaderAuthorization#AUTHORIZATION_PREFIX_BASIC}.
      * @param prefix The prefix to use
      */
     public void setPrefix(String prefix) {

File: security/src/main/java/io/micronaut/security/token/writer/HttpHeaderTokenWriterConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.token.writer;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.http.HttpHeaderAuthorization;
 import io.micronaut.http.HttpHeaders;
 import io.micronaut.security.token.config.TokenConfigurationProperties;
 
@@ -30,7 +31,7 @@
 public class HttpHeaderTokenWriterConfigurationProperties implements HttpHeaderTokenWriterConfiguration {
     public static final String PREFIX = TokenConfigurationProperties.PREFIX + ".writer.header";
 
-    private String prefix = HttpHeaders.AUTHORIZATION_PREFIX_BEARER;
+    private String prefix = HttpHeaderAuthorization.AUTHORIZATION_PREFIX_BEARER;
     private String headerName = HttpHeaders.AUTHORIZATION;
     private boolean enabled = true;
 

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -308,8 +308,8 @@ public Class<T> getBeanType() {
     }
 
     @Override
-    public Class<?> getDeclaringType() {
-        return declaringType;
+    public Optional<Class<?>> getDeclaringType() {
+        return Optional.ofNullable(declaringType);
     }
 
     @Override

File: inject/src/main/java/io/micronaut/context/BeanDefinitionDelegate.java
Patch:
@@ -103,7 +103,7 @@ public Class<T> getBeanType() {
     }
 
     @Override
-    public Class<?> getDeclaringType() {
+    public Optional<Class<?>> getDeclaringType() {
         return definition.getDeclaringType();
     }
 

File: inject/src/main/java/io/micronaut/inject/BeanDefinition.java
Patch:
@@ -72,7 +72,7 @@ public interface BeanDefinition<T> extends AnnotationMetadataDelegate, Named, Be
     /**
      * @return The type that declares this definition, null if not applicable.
      */
-    Class<?> getDeclaringType();
+    Optional<Class<?>> getDeclaringType();
 
     /**
      * The single concrete constructor that is an injection point for creating the bean.

File: views/src/main/java/io/micronaut/views/ViewsRenderer.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.core.io.Writable;
 
+import javax.annotation.Nullable;
 import java.io.File;
 
 /**
@@ -42,7 +43,7 @@ public interface ViewsRenderer {
      * @param data     response body to render it with a view
      * @return A writable where the view will be written to.
      */
-    Writable render(String viewName, Object data);
+    Writable render(String viewName, @Nullable Object data);
 
     /**
      * @param viewName view name to be render

File: views/src/main/java/io/micronaut/views/handlebars/HandlebarsViewsRenderer.java
Patch:
@@ -27,6 +27,8 @@
 import io.micronaut.views.ViewsConfiguration;
 import io.micronaut.views.ViewsRenderer;
 import io.micronaut.views.exceptions.ViewRenderingException;
+
+import javax.annotation.Nullable;
 import javax.inject.Singleton;
 
 /**
@@ -65,7 +67,7 @@ public HandlebarsViewsRenderer(ViewsConfiguration viewsConfiguration,
     }
 
     @Override
-    public Writable render(String viewName, Object data) {
+    public Writable render(String viewName, @Nullable Object data) {
         return (writer) -> {
             String location = viewLocation(viewName);
             try {

File: graal/src/main/java/io/micronaut/graal/reflect/GraalClassLoadingReporter.java
Patch:
@@ -67,7 +67,7 @@ public void close() {
         if (!ClassUtils.isPresent(NETTY_TYPE, GraalClassLoadingReporter.class.getClassLoader())) {
             classes.remove(NETTY_TYPE);
         }
-        
+
         List<Map> json = classes.stream().map(s -> {
             if (s.equals(NETTY_TYPE)) {
                 return CollectionUtils.mapOf(

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -182,6 +182,7 @@ public boolean isActive(BeanConfiguration configuration) {
     public DefaultEnvironment addPropertySource(PropertySource propertySource) {
         propertySources.put(propertySource.getName(), propertySource);
         if (isRunning() && !reading.get()) {
+            resetCaches();
             processPropertySource(propertySource, PropertySource.PropertyConvention.JAVA_PROPERTIES);
         }
         return this;

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.ApplicationContext;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.core.convert.format.MapFormat;
+import io.micronaut.core.naming.conventions.StringConvention;
 import io.micronaut.core.util.ArrayUtils;
 import org.hibernate.boot.registry.BootstrapServiceRegistry;
 import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;
@@ -100,7 +101,7 @@ public String[] getPackagesToScan() {
      * @param jpaProperties The JPA properties
      */
     public final void setProperties(
-        @MapFormat(transformation = MapFormat.MapTransformation.FLAT)
+        @MapFormat(transformation = MapFormat.MapTransformation.FLAT, keyFormat = StringConvention.UNDER_SCORE_SEPARATED_LOWER_CASE)
             Map<String, Object> jpaProperties) {
         this.jpaProperties = jpaProperties;
     }

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -43,6 +43,7 @@
      */
     StringConvention keyFormat() default StringConvention.RAW;
 
+
     /**
      * Specifies the type of the map that should be injected.
      */

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1211,7 +1211,7 @@ public Object visitVariable(VariableElement variable, Object o) {
 
             boolean isInjected = fieldAnnotationMetadata.hasStereotype(Inject.class);
             boolean isValue = !isInjected &&
-                    (fieldAnnotationMetadata.hasStereotype(Value.class)); // || isConfigurationPropertiesType);
+                    (fieldAnnotationMetadata.hasStereotype(Value.class) || fieldAnnotationMetadata.hasStereotype(Property.class));
 
             if (isInjected || isValue) {
                 Name fieldName = variable.getSimpleName();

File: http/src/main/java/io/micronaut/http/MutableHttpHeaders.java
Patch:
@@ -163,7 +163,7 @@ default MutableHttpHeaders ifModifiedSince(long timeInMillis) {
      * @return This HTTP headers
      */
     default MutableHttpHeaders auth(String username, String password) {
-        String token = "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes(StandardCharsets.ISO_8859_1));
+        String token = HttpHeaders.AUTHORIZATION_PREFIX_BASIC + Base64.getEncoder().encodeToString((username + ":" + password).getBytes(StandardCharsets.ISO_8859_1));
         add(AUTHORIZATION, token);
         return this;
     }
@@ -175,7 +175,7 @@ default MutableHttpHeaders auth(String username, String password) {
      * @return This HTTP headers
      */
     default MutableHttpHeaders auth(String userInfo) {
-        String token = "Basic " + Base64.getEncoder().encodeToString((userInfo).getBytes(StandardCharsets.ISO_8859_1));
+        String token = HttpHeaders.AUTHORIZATION_PREFIX_BASIC + Base64.getEncoder().encodeToString((userInfo).getBytes(StandardCharsets.ISO_8859_1));
         add(AUTHORIZATION, token);
         return this;
     }

File: http/src/main/java/io/micronaut/http/HttpResponse.java
Patch:
@@ -201,7 +201,7 @@ static <T> MutableHttpResponse<T> accepted() {
     }
 
     /**
-     * Return an {@link HttpStatus#ACCEPTED} response with an empty body and a {@link HttpHeaders#LOCATION} header
+     * Return an {@link HttpStatus#ACCEPTED} response with an empty body and a {@link HttpHeaders#LOCATION} header.
      *
      * @param location the location in which the new resource will be available
      * @param <T>      The response type

File: http/src/main/java/io/micronaut/http/annotation/CookieValue.java
Patch:
@@ -47,6 +47,7 @@
 
     /**
      * @see Bindable#defaultValue()
+     * @return The default value
      */
     @AliasFor(annotation = Bindable.class, member = "defaultValue")
     String defaultValue() default "";

File: http/src/main/java/io/micronaut/http/annotation/Header.java
Patch:
@@ -56,6 +56,7 @@
 
     /**
      * @see Bindable#defaultValue()
+     * @return The default value
      */
     @AliasFor(annotation = Bindable.class, member = "defaultValue")
     String defaultValue() default "";

File: http/src/main/java/io/micronaut/http/annotation/QueryValue.java
Patch:
@@ -48,6 +48,7 @@
 
     /**
      * @see Bindable#defaultValue()
+     * @return The default value
      */
     @AliasFor(annotation = Bindable.class, member = "defaultValue")
     String defaultValue() default "";

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -168,7 +168,7 @@ public String expand(Map<String, Object> parameters) {
                 if (result == null) {
                     break;
                 }
-                if(segment instanceof UriTemplateParser.VariablePathSegment) {
+                if (segment instanceof UriTemplateParser.VariablePathSegment) {
                     if (result.contains(String.valueOf(((UriTemplateParser.VariablePathSegment) segment).getOperator()))) {
                         anyPreviousHasOperator = true;
                     }
@@ -350,6 +350,7 @@ default boolean isQuerySegment() {
          *
          * @param parameters         The parameters
          * @param previousHasContent Whether there was previous content
+         * @param anyPreviousHasOperator Whether an operator is present
          * @return The expanded string
          */
         String expand(Map<String, Object> parameters, boolean previousHasContent, boolean anyPreviousHasOperator);
@@ -696,7 +697,6 @@ private class VariablePathSegment implements PathSegment {
             private final String previousDelimiter;
             private final boolean repeatPrefix;
 
-
             public VariablePathSegment(boolean isQuerySegment, String variable, String prefix, String delimiter, boolean encode, char modifierChar, char operator, String modifierStr, String previousDelimiter, boolean repeatPrefix) {
                 this.isQuerySegment = isQuerySegment;
                 this.variable = variable;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1178,7 +1178,7 @@ private Flowable<?> buildResultEmitter(
                     return;
                 }
 
-                if (result == null) {
+                if (result == null || (result instanceof Optional && !((Optional) result).isPresent())) {
                     // empty flowable
                     emitter.onComplete();
                 } else {

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java
Patch:
@@ -183,6 +183,8 @@ protected void initializeContext(List<BeanDefinitionReference> contextScopeBeans
             if (!rce.isRuntimeConfigured()) {
                 initializeTypeConverters(this);
             }
+        } else {
+            initializeTypeConverters(this);
         }
 
         super.initializeContext(contextScopeBeans, processedBeans);

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -293,16 +293,17 @@ protected void addVariableSegment(List<PathSegment> segments,
                 } else if (modifierStr.chars().allMatch(Character::isDigit)) {
                     variableQuantifier = "{1," + modifierStr + "})";
                 } else {
+
                     char lastChar = modifierStr.charAt(modLen - 1);
                     if (lastChar == '*' ||
                         (modLen > 1 && lastChar == '?' && (modifierStr.charAt(modLen - 2) == '*' || modifierStr.charAt(modLen - 2) == '+'))) {
                         operatorQuantifier = "?";
                     }
                     if (operator == '/' || operator == '.') {
-                        variablePattern = "(" + modifierStr + ")";
+                        variablePattern = "(" + ((firstChar == '^') ? modifierStr.substring(1) : modifierStr) + ")";
                     } else {
                         operatorPrefix = "(";
-                        variablePattern = modifierStr + ")";
+                        variablePattern = ((firstChar == '^') ? modifierStr.substring(1) : modifierStr) + ")";
                     }
                     variableQuantifier = "";
                 }

File: security/src/main/java/io/micronaut/security/authentication/Authenticator.java
Patch:
@@ -56,7 +56,9 @@ public Publisher<AuthenticationResponse> authenticate(UsernamePasswordCredential
         if (this.authenticationProviders == null) {
             return Flowable.empty();
         }
-        System.out.println(authenticationProviders.stream().map(AuthenticationProvider::getClass).map(Class::getName).collect(Collectors.joining()));
+        if (LOG.isDebugEnabled()) {
+            LOG.debug(authenticationProviders.stream().map(AuthenticationProvider::getClass).map(Class::getName).collect(Collectors.joining()));
+        }
         Iterator<AuthenticationProvider> providerIterator = authenticationProviders.iterator();
         if (providerIterator.hasNext()) {
             Flowable<AuthenticationProvider> providerFlowable = Flowable.just(providerIterator.next());

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -293,16 +293,17 @@ protected void addVariableSegment(List<PathSegment> segments,
                 } else if (modifierStr.chars().allMatch(Character::isDigit)) {
                     variableQuantifier = "{1," + modifierStr + "})";
                 } else {
+
                     char lastChar = modifierStr.charAt(modLen - 1);
                     if (lastChar == '*' ||
                         (modLen > 1 && lastChar == '?' && (modifierStr.charAt(modLen - 2) == '*' || modifierStr.charAt(modLen - 2) == '+'))) {
                         operatorQuantifier = "?";
                     }
                     if (operator == '/' || operator == '.') {
-                        variablePattern = "(" + modifierStr + ")";
+                        variablePattern = "(" + ((firstChar == '^') ? modifierStr.substring(1) : modifierStr) + ")";
                     } else {
                         operatorPrefix = "(";
-                        variablePattern = modifierStr + ")";
+                        variablePattern = ((firstChar == '^') ? modifierStr.substring(1) : modifierStr) + ")";
                     }
                     variableQuantifier = "";
                 }

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -250,10 +250,11 @@ private String resolveUri(BeanDefinition bean, String value, ExecutableMethod me
         UriTemplate rootUri = UriTemplate.of(uriNamingStrategy.resolveUri(bean));
         if (StringUtils.isNotEmpty(value)) {
             boolean isFirstCharSlash = value.charAt(0) == '/';
+            boolean isFirstCharVar = value.charAt(0) == '{';
             if (value.length() == 1 && isFirstCharSlash) {
                 return rootUri.toString();
             } else {
-                return rootUri.nest(isFirstCharSlash ? value : '/' + value).toString();
+                return rootUri.nest(isFirstCharSlash || isFirstCharVar ? value : '/' + value).toString();
             }
         } else {
             return rootUri.nest(uriNamingStrategy.resolveUri(method.getMethodName())).toString();

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -249,10 +249,11 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
     private String resolveUri(BeanDefinition bean, String value, ExecutableMethod method, UriNamingStrategy uriNamingStrategy) {
         UriTemplate rootUri = UriTemplate.of(uriNamingStrategy.resolveUri(bean));
         if (StringUtils.isNotEmpty(value)) {
-            if (value.length() == 1 && value.charAt(0) == '/') {
+            boolean isFirstCharSlash = value.charAt(0) == '/';
+            if (value.length() == 1 && isFirstCharSlash) {
                 return rootUri.toString();
             } else {
-                return rootUri.nest(value).toString();
+                return rootUri.nest(isFirstCharSlash ? value : '/' + value).toString();
             }
         } else {
             return rootUri.nest(uriNamingStrategy.resolveUri(method.getMethodName())).toString();

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Configurations classes for configuring Kafka {@link kafka.consumer.Consumer} and {@link org.apache.kafka.clients.producer.Producer} instances.
+ * Configurations classes for configuring Kafka {@link org.apache.kafka.clients.consumer.Consumer} and {@link org.apache.kafka.clients.producer.Producer} instances.
  *
  * @author graemerocher
  * @since 1.0

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/aggregator/MicrometerMeterRegistryConfigurer.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Collection;
 
 /**
- * Default implementation of {@link MeterRegistryConfigurer>} that adds the binders and filters
+ * Default implementation of {@link MeterRegistryConfigurer} that adds the binders and filters
  * to the micrometer meter registry.  This is specifically needed for the {@link io.micronaut.configuration.metrics.management.endpoint.MetricsEndpoint}
  *
  * @author Christian Oestreich

File: configurations/picocli/src/main/java/io/micronaut/configuration/picocli/PicocliRunner.java
Patch:
@@ -53,7 +53,7 @@ public class PicocliRunner {
      * @throws Exception if the ApplicationContext could not be closed
      */
     public static <C extends Callable<T>, T> T call(Class<C> cls, String... args) throws Exception {
-        try (ApplicationContext ctx = ApplicationContext.run(Environment.CLI)) {
+        try (ApplicationContext ctx = ApplicationContext.build(cls, Environment.CLI).build()) {
             return call(cls, ctx, args);
         }
     }
@@ -103,7 +103,7 @@ public static <C extends Callable<T>, T> T call(Class<C> cls, ApplicationContext
      * @throws Exception if the ApplicationContext could not be closed
      */
     public static <R extends Runnable> void run(Class<R> cls, String... args) throws Exception {
-        try (ApplicationContext ctx = ApplicationContext.run(Environment.CLI)) {
+        try (ApplicationContext ctx = ApplicationContext.build(cls, Environment.CLI).build()) {
             run(cls, ctx, args);
         }
     }

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.discovery.DiscoveryConfiguration;
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
  * and Consul (https://www.consul.io).
  *
- * @author graemerocher
+ * @author ryan vanderwerf
  * @since 1.0
  */
 @Configuration

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -140,7 +140,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
         for (MutableArgumentValue<?> argumentValue : context.getParameters().values()) {
             if (argumentValue.getValue() == null && !argumentValue.isAnnotationPresent(Nullable.class)) {
                 throw new IllegalArgumentException(
-                    String.format("Null values are not allowed to be passed to client methods (%s). Add @javax.validation.Nullable if that is the desired behavior", context.getTargetMethod().toString())
+                    String.format("Null values are not allowed to be passed to client methods (%s). Add @javax.validation.Nullable if that is the desired behavior", context.getExecutableMethod().toString())
                 );
             }
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -76,6 +76,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.ExecutorService;
@@ -102,7 +103,7 @@ public class NettyHttpServer implements EmbeddedServer {
 
     private final ExecutorService ioExecutor;
     private final ExecutorSelector executorSelector;
-    private final ChannelOutboundHandler[] outboundHandlers;
+    private final List<ChannelOutboundHandler> outboundHandlers;
     private final MediaTypeCodecRegistry mediaTypeCodecRegistry;
     private final NettyCustomizableResponseTypeHandlerRegistry customizableResponseTypeHandlerRegistry;
     private final NettyHttpServerConfiguration serverConfiguration;
@@ -149,7 +150,7 @@ public NettyHttpServer(
         @javax.inject.Named(NettyThreadFactory.NAME) ThreadFactory threadFactory,
         ExecutorSelector executorSelector,
         NettyServerSslBuilder nettyServerSslBuilder,
-        ChannelOutboundHandler... outboundHandlers
+        List<ChannelOutboundHandler> outboundHandlers
     ) {
         Optional<File> location = serverConfiguration.getMultipart().getLocation();
         location.ifPresent(dir -> DiskFileUpload.baseDirectory = dir.getAbsolutePath());

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -66,8 +66,7 @@
  */
 public class DefaultEnvironment extends PropertySourcePropertyResolver implements Environment {
 
-    //private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
-    private static final String EC2_LINUX_HYPERVISOR_FILE = "/tmp/uuid";
+    private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
     private static final String EC2_WINDOWS_HYPERVISOR_CMD = "wmic path win32_computersystemproduct get uuid";
     private static final String PROPERTY_SOURCES_KEY = "micronaut.config.files";
     private static final String FILE_SEPARATOR = ",";

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -25,6 +25,7 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
+import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.web.router.MethodBasedRouteMatch;
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.RouteMatchUtils;
@@ -46,7 +47,7 @@
 @Filter("${" + PATH + ":/}**")
 public class EndpointsFilter extends OncePerRequestHttpServerFilter {
 
-    private final Map<Method, Boolean> endpointMethods;
+    private final Map<ExecutableMethod, Boolean> endpointMethods;
 
     /**
      * Constructor.
@@ -67,7 +68,7 @@ public EndpointsFilter(EndpointSensitivityProcessor endpointSensitivityProcessor
     protected Publisher<MutableHttpResponse<?>> doFilterOnce(HttpRequest<?> request, ServerFilterChain chain) {
         Optional<RouteMatch> routeMatch = RouteMatchUtils.findRouteMatchAtRequest(request);
         if (routeMatch.isPresent() && routeMatch.get() instanceof MethodBasedRouteMatch) {
-            Method method = ((MethodBasedRouteMatch) routeMatch.get()).getTargetMethod();
+            ExecutableMethod method = ((MethodBasedRouteMatch) routeMatch.get()).getExecutableMethod();
             if (endpointMethods.containsKey(method)) {
                 if (endpointMethods.get(method)) {
                     return Publishers.just(HttpResponse.status(HttpStatus.UNAUTHORIZED));

File: router/src/main/java/io/micronaut/web/router/StatusRouteMatch.java
Patch:
@@ -19,7 +19,9 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.type.Argument;
 import io.micronaut.http.HttpStatus;
+import io.micronaut.inject.ExecutableMethod;
 
+import javax.annotation.Nonnull;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
@@ -89,4 +91,5 @@ public Map<String, Object> getVariables() {
             }
         };
     }
+
 }

File: router/src/main/java/io/micronaut/web/router/exceptions/DuplicateRouteException.java
Patch:
@@ -52,7 +52,7 @@ private static String buildMessage(String uri, List<UriRouteMatch<Object>> uriRo
         message.append(uri).append(": ");
         message.append(uriRoutes
             .stream()
-            .map((uriRouteMatch -> uriRouteMatch.getTargetMethod().toString()))
+            .map((Object::toString))
             .collect(Collectors.joining(", ")));
         return message.toString();
     }

File: router/src/main/java/io/micronaut/web/router/resource/StaticResourceResolver.java
Patch:
@@ -45,7 +45,7 @@ public class StaticResourceResolver {
     StaticResourceResolver(StaticResourceConfiguration configuration) {
         this.loaders = configuration.getResourceLoaders();
         this.pathMatcher = PathMatcher.ANT;
-        this.mapping = configuration.mapping;
+        this.mapping = configuration.getMapping();
     }
 
     /**

File: runtime/src/main/java/io/micronaut/retry/intercept/DefaultRetryInterceptor.java
Patch:
@@ -25,6 +25,7 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.type.ReturnType;
+import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.retry.RetryState;
 import io.micronaut.retry.annotation.CircuitBreaker;
 import io.micronaut.retry.annotation.Retryable;
@@ -35,7 +36,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Singleton;
-import java.lang.reflect.Method;
 import java.time.Duration;
 import java.util.Map;
 import java.util.Optional;
@@ -56,7 +56,7 @@ public class DefaultRetryInterceptor implements MethodInterceptor<Object, Object
     private static final int DEFAULT_CIRCUIT_BREAKER_TIMEOUT_IN_MILLIS = 20;
 
     private final ApplicationEventPublisher eventPublisher;
-    private final Map<Method, CircuitBreakerRetry> circuitContexts = new ConcurrentHashMap<>();
+    private final Map<ExecutableMethod, CircuitBreakerRetry> circuitContexts = new ConcurrentHashMap<>();
 
     /**
      * Construct a default retry method interceptor with the event publisher.
@@ -91,7 +91,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
                 .getValue(CircuitBreaker.class, "reset", Duration.class)
                 .map(Duration::toMillis).orElse(Duration.ofSeconds(DEFAULT_CIRCUIT_BREAKER_TIMEOUT_IN_MILLIS).toMillis());
             retryState = circuitContexts.computeIfAbsent(
-                context.getTargetMethod(),
+                context.getExecutableMethod(),
                 method -> new CircuitBreakerRetry(timeout, retryStateBuilder, context, eventPublisher)
             );
         } else {

File: runtime/src/main/java/io/micronaut/runtime/http/codec/MediaTypeCodecRegistryFactory.java
Patch:
@@ -23,6 +23,7 @@
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
 
 import javax.inject.Singleton;
+import java.util.List;
 
 /**
  * A bean for the default {@link MediaTypeCodecRegistry} used by the server.
@@ -40,7 +41,7 @@ public class MediaTypeCodecRegistryFactory {
     @Singleton
     @Primary
     @Bean
-    MediaTypeCodecRegistry mediaTypeCodecRegistry(MediaTypeCodec... codecs) {
+    MediaTypeCodecRegistry mediaTypeCodecRegistry(List<MediaTypeCodec> codecs) {
         return MediaTypeCodecRegistry.of(codecs);
     }
 }

File: security/src/main/java/io/micronaut/security/rules/SensitiveEndpointRule.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.security.rules;
 
 import io.micronaut.http.HttpRequest;
+import io.micronaut.inject.ExecutableMethod;
 import io.micronaut.management.endpoint.EndpointSensitivityProcessor;
 import io.micronaut.web.router.MethodBasedRouteMatch;
 import io.micronaut.web.router.RouteMatch;
@@ -46,7 +47,7 @@ public class SensitiveEndpointRule implements SecurityRule {
      * A map where the key represents the method of an endpoint
      * and the value represents the endpoints sensitivity.
      */
-    protected final Map<Method, Boolean> endpointMethods;
+    protected final Map<ExecutableMethod, Boolean> endpointMethods;
 
     /**
      * Constructs the rule with the existing and default endpoint
@@ -62,7 +63,7 @@ public class SensitiveEndpointRule implements SecurityRule {
     @Override
     public SecurityRuleResult check(HttpRequest request, @Nullable RouteMatch routeMatch, @Nullable Map<String, Object> claims) {
         if (routeMatch instanceof MethodBasedRouteMatch) {
-            Method method = ((MethodBasedRouteMatch) routeMatch).getTargetMethod();
+            ExecutableMethod method = ((MethodBasedRouteMatch) routeMatch).getExecutableMethod();
 
             if (endpointMethods.containsKey(method)) {
                 Boolean sensitive = endpointMethods.get(method);

File: session/src/main/java/io/micronaut/session/SessionConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public OptionalInt getMaxActiveSessions() {
      *
      * @param maxActiveSessions The max active sessions
      */
-    protected void setMaxActiveSessions(Integer maxActiveSessions) {
+    public void setMaxActiveSessions(Integer maxActiveSessions) {
         this.maxActiveSessions = maxActiveSessions;
     }
 
@@ -61,7 +61,7 @@ public Duration getMaxInactiveInterval() {
      *
      * @param maxInactiveInterval The max inactive interval
      */
-    protected void setMaxInactiveInterval(Duration maxInactiveInterval) {
+    public void setMaxInactiveInterval(Duration maxInactiveInterval) {
         if (maxInactiveInterval != null) {
             this.maxInactiveInterval = maxInactiveInterval;
         }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpTracingFactory.java
Patch:
@@ -86,8 +86,8 @@ public Integer statusCode(HttpResponse<?> response) {
             }
 
             @Override
-            public boolean parseServerAddress(HttpRequest<?> httpRequest, Endpoint.Builder builder) {
-                InetAddress address = httpRequest.getServerAddress().getAddress();
+            public boolean parseServerIpAndPort(HttpRequest<?> request, Endpoint.Builder builder) {
+                InetAddress address = request.getServerAddress().getAddress();
                 return builder.parseIp(address);
             }
 

File: tracing/src/main/java/io/micronaut/tracing/jaeger/JaegerConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 package io.micronaut.tracing.jaeger;
 
 import io.jaegertracing.Configuration;
-import io.jaegertracing.metrics.MetricsFactory;
+import io.jaegertracing.spi.MetricsFactory;
 import io.micronaut.context.annotation.ConfigurationBuilder;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.env.Environment;

File: validation/src/test/groovy/io/micronaut/validation/Foo.java
Patch:
@@ -26,6 +26,7 @@
 @Singleton
 @Validated
 public class Foo {
+
     public String testMe(@Digits(integer = 3, fraction = 2) String number) {
         return '$' + number;
     }

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -34,8 +34,6 @@
 
 import io.micronaut.context.annotation.*;
 import io.micronaut.context.env.Environment;
-import io.micronaut.context.event.BeanCreatedEvent;
-import io.micronaut.context.event.BeanCreatedEventListener;
 import io.micronaut.context.event.BeanInitializedEventListener;
 import io.micronaut.context.event.BeanInitializingEvent;
 import io.micronaut.context.exceptions.BeanContextException;
@@ -612,7 +610,7 @@ protected Object postConstruct(BeanResolutionContext resolutionContext, BeanCont
             for (BeanRegistration<BeanInitializedEventListener> registration : beanInitializedEventListeners) {
                 BeanDefinition<BeanInitializedEventListener> definition = registration.getBeanDefinition();
                 List<Argument<?>> typeArguments = definition.getTypeArguments(BeanInitializedEventListener.class);
-                if (CollectionUtils.isEmpty(typeArguments) || getBeanType().isAssignableFrom(typeArguments.get(0).getType())) {
+                if (CollectionUtils.isEmpty(typeArguments) || typeArguments.get(0).getType().isAssignableFrom(getBeanType())) {
                     BeanInitializedEventListener listener = registration.getBean();
                     bean = listener.onInitialized(new BeanInitializingEvent(context, this, bean));
                     if (bean == null) {

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1301,7 +1301,7 @@ protected <T> T doCreateBean(BeanResolutionContext resolutionContext,
                 for (BeanRegistration<BeanCreatedEventListener> registration : beanCreationEventListeners) {
                     BeanDefinition<BeanCreatedEventListener> definition = registration.getBeanDefinition();
                     List<Argument<?>> typeArguments = definition.getTypeArguments(BeanCreatedEventListener.class);
-                    if (CollectionUtils.isEmpty(typeArguments) || beanDefinition.getBeanType().isAssignableFrom(typeArguments.get(0).getType())) {
+                    if (CollectionUtils.isEmpty(typeArguments) || typeArguments.get(0).getType().isAssignableFrom(beanDefinition.getBeanType())) {
                         BeanCreatedEventListener listener = registration.getBean();
                         bean = (T) listener.onCreated(new BeanCreatedEvent(this, beanDefinition, beanKey, bean));
                         if (bean == null) {

File: security-ldap/src/main/java/io/micronaut/security/ldap/LdapAuthenticationProvider.java
Patch:
@@ -103,7 +103,7 @@ public Publisher<AuthenticationResponse> authenticate(AuthenticationRequest auth
 
                 Set<String> groups = Collections.emptySet();
 
-                LdapConfiguration.GroupConfiguration groupSettings = configuration.getGroup();
+                LdapConfiguration.GroupConfiguration groupSettings = configuration.getGroups();
                 if (groupSettings.isEnabled()) {
                     groups = ldapGroupProcessor.process(groupSettings.getAttribute(), result, () -> {
                         return ldapSearchService.search(managerContext, groupSettings.getSearchSettings(new Object[]{result.getDn()}));

File: core/src/main/java/io/micronaut/core/type/Argument.java
Patch:
@@ -90,7 +90,7 @@ public interface Argument<T> extends TypeVariableResolver, Named, AnnotationMeta
      */
     @SuppressWarnings("unused")
     Argument SHORT = Argument.of(short.class);
-    
+
     /**
      * Constant representing zero arguments. Used by generated code, do not remove.
      */

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonComputeInstanceMetadataResolver.java
Patch:
@@ -133,7 +133,7 @@ public Optional<ComputeInstanceMetadata> resolve(Environment environment) {
 
             ec2InstanceMetadata.metadata = objectMapper.convertValue(ec2InstanceMetadata, Map.class);
             if (LOG.isDebugEnabled()) {
-                LOG.debug("EC2 Metadata found:"+ec2InstanceMetadata.metadata.toString());
+                LOG.debug("EC2 Metadata found:" + ec2InstanceMetadata.metadata.toString());
             }
             //TODO make individual calls for building network interfaces.. required recursive http calls for all mac addresses
         } catch (IOException e) {
@@ -190,7 +190,7 @@ protected String readEc2MetadataUrl(URL url, int connectionTimeoutMs, int readTi
         if (url.getProtocol().equalsIgnoreCase("file")) {
             if (url.getPath().indexOf(':') != -1) {
                 //rebuild url path because windows can't have paths with colons
-                url = new URL(url.getProtocol(),url.getHost(),url.getFile().replace(':','_'));
+                url = new URL(url.getProtocol(), url.getHost(), url.getFile().replace(':', '_'));
                 urlConnection = url.openConnection();
             }
             urlConnection.connect();

File: runtime/src/main/java/io/micronaut/retry/intercept/DefaultRetryInterceptor.java
Patch:
@@ -36,7 +36,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Singleton;
-import java.lang.reflect.Method;
 import java.time.Duration;
 import java.util.Map;
 import java.util.Optional;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.discovery.DiscoveryConfiguration;
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;

File: discovery-client/src/main/java/io/micronaut/discovery/consul/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
  * and Consul (https://www.consul.io).
  *
- * @author graemerocher
+ * @author ryan vanderwerf
  * @since 1.0
  */
 @Configuration

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -66,8 +66,7 @@
  */
 public class DefaultEnvironment extends PropertySourcePropertyResolver implements Environment {
 
-    //private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
-    private static final String EC2_LINUX_HYPERVISOR_FILE = "/tmp/uuid";
+    private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
     private static final String EC2_WINDOWS_HYPERVISOR_CMD = "wmic path win32_computersystemproduct get uuid";
     private static final String PROPERTY_SOURCES_KEY = "micronaut.config.files";
     private static final String FILE_SEPARATOR = ",";

File: configurations/picocli/src/main/java/io/micronaut/configuration/picocli/PicocliRunner.java
Patch:
@@ -53,7 +53,7 @@ public class PicocliRunner {
      * @throws Exception if the ApplicationContext could not be closed
      */
     public static <C extends Callable<T>, T> T call(Class<C> cls, String... args) throws Exception {
-        try (ApplicationContext ctx = ApplicationContext.run(Environment.CLI)) {
+        try (ApplicationContext ctx = ApplicationContext.build(cls, Environment.CLI).build()) {
             return call(cls, ctx, args);
         }
     }
@@ -103,7 +103,7 @@ public static <C extends Callable<T>, T> T call(Class<C> cls, ApplicationContext
      * @throws Exception if the ApplicationContext could not be closed
      */
     public static <R extends Runnable> void run(Class<R> cls, String... args) throws Exception {
-        try (ApplicationContext ctx = ApplicationContext.run(Environment.CLI)) {
+        try (ApplicationContext ctx = ApplicationContext.build(cls, Environment.CLI).build()) {
             run(cls, ctx, args);
         }
     }

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Configurations classes for configuring Kafka {@link kafka.consumer.Consumer} and {@link org.apache.kafka.clients.producer.Producer} instances.
+ * Configurations classes for configuring Kafka {@link org.apache.kafka.clients.consumer.Consumer} and {@link org.apache.kafka.clients.producer.Producer} instances.
  *
  * @author graemerocher
  * @since 1.0

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/aggregator/MicrometerMeterRegistryConfigurer.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Collection;
 
 /**
- * Default implementation of {@link MeterRegistryConfigurer>} that adds the binders and filters
+ * Default implementation of {@link MeterRegistryConfigurer} that adds the binders and filters
  * to the micrometer meter registry.  This is specifically needed for the {@link io.micronaut.configuration.metrics.management.endpoint.MetricsEndpoint}
  *
  * @author Christian Oestreich

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -67,7 +67,7 @@
     Class<?> value();
 
     /**
-     * Internal attributes for the adapter annotation
+     * Internal attributes for the adapter annotation.
      */
     @Internal
     class InternalAttributes {

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -181,6 +181,9 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
+                FullHttpMessage message = (FullHttpMessage) inMsg;
+                // will be released by fireChannelRead
+                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: http/src/main/java/io/micronaut/http/ssl/DefaultSslConfiguration.java
Patch:
@@ -37,7 +37,7 @@ public class DefaultSslConfiguration extends SslConfiguration {
      */
     void setKey(DefaultKeyConfiguration keyConfiguration) {
         if (keyConfiguration != null) {
-            this.key = keyConfiguration;
+            super.setKey(keyConfiguration);
         }
     }
 
@@ -49,7 +49,7 @@ void setKey(DefaultKeyConfiguration keyConfiguration) {
     @SuppressWarnings("unused")
     void setKeyStore(DefaultKeyStoreConfiguration keyStoreConfiguration) {
         if (keyStoreConfiguration != null) {
-            this.keyStore = keyStoreConfiguration;
+            super.setKeyStore(keyStoreConfiguration);
         }
     }
 
@@ -60,7 +60,7 @@ void setKeyStore(DefaultKeyStoreConfiguration keyStoreConfiguration) {
      */
     @SuppressWarnings("unused")
     void setTrustStore(DefaultTrustStoreConfiguration trustStore) {
-        this.trustStore = trustStore;
+        super.setTrustStore(trustStore);
     }
 
 

File: http/src/main/java/io/micronaut/http/ssl/ServerSslConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public ServerSslConfiguration() {
     @Inject
     void setKey(@Nullable DefaultKeyConfiguration keyConfiguration) {
         if (keyConfiguration != null) {
-            this.key = keyConfiguration;
+            super.setKey(keyConfiguration);
         }
     }
 
@@ -79,7 +79,7 @@ void setKey(@Nullable DefaultKeyConfiguration keyConfiguration) {
     @SuppressWarnings("unused")
     void setKeyStore(@Nullable DefaultKeyStoreConfiguration keyStoreConfiguration) {
         if (keyStoreConfiguration != null) {
-            this.keyStore = keyStoreConfiguration;
+            super.setKeyStore(keyStoreConfiguration);
         }
     }
 
@@ -92,7 +92,7 @@ void setKeyStore(@Nullable DefaultKeyStoreConfiguration keyStoreConfiguration) {
     @SuppressWarnings("unused")
     void setTrustStore(@Nullable DefaultTrustStoreConfiguration trustStore) {
         if (trustStore != null) {
-            this.trustStore = trustStore;
+            super.setTrustStore(trustStore);
         }
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -58,8 +58,7 @@ public ClassElement getReturnType() {
 
         if (returnType instanceof NoType) {
             return new JavaVoidElement();
-        }
-        else if (returnType instanceof DeclaredType) {
+        } else if (returnType instanceof DeclaredType) {
             Element e = ((DeclaredType) returnType).asElement();
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -39,7 +39,7 @@ public class JavaVisitorContext implements VisitorContext {
     private final Types types;
 
     /**
-     * The default constructor
+     * The default constructor.
      *
      * @param messager The messager
      * @param elements The elements

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -914,7 +914,9 @@ protected final Object getBeanForConstructorArgument(BeanResolutionContext resol
         ConstructorInjectionPoint<T> constructorInjectionPoint = getConstructor();
         Argument<?> argument = constructorInjectionPoint.getArguments()[argIndex];
         Class argumentType = argument.getType();
-        if (argumentType.isArray()) {
+        if (argumentType == BeanResolutionContext.class) {
+            return resolutionContext;
+        } else if (argumentType.isArray()) {
             Collection beansOfType = getBeansOfTypeForConstructorArgument(resolutionContext, context, constructorInjectionPoint, argument);
             return beansOfType.toArray((Object[]) Array.newInstance(argumentType.getComponentType(), beansOfType.size()));
         } else if (Collection.class.isAssignableFrom(argumentType)) {

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -77,6 +77,8 @@
     boolean allowZeroArgs() default false;
 
     /**
+     * Only to be used if the builder is not being created manually.
+     *
      * @return The name of a static factory method used to create the builder
      */
     String factoryMethod() default "";

File: inject/src/main/java/io/micronaut/context/env/DefaultPropertyPlaceholderResolver.java
Patch:
@@ -83,12 +83,12 @@ public String resolveRequiredPlaceholders(String str) throws ConfigurationExcept
 
     private String resolvePlaceholders(String str, int startIndex) {
         StringBuilder builder = new StringBuilder(str.substring(0, startIndex));
-        String restOfString = str.substring(startIndex + 2, str.length());
+        String restOfString = str.substring(startIndex + 2);
         int i = restOfString.indexOf('}');
         if (i > -1) {
             String expr = restOfString.substring(0, i).trim();
             if (restOfString.length() > i) {
-                restOfString = restOfString.substring(i + 1, restOfString.length());
+                restOfString = restOfString.substring(i + 1);
             }
             resolveExpression(builder, str, expr);
 
@@ -109,7 +109,7 @@ private void resolveExpression(StringBuilder builder, String str, String expr) {
         Matcher matcher = DELIMITER.matcher(expr);
         if (matcher.find()) {
             int j = matcher.start() + 1;
-            defaultValue = expr.substring(j + 1, expr.length());
+            defaultValue = expr.substring(j + 1);
             expr = expr.substring(0, j);
         }
         if (environment.containsProperty(expr)) {

File: security-session/src/main/java/io/micronaut/security/session/SessionSecurityFilterOrderProvider.java
Patch:
@@ -31,7 +31,7 @@ public class SessionSecurityFilterOrderProvider implements SecurityFilterOrderPr
     private static final int ORDER_PADDING = 100;
 
     @Override
-    public Integer getSecurityFilterOrder() {
+    public int getOrder() {
         return HttpSessionFilter.ORDER + ORDER_PADDING;
     }
 }

File: security/src/main/java/io/micronaut/security/filters/SecurityFilter.java
Patch:
@@ -79,7 +79,7 @@ public SecurityFilter(Collection<SecurityRule> securityRules,
         this.securityRules = securityRules;
         this.authenticationFetchers = authenticationFetchers;
         this.rejectionHandler = rejectionHandler;
-        this.order = securityFilterOrderProvider != null ? securityFilterOrderProvider.getSecurityFilterOrder() : 0;
+        this.order = securityFilterOrderProvider != null ? securityFilterOrderProvider.getOrder() : 0;
     }
 
     @Override

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/registration/Route53AutoNamingRegistrationClient.java
Patch:
@@ -139,7 +139,7 @@ protected void pulsate(ServiceInstance instance, HealthStatus status) {
         // this only work if you create a health status check when you register it
         // we can't really pulsate anywhere because amazon health checks work inverse from this UNLESS you have a custom health check
         Optional<String> opt = instance.getInstanceId();
-            if (!opt.isPresent()) {
+        if (!opt.isPresent()) {
             // try the metadata
             if (instance.getMetadata().contains("instanceId")) {
                 opt = Optional.of(instance.getMetadata().asMap().get("instanceId"));

File: aop/src/main/java/io/micronaut/aop/InterceptedProxy.java
Patch:
@@ -42,5 +42,6 @@ public interface InterceptedProxy<T> extends Intercepted {
      * @param qualifier The bean qualifier to use
      */
     @Internal
+    @SuppressWarnings("MethodName")
     void $withBeanQualifier(Qualifier<T> qualifier);
 }

File: discovery-client/src/main/java/io/micronaut/discovery/consul/ConsulConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
-import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.Toggleable;
 import io.micronaut.discovery.DiscoveryConfiguration;
 import io.micronaut.discovery.client.DiscoveryClientConfiguration;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -68,11 +68,9 @@
 import javax.annotation.PreDestroy;
 import javax.inject.Singleton;
 import java.io.Closeable;
-import java.io.UnsupportedEncodingException;
 import java.lang.annotation.Annotation;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashMap;

File: http/src/main/java/io/micronaut/http/ssl/SslConfiguration.java
Patch:
@@ -192,14 +192,16 @@ public void setCiphers(String[] ciphers) {
 
     /**
      * Sets the protocols to use.
+     *
      * @param protocols The protocols
      */
     public void setProtocols(String[] protocols) {
         this.protocols = protocols;
     }
 
     /**
-     * Sets the protocol to use
+     * Sets the protocol to use.
+     *
      * @param protocol The protocol
      */
     public void setProtocol(String protocol) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1257,6 +1257,7 @@ public Object visitVariable(VariableElement variable, Object o) {
 
         /**
          * @param field The {@link VariableElement}
+         * @param fieldAnnotationMetadata The annotation metadata for the field
          * @return Returns null after visiting the configuration properties
          */
         public Object visitConfigurationProperty(VariableElement field, AnnotationMetadata fieldAnnotationMetadata) {

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaMethodElement.java
Patch:
@@ -58,8 +58,7 @@ public ClassElement getReturnType() {
 
         if (returnType instanceof NoType) {
             return new JavaVoidElement();
-        }
-        else if (returnType instanceof DeclaredType) {
+        } else if (returnType instanceof DeclaredType) {
             Element e = ((DeclaredType) returnType).asElement();
             if (e instanceof TypeElement) {
                 TypeElement typeElement = (TypeElement) e;

File: inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaVisitorContext.java
Patch:
@@ -39,7 +39,7 @@ public class JavaVisitorContext implements VisitorContext {
     private final Types types;
 
     /**
-     * The default constructor
+     * The default constructor.
      *
      * @param messager The messager
      * @param elements The elements

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -77,7 +77,7 @@
     boolean allowZeroArgs() default false;
 
     /**
-     * Only to be used if the builder is not being created manually
+     * Only to be used if the builder is not being created manually.
      *
      * @return The name of a static factory method used to create the builder
      */

File: security-session/src/main/java/io/micronaut/security/session/SessionSecurityFilterOrderProvider.java
Patch:
@@ -31,7 +31,7 @@ public class SessionSecurityFilterOrderProvider implements SecurityFilterOrderPr
     private static final int ORDER_PADDING = 100;
 
     @Override
-    public Integer getSecurityFilterOrder() {
+    public int getOrder() {
         return HttpSessionFilter.ORDER + ORDER_PADDING;
     }
 }

File: security/src/main/java/io/micronaut/security/filters/SecurityFilter.java
Patch:
@@ -79,7 +79,7 @@ public SecurityFilter(Collection<SecurityRule> securityRules,
         this.securityRules = securityRules;
         this.authenticationFetchers = authenticationFetchers;
         this.rejectionHandler = rejectionHandler;
-        this.order = securityFilterOrderProvider != null ? securityFilterOrderProvider.getSecurityFilterOrder() : 0;
+        this.order = securityFilterOrderProvider != null ? securityFilterOrderProvider.getOrder() : 0;
     }
 
     @Override

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -42,6 +42,7 @@ public class BraveTracingServerFilter extends AbstractBraveTracingFilter impleme
     private final HttpServerHandler<HttpRequest<?>, MutableHttpResponse<?>> serverHandler;
     private final TraceContext.Extractor<HttpHeaders> extractor;
     private final io.opentracing.Tracer openTracer;
+
     /**
      * @param httpTracing The {@link HttpTracing} instance
      * @param openTracer The open tracing instance

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingPublisher.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.tracing.instrument.util;
 
 import io.micronaut.core.async.publisher.Publishers;
-import io.micronaut.http.HttpResponse;
 import io.micronaut.http.MutableHttpResponse;
 import io.opentracing.Scope;
 import io.opentracing.Span;

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -596,14 +596,14 @@ private String appendQuery(String uri, Map<String, String> queryParams) {
                 }
 
                 for (Map.Entry<String, String> entry: queryParams.entrySet()) {
-                    sb.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
+                    sb.append(entry.getKey());
                     sb.append('=');
-                    sb.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
+                    sb.append(entry.getValue());
                 }
 
                 return new URI(oldUri.getScheme(), oldUri.getAuthority(), oldUri.getPath(),
                         sb.toString(), oldUri.getFragment()).toString();
-            } catch (URISyntaxException | UnsupportedEncodingException e) {
+            } catch (URISyntaxException e) {
                 //no-op
             }
         }

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -66,8 +66,7 @@
  */
 public class DefaultEnvironment extends PropertySourcePropertyResolver implements Environment {
 
-    //private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
-    private static final String EC2_LINUX_HYPERVISOR_FILE = "/tmp/uuid";
+    private static final String EC2_LINUX_HYPERVISOR_FILE = "/sys/hypervisor/uuid";
     private static final String EC2_WINDOWS_HYPERVISOR_CMD = "wmic path win32_computersystemproduct get uuid";
     private static final String PROPERTY_SOURCES_KEY = "micronaut.config.files";
     private static final String FILE_SEPARATOR = ",";

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonComputeInstanceMetadataResolver.java
Patch:
@@ -132,6 +132,9 @@ public Optional<ComputeInstanceMetadata> resolve(Environment environment) {
             }
 
             ec2InstanceMetadata.metadata = objectMapper.convertValue(ec2InstanceMetadata, Map.class);
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("EC2 Metadata found:"+ec2InstanceMetadata.metadata.toString());
+            }
             //TODO make individual calls for building network interfaces.. required recursive http calls for all mac addresses
         } catch (IOException e) {
             LOG.error("Error reading ec2 metadata url", e);

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/registration/Route53AutoNamingRegistrationClient.java
Patch:
@@ -228,7 +228,7 @@ protected void register(ServiceInstance instance) {
         ConvertibleValues<String> metadata = instance.getMetadata();
 
         RegisterInstanceRequest instanceRequest = new RegisterInstanceRequest().withServiceId(route53AutoRegistrationConfiguration.getAwsServiceId())
-                .withInstanceId(metadata.asMap().get("instanceId")).withCreatorRequestId(Long.toString(System.nanoTime())).withAttributes(instanceAttributes);
+                .withInstanceId(instance.getInstanceId().get()).withCreatorRequestId(Long.toString(System.nanoTime())).withAttributes(instanceAttributes);
 
         Future<RegisterInstanceResult> instanceResult = getDiscoveryClient().registerInstanceAsync(instanceRequest);
         Flowable<RegisterInstanceResult> flowableResult = Flowable.fromFuture(instanceResult);

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -77,6 +77,8 @@
     boolean allowZeroArgs() default false;
 
     /**
+     * Only to be used if the builder is not being created manually
+     *
      * @return The name of a static factory method used to create the builder
      */
     String factoryMethod() default "";

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/AWSServiceDiscoveryClientResolver.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.discovery.aws.route53;
 
+import com.amazonaws.regions.Regions;
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsync;
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsyncClientBuilder;
 import io.micronaut.configuration.aws.AWSClientConfiguration;
@@ -42,7 +43,7 @@ public AWSServiceDiscoveryClientResolver(AWSClientConfiguration clientConfigurat
         if (clientConfiguration != null) {
             awsServiceDiscoveryAsync = AWSServiceDiscoveryAsyncClientBuilder.standard().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         } else {
-            awsServiceDiscoveryAsync = AWSServiceDiscoveryAsyncClientBuilder.defaultClient();
+            awsServiceDiscoveryAsync = AWSServiceDiscoveryAsyncClientBuilder.standard().withRegion(Regions.DEFAULT_REGION).build();
         }
     }
 

File: http-client/src/main/java/io/micronaut/http/client/BlockingHttpClient.java
Patch:
@@ -144,6 +144,7 @@ default <I, O, E> O retrieve(HttpRequest<I> request, Argument<O> bodyType, Argum
                     ));
         }
     }
+
     /**
      * Perform an HTTP request for the given request object emitting the full HTTP response from returned
      * {@link org.reactivestreams.Publisher} and converting the response body to the specified type.

File: http-client/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -145,6 +145,7 @@ default <I, O> Publisher<HttpResponse<O>> exchange(HttpRequest<I> request, Class
      *
      * @param request  The {@link HttpRequest} to execute
      * @param bodyType The body type
+     * @param errorType The error type
      * @param <I>      The request body type
      * @param <O>      The response body type
      * @param <E>      The error type

File: http-client/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.reactivex.Flowable;
-import org.reactivestreams.Publisher;
 
 import java.net.URL;
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -29,7 +29,6 @@
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;
 import io.micronaut.core.beans.BeanMap;
 import io.micronaut.core.convert.ConversionService;
-import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableArgumentValue;
@@ -51,7 +50,6 @@
 import io.micronaut.http.client.sse.SseClient;
 import io.micronaut.http.codec.MediaTypeCodec;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
-import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.netty.cookies.NettyCookie;
 import io.micronaut.http.sse.Event;
 import io.micronaut.http.uri.UriMatchTemplate;

File: spring/src/main/java/io/micronaut/spring/core/env/PropertyResolverAdapter.java
Patch:
@@ -70,7 +70,6 @@ public <T> T getProperty(String key, Class<T> targetType, T defaultValue) {
         return propertyResolver.getProperty(NameUtils.hyphenate(key), targetType, defaultValue);
     }
 
-    @Override
     @Deprecated
     public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {
         Optional<String> property = propertyResolver.getProperty(NameUtils.hyphenate(key), String.class);

File: configurations/netflix-ribbon/src/main/java/io/micronaut/configuration/ribbon/RibbonRxHttpClient.java
Patch:
@@ -122,7 +122,7 @@ public <I, O> Flowable<HttpResponse<O>> exchange(HttpRequest<I> request, Argumen
                 URI newURI = loadBalancer.getLoadBalancerContext().reconstructURIWithServer(server, resolveRequestURI(request.getUri()));
                 return RxJavaInterop.toV1Observable(
                     Flowable.fromPublisher(Publishers.just(newURI))
-                        .switchMap(super.buildExchangePublisher(request, bodyType))
+                        .switchMap(super.buildExchangePublisher(request, bodyType, errorType))
                 );
             });
 

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -194,6 +194,7 @@ private <T> Optional convertByteBuf(ByteBuf content, Argument<T> type) {
         if (complete) {
             return Optional.empty();
         }
+
         Optional<MediaType> contentType = getContentType();
         if (content.refCnt() == 0 || content.readableBytes() == 0) {
             if (LOG.isTraceEnabled()) {

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1513,8 +1513,9 @@ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FullHtt
                             }
                         } else {
                             emitter.onNext(response);
+                            response.onComplete();
+                            emitter.onComplete();
                         }
-                        emitter.onComplete();
                     }
                 } finally {
                     pipeline.remove(this);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2083,6 +2083,7 @@ private static final class BeanExecutionHandle<T, R> extends AbstractExecutionHa
         private final boolean isSingleton;
 
         private T target;
+
         /**
          * @param beanContext The bean context
          * @param beanType    The bean type

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.health.HealthStatus;
@@ -70,6 +71,7 @@ public ServiceHttpClientFactory(
      * @return The client bean
      */
     @EachBean(ServiceHttpClientConfiguration.class)
+    @Requires(condition = ServiceHttpClientCondition.class)
     DefaultHttpClient serviceHttpClient(ServiceHttpClientConfiguration configuration) {
         List<URI> originalURLs = configuration.getUrls();
         Collection<URI> loadBalancedURIs = new ConcurrentLinkedQueue<>(originalURLs);

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -370,7 +370,7 @@ public static class ConnectionPoolConfiguration implements Toggleable {
 
         private Duration acquireTimeout;
 
-        private boolean enabled = true;
+        private boolean enabled = false;
 
         /**
          * Whether connection pooling is enabled.

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -181,6 +181,9 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
+                FullHttpMessage message = (FullHttpMessage) inMsg;
+                // will be released by fireChannelRead
+                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public void setClientSslConfiguration(@Nullable ClientSslConfiguration sslConfig
     }
 
     /**
-     * The default connection pool configuration
+     * The default connection pool configuration.
      */
     @ConfigurationProperties(ConnectionPoolConfiguration.PREFIX)
     @Primary

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -55,6 +55,7 @@ public class ServiceHttpClientConfiguration extends HttpClientConfiguration {
      * Creates a new client configuration for the given service ID.
      *
      * @param serviceId The service id
+     * @param connectionPoolConfiguration The connection pool configuration
      */
     public ServiceHttpClientConfiguration(@Parameter String serviceId, ServiceConnectionPoolConfiguration connectionPoolConfiguration) {
         this.serviceId = serviceId;

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -47,6 +47,7 @@ public class ServiceHttpClientFactory {
     private final BeanContext beanContext;
     private final ServiceInstanceListLoadBalancerFactory loadBalancerFactory;
     private final TaskScheduler taskScheduler;
+
     /**
      * Default constructor.
      *

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -67,7 +67,7 @@
     Class<?> value();
 
     /**
-     * Internal attributes for the adapter annotation
+     * Internal attributes for the adapter annotation.
      */
     @Internal
     class InternalAttributes {

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -1222,7 +1222,7 @@ private void writeWithQualifierMethod(ClassWriter proxyClassWriter) {
         withQualifierMethod.putField(proxyType, FIELD_BEAN_QUALIFIER, Type.getType(Qualifier.class));
         withQualifierMethod.visitInsn(RETURN);
         withQualifierMethod.visitEnd();
-        withQualifierMethod.visitMaxs(1,1);
+        withQualifierMethod.visitMaxs(1, 1);
     }
 
     private void writeSwapMethod(ClassWriter proxyClassWriter, Type targetType) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -299,6 +299,7 @@ public static AnnotationValueBuilder<?> builder(String annotationName) {
      * Start building a new annotation for the given name.
      *
      * @param annotation The annotation name
+     * @param <T> The annotation type
      * @return The builder
      */
     public static <T extends Annotation> AnnotationValueBuilder<T> builder(Class<T> annotation) {

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -914,7 +914,9 @@ protected final Object getBeanForConstructorArgument(BeanResolutionContext resol
         ConstructorInjectionPoint<T> constructorInjectionPoint = getConstructor();
         Argument<?> argument = constructorInjectionPoint.getArguments()[argIndex];
         Class argumentType = argument.getType();
-        if (argumentType.isArray()) {
+        if (argumentType == BeanResolutionContext.class) {
+            return resolutionContext;
+        } else if (argumentType.isArray()) {
             Collection beansOfType = getBeansOfTypeForConstructorArgument(resolutionContext, context, constructorInjectionPoint, argument);
             return beansOfType.toArray((Object[]) Array.newInstance(argumentType.getComponentType(), beansOfType.size()));
         } else if (Collection.class.isAssignableFrom(argumentType)) {

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -431,7 +431,7 @@ private boolean matchesPresenceOfEntities(ConditionContext context, AnnotationVa
                             Environment environment = applicationContext.getEnvironment();
                             Class annotationType = type.get();
                             if (!environment.scan(annotationType).findFirst().isPresent()) {
-                                context.fail("No entities found on classpath");
+                                context.fail("No entities found in packages [" + String.join(", ", environment.getPackages()) + "]");
                                 return false;
                             }
                         }

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.context.annotation.Parameter;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.core.annotation.AnnotationMetadataResolver;
 import io.micronaut.core.annotation.AnnotationValue;
@@ -123,6 +124,7 @@
  * @since 1.0
  */
 @Prototype
+@Primary
 public class DefaultHttpClient implements RxHttpClient, RxStreamingHttpClient, RxSseClient, Closeable, AutoCloseable {
 
     protected static final String HANDLER_AGGREGATOR = "http-aggregator";

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -38,6 +38,7 @@
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
+import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.StreamUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.inject.*;
@@ -1214,7 +1215,7 @@ protected <T> T doCreateBean(BeanResolutionContext resolutionContext,
                     ParametrizedBeanFactory<T> parametrizedBeanFactory = (ParametrizedBeanFactory<T>) beanFactory;
                     Argument<?>[] requiredArguments = parametrizedBeanFactory.getRequiredArguments();
                     if (argumentValues == null) {
-                        throw new BeanInstantiationException(resolutionContext, "Missing bean arguments for type: " + beanDefinition.getBeanType().getName());
+                        throw new BeanInstantiationException(resolutionContext, "Missing bean arguments for type: " + beanDefinition.getBeanType().getName() + ". Requires arguments: " + ArrayUtils.toString(requiredArguments));
                     }
                     Map<String, Object> convertedValues = new LinkedHashMap<>(argumentValues);
                     for (Argument<?> requiredArgument : requiredArguments) {

File: runtime/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -18,6 +18,7 @@
 
 import static io.micronaut.core.util.ArgumentUtils.check;
 
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.cron.CronExpression;
 
@@ -38,6 +39,7 @@
  * @since 1.0
  */
 @Named(TaskExecutors.SCHEDULED)
+@Primary
 public class ScheduledExecutorTaskScheduler implements TaskScheduler {
 
     private final ScheduledExecutorService executorService;

File: http-client/src/main/java/io/micronaut/http/client/BlockingHttpClient.java
Patch:
@@ -144,6 +144,7 @@ default <I, O, E> O retrieve(HttpRequest<I> request, Argument<O> bodyType, Argum
                     ));
         }
     }
+
     /**
      * Perform an HTTP request for the given request object emitting the full HTTP response from returned
      * {@link org.reactivestreams.Publisher} and converting the response body to the specified type.

File: http-client/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -145,6 +145,7 @@ default <I, O> Publisher<HttpResponse<O>> exchange(HttpRequest<I> request, Class
      *
      * @param request  The {@link HttpRequest} to execute
      * @param bodyType The body type
+     * @param errorType The error type
      * @param <I>      The request body type
      * @param <O>      The response body type
      * @param <E>      The error type

File: http-client/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.reactivex.Flowable;
-import org.reactivestreams.Publisher;
 
 import java.net.URL;
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -29,7 +29,6 @@
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;
 import io.micronaut.core.beans.BeanMap;
 import io.micronaut.core.convert.ConversionService;
-import io.micronaut.core.io.buffer.ByteBuffer;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.MutableArgumentValue;
@@ -51,7 +50,6 @@
 import io.micronaut.http.client.sse.SseClient;
 import io.micronaut.http.codec.MediaTypeCodec;
 import io.micronaut.http.codec.MediaTypeCodecRegistry;
-import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.netty.cookies.NettyCookie;
 import io.micronaut.http.sse.Event;
 import io.micronaut.http.uri.UriMatchTemplate;

File: spring/src/main/java/io/micronaut/spring/core/env/PropertyResolverAdapter.java
Patch:
@@ -70,7 +70,6 @@ public <T> T getProperty(String key, Class<T> targetType, T defaultValue) {
         return propertyResolver.getProperty(NameUtils.hyphenate(key), targetType, defaultValue);
     }
 
-    @Override
     @Deprecated
     public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {
         Optional<String> property = propertyResolver.getProperty(NameUtils.hyphenate(key), String.class);

File: configurations/netflix-ribbon/src/main/java/io/micronaut/configuration/ribbon/RibbonRxHttpClient.java
Patch:
@@ -122,7 +122,7 @@ public <I, O> Flowable<HttpResponse<O>> exchange(HttpRequest<I> request, Argumen
                 URI newURI = loadBalancer.getLoadBalancerContext().reconstructURIWithServer(server, resolveRequestURI(request.getUri()));
                 return RxJavaInterop.toV1Observable(
                     Flowable.fromPublisher(Publishers.just(newURI))
-                        .switchMap(super.buildExchangePublisher(request, bodyType))
+                        .switchMap(super.buildExchangePublisher(request, bodyType, errorType))
                 );
             });
 

File: http-client/src/main/java/io/micronaut/http/client/FullNettyClientHttpResponse.java
Patch:
@@ -194,6 +194,7 @@ private <T> Optional convertByteBuf(ByteBuf content, Argument<T> type) {
         if (complete) {
             return Optional.empty();
         }
+
         Optional<MediaType> contentType = getContentType();
         if (content.refCnt() == 0 || content.readableBytes() == 0) {
             if (LOG.isTraceEnabled()) {

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1513,8 +1513,9 @@ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FullHtt
                             }
                         } else {
                             emitter.onNext(response);
+                            response.onComplete();
+                            emitter.onComplete();
                         }
-                        emitter.onComplete();
                     }
                 } finally {
                     pipeline.remove(this);

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -2083,6 +2083,7 @@ private static final class BeanExecutionHandle<T, R> extends AbstractExecutionHa
         private final boolean isSingleton;
 
         private T target;
+
         /**
          * @param beanContext The bean context
          * @param beanType    The bean type

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.BeanContext;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.ServiceInstanceList;
 import io.micronaut.health.HealthStatus;
@@ -70,6 +71,7 @@ public ServiceHttpClientFactory(
      * @return The client bean
      */
     @EachBean(ServiceHttpClientConfiguration.class)
+    @Requires(condition = ServiceHttpClientCondition.class)
     DefaultHttpClient serviceHttpClient(ServiceHttpClientConfiguration configuration) {
         List<URI> originalURLs = configuration.getUrls();
         Collection<URI> loadBalancedURIs = new ConcurrentLinkedQueue<>(originalURLs);

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -370,7 +370,7 @@ public static class ConnectionPoolConfiguration implements Toggleable {
 
         private Duration acquireTimeout;
 
-        private boolean enabled = true;
+        private boolean enabled = false;
 
         /**
          * Whether connection pooling is enabled.

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsHandler.java
Patch:
@@ -181,6 +181,9 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
             if (inMsg instanceof FullHttpMessage) {
 
                 // Forward as is
+                FullHttpMessage message = (FullHttpMessage) inMsg;
+                // will be released by fireChannelRead
+                message.retain();
                 ctx.fireChannelRead(inMsg);
                 consumedInMessage(ctx);
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClientConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public void setClientSslConfiguration(@Nullable ClientSslConfiguration sslConfig
     }
 
     /**
-     * The default connection pool configuration
+     * The default connection pool configuration.
      */
     @ConfigurationProperties(ConnectionPoolConfiguration.PREFIX)
     @Primary

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientConfiguration.java
Patch:
@@ -55,6 +55,7 @@ public class ServiceHttpClientConfiguration extends HttpClientConfiguration {
      * Creates a new client configuration for the given service ID.
      *
      * @param serviceId The service id
+     * @param connectionPoolConfiguration The connection pool configuration
      */
     public ServiceHttpClientConfiguration(@Parameter String serviceId, ServiceConnectionPoolConfiguration connectionPoolConfiguration) {
         this.serviceId = serviceId;

File: http-client/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java
Patch:
@@ -47,6 +47,7 @@ public class ServiceHttpClientFactory {
     private final BeanContext beanContext;
     private final ServiceInstanceListLoadBalancerFactory loadBalancerFactory;
     private final TaskScheduler taskScheduler;
+
     /**
      * Default constructor.
      *

File: aop/src/main/java/io/micronaut/aop/Adapter.java
Patch:
@@ -67,7 +67,7 @@
     Class<?> value();
 
     /**
-     * Internal attributes for the adapter annotation
+     * Internal attributes for the adapter annotation.
      */
     @Internal
     class InternalAttributes {

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -1222,7 +1222,7 @@ private void writeWithQualifierMethod(ClassWriter proxyClassWriter) {
         withQualifierMethod.putField(proxyType, FIELD_BEAN_QUALIFIER, Type.getType(Qualifier.class));
         withQualifierMethod.visitInsn(RETURN);
         withQualifierMethod.visitEnd();
-        withQualifierMethod.visitMaxs(1,1);
+        withQualifierMethod.visitMaxs(1, 1);
     }
 
     private void writeSwapMethod(ClassWriter proxyClassWriter, Type targetType) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java
Patch:
@@ -299,6 +299,7 @@ public static AnnotationValueBuilder<?> builder(String annotationName) {
      * Start building a new annotation for the given name.
      *
      * @param annotation The annotation name
+     * @param <T> The annotation type
      * @return The builder
      */
     public static <T extends Annotation> AnnotationValueBuilder<T> builder(Class<T> annotation) {

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -914,7 +914,9 @@ protected final Object getBeanForConstructorArgument(BeanResolutionContext resol
         ConstructorInjectionPoint<T> constructorInjectionPoint = getConstructor();
         Argument<?> argument = constructorInjectionPoint.getArguments()[argIndex];
         Class argumentType = argument.getType();
-        if (argumentType.isArray()) {
+        if (argumentType == BeanResolutionContext.class) {
+            return resolutionContext;
+        } else if (argumentType.isArray()) {
             Collection beansOfType = getBeansOfTypeForConstructorArgument(resolutionContext, context, constructorInjectionPoint, argument);
             return beansOfType.toArray((Object[]) Array.newInstance(argumentType.getComponentType(), beansOfType.size()));
         } else if (Collection.class.isAssignableFrom(argumentType)) {

File: inject/src/main/java/io/micronaut/context/RequiresCondition.java
Patch:
@@ -431,7 +431,7 @@ private boolean matchesPresenceOfEntities(ConditionContext context, AnnotationVa
                             Environment environment = applicationContext.getEnvironment();
                             Class annotationType = type.get();
                             if (!environment.scan(annotationType).findFirst().isPresent()) {
-                                context.fail("No entities found on classpath");
+                                context.fail("No entities found in packages [" + String.join(", ", environment.getPackages()) + "]");
                                 return false;
                             }
                         }

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.context.annotation.Parameter;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.core.annotation.AnnotationMetadataResolver;
 import io.micronaut.core.annotation.AnnotationValue;
@@ -123,6 +124,7 @@
  * @since 1.0
  */
 @Prototype
+@Primary
 public class DefaultHttpClient implements RxHttpClient, RxStreamingHttpClient, RxSseClient, Closeable, AutoCloseable {
 
     protected static final String HANDLER_AGGREGATOR = "http-aggregator";

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -38,6 +38,7 @@
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
+import io.micronaut.core.util.ArrayUtils;
 import io.micronaut.core.util.StreamUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.inject.*;
@@ -1214,7 +1215,7 @@ protected <T> T doCreateBean(BeanResolutionContext resolutionContext,
                     ParametrizedBeanFactory<T> parametrizedBeanFactory = (ParametrizedBeanFactory<T>) beanFactory;
                     Argument<?>[] requiredArguments = parametrizedBeanFactory.getRequiredArguments();
                     if (argumentValues == null) {
-                        throw new BeanInstantiationException(resolutionContext, "Missing bean arguments for type: " + beanDefinition.getBeanType().getName());
+                        throw new BeanInstantiationException(resolutionContext, "Missing bean arguments for type: " + beanDefinition.getBeanType().getName() + ". Requires arguments: " + ArrayUtils.toString(requiredArguments));
                     }
                     Map<String, Object> convertedValues = new LinkedHashMap<>(argumentValues);
                     for (Argument<?> requiredArgument : requiredArguments) {

File: runtime/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -18,6 +18,7 @@
 
 import static io.micronaut.core.util.ArgumentUtils.check;
 
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.cron.CronExpression;
 
@@ -38,6 +39,7 @@
  * @since 1.0
  */
 @Named(TaskExecutors.SCHEDULED)
+@Primary
 public class ScheduledExecutorTaskScheduler implements TaskScheduler {
 
     private final ScheduledExecutorService executorService;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -20,7 +20,7 @@
 import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementAsync;
 import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementAsyncClient;
 import com.amazonaws.services.simplesystemsmanagement.model.*;
-import io.micronaut.configurations.aws.AWSClientConfiguration;
+import io.micronaut.configuration.aws.AWSClientConfiguration;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.context.env.EnvironmentPropertySource;
@@ -323,7 +323,7 @@ private Publisher<Map<String, Object>> convertParameterHierarchyToMap(GetParamet
      */
     private Publisher<Map<String, Object>> convertParametersToMap(List<Parameter> params) {
 
-        Map<String, Object> output = new HashMap<String, Object>();
+        Map<String, Object> output = new HashMap<>();
         for (Parameter param : params) {
             switch (param.getType()) {
                 case "StringList":

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.micronaut.discovery.aws.parameterstore;
 
-import io.micronaut.configurations.aws.AWSClientConfiguration;
+import io.micronaut.configuration.aws.AWSClientConfiguration;
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/AWSServiceDiscoveryClientResolver.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsync;
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsyncClientBuilder;
-import io.micronaut.configurations.aws.AWSClientConfiguration;
+import io.micronaut.configuration.aws.AWSClientConfiguration;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import javax.inject.Singleton;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/client/Route53AutoNamingClient.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsync;
 import com.amazonaws.services.servicediscovery.model.*;
-import io.micronaut.configurations.aws.AWSClientConfiguration;
+import io.micronaut.configuration.aws.AWSClientConfiguration;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.async.publisher.Publishers;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/registration/Route53AutoNamingRegistrationClient.java
Patch:
@@ -20,7 +20,7 @@
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryAsync;
 import com.amazonaws.services.servicediscovery.AWSServiceDiscoveryClient;
 import com.amazonaws.services.servicediscovery.model.*;
-import io.micronaut.configurations.aws.AWSClientConfiguration;
+import io.micronaut.configuration.aws.AWSClientConfiguration;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.convert.value.ConvertibleValues;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/AWSServiceDiscoveryClientResolver.java
Patch:
@@ -13,7 +13,7 @@
  * This gets a real amazon service discovery client. It is abstracted to allow for it to be replaced easier during testing.
  */
 //@Requires(notEnv = Environment.TEST)
-//@Requires(env = Environment.AMAZON_EC2)
+@Requires(env = Environment.AMAZON_EC2)
 @Singleton
 public class AWSServiceDiscoveryClientResolver implements AWSServiceDiscoveryResolver {
     AWSServiceDiscoveryAsync awsServiceDiscoveryAsync;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfigClient.java
Patch:
@@ -89,7 +89,7 @@ public class AWSParameterStoreConfigClient implements ConfigurationClient {
      * Get your PropertySources from AWS Parameter Store.
      * Property sources are expected to be set up in this way:
      * \ configuration \ micronaut \ environment name \ app name \
-     * If you want to change the base \configuration\micronaut set the property aws.systemManager.parameterStore.rootHierarchyPath
+     * If you want to change the base \configuration\micronaut set the property aws.system-manager.parameterStore.rootHierarchyPath
      *
      * @param environment The environment
      * @return property source objects by environment.

File: discovery-client/src/main/java/io/micronaut/discovery/aws/parameterstore/AWSParameterStoreConfiguration.java
Patch:
@@ -25,8 +25,8 @@
  * This is the configuration class for the AWSParameterStoreConfigClient for AWS Parameter Store based configuration.
  */
 @Requires(env = Environment.AMAZON_EC2)
-@Requires(property = "aws.client.systemManager.parameterStore.enabled", value = "true", defaultValue = "false")
-@ConfigurationProperties("systemManager.parameterStore")
+@Requires(property = "aws.client.system-manager.parameterstore.enabled", value = "true", defaultValue = "false")
+@ConfigurationProperties("system-manager.parameterstore")
 public class AWSParameterStoreConfiguration extends AWSClientConfiguration {
 
     private static final String PREFIX = "config";

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -149,7 +149,8 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
         HttpClient httpClient = getClient(context, clientAnnotation);
         Optional<Class<? extends Annotation>> httpMethodMapping = context.getAnnotationTypeByStereotype(HttpMethodMapping.class);
         if (context.hasStereotype(HttpMethodMapping.class) && httpClient != null) {
-            String uri = context.getValue(HttpMethodMapping.class, String.class).orElse("");
+            AnnotationValue<HttpMethodMapping> mapping = context.getAnnotation(HttpMethodMapping.class);
+            String uri = mapping.getRequiredValue(String.class);
             if (StringUtils.isEmpty(uri)) {
                 uri = "/" + context.getMethodName();
             }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetOperations.java
Patch:
@@ -32,7 +32,7 @@
 @Validated
 public interface PetOperations {
     // tag::save[]
-    @Post("/")
+    @Post
     Single<Pet> save(@NotBlank String name, @Min(1L) int age);
     // end::save[]
 }

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/interceptor/SecureController.java
Patch:
@@ -26,7 +26,7 @@
 @Controller("/secure")
 public class SecureController {
 
-    @Get("/")
+    @Get
     public HttpResponse index(String username) {
         return HttpResponse.ok("Authenticated: " + username);
     }

File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/java/ParameterController.java
Patch:
@@ -33,7 +33,7 @@
  */
 @Controller("/java/parameter")
 public class ParameterController {
-    @Get("/")
+    @Get
     String index(Integer max) {
         return "Parameter Value: " + max;
     }

File: http/src/main/java/io/micronaut/http/annotation/HttpMethodMapping.java
Patch:
@@ -37,8 +37,10 @@
 @Executable
 public @interface HttpMethodMapping {
 
+    String DEFAULT_URI = "/";
+
     /**
      * @return The URI of the action
      */
-    String value() default "";
+    String value() default DEFAULT_URI;
 }

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthController.java
Patch:
@@ -73,7 +73,7 @@ public OauthController(JwtTokenValidator tokenValidator,
      * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
      */
     @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
-    @Post("/")
+    @Post
     public Single<HttpResponse<AccessRefreshToken>> index(TokenRefreshRequest tokenRefreshRequest) {
         if (!validateTokenRefreshRequest(tokenRefreshRequest)) {
             return Single.just(HttpResponse.status(HttpStatus.BAD_REQUEST));

File: security/src/main/java/io/micronaut/security/endpoints/LoginController.java
Patch:
@@ -74,7 +74,7 @@ public LoginController(Authenticator authenticator,
      * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
      */
     @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
-    @Post("/")
+    @Post
     public Single<HttpResponse> login(@Body UsernamePasswordCredentials usernamePasswordCredentials, HttpRequest<?> request) {
         Flowable<AuthenticationResponse> authenticationResponseFlowable = Flowable.fromPublisher(authenticator.authenticate(usernamePasswordCredentials));
 

File: security/src/main/java/io/micronaut/security/endpoints/LogoutController.java
Patch:
@@ -61,7 +61,7 @@ public LogoutController(@Nullable LogoutHandler logoutHandler,
      * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
      */
     @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
-    @Post("/")
+    @Post
     public HttpResponse index(HttpRequest<?> request, Authentication authentication) {
         eventPublisher.publishEvent(new LogoutEvent(authentication));
         if (logoutHandler != null) {

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloClient.java
Patch:
@@ -30,7 +30,7 @@
 @Client("/hello") // <1>
 public interface HelloClient {
 
-    @Get("/") // <2>
+    @Get // <2>
     Single<String> hello(); // <3>
 }
 // end::class[]
\ No newline at end of file

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloController.java
Patch:
@@ -26,7 +26,7 @@
 // tag::class[]
 @Controller("/hello") // <1>
 public class HelloController {
-    @Get("/") // <2>
+    @Get // <2>
     public String index() {
         return "Hello World"; // <3>
     }

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -42,7 +42,7 @@ public class PersonController {
     Map<String, Person> inMemoryDatastore = new LinkedHashMap<>();
 // end::class[]
 
-    @Get("/")
+    @Get
     public Collection<Person> index() {
         return inMemoryDatastore.values();
     }
@@ -56,7 +56,7 @@ public Maybe<Person> get(String name) {
     }
 
     // tag::single[]
-    @Post("/")
+    @Post
     public Single<HttpResponse<Person>> save(@Body Single<Person> person) { // <1>
         return person.map(p -> {
                     inMemoryDatastore.put(p.getFirstName(), p); // <2>

File: test-suite/src/test/groovy/io/micronaut/docs/server/sse/HeadlineController.java
Patch:
@@ -30,7 +30,7 @@
 @Controller("/headlines")
 public class HeadlineController {
 
-    @Get("/")
+    @Get
     public Publisher<Event<Headline>> index() { // <1>
         String[] versions = new String[]{"1.0", "2.0"}; // <2>
 

File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java
Patch:
@@ -101,7 +101,7 @@ public Single<HttpResponse> receivePublisher(Flowable<byte[]> data) {
         );
     }
 
-    @Post(value = "/receive-flowData", consumes = MediaType.MULTIPART_FORM_DATA)
+    @Post(value = "/receive-flow-data", consumes = MediaType.MULTIPART_FORM_DATA)
     public Publisher<HttpResponse> receiveFlowData(Data data) {
         return Flowable.just(HttpResponse.ok(data.toString()));
     }

File: configurations/jdbc-hikari/src/main/java/io/micronaut/configuration/jdbc/hikari/DatasourceFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.jdbc.hikari;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 import org.slf4j.Logger;

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/DatasourceFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.jdbc.tomcat;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 import org.slf4j.Logger;
@@ -64,5 +63,4 @@ public void close() {
         }
     }
 
-
 }

File: configurations/kafka-streams/src/main/java/io/micronaut/configuration/kafka/streams/DefaultKafkaStreamsConfiguration.java
Patch:
@@ -39,7 +39,7 @@
 @Requires(beans = KafkaDefaultConfiguration.class)
 @Named("default")
 @Primary
-public class DefaultKafkaStreamsConfiguration<K, V> extends AbtractKafkaStreamsConfiguration<K, V> {
+public class DefaultKafkaStreamsConfiguration<K, V> extends AbstractKafkaStreamsConfiguration<K, V> {
     /**
      * Construct a new {@link KafkaStreamsConfiguration} for the given defaults.
      *

File: configurations/kafka-streams/src/main/java/io/micronaut/configuration/kafka/streams/KafkaStreamsConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  */
 @EachProperty(value = PREFIX, primary = "default")
 @Requires(beans = KafkaDefaultConfiguration.class)
-public class KafkaStreamsConfiguration<K, V> extends AbtractKafkaStreamsConfiguration<K, V> {
+public class KafkaStreamsConfiguration<K, V> extends AbstractKafkaStreamsConfiguration<K, V> {
 
     /**
      * The default streams configuration.

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/intercept/KafkaClientIntroductionAdvice.java
Patch:
@@ -66,7 +66,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
 
 /**
  * Implementation of the {@link io.micronaut.configuration.kafka.annotation.KafkaClient} advice annotation.

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/management/endpoint/MetricsEndpoint.java
Patch:
@@ -31,7 +31,6 @@
 import javax.annotation.Nullable;
 import java.util.*;
 import java.util.function.BiFunction;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/DefaultReactiveMongoClientFactory.java
Patch:
@@ -24,8 +24,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.runtime.context.scope.Refreshable;
 
-import javax.inject.Singleton;
-
 /**
  * Factory for the default {@link MongoClient}. Creates the injectable {@link Primary} bean
  *

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/NamedReactiveMongoClientFactory.java
Patch:
@@ -23,8 +23,6 @@
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.runtime.context.scope.Refreshable;
 
-import javax.inject.Singleton;
-
 /**
  * Factory for named {@link MongoClient} instances. Creates the injectable {@link io.micronaut.context.annotation.Primary} bean
  *

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java
Patch:
@@ -31,7 +31,6 @@
  */
 public interface AnnotationMetadataDelegate extends AnnotationMetadataProvider, AnnotationMetadata {
 
-
     @Override
     default <T extends Annotation> T synthesizeDeclared(Class<T> annotationClass) {
         return getAnnotationMetadata().synthesizeDeclared(annotationClass);

File: core/src/main/java/io/micronaut/core/annotation/AnnotationSource.java
Patch:
@@ -32,6 +32,7 @@
  * @since 1.0
  */
 public interface AnnotationSource {
+
     /**
      * An empty annotation source.
      */
@@ -204,6 +205,7 @@ default <T extends Annotation> Optional<AnnotationValue<T>> findDeclaredAnnotati
     default @Nullable <T extends Annotation> AnnotationValue<T> getDeclaredAnnotation(Class<T> annotation) {
         return this.findDeclaredAnnotation(annotation).orElse(null);
     }
+
     /**
      * Return whether an annotation is present.
      *

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -124,8 +124,7 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
                                 route.produces(MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE);
                             }
                         }
-                    }
-                    else {
+                    } else {
                         if (argCount == 1 && ClassUtils.isJavaLangType(method.getArgumentTypes()[0])) {
                             route.consumes(MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE);
                         }

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -594,7 +594,7 @@ private String appendQuery(String uri, Map<String, String> queryParams) {
 
                 return new URI(oldUri.getScheme(), oldUri.getAuthority(), oldUri.getPath(),
                         sb.toString(), oldUri.getFragment()).toString();
-            } catch (URISyntaxException|UnsupportedEncodingException e) {
+            } catch (URISyntaxException | UnsupportedEncodingException e) {
                 //no-op
             }
         }

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
Patch:
@@ -66,21 +66,21 @@ public io.netty.handler.codec.http.HttpHeaders getNettyHeaders() {
     }
 
     /**
-     * @return The underlying Netty headers.
+     * Sets the underlying netty headers.
+     *
+     * @param headers The Netty http headers
      */
     void setNettyHeaders(io.netty.handler.codec.http.HttpHeaders headers) {
         this.nettyHeaders = headers;
     }
 
-
     @Override
     public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {
         String value = nettyHeaders.get(name);
         if (value != null) {
             return conversionService.convert(value, conversionContext);
         }
         return Optional.empty();
-
     }
 
     @Override

File: http/src/main/java/io/micronaut/http/hateos/AbstractResource.java
Patch:
@@ -41,6 +41,7 @@
  */
 @Produces(MediaType.APPLICATION_HAL_JSON)
 public abstract class AbstractResource<Impl extends AbstractResource> implements Resource {
+
     private final Map<CharSequence, List<Link>> linkMap = new LinkedHashMap<>(1);
     private final Map<CharSequence, List<Resource>> embeddedMap = new LinkedHashMap<>(1);
 

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpParameters.java
Patch:
@@ -39,6 +39,7 @@ public class SimpleHttpParameters implements MutableHttpParameters {
     private final ConvertibleMultiValues<String> values;
 
     /**
+     * @param values The parameter values
      * @param conversionService The conversion service
      */
     public SimpleHttpParameters(Map<CharSequence, List<String>> values, ConversionService conversionService) {

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponseFactory.java
Patch:
@@ -45,4 +45,4 @@ public <T> MutableHttpResponse<T> status(HttpStatus status, T body) {
         return new SimpleHttpResponse<T>().status(status).body(body);
     }
 
-}
\ No newline at end of file
+}

File: http/src/main/java/io/micronaut/http/simple/cookies/SimpleCookies.java
Patch:
@@ -89,4 +89,4 @@ public Collection<Cookie> values() {
     public Cookie put(CharSequence name, Cookie cookie) {
         return cookies.put(name, cookie);
     }
-}
\ No newline at end of file
+}

File: http/src/main/java/io/micronaut/http/uri/UriTemplate.java
Patch:
@@ -202,7 +202,9 @@ public int hashCode() {
 
     @Override
     public int compareTo(UriTemplate o) {
-        if (this == o) return 0;
+        if (this == o) {
+            return 0;
+        }
 
         List<PathSegment> thisSegments = this.segments;
         List<PathSegment> thatSegments = o.segments;

File: management/src/main/java/io/micronaut/management/endpoint/processors/DeleteEndpointRouteBuilder.java
Patch:
@@ -25,7 +25,6 @@
 
 import javax.inject.Singleton;
 import java.lang.annotation.Annotation;
-import java.util.Collection;
 
 /**
  * A processor that processes references to {@link Delete} operations {@link io.micronaut.management.endpoint.annotation.Endpoint}

File: management/src/main/java/io/micronaut/management/endpoint/processors/ReadEndpointRouteBuilder.java
Patch:
@@ -25,7 +25,6 @@
 
 import javax.inject.Singleton;
 import java.lang.annotation.Annotation;
-import java.util.Collection;
 
 /**
  * A processor that processes references to {@link Read} operations {@link io.micronaut.management.endpoint.annotation.Endpoint}

File: management/src/main/java/io/micronaut/management/endpoint/processors/WriteEndpointRouteBuilder.java
Patch:
@@ -29,7 +29,6 @@
 
 import javax.inject.Singleton;
 import java.lang.annotation.Annotation;
-import java.util.Collection;
 
 /**
  * A processor that processes references to {@link Write} operations {@link io.micronaut.management.endpoint.annotation.Endpoint}

File: security/src/main/java/io/micronaut/security/rules/SensitiveEndpointRule.java
Patch:
@@ -18,8 +18,6 @@
 
 import io.micronaut.http.HttpRequest;
 import io.micronaut.management.endpoint.EndpointSensitivityProcessor;
-import io.micronaut.management.endpoint.health.HealthEndpoint;
-import io.micronaut.management.endpoint.processors.ReadEndpointRouteBuilder;
 import io.micronaut.web.router.MethodBasedRouteMatch;
 import io.micronaut.web.router.RouteMatch;
 

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionValueArgumentBinder.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.type.Argument;
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;

File: session/src/main/java/io/micronaut/session/binder/SessionValueArgumentBinder.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.type.Argument;
-import io.micronaut.core.util.StringUtils;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/health/RedisHealthIndicator.java
Patch:
@@ -70,7 +70,7 @@ public RedisHealthIndicator(BeanContext beanContext, HealthAggregator<?> healthA
 
     @Override
     public Publisher<HealthResult> getResult() {
-        Collection<BeanRegistration<RedisClient>> registrations = beanContext.getBeanRegistrations(RedisClient.class);
+        Collection<BeanRegistration<RedisClient>> registrations = beanContext.getActiveBeanRegistrations(RedisClient.class);
         Flux<BeanRegistration<RedisClient>> redisClients = Flux.fromIterable(registrations);
 
         Flux<HealthResult> healthResultFlux = redisClients.flatMap(client -> {

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -202,7 +202,9 @@ protected AbstractBeanDefinition(Class<T> type,
 
     @Override
     public @Nonnull List<Argument<?>> getTypeArguments(String type) {
-        if (type == null) return Collections.emptyList();
+        if (type == null) {
+            return Collections.emptyList();
+        }
 
         Map<String, Argument<?>[]> typeArguments = getTypeArgumentsMap();
         Argument<?>[] arguments = typeArguments.get(type);

File: inject/src/main/java/io/micronaut/inject/BeanDefinition.java
Patch:
@@ -158,7 +158,7 @@ public interface BeanDefinition<T> extends AnnotationMetadataDelegate, Named, Be
     Collection<ExecutableMethod<T, ?>> getExecutableMethods();
 
     /**
-     * If the bean itself declares any type arguments this method will return the classes that represent those types
+     * If the bean itself declares any type arguments this method will return the classes that represent those types.
      *
      * @return The type arguments
      */

File: inject/src/main/java/io/micronaut/inject/FieldInjectionPoint.java
Patch:
@@ -18,8 +18,6 @@
 
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
 import io.micronaut.core.type.Argument;
-
-import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Field;
 
 /**

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -201,7 +201,7 @@ protected io.micronaut.core.annotation.AnnotationValue readNestedAnnotationValue
     }
 
     /**
-     * Return a mirror for the given annotation
+     * Return a mirror for the given annotation.
      *
      * @param annotationName The annotation name
      * @return An optional mirror
@@ -331,8 +331,6 @@ private void processAnnotationAlias(
         }
     }
 
-
-
     private AnnotationMetadata buildInternal(T parent, T element, DefaultAnnotationMetadata annotationMetadata, boolean inheritTypeAnnotations) {
         List<T> hierarchy = buildHierarchy(element, inheritTypeAnnotations);
         if (parent != null) {

File: inject/src/main/java/io/micronaut/inject/qualifiers/NameQualifier.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.inject.BeanType;
 
 import javax.inject.Named;
-import java.lang.annotation.Annotation;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.context.annotation.Parameter;
 import io.micronaut.context.annotation.Value;
 import io.micronaut.core.annotation.AnnotationMetadata;
-import io.micronaut.core.annotation.AnnotationUtil;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.reflect.ReflectionUtils;
 import io.micronaut.core.type.Argument;
@@ -542,7 +541,7 @@ private void finalizeTypeArguments() {
             // invoke the AbstractBeanDefinition.createMap method
             visitor.invokeStatic(Type.getType(CollectionUtils.class), METHOD_MAP_OF);
             visitor.returnValue();
-            visitor.visitMaxs(1,1);
+            visitor.visitMaxs(1, 1);
             visitor.visitEnd();
         }
     }

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -152,7 +152,7 @@ protected ReadWriteLock getLock(Object object) {
 
     private void refreshSubsetOfConfigurationProperties(Set<String> keySet) {
         Collection<BeanRegistration<?>> registrations =
-            beanContext.getBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
+            beanContext.getActiveBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
         for (BeanRegistration<?> registration : registrations) {
             BeanDefinition<?> definition = registration.getBeanDefinition();
             Optional<String> value = definition.getValue(ConfigurationReader.class, "prefix", String.class);
@@ -167,7 +167,7 @@ private void refreshSubsetOfConfigurationProperties(Set<String> keySet) {
 
     private void refreshAllConfigurationProperties() {
         Collection<BeanRegistration<?>> registrations =
-            beanContext.getBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
+            beanContext.getActiveBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
         for (BeanRegistration<?> registration : registrations) {
             beanContext.refreshBean(registration.getIdentifier());
         }

File: core/src/main/java/io/micronaut/core/reflect/GenericTypeUtils.java
Patch:
@@ -166,7 +166,7 @@ public static Optional<Class> resolveInterfaceTypeArgument(Class type, Class int
      * @param genericType The generic type
      * @return An {@link Optional} of the type
      */
-    private static Optional<Class> resolveSingleTypeArgument(Type genericType) {
+        private static Optional<Class> resolveSingleTypeArgument(Type genericType) {
         if (genericType instanceof ParameterizedType) {
             ParameterizedType pt = (ParameterizedType) genericType;
             Type[] actualTypeArguments = pt.getActualTypeArguments();

File: function/src/main/java/io/micronaut/function/FunctionBean.java
Patch:
@@ -21,6 +21,7 @@
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Executable;
 
+import javax.inject.Named;
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -45,12 +46,14 @@
      * @return An optional ID of the function which may or may not be used depending on the target platform
      */
     @AliasFor(member = "name")
+    @AliasFor(annotation = Named.class, member = "value")
     String value() default "";
 
     /**
      * @return An optional ID of the function which may or may not be used depending on the target platform
      */
     @AliasFor(member = "value")
+    @AliasFor(annotation = Named.class, member = "value")
     String name() default "";
 
     /**

File: inject-java/src/main/java/io/micronaut/annotation/processing/PublicMethodVisitor.java
Patch:
@@ -118,7 +118,7 @@ public R visitDeclared(DeclaredType type, P p) {
      */
     protected boolean isAcceptable(ExecutableElement executableElement) {
         Set<Modifier> modifiers = executableElement.getModifiers();
-        return modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.FINAL);
+        return modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.FINAL) && !modifiers.contains(Modifier.STATIC);
     }
 
     /**

File: inject/src/main/java/io/micronaut/inject/qualifiers/NameQualifier.java
Patch:
@@ -56,8 +56,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
                 String typeName;
                 AnnotationMetadata annotationMetadata = candidate.getAnnotationMetadata();
                 // here we resolved the declared Qualifier of the bean
-                Optional<Class<? extends Annotation>> qualifierType = annotationMetadata.getDeclaredAnnotationTypeByStereotype(javax.inject.Qualifier.class);
-                Optional<String> beanQualifier = qualifierType.isPresent() && qualifierType.get() == Named.class ? annotationMetadata.getValue(Named.class, String.class) : Optional.empty();
+                Optional<String> beanQualifier = annotationMetadata.getValue(Named.class, String.class);
                 typeName = beanQualifier.orElseGet(() -> {
                     if (candidate instanceof NameResolver) {
                         Optional<String> resolvedName = ((NameResolver) candidate).resolveName();

File: management/src/main/java/io/micronaut/management/endpoint/processors/DeleteEndpointRouteBuilder.java
Patch:
@@ -41,15 +41,13 @@ public class DeleteEndpointRouteBuilder extends AbstractEndpointRouteBuilder {
      * @param beanContext       The application contect
      * @param uriNamingStrategy The URI naming strategy
      * @param conversionService The conversion service
-     * @param nonPathTypesProviders A list of providers which defines types not to be used as Path parameters
      * @param endpointDefaultConfiguration Endpoints default Configuration
      */
     public DeleteEndpointRouteBuilder(ApplicationContext beanContext,
                                       UriNamingStrategy uriNamingStrategy,
                                       ConversionService<?> conversionService,
-                                      Collection<NonPathTypesProvider> nonPathTypesProviders,
                                       EndpointDefaultConfiguration endpointDefaultConfiguration) {
-        super(beanContext, uriNamingStrategy, conversionService, nonPathTypesProviders, endpointDefaultConfiguration);
+        super(beanContext, uriNamingStrategy, conversionService, endpointDefaultConfiguration);
     }
 
     @Override

File: management/src/main/java/io/micronaut/management/endpoint/processors/ReadEndpointRouteBuilder.java
Patch:
@@ -41,15 +41,13 @@ public class ReadEndpointRouteBuilder extends AbstractEndpointRouteBuilder {
      * @param beanContext The application context
      * @param uriNamingStrategy The URI naming strategy
      * @param conversionService The conversion service
-     * @param nonPathTypesProviders A list of providers which defines types not to be used as Path parameters
      * @param endpointDefaultConfiguration Endpoints default Configuration
      */
     public ReadEndpointRouteBuilder(ApplicationContext beanContext,
                                     UriNamingStrategy uriNamingStrategy,
                                     ConversionService<?> conversionService,
-                                    Collection<NonPathTypesProvider> nonPathTypesProviders,
                                     EndpointDefaultConfiguration endpointDefaultConfiguration) {
-        super(beanContext, uriNamingStrategy, conversionService, nonPathTypesProviders, endpointDefaultConfiguration);
+        super(beanContext, uriNamingStrategy, conversionService, endpointDefaultConfiguration);
     }
 
     @Override

File: management/src/main/java/io/micronaut/management/endpoint/processors/WriteEndpointRouteBuilder.java
Patch:
@@ -45,15 +45,13 @@ public class WriteEndpointRouteBuilder extends AbstractEndpointRouteBuilder {
      * @param beanContext       The application context
      * @param uriNamingStrategy The URI naming strategy
      * @param conversionService The conversion service
-     * @param nonPathTypesProviders A list of providers which defines types not to be used as Path parameters
      * @param endpointDefaultConfiguration Endpoints default Configuration
      */
     public WriteEndpointRouteBuilder(ApplicationContext beanContext,
                                      UriNamingStrategy uriNamingStrategy,
                                      ConversionService<?> conversionService,
-                                     Collection<NonPathTypesProvider> nonPathTypesProviders,
                                      EndpointDefaultConfiguration endpointDefaultConfiguration) {
-        super(beanContext, uriNamingStrategy, conversionService, nonPathTypesProviders, endpointDefaultConfiguration);
+        super(beanContext, uriNamingStrategy, conversionService, endpointDefaultConfiguration);
     }
 
     @Override

File: spring/src/main/java/io/micronaut/spring/tx/annotation/TransactionInterceptor.java
Patch:
@@ -107,7 +107,7 @@ protected TransactionAttribute resolveTransactionAttribute(
             //noinspection unchecked
             attribute.setRollbackFor(annotation.get("rollbackFor", Class[].class).orElse(ReflectionUtils.EMPTY_CLASS_ARRAY));
             //noinspection unchecked
-            attribute.setRollbackFor(annotation.get("noRollbackFor", Class[].class).orElse(ReflectionUtils.EMPTY_CLASS_ARRAY));
+            attribute.setNoRollbackFor(annotation.get("noRollbackFor", Class[].class).orElse(ReflectionUtils.EMPTY_CLASS_ARRAY));
             attribute.setPropagationBehavior(annotation.getRequiredValue("propagation", Propagation.class).value());
             attribute.setIsolationLevel(annotation.getRequiredValue("isolation", Isolation.class).value());
             attribute.setQualifier(transactionManagerName);

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -536,7 +536,7 @@ private HttpClient getClient(MethodInvocationContext<Object, Object> context, An
 
                     DeserializationFeature[] disabledDeserializationFeatures = jacksonFeatures.get("disabledDeserializationFeatures", DeserializationFeature[].class).orElse(null);
 
-                    if (enabledDeserializationFeatures != null) {
+                    if (disabledDeserializationFeatures != null) {
                         for (DeserializationFeature feature : disabledDeserializationFeatures) {
                             objectMapper.configure(feature, false);
                         }

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/CookieAnnotationBinder.java
Patch:
@@ -53,7 +53,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> argument, HttpRequest<
         ConvertibleValues<io.micronaut.http.cookie.Cookie> parameters = source.getCookies();
         AnnotationMetadata annotationMetadata = argument.getAnnotationMetadata();
         String parameterName = annotationMetadata.getValue(CookieValue.class, String.class)
-                                                 .orElse(null);
+                                                 .orElse(argument.getArgument().getName());
         return doBind(argument, parameters, parameterName);
     }
 

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/HeaderAnnotationBinder.java
Patch:
@@ -48,7 +48,7 @@ public HeaderAnnotationBinder(ConversionService<?> conversionService) {
     public BindingResult<T> bind(ArgumentConversionContext<T> argument, HttpRequest<?> source) {
         ConvertibleMultiValues<String> parameters = source.getHeaders();
         AnnotationMetadata annotationMetadata = argument.getAnnotationMetadata();
-        String parameterName = annotationMetadata.getValue(Header.class, String.class).orElse(null);
+        String parameterName = annotationMetadata.getValue(Header.class, String.class).orElse(argument.getArgument().getName());
         return doBind(argument, parameters, parameterName);
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1218,7 +1218,7 @@ private BeanDefinitionWriter createBeanDefinitionWriterFor(TypeElement typeEleme
             if (configurationMetadata != null) {
                 // unfortunate we have to do this
                 String existingPrefix = annotationMetadata.getValue(
-                        "io.micronaut.management.endpoint.Endpoint",
+                        ConfigurationReader.class,
                         "prefix", String.class)
                         .orElse("");
 

File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -83,11 +83,11 @@ public class DefaultAnnotationMetadata extends AbstractAnnotationMetadata implem
     Map<String, Map<CharSequence, Object>> allStereotypes;
     Map<String, List<String>> annotationsByStereotype;
 
-    private Map<Class, List<io.micronaut.core.annotation.AnnotationValue>> annotationValuesByType = new HashMap<>();
-    // The following fields are used only at compile time, and
     // should not be used in any of the read methods
+    // The following fields are used only at compile time, and
     Map<String, Map<CharSequence, Object>> annotationDefaultValues;
     private Map<String, String> repeated = null;
+    private Map<Class, List<io.micronaut.core.annotation.AnnotationValue>> annotationValuesByType = new HashMap<>();
 
     /**
      * Constructs empty annotation metadata.

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -155,7 +155,7 @@ private void refreshSubsetOfConfigurationProperties(Set<String> keySet) {
             beanContext.getBeanRegistrations(Qualifiers.byStereotype(ConfigurationProperties.class));
         for (BeanRegistration<?> registration : registrations) {
             BeanDefinition<?> definition = registration.getBeanDefinition();
-            Optional<String> value = definition.getValue(ConfigurationReader.class, String.class);
+            Optional<String> value = definition.getValue(ConfigurationReader.class, "prefix", String.class);
             if (value.isPresent()) {
                 String configPrefix = value.get();
                 if (keySet.stream().anyMatch(key -> key.startsWith(configPrefix))) {

File: management/src/main/java/io/micronaut/management/endpoint/Endpoint.java
Patch:
@@ -20,7 +20,6 @@
 
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.ConfigurationReader;
-import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.annotation.Requires;
 
 import javax.inject.Singleton;

File: management/src/main/java/io/micronaut/management/endpoint/loggers/impl/DefaultLoggersManager.java
Patch:
@@ -17,7 +17,7 @@
  */
 @Singleton
 @Requires(beans = LoggersEndpoint.class)
-public class RxLoggersManager implements LoggersManager<Map<String, Object>> {
+public class DefaultLoggersManager implements LoggersManager<Map<String, Object>> {
 
     @Override
     public Publisher<Map<String, Object>> getLoggers(LoggingSystem loggingSystem) {

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggersEndpoint.java
Patch:
@@ -27,6 +27,7 @@
 
 import javax.annotation.Nullable;
 import javax.validation.constraints.NotBlank;
+import java.util.Map;
 
 /**
  * Exposes an {@link Endpoint} to manage loggers.
@@ -76,7 +77,7 @@ public LoggersEndpoint(LoggingSystem loggingSystem,
      * @return the loggers as a {@link Single}
      */
     @Read
-    public Single loggers() {
+    public Single<Map<String, Object>> loggers() {
         return Single.fromPublisher(loggersManager.getLoggers(loggingSystem));
     }
 
@@ -85,7 +86,7 @@ public Single loggers() {
      * @return the {@link LogLevel} (both configured and effective) of the named logger
      */
     @Read
-    public Single logger(@QueryValue @NotBlank String name) {
+    public Single<Map<String, Object>> logger(@QueryValue @NotBlank String name) {
         return Single.fromPublisher(loggersManager.getLogger(loggingSystem, name));
     }
 

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.core.annotation;
 
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 
 import java.lang.annotation.*;
@@ -111,7 +110,7 @@ public static List<String> internListOf(Object... objects) {
      *
      * @param values The objects
      * @return An unmodifiable set of strings
-     * @see CollectionUtils#mapOf(Object...)
+     * @see io.micronaut.core.util.CollectionUtils#mapOf(Object...)
      */
     @SuppressWarnings("unused")
     public static Map<String, Object> internMapOf(Object... values) {

File: core/src/main/java/io/micronaut/core/annotation/AnnotationUtil.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.core.annotation;
 
-import io.micronaut.core.util.CollectionUtils;
 import io.micronaut.core.util.StringUtils;
 
 import java.lang.annotation.*;
@@ -111,7 +110,7 @@ public static List<String> internListOf(Object... objects) {
      *
      * @param values The objects
      * @return An unmodifiable set of strings
-     * @see CollectionUtils#mapOf(Object...)
+     * @see io.micronaut.core.util.CollectionUtils#mapOf(Object...)
      */
     @SuppressWarnings("unused")
     public static Map<String, Object> internMapOf(Object... values) {

File: core/src/main/java/io/micronaut/core/convert/TypeConverter.java
Patch:
@@ -26,7 +26,9 @@
  * You should NOT perform any overly complex, blocking or slow conversions in implementations of this interface.
  * </p>
  * <p>
- * <p>If dependency injection is required, carefully consider what you inject. Databases and I/O bound interfaces are not good candidates.</p>
+ * <p>If dependency injection is required, carefully consider what you inject. Databases and I/O bound interfaces are not good candidates.
+ * In addition, injecting dependencies that may trigger the evaluation of beans that depend on configuration will cause problems because
+ * all type converters have not been registered yet.</p>
  *
  * @param <S> The source type
  * @param <T> The target type

File: inject/src/main/java/io/micronaut/context/DefaultFieldInjectionPoint.java
Patch:
@@ -25,7 +25,6 @@
 import io.micronaut.inject.FieldInjectionPoint;
 
 import javax.annotation.Nullable;
-import javax.inject.Qualifier;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.util.Objects;

File: inject/src/main/java/io/micronaut/context/event/BeanEvent.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micronaut.context.BeanContext;
 import io.micronaut.inject.BeanDefinition;
-import io.micronaut.inject.BeanIdentifier;
 
 /**
  * An abstract bean event.

File: configurations/kafka-streams/src/main/java/io/micronaut/configuration/kafka/streams/DefaultKafkaStreamsConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.configuration.kafka.streams;
 
 import io.micronaut.configuration.kafka.config.KafkaDefaultConfiguration;
+import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.runtime.ApplicationConfiguration;
@@ -37,6 +38,7 @@
 @Singleton
 @Requires(beans = KafkaDefaultConfiguration.class)
 @Named("default")
+@Primary
 public class DefaultKafkaStreamsConfiguration<K, V> extends AbtractKafkaStreamsConfiguration<K, V> {
     /**
      * Construct a new {@link KafkaStreamsConfiguration} for the given defaults.

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggersEndpoint.java
Patch:
@@ -91,6 +91,7 @@ public Single logger(@QueryValue @NotBlank String name) {
     /**
      * @param name The name of the logger to configure
      * @param configuredLevel The {@link LogLevel} to set on the named logger
+     * @return The {@link HttpResponse} with status code and message on error
      */
     @Write
     public HttpResponse setLogLevel(@QueryValue @NotBlank String name,
@@ -99,8 +100,7 @@ public HttpResponse setLogLevel(@QueryValue @NotBlank String name,
             loggersManager.setLogLevel(loggingSystem, name,
                     configuredLevel != null ? configuredLevel : LogLevel.NOT_SPECIFIED);
             return HttpResponse.ok();
-        }
-        catch (IllegalArgumentException ex) {
+        } catch (IllegalArgumentException ex) {
             return HttpResponse.badRequest(ex.getMessage());
         }
     }

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggingSystem.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collection;
 
 /**
- * Abstraction for a logging system
+ * Abstraction for a logging system.
  *
  * @author Matthew Moss
  * @since 1.0

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -128,7 +128,9 @@ public static Map<String, Object> internMapOf(Object... values) {
         Map<String, Object> answer = new HashMap<>(len / 2);
         int i = 0;
         while (i < values.length - 1) {
-            answer.put(values[i++].toString().intern(), values[i++]);
+            String key = values[i++].toString().intern();
+            Object val = values[i++];
+            answer.put(key, val);
         }
         return answer;
     }

File: http-netty/src/main/java/io/micronaut/http/netty/NettyMutableHttpResponse.java
Patch:
@@ -182,6 +182,7 @@ public NettyMutableHttpResponse<B> body(B body) {
      */
     public NettyMutableHttpResponse replace(ByteBuf body) {
         this.nettyResponse = this.nettyResponse.replace(body);
+        this.headers.setNettyHeaders(this.nettyResponse.headers());
         return this;
     }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaConfigurationMetadataBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.annotation.ConfigurationReader;
 import io.micronaut.context.annotation.EachProperty;
 import io.micronaut.core.annotation.AnnotationMetadata;
+import io.micronaut.core.util.StringUtils;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
 
 import javax.lang.model.element.Element;
@@ -130,9 +131,9 @@ private Function<String, String> pathEvaluationFunctionForMetadata(AnnotationMet
             if (annotationMetadata.hasDeclaredAnnotation(EachProperty.class)) {
                 return path + ".*";
             }
-            String prefix = annotationMetadata.getValue("io.micronaut.management.endpoint.Endpoint", "prefix", String.class)
+            String prefix = annotationMetadata.getValue(ConfigurationReader.class, "prefix", String.class)
                 .orElse(null);
-            if (prefix != null) {
+            if (StringUtils.isNotEmpty(prefix)) {
                 return prefix + "." + path;
             } else {
                 return path;

File: management/src/main/java/io/micronaut/management/endpoint/Endpoint.java
Patch:
@@ -39,8 +39,7 @@
 @Retention(RUNTIME)
 @Target(ElementType.TYPE)
 @Singleton
-@ConfigurationReader
-@Executable
+@ConfigurationReader(prefix = EndpointConfiguration.PREFIX)
 @Requires(condition = EndpointEnabledCondition.class)
 public @interface Endpoint {
 

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LogLevel.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.loggers;
 
 /**

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggerConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 
 /**
- * Represents the configuration of a {@link LoggingSystem} logger
+ * Represents the configuration of a {@link LoggingSystem} logger.
  *
  * @author Matthew Moss
  * @since 1.0

File: management/src/main/java/io/micronaut/management/endpoint/loggers/LoggingSystem.java
Patch:
@@ -29,22 +29,22 @@
 public interface LoggingSystem {
 
     /**
-     * Returns all existing loggers
+     * Returns all existing loggers.
      *
      * @return A {@link Collection} of {@link LoggerConfiguration} instances for all existing loggers
      */
     Collection<LoggerConfiguration> getLoggers();
 
     /**
-     * Returns a {@link LoggerConfiguration} for the logger found by name (or created if not found)
+     * Returns a {@link LoggerConfiguration} for the logger found by name (or created if not found).
      *
      * @param name the logger name
      * @return the logger configuration
      */
     LoggerConfiguration getLogger(@NotBlank String name);
 
     /**
-     * Set the log level for the logger found by name (or created if not found)
+     * Set the log level for the logger found by name (or created if not found).
      *
      * @param name the logger name
      * @param level the log level to set on the named logger

File: management/src/main/java/io/micronaut/management/endpoint/loggers/impl/LogbackLoggingSystem.java
Patch:
@@ -12,6 +12,9 @@
 
 // TODO Implement methods of this class against logback.
 
+/**
+ * An implementation of {@link LoggingSystem} that works with logback.
+ */
 @Singleton
 @Requires(beans = LoggersEndpoint.class)
 public class LogbackLoggingSystem implements LoggingSystem {

File: management/src/main/java/io/micronaut/management/endpoint/loggers/impl/RxLoggersDataCollector.java
Patch:
@@ -9,6 +9,9 @@
 import javax.inject.Singleton;
 import java.util.*;
 
+/**
+ * Default implementation of {@link LoggersDataCollector}.
+ */
 @Singleton
 @Requires(beans = LoggersEndpoint.class)
 public class RxLoggersDataCollector implements LoggersDataCollector<Map<String, Object>> {

File: inject/src/main/java/io/micronaut/context/DefaultBeanResolutionContext.java
Patch:
@@ -290,7 +290,7 @@ static class FieldSegment extends AbstractSegment {
         FieldSegment(BeanDefinition declaringClass, FieldInjectionPoint fieldInjectionPoint) {
             super(declaringClass,
                 fieldInjectionPoint.getName(),
-                Argument.of(fieldInjectionPoint.getField()));
+                fieldInjectionPoint.asArgument());
         }
 
         @Override

File: configurations/picocli/src/test/java/io/micronaut/configuration/picocli/MicronautFactoryTest.java
Patch:
@@ -33,7 +33,6 @@
 import static org.junit.Assert.*;
 
 public class MicronautFactoryTest {
-    @Ignore("Why does this test fail?")
     @Test
     public void createDelegatesToApplicationContext() throws Exception {
         System.setProperty("a.name", "testValue");
@@ -46,7 +45,7 @@ public void createDelegatesToApplicationContext() throws Exception {
         A a = factory.create(A.class);
         A another = applicationContext.getBean(A.class);
 
-        assertSame("injected value is available", another, a);
+        assertSame("can get singleton A from factory and context", another, a);
         assertEquals("injected value is available", "testValue", a.injectedValue);
 
         applicationContext.close();

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/ConsulOperations.java
Patch:
@@ -44,7 +44,7 @@ public interface ConsulOperations {
      * @param value The value as a String
      * @return A {@link Publisher} that emits a boolean if the operation succeeded
      */
-    @Put(uri = "/kv/{key}", consumes = MediaType.TEXT_PLAIN)
+    @Put(uri = "/kv/{+key}", consumes = MediaType.TEXT_PLAIN)
     @Produces(value = MediaType.TEXT_PLAIN, single = true)
     Publisher<Boolean> putValue(String key, @Body String value);
 
@@ -54,7 +54,7 @@ public interface ConsulOperations {
      * @param key The key to read
      * @return A {@link Publisher} that emits a list of {@link KeyValue}
      */
-    @Get("/kv/{key}?recurse")
+    @Get("/kv/{+key}?recurse")
     @Produces(single = true)
     Publisher<List<KeyValue>> readValues(String key);
 
@@ -67,7 +67,7 @@ public interface ConsulOperations {
      * @param seperator  The separator to use
      * @return A {@link Publisher} that emits a list of {@link KeyValue}
      */
-    @Get("/kv/{key}?recurse=true{&dc}{&raw}{&seperator}")
+    @Get("/kv/{+key}?recurse=true{&dc}{&raw}{&seperator}")
     @Produces(single = true)
     @Retryable(
         attempts = "${" + ConsulConfiguration.ConsulConfigDiscoveryConfiguration.PREFIX + ".retryCount:3}",

File: runtime/src/main/java/io/micronaut/discovery/config/ConfigDiscoveryConfiguration.java
Patch:
@@ -36,7 +36,7 @@ public abstract class ConfigDiscoveryConfiguration implements Toggleable {
     /**
      * The default path.
      */
-    public static final String DEFAULT_PATH = "/" + PREFIX + "/";
+    public static final String DEFAULT_PATH = PREFIX + "/";
 
     private boolean enabled = true;
     private String path;

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -42,7 +42,6 @@
 import io.netty.handler.codec.http.cookie.ClientCookieEncoder;
 import org.reactivestreams.Publisher;
 
-import java.net.InetSocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.charset.Charset;

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -229,6 +229,9 @@ public Collection<PropertySource> getPropertySources() {
     @Override
     public Environment start() {
         if (running.compareAndSet(false, true)) {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Starting environment {} for active names {}", this, getActiveNames() );
+            }
             if (reading.compareAndSet(false, true)) {
 
                 readPropertySources(getPropertySourceRootName());

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/binder/web/MetricsPublisher.java
Patch:
@@ -38,6 +38,7 @@
  * @author Christian Oestreich
  * @since 1.0
  */
+@SuppressWarnings("PublisherImplementation")
 public class MetricsPublisher implements Publisher<MutableHttpResponse<?>> {
 
     private static final String WEB_METRIC_NAME = "http.server.requests";

File: spring/src/main/java/io/micronaut/spring/tx/datasource/DataSourceTransactionManagerFactory.java
Patch:
@@ -35,6 +35,7 @@
  */
 @Factory
 @Requires(classes = DataSourceTransactionManager.class)
+@Requires(condition = HibernatePresenceCondition.class)
 public class DataSourceTransactionManagerFactory {
 
     /**

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1221,7 +1221,8 @@ protected <T> T doCreateBean(BeanResolutionContext resolutionContext,
                                  Qualifier<T> qualifier,
                                  boolean isSingleton,
                                  Map<String, Object> argumentValues) {
-        BeanRegistration<T> beanRegistration = isSingleton && !beanDefinition.isIterable() ? singletonObjects.get(new BeanKey(beanDefinition.getBeanType(), qualifier)) : null;
+        BeanKey beanKey = new BeanKey(beanDefinition.getBeanType(), qualifier);
+        BeanRegistration<T> beanRegistration = isSingleton && !beanDefinition.isIterable() ? singletonObjects.get(beanKey) : null;
         T bean;
         if (beanRegistration != null) {
             return beanRegistration.bean;
@@ -1304,7 +1305,7 @@ protected <T> T doCreateBean(BeanResolutionContext resolutionContext,
 
             Collection<BeanCreatedEventListener> beanCreatedEventListeners = getBeansOfType(resolutionContext, BeanCreatedEventListener.class, Qualifiers.byTypeArguments(beanDefinition.getBeanType()));
             for (BeanCreatedEventListener listener : beanCreatedEventListeners) {
-                bean = (T) listener.onCreated(new BeanCreatedEvent(this, beanDefinition, bean));
+                bean = (T) listener.onCreated(new BeanCreatedEvent(this, beanDefinition, beanKey, bean));
                 if (bean == null) {
                     throw new BeanInstantiationException(resolutionContext, "Listener [" + listener + "] returned null from onCreated event");
                 }

File: inject/src/main/java/io/micronaut/context/event/BeanEvent.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micronaut.context.BeanContext;
 import io.micronaut.inject.BeanDefinition;
+import io.micronaut.inject.BeanIdentifier;
 
 /**
  * An abstract bean event.

File: runtime/src/main/java/io/micronaut/reactive/reactor/ReactorInstrumentation.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.context.exceptions.BeanContextException;
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.inject.BeanDefinition;
+import io.micronaut.inject.BeanIdentifier;
 import io.micronaut.inject.qualifiers.Qualifiers;
 import io.micronaut.scheduling.TaskExecutors;
 import org.slf4j.Logger;
@@ -71,7 +72,7 @@ void init(BeanContext beanContext, ThreadFactory threadFactory) {
                         public ScheduledExecutorService decorateExecutorService(String schedulerType, Supplier<? extends ScheduledExecutorService> actual) {
                             ScheduledExecutorService scheduledExecutorService = actual.get();
                             for (BeanCreatedEventListener schedulerCreateListener : schedulerCreateListeners) {
-                                Object newBean = schedulerCreateListener.onCreated(new BeanCreatedEvent(beanContext, beanDefinition, scheduledExecutorService));
+                                Object newBean = schedulerCreateListener.onCreated(new BeanCreatedEvent(beanContext, beanDefinition, BeanIdentifier.of("reactor-" + schedulerType), scheduledExecutorService));
                                 if (!(newBean instanceof ScheduledExecutorService)) {
                                     throw new BeanContextException("Bean creation listener [" + schedulerCreateListener + "] should return ScheduledExecutorService, but returned " + newBean);
                                 }

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java
Patch:
@@ -178,7 +178,7 @@ public interface AnnotationMetadata extends AnnotatedElement {
      * @return A list of values
      */
     List<ConvertibleValues<Object>> getDeclaredAnnotationValuesByType(Class<? extends Annotation> annotationType);
-    
+
     /**
      * Return the default value for the given annotation member.
      *

File: http/src/main/java/io/micronaut/http/HttpRequestFactory.java
Patch:
@@ -33,7 +33,7 @@ public interface HttpRequestFactory {
      * The default {@link io.micronaut.http.cookie.CookieFactory} instance.
      */
     Optional<HttpRequestFactory> INSTANCE = SoftServiceLoader.load(HttpRequestFactory.class)
-        .firstOr("io.micronaut.http.client.NettyClientHttpRequestFactory", HttpRequestFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.SimpleHttpRequestFactory", HttpRequestFactory.class.getClassLoader())
         .map(ServiceDefinition::load);
 
     /**

File: http/src/main/java/io/micronaut/http/HttpResponseFactory.java
Patch:
@@ -33,7 +33,7 @@ public interface HttpResponseFactory {
      * The default {@link io.micronaut.http.cookie.CookieFactory} instance.
      */
     Optional<HttpResponseFactory> INSTANCE = SoftServiceLoader.load(HttpResponseFactory.class)
-        .firstOr("io.micronaut.http.server.netty.NettyHttpResponseFactory", HttpResponseFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.SimpleHttpResponseFactory", HttpResponseFactory.class.getClassLoader())
         .map(ServiceDefinition::load);
 
     /**

File: http/src/main/java/io/micronaut/http/cookie/CookieFactory.java
Patch:
@@ -32,7 +32,7 @@ public interface CookieFactory {
      */
     CookieFactory INSTANCE = SoftServiceLoader
         .load(CookieFactory.class)
-        .firstOr("io.micronaut.http.netty.cookies.NettyCookieFactory", CookieFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.cookies.SimpleCookieFactory", CookieFactory.class.getClassLoader())
         .map(ServiceDefinition::load)
         .orElse(null);
 

File: http/src/main/java/io/micronaut/http/simple/SimpleHttpResponse.java
Patch:
@@ -32,6 +32,8 @@
 /**
  * Simple {@link MutableHttpResponse} implementation.
  *
+ * @param <B> the type of the body
+ *
  * @author Vladimir Orany
  * @since 1.0
  */
@@ -85,4 +87,4 @@ public HttpStatus getStatus() {
     public Cookies getCookies() {
         return cookies;
     }
-}
\ No newline at end of file
+}

File: http/src/main/java/io/micronaut/http/HttpRequestFactory.java
Patch:
@@ -33,7 +33,7 @@ public interface HttpRequestFactory {
      * The default {@link io.micronaut.http.cookie.CookieFactory} instance.
      */
     Optional<HttpRequestFactory> INSTANCE = SoftServiceLoader.load(HttpRequestFactory.class)
-        .firstOr("io.micronaut.http.client.NettyClientHttpRequestFactory", HttpRequestFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.SimpleHttpRequestFactory", HttpRequestFactory.class.getClassLoader())
         .map(ServiceDefinition::load);
 
     /**

File: http/src/main/java/io/micronaut/http/HttpResponseFactory.java
Patch:
@@ -33,7 +33,7 @@ public interface HttpResponseFactory {
      * The default {@link io.micronaut.http.cookie.CookieFactory} instance.
      */
     Optional<HttpResponseFactory> INSTANCE = SoftServiceLoader.load(HttpResponseFactory.class)
-        .firstOr("io.micronaut.http.server.netty.NettyHttpResponseFactory", HttpResponseFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.SimpleHttpResponseFactory", HttpResponseFactory.class.getClassLoader())
         .map(ServiceDefinition::load);
 
     /**

File: http/src/main/java/io/micronaut/http/cookie/CookieFactory.java
Patch:
@@ -32,7 +32,7 @@ public interface CookieFactory {
      */
     CookieFactory INSTANCE = SoftServiceLoader
         .load(CookieFactory.class)
-        .firstOr("io.micronaut.http.netty.cookies.NettyCookieFactory", CookieFactory.class.getClassLoader())
+        .firstOr("io.micronaut.http.simple.cookies.SimpleCookieFactory", CookieFactory.class.getClassLoader())
         .map(ServiceDefinition::load)
         .orElse(null);
 

File: configurations/postgres-reactive/src/main/java/io/micronaut/configuration/postgres/reactive/health/PgPoolHealthIndicator.java
Patch:
@@ -41,7 +41,7 @@
 public class PgPoolHealthIndicator implements HealthIndicator {
 
     public static final String NAME = "pgPool";
-    public static final String QUERY = "select datname as db, pg_size_pretty(pg_database_size(datname)) as size from pg_database order by pg_database_size(datname) desc;";
+    public static final String QUERY = "SELECT version();";
     private final PgPool client;
 
     /**

File: configurations/postgres-reactive/src/main/java/io/micronaut/configuration/postgres/reactive/PgPoolClientSettings.java
Patch:
@@ -24,5 +24,5 @@ public interface PgPoolClientSettings {
     /**
      * The prefix to use for all Reactive Postgres Client settings.
      */
-    String PREFIX = "reactive.pg.client";
+    String PREFIX = "postgres.reactive.client";
 }

File: management/src/main/java/io/micronaut/management/endpoint/EndpointsFilter.java
Patch:
@@ -25,9 +25,6 @@
 import io.micronaut.http.annotation.Filter;
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
-import io.micronaut.http.uri.UriTemplate;
-import io.micronaut.management.endpoint.health.HealthEndpoint;
-import io.micronaut.management.endpoint.processors.ReadEndpointRouteBuilder;
 import io.micronaut.web.router.MethodBasedRouteMatch;
 import io.micronaut.web.router.RouteMatch;
 import io.micronaut.web.router.RouteMatchUtils;

File: management/src/main/java/io/micronaut/management/endpoint/health/DetailsVisibility.java
Patch:
@@ -25,12 +25,12 @@
 public enum DetailsVisibility {
 
     /**
-     * Never show health details
+     * Never show health details.
      */
     NEVER,
 
     /**
-     * Only show health details to authenticated users
+     * Only show health details to authenticated users.
      */
     AUTHENTICATED,
 

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthLevelOfDetailResolver.java
Patch:
@@ -17,11 +17,8 @@
 package io.micronaut.management.endpoint.health;
 
 import io.micronaut.context.annotation.Value;
-import io.micronaut.management.endpoint.EndpointConfiguration;
-import io.micronaut.management.endpoint.EndpointDefaultConfiguration;
 
 import javax.annotation.Nullable;
-import javax.inject.Named;
 import javax.inject.Singleton;
 import java.security.Principal;
 
@@ -57,6 +54,8 @@ public HealthLevelOfDetail levelOfDetail(@Nullable Principal principal) {
                 break;
             case ANONYMOUS:
                 showDetails = true;
+            default:
+                // no-op
         }
         if (showDetails) {
             return HealthLevelOfDetail.STATUS_DESCRIPTION_DETAILS;

File: management/src/main/java/io/micronaut/management/endpoint/processors/AbstractEndpointRouteBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.type.Argument;
-import io.micronaut.http.HttpRequest;
 import io.micronaut.http.annotation.QueryValue;
 import io.micronaut.http.uri.UriTemplate;
 import io.micronaut.inject.BeanDefinition;

File: configurations/hibernate-validator/src/main/java/io/micronaut/configuration/hibernate/validator/DefaultParameterNameProvider.java
Patch:
@@ -64,7 +64,7 @@ public List<String> getParameterNames(Constructor<?> constructor) {
         if (INTERNAL_CLASS_NAMES.contains(declaringClass.getName())) {
             return doGetParameterNames(constructor);
         }
-        Optional<? extends BeanDefinition<?>> definition = beanContext.findBeanRegistration(declaringClass);
+        Optional<? extends BeanDefinition<?>> definition = beanContext.findBeanDefinition(declaringClass);
         return definition.map(def ->
             Arrays.stream(def.getConstructor().getArguments()).map(Argument::getName).collect(Collectors.toList())
         ).orElse(defaultParameterTypes(parameterTypes));

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/KafkaListener.java
Patch:
@@ -36,6 +36,7 @@
 @Retention(RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @MessageListener
+@Parallel(shutdownOnError = true)
 public @interface KafkaListener {
 
     /**

File: management/src/main/java/io/micronaut/management/endpoint/processors/AbstractEndpointRouteBuilder.java
Patch:
@@ -111,7 +111,7 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
      */
     protected Optional<String> resolveActiveEndPointId(Class<?> declaringType) {
         return endpointIds.computeIfAbsent(declaringType, aClass -> {
-            Optional<? extends BeanDefinition<?>> opt = beanContext.findBeanRegistration(declaringType);
+            Optional<? extends BeanDefinition<?>> opt = beanContext.findBeanDefinition(declaringType);
             if (opt.isPresent()) {
                 BeanDefinition<?> beanDefinition = opt.get();
                 if (beanDefinition.hasStereotype(Endpoint.class)) {

File: runtime/src/main/java/io/micronaut/scheduling/annotation/Scheduled.java
Patch:
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.context.annotation.Executable;
+import io.micronaut.context.annotation.Parallel;
 import io.micronaut.scheduling.TaskExecutors;
 
 import java.lang.annotation.Documented;
@@ -38,6 +39,7 @@
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Executable(processOnStartup = true)
 @Repeatable(Schedules.class)
+@Parallel
 public @interface Scheduled {
 
     /**

File: function/src/main/java/io/micronaut/function/executor/FunctionApplication.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.cli.CommandLine;
 
 import java.io.ByteArrayInputStream;
+import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.function.BiConsumer;
 
@@ -58,8 +59,7 @@ public static void main(String... args) {
      */
     public static void run(StreamFunctionExecutor functionExecutor, String... args) {
         parseData(args, (data, isDebug) -> {
-            ByteArrayInputStream input = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));
-            try {
+            try (InputStream input = data != null ? new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8)) : System.in) {
                 functionExecutor.execute(input, System.out);
             } catch (Exception e) {
                 exitWithError(isDebug, e);
@@ -96,7 +96,7 @@ static void parseData(String[] args, BiConsumer<String, Boolean> data) {
         if (value != null) {
             data.accept(value.toString(), commandLine.hasOption("x"));
         } else {
-            exitWithNoData();
+            data.accept(null, commandLine.hasOption("x"));
         }
     }
 

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/HandlerSubscriber.java
Patch:
@@ -211,7 +211,7 @@ private void doClose() {
     }
 
     private void maybeRequestMore() {
-        if (ctx.channel().isWritable()) {
+        if (ctx.channel().isWritable() && !(state == COMPLETE || state == CANCELLED)) {
             subscription.request(1);
         }
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -125,6 +125,7 @@ public class BeanDefinitionInjectProcessor extends AbstractInjectAnnotationProce
     private JavaConfigurationMetadataBuilder metadataBuilder;
     private Map<String, AnnBeanElementVisitor> beanDefinitionWriters;
     private Set<String> processed = new HashSet<>();
+    private boolean executed = false;
 
     @Override
     public final synchronized void init(ProcessingEnvironment processingEnv) {
@@ -135,9 +136,10 @@ public final synchronized void init(ProcessingEnvironment processingEnv) {
 
     @Override
     public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
-        if (annotations.isEmpty()) {
+        if (executed) {
             return false;
         }
+        executed = true;
 
         annotations = annotations
             .stream()

File: core/src/main/java/io/micronaut/core/bind/exceptions/UnsatisfiedArgumentException.java
Patch:
@@ -28,6 +28,7 @@
 public class UnsatisfiedArgumentException extends RuntimeException {
 
     private final Argument<?> argument;
+
     /**
      * @param argument The {@link Argument}
      */

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1503,7 +1503,7 @@ private static MediaTypeCodecRegistry createDefaultMediaTypeRegistry() {
         ObjectMapper objectMapper = new ObjectMapperFactory().objectMapper(Optional.empty(), Optional.empty());
         ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
         return MediaTypeCodecRegistry.of(
-            new JsonMediaTypeCodec(objectMapper, applicationConfiguration), new JsonStreamMediaTypeCodec(objectMapper, applicationConfiguration)
+            new JsonMediaTypeCodec(objectMapper, applicationConfiguration, null), new JsonStreamMediaTypeCodec(objectMapper, applicationConfiguration, null)
         );
     }
 

File: http-client/src/main/java/io/micronaut/http/client/sse/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.client.sse;
\ No newline at end of file
+package io.micronaut.http.client.sse;

File: http/src/main/java/io/micronaut/http/codec/MediaTypeCodec.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
+import java.util.Collection;
 
 /**
  * Represents a codec for a particular media type. For example JSON.
@@ -37,7 +38,7 @@ public interface MediaTypeCodec {
     /**
      * @return The media type of the codec
      */
-    MediaType getMediaType();
+    Collection<MediaType> getMediaTypes();
 
     /**
      * Decode the given type from the given {@link InputStream}.

File: http/src/main/java/io/micronaut/http/context/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.http.context;
\ No newline at end of file
+package io.micronaut.http.context;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -103,6 +103,9 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         return false;
     }
 
+    /**
+     * The class to visit the type elements.
+     */
     private class ElementVisitor extends ElementScanner8<Object, Object> {
 
         private final TypeElement concreteClass;

File: inject/src/main/java/io/micronaut/context/env/PropertyPlaceholderResolver.java
Patch:
@@ -42,6 +42,7 @@ public interface PropertyPlaceholderResolver {
     default String getPrefix() {
         return DefaultPropertyPlaceholderResolver.PREFIX;
     }
+
     /**
      * Resolve the placeholders and return an Optional String if it was possible to resolve them.
      *

File: management/src/main/java/io/micronaut/management/health/indicator/HealthResult.java
Patch:
@@ -21,7 +21,6 @@
 import javax.validation.constraints.NotNull;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Optional;
 
 /**
  * <p>Used to represent the output of a {@link HealthIndicator}.</p>

File: messaging/src/main/java/io/micronaut/messaging/MessagingApplication.java
Patch:
@@ -45,6 +45,7 @@ public class MessagingApplication implements EmbeddedApplication, Described {
 
     private final ApplicationContext applicationContext;
     private final ApplicationConfiguration configuration;
+
     /**
      * Constructs a new messaging application.
      *

File: runtime/src/main/java/io/micronaut/runtime/event/AbstractEmbeddedApplicationEvent.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.runtime.EmbeddedApplication;
-import io.micronaut.runtime.server.EmbeddedServer;
 
 /**
  * An abstract event for events specific to server applications.

File: runtime/src/main/java/io/micronaut/scheduling/instrument/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.scheduling.instrument;
\ No newline at end of file
+package io.micronaut.scheduling.instrument;

File: spring/src/main/java/io/micronaut/spring/beans/MicronautSpringBeanFactory.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.context.exceptions.BeanInstantiationException;
 import org.springframework.beans.factory.FactoryBean;
 
-import javax.inject.Singleton;
-import java.lang.annotation.Annotation;
 import java.util.Optional;
 
 /**

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/admin/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.admin;
\ No newline at end of file
+package io.micronaut.configuration.kafka.admin;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/bind/batch/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.bind.batch;
\ No newline at end of file
+package io.micronaut.configuration.kafka.bind.batch;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/DefaultKafkaConsumerConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.context.annotation.Requires;
-import org.apache.kafka.clients.consumer.ConsumerConfig;
 
 import javax.inject.Inject;
 import java.util.Properties;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/DefaultKafkaProducerConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Prototype;
 import io.micronaut.context.annotation.Requires;
-import org.apache.kafka.clients.producer.ProducerConfig;
 
 import javax.inject.Inject;
 import java.util.Properties;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/KafkaConsumerConfiguration.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.naming.NameUtils;
-import org.apache.kafka.clients.consumer.ConsumerConfig;
 
 import java.util.Properties;
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/KafkaProducerConfiguration.java
Patch:
@@ -21,7 +21,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.naming.NameUtils;
-import org.apache.kafka.clients.producer.ProducerConfig;
 
 import java.util.Properties;
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka;
\ No newline at end of file
+package io.micronaut.configuration.kafka;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConsumerConfiguration.java
Patch:
@@ -32,8 +32,6 @@
  */
 public abstract class AbstractKafkaConsumerConfiguration<K, V> extends AbstractKafkaConfiguration<K, V> {
 
-    static final Class DEFAULT_KEY_DESERIALIZER = org.apache.kafka.common.serialization.ByteArrayDeserializer.class;
-    static final Class DEFAULT_VALUE_DESERIALIZER = org.apache.kafka.common.serialization.StringDeserializer.class;
     private Deserializer<K> keyDeserializer;
     private Deserializer<V> valueDeserializer;
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/DefaultKafkaProducerConfiguration.java
Patch:
@@ -61,8 +61,6 @@ public DefaultKafkaProducerConfiguration(
     private void init(AbstractKafkaConfiguration defaultConfiguration) {
         Properties config = getConfig();
         config.putAll(defaultConfiguration.getConfig());
-        config.putIfAbsent(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, DEFAULT_KEY_SERIALIZER);
-        config.putIfAbsent(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, DEFAULT_VALUE_SERIALIZER);
 
         if (defaultConfiguration instanceof AbstractKafkaProducerConfiguration) {
             @SuppressWarnings("unchecked")

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/KafkaConsumerConfiguration.java
Patch:
@@ -59,8 +59,6 @@ public KafkaConsumerConfiguration(
         config.putAll(defaultConfiguration.getConfig());
         String propertyKey = PREFIX + '.' + NameUtils.hyphenate(consumerName, true);
         config.putAll(environment.getProperty(propertyKey, Properties.class).orElseGet(Properties::new));
-        config.putIfAbsent(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, DEFAULT_KEY_DESERIALIZER);
-        config.putIfAbsent(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DEFAULT_VALUE_DESERIALIZER);
     }
 
 }

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/KafkaProducerConfiguration.java
Patch:
@@ -61,8 +61,6 @@ public KafkaProducerConfiguration(
         config.putAll(defaultConfiguration.getConfig());
         String propertyKey = PREFIX + '.' + NameUtils.hyphenate(producerName, true);
         config.putAll(environment.getProperty(propertyKey, Properties.class).orElseGet(Properties::new));
-        config.putIfAbsent(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, DEFAULT_KEY_SERIALIZER);
-        config.putIfAbsent(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, DEFAULT_VALUE_SERIALIZER);
 
     }
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.annotation;
\ No newline at end of file
+package io.micronaut.configuration.kafka.annotation;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/bind/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.bind;
\ No newline at end of file
+package io.micronaut.configuration.kafka.bind;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.config;
\ No newline at end of file
+package io.micronaut.configuration.kafka.config;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/convert/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.convert;
\ No newline at end of file
+package io.micronaut.configuration.kafka.convert;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/embedded/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.embedded;
\ No newline at end of file
+package io.micronaut.configuration.kafka.embedded;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.exceptions;
\ No newline at end of file
+package io.micronaut.configuration.kafka.exceptions;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/executor/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.executor;
\ No newline at end of file
+package io.micronaut.configuration.kafka.executor;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/health/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.health;
\ No newline at end of file
+package io.micronaut.configuration.kafka.health;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/intercept/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.intercept;
\ No newline at end of file
+package io.micronaut.configuration.kafka.intercept;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/processor/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.processor;
\ No newline at end of file
+package io.micronaut.configuration.kafka.processor;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/scope/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.scope;
\ No newline at end of file
+package io.micronaut.configuration.kafka.scope;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/serde/package-info.java
Patch:
@@ -20,4 +20,4 @@
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.configuration.kafka.serde;
\ No newline at end of file
+package io.micronaut.configuration.kafka.serde;

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -216,7 +216,7 @@ public boolean hasNext() {
 
                     }
                 } catch (IOException e) {
-                    throw new ServiceConfigurationError("Failed to load resources for URL: " + url, e);
+                    // ignore, can't do anything here and can't log because class used in compiler
                 }
             }
             return unprocessed.hasNext();

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/executor/ConsumerExecutorServiceConfig.java
Patch:
@@ -45,6 +45,6 @@ public class ConsumerExecutorServiceConfig {
     @Bean
     @Named(TaskExecutors.MESSAGE_CONSUMER)
     ExecutorConfiguration configuration() {
-        return UserExecutorConfiguration.of(ExecutorType.SCHEDULED);
+        return UserExecutorConfiguration.of(ExecutorType.FIXED, 75);
     }
 }

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -55,6 +55,7 @@ public class PropertySourcePropertyResolver implements PropertyResolver {
     @SuppressWarnings("MagicNumber")
     protected final Map<String, Object>[] catalog = new Map[57];
     private final Random random = new Random();
+
     /**
      * Creates a new, initially empty, {@link PropertySourcePropertyResolver} for the given {@link ConversionService}.
      *
@@ -226,8 +227,7 @@ public <T> Optional<T> getProperty(@Nullable String name, ArgumentConversionCont
         Class<T> requiredType = conversionContext.getArgument().getType();
         if (Properties.class.isAssignableFrom(requiredType)) {
             return Optional.of((T) new Properties());
-        }
-        else if (Map.class.isAssignableFrom(requiredType)) {
+        } else if (Map.class.isAssignableFrom(requiredType)) {
             return Optional.of((T) Collections.emptyMap());
         }
         return Optional.empty();

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AbstractKafkaConfiguration<K, V> {
     public static final String EMBEDDED = "kafka.embedded.enabled";
 
     /**
-     * The topics that should be created
+     * The topics that should be created.
      */
     @SuppressWarnings("WeakerAccess")
     public static final String EMBEDDED_TOPICS = "kafka.embedded.topics";

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/embedded/KafkaEmbedded.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.util.*;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -124,7 +123,7 @@ public AbstractKafkaConfiguration onCreated(BeanCreatedEvent<AbstractKafkaConfig
                     Properties properties = new Properties();
                     properties.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, ("127.0.0.1:" + AbstractKafkaConfiguration.DEFAULT_KAFKA_PORT));
                     AdminClient adminClient = AdminClient.create(properties);
-                    adminClient.createTopics(topics.stream().map(s -> new NewTopic(s, 1, (short)1)).collect(Collectors.toList()))
+                    adminClient.createTopics(topics.stream().map(s -> new NewTopic(s, 1, (short) 1)).collect(Collectors.toList()))
                                .all().get();
                 }
             } catch (Throwable e) {

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/DefaultKafkaListenerExceptionHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.kafka.exceptions;
 
-import io.micronaut.core.exceptions.ExceptionHandler;
 import org.apache.kafka.clients.consumer.ConsumerRecord;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -25,7 +24,7 @@
 import java.util.Optional;
 
 /**
- * The default {@link ExceptionHandler} used when a {@link org.apache.kafka.clients.consumer.KafkaConsumer}
+ * The default ExceptionHandler used when a {@link org.apache.kafka.clients.consumer.KafkaConsumer}
  * fails to process a {@link org.apache.kafka.clients.consumer.ConsumerRecord}. By default just logs the error.
  *
  * @author graemerocher

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/KafkaListenerException.java
Patch:
@@ -65,7 +65,7 @@ public KafkaListenerException(String message, Throwable cause, Object listener,
         this.kafkaConsumer = kafkaConsumer;
         this.consumerRecord = consumerRecord;
     }
-
+    
     /**
      * Creates a new exception.
      *

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/KafkaClient.java
Patch:
@@ -27,7 +27,6 @@
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
-import java.time.Duration;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.configuration.kafka.config;
 
 import javax.annotation.Nonnull;
-import java.util.Map;
 import java.util.Properties;
 
 /**

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/KafkaListenerException.java
Patch:
@@ -65,6 +65,7 @@ public KafkaListenerException(String message, Throwable cause, Object listener,
         this.kafkaConsumer = kafkaConsumer;
         this.consumerRecord = consumerRecord;
     }
+
     /**
      * Creates a new exception.
      *

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/serde/CompositeSerdeRegistry.java
Patch:
@@ -27,7 +27,6 @@
 import javax.inject.Singleton;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.Function;
 
 /**
  * The default {@link SerdeRegistry} that combines multiple registries into a single registry.

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/KafkaListener.java
Patch:
@@ -88,7 +88,7 @@
     int threads() default 1;
 
     /**
-     * The timeout to use for calls to {@link org.apache.kafka.clients.consumer.Consumer#poll(long)}
+     * The timeout to use for calls to {@link org.apache.kafka.clients.consumer.Consumer#poll(long)}.
      *
      * @return The timeout. Defaults to 100ms
      */

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -29,7 +29,7 @@
  */
 public abstract class AbstractKafkaConfiguration<K, V> {
     /**
-     * The default kafka port
+     * The default kafka port.
      */
     public static final int DEFAULT_KAFKA_PORT = 9092;
     /**

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/embedded/KafkaEmbeddedConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public boolean isEnabled() {
     }
 
     /**
-     * Sets whether the embedded Kafka server is enabled
+     * Sets whether the embedded Kafka server is enabled.
      *
      * @param enabled True if it is.
      */
@@ -62,7 +62,7 @@ public void setEnabled(boolean enabled) {
     }
 
     /**
-     * Sets the broker properties
+     * Sets the broker properties.
      *
      * @param properties The broker properties.
      */

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/executor/ConsumerExecutorServiceConfig.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.kafka.executor;
 
-import io.micronaut.configuration.kafka.annotation.KafkaListener;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
@@ -29,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Configures a {@link java.util.concurrent.ScheduledExecutorService} for running {@link KafkaListener} instances.
+ * Configures a {@link java.util.concurrent.ScheduledExecutorService} for running {@link io.micronaut.configuration.kafka.annotation.KafkaListener} instances.
  *
  * @author Graeme Rocher
  * @since 1.0

File: configurations/netflix-ribbon/src/main/java/io/micronaut/configurations/ribbon/RibbonRxHttpClient.java
Patch:
@@ -69,6 +69,7 @@ public class RibbonRxHttpClient extends DefaultHttpClient {
      * Constructor.
      * @param loadBalancer loadBalancer
      * @param configuration configuration
+     * @param contextPath contextPath
      * @param threadFactory threadFactory
      * @param nettyClientSslBuilder nettyClientSslBuilder
      * @param codecRegistry codecRegistry

File: http/src/main/java/io/micronaut/http/context/ServerRequestContext.java
Patch:
@@ -63,6 +63,7 @@ public static void with(HttpRequest request, Runnable runnable) {
      *
      * @param request  The request
      * @param runnable The runnable
+     * @return The newly instrumented runnable
      */
     public static Runnable instrument(HttpRequest request, Runnable runnable) {
         return () -> with(request, runnable);

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -49,7 +49,6 @@
 import io.micronaut.inject.configuration.ConfigurationMetadataWriter;
 import io.micronaut.inject.configuration.PropertyMetadata;
 import io.micronaut.inject.processing.ProcessedTypes;
-import io.micronaut.inject.visitor.TypeElementVisitor;
 import io.micronaut.inject.writer.BeanDefinitionReferenceWriter;
 import io.micronaut.inject.writer.BeanDefinitionVisitor;
 import io.micronaut.inject.writer.BeanDefinitionWriter;
@@ -287,7 +286,7 @@ class AnnBeanElementVisitor extends ElementScanner8<Object, Object> {
         private ExecutableElementParamInfo constructorParamterInfo;
 
         /**
-         * @param concreteClass The {@link TypeElementVisitor}
+         * @param concreteClass The {@link TypeElement}
          */
         AnnBeanElementVisitor(TypeElement concreteClass) {
             this.concreteClass = concreteClass;

File: inject-java/src/main/java/io/micronaut/annotation/processing/TypeElementVisitorProcessor.java
Patch:
@@ -103,7 +103,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         return false;
     }
 
-    class ElementVisitor extends ElementScanner8<Object, Object> {
+    private class ElementVisitor extends ElementScanner8<Object, Object> {
 
         private final TypeElement concreteClass;
         private final List<LoadedVisitor> visitors;

File: runtime/src/main/java/io/micronaut/cache/DefaultSyncCache.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.inject.qualifiers.Qualifiers;
 
 import java.util.Optional;
-import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 

File: runtime/src/main/java/io/micronaut/reactive/reactor/ReactorInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.function.Supplier;
 
 /**
- * Instruments Reactor such that the thread factory used by Micronaut is used and instrumentations can be applied to the {@link java.util.concurrent.ScheduledExecutorService}
+ * Instruments Reactor such that the thread factory used by Micronaut is used and instrumentations can be applied to the {@link java.util.concurrent.ScheduledExecutorService}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -110,4 +110,4 @@ public Scheduler newSingle(ThreadFactory threadFactory) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/executor/ConsumerExecutorServiceConfig.java
Patch:
@@ -45,6 +45,6 @@ public class ConsumerExecutorServiceConfig {
     @Bean
     @Named(TaskExecutors.MESSAGE_CONSUMER)
     ExecutorConfiguration configuration() {
-        return UserExecutorConfiguration.of(ExecutorType.SCHEDULED);
+        return UserExecutorConfiguration.of(ExecutorType.FIXED, 75);
     }
 }

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -55,6 +55,7 @@ public class PropertySourcePropertyResolver implements PropertyResolver {
     @SuppressWarnings("MagicNumber")
     protected final Map<String, Object>[] catalog = new Map[57];
     private final Random random = new Random();
+
     /**
      * Creates a new, initially empty, {@link PropertySourcePropertyResolver} for the given {@link ConversionService}.
      *
@@ -226,8 +227,7 @@ public <T> Optional<T> getProperty(@Nullable String name, ArgumentConversionCont
         Class<T> requiredType = conversionContext.getArgument().getType();
         if (Properties.class.isAssignableFrom(requiredType)) {
             return Optional.of((T) new Properties());
-        }
-        else if (Map.class.isAssignableFrom(requiredType)) {
+        } else if (Map.class.isAssignableFrom(requiredType)) {
             return Optional.of((T) Collections.emptyMap());
         }
         return Optional.empty();

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AbstractKafkaConfiguration<K, V> {
     public static final String EMBEDDED = "kafka.embedded.enabled";
 
     /**
-     * The topics that should be created
+     * The topics that should be created.
      */
     @SuppressWarnings("WeakerAccess")
     public static final String EMBEDDED_TOPICS = "kafka.embedded.topics";

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/embedded/KafkaEmbedded.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.util.*;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -124,7 +123,7 @@ public AbstractKafkaConfiguration onCreated(BeanCreatedEvent<AbstractKafkaConfig
                     Properties properties = new Properties();
                     properties.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, ("127.0.0.1:" + AbstractKafkaConfiguration.DEFAULT_KAFKA_PORT));
                     AdminClient adminClient = AdminClient.create(properties);
-                    adminClient.createTopics(topics.stream().map(s -> new NewTopic(s, 1, (short)1)).collect(Collectors.toList()))
+                    adminClient.createTopics(topics.stream().map(s -> new NewTopic(s, 1, (short) 1)).collect(Collectors.toList()))
                                .all().get();
                 }
             } catch (Throwable e) {

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/DefaultKafkaListenerExceptionHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.kafka.exceptions;
 
-import io.micronaut.core.exceptions.ExceptionHandler;
 import org.apache.kafka.clients.consumer.ConsumerRecord;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -25,7 +24,7 @@
 import java.util.Optional;
 
 /**
- * The default {@link ExceptionHandler} used when a {@link org.apache.kafka.clients.consumer.KafkaConsumer}
+ * The default ExceptionHandler used when a {@link org.apache.kafka.clients.consumer.KafkaConsumer}
  * fails to process a {@link org.apache.kafka.clients.consumer.ConsumerRecord}. By default just logs the error.
  *
  * @author graemerocher

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/KafkaListenerException.java
Patch:
@@ -65,7 +65,7 @@ public KafkaListenerException(String message, Throwable cause, Object listener,
         this.kafkaConsumer = kafkaConsumer;
         this.consumerRecord = consumerRecord;
     }
-
+    
     /**
      * Creates a new exception.
      *

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/KafkaClient.java
Patch:
@@ -27,7 +27,6 @@
 import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
-import java.time.Duration;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.configuration.kafka.config;
 
 import javax.annotation.Nonnull;
-import java.util.Map;
 import java.util.Properties;
 
 /**

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/exceptions/KafkaListenerException.java
Patch:
@@ -65,6 +65,7 @@ public KafkaListenerException(String message, Throwable cause, Object listener,
         this.kafkaConsumer = kafkaConsumer;
         this.consumerRecord = consumerRecord;
     }
+
     /**
      * Creates a new exception.
      *

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/serde/CompositeSerdeRegistry.java
Patch:
@@ -27,7 +27,6 @@
 import javax.inject.Singleton;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.Function;
 
 /**
  * The default {@link SerdeRegistry} that combines multiple registries into a single registry.

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignature.java
Patch:
@@ -27,6 +27,8 @@
 import com.nimbusds.jose.crypto.MACVerifier;
 import io.micronaut.security.token.jwt.signature.AbstractSignatureConfiguration;
 
+import java.util.Base64;
+
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
@@ -44,7 +46,7 @@ public class SecretSignature extends AbstractSignatureConfiguration {
      */
     public SecretSignature(SecretSignatureConfiguration config) {
         if (config.getSecret() != null) {
-            this.secret = config.getSecret().getBytes(UTF_8);
+            this.secret = config.isBase64() ? Base64.getDecoder().decode(config.getSecret()) : config.getSecret().getBytes(UTF_8);
         }
         this.algorithm = config.getJwsAlgorithm();
     }

File: inject/src/main/java/io/micronaut/inject/qualifiers/NameQualifier.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.inject.Named;
 import java.lang.annotation.Annotation;
-import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
@@ -66,7 +65,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
                     }
                     return candidate.getBeanType().getSimpleName();
                 });
-                return typeName.equalsIgnoreCase(name) || typeName.toLowerCase(Locale.ENGLISH).startsWith(name);
+                return typeName.equalsIgnoreCase(name) || typeName.equalsIgnoreCase(name + beanType.getSimpleName());
             }
         );
     }

File: runtime/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -18,7 +18,6 @@
 
 import static io.micronaut.core.util.ArgumentUtils.check;
 
-import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.cron.CronExpression;
 
@@ -38,7 +37,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@Primary
+@Named(TaskExecutors.SCHEDULED)
 public class ScheduledExecutorTaskScheduler implements TaskScheduler {
 
     private final ScheduledExecutorService executorService;

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/signature/secret/SecretSignature.java
Patch:
@@ -27,6 +27,8 @@
 import com.nimbusds.jose.crypto.MACVerifier;
 import io.micronaut.security.token.jwt.signature.AbstractSignatureConfiguration;
 
+import java.util.Base64;
+
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
@@ -44,7 +46,7 @@ public class SecretSignature extends AbstractSignatureConfiguration {
      */
     public SecretSignature(SecretSignatureConfiguration config) {
         if (config.getSecret() != null) {
-            this.secret = config.getSecret().getBytes(UTF_8);
+            this.secret = config.isBase64() ? Base64.getDecoder().decode(config.getSecret()) : config.getSecret().getBytes(UTF_8);
         }
         this.algorithm = config.getJwsAlgorithm();
     }

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/micrometer/MeterRegistryFactory.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.configuration.metrics.aggregator.MeterRegistryConfigurer;
 import io.micronaut.configuration.metrics.aggregator.MicrometerMeterRegistryConfigurer;
 import io.micronaut.context.annotation.Bean;
-import io.micronaut.context.annotation.Context;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Requires;
@@ -51,7 +50,6 @@ public class MeterRegistryFactory {
     @Bean
     @Primary
     @Singleton
-    @Context
     @Requires(property = MICRONAUT_METRICS_ENABLED, value = "true", defaultValue = "true")
     @Requires(beans = MeterRegistryConfigurer.class)
     CompositeMeterRegistry compositeMeterRegistry() {
@@ -70,7 +68,6 @@ CompositeMeterRegistry compositeMeterRegistry() {
     @Bean
     @Primary
     @Singleton
-    @Context
     @Requires(property = MICRONAUT_METRICS_ENABLED, value = "true", defaultValue = "true")
     MeterRegistryConfigurer meterRegistryConfigurer(Collection<MeterBinder> binders,
                                                     Collection<MeterFilter> filters) {

File: inject/src/main/java/io/micronaut/inject/qualifiers/NameQualifier.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.inject.Named;
 import java.lang.annotation.Annotation;
-import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
@@ -66,7 +65,7 @@ public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT>
                     }
                     return candidate.getBeanType().getSimpleName();
                 });
-                return typeName.equalsIgnoreCase(name) || typeName.toLowerCase(Locale.ENGLISH).startsWith(name);
+                return typeName.equalsIgnoreCase(name) || typeName.equalsIgnoreCase(name + beanType.getSimpleName());
             }
         );
     }

File: runtime/src/main/java/io/micronaut/scheduling/ScheduledExecutorTaskScheduler.java
Patch:
@@ -18,7 +18,6 @@
 
 import static io.micronaut.core.util.ArgumentUtils.check;
 
-import io.micronaut.context.annotation.Primary;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.scheduling.cron.CronExpression;
 
@@ -38,7 +37,7 @@
  * @author graemerocher
  * @since 1.0
  */
-@Primary
+@Named(TaskExecutors.SCHEDULED)
 public class ScheduledExecutorTaskScheduler implements TaskScheduler {
 
     private final ScheduledExecutorService executorService;

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/annotation/KafkaListener.java
Patch:
@@ -88,7 +88,7 @@
     int threads() default 1;
 
     /**
-     * The timeout to use for calls to {@link org.apache.kafka.clients.consumer.Consumer#poll(long)}
+     * The timeout to use for calls to {@link org.apache.kafka.clients.consumer.Consumer#poll(long)}.
      *
      * @return The timeout. Defaults to 100ms
      */

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/config/AbstractKafkaConfiguration.java
Patch:
@@ -29,7 +29,7 @@
  */
 public abstract class AbstractKafkaConfiguration<K, V> {
     /**
-     * The default kafka port
+     * The default kafka port.
      */
     public static final int DEFAULT_KAFKA_PORT = 9092;
     /**

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/embedded/KafkaEmbeddedConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public boolean isEnabled() {
     }
 
     /**
-     * Sets whether the embedded Kafka server is enabled
+     * Sets whether the embedded Kafka server is enabled.
      *
      * @param enabled True if it is.
      */
@@ -62,7 +62,7 @@ public void setEnabled(boolean enabled) {
     }
 
     /**
-     * Sets the broker properties
+     * Sets the broker properties.
      *
      * @param properties The broker properties.
      */

File: configurations/kafka/src/main/java/io/micronaut/configuration/kafka/executor/ConsumerExecutorServiceConfig.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.kafka.executor;
 
-import io.micronaut.configuration.kafka.annotation.KafkaListener;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.context.annotation.Requires;
@@ -29,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Configures a {@link java.util.concurrent.ScheduledExecutorService} for running {@link KafkaListener} instances.
+ * Configures a {@link java.util.concurrent.ScheduledExecutorService} for running {@link io.micronaut.configuration.kafka.annotation.KafkaListener} instances.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -57,7 +57,7 @@ public HttpClientResponseException(String message, Throwable cause, HttpResponse
     @Override
     public String getMessage() {
         Optional<JsonError> body = getResponse().getBody(JsonError.class);
-        if (body.isPresent()) {
+        if (body.isPresent() && body.get().getMessage() != null) {
             return body.get().getMessage();
         } else {
             return super.getMessage();

File: inject-java/src/test/groovy/io/micronaut/support/Parser.java
Patch:
@@ -37,6 +37,7 @@
 import com.sun.tools.javac.util.Context;
 import io.micronaut.annotation.processing.PackageConfigurationInjectProcessor;
 import io.micronaut.annotation.processing.BeanDefinitionInjectProcessor;
+import io.micronaut.annotation.processing.TypeElementVisitorProcessor;
 
 import java.io.File;
 import java.io.IOException;
@@ -125,6 +126,7 @@ public static Iterable<? extends JavaFileObject> generate(JavaFileObject... sour
         try {
 
             List<Processor> processors = new ArrayList<>();
+            processors.add(new TypeElementVisitorProcessor());
             processors.add(new PackageConfigurationInjectProcessor());
             processors.add(new BeanDefinitionInjectProcessor());
             task.setProcessors(processors);

File: inject/src/main/java/io/micronaut/inject/visitor/TypeElementVisitor.java
Patch:
@@ -19,8 +19,8 @@
 /**
  * Provides a hook into the compilation process to allow user defined functionality to be created at compile time.
  *
- * @param <C> The annotation required on the class.
- * @param <E> The annotation required on the element.
+ * @param <C> The annotation required on the class. Use {@link Object} for all classes.
+ * @param <E> The annotation required on the element. Use {@link Object} for all elements.
  * @author James Kleeh
  * @since 1.0
  */

File: inject-java/src/test/groovy/io/micronaut/support/Parser.java
Patch:
@@ -37,6 +37,7 @@
 import com.sun.tools.javac.util.Context;
 import io.micronaut.annotation.processing.PackageConfigurationInjectProcessor;
 import io.micronaut.annotation.processing.BeanDefinitionInjectProcessor;
+import io.micronaut.annotation.processing.TypeElementVisitorProcessor;
 
 import java.io.File;
 import java.io.IOException;
@@ -125,6 +126,7 @@ public static Iterable<? extends JavaFileObject> generate(JavaFileObject... sour
         try {
 
             List<Processor> processors = new ArrayList<>();
+            processors.add(new TypeElementVisitorProcessor());
             processors.add(new PackageConfigurationInjectProcessor());
             processors.add(new BeanDefinitionInjectProcessor());
             task.setProcessors(processors);

File: inject/src/main/java/io/micronaut/inject/visitor/TypeElementVisitor.java
Patch:
@@ -19,8 +19,8 @@
 /**
  * Provides a hook into the compilation process to allow user defined functionality to be created at compile time.
  *
- * @param <C> The annotation required on the class.
- * @param <E> The annotation required on the element.
+ * @param <C> The annotation required on the class. Use {@link Object} for all classes.
+ * @param <E> The annotation required on the element. Use {@link Object} for all elements.
  * @author James Kleeh
  * @since 1.0
  */

File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java
Patch:
@@ -57,7 +57,7 @@ public HttpClientResponseException(String message, Throwable cause, HttpResponse
     @Override
     public String getMessage() {
         Optional<JsonError> body = getResponse().getBody(JsonError.class);
-        if (body.isPresent()) {
+        if (body.isPresent() && body.get().getMessage() != null) {
             return body.get().getMessage();
         } else {
             return super.getMessage();

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -185,6 +185,9 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
                     String headerValue = header.value();
                     headers.put(headerName, headerValue);
                 }
+            } else {
+                Header header = context.getAnnotation(Header.class);
+                headers.put(header.name(), header.value());
             }
 
             List<NettyCookie> cookies = new ArrayList<>();

File: configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics/micrometer/package-info.java
Patch:
@@ -15,6 +15,9 @@
  */
 /**
  * Configuration for Micrometer metrics.
+ *
+ * @author Christian Oestreich
+ * @since 1.0
  */
 @Configuration
 @Requires(classes = MeterRegistry.class)

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.micronaut.core.order.Ordered;
 import io.micronaut.http.HttpRequest;
-import io.micronaut.http.netty.NettyHttpResponse;
+import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.netty.channel.ChannelHandlerContext;
 
 /**
@@ -38,7 +38,7 @@ public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
      * @param response The mutable Micronaut response
      * @param context  The channel context
      */
-    void handle(T object, HttpRequest<?> request, NettyHttpResponse<?> response, ChannelHandlerContext context);
+    void handle(T object, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context);
 
     /**
      * @param type The type to check

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -23,7 +23,7 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpHeaders;
 import io.micronaut.http.MutableHttpResponse;
-import io.micronaut.http.netty.NettyHttpResponse;
+import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandler;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
@@ -61,7 +61,7 @@ public FileTypeHandler(FileTypeHandlerConfiguration configuration) {
 
     @SuppressWarnings("MagicNumber")
     @Override
-    public void handle(Object obj, HttpRequest<?> request, NettyHttpResponse<?> response, ChannelHandlerContext context) {
+    public void handle(Object obj, HttpRequest<?> request, NettyMutableHttpResponse<?> response, ChannelHandlerContext context) {
         NettyFileCustomizableResponseType type;
         if (obj instanceof File) {
             type = new NettySystemFileCustomizableResponseType((File) obj);
@@ -147,7 +147,7 @@ protected void setDateHeader(MutableHttpResponse response) {
     }
 
     private FullHttpResponse notModified() {
-        NettyHttpResponse response = (NettyHttpResponse) HttpResponse.notModified();
+        NettyMutableHttpResponse response = (NettyMutableHttpResponse) HttpResponse.notModified();
         setDateHeader(response);
         return response.getNativeResponse();
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
-import io.micronaut.http.netty.NettyHttpResponse;
+import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
@@ -73,8 +73,8 @@ public void process(MutableHttpResponse response) {
 
     @Override
     public void write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
-        if (response instanceof NettyHttpResponse) {
-            FullHttpResponse nettyResponse = ((NettyHttpResponse) response).getNativeResponse();
+        if (response instanceof NettyMutableHttpResponse) {
+            FullHttpResponse nettyResponse = ((NettyMutableHttpResponse) response).getNativeResponse();
 
             //The streams codec prevents non full responses from being written
             Optional

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
-import io.micronaut.http.netty.NettyHttpResponse;
+import io.micronaut.http.netty.NettyMutableHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
@@ -108,9 +108,9 @@ public void process(MutableHttpResponse response) {
     @Override
     public void write(HttpRequest<?> request, MutableHttpResponse<?> response, ChannelHandlerContext context) {
 
-        if (response instanceof NettyHttpResponse) {
+        if (response instanceof NettyMutableHttpResponse) {
 
-            FullHttpResponse nettyResponse = ((NettyHttpResponse) response).getNativeResponse();
+            FullHttpResponse nettyResponse = ((NettyMutableHttpResponse) response).getNativeResponse();
 
             //The streams codec prevents non full responses from being written
             Optional

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1379,7 +1379,7 @@ protected void initChannel(Channel ch) {
                 // so that the consumer is in charge of back pressure
                 ch.config().setAutoRead(false);
             }
-            
+
             if (sslContext != null) {
                 SslHandler sslHandler = sslContext.newHandler(
                         ch.alloc(),

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -96,6 +96,7 @@ public HttpResponse<Person> save(@Body Person person) {
     // end::regular[]
 
     // tag::localError[]
+    @Error
     public HttpResponse<JsonError> jsonError(HttpRequest request, JsonParseException jsonParseException) { // <1>
         JsonError error = new JsonError("Invalid JSON: " + jsonParseException.getMessage()) // <2>
                 .link(Link.SELF, Link.of(request.getUri()));
@@ -111,7 +112,6 @@ public String throwError() {
         throw new RuntimeException("Something went wrong");
     }
 
-
     @Error // <1>
     // tag::globalError[]
     public HttpResponse<JsonError> error(HttpRequest request, Throwable e) {

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/DefaultReactiveMongoClientFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.configuration.mongo.reactive;
 
-import com.mongodb.ConnectionString;
 import com.mongodb.reactivestreams.client.MongoClient;
 import com.mongodb.reactivestreams.client.MongoClients;
 import io.micronaut.context.annotation.Bean;
@@ -25,8 +24,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.runtime.context.scope.Refreshable;
 
-import java.util.Optional;
-
 /**
  * Factory for the default {@link MongoClient}. Creates the injectable {@link Primary} bean
  *

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/DefaultReactiveMongoConfiguration.java
Patch:
@@ -28,7 +28,6 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.runtime.ApplicationConfiguration;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -89,6 +88,7 @@ public void setHosts(List<ServerAddress> serverAddresses) {
             getClusterSettings().hosts(serverAddresses);
         }
     }
+
     /**
      * @return The {@link ClusterSettings#builder()}
      */

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/NamedReactiveMongoClientFactory.java
Patch:
@@ -16,16 +16,13 @@
 
 package io.micronaut.configuration.mongo.reactive;
 
-import com.mongodb.ConnectionString;
 import com.mongodb.reactivestreams.client.MongoClient;
 import com.mongodb.reactivestreams.client.MongoClients;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.EachBean;
 import io.micronaut.context.annotation.Factory;
 import io.micronaut.runtime.context.scope.Refreshable;
 
-import java.util.Optional;
-
 /**
  * Factory for named {@link MongoClient} instances. Creates the injectable {@link io.micronaut.context.annotation.Primary} bean
  *

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/convert/StringToServerAddressConverter.java
Patch:
@@ -40,8 +40,7 @@ public Optional<ServerAddress> convert(CharSequence object, Class<ServerAddress>
                 context.reject(address, e);
                 return Optional.empty();
             }
-        }
-        else {
+        } else {
             return Optional.of(new ServerAddress(address));
         }
     }

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -429,7 +429,6 @@ protected void buildInvokeMethod(Type declaringTypeObject, String methodName, Ob
                     invokeMethodVisitor.visitEnd();
                 }
 
-
             };
             executableMethodWriter.makeInner(proxyInternalName, classWriter);
             executableMethodWriter.visitMethod(declaringType, returnType, genericReturnType, returnTypeGenericTypes, methodName, argumentTypes, argumentAnnotationMetadata, genericTypes);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -20,10 +20,8 @@
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.netty.NettyHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpServer;
-import io.micronaut.http.server.netty.async.DefaultCloseHandler;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.files.StreamedFile;
-import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.DefaultHttpResponse;
 import io.netty.handler.codec.http.FullHttpResponse;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettySystemFileCustomizableResponseType.java
Patch:
@@ -21,11 +21,9 @@
 import io.micronaut.http.netty.NettyHttpResponse;
 import io.micronaut.http.server.netty.NettyHttpServer;
 import io.micronaut.http.server.netty.SmartHttpContentCompressor;
-import io.micronaut.http.server.netty.async.DefaultCloseHandler;
 import io.micronaut.http.server.netty.types.NettyFileCustomizableResponseType;
 import io.micronaut.http.server.types.CustomizableResponseTypeException;
 import io.micronaut.http.server.types.files.SystemFileCustomizableResponseType;
-import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.DefaultFileRegion;
 import io.netty.handler.codec.http.DefaultHttpResponse;

File: inject/src/main/java/io/micronaut/context/DefaultConstructorInjectionPoint.java
Patch:
@@ -68,8 +68,7 @@ class DefaultConstructorInjectionPoint<T> implements ConstructorInjectionPoint<T
         this.declaringType = declaringType;
         if (!(annotationMetadata instanceof DefaultAnnotationMetadata)) {
             this.annotationMetadata = AnnotationMetadata.EMPTY_METADATA;
-        }
-        else {
+        } else {
             this.annotationMetadata = new ConstructorAnnotationMetadata((DefaultAnnotationMetadata) annotationMetadata);
         }
         this.arguments = arguments == null ? Argument.ZERO_ARGUMENTS : arguments;

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadata.java
Patch:
@@ -37,7 +37,6 @@
 @Internal
 abstract class AbstractAnnotationMetadata implements AnnotationMetadata {
 
-
     protected final Map<String, Annotation> annotationMap;
     protected final Map<String, Annotation> declaredAnnotationMap;
     private Annotation[] allAnnotationArray;

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -718,6 +718,7 @@ protected GeneratorAdapter startProtectedMethod(ClassWriter writer, String metho
                 methodName,
                 getMethodDescriptor(returnType, argumentTypes));
     }
+
     /**
      * Generates a service discovery for the given class name and file.
      *

File: runtime/src/main/java/io/micronaut/health/HeartbeatTask.java
Patch:
@@ -25,8 +25,6 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
 import io.micronaut.scheduling.annotation.Scheduled;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.inject.Singleton;
 import java.util.concurrent.atomic.AtomicReference;

File: runtime/src/main/java/io/micronaut/scheduling/instrument/InstrumentedExecutor.java
Patch:
@@ -27,8 +27,9 @@
  * @since 1.0
  */
 public interface InstrumentedExecutor extends Executor {
+
     /**
-     * Implementors can override to specify the target {@link Executor}
+     * Implementors can override to specify the target {@link Executor}.
      *
      * @return The target {@link Executor}
      */
@@ -40,7 +41,7 @@ default void execute(@Nonnull Runnable command) {
     }
 
     /**
-     * Implementors can override to instrument a Runnable
+     * Implementors can override to instrument a Runnable.
      *
      * @param command The command to instrument
      * @return The instrumented runnable

File: function-web/src/main/java/io/micronaut/function/web/AnnotatedFunctionRouteBuilder.java
Patch:
@@ -111,8 +111,7 @@ public void process(BeanDefinition<?> beanDefinition, ExecutableMethod<?, ?> met
                             String functionPath = resolveFunctionPath(methodName, declaringType, functionName);
                             if (argCount == 0) {
                                 route = GET(functionPath, method);
-                            }
-                            else {
+                            } else {
                                 route = POST(functionPath, method);
                             }
                         }

File: http-client/src/main/java/io/micronaut/http/client/ssl/NettyClientSslBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 
-import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import javax.net.ssl.KeyManagerFactory;

File: http/src/main/java/io/micronaut/http/ssl/ClientSslConfiguration.java
Patch:
@@ -51,6 +51,7 @@ public ClientSslConfiguration(
             DefaultSslConfiguration.TrustStoreConfiguration defaultTrustStoreConfiguration) {
         readExisting(defaultSslConfiguration, defaultKeyConfiguration, defaultKeyStoreConfiguration, defaultTrustStoreConfiguration);
         this.enabled = true;
+        this.buildSelfSigned = true;
     }
 
     /**

File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java
Patch:
@@ -1657,7 +1657,7 @@ private Qualifier resolveQualifier(FieldInjectionPoint injectionPoint) {
         Qualifier qualifier = null;
         Annotation ann = injectionPoint.getQualifier();
         if (ann == null) {
-            ann = injectionPoint.getAnnotation(io.micronaut.context.annotation.Type.class);
+            ann = injectionPoint.getDeclaredAnnotation(io.micronaut.context.annotation.Type.class);
         }
         if (ann != null) {
             qualifier = Qualifiers.byAnnotation(ann);

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -208,8 +208,7 @@ public AnnotatedMethodRouteBuilder(ExecutionHandleLocator executionHandleLocator
                         }
                     }
                     if (exceptionType == null) {
-                        List<Class> argumentTypes = Arrays.asList(method.getArgumentTypes());
-                        exceptionType = StreamUtils.reversed(argumentTypes)
+                        exceptionType = Arrays.stream(method.getArgumentTypes())
                                 .filter(Throwable.class::isAssignableFrom)
                                 .findFirst()
                                 .orElse(Throwable.class);

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -96,6 +96,7 @@ public HttpResponse<Person> save(@Body Person person) {
     // end::regular[]
 
     // tag::localError[]
+    @Error
     public HttpResponse<JsonError> jsonError(HttpRequest request, JsonParseException jsonParseException) { // <1>
         JsonError error = new JsonError("Invalid JSON: " + jsonParseException.getMessage()) // <2>
                 .link(Link.SELF, Link.of(request.getUri()));
@@ -111,7 +112,6 @@ public String throwError() {
         throw new RuntimeException("Something went wrong");
     }
 
-
     @Error // <1>
     // tag::globalError[]
     public HttpResponse<JsonError> error(HttpRequest request, Throwable e) {

File: discovery-client/src/main/java/io/micronaut/discovery/client/DiscoveryClientConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package io.micronaut.discovery.client;
 
 import io.micronaut.context.exceptions.ConfigurationException;
+import io.micronaut.core.io.socket.SocketUtils;
 import io.micronaut.core.util.StringUtils;
 import io.micronaut.discovery.DiscoveryConfiguration;
 import io.micronaut.discovery.ServiceInstance;
@@ -50,7 +51,7 @@ public abstract class DiscoveryClientConfiguration extends HttpClientConfigurati
     private List<ServiceInstance> defaultZone = Collections.emptyList();
     private List<ServiceInstance> otherZones = Collections.emptyList();
 
-    private String host = LOCALHOST;
+    private String host = SocketUtils.LOCALHOST;
     private int port = -1;
     private boolean secure;
 

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -36,7 +36,7 @@
 import io.micronaut.http.server.netty.decoders.HttpRequestDecoder;
 import io.micronaut.http.server.netty.ssl.NettyServerSslBuilder;
 import io.micronaut.http.server.netty.types.NettyCustomizableResponseTypeHandlerRegistry;
-import io.micronaut.http.ssl.SslConfiguration;
+import io.micronaut.http.ssl.ServerSslConfiguration;
 import io.micronaut.inject.qualifiers.Qualifiers;
 import io.micronaut.runtime.ApplicationConfiguration;
 import io.micronaut.runtime.server.EmbeddedServer;
@@ -105,7 +105,7 @@ public class NettyHttpServer implements EmbeddedServer {
     private final MediaTypeCodecRegistry mediaTypeCodecRegistry;
     private final NettyCustomizableResponseTypeHandlerRegistry customizableResponseTypeHandlerRegistry;
     private final NettyHttpServerConfiguration serverConfiguration;
-    private final SslConfiguration sslConfiguration;
+    private final ServerSslConfiguration sslConfiguration;
     private final StaticResourceResolver staticResourceResolver;
     private final Environment environment;
     private final Router router;

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -150,7 +150,9 @@ public boolean containsProperties(@Nullable String name) {
                     return true;
                 } else {
                     String finalName = name + ".";
-                    return entries.keySet().stream().anyMatch(key -> key.startsWith(finalName));
+                    return entries.keySet().stream().anyMatch(key ->
+                            key.startsWith(finalName)
+                    );
                 }
             }
         }

File: security/src/main/java/io/micronaut/security/authentication/Authenticator.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
 
 /**
  * An Authenticator operates on several {@link AuthenticationProvider} instances returning the first
@@ -55,6 +56,7 @@ public Publisher<AuthenticationResponse> authenticate(UsernamePasswordCredential
         if (this.authenticationProviders == null) {
             return Flowable.empty();
         }
+        System.out.println(authenticationProviders.stream().map(AuthenticationProvider::getClass).map(Class::getName).collect(Collectors.joining()));
         Iterator<AuthenticationProvider> providerIterator = authenticationProviders.iterator();
         if (providerIterator.hasNext()) {
             Flowable<AuthenticationProvider> providerFlowable = Flowable.just(providerIterator.next());

File: security/src/main/java/io/micronaut/security/endpoints/LoginController.java
Patch:
@@ -81,10 +81,12 @@ public Single<HttpResponse> login(@Body UsernamePasswordCredentials usernamePass
         return authenticationResponseFlowable.map(authenticationResponse -> {
             if (authenticationResponse.isAuthenticated()) {
                 UserDetails userDetails = (UserDetails) authenticationResponse;
+                System.out.println("Publishing login success");
                 eventPublisher.publishEvent(new LoginSuccessfulEvent(userDetails));
                 return loginHandler.loginSuccess(userDetails, request);
             } else {
                 AuthenticationFailed authenticationFailed = (AuthenticationFailed) authenticationResponse;
+                System.out.println("Publishing login failure");
                 eventPublisher.publishEvent(new LoginFailedEvent(authenticationFailed));
                 return loginHandler.loginFailed(authenticationFailed);
             }

File: configurations/micrometer-graphite/src/main/java/io/micronaut/configuration/metrics/micrometer/graphite/GraphiteConfiguration.java
Patch:
@@ -7,7 +7,7 @@
  */
 interface GraphiteConfiguration {
 
-    String GRAPHITE_CONFIG = MeterRegistryFactory.CFG_ROOT + "export.graphite";
+    String GRAPHITE_CONFIG = MeterRegistryFactory.MICRONAUT_METRICS + "export.graphite";
     String GRAPHITE_ENABLED = GRAPHITE_CONFIG + ".enabled";
     String GRAPHITE_HOST = GRAPHITE_CONFIG + ".host";
     String GRAPHITE_STEP = GRAPHITE_CONFIG + ".step";

File: configurations/micrometer-graphite/src/main/java/io/micronaut/configuration/metrics/micrometer/graphite/GraphiteMeterRegistryFactory.java
Patch:
@@ -11,7 +11,7 @@
 import javax.inject.Singleton;
 import java.time.Duration;
 
-import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.METRICS_ENABLED;
+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_ENABLED;
 import static io.micronaut.configuration.metrics.micrometer.graphite.GraphiteConfiguration.GRAPHITE_ENABLED;
 
 /**
@@ -66,7 +66,7 @@ public Duration step() {
     @Bean
     @Primary
     @Singleton
-    @Requires(property = METRICS_ENABLED, value = "true", defaultValue = "true")
+    @Requires(property = MICRONAUT_METRICS_ENABLED, value = "true", defaultValue = "true")
     @Requires(property = GRAPHITE_ENABLED, value = "true", defaultValue = "true")
     GraphiteMeterRegistry graphiteMeterRegistry() {
         return new GraphiteMeterRegistry(graphiteConfig, Clock.SYSTEM);

File: configurations/micrometer-statsd/src/main/java/io/micronaut/configuration/metrics/micrometer/statsd/StatsdConfiguration.java
Patch:
@@ -8,7 +8,7 @@
  */
 public interface StatsdConfiguration {
 
-    String STATSD_CONFIG = MeterRegistryFactory.CFG_ROOT + "export.statsd";
+    String STATSD_CONFIG = MeterRegistryFactory.MICRONAUT_METRICS + "export.statsd";
     String STATSD_ENABLED = STATSD_CONFIG + ".enabled";
     String STATSD_FLAVOR = STATSD_CONFIG + ".flavor";
     String STATSD_PORT = STATSD_CONFIG + ".port";

File: configurations/micrometer-statsd/src/main/java/io/micronaut/configuration/metrics/micrometer/statsd/StatsdMeterRegistryFactory.java
Patch:
@@ -12,7 +12,7 @@
 import javax.inject.Singleton;
 import java.time.Duration;
 
-import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.METRICS_ENABLED;
+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_ENABLED;
 import static io.micronaut.configuration.metrics.micrometer.statsd.StatsdConfiguration.STATSD_ENABLED;
 
 /**
@@ -72,7 +72,7 @@ public Duration step() {
     @Bean
     @Primary
     @Singleton
-    @Requires(property = METRICS_ENABLED, value = "true", defaultValue = "true")
+    @Requires(property = MICRONAUT_METRICS_ENABLED, value = "true", defaultValue = "true")
     @Requires(property = STATSD_ENABLED, value = "true", defaultValue = "true")
     StatsdMeterRegistry statsdMeterRegistry() {
         return new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);

File: http-client/src/main/java/io/micronaut/http/client/LoadBalancer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.discovery.ServiceInstance;
 import io.micronaut.discovery.exceptions.NoAvailableServiceException;
+import io.micronaut.http.client.loadbalance.FixedLoadBalancer;
 import org.reactivestreams.Publisher;
 
 import javax.annotation.Nullable;
@@ -53,7 +54,7 @@ default Publisher<ServiceInstance> select() {
      * @return The {@link LoadBalancer}
      */
     static LoadBalancer fixed(URL url) {
-        return discriminator -> Publishers.just(ServiceInstance.of("Unknown", url));
+        return new FixedLoadBalancer(url);
     }
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/ssl/NettyClientSslBuilder.java
Patch:
@@ -46,7 +46,7 @@ public class NettyClientSslBuilder extends SslBuilder<SslContext> {
 
     /**
      * @param ssl              The SSL configuration
-     * @param resourceResolver The resouce resolver
+     * @param resourceResolver The resource resolver
      */
     public NettyClientSslBuilder(SslConfiguration ssl, ResourceResolver resourceResolver) {
         super(ssl, resourceResolver);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/async/DefaultCloseHandler.java
Patch:
@@ -77,6 +77,8 @@ public void operationComplete(ChannelFuture future) {
             }
         } else if (!request.getHeaders().isKeepAlive() || statusCode >= HttpStatus.MULTIPLE_CHOICES.getCode()) {
             future.channel().close();
+        } else {
+            context.read();
         }
     }
 }

File: configurations/neo4j-bolt/src/main/java/io/micronaut/configuration/neo4j/bolt/condition/package-info.java
Patch:
@@ -21,5 +21,3 @@
  * @since 1.0
  */
 package io.micronaut.configuration.neo4j.bolt.condition;
-
-import io.micronaut.context.annotation.Configuration;

File: core/src/main/java/io/micronaut/core/async/publisher/Publishers.java
Patch:
@@ -80,6 +80,7 @@ public class Publishers {
     public static <T> Publisher<T> fromCompletableFuture(Supplier<CompletableFuture<T>> futureSupplier) {
         return new CompletableFuturePublisher<>(futureSupplier);
     }
+
     /**
      * Build a {@link Publisher} from a {@link CompletableFuture}.
      *
@@ -284,9 +285,7 @@ public static <T extends Publisher<?>> T convertPublisher(Object object, Class<T
             @SuppressWarnings("unchecked") Publisher<T> futurePublisher = (Publisher<T>) Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));
             return ConversionService.SHARED.convert(futurePublisher, publisherType)
                     .orElseThrow(() -> new IllegalArgumentException("Unsupported Reactive type: " + object.getClass()));
-        }
-        else {
-
+        } else {
             return ConversionService.SHARED.convert(object, publisherType)
                     .orElseThrow(() -> new IllegalArgumentException("Unsupported Reactive type: " + object.getClass()));
         }

File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java
Patch:
@@ -41,7 +41,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class SoftServiceLoader<S> implements Iterable<ServiceDefinition<S>> {
+public final class SoftServiceLoader<S> implements Iterable<ServiceDefinition<S>> {
     public static final String META_INF_SERVICES = "META-INF/services";
 
     private final Class<S> serviceType;

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/InstanceInfo.java
Patch:
@@ -102,6 +102,7 @@ public class InstanceInfo implements ConfigurableInstanceInfo {
      * @param metadata             The metadata
      * @param asgName              The asg name
      */
+    @SuppressWarnings("ParameterNumber")
     @JsonCreator
     InstanceInfo(
         @JsonProperty("instanceId") String instanceId,

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Eureka client classes
+ * This package contains Eureka client classes.
  *
  * @author graemerocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyHttpServerConfiguration.java
Patch:
@@ -68,7 +68,8 @@ public NettyHttpServerConfiguration(ApplicationConfiguration applicationConfigur
     }
 
     /**
-     * The server {@link LogLevel} to enable
+     * The server {@link LogLevel} to enable.
+     *
      * @return The server {@link LogLevel} to enable
      */
     public Optional<LogLevel> getLogLevel() {

File: inject/src/main/java/io/micronaut/context/event/BeanContextEvent.java
Patch:
@@ -18,8 +18,6 @@
 
 import io.micronaut.context.BeanContext;
 
-import java.util.EventObject;
-
 /**
  * A BeanContextEvent is an event fired from the {@link BeanContext} instance.
  *

File: router/src/main/java/io/micronaut/web/router/AbstractRouteMatch.java
Patch:
@@ -84,8 +84,6 @@ protected AbstractRouteMatch(DefaultRouteBuilder.AbstractRoute abstractRoute, Co
         this.acceptedMediaTypes = abstractRoute.getConsumes();
     }
 
-
-
     private String resolveInputName(Argument requiredArgument) {
         Optional<Annotation> ann = requiredArgument.findAnnotationWithStereoType(Bindable.class);
         return ann.map(annotation -> {

File: router/src/main/java/io/micronaut/web/router/DefaultRouteBuilder.java
Patch:
@@ -673,7 +673,7 @@ public int compareTo(StatusRoute o) {
                 return 0;
             }
             Class<?> thatType = o.originatingType();
-            Class<?> thisType= this.originatingType();
+            Class<?> thisType = this.originatingType();
 
             if (thisType == thatType && this.status().equals(o.status())) {
                 return 0;

File: router/src/main/java/io/micronaut/web/router/RouteBuilder.java
Patch:
@@ -178,6 +178,7 @@ default StatusRoute status(HttpStatus status, Object instance, String method) {
      * @return The route
      */
     StatusRoute status(Class originatingClass, HttpStatus status, Class type, String method, Class... parameterTypes);
+
     /**
      * Register a route to handle the error.
      *

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.tracing.brave.instrument.http;
 
 import brave.Span;
-import brave.Tracer;
 import brave.http.HttpServerHandler;
 import brave.http.HttpTracing;
 import brave.propagation.TraceContext;
@@ -28,7 +27,6 @@
 import io.micronaut.http.filter.HttpServerFilter;
 import io.micronaut.http.filter.ServerFilterChain;
 import io.micronaut.tracing.instrument.http.AbstractOpenTracingFilter;
-import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
 /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -95,7 +95,9 @@ public void handle(Object obj, HttpRequest<?> request, NettyHttpResponse<?> resp
             }
         }
 
-        response.header(HttpHeaders.CONTENT_TYPE, getMediaType(type.getName()));
+        if (!response.getHeaders().contains(HttpHeaders.CONTENT_TYPE)) {
+            response.header(HttpHeaders.CONTENT_TYPE, getMediaType(type.getName()));
+        }
         setDateAndCacheHeaders(response, lastModified);
         if (request.getHeaders().isKeepAlive()) {
             response.header(HttpHeaders.CONNECTION, HttpHeaderValues.KEEP_ALIVE);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/async/DefaultCloseHandler.java
Patch:
@@ -77,6 +77,8 @@ public void operationComplete(ChannelFuture future) {
             }
         } else if (!request.getHeaders().isKeepAlive() || statusCode >= HttpStatus.MULTIPLE_CHOICES.getCode()) {
             future.channel().close();
+        } else {
+            context.read();
         }
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -36,7 +36,7 @@
 public class HealthEndpoint {
 
     /**
-     * If the endpoint is sensitive if no configuration is provided
+     * If the endpoint is sensitive if no configuration is provided.
      */
     public static final boolean DEFAULT_SENSITIVE = false;
 

File: management/src/main/java/io/micronaut/management/health/aggregator/RxJavaHealthAggregator.java
Patch:
@@ -53,9 +53,9 @@
 @Requires(beans = HealthEndpoint.class)
 public class RxJavaHealthAggregator implements HealthAggregator<Map<String, Object>> {
 
-    private final static String STATUS = "status";
-    private final static String DESCRIPTION = "description";
-    private final static String DETAILS = "details";
+    private static final String STATUS = "status";
+    private static final String DESCRIPTION = "description";
+    private static final String DETAILS = "details";
 
     @Override
     public Publisher<Map<String, Object>> aggregate(HealthIndicator[] indicators, HealthLevelOfDetail healthLevelOfDetail) {

File: session/src/test/groovy/io/micronaut/session/docs/ShoppingController.java
Patch:
@@ -38,7 +38,7 @@ public class ShoppingController {
     @Get("/cart")
     @SessionValue(ATTR_CART) // <1>
     Cart viewCart(@SessionValue @Nullable Cart cart) { // <2>
-        if(cart == null) {
+        if (cart == null) {
             cart = new Cart();
         }
         return cart;
@@ -48,7 +48,7 @@ Cart viewCart(@SessionValue @Nullable Cart cart) { // <2>
     // tag::add[]
     @Post("/cart/{name}")
     Cart addItem(Session session, @NotBlank String name) { // <2>
-        Cart cart = session.get(ATTR_CART, Cart.class).orElseGet(()-> { // <3>
+        Cart cart = session.get(ATTR_CART, Cart.class).orElseGet(() -> { // <3>
             Cart newCart = new Cart();
             session.put(ATTR_CART, newCart); // <4>
             return newCart;
@@ -61,7 +61,7 @@ Cart addItem(Session session, @NotBlank String name) { // <2>
     // tag::clear[]
     @Post("/cart/clear")
     void clearCart(@Nullable Session session) {
-        if(session != null) {
+        if (session != null) {
             session.remove(ATTR_CART);
         }
     }

File: test-suite/src/test/groovy/io/micronaut/docs/server/filters/TraceService.java
Patch:
@@ -36,7 +36,7 @@ public class TraceService {
 
     Flowable<Boolean> trace(HttpRequest<?> request) {
         return Flowable.fromCallable(() -> { // <1>
-            if(LOG.isDebugEnabled()) {
+            if (LOG.isDebugEnabled()) {
                 LOG.debug("Tracing request: " + request.getUri());
             }
             // trace logic here, potentially performing I/O <2>

File: session/src/test/groovy/io/micronaut/session/docs/ShoppingController.java
Patch:
@@ -38,7 +38,7 @@ public class ShoppingController {
     @Get("/cart")
     @SessionValue(ATTR_CART) // <1>
     Cart viewCart(@SessionValue @Nullable Cart cart) { // <2>
-        if(cart == null) {
+        if (cart == null) {
             cart = new Cart();
         }
         return cart;
@@ -48,7 +48,7 @@ Cart viewCart(@SessionValue @Nullable Cart cart) { // <2>
     // tag::add[]
     @Post("/cart/{name}")
     Cart addItem(Session session, @NotBlank String name) { // <2>
-        Cart cart = session.get(ATTR_CART, Cart.class).orElseGet(()-> { // <3>
+        Cart cart = session.get(ATTR_CART, Cart.class).orElseGet(() -> { // <3>
             Cart newCart = new Cart();
             session.put(ATTR_CART, newCart); // <4>
             return newCart;
@@ -61,7 +61,7 @@ Cart addItem(Session session, @NotBlank String name) { // <2>
     // tag::clear[]
     @Post("/cart/clear")
     void clearCart(@Nullable Session session) {
-        if(session != null) {
+        if (session != null) {
             session.remove(ATTR_CART);
         }
     }

File: test-suite/src/test/groovy/io/micronaut/docs/server/filters/TraceService.java
Patch:
@@ -36,7 +36,7 @@ public class TraceService {
 
     Flowable<Boolean> trace(HttpRequest<?> request) {
         return Flowable.fromCallable(() -> { // <1>
-            if(LOG.isDebugEnabled()) {
+            if (LOG.isDebugEnabled()) {
                 LOG.debug("Tracing request: " + request.getUri());
             }
             // trace logic here, potentially performing I/O <2>

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -59,7 +59,6 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.http.HttpServerKeepAliveHandler;
 import io.netty.handler.codec.http.multipart.DiskFileUpload;
-import io.netty.handler.logging.LogLevel;
 import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.timeout.IdleStateHandler;
@@ -83,7 +82,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
-import java.util.function.Consumer;
 
 /**
  * Implements the bootstrap and configuration logic for the Netty implementation of {@link EmbeddedServer}.

File: configurations/cassandra/src/main/java/io/micronaut/configuration/cassandra/CassandraConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.cassandra;
 
 import com.datastax.driver.core.Cluster;

File: configurations/cassandra/src/main/java/io/micronaut/configuration/cassandra/package-info.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Configuration for Cassandra
+ * Configuration for Cassandra.
  */
 @Configuration
 @Requires(classes = Cluster.class)
 package io.micronaut.configuration.cassandra;
 
 import com.datastax.driver.core.Cluster;
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file
+import io.micronaut.context.annotation.Requires;

File: test-suite/src/test/groovy/io/micronaut/docs/server/json/PersonController.java
Patch:
@@ -111,8 +111,9 @@ public String throwError() {
         throw new RuntimeException("Something went wrong");
     }
 
-    // tag::globalError[]
+
     @Error // <1>
+    // tag::globalError[]
     public HttpResponse<JsonError> error(HttpRequest request, Throwable e) {
         JsonError error = new JsonError("Bad Things Happened: " + e.getMessage()) // <2>
                 .link(Link.SELF, Link.of(request.getUri()));
@@ -122,8 +123,8 @@ public HttpResponse<JsonError> error(HttpRequest request, Throwable e) {
     }
     // end::globalError[]
 
-    // tag::statusError[]
     @Error(status = HttpStatus.NOT_FOUND)
+    // tag::statusError[]
     public HttpResponse<JsonError> notFound(HttpRequest request) { // <1>
         JsonError error = new JsonError("Page Not Found") // <2>
                 .link(Link.SELF, Link.of(request.getUri()));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -475,8 +475,9 @@ private Optional<? extends FileCustomizableResponseType> matchFile(String path)
         if (optionalUrl.isPresent()) {
             try {
                 URL url = optionalUrl.get();
-                File file = new File(url.toURI().getPath());
-                if (file.exists()) {
+                String filePath = url.toURI().getPath();
+                File file = filePath != null ? new File(filePath) : null;
+                if (file != null && file.exists()) {
                     if (!file.isDirectory() && file.canRead()) {
                         return Optional.of(new NettySystemFileCustomizableResponseType(file));
                     }

File: inject/src/main/java/io/micronaut/context/BeanDefinitionDelegate.java
Patch:
@@ -401,7 +401,7 @@ private LifeCycleDelegate(BeanDefinition<T> definition) {
     /**
      * @param <T> The bean definition type
      */
-    private static class ValidatingDelegate<T> extends BeanDefinitionDelegate<T> implements ProxyValidatingBeanDefinitino<T> {
+    private static final class ValidatingDelegate<T> extends BeanDefinitionDelegate<T> implements ProxyValidatingBeanDefinitino<T> {
         private ValidatingDelegate(BeanDefinition<T> definition) {
             super(definition);
         }
@@ -410,7 +410,7 @@ private ValidatingDelegate(BeanDefinition<T> definition) {
     /**
      * @param <T> The bean definition type
      */
-    private static class LifeCycleValidatingDelegate<T> extends LifeCycleDelegate<T> implements ProxyValidatingBeanDefinitino<T> {
+    private static final class LifeCycleValidatingDelegate<T> extends LifeCycleDelegate<T> implements ProxyValidatingBeanDefinitino<T> {
         private LifeCycleValidatingDelegate(BeanDefinition<T> definition) {
             super(definition);
         }

File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java
Patch:
@@ -1619,8 +1619,7 @@ private <T> void registerSingletonBean(BeanDefinition<T> beanDefinition, Class<T
             if (!beanDefinition.isIterable()) {
                 BeanKey primaryBeanKey = new BeanKey<>(createdType, null);
                 singletonObjects.put(primaryBeanKey, registration);
-            }
-            else {
+            } else {
                 if (beanDefinition.isPrimary()) {
                     BeanKey primaryBeanKey = new BeanKey<>(beanType, null);
                     singletonObjects.put(primaryBeanKey, registration);

File: inject/src/main/java/io/micronaut/context/ReflectionExecutableMethod.java
Patch:
@@ -163,7 +163,6 @@ public Class<MRT> getType() {
 
         @Override
         public Map<String, Argument<?>> getTypeVariables() {
-            // TODO: build via reflection
             return Collections.emptyMap();
         }
 

File: inject/src/main/java/io/micronaut/context/env/DefaultEnvironment.java
Patch:
@@ -57,7 +57,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -230,8 +230,7 @@ protected Map<CharSequence, Object> populateAnnotationData(
                         }
                     }
                     readAnnotationRawValues(getAnnotationMemberName(member), annotationValue, annotationValues);
-                }
-                else {
+                } else {
                     OptionalValues<?> aliasForValues = getAnnotationValues(member, AliasFor.class);
                     processAnnotationAlias(metadata, isDeclared, parentAnnotations, annotationValues, annotationValue, aliasForValues);
                     readAnnotationRawValues(getAnnotationMemberName(member), annotationValue, annotationValues);

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -746,7 +746,6 @@ public ExecutableMethodWriter visitExecutableMethod(Object declaringType,
             methodProxyShortName,
             isInterface,
             annotationMetadata);
-        // TODO: fix so that exec classes are static inner
 //        executableMethodWriter.makeStaticInner(beanDefinitionInternalName, (ClassWriter) classWriter);
         executableMethodWriter.visitMethod(
             declaringType,

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -65,7 +65,6 @@ public FileTypeHandler(FileTypeHandlerConfiguration configuration) {
     @Override
     public void handle(Object obj, HttpRequest<?> request, NettyHttpResponse<?> response, ChannelHandlerContext context) {
         NettyFileCustomizableResponseType type;
-        System.out.println("inside file handler");
         if (obj instanceof File) {
             type = new NettySystemFileCustomizableResponseType((File) obj);
         } else if (obj instanceof NettyFileCustomizableResponseType) {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -789,8 +789,6 @@ private RouteMatch<?> prepareRouteForExecution(RouteMatch<?> route, NettyHttpReq
             executor = context.channel().eventLoop();
         }
 
-        System.out.println("decorating route");
-
         route = route.decorate(finalRoute -> {
             MediaType defaultResponseMediaType = finalRoute
                 .getProduces()
@@ -1152,7 +1150,6 @@ private Flowable<?> buildResultEmitter(
 
     private MutableHttpResponse<?> messageToResponse(RouteMatch<?> finalRoute, Object message) {
         MutableHttpResponse<?> response;
-        System.out.println("inside message to response " + message.toString());
         if (message instanceof HttpResponse) {
             response = ConversionService.SHARED.convert(message, NettyHttpResponse.class)
                     .orElseThrow(() -> new InternalServerException("Emitted response is not mutable"));

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -490,7 +490,7 @@ private Optional<? extends FileCustomizableResponseType> matchFile(String path)
                     }
                 } else {
                     System.out.println("file doesn't exist");
-                    return Optional.of(new NettyStreamedFileCustomizableResponseType(uri));
+                    return Optional.of(new NettyStreamedFileCustomizableResponseType(url));
                 }
             } catch (URISyntaxException e) {
                 //no-op

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/NettyStreamedFileCustomizableResponseType.java
Patch:
@@ -88,6 +88,7 @@ public void write(HttpRequest<?> request, MutableHttpResponse<?> response, Chann
                 .ifPresent(handler -> context.pipeline().replace(handler, "chunked-handler", new ChunkedWriteHandler()));
 
             System.out.println("writing response");
+            System.out.println(context.pipeline().names());
 
             // Write the request data
             context.write(new DefaultHttpResponse(nettyResponse.protocolVersion(), nettyResponse.status(), nettyResponse.headers()), context.voidPromise());

File: function-client/src/main/java/io/micronaut/function/client/aop/FunctionClientAdvice.java
Patch:
@@ -76,6 +76,8 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             } else {
                 body = parameterValueMap;
             }
+        } else if (len == 0) {
+            body = null;
         } else {
             body = parameterValueMap;
         }

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -20,13 +20,15 @@
 import com.amazonaws.services.lambda.AWSLambdaAsyncClientBuilder;
 import io.micronaut.context.annotation.Bean;
 import io.micronaut.context.annotation.Factory;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.runtime.context.scope.Refreshable;
 
 /**
  * @author graemerocher
  * @since 1.0
  */
 @Factory
+@Requires(beans = AWSLambdaConfiguration.class)
 public class AWSLambdaAsyncClientFactory {
 
     private final AWSLambdaConfiguration configuration;
@@ -45,6 +47,7 @@ public AWSLambdaAsyncClientFactory(AWSLambdaConfiguration configuration) {
      */
     @Bean
     @Refreshable
+    @Requires(beans = AWSLambdaConfiguration.class)
     AWSLambdaAsync awsLambdaAsyncClient() {
         AWSLambdaAsyncClientBuilder builder = configuration.getBuilder();
         return builder.build();

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -31,6 +31,7 @@
 import io.micronaut.configurations.aws.EnvironmentAWSCredentialsProvider;
 import io.micronaut.context.annotation.ConfigurationBuilder;
 import io.micronaut.context.annotation.ConfigurationProperties;
+import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.Environment;
 import io.micronaut.core.util.ArrayUtils;
 
@@ -44,6 +45,7 @@
  * @since 1.0
  */
 @ConfigurationProperties(AWSLambdaConfiguration.PREFIX)
+@Requires(classes = AWSLambdaAsyncClientBuilder.class)
 public class AWSLambdaConfiguration {
 
     /**

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -65,6 +65,7 @@ public FileTypeHandler(FileTypeHandlerConfiguration configuration) {
     @Override
     public void handle(Object obj, HttpRequest<?> request, NettyHttpResponse<?> response, ChannelHandlerContext context) {
         NettyFileCustomizableResponseType type;
+        System.out.println("inside file handler");
         if (obj instanceof File) {
             type = new NettySystemFileCustomizableResponseType((File) obj);
         } else if (obj instanceof NettyFileCustomizableResponseType) {

File: management/src/main/java/io/micronaut/management/endpoint/Endpoint.java
Patch:
@@ -58,12 +58,14 @@
      * @return The ID of the endpoint
      */
     @AliasFor(annotation = ConfigurationReader.class, member = "value")
+    @AliasFor(member = "id")
     String value() default "";
 
     /**
      * @return The ID of the endpoint
      */
     @AliasFor(member = "value")
+    @AliasFor(annotation = ConfigurationReader.class, member = "value")
     String id() default "";
 
     /**

File: http-client/src/main/java/io/micronaut/http/client/HttpClientConfiguration.java
Patch:
@@ -148,7 +148,7 @@ public Optional<Duration> getReadTimeout() {
      * @return The default connect timeout. Defaults to Netty default.
      */
     public Optional<Duration> getConnectTimeout() {
-        return Optional.of(connectTimeout);
+        return Optional.ofNullable(connectTimeout);
     }
 
     /**

File: spring/src/main/java/io/micronaut/spring/tx/annotation/Transactional.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017-2018 original authors
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java
Patch:
@@ -39,6 +39,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@SuppressWarnings("unused")
 @Singleton
 @Requires(classes = HttpServerConfiguration.class)
 public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {
@@ -77,8 +78,7 @@ public ArgumentBinder.BindingResult<Session> bind(ArgumentConversionContext<Sess
                 Session newSession = sessionStore.newSession();
                 attrs.put(HttpSessionFilter.SESSION_ATTRIBUTE, newSession);
                 return () -> Optional.of(newSession);
-            }
-            else {
+            } else {
                 //noinspection unchecked
                 return BindingResult.EMPTY;
             }

File: session/src/main/java/io/micronaut/session/binder/SessionValueArgumentBinder.java
Patch:
@@ -26,7 +26,6 @@
 import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
 import io.micronaut.http.server.HttpServerConfiguration;
 import io.micronaut.http.server.binding.binders.AnnotatedRequestArgumentBinder;
-import io.micronaut.http.server.binding.binders.TypedRequestArgumentBinder;
 import io.micronaut.session.Session;
 import io.micronaut.session.annotation.SessionValue;
 import io.micronaut.session.http.HttpSessionFilter;
@@ -41,6 +40,7 @@
  * @author graemerocher
  * @since 1.0
  */
+@SuppressWarnings("unused")
 @Singleton
 @Requires(classes = HttpServerConfiguration.class)
 public class SessionValueArgumentBinder implements AnnotatedRequestArgumentBinder<SessionValue, Object> {
@@ -54,6 +54,7 @@ public BindingResult<Object> bind(ArgumentConversionContext<Object> context, Htt
         MutableConvertibleValues<Object> attrs = source.getAttributes();
         if (!attrs.contains(OncePerRequestHttpServerFilter.getKey(HttpSessionFilter.class))) {
             // the filter hasn't been executed but the argument is not satisfied
+            //noinspection unchecked
             return ArgumentBinder.BindingResult.UNSATISFIED;
         }
 
@@ -69,6 +70,7 @@ public BindingResult<Object> bind(ArgumentConversionContext<Object> context, Htt
             Session session = existing.get();
             return () -> session.get(finalName, context);
         } else {
+            //noinspection unchecked
             return ArgumentBinder.BindingResult.EMPTY;
         }
     }

File: router/src/main/java/io/micronaut/web/router/RouteMatchUtils.java
Patch:
@@ -36,9 +36,9 @@ public class RouteMatchUtils {
      * @return The optional route match
      */
     public static Optional<RouteMatch> findRouteMatchAtRequest(HttpRequest<?> request) {
-        Optional<Object> routeMatchAttribute = request.getAttribute(HttpAttributes.ROUTE_MATCH);
+        Optional<RouteMatch> routeMatchAttribute = request.getAttribute(HttpAttributes.ROUTE_MATCH, RouteMatch.class);
         if (routeMatchAttribute.isPresent()) {
-            return Optional.of((RouteMatch) routeMatchAttribute.get());
+            return routeMatchAttribute;
         } else {
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Route match attribute for request ({}) not found", request.getPath());

File: session/src/main/java/io/micronaut/session/SessionConfiguration.java
Patch:
@@ -30,7 +30,6 @@
 @ConfigurationProperties(SessionSettings.PREFIX)
 public class SessionConfiguration {
 
-    private static final long DEFAULT_MAX_INACTIVE_INTERVAL = 30;
     private Duration maxInactiveInterval = Duration.ofMinutes(30);
     private Integer maxActiveSessions;
 

File: session/src/main/java/io/micronaut/session/annotation/SessionValue.java
Patch:
@@ -33,7 +33,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ElementType.PARAMETER})
+@Target({ElementType.PARAMETER, ElementType.METHOD})
 @Bindable
 public @interface SessionValue {
 

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -290,7 +290,7 @@ public boolean isRunning() {
     @Override
     @PreDestroy
     public HttpClient stop() {
-        if (isRunning() ) {
+        if (isRunning()) {
             Duration shutdownTimeout = configuration.getShutdownTimeout().orElse(Duration.ofMillis(100));
             Future<?> future = this.group.shutdownGracefully(
                     1,
@@ -1024,8 +1024,8 @@ public HttpContent apply(HttpContent httpContent) throws Exception {
                             .orElse(null);
                     }
                     if (bodyContent == null) {
-                        bodyContent = ConversionService.SHARED.convert(bodyValue, ByteBuf.class).orElseThrow(()->
-                            new HttpClientException("Body ["+bodyValue+"] cannot be encoded to content type ["+requestContentType+"]. No possible codecs or converters found.")
+                        bodyContent = ConversionService.SHARED.convert(bodyValue, ByteBuf.class).orElseThrow(() ->
+                            new HttpClientException("Body [" + bodyValue + "] cannot be encoded to content type [" + requestContentType + "]. No possible codecs or converters found.")
                         );
                     }
                 }

File: http-client/src/main/java/io/micronaut/http/client/exceptions/ReadTimeoutException.java
Patch:
@@ -22,7 +22,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class ReadTimeoutException extends HttpClientException {
+public final class ReadTimeoutException extends HttpClientException {
 
     public static final ReadTimeoutException TIMEOUT_EXCEPTION = new ReadTimeoutException();
 

File: http-client/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -73,7 +73,7 @@ public static Builder builder() {
     /**
      * A builder class to add different {@link Part} to {@link MultipartBody}.
      */
-    public static class Builder {
+    public static final class Builder {
 
         /**
          * List of all parts.

File: cli/src/main/groovy/io/micronaut/cli/io/support/SpringIOUtils.java
Patch:
@@ -425,7 +425,7 @@ public static XmlSlurper createXmlSlurper() throws ParserConfigurationException,
     /**
      * @return A new {@link SAXParser}
      * @throws ParserConfigurationException If there is a parser error
-     *                                      * @throws SAXException If there is an error with SAXO
+     * @throws SAXException                 If there is an error with SAXO
      */
     public static SAXParser newSAXParser() throws ParserConfigurationException, SAXException {
         SAXParserFactory factory = createParserFactory();

File: configurations/gorm-common/src/main/java/io/micronaut/configuration/gorm/configuration/GormPropertyResolverAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/hibernate-gorm/src/main/groovy/io/micronaut/configuration/hibernate/gorm/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/EntityManagerFactoryBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/HibernateTransactionManagerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: configurations/neo4j-gorm/src/main/groovy/io/micronaut/configuration/neo4j/gorm/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/async/SupplierUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/async/subscriber/TypedSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/attr/AttributeHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/attr/MutableAttributeHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/beans/BeanInfo.java
Patch:
@@ -19,14 +19,14 @@
 import java.util.Map;
 
 /**
- * An interface that provides basic bean information. Designed as a simpler replacement for.
- * {@link java.beans.BeanInfo}
+ * An interface that provides basic bean information. Designed as a simpler replacement for {@link java.beans.BeanInfo}.
  *
  * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface BeanInfo<T> {
+
     /**
      * @return The bean class
      */

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -20,8 +20,7 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 
 /**
- * An interface that provides basic bean introspection. Designed as a simpler replacement for
- * {@link java.beans.Introspector}.
+ * An interface that provides basic bean introspection. Designed as a simpler replacement for {@link java.beans.Introspector}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -69,7 +68,8 @@ public static void flushFromCaches(Class<?> clazz) {
      * object. Subsequent calls to this method will be answered with the cached
      * data.
      * </p>
-     * @param <T> type Generic
+     *
+     * @param <T>       type Generic
      * @param beanClass the specified bean class.
      * @return the <code>BeanInfo</code> of the bean class.
      */

File: core/src/main/java/io/micronaut/core/convert/format/MapFormat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/naming/conventions/StringConvention.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/LeaseInfo.java
Patch:
@@ -64,7 +64,7 @@ public class LeaseInfo {
     }
 
     /**
-     * TODO: note about renewalTimestamp legacy:
+     * Note about renewalTimestamp legacy:
      * The previous change to use Jackson ser/deser changed the field name for lastRenewalTimestamp to renewalTimestamp
      * for serialization, which causes an incompatibility with the jacksonNG codec when the server returns data with
      * field renewalTimestamp and jacksonNG expects lastRenewalTimestamp. Remove this legacy field from client code

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/Pet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation;
 
 /**

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation;
 
 // tag::imports[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation;
 
 // tag::imports[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetControllerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation;
 
 import io.micronaut.context.ApplicationContext;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/PetOperations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation;
 
 // tag::imports[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/headers/PetClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation.headers;
 
 import io.micronaut.http.annotation.Header;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/retry/PetClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation.retry;
 
 import io.micronaut.http.client.Client;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/annotation/retry/PetFallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.annotation.retry;
 
 import io.micronaut.http.client.docs.annotation.Pet;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/Book.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.basics;
 
 import com.fasterxml.jackson.annotation.JsonCreator;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/BookController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.basics;
 
 import io.micronaut.http.HttpStatus;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/BookControllerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.basics;
 
 import io.micronaut.context.ApplicationContext;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/Book.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.binding;
 
 import java.net.URL;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.binding;
 
 import io.micronaut.http.HttpStatus;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/binding/BookControllerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.binding;
 
 import io.micronaut.context.ApplicationContext;

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/Headline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.streaming;
 
 /**

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.streaming;
 
 // tag::imports[]

File: http-client/src/test/groovy/io/micronaut/http/client/docs/streaming/HeadlineControllerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.docs.streaming;
 
 import io.micronaut.context.ApplicationContext;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/HttpServerException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ServerStartupException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject-java/src/main/java/io/micronaut/annotation/processing/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * This package contains the Annotation processors that power Micronaut.
  *

File: inject-java/src/test/groovy/io/micronaut/inject/requires/Outer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.requires;
 
 /**

File: inject-java/src/test/java/io/micronaut/docs/aop/introduction/StubExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.introduction;
 
 

File: inject-java/src/test/java/io/micronaut/docs/aop/introduction/StubIntroduction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.introduction;
 
 // tag::imports[]

File: inject-java/src/test/java/io/micronaut/docs/replaces/BookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.replaces;
 
 import io.micronaut.docs.requires.Book;

File: inject-java/src/test/java/io/micronaut/docs/replaces/JdbcBookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.replaces;
 
 import io.micronaut.context.annotation.Requires;

File: inject-java/src/test/java/io/micronaut/docs/replaces/MockBookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.replaces;
 
 import io.micronaut.context.annotation.Replaces;

File: inject-java/src/test/java/io/micronaut/docs/replaces/ReplacesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.replaces;
 
 import io.micronaut.context.ApplicationContext;

File: inject/src/main/java/io/micronaut/context/AbstractExecutable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/ApplicationContextBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/BeanContext.java
Patch:
@@ -29,8 +29,8 @@
  * <p>The core BeanContext abstraction which allows for dependency injection of classes annotated with
  * {@link javax.inject.Inject}.</p>
  * <p>
- * <p>Apart of the standard {@link javax.inject} annotations for dependency injection, additional annotations within
- * the {@link io.micronaut.context.annotation} package allow control over configuration of the bean context.</p>
+ * <p>Apart of the standard {@code javax.inject} annotations for dependency injection, additional annotations within
+ * the {@code io.micronaut.context.annotation} package allow control over configuration of the bean context.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/DefaultApplicationContextBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/DefaultConstructorInjectionPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/DefaultMethodConstructorInjectionPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/DefaultMethodInjectionPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/MissingMethodInjectionPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/ReflectionFieldInjectionPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/annotation/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/condition/Failure.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/condition/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/converters/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/env/EmptyPropertySource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -118,17 +118,17 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String IBM = "ibm";
 
     /**
-     * Running on Kubernetes
+     * Running on Kubernetes.
      */
     String KUBERNETES = "k8s";
 
     /**
-     * Running on Cloud Foundry
+     * Running on Cloud Foundry.
      */
     String CLOUD_FOUNDRY = "pcf";
 
     /**
-     * Running on Heroku
+     * Running on Heroku.
      */
     String HEROKU = "heroku";
 

File: inject/src/main/java/io/micronaut/context/env/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/event/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/exceptions/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/processor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/context/scope/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/processing/ProcessedTypes.java
Patch:
@@ -30,7 +30,7 @@ public interface ProcessedTypes {
     String POST_CONSTRUCT = "javax.annotation.PostConstruct";
 
     /**
-     * Constant for {@link @{@link javax.annotation.PreDestroy}} annotation.
+     * Constant for {@link javax.annotation.PreDestroy}} annotation.
      */
     String PRE_DESTROY = "javax.annotation.PreDestroy";
 }

File: inject/src/main/java/io/micronaut/inject/visitor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassWriterOutputVisitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/writer/DirectoryClassWriterOutputVisitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/writer/FileBackedGeneratedFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/src/main/java/io/micronaut/inject/writer/GeneratedFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -50,8 +50,8 @@ public class HealthEndpoint {
     private HealthLevelOfDetailResolver healthLevelOfDetailResolver;
 
     /**
-     * @param healthAggregator The {@link HealthAggregator}
-     * @param healthIndicators The {@link HealthIndicator}
+     * @param healthAggregator            The {@link HealthAggregator}
+     * @param healthIndicators            The {@link HealthIndicator}
      * @param healthLevelOfDetailResolver The {@link HealthLevelOfDetailResolver}
      */
     public HealthEndpoint(HealthAggregator healthAggregator,
@@ -70,6 +70,6 @@ public HealthEndpoint(HealthAggregator healthAggregator,
     Single getHealth(@Nullable Principal principal) {
 
         return Single.fromPublisher(healthAggregator.aggregate(healthIndicators,
-                healthLevelOfDetailResolver.levelOfDetail(principal)));
+            healthLevelOfDetailResolver.levelOfDetail(principal)));
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoAggregator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/impl/RxInfoAggregator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -59,7 +59,7 @@ public Publisher<Map<String, Object>> aggregate(InfoSource[] sources) {
      * Create a {@link Flowable} of ordered {@link PropertySource} from an array of {@link InfoSource}.
      *
      * @param sources Array of {@link InfoSource}
-     * @return An {@link Flowable} of {@link Map.Entry}, where the key is an {@link Integer} and value is the
+     * @return An {@link Flowable} of {@link java.util.Map.Entry}, where the key is an {@link Integer} and value is the
      * {@link PropertySource} returned by the {@link InfoSource}
      */
     protected Flowable<Map.Entry<Integer, PropertySource>> aggregateResults(InfoSource[] sources) {

File: management/src/main/java/io/micronaut/management/endpoint/info/source/BuildInfoSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/source/ConfigurationInfoSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/source/GitInfoSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/info/source/PropertiesInfoSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.function.BiConsumer;
 
 /**
- * Responsible for building {@link Route} instances for the annotations found in the {@link io.micronaut.http.annotation}
+ * Responsible for building {@link Route} instances for the annotations found in the {@code io.micronaut.http.annotation}
  * package.
  *
  * @author Graeme Rocher

File: runtime/src/main/java/io/micronaut/scheduling/executor/DefaultThreadFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthController.java
Patch:
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- * limitations under the License.e
+ * limitations under the License.
  */
 
 package io.micronaut.security.token.jwt.endpoints;

File: spring/src/main/java/io/micronaut/spring/tx/annotation/BindableRuleBasedTransactionAttribute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring/src/main/java/io/micronaut/spring/tx/annotation/TransactionInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring/src/main/java/io/micronaut/spring/tx/annotation/Transactional.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: test-suite/src/test/groovy/io/micronaut/docs/aop/retry/Book.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.retry;
 
 /**

File: test-suite/src/test/groovy/io/micronaut/docs/aop/retry/BookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.retry;
 
 import io.micronaut.retry.annotation.CircuitBreaker;

File: test-suite/src/test/groovy/io/micronaut/docs/aop/scheduled/ScheduledExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.scheduled;
 
 import io.micronaut.scheduling.annotation.Scheduled;

File: test-suite/src/test/groovy/io/micronaut/docs/aop/validation/BookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.aop.validation;
 
 // tag::imports[]

File: test-suite/src/test/groovy/io/micronaut/docs/ioc/scopes/Car.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.ioc.scopes;
 
 /**

File: test-suite/src/test/groovy/io/micronaut/docs/server/intro/HelloClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.docs.server.intro;
 
 // tag::imports[]

File: tracing/src/main/java/io/micronaut/tracing/DefaultTracer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/annotation/ContinueSpan.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/annotation/NewSpan.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/annotation/SpanTag.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/BraveTracerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/ZipkinServiceInstanceList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/AbstractBraveTracingFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingClientFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpTracingFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jCurrentTraceContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jCurrentTraceContextFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSender.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSenderFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/HttpHeadersTextMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingClientFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingServerFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/TraceRequestAttributes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/hystrix/TracingHystrixConcurrentStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/reactor/ReactorTracingInstrumentation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava1TracingInstrumentation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava2TracingInstrumentation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/scheduling/ThreadFactoryInstrumenter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingCallable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingRunnable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingRunnableInstrumenter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/interceptor/TraceInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/jaeger/JaegerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/src/main/java/io/micronaut/tracing/jaeger/JaegerTracerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -93,8 +93,8 @@ public static <T> Optional<T> tryInstantiate(Constructor<T> type, Object... args
         try {
             return Optional.of(type.newInstance(args));
         } catch (Throwable e) {
-            if (LOG.isErrorEnabled()) {
-                LOG.error("Tried, but could not instantiate type: " + type, e);
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Tried, but could not instantiate type: " + type, e);
             }
             return Optional.empty();
         }

File: http/src/main/java/io/micronaut/http/annotation/Error.java
Patch:
@@ -41,6 +41,7 @@
     /**
      * @return The exception to map to
      */
+    @AliasFor("exception")
     Class<? extends Throwable> value() default Throwable.class;
 
     /**

File: core/src/main/java/io/micronaut/core/beans/BeanInfo.java
Patch:
@@ -19,14 +19,14 @@
 import java.util.Map;
 
 /**
- * An interface that provides basic bean information. Designed as a simpler replacement for.
- * {@link java.beans.BeanInfo}
+ * An interface that provides basic bean information. Designed as a simpler replacement for {@link java.beans.BeanInfo}.
  *
  * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface BeanInfo<T> {
+
     /**
      * @return The bean class
      */

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -20,8 +20,7 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 
 /**
- * An interface that provides basic bean introspection. Designed as a simpler replacement for
- * {@link java.beans.Introspector}.
+ * An interface that provides basic bean introspection. Designed as a simpler replacement for {@link java.beans.Introspector}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -69,7 +68,8 @@ public static void flushFromCaches(Class<?> clazz) {
      * object. Subsequent calls to this method will be answered with the cached
      * data.
      * </p>
-     * @param <T> type Generic
+     *
+     * @param <T>       type Generic
      * @param beanClass the specified bean class.
      * @return the <code>BeanInfo</code> of the bean class.
      */

File: inject/src/main/java/io/micronaut/context/BeanContext.java
Patch:
@@ -29,8 +29,8 @@
  * <p>The core BeanContext abstraction which allows for dependency injection of classes annotated with
  * {@link javax.inject.Inject}.</p>
  * <p>
- * <p>Apart of the standard {@link javax.inject} annotations for dependency injection, additional annotations within
- * the {@link io.micronaut.context.annotation} package allow control over configuration of the bean context.</p>
+ * <p>Apart of the standard {@code javax.inject} annotations for dependency injection, additional annotations within
+ * the {@code io.micronaut.context.annotation} package allow control over configuration of the bean context.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/processing/ProcessedTypes.java
Patch:
@@ -30,7 +30,7 @@ public interface ProcessedTypes {
     String POST_CONSTRUCT = "javax.annotation.PostConstruct";
 
     /**
-     * Constant for {@link @{@link javax.annotation.PreDestroy}} annotation.
+     * Constant for {@link javax.annotation.PreDestroy}} annotation.
      */
     String PRE_DESTROY = "javax.annotation.PreDestroy";
 }

File: management/src/main/java/io/micronaut/management/endpoint/info/impl/RxInfoAggregator.java
Patch:
@@ -59,7 +59,7 @@ public Publisher<Map<String, Object>> aggregate(InfoSource[] sources) {
      * Create a {@link Flowable} of ordered {@link PropertySource} from an array of {@link InfoSource}.
      *
      * @param sources Array of {@link InfoSource}
-     * @return An {@link Flowable} of {@link Map.Entry}, where the key is an {@link Integer} and value is the
+     * @return An {@link Flowable} of {@link java.util.Map.Entry}, where the key is an {@link Integer} and value is the
      * {@link PropertySource} returned by the {@link InfoSource}
      */
     protected Flowable<Map.Entry<Integer, PropertySource>> aggregateResults(InfoSource[] sources) {

File: router/src/main/java/io/micronaut/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.function.BiConsumer;
 
 /**
- * Responsible for building {@link Route} instances for the annotations found in the {@link io.micronaut.http.annotation}
+ * Responsible for building {@link Route} instances for the annotations found in the {@code io.micronaut.http.annotation}
  * package.
  *
  * @author Graeme Rocher

File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java
Patch:
@@ -93,8 +93,8 @@ public static <T> Optional<T> tryInstantiate(Constructor<T> type, Object... args
         try {
             return Optional.of(type.newInstance(args));
         } catch (Throwable e) {
-            if (LOG.isErrorEnabled()) {
-                LOG.error("Tried, but could not instantiate type: " + type, e);
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Tried, but could not instantiate type: " + type, e);
             }
             return Optional.empty();
         }

File: http/src/main/java/io/micronaut/http/annotation/Error.java
Patch:
@@ -41,6 +41,7 @@
     /**
      * @return The exception to map to
      */
+    @AliasFor("exception")
     Class<? extends Throwable> value() default Throwable.class;
 
     /**

File: cli/src/main/groovy/io/micronaut/cli/io/support/SpringIOUtils.java
Patch:
@@ -425,7 +425,7 @@ public static XmlSlurper createXmlSlurper() throws ParserConfigurationException,
     /**
      * @return A new {@link SAXParser}
      * @throws ParserConfigurationException If there is a parser error
-     *                                      * @throws SAXException If there is an error with SAXO
+     * @throws SAXException                 If there is an error with SAXO
      */
     public static SAXParser newSAXParser() throws ParserConfigurationException, SAXException {
         SAXParserFactory factory = createParserFactory();

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/LeaseInfo.java
Patch:
@@ -64,7 +64,7 @@ public class LeaseInfo {
     }
 
     /**
-     * TODO: note about renewalTimestamp legacy:
+     * Note about renewalTimestamp legacy:
      * The previous change to use Jackson ser/deser changed the field name for lastRenewalTimestamp to renewalTimestamp
      * for serialization, which causes an incompatibility with the jacksonNG codec when the server returns data with
      * field renewalTimestamp and jacksonNG expects lastRenewalTimestamp. Remove this legacy field from client code

File: inject/src/main/java/io/micronaut/context/env/Environment.java
Patch:
@@ -118,17 +118,17 @@ public interface Environment extends PropertyResolver, LifeCycle<Environment>, C
     String IBM = "ibm";
 
     /**
-     * Running on Kubernetes
+     * Running on Kubernetes.
      */
     String KUBERNETES = "k8s";
 
     /**
-     * Running on Cloud Foundry
+     * Running on Cloud Foundry.
      */
     String CLOUD_FOUNDRY = "pcf";
 
     /**
-     * Running on Heroku
+     * Running on Heroku.
      */
     String HEROKU = "heroku";
 

File: management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java
Patch:
@@ -50,8 +50,8 @@ public class HealthEndpoint {
     private HealthLevelOfDetailResolver healthLevelOfDetailResolver;
 
     /**
-     * @param healthAggregator The {@link HealthAggregator}
-     * @param healthIndicators The {@link HealthIndicator}
+     * @param healthAggregator            The {@link HealthAggregator}
+     * @param healthIndicators            The {@link HealthIndicator}
      * @param healthLevelOfDetailResolver The {@link HealthLevelOfDetailResolver}
      */
     public HealthEndpoint(HealthAggregator healthAggregator,
@@ -70,6 +70,6 @@ public HealthEndpoint(HealthAggregator healthAggregator,
     Single getHealth(@Nullable Principal principal) {
 
         return Single.fromPublisher(healthAggregator.aggregate(healthIndicators,
-                healthLevelOfDetailResolver.levelOfDetail(principal)));
+            healthLevelOfDetailResolver.levelOfDetail(principal)));
     }
 }

File: management/src/main/java/io/micronaut/management/endpoint/Endpoint.java
Patch:
@@ -52,7 +52,7 @@
     /**
      * Whether endpoints are sensitive by default.
      */
-    boolean SENSITIVE = false;
+    boolean SENSITIVE = true;
 
     /**
      * @return The ID of the endpoint

File: management/src/main/java/io/micronaut/management/endpoint/Endpoint.java
Patch:
@@ -52,7 +52,7 @@
     /**
      * Whether endpoints are sensitive by default.
      */
-    boolean SENSITIVE = false;
+    boolean SENSITIVE = true;
 
     /**
      * @return The ID of the endpoint

File: test-suite/src/test/groovy/io/micronaut/docs/server/routes/MyRoutes.java
Patch:
@@ -36,7 +36,7 @@ public MyRoutes(ExecutionHandleLocator executionHandleLocator, UriNamingStrategy
 
     @Inject
     void issuesRoutes(IssuesController issuesController) { // <2>
-        GET("/show/{name}", issuesController, "issue", String.class); // <3>
+        GET("/show/{name}", issuesController, "issue", Integer.class); // <3>
     }
 }
 // end::class[]

File: configurations/hibernate-gorm/src/main/groovy/io/micronaut/configuration/hibernate/gorm/package-info.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Copyright 2018 original authors
  *
@@ -14,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Configuration for GORM for Hibernate
+ * Configuration for GORM for Hibernate.
  *
  * @author graemerocher
  * @since 1.0
@@ -30,4 +30,4 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 import org.grails.orm.hibernate.HibernateDatastore;
-import org.hibernate.SessionFactory;
\ No newline at end of file
+import org.hibernate.SessionFactory;

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/package-info.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains a configuration for Hibernate and JPA
+ * This package contains a configuration for Hibernate and JPA.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,4 +28,4 @@
 import io.micronaut.context.annotation.Requires;
 import org.hibernate.SessionFactory;
 
-import javax.persistence.Entity;
\ No newline at end of file
+import javax.persistence.Entity;

File: configurations/neo4j-gorm/src/main/groovy/io/micronaut/configuration/neo4j/gorm/package-info.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This configuration contains setup class for GORM for Neo4j
+ * This configuration contains setup class for GORM for Neo4j.
  *
  * @author graemerocher
  * @since 1.0
@@ -25,4 +26,4 @@
 
 import grails.gorm.annotation.Entity;
 import io.micronaut.context.annotation.Requires;
-import org.neo4j.driver.v1.Driver;
\ No newline at end of file
+import org.neo4j.driver.v1.Driver;

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -31,7 +31,7 @@ public class Introspector {
     /* The cache to store Bean Info objects that have been found or created */
     private static final int DEFAULT_CAPACITY = 128;
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "ConstantName"})
     private static final Cache<Class<?>, BeanInfo> theCache = Caffeine.newBuilder()
                                                                       .maximumSize(DEFAULT_CAPACITY)
                                                                       .build();

File: core/src/main/java/io/micronaut/core/convert/ArgumentConversionContext.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Extended version of the {@link ConversionContext} specifically for conversion {@link Argument} instances.
  *
+ * @param <T> The type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/ConversionService.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * A service for allowing conversion from one type to another.
  *
+ * @param <Impl> The type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * Specialization of {@link ConvertibleValues} where each name has multiple possible values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValuesMap.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * An implementation of {@link ConvertibleMultiValues} that uses a backing {@link LinkedHashMap}.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * An interface for classes that represent a map-like structure of values that can be converted.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -119,8 +120,8 @@ default Map<String, V> asMap() {
      *
      * @param keyType   The key type
      * @param valueType The value type
-     * @param <KT>
-     * @param <VT>
+     * @param <KT>      The key type
+     * @param <VT>      The value type
      * @return The values
      */
     default <KT, VT> Map<KT, VT> asMap(Class<KT> keyType, Class<VT> valueType) {

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleMultiValues.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 /**
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleValues.java
Patch:
@@ -16,13 +16,13 @@
 
 package io.micronaut.core.convert.value;
 
-
 import javax.annotation.Nullable;
 import java.util.Map;
 
 /**
  * A {@link ConvertibleValues} that is mutable.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/io/buffer/ReferenceCounted.java
Patch:
@@ -31,6 +31,7 @@ public interface ReferenceCounted {
     /**
      * Release a reference to this object.
      *
+     * @return Whether the reference has been released
      * @throws IllegalStateException if the reference count is already 0
      */
     boolean release();

File: core/src/main/java/io/micronaut/core/io/scan/AnnotatedTypeInfoVisitor.java
Patch:
@@ -37,6 +37,9 @@ class AnnotatedTypeInfoVisitor extends ClassVisitor implements AnnotatedTypeInfo
     private String className;
     private boolean isAbstract;
 
+    /**
+     * Default constructor.
+     */
     public AnnotatedTypeInfoVisitor() {
         super(Opcodes.ASM5);
     }

File: core/src/main/java/io/micronaut/core/io/scan/Attribute.java
Patch:
@@ -43,7 +43,7 @@ class Attribute {
     /**
      * The type of this attribute.
      */
-    public final String type;
+    final String type;
 
     /**
      * The raw value of this attribute, used only for unknown attributes.

File: core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan</p>.
+ * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -39,6 +39,7 @@ public class CachingClassPathAnnotationScanner extends ClassPathAnnotationScanne
 
     /**
      * Constructor.
+     *
      * @param classLoader classLoader
      */
     public CachingClassPathAnnotationScanner(ClassLoader classLoader) {
@@ -57,7 +58,7 @@ protected List<Class> doScan(String annotation, String pkg) {
     }
 
     /**
-     * Inner class CacheKey
+     * Inner class CacheKey.
      */
     private final class CacheKey implements Serializable {
         final String annotation;

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -31,7 +31,6 @@ public interface ClassPathResourceLoader extends ResourceLoader {
     ClassLoader getClassLoader();
 
     /**
-     *
      * @param path The path to a resource including a prefix
      *             appended by a colon. Ex (classpath:, file:)
      * @return Whether the given resource loader supports the prefix
@@ -42,7 +41,8 @@ default boolean supportsPrefix(String path) {
     }
 
     /**
-     * Return the default {@link ClassPathResourceLoader} for the given class loader
+     * Return the default {@link ClassPathResourceLoader} for the given class loader.
+     *
      * @param classLoader The classloader
      * @return The default loader
      */

File: core/src/main/java/io/micronaut/core/io/socket/SocketUtils.java
Patch:
@@ -36,6 +36,7 @@ public class SocketUtils {
     // no unsigned short type in Java so use constant
     private static final int MAX_PORT_RANGE = 65535;
 
+    @SuppressWarnings("ConstantName")
     private static final Random random = new Random(System.currentTimeMillis());
 
     /**

File: core/src/main/java/io/micronaut/core/naming/conventions/TypeConvention.java
Patch:
@@ -35,6 +35,9 @@ public enum TypeConvention {
 
     private final String suffix;
 
+    /**
+     * Default constructor.
+     */
     TypeConvention() {
         this.suffix = NameUtils.capitalize(name().toLowerCase(Locale.ENGLISH));
     }

File: core/src/main/java/io/micronaut/core/order/OrderUtil.java
Patch:
@@ -91,7 +91,7 @@ public static void reverseSort(Object[] array) {
      *
      * @param objects The array to sort
      */
-    public static void sort(Ordered...objects) {
+    public static void sort(Ordered... objects) {
         Arrays.sort(objects, COMPARATOR);
     }
 
@@ -101,7 +101,7 @@ public static void sort(Ordered...objects) {
      * @param objects The array to sort
      */
     public static void sort(Object[] objects) {
-        Arrays.sort(objects,COMPARATOR);
+        Arrays.sort(objects, COMPARATOR);
     }
 
     private static int getOrder(Object o) {

File: core/src/main/java/io/micronaut/core/type/ArgumentValue.java
Patch:
@@ -19,10 +19,12 @@
 /**
  * An {@link Argument} with a value.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface ArgumentValue<V> extends Argument<V> {
+
     /**
      * @return The current value of the argument
      */

File: core/src/main/java/io/micronaut/core/type/MutableArgumentValue.java
Patch:
@@ -19,6 +19,7 @@
 /**
  * A mutable version of the {@link ArgumentValue} interface.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/type/ReturnType.java
Patch:
@@ -51,7 +51,7 @@ default Argument<T> asArgument() {
      *
      * @param type          The type
      * @param typeArguments The type arguments
-     * @param <T1>
+     * @param <T1>          The return type
      * @return A {@link ReturnType}
      */
     static <T1> ReturnType<T1> of(Class<T1> type, Argument<?>... typeArguments) {

File: core/src/main/java/io/micronaut/core/type/TypeVariableResolver.java
Patch:
@@ -50,6 +50,7 @@ default Optional<Argument<?>> getFirstTypeVariable() {
     }
 
     /**
+     * @param name The name
      * @return Return the first type parameter if it is present
      */
     default Optional<Argument<?>> getTypeVariable(String name) {

File: core/src/main/java/io/micronaut/core/value/OptionalMultiValues.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * An {@link OptionalValues} that for each key features an {@link java.util.Optional} {@link List} of values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/value/OptionalValues.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.core.value;
 
-
 import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Collections;
@@ -28,6 +27,7 @@
 /**
  * A simple type safe abstraction over a map of optional values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: configurations/hibernate-gorm/src/main/groovy/io/micronaut/configuration/hibernate/gorm/package-info.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Copyright 2018 original authors
  *
@@ -14,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Configuration for GORM for Hibernate
+ * Configuration for GORM for Hibernate.
  *
  * @author graemerocher
  * @since 1.0
@@ -30,4 +30,4 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 import org.grails.orm.hibernate.HibernateDatastore;
-import org.hibernate.SessionFactory;
\ No newline at end of file
+import org.hibernate.SessionFactory;

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/package-info.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains a configuration for Hibernate and JPA
+ * This package contains a configuration for Hibernate and JPA.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,4 +28,4 @@
 import io.micronaut.context.annotation.Requires;
 import org.hibernate.SessionFactory;
 
-import javax.persistence.Entity;
\ No newline at end of file
+import javax.persistence.Entity;

File: configurations/neo4j-gorm/src/main/groovy/io/micronaut/configuration/neo4j/gorm/package-info.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This configuration contains setup class for GORM for Neo4j
+ * This configuration contains setup class for GORM for Neo4j.
  *
  * @author graemerocher
  * @since 1.0
@@ -25,4 +26,4 @@
 
 import grails.gorm.annotation.Entity;
 import io.micronaut.context.annotation.Requires;
-import org.neo4j.driver.v1.Driver;
\ No newline at end of file
+import org.neo4j.driver.v1.Driver;

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -31,7 +31,7 @@ public class Introspector {
     /* The cache to store Bean Info objects that have been found or created */
     private static final int DEFAULT_CAPACITY = 128;
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "ConstantName"})
     private static final Cache<Class<?>, BeanInfo> theCache = Caffeine.newBuilder()
                                                                       .maximumSize(DEFAULT_CAPACITY)
                                                                       .build();

File: core/src/main/java/io/micronaut/core/convert/ArgumentConversionContext.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Extended version of the {@link ConversionContext} specifically for conversion {@link Argument} instances.
  *
+ * @param <T> The type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/ConversionService.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * A service for allowing conversion from one type to another.
  *
+ * @param <Impl> The type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * Specialization of {@link ConvertibleValues} where each name has multiple possible values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValuesMap.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * An implementation of {@link ConvertibleMultiValues} that uses a backing {@link LinkedHashMap}.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * An interface for classes that represent a map-like structure of values that can be converted.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -119,8 +120,8 @@ default Map<String, V> asMap() {
      *
      * @param keyType   The key type
      * @param valueType The value type
-     * @param <KT>
-     * @param <VT>
+     * @param <KT>      The key type
+     * @param <VT>      The value type
      * @return The values
      */
     default <KT, VT> Map<KT, VT> asMap(Class<KT> keyType, Class<VT> valueType) {

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleMultiValues.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 /**
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/value/MutableConvertibleValues.java
Patch:
@@ -16,13 +16,13 @@
 
 package io.micronaut.core.convert.value;
 
-
 import javax.annotation.Nullable;
 import java.util.Map;
 
 /**
  * A {@link ConvertibleValues} that is mutable.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/io/buffer/ReferenceCounted.java
Patch:
@@ -31,6 +31,7 @@ public interface ReferenceCounted {
     /**
      * Release a reference to this object.
      *
+     * @return Whether the reference has been released
      * @throws IllegalStateException if the reference count is already 0
      */
     boolean release();

File: core/src/main/java/io/micronaut/core/io/scan/AnnotatedTypeInfoVisitor.java
Patch:
@@ -37,6 +37,9 @@ class AnnotatedTypeInfoVisitor extends ClassVisitor implements AnnotatedTypeInfo
     private String className;
     private boolean isAbstract;
 
+    /**
+     * Default constructor.
+     */
     public AnnotatedTypeInfoVisitor() {
         super(Opcodes.ASM5);
     }

File: core/src/main/java/io/micronaut/core/io/scan/Attribute.java
Patch:
@@ -43,7 +43,7 @@ class Attribute {
     /**
      * The type of this attribute.
      */
-    public final String type;
+    final String type;
 
     /**
      * The raw value of this attribute, used only for unknown attributes.

File: core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan</p>.
+ * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -39,6 +39,7 @@ public class CachingClassPathAnnotationScanner extends ClassPathAnnotationScanne
 
     /**
      * Constructor.
+     *
      * @param classLoader classLoader
      */
     public CachingClassPathAnnotationScanner(ClassLoader classLoader) {
@@ -57,7 +58,7 @@ protected List<Class> doScan(String annotation, String pkg) {
     }
 
     /**
-     * Inner class CacheKey
+     * Inner class CacheKey.
      */
     private final class CacheKey implements Serializable {
         final String annotation;

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -31,7 +31,6 @@ public interface ClassPathResourceLoader extends ResourceLoader {
     ClassLoader getClassLoader();
 
     /**
-     *
      * @param path The path to a resource including a prefix
      *             appended by a colon. Ex (classpath:, file:)
      * @return Whether the given resource loader supports the prefix
@@ -42,7 +41,8 @@ default boolean supportsPrefix(String path) {
     }
 
     /**
-     * Return the default {@link ClassPathResourceLoader} for the given class loader
+     * Return the default {@link ClassPathResourceLoader} for the given class loader.
+     *
      * @param classLoader The classloader
      * @return The default loader
      */

File: core/src/main/java/io/micronaut/core/io/socket/SocketUtils.java
Patch:
@@ -36,6 +36,7 @@ public class SocketUtils {
     // no unsigned short type in Java so use constant
     private static final int MAX_PORT_RANGE = 65535;
 
+    @SuppressWarnings("ConstantName")
     private static final Random random = new Random(System.currentTimeMillis());
 
     /**

File: core/src/main/java/io/micronaut/core/naming/conventions/TypeConvention.java
Patch:
@@ -35,6 +35,9 @@ public enum TypeConvention {
 
     private final String suffix;
 
+    /**
+     * Default constructor.
+     */
     TypeConvention() {
         this.suffix = NameUtils.capitalize(name().toLowerCase(Locale.ENGLISH));
     }

File: core/src/main/java/io/micronaut/core/order/OrderUtil.java
Patch:
@@ -91,7 +91,7 @@ public static void reverseSort(Object[] array) {
      *
      * @param objects The array to sort
      */
-    public static void sort(Ordered...objects) {
+    public static void sort(Ordered... objects) {
         Arrays.sort(objects, COMPARATOR);
     }
 
@@ -101,7 +101,7 @@ public static void sort(Ordered...objects) {
      * @param objects The array to sort
      */
     public static void sort(Object[] objects) {
-        Arrays.sort(objects,COMPARATOR);
+        Arrays.sort(objects, COMPARATOR);
     }
 
     private static int getOrder(Object o) {

File: core/src/main/java/io/micronaut/core/type/ArgumentValue.java
Patch:
@@ -19,10 +19,12 @@
 /**
  * An {@link Argument} with a value.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface ArgumentValue<V> extends Argument<V> {
+
     /**
      * @return The current value of the argument
      */

File: core/src/main/java/io/micronaut/core/type/MutableArgumentValue.java
Patch:
@@ -19,6 +19,7 @@
 /**
  * A mutable version of the {@link ArgumentValue} interface.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/type/ReturnType.java
Patch:
@@ -51,7 +51,7 @@ default Argument<T> asArgument() {
      *
      * @param type          The type
      * @param typeArguments The type arguments
-     * @param <T1>
+     * @param <T1>          The return type
      * @return A {@link ReturnType}
      */
     static <T1> ReturnType<T1> of(Class<T1> type, Argument<?>... typeArguments) {

File: core/src/main/java/io/micronaut/core/type/TypeVariableResolver.java
Patch:
@@ -50,6 +50,7 @@ default Optional<Argument<?>> getFirstTypeVariable() {
     }
 
     /**
+     * @param name The name
      * @return Return the first type parameter if it is present
      */
     default Optional<Argument<?>> getTypeVariable(String name) {

File: core/src/main/java/io/micronaut/core/value/OptionalMultiValues.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * An {@link OptionalValues} that for each key features an {@link java.util.Optional} {@link List} of values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/value/OptionalValues.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.micronaut.core.value;
 
-
 import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Collections;
@@ -28,6 +27,7 @@
 /**
  * A simple type safe abstraction over a map of optional values.
  *
+ * @param <V> The generic value
  * @author Graeme Rocher
  * @since 1.0
  */

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/Check.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.consul.client.v1;
 
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
@@ -45,7 +46,7 @@ public interface Check {
     Status status();
 
     /**
-     * Valid health status values
+     * Valid health status values.
      */
     @JsonNaming(PropertyNamingStrategy.LowerCaseStrategy.class)
     enum Status {

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -23,5 +24,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.discovery.consul.condition.RequiresConsul;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.consul.condition.RequiresConsul;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/consul/condition/RequiresConsul.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.consul.condition;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Meta annotation for Consul requirements
+ * Meta annotation for Consul requirements.
  *
  * @author graemerocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/consul/package-info.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains client APIs, service discovery and distributed configuration integration between Micronaut and Consul (https://www.consul.io)
+ * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
+ * and Consul (https://www.consul.io).
  *
  * @author graemerocher
  * @since 1.0
@@ -23,4 +25,3 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.consul.condition.RequiresConsul;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -23,5 +24,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.discovery.eureka.condition.RequiresEureka;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.eureka.condition.RequiresEureka;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/condition/RequiresEureka.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.eureka.condition;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Meta annotation for that can be added to any component that requires Eureka to load
+ * Meta annotation for that can be added to any component that requires Eureka to load.
  *
  * @author graemerocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/package-info.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains client APIs, service discovery and distributed configuration integration between Micronaut and Eureka (https://github.com/Netflix/eureka)
+ * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
+ * and Eureka (https://github.com/Netflix/eureka).
  *
  * @author graemerocher
  * @since 1.0
@@ -24,5 +26,3 @@
 package io.micronaut.discovery.eureka;
 
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.eureka.condition.RequiresEureka;
\ No newline at end of file

File: http/src/main/java/io/micronaut/http/HttpParameters.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http;
 
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 
 /**
- * Represents HTTP query parameters parsed from the {@link HttpRequest#getUri()}
+ * Represents HTTP query parameters parsed from the {@link HttpRequest#getUri()}.
  *
  * @author Graeme Rocher
  * @see HttpRequest

File: http/src/main/java/io/micronaut/http/annotation/Body.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from the HTTP body
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from the HTTP
+ * body.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Controller.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: http/src/main/java/io/micronaut/http/annotation/CookieValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from an HTTP cookie
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from an HTTP
+ * cookie.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Delete.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#DELETE}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#DELETE}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Get.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#GET}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#GET}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -55,7 +56,7 @@
     String[] produces() default {};
 
     /**
-     * The default consumes. Ignored for server request which never a consume a value for a GET request
+     * The default consumes. Ignored for server request which never a consume a value for a GET request.
      *
      * @return The default consumes, otherwise override from controller
      */

File: http/src/main/java/io/micronaut/http/annotation/Head.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#HEAD}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#HEAD}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/HttpMethodMapping.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A meta annotation for HTTP {@link Controller} actions</p>
+ * <p>A meta annotation for HTTP {@link Controller} actions.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Options.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#OPTIONS}
+ * Annotation that can be applied to method to signify the method receives a
+ * {@link io.micronaut.http.HttpMethod#OPTIONS}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Part.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,8 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from a specific part
- * of a "multipart/form-data" request.
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from a specific
+ * part of a "multipart/form-data" request.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Patch.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PATCH}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PATCH}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Post.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#POST}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#POST}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -54,7 +55,6 @@
     @AliasFor(annotation = Consumes.class, member = "value")
     String[] consumes() default {};
 
-
     /**
      * @return The default produces, otherwise override from controller
      */

File: http/src/main/java/io/micronaut/http/annotation/Produces.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>An annotation to indicate the {@link MediaType}s produced by a particular component. </p>
+ * <p>An annotation to indicate the {@link MediaType}s produced by a particular component.</p>
  * <p>
  * <p>Generally with controllers one can use the {@code produces} attribute of the {@code Controller} annotation,
  * however this annotation is more generic and applies to any component</p>

File: http/src/main/java/io/micronaut/http/annotation/Put.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PUT}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PUT}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/QueryValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,13 +24,12 @@
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
-import java.net.URI;
 
 /**
- * Indicates that the parameter to a method should be bound from a value in the query string of the URI
+ * Indicates that the parameter to a method should be bound from a value in the query string of the URI.
  *
  * @author Graeme Rocher
- * @see URI#getQuery()
+ * @see java.net.URI#getQuery()
  * @since 1.0
  */
 @Documented

File: http/src/main/java/io/micronaut/http/annotation/Trace.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#TRACE}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#TRACE}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/filter/HttpClientFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.filter;
 
 import io.micronaut.http.HttpRequest;
@@ -31,8 +32,8 @@
 public interface HttpClientFilter extends HttpFilter {
 
     /**
-     * A variation of {@link HttpFilter#doFilter(HttpRequest, FilterChain)} that receives a {@link MutableHttpRequest} allowing
-     * the request to be modified.
+     * A variation of {@link HttpFilter#doFilter(HttpRequest, FilterChain)} that receives a {@link MutableHttpRequest}
+     * allowing the request to be modified.
      *
      * @param request The request
      * @param chain   The filter chain

File: http/src/main/java/io/micronaut/http/filter/HttpServerFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.filter;
 
 import io.micronaut.http.HttpRequest;
@@ -21,7 +22,7 @@
 import org.reactivestreams.Publisher;
 
 /**
- * An HttpServerFilter extends {@link HttpFilter} and provides the response as a {@link MutableHttpResponse}
+ * An HttpServerFilter extends {@link HttpFilter} and provides the response as a {@link MutableHttpResponse}.
  *
  * @author Graeme Rocher
  * @see HttpFilter
@@ -31,7 +32,7 @@ public interface HttpServerFilter extends HttpFilter {
 
     /**
      * Variation of the {@link #doFilter(HttpRequest, FilterChain)} method that accepts a {@link ServerFilterChain}
-     * which allows to mutate the outgoing HTTP response
+     * which allows to mutate the outgoing HTTP response.
      *
      * @param request The request
      * @param chain   The chain

File: http/src/main/java/io/micronaut/http/multipart/CompletedFileUpload.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.multipart;
 
 /**
  * Represents a completed part of a multipart request.
- *
+ * <p>
  * When used as an argument to an {@link io.micronaut.http.annotation.Controller} instance method, the route
  * is not executed until the part has been fully received. Provides access to metadata about the file as
  * well as the contents.

File: http/src/main/java/io/micronaut/http/uri/UriMatchInfo.java
Patch:
@@ -13,14 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.uri;
 
+package io.micronaut.http.uri;
 
-import java.net.URI;
 import java.util.Map;
 
 /**
- * The result of a call to {@link UriMatchTemplate#match(URI)}
+ * The result of a call to {@link UriMatchTemplate#match(java.net.URI)}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/Check.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.consul.client.v1;
 
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
@@ -45,7 +46,7 @@ public interface Check {
     Status status();
 
     /**
-     * Valid health status values
+     * Valid health status values.
      */
     @JsonNaming(PropertyNamingStrategy.LowerCaseStrategy.class)
     enum Status {

File: discovery-client/src/main/java/io/micronaut/discovery/consul/client/v1/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -23,5 +24,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.discovery.consul.condition.RequiresConsul;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.consul.condition.RequiresConsul;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/consul/condition/RequiresConsul.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.consul.condition;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Meta annotation for Consul requirements
+ * Meta annotation for Consul requirements.
  *
  * @author graemerocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/consul/package-info.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains client APIs, service discovery and distributed configuration integration between Micronaut and Consul (https://www.consul.io)
+ * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
+ * and Consul (https://www.consul.io).
  *
  * @author graemerocher
  * @since 1.0
@@ -23,4 +25,3 @@
 package io.micronaut.discovery.consul;
 
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.consul.condition.RequiresConsul;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * @author graemerocher
  * @since 1.0
@@ -23,5 +24,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.discovery.eureka.condition.RequiresEureka;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.eureka.condition.RequiresEureka;
\ No newline at end of file

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/condition/RequiresEureka.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.eureka.condition;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Meta annotation for that can be added to any component that requires Eureka to load
+ * Meta annotation for that can be added to any component that requires Eureka to load.
  *
  * @author graemerocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/package-info.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * This package contains client APIs, service discovery and distributed configuration integration between Micronaut and Eureka (https://github.com/Netflix/eureka)
+ * This package contains client APIs, service discovery and distributed configuration integration between Micronaut
+ * and Eureka (https://github.com/Netflix/eureka).
  *
  * @author graemerocher
  * @since 1.0
@@ -24,5 +26,3 @@
 package io.micronaut.discovery.eureka;
 
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.discovery.eureka.condition.RequiresEureka;
\ No newline at end of file

File: http/src/main/java/io/micronaut/http/HttpParameters.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http;
 
 import io.micronaut.core.convert.value.ConvertibleMultiValues;
 
 /**
- * Represents HTTP query parameters parsed from the {@link HttpRequest#getUri()}
+ * Represents HTTP query parameters parsed from the {@link HttpRequest#getUri()}.
  *
  * @author Graeme Rocher
  * @see HttpRequest

File: http/src/main/java/io/micronaut/http/annotation/Body.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from the HTTP body
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from the HTTP
+ * body.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Controller.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: http/src/main/java/io/micronaut/http/annotation/CookieValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from an HTTP cookie
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from an HTTP
+ * cookie.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Delete.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#DELETE}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#DELETE}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Get.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#GET}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#GET}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -55,7 +56,7 @@
     String[] produces() default {};
 
     /**
-     * The default consumes. Ignored for server request which never a consume a value for a GET request
+     * The default consumes. Ignored for server request which never a consume a value for a GET request.
      *
      * @return The default consumes, otherwise override from controller
      */

File: http/src/main/java/io/micronaut/http/annotation/Head.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#HEAD}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#HEAD}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/HttpMethodMapping.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A meta annotation for HTTP {@link Controller} actions</p>
+ * <p>A meta annotation for HTTP {@link Controller} actions.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Options.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#OPTIONS}
+ * Annotation that can be applied to method to signify the method receives a
+ * {@link io.micronaut.http.HttpMethod#OPTIONS}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Part.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,8 +26,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation that can be applied to method argument to indicate that the method argument is bound from a specific part
- * of a "multipart/form-data" request.
+ * An annotation that can be applied to method argument to indicate that the method argument is bound from a specific
+ * part of a "multipart/form-data" request.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Patch.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PATCH}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PATCH}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/Post.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#POST}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#POST}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -54,7 +55,6 @@
     @AliasFor(annotation = Consumes.class, member = "value")
     String[] consumes() default {};
 
-
     /**
      * @return The default produces, otherwise override from controller
      */

File: http/src/main/java/io/micronaut/http/annotation/Produces.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>An annotation to indicate the {@link MediaType}s produced by a particular component. </p>
+ * <p>An annotation to indicate the {@link MediaType}s produced by a particular component.</p>
  * <p>
  * <p>Generally with controllers one can use the {@code produces} attribute of the {@code Controller} annotation,
  * however this annotation is more generic and applies to any component</p>

File: http/src/main/java/io/micronaut/http/annotation/Put.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PUT}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#PUT}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/annotation/QueryValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,13 +24,12 @@
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
-import java.net.URI;
 
 /**
- * Indicates that the parameter to a method should be bound from a value in the query string of the URI
+ * Indicates that the parameter to a method should be bound from a value in the query string of the URI.
  *
  * @author Graeme Rocher
- * @see URI#getQuery()
+ * @see java.net.URI#getQuery()
  * @since 1.0
  */
 @Documented

File: http/src/main/java/io/micronaut/http/annotation/Trace.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#TRACE}
+ * Annotation that can be applied to method to signify the method receives a {@link io.micronaut.http.HttpMethod#TRACE}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http/src/main/java/io/micronaut/http/filter/HttpClientFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.filter;
 
 import io.micronaut.http.HttpRequest;
@@ -31,8 +32,8 @@
 public interface HttpClientFilter extends HttpFilter {
 
     /**
-     * A variation of {@link HttpFilter#doFilter(HttpRequest, FilterChain)} that receives a {@link MutableHttpRequest} allowing
-     * the request to be modified.
+     * A variation of {@link HttpFilter#doFilter(HttpRequest, FilterChain)} that receives a {@link MutableHttpRequest}
+     * allowing the request to be modified.
      *
      * @param request The request
      * @param chain   The filter chain

File: http/src/main/java/io/micronaut/http/filter/HttpServerFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.filter;
 
 import io.micronaut.http.HttpRequest;
@@ -21,7 +22,7 @@
 import org.reactivestreams.Publisher;
 
 /**
- * An HttpServerFilter extends {@link HttpFilter} and provides the response as a {@link MutableHttpResponse}
+ * An HttpServerFilter extends {@link HttpFilter} and provides the response as a {@link MutableHttpResponse}.
  *
  * @author Graeme Rocher
  * @see HttpFilter
@@ -31,7 +32,7 @@ public interface HttpServerFilter extends HttpFilter {
 
     /**
      * Variation of the {@link #doFilter(HttpRequest, FilterChain)} method that accepts a {@link ServerFilterChain}
-     * which allows to mutate the outgoing HTTP response
+     * which allows to mutate the outgoing HTTP response.
      *
      * @param request The request
      * @param chain   The chain

File: http/src/main/java/io/micronaut/http/multipart/CompletedFileUpload.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.multipart;
 
 /**
  * Represents a completed part of a multipart request.
- *
+ * <p>
  * When used as an argument to an {@link io.micronaut.http.annotation.Controller} instance method, the route
  * is not executed until the part has been fully received. Provides access to metadata about the file as
  * well as the contents.

File: http/src/main/java/io/micronaut/http/uri/UriMatchInfo.java
Patch:
@@ -13,14 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.http.uri;
 
+package io.micronaut.http.uri;
 
-import java.net.URI;
 import java.util.Map;
 
 /**
- * The result of a call to {@link UriMatchTemplate#match(URI)}
+ * The result of a call to {@link UriMatchTemplate#match(java.net.URI)}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: discovery-client/src/main/java/io/micronaut/discovery/eureka/client/v2/AbstractEurekaClient.java
Patch:
@@ -125,7 +125,7 @@ static class ApplicationInfos {
 
         @JsonCreator
         public ApplicationInfos(@JsonProperty("application") List<ApplicationInfo> applications) {
-            this.applications = applications;
+            this.applications = applications != null ? applications : Collections.emptyList();
         }
 
         @JsonProperty("application")

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/Book.java
Patch:
@@ -30,6 +30,9 @@ public Book(@JsonProperty("title") String title) {
         this.title = title;
     }
 
+    Book() {
+    }
+
     public String getTitle() {
         return title;
     }

File: http-client/src/test/groovy/io/micronaut/http/client/docs/basics/BookController.java
Patch:
@@ -16,6 +16,7 @@
 package io.micronaut.http.client.docs.basics;
 
 import io.micronaut.http.HttpStatus;
+import io.micronaut.http.MediaType;
 import io.micronaut.http.annotation.Body;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Post;
@@ -28,7 +29,7 @@
 @Controller("/amazon")
 public class BookController {
 
-    @Post("/book/{title}")
+    @Post(uri = "/book/{title}", consumes = {MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED})
     @Status(HttpStatus.CREATED)
     Book save(@Body Book book) {
         return book;

File: runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java
Patch:
@@ -47,7 +47,7 @@ public class JacksonConfiguration {
     protected Map<MapperFeature, Boolean> mapper = Collections.emptyMap();
     protected Map<JsonParser.Feature, Boolean> parser = Collections.emptyMap();
     protected Map<JsonGenerator.Feature, Boolean> generator = Collections.emptyMap();
-    protected JsonInclude.Include serializationInclusion = JsonInclude.Include.NON_ABSENT;
+    protected JsonInclude.Include serializationInclusion = JsonInclude.Include.NON_EMPTY;
 
     /**
      * @return The default serialization inclusion settings

File: http-client/src/main/java/io/micronaut/http/client/Client.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -29,7 +30,7 @@
 import java.lang.annotation.Retention;
 
 /**
- * A custom {@link Scope} for injecting {@link HttpClient} implementations
+ * A custom {@link Scope} for injecting {@link HttpClient} implementations.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -56,7 +57,7 @@
     String id() default "";
 
     /**
-     * The base URI for the client
+     * The base URI for the client.
      *
      * @return The base URI
      */

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequestFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client;
 
 import io.micronaut.core.beans.BeanMap;
@@ -24,12 +25,13 @@
 import java.util.Map;
 
 /**
- * Implementation of the {@link HttpRequestFactory} interface for Netty
+ * Implementation of the {@link HttpRequestFactory} interface for Netty.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class NettyClientHttpRequestFactory implements HttpRequestFactory {
+
     @Override
     public <T> MutableHttpRequest<T> get(String uri) {
         return new NettyClientHttpRequest<>(HttpMethod.GET, uri);

File: http-client/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client;
 
 import io.micronaut.core.io.buffer.ByteBuffer;
@@ -24,7 +25,7 @@
 import java.net.URL;
 
 /**
- * Extended version of {@link HttpClient} that exposes an RxJava 2.x specific interface
+ * Extended version of {@link HttpClient} that exposes an RxJava 2.x specific interface.
  *
  * @author graemerocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/RxStreamingHttpClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client;
 
 import io.micronaut.core.io.buffer.ByteBuffer;
@@ -25,7 +26,7 @@
 import java.util.Map;
 
 /**
- * Extended version of {@link StreamingHttpClient} that exposes an RxJava 2.x interface
+ * Extended version of {@link StreamingHttpClient} that exposes an RxJava 2.x interface.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/converters/LoadBalancerConverters.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.converters;
 
 import io.micronaut.core.convert.ConversionService;
@@ -25,7 +26,7 @@
 import java.util.function.Function;
 
 /**
- * Converters from URL to {@link LoadBalancer} interface
+ * Converters from URL to {@link LoadBalancer} interface.
  *
  * @author graemerocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/exceptions/ReadTimeoutException.java
Patch:
@@ -13,15 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.exceptions;
 
 /**
- * An exception thrown when a read timeout occurs
+ * An exception thrown when a read timeout occurs.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class ReadTimeoutException extends HttpClientException {
+
     public static final ReadTimeoutException TIMEOUT_EXCEPTION = new ReadTimeoutException();
 
     private ReadTimeoutException() {

File: http-client/src/main/java/io/micronaut/http/client/multipart/Part.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.multipart;
 
 import io.netty.handler.codec.http.HttpRequest;
@@ -28,12 +29,11 @@
 abstract class Part {
 
     /**
-     * Name of the parameter in Multipart request body
+     * Name of the parameter in Multipart request body.
      */
     protected final String name;
 
     /**
-     *
      * @param name Name of the parameter
      */
     Part(String name) {
@@ -44,7 +44,6 @@ abstract class Part {
     }
 
     /**
-     *
      * @param request Associated request
      * @param factory The factory used to create the {@link InterfaceHttpData}
      * @return {@link InterfaceHttpData} object to build Netty multipart request body

File: http-client/src/main/java/io/micronaut/http/client/multipart/StringPart.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.multipart;
 
 import io.netty.handler.codec.http.HttpRequest;
@@ -30,8 +31,7 @@ class StringPart extends Part {
     protected final String value;
 
     /**
-     *
-     * @param name parameter name
+     * @param name  parameter name
      * @param value String value
      */
     StringPart(String name, String value) {
@@ -44,7 +44,7 @@ class StringPart extends Part {
     }
 
     /**
-     * Create an object of {@link InterfaceHttpData} to build Netty multipart request body
+     * Create an object of {@link InterfaceHttpData} to build Netty multipart request body.
      *
      * @see Part#getData(HttpRequest, HttpDataFactory)
      */

File: http-client/src/main/java/io/micronaut/http/client/reactor/ReactorReactiveClientResultTransformer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.reactor;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import javax.inject.Singleton;
 
 /**
- * Adds custom support for {@link Mono} to handle NOT_FOUND results
+ * Adds custom support for {@link Mono} to handle NOT_FOUND results.
  *
  * @author graemerocher
  * @since 1.0

File: http-client/src/main/java/io/micronaut/http/client/rxjava2/RxReactiveClientResultTransformer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client.rxjava2;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import javax.inject.Singleton;
 
 /**
- * Adds custom support for {@link Maybe} to handle NOT_FOUND results
+ * Adds custom support for {@link Maybe} to handle NOT_FOUND results.
  *
  * @author graemerocher
  * @since 1.0

File: http-netty/src/main/java/io/micronaut/http/netty/stream/HttpStreamsServerHandler.java
Patch:
@@ -73,7 +73,7 @@ public class HttpStreamsServerHandler extends HttpStreamsHandler<HttpRequest, Ht
     /**
      * Default constructor.
      */
-    HttpStreamsServerHandler() {
+    public HttpStreamsServerHandler() {
         this(Collections.emptyList());
     }
 

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookieFactory.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.netty.cookies;
 
 import io.micronaut.http.cookie.Cookie;
 import io.micronaut.http.cookie.CookieFactory;
 
 /**
- * A {@link CookieFactory} for constructing {@link Cookie} instances for Netty
+ * A {@link CookieFactory} for constructing {@link Cookie} instances for Netty.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-netty/src/main/java/io/micronaut/http/netty/reactive/package-info.java
Patch:
@@ -202,10 +202,11 @@ file or class name and description of purpose be included on the
    See the License for the specific language governing permissions and
    limitations under the License.
  */
+
 /**
- * NOTICE: Classes in this package are forked from https://github.com/playframework/netty-reactive-streams
+ * NOTICE: Classes in this package are forked from https://github.com/playframework/netty-reactive-streams.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.http.netty.reactive;
\ No newline at end of file
+package io.micronaut.http.netty.reactive;

File: http-netty/src/main/java/io/micronaut/http/netty/stream/package-info.java
Patch:
@@ -202,10 +202,11 @@ file or class name and description of purpose be included on the
    See the License for the specific language governing permissions and
    limitations under the License.
  */
+
 /**
- * NOTICE: Classes in this package are forked from https://github.com/playframework/netty-reactive-streams
+ * NOTICE: Classes in this package are forked from https://github.com/playframework/netty-reactive-streams.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.http.netty.stream;
\ No newline at end of file
+package io.micronaut.http.netty.stream;

File: inject/src/main/java/io/micronaut/context/ExecutableMethodProcessorListener.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context;
 
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
-import io.micronaut.context.processor.AnnotationProcessor;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.core.async.subscriber.Completable;
 import io.micronaut.core.reflect.GenericTypeUtils;
@@ -30,7 +30,8 @@
 
 /**
  * <p>A {@link BeanCreatedEventListener} that will monitor the creation of {@link ExecutableMethodProcessor} instances
- * and call {@link AnnotationProcessor#process(BeanDefinition, Object)} for each available {@link ExecutableMethod}</p>
+ * and call {@link io.micronaut.context.processor.AnnotationProcessor#process(BeanDefinition, Object)} for each
+ * available {@link ExecutableMethod}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/ProxyTarget.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Bean.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Annotation used to configure a bean. Typically used in conjunction with {@link Factory}</p>
+ * <p>Annotation used to configure a bean. Typically used in conjunction with {@link Factory}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Configuration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
@@ -21,7 +22,7 @@
 
 /**
  * <p>A configuration is a grouping of bean definitions under a package. A configuration can have requirements applied
- * to it with {@link Requires} such that the entire configuration only loads of the requirements are met</p>
+ * to it with {@link Requires} such that the entire configuration only loads of the requirements are met.</p>
  *
  * @author Graeme Rocher
  * @see Requires

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationReader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A meta annotation for use with other annotations to indicate that the annotation reads configuration</p>
+ * <p>A meta annotation for use with other annotations to indicate that the annotation reads configuration.</p>
  *
  * @author Graeme Rocher
  * @see ConfigurationProperties

File: inject/src/main/java/io/micronaut/context/annotation/Context.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -24,7 +25,7 @@
 /**
  * <p>Context scope indicates that the classes life cycle is bound to that of the
  * {@link io.micronaut.context.BeanContext} and it should be initialized and shutdown during startup and shutdown of
- * the underlying {@link io.micronaut.context.BeanContext}</p>
+ * the underlying {@link io.micronaut.context.BeanContext}.</p>
  * <p>
  * <p>Micronaut by default treats all {@link Singleton} bean definitions as lazy and will only load them on demand by
  * annotating a bean with @Context you can ensure that the bean is loaded at the same time as the context</p>

File: inject/src/main/java/io/micronaut/context/annotation/DefaultScope.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Annotation;
@@ -24,7 +25,7 @@
 
 /**
  * A  meta annotation that can be applied to another annotation to specify a fallback scope of no scope is specified
- * by the user for a bean
+ * by the user for a bean.
  *
  * @author graemerocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/EachBean.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/EachProperty.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Factory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import javax.inject.Singleton;

File: inject/src/main/java/io/micronaut/context/annotation/Infrastructure.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Parameter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import io.micronaut.core.bind.annotation.Bindable;
@@ -26,7 +27,7 @@
 
 /**
  * <p>Specifies that an argument to a bean constructor is user provided and a
- * {@link io.micronaut.inject.ParametrizedBeanFactory} should be generated</p>
+ * {@link io.micronaut.inject.ParametrizedBeanFactory} should be generated.</p>
  * <p>
  * <p>Should be applied only to constructor arguments and {@link Bean} factory methods</p>
  *

File: inject/src/main/java/io/micronaut/context/annotation/Primary.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Property.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
@@ -21,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * A property that can be contained within a {@link PropertySource} or used generally throughout the system
+ * A property that can be contained within a {@link PropertySource} or used generally throughout the system.
  *
  * @author graemerocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/PropertySource.java
Patch:
@@ -13,17 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.context.annotation;
 
-import io.micronaut.context.env.Environment;
+package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
 /**
  * <p>An annotation that can be used on either the main class or a test to provide additional hard coded
- * property values to the {@link Environment}</p>
+ * property values to the {@link io.micronaut.context.env.Environment}.</p>
  * <p>
  * <p>These properties are added at a high priority level and override all properties except CLI properties</p>
  *

File: inject/src/main/java/io/micronaut/context/annotation/Prototype.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -22,7 +23,7 @@
 import java.lang.annotation.Retention;
 
 /**
- * Prototype scope is a non-singleton scope that creates a new bean for every injection point
+ * Prototype scope is a non-singleton scope that creates a new bean for every injection point.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Provided.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Replaces.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;

File: inject/src/main/java/io/micronaut/context/annotation/Secondary.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 
 /**
  * <p>Counter part to {@link Primary} that allows reducing the priority of a given bean for the purposes of dependency
- * injection</p>
+ * injection.</p>
  *
  * @author Graeme Rocher
  * @see Qualifier @Qualifier

File: inject/src/main/java/io/micronaut/context/annotation/Type.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * Allows restricting injection by type. Useful when injection lists of instances that need to be isolated by type
+ * Allows restricting injection by type. Useful when injection lists of instances that need to be isolated by type.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Value.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import javax.inject.Qualifier;

File: inject/src/main/java/io/micronaut/context/annotation/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains core annotations related to Dependency Injection and the Bean Container
+ * Contains core annotations related to Dependency Injection and the Bean Container.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.annotation;
\ No newline at end of file
+package io.micronaut.context.annotation;

File: inject/src/main/java/io/micronaut/context/condition/Condition.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.condition;
 
 import java.util.function.Predicate;
 
 /**
- * A condition allows conditional loading of a {@link io.micronaut.inject.BeanConfiguration}
+ * A condition allows conditional loading of a {@link io.micronaut.inject.BeanConfiguration}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -27,7 +28,7 @@
 public interface Condition extends Predicate<ConditionContext> {
 
     /**
-     * Check whether a specific condition is met
+     * Check whether a specific condition is met.
      *
      * @param context The condition context
      * @return True if has been met

File: inject/src/main/java/io/micronaut/context/condition/TrueCondition.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.condition;
 
 /**
- * A {@link Condition} that simply returns true
+ * A {@link Condition} that simply returns true.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/condition/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes and interfaces related to conditional beans
+ * Contains classes and interfaces related to conditional beans.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.condition;
\ No newline at end of file
+package io.micronaut.context.condition;

File: inject/src/main/java/io/micronaut/context/env/PropertiesPropertySourceLoader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env;
 
 import java.io.IOException;
@@ -23,15 +24,15 @@
 import java.util.Set;
 
 /**
- * Default load that handles Java properties files
+ * Default load that handles Java properties files.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class PropertiesPropertySourceLoader extends AbstractPropertySourceLoader {
 
     /**
-     * File extension for property source loader
+     * File extension for property source loader.
      */
     public static final String PROPERTIES_EXTENSION = "properties";
 

File: inject/src/main/java/io/micronaut/context/env/PropertySourceLocator.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env;
 
 import java.util.Optional;
 
 /**
- * An interface for beans that are capable of locating a {@link PropertySource} instance
+ * An interface for beans that are capable of locating a {@link PropertySource} instance.
  *
  * @author graemerocher
  * @since 1.0
  */
 public interface PropertySourceLocator {
 
     /**
-     * Locate a {@link PropertySource} for the given environment
+     * Locate a {@link PropertySource} for the given environment.
      *
      * @param environment The environment
      * @return The located property source

File: inject/src/main/java/io/micronaut/context/env/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Classes related to the Micronaut environment
+ * Classes related to the Micronaut environment.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.env;
\ No newline at end of file
+package io.micronaut.context.env;

File: inject/src/main/java/io/micronaut/context/env/yaml/YamlPropertySourceLoader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env.yaml;
 
 import io.micronaut.context.env.AbstractPropertySourceLoader;
@@ -26,7 +27,7 @@
 import java.util.Set;
 
 /**
- * Loads properties from a YML file
+ * Loads properties from a YML file.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ApplicationEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import java.util.EventObject;
 
 /**
- * An {@link ApplicationEvent} is a user specified event object
+ * An {@link ApplicationEvent} is a user specified event object.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ApplicationEventPublisher.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 /**
- * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances</p>
+ * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances.</p>
  * <p>
  * <p>Note that this interface is designed for application level, non-blocking synchronous events for decoupling code
  * and is not a replacement for a messaging system</p>
@@ -27,7 +28,7 @@
 public interface ApplicationEventPublisher {
 
     /**
-     * Publish the given event
+     * Publish the given event.
      *
      * @param event The event to publish
      */

File: inject/src/main/java/io/micronaut/context/event/BeanContextEvent.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 import java.util.EventObject;
 
 /**
- * A BeanContextEvent is an event fired from the {@link BeanContext} instance
+ * A BeanContextEvent is an event fired from the {@link BeanContext} instance.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ShutdownEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * An event fired prior to starting shutdown sequence
+ * An event fired prior to starting shutdown sequence.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/StartupEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * An event fired once startup is complete
+ * An event fired once startup is complete.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes related to {@link io.micronaut.context.ApplicationContext} event publishing and consuming
+ * Contains classes related to {@link io.micronaut.context.ApplicationContext} event publishing and consuming.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.event;
\ No newline at end of file
+package io.micronaut.context.event;

File: inject/src/main/java/io/micronaut/context/exceptions/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains common exceptions thrown from the {@link io.micronaut.context.BeanContext}
+ * Contains common exceptions thrown from the {@link io.micronaut.context.BeanContext}.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.exceptions;
\ No newline at end of file
+package io.micronaut.context.exceptions;

File: inject/src/main/java/io/micronaut/context/processor/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces related to annotation processing
+ * Contains interfaces related to annotation processing.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.processor;
\ No newline at end of file
+package io.micronaut.context.processor;

File: inject/src/main/java/io/micronaut/context/scope/CustomScopeRegistry.java
Patch:
@@ -13,21 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.scope;
 
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 
 /**
- * An interface for a registry of {@link CustomScope} instances
+ * An interface for a registry of {@link CustomScope} instances.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface CustomScopeRegistry {
 
     /**
-     * Find a custom scope for the given annotation
+     * Find a custom scope for the given annotation.
      *
      * @param scopeAnnotation The scope annotation
      * @return The custom scope

File: inject/src/main/java/io/micronaut/context/scope/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces related to the definition of custom scopes
+ * Contains interfaces related to the definition of custom scopes.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.scope;
\ No newline at end of file
+package io.micronaut.context.scope;

File: inject/src/main/java/io/micronaut/inject/BeanContextConditional.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * Interface for other types that are conditional within a context
+ * Interface for other types that are conditional within a context.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,7 +28,7 @@
 public interface BeanContextConditional {
 
     /**
-     * Return whether this component is enabled for the given context
+     * Return whether this component is enabled for the given context.
      *
      * @param context The context
      * @return True if it is

File: inject/src/main/java/io/micronaut/inject/BeanIdentifier.java
Patch:
@@ -13,15 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.core.naming.Named;
 
 import java.io.Serializable;
 
 /**
- * An identifier for a {@link Bean} that can be used as a key to uniquely identify an instance
+ * An identifier for a {@link io.micronaut.context.annotation.Bean} that can be used as a key to uniquely identify an
+ * instance.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/CallableInjectionPoint.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.type.Argument;
@@ -26,7 +27,8 @@
 public interface CallableInjectionPoint extends InjectionPoint {
 
     /**
-     * The required argument types
+     *
+     * @return The required argument types.
      */
     Argument<?>[] getArguments();
 }

File: inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
@@ -26,8 +27,9 @@
 
 /**
  * An interface for wrapping a {@link BeanDefinition} with another that delegates and potentially decorates the
- * {@link BeanDefinition} instance
+ * {@link BeanDefinition} instance.
  *
+ * @param <T> The bean definition type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ExecutableMethod.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.type.Executable;

File: inject/src/main/java/io/micronaut/inject/InjectionPoint.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
@@ -24,6 +25,7 @@
  * @since 1.0
  */
 public interface InjectionPoint extends AnnotationMetadataProvider {
+
     /**
      * @return The bean that declares this injection point
      */

File: inject/src/main/java/io/micronaut/inject/MethodExecutionHandle.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 /**
- * Represents an execution handle that invokes a method
+ * Represents an execution handle that invokes a method.
  *
+ * @param <R> The result type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ParametrizedBeanFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
@@ -23,8 +24,9 @@
 import java.util.Map;
 
 /**
- * A {@link BeanFactory} that requires additional (possibly user supplied) parameters in order construct a bean
+ * A {@link BeanFactory} that requires additional (possibly user supplied) parameters in order construct a bean.
  *
+ * @param <T> The type
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -52,7 +54,6 @@ T build(BeanResolutionContext resolutionContext,
             BeanDefinition<T> definition,
             Map<String, Object> requiredArgumentValues) throws BeanInstantiationException;
 
-
     @Override
     default T build(BeanResolutionContext resolutionContext, BeanContext context, BeanDefinition<T> definition) throws BeanInstantiationException {
         throw new BeanInstantiationException(definition, "Cannot instantiate parametrized bean with no arguments");

File: inject/src/main/java/io/micronaut/inject/ParametrizedProvider.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import javax.inject.Provider;
 import java.util.Map;
 
 /**
- * An extended version of the {@link Provider} interface for {@link ParametrizedBeanFactory}
+ * An extended version of the {@link Provider} interface for {@link ParametrizedBeanFactory}.
  *
+ * @param <T> The type
  * @author graemerocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ProxyBeanDefinition.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 /**
- * Marker interface for a {@link BeanDefinition} that is an AOP proxy
+ * Marker interface for a {@link BeanDefinition} that is an AOP proxy.
  *
+ * @param <T> The bean definition type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/annotation/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes for reading and writing annotation metadata at compile time
+ * Contains classes for reading and writing annotation metadata at compile time.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.annotation;
\ No newline at end of file
+package io.micronaut.inject.annotation;

File: inject/src/main/java/io/micronaut/inject/configuration/ConfigurationMetadata.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.configuration;
 
 import io.micronaut.core.io.Writable;
@@ -21,7 +22,7 @@
 import java.io.Writer;
 
 /**
- * Metadata about a configuration group
+ * Metadata about a configuration group.
  *
  * @author Graeme Rocher
  */

File: inject/src/main/java/io/micronaut/inject/configuration/PropertyMetadata.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.configuration;
 
 import io.micronaut.core.io.Writable;
@@ -21,7 +22,7 @@
 import java.io.Writer;
 
 /**
- * Metadata about a property
+ * Metadata about a property.
  *
  * @author Graeme Rocher
  */

File: inject/src/main/java/io/micronaut/inject/configuration/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes for reading and writing Configuration metadata at compile time
+ * Contains classes for reading and writing Configuration metadata at compile time.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.configuration;
\ No newline at end of file
+package io.micronaut.inject.configuration;

File: inject/src/main/java/io/micronaut/inject/package-info.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  *
- * Contains the core dependency injection interfaces
+ * Contains the core dependency injection interfaces.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject;
\ No newline at end of file
+package io.micronaut.inject;

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.processing;
 
 import javax.lang.model.element.Name;
 import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 
 /**
- * Utility methods for Java model handling
+ * Utility methods for Java model handling.
  *
  * @author graemerocher
  * @since 1.0
  */
 public class JavaModelUtils {
 
     /**
-     * Get the class name for the given type element. Handles {@link NestingKind}
+     * Get the class name for the given type element. Handles {@link NestingKind}.
      *
      * @param typeElement The type element
      * @return The class name

File: inject/src/main/java/io/micronaut/inject/qualifiers/package-info.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains support classes for creating Bean {@link javax.inject.Qualifier} instances
+ * Contains support classes for creating Bean {@link javax.inject.Qualifier} instances.
  *
  * @see io.micronaut.context.Qualifier
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.qualifiers;
\ No newline at end of file
+package io.micronaut.inject.qualifiers;

File: inject/src/main/java/io/micronaut/inject/visitor/ClassElement.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.visitor;
 
 /**

File: inject/src/main/java/io/micronaut/inject/visitor/FieldElement.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.visitor;
 
 /**

File: inject/src/main/java/io/micronaut/inject/visitor/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces for defining type visitors that work across languages
+ * Contains interfaces for defining type visitors that work across languages.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.visitor;
\ No newline at end of file
+package io.micronaut.inject.visitor;

File: inject/src/main/java/io/micronaut/inject/writer/ProxyingBeanDefinitionVisitor.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.writer;
 
 /**
- * Extends {@link BeanDefinitionVisitor} and adds access to the proxied type name
+ * Extends {@link BeanDefinitionVisitor} and adds access to the proxied type name.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/writer/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes responsible for using ASM to write bean metadata to disk
+ * Contains classes responsible for using ASM to write bean metadata to disk.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.writer;
\ No newline at end of file
+package io.micronaut.inject.writer;

File: inject/src/main/java/io/micronaut/context/ExecutableMethodProcessorListener.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context;
 
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
-import io.micronaut.context.processor.AnnotationProcessor;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.core.async.subscriber.Completable;
 import io.micronaut.core.reflect.GenericTypeUtils;
@@ -30,7 +30,8 @@
 
 /**
  * <p>A {@link BeanCreatedEventListener} that will monitor the creation of {@link ExecutableMethodProcessor} instances
- * and call {@link AnnotationProcessor#process(BeanDefinition, Object)} for each available {@link ExecutableMethod}</p>
+ * and call {@link io.micronaut.context.processor.AnnotationProcessor#process(BeanDefinition, Object)} for each
+ * available {@link ExecutableMethod}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/ProxyTarget.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Bean.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Annotation used to configure a bean. Typically used in conjunction with {@link Factory}</p>
+ * <p>Annotation used to configure a bean. Typically used in conjunction with {@link Factory}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Configuration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
@@ -21,7 +22,7 @@
 
 /**
  * <p>A configuration is a grouping of bean definitions under a package. A configuration can have requirements applied
- * to it with {@link Requires} such that the entire configuration only loads of the requirements are met</p>
+ * to it with {@link Requires} such that the entire configuration only loads of the requirements are met.</p>
  *
  * @author Graeme Rocher
  * @see Requires

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationBuilder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationReader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A meta annotation for use with other annotations to indicate that the annotation reads configuration</p>
+ * <p>A meta annotation for use with other annotations to indicate that the annotation reads configuration.</p>
  *
  * @author Graeme Rocher
  * @see ConfigurationProperties

File: inject/src/main/java/io/micronaut/context/annotation/Context.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -24,7 +25,7 @@
 /**
  * <p>Context scope indicates that the classes life cycle is bound to that of the
  * {@link io.micronaut.context.BeanContext} and it should be initialized and shutdown during startup and shutdown of
- * the underlying {@link io.micronaut.context.BeanContext}</p>
+ * the underlying {@link io.micronaut.context.BeanContext}.</p>
  * <p>
  * <p>Micronaut by default treats all {@link Singleton} bean definitions as lazy and will only load them on demand by
  * annotating a bean with @Context you can ensure that the bean is loaded at the same time as the context</p>

File: inject/src/main/java/io/micronaut/context/annotation/DefaultScope.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Annotation;
@@ -24,7 +25,7 @@
 
 /**
  * A  meta annotation that can be applied to another annotation to specify a fallback scope of no scope is specified
- * by the user for a bean
+ * by the user for a bean.
  *
  * @author graemerocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/EachBean.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/EachProperty.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Factory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import javax.inject.Singleton;

File: inject/src/main/java/io/micronaut/context/annotation/Infrastructure.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Parameter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import io.micronaut.core.bind.annotation.Bindable;
@@ -26,7 +27,7 @@
 
 /**
  * <p>Specifies that an argument to a bean constructor is user provided and a
- * {@link io.micronaut.inject.ParametrizedBeanFactory} should be generated</p>
+ * {@link io.micronaut.inject.ParametrizedBeanFactory} should be generated.</p>
  * <p>
  * <p>Should be applied only to constructor arguments and {@link Bean} factory methods</p>
  *

File: inject/src/main/java/io/micronaut/context/annotation/Primary.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Property.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
@@ -21,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * A property that can be contained within a {@link PropertySource} or used generally throughout the system
+ * A property that can be contained within a {@link PropertySource} or used generally throughout the system.
  *
  * @author graemerocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/PropertySource.java
Patch:
@@ -13,17 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.context.annotation;
 
-import io.micronaut.context.env.Environment;
+package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
 /**
  * <p>An annotation that can be used on either the main class or a test to provide additional hard coded
- * property values to the {@link Environment}</p>
+ * property values to the {@link io.micronaut.context.env.Environment}.</p>
  * <p>
  * <p>These properties are added at a high priority level and override all properties except CLI properties</p>
  *

File: inject/src/main/java/io/micronaut/context/annotation/Prototype.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -22,7 +23,7 @@
 import java.lang.annotation.Retention;
 
 /**
- * Prototype scope is a non-singleton scope that creates a new bean for every injection point
+ * Prototype scope is a non-singleton scope that creates a new bean for every injection point.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Provided.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: inject/src/main/java/io/micronaut/context/annotation/Replaces.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;

File: inject/src/main/java/io/micronaut/context/annotation/Secondary.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -23,7 +24,7 @@
 
 /**
  * <p>Counter part to {@link Primary} that allows reducing the priority of a given bean for the purposes of dependency
- * injection</p>
+ * injection.</p>
  *
  * @author Graeme Rocher
  * @see Qualifier @Qualifier

File: inject/src/main/java/io/micronaut/context/annotation/Type.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * Allows restricting injection by type. Useful when injection lists of instances that need to be isolated by type
+ * Allows restricting injection by type. Useful when injection lists of instances that need to be isolated by type.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/annotation/Value.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.annotation;
 
 import javax.inject.Qualifier;

File: inject/src/main/java/io/micronaut/context/annotation/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains core annotations related to Dependency Injection and the Bean Container
+ * Contains core annotations related to Dependency Injection and the Bean Container.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.annotation;
\ No newline at end of file
+package io.micronaut.context.annotation;

File: inject/src/main/java/io/micronaut/context/condition/Condition.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.condition;
 
 import java.util.function.Predicate;
 
 /**
- * A condition allows conditional loading of a {@link io.micronaut.inject.BeanConfiguration}
+ * A condition allows conditional loading of a {@link io.micronaut.inject.BeanConfiguration}.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -27,7 +28,7 @@
 public interface Condition extends Predicate<ConditionContext> {
 
     /**
-     * Check whether a specific condition is met
+     * Check whether a specific condition is met.
      *
      * @param context The condition context
      * @return True if has been met

File: inject/src/main/java/io/micronaut/context/condition/TrueCondition.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.condition;
 
 /**
- * A {@link Condition} that simply returns true
+ * A {@link Condition} that simply returns true.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/condition/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes and interfaces related to conditional beans
+ * Contains classes and interfaces related to conditional beans.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.condition;
\ No newline at end of file
+package io.micronaut.context.condition;

File: inject/src/main/java/io/micronaut/context/env/PropertiesPropertySourceLoader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env;
 
 import java.io.IOException;
@@ -23,15 +24,15 @@
 import java.util.Set;
 
 /**
- * Default load that handles Java properties files
+ * Default load that handles Java properties files.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class PropertiesPropertySourceLoader extends AbstractPropertySourceLoader {
 
     /**
-     * File extension for property source loader
+     * File extension for property source loader.
      */
     public static final String PROPERTIES_EXTENSION = "properties";
 

File: inject/src/main/java/io/micronaut/context/env/PropertySourceLocator.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env;
 
 import java.util.Optional;
 
 /**
- * An interface for beans that are capable of locating a {@link PropertySource} instance
+ * An interface for beans that are capable of locating a {@link PropertySource} instance.
  *
  * @author graemerocher
  * @since 1.0
  */
 public interface PropertySourceLocator {
 
     /**
-     * Locate a {@link PropertySource} for the given environment
+     * Locate a {@link PropertySource} for the given environment.
      *
      * @param environment The environment
      * @return The located property source

File: inject/src/main/java/io/micronaut/context/env/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Classes related to the Micronaut environment
+ * Classes related to the Micronaut environment.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.env;
\ No newline at end of file
+package io.micronaut.context.env;

File: inject/src/main/java/io/micronaut/context/env/yaml/YamlPropertySourceLoader.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env.yaml;
 
 import io.micronaut.context.env.AbstractPropertySourceLoader;
@@ -26,7 +27,7 @@
 import java.util.Set;
 
 /**
- * Loads properties from a YML file
+ * Loads properties from a YML file.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ApplicationEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import java.util.EventObject;
 
 /**
- * An {@link ApplicationEvent} is a user specified event object
+ * An {@link ApplicationEvent} is a user specified event object.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ApplicationEventPublisher.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 /**
- * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances</p>
+ * <p>Interface for classes that publish events received by {@link ApplicationEventListener} instances.</p>
  * <p>
  * <p>Note that this interface is designed for application level, non-blocking synchronous events for decoupling code
  * and is not a replacement for a messaging system</p>
@@ -27,7 +28,7 @@
 public interface ApplicationEventPublisher {
 
     /**
-     * Publish the given event
+     * Publish the given event.
      *
      * @param event The event to publish
      */

File: inject/src/main/java/io/micronaut/context/event/BeanContextEvent.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 import java.util.EventObject;
 
 /**
- * A BeanContextEvent is an event fired from the {@link BeanContext} instance
+ * A BeanContextEvent is an event fired from the {@link BeanContext} instance.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/ShutdownEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * An event fired prior to starting shutdown sequence
+ * An event fired prior to starting shutdown sequence.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/StartupEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.event;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * An event fired once startup is complete
+ * An event fired once startup is complete.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/context/event/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes related to {@link io.micronaut.context.ApplicationContext} event publishing and consuming
+ * Contains classes related to {@link io.micronaut.context.ApplicationContext} event publishing and consuming.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.event;
\ No newline at end of file
+package io.micronaut.context.event;

File: inject/src/main/java/io/micronaut/context/exceptions/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains common exceptions thrown from the {@link io.micronaut.context.BeanContext}
+ * Contains common exceptions thrown from the {@link io.micronaut.context.BeanContext}.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.exceptions;
\ No newline at end of file
+package io.micronaut.context.exceptions;

File: inject/src/main/java/io/micronaut/context/processor/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces related to annotation processing
+ * Contains interfaces related to annotation processing.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.processor;
\ No newline at end of file
+package io.micronaut.context.processor;

File: inject/src/main/java/io/micronaut/context/scope/CustomScopeRegistry.java
Patch:
@@ -13,21 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.scope;
 
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 
 /**
- * An interface for a registry of {@link CustomScope} instances
+ * An interface for a registry of {@link CustomScope} instances.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface CustomScopeRegistry {
 
     /**
-     * Find a custom scope for the given annotation
+     * Find a custom scope for the given annotation.
      *
      * @param scopeAnnotation The scope annotation
      * @return The custom scope

File: inject/src/main/java/io/micronaut/context/scope/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces related to the definition of custom scopes
+ * Contains interfaces related to the definition of custom scopes.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.context.scope;
\ No newline at end of file
+package io.micronaut.context.scope;

File: inject/src/main/java/io/micronaut/inject/BeanContextConditional.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
 
 /**
- * Interface for other types that are conditional within a context
+ * Interface for other types that are conditional within a context.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,7 +28,7 @@
 public interface BeanContextConditional {
 
     /**
-     * Return whether this component is enabled for the given context
+     * Return whether this component is enabled for the given context.
      *
      * @param context The context
      * @return True if it is

File: inject/src/main/java/io/micronaut/inject/BeanIdentifier.java
Patch:
@@ -13,15 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
-import io.micronaut.context.annotation.Bean;
 import io.micronaut.core.naming.Named;
 
 import java.io.Serializable;
 
 /**
- * An identifier for a {@link Bean} that can be used as a key to uniquely identify an instance
+ * An identifier for a {@link io.micronaut.context.annotation.Bean} that can be used as a key to uniquely identify an
+ * instance.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/CallableInjectionPoint.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.type.Argument;
@@ -26,7 +27,8 @@
 public interface CallableInjectionPoint extends InjectionPoint {
 
     /**
-     * The required argument types
+     *
+     * @return The required argument types.
      */
     Argument<?>[] getArguments();
 }

File: inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
@@ -26,8 +27,9 @@
 
 /**
  * An interface for wrapping a {@link BeanDefinition} with another that delegates and potentially decorates the
- * {@link BeanDefinition} instance
+ * {@link BeanDefinition} instance.
  *
+ * @param <T> The bean definition type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ExecutableMethod.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.type.Executable;

File: inject/src/main/java/io/micronaut/inject/InjectionPoint.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.core.annotation.AnnotationMetadataProvider;
@@ -24,6 +25,7 @@
  * @since 1.0
  */
 public interface InjectionPoint extends AnnotationMetadataProvider {
+
     /**
      * @return The bean that declares this injection point
      */

File: inject/src/main/java/io/micronaut/inject/MethodExecutionHandle.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 /**
- * Represents an execution handle that invokes a method
+ * Represents an execution handle that invokes a method.
  *
+ * @param <R> The result type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ParametrizedBeanFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import io.micronaut.context.BeanContext;
@@ -23,8 +24,9 @@
 import java.util.Map;
 
 /**
- * A {@link BeanFactory} that requires additional (possibly user supplied) parameters in order construct a bean
+ * A {@link BeanFactory} that requires additional (possibly user supplied) parameters in order construct a bean.
  *
+ * @param <T> The type
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -52,7 +54,6 @@ T build(BeanResolutionContext resolutionContext,
             BeanDefinition<T> definition,
             Map<String, Object> requiredArgumentValues) throws BeanInstantiationException;
 
-
     @Override
     default T build(BeanResolutionContext resolutionContext, BeanContext context, BeanDefinition<T> definition) throws BeanInstantiationException {
         throw new BeanInstantiationException(definition, "Cannot instantiate parametrized bean with no arguments");

File: inject/src/main/java/io/micronaut/inject/ParametrizedProvider.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 import javax.inject.Provider;
 import java.util.Map;
 
 /**
- * An extended version of the {@link Provider} interface for {@link ParametrizedBeanFactory}
+ * An extended version of the {@link Provider} interface for {@link ParametrizedBeanFactory}.
  *
+ * @param <T> The type
  * @author graemerocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/ProxyBeanDefinition.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject;
 
 /**
- * Marker interface for a {@link BeanDefinition} that is an AOP proxy
+ * Marker interface for a {@link BeanDefinition} that is an AOP proxy.
  *
+ * @param <T> The bean definition type
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/java/io/micronaut/inject/annotation/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes for reading and writing annotation metadata at compile time
+ * Contains classes for reading and writing annotation metadata at compile time.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.annotation;
\ No newline at end of file
+package io.micronaut.inject.annotation;

File: inject/src/main/java/io/micronaut/inject/configuration/ConfigurationMetadata.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.configuration;
 
 import io.micronaut.core.io.Writable;
@@ -21,7 +22,7 @@
 import java.io.Writer;
 
 /**
- * Metadata about a configuration group
+ * Metadata about a configuration group.
  *
  * @author Graeme Rocher
  */

File: inject/src/main/java/io/micronaut/inject/configuration/PropertyMetadata.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.configuration;
 
 import io.micronaut.core.io.Writable;
@@ -21,7 +22,7 @@
 import java.io.Writer;
 
 /**
- * Metadata about a property
+ * Metadata about a property.
  *
  * @author Graeme Rocher
  */

File: inject/src/main/java/io/micronaut/inject/configuration/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes for reading and writing Configuration metadata at compile time
+ * Contains classes for reading and writing Configuration metadata at compile time.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.configuration;
\ No newline at end of file
+package io.micronaut.inject.configuration;

File: inject/src/main/java/io/micronaut/inject/package-info.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  *
- * Contains the core dependency injection interfaces
+ * Contains the core dependency injection interfaces.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject;
\ No newline at end of file
+package io.micronaut.inject;

File: inject/src/main/java/io/micronaut/inject/processing/JavaModelUtils.java
Patch:
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.processing;
 
 import javax.lang.model.element.Name;
 import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 
 /**
- * Utility methods for Java model handling
+ * Utility methods for Java model handling.
  *
  * @author graemerocher
  * @since 1.0
  */
 public class JavaModelUtils {
 
     /**
-     * Get the class name for the given type element. Handles {@link NestingKind}
+     * Get the class name for the given type element. Handles {@link NestingKind}.
      *
      * @param typeElement The type element
      * @return The class name

File: inject/src/main/java/io/micronaut/inject/qualifiers/package-info.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains support classes for creating Bean {@link javax.inject.Qualifier} instances
+ * Contains support classes for creating Bean {@link javax.inject.Qualifier} instances.
  *
  * @see io.micronaut.context.Qualifier
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.qualifiers;
\ No newline at end of file
+package io.micronaut.inject.qualifiers;

File: inject/src/main/java/io/micronaut/inject/visitor/ClassElement.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.visitor;
 
 /**

File: inject/src/main/java/io/micronaut/inject/visitor/FieldElement.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.visitor;
 
 /**

File: inject/src/main/java/io/micronaut/inject/visitor/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains interfaces for defining type visitors that work across languages
+ * Contains interfaces for defining type visitors that work across languages.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.visitor;
\ No newline at end of file
+package io.micronaut.inject.visitor;

File: inject/src/main/java/io/micronaut/inject/writer/ProxyingBeanDefinitionVisitor.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.inject.writer;
 
 /**
- * Extends {@link BeanDefinitionVisitor} and adds access to the proxied type name
+ * Extends {@link BeanDefinitionVisitor} and adds access to the proxied type name.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/writer/package-info.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * Contains classes responsible for using ASM to write bean metadata to disk
+ * Contains classes responsible for using ASM to write bean metadata to disk.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.inject.writer;
\ No newline at end of file
+package io.micronaut.inject.writer;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/DuplicateRouteHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.DuplicateRouteException;
 
@@ -40,7 +40,7 @@ public class DuplicateRouteHandler implements ExceptionHandler<DuplicateRouteExc
 
     @Override
     public HttpResponse handle(HttpRequest request, DuplicateRouteException exception) {
-        VndError error = new VndError(exception.getMessage());
+        JsonError error = new JsonError(exception.getMessage());
         error.link(Link.SELF, Link.of(request.getUri()));
         return HttpResponse.badRequest(error);
     }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/UnsatisfiedRouteHandler.java
Patch:
@@ -21,7 +21,7 @@
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 import io.micronaut.web.router.exceptions.UnsatisfiedRouteException;
 import org.slf4j.Logger;
@@ -46,7 +46,7 @@ public HttpResponse handle(HttpRequest request, UnsatisfiedRouteException except
         if (LOG.isErrorEnabled()) {
             LOG.error("{} (Bad Request): {}", request, exception.getMessage());
         }
-        VndError error = new VndError(exception.getMessage());
+        JsonError error = new JsonError(exception.getMessage());
         error.path('/' + exception.getArgument().getName());
         error.link(Link.SELF, Link.of(request.getUri()));
         return HttpResponse.badRequest(error);

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -22,8 +22,8 @@
 import io.micronaut.http.HttpStatus;
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.ContentLengthExceededException;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
 
 import javax.inject.Singleton;
 
@@ -40,7 +40,7 @@ public class ContentLengthExceededHandler implements ExceptionHandler<ContentLen
 
     @Override
     public HttpResponse handle(HttpRequest request, ContentLengthExceededException exception) {
-        VndError error = new VndError(exception.getMessage());
+        JsonError error = new JsonError(exception.getMessage());
         error.link(Link.SELF, Link.of(request.getUri()));
 
         return HttpResponse

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
 
 import javax.inject.Singleton;
 
@@ -38,7 +38,7 @@
 public class ConversionErrorHandler implements ExceptionHandler<ConversionErrorException, HttpResponse> {
     @Override
     public HttpResponse handle(HttpRequest request, ConversionErrorException exception) {
-        VndError error = new VndError(exception.getMessage());
+        JsonError error = new JsonError(exception.getMessage());
         error.path('/' + exception.getArgument().getName());
         error.link(Link.SELF, Link.of(request.getUri()));
 

File: http-server/src/main/java/io/micronaut/http/server/exceptions/HttpStatusHandler.java
Patch:
@@ -22,7 +22,7 @@
 import io.micronaut.http.annotation.Produces;
 import io.micronaut.http.exceptions.HttpStatusException;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
+import io.micronaut.http.hateos.JsonError;
 
 import javax.inject.Singleton;
 
@@ -42,7 +42,7 @@ public HttpResponse handle(HttpRequest request, HttpStatusException exception) {
 
         Object body = exception.getBody()
             .orElseGet(() -> {
-                VndError error = new VndError(exception.getMessage());
+                JsonError error = new JsonError(exception.getMessage());
                 error.link(Link.SELF, Link.of(request.getUri()));
 
                 return error;

File: http-server/src/main/java/io/micronaut/http/server/exceptions/JsonExceptionHandler.java
Patch:
@@ -23,8 +23,8 @@
 import io.micronaut.http.MediaType;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.http.annotation.Produces;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
 
 import javax.inject.Singleton;
 
@@ -42,7 +42,7 @@ public class JsonExceptionHandler implements ExceptionHandler<JsonProcessingExce
     public Object handle(HttpRequest request, JsonProcessingException exception) {
         // TODO: Send JSON back with detailed error
         MutableHttpResponse<Object> response = HttpResponse.status(HttpStatus.BAD_REQUEST, "Invalid JSON");
-        VndError body = new VndError("Invalid JSON: " + exception.getMessage());
+        JsonError body = new JsonError("Invalid JSON: " + exception.getMessage());
         body.link(Link.SELF, Link.of(request.getUri()));
         response.body(body);
 

File: router/src/main/java/io/micronaut/web/router/naming/HyphenatedUriNamingStrategy.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Singleton
 @Primary
-public class HyphenatedUriNamingsStrategy implements RouteBuilder.UriNamingStrategy {
+public class HyphenatedUriNamingStrategy implements RouteBuilder.UriNamingStrategy {
     @Override
     public String resolveUri(Class type) {
         return '/' + TypeConvention.CONTROLLER.asHyphenatedName(type);

File: security/src/main/java/io/micronaut/security/authentication/AuthenticationExceptionHandler.java
Patch:
@@ -20,8 +20,8 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.annotation.Produces;
+import io.micronaut.http.hateos.JsonError;
 import io.micronaut.http.hateos.Link;
-import io.micronaut.http.hateos.VndError;
 import io.micronaut.http.server.exceptions.ExceptionHandler;
 
 import javax.inject.Singleton;
@@ -40,7 +40,7 @@ public class AuthenticationExceptionHandler implements ExceptionHandler<Authenti
 
     @Override
     public HttpResponse handle(HttpRequest request, AuthenticationException exception) {
-        VndError error = new VndError(exception.getMessage());
+        JsonError error = new JsonError(exception.getMessage());
         error.link(Link.SELF, Link.of(request.getUri()));
         return HttpResponse.unauthorized().body(error);
     }

File: inject-java/src/main/java/io/micronaut/annotation/processing/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * This package contains the Annotation processors that power Micronaut
+ * This package contains the Annotation processors that power Micronaut.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.annotation.processing;
\ No newline at end of file
+package io.micronaut.annotation.processing;

File: inject-java/src/main/java/io/micronaut/annotation/processing/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * This package contains the Annotation processors that power Micronaut
+ * This package contains the Annotation processors that power Micronaut.
  *
  * @author graemerocher
  * @since 1.0
  */
-package io.micronaut.annotation.processing;
\ No newline at end of file
+package io.micronaut.annotation.processing;

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestBinderRegistry.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding;
 
 import io.micronaut.core.bind.ArgumentBinderRegistry;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A {@link ArgumentBinderRegistry} where the source of binding is a {@link HttpRequest}
+ * A {@link ArgumentBinderRegistry} where the source of binding is a {@link HttpRequest}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/BodyArgumentBinder.java
Patch:
@@ -13,13 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.http.annotation.Body;
 
 /**
- * A binder that binds from a parsed request body
+ * A binder that binds from a parsed request body.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/NonBlockingBodyArgumentBinder.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 /**
- * A marker interface for argument binders that are non-blocking
+ * A marker interface for argument binders that are non-blocking.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/RequestArgumentBinder.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.core.bind.ArgumentBinder;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A binder that binds from an {@link HttpRequest}
+ * A binder that binds from an {@link HttpRequest}.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/TypedRequestArgumentBinder.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.core.bind.TypeArgumentBinder;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A {@link TypeArgumentBinder} that binds from an {@link HttpRequest}
+ * A {@link TypeArgumentBinder} that binds from an {@link HttpRequest}.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.cors;
 
 import io.micronaut.core.convert.ConversionContext;
@@ -28,8 +29,7 @@
 import java.util.Optional;
 
 /**
- * Responsible for converting a map of configuration to an instance
- * of {@link CorsOriginConfiguration}
+ * Responsible for converting a map of configuration to an instance of {@link CorsOriginConfiguration}.
  *
  * @author James Kleeh
  * @author Graeme Rocher

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsUtil.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.cors;
 
 import static io.micronaut.http.HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD;
@@ -24,14 +25,15 @@
 import java.util.Optional;
 
 /**
- * Utility methods for CORS
+ * Utility methods for CORS.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 class CorsUtil {
 
     /**
+     * @param request The {@link HttpRequest} object
      * @return Return whether this request is a pre-flight request
      */
     static boolean isPreflightRequest(HttpRequest request) {

File: http-server/src/main/java/io/micronaut/http/server/cors/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Contains classes specific to CORS support within Micronaut
+ * Contains classes specific to CORS support within Micronaut.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -25,5 +25,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import io.micronaut.context.annotation.Primary;
@@ -27,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default handle for {@link ContentLengthExceededException} errors
+ * Default handle for {@link ContentLengthExceededException} errors.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import io.micronaut.context.annotation.Primary;
@@ -26,7 +27,7 @@
 import javax.inject.Singleton;
 
 /**
- * Handles exception of type {@link ConversionErrorException}
+ * Handles exception of type {@link ConversionErrorException}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/exceptions/JsonExceptionHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -28,7 +29,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default exception handler for JSON processing errors
+ * Default exception handler for JSON processing errors.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/types/files/FileCustomizableResponseType.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.types.files;
 
 import io.micronaut.http.server.types.CustomizableResponseType;

File: http-server/src/main/java/io/micronaut/http/server/binding/RequestBinderRegistry.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding;
 
 import io.micronaut.core.bind.ArgumentBinderRegistry;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A {@link ArgumentBinderRegistry} where the source of binding is a {@link HttpRequest}
+ * A {@link ArgumentBinderRegistry} where the source of binding is a {@link HttpRequest}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/BodyArgumentBinder.java
Patch:
@@ -13,13 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.http.annotation.Body;
 
 /**
- * A binder that binds from a parsed request body
+ * A binder that binds from a parsed request body.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/NonBlockingBodyArgumentBinder.java
Patch:
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 /**
- * A marker interface for argument binders that are non-blocking
+ * A marker interface for argument binders that are non-blocking.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/RequestArgumentBinder.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.core.bind.ArgumentBinder;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A binder that binds from an {@link HttpRequest}
+ * A binder that binds from an {@link HttpRequest}.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/binding/binders/TypedRequestArgumentBinder.java
Patch:
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.binding.binders;
 
 import io.micronaut.core.bind.TypeArgumentBinder;
 import io.micronaut.http.HttpRequest;
 
 /**
- * A {@link TypeArgumentBinder} that binds from an {@link HttpRequest}
+ * A {@link TypeArgumentBinder} that binds from an {@link HttpRequest}.
  *
+ * @param <T> A type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.cors;
 
 import io.micronaut.core.convert.ConversionContext;
@@ -28,8 +29,7 @@
 import java.util.Optional;
 
 /**
- * Responsible for converting a map of configuration to an instance
- * of {@link CorsOriginConfiguration}
+ * Responsible for converting a map of configuration to an instance of {@link CorsOriginConfiguration}.
  *
  * @author James Kleeh
  * @author Graeme Rocher

File: http-server/src/main/java/io/micronaut/http/server/cors/CorsUtil.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.cors;
 
 import static io.micronaut.http.HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD;
@@ -24,14 +25,15 @@
 import java.util.Optional;
 
 /**
- * Utility methods for CORS
+ * Utility methods for CORS.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 class CorsUtil {
 
     /**
+     * @param request The {@link HttpRequest} object
      * @return Return whether this request is a pre-flight request
      */
     static boolean isPreflightRequest(HttpRequest request) {

File: http-server/src/main/java/io/micronaut/http/server/cors/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Contains classes specific to CORS support within Micronaut
+ * Contains classes specific to CORS support within Micronaut.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -25,5 +25,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import io.micronaut.context.annotation.Primary;
@@ -27,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default handle for {@link ContentLengthExceededException} errors
+ * Default handle for {@link ContentLengthExceededException} errors.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/exceptions/ConversionErrorHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import io.micronaut.context.annotation.Primary;
@@ -26,7 +27,7 @@
 import javax.inject.Singleton;
 
 /**
- * Handles exception of type {@link ConversionErrorException}
+ * Handles exception of type {@link ConversionErrorException}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/exceptions/JsonExceptionHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.exceptions;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -28,7 +29,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default exception handler for JSON processing errors
+ * Default exception handler for JSON processing errors.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server/src/main/java/io/micronaut/http/server/types/files/FileCustomizableResponseType.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.types.files;
 
 import io.micronaut.http.server.types.CustomizableResponseType;

File: management/src/main/java/io/micronaut/management/health/aggregator/HealthAggregator.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.management.health.aggregator;
 
+import io.micronaut.management.endpoint.health.HealthLevelOfDetail;
 import io.micronaut.management.health.indicator.HealthIndicator;
 import io.micronaut.management.health.indicator.HealthResult;
 import org.reactivestreams.Publisher;
@@ -31,9 +32,10 @@ public interface HealthAggregator<T> {
 
     /**
      * @param indicators The health indicators to aggregate.
+     * @param healthLevelOfDetail The {@link HealthLevelOfDetail}
      * @return An aggregated response.
      */
-    Publisher<T> aggregate(HealthIndicator[] indicators);
+    Publisher<T> aggregate(HealthIndicator[] indicators, HealthLevelOfDetail healthLevelOfDetail);
 
     /**
      * @param name    The name of the new health result

File: management/src/main/java/io/micronaut/management/health/aggregator/HealthAggregator.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.micronaut.management.health.aggregator;
 
+import io.micronaut.management.endpoint.health.HealthLevelOfDetail;
 import io.micronaut.management.health.indicator.HealthIndicator;
 import io.micronaut.management.health.indicator.HealthResult;
 import org.reactivestreams.Publisher;
@@ -31,9 +32,10 @@ public interface HealthAggregator<T> {
 
     /**
      * @param indicators The health indicators to aggregate.
+     * @param healthLevelOfDetail The {@link HealthLevelOfDetail}
      * @return An aggregated response.
      */
-    Publisher<T> aggregate(HealthIndicator[] indicators);
+    Publisher<T> aggregate(HealthIndicator[] indicators, HealthLevelOfDetail healthLevelOfDetail);
 
     /**
      * @param name    The name of the new health result

File: jdbc/src/main/java/io/micronaut/jdbc/BasicJdbcConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 public interface BasicJdbcConfiguration {
 
     /**
-     * The prefix used for data source configuration
+     * The prefix used for data source configuration.
      */
     String PREFIX = "datasources";
 

File: inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java
Patch:
@@ -38,7 +38,8 @@
 abstract class AbstractBeanContextConditional implements BeanContextConditional, AnnotationMetadataProvider {
 
     private final Map<Integer, Boolean> enabled = new ConcurrentHashMap<>(2);
-    private static final Logger LOG = LoggerFactory.getLogger(Condition.class);
+
+    static final Logger LOG = LoggerFactory.getLogger(Condition.class);
 
     @Override
     public boolean isEnabled(BeanContext context) {

File: jdbc/src/main/java/io/micronaut/jdbc/BasicJdbcConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 public interface BasicJdbcConfiguration {
 
     /**
-     * The prefix used for data source configuration
+     * The prefix used for data source configuration.
      */
     String PREFIX = "datasources";
 

File: runtime/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -84,7 +84,7 @@ public Optional<String> getName() {
      * @param name Set the application name
      */
     public void setName(String name) {
-        if(name != null) {
+        if (name != null) {
             this.name = NameUtils.hyphenate(name);
         }
     }

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -132,7 +132,7 @@ public void onApplicationEvent(RefreshEvent event) {
      * @param object The bean
      * @return The lock on the object
      */
-    ReadWriteLock getLock(Object object) {
+    protected ReadWriteLock getLock(Object object) {
         ReadWriteLock readWriteLock = locks.get(object);
         if (readWriteLock == null) {
             throw new IllegalStateException("No lock present for object: " + object);

File: security/src/main/java/io/micronaut/security/SecurityNonPathTypesProvider.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.security.authentication.Authentication;
 
 import javax.inject.Singleton;
-import java.security.Principal;
 import java.util.Collections;
 import java.util.List;
 

File: security/src/main/java/io/micronaut/security/filters/AuthenticationFetcher.java
Patch:
@@ -21,8 +21,6 @@
 import io.micronaut.security.authentication.Authentication;
 import org.reactivestreams.Publisher;
 
-import java.util.Optional;
-
 /**
  * Describes a bean which attempts to read an {@link Authentication} from a {@link HttpRequest} being executed.
  *
@@ -33,6 +31,7 @@ public interface AuthenticationFetcher extends Ordered {
 
     /**
      * Attempts to read an {@link Authentication} from a {@link HttpRequest} being executed.
+     *
      * @param request {@link HttpRequest} being executed.
      * @return {@link Authentication} if found
      */

File: security/src/main/java/io/micronaut/security/token/basicauth/BasicAuthTokenValidator.java
Patch:
@@ -25,10 +25,10 @@
 import io.micronaut.security.authentication.UsernamePasswordCredentials;
 import io.micronaut.security.token.validator.TokenValidator;
 import io.reactivex.Flowable;
-import io.reactivex.functions.Function;
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import javax.inject.Singleton;
 import java.io.UnsupportedEncodingException;
 import java.util.Base64;
@@ -54,7 +54,6 @@ public class BasicAuthTokenValidator implements TokenValidator {
     protected final Authenticator authenticator;
 
     /**
-     *
      * @param authenticator The Authenticator
      */
     public BasicAuthTokenValidator(Authenticator authenticator) {

File: security/src/main/java/io/micronaut/security/token/validator/TokenValidator.java
Patch:
@@ -20,8 +20,6 @@
 import io.micronaut.security.authentication.Authentication;
 import org.reactivestreams.Publisher;
 
-import java.util.Optional;
-
 /**
  * Responsible for token validation and claims retrieval.
  *
@@ -34,7 +32,7 @@ public interface TokenValidator extends Ordered {
      * Validates the provided token and returns the authentication state.
      *
      * @param token The token string
-     * @return The authentication or {@link Optional#empty} if the validation fails
+     * @return The authentication or {@link java.util.Optional#empty} if the validation fails
      */
     Publisher<Authentication> validateToken(String token);
 }

File: runtime/src/main/java/io/micronaut/runtime/ApplicationConfiguration.java
Patch:
@@ -84,7 +84,7 @@ public Optional<String> getName() {
      * @param name Set the application name
      */
     public void setName(String name) {
-        if(name != null) {
+        if (name != null) {
             this.name = NameUtils.hyphenate(name);
         }
     }

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -132,7 +132,7 @@ public void onApplicationEvent(RefreshEvent event) {
      * @param object The bean
      * @return The lock on the object
      */
-    ReadWriteLock getLock(Object object) {
+    protected ReadWriteLock getLock(Object object) {
         ReadWriteLock readWriteLock = locks.get(object);
         if (readWriteLock == null) {
             throw new IllegalStateException("No lock present for object: " + object);

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/endpoints/OauthController.java
Patch:
@@ -42,7 +42,7 @@
 
 /**
  *
- * A controller that handles token refresh
+ * A controller that handles token refresh.
  *
  * @author Sergio del Amo
  * @author Graeme Rocher

File: security-jwt/src/main/java/io/micronaut/security/token/jwt/validator/JwtTokenValidator.java
Patch:
@@ -35,12 +35,12 @@
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import javax.inject.Singleton;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Optional;
 
 /**
  * @see <a href="https://connect2id.com/products/nimbus-jose-jwt/examples/validating-jwt-access-tokens">Validating JWT Access Tokens</a>

File: core/src/main/java/io/micronaut/core/reflect/ClassUtils.java
Patch:
@@ -148,7 +148,7 @@ public static Optional<Class> forName(String name, ClassLoader classLoader) {
             } else {
                 return Optional.of(Class.forName(name, true, classLoader));
             }
-        } catch (ClassNotFoundException e) {
+        } catch (ClassNotFoundException | NoClassDefFoundError e) {
             return Optional.empty();
         }
     }

File: security/src/main/java/io/micronaut/security/endpoints/LoginController.java
Patch:
@@ -79,7 +79,7 @@ public LoginController(Authenticator authenticator,
     public Single<HttpResponse> login(@Body UsernamePasswordCredentials usernamePasswordCredentials, HttpRequest<?> request) {
         Flowable<AuthenticationResponse> authenticationResponseFlowable = Flowable.fromPublisher(authenticator.authenticate(usernamePasswordCredentials));
 
-        return authenticationResponseFlowable.map((Function<AuthenticationResponse, HttpResponse>)authenticationResponse -> {
+        return authenticationResponseFlowable.map(authenticationResponse -> {
             if (authenticationResponse.isAuthenticated()) {
                 UserDetails userDetails = (UserDetails) authenticationResponse;
                 eventPublisher.publishEvent(new LoginSuccessfulEvent(userDetails));

File: session/src/main/java/io/micronaut/session/http/HttpSessionFilter.java
Patch:
@@ -90,6 +90,7 @@ protected Publisher<MutableHttpResponse<?>> doFilterOnce(HttpRequest<?> request,
     private Publisher<MutableHttpResponse<?>> encodeSessionId(HttpRequest<?> request, Publisher<MutableHttpResponse<?>> responsePublisher) {
         Flowable<SessionAndResponse> responseFlowable = Flowable.fromPublisher(responsePublisher)
             .switchMap(mutableHttpResponse -> {
+
                 Optional<Session> opt = request.getAttributes().get(SESSION_ATTRIBUTE, Session.class);
                 if (opt.isPresent()) {
                     Session session = opt.get();

File: router/src/main/java/io/micronaut/web/router/DefaultRouteBuilder.java
Patch:
@@ -669,7 +669,7 @@ public int compareTo(StatusRoute o) {
             Class<?> thatType = o.originatingType();
             Class<?> thisType= this.originatingType();
 
-            if (thisType == thatType) {
+            if (thisType == thatType && this.status().equals(o.status())) {
                 return 0;
             } else {
                 return -1;

File: inject/src/main/java/io/micronaut/context/annotation/Requires.java
Patch:
@@ -48,7 +48,7 @@
     /**
      * Expresses that the configuration will not load within the given environments
      *
-     * @return The names of the environments this configuration will load in
+     * @return The names of the environments this configuration will not load in
      */
     String[] notEnv() default {};
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1269,14 +1269,14 @@ private BeanDefinitionWriter createFactoryBeanMethodWriterFor(ExecutableElement
         }
 
         private ExecutableElementParamInfo populateParameterData(ExecutableElement element) {
+            if (element == null) {
+                return new ExecutableElementParamInfo(false, null);
+            }
             AnnotationMetadata elementMetadata = annotationUtils.getAnnotationMetadata(element);
             ExecutableElementParamInfo params = new ExecutableElementParamInfo(
                     modelUtils.isPrivate(element),
                     elementMetadata
             );
-            if (element == null) {
-                return params;
-            }
             element.getParameters().forEach(paramElement -> {
 
                 String argName = paramElement.getSimpleName().toString();

File: configurations/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/HibernateTransactionManagerFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.hibernate.SessionFactory;
 import org.springframework.orm.hibernate5.HibernateTransactionManager;
 
+import javax.inject.Singleton;
 import javax.sql.DataSource;
 
 /**
@@ -37,6 +38,7 @@ public class HibernateTransactionManagerFactory {
 
     @Bean
     @Requires(classes = HibernateTransactionManager.class)
+    @Singleton
     HibernateTransactionManager hibernateTransactionManager(SessionFactory sessionFactory, DataSource dataSource) {
         HibernateTransactionManager hibernateTransactionManager = new HibernateTransactionManager(sessionFactory);
         hibernateTransactionManager.setDataSource(dataSource);

File: spring/src/main/java/io/micronaut/spring/tx/annotation/Transactional.java
Patch:
@@ -27,6 +27,7 @@
 import io.micronaut.aop.Around;
 import io.micronaut.context.annotation.AliasFor;
 import io.micronaut.context.annotation.Type;
+import io.micronaut.core.annotation.Blocking;
 import org.springframework.transaction.TransactionDefinition;
 import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;
 import org.springframework.transaction.annotation.Isolation;
@@ -66,6 +67,7 @@
 @Documented
 @Around
 @Type(TransactionInterceptor.class)
+@Blocking
 public @interface Transactional {
 
     /**

File: http/src/main/java/io/micronaut/http/annotation/Status.java
Patch:
@@ -36,5 +36,5 @@
 @Target({ElementType.METHOD})
 public @interface Status {
 
-    HttpStatus value() default HttpStatus.OK;
+    HttpStatus value();
 }

File: configurations/jdbc-dbcp/src/main/java/io/micronaut/configuration/jdbc/dbcp/DatasourceConfiguration.java
Patch:
@@ -38,7 +38,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-@EachProperty(value = "datasources", primary = "default")
+@EachProperty(value = BasicJdbcConfiguration.PREFIX, primary = "default")
 public class DatasourceConfiguration extends BasicDataSource implements BasicJdbcConfiguration {
 
     private final CalculatedSettings calculatedSettings;

File: configurations/jdbc-hikari/src/main/java/io/micronaut/configuration/jdbc/hikari/DatasourceConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-@EachProperty(value = "datasources", primary = "default")
+@EachProperty(value = BasicJdbcConfiguration.PREFIX, primary = "default")
 public class DatasourceConfiguration extends HikariConfig implements BasicJdbcConfiguration {
 
     private CalculatedSettings calculatedSettings;

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/DatasourceConfiguration.java
Patch:
@@ -33,13 +33,13 @@
  *
  * If the url, driver class, username, or password are missing, sensible defaults
  * will be provided when possible. If no configuration beyond the datasource name
- * is provided, an in memory datastore will be configured based on the available
+ * is provided, an in memory datasource will be configured based on the available
  * drivers on the classpath.
  *
  * @author James Kleeh
  * @since 1.0
  */
-@EachProperty(value = "datasources", primary = "default")
+@EachProperty(value = BasicJdbcConfiguration.PREFIX, primary = "default")
 public class DatasourceConfiguration extends PoolProperties implements BasicJdbcConfiguration {
 
     private CalculatedSettings calculatedSettings;

File: core/src/main/java/io/micronaut/core/convert/format/KeyFormat.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Retention;
 
 /**
- * Allows configuring the format of Map keys.
+ * Allows configuring the format of Map keys when injecting map configuration
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -24,6 +24,7 @@
 import io.micronaut.core.async.subscriber.CompletionAwareSubscriber;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.io.buffer.ByteBuffer;
+import io.micronaut.core.reflect.ClassUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.util.StreamUtils;
 import io.micronaut.http.HttpAttributes;
@@ -37,7 +38,6 @@
 import io.micronaut.http.filter.ServerFilterChain;
 import io.micronaut.http.hateos.Link;
 import io.micronaut.http.hateos.VndError;
-import io.micronaut.http.multipart.CompletedFileUpload;
 import io.micronaut.http.multipart.PartData;
 import io.micronaut.http.multipart.StreamingFileUpload;
 import io.micronaut.http.netty.buffer.NettyByteBufferFactory;
@@ -527,7 +527,7 @@ protected void doOnNext(Object message) {
                                     typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
                                 } else if (StreamingFileUpload.class.isAssignableFrom(typeVariableType)) {
                                     typeVariable = Argument.of(PartData.class);
-                                } else if (CompletedFileUpload.class.isAssignableFrom(typeVariableType)) {
+                                } else if (!ClassUtils.isJavaLangType(typeVariableType)) {
                                     partialUpload = false;
                                 }
 

File: http-client/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -155,7 +155,9 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {
             if (headersAnnotation!=null) {
                 Header[] headerArray = headersAnnotation.value();
                 for (Header header : headerArray) {
-                    headers.put(header.name(), header.value());
+                    String headerName = header.name();
+                    String headerValue = header.value();
+                    headers.put(headerName, headerValue);
                 }
             }
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -292,7 +292,7 @@ Object resolveTypeReference(TypeMirror mirror, Map<String, Object> boundTypes) {
     public DeclaredType resolveTypeVariable(Element element, TypeVariable typeVariable) {
         Element enclosing = element.getEnclosingElement();
 
-        while (enclosing != null && enclosing instanceof Parameterizable) {
+        while (enclosing instanceof Parameterizable) {
             Parameterizable parameterizable = (Parameterizable) enclosing;
             String name = typeVariable.toString();
             for (TypeParameterElement typeParameter : parameterizable.getTypeParameters()) {
@@ -311,7 +311,7 @@ public DeclaredType resolveTypeVariable(Element element, TypeVariable typeVariab
         return null;
     }
 
-    public Map<String, Object> resolveBoundTypes(DeclaredType type) {
+    Map<String, Object> resolveBoundTypes(DeclaredType type) {
         Map<String, Object> boundTypes = new LinkedHashMap<>(2);
         TypeElement element = (TypeElement) type.asElement();
 

File: inject-java/src/main/java/io/micronaut/annotation/processing/JavaConfigurationMetadataBuilder.java
Patch:
@@ -42,7 +42,6 @@ public class JavaConfigurationMetadataBuilder extends ConfigurationMetadataBuild
     private final AnnotationUtils annotationUtils;
     private final ModelUtils modelUtils;
     private final Elements elements;
-    private final Map<String, String> typePaths = new HashMap<>();
 
     public JavaConfigurationMetadataBuilder(Elements elements, Types types) {
         this.elements = elements;

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @author Graeme Rocher
  */
-class GenericUtils {
+public class GenericUtils {
 
     private final Elements elementUtils;
     private final Types typeUtils;
@@ -98,7 +98,7 @@ TypeMirror interfaceGenericTypeFor(TypeElement element, String interfaceName) {
      * @param interfaceName The interface
      * @return The generic types or an empty list
      */
-    List<? extends TypeMirror> interfaceGenericTypesFor(TypeElement element, String interfaceName) {
+    public List<? extends TypeMirror> interfaceGenericTypesFor(TypeElement element, String interfaceName) {
         for (TypeMirror tm : element.getInterfaces()) {
             DeclaredType declaredType = (DeclaredType) tm;
             TypeElement interfaceType = elementUtils.getTypeElement(typeUtils.erasure(declaredType).toString());

File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -21,9 +21,7 @@
 import io.micronaut.context.annotation.Executable;
 import io.micronaut.context.processor.ExecutableMethodProcessor;
 import io.micronaut.core.annotation.AnnotationMetadata;
-import io.micronaut.core.type.Argument;
 import io.micronaut.inject.BeanDefinition;
-import io.micronaut.inject.annotation.AnnotationValue;
 import io.micronaut.inject.configuration.ConfigurationMetadataBuilder;
 import org.objectweb.asm.Type;
 

File: configurations/neo4j-bolt/src/main/java/io/micronaut/configuration/neo4j/bolt/Neo4jBoltConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class Neo4jBoltConfiguration implements Neo4jBoltSettings {
      */
     public Neo4jBoltConfiguration() {
         config.withLogging(name -> new Logger() {
-            org.slf4j.Logger logger = LoggerFactory.getLogger(name);
+            private org.slf4j.Logger logger = LoggerFactory.getLogger(name);
 
             @Override
             public void error(String message, Throwable cause) {

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/AbstractReactiveMongoConfiguration.java
Patch:
@@ -41,7 +41,7 @@
  * @author graemerocher
  * @since 1.0
  */
-abstract class AbstractReactiveMongoConfiguration {
+public abstract class AbstractReactiveMongoConfiguration {
 
     private String uri;
 
@@ -51,7 +51,7 @@ abstract class AbstractReactiveMongoConfiguration {
      * Constructor.
      * @param applicationConfiguration applicationConfiguration
      */
-    AbstractReactiveMongoConfiguration(ApplicationConfiguration applicationConfiguration) {
+    protected AbstractReactiveMongoConfiguration(ApplicationConfiguration applicationConfiguration) {
         this.applicationConfiguration = applicationConfiguration;
     }
 

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/health/MongoHealthIndicator.java
Patch:
@@ -34,15 +34,15 @@
  */
 @Singleton
 @Requires(beans = MongoClient.class)
-class MongoHealthIndicator implements HealthIndicator {
+public class MongoHealthIndicator implements HealthIndicator {
 
     private final MongoClient[] mongoClients;
 
     /**
      * Constructor.
      * @param mongoClients array of mongo clients
      */
-    MongoHealthIndicator(MongoClient[] mongoClients) {
+    public MongoHealthIndicator(MongoClient[] mongoClients) {
         this.mongoClients = mongoClients;
     }
 

File: cli/src/main/groovy/io/micronaut/cli/profile/Profile.java
Patch:
@@ -81,10 +81,10 @@ public interface Profile {
     Iterable<Feature> getRequiredFeatures();
 
     /**
-     * @param featureName The feature name to get the dependent features
-     * @return The dependent features for the featureName
+     * @param feature The feature to get the dependent features
+     * @return The dependent features for the feature
      */
-    Iterable<Feature> getDependentFeaturesFor(String featureName);
+    Iterable<Feature> getDependentFeaturesFor(Feature feature);
 
     /**
      * The other {@link io.micronaut.cli.profile.Profile} instances that this {@link io.micronaut.cli.profile.Profile} extends

File: tracing/src/main/java/io/micronaut/tracing/brave/AsyncReporterConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class AsyncReporterConfiguration {
      * @param sender For sending list of spans to a transport such as http or Kafka
      */
     public AsyncReporterConfiguration(BraveTracerConfiguration configuration, Sender sender) {
-        if(configuration == null) {
+        if (configuration == null) {
             throw new IllegalArgumentException("Argument [configuration] cannot be null");
         }
         this.builder = AsyncReporter.builder(sender);
@@ -69,7 +69,7 @@ public AsyncReporter.Builder getBuilder() {
      */
     @Inject
     public void setReporterMetrics(@Nullable ReporterMetrics metrics) {
-        if(metrics != null) {
+        if (metrics != null) {
             builder.metrics(metrics);
         }
     }

File: tracing/src/main/java/io/micronaut/tracing/brave/BraveTracerFactory.java
Patch:
@@ -65,7 +65,7 @@ public BraveTracerFactory(BraveTracerConfiguration braveTracerConfiguration) {
     @Requires(classes = Tracing.class)
     Tracing braveTracing(@Nullable Reporter<Span> reporter) {
         Tracing.Builder builder = braveTracerConfiguration.getTracingBuilder();
-        if(reporter != null) {
+        if (reporter != null) {
             builder.spanReporter(reporter);
         } else {
             builder.spanReporter(Reporter.NOOP);
@@ -98,7 +98,7 @@ SpanCustomizer spanCustomizer(Tracing tracing) {
     @Primary
     Tracer braveTracer(Tracing tracing) {
         BraveTracer braveTracer = BraveTracer.create(tracing);
-        if(!GlobalTracer.isRegistered()) {
+        if (!GlobalTracer.isRegistered()) {
             GlobalTracer.register(braveTracer);
         }
         return braveTracer;

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -60,11 +60,11 @@ public BraveTracingServerFilter(
     public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
         Span span = serverHandler.handleReceive(extractor, request.getHeaders(), request);
         // place the span in scope such that down stream filters have access
-        try(Tracer.SpanInScope scope = httpTracing.tracing().tracer().withSpanInScope(span)) {
+        try (Tracer.SpanInScope scope = httpTracing.tracing().tracer().withSpanInScope(span)) {
             Publisher<MutableHttpResponse<?>> responsePublisher = chain.proceed(request);
             Flowable<MutableHttpResponse<?>> responseFlowable = Flowable.fromPublisher(responsePublisher);
-            responseFlowable = responseFlowable.doOnRequest( amount -> {
-                if(amount > 0) {
+            responseFlowable = responseFlowable.doOnRequest(amount -> {
+                if (amount > 0) {
                     withSpanInScope(request, span);
                 }
             });

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpTracingFactory.java
Patch:
@@ -94,13 +94,13 @@ public boolean parseServerAddress(HttpRequest<?> httpRequest, Endpoint.Builder b
             @Override
             public String methodFromResponse(HttpResponse<?> httpResponse) {
                 return httpResponse.getAttribute(HttpAttributes.METHOD_NAME, String.class)
-                                   .orElseGet(()-> super.methodFromResponse(httpResponse) );
+                                   .orElseGet(() -> super.methodFromResponse(httpResponse));
             }
 
             @Override
             public String route(HttpResponse<?> response) {
                 Optional<String> value = response.getAttribute(HttpAttributes.URI_TEMPLATE, String.class);
-                return value.orElseGet(()->super.route(response));
+                return value.orElseGet(() -> super.route(response));
             }
         });
     }
@@ -138,7 +138,7 @@ public Integer statusCode(HttpResponse<?> response) {
             @Override
             public String route(HttpResponse<?> response) {
                 Optional<String> value = response.getAttribute(HttpAttributes.URI_TEMPLATE, String.class);
-                return value.orElseGet(()->super.route(response));
+                return value.orElseGet(() -> super.route(response));
             }
 
             @Override

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jCurrentTraceContext.java
Patch:
@@ -84,7 +84,7 @@ public Scope newScope(TraceContext currentSpan) {
             String sampled = String.valueOf(currentSpan.sampled());
             MDC.put(SPAN_EXPORTABLE, sampled);
 
-            if(LOG.isTraceEnabled()) {
+            if (LOG.isTraceEnabled()) {
                 LOG.trace("Starting scope for span: {}", currentSpan);
             }
 
@@ -107,7 +107,7 @@ public Scope newScope(TraceContext currentSpan) {
          */
         class ThreadContextCurrentTraceContextScope implements Scope {
             @Override public void close() {
-                if(LOG.isTraceEnabled()) {
+                if (LOG.isTraceEnabled()) {
                     LOG.trace("Closing scope for span: {}", currentSpan);
                 }
                 scope.close();

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jCurrentTraceContextFactory.java
Patch:
@@ -42,7 +42,7 @@ public class Slf4jCurrentTraceContextFactory {
     @Requires(classes = {MDC.class, CurrentTraceContext.class})
     @Context
     Slf4jCurrentTraceContext currentTraceContext(@Nullable CurrentTraceContext existing) {
-        if(existing != null) {
+        if (existing != null) {
             return new Slf4jCurrentTraceContext(existing);
         } else {
             return new Slf4jCurrentTraceContext();

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -63,7 +63,7 @@ public AbstractOpenTracingFilter(Tracer tracer) {
     protected void setResponseTags(HttpRequest<?> request, HttpResponse<?> response, Span span) {
         HttpStatus status = response.getStatus();
         int code = status.getCode();
-        if(code > HTTP_SUCCESS_CODE_UPPER_LIMIT) {
+        if (code > HTTP_SUCCESS_CODE_UPPER_LIMIT) {
             span.setTag(TAG_HTTP_STATUS_CODE, code);
             span.setTag(TAG_ERROR, status.getReason());
         }
@@ -79,9 +79,9 @@ protected void setResponseTags(HttpRequest<?> request, HttpResponse<?> response,
      * @param error The error
      */
     protected void setErrorTags(Span span, Throwable error) {
-        if(error != null) {
+        if (error != null) {
             String message = error.getMessage();
-            if(message == null) {
+            if (message == null) {
                 message = error.getClass().getSimpleName();
             }
             span.setTag(TAG_ERROR, message);

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/HttpHeadersTextMap.java
Patch:
@@ -66,7 +66,7 @@ public String getKey() {
                     @Override
                     public String getValue() {
                         List<String> value = entry.getValue();
-                        if(CollectionUtils.isNotEmpty(value)) {
+                        if (CollectionUtils.isNotEmpty(value)) {
                             return value.get(0);
                         }
                         return null;
@@ -85,8 +85,8 @@ public String setValue(String value) {
 
     @Override
     public void put(String key, String value) {
-        if(headers instanceof MutableHttpHeaders) {
-            ((MutableHttpHeaders)headers).add(key, value);
+        if (headers instanceof MutableHttpHeaders) {
+            ((MutableHttpHeaders) headers).add(key, value);
         }
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingClientFilter.java
Patch:
@@ -88,7 +88,7 @@ protected void doOnSubscribe(@Nonnull Span span) {
 
             @Override
             protected void doOnNext(@Nonnull Object object, @Nonnull Span span) {
-                if(object instanceof HttpResponse) {
+                if (object instanceof HttpResponse) {
                     setResponseTags(request, (HttpResponse<?>) object, span);
                 }
             }

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/TraceRequestAttributes.java
Patch:
@@ -59,7 +59,7 @@ public char charAt(int index) {
 
     @Override
     public CharSequence subSequence(int start, int end) {
-        return attr.subSequence(start,end);
+        return attr.subSequence(start, end);
     }
 
     @SuppressWarnings("NullableProblems")

File: tracing/src/main/java/io/micronaut/tracing/instrument/hystrix/TracingHystrixConcurrentStrategy.java
Patch:
@@ -89,7 +89,7 @@ public BlockingQueue<Runnable> getBlockingQueue(int maxQueueSize) {
     @Override
     public <T> Callable<T> wrapCallable(Callable<T> callable) {
         Callable<T> wrapped = super.wrapCallable(callable);
-        if(callable instanceof TracingCallable) {
+        if (callable instanceof TracingCallable) {
             return callable;
         } else {
             return new TracingCallable<>(wrapped, tracer);

File: tracing/src/main/java/io/micronaut/tracing/instrument/reactor/ReactorTracingInstrumentation.java
Patch:
@@ -92,7 +92,7 @@ public Scheduler newSingle(ThreadFactory threadFactory) {
                     }
             );
         } catch (Exception e) {
-            if(LOG.isErrorEnabled()) {
+            if (LOG.isErrorEnabled()) {
                 LOG.error("Could not instrument Reactor for Tracing: " + e.getMessage(), e);
             }
         }

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava1TracingInstrumentation.java
Patch:
@@ -46,9 +46,9 @@ public class RxJava1TracingInstrumentation {
      */
     @PostConstruct
     void init(TracingRunnableInstrumenter instrumenter) {
-        if(instrumenter != null) {
+        if (instrumenter != null) {
             Func1<Action0, Action0> existing = RxJavaHooks.getOnScheduleAction();
-            if(existing != null && !(existing instanceof InstrumentScheduleAction)) {
+            if (existing != null && !(existing instanceof InstrumentScheduleAction)) {
                 RxJavaHooks.setOnScheduleAction(action0 ->
                         new InstrumentScheduleAction(instrumenter).call(existing.call(action0))
                 );

File: tracing/src/main/java/io/micronaut/tracing/instrument/rxjava/RxJava2TracingInstrumentation.java
Patch:
@@ -43,9 +43,9 @@ public class RxJava2TracingInstrumentation {
      */
     @PostConstruct
     void init(TracingRunnableInstrumenter instrumenter) {
-        if(instrumenter != null) {
+        if (instrumenter != null) {
             Function<? super Runnable, ? extends Runnable> existing = RxJavaPlugins.getScheduleHandler();
-            if(existing != null && !(existing instanceof TracingRunnableInstrumenter)) {
+            if (existing != null && !(existing instanceof TracingRunnableInstrumenter)) {
                 RxJavaPlugins.setScheduleHandler(runnable -> instrumenter.apply(existing.apply(runnable)));
             } else {
                 RxJavaPlugins.setScheduleHandler(instrumenter::apply);

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingCallable.java
Patch:
@@ -65,7 +65,7 @@ public V call() throws Exception {
 
     private Span getSpan(Tracer tracer) {
         Scope active = tracer.scopeManager().active();
-        if(active != null) {
+        if (active != null) {
             return active.span();
         } else {
             return tracer.activeSpan();

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingRunnable.java
Patch:
@@ -61,7 +61,7 @@ public void run() {
 
     private Span getSpan(Tracer tracer) {
         Scope active = tracer.scopeManager().active();
-        if(active != null) {
+        if (active != null) {
             return active.span();
         } else {
             return tracer.activeSpan();

File: inject/src/main/java/io/micronaut/context/converters/StringArrayToClassArrayConverter.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.reflect.ClassUtils;
 
+import javax.inject.Singleton;
 import java.util.Arrays;
 import java.util.Optional;
 
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class StringArrayToClassArrayConverter implements TypeConverter<Object[], Class[]> {
 
     private final ClassLoader classLoader;

File: inject/src/main/java/io/micronaut/context/converters/StringToClassConverter.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.reflect.ClassUtils;
 
+import javax.inject.Singleton;
 import java.util.Optional;
 
 /**
@@ -27,6 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class StringToClassConverter implements TypeConverter<CharSequence, Class> {
 
     private final ClassLoader classLoader;

File: inject/src/main/java/io/micronaut/context/converters/StringArrayToClassArrayConverter.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.reflect.ClassUtils;
 
+import javax.inject.Singleton;
 import java.util.Arrays;
 import java.util.Optional;
 
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class StringArrayToClassArrayConverter implements TypeConverter<Object[], Class[]> {
 
     private final ClassLoader classLoader;

File: inject/src/main/java/io/micronaut/context/converters/StringToClassConverter.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.reflect.ClassUtils;
 
+import javax.inject.Singleton;
 import java.util.Optional;
 
 /**
@@ -27,6 +28,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class StringToClassConverter implements TypeConverter<CharSequence, Class> {
 
     private final ClassLoader classLoader;

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoEndpoint.java
Patch:
@@ -27,10 +27,9 @@
  * @author Zachary Klein
  * @since 1.0
  */
-@Endpoint("info")
+@Endpoint(InfoEndpoint.NAME)
 public class InfoEndpoint {
 
-
     public static final String NAME = "info";
     public static final String PREFIX = EndpointConfiguration.PREFIX + "." + NAME;
 

File: runtime/src/main/java/io/micronaut/jackson/env/EnvJsonPropertySourceLoader.java
Patch:
@@ -48,9 +48,9 @@ public int getOrder() {
 
     @Override
     protected Optional<InputStream> readInput(ResourceLoader resourceLoader, String fileName) {
-        if(fileName.equals("application.json")) {
+        if (fileName.equals("application.json")) {
             String v = getEnvValue();
-            if(v != null) {
+            if (v != null) {
                 String encoding = System.getProperty("file.encoding");
                 Charset charset = encoding != null ? Charset.forName(encoding) : StandardCharsets.UTF_8;
                 return Optional.of(new ByteArrayInputStream(v.getBytes(charset)));
@@ -65,7 +65,7 @@ protected Optional<InputStream> readInput(ResourceLoader resourceLoader, String
      */
     protected String getEnvValue() {
         String v = System.getenv(SPRING_APPLICATION_JSON);
-        if(v == null) {
+        if (v == null) {
             v = System.getenv(MICRONAUT_APPLICATION_JSON);
         }
         return v;

File: runtime/src/main/java/io/micronaut/jackson/env/JsonPropertySourceLoader.java
Patch:
@@ -53,7 +53,7 @@ protected void processInput(String name, InputStream input, Map<String, Object>
         TypeFactory factory = TypeFactory.defaultInstance();
         MapType mapType = factory.constructMapType(LinkedHashMap.class, String.class, Object.class);
 
-        Map<String,Object> map = objectMapper.readValue(input, mapType);
+        Map<String, Object> map = objectMapper.readValue(input, mapType);
         processMap(finalMap, map, "");
     }
 }

File: runtime/src/main/java/io/micronaut/retry/annotation/Retryable.java
Patch:
@@ -42,8 +42,6 @@
 @Type(DefaultRetryInterceptor.class)
 public @interface Retryable {
 
-    Integer MAX_INTEGRAL_DIGITS = 4;
-
     /**
      * @return The exception types to include (defaults to all)
      */
@@ -63,7 +61,7 @@
     /**
      * @return The maximum number of retry attempts
      */
-    @Digits(integer = MAX_INTEGRAL_DIGITS, fraction = 0)
+    @Digits(integer = 4, fraction = 0)
     String attempts() default "3";
 
     /**

File: runtime/src/main/java/io/micronaut/scheduling/executor/UserExecutorConfiguration.java
Patch:
@@ -113,6 +113,7 @@ public static UserExecutorConfiguration of(ExecutorType type, int num) {
             case WORK_STEALING:
                 configuration.parallelism = OptionalInt.of(num);
                 break;
+            default:
         }
         return configuration;
     }

File: runtime/src/main/java/io/micronaut/cache/DefaultCacheErrorHandler.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache;
 
 import io.micronaut.context.annotation.Primary;
 
 import javax.inject.Singleton;
 
 /**
- * Default implementation of {@link CacheErrorHandler}
+ * Default implementation of {@link CacheErrorHandler}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/cache/annotation/InvalidateOperations.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache.annotation;
 
 import java.lang.annotation.Documented;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Allows for repeated annotations of the type {@link CacheInvalidate}
+ * Allows for repeated annotations of the type {@link CacheInvalidate}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/cache/annotation/PutOperations.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache.annotation;
 
 import java.lang.annotation.Documented;
@@ -23,7 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Allows for repeated annotations of the type {@link CachePut}
+ * Allows for repeated annotations of the type {@link CachePut}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheKeyGenerator.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache.interceptor;
 
 import java.lang.reflect.AnnotatedElement;
 
 /**
- * <p>An interface for generating keys used by {@link io.micronaut.cache.annotation.Cacheable}</p>
+ * <p>An interface for generating keys used by {@link io.micronaut.cache.annotation.Cacheable}.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface CacheKeyGenerator {
 
     /**
-     * Generate a key for the given annotated element and parameters
+     * Generate a key for the given annotated element and parameters.
      *
      * @param annotatedElement The annotated element
      * @param params           The parameters

File: runtime/src/main/java/io/micronaut/cache/interceptor/DefaultCacheKeyGenerator.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache.interceptor;
 
 import io.micronaut.core.util.ArrayUtils;
 
 import java.lang.reflect.AnnotatedElement;
 
 /**
- * <p>A default implementation of the {@link CacheKeyGenerator} interface that uses the paramaters of the method only</p>
+ * <p>A default implementation of the {@link CacheKeyGenerator} interface that uses the parameters of the method only.</p>
  * <p>
  * <p>This implementation is appropriate for most common cases but note that collisions can occur for classes that
  * use the same cache and have overlapping signatures as the default implementation does not use the method itself

File: runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery;
 
 import io.micronaut.core.naming.Described;
@@ -22,15 +23,15 @@
 import java.util.List;
 
 /**
- * Main client abstraction used for service discovery
+ * Main client abstraction used for service discovery.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface DiscoveryClient extends Closeable, AutoCloseable, Described {
 
     /**
-     * Obtain a list of {@link ServiceInstance} for the given service id
+     * Obtain a list of {@link ServiceInstance} for the given service id.
      *
      * @param serviceId The service id
      * @return A {@link Publisher} that emits a list of {@link ServiceInstance}

File: runtime/src/main/java/io/micronaut/discovery/DiscoveryConfiguration.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery;
 
 import io.micronaut.core.util.Toggleable;
 
 /**
- * Base class for common discovery configuration options
+ * Base class for common discovery configuration options.
  *
  * @author graemerocher
  * @since 1.0
  */
 public abstract class DiscoveryConfiguration implements Toggleable {
 
     /**
-     * The prefix to use for all client discovery settings
+     * The prefix to use for all client discovery settings.
      */
     public static final String PREFIX = "discovery";
 

File: runtime/src/main/java/io/micronaut/discovery/ServiceInstanceIdGenerator.java
Patch:
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery;
 
 import io.micronaut.context.env.Environment;
 
 import javax.annotation.Nonnull;
 
 /**
- * Interface for generating IDs for {@link ServiceInstance}
+ * Interface for generating IDs for {@link ServiceInstance}.
  *
  * @author graemerocher
  * @since 1.0
  */
 public interface ServiceInstanceIdGenerator {
 
     /**
-     * Generates a service ID
+     * Generates a service ID.
      *
      * @param environment     The environment
      * @param serviceInstance The service instance

File: runtime/src/main/java/io/micronaut/discovery/ServiceInstanceList.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery;
 
 import java.util.List;
 
 /**
- * Interface for types that expose a list of {@link ServiceInstance}
+ * Interface for types that expose a list of {@link ServiceInstance}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/cloud/ComputeInstanceMetadataResolver.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.cloud;
 
 import io.micronaut.context.env.Environment;
 
 import java.util.Optional;
 
 /**
- * Interface for resoling compute instance metadata
+ * Interface for resoling compute instance metadata.
  *
  * @author rvanderwerf
  * @author Graeme Rocher
@@ -29,7 +30,7 @@
 public interface ComputeInstanceMetadataResolver {
 
     /**
-     * Resolves {@link ComputeInstanceMetadata} for the current environment if possible
+     * Resolves {@link ComputeInstanceMetadata} for the current environment if possible.
      *
      * @param environment The environment
      * @return The {@link ComputeInstanceMetadata}

File: runtime/src/main/java/io/micronaut/discovery/cloud/gcp/GoogleComputeMetadataConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.cloud.gcp;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
@@ -24,7 +25,7 @@
 import java.time.Duration;
 
 /**
- * Configuration for computing metadata for {@link io.micronaut.context.env.ComputePlatform#GOOGLE_COMPUTE}
+ * Configuration for computing metadata for {@link io.micronaut.context.env.ComputePlatform#GOOGLE_COMPUTE}.
  *
  * @author graemerocher
  * @since 1.0
@@ -34,7 +35,7 @@
 public class GoogleComputeMetadataConfiguration implements Toggleable {
 
     /**
-     * Prefix for Google Compute configuration
+     * Prefix for Google Compute configuration.
      */
     public static final String PREFIX = ApplicationConfiguration.PREFIX + "." + Environment.GOOGLE_COMPUTE + ".metadata";
 

File: runtime/src/main/java/io/micronaut/discovery/cloud/gcp/GoogleComputeNetworkInterface.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.cloud.gcp;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.discovery.cloud.NetworkInterface;
 
 /**
- * A {@link NetworkInterface} implementation for Google
+ * A {@link NetworkInterface} implementation for Google.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/event/ServiceShutdownEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.event;
 
 import io.micronaut.discovery.ServiceInstance;
 
 /**
- * An event triggered when de-registering a {@link ServiceInstance}
+ * An event triggered when de-registering a {@link ServiceInstance}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/event/ServiceStartedEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.event;
 
 import io.micronaut.discovery.ServiceInstance;
 
 /**
- * An event fired when registering a service
+ * An event fired when registering a service.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/metadata/ServiceInstanceMetadataContributor.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.metadata;
 
 import io.micronaut.discovery.ServiceInstance;
@@ -21,15 +22,15 @@
 
 /**
  * Strategy interface for classes to contribute to {@link io.micronaut.discovery.ServiceInstance} metadata
- * when registering an instance with a discovery service
+ * when registering an instance with a discovery service.
  *
  * @author graemerocher
  * @since 1.0
  */
 public interface ServiceInstanceMetadataContributor {
 
     /**
-     * Contribute metadata to the given {@link ServiceInstance} prior to registration
+     * Contribute metadata to the given {@link ServiceInstance} prior to registration.
      *
      * @param instance The instance
      * @param metadata The metadata

File: runtime/src/main/java/io/micronaut/discovery/registration/RegistrationConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.registration;
 
 import io.micronaut.core.util.Toggleable;
@@ -22,15 +23,15 @@
 import java.util.Optional;
 
 /**
- * Common configuration for {@link io.micronaut.discovery.ServiceInstance} registration
+ * Common configuration for {@link io.micronaut.discovery.ServiceInstance} registration.
  *
  * @author graemerocher
  * @since 1.0
  */
 public abstract class RegistrationConfiguration implements Toggleable {
 
     /**
-     * The prefix to use for all client discovery registration settings
+     * The prefix to use for all client discovery registration settings.
      */
     public static final String PREFIX = "registration";
 

File: runtime/src/main/java/io/micronaut/health/CurrentHealthStatus.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.health;
 
 /**
- * <p>Strategy interface for retrieving and updating the current {@link HealthStatus} of the application</p>
+ * <p>Strategy interface for retrieving and updating the current {@link HealthStatus} of the application.</p>
  * <p>
  * <p>Implementations of this class should be thread safe</p>
  *
@@ -31,7 +32,7 @@ public interface CurrentHealthStatus {
     HealthStatus current();
 
     /**
-     * Updates the {@link HealthStatus} of the application
+     * Updates the {@link HealthStatus} of the application.
      *
      * @param newStatus The new status
      * @return The previous {@link HealthStatus}

File: runtime/src/main/java/io/micronaut/health/DefaultCurrentHealthStatus.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.health;
 
 import javax.inject.Singleton;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
- * The default health status stores the values in memory
+ * The default health status stores the values in memory.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/health/HeartbeatConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.health;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
@@ -21,7 +22,7 @@
 import java.time.Duration;
 
 /**
- * Configuration for heart beat
+ * Configuration for heart beat.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
@@ -29,7 +30,7 @@
 import java.util.TimeZone;
 
 /**
- * Configuration for the Jackson JSON parser
+ * Configuration for the Jackson JSON parser.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/annotation/JacksonFeatures.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that can be applied to types that use Jackson to customize serialization features
+ * Annotation that can be applied to types that use Jackson to customize serialization features.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/env/JsonPropertySourceLoader.java
Patch:
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.env;
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.MapType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import io.micronaut.context.env.AbstractPropertySourceLoader;
-import io.micronaut.context.env.PropertySourceLoader;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -30,15 +30,15 @@
 import java.util.Set;
 
 /**
- * <p>A {@link PropertySourceLoader} that reads <tt>application.json</tt> files if they exist</p>
+ * <p>A {@link io.micronaut.context.env.PropertySourceLoader} that reads <tt>application.json</tt> files if they exist.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class JsonPropertySourceLoader extends AbstractPropertySourceLoader {
 
     /**
-     * File extension for property source loader
+     * File extension for property source loader.
      */
     public static final String FILE_EXTENSION = "json";
 

File: runtime/src/main/java/io/micronaut/jackson/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Configuration for the Jackson JSON parser
+ * Configuration for the Jackson JSON parser.
  */
 @Configuration
 @Requires(classes = ObjectMapper.class)
@@ -23,5 +23,3 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: runtime/src/main/java/io/micronaut/jackson/serialize/ConvertibleMultiValuesSerializer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.serialize;
 
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -26,7 +27,7 @@
 import java.util.Map;
 
 /**
- * Serializer for {@link ConvertibleMultiValues}
+ * Serializer for {@link ConvertibleMultiValues}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/serialize/ConvertibleValuesSerializer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.serialize;
 
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -25,7 +26,7 @@
 import java.util.Map;
 
 /**
- * Serializer for {@link ConvertibleValues}
+ * Serializer for {@link ConvertibleValues}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.serialize;
 
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -27,7 +28,7 @@
 import java.util.Optional;
 
 /**
- * A Jackson Serializer for {@link OptionalValues}
+ * A Jackson Serializer for {@link OptionalValues}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceDeserializerModifier.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.serialize;
 
 import com.fasterxml.jackson.databind.BeanDescription;

File: runtime/src/main/java/io/micronaut/jackson/serialize/ResourceSerializerModifier.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jackson.serialize;
 
 import com.fasterxml.jackson.databind.BeanDescription;
@@ -28,7 +29,7 @@
 import java.util.List;
 
 /**
- * Modifies serialization for {@link Resource}
+ * Modifies serialization for {@link Resource}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/reactive/package-info.java
Patch:
@@ -22,4 +22,4 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.reactive;
\ No newline at end of file
+package io.micronaut.reactive;

File: runtime/src/main/java/io/micronaut/reactive/reactor/converters/PublisherToFluxConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.reactive.reactor.converters;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.util.Optional;
 
 /**
- * Converts a {@link Publisher} to a {@link Flux}
+ * Converts a {@link Publisher} to a {@link Flux}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/reactive/reactor/converters/PublisherToMonoConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.reactive.reactor.converters;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.util.Optional;
 
 /**
- * Converts a {@link Publisher} to a {@link Mono}
+ * Converts a {@link Publisher} to a {@link Mono}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/reactive/rxjava1/converters/RxJava1ConverterRegistrar.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.reactive.rxjava1.converters;
 
 import hu.akarnokd.rxjava.interop.RxJavaInterop;
@@ -27,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Allows conversion between RxJava 1.x types and 2.x
+ * Allows conversion between RxJava 1.x types and 2.x.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/converters/RxJavaConverterRegistrar.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.reactive.rxjava2.converters;
 
 import io.micronaut.context.annotation.Requires;
@@ -29,7 +30,7 @@
 import java.util.function.Function;
 
 /**
- * Converters for RxJava
+ * Converters for RxJava.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/reactive/rxjava2/package-info.java
Patch:
@@ -22,4 +22,3 @@
 
 import io.micronaut.context.annotation.Requires;
 import io.reactivex.Flowable;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: runtime/src/main/java/io/micronaut/retry/RetryStateBuilder.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.retry;
 
 /**
- * The retry state builder
+ * The retry state builder.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/retry/annotation/Fallback.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.retry.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -24,7 +25,7 @@
 import java.lang.annotation.Retention;
 
 /**
- * A {@link Secondary} {@link javax.inject.Scope} for types that should be used as a fallback
+ * A {@link Secondary} {@link javax.inject.Scope} for types that should be used as a fallback.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/retry/annotation/Recoverable.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.retry.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: runtime/src/main/java/io/micronaut/retry/event/RetryEventListener.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.retry.event;
 
 import io.micronaut.context.event.ApplicationEventListener;
 
 /**
- * Generalization of {@link ApplicationEventListener} for {@link RetryEvent}
+ * Generalization of {@link ApplicationEventListener} for {@link RetryEvent}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/retry/intercept/MutableRetryState.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.retry.intercept;
 
 import io.micronaut.core.annotation.Internal;

File: runtime/src/main/java/io/micronaut/runtime/context/scope/Refreshable.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.context.scope;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -27,7 +28,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>A custom {@link javax.inject.Scope} that allows target beans to be refreshed</p>
+ * <p>A custom {@link javax.inject.Scope} that allows target beans to be refreshed.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/runtime/context/scope/ScopedProxy.java
Patch:
@@ -13,21 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.context.scope;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import io.micronaut.aop.Around;
 
 import javax.inject.Scope;
-import java.lang.ThreadLocal;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 /**
- * A meta annotation for a scoped proxy
+ * A meta annotation for a scoped proxy.
  *
  * @author Graeme Rocher
  * @see ThreadLocal

File: runtime/src/main/java/io/micronaut/runtime/context/scope/ThreadLocalCustomScope.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.context.scope;
 
 import io.micronaut.context.BeanResolutionContext;
@@ -28,7 +29,7 @@
 import java.util.Optional;
 
 /**
- * A {@link CustomScope} that stores values in thread local storage
+ * A {@link CustomScope} that stores values in thread local storage.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/runtime/context/scope/refresh/RefreshEvent.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.context.scope.refresh;
 
 import io.micronaut.context.event.ApplicationEvent;
@@ -21,7 +22,7 @@
 import java.util.Map;
 
 /**
- * <p>An {@link ApplicationEvent} for handling refreshes</p>
+ * <p>An {@link ApplicationEvent} for handling refreshes.</p>
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -41,7 +42,7 @@ public RefreshEvent(Map<String, Object> changes) {
     }
 
     /**
-     * Constructs a refresh Event that refreshes all keys
+     * Constructs a refresh Event that refreshes all keys.
      */
     public RefreshEvent() {
         super(ALL_KEYS);

File: runtime/src/main/java/io/micronaut/runtime/server/EmbeddedServer.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.server;
 
 import io.micronaut.context.ApplicationContext;
@@ -25,7 +26,7 @@
 
 /**
  * <p>An EmbeddedServer is a general abstraction to manage the lifecycle of any server implementation within
- * a running Micronaut application</p>
+ * a running Micronaut application.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/runtime/server/EmbeddedServerInstance.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.server;
 
 import io.micronaut.discovery.ServiceInstance;
 
 /**
- * Extended version of the {@link ServiceInstance} interface for the {@link EmbeddedServer}
+ * Extended version of the {@link ServiceInstance} interface for the {@link EmbeddedServer}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/runtime/server/event/ServerShutdownEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.server.event;
 
 import io.micronaut.runtime.server.EmbeddedServer;
 
 /**
- * Event fired when the {@link EmbeddedServer} shuts down
+ * Event fired when the {@link EmbeddedServer} shuts down.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/runtime/server/event/ServerStartupEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.server.event;
 
 import io.micronaut.runtime.server.EmbeddedServer;
 
 /**
- * Event fired when the {@link EmbeddedServer} completes startup
+ * Event fired when the {@link EmbeddedServer} completes startup.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/scheduling/annotation/Scheduled.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.scheduling.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -27,7 +28,7 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation for scheduling a re-occurring task
+ * An annotation for scheduling a re-occurring task.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/scheduling/annotation/Schedules.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.scheduling.annotation;
 
 import java.lang.annotation.Documented;
@@ -22,7 +23,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Repeatable annotation wrapper for {@link Scheduled}
+ * Repeatable annotation wrapper for {@link Scheduled}.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/scheduling/executor/DefaultThreadFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.scheduling.executor;
 
 import io.micronaut.context.annotation.Bean;
@@ -24,7 +25,7 @@
 import java.util.concurrent.ThreadFactory;
 
 /**
- * The default thread factory used for creating threads in Micronaut
+ * The default thread factory used for creating threads in Micronaut.
  *
  * @author graemerocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/scheduling/executor/ExecutorSelector.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.scheduling.executor;
 
 import io.micronaut.inject.MethodReference;
@@ -21,15 +22,15 @@
 import java.util.concurrent.ExecutorService;
 
 /**
- * Interface that allows customizing the selection of the {@link ExecutorService} to run an operation on
+ * Interface that allows customizing the selection of the {@link ExecutorService} to run an operation on.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface ExecutorSelector {
 
     /**
-     * Select an {@link ExecutorService} for the given {@link MethodReference}
+     * Select an {@link ExecutorService} for the given {@link MethodReference}.
      *
      * @param method The {@link MethodReference}
      * @return An optional {@link ExecutorService}. If an {@link ExecutorService} cannot be established

File: aop/src/main/java/io/micronaut/aop/Intercepted.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.aop;
 
 /**
- * An interface implemented by generated proxy classes
+ * An interface implemented by generated proxy classes.
  *
  * @author Graeme Rocher
  * @since 1.0

File: aop/src/main/java/io/micronaut/aop/Introduced.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.aop;
 
 /**
- * Marker interface for instances that are implemented automatically via {@link Introduction} advise
+ * Marker interface for instances that are implemented automatically via {@link Introduction} advise.
  *
  * @author Graeme Rocher
  * @since 1.0

File: configurations/aws-common/src/main/java/io.micronaut.configurations.aws/AWSConfiguration.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configurations.aws;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 
 /**
- * Configuration options for AWS
+ * Configuration options for AWS.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,7 +28,7 @@
 public class AWSConfiguration {
 
     /**
-     * Prefix for all AWS settings
+     * Prefix for all AWS settings.
      */
     public static final String PREFIX = "aws";
 }

File: configurations/jdbc-dbcp/src/main/java/io/micronaut/configuration/jdbc/dbcp/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Configuration for Apache DBCP data sources
+ * Configuration for Apache DBCP data sources.
  */
 @Configuration
 @Requires(classes = BasicDataSource.class)
@@ -23,5 +23,3 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 import org.apache.commons.dbcp2.BasicDataSource;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: configurations/jdbc-hikari/src/main/java/io/micronaut/configuration/jdbc/hikari/DatasourceFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.jdbc.hikari;
 
 import com.zaxxer.hikari.HikariDataSource;
@@ -21,7 +22,7 @@
 import io.micronaut.context.annotation.Factory;
 
 /**
- * Creates a Hikari data source for each configuration bean
+ * Creates a Hikari data source for each configuration bean.
  *
  * @author James Kleeh
  * @since 1.0

File: configurations/jdbc-hikari/src/main/java/io/micronaut/configuration/jdbc/hikari/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Configuration for Hikari data sources
+ * Configuration for Hikari data sources.
  */
 @Configuration
 @Requires(classes = HikariDataSource.class)
@@ -23,5 +23,3 @@
 import com.zaxxer.hikari.HikariDataSource;
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/DatasourceFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.jdbc.tomcat;
 
 import io.micronaut.context.annotation.Bean;
@@ -21,7 +22,7 @@
 import org.apache.tomcat.jdbc.pool.DataSource;
 
 /**
- * Creates a tomcat data source for each configuration bean
+ * Creates a tomcat data source for each configuration bean.
  *
  * @author James Kleeh
  * @since 1.0

File: configurations/jdbc-tomcat/src/main/java/io/micronaut/configuration/jdbc/tomcat/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Configuration for Tomcat JDBC data sources
+ * Configuration for Tomcat JDBC data sources.
  */
 @Configuration
 @Requires(classes = DataSource.class)
@@ -23,5 +23,3 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 import org.apache.tomcat.jdbc.pool.DataSource;
-import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file

File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java
Patch:
@@ -130,6 +130,7 @@ static ConversionContext of(Map<String, Argument<?>> typeVariables) {
             public Map<String, Argument<?>> getTypeVariables() {
                 return typeVariables;
             }
+
         };
     }
 

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/client/Route53AutoNamingClient.java
Patch:
@@ -75,7 +75,7 @@ public String getDescription() {
     @Override
     public Publisher<List<ServiceInstance>> getInstances(String serviceId) {
         if (discoveryClient == null) {
-            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.clientConfiguration).build();
+            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.getClientConfiguration()).build();
         }
         if (serviceId == null) {
             serviceId = route53ClientDiscoveryConfiguration.getAwsServiceId();  // we can default to the config file
@@ -102,7 +102,7 @@ public Publisher<List<ServiceInstance>> getInstances(String serviceId) {
     @Override
     public Publisher<List<String>> getServiceIds() {
         if (discoveryClient == null) {
-            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.clientConfiguration).build();
+            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.getClientConfiguration()).build();
         }
 
         ServiceFilter serviceFilter = new ServiceFilter().withName("NAMESPACE_ID").withValues(route53ClientDiscoveryConfiguration.getNamespaceId());

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/registration/Route53AutoNamingRegistrationClient.java
Patch:
@@ -117,7 +117,7 @@ protected Route53AutoNamingRegistrationClient(
         this.idGenerator = idGenerator;
         this.clientConfiguration = clientConfiguration;
         try {
-            this.discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            this.discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         } catch (SdkClientException ske) {
             LOG.warn("Warning: cannot find any AWS credentials. Please verify your configuration.", ske);
         }
@@ -231,7 +231,7 @@ public void deleteNamespace(String namespaceId) {
 
     public String createNamespace(AWSServiceDiscovery serviceDiscovery, String name) {
         if (serviceDiscovery == null) {
-            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         }
         String requestId = Long.toString(System.nanoTime());
 
@@ -250,7 +250,7 @@ public String createNamespace(AWSServiceDiscovery serviceDiscovery, String name)
 
     public String createService(AWSServiceDiscovery serviceDiscovery, String name, String description, String namespaceId, Long ttl) {
         if (serviceDiscovery == null) {
-            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         }
         DnsRecord dnsRecord = new DnsRecord().withType(RecordType.A).withTTL(ttl);
         DnsConfig dnsConfig = new DnsConfig().withDnsRecords(dnsRecord).withNamespaceId(namespaceId).withRoutingPolicy(RoutingPolicy.WEIGHTED);

File: function-aws/src/main/java/io/micronaut/function/aws/MicronautRequestStreamHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.aws;
 
 import static io.micronaut.function.aws.MicronautRequestHandler.registerContextBeans;
@@ -27,7 +28,7 @@
 import java.io.OutputStream;
 
 /**
- * <p>An implementation of the {@link RequestStreamHandler} for Micronaut</p>
+ * <p>An implementation of the {@link RequestStreamHandler} for Micronaut</p>.
  *
  * @author Graeme Rocher
  * @since 1.0

File: function-aws/src/main/java/io/micronaut/function/aws/bind/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * Support classes for binding to {@link io.micronaut.function.FunctionBean} parameters from AWS Lambda requests
+ * Support classes for binding to {@link io.micronaut.function.FunctionBean} parameters from AWS Lambda requests.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.aws.bind;
\ No newline at end of file
+package io.micronaut.function.aws.bind;

File: function-aws/src/main/java/io/micronaut/function/aws/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances for AWS lambda</p>
+ * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances for AWS lambda</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.aws;
\ No newline at end of file
+package io.micronaut.function.aws;

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: function-client/src/main/java/io/micronaut/function/client/FunctionDefinition.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import java.net.URI;
 import java.util.Optional;
 
 /**
- * Represents a discovered function definition
+ * Represents a discovered function definition.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/FunctionDefinitionProvider.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import java.util.Collection;
 
 /**
- * Interface for a type that provides function definitions
+ * Interface for a type that provides function definitions.
  *
  * @author graemerocher
  * @since 1.0

File: function-groovy/src/main/groovy/io/micronaut/function/groovy/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Support classes that simplify writing standalone functions as Groovy scripts</p>
+ * <p>Support classes that simplify writing standalone functions as Groovy scripts</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.groovy;
\ No newline at end of file
+package io.micronaut.function.groovy;

File: function-web/src/main/java/io/micronaut/function/web/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances over the web</p>
+ * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances over the web</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.web;
\ No newline at end of file
+package io.micronaut.function.web;

File: function/src/main/java/io/micronaut/function/FunctionBean.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: function/src/main/java/io/micronaut/function/executor/DefaultFunctionExitHandler.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.executor;
 
 /**
- * Default implementation that will exit using {@link System#exit(int)}
+ * Default implementation that will exit using {@link System#exit(int)}.
  *
  * @author graemerocher
  * @since 1.0

File: function/src/main/java/io/micronaut/function/package-info.java
Patch:
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 /**
- * <p>A set of classes to support a programming model for Server-less application development using Micronaut</p>
+ * <p>A set of classes to support a programming model for Server-less application development using Micronaut</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function;
\ No newline at end of file
+
+package io.micronaut.function;

File: function/src/test/groovy/io/micronaut/function/executor/FunctionInitializerSpec.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.executor;
 
 import org.junit.Assert;

File: http-client/src/main/java/io/micronaut/http/client/Client.java
Patch:
@@ -46,6 +46,7 @@
     /**
      * @return The URL or service ID of the remote service
      */
+    @AliasFor(member = "id")
     String[] value() default "";
 
     /**

File: http/src/main/java/io/micronaut/http/HttpAttributes.java
Patch:
@@ -37,7 +37,6 @@ public enum HttpAttributes implements CharSequence {
      */
     URI_TEMPLATE(Constants.PREFIX + ".route.template"),
 
-
     /**
      * Attribute used to store the HTTP method name, if required within the response
      */

File: inject/src/main/java/io/micronaut/context/DefaultBeanResolutionContext.java
Patch:
@@ -133,7 +133,7 @@ public Optional<Segment> currentSegment() {
         @Override
         public Path pushConstructorResolve(BeanDefinition declaringType, Argument argument) {
             ConstructorInjectionPoint constructor = declaringType.getConstructor();
-            if (constructor instanceof MethodConstructorInjectionPoint) {
+            if (constructor instanceof ReflectionMethodConstructorInjectionPoint) {
                 MethodSegment methodSegment = new MethodSegment(declaringType, (MethodInjectionPoint) constructor, argument);
                 if (contains(methodSegment)) {
                     throw new CircularDependencyException(DefaultBeanResolutionContext.this, argument, "Circular dependency detected");

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.value.PropertyResolver;
 
 import javax.inject.Singleton;
@@ -62,4 +63,5 @@
      * @return The CLI prefix of the configuration. If a blank string is used then no prefix is appended
      */
     String[] cliPrefix() default {};
+
 }

File: inject/src/main/java/io/micronaut/context/annotation/Property.java
Patch:
@@ -39,5 +39,5 @@
     /**
      * @return The value of the property
      */
-    String value();
+    String value() default "";
 }

File: inject/src/main/java/io/micronaut/inject/InjectionPoint.java
Patch:
@@ -15,13 +15,15 @@
  */
 package io.micronaut.inject;
 
+import io.micronaut.core.annotation.AnnotationMetadataProvider;
+
 /**
  * An injection point as a point in a class definition where dependency injection is required.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface InjectionPoint {
+public interface InjectionPoint extends AnnotationMetadataProvider {
     /**
      * @return The bean that declares this injection point
      */

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -50,6 +50,9 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
     public AnnotationMetadata build(T element) {
         DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
         AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
+        if(metadata.isEmpty()) {
+            return AnnotationMetadata.EMPTY_METADATA;
+        }
         return metadata;
     }
 

File: inject/src/main/java/io/micronaut/inject/annotation/JavaAnnotationMetadataBuilder.java
Patch:
@@ -99,7 +99,9 @@ protected List<Element> buildHierarchy(Element element, boolean inheritTypeAnnot
             hierarchy.add(element);
             return hierarchy;
         } else {
-            return Collections.singletonList(element);
+            ArrayList<Element> single = new ArrayList<>();
+            single.add(element);
+            return single;
         }
     }
 

File: runtime-groovy/src/main/groovy/io/micronaut/context/env/groovy/GroovyPropertySourceLoader.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env.groovy;
 
 import io.micronaut.context.env.AbstractPropertySourceLoader;
-import io.micronaut.context.env.Environment;
 import io.micronaut.context.exceptions.ConfigurationException;
 import io.micronaut.core.io.ResourceLoader;
 
@@ -30,7 +30,7 @@
 import java.util.stream.Stream;
 
 /**
- * Loads properties from a Groovy script
+ * Loads properties from a Groovy script.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/DefaultSessionIdGenerator.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session;
 
 import io.micronaut.context.annotation.Primary;
@@ -21,7 +22,7 @@
 import java.util.UUID;
 
 /**
- * Default session ID generator that uses {@link UUID}
+ * Default session ID generator that uses {@link UUID}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/SessionIdGenerator.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session;
 
 /**
- * Strategy interface for generating {@link Session} IDs
+ * Strategy interface for generating {@link Session} IDs.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/annotation/SessionValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Used to bind value from a {@link io.micronaut.session.Session}
+ * Used to bind value from a {@link io.micronaut.session.Session}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionArgumentBinder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.binder;
 
 import io.micronaut.context.annotation.Requires;

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionValueArgumentBinder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.binder;
 
 import io.micronaut.context.annotation.Requires;

File: session/src/main/java/io/micronaut/session/event/AbstractSessionEvent.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.event;
 
 import io.micronaut.context.event.ApplicationEvent;

File: session/src/main/java/io/micronaut/session/event/SessionDeletedEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.event;
 
 import io.micronaut.session.Session;
 
 /**
- * Fired when an {@link Session} is deleted
+ * Fired when an {@link Session} is deleted.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdEncoder.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.session.Session;
 
 /**
- * Strategy interface for encoding {@link Session} IDs so they are represented in the response
+ * Strategy interface for encoding {@link Session} IDs so they are represented in the response.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -29,7 +30,7 @@ public interface HttpSessionIdEncoder {
 
     /**
      * Encode the given Session into the response. The strategy can choose to use headers, cookies or whatever strategy
-     * suites the use case
+     * suites the use case.
      *
      * @param request  The request
      * @param response The response

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdResolver.java
Patch:
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 import io.micronaut.http.HttpRequest;
 
 import java.util.List;
 
 /**
- * Strategy interface for resolving {@link io.micronaut.session.Session} IDs
+ * Strategy interface for resolving {@link io.micronaut.session.Session} IDs.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface HttpSessionIdResolver {
 
     /**
-     * Resolve the Session ID from the given HTTP message
+     * Resolve the Session ID from the given HTTP message.
      *
      * @param message The session ID
      * @return An {@link java.util.Optional}

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdStrategy.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 /**
- * Combines {@link HttpSessionIdResolver} and {@link HttpSessionIdEncoder}
+ * Combines {@link HttpSessionIdResolver} and {@link HttpSessionIdEncoder}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -62,7 +62,8 @@ public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, Server
         Span span = serverHandler.handleReceive(extractor, request.getHeaders(), request);
         // place the span in scope such that down stream filters have access
         try(Tracer.SpanInScope scope = httpTracing.tracing().tracer().withSpanInScope(span)) {
-            Flowable<MutableHttpResponse<?>> responseFlowable = Flowable.fromPublisher(chain.proceed(request));
+            Publisher<MutableHttpResponse<?>> responsePublisher = chain.proceed(request);
+            Flowable<MutableHttpResponse<?>> responseFlowable = Flowable.fromPublisher(responsePublisher);
             responseFlowable = responseFlowable.doOnRequest( amount -> {
                 if(amount > 0) {
                     withSpanInScope(request, span);

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/HttpHeadersTextMap.java
Patch:
@@ -31,10 +31,10 @@
  * @author graemerocher
  * @since 1.0
  */
-public class HttpHeadersTextMap implements TextMap {
+class HttpHeadersTextMap implements TextMap {
     private final HttpHeaders headers;
 
-    public HttpHeadersTextMap(HttpHeaders headers) {
+    HttpHeadersTextMap(HttpHeaders headers) {
         this.headers = headers;
     }
 

File: tracing/src/main/java/io/micronaut/tracing/instrument/scheduling/ThreadFactoryInstrumenter.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.event.BeanCreatedEvent;
 import io.micronaut.context.event.BeanCreatedEventListener;
+import io.micronaut.tracing.instrument.util.TracingRunnable;
 import io.opentracing.Tracer;
 
 import javax.inject.Singleton;

File: validation/src/main/java/io/micronaut/validation/Validated.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.validation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * {@link Around} advice that ensures an objects methods are validated
+ * {@link Around} advice that ensures an objects methods are validated.
  *
  * @author Graeme Rocher
  * @since 1.0

File: validation/src/main/java/io/micronaut/validation/exceptions/ValidationExceptionHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.validation.exceptions;
 
 import io.micronaut.context.annotation.Requires;
@@ -28,7 +29,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default Exception handler for GORM validation errors
+ * Default Exception handler for GORM validation errors.
  *
  * @author graemerocher
  * @since 1.0

File: inject-java/src/main/java/io/micronaut/annotation/processing/GenericUtils.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @author Graeme Rocher
  */
-class GenericUtils {
+public class GenericUtils {
 
     private final Elements elementUtils;
     private final Types typeUtils;
@@ -98,7 +98,7 @@ TypeMirror interfaceGenericTypeFor(TypeElement element, String interfaceName) {
      * @param interfaceName The interface
      * @return The generic types or an empty list
      */
-    List<? extends TypeMirror> interfaceGenericTypesFor(TypeElement element, String interfaceName) {
+    public List<? extends TypeMirror> interfaceGenericTypesFor(TypeElement element, String interfaceName) {
         for (TypeMirror tm : element.getInterfaces()) {
             DeclaredType declaredType = (DeclaredType) tm;
             TypeElement interfaceType = elementUtils.getTypeElement(typeUtils.erasure(declaredType).toString());

File: inject/src/main/java/io/micronaut/context/AbstractExecutableMethod.java
Patch:
@@ -82,8 +82,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        Stream<String> stringStream = Arrays.stream(getArguments()).map(Argument::toString);
-        String text = stringStream.collect(Collectors.joining(","));
+        String text = Argument.toString(getArguments());
         return getReturnType().getType().getSimpleName() + " " + getMethodName() + "(" + text + ")";
     }
 

File: inject/src/main/java/io/micronaut/context/DefaultBeanResolutionContext.java
Patch:
@@ -133,7 +133,7 @@ public Optional<Segment> currentSegment() {
         @Override
         public Path pushConstructorResolve(BeanDefinition declaringType, Argument argument) {
             ConstructorInjectionPoint constructor = declaringType.getConstructor();
-            if (constructor instanceof MethodConstructorInjectionPoint) {
+            if (constructor instanceof ReflectionMethodConstructorInjectionPoint) {
                 MethodSegment methodSegment = new MethodSegment(declaringType, (MethodInjectionPoint) constructor, argument);
                 if (contains(methodSegment)) {
                     throw new CircularDependencyException(DefaultBeanResolutionContext.this, argument, "Circular dependency detected");

File: inject/src/main/java/io/micronaut/context/annotation/ConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.value.PropertyResolver;
 
 import javax.inject.Singleton;
@@ -62,4 +63,5 @@
      * @return The CLI prefix of the configuration. If a blank string is used then no prefix is appended
      */
     String[] cliPrefix() default {};
+
 }

File: inject/src/main/java/io/micronaut/context/annotation/Property.java
Patch:
@@ -39,5 +39,5 @@
     /**
      * @return The value of the property
      */
-    String value();
+    String value() default "";
 }

File: inject/src/main/java/io/micronaut/inject/InjectionPoint.java
Patch:
@@ -15,13 +15,15 @@
  */
 package io.micronaut.inject;
 
+import io.micronaut.core.annotation.AnnotationMetadataProvider;
+
 /**
  * An injection point as a point in a class definition where dependency injection is required.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface InjectionPoint {
+public interface InjectionPoint extends AnnotationMetadataProvider {
     /**
      * @return The bean that declares this injection point
      */

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -50,6 +50,9 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
     public AnnotationMetadata build(T element) {
         DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
         AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
+        if(metadata.isEmpty()) {
+            return AnnotationMetadata.EMPTY_METADATA;
+        }
         return metadata;
     }
 

File: inject/src/main/java/io/micronaut/inject/annotation/JavaAnnotationMetadataBuilder.java
Patch:
@@ -99,7 +99,9 @@ protected List<Element> buildHierarchy(Element element, boolean inheritTypeAnnot
             hierarchy.add(element);
             return hierarchy;
         } else {
-            return Collections.singletonList(element);
+            ArrayList<Element> single = new ArrayList<>();
+            single.add(element);
+            return single;
         }
     }
 

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingPublisher.java
Patch:
@@ -140,7 +140,6 @@ public void onComplete() {
                             try(Scope ignored = tracer.scopeManager().activate(span, true)) {
                                 actual.onComplete();
                                 TracingPublisher.this.doOnFinish(span);
-                                span.finish();
                             }
                         }
                         else {

File: inject/src/main/java/io/micronaut/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -80,7 +80,7 @@ public void writeTo(File targetDir) throws IOException {
      * @param classWriterOutputVisitor The {@link ClassWriterOutputVisitor}
      */
     public abstract void accept(ClassWriterOutputVisitor classWriterOutputVisitor) throws IOException;
-    
+
     protected static String getTypeDescriptor(Object type) {
         if (type instanceof Class) {
             return Type.getDescriptor((Class) type);

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/HttpContentProcessor.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty;
 
 import io.micronaut.core.util.Toggleable;
@@ -22,8 +23,9 @@
 
 /**
  * A reactive streams {@link org.reactivestreams.Processor} that processes incoming {@link ByteBufHolder} and
- * outputs a given type
+ * outputs a given type.
  *
+ * @param <T> The type
  * @author Graeme Rocher
  * @since 1.0
  */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpResponseFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty;
 
 import io.micronaut.core.convert.ConversionService;
@@ -24,7 +25,7 @@
 import io.netty.handler.codec.http.HttpVersion;
 
 /**
- * Implementation of {@link HttpResponseFactory} for Netty
+ * Implementation of {@link HttpResponseFactory} for Netty.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/configuration/NettyChannelOptionConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.configuration;
 
 import io.micronaut.core.convert.ConversionContext;
@@ -25,7 +26,7 @@
 import java.util.Optional;
 
 /**
- * A {@link TypeConverter} that converts {@link CharSequence} instances to Netty {@link ChannelOption} instances
+ * A {@link TypeConverter} that converts {@link CharSequence} instances to Netty {@link ChannelOption} instances.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/ByteBufToArrayConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.converters;
 
 import io.micronaut.core.convert.ConversionContext;
@@ -24,7 +25,7 @@
 import java.util.Optional;
 
 /**
- * Converts a {@link ByteBuf} to a byte array
+ * Converts a {@link ByteBuf} to a byte array.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/ByteBufToStringConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.converters;
 
 import io.micronaut.core.convert.ConversionContext;
@@ -23,7 +24,7 @@
 import java.util.Optional;
 
 /**
- * Converts a ByteBuf to a string
+ * Converts a ByteBuf to a string.
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/DuplicateRouteHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.converters;
 
 import io.micronaut.context.annotation.Primary;
@@ -27,7 +28,7 @@
 import javax.inject.Singleton;
 
 /**
- * Handles exceptions of type {@link DuplicateRouteException}
+ * Handles exceptions of type {@link DuplicateRouteException}.
  *
  * @author James Kleeh
  * @since 1.0
@@ -43,4 +44,4 @@ public HttpResponse handle(HttpRequest request, DuplicateRouteException exceptio
         error.link(Link.SELF, Link.of(request.getUri()));
         return HttpResponse.badRequest(error);
     }
-}
\ No newline at end of file
+}

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToCompletedFileUploadConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.converters;
 
 import io.micronaut.core.convert.ConversionContext;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.types;
 
 import io.micronaut.core.order.Ordered;
@@ -21,8 +22,7 @@
 import io.netty.channel.ChannelHandlerContext;
 
 /**
- * Represents a class that is designed to handle specific types
- * that are returned from routes in a netty specific way.
+ * Represents a class that is designed to handle specific types that are returned from routes in a netty specific way.
  *
  * @param <T> The type to be handled
  * @author James Kleeh

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseTypeHandlerRegistry.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.types;
 
 import java.util.Optional;
 
 /**
- * Represents a registry of {@link NettyCustomizableResponseTypeHandler} and finds
- * the correct handler based on the type.
+ * Represents a registry of {@link NettyCustomizableResponseTypeHandler} and finds the correct handler based on
+ * the type.
  *
  * @author James Kleeh
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyFileCustomizableResponseType.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.types;
 
 import io.micronaut.http.server.types.files.FileCustomizableResponseType;
 
 /**
- * A special type for files specific to Netty
+ * A special type for files specific to Netty.
  *
  * @author James Kleeh
  * @since 1.0

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/files/FileTypeHandlerConfiguration.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.server.netty.types.files;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 
 /**
- * Allows configuration of properties for the {@link FileTypeHandler}
+ * Allows configuration of properties for the {@link FileTypeHandler}.
  *
  * @author James Kleeh
  * @since 1.0

File: core/src/main/java/io/micronaut/core/async/processor/SingleThreadedBufferingProcessor.java
Patch:
@@ -28,7 +28,8 @@
  * <p>A Reactive streams {@link org.reactivestreams.Processor} designed to be used within a single thread and manage back pressure state.</p>
  * <p>
  * <p>This processor only supports a single {@link Subscriber}</p>
- *
+ * @param <T> The argument type
+ * @param <R> The message type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/async/publisher/CompletableFuturePublisher.java
Patch:
@@ -104,7 +104,9 @@ public synchronized void request(long n) {
 
         public synchronized void cancel() {
             if (completed.compareAndSet(false, true)) {
-                if (future != null) future.cancel(false);
+                if (future != null) {
+                    future.cancel(false);
+                }
             }
         }
     }

File: core/src/main/java/io/micronaut/core/async/subscriber/Completable.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.micronaut.core.async.subscriber;
 
-import org.reactivestreams.Subscriber;
-
 /**
  * Interface that exposes a callback to indicate when an operation has been completed.
  *
@@ -29,7 +27,7 @@ public interface Completable {
     /**
      * * Successful terminal state. To be called when the operation is complete.
      *
-     * @see Subscriber#onComplete()
+     * @see org.reactivestreams.Subscriber#onComplete()
      */
     void onComplete();
 }

File: core/src/main/java/io/micronaut/core/async/subscriber/TypedSubscriber.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * A subscriber that is aware of the target type.
  *
+ * @param <T> Type of TypedSubscriber
  * @author graemerocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/attr/AttributeHolder.java
Patch:
@@ -17,7 +17,6 @@
 package io.micronaut.core.attr;
 
 import io.micronaut.core.convert.value.ConvertibleValues;
-import io.micronaut.core.convert.value.MutableConvertibleValues;
 import io.micronaut.core.util.StringUtils;
 
 import java.util.Optional;
@@ -32,7 +31,7 @@
 public interface AttributeHolder {
 
     /**
-     * <p>A {@link MutableConvertibleValues} of the attributes for object.</p>
+     * <p>A {@link io.micronaut.core.convert.value.MutableConvertibleValues} of the attributes for object.</p>
      *
      * @return The attributes of the object
      */
@@ -56,6 +55,7 @@ default Optional<Object> getAttribute(CharSequence name) {
      * Obtain the value of an attribute on the HTTP method.
      * @param name The name of the attribute
      * @param type The required type
+     * @param <T> type Generic
      * @return An {@link Optional} value
      */
     default <T> Optional<T> getAttribute(CharSequence name, Class<T> type) {

File: core/src/main/java/io/micronaut/core/attr/MutableAttributeHolder.java
Patch:
@@ -58,6 +58,7 @@ default MutableAttributeHolder setAttribute(CharSequence name, Object value) {
      *
      * @param name The name of the attribute
      * @param type The required type
+     * @param <T> type Generic
      * @return An {@link Optional} value
      */
     default <T> Optional<T> removeAttribute(CharSequence name, Class<T> type) {

File: core/src/main/java/io/micronaut/core/beans/BeanInfo.java
Patch:
@@ -22,6 +22,7 @@
  * An interface that provides basic bean information. Designed as a simpler replacement for.
  * {@link java.beans.BeanInfo}
  *
+ * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/beans/BeanMap.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Simple class that provides a map interface over a bean.
- *
+ * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -35,7 +35,7 @@ public interface BeanMap<T> extends Map<String, Object> {
      * Creates a {@link BeanMap} for the given bean.
      *
      * @param bean The bean
-     * @param <B>
+     * @param <B> type Generic
      * @return The bean map
      */
     static <B> BeanMap<B> of(B bean) {

File: core/src/main/java/io/micronaut/core/beans/Introspector.java
Patch:
@@ -69,7 +69,7 @@ public static void flushFromCaches(Class<?> clazz) {
      * object. Subsequent calls to this method will be answered with the cached
      * data.
      * </p>
-     *
+     * @param <T> type Generic
      * @param beanClass the specified bean class.
      * @return the <code>BeanInfo</code> of the bean class.
      */

File: core/src/main/java/io/micronaut/core/bind/ArgumentBinderRegistry.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * A registry of {@link ArgumentBinder} instances.
- *
+ * @param <S> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/bind/TypeArgumentBinder.java
Patch:
@@ -21,6 +21,8 @@
 /**
  * An {@link ArgumentBinder} that is resolved based on the argument type.
  *
+ *  @param <T> The argument type
+ *  @param <S> The source type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Default implementation of the {@link ConversionContext} interface.
  *
+ * @param <T> type Generic
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/convert/format/FormattingTypeConverter.java
Patch:
@@ -21,6 +21,9 @@
 import java.lang.annotation.Annotation;
 
 /**
+ * @param <A> The annotation type
+ * @param <T> The argument type
+ * @param <S> The binding source type
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/io/micronaut/core/io/IOUtils.java
Patch:
@@ -33,6 +33,7 @@
 public class IOUtils {
 
     private static final Logger LOG = LoggerFactory.getLogger(IOUtils.class);
+    private static final int BUFFER_MAX = 8192;
 
     /**
      * Read the content of the BufferedReader and return it as a String in a blocking manner.
@@ -51,7 +52,7 @@ public static String readText(BufferedReader reader) throws IOException {
         }
         // reading the content of the file within a char buffer
         // allow to keep the correct line endings
-        char[] charBuffer = new char[8192];
+        char[] charBuffer = new char[BUFFER_MAX];
         int nbCharRead /* = 0*/;
         try {
             while ((nbCharRead = reader.read(charBuffer)) != -1) {

File: core/src/main/java/io/micronaut/core/util/StringUtils.java
Patch:
@@ -109,8 +109,9 @@ public static Map<String, Object> internMapOf(Object... values) {
             return Collections.emptyMap();
         }
         int len = values.length;
-        if (len % 2 != 0)
+        if (len % 2 != 0) {
             throw new IllegalArgumentException("Number of arguments should be an even number representing the keys and values");
+        }
 
         Map<String, Object> answer = new HashMap<>(len / 2);
         int i = 0;

File: core/src/main/java/io/micronaut/core/value/PropertyResolver.java
Patch:
@@ -131,6 +131,7 @@ default <T> T getProperty(String name, Class<T> requiredType, T defaultValue) {
      * @param requiredType The required type
      * @param <T>          The concrete type
      * @return The value of the property
+     * @throws PropertyNotFoundException exception when property does not exist
      */
     default <T> T getRequiredProperty(String name, Class<T> requiredType) throws PropertyNotFoundException {
         return getProperty(name, requiredType).orElseThrow(() ->

File: core/src/main/java/io/micronaut/core/value/ValueResolver.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * An interface for any type that is able to resolve and convert values.
  *
+ * @param <K> parent type
  * @author Graeme Rocher
  * @see io.micronaut.core.convert.TypeConverter
  * @since 1.0

File: jdbc/src/main/java/io/micronaut/jdbc/BasicJdbcConfiguration.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.jdbc;
 
 /**
- * A contract for data source configuration classes to implement
- * that allows for the calculation of several properties based on
- * other properties.
+ * A contract for data source configuration classes to implement that allows for the calculation of several
+ * properties based on other properties.
  *
  * @author James Kleeh
  * @since 1.0

File: management/src/main/java/io/micronaut/management/endpoint/Delete.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A method designed to annotate an {@link Endpoint} delete operation
+ * A method designed to annotate an {@link Endpoint} delete operation.
  *
  * @author James Kleeh
  * @since 1.0
@@ -45,4 +46,4 @@
      * @return The produced MediaType values. Defaults to application/json
      */
     String[] produces() default {"application/json"};
-}
\ No newline at end of file
+}

File: management/src/main/java/io/micronaut/management/endpoint/EndpointDefaultConfiguration.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 
 import java.util.Optional;
 
 /**
- * The default {@link Endpoint} configuration
+ * The default {@link Endpoint} configuration.
  *
  * @author James Kleeh
  * @since 1.0
@@ -29,14 +30,13 @@
 public class EndpointDefaultConfiguration {
 
     /**
-     * The prefix for endpoints settings
+     * The prefix for endpoints settings.
      */
     public static final String PREFIX = "endpoints.all";
 
     protected Optional<Boolean> enabled = Optional.empty();
     protected Optional<Boolean> sensitive = Optional.empty();
 
-
     /**
      * @return Whether the endpoint is enabled
      */

File: management/src/main/java/io/micronaut/management/endpoint/EndpointEnabledCondition.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint;
 
 import io.micronaut.context.BeanContext;
@@ -25,7 +26,7 @@
 import java.util.Optional;
 
 /**
- * A condition that checks whether an {@link Endpoint} is enabled
+ * A condition that checks whether an {@link Endpoint} is enabled.
  *
  * @author James Kleeh
  */

File: management/src/main/java/io/micronaut/management/endpoint/Read.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A method designed to annotate an {@link Endpoint} read operation
+ * A method designed to annotate an {@link Endpoint} read operation.
  *
  * @author Graeme Rocher
  * @since 1.0

File: management/src/main/java/io/micronaut/management/endpoint/Write.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -29,7 +30,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A method designed to annotate an {@link Endpoint} write operation
+ * A method designed to annotate an {@link Endpoint} write operation.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -56,4 +57,4 @@
      */
     @AliasFor(annotation = Consumes.class, value = "value")
     String[] consumes() default MediaType.APPLICATION_JSON;
-}
\ No newline at end of file
+}

File: management/src/main/java/io/micronaut/management/endpoint/beans/BeanDefinitionData.java
Patch:
@@ -13,13 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.beans;
 
 import io.micronaut.inject.BeanDefinition;
 
 /**
- * <p>Returns data for a given bean definition to be used for the {@link BeansEndpoint}</p>
+ * <p>Returns data for a given bean definition to be used for the {@link BeansEndpoint}.</p>
  *
+ * @param <T> The type
  * @author James Kleeh
  * @since 1.0
  */

File: management/src/main/java/io/micronaut/management/endpoint/beans/BeanDefinitionDataCollector.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.beans;
 
 import io.micronaut.inject.BeanDefinition;
@@ -21,8 +22,9 @@
 import java.util.Collection;
 
 /**
- * <p>Used to respond with bean information used for the {@link BeansEndpoint}</p>
+ * <p>Used to respond with bean information used for the {@link BeansEndpoint}.</p>
  *
+ * @param <T> The type
  * @author James Kleeh
  * @since 1.0
  */

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoAggregator.java
Patch:
@@ -13,25 +13,25 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.info;
 
-import io.micronaut.context.env.Environment;
-import io.micronaut.context.env.PropertySource;
 import io.micronaut.management.endpoint.Endpoint;
 import org.reactivestreams.Publisher;
 
 /**
  * <p>Aggregates all registered info sources into a single response.</p>
  * <p>In case of conflicts, priority is set based on the order of info sources {@link io.micronaut.core.order.Ordered}</p>
  *
+ * @param <T> The type
  * @author Zachary Klein
  * @since 1.0
  */
 @Endpoint("info")
 public interface InfoAggregator<T> {
 
     /**
-     * Aggregate an array of {@link InfoSource} and return a publisher
+     * Aggregate an array of {@link InfoSource} and return a publisher.
      *
      * @param sources an array of InfoSources
      * @return A {@link Publisher} of <code>T</code>

File: management/src/main/java/io/micronaut/management/endpoint/routes/RouteData.java
Patch:
@@ -13,13 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.routes;
 
 import io.micronaut.web.router.UriRoute;
 
 /**
- * <p>Returns data for a given route to be used for the {@link RoutesEndpoint}</p>
+ * <p>Returns data for a given route to be used for the {@link RoutesEndpoint}.</p>
  *
+ * @param <T> The type
  * @author James Kleeh
  * @since 1.0
  */

File: management/src/main/java/io/micronaut/management/endpoint/routes/RouteDataCollector.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.endpoint.routes;
 
 import io.micronaut.web.router.UriRoute;
@@ -21,8 +22,9 @@
 import java.util.stream.Stream;
 
 /**
- * <p>Used to respond with route information used for the {@link RoutesEndpoint}</p>
+ * <p>Used to respond with route information used for the {@link RoutesEndpoint}.</p>
  *
+ * @param <T> The type
  * @author James Kleeh
  * @since 1.0
  */

File: management/src/main/java/io/micronaut/management/health/aggregator/HealthAggregator.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.health.aggregator;
 
 import io.micronaut.management.health.indicator.HealthIndicator;
@@ -22,6 +23,7 @@
 /**
  * <p>Aggregates all registered health indicators into a single response.</p>
  *
+ * @param <T> The aggregator type
  * @author James Kleeh
  * @since 1.0
  */

File: management/src/main/java/io/micronaut/management/health/indicator/HealthIndicator.java
Patch:
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.management.health.indicator;
 
 import io.micronaut.core.order.Ordered;
-import io.micronaut.management.health.aggregator.HealthAggregator;
 import org.reactivestreams.Publisher;
 
 /**
- * <p>Describes an indicator of health of the application. Used by the {@link HealthAggregator} to create
- * a response combining all indicators. </p>
+ * <p>Describes an indicator of health of the application. Used by the
+ * {@link io.micronaut.management.health.aggregator.HealthAggregator} to create a response combining all indicators.</p>
  *
  * @author James Kleeh
  * @since 1.0

File: router/src/main/java/io/micronaut/web/router/UnresolvedArgument.java
Patch:
@@ -13,15 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.web.router;
 
 import io.micronaut.core.bind.ArgumentBinder;
 
 import java.util.function.Supplier;
 
 /**
- * Represents an unresolved argument to a {@link io.micronaut.web.router.Route}
+ * Represents an unresolved argument to a {@link io.micronaut.web.router.Route}.
  *
+ * @param <T> The Type
  * @author Graeme Rocher
  * @since 1.0
  */

File: router/src/main/java/io/micronaut/web/router/naming/CamelCaseUriNamingsStrategy.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.web.router.naming;
 
 import io.micronaut.context.annotation.Primary;
@@ -21,7 +22,7 @@
 import javax.inject.Singleton;
 
 /**
- * The default {@link io.micronaut.web.router.RouteBuilder.UriNamingStrategy} if none is provided by the application
+ * The default {@link io.micronaut.web.router.RouteBuilder.UriNamingStrategy} if none is provided by the application.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/cache/AsyncCacheErrorHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache;
 
 import io.micronaut.cache.interceptor.CacheInterceptor;
@@ -23,7 +24,7 @@
 import javax.inject.Singleton;
 
 /**
- * Async error handler that simply logs errors
+ * Async error handler that simply logs errors.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/cache/annotation/CacheConfig.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.cache.annotation;
 
 import io.micronaut.aop.Around;
@@ -30,7 +31,7 @@
 
 /**
  * <p>An annotation that can be used on either a type or an annotation stereotype to configure common caching
- * behaviour</p>
+ * behaviour.</p>
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonMetadataConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.cloud.aws;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
@@ -22,7 +23,7 @@
 import io.micronaut.runtime.ApplicationConfiguration;
 
 /**
- * Default configuration for retrieving Amazon EC2 metadata for {@link io.micronaut.context.env.ComputePlatform#AMAZON_EC2}
+ * Default configuration for retrieving Amazon EC2 metadata for {@link io.micronaut.context.env.ComputePlatform#AMAZON_EC2}.
  *
  * @author graemerocher
  * @since 1.0
@@ -32,7 +33,7 @@
 public class AmazonMetadataConfiguration implements Toggleable {
 
     /**
-     * Prefix for Amazon EC2 configuration metadata
+     * Prefix for Amazon EC2 configuration metadata.
      */
     public static final String PREFIX = ApplicationConfiguration.PREFIX + "." + Environment.AMAZON_EC2 + ".metadata";
 

File: runtime/src/main/java/io/micronaut/discovery/cloud/aws/AmazonNetworkInterface.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.cloud.aws;
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.discovery.cloud.NetworkInterface;
 
 /**
- * A {@link NetworkInterface} implementation for Amazon
+ * A {@link NetworkInterface} implementation for Amazon.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime/src/main/java/io/micronaut/discovery/event/AbstractServiceInstanceEvent.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.discovery.event;
 
 import io.micronaut.context.event.ApplicationEvent;

File: runtime/src/main/java/io/micronaut/runtime/server/event/AbstractServerApplicationEvent.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.runtime.server.event;
 
 import io.micronaut.context.event.ApplicationEvent;
 import io.micronaut.runtime.server.EmbeddedServer;
 
 /**
- * An abstract event for events specific to server applications
+ * An abstract event for events specific to server applications.
  *
  * @author Graeme Rocher
  * @since 1.0

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -50,6 +50,9 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
     public AnnotationMetadata build(T element) {
         DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
         AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
+        if(metadata.isEmpty()) {
+            return AnnotationMetadata.EMPTY_METADATA;
+        }
         return metadata;
     }
 

File: core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java
Patch:
@@ -135,7 +135,7 @@ public final void onError(Throwable t) {
     protected abstract void doOnError(Throwable t);
 
     /**
-     * Implement {@link Subscriber#onComplete()}
+     * Implement {@link Subscriber#onComplete()}.
      */
     protected abstract void doOnComplete();
 

File: core/src/main/java/io/micronaut/core/attr/MutableAttributeHolder.java
Patch:
@@ -46,8 +46,7 @@ default MutableAttributeHolder setAttribute(CharSequence name, Object value) {
         if(StringUtils.isNotEmpty(name)) {
             if(value == null) {
                 getAttributes().remove(name.toString());
-            }
-            else {
+            } else {
                 getAttributes().put(name.toString(), value);
             }
         }

File: core/src/main/java/io/micronaut/core/beans/ReflectionBeanMap.java
Patch:
@@ -77,8 +77,9 @@ public Object get(Object key) {
         PropertyDescriptor propertyDescriptor = propertyDescriptors.get(key);
         if (propertyDescriptor != null) {
             Method readMethod = propertyDescriptor.getReadMethod();
-            if (readMethod != null)
+            if (readMethod != null) {
                 return ReflectionUtils.invokeMethod(bean, readMethod);
+            }
         }
         return null;
     }

File: core/src/main/java/io/micronaut/core/bind/ArgumentBinderRegistry.java
Patch:
@@ -29,7 +29,7 @@
 public interface ArgumentBinderRegistry<S> {
 
     /**
-     * Locate an {@link ArgumentBinder} for the given argument and source type
+     * Locate an {@link ArgumentBinder} for the given argument and source type.
      *
      * @param argument The argument
      * @param source   The source

File: core/src/main/java/io/micronaut/core/bind/annotation/Bindable.java
Patch:
@@ -18,15 +18,13 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import io.micronaut.core.type.Argument;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 /**
- * An annotation stereotype for other annotations that indicates a method {@link Argument} is bindable.
+ * An annotation stereotype for other annotations that indicates a method {@link io.micronaut.core.type.Argument} is bindable.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java
Patch:
@@ -20,7 +20,6 @@
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.reflect.GenericTypeUtils;
 import io.micronaut.core.type.Argument;
-import io.micronaut.core.value.OptionalValues;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -173,7 +172,7 @@ default <T> T getFirst(CharSequence name, Class<T> requiredType, T defaultValue)
     }
 
     /**
-     * Creates a new {@link OptionalValues} for the given type and values.
+     * Creates a new {@link io.micronaut.core.value.OptionalValues} for the given type and values.
      *
      * @param values A map of values
      * @param <T>    The target generic type

File: core/src/main/java/io/micronaut/core/io/file/FileSystemResourceLoader.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.io.ResourceLoader;
 
 /**
- * Abstraction to load resources from the file system
+ * Abstraction to load resources from the file system.
  */
 public interface FileSystemResourceLoader extends ResourceLoader {
 

File: core/src/main/java/io/micronaut/core/io/scan/AnnotatedTypeInfoVisitor.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Set;
 
 /**
- * Discovers the annotation names of a class
+ * Discovers the annotation names of a class.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan</p>
+ * <p>Extended version of {@link ClassPathAnnotationScanner} that temporarily caches the result of scan</p>.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathAnnotationScanner.java
Patch:
@@ -63,7 +63,7 @@ public ClassPathAnnotationScanner() {
     }
 
     /**
-     * Whether to include JAR files
+     * Whether to include JAR files.
      *
      * @param includeJars The jar files to include
      * @return This scanner
@@ -74,7 +74,7 @@ ClassPathAnnotationScanner includeJars(boolean includeJars) {
     }
 
     /**
-     * Scan the given packages
+     * Scan the given packages.
      *
      * @param annotation The annotation to scan for
      * @param pkg        The package to scan

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathResourceLoader.java
Patch:
@@ -19,7 +19,7 @@
 import io.micronaut.core.io.ResourceLoader;
 
 /**
- * Abstraction to load resources from the the classpath
+ * Abstraction to load resources from the the classpath.
  */
 public interface ClassPathResourceLoader extends ResourceLoader {
 

File: core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.function.Supplier;
 
 /**
- * Default implementation of {@link ServiceDefinition}
+ * Default implementation of {@link ServiceDefinition}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/io/service/ServiceDefinition.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.function.Supplier;
 
 /**
- * A service that may or may not be present on the classpath
+ * A service that may or may not be present on the classpath.
  *
  * @param <T> The service type
  */
@@ -36,7 +36,7 @@ public interface ServiceDefinition<T> {
     boolean isPresent();
 
     /**
-     * Load the service of throw the given exception
+     * Load the service of throw the given exception.
      *
      * @param exceptionSupplier The exception supplier
      * @param <X>               The exception type

File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java
Patch:
@@ -306,7 +306,9 @@ public static Optional<Field> findField(Class type, String name) {
             type = type.getSuperclass();
             while (type != null) {
                 declaredField = findField(type, name);
-                if (declaredField.isPresent()) break;
+                if (declaredField.isPresent()) {
+                    break;
+                }
             }
         }
         return declaredField;

File: core/src/main/java/io/micronaut/core/reflect/exception/InvocationException.java
Patch:
@@ -17,7 +17,7 @@
 package io.micronaut.core.reflect.exception;
 
 /**
- * Runtime exception equivalent of {@link java.lang.reflect.InvocationTargetException}
+ * Runtime exception equivalent of {@link java.lang.reflect.InvocationTargetException}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/io/micronaut/core/value/ValueResolver.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micronaut.core.convert.ArgumentConversionContext;
 import io.micronaut.core.convert.ConversionContext;
-import io.micronaut.core.convert.TypeConverter;
 import io.micronaut.core.type.Argument;
 
 import java.util.Optional;
@@ -27,7 +26,7 @@
  * An interface for any type that is able to resolve and convert values.
  *
  * @author Graeme Rocher
- * @see TypeConverter
+ * @see io.micronaut.core.convert.TypeConverter
  * @since 1.0
  */
 public interface ValueResolver<K extends CharSequence> {

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/cache/RedisCacheConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public Optional<String> getServer() {
      * @param server The name of the server
      * @see io.micronaut.configuration.lettuce.NamedRedisServersConfiguration
      */
-    void setServer(String server) {
+    public void setServer(String server) {
         this.server = server;
     }
 
@@ -82,7 +82,7 @@ public Optional<Class<ObjectSerializer>> getValueSerializer() {
      *
      * @param valueSerializer The value serializer.
      */
-    void setValueSerializer(Class<ObjectSerializer> valueSerializer) {
+    public void setValueSerializer(Class<ObjectSerializer> valueSerializer) {
         this.valueSerializer = valueSerializer;
     }
 
@@ -100,7 +100,7 @@ public Optional<Class<ObjectSerializer>> getKeySerializer() {
      *
      * @param keySerializer The key serializer
      */
-    void setKeySerializer(Class<ObjectSerializer> keySerializer) {
+    public void setKeySerializer(Class<ObjectSerializer> keySerializer) {
         this.keySerializer = keySerializer;
     }
 }

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/DefaultRedisConfiguration.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.lettuce;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Requires;
 
 /**
- * In the case where the <tt>redis.uri</tt> is not specified use the default configuration
+ * In the case where the <tt>redis.uri</tt> is not specified use the default configuration.
  *
  * @author Graeme Rocher
  * @since 1.0

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/RedisConnectionUtil.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.lettuce;
 
 import io.lettuce.core.api.StatefulConnection;
@@ -26,15 +27,15 @@
 import java.util.Optional;
 
 /**
- * Internal utility methods for configuration
+ * Internal utility methods for configuration.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 @Internal
 public class RedisConnectionUtil {
     /**
-     * Utility method for establishing a redis connection
+     * Utility method for establishing a redis connection.
      *
      * @param beanLocator  The bean locator to use
      * @param serverName   The server name to use

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * Configuration group for Lettuce
+ * Configuration group for Lettuce.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -26,4 +26,4 @@
 
 import io.lettuce.core.RedisURI;
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file
+import io.micronaut.context.annotation.Requires;

File: configurations/redis-lettuce/src/test/groovy/io/micronaut/configuration/lettuce/cache/CounterService.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.lettuce.cache;
 
 import io.micronaut.cache.annotation.*;

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/client/Route53AutoNamingClient.java
Patch:
@@ -75,7 +75,7 @@ public String getDescription() {
     @Override
     public Publisher<List<ServiceInstance>> getInstances(String serviceId) {
         if (discoveryClient == null) {
-            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.clientConfiguration).build();
+            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.getClientConfiguration()).build();
         }
         if (serviceId == null) {
             serviceId = route53ClientDiscoveryConfiguration.getAwsServiceId();  // we can default to the config file
@@ -102,7 +102,7 @@ public Publisher<List<ServiceInstance>> getInstances(String serviceId) {
     @Override
     public Publisher<List<String>> getServiceIds() {
         if (discoveryClient == null) {
-            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.clientConfiguration).build();
+            discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(awsClientConfiguration.getClientConfiguration()).build();
         }
 
         ServiceFilter serviceFilter = new ServiceFilter().withName("NAMESPACE_ID").withValues(route53ClientDiscoveryConfiguration.getNamespaceId());

File: discovery-client/src/main/java/io/micronaut/discovery/aws/route53/registration/Route53AutoNamingRegistrationClient.java
Patch:
@@ -117,7 +117,7 @@ protected Route53AutoNamingRegistrationClient(
         this.idGenerator = idGenerator;
         this.clientConfiguration = clientConfiguration;
         try {
-            this.discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            this.discoveryClient = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         } catch (SdkClientException ske) {
             LOG.warn("Warning: cannot find any AWS credentials. Please verify your configuration.", ske);
         }
@@ -231,7 +231,7 @@ public void deleteNamespace(String namespaceId) {
 
     public String createNamespace(AWSServiceDiscovery serviceDiscovery, String name) {
         if (serviceDiscovery == null) {
-            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         }
         String requestId = Long.toString(System.nanoTime());
 
@@ -250,7 +250,7 @@ public String createNamespace(AWSServiceDiscovery serviceDiscovery, String name)
 
     public String createService(AWSServiceDiscovery serviceDiscovery, String name, String description, String namespaceId, Long ttl) {
         if (serviceDiscovery == null) {
-            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.clientConfiguration).build();
+            serviceDiscovery = AWSServiceDiscoveryClient.builder().withClientConfiguration(clientConfiguration.getClientConfiguration()).build();
         }
         DnsRecord dnsRecord = new DnsRecord().withType(RecordType.A).withTTL(ttl);
         DnsConfig dnsConfig = new DnsConfig().withDnsRecords(dnsRecord).withNamespaceId(namespaceId).withRoutingPolicy(RoutingPolicy.WEIGHTED);

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public AWSLambdaConfiguration(AWSClientConfiguration clientConfiguration, Enviro
      * @return The builder for the {@link com.amazonaws.services.lambda.AWSLambdaAsync} instance
      */
     public AWSLambdaAsyncClientBuilder getBuilder() {
-        this.builder.setClientConfiguration(clientConfiguration.clientConfiguration);
+        this.builder.setClientConfiguration(clientConfiguration.getClientConfiguration());
         return builder;
     }
 

File: session/src/main/java/io/micronaut/session/DefaultSessionIdGenerator.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session;
 
 import io.micronaut.context.annotation.Primary;
@@ -21,7 +22,7 @@
 import java.util.UUID;
 
 /**
- * Default session ID generator that uses {@link UUID}
+ * Default session ID generator that uses {@link UUID}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/SessionIdGenerator.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session;
 
 /**
- * Strategy interface for generating {@link Session} IDs
+ * Strategy interface for generating {@link Session} IDs.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/annotation/SessionValue.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.annotation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -25,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Used to bind value from a {@link io.micronaut.session.Session}
+ * Used to bind value from a {@link io.micronaut.session.Session}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionArgumentBinder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.binder;
 
 import io.micronaut.context.annotation.Requires;

File: session/src/main/java/io/micronaut/session/binder/OptionalSessionValueArgumentBinder.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.binder;
 
 import io.micronaut.context.annotation.Requires;

File: session/src/main/java/io/micronaut/session/event/AbstractSessionEvent.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.event;
 
 import io.micronaut.context.event.ApplicationEvent;

File: session/src/main/java/io/micronaut/session/event/SessionDeletedEvent.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.event;
 
 import io.micronaut.session.Session;
 
 /**
- * Fired when an {@link Session} is deleted
+ * Fired when an {@link Session} is deleted.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdEncoder.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;
 import io.micronaut.session.Session;
 
 /**
- * Strategy interface for encoding {@link Session} IDs so they are represented in the response
+ * Strategy interface for encoding {@link Session} IDs so they are represented in the response.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -29,7 +30,7 @@ public interface HttpSessionIdEncoder {
 
     /**
      * Encode the given Session into the response. The strategy can choose to use headers, cookies or whatever strategy
-     * suites the use case
+     * suites the use case.
      *
      * @param request  The request
      * @param response The response

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdResolver.java
Patch:
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 import io.micronaut.http.HttpRequest;
 
 import java.util.List;
 
 /**
- * Strategy interface for resolving {@link io.micronaut.session.Session} IDs
+ * Strategy interface for resolving {@link io.micronaut.session.Session} IDs.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface HttpSessionIdResolver {
 
     /**
-     * Resolve the Session ID from the given HTTP message
+     * Resolve the Session ID from the given HTTP message.
      *
      * @param message The session ID
      * @return An {@link java.util.Optional}

File: session/src/main/java/io/micronaut/session/http/HttpSessionIdStrategy.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 /**
- * Combines {@link HttpSessionIdResolver} and {@link HttpSessionIdEncoder}
+ * Combines {@link HttpSessionIdResolver} and {@link HttpSessionIdEncoder}.
  *
  * @author Graeme Rocher
  * @since 1.0

File: runtime-groovy/src/main/groovy/io/micronaut/context/env/groovy/GroovyPropertySourceLoader.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.context.env.groovy;
 
 import io.micronaut.context.env.AbstractPropertySourceLoader;
-import io.micronaut.context.env.Environment;
 import io.micronaut.context.exceptions.ConfigurationException;
 import io.micronaut.core.io.ResourceLoader;
 
@@ -30,7 +30,7 @@
 import java.util.stream.Stream;
 
 /**
- * Loads properties from a Groovy script
+ * Loads properties from a Groovy script.
  *
  * @author Graeme Rocher
  * @since 1.0

File: session/src/main/java/io/micronaut/session/http/HttpSessionConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.session.http;
 
 import io.micronaut.context.annotation.ConfigurationProperties;
@@ -23,7 +24,7 @@
 import java.util.Optional;
 
 /**
- * Allows configuration of the session
+ * Allows configuration of the session.
  *
  * @author Graeme Rocher
  * @since 1.0
@@ -32,7 +33,7 @@
 public class HttpSessionConfiguration extends SessionConfiguration {
 
     /**
-     * Cookie name
+     * Cookie name.
      */
     public static final String DEFAULT_COOKIE_NAME = "SESSION";
 

File: http-client/src/main/java/io/micronaut/http/client/LoadBalancerResolver.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.http.client;
 
 import java.util.Optional;
 
 /**
- * A resolver of {@link LoadBalancer} instances that are capable of resolving references to services into a concrete loadbalance
+ * A resolver of {@link LoadBalancer} instances that are capable of resolving references to services into a concrete loadbalance.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public interface LoadBalancerResolver {
 
     /**
-     * Resolve a {@link LoadBalancer} for the given references
+     * Resolve a {@link LoadBalancer} for the given references.
      *
      * @param serviceReferences The references. These could be service IDs or fully HTTP URLs
      * @return A {@link LoadBalancer} or empty of non can be resolved

File: tracing/src/main/java/io/micronaut/tracing/annotation/ContinueSpan.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.annotation;
 
 import io.micronaut.aop.Around;

File: tracing/src/main/java/io/micronaut/tracing/annotation/SpanTag.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.annotation;
 
 import java.lang.annotation.*;
 
 /**
- * <p>Applied to parameters of a method to indicate which parameters should be included in span tags</p>
+ * <p>Applied to parameters of a method to indicate which parameters should be included in span tags.</p>
  *
  * <p>Annotation Inspired by Spring Sleuth but using Open Tracing and Micronaut AOP</p>
  *

File: tracing/src/main/java/io/micronaut/tracing/brave/ZipkinServiceInstanceList.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.util.stream.Collectors;
 
 /**
- * A {@link ServiceInstanceList} for Zipkin
+ * A {@link ServiceInstanceList} for Zipkin.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingClientFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave.instrument.http;
 
 import brave.http.HttpClientHandler;
@@ -28,7 +29,7 @@
 import org.reactivestreams.Publisher;
 
 /**
- * Instruments outgoing HTTP requests
+ * Instruments outgoing HTTP requests.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/BraveTracingServerFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave.instrument.http;
 
 import brave.Span;
@@ -30,9 +31,8 @@
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 
-
 /**
- * Instruments incoming HTTP requests
+ * Instruments incoming HTTP requests.
  *
  * @author graemerocher
  * @since 1.0
@@ -56,7 +56,6 @@ public BraveTracingServerFilter(
         this.extractor = httpTracing.tracing().propagation().extractor(ConvertibleMultiValues::get);
     }
 
-
     @Override
     public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
         Span span = serverHandler.handleReceive(extractor, request.getHeaders(), request);

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/HttpClientTracingPublisher.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave.instrument.http;
 
 import brave.Span;
@@ -32,7 +33,7 @@
 import java.util.Optional;
 
 /**
- * A Publisher that handles HTTP client request tracing
+ * A Publisher that handles HTTP client request tracing.
  *
  * @author graemerocher
  * @since 1.0
@@ -96,8 +97,7 @@ public void onError(Throwable error) {
                             configureAttributes(response);
 
                             clientHandler.handleReceive(response, e, span);
-                        }
-                        else {
+                        } else {
                             span.error(error);
                             span.finish();
                         }

File: tracing/src/main/java/io/micronaut/tracing/brave/log/Slf4jCurrentTraceContextFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave.log;
 
 import brave.propagation.CurrentTraceContext;
@@ -24,7 +25,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Factory for the current trace context object
+ * Factory for the current trace context object.
  *
  * @author graemerocher
  * @since 1.0
@@ -37,8 +38,7 @@ public class Slf4jCurrentTraceContextFactory {
     Slf4jCurrentTraceContext currentTraceContext(@Nullable CurrentTraceContext existing) {
         if(existing != null) {
             return new Slf4jCurrentTraceContext(existing);
-        }
-        else {
+        } else {
             return new Slf4jCurrentTraceContext();
         }
     }

File: tracing/src/main/java/io/micronaut/tracing/brave/package-info.java
Patch:
@@ -24,4 +24,4 @@
 import brave.Tracing;
 import brave.opentracing.BraveTracer;
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file
+import io.micronaut.context.annotation.Requires;

File: tracing/src/main/java/io/micronaut/tracing/brave/sender/HttpClientSenderFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.brave.sender;
 
 import io.micronaut.context.annotation.Bean;
@@ -25,7 +26,7 @@
 import javax.inject.Singleton;
 
 /**
- * A Factory for creating a Zipkin {@link Sender} based on {@link io.micronaut.tracing.brave.BraveTracerConfiguration.HttpClientSenderConfiguration}
+ * A Factory for creating a Zipkin {@link Sender} based on {@link io.micronaut.tracing.brave.BraveTracerConfiguration.HttpClientSenderConfiguration}.
  *
  * @author graemerocher
  * @since 1.0
@@ -40,6 +41,7 @@ protected HttpClientSenderFactory(BraveTracerConfiguration.HttpClientSenderConfi
     }
 
     /**
+     * @param loadBalancerResolver A resolver capable of resolving references to services into a concrete loadbalance
      * @return The {@link Sender}
      */
     @Bean

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/HttpHeadersTextMap.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.http;
 
 import io.micronaut.core.util.CollectionUtils;
@@ -26,7 +27,7 @@
 import java.util.Map;
 
 /**
- * A {@link TextMap} implementations for the headers
+ * A {@link TextMap} implementations for the headers.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingClientFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.http;
 
 import io.micronaut.context.annotation.Requires;
@@ -35,7 +36,7 @@
 import javax.annotation.Nonnull;
 
 /**
- * An HTTP client instrumentation filter that uses Open Tracing
+ * An HTTP client instrumentation filter that uses Open Tracing.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/instrument/hystrix/TracingHystrixConcurrentStrategy.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.hystrix;
 
 import com.netflix.hystrix.HystrixThreadPoolKey;
@@ -36,7 +37,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * Replaces the default {@link HystrixConcurrencyStrategy} with one that is enhanced for Tracing
+ * Replaces the default {@link HystrixConcurrencyStrategy} with one that is enhanced for Tracing.
  *
  * @author graemerocher
  * @since 1.0
@@ -84,8 +85,7 @@ public <T> Callable<T> wrapCallable(Callable<T> callable) {
         Callable<T> wrapped = super.wrapCallable(callable);
         if(callable instanceof TracingCallable) {
             return callable;
-        }
-        else {
+        } else {
             return new TracingCallable<>(wrapped, tracer);
         }
     }

File: tracing/src/main/java/io/micronaut/tracing/instrument/reactor/ReactorTracingInstrumentation.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.reactor;
 
 import io.micronaut.context.annotation.Context;
@@ -32,7 +33,7 @@
 import java.util.function.Supplier;
 
 /**
- * Instrumentation for Reactor
+ * Instrumentation for Reactor.
  *
  * @author graemerocher
  * @since 1.0
@@ -43,6 +44,7 @@
 @Context
 public class ReactorTracingInstrumentation {
     private static final Logger LOG = LoggerFactory.getLogger(ReactorTracingInstrumentation.class);
+
     @PostConstruct
     void init(Tracer tracer, ThreadFactory threadFactory) {
         try {

File: tracing/src/main/java/io/micronaut/tracing/instrument/scheduling/ThreadFactoryInstrumenter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.scheduling;
 
 import io.micronaut.context.annotation.Requires;
@@ -25,7 +26,7 @@
 import java.util.concurrent.ThreadFactory;
 
 /**
- * Instruments thread creation for {@link Tracer}
+ * Instruments thread creation for {@link Tracer}.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingRunnable.java
Patch:
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.util;
 
 import io.opentracing.Scope;
 import io.opentracing.Span;
 import io.opentracing.Tracer;
 
 /**
- * Instruments a Runnable
+ * Instruments a Runnable.
  *
  * @author graemerocher
  * @since 1.0
@@ -56,8 +57,7 @@ private Span getSpan(Tracer tracer) {
         Scope active = tracer.scopeManager().active();
         if(active != null) {
             return active.span();
-        }
-        else {
+        } else {
             return tracer.activeSpan();
         }
     }

File: tracing/src/main/java/io/micronaut/tracing/instrument/util/TracingRunnableInstrumenter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.tracing.instrument.util;
 
 import io.micronaut.context.annotation.Requires;
@@ -22,7 +23,7 @@
 import java.util.function.Function;
 
 /**
- * A function that instruments an existing Runnable with {@link TracingRunnable}
+ * A function that instruments an existing Runnable with {@link TracingRunnable}.
  *
  * @author graemerocher
  * @since 1.0

File: tracing/src/main/java/io/micronaut/tracing/jaeger/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * This package contains configuration for Jaeger based tracing
+ * This package contains configuration for Jaeger based tracing.
  *
  * @author graemerocher
  * @since 1.0
@@ -27,4 +27,4 @@
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.context.annotation.Requires;
 
-import static io.micronaut.tracing.jaeger.JaegerConfiguration.PREFIX;
\ No newline at end of file
+import static io.micronaut.tracing.jaeger.JaegerConfiguration.PREFIX;

File: configurations/neo4j-bolt/src/main/java/io/micronaut/configuration/neo4j/bolt/condition/RequiresNeo4j.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.neo4j.bolt.condition;
 
 import io.micronaut.configuration.neo4j.bolt.Neo4jBoltSettings;

File: configurations/neo4j-bolt/src/main/java/io/micronaut/configuration/neo4j/bolt/package-info.java
Patch:
@@ -23,4 +23,3 @@
 
 import io.micronaut.context.annotation.Configuration;
 import io.micronaut.configuration.neo4j.bolt.condition.RequiresNeo4j;
-import io.micronaut.context.annotation.Configuration;
\ No newline at end of file

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/condition/RequiresMongo.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.mongo.reactive.condition;
 
 import com.mongodb.reactivestreams.client.MongoClient;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A custom requirement for MongoDB
+ * A custom requirement for MongoDB.
  *
  * @author graemerocher
  * @since 1.0

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/convert/StringToServerAddressConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.mongo.reactive.convert;
 
 import com.mongodb.ServerAddress;

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/convert/StringToWriteConcernConverter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.mongo.reactive.convert;
 
 import com.mongodb.WriteConcern;

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/package-info.java
Patch:
@@ -14,15 +14,14 @@
  * limitations under the License.
  */
 /**
- * Configuration group for Mongo Reactive Streams
+ * Configuration group for Mongo Reactive Streams.
  *
  * @author James Kleeh
  * @since 1.0
  */
 @Configuration
 @RequiresMongo
 package io.micronaut.configuration.mongo.reactive;
+
 import io.micronaut.configuration.mongo.reactive.condition.RequiresMongo;
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.configuration.mongo.reactive.condition.RequiresMongo;
-import io.micronaut.context.annotation.Configuration;
\ No newline at end of file

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/test/MongoProcessFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.mongo.reactive.test;
 
 import com.mongodb.ConnectionString;

File: configurations/mongo-reactive/src/main/java/io/micronaut/configuration/mongo/reactive/test/ReactiveMongoProcessFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.configuration.mongo.reactive.test;
 
 import com.mongodb.ConnectionString;
@@ -40,7 +41,7 @@
 import java.util.Optional;
 
 /**
- * This class will configure a {@link MongodProcess} if the class is on the classpath and the server is not configured
+ * This class will configure a {@link MongodProcess} if the class is on the classpath and the server is not configured.
  *
  * @author graemerocher
  * @since 1.0
@@ -79,7 +80,6 @@ public ReactiveMongoConfiguration onCreated(BeanCreatedEvent<ReactiveMongoConfig
         return configuration;
     }
 
-
     @Override
     @PreDestroy
     public void close() throws IOException {

File: configurations/mongo-gorm/src/main/java/io/micronaut/configuration/mongo/gorm/package-info.java
Patch:
@@ -25,4 +25,4 @@
 import com.mongodb.MongoClient;
 import io.micronaut.configuration.mongo.reactive.condition.RequiresMongo;
 import io.micronaut.context.annotation.Configuration;
-import io.micronaut.context.annotation.Requires;
\ No newline at end of file
+import io.micronaut.context.annotation.Requires;

File: function-web/src/main/java/io/micronaut/function/web/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances over the web</p>
+ * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances over the web</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.web;
\ No newline at end of file
+package io.micronaut.function.web;

File: function-groovy/src/main/groovy/io/micronaut/function/groovy/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Support classes that simplify writing standalone functions as Groovy scripts</p>
+ * <p>Support classes that simplify writing standalone functions as Groovy scripts</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.groovy;
\ No newline at end of file
+package io.micronaut.function.groovy;

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public class AWSLambdaConfiguration {
     public static final String PREFIX = AWSConfiguration.PREFIX + ".lambda";
 
     @ConfigurationBuilder(prefixes = "with")
-    private AWSLambdaAsyncClientBuilder builder = AWSLambdaAsyncClient.asyncBuilder();
+    AWSLambdaAsyncClientBuilder builder = AWSLambdaAsyncClient.asyncBuilder();
 
     private final AWSClientConfiguration clientConfiguration;
 

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaFunctionExecutor.java
Patch:
@@ -52,7 +52,7 @@
 @Singleton
 public class AWSLambdaFunctionExecutor<I, O> implements FunctionInvoker<I, O>, FunctionInvokerChooser {
 
-    public static final int STATUS_CODE_ERROR = 300;
+    private static final int STATUS_CODE_ERROR = 300;
     private final AWSLambdaAsync asyncClient;
     private final ByteBufferFactory byteBufferFactory;
     private final JsonMediaTypeCodec jsonMediaTypeCodec;

File: function-aws/src/main/java/io/micronaut/function/aws/MicronautRequestStreamHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.aws;
 
 import static io.micronaut.function.aws.MicronautRequestHandler.registerContextBeans;
@@ -27,7 +28,7 @@
 import java.io.OutputStream;
 
 /**
- * <p>An implementation of the {@link RequestStreamHandler} for Micronaut</p>
+ * <p>An implementation of the {@link RequestStreamHandler} for Micronaut</p>.
  *
  * @author Graeme Rocher
  * @since 1.0

File: function-aws/src/main/java/io/micronaut/function/aws/bind/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * Support classes for binding to {@link io.micronaut.function.FunctionBean} parameters from AWS Lambda requests
+ * Support classes for binding to {@link io.micronaut.function.FunctionBean} parameters from AWS Lambda requests.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.aws.bind;
\ No newline at end of file
+package io.micronaut.function.aws.bind;

File: function-aws/src/main/java/io/micronaut/function/aws/package-info.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 /**
- * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances for AWS lambda</p>
+ * <p>Classes to support exposing {@link io.micronaut.function.FunctionBean} instances for AWS lambda</p>.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-package io.micronaut.function.aws;
\ No newline at end of file
+package io.micronaut.function.aws;

File: function-client/src/main/java/io/micronaut/function/client/FunctionInvoker.java
Patch:
@@ -19,6 +19,8 @@
 import io.micronaut.core.type.Argument;
 
 /**
+ * @param <I> input type
+ * @param <O> output type
  * @author graemerocher
  * @since 1.0
  */

File: function-client/src/main/java/io/micronaut/function/client/FunctionInvokerChooser.java
Patch:
@@ -30,8 +30,8 @@ public interface FunctionInvokerChooser {
      * Chooses a {@link FunctionInvoker}.
      *
      * @param definition The definition
-     * @param <I>
-     * @param <O>
+     * @param <I> input type
+     * @param <O> output type
      * @return An {@link Optional} instance of {@link FunctionInvoker}
      */
     <I, O> Optional<FunctionInvoker<I, O>> choose(FunctionDefinition definition);

File: function-client/src/main/java/io/micronaut/function/client/FunctionDiscoveryClient.java
Patch:
@@ -18,8 +18,6 @@
 
 import org.reactivestreams.Publisher;
 
-import java.net.URI;
-
 /**
  * An interface for discovery functions, either remote or local.
  *
@@ -32,7 +30,7 @@ public interface FunctionDiscoveryClient {
      * Finds a function for the given function name.
      *
      * @param functionName The function name
-     * @return A {@link Publisher} that emits the {@link URI} of the function or a {@link io.micronaut.function.client.exceptions.FunctionNotFoundException} if no function is found
+     * @return A {@link Publisher} that emits the {@link java.net.URI} of the function or a {@link io.micronaut.function.client.exceptions.FunctionNotFoundException} if no function is found
      */
     Publisher<FunctionDefinition> getFunction(String functionName);
 }

File: function-client/src/main/java/io/micronaut/function/client/DefaultFunctionDiscoveryClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import io.micronaut.core.async.publisher.Publishers;
@@ -32,7 +33,7 @@
 import java.util.Optional;
 
 /**
- * Default implementation of the {@link FunctionDiscoveryClient} interface
+ * Default implementation of the {@link FunctionDiscoveryClient} interface.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/FunctionClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;

File: function-client/src/main/java/io/micronaut/function/client/FunctionDefinition.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import java.net.URI;
 import java.util.Optional;
 
 /**
- * Represents a discovered function definition
+ * Represents a discovered function definition.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/FunctionDefinitionProvider.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import java.util.Collection;
 
 /**
- * Interface for a type that provides function definitions
+ * Interface for a type that provides function definitions.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/FunctionInvoker.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import io.micronaut.core.type.Argument;
@@ -24,7 +25,7 @@
 public interface FunctionInvoker<I, O> {
 
     /**
-     * Invoke the given function definition for the given input and expected response type
+     * Invoke the given function definition for the given input and expected response type.
      *
      * @param definition The definition
      * @param input      The input

File: function-client/src/main/java/io/micronaut/function/client/FunctionInvokerChooser.java
Patch:
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client;
 
 import java.util.Optional;
 
 /**
- * Strategy interface for choosing a {@link FunctionInvoker}
+ * Strategy interface for choosing a {@link FunctionInvoker}.
  *
  * @author graemerocher
  * @since 1.0
  */
 public interface FunctionInvokerChooser {
 
     /**
-     * Chooses a {@link FunctionInvoker}
+     * Chooses a {@link FunctionInvoker}.
      *
      * @param definition The definition
      * @param <I>

File: function-client/src/main/java/io/micronaut/function/client/aop/FunctionClientAdvice.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.aop;
 
 import io.micronaut.aop.MethodInterceptor;
@@ -22,7 +23,6 @@
 import io.micronaut.core.naming.NameUtils;
 import io.micronaut.core.type.Argument;
 import io.micronaut.core.type.ReturnType;
-import io.micronaut.function.client.FunctionClient;
 import io.micronaut.function.client.FunctionDefinition;
 import io.micronaut.function.client.FunctionDiscoveryClient;
 import io.micronaut.function.client.FunctionInvoker;
@@ -40,7 +40,7 @@
 import java.util.Optional;
 
 /**
- * Implements advice for the {@link FunctionClient} annotation
+ * Implements advice for the {@link io.micronaut.function.client.FunctionClient} annotation.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSInvokeRequestDefinition.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.aws;
 
 import com.amazonaws.services.lambda.model.InvokeRequest;
@@ -23,7 +24,7 @@
 import io.micronaut.function.client.FunctionDefinition;
 
 /**
- * Builds an {@link InvokeRequest} for each definition under {@code aws.lambda.functions}
+ * Builds an {@link InvokeRequest} for each definition under {@code aws.lambda.functions}.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaAsyncClientFactory.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.aws;
 
 import com.amazonaws.services.lambda.AWSLambdaAsync;

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.aws;
 
 import com.amazonaws.auth.AWSCredentialsProviderChain;
@@ -37,7 +38,7 @@
 import javax.inject.Inject;
 
 /**
- * Configuration options for AWS Lambda
+ * Configuration options for AWS Lambda.
  *
  * @author graemerocher
  * @since 1.0
@@ -46,7 +47,7 @@
 public class AWSLambdaConfiguration {
 
     /**
-     * Prefix for AWS Lambda settings
+     * Prefix for AWS Lambda settings.
      */
     public static final String PREFIX = AWSConfiguration.PREFIX + ".lambda";
 

File: function-client/src/main/java/io/micronaut/function/client/aws/AWSLambdaFunctionExecutor.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.aws;
 
 import com.amazonaws.services.lambda.AWSLambdaAsync;
@@ -40,7 +41,7 @@
 import java.util.concurrent.Future;
 
 /**
- * A {@link FunctionInvoker} for invoking functions on AWS
+ * A {@link FunctionInvoker} for invoking functions on AWS.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/exceptions/FunctionException.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.exceptions;
 
 /**
- * An exception thrown when an error occurs in the function system
+ * An exception thrown when an error occurs in the function system.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/exceptions/FunctionExecutionException.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.exceptions;
 
 /**

File: function-client/src/main/java/io/micronaut/function/client/exceptions/FunctionNotFoundException.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.exceptions;
 
 /**
- * An exception thrown when no function can be found
+ * An exception thrown when no function can be found.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/http/HttpFunctionExecutor.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.http;
 
 import io.micronaut.core.annotation.AnnotationMetadataResolver;
@@ -24,10 +25,8 @@
 import io.micronaut.function.client.FunctionInvokerChooser;
 import io.micronaut.function.client.exceptions.FunctionExecutionException;
 import io.micronaut.function.client.exceptions.FunctionNotFoundException;
-import io.micronaut.function.executor.FunctionExecutor;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.client.DefaultHttpClient;
-import io.micronaut.http.client.HttpClient;
 import io.micronaut.http.client.HttpClientConfiguration;
 import io.micronaut.http.client.LoadBalancer;
 import io.micronaut.http.client.ssl.NettyClientSslBuilder;
@@ -46,7 +45,7 @@
 import java.util.concurrent.ThreadFactory;
 
 /**
- * A {@link FunctionExecutor} that uses a {@link HttpClient} to execute a remote function definition
+ * A {@link io.micronaut.function.executor.FunctionExecutor} that uses a {@link io.micronaut.http.client.HttpClient} to execute a remote function definition.
  *
  * @author graemerocher
  * @since 1.0

File: function-client/src/main/java/io/micronaut/function/client/local/LocalFunctionDefinitionProvider.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.function.client.local;
 
 import io.micronaut.context.annotation.Requires;

File: validation/src/main/java/io/micronaut/validation/Validated.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.validation;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -26,7 +27,7 @@
 import java.lang.annotation.Target;
 
 /**
- * {@link Around} advice that ensures an objects methods are validated
+ * {@link Around} advice that ensures an objects methods are validated.
  *
  * @author Graeme Rocher
  * @since 1.0

File: validation/src/main/java/io/micronaut/validation/exceptions/ValidationExceptionHandler.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.micronaut.validation.exceptions;
 
 import io.micronaut.context.annotation.Requires;
@@ -28,7 +29,7 @@
 import javax.inject.Singleton;
 
 /**
- * Default Exception handler for GORM validation errors
+ * Default Exception handler for GORM validation errors.
  *
  * @author graemerocher
  * @since 1.0

File: aop/src/main/java/io/micronaut/aop/writer/AopProxyWriter.java
Patch:
@@ -219,6 +219,7 @@ public AopProxyWriter(String packageName,
         startClass(classWriter, proxyInternalName, getTypeReference(targetClassFullName));
     }
 
+    @Override
     protected void startClass(ClassVisitor classWriter, String className, Type superType) {
         String[] interfaces = getImplementedInterfaceInternalNames();
         classWriter.visit(V1_8, ACC_PUBLIC, className, null, superType.getInternalName(), interfaces);

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/AbstractOpenTracingFilter.java
Patch:
@@ -36,6 +36,8 @@ public abstract class AbstractOpenTracingFilter implements HttpFilter  {
     public static final String TAG_PATH = "http.path";
     public static final String TAG_ERROR = "error";
     public static final String TAG_HTTP_STATUS_CODE = "http.status_code";
+    public static final String TAG_HTTP_CLIENT = "http.client";
+    public static final String TAG_HTTP_SERVER = "http.server";
 
     protected final Tracer tracer;
 

File: core/src/main/java/io/micronaut/core/io/scan/ClassPathAnnotationScanner.java
Patch:
@@ -94,6 +94,9 @@ protected List<Class> doScan(String annotation, String pkg) {
             String packagePath = pkg.replace('.', '/').concat("/");
             List<Class> classes = new ArrayList<>();
             Enumeration<URL> resources = classLoader.getResources(packagePath);
+            if(LOG.isDebugEnabled()) {
+                LOG.debug("No resources found under package path: {}", packagePath);
+            }
             while (resources.hasMoreElements()) {
                 URL url = resources.nextElement();
                 String protocol = url.getProtocol();

File: tracing/src/main/java/io/micronaut/tracing/DefaultTracer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micronaut.context.annotation.Primary;
 import io.micronaut.context.annotation.Requires;
 import io.opentracing.Tracer;
+import io.opentracing.noop.NoopTracer;
 import io.opentracing.noop.NoopTracerFactory;
 
 import javax.inject.Singleton;
@@ -35,7 +36,7 @@ public class DefaultTracer {
     @Singleton
     @Primary
     @Requires(missingBeans = Tracer.class)
-    Tracer noopTracer() {
+    NoopTracer noopTracer() {
         return NoopTracerFactory.create();
     }
 }

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingClientFilter.java
Patch:
@@ -27,6 +27,7 @@
 import io.opentracing.Span;
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;
+import io.opentracing.noop.NoopTracer;
 import io.opentracing.propagation.Format;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
@@ -41,6 +42,7 @@
  */
 @Filter(AbstractOpenTracingFilter.CLIENT_PATH)
 @Requires(beans = Tracer.class)
+@Requires(missingBeans = NoopTracer.class)
 @Requires(missingBeans = BraveTracingClientFilter.class)
 public class OpenTracingClientFilter extends AbstractOpenTracingFilter implements HttpClientFilter {
 

File: tracing/src/main/java/io/micronaut/tracing/instrument/http/OpenTracingServerFilter.java
Patch:
@@ -26,6 +26,7 @@
 import io.opentracing.Span;
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;
+import io.opentracing.noop.NoopTracer;
 import io.opentracing.propagation.Format;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
@@ -40,6 +41,7 @@
  */
 @Filter(AbstractOpenTracingFilter.SERVER_PATH)
 @Requires(beans = Tracer.class)
+@Requires(missingBeans = NoopTracer.class)
 @Requires(missingBeans = BraveTracingServerFilter.class)
 public class OpenTracingServerFilter extends AbstractOpenTracingFilter implements HttpServerFilter {
 

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -318,7 +318,7 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
                                 if (v instanceof Map) {
                                     map = (Map) v;
                                 } else {
-                                    map = new LinkedHashMap(3);
+                                    map = new LinkedHashMap(10);
                                     entries.put(resolvedProperty, map);
                                 }
                                 map.put(index, value);

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -74,6 +74,7 @@
 import io.netty.handler.stream.ChunkedWriteHandler;
 import io.netty.handler.timeout.ReadTimeoutException;
 import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.CharsetUtil;
 import io.reactivex.*;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Function;
@@ -1037,7 +1038,7 @@ private HttpPostRequestEncoder buildFormDataRequest(NettyClientHttpRequest clien
     private HttpPostRequestEncoder buildMultipartRequest(NettyClientHttpRequest clientHttpRequest, Object bodyValue) throws HttpPostRequestEncoder.ErrorDataEncoderException {
         HttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);
         io.netty.handler.codec.http.HttpRequest request = clientHttpRequest.getFullRequest(null);
-        HttpPostRequestEncoder postRequestEncoder = new HttpPostRequestEncoder(factory, request, true);
+        HttpPostRequestEncoder postRequestEncoder = new HttpPostRequestEncoder(factory, request, true, CharsetUtil.UTF_8, HttpPostRequestEncoder.EncoderMode.HTML5);
         if (bodyValue instanceof MultipartBody.Builder) {
             bodyValue = ((MultipartBody.Builder) bodyValue).build();
         }

File: http-client/src/main/java/io/micronaut/http/client/multipart/MultipartBody.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.Comparator;
 import java.util.List;
 
 /**
@@ -43,6 +44,7 @@ public final class MultipartBody {
      * @param parts The List of all parts to be sent in the body of Netty multipart request, such a File, String, Bytes etc.
      */
     private MultipartBody(List<Part> parts) {
+        parts.sort(Comparator.comparing(o -> o.name));
         this.parts = parts;
     }
 

File: configurations/rabbitmq/src/main/java/io/micronaut/configuration/rabbitmq/RabbitConnectionFactoryConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: function-client/src/main/java/io/micronaut/function/client/http/HttpFunctionExecutor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micronaut.function.client.http;
 
+import io.micronaut.core.annotation.AnnotationMetadataResolver;
 import io.micronaut.core.async.publisher.Publishers;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.type.Argument;
@@ -59,6 +60,7 @@ public HttpFunctionExecutor(HttpClientConfiguration configuration, NettyClientSs
             configuration,
             nettyClientSslBuilder,
             codecRegistry,
+            AnnotationMetadataResolver.DEFAULT,
             filters
         );
     }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/AbstractTracingFilter.java
Patch:
@@ -22,7 +22,6 @@
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.HttpResponse;
 import io.micronaut.http.filter.HttpFilter;
-import io.micronaut.tracing.brave.TraceRequestAttributes;
 
 import java.util.Optional;
 

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/TraceRequestAttributes.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micronaut.tracing.brave;
+package io.micronaut.tracing.brave.instrument.http;
 
 /**
  * Constants used to store Span objects within instrumented attributes
@@ -25,6 +25,5 @@ public interface TraceRequestAttributes {
 
     String PREFIX = "micronaut.tracing.brave";
     String CURRENT_SPAN = PREFIX + ".currentSpan";
-    String HTTP_METHOD_NAME = PREFIX + ".httpMethod";
     String CURRENT_SCOPE = PREFIX + ".currentScope";
 }

File: tracing/src/main/java/io/micronaut/tracing/brave/instrument/http/TracingClientFilter.java
Patch:
@@ -25,9 +25,7 @@
 import io.micronaut.http.client.exceptions.HttpClientResponseException;
 import io.micronaut.http.filter.ClientFilterChain;
 import io.micronaut.http.filter.HttpClientFilter;
-import io.micronaut.tracing.brave.TraceRequestAttributes;
 import io.reactivex.Flowable;
-import io.reactivex.functions.Function;
 import org.reactivestreams.Publisher;
 
 import java.util.Optional;

File: core/src/main/java/io/micronaut/core/util/ArrayUtils.java
Patch:
@@ -82,7 +82,7 @@ public static boolean isNotEmpty(Object[] array) {
      * @param array The array
      * @return The string representation
      */
-    public static String toString(@Nullable Object... array) {
+    public static String toString(@Nullable Object[] array) {
         String delimiter = ",";
         return toString(delimiter, array);
     }
@@ -94,7 +94,7 @@ public static String toString(@Nullable Object... array) {
      * @param array     The array
      * @return The string representation
      */
-    public static String toString(String delimiter, @Nullable Object... array) {
+    public static String toString(String delimiter, @Nullable Object[] array) {
         if (isEmpty(array)) {
             return "";
         } else {

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoEndpoint.java
Patch:
@@ -18,6 +18,7 @@
 import io.micronaut.management.endpoint.Endpoint;
 import io.micronaut.management.endpoint.EndpointConfiguration;
 import io.micronaut.management.endpoint.Read;
+import io.reactivex.Single;
 import org.reactivestreams.Publisher;
 
 /**
@@ -47,7 +48,7 @@ public InfoEndpoint(InfoAggregator infoAggregator, InfoSource[] infoSources) {
      * @return A {@link Publisher} of the info response
      */
     @Read
-    Publisher getInfo() {
-        return infoAggregator.aggregate(infoSources);
+    Single getInfo() {
+        return Single.fromPublisher(infoAggregator.aggregate(infoSources));
     }
 }

File: cli/src/main/groovy/io/micronaut/cli/exceptions/reporting/DefaultStackTraceFilterer.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2011 SpringSource
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/exceptions/reporting/SourceCodeAware.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2004-2005 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/exceptions/reporting/StackTraceFilterer.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2011 SpringSource
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/interactive/completers/SortedAggregateCompleter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2015 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/interactive/completers/StringsCompleter.java
Patch:
@@ -1,10 +1,11 @@
-/* Copyright 2012 the original author or authors.
+/*
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/AbstractFileResolvingResource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/AntPathMatcher.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/ClassPathResource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/DefaultResourceLoader.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/FileSystemResource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2012 SpringSource
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/FileSystemResourceLoader.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/PathMatchingResourcePatternResolver.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/Resource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/ResourceLoader.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/ResourceLocator.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/ResourceUtils.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/SpringIOUtils.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2008 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/StaticResourceLoader.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2015 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/io/support/UrlResource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/profile/CommandCancellationListener.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/profile/ExecutionContext.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/profile/Profile.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/profile/ProjectContext.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2014 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: cli/src/main/groovy/io/micronaut/cli/util/NameUtils.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2008 the original author or authors.
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -58,8 +58,6 @@ public class MediaType implements CharSequence {
         textTypePatterns.add(Pattern.compile("^.*\\+json$"));
         textTypePatterns.add(Pattern.compile("^.*\\+text$"));
         textTypePatterns.add(Pattern.compile("^.*\\+xml$"));
-
-        mediaTypeFileExtensions = new HashMap<>(4);
     }
 
     /**

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/cache/RedisCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: discovery-client/src/main/java/io/micronaut/discovery/aws/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 /**
  * This package contains client APIs, service discovery and distributed configuration integration between Micronaut and Consul (https://www.consul.io)
  *

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-client/src/main/java/io/micronaut/http/client/NettyClientHttpRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/AbstractNettyHttpRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/NettyHttpParameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/buffer/NettyByteBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/buffer/NettyByteBufferFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookie.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookieFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-netty/src/main/java/io/micronaut/http/netty/cookies/NettyCookies.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/HttpDataToByteArrayConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/HttpDataToStringConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/NettyPartDataToArrayConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/NettyPartDataToObjectConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyCompletedFileUpload.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: http/src/main/java/io/micronaut/http/multipart/CompletedFileUpload.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/refresh/RefreshEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 original authors
+ * Copyright 2017-2018 original authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: management/src/main/java/io/micronaut/management/endpoint/refresh/RefreshEndpoint.java
Patch:
@@ -49,7 +49,7 @@ public RefreshEndpoint(Environment environment, ApplicationEventPublisher eventP
     /**
      * Refresh application state only if environment has changed (unless <code>force</code> is set to true)
      *
-     * @param force optional body property to indicate whether to force all {@link io.micronaut.runtime.context.scope.Refreshable} beans to be refreshed
+     * @param force {@link Nullable} body property to indicate whether to force all {@link io.micronaut.runtime.context.scope.Refreshable} beans to be refreshed
      * @return array of change keys if applicable
      */
     @Write

File: management/src/main/java/io/micronaut/management/endpoint/refresh/RefreshEndpoint.java
Patch:
@@ -49,7 +49,7 @@ public RefreshEndpoint(Environment environment, ApplicationEventPublisher eventP
     /**
      * Refresh application state only if environment has changed (unless <code>force</code> is set to true)
      *
-     * @param force optional body property to indicate whether to force all {@link io.micronaut.runtime.context.scope.Refreshable} beans to be refreshed
+     * @param force {@link Nullable} body property to indicate whether to force all {@link io.micronaut.runtime.context.scope.Refreshable} beans to be refreshed
      * @return array of change keys if applicable
      */
     @Write

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -46,6 +46,7 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
     public AnnotationMetadata build(T element) {
         DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
         AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
+        System.out.println("element = " + element);
         annotationMetadata.dump();
         return metadata;
     }

File: inject/src/main/java/io/micronaut/inject/annotation/AbstractAnnotationMetadataBuilder.java
Patch:
@@ -45,7 +45,9 @@ public abstract class AbstractAnnotationMetadataBuilder<T, A> {
      */
     public AnnotationMetadata build(T element) {
         DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
-        return buildInternal(null, element, annotationMetadata, true);
+        AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
+        annotationMetadata.dump();
+        return metadata;
     }
 
     /**

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -307,8 +307,6 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
 
                         Map entries = resolveEntriesForKey(resolvedProperty, true);
                         if(entries != null) {
-                            System.out.println("resolvedProperty = " + resolvedProperty);
-                            System.out.println("value = " + value);
                             entries.put(resolvedProperty, value);
                         }
                     }

File: inject/src/main/java/io/micronaut/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -307,6 +307,8 @@ protected void processPropertySource(PropertySource properties, PropertySource.P
 
                         Map entries = resolveEntriesForKey(resolvedProperty, true);
                         if(entries != null) {
+                            System.out.println("resolvedProperty = " + resolvedProperty);
+                            System.out.println("value = " + value);
                             entries.put(resolvedProperty, value);
                         }
                     }

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -60,7 +60,6 @@ public class MediaType implements CharSequence {
         textTypePatterns.add(Pattern.compile("^.*\\+xml$"));
 
         mediaTypeFileExtensions = new HashMap<>(4);
-        mediaTypeFileExtensions.put("txt", MediaType.TEXT_PLAIN);
     }
 
     public static final MediaType[] EMPTY_ARRAY = new MediaType[0];

File: management/src/main/java/io/micronaut/management/endpoint/info/impl/RxInfoAggregator.java
Patch:
@@ -1,6 +1,8 @@
 package io.micronaut.management.endpoint.info.impl;
 
 import io.micronaut.context.annotation.Requires;
+import io.micronaut.context.env.EmptyPropertySource;
+import io.micronaut.context.env.MapPropertySource;
 import io.micronaut.context.env.PropertySource;
 import io.micronaut.context.env.PropertySourcePropertyResolver;
 import io.micronaut.management.endpoint.info.InfoAggregator;
@@ -40,7 +42,7 @@ protected Flowable<Map.Entry<Integer, PropertySource>> aggregateResults(InfoSour
         for (int i = 0; i < sources.length; i++) {
             int index = i;
             Single<Map.Entry<Integer, PropertySource>> single = Flowable.fromPublisher(sources[i].getSource())
-                    .firstOrError()
+                    .first(new EmptyPropertySource())
                     .map((source) -> new AbstractMap.SimpleEntry<>(index, source));
             publishers.add(single.toFlowable());
         }

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoAggregator.java
Patch:
@@ -1,7 +1,6 @@
-package io.micronaut.management.info.aggregator;
+package io.micronaut.management.endpoint.info;
 
 import io.micronaut.management.endpoint.Endpoint;
-import io.micronaut.management.info.source.InfoSource;
 import org.reactivestreams.Publisher;
 
 /**

File: management/src/main/java/io/micronaut/management/endpoint/info/InfoEndpoint.java
Patch:
@@ -3,8 +3,6 @@
 import io.micronaut.management.endpoint.Endpoint;
 import io.micronaut.management.endpoint.EndpointConfiguration;
 import io.micronaut.management.endpoint.Read;
-import io.micronaut.management.info.aggregator.InfoAggregator;
-import io.micronaut.management.info.source.InfoSource;
 import org.reactivestreams.Publisher;
 
 /**

File: management/src/main/java/io/micronaut/management/endpoint/info/source/BuildInfoSource.java
Patch:
@@ -1,8 +1,9 @@
-package io.micronaut.management.info.source;
+package io.micronaut.management.endpoint.info.source;
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.PropertySource;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
+import io.micronaut.management.endpoint.info.InfoSource;
 import org.reactivestreams.Publisher;
 
 import javax.inject.Singleton;

File: management/src/main/java/io/micronaut/management/endpoint/info/source/GitInfoSource.java
Patch:
@@ -1,9 +1,10 @@
-package io.micronaut.management.info.source;
+package io.micronaut.management.endpoint.info.source;
 
 import io.micronaut.context.annotation.Requires;
 import io.micronaut.context.env.PropertySource;
 import io.micronaut.core.io.ResourceResolver;
 import io.micronaut.management.endpoint.info.InfoEndpoint;
+import io.micronaut.management.endpoint.info.InfoSource;
 import org.reactivestreams.Publisher;
 
 import javax.inject.Singleton;

File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java
Patch:
@@ -958,7 +958,7 @@ private HttpPostRequestEncoder buildMultipartRequest(io.netty.handler.codec.http
         HttpPostRequestEncoder postRequestEncoder = new HttpPostRequestEncoder(factory, request, true);
 
         if (bodyValue instanceof File) {
-            bodyValue = MultipartBody.builder(request, factory).addPart("file", (File) bodyValue).build();
+            bodyValue = MultipartBody.builder(request, factory).addPart("data", (File) bodyValue).build();
         }
         if (bodyValue instanceof MultipartBody){
             postRequestEncoder.setBodyHttpDatas(((MultipartBody) bodyValue).getDatas());

File: http/src/main/java/io/micronaut/http/MediaType.java
Patch:
@@ -58,6 +58,9 @@ public class MediaType implements CharSequence {
         textTypePatterns.add(Pattern.compile("^.*\\+json$"));
         textTypePatterns.add(Pattern.compile("^.*\\+text$"));
         textTypePatterns.add(Pattern.compile("^.*\\+xml$"));
+
+        mediaTypeFileExtensions = new HashMap<>(4);
+        mediaTypeFileExtensions.put("txt", MediaType.TEXT_PLAIN);
     }
 
     public static final MediaType[] EMPTY_ARRAY = new MediaType[0];

File: http/src/main/java/io/micronaut/http/multipart/FileUpload.java
Patch:
@@ -32,7 +32,7 @@ public interface FileUpload {
      * Gets the content of this part as an <tt>InputStream</tt>
      *
      * @return The content of this part as an <tt>InputStream</tt>
-     * @throws IOException If an error occurs in retrieving the contet
+     * @throws IOException If an error occurs in retrieving the content
      * as an <tt>InputStream</tt>
      */
     InputStream getInputStream() throws IOException;

File: test-suite/src/test/groovy/io/micronaut/docs/server/upload/UploadController.java
Patch:
@@ -25,6 +25,7 @@
 import io.reactivex.Single;
 import org.reactivestreams.Publisher;
 
+import java.io.File;
 import java.util.Optional;
 // end::imports[]
 
@@ -62,7 +63,7 @@ public Single<HttpResponse<String>> upload(StreamingFileUpload file, Optional<St
     // end::upload[]
 
     // tag::completedUpload[]
-    @Post(value = "/", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
+    @Post(value = "/completed", consumes = MediaType.MULTIPART_FORM_DATA) // <1>
     public HttpResponse<String> uploadCompleted(CompletedFileUpload file, Optional<String> anotherAttribute) { // <2>
 
         try {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/CompletedFileUpload.java
Patch:
@@ -70,7 +70,7 @@ public String getFilename() {
 
     @Override
     public long getSize() {
-        return fileUpload.getMaxSize();
+        return fileUpload.definedLength();
     }
 
     @Override

File: discovery-client/src/main/java/io/micronaut/discovery/consul/config/ConsulConfigurationClient.java
Patch:
@@ -51,7 +51,7 @@
 @Singleton
 @RequiresConsul
 @Requires(beans = ConsulClient.class)
-@Requires(property = ConsulConfiguration.PREFIX + ".config.enabled", value = "true", defaultValue = "false")
+@Requires(property = ConfigurationClient.ENABLED, value = "true", defaultValue = "false")
 public class ConsulConfigurationClient implements ConfigurationClient {
 
     private final ConsulClient consulClient;

File: inject/src/main/java/io/micronaut/context/env/BootstrapPropertySourceLocator.java
Patch:
@@ -28,6 +28,7 @@
  * @since 1.0
  */
 public interface BootstrapPropertySourceLocator {
+
     /**
      * An empty version that does nothing
      */

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java
Patch:
@@ -173,7 +173,9 @@ protected CompositeByteBuf buildBody() {
         CompositeByteBuf byteBufs = channelHandlerContext.alloc().compositeBuffer(size);
         for (ByteBufHolder holder : receivedContent) {
             ByteBuf content = holder.content();
-            byteBufs.addComponent(true, content);
+            if (content != null) {
+                byteBufs.addComponent(true, content);
+            }
         }
         return byteBufs;
     }

File: http-client/src/main/java/io/micronaut/http/client/RxStreamingHttpClient.java
Patch:
@@ -51,7 +51,7 @@ default <I, O> Flowable<O> jsonStream(HttpRequest<I> request, Class<O> type) {
     }
 
     /**
-     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of an application. Within particle use
+     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
      * {@link javax.inject.Inject} to inject a client instead
      *
      * @param url The base URL

File: core/src/main/java/io/micronaut/core/version/SemanticVersion.java
Patch:
@@ -93,9 +93,7 @@ public static boolean isAtLeast(String version, String requiredVersion) {
         if (version != null) {
             SemanticVersion thisVersion = new SemanticVersion(version);
             SemanticVersion otherVersion = new SemanticVersion(requiredVersion);
-            if (thisVersion.compareTo(otherVersion) != -1) {
-                return true;
-            }
+            return thisVersion.compareTo(otherVersion) != -1;
         }
         return false;
     }

File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java
Patch:
@@ -2,10 +2,8 @@
 
 import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.reflect.exception.InvocationException;
-import io.micronaut.core.annotation.Internal;
 import io.micronaut.core.convert.ConversionService;
 import io.micronaut.core.naming.NameUtils;
-import io.micronaut.core.reflect.exception.InvocationException;
 import io.micronaut.core.util.StringUtils;
 
 import java.lang.reflect.Constructor;

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/ChunkedFileUploadToByteArrayConverter.java
Patch:
@@ -35,7 +35,7 @@
  * @since 1.0
  */
 @Singleton
-public class FileUploadToByteArrayConverter implements TypeConverter<ChunkedFileUpload, byte[]> {
+public class ChunkedFileUploadToByteArrayConverter implements TypeConverter<ChunkedFileUpload, byte[]> {
     @Override
     public Optional<byte[]> convert(ChunkedFileUpload upload, Class<byte[]> targetType, ConversionContext context) {
         try {

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -255,7 +255,7 @@ private void bindServerToHost(ServerBootstrap serverBootstrap, Optional<String>
 
     @Override
     public EmbeddedServer stop() {
-        if (isRunning()) {
+        if (isRunning() && workerGroup != null) {
             try {
                 workerGroup.shutdownGracefully()
                            .addListener(this::logShutdownErrorIfNecessary);

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/session/RedisHttpSessionConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class RedisHttpSessionConfiguration extends HttpSessionConfiguration impl
 
     private WriteMode writeMode = WriteMode.BATCH;
     private boolean enableKeyspaceEvents = true;
-    private String namespace = "particle:session:";
+    private String namespace = "micronaut:session:";
     private String activeSessionsKey = namespace + "active-sessions";
     private String sessionCreatedTopic = namespace + "event:session-created";
     private Class<ObjectSerializer> valueSerializer;

File: configurations/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/session/RedisSessionStore.java
Patch:
@@ -70,10 +70,10 @@
  *
  * <h2>Storage Details</h2>
  *
- * <p>Sessions are stored within Redis hashes by default prefixed with {@code particle:session:sessions:[SESSION_ID]}. The expiry of the hash is set to 5 minutes after the actual expiry and
+ * <p>Sessions are stored within Redis hashes by default prefixed with {@code micronaut:session:sessions:[SESSION_ID]}. The expiry of the hash is set to 5 minutes after the actual expiry and
  * expired sessions are simply not returned by {@link #findSession(String)}</p>
  *
- * <p>More exact session expiry entries are stored with keys {@code particle:session:expiry:[SESSION_ID]} and current active sessions are tracked within sorted set at the key {@code particle:session:active-sessions}.
+ * <p>More exact session expiry entries are stored with keys {@code micronaut:session:expiry:[SESSION_ID]} and current active sessions are tracked within sorted set at the key {@code micronaut:session:active-sessions}.
  * The entries within the set are sorted by expiry time and a scheduled job that runs every minute periodically touches the keys within the set that match the last minute thus ensuring Redis propagates expiry events in a timely manner.</p>
  *
  * <h2>Redis Pub/Sub</h2>

File: examples/particle-di-android/app/src/androidTest/java/demo/micronautdiandroid/DependencyInjectionEspressoTest.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/BaseApplication.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 import android.app.Activity;
 import android.app.Application;

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/Book.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 public class Book {
     String title;

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/BooksFetcher.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 interface BooksFetcher {
     void fetchBooks(OnBooksFetched onBooksFetched);

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/MainActivity.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 import android.app.Activity;
 import android.os.Bundle;

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/OnBooksFetched.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 import java.util.List;
 

File: examples/particle-di-android/app/src/main/java/demo/micronautdiandroid/SQLiteRepository.java
Patch:
@@ -1,4 +1,4 @@
-package demo.particlediandroid;
+package demo.micronautdiandroid;
 
 import javax.inject.Singleton;
 import java.util.ArrayList;

File: http-client/src/main/java/io/micronaut/http/client/HttpClient.java
Patch:
@@ -191,7 +191,7 @@ default HttpClient refresh() {
     }
 
     /**
-     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of a Micronaut application. Within particle use
+     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of a Micronaut application. Within Micronaut use
      * {@link javax.inject.Inject} to inject a client instead
      *
      * @param url The base URL

File: http-client/src/main/java/io/micronaut/http/client/RxHttpClient.java
Patch:
@@ -77,7 +77,7 @@ default Flowable<String> retrieve(String uri) {
     }
 
     /**
-     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of an application. Within particle use
+     * Create a new {@link HttpClient}. Note that this method should only be used outside of the context of an application. Within Micronaut use
      * {@link javax.inject.Inject} to inject a client instead
      *
      * @param url The base URL

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/decoders/HttpRequestDecoder.java
Patch:
@@ -41,7 +41,7 @@
 @ChannelHandler.Sharable
 public class HttpRequestDecoder extends MessageToMessageDecoder<HttpRequest> implements Ordered {
     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);
-    public static final String ID = "particle-http-decoder";
+    public static final String ID = "micronaut-http-decoder";
 
     private final EmbeddedServer embeddedServer;
     private final ConversionService<?> conversionService;

File: inject/src/main/java/io/micronaut/context/annotation/Requires.java
Patch:
@@ -56,7 +56,7 @@
      *
      * @return The SDK required
      */
-    Sdk sdk() default Sdk.PARTICLE;
+    Sdk sdk() default Sdk.MICRONAUT;
     /**
      * Expresses the configurations that should be present for the bean or configuration to load
      *
@@ -139,7 +139,7 @@
     enum Sdk {
         JAVA,
         GROOVY,
-        PARTICLE
+        MICRONAUT
     }
 
 }

File: runtime/src/main/java/io/micronaut/jackson/ObjectMapperFactory.java
Patch:
@@ -31,7 +31,7 @@
 public class ObjectMapperFactory {
 
 
-    public static final String PARTICLE_MODULE = "particle";
+    public static final String MICRONAUT_MODULE = "micronaut";
 
     @Inject
     protected Module[] jacksonModules = new Module[0];
@@ -65,7 +65,7 @@ public ObjectMapper objectMapper(Optional<JacksonConfiguration> jacksonConfigura
 
         objectMapper.findAndRegisterModules();
         objectMapper.registerModules(jacksonModules);
-        SimpleModule module = new SimpleModule(PARTICLE_MODULE);
+        SimpleModule module = new SimpleModule(MICRONAUT_MODULE);
         for (JsonSerializer serializer : serializers) {
             Class<? extends JsonSerializer> type = serializer.getClass();
             Type annotation = type.getAnnotation(Type.class);

File: runtime/src/main/java/io/micronaut/jackson/env/EnvJsonPropertySourceLoader.java
Patch:
@@ -27,15 +27,15 @@
 import java.util.Optional;
 
 /**
- * <p>Reads properties from JSON stored in the environment variables <tt>SPRING_APPLICATION_JSON</tt> or <tt>PARTICLE_APPLICATION_JSON</tt></p>
+ * <p>Reads properties from JSON stored in the environment variables <tt>SPRING_APPLICATION_JSON</tt> or <tt>MICRONAUT_APPLICATION_JSON</tt></p>
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 public class EnvJsonPropertySourceLoader extends JsonPropertySourceLoader {
     public static final int POSITION = SystemPropertiesPropertySource.POSITION + 50;
     private static final String SPRING_APPLICATION_JSON = "SPRING_APPLICATION_JSON";
-    private static final String PARTICLE_APPLICATION_JSON = "PARTICLE_APPLICATION_JSON";
+    private static final String MICRONAUT_APPLICATION_JSON = "MICRONAUT_APPLICATION_JSON";
 
     @Override
     public int getOrder() {
@@ -58,7 +58,7 @@ protected Optional<InputStream> readInput(Environment environment, String fileNa
     protected String getEnvValue() {
         String v = System.getenv(SPRING_APPLICATION_JSON);
         if(v == null) {
-            v = System.getenv(PARTICLE_APPLICATION_JSON);
+            v = System.getenv(MICRONAUT_APPLICATION_JSON);
         }
         return v;
     }

File: inject/src/main/java/io/micronaut/context/annotation/Parameter.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micronaut.context.annotation;
 
+import io.micronaut.core.bind.annotation.Bindable;
+
 import javax.inject.Qualifier;
 import java.lang.annotation.*;
 
@@ -30,6 +32,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Qualifier
+@Bindable
 public @interface Parameter {
     /**
      * Specifies the parameter name. Useful as metadata at times for reflection on classes already compiled without -parameters argument to javac

File: router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java
Patch:
@@ -85,6 +85,7 @@ public UriRouteMatch<T> fulfill(Map<String, Object> argumentValues) {
     @Override
     protected RouteMatch<T> newFulfilled(Map<String, Object> newVariables, List<Argument> requiredArguments) {
         return new DefaultUriRouteMatch<T>(matchInfo, uriRoute, conversionService) {
+
             @Override
             public List<Argument> getRequiredArguments() {
                 return Collections.unmodifiableList(requiredArguments);

File: runtime/src/main/java/io/micronaut/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -94,8 +94,7 @@ public <T> T decode(Argument<T> type, InputStream inputStream) throws CodecExcep
 
     public <T> T decode(Argument<T> type, JsonNode node) throws CodecException {
         try {
-            T result = objectMapper.treeToValue(node, type.getType());
-            return result;
+            return objectMapper.treeToValue(node, type.getType());
         } catch (IOException e) {
             throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: " + e.getMessage());
         }

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpServer.java
Patch:
@@ -183,7 +183,7 @@ protected void initChannel(Channel ch) throws Exception {
                                     (int)serverConfiguration.getWriteIdleTime().getSeconds(),
                                     (int)serverConfiguration.getIdleTime().getSeconds()));
                             pipeline.addLast(HTTP_CODEC, new HttpServerCodec());
-//                            pipeline.addLast(HTTP_COMPRESSOR, new HttpContentCompressor());
+                            pipeline.addLast(HTTP_COMPRESSOR, new SmartHttpContentCompressor());
                             pipeline.addLast(HTTP_STREAMS_CODEC, new HttpStreamsServerHandler());
                             pipeline.addLast(HttpRequestDecoder.ID, new HttpRequestDecoder(NettyHttpServer.this, environment, serverConfiguration));
                             pipeline.addLast(MICRONAUT_HANDLER, new RoutingInBoundHandler(

File: http-server-netty/src/main/java/io/micronaut/http/server/netty/types/NettyCustomizableResponseType.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micronaut.http.server.netty.types;
 
-import io.micronaut.http.HttpRequest;
-import io.micronaut.http.MutableHttpResponse;
 import io.netty.channel.ChannelHandlerContext;
 import io.micronaut.http.HttpRequest;
 import io.micronaut.http.MutableHttpResponse;

File: http/src/main/java/io/micronaut/http/uri/UriMatchTemplate.java
Patch:
@@ -131,7 +131,7 @@ public static UriMatchTemplate of(String uri) {
 
     @Override
     protected UriTemplate newUriTemplate(CharSequence uriTemplate, List<PathSegment> newSegments) {
-        Pattern newPattern = Pattern.compile(isRoot ? pattern.toString() : this.matchPattern.toString() + pattern.toString());
+        Pattern newPattern = Pattern.compile(this.matchPattern.toString() + pattern.toString());
         List<String> newList = new ArrayList<>();
         newList.addAll(Arrays.asList(variables));
         newList.addAll(variableList);

File: core/src/main/java/org/particleframework/core/annotation/AnnotationUtil.java
Patch:
@@ -19,7 +19,6 @@ public class AnnotationUtil {
 
     public static final List<String> INTERNAL_ANNOTATION_NAMES = Arrays.asList(
             Retention.class.getName(),
-            Deprecated.class.getName(),
             Inherited.class.getName(),
             SuppressWarnings.class.getName(),
             Override.class.getName(),

File: aop/src/main/java/org/particleframework/aop/internal/InterceptorChain.java
Patch:
@@ -199,7 +199,7 @@ else if(annotationType == Introduction.class && aClass.getAnnotation(Around.clas
         Interceptor[] interceptorArray = Arrays.stream(interceptors)
                 .filter(i -> applicableClasses.stream().anyMatch((t)->t.isInstance(i)))
                 .toArray(Interceptor[]::new);
-        OrderUtil.sort(interceptors);
+        OrderUtil.sort(interceptorArray);
         return interceptorArray;
     }
 }

File: core/src/main/java/org/particleframework/core/reflect/ReflectionUtils.java
Patch:
@@ -94,13 +94,13 @@ public static Class getWrapperType(Class primitiveType) {
     }
 
     /**
-     * Obtain the wrapper type for the given primitive type
+     * Obtain the primitive type for the given wrapper type
      *
      * @param wrapperType The primitive type
      * @return The wrapper type
      */
     public static Class getPrimitiveType(Class wrapperType) {
-        Class<?> wrapper = PRIMITIVES_TO_WRAPPERS.get(wrapperType);
+        Class<?> wrapper = WRAPPER_TO_PRIMITIVE.get(wrapperType);
         if (wrapper != null) {
             return wrapper;
         } else {

File: inject/src/main/java/org/particleframework/inject/annotation/AnnotationMetadataWriter.java
Patch:
@@ -230,7 +230,7 @@ private static void pushCreateAnnotationData(GeneratorAdapter methodVisitor, Map
                     );
                 }
             }
-            // invoke the AbstractBeanDefinition.createMap method
+            // invoke the StringUtils.mapOf method
             methodVisitor.invokeStatic(Type.getType(StringUtils.class), METHOD_MAP_OF);
         } else {
             methodVisitor.visitInsn(ACONST_NULL);

File: http/src/main/java/org/particleframework/http/annotation/Controller.java
Patch:
@@ -17,9 +17,11 @@
 
 import org.particleframework.context.annotation.AliasFor;
 import org.particleframework.context.annotation.Bean;
+import org.particleframework.context.annotation.DefaultScope;
 import org.particleframework.context.annotation.Executable;
 import org.particleframework.http.MediaType;
 
+import javax.inject.Singleton;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -41,6 +43,7 @@
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @Bean
 @Executable
+@DefaultScope(Singleton.class)
 public @interface Controller {
     /**
      * <p>This attribute returns the base URI of the controller. If not specified the URI will be

File: http-client/src/main/java/org/particleframework/http/client/AbstractReactiveClientResultTransformer.java
Patch:
@@ -41,7 +41,7 @@ protected <T> T fallbackOr(Supplier<Optional<MethodExecutionHandle<Object>>> fal
             NoAvailableServiceException nase = (NoAvailableServiceException) exception;
             if(LOG.isErrorEnabled()) {
                 LOG.debug(nase.getMessage(), nase);
-                LOG.error("HTTP @Client [{}] invocation [{}] attempting to resolve fallback for unavailable service [{}]", invocation.getDeclaringType().getName(), invocation, nase.getServiceID());
+                LOG.error("HTTP @Client [{}] invocation not available [{}]. Attempting to resolve fallback for unavailable service [{}]", invocation.getDeclaringType().getName(), invocation, nase.getServiceID());
             }
 
         }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -94,7 +94,9 @@ public void handle(Object obj, HttpRequest<?> request, NettyHttpResponse<?> resp
 
     @Override
     public boolean supports(Class<?> type) {
-        return File.class.isAssignableFrom(type) || SystemFileCustomizableResponseType.class.isAssignableFrom(type);
+        return File.class.isAssignableFrom(type) ||
+                SystemFileCustomizableResponseType.class.isAssignableFrom(type) ||
+                NettyFileCustomizableResponseType.class.isAssignableFrom(type);
     }
 
     protected MediaType getMediaType(String filename) {

File: core/src/main/java/org/particleframework/core/async/publisher/Publishers.java
Patch:
@@ -47,7 +47,6 @@ public class Publishers {
         Publishers.singleTypes.add(CompletableFuturePublisher.class);
         Publishers.singleTypes.add(JustPublisher.class);
         List<String> typeNames = Arrays.asList(
-                "io.reactivex.Maybe",
                 "io.reactivex.Observable",
                 "reactor.core.publisher.Flux"
         );

File: router/src/main/java/org/particleframework/web/router/RouteBuilder.java
Patch:
@@ -1018,7 +1018,7 @@ default String resolveUri(String property) {
          * @return The URI to use
          */
         default String resolveUri(Class type, PropertyConvention id) {
-            return resolveUri(type) + "{/" + id.lowerCaseName() + "}";
+            return resolveUri(type) + "/{" + id.lowerCaseName() + "}";
         }
     }
 

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/NettyCustomizableResponseTypeHandler.java
Patch:
@@ -16,8 +16,8 @@
 package org.particleframework.http.server.netty.types;
 
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.http.HttpRequest;
 import org.particleframework.core.order.Ordered;
+import org.particleframework.http.HttpRequest;
 import org.particleframework.http.server.netty.NettyHttpResponse;
 
 /**
@@ -29,7 +29,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface NettySpecialTypeHandler<T> extends Ordered {
+public interface NettyCustomizableResponseTypeHandler<T> extends Ordered {
 
     /**
      * Responsible for fully handling the response, including any closing of the channel.
@@ -39,7 +39,7 @@ public interface NettySpecialTypeHandler<T> extends Ordered {
      * @param response The mutable Particle response
      * @param context The channel context
      */
-    void handle(T object, HttpRequest request, NettyHttpResponse response, ChannelHandlerContext context);
+    void handle(T object, HttpRequest<?> request, NettyHttpResponse<?> response, ChannelHandlerContext context);
 
     /**
      * @param type The type to check

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/NettyFileCustomizableResponseType.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.particleframework.http.server.netty.types;
 
-import org.particleframework.http.server.types.files.FileSpecialType;
+import org.particleframework.http.server.types.files.FileCustomizableResponseType;
 
 /**
  * A special type for files specific to Netty
  *
  * @author James Kleeh
  * @since 1.0
  */
-public interface NettyFileSpecialType extends FileSpecialType, NettySpecialType {
+public interface NettyFileCustomizableResponseType extends FileCustomizableResponseType, NettyCustomizableResponseType {
 }

File: http-server/src/main/java/org/particleframework/http/server/types/CustomizableResponseType.java
Patch:
@@ -24,15 +24,15 @@
  * @author James Kleeh
  * @since 1.0
  */
-public interface SpecialType {
+public interface CustomizableResponseType {
 
     /**
      * Modify the response before it is written
      * to the client.
      *
      * @param response The response to modify
      */
-    default void process(MutableHttpResponse response) {
+    default void process(MutableHttpResponse<?> response) {
         //no-op
     }
 }

File: http-server/src/main/java/org/particleframework/http/server/types/CustomizableResponseTypeException.java
Patch:
@@ -21,13 +21,13 @@
  * @author James Kleeh
  * @since 1.0
  */
-public class SpecialTypeHandlerException extends RuntimeException {
+public class CustomizableResponseTypeException extends RuntimeException {
 
-    public SpecialTypeHandlerException(String msg) {
+    public CustomizableResponseTypeException(String msg) {
         super(msg);
     }
 
-    public SpecialTypeHandlerException(String msg, Throwable cause) {
+    public CustomizableResponseTypeException(String msg, Throwable cause) {
         super(msg, cause);
     }
 }

File: http-server/src/main/java/org/particleframework/http/server/types/files/AttachedFile.java
Patch:
@@ -28,7 +28,7 @@
  * @author James Kleeh
  * @since 1.0
  */
-public class AttachedFile extends SystemFileSpecialType {
+public class AttachedFile extends SystemFileCustomizableResponseType {
 
     private static final String headerValue = "attachment; filename=\"%s\"";
 

File: http-server/src/main/java/org/particleframework/http/server/types/files/SystemFileCustomizableResponseType.java
Patch:
@@ -23,11 +23,11 @@
  * @author James Kleeh
  * @since 1.0
  */
-public class SystemFileSpecialType implements FileSpecialType {
+public class SystemFileCustomizableResponseType implements FileCustomizableResponseType {
 
     protected final File file;
 
-    public SystemFileSpecialType(File file) {
+    public SystemFileCustomizableResponseType(File file) {
         this.file = file;
     }
 

File: http/src/main/java/org/particleframework/http/MutableHttpMessage.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.http;
 
+import java.time.ZonedDateTime;
 import java.util.Map;
 import java.util.function.Consumer;
 

File: http/src/main/java/org/particleframework/http/MutableHttpRequest.java
Patch:
@@ -32,6 +32,9 @@ public interface MutableHttpRequest<B> extends HttpRequest<B>, MutableHttpMessag
     @Override
     MutableHttpRequest<B> body(B body);
 
+    @Override
+    MutableHttpHeaders getHeaders();
+
     /**
      * Sets the acceptable {@link MediaType} instances via the {@link HttpHeaders#ACCEPT} header
      * @param mediaTypes The media types

File: http/src/main/java/org/particleframework/http/MutableHttpResponse.java
Patch:
@@ -18,6 +18,7 @@
 import org.particleframework.http.cookie.Cookie;
 
 import java.nio.charset.Charset;
+import java.time.ZonedDateTime;
 import java.util.Collections;
 import java.util.Locale;
 import java.util.Map;
@@ -147,4 +148,6 @@ default MutableHttpResponse<B> status(int status, CharSequence message) {
     default MutableHttpResponse<B> status(HttpStatus status) {
         return status(status, null);
     }
+
+
 }

File: router/src/main/java/org/particleframework/web/router/resource/StaticResourceConfiguration.java
Patch:
@@ -33,9 +33,11 @@
  * @author James Kleeh
  * @since 1.0
  */
-@ConfigurationProperties("router.static.resources")
+@ConfigurationProperties(StaticResourceConfiguration.PREFIX)
 public class StaticResourceConfiguration implements Toggleable {
 
+    public static final String PREFIX = "router.static.resources";
+
     protected boolean enabled = false;
     protected List<String> paths = Collections.emptyList();
     protected String mapping = "/**";

File: function/src/main/java/org/particleframework/function/DefaultLocalFunctionRegistry.java
Patch:
@@ -35,20 +35,20 @@
 import java.util.stream.Stream;
 
 /**
- * <p>Default implementation of the {@link FunctionRegistry} interface</p>
+ * <p>Default implementation of the {@link LocalFunctionRegistry} interface</p>
  *
  * @author Graeme Rocher
  * @since 1.0
  */
 @Singleton
-public class DefaultFunctionRegistry implements ExecutableMethodProcessor<FunctionBean>, FunctionRegistry, MediaTypeCodecRegistry {
+public class DefaultLocalFunctionRegistry implements ExecutableMethodProcessor<FunctionBean>, LocalFunctionRegistry, MediaTypeCodecRegistry {
     private final Map<String, ExecutableMethod<?,?>> consumers = new LinkedHashMap<>(1);
     private final Map<String, ExecutableMethod<?,?>> functions = new LinkedHashMap<>(1);
     private final Map<String, ExecutableMethod<?,?>> biFunctions= new LinkedHashMap<>(1);
     private final Map<String, ExecutableMethod<?,?>> suppliers = new LinkedHashMap<>(1);
     private final MediaTypeCodecRegistry decoderRegistry;
 
-    public DefaultFunctionRegistry(MediaTypeCodec...decoders) {
+    public DefaultLocalFunctionRegistry(MediaTypeCodec...decoders) {
         this.decoderRegistry = MediaTypeCodecRegistry.of(decoders);
     }
 

File: function/src/main/java/org/particleframework/function/LocalFunctionRegistry.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.function.Supplier;
 
 /**
- * A registry of defined {@link FunctionBean} instances
+ * A registry of defined {@link FunctionBean} instances containing within the current running application.
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface FunctionRegistry {
+public interface LocalFunctionRegistry {
 
     /**
      * The name of the default function name

File: function/src/main/java/org/particleframework/function/executor/AbstractFunctionExecutor.java
Patch:
@@ -15,8 +15,10 @@
  */
 package org.particleframework.function.executor;
 
+import org.particleframework.function.LocalFunctionRegistry;
+
 /**
- * A class that executes the configured {@link org.particleframework.function.FunctionRegistry#FUNCTION_NAME} for the given inputs and outputs
+ * A class that executes the configured {@link LocalFunctionRegistry#FUNCTION_NAME} for the given inputs and outputs
  *
  * @author Graeme Rocher
  * @since 1.0

File: function/src/main/java/org/particleframework/function/executor/FunctionInitializer.java
Patch:
@@ -19,7 +19,7 @@
 import org.particleframework.core.annotation.Internal;
 import org.particleframework.core.cli.CommandLine;
 import org.particleframework.core.reflect.ClassUtils;
-import org.particleframework.function.FunctionRegistry;
+import org.particleframework.function.LocalFunctionRegistry;
 import org.particleframework.http.MediaType;
 import org.particleframework.http.codec.MediaTypeCodecRegistry;
 
@@ -93,7 +93,7 @@ protected void run(String[] args, Function<ParseContext, ?> supplier) throws IOE
             Object result = supplier.apply(context);
             if (result != null) {
 
-                FunctionRegistry bean = applicationContext.getBean(FunctionRegistry.class);
+                LocalFunctionRegistry bean = applicationContext.getBean(LocalFunctionRegistry.class);
                 StreamFunctionExecutor.encode(applicationContext.getEnvironment(), bean, result.getClass(), result, System.out);
                 functionExitHandler.exitWithSuccess();
             }

File: http-client/src/main/java/org/particleframework/http/client/DefaultHttpClient.java
Patch:
@@ -106,7 +106,7 @@
  * @since 1.0
  */
 @Prototype
-public class DefaultHttpClient implements RxHttpClient, RxStreamingHttpClient, Closeable, AutoCloseable {
+public class    DefaultHttpClient implements RxHttpClient, RxStreamingHttpClient, Closeable, AutoCloseable {
 
     private static final Logger LOG = LoggerFactory.getLogger(DefaultHttpClient.class);
     protected static final String HANDLER_AGGREGATOR = "http-aggregator";

File: http-client/src/main/java/org/particleframework/http/client/loadbalance/AbstractRoundRobinLoadBalancer.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.discovery.ServiceInstance;
 import org.particleframework.discovery.exceptions.DiscoveryException;
+import org.particleframework.discovery.exceptions.NoAvailableServiceException;
 import org.particleframework.health.HealthStatus;
 import org.particleframework.http.client.LoadBalancer;
 
@@ -38,7 +39,7 @@ protected ServiceInstance getNextAvailable(List<ServiceInstance> serviceInstance
                                                                            .collect(Collectors.toList());
         int len = availableServices.size();
         if(len == 0) {
-            throw new DiscoveryException("No available services for ID: " + getServiceID());
+            throw new NoAvailableServiceException(getServiceID());
         }
         int i = index.getAndAccumulate(len, (cur, n) -> cur >= n - 1 ? 0 : cur + 1);
         return availableServices.get(i);

File: examples/petclinic/offers/src/main/java/example/offers/Application.java
Patch:
@@ -63,7 +63,7 @@ public void onApplicationEvent(ServerStartupEvent event) {
                                     pet.getSlug(),
                                     new BigDecimal("49.99"),
                                     Duration.of(2, ChronoUnit.HOURS),
-                                    "Cut dog!");
+                                    "Cute dog!");
                             savedOffer.subscribe((offer) -> {
                             }, throwable -> {
                                 if (LOG.isErrorEnabled()) {
@@ -85,7 +85,7 @@ public void onApplicationEvent(ServerStartupEvent event) {
                                     pet.getSlug(),
                                     new BigDecimal("29.99"),
                                     Duration.of(2, ChronoUnit.HOURS),
-                                    "Cut Cat");
+                                    "Special Cat! Offer ends soon!");
                             savedOffer.subscribe((offer) -> {
                             }, throwable -> {
                                 if (LOG.isErrorEnabled()) {

File: configurations/neo4j-bolt/src/main/java/org/particleframework/configuration/neo4j/bolt/embedded/EmbeddedNeo4jServer.java
Patch:
@@ -61,8 +61,8 @@ public Neo4jBoltConfiguration onCreated(BeanCreatedEvent<Neo4jBoltConfiguration>
         if(uris.size() == 1) {
             URI uri = uris.get(0);
             int port = uri.getPort();
-            if(port > -1 && SocketUtils.isTcpPortAvailable(port)) {
-                Neo4jBoltConfiguration.Neo4jEmbeddedSettings embeddedSettings = configuration.getEmbeddedSettings();
+            Neo4jBoltConfiguration.Neo4jEmbeddedSettings embeddedSettings = configuration.getEmbeddedSettings();
+            if(port > -1 && SocketUtils.isTcpPortAvailable(port) && embeddedSettings.isEnabled()) {
                 // run embedded server, since it isn't up
                 final String location = embeddedSettings.getDirectory().orElse(null);
                 final Map<String,Object> options = embeddedSettings.getOptions();

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -895,7 +895,9 @@ private void writeHttpContentChunkByChunk(
         }
 
         DelegateStreamedHttpResponse streamedResponse = new DelegateStreamedHttpResponse(nativeResponse, httpContentPublisher);
-        streamedResponse.headers().add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+        HttpHeaders headers = streamedResponse.headers();
+        headers.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+        headers.add(HttpHeaderNames.CONTENT_TYPE, mediaType);
         writeNettyResponse(
                 context,
                 request,

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/DefaultRedisClusterClientFactory.java
Patch:
@@ -33,7 +33,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Requires(property = "particle.redis.uris")
+@Requires(property = RedisSetting.REDIS_URIS)
 @Singleton
 @Factory
 public class DefaultRedisClusterClientFactory {

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/DefaultRedisUriFactory.java
Patch:
@@ -27,13 +27,13 @@
  * @since 1.0
  */
 @Factory
-@Requires(property = "particle.redis.uri")
+@Requires(property = RedisSetting.REDIS_URI)
 public class DefaultRedisUriFactory {
 
     @Bean
     @Primary
     @Singleton
-    RedisURI redisURI(@Value("${particle.redis.uri}") String uri) {
+    RedisURI redisURI(@Value("${redis.uri}") String uri) {
         return RedisURI.create(uri);
     }
 }

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/EmbeddedRedisServer.java
Patch:
@@ -31,7 +31,7 @@
  * @since 1.0
  */
 @Requires(classes = RedisServer.class)
-@Requires(property = "particle.redis.type", value = "embedded")
+@Requires(property = RedisSetting.REDIS_TYPE, value = "embedded")
 @Factory
 public class EmbeddedRedisServer {
 
@@ -55,7 +55,7 @@ public RedisURI redisURI(RedisServer redisServer) {
     }
 
 
-    @ConfigurationProperties("particle.redis.embedded")
+    @ConfigurationProperties(RedisSetting.REDIS_EMBEDDED)
     @Requires(classes = RedisServerBuilder.class )
     public static class Configuration {
         @ConfigurationBuilder(

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/NamedRedisServersConfiguration.java
Patch:
@@ -24,7 +24,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@EachProperty(value = "particle.redis.servers")
+@EachProperty(value = RedisSetting.REDIS_SERVERS)
 public class NamedRedisServersConfiguration extends NamedRedisURI {
 
     public NamedRedisServersConfiguration(@Argument String name) {

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/cache/RedisCacheConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.cache.CacheConfiguration;
 import org.particleframework.cache.serialize.DefaultStringKeySerializer;
+import org.particleframework.configuration.lettuce.RedisSetting;
 import org.particleframework.context.annotation.Argument;
 import org.particleframework.context.annotation.EachProperty;
 import org.particleframework.core.serialize.ObjectSerializer;
@@ -30,11 +31,9 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@EachProperty(RedisCacheConfiguration.PREFIX)
+@EachProperty(RedisSetting.REDIS_CACHES)
 public class RedisCacheConfiguration extends CacheConfiguration {
 
-    public static final String PREFIX = "particle.redis.caches";
-
     protected String server;
 
     protected Class<ObjectSerializer> keySerializer;

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/package-info.java
Patch:
@@ -22,7 +22,7 @@
  */
 @Configuration
 @Requires(classes = RedisURI.class)
-@Requires(property = "particle.redis")
+@Requires(property = RedisSetting.PREFIX)
 package org.particleframework.configuration.lettuce;
 
 import io.lettuce.core.RedisURI;

File: examples/petclinic/pets/src/test/java/example/pets/PetControllerTest.java
Patch:
@@ -102,6 +102,6 @@ public void testFindByVendor() {
 
         assertNotNull(dino);
 
-        assertEquals(1, client.byVendor("Fred").blockingGet().size());
+        assertEquals(2, client.byVendor("Fred").blockingGet().size());
     }
 }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -93,7 +93,7 @@ public void handle(Object obj, HttpRequest request, NettyHttpResponse response,
                             .addListener(new DefaultCloseHandler(context, request, nettyResponse));
                     return;
                 }
-            } catch (ParseException e) {
+            } catch (ParseException | NumberFormatException e) {
                 //no-op
             }
         }

File: validation/src/main/java/org/particleframework/validation/ValidatingInterceptor.java
Patch:
@@ -59,7 +59,7 @@ public ValidatingInterceptor(Optional<ValidatorFactory> validatorFactory) {
                                     .map(factory -> factory.getValidator().forExecutables())
                                     .orElse(null);
 
-        if(LOG.isWarnEnabled()) {
+        if(executableValidator == null && LOG.isWarnEnabled()) {
             LOG.warn("Beans requiring validation present, but no implementation of javax.validation configuration. Add an implementation (such as hibernate-validator) to prevent this error.");
         }
     }

File: core/src/main/java/org/particleframework/core/reflect/ClassUtils.java
Patch:
@@ -27,6 +27,7 @@ public class ClassUtils {
         COMMON_CLASS_MAP.put(double.class.getName(), double.class);
         COMMON_CLASS_MAP.put(float.class.getName(), float.class);
         COMMON_CLASS_MAP.put(char.class.getName(), char.class);
+        COMMON_CLASS_MAP.put(short.class.getName(), short.class);
 
         COMMON_CLASS_MAP.put(boolean[].class.getName(), boolean[].class);
         COMMON_CLASS_MAP.put(byte[].class.getName(), byte[].class);
@@ -35,11 +36,13 @@ public class ClassUtils {
         COMMON_CLASS_MAP.put(double[].class.getName(), double[].class);
         COMMON_CLASS_MAP.put(float[].class.getName(), float[].class);
         COMMON_CLASS_MAP.put(char[].class.getName(), char[].class);
+        COMMON_CLASS_MAP.put(short[].class.getName(), short[].class);
 
         COMMON_CLASS_MAP.put(Boolean.class.getName(), Boolean.class);
         COMMON_CLASS_MAP.put(Byte.class.getName(), Byte.class);
         COMMON_CLASS_MAP.put(Integer.class.getName(), Integer.class);
         COMMON_CLASS_MAP.put(Long.class.getName(), Long.class);
+        COMMON_CLASS_MAP.put(Short.class.getName(), Short.class);
         COMMON_CLASS_MAP.put(Double.class.getName(),Double.class);
         COMMON_CLASS_MAP.put(Float.class.getName(), Float.class);
         COMMON_CLASS_MAP.put(Character.class.getName(), Character.class);

File: examples/petclinic/pets/src/test/java/example/pets/PetControllerTest.java
Patch:
@@ -57,19 +57,19 @@ public static void cleanup() {
     public void testListPets() {
         PetControllerTestClient client = embeddedServer.getApplicationContext().getBean(PetControllerTestClient.class);
 
-        List<Pet> pets = client
+        List<PetEntity> pets = client
                             .list()
                             .blockingGet();
         assertEquals(pets.size(), 0);
 
         try {
-            client.save(new Pet("", "")).blockingGet();
+            client.save(new PetEntity("", "")).blockingGet();
             fail("Should have thrown a constraint violation");
         } catch (HttpClientResponseException e) {
             assertEquals(e.getStatus(), HttpStatus.BAD_REQUEST);
         }
 
-        Pet dino = client.save(new Pet("Dino", "Fred")).blockingGet();
+        Pet dino = client.save(new PetEntity("Dino", "Fred")).blockingGet();
 
         assertNotNull(dino);
 

File: examples/petclinic/pets/src/test/java/example/pets/PetControllerTestClient.java
Patch:
@@ -15,7 +15,6 @@
  */
 package example.pets;
 
-import example.api.v1.Pet;
 import example.api.v1.PetOperations;
 import org.particleframework.http.client.Client;
 
@@ -24,5 +23,5 @@
  * @since 1.0
  */
 @Client("/${pets.api.version}/pets")
-interface PetControllerTestClient extends PetOperations<Pet> {
+interface PetControllerTestClient extends PetOperations<PetEntity> {
 }

File: inject-java/src/main/java/org/particleframework/annotation/processing/PublicMethodVisitor.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import java.util.function.Supplier;
 
 /**
  * An adapter that implements all methods of the {@link TypeVisitor} interface. Subclasses can selectively override
@@ -67,7 +66,7 @@ public R visitDeclared(DeclaredType type, P p) {
                         // if the method has already been processed then it is overridden so ignore
                         if(!processed.contains(qualifiedName)) {
                             processed.add(qualifiedName);
-                            accept(theMethod, p);
+                            accept(type, theMethod, p);
                         }
                     }
 
@@ -98,7 +97,7 @@ protected boolean isAcceptable( ExecutableElement executableElement) {
         return modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.FINAL);
     }
 
-    protected abstract void accept(ExecutableElement method, P p);
+    protected abstract void accept(DeclaredType type, ExecutableElement method, P p);
 
     @Override
     public R visitError(ErrorType t, P p) {

File: inject/src/main/java/org/particleframework/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -71,6 +71,9 @@ else if(type instanceof String) {
             String className = type.toString();
 
             String internalName = getInternalName(className);
+            if(className.endsWith("[]")) {
+                internalName = "[L" + internalName + ";";
+            }
             return Type.getObjectType(internalName);
         }
         else {

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -280,6 +280,7 @@ void visitMethodInjectionPoint(Object declaringType,
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                Object returnType,
+                               Object genericReturnType,
                                Map<String, Object> returnTypeGenericTypes,
                                String methodName,
                                Map<String, Object> argumentTypes,

File: configurations/mongo-reactive/src/main/java/org/particleframework/configuration/mongo/reactive/test/MongoProcessFactory.java
Patch:
@@ -27,6 +27,7 @@
 import de.flapdoodle.embed.process.runtime.Network;
 import org.particleframework.configuration.mongo.reactive.MongoConfiguration;
 import org.particleframework.context.annotation.Requires;
+import org.particleframework.context.env.Environment;
 import org.particleframework.context.event.BeanCreatedEvent;
 import org.particleframework.context.event.BeanCreatedEventListener;
 import org.particleframework.context.exceptions.ConfigurationException;
@@ -46,6 +47,7 @@
  */
 @Requires(classes = MongodProcess.class)
 @Requires(beans = MongoConfiguration.class)
+@Requires(env = Environment.TEST)
 @Singleton
 public class MongoProcessFactory implements BeanCreatedEventListener<MongoConfiguration>, Closeable {
 

File: discovery-client/src/main/java/org/particleframework/discovery/consul/package-info.java
Patch:
@@ -23,5 +23,4 @@
 @Configuration
 package org.particleframework.discovery.consul;
 
-import org.particleframework.context.annotation.Configuration;
-import org.particleframework.discovery.consul.condition.RequiresConsul;
\ No newline at end of file
+import org.particleframework.context.annotation.Configuration;
\ No newline at end of file

File: examples/petclinic/api/src/main/java/example/api/v1/PetOperations.java
Patch:
@@ -29,11 +29,11 @@
  * @since 1.0
  */
 @Validated
-public interface PetOperations {
+public interface PetOperations<T extends Pet> {
 
     @Get("/")
-    Single<List<Pet>> list();
+    Single<List<T>> list();
 
     @Post("/")
-    Single<Pet> save(@Valid @Body Pet pet);
+    Single<T> save(@Valid @Body T pet);
 }

File: examples/petclinic/pets/src/test/java/example/pets/PetControllerTestClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package example.pets;
 
+import example.api.v1.Pet;
 import example.api.v1.PetOperations;
 import org.particleframework.http.client.Client;
 
@@ -23,5 +24,5 @@
  * @since 1.0
  */
 @Client("/${pets.api.version}/pets")
-interface PetControllerTestClient extends PetOperations {
+interface PetControllerTestClient extends PetOperations<Pet> {
 }

File: inject-groovy/src/main/groovy/org/particleframework/ast/groovy/utils/InMemoryByteCodeGroovyClassLoader.java
Patch:
@@ -61,7 +61,6 @@ public void addClass(String name, byte[] code) {
 
     @Override
     public Class<?> loadClass(String name) throws ClassNotFoundException {
-        System.out.println("generatedClasses = " + generatedClasses.keySet());
         if(loadedClasses.containsKey(name)) {
             return loadedClasses.get(name);
         }

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -1110,6 +1110,8 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
 
     }
 
+
+
     private String getPropertyMetadataTypeReference(TypeMirror valueType) {
         return modelUtils.isOptional(valueType) ? genericUtils.getFirstTypeArgument(valueType).map(TypeMirror::toString).orElse(valueType.toString()) : valueType.toString();
     }

File: inject-java/src/main/java/org/particleframework/annotation/processing/AnnotationUtils.java
Patch:
@@ -36,7 +36,7 @@
  * @author Graeme Rocher
  * @author Dean Wette
  */
-class AnnotationUtils {
+public class AnnotationUtils {
 
     private static final Cache<Element, AnnotationMetadata> annotationMetadataCache = Caffeine.newBuilder().maximumSize(100).build();
 
@@ -134,4 +134,6 @@ public boolean isAnnotated(ExecutableElement method) {
         }
         return false;
     }
+
+
 }

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -252,7 +252,7 @@ protected void accept(ExecutableElement method, AopProxyWriter aopProxyWriter) {
                         Map<String, Object> methodQualifier = params.getQualifierTypes();
                         Map<String, Map<String, Object>> methodGenericTypes = params.getGenericTypes();
                         AnnotationMetadata annotationMetadata;
-                        if( annotationUtils.isAnnotated(method) ) {
+                        if( annotationUtils.isAnnotated(method) || JavaAnnotationMetadataBuilder.hasAnnotation(method, Override.class) ) {
                             annotationMetadata = annotationUtils.getAnnotationMetadata(classElement, method);
                         }
                         else {

File: inject/src/main/java/org/particleframework/inject/annotation/JavaAnnotationMetadataBuilder.java
Patch:
@@ -191,8 +191,8 @@ private List<ExecutableElement> findOverriddenMethods(ExecutableElement executab
         return overridden;
     }
 
-    private boolean hasAnnotation(ExecutableElement overriddenMethod, Class<? extends Annotation> ann) {
-        List<? extends AnnotationMirror> annotationMirrors = overriddenMethod.getAnnotationMirrors();
+    public static boolean hasAnnotation(ExecutableElement method, Class<? extends Annotation> ann) {
+        List<? extends AnnotationMirror> annotationMirrors = method.getAnnotationMirrors();
         for (AnnotationMirror annotationMirror : annotationMirrors) {
             if(annotationMirror.getAnnotationType().toString().equals(ann.getName())) {
                 return true;

File: inject/src/main/java/org/particleframework/inject/writer/AbstractAnnotationMetadataWriter.java
Patch:
@@ -50,6 +50,9 @@ protected AnnotationMetadataWriter getAnnotationMetadataWriter() {
     protected void writeGetAnnotationMetadataMethod(ClassWriter classWriter) {
         GeneratorAdapter annotationMetadataMethod = startPublicMethod(classWriter, "getAnnotationMetadata", AnnotationMetadata.class.getName());
         annotationMetadataMethod.loadThis();
+
+        // in order to save memory of a method doesn't have any annotations of its own but merely references class metadata
+        // then we setup an annotation metadata reference from the method to the class (or inherited method) metadata
         if(annotationMetadata instanceof AnnotationMetadataReference) {
             AnnotationMetadataReference reference = (AnnotationMetadataReference) annotationMetadata;
             String className = reference.getClassName();

File: examples/petclinic/pets/src/main/java/example/pets/PetController.java
Patch:
@@ -43,9 +43,8 @@ public class PetController implements PetOperations {
     private MongoClient mongoClient;
 
     public PetController(
-            @Value("pets.database.name") String databaseName,
-            @Value("pets.some.value") String collectionName,
-//            @Value("pets.collection.name:pets") String collectionName, TODO: doesn't work
+            @Value("${pets.database.name}") String databaseName,
+            @Value("${pets.collection.name:pets}") String collectionName,
             MongoClient mongoClient) {
         this.collectionName = collectionName;
         this.databaseName = databaseName;

File: examples/petclinic/pets/src/main/java/example/pets/PetController.java
Patch:
@@ -26,6 +26,7 @@
 import org.bson.Document;
 import org.particleframework.context.annotation.Value;
 import org.particleframework.http.annotation.Controller;
+import org.particleframework.validation.Validated;
 import org.reactivestreams.Publisher;
 
 import javax.inject.Singleton;
@@ -38,6 +39,7 @@
  */
 @Controller("/${pets.api.version}/pets")
 @Singleton
+@Validated
 public class PetController implements PetOperations {
 
     private final String databaseName;

File: discovery-client/src/main/java/org/particleframework/discovery/consul/ConsulConfiguration.java
Patch:
@@ -41,9 +41,11 @@
  * @since 1.0
  */
 @RequiresConsul
-@ConfigurationProperties(ConsulClient.SERVICE_ID)
+@ConfigurationProperties(ConsulConfiguration.PREFIX)
 public class ConsulConfiguration extends DiscoveryClientConfiguration {
 
+    public static final String PREFIX = "consul.client";
+
     private String aslToken;
 
     private ConsulRegistrationConfiguration registration = new ConsulRegistrationConfiguration();

File: discovery-client/src/main/java/org/particleframework/discovery/consul/condition/RequiresConsul.java
Patch:
@@ -16,6 +16,7 @@
 package org.particleframework.discovery.consul.condition;
 
 import org.particleframework.context.annotation.Requires;
+import org.particleframework.discovery.consul.ConsulConfiguration;
 
 import java.lang.annotation.*;
 
@@ -28,6 +29,6 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PACKAGE, ElementType.TYPE})
-@Requires(property = "consul.host")
+@Requires(property = ConsulConfiguration.PREFIX)
 public @interface RequiresConsul {
 }

File: discovery-client/src/main/java/org/particleframework/discovery/eureka/condition/RequiresEureka.java
Patch:
@@ -29,7 +29,6 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PACKAGE, ElementType.TYPE})
-@Requires(property = EurekaConfiguration.HOST)
-@Requires(property = EurekaConfiguration.PORT)
+@Requires(property = EurekaConfiguration.PREFIX)
 public @interface RequiresEureka {
 }

File: configurations/jdbc-hikari/src/main/java/org/particleframework/configuration/jdbc/hikari/DatasourceFactory.java
Patch:
@@ -19,7 +19,6 @@
 import org.particleframework.context.annotation.Bean;
 import org.particleframework.context.annotation.EachBean;
 import org.particleframework.context.annotation.Factory;
-import org.particleframework.context.annotation.EachProperty;
 
 /**
  * Creates a Hikari data source for each configuration bean

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/NettyFileSpecialType.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.particleframework.http.server.netty.types;
 
-import org.particleframework.http.types.files.FileSpecialType;
+import org.particleframework.http.server.types.files.FileSpecialType;
 
 /**
  * A special type for files specific to Netty

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/NettySpecialType.java
Patch:
@@ -18,7 +18,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.HttpRequest;
 import org.particleframework.http.server.netty.NettyHttpResponse;
-import org.particleframework.http.types.SpecialType;
+import org.particleframework.http.server.types.SpecialType;
 
 /**
  * A special type that allows writing data in Netty

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/files/FileTypeHandler.java
Patch:
@@ -25,8 +25,8 @@
 import org.particleframework.http.server.netty.async.DefaultCloseHandler;
 import org.particleframework.http.server.netty.types.NettyFileSpecialType;
 import org.particleframework.http.server.netty.types.NettySpecialTypeHandler;
-import org.particleframework.http.types.SpecialTypeHandlerException;
-import org.particleframework.http.types.files.SystemFileSpecialType;
+import org.particleframework.http.server.types.SpecialTypeHandlerException;
+import org.particleframework.http.server.types.files.SystemFileSpecialType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/files/NettyStreamedFileSpecialType.java
Patch:
@@ -25,7 +25,7 @@
 import org.particleframework.http.server.netty.NettyHttpServer;
 import org.particleframework.http.server.netty.async.DefaultCloseHandler;
 import org.particleframework.http.server.netty.types.NettyFileSpecialType;
-import org.particleframework.http.types.files.StreamedFileSpecialType;
+import org.particleframework.http.server.types.files.StreamedFileSpecialType;
 
 import java.io.InputStream;
 import java.net.URL;

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/types/files/NettySystemFileSpecialType.java
Patch:
@@ -27,8 +27,8 @@
 import org.particleframework.http.server.netty.NettyHttpServer;
 import org.particleframework.http.server.netty.async.DefaultCloseHandler;
 import org.particleframework.http.server.netty.types.NettyFileSpecialType;
-import org.particleframework.http.types.SpecialTypeHandlerException;
-import org.particleframework.http.types.files.SystemFileSpecialType;
+import org.particleframework.http.server.types.SpecialTypeHandlerException;
+import org.particleframework.http.server.types.files.SystemFileSpecialType;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: http-server/src/main/java/org/particleframework/http/server/types/SpecialType.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types;
+package org.particleframework.http.server.types;
 
 import org.particleframework.http.MutableHttpResponse;
 

File: http-server/src/main/java/org/particleframework/http/server/types/SpecialTypeHandlerException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types;
+package org.particleframework.http.server.types;
 
 /**
  * Used when a special type handler encounters an error

File: http-server/src/main/java/org/particleframework/http/server/types/files/AttachedFile.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types.files;
+package org.particleframework.http.server.types.files;
 
 import org.particleframework.http.HttpHeaders;
 import org.particleframework.http.MutableHttpResponse;

File: http-server/src/main/java/org/particleframework/http/server/types/files/FileSpecialType.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types.files;
+package org.particleframework.http.server.types.files;
 
-import org.particleframework.http.types.SpecialType;
+import org.particleframework.http.server.types.SpecialType;
 
 /**
  * A special type for file handling.

File: http-server/src/main/java/org/particleframework/http/server/types/files/StreamedFileSpecialType.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types.files;
+package org.particleframework.http.server.types.files;
 
-import org.particleframework.http.types.SpecialTypeHandlerException;
+import org.particleframework.http.server.types.SpecialTypeHandlerException;
 
 import java.io.File;
 import java.io.IOException;

File: http-server/src/main/java/org/particleframework/http/server/types/files/SystemFileSpecialType.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.http.types.files;
+package org.particleframework.http.server.types.files;
 
 import java.io.File;
 

File: inject/src/main/java/org/particleframework/context/DefaultApplicationContext.java
Patch:
@@ -122,6 +122,9 @@ protected String getPropertySourceRootName() {
                         return StringUtils.isNotEmpty(bootstrapName) ? bootstrapName  : BOOTSTRAP_NAME;
                     }
                 };
+                for (PropertySource source: propertySources.values()) {
+                    bootstrapEnvironment.addPropertySource(source);
+                }
                 bootstrapEnvironment.start();
 
                 this.bootstrapContext = new DefaultApplicationContext(resourceLoader, activeNamesArray) {

File: inject/src/main/java/org/particleframework/context/env/PropertySourcePropertyResolver.java
Patch:
@@ -129,7 +129,7 @@ public boolean containsProperties(@Nullable String name) {
                     return true;
                 }
                 else {
-                    String finalName = name;
+                    String finalName = name + ".";
                     return entries.keySet().stream().anyMatch(key -> key.startsWith(finalName));
                 }
             }

File: router/src/main/java/org/particleframework/web/router/RouteMatch.java
Patch:
@@ -92,7 +92,7 @@ default Collection<Argument> getRequiredArguments() {
         return Collections.emptyList();
     }
 
-    ReturnType<R> getReturnType();
+    ReturnType<? extends R> getReturnType();
 
     /**
      * Execute the route with the given values. Note if there are required arguments returned from {@link #getRequiredArguments()} this method will throw an {@link IllegalArgumentException}

File: runtime/src/main/java/org/particleframework/runtime/http/codec/TextPlainCodec.java
Patch:
@@ -95,9 +95,9 @@ public <T> byte[] encode(T object) throws CodecException {
 
     @Override
     public <T> ByteBuffer encode(T object, ByteBufferFactory allocator) throws CodecException {
-        String string = object.toString();
-        int len = string.length();
+        byte[] bytes = encode(object);
+        int len = bytes.length;
         return allocator.buffer(len, len)
-                        .write(string.getBytes(defaultCharset));
+                        .write(bytes);
     }
 }

File: runtime/src/main/java/org/particleframework/discovery/DiscoveryClient.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 /**
- * Main abstraction used for service discovery
+ * Main client abstraction used for service discovery
  *
  * @author Graeme Rocher
  * @since 1.0

File: http-client/src/main/java/org/particleframework/http/client/interceptor/HttpClientIntroductionAdvice.java
Patch:
@@ -270,7 +270,7 @@ else if(void.class == javaReturnType) {
                 }
             }
         }
-        throw new UnsupportedOperationException("Cannot implement method that is not annotated with an HTTP method type");
+        throw new UnsupportedOperationException("Cannot implement method ["+context+"] that is not annotated with an HTTP method type");
     }
 
     private ClientRegistration getClient(Client clientAnn) {

File: runtime-groovy/src/main/groovy/org/particleframework/context/env/groovy/GroovyPropertySourceLoader.java
Patch:
@@ -38,7 +38,7 @@ public Optional<PropertySource> load(String resourceName, Environment environmen
             fileName += "-" + environmentName;
         }
         String qualifiedName = fileName;
-        fileName += "." + ext;
+        fileName += ext;
 
         loadProperties(environment, fileName, finalMap);
         int order = this.getOrder();

File: discovery-client/src/main/java/org/particleframework/discovery/client/consul/v1/AbstractConsulClient.java
Patch:
@@ -16,17 +16,15 @@
 package org.particleframework.discovery.client.consul.v1;
 
 import org.particleframework.core.async.publisher.Publishers;
-import org.particleframework.discovery.DiscoveryClient;
+import org.particleframework.discovery.client.DiscoveryClient;
 import org.particleframework.discovery.ServiceInstance;
 import org.particleframework.http.client.Client;
 import org.reactivestreams.Publisher;
 
 import java.net.InetAddress;
 import java.net.URI;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.function.Function;
 
 /**
  * Abstract implementation of {@link ConsulClient} that also implements {@link DiscoveryClient}

File: discovery-client/src/main/java/org/particleframework/discovery/client/consul/v1/ConsulClient.java
Patch:
@@ -15,12 +15,11 @@
  */
 package org.particleframework.discovery.client.consul.v1;
 
-import org.particleframework.discovery.DiscoveryClient;
+import org.particleframework.discovery.client.DiscoveryClient;
 import org.particleframework.http.HttpStatus;
 import org.particleframework.http.annotation.Body;
 import org.particleframework.http.annotation.Get;
 import org.particleframework.http.annotation.Put;
-import org.particleframework.http.client.Client;
 import org.reactivestreams.Publisher;
 
 import javax.validation.constraints.NotNull;

File: runtime/src/main/java/org/particleframework/discovery/client/DiscoveryClient.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.particleframework.discovery;
+package org.particleframework.discovery.client;
 
+import org.particleframework.discovery.ServiceInstance;
 import org.reactivestreams.Publisher;
 
 import java.io.Closeable;

File: aop/src/main/java/org/particleframework/aop/writer/AopProxyWriter.java
Patch:
@@ -203,7 +203,7 @@ public AopProxyWriter(String packageName,
                 NameUtils.getPackageName(proxyFullName),
                 proxyShortName,
                 isSingleton, annotationMetadata);
-        startClass(classWriter, proxyFullName, getTypeReference(targetClassFullName));
+        startClass(classWriter, proxyInternalName, getTypeReference(targetClassFullName));
     }
 
     @Override

File: discovery-client/src/main/java/org/particleframework/discovery/client/consul/ConsulServerSelectorProvider.java
Patch:
@@ -31,7 +31,7 @@
  * @since 1.0
  */
 @Singleton
-public class ConsulServerSelectorProvider implements ServerSelectorProvider{
+public class ConsulServerSelectorProvider implements ServerSelectorProvider {
 
     private final ConsulConfiguration configuration;
 

File: discovery-client/src/main/java/org/particleframework/discovery/client/consul/v1/ConsulClient.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.discovery.client.consul.v1;
 
+import org.particleframework.discovery.DiscoveryClient;
 import org.particleframework.http.HttpStatus;
 import org.particleframework.http.annotation.Body;
 import org.particleframework.http.annotation.Get;
@@ -32,8 +33,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Client(id = ConsulClient.SERVICE_ID, path = "/v1")
-public interface ConsulClient {
+public interface ConsulClient extends DiscoveryClient {
     /**
      * The default ID of the consul service
      */

File: inject-java/src/test/java/org/particleframework/docs/env/EachBeanTest.java
Patch:
@@ -23,7 +23,6 @@
 
 import static org.junit.Assert.assertNotNull;
 import static org.particleframework.docs.env.DataSourceFactory.*;
-import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Collection;
 

File: core/src/main/java/org/particleframework/core/async/publisher/Publishers.java
Patch:
@@ -253,6 +253,7 @@ public void subscribe(Subscriber<? super T> subscriber) {
                 @Override
                 public void request(long n) {
                     if(done) return;
+                    done = true;
                     subscriber.onNext(value);
                     subscriber.onComplete();
                 }

File: discovery-client/src/main/java/org/particleframework/discovery/consul/v1/HealthEntry.java
Patch:
@@ -27,6 +27,9 @@ public class HealthEntry {
     private NodeEntry node;
     private ServiceEntry service;
 
+    /**
+     * @return The node for this health entry
+     */
     public NodeEntry getNode() {
         return node;
     }

File: core/src/main/java/org/particleframework/core/util/PathMatcher.java
Patch:
@@ -30,7 +30,7 @@ public interface PathMatcher {
     /**
      * The default Ant style patch matcher
      */
-    PathMatcher ANT = new AntPathMatcher();
+    AntPathMatcher ANT = new AntPathMatcher();
 
     /**
      * Returns <code>true</code> if the given <code>source</code> matches the specified <code>pattern</code>,

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -186,7 +186,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest<?> request) t
             } else {
 
                 Optional<File> optionalFile = Optional.empty();
-                Optional<URL> url = staticResourceResolver.resolve(request.getUri().toString());
+                Optional<URL> url = staticResourceResolver.resolve(requestPath);
                 if (url.isPresent()) {
                     File file = new File(url.get().getPath());
                     if (file.exists() && !file.isDirectory() && file.canRead()) {

File: router/src/main/java/org/particleframework/web/router/resource/StaticResourceConfiguration.java
Patch:
@@ -38,6 +38,7 @@ public class StaticResourceConfiguration implements Toggleable {
 
     protected boolean enabled = false;
     protected List<String> paths = Collections.emptyList();
+    protected String mapping = "/**";
 
     @Override
     public boolean isEnabled() {

File: runtime/src/main/java/org/particleframework/jackson/JacksonConfiguration.java
Patch:
@@ -29,12 +29,12 @@ public class JacksonConfiguration {
     protected Map<MapperFeature, Boolean> mapper = Collections.emptyMap();
     protected Map<JsonParser.Feature, Boolean> parser = Collections.emptyMap();
     protected Map<JsonGenerator.Feature, Boolean> generator = Collections.emptyMap();
-    protected Set<JsonInclude.Include> serializationInclusion = CollectionUtils.setOf(JsonInclude.Include.NON_ABSENT, JsonInclude.Include.NON_EMPTY);
+    protected JsonInclude.Include serializationInclusion = JsonInclude.Include.NON_ABSENT;
 
     /**
      * @return The default serialization inclusion settings
      */
-    public Set<JsonInclude.Include> getSerializationInclusion() {
+    public JsonInclude.Include getSerializationInclusion() {
         return serializationInclusion;
     }
 

File: runtime/src/main/java/org/particleframework/jackson/ObjectMapperFactory.java
Patch:
@@ -100,8 +100,8 @@ public ObjectMapper objectMapper(Optional<JacksonConfiguration> jacksonConfigura
 
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         jacksonConfiguration.ifPresent((configuration)->{
-            Set<JsonInclude.Include> serializationInclusion = configuration.getSerializationInclusion();
-            for (JsonInclude.Include include : serializationInclusion) {
+            JsonInclude.Include include = configuration.getSerializationInclusion();
+            if (include != null) {
                 objectMapper.setSerializationInclusion(include);
             }
             String dateFormat = configuration.getDateFormat();

File: runtime/src/main/java/org/particleframework/jackson/codec/JsonMediaTypeCodec.java
Patch:
@@ -20,7 +20,6 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;
-import com.fasterxml.jackson.databind.util.JSONPObject;
 import org.particleframework.core.io.buffer.ByteBuffer;
 import org.particleframework.core.io.buffer.ByteBufferFactory;
 import org.particleframework.core.type.Argument;
@@ -33,10 +32,8 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Stream;
 
 /**
  * A {@link MediaTypeCodec} for JSON and Jackson

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -504,7 +504,8 @@ private RouteMatch<Object> prepareRouteForExecution(RouteMatch<Object> route, Ne
                         Object result = routeMatch.execute();
 
                         if (result == null) {
-                            if( routeMatch.getReturnType().getType() != void.class) {
+                            Class<?> javaReturnType = routeMatch.getReturnType().getType();
+                            if( javaReturnType != void.class) {
                                 // handle re-mapping of errors
                                 result = router.route(HttpStatus.NOT_FOUND)
                                         .map((match) -> requestArgumentSatisfier.fulfillArgumentRequirements(match, request, true))

File: management/src/main/java/org/particleframework/management/endpoint/health/indicator/diskspace/DiskSpaceIndicatorConfiguration.java
Patch:
@@ -32,7 +32,6 @@ public class DiskSpaceIndicatorConfiguration implements Toggleable {
 
     private boolean enabled = true;
     private File path = new File(".");
-    @ReadableBytes
     private long threshold = 1024 * 1024 * 10; // 10MB
 
     @Override
@@ -56,7 +55,7 @@ void setPath(File path) {
         this.path = path;
     }
 
-    void setThreshold(long threshold) {
+    void setThreshold(@ReadableBytes long threshold) {
         this.threshold = threshold;
     }
 }

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -799,12 +799,13 @@ public Object visitConfigurationProperty(VariableElement field) {
 
                 if(annotationUtils.hasStereotype(field, ConfigurationBuilder.class)) {
                     String fieldName = field.getSimpleName().toString();
-                    writer.visitConfigBuilderFieldStart(fieldType, fieldName);
+                    ConfigBuilder configBuilder = new ConfigBuilder(fieldType).forField(fieldName);
+                    writer.visitConfigBuilderStart(configBuilder);
 
                     try {
                         visitConfigurationBuilder(field, fieldTypeMirror, writer);
                     } finally {
-                        writer.visitConfigBuilderFieldEnd();
+                        writer.visitConfigBuilderEnd();
                     }
                 }
                 else {

File: management/src/main/java/org/particleframework/management/endpoint/stop/ServerStopEndpoint.java
Patch:
@@ -1,10 +1,8 @@
 package org.particleframework.management.endpoint.stop;
 
 import org.particleframework.context.ApplicationContext;
-import org.particleframework.context.env.Environment;
 import org.particleframework.management.endpoint.Endpoint;
 import org.particleframework.management.endpoint.Write;
-import org.particleframework.runtime.server.EmbeddedServer;
 
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -21,7 +19,7 @@ public class ServerStopEndpoint {
         this.message.put("message", "Server shutdown started");
     }
 
-    @Write
+    @Write(consumes = {})
     public Object stop() {
         try {
             return message;

File: router/src/main/java/org/particleframework/web/router/AbstractRouteMatch.java
Patch:
@@ -253,7 +253,7 @@ protected Object resolveValueOrError(Argument argument, ConversionContext conver
 
     @Override
     public boolean accept(MediaType contentType) {
-        return acceptedMediaTypes.isEmpty() || contentType == null || acceptedMediaTypes.contains(contentType);
+        return acceptedMediaTypes.isEmpty() || contentType == null || acceptedMediaTypes.contains(MediaType.ALL_TYPE) || acceptedMediaTypes.contains(contentType);
     }
 
     @Override

File: aop/src/main/java/org/particleframework/aop/writer/AopProxyWriter.java
Patch:
@@ -914,8 +914,8 @@ public void visitConfigBuilderFieldStart(Object fieldType, String fieldName) {
     }
 
     @Override
-    public void visitConfigBuilderMethod(String prefix, Object returnType, String methodName, Object paramType, Map<String, Object> generics) {
-        proxyBeanDefinitionWriter.visitConfigBuilderMethod(prefix, returnType, methodName, paramType, generics);
+    public void visitConfigBuilderMethod(String prefix, String configurationPrefix, Object returnType, String methodName, Object paramType, Map<String, Object> generics) {
+        proxyBeanDefinitionWriter.visitConfigBuilderMethod(prefix, configurationPrefix, returnType, methodName, paramType, generics);
     }
 
     @Override

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -868,6 +868,7 @@ private void visitConfigurationBuilder(Element builderElement, TypeMirror builde
             AnnotationMetadata annotationMetadata = annotationUtils.getAnnotationMetadata(builderElement);
             Boolean allowZeroArgs = annotationMetadata.getValue(ConfigurationBuilder.class, "allowZeroArgs", Boolean.class).orElse(false);
             List<String> prefixes = Arrays.asList(annotationMetadata.getValue(ConfigurationBuilder.class, "prefixes", String[].class).orElse(new String[]{"set"}));
+            String configurationPrefix = annotationMetadata.getValue(ConfigurationBuilder.class, "configurationPrefix", String.class).orElse("");
             PublicMethodVisitor visitor = new PublicMethodVisitor() {
                 @Override
                 protected void accept(ExecutableElement method, Object o) {
@@ -878,6 +879,7 @@ protected void accept(ExecutableElement method, Object o) {
                     Object expectedType = paramType != null ? modelUtils.resolveTypeReference(paramType.asType()) : null;
                     writer.visitConfigBuilderMethod(
                             prefix,
+                            configurationPrefix,
                             modelUtils.resolveTypeReference(method.getReturnType()),
                             methodName,
                             expectedType,

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -331,13 +331,14 @@ void visitFieldValue(Object declaringType,
      * Visit a configuration builder method
      *
      * @param prefix The prefix used for the method
+     * @param configurationPrefix The prefix used to retrieve the configuration value
      * @param returnType The return type
      * @param methodName The method name
      * @param paramType The method type
      * @param generics
      * @see org.particleframework.context.annotation.ConfigurationBuilder
      */
-    void visitConfigBuilderMethod(String prefix, Object returnType, String methodName, Object paramType, Map<String, Object> generics);
+    void visitConfigBuilderMethod(String prefix, String configurationPrefix, Object returnType, String methodName, Object paramType, Map<String, Object> generics);
 
     /**
      * Finalize a configuration builder field

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/RequestArgumentSatisfier.java
Patch:
@@ -52,7 +52,7 @@ class RequestArgumentSatisfier {
      * @param request The request
      * @return The route
      */
-    RouteMatch<Object> fulfillArgumentRequirements(RouteMatch<Object> route, HttpRequest<?> request) {
+    RouteMatch<Object> fulfillArgumentRequirements(RouteMatch<Object> route, HttpRequest<?> request, boolean satisfyOptionals) {
         Collection<Argument> requiredArguments = route.getRequiredArguments();
         Map<String, Object> argumentValues;
 
@@ -94,7 +94,7 @@ RouteMatch<Object> fulfillArgumentRequirements(RouteMatch<Object> route, HttpReq
                         ArgumentBinder.BindingResult bindingResult = argumentBinder
                                 .bind(conversionContext, request);
                         if (argument.getType() == Optional.class) {
-                            if(bindingResult.isSatisfied()) {
+                            if(bindingResult.isSatisfied() || satisfyOptionals) {
                                 Optional value = bindingResult.getValue();
                                 if(value.isPresent()) {
                                     argumentValues.put(argumentName, value.get());

File: http-server/src/main/java/org/particleframework/http/server/binding/binders/ParameterAnnotationBinder.java
Patch:
@@ -70,6 +70,7 @@ public BindingResult<T> bind(ArgumentConversionContext<T> context, HttpRequest<?
                 }
             }
             else {
+                //noinspection unchecked
                 return BindingResult.UNSATISFIED;
             }
         }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/RoutingInBoundHandler.java
Patch:
@@ -236,7 +236,8 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
 
             RouteMatch<?> originalRoute = nettyHttpRequest.getMatchedRoute();
             Class declaringType = originalRoute != null ? originalRoute.getDeclaringType() : null;
-            errorRoute = (declaringType != null ? router.route(declaringType, cause) : router.route(cause)).orElse(null);
+            Optional<RouteMatch<Object>> errorRouteMatch = declaringType != null ? router.route(declaringType, cause) : Optional.empty();
+            errorRoute = errorRouteMatch.orElseGet(() -> router.route(cause).orElse(null));
         }
 
         if (errorRoute != null) {

File: router/src/main/java/org/particleframework/web/router/UriRoute.java
Patch:
@@ -31,7 +31,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface UriRoute extends MethodBasedRoute, UriMatcher {
+public interface UriRoute extends MethodBasedRoute, UriMatcher, Comparable<UriRoute> {
 
     /**
      * Defines routes nested within this route

File: test-suite/src/test/groovy/org/particleframework/docs/server/body/MessageController.java
Patch:
@@ -17,6 +17,7 @@
 
 // tag::imports[]
 import io.reactivex.Flowable;
+import io.reactivex.Single;
 import org.particleframework.http.*;
 import org.particleframework.http.annotation.*;
 import org.particleframework.web.router.annotation.Post;
@@ -44,12 +45,11 @@ String echo(@Size(max = 1024) @Body String text) { // <2>
 
     // tag::echoReactive[]
     @Post(consumes = MediaType.TEXT_PLAIN)
-    Flowable<MutableHttpResponse<String>> echoFlow(@Body Flowable<String> text) { // <1>
+    Single<MutableHttpResponse<String>> echoFlow(@Body Flowable<String> text) { // <1>
         return text.collect(StringBuffer::new, StringBuffer::append)
                    .map(buffer ->
                         HttpResponse.ok(buffer.toString()) // <2>
-                   )
-                   .toFlowable(); // <3>
+                   );
     }
     // end::echoReactive[]
 }

File: core/src/main/java/org/particleframework/core/async/publisher/Publishers.java
Patch:
@@ -55,7 +55,7 @@ public class Publishers {
             Optional<Class> aClass = ClassUtils.forName(name, classLoader);
             aClass.ifPresent(Publishers.reactiveTypes::add);
         }
-        for (String name : Arrays.asList("io.reactivex.Single","reactor.core.publisher.Mono")) {
+        for (String name : Arrays.asList("io.reactivex.Single","reactor.core.publisher.Mono", "io.reactivex.Maybe")) {
             Optional<Class> aClass = ClassUtils.forName(name, classLoader);
             aClass.ifPresent(aClass1 -> {
                 Publishers.singleTypes.add(aClass1);

File: runtime/src/main/java/org/particleframework/reactive/rxjava2/converters/PublisherToFlowableConverter.java
Patch:
@@ -31,7 +31,6 @@
  * @since 1.0
  */
 @Singleton
-@Requires(classes = Flowable.class)
 public class PublisherToFlowableConverter implements TypeConverter<Publisher, Flowable> {
     @SuppressWarnings("unchecked")
     @Override

File: runtime/src/main/java/org/particleframework/reactive/rxjava2/converters/PublisherToMaybeConverter.java
Patch:
@@ -32,7 +32,6 @@
  * @since 1.0
  */
 @Singleton
-@Requires(classes = Maybe.class)
 public class PublisherToMaybeConverter implements TypeConverter<Publisher, Maybe> {
     @SuppressWarnings("unchecked")
     @Override

File: runtime/src/main/java/org/particleframework/reactive/rxjava2/converters/PublisherToObservableConverter.java
Patch:
@@ -29,7 +29,6 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Requires(classes = Observable.class)
 public class PublisherToObservableConverter implements TypeConverter<Publisher, Observable> {
     @SuppressWarnings("unchecked")
     @Override

File: runtime/src/main/java/org/particleframework/reactive/rxjava2/converters/PublisherToSingleConverter.java
Patch:
@@ -15,9 +15,7 @@
  */
 package org.particleframework.reactive.rxjava2.converters;
 
-import io.reactivex.Flowable;
 import io.reactivex.Single;
-import org.particleframework.context.annotation.Requires;
 import org.particleframework.core.convert.ConversionContext;
 import org.particleframework.core.convert.TypeConverter;
 import org.reactivestreams.Publisher;
@@ -32,7 +30,6 @@
  * @since 1.0
  */
 @Singleton
-@Requires(classes = Single.class)
 public class PublisherToSingleConverter implements TypeConverter<Publisher, Single> {
     @SuppressWarnings("unchecked")
     @Override

File: http/src/main/java/org/particleframework/http/HttpResponseFactory.java
Patch:
@@ -15,11 +15,10 @@
  */
 package org.particleframework.http;
 
+import org.particleframework.core.io.service.ServiceDefinition;
 import org.particleframework.core.io.service.SoftServiceLoader;
-import org.particleframework.core.reflect.InstantiationUtils;
 import org.particleframework.http.cookie.CookieFactory;
 
-import java.net.URI;
 import java.util.Optional;
 
 /**
@@ -37,7 +36,7 @@ public interface HttpResponseFactory {
             .firstOr("org.particleframework.http.server.netty.NettyHttpResponseFactory",
                       HttpResponseFactory.class.getClassLoader()
             )
-            .map(SoftServiceLoader.Service::load);
+            .map(ServiceDefinition::load);
 
 
     /**

File: http/src/main/java/org/particleframework/http/cookie/CookieFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.http.cookie;
 
+import org.particleframework.core.io.service.ServiceDefinition;
 import org.particleframework.core.io.service.SoftServiceLoader;
 
 /**
@@ -30,7 +31,7 @@ public interface CookieFactory {
      */
     CookieFactory INSTANCE = SoftServiceLoader.load(CookieFactory.class)
                                               .firstOr("org.particleframework.http.server.netty.cookies.NettyCookieFactory", CookieFactory.class.getClassLoader())
-                                              .map(SoftServiceLoader.Service::load)
+                                              .map(ServiceDefinition::load)
                                               .orElse(null);
 
     /**

File: inject/src/main/java/org/particleframework/context/AbstractBeanDefinitionReference.java
Patch:
@@ -7,6 +7,7 @@
 import org.particleframework.context.condition.Condition;
 import org.particleframework.context.condition.RequiresCondition;
 import org.particleframework.context.exceptions.BeanContextException;
+import org.particleframework.context.exceptions.BeanInstantiationException;
 import org.particleframework.core.annotation.AnnotationMetadata;
 import org.particleframework.core.annotation.Internal;
 import org.particleframework.core.reflect.GenericTypeUtils;
@@ -78,10 +79,10 @@ public BeanDefinition load() {
             try {
                 return (BeanDefinition) beanDefinition.newInstance();
             } catch (Throwable e) {
-                throw new BeanContextException("Error loading bean definition [" + beanTypeName + "]: " + e.getMessage(), e);
+                throw new BeanInstantiationException("Error loading bean definition [" + beanTypeName + "]: " + e.getMessage(), e);
             }
         } else {
-            throw new BeanContextException("Cannot load bean for type [" + beanTypeName + "]. The type is not present on the classpath");
+            throw new BeanInstantiationException("Cannot load bean for type [" + beanTypeName + "]. The type is not present on the classpath");
         }
     }
 

File: inject/src/main/java/org/particleframework/context/env/DefaultEnvironment.java
Patch:
@@ -7,6 +7,7 @@
 import org.particleframework.core.convert.TypeConverter;
 import org.particleframework.core.io.scan.CachingClassPathAnnotationScanner;
 import org.particleframework.core.io.scan.ClassPathAnnotationScanner;
+import org.particleframework.core.io.service.ServiceDefinition;
 import org.particleframework.core.io.service.SoftServiceLoader;
 import org.particleframework.core.naming.NameUtils;
 import org.particleframework.core.order.OrderUtil;
@@ -135,7 +136,7 @@ public Environment start() {
         if(running.compareAndSet(false, true)) {
             ArrayList<PropertySource> propertySources = new ArrayList<>(this.propertySources);
             SoftServiceLoader<PropertySourceLoader> propertySourceLoaders = SoftServiceLoader.load(PropertySourceLoader.class);
-            for (SoftServiceLoader.Service<PropertySourceLoader> loader : propertySourceLoaders) {
+            for (ServiceDefinition<PropertySourceLoader> loader : propertySourceLoaders) {
                 if(loader.isPresent()) {
                     Optional<PropertySource> propertySource = loader.load().load(this);
                     propertySource.ifPresent(propertySources::add);

File: configurations/redis-lettuce/src/main/java/org/particleframework/configuration/lettuce/session/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * @since 1.0
  */
 @Configuration
-@Requires(property = "particle.redis.session.enabled", value = StringUtils.TRUE)
+@Requires(property = "particle.session.http.redis.enabled", value = StringUtils.TRUE)
 @Requires(classes = SessionStore.class)
 package org.particleframework.configuration.lettuce.session;
 

File: inject/src/main/java/org/particleframework/context/AbstractBeanConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package org.particleframework.context;
 
 import org.particleframework.context.annotation.Requirements;
+import org.particleframework.context.annotation.Requires;
 import org.particleframework.context.condition.Condition;
 import org.particleframework.context.condition.RequiresCondition;
 import org.particleframework.core.annotation.AnnotationMetadata;
@@ -29,7 +30,7 @@ public class AbstractBeanConfiguration implements BeanConfiguration {
     protected AbstractBeanConfiguration(String thePackage) {
         this.packageName = thePackage.intern();
         AnnotationMetadata annotationMetadata = getAnnotationMetadata();
-        this.condition = annotationMetadata.hasDeclaredAnnotation(Requirements.class)? null : new RequiresCondition(annotationMetadata);
+        this.condition = !annotationMetadata.hasStereotype(Requires.class) && !annotationMetadata.hasStereotype(Requirements.class) ? null : new RequiresCondition(annotationMetadata);
     }
 
     @Override
@@ -57,7 +58,7 @@ public boolean isEnabled(BeanContext context) {
 
     @Override
     public boolean isWithin(BeanDefinitionReference beanDefinitionReference) {
-        String beanTypeName = beanDefinitionReference.getBeanTypeName();
+        String beanTypeName = beanDefinitionReference.getBeanDefinitionName();
         return isWithin(beanTypeName);
     }
 

File: inject/src/main/java/org/particleframework/context/AbstractBeanDefinitionReference.java
Patch:
@@ -44,7 +44,7 @@ public boolean isPrimary() {
 
     @Override
     public String getName() {
-        return getBeanTypeName();
+        return beanTypeName;
     }
 
     /**
@@ -91,8 +91,8 @@ public boolean isContextScope() {
     }
 
     @Override
-    public String getBeanTypeName() {
-        return beanTypeName;
+    public String getBeanDefinitionName() {
+        return beanDefinitionTypeName;
     }
 
     @Override

File: inject/src/main/java/org/particleframework/inject/BeanDefinitionReference.java
Patch:
@@ -24,9 +24,9 @@
 public interface BeanDefinitionReference<T> extends BeanType<T> {
 
     /**
-     * @return The name of the bean type
+     * @return The class name of the backing {@link BeanDefinition}
      */
-    String getBeanTypeName();
+    String getBeanDefinitionName();
 
     /**
      * @return The name of the bean that this bean replaces

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/interceptor/HttpRequestInterceptorAdapter.java
Patch:
@@ -47,7 +47,7 @@ public HttpRequestInterceptorAdapter(HttpRequestInterceptor adapted) {
     protected void channelRead0(ChannelHandlerContext ctx, HttpRequest<?> msg) throws Exception {
         if (adapted.matches(msg)) {
             try {
-                adapted. intercept(msg, new HttpRequestInterceptor.RequestInterceptionContext() {
+                adapted.intercept(msg, new HttpRequestInterceptor.RequestInterceptionContext() {
                     @Override
                     public void proceed(HttpRequest<?> request) {
                         ctx.fireChannelRead(request);

File: http/src/main/java/org/particleframework/http/cookie/Cookies.java
Patch:
@@ -30,7 +30,7 @@
 public interface Cookies extends ConvertibleValues<Cookie> {
 
     /**
-     * @return A list of the cookies
+     * @return A set of the cookies
      */
     Set<Cookie> getAll();
 

File: bootstrap/src/main/java/org/particleframework/cache/interceptor/CacheInterceptor.java
Patch:
@@ -31,7 +31,7 @@
 import org.particleframework.core.type.ReturnType;
 import org.particleframework.core.util.ArrayUtils;
 import org.particleframework.reactive.ReactiveTypeUtils;
-import org.particleframework.runtime.executor.IOExecutorService;
+import org.particleframework.runtime.executor.IOExecutorServiceConfig;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
@@ -69,7 +69,7 @@ public class CacheInterceptor implements MethodInterceptor<Object, Object> {
     public CacheInterceptor(CacheManager cacheManager,
                             CacheErrorHandler errorHandler,
                             AsyncCacheErrorHandler asyncCacheErrorHandler,
-                            @Named(IOExecutorService.NAME) ExecutorService ioExecutor,
+                            @Named(IOExecutorServiceConfig.NAME) ExecutorService ioExecutor,
                             BeanContext beanContext) {
         this.cacheManager = cacheManager;
         this.errorHandler = errorHandler;

File: bootstrap/src/main/java/org/particleframework/runtime/context/scope/refresh/RefreshScope.java
Patch:
@@ -28,7 +28,7 @@
 import org.particleframework.inject.DisposableBeanDefinition;
 import org.particleframework.inject.qualifiers.Qualifiers;
 import org.particleframework.runtime.context.scope.Refreshable;
-import org.particleframework.runtime.executor.IOExecutorService;
+import org.particleframework.runtime.executor.IOExecutorServiceConfig;
 
 import javax.inject.Named;
 import javax.inject.Provider;
@@ -56,7 +56,7 @@ public class RefreshScope implements CustomScope<Refreshable>, LifeCycle<Refresh
     private final BeanContext beanContext;
     private final Executor executorService;
 
-    public RefreshScope(BeanContext beanContext, @Named(IOExecutorService.NAME) Executor executorService) {
+    public RefreshScope(BeanContext beanContext, @Named(IOExecutorServiceConfig.NAME) Executor executorService) {
         this.beanContext = beanContext;
         this.executorService = executorService;
     }

File: bootstrap/src/main/java/org/particleframework/runtime/executor/DefaultExecutorSelector.java
Patch:
@@ -57,7 +57,7 @@ public Optional<ExecutorService> select(MethodReference method) {
         if( method.hasStereotype(blockingAnnotations) ) {
             return beanLocator.findBean(
                     ExecutorService.class,
-                    Qualifiers.byName(IOExecutorService.NAME)
+                    Qualifiers.byName(IOExecutorServiceConfig.NAME)
             );
         }
         return Optional.empty();

File: bootstrap/src/main/java/org/particleframework/runtime/executor/IOExecutorServiceConfig.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Requires(missingProperty = "particle.server.executors.io")
 @Factory
-public class IOExecutorService {
+public class IOExecutorServiceConfig {
 
     /**
      * The name of the default IO executor service
@@ -39,7 +39,7 @@ public class IOExecutorService {
 
     @Singleton
     @Bean
-    @Named(IOExecutorService.NAME)
+    @Named(IOExecutorServiceConfig.NAME)
     ExecutorConfiguration configuration() {
         return UserExecutorConfiguration.of(ExecutorType.CACHED);
     }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -40,7 +40,7 @@
 import org.particleframework.http.server.netty.interceptor.HttpRequestInterceptorAdapter;
 import org.particleframework.inject.qualifiers.Qualifiers;
 import org.particleframework.runtime.executor.ExecutorSelector;
-import org.particleframework.runtime.executor.IOExecutorService;
+import org.particleframework.runtime.executor.IOExecutorServiceConfig;
 import org.particleframework.runtime.server.EmbeddedServer;
 import org.particleframework.web.router.Router;
 import org.slf4j.Logger;
@@ -91,7 +91,7 @@ public NettyHttpServer(
             ApplicationContext applicationContext,
             Optional<Router> router,
             RequestBinderRegistry binderRegistry,
-            @javax.inject.Named(IOExecutorService.NAME) ExecutorService ioExecutor,
+            @javax.inject.Named(IOExecutorServiceConfig.NAME) ExecutorService ioExecutor,
             ExecutorSelector executorSelector,
             HttpRequestInterceptor[] interceptors,
             ChannelOutboundHandler... outboundHandlers

File: management/src/main/java/org/particleframework/management/endpoint/routes/RoutesEndpoint.java
Patch:
@@ -55,7 +55,7 @@ Map<String, Map<String, String>> getRoutes() {
 
     protected String getMethodString(MethodExecutionHandle targetMethod) {
         return new StringBuilder()
-                .append(targetMethod.getReturnType().asArgument().getTypeString())
+                .append(targetMethod.getReturnType().asArgument().getTypeString(false))
                 .append(" ")
                 .append(targetMethod.getDeclaringType().getName())
                 .append('.')

File: inject/src/main/java/org/particleframework/context/DefaultBeanContext.java
Patch:
@@ -534,7 +534,6 @@ public Collection<BeanDefinition<?>> getBeanDefinitions(Qualifier<Object> qualif
                             } catch (Throwable e) {
                                 throw new BeanInstantiationException(reference, e);
                             }
-                            candidates.add(definition);
                         }
                 );
             }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/FormDataHttpContentProcessor.java
Patch:
@@ -44,7 +44,7 @@ public FormDataHttpContentProcessor(NettyHttpRequest<?> nettyHttpRequest, NettyH
         DefaultHttpDataFactory factory = new DefaultHttpDataFactory(configuration.getMultipart().isDisk(), characterEncoding);
         factory.setMaxLimit(configuration.getMultipart().getMaxFileSize());
         this.decoder = new HttpPostRequestDecoder(factory, nettyHttpRequest.getNativeRequest(), characterEncoding);
-        this.enabled = nettyHttpRequest.getContentType() == MediaType.APPLICATION_FORM_URLENCODED_TYPE ||
+        this.enabled = nettyHttpRequest.getContentType().map(type -> type.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)).orElse(false) ||
                                 configuration.getMultipart().isEnabled();
     }
 

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpRequest.java
Patch:
@@ -127,17 +127,17 @@ public Charset getCharacterEncoding() {
     }
 
     @Override
-    public MediaType getContentType() {
+    public Optional<MediaType> getContentType() {
         MediaType contentType = this.mediaType;
         if (contentType == null) {
             synchronized (this) { // double check
                 contentType = this.mediaType;
                 if (contentType == null) {
-                    this.mediaType = contentType = HttpRequest.super.getContentType();
+                    this.mediaType = contentType = HttpRequest.super.getContentType().orElse(null);
                 }
             }
         }
-        return contentType;
+        return Optional.ofNullable(contentType);
     }
 
     @Override

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/binders/PublisherPartBinder.java
Patch:
@@ -66,7 +66,8 @@ public Class<Part> getAnnotationType() {
     @SuppressWarnings("unchecked")
     @Override
     public Optional<Publisher> bind(ArgumentConversionContext<Publisher> context, HttpRequest<?> source) {
-        if(MediaType.MULTIPART_FORM_DATA_TYPE.equals(source.getContentType())) {
+        Optional<MediaType> contentType = source.getContentType();
+        if(contentType.isPresent() && MediaType.MULTIPART_FORM_DATA_TYPE.equals(contentType.get())) {
             NettyHttpRequest nettyHttpRequest = (NettyHttpRequest) source;
             Argument<Publisher> argument = context.getArgument();
             String argumentName = argument.getName();

File: router/src/main/java/org/particleframework/web/router/AbstractRouteMatch.java
Patch:
@@ -124,7 +124,7 @@ public Argument[] getArguments() {
 
     @Override
     public boolean test(HttpRequest request) {
-        for (Predicate<HttpRequest> condition : abstractRoute.conditions) {
+        for (Predicate<HttpRequest<?>> condition : abstractRoute.conditions) {
             if (!condition.test(request)) {
                 return false;
             }

File: router/src/main/java/org/particleframework/web/router/ErrorRoute.java
Patch:
@@ -61,5 +61,5 @@ public interface ErrorRoute extends Route {
     ErrorRoute nest(Runnable nested);
 
     @Override
-    ErrorRoute where(Predicate<HttpRequest> condition);
+    ErrorRoute where(Predicate<HttpRequest<?>> condition);
 }

File: router/src/main/java/org/particleframework/web/router/ResourceRoute.java
Patch:
@@ -62,5 +62,5 @@ public interface ResourceRoute extends Route {
     ResourceRoute exclude(HttpMethod... methods);
 
     @Override
-    ResourceRoute where(Predicate<HttpRequest> condition);
+    ResourceRoute where(Predicate<HttpRequest<?>> condition);
 }

File: router/src/main/java/org/particleframework/web/router/Route.java
Patch:
@@ -59,7 +59,7 @@ public interface Route {
      * @param condition The condition which accepts a {@link HttpRequest}
      * @return This route
      */
-    Route where(Predicate<HttpRequest> condition);
+    Route where(Predicate<HttpRequest<?>> condition);
 
     /**
      * The name of the argument to the route that is the request body

File: router/src/main/java/org/particleframework/web/router/StatusRoute.java
Patch:
@@ -50,5 +50,5 @@ public interface StatusRoute extends Route {
     StatusRoute nest(Runnable nested);
 
     @Override
-    StatusRoute where(Predicate<HttpRequest> condition);
+    StatusRoute where(Predicate<HttpRequest<?>> condition);
 }

File: router/src/main/java/org/particleframework/web/router/UriRoute.java
Patch:
@@ -71,7 +71,7 @@ default Optional<UriRouteMatch> match(URI uri) {
     UriRoute acceptAll();
 
     @Override
-    UriRoute where(Predicate<HttpRequest> condition);
+    UriRoute where(Predicate<HttpRequest<?>> condition);
 
     @Override
     UriRoute body(String argument);

File: router/src/main/java/org/particleframework/web/router/UriRouteMatch.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.web.router;
 
+import org.particleframework.core.annotation.Nullable;
 import org.particleframework.http.HttpMethod;
 import org.particleframework.http.MediaType;
 import org.particleframework.http.uri.UriMatchInfo;
@@ -64,5 +65,5 @@ default List<Argument> getRequiredArguments() {
      * @param contentType The content type
      * @return True if it is
      */
-    boolean accept(MediaType contentType);
+    boolean accept(@Nullable MediaType contentType);
 }

File: router/src/test/groovy/org/particleframework/context/router/RouteBuilderTests.java
Patch:
@@ -90,7 +90,9 @@ public MyRouteBuilder(ApplicationContext beanContext) {
         @Inject
         void someRoutes(BookController controller, AuthorController authorController) {
             GET("/conditional{/message}", controller, "hello", String.class)
-                    .where((request)-> request.getContentType().equals(MediaType.APPLICATION_JSON_TYPE));
+                    .where((request)->
+                            request.getContentType().map(type->type.equals(MediaType.APPLICATION_JSON_TYPE)).orElse(false)
+                    );
 
             GET("/message{/message}", controller, "hello", String.class).accept(APPLICATION_JSON_TYPE);
             GET("/books{/id}", controller, "show").nest(() ->

File: jdbc/src/main/java/org/particleframework/jdbc/CalculatedSettings.java
Patch:
@@ -72,7 +72,7 @@ public String getDriverClassName() {
 
 
     private boolean driverClassIsLoadable(String className) {
-        return ClassUtils.isPresent(className, null);
+        return ClassUtils.isPresent(className, this.getClass().getClassLoader());
     }
 
     public String getUrl() {

File: bootstrap/src/main/java/org/particleframework/cache/annotation/CacheEvict.java
Patch:
@@ -15,9 +15,11 @@
  */
 package org.particleframework.cache.annotation;
 
+import org.particleframework.cache.interceptor.CachingInterceptor;
 import org.particleframework.cache.interceptor.DefaultCacheKeyGenerator;
 import org.particleframework.cache.interceptor.CacheKeyGenerator;
 import org.particleframework.context.annotation.AliasFor;
+import org.particleframework.context.annotation.Type;
 
 import java.lang.annotation.*;
 
@@ -32,6 +34,7 @@
 @Inherited
 @Documented
 @CacheConfig
+@Type(CachingInterceptor.class)
 public @interface CacheEvict {
     /**
      * Alias for {@link CacheConfig#cacheNames}.

File: bootstrap/src/main/java/org/particleframework/cache/annotation/CachePut.java
Patch:
@@ -15,9 +15,11 @@
  */
 package org.particleframework.cache.annotation;
 
+import org.particleframework.cache.interceptor.CachingInterceptor;
 import org.particleframework.cache.interceptor.DefaultCacheKeyGenerator;
 import org.particleframework.cache.interceptor.CacheKeyGenerator;
 import org.particleframework.context.annotation.AliasFor;
+import org.particleframework.context.annotation.Type;
 
 import java.lang.annotation.*;
 
@@ -33,6 +35,7 @@
 @Inherited
 @Documented
 @CacheConfig
+@Type(CachingInterceptor.class)
 public @interface CachePut {
 
     /**

File: bootstrap/src/main/java/org/particleframework/cache/annotation/Cacheable.java
Patch:
@@ -15,9 +15,11 @@
  */
 package org.particleframework.cache.annotation;
 
+import org.particleframework.cache.interceptor.CachingInterceptor;
 import org.particleframework.cache.interceptor.DefaultCacheKeyGenerator;
 import org.particleframework.cache.interceptor.CacheKeyGenerator;
 import org.particleframework.context.annotation.AliasFor;
+import org.particleframework.context.annotation.Type;
 
 import java.lang.annotation.*;
 
@@ -33,6 +35,7 @@
 @Inherited
 @Documented
 @CacheConfig
+@Type(CachingInterceptor.class)
 public @interface Cacheable {
 
     /**

File: examples/simple-java/src/main/java/example/BookController.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.reactivex.Flowable;
 import io.reactivex.schedulers.Schedulers;
+import org.particleframework.cache.annotation.Cacheable;
 import org.particleframework.http.annotation.Body;
 import org.particleframework.http.annotation.Controller;
 import org.particleframework.validation.Validated;
@@ -38,6 +39,7 @@
 public class BookController {
 
     @Get
+    @Cacheable("books")
     public List<Book> index() {
         return Arrays.asList(new Book("The Stand"), new Book("The Shining"));
     }

File: inject/src/main/java/org/particleframework/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -312,7 +312,7 @@ private Map<String, Set<String>> getAnnotationsByStereotypeInternal() {
     public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {
         if(annotationClass == null || annotationMap == null) return null;
         String annotationName = annotationClass.getName().intern();
-        if( hasAnnotation(annotationName)) {
+        if( hasAnnotation(annotationName) || hasStereotype(annotationName)) {
             return (T) annotationMap.computeIfAbsent(annotationName, s -> {
                 ConvertibleValues<Object> annotationValues = getValues(annotationClass);
                 return AnnotationMetadataSupport.buildAnnotation(annotationClass, annotationValues);

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -901,7 +901,7 @@ private BeanDefinitionWriter createBeanDefinitionWriterFor(TypeElement typeEleme
 
         private boolean isConfigurationProperties(TypeElement concreteClass) {
             AnnotationMetadata annotationMetadata = annotationUtils.getAnnotationMetadata(concreteClass);
-            return annotationMetadata.hasStereotype(ConfigurationReader.class) || annotationMetadata.getValue(ForEach.class, "property").isPresent();
+            return annotationMetadata.hasDeclaredStereotype(ConfigurationReader.class) || (annotationMetadata.hasDeclaredStereotype(ForEach.class) && annotationMetadata.getValue(ForEach.class, "property").isPresent());
         }
 
         private DynamicName createProxyKey(String beanName) {

File: inject/src/main/java/org/particleframework/context/AbstractBeanDefinition.java
Patch:
@@ -104,12 +104,12 @@ protected AbstractBeanDefinition(Annotation scope,
 
     @Override
     public boolean isIterable() {
-        return hasStereotype(ForEach.class);
+        return hasDeclaredStereotype(ForEach.class);
     }
 
     @Override
     public boolean isPrimary() {
-        return hasStereotype(Primary.class);
+        return hasDeclaredStereotype(Primary.class);
     }
 
     @Override

File: inject/src/main/java/org/particleframework/context/DefaultApplicationContext.java
Patch:
@@ -166,7 +166,7 @@ protected <T> Collection<BeanDefinition> findBeanCandidates(Class<T> beanType) {
 
             List<BeanDefinition> transformedCandidates = new ArrayList<>();
             for (BeanDefinition candidate : candidates) {
-                if (candidate.hasStereotype(ForEach.class)) {
+                if (candidate.hasDeclaredStereotype(ForEach.class)) {
 
                     String property = candidate.getValue(ForEach.class, "property", String.class).orElse(null);
                     String primaryPrefix = candidate.getValue(ForEach.class, "primary", String.class).orElse(null);
@@ -242,7 +242,7 @@ protected <T> Collection<BeanDefinition> findBeanCandidates(Class<T> beanType) {
     protected <T> BeanDefinition<T> findConcreteCandidate(Class<T> beanType, Qualifier<T> qualifier, Collection<BeanDefinition<T>> candidates) {
         if (candidates.stream().allMatch( c -> {
             if (c instanceof BeanDefinitionDelegate) {
-                return ((BeanDefinitionDelegate) c).get(ForEach.class.getName(), Boolean.class, false) || c.getBeanType().isAnnotationPresent(ForEach.class);
+                return ((BeanDefinitionDelegate) c).get(ForEach.class.getName(), Boolean.class, false) || c.hasDeclaredAnnotation(ForEach.class);
             } else {
                 return false;
             }

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -30,6 +30,7 @@
 import org.particleframework.context.annotation.Executable;
 import org.particleframework.core.annotation.AnnotationMetadata;
 import org.particleframework.inject.annotation.AnnotationMetadataWriter;
+import org.particleframework.inject.annotation.DefaultAnnotationMetadata;
 import org.particleframework.inject.annotation.JavaAnnotationMetadataBuilder;
 import org.particleframework.inject.writer.*;
 
@@ -388,7 +389,7 @@ public Object visitExecutable(ExecutableElement method, Object o) {
 
             AnnotationMetadata methodAnnotationMetadata = annotationUtils.getAnnotationMetadata(method);
             // handle @Bean annotation for @Factory class
-            if (isFactoryType && methodAnnotationMetadata.hasStereotype(Bean.class) && method.getReturnType().getKind() == TypeKind.DECLARED) {
+            if (isFactoryType && methodAnnotationMetadata.hasDeclaredStereotype(Bean.class, Scope.class) && method.getReturnType().getKind() == TypeKind.DECLARED) {
                 visitBeanFactoryMethod(method);
                 return null;
             }

File: inject-java/src/test/groovy/org/particleframework/inject/factory/factorydefinition/BFactory.java
Patch:
@@ -43,7 +43,6 @@ public void init() {
         name = name.toUpperCase();
     }
 
-    @Bean
     @Singleton
     public B get() {
         assert postConstructCalled : "post construct should have been called";

File: inject-java/src/test/groovy/org/particleframework/inject/factory/parameterizedfactory/BFactory.java
Patch:
@@ -41,7 +41,6 @@ void init() {
         name = name.toUpperCase();
     }
 
-    @Bean
     @Singleton
     B get() {
         assert postConstructCalled : "post construct should have been called";

File: inject/src/main/java/org/particleframework/context/BeanDefinitionDelegate.java
Patch:
@@ -76,7 +76,7 @@ public boolean isIterable() {
 
     @Override
     public boolean isPrimary() {
-        return definition.isPrimary() || (Boolean)attributes.getOrDefault(PRIMARY_ATTRIBUTE, false);
+        return definition.isPrimary() || get(PRIMARY_ATTRIBUTE, Boolean.class).orElse(false);
     }
 
     @Override

File: inject/src/main/java/org/particleframework/inject/annotation/DefaultAnnotationMetadata.java
Patch:
@@ -287,7 +287,7 @@ private Map<String, Map<CharSequence, Object>> getAllStereotypes() {
         return stereotypes;
     }
 
-    private Map<String, Map<CharSequence, Object>> getAllAnnotations() {
+    public Map<String, Map<CharSequence, Object>> getAllAnnotations() {
         Map<String, Map<CharSequence, Object>>  annotations = this.allAnnotations;
         if (annotations == null) {
             this.allAnnotations = annotations = new HashMap<>(3);

File: inject/src/main/java/org/particleframework/context/DefaultBeanContext.java
Patch:
@@ -968,7 +968,6 @@ private <T> Optional<BeanDefinition<T>> findConcreteCandidateNoCache(Class<T> be
                 }
 
                 Optional<BeanDefinition<T>> primary = beanDefinitionList.stream()
-                        .filter(BeanDefinition::isPrimary)
                         .findFirst();
                 definition = primary.orElseGet(() -> lastChanceResolve(beanType, qualifier, throwNonUnique, beanDefinitionList));
             } else {

File: inject/src/main/java/org/particleframework/inject/qualifiers/NameQualifier.java
Patch:
@@ -32,9 +32,6 @@ class NameQualifier<T> implements Qualifier<T>, org.particleframework.core.namin
     public <BT extends BeanType<T>> Stream<BT> reduce(Class<T> beanType, Stream<BT> candidates) {
         check("beanType", beanType).notNull();
         check("candidates", candidates).notNull();
-        if (beanType.getAnnotation(ForEach.class) != null) {
-            return candidates;
-        }
         return candidates.filter(candidate -> {
                     String typeName;
                     AnnotationMetadata annotationMetadata = candidate.getAnnotationMetadata();

File: http-server/src/main/java/org/particleframework/http/server/HttpServerConfiguration.java
Patch:
@@ -41,8 +41,8 @@ public class HttpServerConfiguration {
     @ReadableBytes
     protected long maxRequestSize = 1024 * 1024 * 10; // 10MB
     protected SslConfiguration ssl;
-    protected MultipartConfiguration multipart;
-    protected CorsConfiguration cors;
+    protected MultipartConfiguration multipart =  new MultipartConfiguration();
+    protected CorsConfiguration cors = new CorsConfiguration();
     /**
      * The default server port
      */

File: inject-java/src/test/groovy/org/particleframework/inject/configproperties/MyConfig.java
Patch:
@@ -19,7 +19,7 @@ public class MyConfig {
     List<URL> emptyList;
     Map<String,Integer> flags;
     Optional<URL> url;
-    Optional<URL> anotherUrl;
+    Optional<URL> anotherUrl = Optional.empty();
     Inner inner;
     protected int defaultPort = 9999;
     protected Integer anotherPort;

File: inject-java/src/test/groovy/org/particleframework/inject/foreach/MyConfiguration.java
Patch:
@@ -22,7 +22,7 @@ public class MyConfiguration {
     List<URL> emptyList;
     Map<String,Integer> flags;
     Optional<URL> url;
-    Optional<URL> anotherUrl;
+    Optional<URL> anotherUrl = Optional.empty();
     Inner inner;
 
     Integer getAnotherPort() {

File: inject-java/src/test/groovy/org/particleframework/inject/foreach/MyConfigurationWithPrimary.java
Patch:
@@ -22,7 +22,7 @@ public class MyConfigurationWithPrimary {
     List<URL> emptyList;
     Map<String, Integer> flags;
     Optional<URL> url;
-    Optional<URL> anotherUrl;
+    Optional<URL> anotherUrl = Optional.empty();
     Inner inner;
 
     Integer getAnotherPort() {

File: inject-java/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -696,7 +696,7 @@ void visitAnnotatedMethod(ExecutableElement method, Object o) {
 
         @Override
         public Object visitVariable(VariableElement variable, Object o) {
-            if (modelUtils.isStatic(variable)) {
+            if (modelUtils.isStatic(variable) || modelUtils.isFinal(variable)) {
                 return null;
             }
 

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/server/http/decoders/JsonMediaTypeCodec.java
Patch:
@@ -49,7 +49,7 @@ public <T> T decode(Class<T> type, InputStream inputStream) throws CodecExceptio
         try {
             return objectMapper.readValue(inputStream, type);
         } catch (IOException e) {
-            throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: ");
+            throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: " + e.getMessage());
         }
     }
 
@@ -58,7 +58,7 @@ public <T> T decode(Class<T> type, String data) throws CodecException {
         try {
             return objectMapper.readValue(data, type);
         } catch (IOException e) {
-            throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: ");
+            throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: " + e.getMessage());
         }
     }
 

File: core/src/main/java/org/particleframework/core/cli/CommandLineParser.java
Patch:
@@ -91,7 +91,7 @@ private void parseInternal(DefaultCommandLine cl, String[] args, boolean firstAr
                 }
                 else {
                     if(lastWasOption != null) {
-                        cl.addUndeclaredOption(lastWasOption, trimmed);
+                        cl.addDeclaredOption(declaredOptions.get(lastWasOption), trimmed);
                         lastWasOption = null;
                         continue;
                     }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -55,6 +55,9 @@
 import java.util.function.BiConsumer;
 
 /**
+ * Implements the bootstrap and configuration logic for the Netty implementation of {@link EmbeddedServer}
+ *
+ * @see RoutingInBoundHandler
  * @author Graeme Rocher
  * @since 1.0
  */

File: core/src/main/java/org/particleframework/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -64,9 +64,6 @@ private Object resolveValue(Argument<T> argument, ConvertibleValues<?> values, C
             annotationValue = argument.getName();
         }
         Object value = values.get(annotationValue, Object.class).orElse(null);
-        if(value == null) {
-            return value;
-        }
         boolean isConvertibleValues = values instanceof ConvertibleMultiValues;
         if(isConvertibleValues && isManyObjects(argument)) {
             ConvertibleMultiValues<?> multiValues = (ConvertibleMultiValues<?>) values;

File: inject-java/src/main/java/org/particleframework/annotation/processing/AbstractInjectAnnotationProcessor.java
Patch:
@@ -37,7 +37,7 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
         this.typeUtils = processingEnv.getTypeUtils();
         this.modelUtils = new ModelUtils(elementUtils,typeUtils);
         this.annotationUtils = new AnnotationUtils(elementUtils);
-        this.genericUtils = new GenericUtils(elementUtils,typeUtils);
+        this.genericUtils = new GenericUtils(elementUtils,typeUtils, modelUtils);
 
         Options javacOptions = Options.instance(((JavacProcessingEnvironment)processingEnv).getContext());
         URI baseDir = null;

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -79,7 +79,7 @@ public class NettyHttpServer implements EmbeddedServer {
     public static final String HTTP_CODEC = "http-codec";
     public static final String PARTICLE_HANDLER = "particle-handler";
     public static final String CORS_HANDLER = "cors-handler";
-    
+
     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);
 
     private volatile Channel serverChannel;
@@ -461,7 +461,7 @@ private void handleRouteMatch(RouteMatch<Object> route, NettyHttpRequest request
                             streamedHttpRequest.subscribe(subscriber);
                         } else {
                             if (LOG.isDebugEnabled()) {
-                                LOG.debug("Request body parsing not enabled for subscriber: " + subscriber.getClass().getSimpleName());
+                                LOG.debug("Request body parsing not enabled for content type: {}", contentType );
                             }
                             context.writeAndFlush(handleBadRequest(request, binderRegistry))
                                     .addListener(createCloseListener(nativeRequest));

File: http-server/src/main/java/org/particleframework/http/server/HttpServerConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class HttpServerConfiguration {
     protected Charset defaultCharset = StandardCharsets.UTF_8;
     protected Optional<Integer> readTimeout;
     @ReadableBytes
-    protected long maxRequestSize = 1024 * 10; // 10MB
+    protected long maxRequestSize = 1024 * 1024 * 10; // 10MB
     protected SslConfiguration ssl;
     protected MultipartConfiguration multipart;
     protected CorsConfiguration cors;
@@ -130,7 +130,7 @@ public int getPort() {
     public static class MultipartConfiguration implements Toggleable{
         protected Optional<File> location = Optional.empty();
         @ReadableBytes
-        protected long maxFileSize = 1024;
+        protected long maxFileSize = 1024 * 1024; // 1MB
         protected boolean enabled = true;
         protected boolean disk = false;
 

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/convert/ArrayNodeToArrayConverter.java
Patch:
@@ -32,6 +32,7 @@ public Optional<Object[]> convert(ArrayNode node, Class<Object[]> targetType, Co
                 Object[] result = objectMapper.treeToValue(node, targetType);
                 return Optional.of(result);
         } catch (JsonProcessingException e) {
+            context.reject(e);
             return Optional.empty();
         }
     }

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/convert/ArrayNodeToIterableConverter.java
Patch:
@@ -34,7 +34,7 @@ public Optional<Iterable> convert(ArrayNode node, Class<Iterable> targetType, Co
             Class elementType = typeVariables.isEmpty() ? Map.class : typeVariables.values().iterator().next().getType();
             List results = new ArrayList();
             node.elements().forEachRemaining(jsonNode -> {
-                Optional converted = conversionService.convert(jsonNode, elementType);
+                Optional converted = conversionService.convert(jsonNode, elementType, context);
                 if(converted.isPresent()) {
                     results.add(converted.get());
                 }

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/convert/JsonNodeToObjectConverter.java
Patch:
@@ -53,6 +53,7 @@ public Optional<Object> convert(JsonNode node, Class<Object> targetType, Convers
                 return Optional.of(result);
             }
         } catch (JsonProcessingException e) {
+            context.reject(e);
             return Optional.empty();
         }
     }

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/server/http/converters/JsonMediaTypeReader.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.Optional;
 
 /**
+ * A {@link MediaTypeReader} for JSON
+ *
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -39,6 +41,7 @@ public class JsonMediaTypeReader<T> implements MediaTypeReader<T> {
     JsonMediaTypeReader(ObjectMapper objectMapper) {
         this.objectMapper = objectMapper;
     }
+
     @Override
     public MediaType getMediaType() {
         return MediaType.APPLICATION_JSON_TYPE;

File: core/src/main/java/org/particleframework/core/bind/ArgumentBinder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.core.bind;
 
+import org.particleframework.core.convert.ArgumentConversionContext;
 import org.particleframework.core.type.Argument;
 
 import java.util.Optional;
@@ -45,9 +46,9 @@ public interface ArgumentBinder<T, S> {
     /**
      * Bind the given argument from the given source
      *
-     * @param argument The argument
+     * @param context The {@link ArgumentConversionContext}
      * @param source The source
      * @return An {@link Optional} of the value. If no binding was possible {@link Optional#empty()}
      */
-    Optional<T> bind(Argument<T> argument, S source);
+    Optional<T> bind(ArgumentConversionContext<T> context, S source);
 }

File: core/src/main/java/org/particleframework/core/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -38,7 +38,8 @@ protected AbstractAnnotatedArgumentBinder(ConversionService<?> conversionService
         this.conversionService = conversionService;
     }
 
-    protected Optional<T> doBind(Argument<T> argument, ConvertibleValues<?> values, String annotationValue, Locale locale, Charset characterEncoding) {
+    protected Optional<T> doBind(ArgumentConversionContext<T> context, ConvertibleValues<?> values, String annotationValue, Locale locale, Charset characterEncoding) {
+        Argument<T> argument = context.getArgument();
         Class<T> argumentType = argument.getType();
         Object value = resolveValue(argument, values, argumentType, annotationValue);
         if(value == null) {
@@ -53,8 +54,7 @@ protected Optional<T> doBind(Argument<T> argument, ConvertibleValues<?> values,
             }
         }
 
-        ConversionContext conversionContext = ConversionContext.of(argument, locale, characterEncoding);
-        return doConvert(value, argumentType, conversionContext);
+        return doConvert(value, argumentType, context);
     }
 
     private Object resolveValue(Argument<T> argument, ConvertibleValues<?> values, Class<T> argumentType, String annotationValue) {

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/converters/FileUploadConverter.java
Patch:
@@ -68,8 +68,8 @@ public Optional<Object> convert(FileUpload object, Class<Object> targetType, Con
                 }
             }
             return conversionService.convert(object.getByteBuf(), targetType, context);
-        } catch (IOException e) {
-            // TODO: conversion context errors
+        } catch (Exception e) {
+            context.reject(e);
             return Optional.empty();
         }
     }

File: http-server/src/main/java/org/particleframework/http/server/binding/binders/AnnotatedRequestArgumentBinder.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.core.bind.ArgumentBinder;
 import org.particleframework.core.bind.annotation.AnnotatedArgumentBinder;
+import org.particleframework.core.convert.ArgumentConversionContext;
 import org.particleframework.http.HttpRequest;
 import org.particleframework.core.type.Argument;
 
@@ -48,7 +49,7 @@ static <SA extends Annotation, ST> AnnotatedRequestArgumentBinder of(Class<SA> a
         return new AnnotatedRequestArgumentBinder<SA, ST>() {
 
             @Override
-            public Optional<ST> bind(Argument<ST> argument, HttpRequest source) {
+            public Optional<ST> bind(ArgumentConversionContext<ST> argument, HttpRequest source) {
                 return binder.bind(argument, source);
             }
 

File: http-server/src/main/java/org/particleframework/http/server/binding/binders/CookieAnnotationBinder.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.core.bind.annotation.AbstractAnnotatedArgumentBinder;
 import org.particleframework.core.bind.annotation.AnnotatedArgumentBinder;
+import org.particleframework.core.convert.ArgumentConversionContext;
 import org.particleframework.core.convert.ConversionService;
 import org.particleframework.core.convert.ConvertibleValues;
 import org.particleframework.core.naming.NameUtils;
@@ -44,7 +45,7 @@ public Class<Cookie> getAnnotationType() {
     }
 
     @Override
-    public Optional<T> bind(Argument<T> argument, HttpRequest source) {
+    public Optional<T> bind(ArgumentConversionContext<T> argument, HttpRequest source) {
         ConvertibleValues<org.particleframework.http.cookie.Cookie> parameters = source.getCookies();
         Cookie annotation = argument.getAnnotation(Cookie.class);
         String parameterName = annotation.value();

File: http-server/src/main/java/org/particleframework/http/server/binding/binders/HeaderAnnotationBinder.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.core.bind.annotation.AbstractAnnotatedArgumentBinder;
 import org.particleframework.core.bind.annotation.AnnotatedArgumentBinder;
+import org.particleframework.core.convert.ArgumentConversionContext;
 import org.particleframework.core.convert.ConversionService;
 import org.particleframework.core.convert.ConvertibleMultiValues;
 import org.particleframework.core.naming.NameUtils;
@@ -43,7 +44,7 @@ public HeaderAnnotationBinder(ConversionService<?> conversionService) {
     }
 
     @Override
-    public Optional<T> bind(Argument<T> argument, HttpRequest source) {
+    public Optional<T> bind(ArgumentConversionContext<T> argument, HttpRequest source) {
         ConvertibleMultiValues<String> parameters = source.getHeaders();
         Header annotation = argument.getAnnotation(Header.class);
         String parameterName = annotation.value();

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -452,7 +452,7 @@ private void handleRouteMatch(RouteMatch<Object> route, NettyHttpRequest request
 
                         }
                     } else {
-                        Subscriber<ByteBufHolder> contentSubscriber = new DefaultHttpContentSubscriber(request);
+                        Subscriber<ByteBufHolder> contentSubscriber = new DefaultHttpContentSubscriber(request, serverConfiguration);
                         streamedHttpRequest.subscribe(contentSubscriber);
                     }
 

File: http-server/src/main/java/org/particleframework/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.http.server.exceptions;
 
+import org.particleframework.context.annotation.Primary;
 import org.particleframework.http.HttpRequest;
 import org.particleframework.http.HttpResponse;
 import org.particleframework.http.HttpStatus;
@@ -29,6 +30,7 @@
  * @since 1.0
  */
 @Singleton
+@Primary
 public class ContentLengthExceededHandler implements ExceptionHandler<ContentLengthExceededException, Object>{
     @Override
     public Object handle(HttpRequest request, ContentLengthExceededException exception) {

File: http/src/main/java/org/particleframework/http/exceptions/ContentLengthExceededException.java
Patch:
@@ -16,6 +16,6 @@ public ContentLengthExceededException(String message, Throwable cause) {
     }
 
     public ContentLengthExceededException(long advertisedLength, long receivedLength) {
-        this("The received length ["+receivedLength+"] exceeds the specified content length ["+advertisedLength+"]");
+        this("The received length ["+receivedLength+"] exceeds the maximum content length ["+advertisedLength+"]");
     }
 }

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/server/http/JsonHttpContentSubscriberFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.particleframework.http.server.netty.HttpContentSubscriber;
 import org.particleframework.http.server.netty.HttpContentSubscriberFactory;
 import org.particleframework.http.server.netty.NettyHttpRequest;
-import org.particleframework.web.router.annotation.Consumes;
+import org.particleframework.http.annotation.Consumes;
 import org.reactivestreams.Subscriber;
 
 import javax.inject.Singleton;

File: core/src/main/java/org/particleframework/core/util/StringUtils.java
Patch:
@@ -31,7 +31,7 @@ public class StringUtils {
      * @param str The string
      * @return True if is
      */
-    public static boolean isEmpty(@Nullable  String str) {
+    public static boolean isEmpty(@Nullable  CharSequence str) {
         return str == null || str.length() == 0;
     }
 
@@ -42,7 +42,7 @@ public static boolean isEmpty(@Nullable  String str) {
      * @param str The string
      * @return True if is
      */
-    public static boolean isNotEmpty(@Nullable  String str) {
+    public static boolean isNotEmpty(@Nullable  CharSequence str) {
         return !isEmpty(str);
     }
 }

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/FormDataHttpContentSubscriberFactory.java
Patch:
@@ -16,10 +16,9 @@
 package org.particleframework.http.server.netty;
 
 import io.netty.buffer.ByteBuf;
-import io.netty.handler.codec.http.HttpContent;
 import org.particleframework.http.MediaType;
 import org.particleframework.http.server.netty.configuration.NettyHttpServerConfiguration;
-import org.particleframework.web.router.annotation.Consumes;
+import org.particleframework.http.annotation.Consumes;
 import org.reactivestreams.Subscriber;
 
 import javax.inject.Singleton;

File: http-server-netty/src/main/java/org/particleframework/http/server/netty/NettyHttpResponse.java
Patch:
@@ -113,7 +113,7 @@ public FullHttpResponse getNativeResponse() {
     }
 
     @Override
-    public MutableHttpResponse<B> setBody(B body) {
+    public MutableHttpResponse<B> body(B body) {
         this.body = body;
         return this;
     }

File: http-server/src/main/java/org/particleframework/http/server/binding/DefaultRequestBinderRegistry.java
Patch:
@@ -77,6 +77,7 @@ else if(binder instanceof TypedRequestArgumentBinder) {
         registerDefaultAnnotationBinders(byAnnotation);
 
         byType.put(HttpHeaders.class, (RequestArgumentBinder<HttpHeaders>) (argument, source) -> Optional.of(source.getHeaders()));
+        byType.put(HttpRequest.class, (RequestArgumentBinder<HttpRequest>) (argument, source) -> Optional.of(source));
         byType.put(HttpParameters.class, (RequestArgumentBinder<HttpParameters>) (argument, source) -> Optional.of(source.getParameters()));
         byType.put(Cookies.class, (RequestArgumentBinder<Cookies>) (argument, source) -> Optional.of(source.getCookies()));
         byType.put(Cookie.class, (RequestArgumentBinder<Cookie>)(argument, source) -> {

File: http/src/main/java/org/particleframework/http/MutableHttpResponse.java
Patch:
@@ -45,7 +45,7 @@ public interface MutableHttpResponse<B> extends HttpResponse<B> {
      * @param body The body
      * @return This response object
      */
-    MutableHttpResponse<B> setBody(B body);
+    MutableHttpResponse<B> body(B body);
 
     /**
      * Sets the response status

File: inject/src/main/java/org/particleframework/inject/qualifiers/TypeArgumentQualifier.java
Patch:
@@ -59,6 +59,7 @@ protected boolean areTypesCompatible(Class[] classes) {
             for (int i = 0; i < classes.length; i++) {
                 Class left = classes[i];
                 Class right = typeArguments[i];
+                if(right == Object.class) continue;
                 if(left != right && !left.isAssignableFrom(right)) {
                     return false;
                 }

File: router/src/main/java/org/particleframework/web/router/AnnotatedControllerDefaultRouteBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import org.particleframework.inject.ExecutableMethod;
 import org.particleframework.stereotype.Controller;
 import org.particleframework.web.router.annotation.Action;
-import org.particleframework.web.router.annotation.Consumes;
+import org.particleframework.http.annotation.Consumes;
 
 import javax.inject.Singleton;
 import java.util.Arrays;
@@ -54,8 +54,8 @@ public void process(ExecutableMethod method) {
             Controller controllerAnn = optional.get();
 
             Class[] argumentTypes = method.getArgumentTypes();
-            if (argumentTypes.length > 0 && Throwable.class.isAssignableFrom(argumentTypes[0])) {
-                Class argumentType = argumentTypes[0];
+            if (argumentTypes.length > 0 && Throwable.class.isAssignableFrom(argumentTypes[argumentTypes.length - 1])) {
+                Class argumentType = argumentTypes[argumentTypes.length-1];
                 ErrorRoute errorRoute = error(method.getDeclaringType(), argumentType, declaringType, method.getMethodName(), method.getArgumentTypes());
                 errorRoute = (ErrorRoute) processAccepts(controllerAnn, errorRoute);
                 processAccepts(declaringType.getAnnotation(Consumes.class), errorRoute);

File: router/src/main/java/org/particleframework/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -20,6 +20,7 @@
 import org.particleframework.core.convert.ConversionService;
 import org.particleframework.core.naming.conventions.MethodConvention;
 import org.particleframework.http.MediaType;
+import org.particleframework.http.annotation.Consumes;
 import org.particleframework.inject.ExecutableMethod;
 import org.particleframework.stereotype.Controller;
 import org.particleframework.web.router.annotation.*;

File: router/src/main/java/org/particleframework/web/router/qualifier/ConsumesMediaTypeQualifier.java
Patch:
@@ -19,7 +19,7 @@
 import org.particleframework.http.HttpHeaders;
 import org.particleframework.http.MediaType;
 import org.particleframework.inject.BeanDefinition;
-import org.particleframework.web.router.annotation.Consumes;
+import org.particleframework.http.annotation.Consumes;
 
 import java.util.Arrays;
 import java.util.Set;

File: examples/simple-java/src/main/java/example/BookController.java
Patch:
@@ -18,6 +18,7 @@
 import org.particleframework.stereotype.Controller;
 import org.particleframework.web.router.annotation.Get;
 
+import javax.inject.Singleton;
 import java.util.Arrays;
 import java.util.List;
 
@@ -26,6 +27,7 @@
  * @since 1.0
  */
 @Controller
+@Singleton
 public class BookController {
 
     @Get

File: core/src/main/java/org/particleframework/core/annotation/Blocking.java
Patch:
@@ -26,7 +26,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Target({ElementType.METHOD})
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Blocking {
 }

File: java-inject/src/test/groovy/org/particleframework/inject/foreach/MyConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package org.particleframework.inject.foreach;
 
+import org.particleframework.context.annotation.ConfigurationProperties;
 import org.particleframework.context.annotation.ForEach;
 
 import java.net.URL;
@@ -32,7 +33,8 @@ int getDefaultPort() {
         return defaultPort;
     }
 
-    static class Inner {
+    @ConfigurationProperties("inner")
+    public static class Inner {
         String enabled;
 
         public String getEnabled() {

File: java-inject/src/test/groovy/org/particleframework/inject/foreach/MyConfigurationWithPrimary.java
Patch:
@@ -1,5 +1,6 @@
 package org.particleframework.inject.foreach;
 
+import org.particleframework.context.annotation.ConfigurationProperties;
 import org.particleframework.context.annotation.ForEach;
 
 import java.net.URL;
@@ -32,7 +33,8 @@ int getDefaultPort() {
         return defaultPort;
     }
 
-    static class Inner {
+    @ConfigurationProperties("inner")
+    public static class Inner {
         String enabled;
 
         public String getEnabled() {

File: bootstrap/src/main/java/org/particleframework/runtime/executor/IOExecutorService.java
Patch:
@@ -32,6 +32,9 @@
 @Factory
 public class IOExecutorService {
 
+    /**
+     * The name of the default IO executor service
+     */
     public static final String NAME = "io";
 
     @Singleton

File: inject/src/main/java/org/particleframework/context/AbstractExecutableMethod.java
Patch:
@@ -100,7 +100,7 @@ public ReturnType getReturnType() {
     }
 
     @Override
-    public Set<? extends Annotation> getExecutableAnnotations() {
+    public Collection<? extends Annotation> getExecutableAnnotations() {
         return AnnotationUtil.findAnnotationsWithStereoType(Executable.class, this.annotations);
     }
 

File: inject/src/main/java/org/particleframework/context/DefaultBeanContext.java
Patch:
@@ -1060,7 +1060,7 @@ private <T> Collection<T> getBeansOfTypeInternal(BeanResolutionContext resolutio
                             if(LOG.isDebugEnabled()) {
                                 Qualifier registeredQualifier = entry.getKey().qualifier;
                                 if(registeredQualifier != null) {
-                                    LOG.debug("Found existing bean for type {} {}: {} ",registeredQualifier, beanType.getName(), instance);
+                                    LOG.debug("Found existing bean for type {} {}: {} ", beanType.getName(), instance);
                                 }
                                 else {
                                     LOG.debug("Found existing bean for type {}: {} ", beanType.getName(), instance);

File: inject/src/main/java/org/particleframework/context/ExecutableMethodProcessorListener.java
Patch:
@@ -92,7 +92,7 @@ private Map<Class<? extends Annotation>, List<ExecutableMethod>> loadExecutableM
         Iterable<ExecutableMethod> executableMethods = applicationContext.findServices(ExecutableMethod.class);
         Map<Class<? extends Annotation>, List<ExecutableMethod>> result = new LinkedHashMap<>();
         for (ExecutableMethod executableMethod : executableMethods) {
-            Set<? extends Annotation> annotations = executableMethod.getExecutableAnnotations();
+            Collection<Annotation> annotations = executableMethod.getExecutableAnnotations();
             Class declaringType = executableMethod.getDeclaringType();
             if(applicationContext.findBeanDefinition(declaringType).isPresent()) {
 

File: inject/src/main/java/org/particleframework/context/condition/RequiresCondition.java
Patch:
@@ -94,8 +94,7 @@ private boolean matchesMissingProperty(ConditionContext context, Requires annota
             BeanContext beanContext = context.getBeanContext();
             if(beanContext instanceof PropertyResolver) {
                 PropertyResolver propertyResolver = (PropertyResolver) beanContext;
-                Optional<Object> resolved = propertyResolver.getProperty(property, Object.class);
-                if(resolved.isPresent()) {
+                if(propertyResolver.containsProperty(property)) {
                     return false;
                 }
             }

File: inject/src/main/java/org/particleframework/inject/BeanDefinitionClass.java
Patch:
@@ -1,6 +1,7 @@
 package org.particleframework.inject;
 
 import org.particleframework.context.BeanContext;
+import org.particleframework.core.annotation.AnnotationSource;
 import org.particleframework.core.annotation.Internal;
 
 /**
@@ -13,7 +14,7 @@
  * @since 1.0
  */
 @Internal
-public interface BeanDefinitionClass<T> {
+public interface BeanDefinitionClass<T> extends AnnotationSource {
     /**
      * @return The underlying component type
      */

File: inject/src/main/java/org/particleframework/inject/ExecutableMethod.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
+import java.util.Collection;
 import java.util.Set;
 
 /**
@@ -38,7 +39,7 @@ public interface ExecutableMethod<T, R> extends Executable<T,R>, MethodReference
     /**
      * @return One or many {@link org.particleframework.context.annotation.Executable} annotations for this method
      */
-    Set<? extends Annotation> getExecutableAnnotations();
+    Collection<? extends Annotation> getExecutableAnnotations();
 
     /**
      * <p>The annotated elements that this {@link ExecutableMethod} is able to resolve annotations from</p>

File: inject/src/main/java/org/particleframework/inject/qualifiers/TypeQualifier.java
Patch:
@@ -43,7 +43,7 @@ class TypeQualifier<T> implements Qualifier<T> {
         this.types = new ArrayList<>();
         if(types != null) {
             for (Class type : types) {
-                Optional<Type> typeOpt = AnnotationUtil.findAnnotationWithStereoType(type, Type.class);
+                Optional<Type> typeOpt = AnnotationUtil.findAnnotation(type, Type.class);
                 if(typeOpt.isPresent()) {
                     this.types.addAll(Arrays.asList(typeOpt.get().value()));
                 }

File: inject/src/main/java/org/particleframework/inject/writer/ExecutableMethodWriter.java
Patch:
@@ -279,7 +279,7 @@ public ExecutableMethodWriter visitMethodAnnotationSource(Object declaringType,
     }
 
     /**
-     * Adds a method as a source of annotations
+     * Adds a type as a source of annotations
      *
      * @param declaringType The declaring type
      */

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -142,6 +142,9 @@ private void processBeanDefinitions(TypeElement beanClassElement, BeanDefinition
 
             BeanDefinitionClassWriter beanDefinitionClassWriter =
                 new BeanDefinitionClassWriter(beanTypeName, beanDefinitionName);
+            for (TypeAnnotationSource annotationSource : beanDefinitionWriter.getAnnotationSources()) {
+                beanDefinitionClassWriter.visitAnnotationSource(annotationSource);
+            }
             String className = beanDefinitionClassWriter.getBeanDefinitionQualifiedClassName();
             processed.add(className);
             beanDefinitionClassWriter.setContextScope(

File: router/src/main/java/org/particleframework/web/router/AnnotatedControllerDefaultRouteBuilder.java
Patch:
@@ -49,7 +49,7 @@ public AnnotatedControllerDefaultRouteBuilder(ExecutionHandleLocator executionHa
     @Override
     public void process(ExecutableMethod method) {
         Class<?> declaringType = method.getDeclaringType();
-        Optional<Controller> optional = AnnotationUtil.findAnnotationWithStereoType(declaringType, Controller.class);
+        Optional<Controller> optional = AnnotationUtil.findAnnotation(declaringType, Controller.class);
         if (optional.isPresent() && !AnnotationUtil.findAnnotationWithStereoType(method, Action.class).isPresent()) {
             Controller controllerAnn = optional.get();
 

File: bootstrap/src/main/java/org/particleframework/runtime/executor/ExecutorFactory.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.Executors;
 
 /**
- * Constructs {@link ExecutorService} instances based on {@link ExecutorConfiguration} instances
+ * Constructs {@link ExecutorService} instances based on {@link UserExecutorConfiguration} instances
  *
  * @author Graeme Rocher
  * @since 1.0

File: core/src/main/java/org/particleframework/core/convert/ValueResolver.java
Patch:
@@ -46,7 +46,9 @@ public interface ValueResolver {
      * @param <T> The concrete type
      * @return An optional containing the property value if it exists and is able to be converted
      */
-    <T> Optional<T> get(CharSequence name, Argument<T> requiredType);
+    default <T> Optional<T> get(CharSequence name, Argument<T> requiredType) {
+        return get(name, requiredType.getType());
+    }
     /**
      * Resolve the given property for the given name
      *

File: inject/src/main/java/org/particleframework/context/AbstractBeanDefinitionClass.java
Patch:
@@ -28,6 +28,7 @@ public abstract class AbstractBeanDefinitionClass implements BeanDefinitionClass
     private final String beanDefinitionTypeName;
     private Class beanDefinition;
     private Boolean present;
+    private Boolean enabled;
 
     public AbstractBeanDefinitionClass(String beanTypeName, String beanDefinitionTypeName) {
         this.beanTypeName = beanTypeName;

File: inject/src/main/java/org/particleframework/context/BeanResolutionContext.java
Patch:
@@ -1,18 +1,20 @@
 package org.particleframework.context;
 
 import org.particleframework.core.convert.MutableConvertibleValues;
+import org.particleframework.core.convert.ValueResolver;
 import org.particleframework.core.type.Argument;
 import org.particleframework.inject.*;
 
 import java.util.Deque;
+import java.util.Map;
 
 /**
  * Represents the resolution context for a current resolve of a given bean
  *
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface BeanResolutionContext extends MutableConvertibleValues<Object> {
+public interface BeanResolutionContext extends Map<String, Object>, ValueResolver {
 
     /**
      * @return The context

File: inject/src/main/java/org/particleframework/context/MethodConstructorInjectionPoint.java
Patch:
@@ -44,4 +44,5 @@ public Class getDeclaringType() {
     public Object invoke(Object... args) {
         throw new UnsupportedOperationException("Use MethodInjectionPoint#invoke(..) instead");
     }
+
 }

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -615,7 +615,7 @@ void visitAnnotatedMethod(ExecutableElement method, Object o) {
             boolean requiresReflection = isPrivate || isPackagePrivateAndPackagesDiffer;
             boolean overriddenInjected = overridden && annotationUtils.hasStereotype(overridingMethod, Inject.class);
 
-            if (isParent && isPackagePrivate && !isPackagePrivateAndPackagesDiffer && !overriddenInjected && !isPrivate) {
+            if (isParent && overridden && !overriddenInjected && !isPackagePrivateAndPackagesDiffer && !isPrivate) {
                 // bail out if the overridden method is package private and in the same package
                 // and is not annotated with @Inject
                 return;

File: aop/src/main/java/org/particleframework/aop/writer/AopProxyWriter.java
Patch:
@@ -278,7 +278,7 @@ public void visitBeanDefinitionConstructor(Map<String, Object> argumentTypes, Ma
      */
     public void visitAroundMethod(Object declaringType,
                                   Object returnType,
-                                  List<Object> returnTypeGenericTypes,
+                                  Map<String, Object> returnTypeGenericTypes,
                                   String methodName,
                                   Map<String, Object> argumentTypes,
                                   Map<String, Object> qualifierTypes,
@@ -863,7 +863,7 @@ public void visitMethodInjectionPoint(
     public ExecutableMethodWriter visitExecutableMethod(
             Object declaringType,
             Object returnType,
-            List<Object> returnTypeGenericTypes,
+            Map<String, Object> returnTypeGenericTypes,
             String methodName,
             Map<String, Object> argumentTypes,
             Map<String, Object> qualifierTypes,

File: aop/src/test/groovy/org/particleframework/aop/FooJava$Intercepted.java
Patch:
@@ -54,7 +54,7 @@ public String blah(String name) {
     class $blah0 extends AbstractExecutableMethod {
         protected $blah0() {
             super(ReflectionUtils.findMethod(Foo.class, "blah", String.class).get(),
-                    new Class[0],
+                    new Argument[0],
                     Argument.create(
                             ReflectionUtils.findMethod(Foo.class, "blah", String.class).get(),
                             "name",

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -236,7 +236,7 @@ void visitMethodInjectionPoint(Object declaringType,
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                Object returnType,
-                               List<Object> returnTypeGenericTypes,
+                               Map<String, Object> returnTypeGenericTypes,
                                String methodName,
                                Map<String, Object> argumentTypes,
                                Map<String, Object> qualifierTypes,

File: inject/src/main/java/org/particleframework/bind/annotation/AbstractAnnotatedArgumentBinder.java
Patch:
@@ -20,6 +20,7 @@
 import org.particleframework.core.type.Argument;
 
 import java.lang.annotation.Annotation;
+import java.nio.charset.Charset;
 import java.util.*;
 import java.util.stream.Stream;
 
@@ -37,7 +38,7 @@ protected AbstractAnnotatedArgumentBinder(ConversionService<?> conversionService
         this.conversionService = conversionService;
     }
 
-    protected Optional<T> doBind(Argument<T> argument, ConvertibleValues<?> values, String annotationValue, Locale locale) {
+    protected Optional<T> doBind(Argument<T> argument, ConvertibleValues<?> values, String annotationValue, Locale locale, Charset characterEncoding) {
         Class<T> argumentType = argument.getType();
         Object value = resolveValue(argument, values, argumentType, annotationValue);
         if(value == null) {
@@ -52,8 +53,7 @@ protected Optional<T> doBind(Argument<T> argument, ConvertibleValues<?> values,
             }
         }
 
-        Map<String, Argument<?>> typeParameters = argument.getTypeVariables();
-        ConversionContext conversionContext = ConversionContext.of(argument, typeParameters, locale);
+        ConversionContext conversionContext = ConversionContext.of(argument, locale, characterEncoding);
         return doConvert(value, argumentType, conversionContext);
     }
 

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/CookieAnnotationBinder.java
Patch:
@@ -47,7 +47,7 @@ public Optional<T> bind(Argument<T> argument, HttpRequest source) {
         ConvertibleValues<org.particleframework.http.cookie.Cookie> parameters = source.getCookies();
         Cookie annotation = argument.getAnnotation(Cookie.class);
         String parameterName = annotation.value();
-        return doBind(argument, parameters, parameterName, source.getLocale());
+        return doBind(argument, parameters, parameterName, source.getLocale(), source.getCharacterEncoding());
     }
 
     @Override

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/HeaderAnnotationBinder.java
Patch:
@@ -46,7 +46,7 @@ public Optional<T> bind(Argument<T> argument, HttpRequest source) {
         ConvertibleMultiValues<String> parameters = source.getHeaders();
         Header annotation = argument.getAnnotation(Header.class);
         String parameterName = annotation.value();
-        return doBind(argument, parameters, parameterName, source.getLocale());
+        return doBind(argument, parameters, parameterName, source.getLocale(), source.getCharacterEncoding());
     }
 
     @Override

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/ParameterAnnotationBinder.java
Patch:
@@ -46,6 +46,6 @@ public Optional<T> bind(Argument<T> argument, HttpRequest source) {
         ConvertibleMultiValues<String> parameters = source.getParameters();
         Parameter annotation = argument.getAnnotation(Parameter.class);
         String parameterName = annotation == null ? argument.getName() : annotation.value();
-        return doBind(argument, parameters, parameterName, source.getLocale());
+        return doBind(argument, parameters, parameterName, source.getLocale(), source.getCharacterEncoding());
     }
 }

File: runtime-netty/src/main/java/org/particleframework/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -71,9 +71,7 @@ public Optional<CompletableFuture> bind(Argument<CompletableFuture> argument, Ht
                                 if (firstTypeParameter.isPresent()) {
                                     Argument<?> arg = firstTypeParameter.get();
                                     Class targetType = arg.getType();
-                                    Optional converted = conversionService.convert(body, targetType, ConversionContext.of(
-                                            arg.getTypeVariables()
-                                    ));
+                                    Optional converted = conversionService.convert(body, targetType, ConversionContext.of(arg));
                                     if (converted.isPresent()) {
                                         future.complete(converted.get());
                                     } else {

File: core/src/main/java/org/particleframework/core/convert/ConversionContext.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.particleframework.core.annotation.AnnotationUtil;
 import org.particleframework.core.type.Argument;
+import org.particleframework.core.type.TypeVariableResolver;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
@@ -33,7 +34,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface ConversionContext extends AnnotatedElement {
+public interface ConversionContext extends AnnotatedElement, TypeVariableResolver {
 
 
     /**
@@ -47,6 +48,7 @@ public interface ConversionContext extends AnnotatedElement {
      *
      * @return A map of type variables
      */
+    @Override
     default Map<String, Argument<?>> getTypeVariables() {
         return Collections.emptyMap();
     }

File: inject/src/main/java/org/particleframework/context/AbstractBeanDefinition.java
Patch:
@@ -1171,12 +1171,12 @@ private <B, X extends RuntimeException> B resolveBeanWithGenericsFromMethodArgum
         path.pushMethodArgumentResolve(this, injectionPoint, argument);
         try {
             Qualifier qualifier = resolveQualifier(argument);
-            Class<B> genericType;
+            Class genericType;
             Class argumentType = argument.getType();
             if (argumentType.isArray()) {
                 genericType = argumentType.getComponentType();
             } else {
-                Map<String,Argument> genericTypes = argument.getTypeVariables();
+                Map<String,Argument<?>> genericTypes = argument.getTypeVariables();
                 if (genericTypes.size() != 1) {
                     throw new DependencyInjectionException(resolutionContext, argument, "Expected exactly 1 generic type for argument [" + argument + "] of method [" + injectionPoint.getName() + "]");
                 } else {
@@ -1200,7 +1200,7 @@ private <B> B resolveBeanWithGenericsFromConstructorArgument(BeanResolutionConte
             if (argumentType.isArray()) {
                 genericType = argumentType.getComponentType();
             } else {
-                Map<String,Argument> genericTypes = argument.getTypeVariables();
+                Map<String,Argument<?>> genericTypes = argument.getTypeVariables();
                 if (genericTypes.size() != 1) {
                     throw new DependencyInjectionException(resolutionContext, argument, "Expected exactly 1 generic type argument to constructor");
                 } else {

File: core/src/main/java/org/particleframework/core/convert/DefaultConversionService.java
Patch:
@@ -391,7 +391,7 @@ protected void registerDefaultConverters() {
                 targetComponentType = arg.getType();
             }
             targetComponentType = ReflectionUtils.getWrapperType(targetComponentType);
-            Optional converted = convert(object, targetComponentType);
+            Optional converted = convert(object, targetComponentType, ConversionContext.of(arg != null ? arg.getTypeVariables() : Collections.emptyMap()));
             if (converted.isPresent()) {
                 return Optional.of(converted);
             } else {

File: inject/src/main/java/org/particleframework/inject/writer/AbstractClassFileWriter.java
Patch:
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.lang.reflect.AnnotatedElement;
+import java.lang.reflect.Constructor;
 import java.util.*;
 
 /**
@@ -29,6 +30,8 @@ public abstract class AbstractClassFileWriter implements Opcodes {
     public static final Type TYPE_OBJECT = Type.getType(Object.class);
     public static final Type TYPE_METHOD = Type.getType(java.lang.reflect.Method.class);
     public static final int ACC_PRIVATE_STATIC_FINAL = ACC_PRIVATE | ACC_FINAL | ACC_STATIC;
+    public static final Type TYPE_CONSTRUCTOR = Type.getType(Constructor.class);
+    public static final Type TYPE_CLASS = Type.getType(Class.class);
 
     protected static Type getTypeReference(String className, String... genericTypes) {
         String referenceString = getTypeDescriptor(className, genericTypes);

File: configurations/jackson/src/main/java/org/particleframework/configuration/jackson/convert/ArrayNodeToIterableConverter.java
Patch:
@@ -1,11 +1,11 @@
 package org.particleframework.configuration.jackson.convert;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import org.particleframework.core.convert.ConversionContext;
 import org.particleframework.core.convert.ConversionService;
 import org.particleframework.core.convert.TypeConverter;
+import org.particleframework.core.type.Argument;
 
 import javax.inject.Singleton;
 import java.util.ArrayList;
@@ -30,8 +30,8 @@ public ArrayNodeToIterableConverter(ObjectMapper objectMapper, ConversionService
 
     @Override
     public Optional<Iterable> convert(ArrayNode node, Class<Iterable> targetType, ConversionContext context) {
-            Map<String, Class> typeVariables = context.getTypeVariables();
-            Class elementType = typeVariables.isEmpty() ? Map.class : typeVariables.values().iterator().next();
+            Map<String, Argument<?>> typeVariables = context.getTypeVariables();
+            Class elementType = typeVariables.isEmpty() ? Map.class : typeVariables.values().iterator().next().getType();
             List results = new ArrayList();
             node.elements().forEachRemaining(jsonNode -> {
                 Optional converted = conversionService.convert(jsonNode, elementType);

File: core/src/main/java/org/particleframework/core/reflect/ReflectionUtils.java
Patch:
@@ -228,6 +228,6 @@ public static NoSuchMethodError newNoSuchMethodError(Class declaringType, String
         Stream<String> stringStream = Arrays.stream(argumentTypes).map(Class::getSimpleName);
         String argsAsText = stringStream.collect(Collectors.joining(","));
 
-        return new NoSuchMethodError("Required method "+name+"("+argsAsText+") not found for class: " + declaringType.getName());
+        return new NoSuchMethodError("Required method "+name+"("+argsAsText+") not found for class: " + declaringType.getName() + ". This could indicate a classpath issue, or out-of-date class metadata. Check your classpath and recompile classes as necessary.");
     }
 }

File: inject/src/main/java/org/particleframework/context/DefaultBeanResolutionContext.java
Patch:
@@ -3,7 +3,6 @@
 import org.particleframework.context.exceptions.CircularDependencyException;
 import org.particleframework.core.annotation.Internal;
 import org.particleframework.core.type.Argument;
-import org.particleframework.core.type.DefaultArgument;
 import org.particleframework.inject.*;
 
 import java.util.*;
@@ -179,7 +178,7 @@ class FieldSegment extends AbstractSegment {
         FieldSegment(BeanDefinition declaringClass, FieldInjectionPoint fieldInjectionPoint) {
             super(declaringClass,
                     fieldInjectionPoint.getName(),
-                    new DefaultArgument(fieldInjectionPoint.getType(), fieldInjectionPoint.getName(), fieldInjectionPoint.getQualifier()));
+                    Argument.create(fieldInjectionPoint.getType(), fieldInjectionPoint.getName(), fieldInjectionPoint.getQualifier()));
         }
         @Override
         public String toString() {

File: inject/src/main/java/org/particleframework/context/DefaultFieldInjectionPoint.java
Patch:
@@ -71,7 +71,7 @@ public void set(Object object, T instance) {
     }
 
     @Override
-    public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {
+    public <A extends Annotation> A getAnnotation(Class<A> annotationClass) {
         return field.getAnnotation(annotationClass);
     }
 

File: inject/src/main/java/org/particleframework/context/MethodConstructorInjectionPoint.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.particleframework.context;
 
+import org.particleframework.core.type.Argument;
 import org.particleframework.inject.BeanDefinition;
 import org.particleframework.inject.ConstructorInjectionPoint;
 
@@ -30,8 +31,8 @@
  * @since 1.0
  */
 class MethodConstructorInjectionPoint extends DefaultMethodInjectionPoint implements ConstructorInjectionPoint {
-    public MethodConstructorInjectionPoint(BeanDefinition declaringComponent, Method method, boolean requiresReflection, Map<String, Class> arguments, Map<String, Annotation> qualifiers, Map<String, List<Class>> genericTypes) {
-        super(declaringComponent, method, requiresReflection, arguments, qualifiers, genericTypes);
+    public MethodConstructorInjectionPoint(BeanDefinition declaringComponent, Method method, boolean requiresReflection, Argument...arguments) {
+        super(declaringComponent, method, requiresReflection, arguments);
     }
 
     @Override

File: java-inject/src/main/java/org/particleframework/annotation/processing/ExecutableElementParamInfo.java
Patch:
@@ -8,7 +8,7 @@
 class ExecutableElementParamInfo {
     Map<String, Object> parameters = new LinkedHashMap<>();
     Map<String, Object> qualifierTypes = new LinkedHashMap<>();
-    Map<String, List<Object>> genericTypes = new LinkedHashMap<>();
+    Map<String, Map<String, Object>> genericTypes = new LinkedHashMap<>();
 
     void addParameter(String paramName, Object type) {
         parameters.put(paramName, type);
@@ -18,7 +18,7 @@ void addQualifierType(String paramName, Object qualifier) {
         qualifierTypes.put(paramName, qualifier);
     }
 
-    void addGenericTypes(String paramName, List<Object> generics) {
+    void addGenericTypes(String paramName, Map<String, Object> generics) {
         genericTypes.put(paramName, generics);
     }
 
@@ -30,7 +30,7 @@ Map<String, Object> getQualifierTypes() {
         return Collections.unmodifiableMap(qualifierTypes);
     }
 
-    Map<String, List<Object>> getGenericTypes() {
+    Map<String, Map<String, Object>> getGenericTypes() {
         return Collections.unmodifiableMap(genericTypes);
     }
 }

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/DefaultBodyAnnotationBinder.java
Patch:
@@ -35,8 +35,8 @@ public Optional<T> bind(Argument<T> argument, HttpRequest source) {
         Object body = source.getBody();
         return conversionService.convert(body, argument.getType(), new ConversionContext() {
             @Override
-            public Map<String, Class> getTypeVariables() {
-                return argument.getTypeParameters();
+            public Map<String, Argument<?>> getTypeVariables() {
+                return argument.getTypeVariables();
             }
 
             @Override

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -1524,14 +1524,15 @@ static void pushGetConstructorForType(MethodVisitor methodVisitor, Type beanType
         }
 
         // invoke Class.getConstructor()
-        Method getConstructorMethod = ReflectionUtils.getDeclaredMethod(Class.class, "getConstructor", Class[].class)
+        String getDeclaredConstructorMethod = "getDeclaredConstructor";
+        Method getConstructorMethod = ReflectionUtils.getDeclaredMethod(Class.class, getDeclaredConstructorMethod, Class[].class)
                 .orElseThrow(() ->
                         new IllegalStateException("Class.getConstructor(..) method not found")
                 );
         methodVisitor.visitMethodInsn(
                 INVOKEVIRTUAL,
                 Type.getInternalName(Class.class),
-                "getConstructor",
+                getDeclaredConstructorMethod,
                 Type.getType(getConstructorMethod).getDescriptor(),
                 false);
     }

File: core/src/main/java/org/particleframework/core/util/ArrayUtil.java
Patch:
@@ -37,6 +37,9 @@ public static <T> T[] concat(T[] a, T... b) {
         int aLen = a.length;
         int bLen = b.length;
 
+        if(bLen == 0) return a;
+        if(aLen == 0) return b;
+
         @SuppressWarnings("unchecked")
         T[] c = (T[]) Array.newInstance(a.getClass().getComponentType(), aLen+bLen);
         System.arraycopy(a, 0, c, 0, aLen);

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionVisitor.java
Patch:
@@ -220,6 +220,8 @@ void visitMethodInjectionPoint(Object declaringType,
      * @param argumentTypes  The argument types. Note: an ordered map should be used such as LinkedHashMap. Can be null or empty.
      * @param qualifierTypes The qualifier types of each argument. Can be null.
      * @param genericTypes   The generic types of each argument. Can be null.
+     *
+     * @return The {@link ExecutableMethodWriter}. Calls should call {@link ExecutableMethodWriter#visitEnd()}  to finalize the method
      */
     ExecutableMethodWriter visitExecutableMethod(Object declaringType,
                                Object returnType,

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -427,7 +427,7 @@ protected void accept(ExecutableElement method, AopProxyWriter aopProxyWriter) {
                                 modelUtils.resolveTypeReference(beanMethod.getEnclosingElement()),
                                 beanMethod.getSimpleName().toString(),
                                 beanMethodParams.getParameters()
-                        );
+                        ).visitEnd();
 
 
                         aopProxyWriter.visitAroundMethod(
@@ -471,7 +471,8 @@ void visitExecutableMethod(ExecutableElement method) {
                 method.getSimpleName().toString(),
                 params.getParameters(),
                 params.getQualifierTypes(),
-                params.getGenericTypes());
+                params.getGenericTypes())
+            .visitEnd();
 
             boolean hasExplicitAround = annotationUtils.hasStereotype(method, AROUND_TYPE);
             if(isAopProxyType || hasExplicitAround) {

File: java-inject/src/test/groovy/org/particleframework/aop/introduction/InterfaceIntroductionClass.java
Patch:
@@ -27,7 +27,7 @@
 @Stub
 @Mutating("name")
 @Singleton
-public interface InterfaceIntroductionClass<A> {
+public interface InterfaceIntroductionClass<A> extends SuperInterface<A> {
 
 
     String test(String name);

File: router/src/main/java/org/particleframework/web/router/AnnotatedMethodRouteBuilder.java
Patch:
@@ -136,7 +136,7 @@ private String resolveUri(String value, ExecutableMethod method, UriNamingStrate
 
     @Override
     public void process(ExecutableMethod<Object, Object> method) {
-        Optional<Annotation> actionAnn = method.findAnnotation(Action.class);
+        Optional<Annotation> actionAnn = method.findAnnotationWithStereoType(Action.class);
         actionAnn.ifPresent(annotation -> {
                     Class<? extends Annotation> annotationClass = annotation.annotationType();
                     BiFunction<Annotation, ExecutableMethod, Route> handler = httpMethodsHandlers.get(annotationClass);

File: router/src/main/java/org/particleframework/web/router/qualifier/ConsumesMediaTypeQualifier.java
Patch:
@@ -43,7 +43,7 @@ public ConsumesMediaTypeQualifier(MediaType contentType) {
     @Override
     public Stream<BeanDefinition<T>> reduce(Class<T> beanType, Stream<BeanDefinition<T>> candidates) {
         return candidates.filter(candidate -> {
-                    Consumes consumes = candidate.getType().getAnnotation(Consumes.class);
+                    Consumes consumes = candidate.getAnnotation(Consumes.class);
                     if (consumes != null) {
                         Set<String> consumedTypes = Arrays.stream(consumes.value()).map(MediaType::new).map(MediaType::getExtension).collect(Collectors.toSet());
                         return consumedTypes.contains(contentType.getExtension());

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -178,6 +178,7 @@ class AnnBeanElementVisitor extends ElementScanner8<Object,Object> {
             beanDefinitionWriters = new LinkedHashMap<>();
             this.isFactoryType = annotationUtils.hasStereotype(concreteClass, Factory.class);
             this.isConfigurationPropertiesType = annotationUtils.hasStereotype(concreteClass, ConfigurationProperties.class);
+
             this.isAopProxyType = annotationUtils.hasStereotype(concreteClass, AROUND_TYPE);
             this.isProxyTargetClass = isAopProxyType && annotationUtils.isAttributeTrue(concreteClass, AROUND_TYPE, "proxyTarget");
             this.isHotSwappable = isProxyTargetClass && annotationUtils.isAttributeTrue(concreteClass, AROUND_TYPE, "hotswap");

File: inject/src/main/java/org/particleframework/inject/writer/BeanDefinitionWriter.java
Patch:
@@ -864,6 +864,8 @@ static void pushGetMethodFromTypeCall(MethodVisitor methodVisitor, Type declarin
         // lookup the Method instance from the declaring type
         methodVisitor.visitLdcInsn(declaringType);
         pushMethodNameAndTypesArguments(methodVisitor, methodName, argumentTypes);
+
+
         // 1st argument to addInjectPoint: The Method
         pushInvokeMethodOnClass(methodVisitor, "getDeclaredMethod", String.class, Class[].class);
     }

File: java-inject/src/main/java/org/particleframework/annotation/processing/AnnotationUtils.java
Patch:
@@ -105,7 +105,7 @@ Optional<AnnotationMirror> findAnnotationWithStereotype(Element element, String
             if (stereotype.equals(annotationType.toString())) {
                 return Optional.of(ann);
             } else if (!Arrays.asList("Retention", "Documented", "Target").contains(annotationType.asElement().getSimpleName().toString())) {
-                if (findAnnotationWithStereotype(annotationType.asElement(), stereotype) != null) {
+                if (findAnnotationWithStereotype(annotationType.asElement(), stereotype).isPresent()) {
                     return Optional.of(ann);
                 }
             }

File: aop/src/main/java/org/particleframework/aop/internal/InterceptorChain.java
Patch:
@@ -174,9 +174,8 @@ public static Interceptor[] resolveInterceptors(AnnotatedElement method, Interce
                         Arrays.stream(type.value())
                 ).collect(Collectors.toSet());
 
-        Interceptor[] resolved = Arrays.stream(interceptors)
+        return Arrays.stream(interceptors)
                 .filter(i -> applicableClasses.contains(i.getClass()))
                 .toArray(Interceptor[]::new);
-        return resolved;
     }
 }

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -367,7 +367,7 @@ void visitExecutableMethod(ExecutableElement method) {
 
 
 
-
+                aopProxyWriter.visitInterceptorTypes(interceptorTypes);
                 aopProxyWriter.visitAroundMethod(
                         modelUtils.resolveTypeReference(concreteClass),
                         modelUtils.resolveTypeReference(returnType),

File: inject/src/main/groovy/org/particleframework/context/env/groovy/GroovyPropertySourceLoader.java
Patch:
@@ -35,8 +35,9 @@ public Optional<PropertySource> load(Environment environment) {
 
     private void loadProperties(Environment environment, String fileName, Map<String, Object> finalMap) {
         Optional<URL> config = environment.getResource(fileName);
-        ConfigurationEvaluator evaluator = new ConfigurationEvaluator();
+
         config.ifPresent(res -> {
+            ConfigurationEvaluator evaluator = new ConfigurationEvaluator();
             String path = res.getPath();
             if(!path.contains("src/main/groovy")) {
                 try(InputStream input = res.openStream()) {

File: router/src/main/java/org/particleframework/web/router/AnnotatedControllerDefaultRouteBuilder.java
Patch:
@@ -26,6 +26,7 @@
 import org.particleframework.inject.Argument;
 import org.particleframework.inject.ExecutableMethod;
 import org.particleframework.stereotype.Controller;
+import org.particleframework.web.router.annotation.Action;
 import org.particleframework.web.router.annotation.Consumes;
 
 import javax.inject.Singleton;
@@ -49,7 +50,7 @@ public AnnotatedControllerDefaultRouteBuilder(ExecutionHandleLocator executionHa
     public void process(ExecutableMethod method) {
         Class<?> declaringType = method.getDeclaringType();
         Controller controllerAnn = AnnotationUtil.findAnnotationWithStereoType(declaringType, Controller.class);
-        if (controllerAnn != null) {
+        if (controllerAnn != null && AnnotationUtil.findAnnotationWithStereoType(method, Action.class) == null) {
 
 
             Class[] argumentTypes = method.getArgumentTypes();

File: aop/src/test/groovy/org/particleframework/aop/FooJava$Intercepted.java
Patch:
@@ -45,7 +45,7 @@ public class FooJava$Intercepted extends Foo {
 
     @Override
     public String blah(String name) {
-        InterceptorChain<String> chain = new MethodIntercep torChain<>(
+        InterceptorChain<String> chain = new MethodInterceptorChain<>(
                 interceptors,
                 this,
                 this.executionHandles[0],

File: aop/src/main/java/org/particleframework/aop/annotation/Trace.java
Patch:
@@ -16,6 +16,7 @@
 package org.particleframework.aop.annotation;
 
 import org.particleframework.aop.Around;
+import org.particleframework.context.annotation.Type;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -30,7 +31,8 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-@Around(TraceInterceptor.class)
+@Around
+@Type(TraceInterceptor.class)
 @Documented
 @Retention(RUNTIME)
 @Target({ElementType.METHOD})

File: core/src/main/groovy/org/particleframework/core/annotation/AnnotationUtil.java
Patch:
@@ -29,7 +29,7 @@ public class AnnotationUtil {
      * @param stereotype The stereotype
      * @return The annotation
      */
-    public static <T extends Annotation> T findAnnotationWithStereoType(Class cls, Class stereotype) {
+    public static <T extends Annotation> T findAnnotationWithStereoType(Class cls, Class<T> stereotype) {
         Annotation[] annotations = cls.getAnnotations();
         return findAnnotationWithStereoType(stereotype, annotations);
     }
@@ -41,7 +41,7 @@ public static <T extends Annotation> T findAnnotationWithStereoType(Class cls, C
      * @param annotations The annotations to search
      * @return The annotation
      */
-    public static <T extends Annotation> T findAnnotationWithStereoType(Class stereotype, Annotation... annotations) {
+    public static <T extends Annotation> T findAnnotationWithStereoType(Class<T> stereotype, Annotation... annotations) {
         for(Annotation ann : annotations) {
             if(stereotype.isInstance(ann)) {
                 return (T) ann;
@@ -69,7 +69,7 @@ public static Set<? extends Annotation> findAnnotationsWithStereoType(Class<?> s
                 annotationSet.add(  ann);
             }
             else if(isNotInternalAnnotation(ann)) {
-                if(findAnnotationWithStereoType(ann.annotationType(), stereotype) != null) {
+                if(findAnnotationWithStereoType(ann.annotationType(), (Class)stereotype) != null) {
                     annotationSet.add( ann);
                 }
             }

File: inject/src/main/groovy/org/particleframework/context/DefaultArgument.java
Patch:
@@ -104,7 +104,7 @@ public Annotation getQualifier() {
     }
 
     @Override
-    public <A extends Annotation> A findAnnotation(Class<? extends Annotation> stereotype) {
+    public <A extends Annotation> A findAnnotation(Class<A> stereotype) {
         return AnnotationUtil.findAnnotationWithStereoType(stereotype, annotations);
     }
 

File: inject/src/main/groovy/org/particleframework/inject/Argument.java
Patch:
@@ -43,5 +43,5 @@ public interface Argument<T> extends AnnotatedElement {
      * @param <A> The annotation concrete type
      * @return The annotation or null
      */
-    <A extends Annotation> A findAnnotation(Class<? extends Annotation> stereotype);
+    <A extends Annotation> A findAnnotation(Class<A> stereotype);
 }
\ No newline at end of file

File: inject/src/main/groovy/org/particleframework/inject/DefaultArgumentValue.java
Patch:
@@ -62,7 +62,7 @@ public Annotation getQualifier() {
     }
 
     @Override
-    public <A extends Annotation> A findAnnotation(Class<? extends Annotation> stereotype) {
+    public <A extends Annotation> A findAnnotation(Class<A> stereotype) {
         return argument.findAnnotation(stereotype);
     }
 

File: inject/src/main/groovy/org/particleframework/inject/ExecutionHandle.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.particleframework.inject;
 
-import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
 
 /**

File: runtime-http/src/main/java/org/particleframework/http/server/exceptions/ContentLengthExceededHandler.java
Patch:
@@ -35,3 +35,4 @@ public Object handle(HttpRequest request, ContentLengthExceededException excepti
         return HttpResponse.status(HttpStatus.REQUEST_ENTITY_TOO_LARGE);
     }
 }
+

File: java-inject/src/test/groovy/org/particleframework/inject/configproperties/MyConfig.java
Patch:
@@ -32,7 +32,7 @@ public int getDefaultPort() {
         return defaultPort;
     }
 
-    @ConfigurationProperties("foo.bar.inner")
+    @ConfigurationProperties("inner")
     public static class Inner {
         boolean enabled;
 

File: ast/src/test/groovy/org/particleframework/inject/configurations/requiresconditionfalse/TravisEnvCondition.java
Patch:
@@ -1,4 +1,4 @@
-package org.particleframework.inject.configurations.requiresconditionclass;
+package org.particleframework.inject.configurations.requiresconditionfalse;
 
 import org.particleframework.context.condition.Condition;
 import org.particleframework.context.condition.ConditionContext;

File: inject/src/main/groovy/org/particleframework/context/condition/RequiresCondition.java
Patch:
@@ -104,7 +104,7 @@ private boolean matchesConditions(ConditionContext context, Requires annotation)
         }
         else {
             try {
-                return !condition.newInstance().matches(context);
+                return condition.newInstance().matches(context);
             } catch (Throwable e) {
                 if(LOG.isErrorEnabled()) {
                     LOG.error("Error instantiating condition ["+condition.getName()+"]: " + e.getMessage(), e);

File: java-inject/src/test/groovy/org/particleframework/inject/configurations/requiresconditionfalse/TravisBean.java
Patch:
@@ -1,4 +1,4 @@
-package org.particleframework.inject.configurations.requirescondition;
+package org.particleframework.inject.configurations.requiresconditionfalse;
 
 import javax.inject.Singleton;
 

File: java-inject/src/test/groovy/org/particleframework/inject/configurations/requiresconditionfalse/TravisEnvCondition.java
Patch:
@@ -1,4 +1,4 @@
-package org.particleframework.inject.configurations.requirescondition;
+package org.particleframework.inject.configurations.requiresconditionfalse;
 
 import org.particleframework.context.condition.Condition;
 import org.particleframework.context.condition.ConditionContext;

File: java-inject/src/test/groovy/org/particleframework/inject/configurations/requiresconditionfalse/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @Configuration
 @Requires(condition = TravisEnvCondition.class)
-package org.particleframework.inject.configurations.requirescondition;
+package org.particleframework.inject.configurations.requiresconditionfalse;
 
 import org.particleframework.context.annotation.Configuration;
 import org.particleframework.context.annotation.Requires;

File: core/src/main/groovy/org/particleframework/core/convert/DefaultConversionService.java
Patch:
@@ -33,7 +33,6 @@
  * @since 1.0
  */
 public class DefaultConversionService implements ConversionService<DefaultConversionService> {
-    public static final DefaultConversionService SHARED_INSTANCE = new DefaultConversionService();
 
     private final Map<ConvertiblePair, TypeConverter> typeConverters = new ConcurrentHashMap<>();
     private final Cache<ConvertiblePair, TypeConverter> converterCache = Caffeine.newBuilder()

File: inject/src/main/groovy/org/particleframework/config/MapPropertyResolver.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.particleframework.core.convert.ConversionContext;
 import org.particleframework.core.convert.ConversionService;
-import org.particleframework.core.convert.DefaultConversionService;
 
 import java.util.Map;
 import java.util.Optional;
@@ -19,7 +18,7 @@ public class MapPropertyResolver implements PropertyResolver {
 
     public MapPropertyResolver(Map<String, Object> map) {
         this.map = map;
-        this.conversionService = DefaultConversionService.SHARED_INSTANCE;
+        this.conversionService = ConversionService.SHARED;
     }
 
     public MapPropertyResolver(Map<String, Object> map, ConversionService conversionService) {

File: inject/src/main/groovy/org/particleframework/context/DefaultApplicationContext.java
Patch:
@@ -3,7 +3,6 @@
 import org.particleframework.context.env.DefaultEnvironment;
 import org.particleframework.context.env.Environment;
 import org.particleframework.core.convert.ConversionService;
-import org.particleframework.core.convert.DefaultConversionService;
 import org.particleframework.core.convert.TypeConverter;
 import org.particleframework.core.reflect.GenericTypeUtils;
 import org.particleframework.inject.BeanConfiguration;
@@ -95,7 +94,7 @@ public <T> T getBean(BeanResolutionContext resolutionContext, Class<T> beanType,
      * @return The conversion service
      */
     protected ConversionService createConversionService() {
-        return DefaultConversionService.SHARED_INSTANCE;
+        return ConversionService.SHARED;
     }
 
     @Override

File: inject/src/main/groovy/org/particleframework/context/env/DefaultEnvironment.java
Patch:
@@ -5,7 +5,6 @@
 import org.particleframework.core.annotation.Nullable;
 import org.particleframework.core.convert.ConversionContext;
 import org.particleframework.core.convert.ConversionService;
-import org.particleframework.core.convert.DefaultConversionService;
 import org.particleframework.core.convert.TypeConverter;
 import org.particleframework.core.io.scan.CachingClassPathAnnotationScanner;
 import org.particleframework.core.io.scan.ClassPathAnnotationScanner;
@@ -45,11 +44,11 @@ public class DefaultEnvironment implements Environment {
 
 
     public DefaultEnvironment(String name, ClassLoader classLoader) {
-        this(name,classLoader, DefaultConversionService.SHARED_INSTANCE);
+        this(name,classLoader, ConversionService.SHARED);
     }
 
     public DefaultEnvironment(String name) {
-        this(name,DefaultEnvironment.class.getClassLoader(), DefaultConversionService.SHARED_INSTANCE);
+        this(name,DefaultEnvironment.class.getClassLoader(), ConversionService.SHARED);
     }
 
     public DefaultEnvironment(String name, ClassLoader classLoader, ConversionService conversionService) {

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -586,7 +586,7 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                     TypeElement typeElement = elementUtils.getTypeElement(typeUtils.erasure(declaredType).toString());
                     assert (typeElement != null) : "typeElement cannot be null";
 
-                    params.addParameter(argName, typeElement.toString());
+                    params.addParameter(argName, modelUtils.resolveTypeReference(typeElement));
                     List<Object> typeParams = genericUtils.resolveGenericTypes(declaredType);
                     if (!typeParams.isEmpty()) {
                         params.addGenericTypes(argName, typeParams);

File: router/src/main/groovy/org/particleframework/web/router/DefaultRouter.java
Patch:
@@ -18,6 +18,7 @@
 import org.particleframework.http.HttpMethod;
 import org.particleframework.http.HttpStatus;
 
+import javax.inject.Singleton;
 import java.util.*;
 import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.stream.Stream;
@@ -28,6 +29,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
+@Singleton
 public class DefaultRouter implements Router {
 
     private final UriRoute[][] routesByMethod = new UriRoute[HttpMethod.values().length][];

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpResponseFactory.java
Patch:
@@ -18,7 +18,7 @@
 import io.netty.handler.codec.http.DefaultFullHttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpVersion;
-import org.particleframework.core.convert.DefaultConversionService;
+import org.particleframework.core.convert.ConversionService;
 import org.particleframework.http.HttpResponseFactory;
 import org.particleframework.http.HttpStatus;
 import org.particleframework.http.MutableHttpResponse;
@@ -32,7 +32,7 @@
 public class NettyHttpResponseFactory implements HttpResponseFactory {
     @Override
     public <T> MutableHttpResponse<T> ok(T body) {
-        MutableHttpResponse<T> ok = new NettyHttpResponse<>(DefaultConversionService.SHARED_INSTANCE);
+        MutableHttpResponse<T> ok = new NettyHttpResponse<>(ConversionService.SHARED);
 
         return body != null ? ok.setBody(body) : ok;
     }
@@ -48,6 +48,6 @@ public MutableHttpResponse status(HttpStatus status, String reason) {
         }
 
         DefaultFullHttpResponse fullHttpResponse = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, nettyStatus);
-        return new NettyHttpResponse(fullHttpResponse, DefaultConversionService.SHARED_INSTANCE);
+        return new NettyHttpResponse(fullHttpResponse, ConversionService.SHARED);
     }
 }

File: java-inject/src/test/groovy/org/particleframework/inject/configurations/requirescondition/TravisBean.java
Patch:
@@ -2,9 +2,6 @@
 
 import javax.inject.Singleton;
 
-/**
- * Created by graemerocher on 20/05/2017.
- */
 @Singleton
 public class TravisBean {
 }

File: inject/src/main/groovy/org/particleframework/inject/ExecutableMethod.java
Patch:
@@ -36,7 +36,7 @@ public interface ExecutableMethod<T, R> extends Executable<T,R> {
     /**
      * @return The bean that declares this injection point
      */
-    Class getDeclaringType();
+    Class<?> getDeclaringType();
 
     /**
      * @return The name of the method

File: router/src/main/groovy/org/particleframework/web/router/ErrorRoute.java
Patch:
@@ -55,7 +55,7 @@ public interface ErrorRoute extends Route {
     <T> Optional<RouteMatch<T>> match(Class originatingClass, Throwable exception);
 
     @Override
-    ErrorRoute accept(MediaType mediaType);
+    ErrorRoute accept(MediaType... mediaType);
 
     @Override
     ErrorRoute nest(Runnable nested);

File: router/src/main/groovy/org/particleframework/web/router/ResourceRoute.java
Patch:
@@ -32,10 +32,10 @@ public interface ResourceRoute extends Route {
     /**
      * Accept the given media type
      *
-     * @param mediaType The media type
+     * @param mediaTypes The media types
      * @return This route
      */
-    ResourceRoute accept(MediaType mediaType);
+    ResourceRoute accept(MediaType... mediaTypes);
 
     /**
      * Nest more routes within this {@link ResourceRoute}

File: router/src/main/groovy/org/particleframework/web/router/StatusRoute.java
Patch:
@@ -44,7 +44,7 @@ public interface StatusRoute extends Route {
     <T> Optional<RouteMatch<T>> match(HttpStatus status);
 
     @Override
-    StatusRoute accept(MediaType mediaType);
+    StatusRoute accept(MediaType... mediaType);
 
     @Override
     StatusRoute nest(Runnable nested);

File: core/src/main/groovy/org/particleframework/core/reflect/ReflectionUtils.java
Patch:
@@ -16,6 +16,7 @@
  * @since 1.0
  */
 public class ReflectionUtils {
+    public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];
     private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS
             = Collections.unmodifiableMap(new LinkedHashMap<Class<?>, Class<?>>() {
         {

File: runtime-green-lightning/src/main/groovy/org/particleframework/http/server/greenlightning/GreenLightningParticleDispatcher.java
Patch:
@@ -21,6 +21,7 @@
 import org.particleframework.http.HttpMethod;
 import org.particleframework.web.router.RouteMatch;
 import org.particleframework.web.router.Router;
+import org.particleframework.web.router.UriRouteMatch;
 
 import java.util.Optional;
 
@@ -41,7 +42,7 @@ public boolean restRequest(final HTTPRequestReader request) {
 
         final Optional<Router> routerBean = applicationContext.findBean(Router.class);
 
-        final Optional<RouteMatch<Object>> routeMatch = routerBean.flatMap((router) -> {
+        final Optional<UriRouteMatch<Object>> routeMatch = routerBean.flatMap((router) -> {
                     return router.find(HttpMethod.GET, routePath.toString())
 //                            .filter((match) -> match.test( ?? ))
                             .findFirst();

File: core/src/main/groovy/org/particleframework/core/io/service/SoftServiceLoader.java
Patch:
@@ -62,8 +62,7 @@ private SoftServiceLoader(Class<S> serviceType, ClassLoader classLoader, Predica
      * @return A new service loader
      */
     public static <S> SoftServiceLoader<S> load(Class<S> service) {
-        ClassLoader cl = Thread.currentThread().getContextClassLoader();
-        return SoftServiceLoader.load(service, cl);
+        return SoftServiceLoader.load(service, SoftServiceLoader.class.getClassLoader());
     }
 
 

File: http/src/main/groovy/org/particleframework/http/MutableHttpResponse.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.Map;
 
 /**
+ * A version of the {@link HttpResponse} interface that is mutable allowing the ability to set headers, character encoding etc.
+ *
  * @author Graeme Rocher
  * @since 1.0
  */

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/encoders/HttpResponseEncoder.java
Patch:
@@ -19,6 +19,8 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
 import io.netty.handler.codec.http.DefaultFullHttpResponse;
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpUtil;
 import org.particleframework.core.order.Ordered;
 import org.particleframework.http.HttpResponse;
 import org.particleframework.http.server.netty.NettyHttpResponse;

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/encoders/ObjectToJsonFallbackEncoder.java
Patch:
@@ -65,6 +65,7 @@ protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out) t
         DefaultFullHttpResponse httpResponse = res != null ? res.getNativeResponse() : new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
 
         byte[] bytes = objectMapper.writeValueAsBytes(msg);
+
         ByteBuf content = Unpooled.copiedBuffer(bytes);
         int len = bytes.length;
         httpResponse

File: http/src/main/groovy/org/particleframework/http/HttpResponse.java
Patch:
@@ -154,5 +154,4 @@ default HttpResponse setStatus(HttpStatus status) {
         return setStatus(status, null);
     }
 
-
 }
\ No newline at end of file

File: http/src/main/groovy/org/particleframework/http/cookie/CookieFactory.java
Patch:
@@ -25,6 +25,9 @@
  */
 public interface CookieFactory {
 
+    /**
+     * The default {@link CookieFactory} instance
+     */
     CookieFactory INSTANCE = SoftServiceLoader.load(CookieFactory.class)
                                               .first()
                                               .map(SoftServiceLoader.Service::load)

File: inject/src/main/groovy/org/particleframework/context/ServiceLocator.java
Patch:
@@ -41,7 +41,7 @@ default <T> Iterable<T> findServices(Class<T> type) {
      * Find all services for the given type and condition
      *
      * @param type The type
-     * @param condition A condition that accepts the name of the service and allows condition loading
+     * @param condition A condition that accepts the name of the service and allows conditional loading
      * @param <T> The generic type
      * @return The matching services
      */

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpRequest.java
Patch:
@@ -64,7 +64,7 @@ public NettyHttpRequest(io.netty.handler.codec.http.HttpRequest nettyRequest,
                             HttpServerConfiguration serverConfiguration) {
         Objects.requireNonNull(nettyRequest, "Netty request cannot be null");
         Objects.requireNonNull(conversionService, "ConversionService cannot be null");
-        this.requestContext = new NettyHttpRequestContext(ctx, this, serverConfiguration);
+        this.requestContext = new NettyHttpRequestContext(ctx, this, serverConfiguration, conversionService);
         this.nettyRequest = nettyRequest;
         this.httpMethod = HttpMethod.valueOf(nettyRequest.method().name());
         String fullUri = nettyRequest.uri();

File: http/src/main/groovy/org/particleframework/http/HttpRequest.java
Patch:
@@ -44,7 +44,7 @@ public interface HttpRequest<B> extends HttpMessage<B> {
      * @return Obtain the remote address
      */
     InetSocketAddress getRemoteAddress();
-    
+
     /**
      * @return The protocol in use
      */

File: router/src/main/groovy/org/particleframework/web/router/RouteBuilder.java
Patch:
@@ -58,7 +58,7 @@ public interface RouteBuilder {
      *     DELETE "/book{/id}"
      * }</pre>
      *
-     * <p>By default it is assumed the accepted and returned content type is {@link org.particleframework.http.MediaType#JSON}.</p>
+     * <p>By default it is assumed the accepted and returned content type is {@link org.particleframework.http.MediaType#APPLICATION_JSON_TYPE}.</p>
      *
      * @param cls The class
      * @return The {@link ResourceRoute}
@@ -89,7 +89,7 @@ default ResourceRoute resources(Object instance) {
      *     DELETE "/book"
      * }</pre>
      *
-     * <p>By default it is assumed the accepted and returned content type is {@link org.particleframework.http.MediaType#JSON}.</p>
+     * <p>By default it is assumed the accepted and returned content type is {@link org.particleframework.http.MediaType#APPLICATION_JSON_TYPE}.</p>
      *
      * @param cls The class
      * @return The {@link ResourceRoute}

File: router/src/test/groovy/org/particleframework/context/router/RouteBuilderTests.java
Patch:
@@ -90,9 +90,9 @@ public MyRouteBuilder(ApplicationContext beanContext) {
         @Inject
         void someRoutes(BookController controller, AuthorController authorController) {
             GET("/conditional{/message}", controller, "hello", String.class)
-                    .where((request)-> request.getContentType().equals(MediaType.JSON));
+                    .where((request)-> request.getContentType().equals(MediaType.APPLICATION_JSON_TYPE));
 
-            GET("/message{/message}", controller, "hello", String.class).accept(JSON);
+            GET("/message{/message}", controller, "hello", String.class).accept(APPLICATION_JSON_TYPE);
             GET("/books{/id}", controller, "show").nest(() ->
                     GET("/authors", controller)
             );
@@ -107,7 +107,7 @@ void someRoutes(BookController controller, AuthorController authorController) {
             );
 
             GET("/books", controller);
-            POST("/books", controller, "save").accept(JSON);
+            POST("/books", controller, "save").accept(APPLICATION_JSON_TYPE);
 
             // handle errors TODO
 //            error(RuntimeException.class, controller, "error");

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -36,7 +36,6 @@
 import org.particleframework.http.binding.binders.request.BodyArgumentBinder;
 import org.particleframework.http.binding.binders.request.NonBlockingBodyArgumentBinder;
 import org.particleframework.http.server.HttpServerConfiguration;
-import org.particleframework.http.server.netty.configuration.NettyHttpServerConfiguration;
 import org.particleframework.inject.Argument;
 import org.particleframework.inject.ReturnType;
 import org.particleframework.runtime.server.EmbeddedServer;
@@ -217,6 +216,8 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws E
                                     if (!requiresBody) {
                                         // TODO: here we need a way to make the encoding of the result flexible
                                         // also support for GSON views etc.
+
+                                        // TODO: Need to run this logic on a separate thread pool if the method is blocking
                                         channel.eventLoop().execute(() -> {
                                                     Object result = route.execute(argumentValues);
                                                     Charset charset = serverConfiguration.getDefaultCharset();
@@ -228,7 +229,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws E
                                         MediaType contentType = nettyHttpRequest.getContentType();
                                         StreamedHttpRequest streamedHttpRequest = (StreamedHttpRequest) msg;
 
-                                        if (contentType != null && MediaType.JSON.getExtension().equals(contentType.getExtension())) {
+                                        if (contentType != null && MediaType.APPLICATION_JSON_TYPE.getExtension().equals(contentType.getExtension())) {
                                             JsonContentSubscriber contentSubscriber = new JsonContentSubscriber(requestContext);
                                             streamedHttpRequest.subscribe(contentSubscriber);
                                         } else {

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/binders/CompletableFutureBodyBinder.java
Patch:
@@ -48,7 +48,7 @@ public Optional<CompletableFuture> bind(Argument<CompletableFuture> argument, Ht
                 CompletableFuture future = new CompletableFuture();
                 StreamedHttpRequest streamedHttpRequest = (StreamedHttpRequest) nativeRequest;
                 Subscriber<HttpContent> subscriber;
-                if(contentType != null && contentType.getExtension().equals(MediaType.JSON.getExtension())) {
+                if(contentType != null && contentType.getExtension().equals(MediaType.APPLICATION_JSON_TYPE.getExtension())) {
 
                     subscriber = new JsonContentSubscriber(nettyHttpRequest) {
                         @Override

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/DefaultBodyAnnotationBinder.java
Patch:
@@ -19,11 +19,11 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class BodyAnnotationBinder<T> implements BodyArgumentBinder<T> {
+public class DefaultBodyAnnotationBinder<T> implements BodyArgumentBinder<T> {
 
     private final ConversionService conversionService;
 
-    public BodyAnnotationBinder(ConversionService conversionService) {
+    public DefaultBodyAnnotationBinder(ConversionService conversionService) {
         this.conversionService = conversionService;
     }
 

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -580,9 +580,9 @@ private ExecutableElementParamInfo populateParameterData(ExecutableElement eleme
                 }
 
                 if (kind == ARRAY) {
-                    ArrayType arrayType = (ArrayType) typeMirror; // FIXME is there an API way of getting this without a cast?
+                    ArrayType arrayType = (ArrayType) typeMirror;
                     TypeMirror componentType = arrayType.getComponentType();
-                    params.addParameter(argName, arrayType.toString());
+                    params.addParameter(argName, modelUtils.resolveTypeReference(arrayType));
                     params.addGenericTypes(argName, Collections.singletonList(modelUtils.resolveTypeReference(componentType)));
                 } else if (kind == DECLARED) {
                     DeclaredType declaredType = (DeclaredType) typeMirror;

File: java-inject/src/main/java/org/particleframework/annotation/processing/BeanDefinitionInjectProcessor.java
Patch:
@@ -475,7 +475,7 @@ public Object visitConfigurationProperty(VariableElement field, Object o) {
                     writer.visitFieldValue(
                             this.concreteClass.getQualifiedName().toString(),
                             qualifierRef,
-                            field.getModifiers().contains(Modifier.PRIVATE),
+                            !field.getModifiers().contains(Modifier.PUBLIC),
                             fieldType,
                             field.getSimpleName().toString(),
                             true);

File: inject/src/main/groovy/org/particleframework/bind/annotation/AnnotatedArgumentBinder.java
Patch:
@@ -34,6 +34,6 @@ public interface AnnotatedArgumentBinder<A extends Annotation, T, S> extends Arg
     /**
      * @return The annotation type
      */
-    Class<A> annotationType();
+    Class<A> getAnnotationType();
 
 }

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/AnnotatedRequestArgumentBinder.java
Patch:
@@ -53,7 +53,7 @@ public Optional<ST> bind(Argument<ST> argument, HttpRequest source) {
             }
 
             @Override
-            public Class<SA> annotationType() {
+            public Class<SA> getAnnotationType() {
                 return annotationType;
             }
         };

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/CookieAnnotationBinder.java
Patch:
@@ -39,7 +39,7 @@ public CookieAnnotationBinder(ConversionService<?> conversionService) {
     }
 
     @Override
-    public Class<Cookie> annotationType() {
+    public Class<Cookie> getAnnotationType() {
         return Cookie.class;
     }
 

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/HeaderAnnotationBinder.java
Patch:
@@ -51,7 +51,7 @@ public Optional<T> bind(Argument<T> argument, HttpRequest source) {
     }
 
     @Override
-    public Class<Header> annotationType() {
+    public Class<Header> getAnnotationType() {
         return Header.class;
     }
 

File: runtime-http/src/main/java/org/particleframework/http/binding/binders/request/ParameterAnnotationBinder.java
Patch:
@@ -37,7 +37,7 @@ public ParameterAnnotationBinder(ConversionService<?> conversionService) {
     }
 
     @Override
-    public Class<Parameter> annotationType() {
+    public Class<Parameter> getAnnotationType() {
         return Parameter.class;
     }
 

File: runtime-green-lightning/src/main/groovy/org/particleframework/http/server/greenlightning/GreenLightningParticleDispatcher.java
Patch:
@@ -36,7 +36,7 @@ public GreenLightningParticleDispatcher(final GreenRuntime runtime, final Applic
 
     @Override
     public boolean restRequest(final HTTPRequestReader request) {
-        final Appendable routePath = new StringBuilder("/");
+        final Appendable routePath = new StringBuilder();
         request.getText("path".getBytes(), routePath);
 
         final Optional<Router> routerBean = applicationContext.findBean(Router.class);

File: runtime-green-lightning/src/main/groovy/org/particleframework/http/server/greenlightning/GreenLightningParticleDispatcher.java
Patch:
@@ -50,7 +50,7 @@ public boolean restRequest(final HTTPRequestReader request) {
 
         routeMatch.ifPresent((RouteMatch route) -> {
             final Object result = route.execute();
-            final NetWritable responseWritable = writer -> writer.writeUTF8Text(result.toString());
+            final Writable responseWritable = writer -> writer.writeUTF8Text(result.toString());
             greenCommandChannel.publishHTTPResponse(request, 200,
                     request.getRequestContext() | HTTPFieldReader.END_OF_RESPONSE,
                     HTTPContentTypeDefaults.TXT,

File: runtime-green-lightning/src/main/groovy/org/particleframework/http/server/greenlightning/ParticleGreenLightningApp.java
Patch:
@@ -23,7 +23,6 @@
 
 
 public class ParticleGreenLightningApp implements GreenApp {
-    protected int ROUTE_ID;
     protected final ApplicationContext applicationContext;
     protected final int port;
     protected final String host;
@@ -38,12 +37,11 @@ public ParticleGreenLightningApp(ApplicationContext applicationContext, String h
     @Override
     public void declareConfiguration(final Builder builder) {
         builder.enableServer(false, false, host, port);
-        ROUTE_ID = builder.registerRoute("/${path}");
     }
 
     public void declareBehavior(final GreenRuntime runtime) {
         final RestListener adder = new GreenLightningParticleDispatcher(runtime, applicationContext);
-        runtime.addRestListener(adder).includeRoutes(ROUTE_ID);
+        runtime.addRestListener(adder).includeAllRoutes();
         this.runtime = runtime;
     }
 

File: java-inject/src/test/groovy/org/particleframework/inject/concurrency/ConcurrentB.java
Patch:
@@ -3,5 +3,5 @@
 import javax.inject.Singleton;
 
 @Singleton
-public class JavaB {
+public class ConcurrentB {
 }
\ No newline at end of file

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpRequestHeaders.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.Set;
 
 /**
+ * Delegates to Netty's {@link io.netty.handler.codec.http.HttpHeaders}
+ *
  * @author Graeme Rocher
  * @since 1.0
  */

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpResponse.java
Patch:
@@ -24,6 +24,8 @@
 import org.particleframework.http.MutableHttpHeaders;
 
 /**
+ * Delegates to Netty's {@link DefaultFullHttpResponse}
+ *
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -56,7 +58,6 @@ public HttpResponse setCharacterEncoding(CharSequence encoding) {
         throw new UnsupportedOperationException("TODO");
     }
 
-
     @Override
     public HttpResponse setStatus(HttpStatus status, CharSequence message) {
         nettyResponse.setStatus(new HttpResponseStatus(status.getCode(), message.toString()));

File: runtime-netty/src/main/groovy/org/particleframework/http/server/netty/NettyHttpServer.java
Patch:
@@ -24,6 +24,7 @@
 import org.particleframework.http.HttpMethod;
 import org.particleframework.http.server.HttpServerConfiguration;
 import org.particleframework.inject.Argument;
+import org.particleframework.inject.ReturnType;
 import org.particleframework.runtime.server.EmbeddedServer;
 import org.particleframework.web.router.RouteMatch;
 import org.particleframework.web.router.Router;
@@ -84,6 +85,8 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws E
                                     // here we need to analyze the binding requirements and if
                                     // the body is required then add an additional handler to the pipeline
                                     // right now only URL parameters are supported
+
+                                    ReturnType returnType = route.getReturnType();
                                     Collection<Argument> requiredArguments = route.getRequiredArguments();
                                     Object result;
                                     if(requiredArguments.isEmpty()) {

File: inject/src/main/groovy/org/particleframework/context/BeanContext.java
Patch:
@@ -4,6 +4,7 @@
 import org.particleframework.inject.BeanConfiguration;
 import org.particleframework.inject.BeanDefinition;
 import org.particleframework.inject.ExecutableHandle;
+import org.particleframework.inject.MethodExecutionHandle;
 
 import java.util.Collection;
 import java.util.Optional;
@@ -210,7 +211,7 @@ default BeanContext registerSingleton(Object singleton) {
      * @param arguments The arguments
      * @return The execution handle
      */
-    <R> Optional<ExecutableHandle<R>> findExecutionHandle(Class<?> beanType, String method, Class...arguments);
+    <R> Optional<MethodExecutionHandle<R>> findExecutionHandle(Class<?> beanType, String method, Class...arguments);
 
     /**
      * Obtain a {@link BeanDefinition} for the given type

File: inject/src/main/groovy/org/particleframework/inject/ExecutableHandle.java
Patch:
@@ -25,6 +25,7 @@
  * @since 1.0
  */
 public interface ExecutableHandle<R> {
+
     /**
      * @return The declaring type
      */

File: router/src/main/groovy/org/particleframework/web/router/RouteMatch.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.particleframework.http.uri.UriMatchInfo;
 import org.particleframework.inject.Argument;
-import org.particleframework.inject.ExecutableHandle;
+import org.particleframework.inject.MethodExecutionHandle;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -30,7 +30,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public interface RouteMatch<R> extends ExecutableHandle<R>, UriMatchInfo, Callable<R> {
+public interface RouteMatch<R> extends MethodExecutionHandle<R>, UriMatchInfo, Callable<R> {
 
     /**
      * <p>Returns the required arguments for this RouteMatch</p>

File: inject/src/main/groovy/org/particleframework/context/env/DefaultEnvironment.java
Patch:
@@ -73,7 +73,9 @@ public Environment addPropertySource(PropertySource propertySource) {
 
     @Override
     public Environment addPackage(String pkg) {
-        this.packages.add(pkg);
+        if(!this.packages.contains(pkg)) {
+            this.packages.add(pkg);
+        }
         return this;
     }
 

File: router/src/main/groovy/org/particleframework/web/router/annotation/Get.java
Patch:
@@ -23,6 +23,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
+ * Annotation that can be applied to method to signify the method receives a {@link org.particleframework.http.HttpMethod#GET}
+ *
  * @author Graeme Rocher
  * @since 1.0
  */
@@ -32,7 +34,7 @@
 @Action
 public @interface Get {
     /**
-     * @return The URI of the GET if not specified inferred from the method name and arguments
+     * @return The URI of the GET route if not specified inferred from the method name and arguments
      */
     String value() default "";
 }

File: router/src/main/groovy/org/particleframework/context/router/RouteBuilder.java
Patch:
@@ -20,6 +20,9 @@
 
 import static org.particleframework.core.naming.conventions.MethodConvention.*;
 /**
+ *
+ * <p>An interface for classes capable of building HTTP routing information.</p>
+ *
  * @author Graeme Rocher
  * @since 1.0
  */

File: inject/src/main/groovy/org/particleframework/context/event/BeanInitializedEventListener.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.EventListener;
 
 /**
- * <p>Allows hooking into bean instantiation at the point prior to when {@link javax.annotation.PostConstruct} initialization hooks have been called and in this case of bean {@link javax.inject.Provider} instances the {@link Provider#get()} method has not yet been invoked</p>
+ * <p>Allows hooking into bean instantiation at the point prior to when {@link javax.annotation.PostConstruct} initialization hooks have been called and in the case of bean {@link javax.inject.Provider} instances the {@link Provider#get()} method has not yet been invoked</p>
  *
  * <p>This allows (for example) customization of bean properties prior to any initialization logic or factory logic.</p>
  *

File: inject/src/main/groovy/org/particleframework/context/env/DefaultEnvironment.java
Patch:
@@ -70,7 +70,7 @@ public <T> Optional<T> getProperty(String name, Class<T> requiredType, Map<Strin
                 }
                 else if(Map.class.isAssignableFrom(requiredType)) {
                     Map<String, Object> subMap = resolveSubMap(name, entries);
-                    return Optional.of((T) subMap);
+                    return conversionService.convert(subMap, requiredType, typeArguments);
                 }
                 else if(PropertyResolver.class.isAssignableFrom(requiredType)) {
                     Map<String, Object> subMap = resolveSubMap(name, entries);

File: runtime/src/main/groovy/org/particleframework/application/context/DefaultApplicationContext.java
Patch:
@@ -6,6 +6,7 @@
 import org.particleframework.core.convert.ConversionService;
 import org.particleframework.core.convert.DefaultConversionService;
 
+import java.util.Map;
 import java.util.Optional;
 
 /**
@@ -83,7 +84,7 @@ public ApplicationContext stop() {
     }
 
     @Override
-    public <T> Optional<T> getProperty(String name, Class<T> requiredType) {
-        return getEnvironment().getProperty(name, requiredType);
+    public <T> Optional<T> getProperty(String name, Class<T> requiredType, Map<String, Class> typeArguments) {
+        return getEnvironment().getProperty(name, requiredType, typeArguments);
     }
 }

File: runtime/src/main/groovy/org/particleframework/config/MapPropertyResolver.java
Patch:
@@ -27,8 +27,8 @@ public MapPropertyResolver(Map<String, Object> map, ConversionService conversion
     }
 
     @Override
-    public <T> Optional<T> getProperty(String name, Class<T> requiredType) {
+    public <T> Optional<T> getProperty(String name, Class<T> requiredType, Map<String, Class> typeArguments) {
         Object value = map.get(name);
-        return conversionService.convert(value, requiredType);
+        return conversionService.convert(value, requiredType, typeArguments);
     }
 }

File: inject/src/main/groovy/org/particleframework/context/DefaultBeanDefinition.java
Patch:
@@ -1,5 +1,6 @@
 package org.particleframework.context;
 
+import org.particleframework.context.exceptions.BeanInstantiationException;
 import org.particleframework.context.exceptions.DependencyInjectionException;
 import org.particleframework.context.exceptions.NoSuchBeanException;
 import org.particleframework.core.reflect.GenericTypeUtils;
@@ -481,7 +482,7 @@ protected Object getBeanForConstructorArgument(BeanResolutionContext resolutionC
             Object bean = ((DefaultBeanContext)context).getBean(resolutionContext, argument.getType(), qualifier);
             path.pop();
             return bean;
-        } catch (NoSuchBeanException e) {
+        } catch (NoSuchBeanException | BeanInstantiationException e) {
             throw new DependencyInjectionException(resolutionContext, argument , e);
         }
     }

File: inject/src/main/groovy/org/particleframework/context/DefaultBeanDefinitionClass.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.particleframework.core.reflect.GenericTypeUtils;
 import org.particleframework.inject.BeanDefinition;
-import org.particleframework.context.exceptions.ContextException;
+import org.particleframework.context.exceptions.BeanContextException;
 import org.particleframework.core.annotation.Internal;
 import org.particleframework.inject.BeanDefinitionClass;
 
@@ -41,7 +41,7 @@ public BeanDefinition<T> load() {
         try {
             return componentDefinitionClass.newInstance();
         } catch (Throwable e) {
-            throw new ContextException("Error loading component definition ["+componentDefinitionClass.getName()+"]: " + e.getMessage(), e);
+            throw new BeanContextException("Error loading component definition ["+componentDefinitionClass.getName()+"]: " + e.getMessage(), e);
         }
     }
 }

File: inject/src/main/groovy/org/particleframework/context/exceptions/BeanContextException.java
Patch:
@@ -6,13 +6,13 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class ContextException extends RuntimeException {
+public class BeanContextException extends RuntimeException {
 
-    public ContextException(String message, Throwable cause) {
+    public BeanContextException(String message, Throwable cause) {
         super(message, cause);
     }
 
-    public ContextException(String message) {
+    public BeanContextException(String message) {
         super(message);
     }
 }

File: inject/src/main/groovy/org/particleframework/context/exceptions/NoSuchBeanException.java
Patch:
@@ -6,7 +6,7 @@
  * @author Graeme Rocher
  * @since 1.0
  */
-public class NoSuchBeanException extends ContextException {
+public class NoSuchBeanException extends BeanContextException {
     public NoSuchBeanException(String message, Throwable cause) {
         super(message, cause);
     }

File: inject/src/main/groovy/org/particleframework/context/Context.java
Patch:
@@ -15,7 +15,9 @@ public interface Context extends LifeCycle {
      * @param <T> The bean type parameter
      * @return An instanceof said bean
      */
-    <T> T getBean(Class<T> beanType);
+    default <T> T getBean(Class<T> beanType) {
+        return getBean(beanType, null);
+    }
 
     /**
      * Obtains a Bean for the given type and qualifier

File: inject/src/main/groovy/org/particleframework/inject/ComponentDefinition.java
Patch:
@@ -39,12 +39,12 @@ public interface ComponentDefinition<T> {
     /**
      * @return The required properties
      */
-    Iterable<MethodInjectionPoint> getRequiredProperties();
+    Iterable<MethodInjectionPoint> getInjectedMethods();
 
     /**
      * @return The required fields
      */
-    Iterable<FieldInjectionPoint> getRequiredFields();
+    Iterable<FieldInjectionPoint> getInjectedFields();
 
     /**
      * @return Methods to call post construct

File: inject/src/main/groovy/org/particleframework/context/DefaultComponentDefinition.java
Patch:
@@ -235,7 +235,7 @@ protected Object getBeanForConstructorArgument(ComponentResolutionContext resolu
             path.pop();
             return bean;
         } catch (NoSuchBeanException e) {
-            throw new DependencyInjectionException("Failed to inject value for parameter ["+argument.getName()+"] of class: " + this.getName() , e);
+            throw new DependencyInjectionException(resolutionContext, argument , e);
         }
     }
 

File: inject/src/main/groovy/org/particleframework/context/DefaultComponentResolutionContext.java
Patch:
@@ -93,7 +93,7 @@ public ConstructorSegment(ComponentDefinition declaringClass, Argument argument)
         public String toString() {
             StringBuilder baseString = new StringBuilder("new ");
             ComponentDefinition declaringType = getDeclaringType();
-            baseString.append(declaringType.getClass().getSimpleName());
+            baseString.append(declaringType.getType().getSimpleName());
             outputArguments(declaringType, baseString);
             return baseString.toString();
         }

